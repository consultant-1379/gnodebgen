/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MeasAndMobParametersXDD_Diff extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "MeasAndMobParametersXDD-Diff";
   }

   public MeasAndMobParametersXDD_Diff_intraAndInterF_MeasAndReport intraAndInterF_MeasAndReport = null;  // optional
   public MeasAndMobParametersXDD_Diff_eventA_MeasAndReport eventA_MeasAndReport = null;  // optional
   public boolean mV2ExtPresent;
   public MeasAndMobParametersXDD_Diff_handoverInterF handoverInterF = null;  // optional
   public MeasAndMobParametersXDD_Diff_handoverLTE_EPC handoverLTE_EPC = null;  // optional
   public MeasAndMobParametersXDD_Diff_handoverLTE_5GC handoverLTE_5GC = null;  // optional
   public boolean mV3ExtPresent;
   public MeasAndMobParametersXDD_Diff_sftd_MeasNR_Neigh sftd_MeasNR_Neigh = null;  // optional
   public MeasAndMobParametersXDD_Diff_sftd_MeasNR_Neigh_DRX sftd_MeasNR_Neigh_DRX = null;  // optional
   public boolean mV4ExtPresent;
   public MeasAndMobParametersXDD_Diff_handoverUTRA_FDD_r16 handoverUTRA_FDD_r16 = null;  // optional
   public Asn1OpenExt extElem1;

   public MeasAndMobParametersXDD_Diff () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MeasAndMobParametersXDD_Diff (
      MeasAndMobParametersXDD_Diff_intraAndInterF_MeasAndReport intraAndInterF_MeasAndReport_,
      MeasAndMobParametersXDD_Diff_eventA_MeasAndReport eventA_MeasAndReport_,
      MeasAndMobParametersXDD_Diff_handoverInterF handoverInterF_,
      MeasAndMobParametersXDD_Diff_handoverLTE_EPC handoverLTE_EPC_,
      MeasAndMobParametersXDD_Diff_handoverLTE_5GC handoverLTE_5GC_,
      MeasAndMobParametersXDD_Diff_sftd_MeasNR_Neigh sftd_MeasNR_Neigh_,
      MeasAndMobParametersXDD_Diff_sftd_MeasNR_Neigh_DRX sftd_MeasNR_Neigh_DRX_,
      MeasAndMobParametersXDD_Diff_handoverUTRA_FDD_r16 handoverUTRA_FDD_r16_
   ) {
      super();
      intraAndInterF_MeasAndReport = intraAndInterF_MeasAndReport_;
      eventA_MeasAndReport = eventA_MeasAndReport_;
      handoverInterF = handoverInterF_;
      handoverLTE_EPC = handoverLTE_EPC_;
      handoverLTE_5GC = handoverLTE_5GC_;
      sftd_MeasNR_Neigh = sftd_MeasNR_Neigh_;
      sftd_MeasNR_Neigh_DRX = sftd_MeasNR_Neigh_DRX_;
      handoverUTRA_FDD_r16 = handoverUTRA_FDD_r16_;
   }

   public void init () {
      intraAndInterF_MeasAndReport = null;
      eventA_MeasAndReport = null;
      handoverInterF = null;
      handoverLTE_EPC = null;
      handoverLTE_5GC = null;
      sftd_MeasNR_Neigh = null;
      sftd_MeasNR_Neigh_DRX = null;
      handoverUTRA_FDD_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 9; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return intraAndInterF_MeasAndReport;
         case 1: return eventA_MeasAndReport;
         case 2: return handoverInterF;
         case 3: return handoverLTE_EPC;
         case 4: return handoverLTE_5GC;
         case 5: return sftd_MeasNR_Neigh;
         case 6: return sftd_MeasNR_Neigh_DRX;
         case 7: return handoverUTRA_FDD_r16;
         case 8: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "intraAndInterF-MeasAndReport";
         case 1: return "eventA-MeasAndReport";
         case 2: return "handoverInterF";
         case 3: return "handoverLTE-EPC";
         case 4: return "handoverLTE-5GC";
         case 5: return "sftd-MeasNR-Neigh";
         case 6: return "sftd-MeasNR-Neigh-DRX";
         case 7: return "handoverUTRA-FDD-r16";
         case 8: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean intraAndInterF_MeasAndReportPresent = buffer.decodeBit ("intraAndInterF_MeasAndReportPresent");
      boolean eventA_MeasAndReportPresent = buffer.decodeBit ("eventA_MeasAndReportPresent");

      // decode intraAndInterF_MeasAndReport

      if (intraAndInterF_MeasAndReportPresent) {
         buffer.getContext().eventDispatcher.startElement("intraAndInterF_MeasAndReport", -1);

         int tval = MeasAndMobParametersXDD_Diff_intraAndInterF_MeasAndReport.decodeEnumValue (buffer);
         intraAndInterF_MeasAndReport = MeasAndMobParametersXDD_Diff_intraAndInterF_MeasAndReport.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("intraAndInterF_MeasAndReport", -1);
      }
      else {
         intraAndInterF_MeasAndReport = null;
      }

      // decode eventA_MeasAndReport

      if (eventA_MeasAndReportPresent) {
         buffer.getContext().eventDispatcher.startElement("eventA_MeasAndReport", -1);

         int tval = MeasAndMobParametersXDD_Diff_eventA_MeasAndReport.decodeEnumValue (buffer);
         eventA_MeasAndReport = MeasAndMobParametersXDD_Diff_eventA_MeasAndReport.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("eventA_MeasAndReport", -1);
      }
      else {
         eventA_MeasAndReport = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV4ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean handoverInterFPresent = buffer.decodeBit ("handoverInterFPresent");

            boolean handoverLTE_EPCPresent = buffer.decodeBit ("handoverLTE_EPCPresent");

            boolean handoverLTE_5GCPresent = buffer.decodeBit ("handoverLTE_5GCPresent");

            // decode handoverInterF

            if (handoverInterFPresent) {
               buffer.getContext().eventDispatcher.startElement("handoverInterF", -1);

               int tval = MeasAndMobParametersXDD_Diff_handoverInterF.decodeEnumValue (buffer);
               handoverInterF = MeasAndMobParametersXDD_Diff_handoverInterF.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("handoverInterF", -1);
            }
            else {
               handoverInterF = null;
            }

            // decode handoverLTE_EPC

            if (handoverLTE_EPCPresent) {
               buffer.getContext().eventDispatcher.startElement("handoverLTE_EPC", -1);

               int tval = MeasAndMobParametersXDD_Diff_handoverLTE_EPC.decodeEnumValue (buffer);
               handoverLTE_EPC = MeasAndMobParametersXDD_Diff_handoverLTE_EPC.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("handoverLTE_EPC", -1);
            }
            else {
               handoverLTE_EPC = null;
            }

            // decode handoverLTE_5GC

            if (handoverLTE_5GCPresent) {
               buffer.getContext().eventDispatcher.startElement("handoverLTE_5GC", -1);

               int tval = MeasAndMobParametersXDD_Diff_handoverLTE_5GC.decodeEnumValue (buffer);
               handoverLTE_5GC = MeasAndMobParametersXDD_Diff_handoverLTE_5GC.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("handoverLTE_5GC", -1);
            }
            else {
               handoverLTE_5GC = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean sftd_MeasNR_NeighPresent = buffer.decodeBit ("sftd_MeasNR_NeighPresent");

            boolean sftd_MeasNR_Neigh_DRXPresent = buffer.decodeBit ("sftd_MeasNR_Neigh_DRXPresent");

            // decode sftd_MeasNR_Neigh

            if (sftd_MeasNR_NeighPresent) {
               buffer.getContext().eventDispatcher.startElement("sftd_MeasNR_Neigh", -1);

               int tval = MeasAndMobParametersXDD_Diff_sftd_MeasNR_Neigh.decodeEnumValue (buffer);
               sftd_MeasNR_Neigh = MeasAndMobParametersXDD_Diff_sftd_MeasNR_Neigh.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("sftd_MeasNR_Neigh", -1);
            }
            else {
               sftd_MeasNR_Neigh = null;
            }

            // decode sftd_MeasNR_Neigh_DRX

            if (sftd_MeasNR_Neigh_DRXPresent) {
               buffer.getContext().eventDispatcher.startElement("sftd_MeasNR_Neigh_DRX", -1);

               int tval = MeasAndMobParametersXDD_Diff_sftd_MeasNR_Neigh_DRX.decodeEnumValue (buffer);
               sftd_MeasNR_Neigh_DRX = MeasAndMobParametersXDD_Diff_sftd_MeasNR_Neigh_DRX.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("sftd_MeasNR_Neigh_DRX", -1);
            }
            else {
               sftd_MeasNR_Neigh_DRX = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV4ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean handoverUTRA_FDD_r16Present = buffer.decodeBit ("handoverUTRA_FDD_r16Present");

            // decode handoverUTRA_FDD_r16

            if (handoverUTRA_FDD_r16Present) {
               buffer.getContext().eventDispatcher.startElement("handoverUTRA_FDD_r16", -1);

               int tval = MeasAndMobParametersXDD_Diff_handoverUTRA_FDD_r16.decodeEnumValue (buffer);
               handoverUTRA_FDD_r16 = MeasAndMobParametersXDD_Diff_handoverUTRA_FDD_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("handoverUTRA_FDD_r16", -1);
            }
            else {
               handoverUTRA_FDD_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (intraAndInterF_MeasAndReport != null) intraAndInterF_MeasAndReport.print (_sb, "intraAndInterF_MeasAndReport", _level+1);
      if (eventA_MeasAndReport != null) eventA_MeasAndReport.print (_sb, "eventA_MeasAndReport", _level+1);
      if (handoverInterF != null) handoverInterF.print (_sb, "handoverInterF", _level+1);
      if (handoverLTE_EPC != null) handoverLTE_EPC.print (_sb, "handoverLTE_EPC", _level+1);
      if (handoverLTE_5GC != null) handoverLTE_5GC.print (_sb, "handoverLTE_5GC", _level+1);
      if (sftd_MeasNR_Neigh != null) sftd_MeasNR_Neigh.print (_sb, "sftd_MeasNR_Neigh", _level+1);
      if (sftd_MeasNR_Neigh_DRX != null) sftd_MeasNR_Neigh_DRX.print (_sb, "sftd_MeasNR_Neigh_DRX", _level+1);
      if (handoverUTRA_FDD_r16 != null) handoverUTRA_FDD_r16.print (_sb, "handoverUTRA_FDD_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
