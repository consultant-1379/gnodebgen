/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SystemInformationBlockType19_r12_discConfigPS_13 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public SL_DiscRxPoolList_r12 discRxPoolPS_r13;
   public SL_DiscTxPoolList_r12 discTxPoolPS_Common_r13;  // optional

   public SystemInformationBlockType19_r12_discConfigPS_13 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SystemInformationBlockType19_r12_discConfigPS_13 (
      SL_DiscRxPoolList_r12 discRxPoolPS_r13_,
      SL_DiscTxPoolList_r12 discTxPoolPS_Common_r13_
   ) {
      super();
      discRxPoolPS_r13 = discRxPoolPS_r13_;
      discTxPoolPS_Common_r13 = discTxPoolPS_Common_r13_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SystemInformationBlockType19_r12_discConfigPS_13 (
      SL_DiscRxPoolList_r12 discRxPoolPS_r13_
   ) {
      super();
      discRxPoolPS_r13 = discRxPoolPS_r13_;
   }

   public void init () {
      discRxPoolPS_r13 = null;
      discTxPoolPS_Common_r13 = null;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return discRxPoolPS_r13;
         case 1: return discTxPoolPS_Common_r13;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "discRxPoolPS-r13";
         case 1: return "discTxPoolPS-Common-r13";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean discTxPoolPS_Common_r13Present = buffer.decodeBit ("discTxPoolPS_Common_r13Present");

      // decode discRxPoolPS_r13

      buffer.getContext().eventDispatcher.startElement("discRxPoolPS_r13", -1);

      discRxPoolPS_r13 = new SL_DiscRxPoolList_r12();
      discRxPoolPS_r13.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("discRxPoolPS_r13", -1);

      // decode discTxPoolPS_Common_r13

      if (discTxPoolPS_Common_r13Present) {
         buffer.getContext().eventDispatcher.startElement("discTxPoolPS_Common_r13", -1);

         discTxPoolPS_Common_r13 = new SL_DiscTxPoolList_r12();
         discTxPoolPS_Common_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("discTxPoolPS_Common_r13", -1);
      }
      else {
         discTxPoolPS_Common_r13 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (discRxPoolPS_r13 != null) discRxPoolPS_r13.print (_sb, "discRxPoolPS_r13", _level+1);
      if (discTxPoolPS_Common_r13 != null) discTxPoolPS_Common_r13.print (_sb, "discTxPoolPS_Common_r13", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
