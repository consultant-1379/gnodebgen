/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.LPPA_IEs;

import com.objsys.asn1j.runtime.*;

public class SRSConfigurationForOneCell extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPPA_IEsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SRSConfigurationForOneCell";
   }

   public PCI pci;
   public EARFCN ul_earfcn;
   public SRSConfigurationForOneCell_ul_bandwidth ul_bandwidth = null;
   public CPLength ul_cyclicPrefixLength = null;
   public SRSConfigurationForOneCell_srs_BandwidthConfig srs_BandwidthConfig = null;
   public SRSConfigurationForOneCell_srs_Bandwidth srs_Bandwidth = null;
   public SRSConfigurationForOneCell_srs_AntennaPort srs_AntennaPort = null;
   public SRSConfigurationForOneCell_srs_HoppingBandwidth srs_HoppingBandwidth = null;
   public SRSConfigurationForOneCell_srs_cyclicShift srs_cyclicShift = null;
   public Asn1Integer srs_ConfigIndex;
   public SRSConfigurationForOneCell_maxUpPts maxUpPts = null;  // optional
   public Asn1Integer transmissionComb;
   public Asn1Integer freqDomainPosition;
   public Asn1Boolean groupHoppingEnabled;
   public Asn1Integer deltaSS;  // optional
   public SFNInitialisationTime sfnInitialisationTime;
   public Asn1OpenExt extElem1;

   public SRSConfigurationForOneCell () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SRSConfigurationForOneCell (
      PCI pci_,
      EARFCN ul_earfcn_,
      SRSConfigurationForOneCell_ul_bandwidth ul_bandwidth_,
      CPLength ul_cyclicPrefixLength_,
      SRSConfigurationForOneCell_srs_BandwidthConfig srs_BandwidthConfig_,
      SRSConfigurationForOneCell_srs_Bandwidth srs_Bandwidth_,
      SRSConfigurationForOneCell_srs_AntennaPort srs_AntennaPort_,
      SRSConfigurationForOneCell_srs_HoppingBandwidth srs_HoppingBandwidth_,
      SRSConfigurationForOneCell_srs_cyclicShift srs_cyclicShift_,
      Asn1Integer srs_ConfigIndex_,
      SRSConfigurationForOneCell_maxUpPts maxUpPts_,
      Asn1Integer transmissionComb_,
      Asn1Integer freqDomainPosition_,
      Asn1Boolean groupHoppingEnabled_,
      Asn1Integer deltaSS_,
      SFNInitialisationTime sfnInitialisationTime_
   ) {
      super();
      pci = pci_;
      ul_earfcn = ul_earfcn_;
      ul_bandwidth = ul_bandwidth_;
      ul_cyclicPrefixLength = ul_cyclicPrefixLength_;
      srs_BandwidthConfig = srs_BandwidthConfig_;
      srs_Bandwidth = srs_Bandwidth_;
      srs_AntennaPort = srs_AntennaPort_;
      srs_HoppingBandwidth = srs_HoppingBandwidth_;
      srs_cyclicShift = srs_cyclicShift_;
      srs_ConfigIndex = srs_ConfigIndex_;
      maxUpPts = maxUpPts_;
      transmissionComb = transmissionComb_;
      freqDomainPosition = freqDomainPosition_;
      groupHoppingEnabled = groupHoppingEnabled_;
      deltaSS = deltaSS_;
      sfnInitialisationTime = sfnInitialisationTime_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SRSConfigurationForOneCell (
      PCI pci_,
      EARFCN ul_earfcn_,
      SRSConfigurationForOneCell_ul_bandwidth ul_bandwidth_,
      CPLength ul_cyclicPrefixLength_,
      SRSConfigurationForOneCell_srs_BandwidthConfig srs_BandwidthConfig_,
      SRSConfigurationForOneCell_srs_Bandwidth srs_Bandwidth_,
      SRSConfigurationForOneCell_srs_AntennaPort srs_AntennaPort_,
      SRSConfigurationForOneCell_srs_HoppingBandwidth srs_HoppingBandwidth_,
      SRSConfigurationForOneCell_srs_cyclicShift srs_cyclicShift_,
      Asn1Integer srs_ConfigIndex_,
      Asn1Integer transmissionComb_,
      Asn1Integer freqDomainPosition_,
      Asn1Boolean groupHoppingEnabled_,
      SFNInitialisationTime sfnInitialisationTime_
   ) {
      super();
      pci = pci_;
      ul_earfcn = ul_earfcn_;
      ul_bandwidth = ul_bandwidth_;
      ul_cyclicPrefixLength = ul_cyclicPrefixLength_;
      srs_BandwidthConfig = srs_BandwidthConfig_;
      srs_Bandwidth = srs_Bandwidth_;
      srs_AntennaPort = srs_AntennaPort_;
      srs_HoppingBandwidth = srs_HoppingBandwidth_;
      srs_cyclicShift = srs_cyclicShift_;
      srs_ConfigIndex = srs_ConfigIndex_;
      transmissionComb = transmissionComb_;
      freqDomainPosition = freqDomainPosition_;
      groupHoppingEnabled = groupHoppingEnabled_;
      sfnInitialisationTime = sfnInitialisationTime_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SRSConfigurationForOneCell (long pci_,
      long ul_earfcn_,
      SRSConfigurationForOneCell_ul_bandwidth ul_bandwidth_,
      CPLength ul_cyclicPrefixLength_,
      SRSConfigurationForOneCell_srs_BandwidthConfig srs_BandwidthConfig_,
      SRSConfigurationForOneCell_srs_Bandwidth srs_Bandwidth_,
      SRSConfigurationForOneCell_srs_AntennaPort srs_AntennaPort_,
      SRSConfigurationForOneCell_srs_HoppingBandwidth srs_HoppingBandwidth_,
      SRSConfigurationForOneCell_srs_cyclicShift srs_cyclicShift_,
      long srs_ConfigIndex_,
      SRSConfigurationForOneCell_maxUpPts maxUpPts_,
      long transmissionComb_,
      long freqDomainPosition_,
      boolean groupHoppingEnabled_,
      long deltaSS_,
      SFNInitialisationTime sfnInitialisationTime_
   ) {
      super();
      pci = new PCI (pci_);
      ul_earfcn = new EARFCN (ul_earfcn_);
      ul_bandwidth = ul_bandwidth_;
      ul_cyclicPrefixLength = ul_cyclicPrefixLength_;
      srs_BandwidthConfig = srs_BandwidthConfig_;
      srs_Bandwidth = srs_Bandwidth_;
      srs_AntennaPort = srs_AntennaPort_;
      srs_HoppingBandwidth = srs_HoppingBandwidth_;
      srs_cyclicShift = srs_cyclicShift_;
      srs_ConfigIndex = new Asn1Integer (srs_ConfigIndex_);
      maxUpPts = maxUpPts_;
      transmissionComb = new Asn1Integer (transmissionComb_);
      freqDomainPosition = new Asn1Integer (freqDomainPosition_);
      groupHoppingEnabled = new Asn1Boolean (groupHoppingEnabled_);
      deltaSS = new Asn1Integer (deltaSS_);
      sfnInitialisationTime = sfnInitialisationTime_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public SRSConfigurationForOneCell (
      long pci_,
      long ul_earfcn_,
      SRSConfigurationForOneCell_ul_bandwidth ul_bandwidth_,
      CPLength ul_cyclicPrefixLength_,
      SRSConfigurationForOneCell_srs_BandwidthConfig srs_BandwidthConfig_,
      SRSConfigurationForOneCell_srs_Bandwidth srs_Bandwidth_,
      SRSConfigurationForOneCell_srs_AntennaPort srs_AntennaPort_,
      SRSConfigurationForOneCell_srs_HoppingBandwidth srs_HoppingBandwidth_,
      SRSConfigurationForOneCell_srs_cyclicShift srs_cyclicShift_,
      long srs_ConfigIndex_,
      long transmissionComb_,
      long freqDomainPosition_,
      boolean groupHoppingEnabled_,
      SFNInitialisationTime sfnInitialisationTime_
   ) {
      super();
      pci = new PCI (pci_);
      ul_earfcn = new EARFCN (ul_earfcn_);
      ul_bandwidth = ul_bandwidth_;
      ul_cyclicPrefixLength = ul_cyclicPrefixLength_;
      srs_BandwidthConfig = srs_BandwidthConfig_;
      srs_Bandwidth = srs_Bandwidth_;
      srs_AntennaPort = srs_AntennaPort_;
      srs_HoppingBandwidth = srs_HoppingBandwidth_;
      srs_cyclicShift = srs_cyclicShift_;
      srs_ConfigIndex = new Asn1Integer (srs_ConfigIndex_);
      transmissionComb = new Asn1Integer (transmissionComb_);
      freqDomainPosition = new Asn1Integer (freqDomainPosition_);
      groupHoppingEnabled = new Asn1Boolean (groupHoppingEnabled_);
      sfnInitialisationTime = sfnInitialisationTime_;
   }

   public void init () {
      pci = null;
      ul_earfcn = null;
      ul_bandwidth = null;
      ul_cyclicPrefixLength = null;
      srs_BandwidthConfig = null;
      srs_Bandwidth = null;
      srs_AntennaPort = null;
      srs_HoppingBandwidth = null;
      srs_cyclicShift = null;
      srs_ConfigIndex = null;
      maxUpPts = null;
      transmissionComb = null;
      freqDomainPosition = null;
      groupHoppingEnabled = null;
      deltaSS = null;
      sfnInitialisationTime = null;
      extElem1 = null;
   }

   public int getElementCount() { return 17; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return pci;
         case 1: return ul_earfcn;
         case 2: return ul_bandwidth;
         case 3: return ul_cyclicPrefixLength;
         case 4: return srs_BandwidthConfig;
         case 5: return srs_Bandwidth;
         case 6: return srs_AntennaPort;
         case 7: return srs_HoppingBandwidth;
         case 8: return srs_cyclicShift;
         case 9: return srs_ConfigIndex;
         case 10: return maxUpPts;
         case 11: return transmissionComb;
         case 12: return freqDomainPosition;
         case 13: return groupHoppingEnabled;
         case 14: return deltaSS;
         case 15: return sfnInitialisationTime;
         case 16: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "pci";
         case 1: return "ul-earfcn";
         case 2: return "ul-bandwidth";
         case 3: return "ul-cyclicPrefixLength";
         case 4: return "srs-BandwidthConfig";
         case 5: return "srs-Bandwidth";
         case 6: return "srs-AntennaPort";
         case 7: return "srs-HoppingBandwidth";
         case 8: return "srs-cyclicShift";
         case 9: return "srs-ConfigIndex";
         case 10: return "maxUpPts";
         case 11: return "transmissionComb";
         case 12: return "freqDomainPosition";
         case 13: return "groupHoppingEnabled";
         case 14: return "deltaSS";
         case 15: return "sfnInitialisationTime";
         case 16: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean maxUpPtsPresent = buffer.decodeBit ("maxUpPtsPresent");
      boolean deltaSSPresent = buffer.decodeBit ("deltaSSPresent");

      // decode pci

      buffer.getContext().eventDispatcher.startElement("pci", -1);

      pci = new PCI();
      pci.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("pci", -1);

      // decode ul_earfcn

      buffer.getContext().eventDispatcher.startElement("ul_earfcn", -1);

      ul_earfcn = new EARFCN();
      ul_earfcn.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("ul_earfcn", -1);

      // decode ul_bandwidth

      buffer.getContext().eventDispatcher.startElement("ul_bandwidth", -1);

      {
         int tval = SRSConfigurationForOneCell_ul_bandwidth.decodeEnumValue (buffer);
         ul_bandwidth = SRSConfigurationForOneCell_ul_bandwidth.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("ul_bandwidth", -1);

      // decode ul_cyclicPrefixLength

      buffer.getContext().eventDispatcher.startElement("ul_cyclicPrefixLength", -1);

      {
         int tval = CPLength.decodeEnumValue (buffer);
         ul_cyclicPrefixLength = CPLength.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("ul_cyclicPrefixLength", -1);

      // decode srs_BandwidthConfig

      buffer.getContext().eventDispatcher.startElement("srs_BandwidthConfig", -1);

      {
         int tval = SRSConfigurationForOneCell_srs_BandwidthConfig.decodeEnumValue (buffer);
         srs_BandwidthConfig = SRSConfigurationForOneCell_srs_BandwidthConfig.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("srs_BandwidthConfig", -1);

      // decode srs_Bandwidth

      buffer.getContext().eventDispatcher.startElement("srs_Bandwidth", -1);

      {
         int tval = SRSConfigurationForOneCell_srs_Bandwidth.decodeEnumValue (buffer);
         srs_Bandwidth = SRSConfigurationForOneCell_srs_Bandwidth.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("srs_Bandwidth", -1);

      // decode srs_AntennaPort

      buffer.getContext().eventDispatcher.startElement("srs_AntennaPort", -1);

      {
         int tval = SRSConfigurationForOneCell_srs_AntennaPort.decodeEnumValue (buffer);
         srs_AntennaPort = SRSConfigurationForOneCell_srs_AntennaPort.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("srs_AntennaPort", -1);

      // decode srs_HoppingBandwidth

      buffer.getContext().eventDispatcher.startElement("srs_HoppingBandwidth", -1);

      {
         int tval = SRSConfigurationForOneCell_srs_HoppingBandwidth.decodeEnumValue (buffer);
         srs_HoppingBandwidth = SRSConfigurationForOneCell_srs_HoppingBandwidth.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("srs_HoppingBandwidth", -1);

      // decode srs_cyclicShift

      buffer.getContext().eventDispatcher.startElement("srs_cyclicShift", -1);

      {
         int tval = SRSConfigurationForOneCell_srs_cyclicShift.decodeEnumValue (buffer);
         srs_cyclicShift = SRSConfigurationForOneCell_srs_cyclicShift.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("srs_cyclicShift", -1);

      // decode srs_ConfigIndex

      buffer.getContext().eventDispatcher.startElement("srs_ConfigIndex", -1);

      srs_ConfigIndex = new Asn1Integer();
      srs_ConfigIndex.decode (buffer, 0, 1023);

      buffer.invokeCharacters(srs_ConfigIndex.toString());
      buffer.getContext().eventDispatcher.endElement("srs_ConfigIndex", -1);

      // decode maxUpPts

      if (maxUpPtsPresent) {
         buffer.getContext().eventDispatcher.startElement("maxUpPts", -1);

         int tval = SRSConfigurationForOneCell_maxUpPts.decodeEnumValue (buffer);
         maxUpPts = SRSConfigurationForOneCell_maxUpPts.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("maxUpPts", -1);
      }
      else {
         maxUpPts = null;
      }

      // decode transmissionComb

      buffer.getContext().eventDispatcher.startElement("transmissionComb", -1);

      transmissionComb = new Asn1Integer();
      transmissionComb.decode (buffer, 0, 1);

      buffer.invokeCharacters(transmissionComb.toString());
      buffer.getContext().eventDispatcher.endElement("transmissionComb", -1);

      // decode freqDomainPosition

      buffer.getContext().eventDispatcher.startElement("freqDomainPosition", -1);

      freqDomainPosition = new Asn1Integer();
      freqDomainPosition.decode (buffer, 0, 23);

      buffer.invokeCharacters(freqDomainPosition.toString());
      buffer.getContext().eventDispatcher.endElement("freqDomainPosition", -1);

      // decode groupHoppingEnabled

      buffer.getContext().eventDispatcher.startElement("groupHoppingEnabled", -1);

      groupHoppingEnabled = new Asn1Boolean();
      groupHoppingEnabled.decode (buffer);

      buffer.invokeCharacters(groupHoppingEnabled.toString());
      buffer.getContext().eventDispatcher.endElement("groupHoppingEnabled", -1);

      // decode deltaSS

      if (deltaSSPresent) {
         buffer.getContext().eventDispatcher.startElement("deltaSS", -1);

         deltaSS = new Asn1Integer();
         deltaSS.decode (buffer, 0, 29);

         buffer.invokeCharacters(deltaSS.toString());
         buffer.getContext().eventDispatcher.endElement("deltaSS", -1);
      }
      else {
         deltaSS = null;
      }

      // decode sfnInitialisationTime

      buffer.getContext().eventDispatcher.startElement("sfnInitialisationTime", -1);

      sfnInitialisationTime = new SFNInitialisationTime();
      sfnInitialisationTime.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("sfnInitialisationTime", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (pci != null) pci.print (_sb, "pci", _level+1);
      if (ul_earfcn != null) ul_earfcn.print (_sb, "ul_earfcn", _level+1);
      if (ul_bandwidth != null) ul_bandwidth.print (_sb, "ul_bandwidth", _level+1);
      if (ul_cyclicPrefixLength != null) ul_cyclicPrefixLength.print (_sb, "ul_cyclicPrefixLength", _level+1);
      if (srs_BandwidthConfig != null) srs_BandwidthConfig.print (_sb, "srs_BandwidthConfig", _level+1);
      if (srs_Bandwidth != null) srs_Bandwidth.print (_sb, "srs_Bandwidth", _level+1);
      if (srs_AntennaPort != null) srs_AntennaPort.print (_sb, "srs_AntennaPort", _level+1);
      if (srs_HoppingBandwidth != null) srs_HoppingBandwidth.print (_sb, "srs_HoppingBandwidth", _level+1);
      if (srs_cyclicShift != null) srs_cyclicShift.print (_sb, "srs_cyclicShift", _level+1);
      if (srs_ConfigIndex != null) srs_ConfigIndex.print (_sb, "srs_ConfigIndex", _level+1);
      if (maxUpPts != null) maxUpPts.print (_sb, "maxUpPts", _level+1);
      if (transmissionComb != null) transmissionComb.print (_sb, "transmissionComb", _level+1);
      if (freqDomainPosition != null) freqDomainPosition.print (_sb, "freqDomainPosition", _level+1);
      if (groupHoppingEnabled != null) groupHoppingEnabled.print (_sb, "groupHoppingEnabled", _level+1);
      if (deltaSS != null) deltaSS.print (_sb, "deltaSS", _level+1);
      if (sfnInitialisationTime != null) sfnInitialisationTime.print (_sb, "sfnInitialisationTime", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
