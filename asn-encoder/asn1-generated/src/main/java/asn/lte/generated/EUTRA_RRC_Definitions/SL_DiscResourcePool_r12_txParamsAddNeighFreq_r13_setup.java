/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SL_DiscResourcePool_r12_txParamsAddNeighFreq_r13_setup extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public PhysCellIdList_r13 physCellId_r13;
   public P_Max p_Max;  // optional
   public TDD_Config tdd_Config_r13;  // optional
   public TDD_Config_v1130 tdd_Config_v1130;  // optional
   public SL_DiscResourcePool_r12_txParamsAddNeighFreq_r13_setup_freqInfo freqInfo;
   public Asn1Integer referenceSignalPower;
   public Asn1Integer syncConfigIndex_r13;  // optional

   public SL_DiscResourcePool_r12_txParamsAddNeighFreq_r13_setup () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SL_DiscResourcePool_r12_txParamsAddNeighFreq_r13_setup (
      PhysCellIdList_r13 physCellId_r13_,
      P_Max p_Max_,
      TDD_Config tdd_Config_r13_,
      TDD_Config_v1130 tdd_Config_v1130_,
      SL_DiscResourcePool_r12_txParamsAddNeighFreq_r13_setup_freqInfo freqInfo_,
      Asn1Integer referenceSignalPower_,
      Asn1Integer syncConfigIndex_r13_
   ) {
      super();
      physCellId_r13 = physCellId_r13_;
      p_Max = p_Max_;
      tdd_Config_r13 = tdd_Config_r13_;
      tdd_Config_v1130 = tdd_Config_v1130_;
      freqInfo = freqInfo_;
      referenceSignalPower = referenceSignalPower_;
      syncConfigIndex_r13 = syncConfigIndex_r13_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SL_DiscResourcePool_r12_txParamsAddNeighFreq_r13_setup (
      PhysCellIdList_r13 physCellId_r13_,
      SL_DiscResourcePool_r12_txParamsAddNeighFreq_r13_setup_freqInfo freqInfo_,
      Asn1Integer referenceSignalPower_
   ) {
      super();
      physCellId_r13 = physCellId_r13_;
      freqInfo = freqInfo_;
      referenceSignalPower = referenceSignalPower_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SL_DiscResourcePool_r12_txParamsAddNeighFreq_r13_setup (PhysCellIdList_r13 physCellId_r13_,
      long p_Max_,
      TDD_Config tdd_Config_r13_,
      TDD_Config_v1130 tdd_Config_v1130_,
      SL_DiscResourcePool_r12_txParamsAddNeighFreq_r13_setup_freqInfo freqInfo_,
      long referenceSignalPower_,
      long syncConfigIndex_r13_
   ) {
      super();
      physCellId_r13 = physCellId_r13_;
      p_Max = new P_Max (p_Max_);
      tdd_Config_r13 = tdd_Config_r13_;
      tdd_Config_v1130 = tdd_Config_v1130_;
      freqInfo = freqInfo_;
      referenceSignalPower = new Asn1Integer (referenceSignalPower_);
      syncConfigIndex_r13 = new Asn1Integer (syncConfigIndex_r13_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public SL_DiscResourcePool_r12_txParamsAddNeighFreq_r13_setup (
      PhysCellIdList_r13 physCellId_r13_,
      SL_DiscResourcePool_r12_txParamsAddNeighFreq_r13_setup_freqInfo freqInfo_,
      long referenceSignalPower_
   ) {
      super();
      physCellId_r13 = physCellId_r13_;
      freqInfo = freqInfo_;
      referenceSignalPower = new Asn1Integer (referenceSignalPower_);
   }

   public void init () {
      physCellId_r13 = null;
      p_Max = null;
      tdd_Config_r13 = null;
      tdd_Config_v1130 = null;
      freqInfo = null;
      referenceSignalPower = null;
      syncConfigIndex_r13 = null;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return physCellId_r13;
         case 1: return p_Max;
         case 2: return tdd_Config_r13;
         case 3: return tdd_Config_v1130;
         case 4: return freqInfo;
         case 5: return referenceSignalPower;
         case 6: return syncConfigIndex_r13;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "physCellId-r13";
         case 1: return "p-Max";
         case 2: return "tdd-Config-r13";
         case 3: return "tdd-Config-v1130";
         case 4: return "freqInfo";
         case 5: return "referenceSignalPower";
         case 6: return "syncConfigIndex-r13";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean p_MaxPresent = buffer.decodeBit ("p_MaxPresent");
      boolean tdd_Config_r13Present = buffer.decodeBit ("tdd_Config_r13Present");
      boolean tdd_Config_v1130Present = buffer.decodeBit ("tdd_Config_v1130Present");
      boolean syncConfigIndex_r13Present = buffer.decodeBit ("syncConfigIndex_r13Present");

      // decode physCellId_r13

      buffer.getContext().eventDispatcher.startElement("physCellId_r13", -1);

      physCellId_r13 = new PhysCellIdList_r13();
      physCellId_r13.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("physCellId_r13", -1);

      // decode p_Max

      if (p_MaxPresent) {
         buffer.getContext().eventDispatcher.startElement("p_Max", -1);

         p_Max = new P_Max();
         p_Max.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("p_Max", -1);
      }
      else {
         p_Max = null;
      }

      // decode tdd_Config_r13

      if (tdd_Config_r13Present) {
         buffer.getContext().eventDispatcher.startElement("tdd_Config_r13", -1);

         tdd_Config_r13 = new TDD_Config();
         tdd_Config_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("tdd_Config_r13", -1);
      }
      else {
         tdd_Config_r13 = null;
      }

      // decode tdd_Config_v1130

      if (tdd_Config_v1130Present) {
         buffer.getContext().eventDispatcher.startElement("tdd_Config_v1130", -1);

         tdd_Config_v1130 = new TDD_Config_v1130();
         tdd_Config_v1130.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("tdd_Config_v1130", -1);
      }
      else {
         tdd_Config_v1130 = null;
      }

      // decode freqInfo

      buffer.getContext().eventDispatcher.startElement("freqInfo", -1);

      freqInfo = new SL_DiscResourcePool_r12_txParamsAddNeighFreq_r13_setup_freqInfo();
      freqInfo.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("freqInfo", -1);

      // decode referenceSignalPower

      buffer.getContext().eventDispatcher.startElement("referenceSignalPower", -1);

      referenceSignalPower = new Asn1Integer();
      referenceSignalPower.decode (buffer, -60, 50);

      buffer.invokeCharacters(referenceSignalPower.toString());
      buffer.getContext().eventDispatcher.endElement("referenceSignalPower", -1);

      // decode syncConfigIndex_r13

      if (syncConfigIndex_r13Present) {
         buffer.getContext().eventDispatcher.startElement("syncConfigIndex_r13", -1);

         syncConfigIndex_r13 = new Asn1Integer();
         syncConfigIndex_r13.decode (buffer, 0, 15);

         buffer.invokeCharacters(syncConfigIndex_r13.toString());
         buffer.getContext().eventDispatcher.endElement("syncConfigIndex_r13", -1);
      }
      else {
         syncConfigIndex_r13 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (physCellId_r13 != null) physCellId_r13.print (_sb, "physCellId_r13", _level+1);
      if (p_Max != null) p_Max.print (_sb, "p_Max", _level+1);
      if (tdd_Config_r13 != null) tdd_Config_r13.print (_sb, "tdd_Config_r13", _level+1);
      if (tdd_Config_v1130 != null) tdd_Config_v1130.print (_sb, "tdd_Config_v1130", _level+1);
      if (freqInfo != null) freqInfo.print (_sb, "freqInfo", _level+1);
      if (referenceSignalPower != null) referenceSignalPower.print (_sb, "referenceSignalPower", _level+1);
      if (syncConfigIndex_r13 != null) syncConfigIndex_r13.print (_sb, "syncConfigIndex_r13", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
