/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class ServingCellConfig_sCellDeactivationTimer extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ENUMERATED";
   }

   // Integer constants for switch-case
   public static final int _MS20 = 0;
   public static final int _MS40 = 1;
   public static final int _MS80 = 2;
   public static final int _MS160 = 3;
   public static final int _MS200 = 4;
   public static final int _MS240 = 5;
   public static final int _MS320 = 6;
   public static final int _MS400 = 7;
   public static final int _MS480 = 8;
   public static final int _MS520 = 9;
   public static final int _MS640 = 10;
   public static final int _MS720 = 11;
   public static final int _MS840 = 12;
   public static final int _MS1280 = 13;
   public static final int _SPARE2 = 14;
   public static final int _SPARE1 = 15;

   // Singleton instances of ServingCellConfig_sCellDeactivationTimer
   protected static final ServingCellConfig_sCellDeactivationTimer _ms20 = new ServingCellConfig_sCellDeactivationTimer(0);
   protected static final ServingCellConfig_sCellDeactivationTimer _ms40 = new ServingCellConfig_sCellDeactivationTimer(1);
   protected static final ServingCellConfig_sCellDeactivationTimer _ms80 = new ServingCellConfig_sCellDeactivationTimer(2);
   protected static final ServingCellConfig_sCellDeactivationTimer _ms160 = new ServingCellConfig_sCellDeactivationTimer(3);
   protected static final ServingCellConfig_sCellDeactivationTimer _ms200 = new ServingCellConfig_sCellDeactivationTimer(4);
   protected static final ServingCellConfig_sCellDeactivationTimer _ms240 = new ServingCellConfig_sCellDeactivationTimer(5);
   protected static final ServingCellConfig_sCellDeactivationTimer _ms320 = new ServingCellConfig_sCellDeactivationTimer(6);
   protected static final ServingCellConfig_sCellDeactivationTimer _ms400 = new ServingCellConfig_sCellDeactivationTimer(7);
   protected static final ServingCellConfig_sCellDeactivationTimer _ms480 = new ServingCellConfig_sCellDeactivationTimer(8);
   protected static final ServingCellConfig_sCellDeactivationTimer _ms520 = new ServingCellConfig_sCellDeactivationTimer(9);
   protected static final ServingCellConfig_sCellDeactivationTimer _ms640 = new ServingCellConfig_sCellDeactivationTimer(10);
   protected static final ServingCellConfig_sCellDeactivationTimer _ms720 = new ServingCellConfig_sCellDeactivationTimer(11);
   protected static final ServingCellConfig_sCellDeactivationTimer _ms840 = new ServingCellConfig_sCellDeactivationTimer(12);
   protected static final ServingCellConfig_sCellDeactivationTimer _ms1280 = new ServingCellConfig_sCellDeactivationTimer(13);
   protected static final ServingCellConfig_sCellDeactivationTimer _spare2 = new ServingCellConfig_sCellDeactivationTimer(14);
   protected static final ServingCellConfig_sCellDeactivationTimer _spare1 = new ServingCellConfig_sCellDeactivationTimer(15);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    *   7
    *   8
    *   9
    *   10
    *   11
    *   12
    *   13
    *   14
    *   15
    */
   protected ServingCellConfig_sCellDeactivationTimer (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for ms20.
    */
   public static ServingCellConfig_sCellDeactivationTimer ms20() {
      return _ms20;
   }

   /**
    * Singleton accessor method for ms40.
    */
   public static ServingCellConfig_sCellDeactivationTimer ms40() {
      return _ms40;
   }

   /**
    * Singleton accessor method for ms80.
    */
   public static ServingCellConfig_sCellDeactivationTimer ms80() {
      return _ms80;
   }

   /**
    * Singleton accessor method for ms160.
    */
   public static ServingCellConfig_sCellDeactivationTimer ms160() {
      return _ms160;
   }

   /**
    * Singleton accessor method for ms200.
    */
   public static ServingCellConfig_sCellDeactivationTimer ms200() {
      return _ms200;
   }

   /**
    * Singleton accessor method for ms240.
    */
   public static ServingCellConfig_sCellDeactivationTimer ms240() {
      return _ms240;
   }

   /**
    * Singleton accessor method for ms320.
    */
   public static ServingCellConfig_sCellDeactivationTimer ms320() {
      return _ms320;
   }

   /**
    * Singleton accessor method for ms400.
    */
   public static ServingCellConfig_sCellDeactivationTimer ms400() {
      return _ms400;
   }

   /**
    * Singleton accessor method for ms480.
    */
   public static ServingCellConfig_sCellDeactivationTimer ms480() {
      return _ms480;
   }

   /**
    * Singleton accessor method for ms520.
    */
   public static ServingCellConfig_sCellDeactivationTimer ms520() {
      return _ms520;
   }

   /**
    * Singleton accessor method for ms640.
    */
   public static ServingCellConfig_sCellDeactivationTimer ms640() {
      return _ms640;
   }

   /**
    * Singleton accessor method for ms720.
    */
   public static ServingCellConfig_sCellDeactivationTimer ms720() {
      return _ms720;
   }

   /**
    * Singleton accessor method for ms840.
    */
   public static ServingCellConfig_sCellDeactivationTimer ms840() {
      return _ms840;
   }

   /**
    * Singleton accessor method for ms1280.
    */
   public static ServingCellConfig_sCellDeactivationTimer ms1280() {
      return _ms1280;
   }

   /**
    * Singleton accessor method for spare2.
    */
   public static ServingCellConfig_sCellDeactivationTimer spare2() {
      return _spare2;
   }

   /**
    * Singleton accessor method for spare1.
    */
   public static ServingCellConfig_sCellDeactivationTimer spare1() {
      return _spare1;
   }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return ServingCellConfig_sCellDeactivationTimer.valueOf( ServingCellConfig_sCellDeactivationTimer.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static ServingCellConfig_sCellDeactivationTimer valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 0: return ms20();
         case 1: return ms40();
         case 2: return ms80();
         case 3: return ms160();
         case 4: return ms200();
         case 5: return ms240();
         case 6: return ms320();
         case 7: return ms400();
         case 8: return ms480();
         case 9: return ms520();
         case 10: return ms640();
         case 11: return ms720();
         case 12: return ms840();
         case 13: return ms1280();
         case 14: return spare2();
         case 15: return spare1();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      ui = (int) buffer.decodeConsWholeNumber (16);

      switch (ui) {
         case 0: ret =  0; break;
         case 1: ret =  1; break;
         case 2: ret =  2; break;
         case 3: ret =  3; break;
         case 4: ret =  4; break;
         case 5: ret =  5; break;
         case 6: ret =  6; break;
         case 7: ret =  7; break;
         case 8: ret =  8; break;
         case 9: ret =  9; break;
         case 10: ret =  10; break;
         case 11: ret =  11; break;
         case 12: ret =  12; break;
         case 13: ret =  13; break;
         case 14: ret =  14; break;
         case 15: ret =  15; break;
         default: throw new Asn1InvalidEnumException (ui);
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (ServingCellConfig_sCellDeactivationTimer.valueOf(ret).toString());

      return ret;
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("ms20");
         case 1: return ("ms40");
         case 2: return ("ms80");
         case 3: return ("ms160");
         case 4: return ("ms200");
         case 5: return ("ms240");
         case 6: return ("ms320");
         case 7: return ("ms400");
         case 8: return ("ms480");
         case 9: return ("ms520");
         case 10: return ("ms640");
         case 11: return ("ms720");
         case 12: return ("ms840");
         case 13: return ("ms1280");
         case 14: return ("spare2");
         case 15: return ("spare1");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
