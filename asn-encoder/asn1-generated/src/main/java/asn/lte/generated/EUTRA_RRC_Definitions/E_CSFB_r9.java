/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class E_CSFB_r9 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "E-CSFB-r9";
   }

   public Asn1OctetString messageContCDMA2000_1XRTT_r9;  // optional
   public E_CSFB_r9_mobilityCDMA2000_HRPD_r9 mobilityCDMA2000_HRPD_r9 = null;  // optional
   public Asn1OctetString messageContCDMA2000_HRPD_r9;  // optional
   public CarrierFreqCDMA2000 redirectCarrierCDMA2000_HRPD_r9;  // optional

   public E_CSFB_r9 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public E_CSFB_r9 (
      Asn1OctetString messageContCDMA2000_1XRTT_r9_,
      E_CSFB_r9_mobilityCDMA2000_HRPD_r9 mobilityCDMA2000_HRPD_r9_,
      Asn1OctetString messageContCDMA2000_HRPD_r9_,
      CarrierFreqCDMA2000 redirectCarrierCDMA2000_HRPD_r9_
   ) {
      super();
      messageContCDMA2000_1XRTT_r9 = messageContCDMA2000_1XRTT_r9_;
      mobilityCDMA2000_HRPD_r9 = mobilityCDMA2000_HRPD_r9_;
      messageContCDMA2000_HRPD_r9 = messageContCDMA2000_HRPD_r9_;
      redirectCarrierCDMA2000_HRPD_r9 = redirectCarrierCDMA2000_HRPD_r9_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public E_CSFB_r9 (byte[] messageContCDMA2000_1XRTT_r9_,
      E_CSFB_r9_mobilityCDMA2000_HRPD_r9 mobilityCDMA2000_HRPD_r9_,
      byte[] messageContCDMA2000_HRPD_r9_,
      CarrierFreqCDMA2000 redirectCarrierCDMA2000_HRPD_r9_
   ) {
      super();
      messageContCDMA2000_1XRTT_r9 = new Asn1OctetString (messageContCDMA2000_1XRTT_r9_);
      mobilityCDMA2000_HRPD_r9 = mobilityCDMA2000_HRPD_r9_;
      messageContCDMA2000_HRPD_r9 = new Asn1OctetString (messageContCDMA2000_HRPD_r9_);
      redirectCarrierCDMA2000_HRPD_r9 = redirectCarrierCDMA2000_HRPD_r9_;
   }

   public void init () {
      messageContCDMA2000_1XRTT_r9 = null;
      mobilityCDMA2000_HRPD_r9 = null;
      messageContCDMA2000_HRPD_r9 = null;
      redirectCarrierCDMA2000_HRPD_r9 = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return messageContCDMA2000_1XRTT_r9;
         case 1: return mobilityCDMA2000_HRPD_r9;
         case 2: return messageContCDMA2000_HRPD_r9;
         case 3: return redirectCarrierCDMA2000_HRPD_r9;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "messageContCDMA2000-1XRTT-r9";
         case 1: return "mobilityCDMA2000-HRPD-r9";
         case 2: return "messageContCDMA2000-HRPD-r9";
         case 3: return "redirectCarrierCDMA2000-HRPD-r9";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean messageContCDMA2000_1XRTT_r9Present = buffer.decodeBit ("messageContCDMA2000_1XRTT_r9Present");
      boolean mobilityCDMA2000_HRPD_r9Present = buffer.decodeBit ("mobilityCDMA2000_HRPD_r9Present");
      boolean messageContCDMA2000_HRPD_r9Present = buffer.decodeBit ("messageContCDMA2000_HRPD_r9Present");
      boolean redirectCarrierCDMA2000_HRPD_r9Present = buffer.decodeBit ("redirectCarrierCDMA2000_HRPD_r9Present");

      // decode messageContCDMA2000_1XRTT_r9

      if (messageContCDMA2000_1XRTT_r9Present) {
         buffer.getContext().eventDispatcher.startElement("messageContCDMA2000_1XRTT_r9", -1);

         messageContCDMA2000_1XRTT_r9 = new Asn1OctetString();
         messageContCDMA2000_1XRTT_r9.decode (buffer);

         buffer.invokeCharacters(messageContCDMA2000_1XRTT_r9.toString());
         buffer.getContext().eventDispatcher.endElement("messageContCDMA2000_1XRTT_r9", -1);
      }
      else {
         messageContCDMA2000_1XRTT_r9 = null;
      }

      // decode mobilityCDMA2000_HRPD_r9

      if (mobilityCDMA2000_HRPD_r9Present) {
         buffer.getContext().eventDispatcher.startElement("mobilityCDMA2000_HRPD_r9", -1);

         int tval = E_CSFB_r9_mobilityCDMA2000_HRPD_r9.decodeEnumValue (buffer);
         mobilityCDMA2000_HRPD_r9 = E_CSFB_r9_mobilityCDMA2000_HRPD_r9.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("mobilityCDMA2000_HRPD_r9", -1);
      }
      else {
         mobilityCDMA2000_HRPD_r9 = null;
      }

      // decode messageContCDMA2000_HRPD_r9

      if (messageContCDMA2000_HRPD_r9Present) {
         buffer.getContext().eventDispatcher.startElement("messageContCDMA2000_HRPD_r9", -1);

         messageContCDMA2000_HRPD_r9 = new Asn1OctetString();
         messageContCDMA2000_HRPD_r9.decode (buffer);

         buffer.invokeCharacters(messageContCDMA2000_HRPD_r9.toString());
         buffer.getContext().eventDispatcher.endElement("messageContCDMA2000_HRPD_r9", -1);
      }
      else {
         messageContCDMA2000_HRPD_r9 = null;
      }

      // decode redirectCarrierCDMA2000_HRPD_r9

      if (redirectCarrierCDMA2000_HRPD_r9Present) {
         buffer.getContext().eventDispatcher.startElement("redirectCarrierCDMA2000_HRPD_r9", -1);

         redirectCarrierCDMA2000_HRPD_r9 = new CarrierFreqCDMA2000();
         redirectCarrierCDMA2000_HRPD_r9.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("redirectCarrierCDMA2000_HRPD_r9", -1);
      }
      else {
         redirectCarrierCDMA2000_HRPD_r9 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (messageContCDMA2000_1XRTT_r9 != null) messageContCDMA2000_1XRTT_r9.print (_sb, "messageContCDMA2000_1XRTT_r9", _level+1);
      if (mobilityCDMA2000_HRPD_r9 != null) mobilityCDMA2000_HRPD_r9.print (_sb, "mobilityCDMA2000_HRPD_r9", _level+1);
      if (messageContCDMA2000_HRPD_r9 != null) messageContCDMA2000_HRPD_r9.print (_sb, "messageContCDMA2000_HRPD_r9", _level+1);
      if (redirectCarrierCDMA2000_HRPD_r9 != null) redirectCarrierCDMA2000_HRPD_r9.print (_sb, "redirectCarrierCDMA2000_HRPD_r9", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
