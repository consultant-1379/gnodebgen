/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.S1AP_IEs;

import com.objsys.asn1j.runtime.*;

public class Paging_eDRX_Cycle extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_S1AP_IEsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "Paging-eDRX-Cycle";
   }

   // Integer constants for switch-case
   public static final int _HFHALF = 0;
   public static final int _HF1 = 1;
   public static final int _HF2 = 2;
   public static final int _HF4 = 3;
   public static final int _HF6 = 4;
   public static final int _HF8 = 5;
   public static final int _HF10 = 6;
   public static final int _HF12 = 7;
   public static final int _HF14 = 8;
   public static final int _HF16 = 9;
   public static final int _HF32 = 10;
   public static final int _HF64 = 11;
   public static final int _HF128 = 12;
   public static final int _HF256 = 13;

   // Singleton instances of Paging_eDRX_Cycle
   protected static final Paging_eDRX_Cycle _hfhalf = new Paging_eDRX_Cycle(0);
   protected static final Paging_eDRX_Cycle _hf1 = new Paging_eDRX_Cycle(1);
   protected static final Paging_eDRX_Cycle _hf2 = new Paging_eDRX_Cycle(2);
   protected static final Paging_eDRX_Cycle _hf4 = new Paging_eDRX_Cycle(3);
   protected static final Paging_eDRX_Cycle _hf6 = new Paging_eDRX_Cycle(4);
   protected static final Paging_eDRX_Cycle _hf8 = new Paging_eDRX_Cycle(5);
   protected static final Paging_eDRX_Cycle _hf10 = new Paging_eDRX_Cycle(6);
   protected static final Paging_eDRX_Cycle _hf12 = new Paging_eDRX_Cycle(7);
   protected static final Paging_eDRX_Cycle _hf14 = new Paging_eDRX_Cycle(8);
   protected static final Paging_eDRX_Cycle _hf16 = new Paging_eDRX_Cycle(9);
   protected static final Paging_eDRX_Cycle _hf32 = new Paging_eDRX_Cycle(10);
   protected static final Paging_eDRX_Cycle _hf64 = new Paging_eDRX_Cycle(11);
   protected static final Paging_eDRX_Cycle _hf128 = new Paging_eDRX_Cycle(12);
   protected static final Paging_eDRX_Cycle _hf256 = new Paging_eDRX_Cycle(13);
   private static Paging_eDRX_Cycle __undefined = new Paging_eDRX_Cycle(-999);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    *   7
    *   8
    *   9
    *   10
    *   11
    *   12
    *   13
    */
   protected Paging_eDRX_Cycle (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for hfhalf.
    */
   public static Paging_eDRX_Cycle hfhalf() {
      return _hfhalf;
   }

   /**
    * Singleton accessor method for hf1.
    */
   public static Paging_eDRX_Cycle hf1() {
      return _hf1;
   }

   /**
    * Singleton accessor method for hf2.
    */
   public static Paging_eDRX_Cycle hf2() {
      return _hf2;
   }

   /**
    * Singleton accessor method for hf4.
    */
   public static Paging_eDRX_Cycle hf4() {
      return _hf4;
   }

   /**
    * Singleton accessor method for hf6.
    */
   public static Paging_eDRX_Cycle hf6() {
      return _hf6;
   }

   /**
    * Singleton accessor method for hf8.
    */
   public static Paging_eDRX_Cycle hf8() {
      return _hf8;
   }

   /**
    * Singleton accessor method for hf10.
    */
   public static Paging_eDRX_Cycle hf10() {
      return _hf10;
   }

   /**
    * Singleton accessor method for hf12.
    */
   public static Paging_eDRX_Cycle hf12() {
      return _hf12;
   }

   /**
    * Singleton accessor method for hf14.
    */
   public static Paging_eDRX_Cycle hf14() {
      return _hf14;
   }

   /**
    * Singleton accessor method for hf16.
    */
   public static Paging_eDRX_Cycle hf16() {
      return _hf16;
   }

   /**
    * Singleton accessor method for hf32.
    */
   public static Paging_eDRX_Cycle hf32() {
      return _hf32;
   }

   /**
    * Singleton accessor method for hf64.
    */
   public static Paging_eDRX_Cycle hf64() {
      return _hf64;
   }

   /**
    * Singleton accessor method for hf128.
    */
   public static Paging_eDRX_Cycle hf128() {
      return _hf128;
   }

   /**
    * Singleton accessor method for hf256.
    */
   public static Paging_eDRX_Cycle hf256() {
      return _hf256;
   }

   /** Undefined value. */
   protected static Paging_eDRX_Cycle __undefined_() { return __undefined; }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return Paging_eDRX_Cycle.valueOf( Paging_eDRX_Cycle.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static Paging_eDRX_Cycle valueOf (int _value)
   {
      switch ((int)_value) {
         case 0: return hfhalf();
         case 1: return hf1();
         case 2: return hf2();
         case 3: return hf4();
         case 4: return hf6();
         case 5: return hf8();
         case 6: return hf10();
         case 7: return hf12();
         case 8: return hf14();
         case 9: return hf16();
         case 10: return hf32();
         case 11: return hf64();
         case 12: return hf128();
         case 13: return hf256();
         default: return __undefined_();
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      boolean extbit = buffer.decodeBit ("extbit");

      if (extbit) {
         ui = buffer.decodeSmallNonNegWholeNumber ();

         return 0x7fffffff;
      }
      else {
         ui = (int) buffer.decodeConsWholeNumber (14);

         switch (ui) {
            case 0: ret =  0; break;
            case 1: ret =  1; break;
            case 2: ret =  2; break;
            case 3: ret =  3; break;
            case 4: ret =  4; break;
            case 5: ret =  5; break;
            case 6: ret =  6; break;
            case 7: ret =  7; break;
            case 8: ret =  8; break;
            case 9: ret =  9; break;
            case 10: ret =  10; break;
            case 11: ret =  11; break;
            case 12: ret =  12; break;
            case 13: ret =  13; break;
            default: throw new Asn1InvalidEnumException (ui);
         }
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (Paging_eDRX_Cycle.valueOf(ret).toString());

      return ret;
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("hfhalf");
         case 1: return ("hf1");
         case 2: return ("hf2");
         case 3: return ("hf4");
         case 4: return ("hf6");
         case 5: return ("hf8");
         case 6: return ("hf10");
         case 7: return ("hf12");
         case 8: return ("hf14");
         case 9: return ("hf16");
         case 10: return ("hf32");
         case 11: return ("hf64");
         case 12: return ("hf128");
         case 13: return ("hf256");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
