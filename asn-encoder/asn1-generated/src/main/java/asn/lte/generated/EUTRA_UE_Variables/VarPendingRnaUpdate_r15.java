/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_UE_Variables;

import com.objsys.asn1j.runtime.*;

public class VarPendingRnaUpdate_r15 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_UE_VariablesRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "VarPendingRnaUpdate-r15";
   }

   public Asn1Boolean pendingRnaUpdate;  // optional

   public VarPendingRnaUpdate_r15 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public VarPendingRnaUpdate_r15 (
      Asn1Boolean pendingRnaUpdate_
   ) {
      super();
      pendingRnaUpdate = pendingRnaUpdate_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public VarPendingRnaUpdate_r15 (boolean pendingRnaUpdate_
   ) {
      super();
      pendingRnaUpdate = new Asn1Boolean (pendingRnaUpdate_);
   }

   public void init () {
      pendingRnaUpdate = null;
   }

   public int getElementCount() { return 1; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return pendingRnaUpdate;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "pendingRnaUpdate";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean pendingRnaUpdatePresent = buffer.decodeBit ("pendingRnaUpdatePresent");

      // decode pendingRnaUpdate

      if (pendingRnaUpdatePresent) {
         buffer.getContext().eventDispatcher.startElement("pendingRnaUpdate", -1);

         pendingRnaUpdate = new Asn1Boolean();
         pendingRnaUpdate.decode (buffer);

         buffer.invokeCharacters(pendingRnaUpdate.toString());
         buffer.getContext().eventDispatcher.endElement("pendingRnaUpdate", -1);
      }
      else {
         pendingRnaUpdate = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (pendingRnaUpdate != null) pendingRnaUpdate.print (_sb, "pendingRnaUpdate", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
