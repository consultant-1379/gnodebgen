/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class CA_ParametersNR_v1630 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CA-ParametersNR-v1630";
   }

   public SimulSRS_ForAntennaSwitching_r16 simulTX_SRS_AntSwitchingInterBandUL_CA_r16;  // optional
   public CA_ParametersNR_v1630_beamManagementType_r16 beamManagementType_r16 = null;  // optional
   public CA_ParametersNR_v1630_intraBandFreqSeparationUL_AggBW_GapBW_r16 intraBandFreqSeparationUL_AggBW_GapBW_r16 = null;  // optional
   public CA_ParametersNR_v1630_interCA_NonAlignedFrame_B_r16 interCA_NonAlignedFrame_B_r16 = null;  // optional

   public CA_ParametersNR_v1630 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CA_ParametersNR_v1630 (
      SimulSRS_ForAntennaSwitching_r16 simulTX_SRS_AntSwitchingInterBandUL_CA_r16_,
      CA_ParametersNR_v1630_beamManagementType_r16 beamManagementType_r16_,
      CA_ParametersNR_v1630_intraBandFreqSeparationUL_AggBW_GapBW_r16 intraBandFreqSeparationUL_AggBW_GapBW_r16_,
      CA_ParametersNR_v1630_interCA_NonAlignedFrame_B_r16 interCA_NonAlignedFrame_B_r16_
   ) {
      super();
      simulTX_SRS_AntSwitchingInterBandUL_CA_r16 = simulTX_SRS_AntSwitchingInterBandUL_CA_r16_;
      beamManagementType_r16 = beamManagementType_r16_;
      intraBandFreqSeparationUL_AggBW_GapBW_r16 = intraBandFreqSeparationUL_AggBW_GapBW_r16_;
      interCA_NonAlignedFrame_B_r16 = interCA_NonAlignedFrame_B_r16_;
   }

   public void init () {
      simulTX_SRS_AntSwitchingInterBandUL_CA_r16 = null;
      beamManagementType_r16 = null;
      intraBandFreqSeparationUL_AggBW_GapBW_r16 = null;
      interCA_NonAlignedFrame_B_r16 = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return simulTX_SRS_AntSwitchingInterBandUL_CA_r16;
         case 1: return beamManagementType_r16;
         case 2: return intraBandFreqSeparationUL_AggBW_GapBW_r16;
         case 3: return interCA_NonAlignedFrame_B_r16;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "simulTX-SRS-AntSwitchingInterBandUL-CA-r16";
         case 1: return "beamManagementType-r16";
         case 2: return "intraBandFreqSeparationUL-AggBW-GapBW-r16";
         case 3: return "interCA-NonAlignedFrame-B-r16";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean simulTX_SRS_AntSwitchingInterBandUL_CA_r16Present = buffer.decodeBit ("simulTX_SRS_AntSwitchingInterBandUL_CA_r16Present");
      boolean beamManagementType_r16Present = buffer.decodeBit ("beamManagementType_r16Present");
      boolean intraBandFreqSeparationUL_AggBW_GapBW_r16Present = buffer.decodeBit ("intraBandFreqSeparationUL_AggBW_GapBW_r16Present");
      boolean interCA_NonAlignedFrame_B_r16Present = buffer.decodeBit ("interCA_NonAlignedFrame_B_r16Present");

      // decode simulTX_SRS_AntSwitchingInterBandUL_CA_r16

      if (simulTX_SRS_AntSwitchingInterBandUL_CA_r16Present) {
         buffer.getContext().eventDispatcher.startElement("simulTX_SRS_AntSwitchingInterBandUL_CA_r16", -1);

         simulTX_SRS_AntSwitchingInterBandUL_CA_r16 = new SimulSRS_ForAntennaSwitching_r16();
         simulTX_SRS_AntSwitchingInterBandUL_CA_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("simulTX_SRS_AntSwitchingInterBandUL_CA_r16", -1);
      }
      else {
         simulTX_SRS_AntSwitchingInterBandUL_CA_r16 = null;
      }

      // decode beamManagementType_r16

      if (beamManagementType_r16Present) {
         buffer.getContext().eventDispatcher.startElement("beamManagementType_r16", -1);

         int tval = CA_ParametersNR_v1630_beamManagementType_r16.decodeEnumValue (buffer);
         beamManagementType_r16 = CA_ParametersNR_v1630_beamManagementType_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("beamManagementType_r16", -1);
      }
      else {
         beamManagementType_r16 = null;
      }

      // decode intraBandFreqSeparationUL_AggBW_GapBW_r16

      if (intraBandFreqSeparationUL_AggBW_GapBW_r16Present) {
         buffer.getContext().eventDispatcher.startElement("intraBandFreqSeparationUL_AggBW_GapBW_r16", -1);

         int tval = CA_ParametersNR_v1630_intraBandFreqSeparationUL_AggBW_GapBW_r16.decodeEnumValue (buffer);
         intraBandFreqSeparationUL_AggBW_GapBW_r16 = CA_ParametersNR_v1630_intraBandFreqSeparationUL_AggBW_GapBW_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("intraBandFreqSeparationUL_AggBW_GapBW_r16", -1);
      }
      else {
         intraBandFreqSeparationUL_AggBW_GapBW_r16 = null;
      }

      // decode interCA_NonAlignedFrame_B_r16

      if (interCA_NonAlignedFrame_B_r16Present) {
         buffer.getContext().eventDispatcher.startElement("interCA_NonAlignedFrame_B_r16", -1);

         int tval = CA_ParametersNR_v1630_interCA_NonAlignedFrame_B_r16.decodeEnumValue (buffer);
         interCA_NonAlignedFrame_B_r16 = CA_ParametersNR_v1630_interCA_NonAlignedFrame_B_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("interCA_NonAlignedFrame_B_r16", -1);
      }
      else {
         interCA_NonAlignedFrame_B_r16 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (simulTX_SRS_AntSwitchingInterBandUL_CA_r16 != null) simulTX_SRS_AntSwitchingInterBandUL_CA_r16.print (_sb, "simulTX_SRS_AntSwitchingInterBandUL_CA_r16", _level+1);
      if (beamManagementType_r16 != null) beamManagementType_r16.print (_sb, "beamManagementType_r16", _level+1);
      if (intraBandFreqSeparationUL_AggBW_GapBW_r16 != null) intraBandFreqSeparationUL_AggBW_GapBW_r16.print (_sb, "intraBandFreqSeparationUL_AggBW_GapBW_r16", _level+1);
      if (interCA_NonAlignedFrame_B_r16 != null) interCA_NonAlignedFrame_B_r16.print (_sb, "interCA_NonAlignedFrame_B_r16", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
