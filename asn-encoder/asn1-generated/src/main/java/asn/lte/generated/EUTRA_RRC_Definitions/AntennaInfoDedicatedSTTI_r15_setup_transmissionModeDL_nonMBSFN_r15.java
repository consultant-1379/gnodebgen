/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class AntennaInfoDedicatedSTTI_r15_setup_transmissionModeDL_nonMBSFN_r15 extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ENUMERATED";
   }

   // Integer constants for switch-case
   public static final int _TM1 = 0;
   public static final int _TM2 = 1;
   public static final int _TM3 = 2;
   public static final int _TM4 = 3;
   public static final int _TM6 = 4;
   public static final int _TM8 = 5;
   public static final int _TM9 = 6;
   public static final int _TM10 = 7;

   // Singleton instances of AntennaInfoDedicatedSTTI_r15_setup_transmissionModeDL_nonMBSFN_r15
   protected static final AntennaInfoDedicatedSTTI_r15_setup_transmissionModeDL_nonMBSFN_r15 _tm1 = new AntennaInfoDedicatedSTTI_r15_setup_transmissionModeDL_nonMBSFN_r15(0);
   protected static final AntennaInfoDedicatedSTTI_r15_setup_transmissionModeDL_nonMBSFN_r15 _tm2 = new AntennaInfoDedicatedSTTI_r15_setup_transmissionModeDL_nonMBSFN_r15(1);
   protected static final AntennaInfoDedicatedSTTI_r15_setup_transmissionModeDL_nonMBSFN_r15 _tm3 = new AntennaInfoDedicatedSTTI_r15_setup_transmissionModeDL_nonMBSFN_r15(2);
   protected static final AntennaInfoDedicatedSTTI_r15_setup_transmissionModeDL_nonMBSFN_r15 _tm4 = new AntennaInfoDedicatedSTTI_r15_setup_transmissionModeDL_nonMBSFN_r15(3);
   protected static final AntennaInfoDedicatedSTTI_r15_setup_transmissionModeDL_nonMBSFN_r15 _tm6 = new AntennaInfoDedicatedSTTI_r15_setup_transmissionModeDL_nonMBSFN_r15(4);
   protected static final AntennaInfoDedicatedSTTI_r15_setup_transmissionModeDL_nonMBSFN_r15 _tm8 = new AntennaInfoDedicatedSTTI_r15_setup_transmissionModeDL_nonMBSFN_r15(5);
   protected static final AntennaInfoDedicatedSTTI_r15_setup_transmissionModeDL_nonMBSFN_r15 _tm9 = new AntennaInfoDedicatedSTTI_r15_setup_transmissionModeDL_nonMBSFN_r15(6);
   protected static final AntennaInfoDedicatedSTTI_r15_setup_transmissionModeDL_nonMBSFN_r15 _tm10 = new AntennaInfoDedicatedSTTI_r15_setup_transmissionModeDL_nonMBSFN_r15(7);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    *   7
    */
   protected AntennaInfoDedicatedSTTI_r15_setup_transmissionModeDL_nonMBSFN_r15 (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for tm1.
    */
   public static AntennaInfoDedicatedSTTI_r15_setup_transmissionModeDL_nonMBSFN_r15 tm1() {
      return _tm1;
   }

   /**
    * Singleton accessor method for tm2.
    */
   public static AntennaInfoDedicatedSTTI_r15_setup_transmissionModeDL_nonMBSFN_r15 tm2() {
      return _tm2;
   }

   /**
    * Singleton accessor method for tm3.
    */
   public static AntennaInfoDedicatedSTTI_r15_setup_transmissionModeDL_nonMBSFN_r15 tm3() {
      return _tm3;
   }

   /**
    * Singleton accessor method for tm4.
    */
   public static AntennaInfoDedicatedSTTI_r15_setup_transmissionModeDL_nonMBSFN_r15 tm4() {
      return _tm4;
   }

   /**
    * Singleton accessor method for tm6.
    */
   public static AntennaInfoDedicatedSTTI_r15_setup_transmissionModeDL_nonMBSFN_r15 tm6() {
      return _tm6;
   }

   /**
    * Singleton accessor method for tm8.
    */
   public static AntennaInfoDedicatedSTTI_r15_setup_transmissionModeDL_nonMBSFN_r15 tm8() {
      return _tm8;
   }

   /**
    * Singleton accessor method for tm9.
    */
   public static AntennaInfoDedicatedSTTI_r15_setup_transmissionModeDL_nonMBSFN_r15 tm9() {
      return _tm9;
   }

   /**
    * Singleton accessor method for tm10.
    */
   public static AntennaInfoDedicatedSTTI_r15_setup_transmissionModeDL_nonMBSFN_r15 tm10() {
      return _tm10;
   }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return AntennaInfoDedicatedSTTI_r15_setup_transmissionModeDL_nonMBSFN_r15.valueOf( AntennaInfoDedicatedSTTI_r15_setup_transmissionModeDL_nonMBSFN_r15.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static AntennaInfoDedicatedSTTI_r15_setup_transmissionModeDL_nonMBSFN_r15 valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 0: return tm1();
         case 1: return tm2();
         case 2: return tm3();
         case 3: return tm4();
         case 4: return tm6();
         case 5: return tm8();
         case 6: return tm9();
         case 7: return tm10();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      ui = (int) buffer.decodeConsWholeNumber (8);

      switch (ui) {
         case 0: ret =  0; break;
         case 1: ret =  1; break;
         case 2: ret =  2; break;
         case 3: ret =  3; break;
         case 4: ret =  4; break;
         case 5: ret =  5; break;
         case 6: ret =  6; break;
         case 7: ret =  7; break;
         default: throw new Asn1InvalidEnumException (ui);
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (AntennaInfoDedicatedSTTI_r15_setup_transmissionModeDL_nonMBSFN_r15.valueOf(ret).toString());

      return ret;
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("tm1");
         case 1: return ("tm2");
         case 2: return ("tm3");
         case 3: return ("tm4");
         case 4: return ("tm6");
         case 5: return ("tm8");
         case 6: return ("tm9");
         case 7: return ("tm10");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
