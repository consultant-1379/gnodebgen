/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_InterNodeDefinitions;

import com.objsys.asn1j.runtime.*;
import asn.lte.generated.NR_RRC_Definitions.RAN_NotificationAreaInfo;
import asn.lte.generated.NR_RRC_Definitions.UEAssistanceInformation;
import asn.lte.generated.NR_RRC_Definitions.NeedForGapsInfoNR_r16;

public class AS_Context extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_InterNodeDefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "AS-Context";
   }

   public ReestablishmentInfo reestablishmentInfo;  // optional
   public ConfigRestrictInfoSCG configRestrictInfo;  // optional
   public boolean mV2ExtPresent;
   public RAN_NotificationAreaInfo ran_NotificationAreaInfo;  // optional
   public boolean mV3ExtPresent;
   public UEAssistanceInformation ueAssistanceInformation;  // optional
   public boolean mV4ExtPresent;
   public BandCombinationInfoSN selectedBandCombinationSN;  // optional
   public boolean mV5ExtPresent;
   public ConfigRestrictInfoDAPS_r16 configRestrictInfoDAPS_r16;  // optional
   public Asn1OctetString sidelinkUEInformationNR_r16;  // optional
   public Asn1OctetString sidelinkUEInformationEUTRA_r16;  // optional
   public Asn1OctetString ueAssistanceInformationEUTRA_r16;  // optional
   public UEAssistanceInformation ueAssistanceInformationSCG_r16;  // optional
   public NeedForGapsInfoNR_r16 needForGapsInfoNR_r16;  // optional
   public Asn1OpenExt extElem1;

   public AS_Context () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public AS_Context (
      ReestablishmentInfo reestablishmentInfo_,
      ConfigRestrictInfoSCG configRestrictInfo_,
      RAN_NotificationAreaInfo ran_NotificationAreaInfo_,
      UEAssistanceInformation ueAssistanceInformation_,
      BandCombinationInfoSN selectedBandCombinationSN_,
      ConfigRestrictInfoDAPS_r16 configRestrictInfoDAPS_r16_,
      Asn1OctetString sidelinkUEInformationNR_r16_,
      Asn1OctetString sidelinkUEInformationEUTRA_r16_,
      Asn1OctetString ueAssistanceInformationEUTRA_r16_,
      UEAssistanceInformation ueAssistanceInformationSCG_r16_,
      NeedForGapsInfoNR_r16 needForGapsInfoNR_r16_
   ) {
      super();
      reestablishmentInfo = reestablishmentInfo_;
      configRestrictInfo = configRestrictInfo_;
      ran_NotificationAreaInfo = ran_NotificationAreaInfo_;
      ueAssistanceInformation = ueAssistanceInformation_;
      selectedBandCombinationSN = selectedBandCombinationSN_;
      configRestrictInfoDAPS_r16 = configRestrictInfoDAPS_r16_;
      sidelinkUEInformationNR_r16 = sidelinkUEInformationNR_r16_;
      sidelinkUEInformationEUTRA_r16 = sidelinkUEInformationEUTRA_r16_;
      ueAssistanceInformationEUTRA_r16 = ueAssistanceInformationEUTRA_r16_;
      ueAssistanceInformationSCG_r16 = ueAssistanceInformationSCG_r16_;
      needForGapsInfoNR_r16 = needForGapsInfoNR_r16_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public AS_Context (ReestablishmentInfo reestablishmentInfo_,
      ConfigRestrictInfoSCG configRestrictInfo_,
      RAN_NotificationAreaInfo ran_NotificationAreaInfo_,
      UEAssistanceInformation ueAssistanceInformation_,
      BandCombinationInfoSN selectedBandCombinationSN_,
      ConfigRestrictInfoDAPS_r16 configRestrictInfoDAPS_r16_,
      byte[] sidelinkUEInformationNR_r16_,
      byte[] sidelinkUEInformationEUTRA_r16_,
      byte[] ueAssistanceInformationEUTRA_r16_,
      UEAssistanceInformation ueAssistanceInformationSCG_r16_,
      NeedForGapsInfoNR_r16 needForGapsInfoNR_r16_
   ) {
      super();
      reestablishmentInfo = reestablishmentInfo_;
      configRestrictInfo = configRestrictInfo_;
      ran_NotificationAreaInfo = ran_NotificationAreaInfo_;
      ueAssistanceInformation = ueAssistanceInformation_;
      selectedBandCombinationSN = selectedBandCombinationSN_;
      configRestrictInfoDAPS_r16 = configRestrictInfoDAPS_r16_;
      sidelinkUEInformationNR_r16 = new Asn1OctetString (sidelinkUEInformationNR_r16_);
      sidelinkUEInformationEUTRA_r16 = new Asn1OctetString (sidelinkUEInformationEUTRA_r16_);
      ueAssistanceInformationEUTRA_r16 = new Asn1OctetString (ueAssistanceInformationEUTRA_r16_);
      ueAssistanceInformationSCG_r16 = ueAssistanceInformationSCG_r16_;
      needForGapsInfoNR_r16 = needForGapsInfoNR_r16_;
   }

   public void init () {
      reestablishmentInfo = null;
      configRestrictInfo = null;
      ran_NotificationAreaInfo = null;
      ueAssistanceInformation = null;
      selectedBandCombinationSN = null;
      configRestrictInfoDAPS_r16 = null;
      sidelinkUEInformationNR_r16 = null;
      sidelinkUEInformationEUTRA_r16 = null;
      ueAssistanceInformationEUTRA_r16 = null;
      ueAssistanceInformationSCG_r16 = null;
      needForGapsInfoNR_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 12; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return reestablishmentInfo;
         case 1: return configRestrictInfo;
         case 2: return ran_NotificationAreaInfo;
         case 3: return ueAssistanceInformation;
         case 4: return selectedBandCombinationSN;
         case 5: return configRestrictInfoDAPS_r16;
         case 6: return sidelinkUEInformationNR_r16;
         case 7: return sidelinkUEInformationEUTRA_r16;
         case 8: return ueAssistanceInformationEUTRA_r16;
         case 9: return ueAssistanceInformationSCG_r16;
         case 10: return needForGapsInfoNR_r16;
         case 11: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "reestablishmentInfo";
         case 1: return "configRestrictInfo";
         case 2: return "ran-NotificationAreaInfo";
         case 3: return "ueAssistanceInformation";
         case 4: return "selectedBandCombinationSN";
         case 5: return "configRestrictInfoDAPS-r16";
         case 6: return "sidelinkUEInformationNR-r16";
         case 7: return "sidelinkUEInformationEUTRA-r16";
         case 8: return "ueAssistanceInformationEUTRA-r16";
         case 9: return "ueAssistanceInformationSCG-r16";
         case 10: return "needForGapsInfoNR-r16";
         case 11: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean reestablishmentInfoPresent = buffer.decodeBit ("reestablishmentInfoPresent");
      boolean configRestrictInfoPresent = buffer.decodeBit ("configRestrictInfoPresent");

      // decode reestablishmentInfo

      if (reestablishmentInfoPresent) {
         buffer.getContext().eventDispatcher.startElement("reestablishmentInfo", -1);

         reestablishmentInfo = new ReestablishmentInfo();
         reestablishmentInfo.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("reestablishmentInfo", -1);
      }
      else {
         reestablishmentInfo = null;
      }

      // decode configRestrictInfo

      if (configRestrictInfoPresent) {
         buffer.getContext().eventDispatcher.startElement("configRestrictInfo", -1);

         configRestrictInfo = new ConfigRestrictInfoSCG();
         configRestrictInfo.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("configRestrictInfo", -1);
      }
      else {
         configRestrictInfo = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV4ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV5ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean ran_NotificationAreaInfoPresent = buffer.decodeBit ("ran_NotificationAreaInfoPresent");

            // decode ran_NotificationAreaInfo

            if (ran_NotificationAreaInfoPresent) {
               buffer.getContext().eventDispatcher.startElement("ran_NotificationAreaInfo", -1);

               ran_NotificationAreaInfo = new RAN_NotificationAreaInfo();
               ran_NotificationAreaInfo.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("ran_NotificationAreaInfo", -1);
            }
            else {
               ran_NotificationAreaInfo = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean ueAssistanceInformationPresent = buffer.decodeBit ("ueAssistanceInformationPresent");

            // decode ueAssistanceInformation

            if (ueAssistanceInformationPresent) {
               buffer.getContext().eventDispatcher.startElement("ueAssistanceInformation", -1);

               Asn1OctetString ueAssistanceInformation_outer = new Asn1OctetString();
               ueAssistanceInformation_outer.decode (buffer);
               if (ueAssistanceInformation_outer.value == null) throw new Asn1Exception("contained type's complete encoding is empty");
               Asn1PerDecodeBuffer savedBuffer = buffer;
               buffer = new Asn1PerDecodeBuffer( ueAssistanceInformation_outer.value, buffer.isAligned());
               buffer.setEventHandlerList( savedBuffer );
               ueAssistanceInformation = new UEAssistanceInformation();
               ueAssistanceInformation.decode (buffer);
               buffer = savedBuffer;
               buffer.getContext().eventDispatcher.endElement("ueAssistanceInformation", -1);
            }
            else {
               ueAssistanceInformation = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV4ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean selectedBandCombinationSNPresent = buffer.decodeBit ("selectedBandCombinationSNPresent");

            // decode selectedBandCombinationSN

            if (selectedBandCombinationSNPresent) {
               buffer.getContext().eventDispatcher.startElement("selectedBandCombinationSN", -1);

               selectedBandCombinationSN = new BandCombinationInfoSN();
               selectedBandCombinationSN.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("selectedBandCombinationSN", -1);
            }
            else {
               selectedBandCombinationSN = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV5ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean configRestrictInfoDAPS_r16Present = buffer.decodeBit ("configRestrictInfoDAPS_r16Present");

            boolean sidelinkUEInformationNR_r16Present = buffer.decodeBit ("sidelinkUEInformationNR_r16Present");

            boolean sidelinkUEInformationEUTRA_r16Present = buffer.decodeBit ("sidelinkUEInformationEUTRA_r16Present");

            boolean ueAssistanceInformationEUTRA_r16Present = buffer.decodeBit ("ueAssistanceInformationEUTRA_r16Present");

            boolean ueAssistanceInformationSCG_r16Present = buffer.decodeBit ("ueAssistanceInformationSCG_r16Present");

            boolean needForGapsInfoNR_r16Present = buffer.decodeBit ("needForGapsInfoNR_r16Present");

            // decode configRestrictInfoDAPS_r16

            if (configRestrictInfoDAPS_r16Present) {
               buffer.getContext().eventDispatcher.startElement("configRestrictInfoDAPS_r16", -1);

               configRestrictInfoDAPS_r16 = new ConfigRestrictInfoDAPS_r16();
               configRestrictInfoDAPS_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("configRestrictInfoDAPS_r16", -1);
            }
            else {
               configRestrictInfoDAPS_r16 = null;
            }

            // decode sidelinkUEInformationNR_r16

            if (sidelinkUEInformationNR_r16Present) {
               buffer.getContext().eventDispatcher.startElement("sidelinkUEInformationNR_r16", -1);

               sidelinkUEInformationNR_r16 = new Asn1OctetString();
               sidelinkUEInformationNR_r16.decode (buffer);

               buffer.invokeCharacters(sidelinkUEInformationNR_r16.toString());
               buffer.getContext().eventDispatcher.endElement("sidelinkUEInformationNR_r16", -1);
            }
            else {
               sidelinkUEInformationNR_r16 = null;
            }

            // decode sidelinkUEInformationEUTRA_r16

            if (sidelinkUEInformationEUTRA_r16Present) {
               buffer.getContext().eventDispatcher.startElement("sidelinkUEInformationEUTRA_r16", -1);

               sidelinkUEInformationEUTRA_r16 = new Asn1OctetString();
               sidelinkUEInformationEUTRA_r16.decode (buffer);

               buffer.invokeCharacters(sidelinkUEInformationEUTRA_r16.toString());
               buffer.getContext().eventDispatcher.endElement("sidelinkUEInformationEUTRA_r16", -1);
            }
            else {
               sidelinkUEInformationEUTRA_r16 = null;
            }

            // decode ueAssistanceInformationEUTRA_r16

            if (ueAssistanceInformationEUTRA_r16Present) {
               buffer.getContext().eventDispatcher.startElement("ueAssistanceInformationEUTRA_r16", -1);

               ueAssistanceInformationEUTRA_r16 = new Asn1OctetString();
               ueAssistanceInformationEUTRA_r16.decode (buffer);

               buffer.invokeCharacters(ueAssistanceInformationEUTRA_r16.toString());
               buffer.getContext().eventDispatcher.endElement("ueAssistanceInformationEUTRA_r16", -1);
            }
            else {
               ueAssistanceInformationEUTRA_r16 = null;
            }

            // decode ueAssistanceInformationSCG_r16

            if (ueAssistanceInformationSCG_r16Present) {
               buffer.getContext().eventDispatcher.startElement("ueAssistanceInformationSCG_r16", -1);

               Asn1OctetString ueAssistanceInformationSCG_r16_outer = new Asn1OctetString();
               ueAssistanceInformationSCG_r16_outer.decode (buffer);
               if (ueAssistanceInformationSCG_r16_outer.value == null) throw new Asn1Exception("contained type's complete encoding is empty");
               Asn1PerDecodeBuffer savedBuffer = buffer;
               buffer = new Asn1PerDecodeBuffer( ueAssistanceInformationSCG_r16_outer.value, buffer.isAligned());
               buffer.setEventHandlerList( savedBuffer );
               ueAssistanceInformationSCG_r16 = new UEAssistanceInformation();
               ueAssistanceInformationSCG_r16.decode (buffer);
               buffer = savedBuffer;
               buffer.getContext().eventDispatcher.endElement("ueAssistanceInformationSCG_r16", -1);
            }
            else {
               ueAssistanceInformationSCG_r16 = null;
            }

            // decode needForGapsInfoNR_r16

            if (needForGapsInfoNR_r16Present) {
               buffer.getContext().eventDispatcher.startElement("needForGapsInfoNR_r16", -1);

               needForGapsInfoNR_r16 = new NeedForGapsInfoNR_r16();
               needForGapsInfoNR_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("needForGapsInfoNR_r16", -1);
            }
            else {
               needForGapsInfoNR_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (reestablishmentInfo != null) reestablishmentInfo.print (_sb, "reestablishmentInfo", _level+1);
      if (configRestrictInfo != null) configRestrictInfo.print (_sb, "configRestrictInfo", _level+1);
      if (ran_NotificationAreaInfo != null) ran_NotificationAreaInfo.print (_sb, "ran_NotificationAreaInfo", _level+1);
      if (ueAssistanceInformation != null) ueAssistanceInformation.print (_sb, "ueAssistanceInformation", _level+1);
      if (selectedBandCombinationSN != null) selectedBandCombinationSN.print (_sb, "selectedBandCombinationSN", _level+1);
      if (configRestrictInfoDAPS_r16 != null) configRestrictInfoDAPS_r16.print (_sb, "configRestrictInfoDAPS_r16", _level+1);
      if (sidelinkUEInformationNR_r16 != null) sidelinkUEInformationNR_r16.print (_sb, "sidelinkUEInformationNR_r16", _level+1);
      if (sidelinkUEInformationEUTRA_r16 != null) sidelinkUEInformationEUTRA_r16.print (_sb, "sidelinkUEInformationEUTRA_r16", _level+1);
      if (ueAssistanceInformationEUTRA_r16 != null) ueAssistanceInformationEUTRA_r16.print (_sb, "ueAssistanceInformationEUTRA_r16", _level+1);
      if (ueAssistanceInformationSCG_r16 != null) ueAssistanceInformationSCG_r16.print (_sb, "ueAssistanceInformationSCG_r16", _level+1);
      if (needForGapsInfoNR_r16 != null) needForGapsInfoNR_r16.print (_sb, "needForGapsInfoNR_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
