/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class ReportConfigEUTRA_triggerType_event_eventId extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CHOICE";
   }

   // Choice element identifier constants
   public final static byte _EVENTA1 = 1;
   public final static byte _EVENTA2 = 2;
   public final static byte _EVENTA3 = 3;
   public final static byte _EVENTA4 = 4;
   public final static byte _EVENTA5 = 5;
   public final static byte _EVENTA6_R10 = 6;
   public final static byte _EVENTC1_R12 = 7;
   public final static byte _EVENTC2_R12 = 8;
   public final static byte _EVENTV1_R14 = 9;
   public final static byte _EVENTV2_R14 = 10;
   public final static byte _EVENTH1_R15 = 11;
   public final static byte _EVENTH2_R15 = 12;
   public final static byte _EXTELEM1 = 13;

   public ReportConfigEUTRA_triggerType_event_eventId () {
      super();
   }

   public ReportConfigEUTRA_triggerType_event_eventId (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _EVENTA1: return "eventA1";
      case _EVENTA2: return "eventA2";
      case _EVENTA3: return "eventA3";
      case _EVENTA4: return "eventA4";
      case _EVENTA5: return "eventA5";
      case _EVENTA6_R10: return "eventA6_r10";
      case _EVENTC1_R12: return "eventC1_r12";
      case _EVENTC2_R12: return "eventC2_r12";
      case _EVENTV1_R14: return "eventV1_r14";
      case _EVENTV2_R14: return "eventV2_r14";
      case _EVENTH1_R15: return "eventH1_r15";
      case _EVENTH2_R15: return "eventH2_r15";
      case _EXTELEM1: return "...";
      default: return "UNDEFINED";
      }
   }

   public void set_eventA1 (ReportConfigEUTRA_triggerType_event_eventId_eventA1 value) {
      setElement (_EVENTA1, value);
   }

   public void set_eventA2 (ReportConfigEUTRA_triggerType_event_eventId_eventA2 value) {
      setElement (_EVENTA2, value);
   }

   public void set_eventA3 (ReportConfigEUTRA_triggerType_event_eventId_eventA3 value) {
      setElement (_EVENTA3, value);
   }

   public void set_eventA4 (ReportConfigEUTRA_triggerType_event_eventId_eventA4 value) {
      setElement (_EVENTA4, value);
   }

   public void set_eventA5 (ReportConfigEUTRA_triggerType_event_eventId_eventA5 value) {
      setElement (_EVENTA5, value);
   }

   public void set_eventA6_r10 (ReportConfigEUTRA_triggerType_event_eventId_eventA6_r10 value) {
      setElement (_EVENTA6_R10, value);
   }

   public void set_eventC1_r12 (ReportConfigEUTRA_triggerType_event_eventId_eventC1_r12 value) {
      setElement (_EVENTC1_R12, value);
   }

   public void set_eventC2_r12 (ReportConfigEUTRA_triggerType_event_eventId_eventC2_r12 value) {
      setElement (_EVENTC2_R12, value);
   }

   public void set_eventV1_r14 (ReportConfigEUTRA_triggerType_event_eventId_eventV1_r14 value) {
      setElement (_EVENTV1_R14, value);
   }

   public void set_eventV2_r14 (ReportConfigEUTRA_triggerType_event_eventId_eventV2_r14 value) {
      setElement (_EVENTV2_R14, value);
   }

   public void set_eventH1_r15 (ReportConfigEUTRA_triggerType_event_eventId_eventH1_r15 value) {
      setElement (_EVENTH1_R15, value);
   }

   public void set_eventH2_r15 (ReportConfigEUTRA_triggerType_event_eventId_eventH2_r15 value) {
      setElement (_EVENTH2_R15, value);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      Asn1PerDecodeBuffer savedBuffer = null;
      boolean extbit = buffer.decodeBit ("extbit");

      if (!extbit) {
         int idx = (int) buffer.decodeConsWholeNumber (5, "index");
         choiceID = idx + 1;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         switch (idx) {
            // eventA1
            case 0: { 
               ReportConfigEUTRA_triggerType_event_eventId_eventA1 eventA1;
               element = eventA1 = new ReportConfigEUTRA_triggerType_event_eventId_eventA1();
               eventA1.decode (buffer);
               break;
            }

            // eventA2
            case 1: { 
               ReportConfigEUTRA_triggerType_event_eventId_eventA2 eventA2;
               element = eventA2 = new ReportConfigEUTRA_triggerType_event_eventId_eventA2();
               eventA2.decode (buffer);
               break;
            }

            // eventA3
            case 2: { 
               ReportConfigEUTRA_triggerType_event_eventId_eventA3 eventA3;
               element = eventA3 = new ReportConfigEUTRA_triggerType_event_eventId_eventA3();
               eventA3.decode (buffer);
               break;
            }

            // eventA4
            case 3: { 
               ReportConfigEUTRA_triggerType_event_eventId_eventA4 eventA4;
               element = eventA4 = new ReportConfigEUTRA_triggerType_event_eventId_eventA4();
               eventA4.decode (buffer);
               break;
            }

            // eventA5
            case 4: { 
               ReportConfigEUTRA_triggerType_event_eventId_eventA5 eventA5;
               element = eventA5 = new ReportConfigEUTRA_triggerType_event_eventId_eventA5();
               eventA5.decode (buffer);
               break;
            }

            default:
            throw new Asn1InvalidChoiceOptionException (buffer, idx);
         }
      }
      else {
         int idx = (int) buffer.decodeSmallNonNegWholeNumber ();
         choiceID = idx + 6;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         buffer.byteAlign();

         Asn1OpenType openType = new Asn1OpenType ();
         openType.decode (buffer);

         savedBuffer = buffer;
         buffer = new Asn1PerDecodeBuffer (openType.value, savedBuffer.isAligned());
         buffer.setEventHandlerList (savedBuffer);

         switch (idx) {
            // eventA6_r10
            case 0: { 
               ReportConfigEUTRA_triggerType_event_eventId_eventA6_r10 eventA6_r10;
               element = eventA6_r10 = new ReportConfigEUTRA_triggerType_event_eventId_eventA6_r10();
               eventA6_r10.decode (buffer);
               break;
            }

            // eventC1_r12
            case 1: { 
               ReportConfigEUTRA_triggerType_event_eventId_eventC1_r12 eventC1_r12;
               element = eventC1_r12 = new ReportConfigEUTRA_triggerType_event_eventId_eventC1_r12();
               eventC1_r12.decode (buffer);
               break;
            }

            // eventC2_r12
            case 2: { 
               ReportConfigEUTRA_triggerType_event_eventId_eventC2_r12 eventC2_r12;
               element = eventC2_r12 = new ReportConfigEUTRA_triggerType_event_eventId_eventC2_r12();
               eventC2_r12.decode (buffer);
               break;
            }

            // eventV1_r14
            case 3: { 
               ReportConfigEUTRA_triggerType_event_eventId_eventV1_r14 eventV1_r14;
               element = eventV1_r14 = new ReportConfigEUTRA_triggerType_event_eventId_eventV1_r14();
               eventV1_r14.decode (buffer);
               break;
            }

            // eventV2_r14
            case 4: { 
               ReportConfigEUTRA_triggerType_event_eventId_eventV2_r14 eventV2_r14;
               element = eventV2_r14 = new ReportConfigEUTRA_triggerType_event_eventId_eventV2_r14();
               eventV2_r14.decode (buffer);
               break;
            }

            // eventH1_r15
            case 5: { 
               ReportConfigEUTRA_triggerType_event_eventId_eventH1_r15 eventH1_r15;
               element = eventH1_r15 = new ReportConfigEUTRA_triggerType_event_eventId_eventH1_r15();
               eventH1_r15.decode (buffer);
               break;
            }

            // eventH2_r15
            case 6: { 
               ReportConfigEUTRA_triggerType_event_eventId_eventH2_r15 eventH2_r15;
               element = eventH2_r15 = new ReportConfigEUTRA_triggerType_event_eventId_eventH2_r15();
               eventH2_r15.decode (buffer);
               break;
            }

            // extElem1
            case 7: { 
               Asn1OpenType extElem1;
               element = extElem1 = new Asn1OpenType();
               extElem1.decode (buffer);

               buffer.invokeCharacters(extElem1.toString());
               break;
            }

            default:
               setElement (_EXTELEM1, openType);
               buffer.invokeCharacters (openType.toString());
         }

      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);

      if (savedBuffer != null) {
         buffer = savedBuffer;
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (element != null) {
         element.print (_sb, getElemName(), _level+1);
      }
      indent (_sb, _level);
      _sb.append("}\n");
   }

}
