/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.X2AP_Ericsson_IEs;

import com.objsys.asn1j.runtime.*;

public class EAB_IeNB_BB_Collaboration extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_X2AP_Ericsson_IEsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "EAB-IeNB-BB-Collaboration";
   }

   public Asn1BitString multiVersionSupportBitMap;
   public Asn1Integer bB_ProtVer;
   public Asn1Integer bB_ProtVerMinus1;
   public Asn1Integer bB_ProtVerMinus2;
   public Asn1Integer bB_ProtVerMinus3;
   public EAB_IeNB_BB_Collaboration_iE_Extensions iE_Extensions;  // optional
   public Asn1OpenExt extElem1;

   public EAB_IeNB_BB_Collaboration () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public EAB_IeNB_BB_Collaboration (
      Asn1BitString multiVersionSupportBitMap_,
      Asn1Integer bB_ProtVer_,
      Asn1Integer bB_ProtVerMinus1_,
      Asn1Integer bB_ProtVerMinus2_,
      Asn1Integer bB_ProtVerMinus3_,
      EAB_IeNB_BB_Collaboration_iE_Extensions iE_Extensions_
   ) {
      super();
      multiVersionSupportBitMap = multiVersionSupportBitMap_;
      bB_ProtVer = bB_ProtVer_;
      bB_ProtVerMinus1 = bB_ProtVerMinus1_;
      bB_ProtVerMinus2 = bB_ProtVerMinus2_;
      bB_ProtVerMinus3 = bB_ProtVerMinus3_;
      iE_Extensions = iE_Extensions_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public EAB_IeNB_BB_Collaboration (
      Asn1BitString multiVersionSupportBitMap_,
      Asn1Integer bB_ProtVer_,
      Asn1Integer bB_ProtVerMinus1_,
      Asn1Integer bB_ProtVerMinus2_,
      Asn1Integer bB_ProtVerMinus3_
   ) {
      super();
      multiVersionSupportBitMap = multiVersionSupportBitMap_;
      bB_ProtVer = bB_ProtVer_;
      bB_ProtVerMinus1 = bB_ProtVerMinus1_;
      bB_ProtVerMinus2 = bB_ProtVerMinus2_;
      bB_ProtVerMinus3 = bB_ProtVerMinus3_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public EAB_IeNB_BB_Collaboration (Asn1BitString multiVersionSupportBitMap_,
      long bB_ProtVer_,
      long bB_ProtVerMinus1_,
      long bB_ProtVerMinus2_,
      long bB_ProtVerMinus3_,
      EAB_IeNB_BB_Collaboration_iE_Extensions iE_Extensions_
   ) {
      super();
      multiVersionSupportBitMap = multiVersionSupportBitMap_;
      bB_ProtVer = new Asn1Integer (bB_ProtVer_);
      bB_ProtVerMinus1 = new Asn1Integer (bB_ProtVerMinus1_);
      bB_ProtVerMinus2 = new Asn1Integer (bB_ProtVerMinus2_);
      bB_ProtVerMinus3 = new Asn1Integer (bB_ProtVerMinus3_);
      iE_Extensions = iE_Extensions_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public EAB_IeNB_BB_Collaboration (
      Asn1BitString multiVersionSupportBitMap_,
      long bB_ProtVer_,
      long bB_ProtVerMinus1_,
      long bB_ProtVerMinus2_,
      long bB_ProtVerMinus3_
   ) {
      super();
      multiVersionSupportBitMap = multiVersionSupportBitMap_;
      bB_ProtVer = new Asn1Integer (bB_ProtVer_);
      bB_ProtVerMinus1 = new Asn1Integer (bB_ProtVerMinus1_);
      bB_ProtVerMinus2 = new Asn1Integer (bB_ProtVerMinus2_);
      bB_ProtVerMinus3 = new Asn1Integer (bB_ProtVerMinus3_);
   }

   public void init () {
      multiVersionSupportBitMap = null;
      bB_ProtVer = null;
      bB_ProtVerMinus1 = null;
      bB_ProtVerMinus2 = null;
      bB_ProtVerMinus3 = null;
      iE_Extensions = null;
      extElem1 = null;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return multiVersionSupportBitMap;
         case 1: return bB_ProtVer;
         case 2: return bB_ProtVerMinus1;
         case 3: return bB_ProtVerMinus2;
         case 4: return bB_ProtVerMinus3;
         case 5: return iE_Extensions;
         case 6: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "multiVersionSupportBitMap";
         case 1: return "bB-ProtVer";
         case 2: return "bB-ProtVerMinus1";
         case 3: return "bB-ProtVerMinus2";
         case 4: return "bB-ProtVerMinus3";
         case 5: return "iE-Extensions";
         case 6: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean iE_ExtensionsPresent = buffer.decodeBit ("iE_ExtensionsPresent");

      // decode multiVersionSupportBitMap

      buffer.getContext().eventDispatcher.startElement("multiVersionSupportBitMap", -1);

      multiVersionSupportBitMap = new Asn1BitString();
      multiVersionSupportBitMap.decode (buffer, 8, 8);

      buffer.invokeCharacters(multiVersionSupportBitMap.toString());
      buffer.getContext().eventDispatcher.endElement("multiVersionSupportBitMap", -1);

      // decode bB_ProtVer

      buffer.getContext().eventDispatcher.startElement("bB_ProtVer", -1);

      bB_ProtVer = new Asn1Integer();
      bB_ProtVer.decode (buffer, 0, 65535);

      buffer.invokeCharacters(bB_ProtVer.toString());
      buffer.getContext().eventDispatcher.endElement("bB_ProtVer", -1);

      // decode bB_ProtVerMinus1

      buffer.getContext().eventDispatcher.startElement("bB_ProtVerMinus1", -1);

      bB_ProtVerMinus1 = new Asn1Integer();
      bB_ProtVerMinus1.decode (buffer, 0, 65535);

      buffer.invokeCharacters(bB_ProtVerMinus1.toString());
      buffer.getContext().eventDispatcher.endElement("bB_ProtVerMinus1", -1);

      // decode bB_ProtVerMinus2

      buffer.getContext().eventDispatcher.startElement("bB_ProtVerMinus2", -1);

      bB_ProtVerMinus2 = new Asn1Integer();
      bB_ProtVerMinus2.decode (buffer, 0, 65535);

      buffer.invokeCharacters(bB_ProtVerMinus2.toString());
      buffer.getContext().eventDispatcher.endElement("bB_ProtVerMinus2", -1);

      // decode bB_ProtVerMinus3

      buffer.getContext().eventDispatcher.startElement("bB_ProtVerMinus3", -1);

      bB_ProtVerMinus3 = new Asn1Integer();
      bB_ProtVerMinus3.decode (buffer, 0, 65535);

      buffer.invokeCharacters(bB_ProtVerMinus3.toString());
      buffer.getContext().eventDispatcher.endElement("bB_ProtVerMinus3", -1);

      // decode iE_Extensions

      if (iE_ExtensionsPresent) {
         buffer.getContext().eventDispatcher.startElement("iE_Extensions", -1);

         iE_Extensions = new EAB_IeNB_BB_Collaboration_iE_Extensions();
         iE_Extensions.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("iE_Extensions", -1);
      }
      else {
         iE_Extensions = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (multiVersionSupportBitMap != null) multiVersionSupportBitMap.print (_sb, "multiVersionSupportBitMap", _level+1);
      if (bB_ProtVer != null) bB_ProtVer.print (_sb, "bB_ProtVer", _level+1);
      if (bB_ProtVerMinus1 != null) bB_ProtVerMinus1.print (_sb, "bB_ProtVerMinus1", _level+1);
      if (bB_ProtVerMinus2 != null) bB_ProtVerMinus2.print (_sb, "bB_ProtVerMinus2", _level+1);
      if (bB_ProtVerMinus3 != null) bB_ProtVerMinus3.print (_sb, "bB_ProtVerMinus3", _level+1);
      if (iE_Extensions != null) iE_Extensions.print (_sb, "iE_Extensions", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
