/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class CQI_ReportPeriodic_v1130 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CQI-ReportPeriodic-v1130";
   }

   public CQI_ReportPeriodic_v1130_simultaneousAckNackAndCQI_Format3_r11 simultaneousAckNackAndCQI_Format3_r11 = null;  // optional
   public CQI_ReportPeriodicProcExtToReleaseList_r11 cqi_ReportPeriodicProcExtToReleaseList_r11;  // optional
   public CQI_ReportPeriodicProcExtToAddModList_r11 cqi_ReportPeriodicProcExtToAddModList_r11;  // optional

   public CQI_ReportPeriodic_v1130 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CQI_ReportPeriodic_v1130 (
      CQI_ReportPeriodic_v1130_simultaneousAckNackAndCQI_Format3_r11 simultaneousAckNackAndCQI_Format3_r11_,
      CQI_ReportPeriodicProcExtToReleaseList_r11 cqi_ReportPeriodicProcExtToReleaseList_r11_,
      CQI_ReportPeriodicProcExtToAddModList_r11 cqi_ReportPeriodicProcExtToAddModList_r11_
   ) {
      super();
      simultaneousAckNackAndCQI_Format3_r11 = simultaneousAckNackAndCQI_Format3_r11_;
      cqi_ReportPeriodicProcExtToReleaseList_r11 = cqi_ReportPeriodicProcExtToReleaseList_r11_;
      cqi_ReportPeriodicProcExtToAddModList_r11 = cqi_ReportPeriodicProcExtToAddModList_r11_;
   }

   public void init () {
      simultaneousAckNackAndCQI_Format3_r11 = null;
      cqi_ReportPeriodicProcExtToReleaseList_r11 = null;
      cqi_ReportPeriodicProcExtToAddModList_r11 = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return simultaneousAckNackAndCQI_Format3_r11;
         case 1: return cqi_ReportPeriodicProcExtToReleaseList_r11;
         case 2: return cqi_ReportPeriodicProcExtToAddModList_r11;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "simultaneousAckNackAndCQI-Format3-r11";
         case 1: return "cqi-ReportPeriodicProcExtToReleaseList-r11";
         case 2: return "cqi-ReportPeriodicProcExtToAddModList-r11";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean simultaneousAckNackAndCQI_Format3_r11Present = buffer.decodeBit ("simultaneousAckNackAndCQI_Format3_r11Present");
      boolean cqi_ReportPeriodicProcExtToReleaseList_r11Present = buffer.decodeBit ("cqi_ReportPeriodicProcExtToReleaseList_r11Present");
      boolean cqi_ReportPeriodicProcExtToAddModList_r11Present = buffer.decodeBit ("cqi_ReportPeriodicProcExtToAddModList_r11Present");

      // decode simultaneousAckNackAndCQI_Format3_r11

      if (simultaneousAckNackAndCQI_Format3_r11Present) {
         buffer.getContext().eventDispatcher.startElement("simultaneousAckNackAndCQI_Format3_r11", -1);

         int tval = CQI_ReportPeriodic_v1130_simultaneousAckNackAndCQI_Format3_r11.decodeEnumValue (buffer);
         simultaneousAckNackAndCQI_Format3_r11 = CQI_ReportPeriodic_v1130_simultaneousAckNackAndCQI_Format3_r11.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("simultaneousAckNackAndCQI_Format3_r11", -1);
      }
      else {
         simultaneousAckNackAndCQI_Format3_r11 = null;
      }

      // decode cqi_ReportPeriodicProcExtToReleaseList_r11

      if (cqi_ReportPeriodicProcExtToReleaseList_r11Present) {
         buffer.getContext().eventDispatcher.startElement("cqi_ReportPeriodicProcExtToReleaseList_r11", -1);

         cqi_ReportPeriodicProcExtToReleaseList_r11 = new CQI_ReportPeriodicProcExtToReleaseList_r11();
         cqi_ReportPeriodicProcExtToReleaseList_r11.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("cqi_ReportPeriodicProcExtToReleaseList_r11", -1);
      }
      else {
         cqi_ReportPeriodicProcExtToReleaseList_r11 = null;
      }

      // decode cqi_ReportPeriodicProcExtToAddModList_r11

      if (cqi_ReportPeriodicProcExtToAddModList_r11Present) {
         buffer.getContext().eventDispatcher.startElement("cqi_ReportPeriodicProcExtToAddModList_r11", -1);

         cqi_ReportPeriodicProcExtToAddModList_r11 = new CQI_ReportPeriodicProcExtToAddModList_r11();
         cqi_ReportPeriodicProcExtToAddModList_r11.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("cqi_ReportPeriodicProcExtToAddModList_r11", -1);
      }
      else {
         cqi_ReportPeriodicProcExtToAddModList_r11 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (simultaneousAckNackAndCQI_Format3_r11 != null) simultaneousAckNackAndCQI_Format3_r11.print (_sb, "simultaneousAckNackAndCQI_Format3_r11", _level+1);
      if (cqi_ReportPeriodicProcExtToReleaseList_r11 != null) cqi_ReportPeriodicProcExtToReleaseList_r11.print (_sb, "cqi_ReportPeriodicProcExtToReleaseList_r11", _level+1);
      if (cqi_ReportPeriodicProcExtToAddModList_r11 != null) cqi_ReportPeriodicProcExtToAddModList_r11.print (_sb, "cqi_ReportPeriodicProcExtToAddModList_r11", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
