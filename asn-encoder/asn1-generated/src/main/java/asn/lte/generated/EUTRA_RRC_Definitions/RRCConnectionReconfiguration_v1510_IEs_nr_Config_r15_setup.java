/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class RRCConnectionReconfiguration_v1510_IEs_nr_Config_r15_setup extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public Asn1Boolean endc_ReleaseAndAdd_r15;
   public Asn1OctetString nr_SecondaryCellGroupConfig_r15;  // optional
   public P_Max p_MaxEUTRA_r15;  // optional

   public RRCConnectionReconfiguration_v1510_IEs_nr_Config_r15_setup () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public RRCConnectionReconfiguration_v1510_IEs_nr_Config_r15_setup (
      Asn1Boolean endc_ReleaseAndAdd_r15_,
      Asn1OctetString nr_SecondaryCellGroupConfig_r15_,
      P_Max p_MaxEUTRA_r15_
   ) {
      super();
      endc_ReleaseAndAdd_r15 = endc_ReleaseAndAdd_r15_;
      nr_SecondaryCellGroupConfig_r15 = nr_SecondaryCellGroupConfig_r15_;
      p_MaxEUTRA_r15 = p_MaxEUTRA_r15_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public RRCConnectionReconfiguration_v1510_IEs_nr_Config_r15_setup (
      Asn1Boolean endc_ReleaseAndAdd_r15_
   ) {
      super();
      endc_ReleaseAndAdd_r15 = endc_ReleaseAndAdd_r15_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public RRCConnectionReconfiguration_v1510_IEs_nr_Config_r15_setup (boolean endc_ReleaseAndAdd_r15_,
      byte[] nr_SecondaryCellGroupConfig_r15_,
      long p_MaxEUTRA_r15_
   ) {
      super();
      endc_ReleaseAndAdd_r15 = new Asn1Boolean (endc_ReleaseAndAdd_r15_);
      nr_SecondaryCellGroupConfig_r15 = new Asn1OctetString (nr_SecondaryCellGroupConfig_r15_);
      p_MaxEUTRA_r15 = new P_Max (p_MaxEUTRA_r15_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public RRCConnectionReconfiguration_v1510_IEs_nr_Config_r15_setup (
      boolean endc_ReleaseAndAdd_r15_
   ) {
      super();
      endc_ReleaseAndAdd_r15 = new Asn1Boolean (endc_ReleaseAndAdd_r15_);
   }

   public void init () {
      endc_ReleaseAndAdd_r15 = null;
      nr_SecondaryCellGroupConfig_r15 = null;
      p_MaxEUTRA_r15 = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return endc_ReleaseAndAdd_r15;
         case 1: return nr_SecondaryCellGroupConfig_r15;
         case 2: return p_MaxEUTRA_r15;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "endc-ReleaseAndAdd-r15";
         case 1: return "nr-SecondaryCellGroupConfig-r15";
         case 2: return "p-MaxEUTRA-r15";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean nr_SecondaryCellGroupConfig_r15Present = buffer.decodeBit ("nr_SecondaryCellGroupConfig_r15Present");
      boolean p_MaxEUTRA_r15Present = buffer.decodeBit ("p_MaxEUTRA_r15Present");

      // decode endc_ReleaseAndAdd_r15

      buffer.getContext().eventDispatcher.startElement("endc_ReleaseAndAdd_r15", -1);

      endc_ReleaseAndAdd_r15 = new Asn1Boolean();
      endc_ReleaseAndAdd_r15.decode (buffer);

      buffer.invokeCharacters(endc_ReleaseAndAdd_r15.toString());
      buffer.getContext().eventDispatcher.endElement("endc_ReleaseAndAdd_r15", -1);

      // decode nr_SecondaryCellGroupConfig_r15

      if (nr_SecondaryCellGroupConfig_r15Present) {
         buffer.getContext().eventDispatcher.startElement("nr_SecondaryCellGroupConfig_r15", -1);

         nr_SecondaryCellGroupConfig_r15 = new Asn1OctetString();
         nr_SecondaryCellGroupConfig_r15.decode (buffer);

         buffer.invokeCharacters(nr_SecondaryCellGroupConfig_r15.toString());
         buffer.getContext().eventDispatcher.endElement("nr_SecondaryCellGroupConfig_r15", -1);
      }
      else {
         nr_SecondaryCellGroupConfig_r15 = null;
      }

      // decode p_MaxEUTRA_r15

      if (p_MaxEUTRA_r15Present) {
         buffer.getContext().eventDispatcher.startElement("p_MaxEUTRA_r15", -1);

         p_MaxEUTRA_r15 = new P_Max();
         p_MaxEUTRA_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("p_MaxEUTRA_r15", -1);
      }
      else {
         p_MaxEUTRA_r15 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (endc_ReleaseAndAdd_r15 != null) endc_ReleaseAndAdd_r15.print (_sb, "endc_ReleaseAndAdd_r15", _level+1);
      if (nr_SecondaryCellGroupConfig_r15 != null) nr_SecondaryCellGroupConfig_r15.print (_sb, "nr_SecondaryCellGroupConfig_r15", _level+1);
      if (p_MaxEUTRA_r15 != null) p_MaxEUTRA_r15.print (_sb, "p_MaxEUTRA_r15", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
