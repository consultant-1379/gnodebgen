/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SearchSpace extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SearchSpace";
   }

   public SearchSpaceId searchSpaceId;
   public ControlResourceSetId controlResourceSetId;  // optional
   public SearchSpace_monitoringSlotPeriodicityAndOffset monitoringSlotPeriodicityAndOffset;  // optional
   public Asn1Integer duration;  // optional
   public Asn1BitString monitoringSymbolsWithinSlot;  // optional
   public SearchSpace_nrofCandidates nrofCandidates;  // optional
   public SearchSpace_searchSpaceType searchSpaceType;  // optional

   public SearchSpace () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SearchSpace (
      SearchSpaceId searchSpaceId_,
      ControlResourceSetId controlResourceSetId_,
      SearchSpace_monitoringSlotPeriodicityAndOffset monitoringSlotPeriodicityAndOffset_,
      Asn1Integer duration_,
      Asn1BitString monitoringSymbolsWithinSlot_,
      SearchSpace_nrofCandidates nrofCandidates_,
      SearchSpace_searchSpaceType searchSpaceType_
   ) {
      super();
      searchSpaceId = searchSpaceId_;
      controlResourceSetId = controlResourceSetId_;
      monitoringSlotPeriodicityAndOffset = monitoringSlotPeriodicityAndOffset_;
      duration = duration_;
      monitoringSymbolsWithinSlot = monitoringSymbolsWithinSlot_;
      nrofCandidates = nrofCandidates_;
      searchSpaceType = searchSpaceType_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SearchSpace (
      SearchSpaceId searchSpaceId_
   ) {
      super();
      searchSpaceId = searchSpaceId_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SearchSpace (long searchSpaceId_,
      long controlResourceSetId_,
      SearchSpace_monitoringSlotPeriodicityAndOffset monitoringSlotPeriodicityAndOffset_,
      long duration_,
      Asn1BitString monitoringSymbolsWithinSlot_,
      SearchSpace_nrofCandidates nrofCandidates_,
      SearchSpace_searchSpaceType searchSpaceType_
   ) {
      super();
      searchSpaceId = new SearchSpaceId (searchSpaceId_);
      controlResourceSetId = new ControlResourceSetId (controlResourceSetId_);
      monitoringSlotPeriodicityAndOffset = monitoringSlotPeriodicityAndOffset_;
      duration = new Asn1Integer (duration_);
      monitoringSymbolsWithinSlot = monitoringSymbolsWithinSlot_;
      nrofCandidates = nrofCandidates_;
      searchSpaceType = searchSpaceType_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public SearchSpace (
      long searchSpaceId_
   ) {
      super();
      searchSpaceId = new SearchSpaceId (searchSpaceId_);
   }

   public void init () {
      searchSpaceId = null;
      controlResourceSetId = null;
      monitoringSlotPeriodicityAndOffset = null;
      duration = null;
      monitoringSymbolsWithinSlot = null;
      nrofCandidates = null;
      searchSpaceType = null;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return searchSpaceId;
         case 1: return controlResourceSetId;
         case 2: return monitoringSlotPeriodicityAndOffset;
         case 3: return duration;
         case 4: return monitoringSymbolsWithinSlot;
         case 5: return nrofCandidates;
         case 6: return searchSpaceType;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "searchSpaceId";
         case 1: return "controlResourceSetId";
         case 2: return "monitoringSlotPeriodicityAndOffset";
         case 3: return "duration";
         case 4: return "monitoringSymbolsWithinSlot";
         case 5: return "nrofCandidates";
         case 6: return "searchSpaceType";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean controlResourceSetIdPresent = buffer.decodeBit ("controlResourceSetIdPresent");
      boolean monitoringSlotPeriodicityAndOffsetPresent = buffer.decodeBit ("monitoringSlotPeriodicityAndOffsetPresent");
      boolean durationPresent = buffer.decodeBit ("durationPresent");
      boolean monitoringSymbolsWithinSlotPresent = buffer.decodeBit ("monitoringSymbolsWithinSlotPresent");
      boolean nrofCandidatesPresent = buffer.decodeBit ("nrofCandidatesPresent");
      boolean searchSpaceTypePresent = buffer.decodeBit ("searchSpaceTypePresent");

      // decode searchSpaceId

      buffer.getContext().eventDispatcher.startElement("searchSpaceId", -1);

      searchSpaceId = new SearchSpaceId();
      searchSpaceId.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("searchSpaceId", -1);

      // decode controlResourceSetId

      if (controlResourceSetIdPresent) {
         buffer.getContext().eventDispatcher.startElement("controlResourceSetId", -1);

         controlResourceSetId = new ControlResourceSetId();
         controlResourceSetId.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("controlResourceSetId", -1);
      }
      else {
         controlResourceSetId = null;
      }

      // decode monitoringSlotPeriodicityAndOffset

      if (monitoringSlotPeriodicityAndOffsetPresent) {
         buffer.getContext().eventDispatcher.startElement("monitoringSlotPeriodicityAndOffset", -1);

         monitoringSlotPeriodicityAndOffset = new SearchSpace_monitoringSlotPeriodicityAndOffset();
         monitoringSlotPeriodicityAndOffset.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("monitoringSlotPeriodicityAndOffset", -1);
      }
      else {
         monitoringSlotPeriodicityAndOffset = null;
      }

      // decode duration

      if (durationPresent) {
         buffer.getContext().eventDispatcher.startElement("duration", -1);

         duration = new Asn1Integer();
         duration.decode (buffer, 2, 2559);

         buffer.invokeCharacters(duration.toString());
         buffer.getContext().eventDispatcher.endElement("duration", -1);
      }
      else {
         duration = null;
      }

      // decode monitoringSymbolsWithinSlot

      if (monitoringSymbolsWithinSlotPresent) {
         buffer.getContext().eventDispatcher.startElement("monitoringSymbolsWithinSlot", -1);

         monitoringSymbolsWithinSlot = new Asn1BitString();
         monitoringSymbolsWithinSlot.decode (buffer, 14, 14);

         buffer.invokeCharacters(monitoringSymbolsWithinSlot.toString());
         buffer.getContext().eventDispatcher.endElement("monitoringSymbolsWithinSlot", -1);
      }
      else {
         monitoringSymbolsWithinSlot = null;
      }

      // decode nrofCandidates

      if (nrofCandidatesPresent) {
         buffer.getContext().eventDispatcher.startElement("nrofCandidates", -1);

         nrofCandidates = new SearchSpace_nrofCandidates();
         nrofCandidates.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nrofCandidates", -1);
      }
      else {
         nrofCandidates = null;
      }

      // decode searchSpaceType

      if (searchSpaceTypePresent) {
         buffer.getContext().eventDispatcher.startElement("searchSpaceType", -1);

         searchSpaceType = new SearchSpace_searchSpaceType();
         searchSpaceType.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("searchSpaceType", -1);
      }
      else {
         searchSpaceType = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (searchSpaceId != null) searchSpaceId.print (_sb, "searchSpaceId", _level+1);
      if (controlResourceSetId != null) controlResourceSetId.print (_sb, "controlResourceSetId", _level+1);
      if (monitoringSlotPeriodicityAndOffset != null) monitoringSlotPeriodicityAndOffset.print (_sb, "monitoringSlotPeriodicityAndOffset", _level+1);
      if (duration != null) duration.print (_sb, "duration", _level+1);
      if (monitoringSymbolsWithinSlot != null) monitoringSymbolsWithinSlot.print (_sb, "monitoringSymbolsWithinSlot", _level+1);
      if (nrofCandidates != null) nrofCandidates.print (_sb, "nrofCandidates", _level+1);
      if (searchSpaceType != null) searchSpaceType.print (_sb, "searchSpaceType", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
