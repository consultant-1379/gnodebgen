/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class RLC_BearerConfig extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "RLC-BearerConfig";
   }

   public LogicalChannelIdentity logicalChannelIdentity;
   public RLC_BearerConfig_servedRadioBearer servedRadioBearer;  // optional
   public RLC_BearerConfig_reestablishRLC reestablishRLC = null;  // optional
   public RLC_Config rlc_Config;  // optional
   public LogicalChannelConfig mac_LogicalChannelConfig;  // optional
   public boolean mV2ExtPresent;
   public RLC_Config_v1610 rlc_Config_v1610;  // optional
   public Asn1OpenExt extElem1;

   public RLC_BearerConfig () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public RLC_BearerConfig (
      LogicalChannelIdentity logicalChannelIdentity_,
      RLC_BearerConfig_servedRadioBearer servedRadioBearer_,
      RLC_BearerConfig_reestablishRLC reestablishRLC_,
      RLC_Config rlc_Config_,
      LogicalChannelConfig mac_LogicalChannelConfig_,
      RLC_Config_v1610 rlc_Config_v1610_
   ) {
      super();
      logicalChannelIdentity = logicalChannelIdentity_;
      servedRadioBearer = servedRadioBearer_;
      reestablishRLC = reestablishRLC_;
      rlc_Config = rlc_Config_;
      mac_LogicalChannelConfig = mac_LogicalChannelConfig_;
      rlc_Config_v1610 = rlc_Config_v1610_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public RLC_BearerConfig (
      LogicalChannelIdentity logicalChannelIdentity_
   ) {
      super();
      logicalChannelIdentity = logicalChannelIdentity_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public RLC_BearerConfig (long logicalChannelIdentity_,
      RLC_BearerConfig_servedRadioBearer servedRadioBearer_,
      RLC_BearerConfig_reestablishRLC reestablishRLC_,
      RLC_Config rlc_Config_,
      LogicalChannelConfig mac_LogicalChannelConfig_,
      RLC_Config_v1610 rlc_Config_v1610_
   ) {
      super();
      logicalChannelIdentity = new LogicalChannelIdentity (logicalChannelIdentity_);
      servedRadioBearer = servedRadioBearer_;
      reestablishRLC = reestablishRLC_;
      rlc_Config = rlc_Config_;
      mac_LogicalChannelConfig = mac_LogicalChannelConfig_;
      rlc_Config_v1610 = rlc_Config_v1610_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public RLC_BearerConfig (
      long logicalChannelIdentity_
   ) {
      super();
      logicalChannelIdentity = new LogicalChannelIdentity (logicalChannelIdentity_);
   }

   public void init () {
      logicalChannelIdentity = null;
      servedRadioBearer = null;
      reestablishRLC = null;
      rlc_Config = null;
      mac_LogicalChannelConfig = null;
      rlc_Config_v1610 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return logicalChannelIdentity;
         case 1: return servedRadioBearer;
         case 2: return reestablishRLC;
         case 3: return rlc_Config;
         case 4: return mac_LogicalChannelConfig;
         case 5: return rlc_Config_v1610;
         case 6: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "logicalChannelIdentity";
         case 1: return "servedRadioBearer";
         case 2: return "reestablishRLC";
         case 3: return "rlc-Config";
         case 4: return "mac-LogicalChannelConfig";
         case 5: return "rlc-Config-v1610";
         case 6: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean servedRadioBearerPresent = buffer.decodeBit ("servedRadioBearerPresent");
      boolean reestablishRLCPresent = buffer.decodeBit ("reestablishRLCPresent");
      boolean rlc_ConfigPresent = buffer.decodeBit ("rlc_ConfigPresent");
      boolean mac_LogicalChannelConfigPresent = buffer.decodeBit ("mac_LogicalChannelConfigPresent");

      // decode logicalChannelIdentity

      buffer.getContext().eventDispatcher.startElement("logicalChannelIdentity", -1);

      logicalChannelIdentity = new LogicalChannelIdentity();
      logicalChannelIdentity.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("logicalChannelIdentity", -1);

      // decode servedRadioBearer

      if (servedRadioBearerPresent) {
         buffer.getContext().eventDispatcher.startElement("servedRadioBearer", -1);

         servedRadioBearer = new RLC_BearerConfig_servedRadioBearer();
         servedRadioBearer.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("servedRadioBearer", -1);
      }
      else {
         servedRadioBearer = null;
      }

      // decode reestablishRLC

      if (reestablishRLCPresent) {
         buffer.getContext().eventDispatcher.startElement("reestablishRLC", -1);

         int tval = RLC_BearerConfig_reestablishRLC.decodeEnumValue (buffer);
         reestablishRLC = RLC_BearerConfig_reestablishRLC.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("reestablishRLC", -1);
      }
      else {
         reestablishRLC = null;
      }

      // decode rlc_Config

      if (rlc_ConfigPresent) {
         buffer.getContext().eventDispatcher.startElement("rlc_Config", -1);

         rlc_Config = new RLC_Config();
         rlc_Config.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("rlc_Config", -1);
      }
      else {
         rlc_Config = null;
      }

      // decode mac_LogicalChannelConfig

      if (mac_LogicalChannelConfigPresent) {
         buffer.getContext().eventDispatcher.startElement("mac_LogicalChannelConfig", -1);

         mac_LogicalChannelConfig = new LogicalChannelConfig();
         mac_LogicalChannelConfig.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("mac_LogicalChannelConfig", -1);
      }
      else {
         mac_LogicalChannelConfig = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean rlc_Config_v1610Present = buffer.decodeBit ("rlc_Config_v1610Present");

            // decode rlc_Config_v1610

            if (rlc_Config_v1610Present) {
               buffer.getContext().eventDispatcher.startElement("rlc_Config_v1610", -1);

               rlc_Config_v1610 = new RLC_Config_v1610();
               rlc_Config_v1610.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("rlc_Config_v1610", -1);
            }
            else {
               rlc_Config_v1610 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (logicalChannelIdentity != null) logicalChannelIdentity.print (_sb, "logicalChannelIdentity", _level+1);
      if (servedRadioBearer != null) servedRadioBearer.print (_sb, "servedRadioBearer", _level+1);
      if (reestablishRLC != null) reestablishRLC.print (_sb, "reestablishRLC", _level+1);
      if (rlc_Config != null) rlc_Config.print (_sb, "rlc_Config", _level+1);
      if (mac_LogicalChannelConfig != null) mac_LogicalChannelConfig.print (_sb, "mac_LogicalChannelConfig", _level+1);
      if (rlc_Config_v1610 != null) rlc_Config_v1610.print (_sb, "rlc_Config_v1610", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
