/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class BandClassInfoCDMA2000 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "BandClassInfoCDMA2000";
   }

   public BandclassCDMA2000 bandClass = null;
   public CellReselectionPriority cellReselectionPriority;  // optional
   public Asn1Integer threshX_High;
   public Asn1Integer threshX_Low;
   public Asn1OpenExt extElem1;

   public BandClassInfoCDMA2000 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public BandClassInfoCDMA2000 (
      BandclassCDMA2000 bandClass_,
      CellReselectionPriority cellReselectionPriority_,
      Asn1Integer threshX_High_,
      Asn1Integer threshX_Low_
   ) {
      super();
      bandClass = bandClass_;
      cellReselectionPriority = cellReselectionPriority_;
      threshX_High = threshX_High_;
      threshX_Low = threshX_Low_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public BandClassInfoCDMA2000 (
      BandclassCDMA2000 bandClass_,
      Asn1Integer threshX_High_,
      Asn1Integer threshX_Low_
   ) {
      super();
      bandClass = bandClass_;
      threshX_High = threshX_High_;
      threshX_Low = threshX_Low_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public BandClassInfoCDMA2000 (BandclassCDMA2000 bandClass_,
      long cellReselectionPriority_,
      long threshX_High_,
      long threshX_Low_
   ) {
      super();
      bandClass = bandClass_;
      cellReselectionPriority = new CellReselectionPriority (cellReselectionPriority_);
      threshX_High = new Asn1Integer (threshX_High_);
      threshX_Low = new Asn1Integer (threshX_Low_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public BandClassInfoCDMA2000 (
      BandclassCDMA2000 bandClass_,
      long threshX_High_,
      long threshX_Low_
   ) {
      super();
      bandClass = bandClass_;
      threshX_High = new Asn1Integer (threshX_High_);
      threshX_Low = new Asn1Integer (threshX_Low_);
   }

   public void init () {
      bandClass = null;
      cellReselectionPriority = null;
      threshX_High = null;
      threshX_Low = null;
      extElem1 = null;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return bandClass;
         case 1: return cellReselectionPriority;
         case 2: return threshX_High;
         case 3: return threshX_Low;
         case 4: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "bandClass";
         case 1: return "cellReselectionPriority";
         case 2: return "threshX-High";
         case 3: return "threshX-Low";
         case 4: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean cellReselectionPriorityPresent = buffer.decodeBit ("cellReselectionPriorityPresent");

      // decode bandClass

      buffer.getContext().eventDispatcher.startElement("bandClass", -1);

      {
         int tval = BandclassCDMA2000.decodeEnumValue (buffer);
         bandClass = BandclassCDMA2000.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("bandClass", -1);

      // decode cellReselectionPriority

      if (cellReselectionPriorityPresent) {
         buffer.getContext().eventDispatcher.startElement("cellReselectionPriority", -1);

         cellReselectionPriority = new CellReselectionPriority();
         cellReselectionPriority.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("cellReselectionPriority", -1);
      }
      else {
         cellReselectionPriority = null;
      }

      // decode threshX_High

      buffer.getContext().eventDispatcher.startElement("threshX_High", -1);

      threshX_High = new Asn1Integer();
      threshX_High.decode (buffer, 0, 63);

      buffer.invokeCharacters(threshX_High.toString());
      buffer.getContext().eventDispatcher.endElement("threshX_High", -1);

      // decode threshX_Low

      buffer.getContext().eventDispatcher.startElement("threshX_Low", -1);

      threshX_Low = new Asn1Integer();
      threshX_Low.decode (buffer, 0, 63);

      buffer.invokeCharacters(threshX_Low.toString());
      buffer.getContext().eventDispatcher.endElement("threshX_Low", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (bandClass != null) bandClass.print (_sb, "bandClass", _level+1);
      if (cellReselectionPriority != null) cellReselectionPriority.print (_sb, "cellReselectionPriority", _level+1);
      if (threshX_High != null) threshX_High.print (_sb, "threshX_High", _level+1);
      if (threshX_Low != null) threshX_Low.print (_sb, "threshX_Low", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
