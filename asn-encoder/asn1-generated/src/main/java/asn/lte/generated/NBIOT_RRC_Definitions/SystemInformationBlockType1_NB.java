/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NBIOT_RRC_Definitions;

import com.objsys.asn1j.runtime.*;
import asn.lte.generated.EUTRA_RRC_Definitions.P_Max;

public class SystemInformationBlockType1_NB extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NBIOT_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SystemInformationBlockType1-NB";
   }

   public Asn1BitString hyperSFN_MSB_r13;
   public SystemInformationBlockType1_NB_cellAccessRelatedInfo_r13 cellAccessRelatedInfo_r13;
   public SystemInformationBlockType1_NB_cellSelectionInfo_r13 cellSelectionInfo_r13;
   public P_Max p_Max_r13;  // optional
   public FreqBandIndicator_NB_r13 freqBandIndicator_r13;
   public NS_PmaxList_NB_r13 freqBandInfo_r13;  // optional
   public MultiBandInfoList_NB_r13 multiBandInfoList_r13;  // optional
   public DL_Bitmap_NB_r13 downlinkBitmap_r13;  // optional
   public SystemInformationBlockType1_NB_eutraControlRegionSize_r13 eutraControlRegionSize_r13 = null;  // optional
   public SystemInformationBlockType1_NB_nrs_CRS_PowerOffset_r13 nrs_CRS_PowerOffset_r13 = null;  // optional
   public SchedulingInfoList_NB_r13 schedulingInfoList_r13;
   public SystemInformationBlockType1_NB_si_WindowLength_r13 si_WindowLength_r13 = null;
   public Asn1Integer si_RadioFrameOffset_r13;  // optional
   public SystemInfoValueTagList_NB_r13 systemInfoValueTagList_r13;  // optional
   public Asn1OctetString lateNonCriticalExtension;  // optional
   public SystemInformationBlockType1_NB_v1350 nonCriticalExtension;  // optional

   public SystemInformationBlockType1_NB () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SystemInformationBlockType1_NB (
      Asn1BitString hyperSFN_MSB_r13_,
      SystemInformationBlockType1_NB_cellAccessRelatedInfo_r13 cellAccessRelatedInfo_r13_,
      SystemInformationBlockType1_NB_cellSelectionInfo_r13 cellSelectionInfo_r13_,
      P_Max p_Max_r13_,
      FreqBandIndicator_NB_r13 freqBandIndicator_r13_,
      NS_PmaxList_NB_r13 freqBandInfo_r13_,
      MultiBandInfoList_NB_r13 multiBandInfoList_r13_,
      DL_Bitmap_NB_r13 downlinkBitmap_r13_,
      SystemInformationBlockType1_NB_eutraControlRegionSize_r13 eutraControlRegionSize_r13_,
      SystemInformationBlockType1_NB_nrs_CRS_PowerOffset_r13 nrs_CRS_PowerOffset_r13_,
      SchedulingInfoList_NB_r13 schedulingInfoList_r13_,
      SystemInformationBlockType1_NB_si_WindowLength_r13 si_WindowLength_r13_,
      Asn1Integer si_RadioFrameOffset_r13_,
      SystemInfoValueTagList_NB_r13 systemInfoValueTagList_r13_,
      Asn1OctetString lateNonCriticalExtension_,
      SystemInformationBlockType1_NB_v1350 nonCriticalExtension_
   ) {
      super();
      hyperSFN_MSB_r13 = hyperSFN_MSB_r13_;
      cellAccessRelatedInfo_r13 = cellAccessRelatedInfo_r13_;
      cellSelectionInfo_r13 = cellSelectionInfo_r13_;
      p_Max_r13 = p_Max_r13_;
      freqBandIndicator_r13 = freqBandIndicator_r13_;
      freqBandInfo_r13 = freqBandInfo_r13_;
      multiBandInfoList_r13 = multiBandInfoList_r13_;
      downlinkBitmap_r13 = downlinkBitmap_r13_;
      eutraControlRegionSize_r13 = eutraControlRegionSize_r13_;
      nrs_CRS_PowerOffset_r13 = nrs_CRS_PowerOffset_r13_;
      schedulingInfoList_r13 = schedulingInfoList_r13_;
      si_WindowLength_r13 = si_WindowLength_r13_;
      si_RadioFrameOffset_r13 = si_RadioFrameOffset_r13_;
      systemInfoValueTagList_r13 = systemInfoValueTagList_r13_;
      lateNonCriticalExtension = lateNonCriticalExtension_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SystemInformationBlockType1_NB (
      Asn1BitString hyperSFN_MSB_r13_,
      SystemInformationBlockType1_NB_cellAccessRelatedInfo_r13 cellAccessRelatedInfo_r13_,
      SystemInformationBlockType1_NB_cellSelectionInfo_r13 cellSelectionInfo_r13_,
      FreqBandIndicator_NB_r13 freqBandIndicator_r13_,
      SchedulingInfoList_NB_r13 schedulingInfoList_r13_,
      SystemInformationBlockType1_NB_si_WindowLength_r13 si_WindowLength_r13_
   ) {
      super();
      hyperSFN_MSB_r13 = hyperSFN_MSB_r13_;
      cellAccessRelatedInfo_r13 = cellAccessRelatedInfo_r13_;
      cellSelectionInfo_r13 = cellSelectionInfo_r13_;
      freqBandIndicator_r13 = freqBandIndicator_r13_;
      schedulingInfoList_r13 = schedulingInfoList_r13_;
      si_WindowLength_r13 = si_WindowLength_r13_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SystemInformationBlockType1_NB (Asn1BitString hyperSFN_MSB_r13_,
      SystemInformationBlockType1_NB_cellAccessRelatedInfo_r13 cellAccessRelatedInfo_r13_,
      SystemInformationBlockType1_NB_cellSelectionInfo_r13 cellSelectionInfo_r13_,
      long p_Max_r13_,
      long freqBandIndicator_r13_,
      NS_PmaxList_NB_r13 freqBandInfo_r13_,
      MultiBandInfoList_NB_r13 multiBandInfoList_r13_,
      DL_Bitmap_NB_r13 downlinkBitmap_r13_,
      SystemInformationBlockType1_NB_eutraControlRegionSize_r13 eutraControlRegionSize_r13_,
      SystemInformationBlockType1_NB_nrs_CRS_PowerOffset_r13 nrs_CRS_PowerOffset_r13_,
      SchedulingInfoList_NB_r13 schedulingInfoList_r13_,
      SystemInformationBlockType1_NB_si_WindowLength_r13 si_WindowLength_r13_,
      long si_RadioFrameOffset_r13_,
      SystemInfoValueTagList_NB_r13 systemInfoValueTagList_r13_,
      byte[] lateNonCriticalExtension_,
      SystemInformationBlockType1_NB_v1350 nonCriticalExtension_
   ) {
      super();
      hyperSFN_MSB_r13 = hyperSFN_MSB_r13_;
      cellAccessRelatedInfo_r13 = cellAccessRelatedInfo_r13_;
      cellSelectionInfo_r13 = cellSelectionInfo_r13_;
      p_Max_r13 = new P_Max (p_Max_r13_);
      freqBandIndicator_r13 = new FreqBandIndicator_NB_r13 (freqBandIndicator_r13_);
      freqBandInfo_r13 = freqBandInfo_r13_;
      multiBandInfoList_r13 = multiBandInfoList_r13_;
      downlinkBitmap_r13 = downlinkBitmap_r13_;
      eutraControlRegionSize_r13 = eutraControlRegionSize_r13_;
      nrs_CRS_PowerOffset_r13 = nrs_CRS_PowerOffset_r13_;
      schedulingInfoList_r13 = schedulingInfoList_r13_;
      si_WindowLength_r13 = si_WindowLength_r13_;
      si_RadioFrameOffset_r13 = new Asn1Integer (si_RadioFrameOffset_r13_);
      systemInfoValueTagList_r13 = systemInfoValueTagList_r13_;
      lateNonCriticalExtension = new Asn1OctetString (lateNonCriticalExtension_);
      nonCriticalExtension = nonCriticalExtension_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public SystemInformationBlockType1_NB (
      Asn1BitString hyperSFN_MSB_r13_,
      SystemInformationBlockType1_NB_cellAccessRelatedInfo_r13 cellAccessRelatedInfo_r13_,
      SystemInformationBlockType1_NB_cellSelectionInfo_r13 cellSelectionInfo_r13_,
      long freqBandIndicator_r13_,
      SchedulingInfoList_NB_r13 schedulingInfoList_r13_,
      SystemInformationBlockType1_NB_si_WindowLength_r13 si_WindowLength_r13_
   ) {
      super();
      hyperSFN_MSB_r13 = hyperSFN_MSB_r13_;
      cellAccessRelatedInfo_r13 = cellAccessRelatedInfo_r13_;
      cellSelectionInfo_r13 = cellSelectionInfo_r13_;
      freqBandIndicator_r13 = new FreqBandIndicator_NB_r13 (freqBandIndicator_r13_);
      schedulingInfoList_r13 = schedulingInfoList_r13_;
      si_WindowLength_r13 = si_WindowLength_r13_;
   }

   public void init () {
      hyperSFN_MSB_r13 = null;
      cellAccessRelatedInfo_r13 = null;
      cellSelectionInfo_r13 = null;
      p_Max_r13 = null;
      freqBandIndicator_r13 = null;
      freqBandInfo_r13 = null;
      multiBandInfoList_r13 = null;
      downlinkBitmap_r13 = null;
      eutraControlRegionSize_r13 = null;
      nrs_CRS_PowerOffset_r13 = null;
      schedulingInfoList_r13 = null;
      si_WindowLength_r13 = null;
      si_RadioFrameOffset_r13 = null;
      systemInfoValueTagList_r13 = null;
      lateNonCriticalExtension = null;
      nonCriticalExtension = null;
   }

   public int getElementCount() { return 16; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return hyperSFN_MSB_r13;
         case 1: return cellAccessRelatedInfo_r13;
         case 2: return cellSelectionInfo_r13;
         case 3: return p_Max_r13;
         case 4: return freqBandIndicator_r13;
         case 5: return freqBandInfo_r13;
         case 6: return multiBandInfoList_r13;
         case 7: return downlinkBitmap_r13;
         case 8: return eutraControlRegionSize_r13;
         case 9: return nrs_CRS_PowerOffset_r13;
         case 10: return schedulingInfoList_r13;
         case 11: return si_WindowLength_r13;
         case 12: return si_RadioFrameOffset_r13;
         case 13: return systemInfoValueTagList_r13;
         case 14: return lateNonCriticalExtension;
         case 15: return nonCriticalExtension;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "hyperSFN-MSB-r13";
         case 1: return "cellAccessRelatedInfo-r13";
         case 2: return "cellSelectionInfo-r13";
         case 3: return "p-Max-r13";
         case 4: return "freqBandIndicator-r13";
         case 5: return "freqBandInfo-r13";
         case 6: return "multiBandInfoList-r13";
         case 7: return "downlinkBitmap-r13";
         case 8: return "eutraControlRegionSize-r13";
         case 9: return "nrs-CRS-PowerOffset-r13";
         case 10: return "schedulingInfoList-r13";
         case 11: return "si-WindowLength-r13";
         case 12: return "si-RadioFrameOffset-r13";
         case 13: return "systemInfoValueTagList-r13";
         case 14: return "lateNonCriticalExtension";
         case 15: return "nonCriticalExtension";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean p_Max_r13Present = buffer.decodeBit ("p_Max_r13Present");
      boolean freqBandInfo_r13Present = buffer.decodeBit ("freqBandInfo_r13Present");
      boolean multiBandInfoList_r13Present = buffer.decodeBit ("multiBandInfoList_r13Present");
      boolean downlinkBitmap_r13Present = buffer.decodeBit ("downlinkBitmap_r13Present");
      boolean eutraControlRegionSize_r13Present = buffer.decodeBit ("eutraControlRegionSize_r13Present");
      boolean nrs_CRS_PowerOffset_r13Present = buffer.decodeBit ("nrs_CRS_PowerOffset_r13Present");
      boolean si_RadioFrameOffset_r13Present = buffer.decodeBit ("si_RadioFrameOffset_r13Present");
      boolean systemInfoValueTagList_r13Present = buffer.decodeBit ("systemInfoValueTagList_r13Present");
      boolean lateNonCriticalExtensionPresent = buffer.decodeBit ("lateNonCriticalExtensionPresent");
      boolean nonCriticalExtensionPresent = buffer.decodeBit ("nonCriticalExtensionPresent");

      // decode hyperSFN_MSB_r13

      buffer.getContext().eventDispatcher.startElement("hyperSFN_MSB_r13", -1);

      hyperSFN_MSB_r13 = new Asn1BitString();
      hyperSFN_MSB_r13.decode (buffer, 8, 8);

      buffer.invokeCharacters(hyperSFN_MSB_r13.toString());
      buffer.getContext().eventDispatcher.endElement("hyperSFN_MSB_r13", -1);

      // decode cellAccessRelatedInfo_r13

      buffer.getContext().eventDispatcher.startElement("cellAccessRelatedInfo_r13", -1);

      cellAccessRelatedInfo_r13 = new SystemInformationBlockType1_NB_cellAccessRelatedInfo_r13();
      cellAccessRelatedInfo_r13.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("cellAccessRelatedInfo_r13", -1);

      // decode cellSelectionInfo_r13

      buffer.getContext().eventDispatcher.startElement("cellSelectionInfo_r13", -1);

      cellSelectionInfo_r13 = new SystemInformationBlockType1_NB_cellSelectionInfo_r13();
      cellSelectionInfo_r13.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("cellSelectionInfo_r13", -1);

      // decode p_Max_r13

      if (p_Max_r13Present) {
         buffer.getContext().eventDispatcher.startElement("p_Max_r13", -1);

         p_Max_r13 = new P_Max();
         p_Max_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("p_Max_r13", -1);
      }
      else {
         p_Max_r13 = null;
      }

      // decode freqBandIndicator_r13

      buffer.getContext().eventDispatcher.startElement("freqBandIndicator_r13", -1);

      freqBandIndicator_r13 = new FreqBandIndicator_NB_r13();
      freqBandIndicator_r13.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("freqBandIndicator_r13", -1);

      // decode freqBandInfo_r13

      if (freqBandInfo_r13Present) {
         buffer.getContext().eventDispatcher.startElement("freqBandInfo_r13", -1);

         freqBandInfo_r13 = new NS_PmaxList_NB_r13();
         freqBandInfo_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("freqBandInfo_r13", -1);
      }
      else {
         freqBandInfo_r13 = null;
      }

      // decode multiBandInfoList_r13

      if (multiBandInfoList_r13Present) {
         buffer.getContext().eventDispatcher.startElement("multiBandInfoList_r13", -1);

         multiBandInfoList_r13 = new MultiBandInfoList_NB_r13();
         multiBandInfoList_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("multiBandInfoList_r13", -1);
      }
      else {
         multiBandInfoList_r13 = null;
      }

      // decode downlinkBitmap_r13

      if (downlinkBitmap_r13Present) {
         buffer.getContext().eventDispatcher.startElement("downlinkBitmap_r13", -1);

         downlinkBitmap_r13 = new DL_Bitmap_NB_r13();
         downlinkBitmap_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("downlinkBitmap_r13", -1);
      }
      else {
         downlinkBitmap_r13 = null;
      }

      // decode eutraControlRegionSize_r13

      if (eutraControlRegionSize_r13Present) {
         buffer.getContext().eventDispatcher.startElement("eutraControlRegionSize_r13", -1);

         int tval = SystemInformationBlockType1_NB_eutraControlRegionSize_r13.decodeEnumValue (buffer);
         eutraControlRegionSize_r13 = SystemInformationBlockType1_NB_eutraControlRegionSize_r13.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("eutraControlRegionSize_r13", -1);
      }
      else {
         eutraControlRegionSize_r13 = null;
      }

      // decode nrs_CRS_PowerOffset_r13

      if (nrs_CRS_PowerOffset_r13Present) {
         buffer.getContext().eventDispatcher.startElement("nrs_CRS_PowerOffset_r13", -1);

         int tval = SystemInformationBlockType1_NB_nrs_CRS_PowerOffset_r13.decodeEnumValue (buffer);
         nrs_CRS_PowerOffset_r13 = SystemInformationBlockType1_NB_nrs_CRS_PowerOffset_r13.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("nrs_CRS_PowerOffset_r13", -1);
      }
      else {
         nrs_CRS_PowerOffset_r13 = null;
      }

      // decode schedulingInfoList_r13

      buffer.getContext().eventDispatcher.startElement("schedulingInfoList_r13", -1);

      schedulingInfoList_r13 = new SchedulingInfoList_NB_r13();
      schedulingInfoList_r13.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("schedulingInfoList_r13", -1);

      // decode si_WindowLength_r13

      buffer.getContext().eventDispatcher.startElement("si_WindowLength_r13", -1);

      {
         int tval = SystemInformationBlockType1_NB_si_WindowLength_r13.decodeEnumValue (buffer);
         si_WindowLength_r13 = SystemInformationBlockType1_NB_si_WindowLength_r13.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("si_WindowLength_r13", -1);

      // decode si_RadioFrameOffset_r13

      if (si_RadioFrameOffset_r13Present) {
         buffer.getContext().eventDispatcher.startElement("si_RadioFrameOffset_r13", -1);

         si_RadioFrameOffset_r13 = new Asn1Integer();
         si_RadioFrameOffset_r13.decode (buffer, 1, 15);

         buffer.invokeCharacters(si_RadioFrameOffset_r13.toString());
         buffer.getContext().eventDispatcher.endElement("si_RadioFrameOffset_r13", -1);
      }
      else {
         si_RadioFrameOffset_r13 = null;
      }

      // decode systemInfoValueTagList_r13

      if (systemInfoValueTagList_r13Present) {
         buffer.getContext().eventDispatcher.startElement("systemInfoValueTagList_r13", -1);

         systemInfoValueTagList_r13 = new SystemInfoValueTagList_NB_r13();
         systemInfoValueTagList_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("systemInfoValueTagList_r13", -1);
      }
      else {
         systemInfoValueTagList_r13 = null;
      }

      // decode lateNonCriticalExtension

      if (lateNonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("lateNonCriticalExtension", -1);

         lateNonCriticalExtension = new Asn1OctetString();
         lateNonCriticalExtension.decode (buffer);

         buffer.invokeCharacters(lateNonCriticalExtension.toString());
         buffer.getContext().eventDispatcher.endElement("lateNonCriticalExtension", -1);
      }
      else {
         lateNonCriticalExtension = null;
      }

      // decode nonCriticalExtension

      if (nonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension = new SystemInformationBlockType1_NB_v1350();
         nonCriticalExtension.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }
      else {
         nonCriticalExtension = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (hyperSFN_MSB_r13 != null) hyperSFN_MSB_r13.print (_sb, "hyperSFN_MSB_r13", _level+1);
      if (cellAccessRelatedInfo_r13 != null) cellAccessRelatedInfo_r13.print (_sb, "cellAccessRelatedInfo_r13", _level+1);
      if (cellSelectionInfo_r13 != null) cellSelectionInfo_r13.print (_sb, "cellSelectionInfo_r13", _level+1);
      if (p_Max_r13 != null) p_Max_r13.print (_sb, "p_Max_r13", _level+1);
      if (freqBandIndicator_r13 != null) freqBandIndicator_r13.print (_sb, "freqBandIndicator_r13", _level+1);
      if (freqBandInfo_r13 != null) freqBandInfo_r13.print (_sb, "freqBandInfo_r13", _level+1);
      if (multiBandInfoList_r13 != null) multiBandInfoList_r13.print (_sb, "multiBandInfoList_r13", _level+1);
      if (downlinkBitmap_r13 != null) downlinkBitmap_r13.print (_sb, "downlinkBitmap_r13", _level+1);
      if (eutraControlRegionSize_r13 != null) eutraControlRegionSize_r13.print (_sb, "eutraControlRegionSize_r13", _level+1);
      if (nrs_CRS_PowerOffset_r13 != null) nrs_CRS_PowerOffset_r13.print (_sb, "nrs_CRS_PowerOffset_r13", _level+1);
      if (schedulingInfoList_r13 != null) schedulingInfoList_r13.print (_sb, "schedulingInfoList_r13", _level+1);
      if (si_WindowLength_r13 != null) si_WindowLength_r13.print (_sb, "si_WindowLength_r13", _level+1);
      if (si_RadioFrameOffset_r13 != null) si_RadioFrameOffset_r13.print (_sb, "si_RadioFrameOffset_r13", _level+1);
      if (systemInfoValueTagList_r13 != null) systemInfoValueTagList_r13.print (_sb, "systemInfoValueTagList_r13", _level+1);
      if (lateNonCriticalExtension != null) lateNonCriticalExtension.print (_sb, "lateNonCriticalExtension", _level+1);
      if (nonCriticalExtension != null) nonCriticalExtension.print (_sb, "nonCriticalExtension", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
