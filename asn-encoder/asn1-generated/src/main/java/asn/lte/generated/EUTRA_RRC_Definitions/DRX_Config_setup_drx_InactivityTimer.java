/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class DRX_Config_setup_drx_InactivityTimer extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ENUMERATED";
   }

   // Integer constants for switch-case
   public static final int _PSF1 = 0;
   public static final int _PSF2 = 1;
   public static final int _PSF3 = 2;
   public static final int _PSF4 = 3;
   public static final int _PSF5 = 4;
   public static final int _PSF6 = 5;
   public static final int _PSF8 = 6;
   public static final int _PSF10 = 7;
   public static final int _PSF20 = 8;
   public static final int _PSF30 = 9;
   public static final int _PSF40 = 10;
   public static final int _PSF50 = 11;
   public static final int _PSF60 = 12;
   public static final int _PSF80 = 13;
   public static final int _PSF100 = 14;
   public static final int _PSF200 = 15;
   public static final int _PSF300 = 16;
   public static final int _PSF500 = 17;
   public static final int _PSF750 = 18;
   public static final int _PSF1280 = 19;
   public static final int _PSF1920 = 20;
   public static final int _PSF2560 = 21;
   public static final int _PSF0_V1020 = 22;
   public static final int _SPARE9 = 23;
   public static final int _SPARE8 = 24;
   public static final int _SPARE7 = 25;
   public static final int _SPARE6 = 26;
   public static final int _SPARE5 = 27;
   public static final int _SPARE4 = 28;
   public static final int _SPARE3 = 29;
   public static final int _SPARE2 = 30;
   public static final int _SPARE1 = 31;

   // Singleton instances of DRX_Config_setup_drx_InactivityTimer
   protected static final DRX_Config_setup_drx_InactivityTimer _psf1 = new DRX_Config_setup_drx_InactivityTimer(0);
   protected static final DRX_Config_setup_drx_InactivityTimer _psf2 = new DRX_Config_setup_drx_InactivityTimer(1);
   protected static final DRX_Config_setup_drx_InactivityTimer _psf3 = new DRX_Config_setup_drx_InactivityTimer(2);
   protected static final DRX_Config_setup_drx_InactivityTimer _psf4 = new DRX_Config_setup_drx_InactivityTimer(3);
   protected static final DRX_Config_setup_drx_InactivityTimer _psf5 = new DRX_Config_setup_drx_InactivityTimer(4);
   protected static final DRX_Config_setup_drx_InactivityTimer _psf6 = new DRX_Config_setup_drx_InactivityTimer(5);
   protected static final DRX_Config_setup_drx_InactivityTimer _psf8 = new DRX_Config_setup_drx_InactivityTimer(6);
   protected static final DRX_Config_setup_drx_InactivityTimer _psf10 = new DRX_Config_setup_drx_InactivityTimer(7);
   protected static final DRX_Config_setup_drx_InactivityTimer _psf20 = new DRX_Config_setup_drx_InactivityTimer(8);
   protected static final DRX_Config_setup_drx_InactivityTimer _psf30 = new DRX_Config_setup_drx_InactivityTimer(9);
   protected static final DRX_Config_setup_drx_InactivityTimer _psf40 = new DRX_Config_setup_drx_InactivityTimer(10);
   protected static final DRX_Config_setup_drx_InactivityTimer _psf50 = new DRX_Config_setup_drx_InactivityTimer(11);
   protected static final DRX_Config_setup_drx_InactivityTimer _psf60 = new DRX_Config_setup_drx_InactivityTimer(12);
   protected static final DRX_Config_setup_drx_InactivityTimer _psf80 = new DRX_Config_setup_drx_InactivityTimer(13);
   protected static final DRX_Config_setup_drx_InactivityTimer _psf100 = new DRX_Config_setup_drx_InactivityTimer(14);
   protected static final DRX_Config_setup_drx_InactivityTimer _psf200 = new DRX_Config_setup_drx_InactivityTimer(15);
   protected static final DRX_Config_setup_drx_InactivityTimer _psf300 = new DRX_Config_setup_drx_InactivityTimer(16);
   protected static final DRX_Config_setup_drx_InactivityTimer _psf500 = new DRX_Config_setup_drx_InactivityTimer(17);
   protected static final DRX_Config_setup_drx_InactivityTimer _psf750 = new DRX_Config_setup_drx_InactivityTimer(18);
   protected static final DRX_Config_setup_drx_InactivityTimer _psf1280 = new DRX_Config_setup_drx_InactivityTimer(19);
   protected static final DRX_Config_setup_drx_InactivityTimer _psf1920 = new DRX_Config_setup_drx_InactivityTimer(20);
   protected static final DRX_Config_setup_drx_InactivityTimer _psf2560 = new DRX_Config_setup_drx_InactivityTimer(21);
   protected static final DRX_Config_setup_drx_InactivityTimer _psf0_v1020 = new DRX_Config_setup_drx_InactivityTimer(22);
   protected static final DRX_Config_setup_drx_InactivityTimer _spare9 = new DRX_Config_setup_drx_InactivityTimer(23);
   protected static final DRX_Config_setup_drx_InactivityTimer _spare8 = new DRX_Config_setup_drx_InactivityTimer(24);
   protected static final DRX_Config_setup_drx_InactivityTimer _spare7 = new DRX_Config_setup_drx_InactivityTimer(25);
   protected static final DRX_Config_setup_drx_InactivityTimer _spare6 = new DRX_Config_setup_drx_InactivityTimer(26);
   protected static final DRX_Config_setup_drx_InactivityTimer _spare5 = new DRX_Config_setup_drx_InactivityTimer(27);
   protected static final DRX_Config_setup_drx_InactivityTimer _spare4 = new DRX_Config_setup_drx_InactivityTimer(28);
   protected static final DRX_Config_setup_drx_InactivityTimer _spare3 = new DRX_Config_setup_drx_InactivityTimer(29);
   protected static final DRX_Config_setup_drx_InactivityTimer _spare2 = new DRX_Config_setup_drx_InactivityTimer(30);
   protected static final DRX_Config_setup_drx_InactivityTimer _spare1 = new DRX_Config_setup_drx_InactivityTimer(31);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    *   7
    *   8
    *   9
    *   10
    *   11
    *   12
    *   13
    *   14
    *   15
    *   16
    *   17
    *   18
    *   19
    *   20
    *   21
    *   22
    *   23
    *   24
    *   25
    *   26
    *   27
    *   28
    *   29
    *   30
    *   31
    */
   protected DRX_Config_setup_drx_InactivityTimer (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for psf1.
    */
   public static DRX_Config_setup_drx_InactivityTimer psf1() {
      return _psf1;
   }

   /**
    * Singleton accessor method for psf2.
    */
   public static DRX_Config_setup_drx_InactivityTimer psf2() {
      return _psf2;
   }

   /**
    * Singleton accessor method for psf3.
    */
   public static DRX_Config_setup_drx_InactivityTimer psf3() {
      return _psf3;
   }

   /**
    * Singleton accessor method for psf4.
    */
   public static DRX_Config_setup_drx_InactivityTimer psf4() {
      return _psf4;
   }

   /**
    * Singleton accessor method for psf5.
    */
   public static DRX_Config_setup_drx_InactivityTimer psf5() {
      return _psf5;
   }

   /**
    * Singleton accessor method for psf6.
    */
   public static DRX_Config_setup_drx_InactivityTimer psf6() {
      return _psf6;
   }

   /**
    * Singleton accessor method for psf8.
    */
   public static DRX_Config_setup_drx_InactivityTimer psf8() {
      return _psf8;
   }

   /**
    * Singleton accessor method for psf10.
    */
   public static DRX_Config_setup_drx_InactivityTimer psf10() {
      return _psf10;
   }

   /**
    * Singleton accessor method for psf20.
    */
   public static DRX_Config_setup_drx_InactivityTimer psf20() {
      return _psf20;
   }

   /**
    * Singleton accessor method for psf30.
    */
   public static DRX_Config_setup_drx_InactivityTimer psf30() {
      return _psf30;
   }

   /**
    * Singleton accessor method for psf40.
    */
   public static DRX_Config_setup_drx_InactivityTimer psf40() {
      return _psf40;
   }

   /**
    * Singleton accessor method for psf50.
    */
   public static DRX_Config_setup_drx_InactivityTimer psf50() {
      return _psf50;
   }

   /**
    * Singleton accessor method for psf60.
    */
   public static DRX_Config_setup_drx_InactivityTimer psf60() {
      return _psf60;
   }

   /**
    * Singleton accessor method for psf80.
    */
   public static DRX_Config_setup_drx_InactivityTimer psf80() {
      return _psf80;
   }

   /**
    * Singleton accessor method for psf100.
    */
   public static DRX_Config_setup_drx_InactivityTimer psf100() {
      return _psf100;
   }

   /**
    * Singleton accessor method for psf200.
    */
   public static DRX_Config_setup_drx_InactivityTimer psf200() {
      return _psf200;
   }

   /**
    * Singleton accessor method for psf300.
    */
   public static DRX_Config_setup_drx_InactivityTimer psf300() {
      return _psf300;
   }

   /**
    * Singleton accessor method for psf500.
    */
   public static DRX_Config_setup_drx_InactivityTimer psf500() {
      return _psf500;
   }

   /**
    * Singleton accessor method for psf750.
    */
   public static DRX_Config_setup_drx_InactivityTimer psf750() {
      return _psf750;
   }

   /**
    * Singleton accessor method for psf1280.
    */
   public static DRX_Config_setup_drx_InactivityTimer psf1280() {
      return _psf1280;
   }

   /**
    * Singleton accessor method for psf1920.
    */
   public static DRX_Config_setup_drx_InactivityTimer psf1920() {
      return _psf1920;
   }

   /**
    * Singleton accessor method for psf2560.
    */
   public static DRX_Config_setup_drx_InactivityTimer psf2560() {
      return _psf2560;
   }

   /**
    * Singleton accessor method for psf0_v1020.
    */
   public static DRX_Config_setup_drx_InactivityTimer psf0_v1020() {
      return _psf0_v1020;
   }

   /**
    * Singleton accessor method for spare9.
    */
   public static DRX_Config_setup_drx_InactivityTimer spare9() {
      return _spare9;
   }

   /**
    * Singleton accessor method for spare8.
    */
   public static DRX_Config_setup_drx_InactivityTimer spare8() {
      return _spare8;
   }

   /**
    * Singleton accessor method for spare7.
    */
   public static DRX_Config_setup_drx_InactivityTimer spare7() {
      return _spare7;
   }

   /**
    * Singleton accessor method for spare6.
    */
   public static DRX_Config_setup_drx_InactivityTimer spare6() {
      return _spare6;
   }

   /**
    * Singleton accessor method for spare5.
    */
   public static DRX_Config_setup_drx_InactivityTimer spare5() {
      return _spare5;
   }

   /**
    * Singleton accessor method for spare4.
    */
   public static DRX_Config_setup_drx_InactivityTimer spare4() {
      return _spare4;
   }

   /**
    * Singleton accessor method for spare3.
    */
   public static DRX_Config_setup_drx_InactivityTimer spare3() {
      return _spare3;
   }

   /**
    * Singleton accessor method for spare2.
    */
   public static DRX_Config_setup_drx_InactivityTimer spare2() {
      return _spare2;
   }

   /**
    * Singleton accessor method for spare1.
    */
   public static DRX_Config_setup_drx_InactivityTimer spare1() {
      return _spare1;
   }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return DRX_Config_setup_drx_InactivityTimer.valueOf( DRX_Config_setup_drx_InactivityTimer.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static DRX_Config_setup_drx_InactivityTimer valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 0: return psf1();
         case 1: return psf2();
         case 2: return psf3();
         case 3: return psf4();
         case 4: return psf5();
         case 5: return psf6();
         case 6: return psf8();
         case 7: return psf10();
         case 8: return psf20();
         case 9: return psf30();
         case 10: return psf40();
         case 11: return psf50();
         case 12: return psf60();
         case 13: return psf80();
         case 14: return psf100();
         case 15: return psf200();
         case 16: return psf300();
         case 17: return psf500();
         case 18: return psf750();
         case 19: return psf1280();
         case 20: return psf1920();
         case 21: return psf2560();
         case 22: return psf0_v1020();
         case 23: return spare9();
         case 24: return spare8();
         case 25: return spare7();
         case 26: return spare6();
         case 27: return spare5();
         case 28: return spare4();
         case 29: return spare3();
         case 30: return spare2();
         case 31: return spare1();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      ui = (int) buffer.decodeConsWholeNumber (32);

      switch (ui) {
         case 0: ret =  0; break;
         case 1: ret =  1; break;
         case 2: ret =  2; break;
         case 3: ret =  3; break;
         case 4: ret =  4; break;
         case 5: ret =  5; break;
         case 6: ret =  6; break;
         case 7: ret =  7; break;
         case 8: ret =  8; break;
         case 9: ret =  9; break;
         case 10: ret =  10; break;
         case 11: ret =  11; break;
         case 12: ret =  12; break;
         case 13: ret =  13; break;
         case 14: ret =  14; break;
         case 15: ret =  15; break;
         case 16: ret =  16; break;
         case 17: ret =  17; break;
         case 18: ret =  18; break;
         case 19: ret =  19; break;
         case 20: ret =  20; break;
         case 21: ret =  21; break;
         case 22: ret =  22; break;
         case 23: ret =  23; break;
         case 24: ret =  24; break;
         case 25: ret =  25; break;
         case 26: ret =  26; break;
         case 27: ret =  27; break;
         case 28: ret =  28; break;
         case 29: ret =  29; break;
         case 30: ret =  30; break;
         case 31: ret =  31; break;
         default: throw new Asn1InvalidEnumException (ui);
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (DRX_Config_setup_drx_InactivityTimer.valueOf(ret).toString());

      return ret;
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("psf1");
         case 1: return ("psf2");
         case 2: return ("psf3");
         case 3: return ("psf4");
         case 4: return ("psf5");
         case 5: return ("psf6");
         case 6: return ("psf8");
         case 7: return ("psf10");
         case 8: return ("psf20");
         case 9: return ("psf30");
         case 10: return ("psf40");
         case 11: return ("psf50");
         case 12: return ("psf60");
         case 13: return ("psf80");
         case 14: return ("psf100");
         case 15: return ("psf200");
         case 16: return ("psf300");
         case 17: return ("psf500");
         case 18: return ("psf750");
         case 19: return ("psf1280");
         case 20: return ("psf1920");
         case 21: return ("psf2560");
         case 22: return ("psf0-v1020");
         case 23: return ("spare9");
         case 24: return ("spare8");
         case 25: return ("spare7");
         case 26: return ("spare6");
         case 27: return ("spare5");
         case 28: return ("spare4");
         case 29: return ("spare3");
         case 30: return ("spare2");
         case 31: return ("spare1");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
