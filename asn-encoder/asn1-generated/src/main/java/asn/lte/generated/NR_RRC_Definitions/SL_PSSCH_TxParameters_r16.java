/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SL_PSSCH_TxParameters_r16 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SL-PSSCH-TxParameters-r16";
   }

   public Asn1Integer sl_MinMCS_PSSCH_r16;
   public Asn1Integer sl_MaxMCS_PSSCH_r16;
   public Asn1Integer sl_MinSubChannelNumPSSCH_r16;
   public Asn1Integer sl_MaxSubchannelNumPSSCH_r16;
   public Asn1Integer sl_MaxTxTransNumPSSCH_r16;
   public SL_TxPower_r16 sl_MaxTxPower_r16;  // optional

   public SL_PSSCH_TxParameters_r16 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SL_PSSCH_TxParameters_r16 (
      Asn1Integer sl_MinMCS_PSSCH_r16_,
      Asn1Integer sl_MaxMCS_PSSCH_r16_,
      Asn1Integer sl_MinSubChannelNumPSSCH_r16_,
      Asn1Integer sl_MaxSubchannelNumPSSCH_r16_,
      Asn1Integer sl_MaxTxTransNumPSSCH_r16_,
      SL_TxPower_r16 sl_MaxTxPower_r16_
   ) {
      super();
      sl_MinMCS_PSSCH_r16 = sl_MinMCS_PSSCH_r16_;
      sl_MaxMCS_PSSCH_r16 = sl_MaxMCS_PSSCH_r16_;
      sl_MinSubChannelNumPSSCH_r16 = sl_MinSubChannelNumPSSCH_r16_;
      sl_MaxSubchannelNumPSSCH_r16 = sl_MaxSubchannelNumPSSCH_r16_;
      sl_MaxTxTransNumPSSCH_r16 = sl_MaxTxTransNumPSSCH_r16_;
      sl_MaxTxPower_r16 = sl_MaxTxPower_r16_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SL_PSSCH_TxParameters_r16 (
      Asn1Integer sl_MinMCS_PSSCH_r16_,
      Asn1Integer sl_MaxMCS_PSSCH_r16_,
      Asn1Integer sl_MinSubChannelNumPSSCH_r16_,
      Asn1Integer sl_MaxSubchannelNumPSSCH_r16_,
      Asn1Integer sl_MaxTxTransNumPSSCH_r16_
   ) {
      super();
      sl_MinMCS_PSSCH_r16 = sl_MinMCS_PSSCH_r16_;
      sl_MaxMCS_PSSCH_r16 = sl_MaxMCS_PSSCH_r16_;
      sl_MinSubChannelNumPSSCH_r16 = sl_MinSubChannelNumPSSCH_r16_;
      sl_MaxSubchannelNumPSSCH_r16 = sl_MaxSubchannelNumPSSCH_r16_;
      sl_MaxTxTransNumPSSCH_r16 = sl_MaxTxTransNumPSSCH_r16_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SL_PSSCH_TxParameters_r16 (long sl_MinMCS_PSSCH_r16_,
      long sl_MaxMCS_PSSCH_r16_,
      long sl_MinSubChannelNumPSSCH_r16_,
      long sl_MaxSubchannelNumPSSCH_r16_,
      long sl_MaxTxTransNumPSSCH_r16_,
      SL_TxPower_r16 sl_MaxTxPower_r16_
   ) {
      super();
      sl_MinMCS_PSSCH_r16 = new Asn1Integer (sl_MinMCS_PSSCH_r16_);
      sl_MaxMCS_PSSCH_r16 = new Asn1Integer (sl_MaxMCS_PSSCH_r16_);
      sl_MinSubChannelNumPSSCH_r16 = new Asn1Integer (sl_MinSubChannelNumPSSCH_r16_);
      sl_MaxSubchannelNumPSSCH_r16 = new Asn1Integer (sl_MaxSubchannelNumPSSCH_r16_);
      sl_MaxTxTransNumPSSCH_r16 = new Asn1Integer (sl_MaxTxTransNumPSSCH_r16_);
      sl_MaxTxPower_r16 = sl_MaxTxPower_r16_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public SL_PSSCH_TxParameters_r16 (
      long sl_MinMCS_PSSCH_r16_,
      long sl_MaxMCS_PSSCH_r16_,
      long sl_MinSubChannelNumPSSCH_r16_,
      long sl_MaxSubchannelNumPSSCH_r16_,
      long sl_MaxTxTransNumPSSCH_r16_
   ) {
      super();
      sl_MinMCS_PSSCH_r16 = new Asn1Integer (sl_MinMCS_PSSCH_r16_);
      sl_MaxMCS_PSSCH_r16 = new Asn1Integer (sl_MaxMCS_PSSCH_r16_);
      sl_MinSubChannelNumPSSCH_r16 = new Asn1Integer (sl_MinSubChannelNumPSSCH_r16_);
      sl_MaxSubchannelNumPSSCH_r16 = new Asn1Integer (sl_MaxSubchannelNumPSSCH_r16_);
      sl_MaxTxTransNumPSSCH_r16 = new Asn1Integer (sl_MaxTxTransNumPSSCH_r16_);
   }

   public void init () {
      sl_MinMCS_PSSCH_r16 = null;
      sl_MaxMCS_PSSCH_r16 = null;
      sl_MinSubChannelNumPSSCH_r16 = null;
      sl_MaxSubchannelNumPSSCH_r16 = null;
      sl_MaxTxTransNumPSSCH_r16 = null;
      sl_MaxTxPower_r16 = null;
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return sl_MinMCS_PSSCH_r16;
         case 1: return sl_MaxMCS_PSSCH_r16;
         case 2: return sl_MinSubChannelNumPSSCH_r16;
         case 3: return sl_MaxSubchannelNumPSSCH_r16;
         case 4: return sl_MaxTxTransNumPSSCH_r16;
         case 5: return sl_MaxTxPower_r16;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "sl-MinMCS-PSSCH-r16";
         case 1: return "sl-MaxMCS-PSSCH-r16";
         case 2: return "sl-MinSubChannelNumPSSCH-r16";
         case 3: return "sl-MaxSubchannelNumPSSCH-r16";
         case 4: return "sl-MaxTxTransNumPSSCH-r16";
         case 5: return "sl-MaxTxPower-r16";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean sl_MaxTxPower_r16Present = buffer.decodeBit ("sl_MaxTxPower_r16Present");

      // decode sl_MinMCS_PSSCH_r16

      buffer.getContext().eventDispatcher.startElement("sl_MinMCS_PSSCH_r16", -1);

      sl_MinMCS_PSSCH_r16 = new Asn1Integer();
      sl_MinMCS_PSSCH_r16.decode (buffer, 0, 27);

      buffer.invokeCharacters(sl_MinMCS_PSSCH_r16.toString());
      buffer.getContext().eventDispatcher.endElement("sl_MinMCS_PSSCH_r16", -1);

      // decode sl_MaxMCS_PSSCH_r16

      buffer.getContext().eventDispatcher.startElement("sl_MaxMCS_PSSCH_r16", -1);

      sl_MaxMCS_PSSCH_r16 = new Asn1Integer();
      sl_MaxMCS_PSSCH_r16.decode (buffer, 0, 31);

      buffer.invokeCharacters(sl_MaxMCS_PSSCH_r16.toString());
      buffer.getContext().eventDispatcher.endElement("sl_MaxMCS_PSSCH_r16", -1);

      // decode sl_MinSubChannelNumPSSCH_r16

      buffer.getContext().eventDispatcher.startElement("sl_MinSubChannelNumPSSCH_r16", -1);

      sl_MinSubChannelNumPSSCH_r16 = new Asn1Integer();
      sl_MinSubChannelNumPSSCH_r16.decode (buffer, 1, 27);

      buffer.invokeCharacters(sl_MinSubChannelNumPSSCH_r16.toString());
      buffer.getContext().eventDispatcher.endElement("sl_MinSubChannelNumPSSCH_r16", -1);

      // decode sl_MaxSubchannelNumPSSCH_r16

      buffer.getContext().eventDispatcher.startElement("sl_MaxSubchannelNumPSSCH_r16", -1);

      sl_MaxSubchannelNumPSSCH_r16 = new Asn1Integer();
      sl_MaxSubchannelNumPSSCH_r16.decode (buffer, 1, 27);

      buffer.invokeCharacters(sl_MaxSubchannelNumPSSCH_r16.toString());
      buffer.getContext().eventDispatcher.endElement("sl_MaxSubchannelNumPSSCH_r16", -1);

      // decode sl_MaxTxTransNumPSSCH_r16

      buffer.getContext().eventDispatcher.startElement("sl_MaxTxTransNumPSSCH_r16", -1);

      sl_MaxTxTransNumPSSCH_r16 = new Asn1Integer();
      sl_MaxTxTransNumPSSCH_r16.decode (buffer, 1, 32);

      buffer.invokeCharacters(sl_MaxTxTransNumPSSCH_r16.toString());
      buffer.getContext().eventDispatcher.endElement("sl_MaxTxTransNumPSSCH_r16", -1);

      // decode sl_MaxTxPower_r16

      if (sl_MaxTxPower_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_MaxTxPower_r16", -1);

         sl_MaxTxPower_r16 = new SL_TxPower_r16();
         sl_MaxTxPower_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sl_MaxTxPower_r16", -1);
      }
      else {
         sl_MaxTxPower_r16 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (sl_MinMCS_PSSCH_r16 != null) sl_MinMCS_PSSCH_r16.print (_sb, "sl_MinMCS_PSSCH_r16", _level+1);
      if (sl_MaxMCS_PSSCH_r16 != null) sl_MaxMCS_PSSCH_r16.print (_sb, "sl_MaxMCS_PSSCH_r16", _level+1);
      if (sl_MinSubChannelNumPSSCH_r16 != null) sl_MinSubChannelNumPSSCH_r16.print (_sb, "sl_MinSubChannelNumPSSCH_r16", _level+1);
      if (sl_MaxSubchannelNumPSSCH_r16 != null) sl_MaxSubchannelNumPSSCH_r16.print (_sb, "sl_MaxSubchannelNumPSSCH_r16", _level+1);
      if (sl_MaxTxTransNumPSSCH_r16 != null) sl_MaxTxTransNumPSSCH_r16.print (_sb, "sl_MaxTxTransNumPSSCH_r16", _level+1);
      if (sl_MaxTxPower_r16 != null) sl_MaxTxPower_r16.print (_sb, "sl_MaxTxPower_r16", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
