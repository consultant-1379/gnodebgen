/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class UL_DCCH_MessageType_c1 extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CHOICE";
   }

   // Choice element identifier constants
   public final static byte _CSFBPARAMETERSREQUESTCDMA2000 = 1;
   public final static byte _MEASUREMENTREPORT = 2;
   public final static byte _RRCCONNECTIONRECONFIGURATIONCOMPLETE = 3;
   public final static byte _RRCCONNECTIONREESTABLISHMENTCOMPLETE = 4;
   public final static byte _RRCCONNECTIONSETUPCOMPLETE = 5;
   public final static byte _SECURITYMODECOMPLETE = 6;
   public final static byte _SECURITYMODEFAILURE = 7;
   public final static byte _UECAPABILITYINFORMATION = 8;
   public final static byte _ULHANDOVERPREPARATIONTRANSFER = 9;
   public final static byte _ULINFORMATIONTRANSFER = 10;
   public final static byte _COUNTERCHECKRESPONSE = 11;
   public final static byte _UEINFORMATIONRESPONSE_R9 = 12;
   public final static byte _PROXIMITYINDICATION_R9 = 13;
   public final static byte _RNRECONFIGURATIONCOMPLETE_R10 = 14;
   public final static byte _MBMSCOUNTINGRESPONSE_R10 = 15;
   public final static byte _INTERFREQRSTDMEASUREMENTINDICATION_R10 = 16;

   public UL_DCCH_MessageType_c1 () {
      super();
   }

   public UL_DCCH_MessageType_c1 (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _CSFBPARAMETERSREQUESTCDMA2000: return "csfbParametersRequestCDMA2000";
      case _MEASUREMENTREPORT: return "measurementReport";
      case _RRCCONNECTIONRECONFIGURATIONCOMPLETE: return "rrcConnectionReconfigurationComplete";
      case _RRCCONNECTIONREESTABLISHMENTCOMPLETE: return "rrcConnectionReestablishmentComplete";
      case _RRCCONNECTIONSETUPCOMPLETE: return "rrcConnectionSetupComplete";
      case _SECURITYMODECOMPLETE: return "securityModeComplete";
      case _SECURITYMODEFAILURE: return "securityModeFailure";
      case _UECAPABILITYINFORMATION: return "ueCapabilityInformation";
      case _ULHANDOVERPREPARATIONTRANSFER: return "ulHandoverPreparationTransfer";
      case _ULINFORMATIONTRANSFER: return "ulInformationTransfer";
      case _COUNTERCHECKRESPONSE: return "counterCheckResponse";
      case _UEINFORMATIONRESPONSE_R9: return "ueInformationResponse_r9";
      case _PROXIMITYINDICATION_R9: return "proximityIndication_r9";
      case _RNRECONFIGURATIONCOMPLETE_R10: return "rnReconfigurationComplete_r10";
      case _MBMSCOUNTINGRESPONSE_R10: return "mbmsCountingResponse_r10";
      case _INTERFREQRSTDMEASUREMENTINDICATION_R10: return "interFreqRSTDMeasurementIndication_r10";
      default: return "UNDEFINED";
      }
   }

   public void set_csfbParametersRequestCDMA2000 (CSFBParametersRequestCDMA2000 value) {
      setElement (_CSFBPARAMETERSREQUESTCDMA2000, value);
   }

   public void set_measurementReport (MeasurementReport value) {
      setElement (_MEASUREMENTREPORT, value);
   }

   public void set_rrcConnectionReconfigurationComplete (RRCConnectionReconfigurationComplete value) {
      setElement (_RRCCONNECTIONRECONFIGURATIONCOMPLETE, value);
   }

   public void set_rrcConnectionReestablishmentComplete (RRCConnectionReestablishmentComplete value) {
      setElement (_RRCCONNECTIONREESTABLISHMENTCOMPLETE, value);
   }

   public void set_rrcConnectionSetupComplete (RRCConnectionSetupComplete value) {
      setElement (_RRCCONNECTIONSETUPCOMPLETE, value);
   }

   public void set_securityModeComplete (SecurityModeComplete value) {
      setElement (_SECURITYMODECOMPLETE, value);
   }

   public void set_securityModeFailure (SecurityModeFailure value) {
      setElement (_SECURITYMODEFAILURE, value);
   }

   public void set_ueCapabilityInformation (UECapabilityInformation value) {
      setElement (_UECAPABILITYINFORMATION, value);
   }

   public void set_ulHandoverPreparationTransfer (ULHandoverPreparationTransfer value) {
      setElement (_ULHANDOVERPREPARATIONTRANSFER, value);
   }

   public void set_ulInformationTransfer (ULInformationTransfer value) {
      setElement (_ULINFORMATIONTRANSFER, value);
   }

   public void set_counterCheckResponse (CounterCheckResponse value) {
      setElement (_COUNTERCHECKRESPONSE, value);
   }

   public void set_ueInformationResponse_r9 (UEInformationResponse_r9 value) {
      setElement (_UEINFORMATIONRESPONSE_R9, value);
   }

   public void set_proximityIndication_r9 (ProximityIndication_r9 value) {
      setElement (_PROXIMITYINDICATION_R9, value);
   }

   public void set_rnReconfigurationComplete_r10 (RNReconfigurationComplete_r10 value) {
      setElement (_RNRECONFIGURATIONCOMPLETE_R10, value);
   }

   public void set_mbmsCountingResponse_r10 (MBMSCountingResponse_r10 value) {
      setElement (_MBMSCOUNTINGRESPONSE_R10, value);
   }

   public void set_interFreqRSTDMeasurementIndication_r10 (InterFreqRSTDMeasurementIndication_r10 value) {
      setElement (_INTERFREQRSTDMEASUREMENTINDICATION_R10, value);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int idx = (int) buffer.decodeConsWholeNumber (16, "index");
      choiceID = idx + 1;
      buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

      switch (idx) {
         // csfbParametersRequestCDMA2000
         case 0: { 
            CSFBParametersRequestCDMA2000 csfbParametersRequestCDMA2000;
            element = csfbParametersRequestCDMA2000 = new CSFBParametersRequestCDMA2000();
            csfbParametersRequestCDMA2000.decode (buffer);
            break;
         }

         // measurementReport
         case 1: { 
            MeasurementReport measurementReport;
            element = measurementReport = new MeasurementReport();
            measurementReport.decode (buffer);
            break;
         }

         // rrcConnectionReconfigurationComplete
         case 2: { 
            RRCConnectionReconfigurationComplete rrcConnectionReconfigurationComplete;
            element = rrcConnectionReconfigurationComplete = new RRCConnectionReconfigurationComplete();
            rrcConnectionReconfigurationComplete.decode (buffer);
            break;
         }

         // rrcConnectionReestablishmentComplete
         case 3: { 
            RRCConnectionReestablishmentComplete rrcConnectionReestablishmentComplete;
            element = rrcConnectionReestablishmentComplete = new RRCConnectionReestablishmentComplete();
            rrcConnectionReestablishmentComplete.decode (buffer);
            break;
         }

         // rrcConnectionSetupComplete
         case 4: { 
            RRCConnectionSetupComplete rrcConnectionSetupComplete;
            element = rrcConnectionSetupComplete = new RRCConnectionSetupComplete();
            rrcConnectionSetupComplete.decode (buffer);
            break;
         }

         // securityModeComplete
         case 5: { 
            SecurityModeComplete securityModeComplete;
            element = securityModeComplete = new SecurityModeComplete();
            securityModeComplete.decode (buffer);
            break;
         }

         // securityModeFailure
         case 6: { 
            SecurityModeFailure securityModeFailure;
            element = securityModeFailure = new SecurityModeFailure();
            securityModeFailure.decode (buffer);
            break;
         }

         // ueCapabilityInformation
         case 7: { 
            UECapabilityInformation ueCapabilityInformation;
            element = ueCapabilityInformation = new UECapabilityInformation();
            ueCapabilityInformation.decode (buffer);
            break;
         }

         // ulHandoverPreparationTransfer
         case 8: { 
            ULHandoverPreparationTransfer ulHandoverPreparationTransfer;
            element = ulHandoverPreparationTransfer = new ULHandoverPreparationTransfer();
            ulHandoverPreparationTransfer.decode (buffer);
            break;
         }

         // ulInformationTransfer
         case 9: { 
            ULInformationTransfer ulInformationTransfer;
            element = ulInformationTransfer = new ULInformationTransfer();
            ulInformationTransfer.decode (buffer);
            break;
         }

         // counterCheckResponse
         case 10: { 
            CounterCheckResponse counterCheckResponse;
            element = counterCheckResponse = new CounterCheckResponse();
            counterCheckResponse.decode (buffer);
            break;
         }

         // ueInformationResponse_r9
         case 11: { 
            UEInformationResponse_r9 ueInformationResponse_r9;
            element = ueInformationResponse_r9 = new UEInformationResponse_r9();
            ueInformationResponse_r9.decode (buffer);
            break;
         }

         // proximityIndication_r9
         case 12: { 
            ProximityIndication_r9 proximityIndication_r9;
            element = proximityIndication_r9 = new ProximityIndication_r9();
            proximityIndication_r9.decode (buffer);
            break;
         }

         // rnReconfigurationComplete_r10
         case 13: { 
            RNReconfigurationComplete_r10 rnReconfigurationComplete_r10;
            element = rnReconfigurationComplete_r10 = new RNReconfigurationComplete_r10();
            rnReconfigurationComplete_r10.decode (buffer);
            break;
         }

         // mbmsCountingResponse_r10
         case 14: { 
            MBMSCountingResponse_r10 mbmsCountingResponse_r10;
            element = mbmsCountingResponse_r10 = new MBMSCountingResponse_r10();
            mbmsCountingResponse_r10.decode (buffer);
            break;
         }

         // interFreqRSTDMeasurementIndication_r10
         case 15: { 
            InterFreqRSTDMeasurementIndication_r10 interFreqRSTDMeasurementIndication_r10;
            element = interFreqRSTDMeasurementIndication_r10 = new InterFreqRSTDMeasurementIndication_r10();
            interFreqRSTDMeasurementIndication_r10.decode (buffer);
            break;
         }

         default:
         throw new Asn1InvalidChoiceOptionException (buffer, idx);
      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (element != null) {
         element.print (_sb, getElemName(), _level+1);
      }
      indent (_sb, _level);
      _sb.append("}\n");
   }

}
