/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SkipSubframeProcessing_r15 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SkipSubframeProcessing-r15";
   }

   public Asn1Integer skipProcessingDL_Slot_r15;  // optional
   public Asn1Integer skipProcessingDL_SubSlot_r15;  // optional
   public Asn1Integer skipProcessingUL_Slot_r15;  // optional
   public Asn1Integer skipProcessingUL_SubSlot_r15;  // optional

   public SkipSubframeProcessing_r15 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SkipSubframeProcessing_r15 (
      Asn1Integer skipProcessingDL_Slot_r15_,
      Asn1Integer skipProcessingDL_SubSlot_r15_,
      Asn1Integer skipProcessingUL_Slot_r15_,
      Asn1Integer skipProcessingUL_SubSlot_r15_
   ) {
      super();
      skipProcessingDL_Slot_r15 = skipProcessingDL_Slot_r15_;
      skipProcessingDL_SubSlot_r15 = skipProcessingDL_SubSlot_r15_;
      skipProcessingUL_Slot_r15 = skipProcessingUL_Slot_r15_;
      skipProcessingUL_SubSlot_r15 = skipProcessingUL_SubSlot_r15_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SkipSubframeProcessing_r15 (long skipProcessingDL_Slot_r15_,
      long skipProcessingDL_SubSlot_r15_,
      long skipProcessingUL_Slot_r15_,
      long skipProcessingUL_SubSlot_r15_
   ) {
      super();
      skipProcessingDL_Slot_r15 = new Asn1Integer (skipProcessingDL_Slot_r15_);
      skipProcessingDL_SubSlot_r15 = new Asn1Integer (skipProcessingDL_SubSlot_r15_);
      skipProcessingUL_Slot_r15 = new Asn1Integer (skipProcessingUL_Slot_r15_);
      skipProcessingUL_SubSlot_r15 = new Asn1Integer (skipProcessingUL_SubSlot_r15_);
   }

   public void init () {
      skipProcessingDL_Slot_r15 = null;
      skipProcessingDL_SubSlot_r15 = null;
      skipProcessingUL_Slot_r15 = null;
      skipProcessingUL_SubSlot_r15 = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return skipProcessingDL_Slot_r15;
         case 1: return skipProcessingDL_SubSlot_r15;
         case 2: return skipProcessingUL_Slot_r15;
         case 3: return skipProcessingUL_SubSlot_r15;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "skipProcessingDL-Slot-r15";
         case 1: return "skipProcessingDL-SubSlot-r15";
         case 2: return "skipProcessingUL-Slot-r15";
         case 3: return "skipProcessingUL-SubSlot-r15";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean skipProcessingDL_Slot_r15Present = buffer.decodeBit ("skipProcessingDL_Slot_r15Present");
      boolean skipProcessingDL_SubSlot_r15Present = buffer.decodeBit ("skipProcessingDL_SubSlot_r15Present");
      boolean skipProcessingUL_Slot_r15Present = buffer.decodeBit ("skipProcessingUL_Slot_r15Present");
      boolean skipProcessingUL_SubSlot_r15Present = buffer.decodeBit ("skipProcessingUL_SubSlot_r15Present");

      // decode skipProcessingDL_Slot_r15

      if (skipProcessingDL_Slot_r15Present) {
         buffer.getContext().eventDispatcher.startElement("skipProcessingDL_Slot_r15", -1);

         skipProcessingDL_Slot_r15 = new Asn1Integer();
         skipProcessingDL_Slot_r15.decode (buffer, 0, 3);

         buffer.invokeCharacters(skipProcessingDL_Slot_r15.toString());
         buffer.getContext().eventDispatcher.endElement("skipProcessingDL_Slot_r15", -1);
      }
      else {
         skipProcessingDL_Slot_r15 = null;
      }

      // decode skipProcessingDL_SubSlot_r15

      if (skipProcessingDL_SubSlot_r15Present) {
         buffer.getContext().eventDispatcher.startElement("skipProcessingDL_SubSlot_r15", -1);

         skipProcessingDL_SubSlot_r15 = new Asn1Integer();
         skipProcessingDL_SubSlot_r15.decode (buffer, 0, 3);

         buffer.invokeCharacters(skipProcessingDL_SubSlot_r15.toString());
         buffer.getContext().eventDispatcher.endElement("skipProcessingDL_SubSlot_r15", -1);
      }
      else {
         skipProcessingDL_SubSlot_r15 = null;
      }

      // decode skipProcessingUL_Slot_r15

      if (skipProcessingUL_Slot_r15Present) {
         buffer.getContext().eventDispatcher.startElement("skipProcessingUL_Slot_r15", -1);

         skipProcessingUL_Slot_r15 = new Asn1Integer();
         skipProcessingUL_Slot_r15.decode (buffer, 0, 3);

         buffer.invokeCharacters(skipProcessingUL_Slot_r15.toString());
         buffer.getContext().eventDispatcher.endElement("skipProcessingUL_Slot_r15", -1);
      }
      else {
         skipProcessingUL_Slot_r15 = null;
      }

      // decode skipProcessingUL_SubSlot_r15

      if (skipProcessingUL_SubSlot_r15Present) {
         buffer.getContext().eventDispatcher.startElement("skipProcessingUL_SubSlot_r15", -1);

         skipProcessingUL_SubSlot_r15 = new Asn1Integer();
         skipProcessingUL_SubSlot_r15.decode (buffer, 0, 3);

         buffer.invokeCharacters(skipProcessingUL_SubSlot_r15.toString());
         buffer.getContext().eventDispatcher.endElement("skipProcessingUL_SubSlot_r15", -1);
      }
      else {
         skipProcessingUL_SubSlot_r15 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (skipProcessingDL_Slot_r15 != null) skipProcessingDL_Slot_r15.print (_sb, "skipProcessingDL_Slot_r15", _level+1);
      if (skipProcessingDL_SubSlot_r15 != null) skipProcessingDL_SubSlot_r15.print (_sb, "skipProcessingDL_SubSlot_r15", _level+1);
      if (skipProcessingUL_Slot_r15 != null) skipProcessingUL_Slot_r15.print (_sb, "skipProcessingUL_Slot_r15", _level+1);
      if (skipProcessingUL_SubSlot_r15 != null) skipProcessingUL_SubSlot_r15.print (_sb, "skipProcessingUL_SubSlot_r15", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
