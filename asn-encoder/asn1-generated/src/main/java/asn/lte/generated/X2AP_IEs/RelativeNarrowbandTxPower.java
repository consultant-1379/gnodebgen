/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.X2AP_IEs;

import com.objsys.asn1j.runtime.*;

public class RelativeNarrowbandTxPower extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_X2AP_IEsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "RelativeNarrowbandTxPower";
   }

   public Asn1BitString rNTP_PerPRB;
   public RNTP_Threshold rNTP_Threshold = null;
   public RelativeNarrowbandTxPower_numberOfCellSpecificAntennaPorts numberOfCellSpecificAntennaPorts = null;
   public Asn1Integer p_B;
   public Asn1Integer pDCCH_InterferenceImpact;
   public RelativeNarrowbandTxPower_iE_Extensions iE_Extensions;  // optional
   public Asn1OpenExt extElem1;

   public RelativeNarrowbandTxPower () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public RelativeNarrowbandTxPower (
      Asn1BitString rNTP_PerPRB_,
      RNTP_Threshold rNTP_Threshold_,
      RelativeNarrowbandTxPower_numberOfCellSpecificAntennaPorts numberOfCellSpecificAntennaPorts_,
      Asn1Integer p_B_,
      Asn1Integer pDCCH_InterferenceImpact_,
      RelativeNarrowbandTxPower_iE_Extensions iE_Extensions_
   ) {
      super();
      rNTP_PerPRB = rNTP_PerPRB_;
      rNTP_Threshold = rNTP_Threshold_;
      numberOfCellSpecificAntennaPorts = numberOfCellSpecificAntennaPorts_;
      p_B = p_B_;
      pDCCH_InterferenceImpact = pDCCH_InterferenceImpact_;
      iE_Extensions = iE_Extensions_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public RelativeNarrowbandTxPower (
      Asn1BitString rNTP_PerPRB_,
      RNTP_Threshold rNTP_Threshold_,
      RelativeNarrowbandTxPower_numberOfCellSpecificAntennaPorts numberOfCellSpecificAntennaPorts_,
      Asn1Integer p_B_,
      Asn1Integer pDCCH_InterferenceImpact_
   ) {
      super();
      rNTP_PerPRB = rNTP_PerPRB_;
      rNTP_Threshold = rNTP_Threshold_;
      numberOfCellSpecificAntennaPorts = numberOfCellSpecificAntennaPorts_;
      p_B = p_B_;
      pDCCH_InterferenceImpact = pDCCH_InterferenceImpact_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public RelativeNarrowbandTxPower (Asn1BitString rNTP_PerPRB_,
      RNTP_Threshold rNTP_Threshold_,
      RelativeNarrowbandTxPower_numberOfCellSpecificAntennaPorts numberOfCellSpecificAntennaPorts_,
      long p_B_,
      long pDCCH_InterferenceImpact_,
      RelativeNarrowbandTxPower_iE_Extensions iE_Extensions_
   ) {
      super();
      rNTP_PerPRB = rNTP_PerPRB_;
      rNTP_Threshold = rNTP_Threshold_;
      numberOfCellSpecificAntennaPorts = numberOfCellSpecificAntennaPorts_;
      p_B = new Asn1Integer (p_B_);
      pDCCH_InterferenceImpact = new Asn1Integer (pDCCH_InterferenceImpact_);
      iE_Extensions = iE_Extensions_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public RelativeNarrowbandTxPower (
      Asn1BitString rNTP_PerPRB_,
      RNTP_Threshold rNTP_Threshold_,
      RelativeNarrowbandTxPower_numberOfCellSpecificAntennaPorts numberOfCellSpecificAntennaPorts_,
      long p_B_,
      long pDCCH_InterferenceImpact_
   ) {
      super();
      rNTP_PerPRB = rNTP_PerPRB_;
      rNTP_Threshold = rNTP_Threshold_;
      numberOfCellSpecificAntennaPorts = numberOfCellSpecificAntennaPorts_;
      p_B = new Asn1Integer (p_B_);
      pDCCH_InterferenceImpact = new Asn1Integer (pDCCH_InterferenceImpact_);
   }

   public void init () {
      rNTP_PerPRB = null;
      rNTP_Threshold = null;
      numberOfCellSpecificAntennaPorts = null;
      p_B = null;
      pDCCH_InterferenceImpact = null;
      iE_Extensions = null;
      extElem1 = null;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return rNTP_PerPRB;
         case 1: return rNTP_Threshold;
         case 2: return numberOfCellSpecificAntennaPorts;
         case 3: return p_B;
         case 4: return pDCCH_InterferenceImpact;
         case 5: return iE_Extensions;
         case 6: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "rNTP-PerPRB";
         case 1: return "rNTP-Threshold";
         case 2: return "numberOfCellSpecificAntennaPorts";
         case 3: return "p-B";
         case 4: return "pDCCH-InterferenceImpact";
         case 5: return "iE-Extensions";
         case 6: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean iE_ExtensionsPresent = buffer.decodeBit ("iE_ExtensionsPresent");

      // decode rNTP_PerPRB

      buffer.getContext().eventDispatcher.startElement("rNTP_PerPRB", -1);

      rNTP_PerPRB = new Asn1BitString();
      boolean extbit_1 = buffer.decodeBit ("extbit_1");
      if (!extbit_1) {
         rNTP_PerPRB.decode (buffer, 6, 110);
      }
      else {
         rNTP_PerPRB.decode (buffer);
      }

      buffer.invokeCharacters(rNTP_PerPRB.toString());
      buffer.getContext().eventDispatcher.endElement("rNTP_PerPRB", -1);

      // decode rNTP_Threshold

      buffer.getContext().eventDispatcher.startElement("rNTP_Threshold", -1);

      {
         int tval = RNTP_Threshold.decodeEnumValue (buffer);
         rNTP_Threshold = RNTP_Threshold.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("rNTP_Threshold", -1);

      // decode numberOfCellSpecificAntennaPorts

      buffer.getContext().eventDispatcher.startElement("numberOfCellSpecificAntennaPorts", -1);

      {
         int tval = RelativeNarrowbandTxPower_numberOfCellSpecificAntennaPorts.decodeEnumValue (buffer);
         numberOfCellSpecificAntennaPorts = RelativeNarrowbandTxPower_numberOfCellSpecificAntennaPorts.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("numberOfCellSpecificAntennaPorts", -1);

      // decode p_B

      buffer.getContext().eventDispatcher.startElement("p_B", -1);

      p_B = new Asn1Integer();
      boolean extbit_2 = buffer.decodeBit ("extbit_2");
      if (!extbit_2) {
         p_B.decode (buffer, 0, 3);
      }
      else {
         p_B.decode (buffer);
      }

      buffer.invokeCharacters(p_B.toString());
      buffer.getContext().eventDispatcher.endElement("p_B", -1);

      // decode pDCCH_InterferenceImpact

      buffer.getContext().eventDispatcher.startElement("pDCCH_InterferenceImpact", -1);

      pDCCH_InterferenceImpact = new Asn1Integer();
      boolean extbit_3 = buffer.decodeBit ("extbit_3");
      if (!extbit_3) {
         pDCCH_InterferenceImpact.decode (buffer, 0, 4);
      }
      else {
         pDCCH_InterferenceImpact.decode (buffer);
      }

      buffer.invokeCharacters(pDCCH_InterferenceImpact.toString());
      buffer.getContext().eventDispatcher.endElement("pDCCH_InterferenceImpact", -1);

      // decode iE_Extensions

      if (iE_ExtensionsPresent) {
         buffer.getContext().eventDispatcher.startElement("iE_Extensions", -1);

         iE_Extensions = new RelativeNarrowbandTxPower_iE_Extensions();
         iE_Extensions.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("iE_Extensions", -1);
      }
      else {
         iE_Extensions = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (rNTP_PerPRB != null) rNTP_PerPRB.print (_sb, "rNTP_PerPRB", _level+1);
      if (rNTP_Threshold != null) rNTP_Threshold.print (_sb, "rNTP_Threshold", _level+1);
      if (numberOfCellSpecificAntennaPorts != null) numberOfCellSpecificAntennaPorts.print (_sb, "numberOfCellSpecificAntennaPorts", _level+1);
      if (p_B != null) p_B.print (_sb, "p_B", _level+1);
      if (pDCCH_InterferenceImpact != null) pDCCH_InterferenceImpact.print (_sb, "pDCCH_InterferenceImpact", _level+1);
      if (iE_Extensions != null) iE_Extensions.print (_sb, "iE_Extensions", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
