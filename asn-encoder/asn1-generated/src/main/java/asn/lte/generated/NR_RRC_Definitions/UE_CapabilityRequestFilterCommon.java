/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class UE_CapabilityRequestFilterCommon extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "UE-CapabilityRequestFilterCommon";
   }

   public UE_CapabilityRequestFilterCommon_mrdc_Request mrdc_Request;  // optional
   public boolean mV2ExtPresent;
   public UE_CapabilityRequestFilterCommon_codebookTypeRequest_r16 codebookTypeRequest_r16;  // optional
   public UE_CapabilityRequestFilterCommon_uplinkTxSwitchRequest_r16 uplinkTxSwitchRequest_r16 = null;  // optional
   public Asn1OpenExt extElem1;

   public UE_CapabilityRequestFilterCommon () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public UE_CapabilityRequestFilterCommon (
      UE_CapabilityRequestFilterCommon_mrdc_Request mrdc_Request_,
      UE_CapabilityRequestFilterCommon_codebookTypeRequest_r16 codebookTypeRequest_r16_,
      UE_CapabilityRequestFilterCommon_uplinkTxSwitchRequest_r16 uplinkTxSwitchRequest_r16_
   ) {
      super();
      mrdc_Request = mrdc_Request_;
      codebookTypeRequest_r16 = codebookTypeRequest_r16_;
      uplinkTxSwitchRequest_r16 = uplinkTxSwitchRequest_r16_;
   }

   public void init () {
      mrdc_Request = null;
      codebookTypeRequest_r16 = null;
      uplinkTxSwitchRequest_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return mrdc_Request;
         case 1: return codebookTypeRequest_r16;
         case 2: return uplinkTxSwitchRequest_r16;
         case 3: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "mrdc-Request";
         case 1: return "codebookTypeRequest-r16";
         case 2: return "uplinkTxSwitchRequest-r16";
         case 3: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean mrdc_RequestPresent = buffer.decodeBit ("mrdc_RequestPresent");

      // decode mrdc_Request

      if (mrdc_RequestPresent) {
         buffer.getContext().eventDispatcher.startElement("mrdc_Request", -1);

         mrdc_Request = new UE_CapabilityRequestFilterCommon_mrdc_Request();
         mrdc_Request.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("mrdc_Request", -1);
      }
      else {
         mrdc_Request = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean codebookTypeRequest_r16Present = buffer.decodeBit ("codebookTypeRequest_r16Present");

            boolean uplinkTxSwitchRequest_r16Present = buffer.decodeBit ("uplinkTxSwitchRequest_r16Present");

            // decode codebookTypeRequest_r16

            if (codebookTypeRequest_r16Present) {
               buffer.getContext().eventDispatcher.startElement("codebookTypeRequest_r16", -1);

               codebookTypeRequest_r16 = new UE_CapabilityRequestFilterCommon_codebookTypeRequest_r16();
               codebookTypeRequest_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("codebookTypeRequest_r16", -1);
            }
            else {
               codebookTypeRequest_r16 = null;
            }

            // decode uplinkTxSwitchRequest_r16

            if (uplinkTxSwitchRequest_r16Present) {
               buffer.getContext().eventDispatcher.startElement("uplinkTxSwitchRequest_r16", -1);

               int tval = UE_CapabilityRequestFilterCommon_uplinkTxSwitchRequest_r16.decodeEnumValue (buffer);
               uplinkTxSwitchRequest_r16 = UE_CapabilityRequestFilterCommon_uplinkTxSwitchRequest_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("uplinkTxSwitchRequest_r16", -1);
            }
            else {
               uplinkTxSwitchRequest_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (mrdc_Request != null) mrdc_Request.print (_sb, "mrdc_Request", _level+1);
      if (codebookTypeRequest_r16 != null) codebookTypeRequest_r16.print (_sb, "codebookTypeRequest_r16", _level+1);
      if (uplinkTxSwitchRequest_r16 != null) uplinkTxSwitchRequest_r16.print (_sb, "uplinkTxSwitchRequest_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
