/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SecurityConfigHO_handoverType_intraLTE extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public SecurityAlgorithmConfig securityAlgorithmConfig;  // optional
   public Asn1Boolean keyChangeIndicator;
   public NextHopChainingCount nextHopChainingCount;

   public SecurityConfigHO_handoverType_intraLTE () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SecurityConfigHO_handoverType_intraLTE (
      SecurityAlgorithmConfig securityAlgorithmConfig_,
      Asn1Boolean keyChangeIndicator_,
      NextHopChainingCount nextHopChainingCount_
   ) {
      super();
      securityAlgorithmConfig = securityAlgorithmConfig_;
      keyChangeIndicator = keyChangeIndicator_;
      nextHopChainingCount = nextHopChainingCount_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SecurityConfigHO_handoverType_intraLTE (
      Asn1Boolean keyChangeIndicator_,
      NextHopChainingCount nextHopChainingCount_
   ) {
      super();
      keyChangeIndicator = keyChangeIndicator_;
      nextHopChainingCount = nextHopChainingCount_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SecurityConfigHO_handoverType_intraLTE (SecurityAlgorithmConfig securityAlgorithmConfig_,
      boolean keyChangeIndicator_,
      long nextHopChainingCount_
   ) {
      super();
      securityAlgorithmConfig = securityAlgorithmConfig_;
      keyChangeIndicator = new Asn1Boolean (keyChangeIndicator_);
      nextHopChainingCount = new NextHopChainingCount (nextHopChainingCount_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public SecurityConfigHO_handoverType_intraLTE (
      boolean keyChangeIndicator_,
      long nextHopChainingCount_
   ) {
      super();
      keyChangeIndicator = new Asn1Boolean (keyChangeIndicator_);
      nextHopChainingCount = new NextHopChainingCount (nextHopChainingCount_);
   }

   public void init () {
      securityAlgorithmConfig = null;
      keyChangeIndicator = null;
      nextHopChainingCount = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return securityAlgorithmConfig;
         case 1: return keyChangeIndicator;
         case 2: return nextHopChainingCount;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "securityAlgorithmConfig";
         case 1: return "keyChangeIndicator";
         case 2: return "nextHopChainingCount";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean securityAlgorithmConfigPresent = buffer.decodeBit ("securityAlgorithmConfigPresent");

      // decode securityAlgorithmConfig

      if (securityAlgorithmConfigPresent) {
         buffer.getContext().eventDispatcher.startElement("securityAlgorithmConfig", -1);

         securityAlgorithmConfig = new SecurityAlgorithmConfig();
         securityAlgorithmConfig.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("securityAlgorithmConfig", -1);
      }
      else {
         securityAlgorithmConfig = null;
      }

      // decode keyChangeIndicator

      buffer.getContext().eventDispatcher.startElement("keyChangeIndicator", -1);

      keyChangeIndicator = new Asn1Boolean();
      keyChangeIndicator.decode (buffer);

      buffer.invokeCharacters(keyChangeIndicator.toString());
      buffer.getContext().eventDispatcher.endElement("keyChangeIndicator", -1);

      // decode nextHopChainingCount

      buffer.getContext().eventDispatcher.startElement("nextHopChainingCount", -1);

      nextHopChainingCount = new NextHopChainingCount();
      nextHopChainingCount.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("nextHopChainingCount", -1);

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (securityAlgorithmConfig != null) securityAlgorithmConfig.print (_sb, "securityAlgorithmConfig", _level+1);
      if (keyChangeIndicator != null) keyChangeIndicator.print (_sb, "keyChangeIndicator", _level+1);
      if (nextHopChainingCount != null) nextHopChainingCount.print (_sb, "nextHopChainingCount", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
