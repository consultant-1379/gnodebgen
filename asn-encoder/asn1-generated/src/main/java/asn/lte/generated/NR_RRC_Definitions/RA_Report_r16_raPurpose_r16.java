/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class RA_Report_r16_raPurpose_r16 extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ENUMERATED";
   }

   // Integer constants for switch-case
   public static final int _ACCESSRELATED = 0;
   public static final int _BEAMFAILURERECOVERY = 1;
   public static final int _RECONFIGURATIONWITHSYNC = 2;
   public static final int _ULUNSYNCHRONIZED = 3;
   public static final int _SCHEDULINGREQUESTFAILURE = 4;
   public static final int _NOPUCCHRESOURCEAVAILABLE = 5;
   public static final int _REQUESTFOROTHERSI = 6;
   public static final int _SPARE9 = 7;
   public static final int _SPARE8 = 8;
   public static final int _SPARE7 = 9;
   public static final int _SPARE6 = 10;
   public static final int _SPARE5 = 11;
   public static final int _SPARE4 = 12;
   public static final int _SPARE3 = 13;
   public static final int _SPARE2 = 14;
   public static final int _SPARE1 = 15;

   // Singleton instances of RA_Report_r16_raPurpose_r16
   protected static final RA_Report_r16_raPurpose_r16 _accessRelated = new RA_Report_r16_raPurpose_r16(0);
   protected static final RA_Report_r16_raPurpose_r16 _beamFailureRecovery = new RA_Report_r16_raPurpose_r16(1);
   protected static final RA_Report_r16_raPurpose_r16 _reconfigurationWithSync = new RA_Report_r16_raPurpose_r16(2);
   protected static final RA_Report_r16_raPurpose_r16 _ulUnSynchronized = new RA_Report_r16_raPurpose_r16(3);
   protected static final RA_Report_r16_raPurpose_r16 _schedulingRequestFailure = new RA_Report_r16_raPurpose_r16(4);
   protected static final RA_Report_r16_raPurpose_r16 _noPUCCHResourceAvailable = new RA_Report_r16_raPurpose_r16(5);
   protected static final RA_Report_r16_raPurpose_r16 _requestForOtherSI = new RA_Report_r16_raPurpose_r16(6);
   protected static final RA_Report_r16_raPurpose_r16 _spare9 = new RA_Report_r16_raPurpose_r16(7);
   protected static final RA_Report_r16_raPurpose_r16 _spare8 = new RA_Report_r16_raPurpose_r16(8);
   protected static final RA_Report_r16_raPurpose_r16 _spare7 = new RA_Report_r16_raPurpose_r16(9);
   protected static final RA_Report_r16_raPurpose_r16 _spare6 = new RA_Report_r16_raPurpose_r16(10);
   protected static final RA_Report_r16_raPurpose_r16 _spare5 = new RA_Report_r16_raPurpose_r16(11);
   protected static final RA_Report_r16_raPurpose_r16 _spare4 = new RA_Report_r16_raPurpose_r16(12);
   protected static final RA_Report_r16_raPurpose_r16 _spare3 = new RA_Report_r16_raPurpose_r16(13);
   protected static final RA_Report_r16_raPurpose_r16 _spare2 = new RA_Report_r16_raPurpose_r16(14);
   protected static final RA_Report_r16_raPurpose_r16 _spare1 = new RA_Report_r16_raPurpose_r16(15);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    *   7
    *   8
    *   9
    *   10
    *   11
    *   12
    *   13
    *   14
    *   15
    */
   protected RA_Report_r16_raPurpose_r16 (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for accessRelated.
    */
   public static RA_Report_r16_raPurpose_r16 accessRelated() {
      return _accessRelated;
   }

   /**
    * Singleton accessor method for beamFailureRecovery.
    */
   public static RA_Report_r16_raPurpose_r16 beamFailureRecovery() {
      return _beamFailureRecovery;
   }

   /**
    * Singleton accessor method for reconfigurationWithSync.
    */
   public static RA_Report_r16_raPurpose_r16 reconfigurationWithSync() {
      return _reconfigurationWithSync;
   }

   /**
    * Singleton accessor method for ulUnSynchronized.
    */
   public static RA_Report_r16_raPurpose_r16 ulUnSynchronized() {
      return _ulUnSynchronized;
   }

   /**
    * Singleton accessor method for schedulingRequestFailure.
    */
   public static RA_Report_r16_raPurpose_r16 schedulingRequestFailure() {
      return _schedulingRequestFailure;
   }

   /**
    * Singleton accessor method for noPUCCHResourceAvailable.
    */
   public static RA_Report_r16_raPurpose_r16 noPUCCHResourceAvailable() {
      return _noPUCCHResourceAvailable;
   }

   /**
    * Singleton accessor method for requestForOtherSI.
    */
   public static RA_Report_r16_raPurpose_r16 requestForOtherSI() {
      return _requestForOtherSI;
   }

   /**
    * Singleton accessor method for spare9.
    */
   public static RA_Report_r16_raPurpose_r16 spare9() {
      return _spare9;
   }

   /**
    * Singleton accessor method for spare8.
    */
   public static RA_Report_r16_raPurpose_r16 spare8() {
      return _spare8;
   }

   /**
    * Singleton accessor method for spare7.
    */
   public static RA_Report_r16_raPurpose_r16 spare7() {
      return _spare7;
   }

   /**
    * Singleton accessor method for spare6.
    */
   public static RA_Report_r16_raPurpose_r16 spare6() {
      return _spare6;
   }

   /**
    * Singleton accessor method for spare5.
    */
   public static RA_Report_r16_raPurpose_r16 spare5() {
      return _spare5;
   }

   /**
    * Singleton accessor method for spare4.
    */
   public static RA_Report_r16_raPurpose_r16 spare4() {
      return _spare4;
   }

   /**
    * Singleton accessor method for spare3.
    */
   public static RA_Report_r16_raPurpose_r16 spare3() {
      return _spare3;
   }

   /**
    * Singleton accessor method for spare2.
    */
   public static RA_Report_r16_raPurpose_r16 spare2() {
      return _spare2;
   }

   /**
    * Singleton accessor method for spare1.
    */
   public static RA_Report_r16_raPurpose_r16 spare1() {
      return _spare1;
   }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return RA_Report_r16_raPurpose_r16.valueOf( RA_Report_r16_raPurpose_r16.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static RA_Report_r16_raPurpose_r16 valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 0: return accessRelated();
         case 1: return beamFailureRecovery();
         case 2: return reconfigurationWithSync();
         case 3: return ulUnSynchronized();
         case 4: return schedulingRequestFailure();
         case 5: return noPUCCHResourceAvailable();
         case 6: return requestForOtherSI();
         case 7: return spare9();
         case 8: return spare8();
         case 9: return spare7();
         case 10: return spare6();
         case 11: return spare5();
         case 12: return spare4();
         case 13: return spare3();
         case 14: return spare2();
         case 15: return spare1();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      ui = (int) buffer.decodeConsWholeNumber (16);

      switch (ui) {
         case 0: ret =  0; break;
         case 1: ret =  1; break;
         case 2: ret =  2; break;
         case 3: ret =  3; break;
         case 4: ret =  4; break;
         case 5: ret =  5; break;
         case 6: ret =  6; break;
         case 7: ret =  7; break;
         case 8: ret =  8; break;
         case 9: ret =  9; break;
         case 10: ret =  10; break;
         case 11: ret =  11; break;
         case 12: ret =  12; break;
         case 13: ret =  13; break;
         case 14: ret =  14; break;
         case 15: ret =  15; break;
         default: throw new Asn1InvalidEnumException (ui);
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (RA_Report_r16_raPurpose_r16.valueOf(ret).toString());

      return ret;
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("accessRelated");
         case 1: return ("beamFailureRecovery");
         case 2: return ("reconfigurationWithSync");
         case 3: return ("ulUnSynchronized");
         case 4: return ("schedulingRequestFailure");
         case 5: return ("noPUCCHResourceAvailable");
         case 6: return ("requestForOtherSI");
         case 7: return ("spare9");
         case 8: return ("spare8");
         case 9: return ("spare7");
         case 10: return ("spare6");
         case 11: return ("spare5");
         case 12: return ("spare4");
         case 13: return ("spare3");
         case 14: return ("spare2");
         case 15: return ("spare1");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
