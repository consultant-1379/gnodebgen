/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_Sidelink_Preconf;

import com.objsys.asn1j.runtime.*;
import asn.lte.generated.EUTRA_RRC_Definitions.SL_CP_Len_r12;
import asn.lte.generated.EUTRA_RRC_Definitions.SL_OffsetIndicatorSync_r12;
import asn.lte.generated.EUTRA_RRC_Definitions.P0_SL_r12;
import asn.lte.generated.EUTRA_RRC_Definitions.RSRP_RangeSL3_r12;
import asn.lte.generated.EUTRA_RRC_Definitions.FilterCoefficient;

public class SL_PreconfigSync_r12 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_Sidelink_PreconfRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SL-PreconfigSync-r12";
   }

   public SL_CP_Len_r12 syncCP_Len_r12 = null;
   public SL_OffsetIndicatorSync_r12 syncOffsetIndicator1_r12;
   public SL_OffsetIndicatorSync_r12 syncOffsetIndicator2_r12;
   public P0_SL_r12 syncTxParameters_r12;
   public RSRP_RangeSL3_r12 syncTxThreshOoC_r12;
   public FilterCoefficient filterCoefficient_r12 = null;
   public SL_PreconfigSync_r12_syncRefMinHyst_r12 syncRefMinHyst_r12 = null;
   public SL_PreconfigSync_r12_syncRefDiffHyst_r12 syncRefDiffHyst_r12 = null;
   public boolean mV2ExtPresent;
   public SL_PreconfigSync_r12_syncTxPeriodic_r13 syncTxPeriodic_r13 = null;  // optional
   public Asn1OpenExt extElem1;

   public SL_PreconfigSync_r12 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SL_PreconfigSync_r12 (
      SL_CP_Len_r12 syncCP_Len_r12_,
      SL_OffsetIndicatorSync_r12 syncOffsetIndicator1_r12_,
      SL_OffsetIndicatorSync_r12 syncOffsetIndicator2_r12_,
      P0_SL_r12 syncTxParameters_r12_,
      RSRP_RangeSL3_r12 syncTxThreshOoC_r12_,
      FilterCoefficient filterCoefficient_r12_,
      SL_PreconfigSync_r12_syncRefMinHyst_r12 syncRefMinHyst_r12_,
      SL_PreconfigSync_r12_syncRefDiffHyst_r12 syncRefDiffHyst_r12_,
      SL_PreconfigSync_r12_syncTxPeriodic_r13 syncTxPeriodic_r13_
   ) {
      super();
      syncCP_Len_r12 = syncCP_Len_r12_;
      syncOffsetIndicator1_r12 = syncOffsetIndicator1_r12_;
      syncOffsetIndicator2_r12 = syncOffsetIndicator2_r12_;
      syncTxParameters_r12 = syncTxParameters_r12_;
      syncTxThreshOoC_r12 = syncTxThreshOoC_r12_;
      filterCoefficient_r12 = filterCoefficient_r12_;
      syncRefMinHyst_r12 = syncRefMinHyst_r12_;
      syncRefDiffHyst_r12 = syncRefDiffHyst_r12_;
      syncTxPeriodic_r13 = syncTxPeriodic_r13_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SL_PreconfigSync_r12 (
      SL_CP_Len_r12 syncCP_Len_r12_,
      SL_OffsetIndicatorSync_r12 syncOffsetIndicator1_r12_,
      SL_OffsetIndicatorSync_r12 syncOffsetIndicator2_r12_,
      P0_SL_r12 syncTxParameters_r12_,
      RSRP_RangeSL3_r12 syncTxThreshOoC_r12_,
      FilterCoefficient filterCoefficient_r12_,
      SL_PreconfigSync_r12_syncRefMinHyst_r12 syncRefMinHyst_r12_,
      SL_PreconfigSync_r12_syncRefDiffHyst_r12 syncRefDiffHyst_r12_
   ) {
      super();
      syncCP_Len_r12 = syncCP_Len_r12_;
      syncOffsetIndicator1_r12 = syncOffsetIndicator1_r12_;
      syncOffsetIndicator2_r12 = syncOffsetIndicator2_r12_;
      syncTxParameters_r12 = syncTxParameters_r12_;
      syncTxThreshOoC_r12 = syncTxThreshOoC_r12_;
      filterCoefficient_r12 = filterCoefficient_r12_;
      syncRefMinHyst_r12 = syncRefMinHyst_r12_;
      syncRefDiffHyst_r12 = syncRefDiffHyst_r12_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SL_PreconfigSync_r12 (SL_CP_Len_r12 syncCP_Len_r12_,
      long syncOffsetIndicator1_r12_,
      long syncOffsetIndicator2_r12_,
      long syncTxParameters_r12_,
      long syncTxThreshOoC_r12_,
      FilterCoefficient filterCoefficient_r12_,
      SL_PreconfigSync_r12_syncRefMinHyst_r12 syncRefMinHyst_r12_,
      SL_PreconfigSync_r12_syncRefDiffHyst_r12 syncRefDiffHyst_r12_,
      SL_PreconfigSync_r12_syncTxPeriodic_r13 syncTxPeriodic_r13_
   ) {
      super();
      syncCP_Len_r12 = syncCP_Len_r12_;
      syncOffsetIndicator1_r12 = new SL_OffsetIndicatorSync_r12 (syncOffsetIndicator1_r12_);
      syncOffsetIndicator2_r12 = new SL_OffsetIndicatorSync_r12 (syncOffsetIndicator2_r12_);
      syncTxParameters_r12 = new P0_SL_r12 (syncTxParameters_r12_);
      syncTxThreshOoC_r12 = new RSRP_RangeSL3_r12 (syncTxThreshOoC_r12_);
      filterCoefficient_r12 = filterCoefficient_r12_;
      syncRefMinHyst_r12 = syncRefMinHyst_r12_;
      syncRefDiffHyst_r12 = syncRefDiffHyst_r12_;
      syncTxPeriodic_r13 = syncTxPeriodic_r13_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public SL_PreconfigSync_r12 (
      SL_CP_Len_r12 syncCP_Len_r12_,
      long syncOffsetIndicator1_r12_,
      long syncOffsetIndicator2_r12_,
      long syncTxParameters_r12_,
      long syncTxThreshOoC_r12_,
      FilterCoefficient filterCoefficient_r12_,
      SL_PreconfigSync_r12_syncRefMinHyst_r12 syncRefMinHyst_r12_,
      SL_PreconfigSync_r12_syncRefDiffHyst_r12 syncRefDiffHyst_r12_
   ) {
      super();
      syncCP_Len_r12 = syncCP_Len_r12_;
      syncOffsetIndicator1_r12 = new SL_OffsetIndicatorSync_r12 (syncOffsetIndicator1_r12_);
      syncOffsetIndicator2_r12 = new SL_OffsetIndicatorSync_r12 (syncOffsetIndicator2_r12_);
      syncTxParameters_r12 = new P0_SL_r12 (syncTxParameters_r12_);
      syncTxThreshOoC_r12 = new RSRP_RangeSL3_r12 (syncTxThreshOoC_r12_);
      filterCoefficient_r12 = filterCoefficient_r12_;
      syncRefMinHyst_r12 = syncRefMinHyst_r12_;
      syncRefDiffHyst_r12 = syncRefDiffHyst_r12_;
   }

   public void init () {
      syncCP_Len_r12 = null;
      syncOffsetIndicator1_r12 = null;
      syncOffsetIndicator2_r12 = null;
      syncTxParameters_r12 = null;
      syncTxThreshOoC_r12 = null;
      filterCoefficient_r12 = null;
      syncRefMinHyst_r12 = null;
      syncRefDiffHyst_r12 = null;
      syncTxPeriodic_r13 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 10; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return syncCP_Len_r12;
         case 1: return syncOffsetIndicator1_r12;
         case 2: return syncOffsetIndicator2_r12;
         case 3: return syncTxParameters_r12;
         case 4: return syncTxThreshOoC_r12;
         case 5: return filterCoefficient_r12;
         case 6: return syncRefMinHyst_r12;
         case 7: return syncRefDiffHyst_r12;
         case 8: return syncTxPeriodic_r13;
         case 9: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "syncCP-Len-r12";
         case 1: return "syncOffsetIndicator1-r12";
         case 2: return "syncOffsetIndicator2-r12";
         case 3: return "syncTxParameters-r12";
         case 4: return "syncTxThreshOoC-r12";
         case 5: return "filterCoefficient-r12";
         case 6: return "syncRefMinHyst-r12";
         case 7: return "syncRefDiffHyst-r12";
         case 8: return "syncTxPeriodic-r13";
         case 9: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      // decode syncCP_Len_r12

      buffer.getContext().eventDispatcher.startElement("syncCP_Len_r12", -1);

      {
         int tval = SL_CP_Len_r12.decodeEnumValue (buffer);
         syncCP_Len_r12 = SL_CP_Len_r12.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("syncCP_Len_r12", -1);

      // decode syncOffsetIndicator1_r12

      buffer.getContext().eventDispatcher.startElement("syncOffsetIndicator1_r12", -1);

      syncOffsetIndicator1_r12 = new SL_OffsetIndicatorSync_r12();
      syncOffsetIndicator1_r12.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("syncOffsetIndicator1_r12", -1);

      // decode syncOffsetIndicator2_r12

      buffer.getContext().eventDispatcher.startElement("syncOffsetIndicator2_r12", -1);

      syncOffsetIndicator2_r12 = new SL_OffsetIndicatorSync_r12();
      syncOffsetIndicator2_r12.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("syncOffsetIndicator2_r12", -1);

      // decode syncTxParameters_r12

      buffer.getContext().eventDispatcher.startElement("syncTxParameters_r12", -1);

      syncTxParameters_r12 = new P0_SL_r12();
      syncTxParameters_r12.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("syncTxParameters_r12", -1);

      // decode syncTxThreshOoC_r12

      buffer.getContext().eventDispatcher.startElement("syncTxThreshOoC_r12", -1);

      syncTxThreshOoC_r12 = new RSRP_RangeSL3_r12();
      syncTxThreshOoC_r12.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("syncTxThreshOoC_r12", -1);

      // decode filterCoefficient_r12

      buffer.getContext().eventDispatcher.startElement("filterCoefficient_r12", -1);

      {
         int tval = FilterCoefficient.decodeEnumValue (buffer);
         filterCoefficient_r12 = FilterCoefficient.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("filterCoefficient_r12", -1);

      // decode syncRefMinHyst_r12

      buffer.getContext().eventDispatcher.startElement("syncRefMinHyst_r12", -1);

      {
         int tval = SL_PreconfigSync_r12_syncRefMinHyst_r12.decodeEnumValue (buffer);
         syncRefMinHyst_r12 = SL_PreconfigSync_r12_syncRefMinHyst_r12.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("syncRefMinHyst_r12", -1);

      // decode syncRefDiffHyst_r12

      buffer.getContext().eventDispatcher.startElement("syncRefDiffHyst_r12", -1);

      {
         int tval = SL_PreconfigSync_r12_syncRefDiffHyst_r12.decodeEnumValue (buffer);
         syncRefDiffHyst_r12 = SL_PreconfigSync_r12_syncRefDiffHyst_r12.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("syncRefDiffHyst_r12", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean syncTxPeriodic_r13Present = buffer.decodeBit ("syncTxPeriodic_r13Present");

            // decode syncTxPeriodic_r13

            if (syncTxPeriodic_r13Present) {
               buffer.getContext().eventDispatcher.startElement("syncTxPeriodic_r13", -1);

               int tval = SL_PreconfigSync_r12_syncTxPeriodic_r13.decodeEnumValue (buffer);
               syncTxPeriodic_r13 = SL_PreconfigSync_r12_syncTxPeriodic_r13.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("syncTxPeriodic_r13", -1);
            }
            else {
               syncTxPeriodic_r13 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (syncCP_Len_r12 != null) syncCP_Len_r12.print (_sb, "syncCP_Len_r12", _level+1);
      if (syncOffsetIndicator1_r12 != null) syncOffsetIndicator1_r12.print (_sb, "syncOffsetIndicator1_r12", _level+1);
      if (syncOffsetIndicator2_r12 != null) syncOffsetIndicator2_r12.print (_sb, "syncOffsetIndicator2_r12", _level+1);
      if (syncTxParameters_r12 != null) syncTxParameters_r12.print (_sb, "syncTxParameters_r12", _level+1);
      if (syncTxThreshOoC_r12 != null) syncTxThreshOoC_r12.print (_sb, "syncTxThreshOoC_r12", _level+1);
      if (filterCoefficient_r12 != null) filterCoefficient_r12.print (_sb, "filterCoefficient_r12", _level+1);
      if (syncRefMinHyst_r12 != null) syncRefMinHyst_r12.print (_sb, "syncRefMinHyst_r12", _level+1);
      if (syncRefDiffHyst_r12 != null) syncRefDiffHyst_r12.print (_sb, "syncRefDiffHyst_r12", _level+1);
      if (syncTxPeriodic_r13 != null) syncTxPeriodic_r13.print (_sb, "syncTxPeriodic_r13", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
