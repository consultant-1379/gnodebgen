/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MeasResultServFreq_r10 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "MeasResultServFreq-r10";
   }

   public ServCellIndex_r10 servFreqId_r10;
   public MeasResultServFreq_r10_measResultSCell_r10 measResultSCell_r10;  // optional
   public MeasResultServFreq_r10_measResultBestNeighCell_r10 measResultBestNeighCell_r10;  // optional
   public boolean mV2ExtPresent;
   public RSRQ_Range_v1250 measResultSCell_v1250;  // optional
   public RSRQ_Range_v1250 measResultBestNeighCell_v1250;  // optional
   public boolean mV3ExtPresent;
   public MeasResultServFreq_r10_measResultSCell_v1310 measResultSCell_v1310;  // optional
   public MeasResultServFreq_r10_measResultBestNeighCell_v1310 measResultBestNeighCell_v1310;  // optional
   public Asn1OpenExt extElem1;

   public MeasResultServFreq_r10 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MeasResultServFreq_r10 (
      ServCellIndex_r10 servFreqId_r10_,
      MeasResultServFreq_r10_measResultSCell_r10 measResultSCell_r10_,
      MeasResultServFreq_r10_measResultBestNeighCell_r10 measResultBestNeighCell_r10_,
      RSRQ_Range_v1250 measResultSCell_v1250_,
      RSRQ_Range_v1250 measResultBestNeighCell_v1250_,
      MeasResultServFreq_r10_measResultSCell_v1310 measResultSCell_v1310_,
      MeasResultServFreq_r10_measResultBestNeighCell_v1310 measResultBestNeighCell_v1310_
   ) {
      super();
      servFreqId_r10 = servFreqId_r10_;
      measResultSCell_r10 = measResultSCell_r10_;
      measResultBestNeighCell_r10 = measResultBestNeighCell_r10_;
      measResultSCell_v1250 = measResultSCell_v1250_;
      measResultBestNeighCell_v1250 = measResultBestNeighCell_v1250_;
      measResultSCell_v1310 = measResultSCell_v1310_;
      measResultBestNeighCell_v1310 = measResultBestNeighCell_v1310_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public MeasResultServFreq_r10 (
      ServCellIndex_r10 servFreqId_r10_
   ) {
      super();
      servFreqId_r10 = servFreqId_r10_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public MeasResultServFreq_r10 (long servFreqId_r10_,
      MeasResultServFreq_r10_measResultSCell_r10 measResultSCell_r10_,
      MeasResultServFreq_r10_measResultBestNeighCell_r10 measResultBestNeighCell_r10_,
      long measResultSCell_v1250_,
      long measResultBestNeighCell_v1250_,
      MeasResultServFreq_r10_measResultSCell_v1310 measResultSCell_v1310_,
      MeasResultServFreq_r10_measResultBestNeighCell_v1310 measResultBestNeighCell_v1310_
   ) {
      super();
      servFreqId_r10 = new ServCellIndex_r10 (servFreqId_r10_);
      measResultSCell_r10 = measResultSCell_r10_;
      measResultBestNeighCell_r10 = measResultBestNeighCell_r10_;
      measResultSCell_v1250 = new RSRQ_Range_v1250 (measResultSCell_v1250_);
      measResultBestNeighCell_v1250 = new RSRQ_Range_v1250 (measResultBestNeighCell_v1250_);
      measResultSCell_v1310 = measResultSCell_v1310_;
      measResultBestNeighCell_v1310 = measResultBestNeighCell_v1310_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public MeasResultServFreq_r10 (
      long servFreqId_r10_
   ) {
      super();
      servFreqId_r10 = new ServCellIndex_r10 (servFreqId_r10_);
   }

   public void init () {
      servFreqId_r10 = null;
      measResultSCell_r10 = null;
      measResultBestNeighCell_r10 = null;
      measResultSCell_v1250 = null;
      measResultBestNeighCell_v1250 = null;
      measResultSCell_v1310 = null;
      measResultBestNeighCell_v1310 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 8; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return servFreqId_r10;
         case 1: return measResultSCell_r10;
         case 2: return measResultBestNeighCell_r10;
         case 3: return measResultSCell_v1250;
         case 4: return measResultBestNeighCell_v1250;
         case 5: return measResultSCell_v1310;
         case 6: return measResultBestNeighCell_v1310;
         case 7: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "servFreqId-r10";
         case 1: return "measResultSCell-r10";
         case 2: return "measResultBestNeighCell-r10";
         case 3: return "measResultSCell-v1250";
         case 4: return "measResultBestNeighCell-v1250";
         case 5: return "measResultSCell-v1310";
         case 6: return "measResultBestNeighCell-v1310";
         case 7: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean measResultSCell_r10Present = buffer.decodeBit ("measResultSCell_r10Present");
      boolean measResultBestNeighCell_r10Present = buffer.decodeBit ("measResultBestNeighCell_r10Present");

      // decode servFreqId_r10

      buffer.getContext().eventDispatcher.startElement("servFreqId_r10", -1);

      servFreqId_r10 = new ServCellIndex_r10();
      servFreqId_r10.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("servFreqId_r10", -1);

      // decode measResultSCell_r10

      if (measResultSCell_r10Present) {
         buffer.getContext().eventDispatcher.startElement("measResultSCell_r10", -1);

         measResultSCell_r10 = new MeasResultServFreq_r10_measResultSCell_r10();
         measResultSCell_r10.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("measResultSCell_r10", -1);
      }
      else {
         measResultSCell_r10 = null;
      }

      // decode measResultBestNeighCell_r10

      if (measResultBestNeighCell_r10Present) {
         buffer.getContext().eventDispatcher.startElement("measResultBestNeighCell_r10", -1);

         measResultBestNeighCell_r10 = new MeasResultServFreq_r10_measResultBestNeighCell_r10();
         measResultBestNeighCell_r10.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("measResultBestNeighCell_r10", -1);
      }
      else {
         measResultBestNeighCell_r10 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean measResultSCell_v1250Present = buffer.decodeBit ("measResultSCell_v1250Present");

            boolean measResultBestNeighCell_v1250Present = buffer.decodeBit ("measResultBestNeighCell_v1250Present");

            // decode measResultSCell_v1250

            if (measResultSCell_v1250Present) {
               buffer.getContext().eventDispatcher.startElement("measResultSCell_v1250", -1);

               measResultSCell_v1250 = new RSRQ_Range_v1250();
               measResultSCell_v1250.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("measResultSCell_v1250", -1);
            }
            else {
               measResultSCell_v1250 = null;
            }

            // decode measResultBestNeighCell_v1250

            if (measResultBestNeighCell_v1250Present) {
               buffer.getContext().eventDispatcher.startElement("measResultBestNeighCell_v1250", -1);

               measResultBestNeighCell_v1250 = new RSRQ_Range_v1250();
               measResultBestNeighCell_v1250.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("measResultBestNeighCell_v1250", -1);
            }
            else {
               measResultBestNeighCell_v1250 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean measResultSCell_v1310Present = buffer.decodeBit ("measResultSCell_v1310Present");

            boolean measResultBestNeighCell_v1310Present = buffer.decodeBit ("measResultBestNeighCell_v1310Present");

            // decode measResultSCell_v1310

            if (measResultSCell_v1310Present) {
               buffer.getContext().eventDispatcher.startElement("measResultSCell_v1310", -1);

               measResultSCell_v1310 = new MeasResultServFreq_r10_measResultSCell_v1310();
               measResultSCell_v1310.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("measResultSCell_v1310", -1);
            }
            else {
               measResultSCell_v1310 = null;
            }

            // decode measResultBestNeighCell_v1310

            if (measResultBestNeighCell_v1310Present) {
               buffer.getContext().eventDispatcher.startElement("measResultBestNeighCell_v1310", -1);

               measResultBestNeighCell_v1310 = new MeasResultServFreq_r10_measResultBestNeighCell_v1310();
               measResultBestNeighCell_v1310.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("measResultBestNeighCell_v1310", -1);
            }
            else {
               measResultBestNeighCell_v1310 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (servFreqId_r10 != null) servFreqId_r10.print (_sb, "servFreqId_r10", _level+1);
      if (measResultSCell_r10 != null) measResultSCell_r10.print (_sb, "measResultSCell_r10", _level+1);
      if (measResultBestNeighCell_r10 != null) measResultBestNeighCell_r10.print (_sb, "measResultBestNeighCell_r10", _level+1);
      if (measResultSCell_v1250 != null) measResultSCell_v1250.print (_sb, "measResultSCell_v1250", _level+1);
      if (measResultBestNeighCell_v1250 != null) measResultBestNeighCell_v1250.print (_sb, "measResultBestNeighCell_v1250", _level+1);
      if (measResultSCell_v1310 != null) measResultSCell_v1310.print (_sb, "measResultSCell_v1310", _level+1);
      if (measResultBestNeighCell_v1310 != null) measResultBestNeighCell_v1310.print (_sb, "measResultBestNeighCell_v1310", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
