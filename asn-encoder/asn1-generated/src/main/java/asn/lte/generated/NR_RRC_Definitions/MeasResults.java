/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MeasResults extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "MeasResults";
   }

   public MeasId measId;
   public MeasResultServMOList measResultServingMOList;
   public MeasResults_measResultNeighCells measResultNeighCells;  // optional
   public boolean mV2ExtPresent;
   public MeasResultServFreqListEUTRA_SCG measResultServFreqListEUTRA_SCG;  // optional
   public MeasResultServFreqListNR_SCG measResultServFreqListNR_SCG;  // optional
   public MeasResultSFTD_EUTRA measResultSFTD_EUTRA;  // optional
   public MeasResultCellSFTD_NR measResultSFTD_NR;  // optional
   public boolean mV3ExtPresent;
   public MeasResultCellListSFTD_NR measResultCellListSFTD_NR;  // optional
   public boolean mV4ExtPresent;
   public MeasResultForRSSI_r16 measResultForRSSI_r16;  // optional
   public LocationInfo_r16 locationInfo_r16;  // optional
   public UL_PDCP_DelayValueResultList_r16 ul_PDCP_DelayValueResultList_r16;  // optional
   public MeasResultsSL_r16 measResultsSL_r16;  // optional
   public MeasResultCLI_r16 measResultCLI_r16;  // optional
   public Asn1OpenExt extElem1;

   public MeasResults () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MeasResults (
      MeasId measId_,
      MeasResultServMOList measResultServingMOList_,
      MeasResults_measResultNeighCells measResultNeighCells_,
      MeasResultServFreqListEUTRA_SCG measResultServFreqListEUTRA_SCG_,
      MeasResultServFreqListNR_SCG measResultServFreqListNR_SCG_,
      MeasResultSFTD_EUTRA measResultSFTD_EUTRA_,
      MeasResultCellSFTD_NR measResultSFTD_NR_,
      MeasResultCellListSFTD_NR measResultCellListSFTD_NR_,
      MeasResultForRSSI_r16 measResultForRSSI_r16_,
      LocationInfo_r16 locationInfo_r16_,
      UL_PDCP_DelayValueResultList_r16 ul_PDCP_DelayValueResultList_r16_,
      MeasResultsSL_r16 measResultsSL_r16_,
      MeasResultCLI_r16 measResultCLI_r16_
   ) {
      super();
      measId = measId_;
      measResultServingMOList = measResultServingMOList_;
      measResultNeighCells = measResultNeighCells_;
      measResultServFreqListEUTRA_SCG = measResultServFreqListEUTRA_SCG_;
      measResultServFreqListNR_SCG = measResultServFreqListNR_SCG_;
      measResultSFTD_EUTRA = measResultSFTD_EUTRA_;
      measResultSFTD_NR = measResultSFTD_NR_;
      measResultCellListSFTD_NR = measResultCellListSFTD_NR_;
      measResultForRSSI_r16 = measResultForRSSI_r16_;
      locationInfo_r16 = locationInfo_r16_;
      ul_PDCP_DelayValueResultList_r16 = ul_PDCP_DelayValueResultList_r16_;
      measResultsSL_r16 = measResultsSL_r16_;
      measResultCLI_r16 = measResultCLI_r16_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public MeasResults (
      MeasId measId_,
      MeasResultServMOList measResultServingMOList_
   ) {
      super();
      measId = measId_;
      measResultServingMOList = measResultServingMOList_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public MeasResults (long measId_,
      MeasResultServMOList measResultServingMOList_,
      MeasResults_measResultNeighCells measResultNeighCells_,
      MeasResultServFreqListEUTRA_SCG measResultServFreqListEUTRA_SCG_,
      MeasResultServFreqListNR_SCG measResultServFreqListNR_SCG_,
      MeasResultSFTD_EUTRA measResultSFTD_EUTRA_,
      MeasResultCellSFTD_NR measResultSFTD_NR_,
      MeasResultCellListSFTD_NR measResultCellListSFTD_NR_,
      MeasResultForRSSI_r16 measResultForRSSI_r16_,
      LocationInfo_r16 locationInfo_r16_,
      UL_PDCP_DelayValueResultList_r16 ul_PDCP_DelayValueResultList_r16_,
      MeasResultsSL_r16 measResultsSL_r16_,
      MeasResultCLI_r16 measResultCLI_r16_
   ) {
      super();
      measId = new MeasId (measId_);
      measResultServingMOList = measResultServingMOList_;
      measResultNeighCells = measResultNeighCells_;
      measResultServFreqListEUTRA_SCG = measResultServFreqListEUTRA_SCG_;
      measResultServFreqListNR_SCG = measResultServFreqListNR_SCG_;
      measResultSFTD_EUTRA = measResultSFTD_EUTRA_;
      measResultSFTD_NR = measResultSFTD_NR_;
      measResultCellListSFTD_NR = measResultCellListSFTD_NR_;
      measResultForRSSI_r16 = measResultForRSSI_r16_;
      locationInfo_r16 = locationInfo_r16_;
      ul_PDCP_DelayValueResultList_r16 = ul_PDCP_DelayValueResultList_r16_;
      measResultsSL_r16 = measResultsSL_r16_;
      measResultCLI_r16 = measResultCLI_r16_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public MeasResults (
      long measId_,
      MeasResultServMOList measResultServingMOList_
   ) {
      super();
      measId = new MeasId (measId_);
      measResultServingMOList = measResultServingMOList_;
   }

   public void init () {
      measId = null;
      measResultServingMOList = null;
      measResultNeighCells = null;
      measResultServFreqListEUTRA_SCG = null;
      measResultServFreqListNR_SCG = null;
      measResultSFTD_EUTRA = null;
      measResultSFTD_NR = null;
      measResultCellListSFTD_NR = null;
      measResultForRSSI_r16 = null;
      locationInfo_r16 = null;
      ul_PDCP_DelayValueResultList_r16 = null;
      measResultsSL_r16 = null;
      measResultCLI_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 14; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return measId;
         case 1: return measResultServingMOList;
         case 2: return measResultNeighCells;
         case 3: return measResultServFreqListEUTRA_SCG;
         case 4: return measResultServFreqListNR_SCG;
         case 5: return measResultSFTD_EUTRA;
         case 6: return measResultSFTD_NR;
         case 7: return measResultCellListSFTD_NR;
         case 8: return measResultForRSSI_r16;
         case 9: return locationInfo_r16;
         case 10: return ul_PDCP_DelayValueResultList_r16;
         case 11: return measResultsSL_r16;
         case 12: return measResultCLI_r16;
         case 13: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "measId";
         case 1: return "measResultServingMOList";
         case 2: return "measResultNeighCells";
         case 3: return "measResultServFreqListEUTRA-SCG";
         case 4: return "measResultServFreqListNR-SCG";
         case 5: return "measResultSFTD-EUTRA";
         case 6: return "measResultSFTD-NR";
         case 7: return "measResultCellListSFTD-NR";
         case 8: return "measResultForRSSI-r16";
         case 9: return "locationInfo-r16";
         case 10: return "ul-PDCP-DelayValueResultList-r16";
         case 11: return "measResultsSL-r16";
         case 12: return "measResultCLI-r16";
         case 13: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean measResultNeighCellsPresent = buffer.decodeBit ("measResultNeighCellsPresent");

      // decode measId

      buffer.getContext().eventDispatcher.startElement("measId", -1);

      measId = new MeasId();
      measId.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("measId", -1);

      // decode measResultServingMOList

      buffer.getContext().eventDispatcher.startElement("measResultServingMOList", -1);

      measResultServingMOList = new MeasResultServMOList();
      measResultServingMOList.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("measResultServingMOList", -1);

      // decode measResultNeighCells

      if (measResultNeighCellsPresent) {
         buffer.getContext().eventDispatcher.startElement("measResultNeighCells", -1);

         measResultNeighCells = new MeasResults_measResultNeighCells();
         measResultNeighCells.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("measResultNeighCells", -1);
      }
      else {
         measResultNeighCells = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV4ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean measResultServFreqListEUTRA_SCGPresent = buffer.decodeBit ("measResultServFreqListEUTRA_SCGPresent");

            boolean measResultServFreqListNR_SCGPresent = buffer.decodeBit ("measResultServFreqListNR_SCGPresent");

            boolean measResultSFTD_EUTRAPresent = buffer.decodeBit ("measResultSFTD_EUTRAPresent");

            boolean measResultSFTD_NRPresent = buffer.decodeBit ("measResultSFTD_NRPresent");

            // decode measResultServFreqListEUTRA_SCG

            if (measResultServFreqListEUTRA_SCGPresent) {
               buffer.getContext().eventDispatcher.startElement("measResultServFreqListEUTRA_SCG", -1);

               measResultServFreqListEUTRA_SCG = new MeasResultServFreqListEUTRA_SCG();
               measResultServFreqListEUTRA_SCG.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("measResultServFreqListEUTRA_SCG", -1);
            }
            else {
               measResultServFreqListEUTRA_SCG = null;
            }

            // decode measResultServFreqListNR_SCG

            if (measResultServFreqListNR_SCGPresent) {
               buffer.getContext().eventDispatcher.startElement("measResultServFreqListNR_SCG", -1);

               measResultServFreqListNR_SCG = new MeasResultServFreqListNR_SCG();
               measResultServFreqListNR_SCG.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("measResultServFreqListNR_SCG", -1);
            }
            else {
               measResultServFreqListNR_SCG = null;
            }

            // decode measResultSFTD_EUTRA

            if (measResultSFTD_EUTRAPresent) {
               buffer.getContext().eventDispatcher.startElement("measResultSFTD_EUTRA", -1);

               measResultSFTD_EUTRA = new MeasResultSFTD_EUTRA();
               measResultSFTD_EUTRA.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("measResultSFTD_EUTRA", -1);
            }
            else {
               measResultSFTD_EUTRA = null;
            }

            // decode measResultSFTD_NR

            if (measResultSFTD_NRPresent) {
               buffer.getContext().eventDispatcher.startElement("measResultSFTD_NR", -1);

               measResultSFTD_NR = new MeasResultCellSFTD_NR();
               measResultSFTD_NR.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("measResultSFTD_NR", -1);
            }
            else {
               measResultSFTD_NR = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean measResultCellListSFTD_NRPresent = buffer.decodeBit ("measResultCellListSFTD_NRPresent");

            // decode measResultCellListSFTD_NR

            if (measResultCellListSFTD_NRPresent) {
               buffer.getContext().eventDispatcher.startElement("measResultCellListSFTD_NR", -1);

               measResultCellListSFTD_NR = new MeasResultCellListSFTD_NR();
               measResultCellListSFTD_NR.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("measResultCellListSFTD_NR", -1);
            }
            else {
               measResultCellListSFTD_NR = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV4ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean measResultForRSSI_r16Present = buffer.decodeBit ("measResultForRSSI_r16Present");

            boolean locationInfo_r16Present = buffer.decodeBit ("locationInfo_r16Present");

            boolean ul_PDCP_DelayValueResultList_r16Present = buffer.decodeBit ("ul_PDCP_DelayValueResultList_r16Present");

            boolean measResultsSL_r16Present = buffer.decodeBit ("measResultsSL_r16Present");

            boolean measResultCLI_r16Present = buffer.decodeBit ("measResultCLI_r16Present");

            // decode measResultForRSSI_r16

            if (measResultForRSSI_r16Present) {
               buffer.getContext().eventDispatcher.startElement("measResultForRSSI_r16", -1);

               measResultForRSSI_r16 = new MeasResultForRSSI_r16();
               measResultForRSSI_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("measResultForRSSI_r16", -1);
            }
            else {
               measResultForRSSI_r16 = null;
            }

            // decode locationInfo_r16

            if (locationInfo_r16Present) {
               buffer.getContext().eventDispatcher.startElement("locationInfo_r16", -1);

               locationInfo_r16 = new LocationInfo_r16();
               locationInfo_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("locationInfo_r16", -1);
            }
            else {
               locationInfo_r16 = null;
            }

            // decode ul_PDCP_DelayValueResultList_r16

            if (ul_PDCP_DelayValueResultList_r16Present) {
               buffer.getContext().eventDispatcher.startElement("ul_PDCP_DelayValueResultList_r16", -1);

               ul_PDCP_DelayValueResultList_r16 = new UL_PDCP_DelayValueResultList_r16();
               ul_PDCP_DelayValueResultList_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("ul_PDCP_DelayValueResultList_r16", -1);
            }
            else {
               ul_PDCP_DelayValueResultList_r16 = null;
            }

            // decode measResultsSL_r16

            if (measResultsSL_r16Present) {
               buffer.getContext().eventDispatcher.startElement("measResultsSL_r16", -1);

               measResultsSL_r16 = new MeasResultsSL_r16();
               measResultsSL_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("measResultsSL_r16", -1);
            }
            else {
               measResultsSL_r16 = null;
            }

            // decode measResultCLI_r16

            if (measResultCLI_r16Present) {
               buffer.getContext().eventDispatcher.startElement("measResultCLI_r16", -1);

               measResultCLI_r16 = new MeasResultCLI_r16();
               measResultCLI_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("measResultCLI_r16", -1);
            }
            else {
               measResultCLI_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (measId != null) measId.print (_sb, "measId", _level+1);
      if (measResultServingMOList != null) measResultServingMOList.print (_sb, "measResultServingMOList", _level+1);
      if (measResultNeighCells != null) measResultNeighCells.print (_sb, "measResultNeighCells", _level+1);
      if (measResultServFreqListEUTRA_SCG != null) measResultServFreqListEUTRA_SCG.print (_sb, "measResultServFreqListEUTRA_SCG", _level+1);
      if (measResultServFreqListNR_SCG != null) measResultServFreqListNR_SCG.print (_sb, "measResultServFreqListNR_SCG", _level+1);
      if (measResultSFTD_EUTRA != null) measResultSFTD_EUTRA.print (_sb, "measResultSFTD_EUTRA", _level+1);
      if (measResultSFTD_NR != null) measResultSFTD_NR.print (_sb, "measResultSFTD_NR", _level+1);
      if (measResultCellListSFTD_NR != null) measResultCellListSFTD_NR.print (_sb, "measResultCellListSFTD_NR", _level+1);
      if (measResultForRSSI_r16 != null) measResultForRSSI_r16.print (_sb, "measResultForRSSI_r16", _level+1);
      if (locationInfo_r16 != null) locationInfo_r16.print (_sb, "locationInfo_r16", _level+1);
      if (ul_PDCP_DelayValueResultList_r16 != null) ul_PDCP_DelayValueResultList_r16.print (_sb, "ul_PDCP_DelayValueResultList_r16", _level+1);
      if (measResultsSL_r16 != null) measResultsSL_r16.print (_sb, "measResultsSL_r16", _level+1);
      if (measResultCLI_r16 != null) measResultCLI_r16.print (_sb, "measResultCLI_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
