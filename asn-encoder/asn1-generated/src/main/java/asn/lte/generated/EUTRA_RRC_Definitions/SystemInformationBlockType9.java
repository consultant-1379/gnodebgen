/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SystemInformationBlockType9 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SystemInformationBlockType9";
   }

   public Asn1OctetString hnb_Name;  // optional
   public Asn1OctetString lateNonCriticalExtension;  // optional
   public Asn1OpenExt extElem1;

   public SystemInformationBlockType9 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SystemInformationBlockType9 (
      Asn1OctetString hnb_Name_,
      Asn1OctetString lateNonCriticalExtension_
   ) {
      super();
      hnb_Name = hnb_Name_;
      lateNonCriticalExtension = lateNonCriticalExtension_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SystemInformationBlockType9 (byte[] hnb_Name_,
      byte[] lateNonCriticalExtension_
   ) {
      super();
      hnb_Name = new Asn1OctetString (hnb_Name_);
      lateNonCriticalExtension = new Asn1OctetString (lateNonCriticalExtension_);
   }

   public void init () {
      hnb_Name = null;
      lateNonCriticalExtension = null;
      extElem1 = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return hnb_Name;
         case 1: return lateNonCriticalExtension;
         case 2: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "hnb-Name";
         case 1: return "lateNonCriticalExtension";
         case 2: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean hnb_NamePresent = buffer.decodeBit ("hnb_NamePresent");

      // decode hnb_Name

      if (hnb_NamePresent) {
         buffer.getContext().eventDispatcher.startElement("hnb_Name", -1);

         hnb_Name = new Asn1OctetString();
         hnb_Name.decode (buffer, 1, 48);

         buffer.invokeCharacters(hnb_Name.toString());
         buffer.getContext().eventDispatcher.endElement("hnb_Name", -1);
      }
      else {
         hnb_Name = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("lateNonCriticalExtensionPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode lateNonCriticalExtension

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("lateNonCriticalExtension", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            lateNonCriticalExtension = new Asn1OctetString();
            lateNonCriticalExtension.decode (buffer);

            buffer.moveBitCursor (bitidx);

            buffer.invokeCharacters (lateNonCriticalExtension.toString());
            buffer.getContext().eventDispatcher.endElement("lateNonCriticalExtension", -1);

         }
         else {
            lateNonCriticalExtension = null;
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (hnb_Name != null) hnb_Name.print (_sb, "hnb_Name", _level+1);
      if (lateNonCriticalExtension != null) lateNonCriticalExtension.print (_sb, "lateNonCriticalExtension", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
