/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class CRS_AssistanceInfo_r13 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CRS-AssistanceInfo-r13";
   }

   public PhysCellId physCellId_r13;
   public CRS_AssistanceInfo_r13_antennaPortsCount_r13 antennaPortsCount_r13 = null;
   public MBSFN_SubframeConfigList mbsfn_SubframeConfigList_r13;  // optional
   public boolean mV2ExtPresent;
   public MBSFN_SubframeConfigList_v1430 mbsfn_SubframeConfigList_v1430;  // optional
   public Asn1OpenExt extElem1;

   public CRS_AssistanceInfo_r13 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CRS_AssistanceInfo_r13 (
      PhysCellId physCellId_r13_,
      CRS_AssistanceInfo_r13_antennaPortsCount_r13 antennaPortsCount_r13_,
      MBSFN_SubframeConfigList mbsfn_SubframeConfigList_r13_,
      MBSFN_SubframeConfigList_v1430 mbsfn_SubframeConfigList_v1430_
   ) {
      super();
      physCellId_r13 = physCellId_r13_;
      antennaPortsCount_r13 = antennaPortsCount_r13_;
      mbsfn_SubframeConfigList_r13 = mbsfn_SubframeConfigList_r13_;
      mbsfn_SubframeConfigList_v1430 = mbsfn_SubframeConfigList_v1430_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public CRS_AssistanceInfo_r13 (
      PhysCellId physCellId_r13_,
      CRS_AssistanceInfo_r13_antennaPortsCount_r13 antennaPortsCount_r13_
   ) {
      super();
      physCellId_r13 = physCellId_r13_;
      antennaPortsCount_r13 = antennaPortsCount_r13_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public CRS_AssistanceInfo_r13 (long physCellId_r13_,
      CRS_AssistanceInfo_r13_antennaPortsCount_r13 antennaPortsCount_r13_,
      MBSFN_SubframeConfigList mbsfn_SubframeConfigList_r13_,
      MBSFN_SubframeConfigList_v1430 mbsfn_SubframeConfigList_v1430_
   ) {
      super();
      physCellId_r13 = new PhysCellId (physCellId_r13_);
      antennaPortsCount_r13 = antennaPortsCount_r13_;
      mbsfn_SubframeConfigList_r13 = mbsfn_SubframeConfigList_r13_;
      mbsfn_SubframeConfigList_v1430 = mbsfn_SubframeConfigList_v1430_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public CRS_AssistanceInfo_r13 (
      long physCellId_r13_,
      CRS_AssistanceInfo_r13_antennaPortsCount_r13 antennaPortsCount_r13_
   ) {
      super();
      physCellId_r13 = new PhysCellId (physCellId_r13_);
      antennaPortsCount_r13 = antennaPortsCount_r13_;
   }

   public void init () {
      physCellId_r13 = null;
      antennaPortsCount_r13 = null;
      mbsfn_SubframeConfigList_r13 = null;
      mbsfn_SubframeConfigList_v1430 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return physCellId_r13;
         case 1: return antennaPortsCount_r13;
         case 2: return mbsfn_SubframeConfigList_r13;
         case 3: return mbsfn_SubframeConfigList_v1430;
         case 4: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "physCellId-r13";
         case 1: return "antennaPortsCount-r13";
         case 2: return "mbsfn-SubframeConfigList-r13";
         case 3: return "mbsfn-SubframeConfigList-v1430";
         case 4: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean mbsfn_SubframeConfigList_r13Present = buffer.decodeBit ("mbsfn_SubframeConfigList_r13Present");

      // decode physCellId_r13

      buffer.getContext().eventDispatcher.startElement("physCellId_r13", -1);

      physCellId_r13 = new PhysCellId();
      physCellId_r13.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("physCellId_r13", -1);

      // decode antennaPortsCount_r13

      buffer.getContext().eventDispatcher.startElement("antennaPortsCount_r13", -1);

      {
         int tval = CRS_AssistanceInfo_r13_antennaPortsCount_r13.decodeEnumValue (buffer);
         antennaPortsCount_r13 = CRS_AssistanceInfo_r13_antennaPortsCount_r13.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("antennaPortsCount_r13", -1);

      // decode mbsfn_SubframeConfigList_r13

      if (mbsfn_SubframeConfigList_r13Present) {
         buffer.getContext().eventDispatcher.startElement("mbsfn_SubframeConfigList_r13", -1);

         mbsfn_SubframeConfigList_r13 = new MBSFN_SubframeConfigList();
         mbsfn_SubframeConfigList_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("mbsfn_SubframeConfigList_r13", -1);
      }
      else {
         mbsfn_SubframeConfigList_r13 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean mbsfn_SubframeConfigList_v1430Present = buffer.decodeBit ("mbsfn_SubframeConfigList_v1430Present");

            // decode mbsfn_SubframeConfigList_v1430

            if (mbsfn_SubframeConfigList_v1430Present) {
               buffer.getContext().eventDispatcher.startElement("mbsfn_SubframeConfigList_v1430", -1);

               mbsfn_SubframeConfigList_v1430 = new MBSFN_SubframeConfigList_v1430();
               mbsfn_SubframeConfigList_v1430.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("mbsfn_SubframeConfigList_v1430", -1);
            }
            else {
               mbsfn_SubframeConfigList_v1430 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (physCellId_r13 != null) physCellId_r13.print (_sb, "physCellId_r13", _level+1);
      if (antennaPortsCount_r13 != null) antennaPortsCount_r13.print (_sb, "antennaPortsCount_r13", _level+1);
      if (mbsfn_SubframeConfigList_r13 != null) mbsfn_SubframeConfigList_r13.print (_sb, "mbsfn_SubframeConfigList_r13", _level+1);
      if (mbsfn_SubframeConfigList_v1430 != null) mbsfn_SubframeConfigList_v1430.print (_sb, "mbsfn_SubframeConfigList_v1430", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
