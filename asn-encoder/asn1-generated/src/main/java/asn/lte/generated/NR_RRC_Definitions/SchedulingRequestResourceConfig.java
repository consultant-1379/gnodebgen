/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SchedulingRequestResourceConfig extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SchedulingRequestResourceConfig";
   }

   public SchedulingRequestResourceId schedulingRequestResourceId;
   public SchedulingRequestId schedulingRequestID;
   public SchedulingRequestResourceConfig_periodicityAndOffset periodicityAndOffset;  // optional
   public PUCCH_ResourceId resource;  // optional

   public SchedulingRequestResourceConfig () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SchedulingRequestResourceConfig (
      SchedulingRequestResourceId schedulingRequestResourceId_,
      SchedulingRequestId schedulingRequestID_,
      SchedulingRequestResourceConfig_periodicityAndOffset periodicityAndOffset_,
      PUCCH_ResourceId resource_
   ) {
      super();
      schedulingRequestResourceId = schedulingRequestResourceId_;
      schedulingRequestID = schedulingRequestID_;
      periodicityAndOffset = periodicityAndOffset_;
      resource = resource_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SchedulingRequestResourceConfig (
      SchedulingRequestResourceId schedulingRequestResourceId_,
      SchedulingRequestId schedulingRequestID_
   ) {
      super();
      schedulingRequestResourceId = schedulingRequestResourceId_;
      schedulingRequestID = schedulingRequestID_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SchedulingRequestResourceConfig (long schedulingRequestResourceId_,
      long schedulingRequestID_,
      SchedulingRequestResourceConfig_periodicityAndOffset periodicityAndOffset_,
      long resource_
   ) {
      super();
      schedulingRequestResourceId = new SchedulingRequestResourceId (schedulingRequestResourceId_);
      schedulingRequestID = new SchedulingRequestId (schedulingRequestID_);
      periodicityAndOffset = periodicityAndOffset_;
      resource = new PUCCH_ResourceId (resource_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public SchedulingRequestResourceConfig (
      long schedulingRequestResourceId_,
      long schedulingRequestID_
   ) {
      super();
      schedulingRequestResourceId = new SchedulingRequestResourceId (schedulingRequestResourceId_);
      schedulingRequestID = new SchedulingRequestId (schedulingRequestID_);
   }

   public void init () {
      schedulingRequestResourceId = null;
      schedulingRequestID = null;
      periodicityAndOffset = null;
      resource = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return schedulingRequestResourceId;
         case 1: return schedulingRequestID;
         case 2: return periodicityAndOffset;
         case 3: return resource;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "schedulingRequestResourceId";
         case 1: return "schedulingRequestID";
         case 2: return "periodicityAndOffset";
         case 3: return "resource";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean periodicityAndOffsetPresent = buffer.decodeBit ("periodicityAndOffsetPresent");
      boolean resourcePresent = buffer.decodeBit ("resourcePresent");

      // decode schedulingRequestResourceId

      buffer.getContext().eventDispatcher.startElement("schedulingRequestResourceId", -1);

      schedulingRequestResourceId = new SchedulingRequestResourceId();
      schedulingRequestResourceId.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("schedulingRequestResourceId", -1);

      // decode schedulingRequestID

      buffer.getContext().eventDispatcher.startElement("schedulingRequestID", -1);

      schedulingRequestID = new SchedulingRequestId();
      schedulingRequestID.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("schedulingRequestID", -1);

      // decode periodicityAndOffset

      if (periodicityAndOffsetPresent) {
         buffer.getContext().eventDispatcher.startElement("periodicityAndOffset", -1);

         periodicityAndOffset = new SchedulingRequestResourceConfig_periodicityAndOffset();
         periodicityAndOffset.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("periodicityAndOffset", -1);
      }
      else {
         periodicityAndOffset = null;
      }

      // decode resource

      if (resourcePresent) {
         buffer.getContext().eventDispatcher.startElement("resource", -1);

         resource = new PUCCH_ResourceId();
         resource.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("resource", -1);
      }
      else {
         resource = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (schedulingRequestResourceId != null) schedulingRequestResourceId.print (_sb, "schedulingRequestResourceId", _level+1);
      if (schedulingRequestID != null) schedulingRequestID.print (_sb, "schedulingRequestID", _level+1);
      if (periodicityAndOffset != null) periodicityAndOffset.print (_sb, "periodicityAndOffset", _level+1);
      if (resource != null) resource.print (_sb, "resource", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
