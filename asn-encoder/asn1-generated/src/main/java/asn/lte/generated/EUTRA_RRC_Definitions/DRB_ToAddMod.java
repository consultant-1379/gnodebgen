/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class DRB_ToAddMod extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "DRB-ToAddMod";
   }

   public Asn1Integer eps_BearerIdentity;  // optional
   public DRB_Identity drb_Identity;
   public PDCP_Config pdcp_Config;  // optional
   public RLC_Config rlc_Config;  // optional
   public Asn1Integer logicalChannelIdentity;  // optional
   public LogicalChannelConfig logicalChannelConfig;  // optional
   public boolean mV2ExtPresent;
   public DRB_ToAddMod_drb_TypeChange_r12 drb_TypeChange_r12 = null;  // optional
   public RLC_Config_v1250 rlc_Config_v1250;  // optional
   public boolean mV3ExtPresent;
   public RLC_Config_v1310 rlc_Config_v1310;  // optional
   public Asn1Boolean drb_TypeLWA_r13;  // optional
   public DRB_ToAddMod_drb_TypeLWIP_r13 drb_TypeLWIP_r13 = null;  // optional
   public boolean mV4ExtPresent;
   public RLC_Config_v1430 rlc_Config_v1430;  // optional
   public Asn1Boolean lwip_UL_Aggregation_r14;  // optional
   public Asn1Boolean lwip_DL_Aggregation_r14;  // optional
   public DRB_ToAddMod_lwa_WLAN_AC_r14 lwa_WLAN_AC_r14 = null;  // optional
   public boolean mV5ExtPresent;
   public RLC_Config_v1510 rlc_Config_v1510;  // optional
   public boolean mV6ExtPresent;
   public RLC_Config_v1530 rlc_Config_v1530;  // optional
   public RLC_BearerConfig_r15 rlc_BearerConfigDupl_r15;  // optional
   public Asn1Integer logicalChannelIdentity_r15;  // optional
   public Asn1OpenExt extElem1;

   public DRB_ToAddMod () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public DRB_ToAddMod (
      Asn1Integer eps_BearerIdentity_,
      DRB_Identity drb_Identity_,
      PDCP_Config pdcp_Config_,
      RLC_Config rlc_Config_,
      Asn1Integer logicalChannelIdentity_,
      LogicalChannelConfig logicalChannelConfig_,
      DRB_ToAddMod_drb_TypeChange_r12 drb_TypeChange_r12_,
      RLC_Config_v1250 rlc_Config_v1250_,
      RLC_Config_v1310 rlc_Config_v1310_,
      Asn1Boolean drb_TypeLWA_r13_,
      DRB_ToAddMod_drb_TypeLWIP_r13 drb_TypeLWIP_r13_,
      RLC_Config_v1430 rlc_Config_v1430_,
      Asn1Boolean lwip_UL_Aggregation_r14_,
      Asn1Boolean lwip_DL_Aggregation_r14_,
      DRB_ToAddMod_lwa_WLAN_AC_r14 lwa_WLAN_AC_r14_,
      RLC_Config_v1510 rlc_Config_v1510_,
      RLC_Config_v1530 rlc_Config_v1530_,
      RLC_BearerConfig_r15 rlc_BearerConfigDupl_r15_,
      Asn1Integer logicalChannelIdentity_r15_
   ) {
      super();
      eps_BearerIdentity = eps_BearerIdentity_;
      drb_Identity = drb_Identity_;
      pdcp_Config = pdcp_Config_;
      rlc_Config = rlc_Config_;
      logicalChannelIdentity = logicalChannelIdentity_;
      logicalChannelConfig = logicalChannelConfig_;
      drb_TypeChange_r12 = drb_TypeChange_r12_;
      rlc_Config_v1250 = rlc_Config_v1250_;
      rlc_Config_v1310 = rlc_Config_v1310_;
      drb_TypeLWA_r13 = drb_TypeLWA_r13_;
      drb_TypeLWIP_r13 = drb_TypeLWIP_r13_;
      rlc_Config_v1430 = rlc_Config_v1430_;
      lwip_UL_Aggregation_r14 = lwip_UL_Aggregation_r14_;
      lwip_DL_Aggregation_r14 = lwip_DL_Aggregation_r14_;
      lwa_WLAN_AC_r14 = lwa_WLAN_AC_r14_;
      rlc_Config_v1510 = rlc_Config_v1510_;
      rlc_Config_v1530 = rlc_Config_v1530_;
      rlc_BearerConfigDupl_r15 = rlc_BearerConfigDupl_r15_;
      logicalChannelIdentity_r15 = logicalChannelIdentity_r15_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public DRB_ToAddMod (
      DRB_Identity drb_Identity_
   ) {
      super();
      drb_Identity = drb_Identity_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public DRB_ToAddMod (long eps_BearerIdentity_,
      long drb_Identity_,
      PDCP_Config pdcp_Config_,
      RLC_Config rlc_Config_,
      long logicalChannelIdentity_,
      LogicalChannelConfig logicalChannelConfig_,
      DRB_ToAddMod_drb_TypeChange_r12 drb_TypeChange_r12_,
      RLC_Config_v1250 rlc_Config_v1250_,
      RLC_Config_v1310 rlc_Config_v1310_,
      boolean drb_TypeLWA_r13_,
      DRB_ToAddMod_drb_TypeLWIP_r13 drb_TypeLWIP_r13_,
      RLC_Config_v1430 rlc_Config_v1430_,
      boolean lwip_UL_Aggregation_r14_,
      boolean lwip_DL_Aggregation_r14_,
      DRB_ToAddMod_lwa_WLAN_AC_r14 lwa_WLAN_AC_r14_,
      RLC_Config_v1510 rlc_Config_v1510_,
      RLC_Config_v1530 rlc_Config_v1530_,
      RLC_BearerConfig_r15 rlc_BearerConfigDupl_r15_,
      long logicalChannelIdentity_r15_
   ) {
      super();
      eps_BearerIdentity = new Asn1Integer (eps_BearerIdentity_);
      drb_Identity = new DRB_Identity (drb_Identity_);
      pdcp_Config = pdcp_Config_;
      rlc_Config = rlc_Config_;
      logicalChannelIdentity = new Asn1Integer (logicalChannelIdentity_);
      logicalChannelConfig = logicalChannelConfig_;
      drb_TypeChange_r12 = drb_TypeChange_r12_;
      rlc_Config_v1250 = rlc_Config_v1250_;
      rlc_Config_v1310 = rlc_Config_v1310_;
      drb_TypeLWA_r13 = new Asn1Boolean (drb_TypeLWA_r13_);
      drb_TypeLWIP_r13 = drb_TypeLWIP_r13_;
      rlc_Config_v1430 = rlc_Config_v1430_;
      lwip_UL_Aggregation_r14 = new Asn1Boolean (lwip_UL_Aggregation_r14_);
      lwip_DL_Aggregation_r14 = new Asn1Boolean (lwip_DL_Aggregation_r14_);
      lwa_WLAN_AC_r14 = lwa_WLAN_AC_r14_;
      rlc_Config_v1510 = rlc_Config_v1510_;
      rlc_Config_v1530 = rlc_Config_v1530_;
      rlc_BearerConfigDupl_r15 = rlc_BearerConfigDupl_r15_;
      logicalChannelIdentity_r15 = new Asn1Integer (logicalChannelIdentity_r15_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public DRB_ToAddMod (
      long drb_Identity_
   ) {
      super();
      drb_Identity = new DRB_Identity (drb_Identity_);
   }

   public void init () {
      eps_BearerIdentity = null;
      drb_Identity = null;
      pdcp_Config = null;
      rlc_Config = null;
      logicalChannelIdentity = null;
      logicalChannelConfig = null;
      drb_TypeChange_r12 = null;
      rlc_Config_v1250 = null;
      rlc_Config_v1310 = null;
      drb_TypeLWA_r13 = null;
      drb_TypeLWIP_r13 = null;
      rlc_Config_v1430 = null;
      lwip_UL_Aggregation_r14 = null;
      lwip_DL_Aggregation_r14 = null;
      lwa_WLAN_AC_r14 = null;
      rlc_Config_v1510 = null;
      rlc_Config_v1530 = null;
      rlc_BearerConfigDupl_r15 = null;
      logicalChannelIdentity_r15 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 20; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return eps_BearerIdentity;
         case 1: return drb_Identity;
         case 2: return pdcp_Config;
         case 3: return rlc_Config;
         case 4: return logicalChannelIdentity;
         case 5: return logicalChannelConfig;
         case 6: return drb_TypeChange_r12;
         case 7: return rlc_Config_v1250;
         case 8: return rlc_Config_v1310;
         case 9: return drb_TypeLWA_r13;
         case 10: return drb_TypeLWIP_r13;
         case 11: return rlc_Config_v1430;
         case 12: return lwip_UL_Aggregation_r14;
         case 13: return lwip_DL_Aggregation_r14;
         case 14: return lwa_WLAN_AC_r14;
         case 15: return rlc_Config_v1510;
         case 16: return rlc_Config_v1530;
         case 17: return rlc_BearerConfigDupl_r15;
         case 18: return logicalChannelIdentity_r15;
         case 19: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "eps-BearerIdentity";
         case 1: return "drb-Identity";
         case 2: return "pdcp-Config";
         case 3: return "rlc-Config";
         case 4: return "logicalChannelIdentity";
         case 5: return "logicalChannelConfig";
         case 6: return "drb-TypeChange-r12";
         case 7: return "rlc-Config-v1250";
         case 8: return "rlc-Config-v1310";
         case 9: return "drb-TypeLWA-r13";
         case 10: return "drb-TypeLWIP-r13";
         case 11: return "rlc-Config-v1430";
         case 12: return "lwip-UL-Aggregation-r14";
         case 13: return "lwip-DL-Aggregation-r14";
         case 14: return "lwa-WLAN-AC-r14";
         case 15: return "rlc-Config-v1510";
         case 16: return "rlc-Config-v1530";
         case 17: return "rlc-BearerConfigDupl-r15";
         case 18: return "logicalChannelIdentity-r15";
         case 19: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean eps_BearerIdentityPresent = buffer.decodeBit ("eps_BearerIdentityPresent");
      boolean pdcp_ConfigPresent = buffer.decodeBit ("pdcp_ConfigPresent");
      boolean rlc_ConfigPresent = buffer.decodeBit ("rlc_ConfigPresent");
      boolean logicalChannelIdentityPresent = buffer.decodeBit ("logicalChannelIdentityPresent");
      boolean logicalChannelConfigPresent = buffer.decodeBit ("logicalChannelConfigPresent");

      // decode eps_BearerIdentity

      if (eps_BearerIdentityPresent) {
         buffer.getContext().eventDispatcher.startElement("eps_BearerIdentity", -1);

         eps_BearerIdentity = new Asn1Integer();
         eps_BearerIdentity.decode (buffer, 0, 15);

         buffer.invokeCharacters(eps_BearerIdentity.toString());
         buffer.getContext().eventDispatcher.endElement("eps_BearerIdentity", -1);
      }
      else {
         eps_BearerIdentity = null;
      }

      // decode drb_Identity

      buffer.getContext().eventDispatcher.startElement("drb_Identity", -1);

      drb_Identity = new DRB_Identity();
      drb_Identity.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("drb_Identity", -1);

      // decode pdcp_Config

      if (pdcp_ConfigPresent) {
         buffer.getContext().eventDispatcher.startElement("pdcp_Config", -1);

         pdcp_Config = new PDCP_Config();
         pdcp_Config.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("pdcp_Config", -1);
      }
      else {
         pdcp_Config = null;
      }

      // decode rlc_Config

      if (rlc_ConfigPresent) {
         buffer.getContext().eventDispatcher.startElement("rlc_Config", -1);

         rlc_Config = new RLC_Config();
         rlc_Config.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("rlc_Config", -1);
      }
      else {
         rlc_Config = null;
      }

      // decode logicalChannelIdentity

      if (logicalChannelIdentityPresent) {
         buffer.getContext().eventDispatcher.startElement("logicalChannelIdentity", -1);

         logicalChannelIdentity = new Asn1Integer();
         logicalChannelIdentity.decode (buffer, 3, 10);

         buffer.invokeCharacters(logicalChannelIdentity.toString());
         buffer.getContext().eventDispatcher.endElement("logicalChannelIdentity", -1);
      }
      else {
         logicalChannelIdentity = null;
      }

      // decode logicalChannelConfig

      if (logicalChannelConfigPresent) {
         buffer.getContext().eventDispatcher.startElement("logicalChannelConfig", -1);

         logicalChannelConfig = new LogicalChannelConfig();
         logicalChannelConfig.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("logicalChannelConfig", -1);
      }
      else {
         logicalChannelConfig = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV4ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV5ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV6ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean drb_TypeChange_r12Present = buffer.decodeBit ("drb_TypeChange_r12Present");

            boolean rlc_Config_v1250Present = buffer.decodeBit ("rlc_Config_v1250Present");

            // decode drb_TypeChange_r12

            if (drb_TypeChange_r12Present) {
               buffer.getContext().eventDispatcher.startElement("drb_TypeChange_r12", -1);

               int tval = DRB_ToAddMod_drb_TypeChange_r12.decodeEnumValue (buffer);
               drb_TypeChange_r12 = DRB_ToAddMod_drb_TypeChange_r12.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("drb_TypeChange_r12", -1);
            }
            else {
               drb_TypeChange_r12 = null;
            }

            // decode rlc_Config_v1250

            if (rlc_Config_v1250Present) {
               buffer.getContext().eventDispatcher.startElement("rlc_Config_v1250", -1);

               rlc_Config_v1250 = new RLC_Config_v1250();
               rlc_Config_v1250.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("rlc_Config_v1250", -1);
            }
            else {
               rlc_Config_v1250 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean rlc_Config_v1310Present = buffer.decodeBit ("rlc_Config_v1310Present");

            boolean drb_TypeLWA_r13Present = buffer.decodeBit ("drb_TypeLWA_r13Present");

            boolean drb_TypeLWIP_r13Present = buffer.decodeBit ("drb_TypeLWIP_r13Present");

            // decode rlc_Config_v1310

            if (rlc_Config_v1310Present) {
               buffer.getContext().eventDispatcher.startElement("rlc_Config_v1310", -1);

               rlc_Config_v1310 = new RLC_Config_v1310();
               rlc_Config_v1310.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("rlc_Config_v1310", -1);
            }
            else {
               rlc_Config_v1310 = null;
            }

            // decode drb_TypeLWA_r13

            if (drb_TypeLWA_r13Present) {
               buffer.getContext().eventDispatcher.startElement("drb_TypeLWA_r13", -1);

               drb_TypeLWA_r13 = new Asn1Boolean();
               drb_TypeLWA_r13.decode (buffer);

               buffer.invokeCharacters(drb_TypeLWA_r13.toString());
               buffer.getContext().eventDispatcher.endElement("drb_TypeLWA_r13", -1);
            }
            else {
               drb_TypeLWA_r13 = null;
            }

            // decode drb_TypeLWIP_r13

            if (drb_TypeLWIP_r13Present) {
               buffer.getContext().eventDispatcher.startElement("drb_TypeLWIP_r13", -1);

               int tval = DRB_ToAddMod_drb_TypeLWIP_r13.decodeEnumValue (buffer);
               drb_TypeLWIP_r13 = DRB_ToAddMod_drb_TypeLWIP_r13.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("drb_TypeLWIP_r13", -1);
            }
            else {
               drb_TypeLWIP_r13 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV4ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean rlc_Config_v1430Present = buffer.decodeBit ("rlc_Config_v1430Present");

            boolean lwip_UL_Aggregation_r14Present = buffer.decodeBit ("lwip_UL_Aggregation_r14Present");

            boolean lwip_DL_Aggregation_r14Present = buffer.decodeBit ("lwip_DL_Aggregation_r14Present");

            boolean lwa_WLAN_AC_r14Present = buffer.decodeBit ("lwa_WLAN_AC_r14Present");

            // decode rlc_Config_v1430

            if (rlc_Config_v1430Present) {
               buffer.getContext().eventDispatcher.startElement("rlc_Config_v1430", -1);

               rlc_Config_v1430 = new RLC_Config_v1430();
               rlc_Config_v1430.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("rlc_Config_v1430", -1);
            }
            else {
               rlc_Config_v1430 = null;
            }

            // decode lwip_UL_Aggregation_r14

            if (lwip_UL_Aggregation_r14Present) {
               buffer.getContext().eventDispatcher.startElement("lwip_UL_Aggregation_r14", -1);

               lwip_UL_Aggregation_r14 = new Asn1Boolean();
               lwip_UL_Aggregation_r14.decode (buffer);

               buffer.invokeCharacters(lwip_UL_Aggregation_r14.toString());
               buffer.getContext().eventDispatcher.endElement("lwip_UL_Aggregation_r14", -1);
            }
            else {
               lwip_UL_Aggregation_r14 = null;
            }

            // decode lwip_DL_Aggregation_r14

            if (lwip_DL_Aggregation_r14Present) {
               buffer.getContext().eventDispatcher.startElement("lwip_DL_Aggregation_r14", -1);

               lwip_DL_Aggregation_r14 = new Asn1Boolean();
               lwip_DL_Aggregation_r14.decode (buffer);

               buffer.invokeCharacters(lwip_DL_Aggregation_r14.toString());
               buffer.getContext().eventDispatcher.endElement("lwip_DL_Aggregation_r14", -1);
            }
            else {
               lwip_DL_Aggregation_r14 = null;
            }

            // decode lwa_WLAN_AC_r14

            if (lwa_WLAN_AC_r14Present) {
               buffer.getContext().eventDispatcher.startElement("lwa_WLAN_AC_r14", -1);

               int tval = DRB_ToAddMod_lwa_WLAN_AC_r14.decodeEnumValue (buffer);
               lwa_WLAN_AC_r14 = DRB_ToAddMod_lwa_WLAN_AC_r14.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("lwa_WLAN_AC_r14", -1);
            }
            else {
               lwa_WLAN_AC_r14 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV5ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean rlc_Config_v1510Present = buffer.decodeBit ("rlc_Config_v1510Present");

            // decode rlc_Config_v1510

            if (rlc_Config_v1510Present) {
               buffer.getContext().eventDispatcher.startElement("rlc_Config_v1510", -1);

               rlc_Config_v1510 = new RLC_Config_v1510();
               rlc_Config_v1510.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("rlc_Config_v1510", -1);
            }
            else {
               rlc_Config_v1510 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV6ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean rlc_Config_v1530Present = buffer.decodeBit ("rlc_Config_v1530Present");

            boolean rlc_BearerConfigDupl_r15Present = buffer.decodeBit ("rlc_BearerConfigDupl_r15Present");

            boolean logicalChannelIdentity_r15Present = buffer.decodeBit ("logicalChannelIdentity_r15Present");

            // decode rlc_Config_v1530

            if (rlc_Config_v1530Present) {
               buffer.getContext().eventDispatcher.startElement("rlc_Config_v1530", -1);

               rlc_Config_v1530 = new RLC_Config_v1530();
               rlc_Config_v1530.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("rlc_Config_v1530", -1);
            }
            else {
               rlc_Config_v1530 = null;
            }

            // decode rlc_BearerConfigDupl_r15

            if (rlc_BearerConfigDupl_r15Present) {
               buffer.getContext().eventDispatcher.startElement("rlc_BearerConfigDupl_r15", -1);

               rlc_BearerConfigDupl_r15 = new RLC_BearerConfig_r15();
               rlc_BearerConfigDupl_r15.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("rlc_BearerConfigDupl_r15", -1);
            }
            else {
               rlc_BearerConfigDupl_r15 = null;
            }

            // decode logicalChannelIdentity_r15

            if (logicalChannelIdentity_r15Present) {
               buffer.getContext().eventDispatcher.startElement("logicalChannelIdentity_r15", -1);

               logicalChannelIdentity_r15 = new Asn1Integer();
               logicalChannelIdentity_r15.decode (buffer, 32, 38);

               buffer.invokeCharacters(logicalChannelIdentity_r15.toString());
               buffer.getContext().eventDispatcher.endElement("logicalChannelIdentity_r15", -1);
            }
            else {
               logicalChannelIdentity_r15 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (eps_BearerIdentity != null) eps_BearerIdentity.print (_sb, "eps_BearerIdentity", _level+1);
      if (drb_Identity != null) drb_Identity.print (_sb, "drb_Identity", _level+1);
      if (pdcp_Config != null) pdcp_Config.print (_sb, "pdcp_Config", _level+1);
      if (rlc_Config != null) rlc_Config.print (_sb, "rlc_Config", _level+1);
      if (logicalChannelIdentity != null) logicalChannelIdentity.print (_sb, "logicalChannelIdentity", _level+1);
      if (logicalChannelConfig != null) logicalChannelConfig.print (_sb, "logicalChannelConfig", _level+1);
      if (drb_TypeChange_r12 != null) drb_TypeChange_r12.print (_sb, "drb_TypeChange_r12", _level+1);
      if (rlc_Config_v1250 != null) rlc_Config_v1250.print (_sb, "rlc_Config_v1250", _level+1);
      if (rlc_Config_v1310 != null) rlc_Config_v1310.print (_sb, "rlc_Config_v1310", _level+1);
      if (drb_TypeLWA_r13 != null) drb_TypeLWA_r13.print (_sb, "drb_TypeLWA_r13", _level+1);
      if (drb_TypeLWIP_r13 != null) drb_TypeLWIP_r13.print (_sb, "drb_TypeLWIP_r13", _level+1);
      if (rlc_Config_v1430 != null) rlc_Config_v1430.print (_sb, "rlc_Config_v1430", _level+1);
      if (lwip_UL_Aggregation_r14 != null) lwip_UL_Aggregation_r14.print (_sb, "lwip_UL_Aggregation_r14", _level+1);
      if (lwip_DL_Aggregation_r14 != null) lwip_DL_Aggregation_r14.print (_sb, "lwip_DL_Aggregation_r14", _level+1);
      if (lwa_WLAN_AC_r14 != null) lwa_WLAN_AC_r14.print (_sb, "lwa_WLAN_AC_r14", _level+1);
      if (rlc_Config_v1510 != null) rlc_Config_v1510.print (_sb, "rlc_Config_v1510", _level+1);
      if (rlc_Config_v1530 != null) rlc_Config_v1530.print (_sb, "rlc_Config_v1530", _level+1);
      if (rlc_BearerConfigDupl_r15 != null) rlc_BearerConfigDupl_r15.print (_sb, "rlc_BearerConfigDupl_r15", _level+1);
      if (logicalChannelIdentity_r15 != null) logicalChannelIdentity_r15.print (_sb, "logicalChannelIdentity_r15", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
