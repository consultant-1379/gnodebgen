/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SSB_ConfigMobility extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SSB-ConfigMobility";
   }

   public SSB_ConfigMobility_ssb_ToMeasure ssb_ToMeasure;  // optional
   public Asn1Boolean deriveSSB_IndexFromCell;
   public SS_RSSI_Measurement ss_RSSI_Measurement;  // optional
   public boolean mV2ExtPresent;
   public SSB_PositionQCL_Relation_r16 ssb_PositionQCL_Common_r16 = null;  // optional
   public SSB_PositionQCL_CellsToAddModList_r16 ssb_PositionQCL_CellsToAddModList_r16;  // optional
   public PCI_List ssb_PositionQCL_CellsToRemoveList_r16;  // optional
   public Asn1OpenExt extElem1;

   public SSB_ConfigMobility () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SSB_ConfigMobility (
      SSB_ConfigMobility_ssb_ToMeasure ssb_ToMeasure_,
      Asn1Boolean deriveSSB_IndexFromCell_,
      SS_RSSI_Measurement ss_RSSI_Measurement_,
      SSB_PositionQCL_Relation_r16 ssb_PositionQCL_Common_r16_,
      SSB_PositionQCL_CellsToAddModList_r16 ssb_PositionQCL_CellsToAddModList_r16_,
      PCI_List ssb_PositionQCL_CellsToRemoveList_r16_
   ) {
      super();
      ssb_ToMeasure = ssb_ToMeasure_;
      deriveSSB_IndexFromCell = deriveSSB_IndexFromCell_;
      ss_RSSI_Measurement = ss_RSSI_Measurement_;
      ssb_PositionQCL_Common_r16 = ssb_PositionQCL_Common_r16_;
      ssb_PositionQCL_CellsToAddModList_r16 = ssb_PositionQCL_CellsToAddModList_r16_;
      ssb_PositionQCL_CellsToRemoveList_r16 = ssb_PositionQCL_CellsToRemoveList_r16_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SSB_ConfigMobility (
      Asn1Boolean deriveSSB_IndexFromCell_
   ) {
      super();
      deriveSSB_IndexFromCell = deriveSSB_IndexFromCell_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SSB_ConfigMobility (SSB_ConfigMobility_ssb_ToMeasure ssb_ToMeasure_,
      boolean deriveSSB_IndexFromCell_,
      SS_RSSI_Measurement ss_RSSI_Measurement_,
      SSB_PositionQCL_Relation_r16 ssb_PositionQCL_Common_r16_,
      SSB_PositionQCL_CellsToAddModList_r16 ssb_PositionQCL_CellsToAddModList_r16_,
      PCI_List ssb_PositionQCL_CellsToRemoveList_r16_
   ) {
      super();
      ssb_ToMeasure = ssb_ToMeasure_;
      deriveSSB_IndexFromCell = new Asn1Boolean (deriveSSB_IndexFromCell_);
      ss_RSSI_Measurement = ss_RSSI_Measurement_;
      ssb_PositionQCL_Common_r16 = ssb_PositionQCL_Common_r16_;
      ssb_PositionQCL_CellsToAddModList_r16 = ssb_PositionQCL_CellsToAddModList_r16_;
      ssb_PositionQCL_CellsToRemoveList_r16 = ssb_PositionQCL_CellsToRemoveList_r16_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public SSB_ConfigMobility (
      boolean deriveSSB_IndexFromCell_
   ) {
      super();
      deriveSSB_IndexFromCell = new Asn1Boolean (deriveSSB_IndexFromCell_);
   }

   public void init () {
      ssb_ToMeasure = null;
      deriveSSB_IndexFromCell = null;
      ss_RSSI_Measurement = null;
      ssb_PositionQCL_Common_r16 = null;
      ssb_PositionQCL_CellsToAddModList_r16 = null;
      ssb_PositionQCL_CellsToRemoveList_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return ssb_ToMeasure;
         case 1: return deriveSSB_IndexFromCell;
         case 2: return ss_RSSI_Measurement;
         case 3: return ssb_PositionQCL_Common_r16;
         case 4: return ssb_PositionQCL_CellsToAddModList_r16;
         case 5: return ssb_PositionQCL_CellsToRemoveList_r16;
         case 6: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "ssb-ToMeasure";
         case 1: return "deriveSSB-IndexFromCell";
         case 2: return "ss-RSSI-Measurement";
         case 3: return "ssb-PositionQCL-Common-r16";
         case 4: return "ssb-PositionQCL-CellsToAddModList-r16";
         case 5: return "ssb-PositionQCL-CellsToRemoveList-r16";
         case 6: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean ssb_ToMeasurePresent = buffer.decodeBit ("ssb_ToMeasurePresent");
      boolean ss_RSSI_MeasurementPresent = buffer.decodeBit ("ss_RSSI_MeasurementPresent");

      // decode ssb_ToMeasure

      if (ssb_ToMeasurePresent) {
         buffer.getContext().eventDispatcher.startElement("ssb_ToMeasure", -1);

         ssb_ToMeasure = new SSB_ConfigMobility_ssb_ToMeasure();
         ssb_ToMeasure.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ssb_ToMeasure", -1);
      }
      else {
         ssb_ToMeasure = null;
      }

      // decode deriveSSB_IndexFromCell

      buffer.getContext().eventDispatcher.startElement("deriveSSB_IndexFromCell", -1);

      deriveSSB_IndexFromCell = new Asn1Boolean();
      deriveSSB_IndexFromCell.decode (buffer);

      buffer.invokeCharacters(deriveSSB_IndexFromCell.toString());
      buffer.getContext().eventDispatcher.endElement("deriveSSB_IndexFromCell", -1);

      // decode ss_RSSI_Measurement

      if (ss_RSSI_MeasurementPresent) {
         buffer.getContext().eventDispatcher.startElement("ss_RSSI_Measurement", -1);

         ss_RSSI_Measurement = new SS_RSSI_Measurement();
         ss_RSSI_Measurement.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ss_RSSI_Measurement", -1);
      }
      else {
         ss_RSSI_Measurement = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean ssb_PositionQCL_Common_r16Present = buffer.decodeBit ("ssb_PositionQCL_Common_r16Present");

            boolean ssb_PositionQCL_CellsToAddModList_r16Present = buffer.decodeBit ("ssb_PositionQCL_CellsToAddModList_r16Present");

            boolean ssb_PositionQCL_CellsToRemoveList_r16Present = buffer.decodeBit ("ssb_PositionQCL_CellsToRemoveList_r16Present");

            // decode ssb_PositionQCL_Common_r16

            if (ssb_PositionQCL_Common_r16Present) {
               buffer.getContext().eventDispatcher.startElement("ssb_PositionQCL_Common_r16", -1);

               int tval = SSB_PositionQCL_Relation_r16.decodeEnumValue (buffer);
               ssb_PositionQCL_Common_r16 = SSB_PositionQCL_Relation_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("ssb_PositionQCL_Common_r16", -1);
            }
            else {
               ssb_PositionQCL_Common_r16 = null;
            }

            // decode ssb_PositionQCL_CellsToAddModList_r16

            if (ssb_PositionQCL_CellsToAddModList_r16Present) {
               buffer.getContext().eventDispatcher.startElement("ssb_PositionQCL_CellsToAddModList_r16", -1);

               ssb_PositionQCL_CellsToAddModList_r16 = new SSB_PositionQCL_CellsToAddModList_r16();
               ssb_PositionQCL_CellsToAddModList_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("ssb_PositionQCL_CellsToAddModList_r16", -1);
            }
            else {
               ssb_PositionQCL_CellsToAddModList_r16 = null;
            }

            // decode ssb_PositionQCL_CellsToRemoveList_r16

            if (ssb_PositionQCL_CellsToRemoveList_r16Present) {
               buffer.getContext().eventDispatcher.startElement("ssb_PositionQCL_CellsToRemoveList_r16", -1);

               ssb_PositionQCL_CellsToRemoveList_r16 = new PCI_List();
               ssb_PositionQCL_CellsToRemoveList_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("ssb_PositionQCL_CellsToRemoveList_r16", -1);
            }
            else {
               ssb_PositionQCL_CellsToRemoveList_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (ssb_ToMeasure != null) ssb_ToMeasure.print (_sb, "ssb_ToMeasure", _level+1);
      if (deriveSSB_IndexFromCell != null) deriveSSB_IndexFromCell.print (_sb, "deriveSSB_IndexFromCell", _level+1);
      if (ss_RSSI_Measurement != null) ss_RSSI_Measurement.print (_sb, "ss_RSSI_Measurement", _level+1);
      if (ssb_PositionQCL_Common_r16 != null) ssb_PositionQCL_Common_r16.print (_sb, "ssb_PositionQCL_Common_r16", _level+1);
      if (ssb_PositionQCL_CellsToAddModList_r16 != null) ssb_PositionQCL_CellsToAddModList_r16.print (_sb, "ssb_PositionQCL_CellsToAddModList_r16", _level+1);
      if (ssb_PositionQCL_CellsToRemoveList_r16 != null) ssb_PositionQCL_CellsToRemoveList_r16.print (_sb, "ssb_PositionQCL_CellsToRemoveList_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
