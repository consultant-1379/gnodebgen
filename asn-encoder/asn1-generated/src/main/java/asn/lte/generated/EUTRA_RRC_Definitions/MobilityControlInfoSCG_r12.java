/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MobilityControlInfoSCG_r12 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "MobilityControlInfoSCG-r12";
   }

   public MobilityControlInfoSCG_r12_t307_r12 t307_r12 = null;
   public C_RNTI ue_IdentitySCG_r12;  // optional
   public RACH_ConfigDedicated rach_ConfigDedicated_r12;  // optional
   public CipheringAlgorithm_r12 cipheringAlgorithmSCG_r12 = null;  // optional
   public boolean mV2ExtPresent;
   public MobilityControlInfoSCG_r12_makeBeforeBreakSCG_r14 makeBeforeBreakSCG_r14 = null;  // optional
   public RACH_Skip_r14 rach_SkipSCG_r14;  // optional
   public Asn1OpenExt extElem1;

   public MobilityControlInfoSCG_r12 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MobilityControlInfoSCG_r12 (
      MobilityControlInfoSCG_r12_t307_r12 t307_r12_,
      C_RNTI ue_IdentitySCG_r12_,
      RACH_ConfigDedicated rach_ConfigDedicated_r12_,
      CipheringAlgorithm_r12 cipheringAlgorithmSCG_r12_,
      MobilityControlInfoSCG_r12_makeBeforeBreakSCG_r14 makeBeforeBreakSCG_r14_,
      RACH_Skip_r14 rach_SkipSCG_r14_
   ) {
      super();
      t307_r12 = t307_r12_;
      ue_IdentitySCG_r12 = ue_IdentitySCG_r12_;
      rach_ConfigDedicated_r12 = rach_ConfigDedicated_r12_;
      cipheringAlgorithmSCG_r12 = cipheringAlgorithmSCG_r12_;
      makeBeforeBreakSCG_r14 = makeBeforeBreakSCG_r14_;
      rach_SkipSCG_r14 = rach_SkipSCG_r14_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public MobilityControlInfoSCG_r12 (
      MobilityControlInfoSCG_r12_t307_r12 t307_r12_
   ) {
      super();
      t307_r12 = t307_r12_;
   }

   public void init () {
      t307_r12 = null;
      ue_IdentitySCG_r12 = null;
      rach_ConfigDedicated_r12 = null;
      cipheringAlgorithmSCG_r12 = null;
      makeBeforeBreakSCG_r14 = null;
      rach_SkipSCG_r14 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return t307_r12;
         case 1: return ue_IdentitySCG_r12;
         case 2: return rach_ConfigDedicated_r12;
         case 3: return cipheringAlgorithmSCG_r12;
         case 4: return makeBeforeBreakSCG_r14;
         case 5: return rach_SkipSCG_r14;
         case 6: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "t307-r12";
         case 1: return "ue-IdentitySCG-r12";
         case 2: return "rach-ConfigDedicated-r12";
         case 3: return "cipheringAlgorithmSCG-r12";
         case 4: return "makeBeforeBreakSCG-r14";
         case 5: return "rach-SkipSCG-r14";
         case 6: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean ue_IdentitySCG_r12Present = buffer.decodeBit ("ue_IdentitySCG_r12Present");
      boolean rach_ConfigDedicated_r12Present = buffer.decodeBit ("rach_ConfigDedicated_r12Present");
      boolean cipheringAlgorithmSCG_r12Present = buffer.decodeBit ("cipheringAlgorithmSCG_r12Present");

      // decode t307_r12

      buffer.getContext().eventDispatcher.startElement("t307_r12", -1);

      {
         int tval = MobilityControlInfoSCG_r12_t307_r12.decodeEnumValue (buffer);
         t307_r12 = MobilityControlInfoSCG_r12_t307_r12.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("t307_r12", -1);

      // decode ue_IdentitySCG_r12

      if (ue_IdentitySCG_r12Present) {
         buffer.getContext().eventDispatcher.startElement("ue_IdentitySCG_r12", -1);

         ue_IdentitySCG_r12 = new C_RNTI();
         ue_IdentitySCG_r12.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ue_IdentitySCG_r12", -1);
      }
      else {
         ue_IdentitySCG_r12 = null;
      }

      // decode rach_ConfigDedicated_r12

      if (rach_ConfigDedicated_r12Present) {
         buffer.getContext().eventDispatcher.startElement("rach_ConfigDedicated_r12", -1);

         rach_ConfigDedicated_r12 = new RACH_ConfigDedicated();
         rach_ConfigDedicated_r12.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("rach_ConfigDedicated_r12", -1);
      }
      else {
         rach_ConfigDedicated_r12 = null;
      }

      // decode cipheringAlgorithmSCG_r12

      if (cipheringAlgorithmSCG_r12Present) {
         buffer.getContext().eventDispatcher.startElement("cipheringAlgorithmSCG_r12", -1);

         int tval = CipheringAlgorithm_r12.decodeEnumValue (buffer);
         cipheringAlgorithmSCG_r12 = CipheringAlgorithm_r12.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("cipheringAlgorithmSCG_r12", -1);
      }
      else {
         cipheringAlgorithmSCG_r12 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean makeBeforeBreakSCG_r14Present = buffer.decodeBit ("makeBeforeBreakSCG_r14Present");

            boolean rach_SkipSCG_r14Present = buffer.decodeBit ("rach_SkipSCG_r14Present");

            // decode makeBeforeBreakSCG_r14

            if (makeBeforeBreakSCG_r14Present) {
               buffer.getContext().eventDispatcher.startElement("makeBeforeBreakSCG_r14", -1);

               int tval = MobilityControlInfoSCG_r12_makeBeforeBreakSCG_r14.decodeEnumValue (buffer);
               makeBeforeBreakSCG_r14 = MobilityControlInfoSCG_r12_makeBeforeBreakSCG_r14.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("makeBeforeBreakSCG_r14", -1);
            }
            else {
               makeBeforeBreakSCG_r14 = null;
            }

            // decode rach_SkipSCG_r14

            if (rach_SkipSCG_r14Present) {
               buffer.getContext().eventDispatcher.startElement("rach_SkipSCG_r14", -1);

               rach_SkipSCG_r14 = new RACH_Skip_r14();
               rach_SkipSCG_r14.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("rach_SkipSCG_r14", -1);
            }
            else {
               rach_SkipSCG_r14 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (t307_r12 != null) t307_r12.print (_sb, "t307_r12", _level+1);
      if (ue_IdentitySCG_r12 != null) ue_IdentitySCG_r12.print (_sb, "ue_IdentitySCG_r12", _level+1);
      if (rach_ConfigDedicated_r12 != null) rach_ConfigDedicated_r12.print (_sb, "rach_ConfigDedicated_r12", _level+1);
      if (cipheringAlgorithmSCG_r12 != null) cipheringAlgorithmSCG_r12.print (_sb, "cipheringAlgorithmSCG_r12", _level+1);
      if (makeBeforeBreakSCG_r14 != null) makeBeforeBreakSCG_r14.print (_sb, "makeBeforeBreakSCG_r14", _level+1);
      if (rach_SkipSCG_r14 != null) rach_SkipSCG_r14.print (_sb, "rach_SkipSCG_r14", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
