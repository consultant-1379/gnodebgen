/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NBIOT_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SchedulingInfo_NB_r13_si_TB_r13 extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NBIOT_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ENUMERATED";
   }

   // Integer constants for switch-case
   public static final int _B56 = 0;
   public static final int _B120 = 1;
   public static final int _B208 = 2;
   public static final int _B256 = 3;
   public static final int _B328 = 4;
   public static final int _B440 = 5;
   public static final int _B552 = 6;
   public static final int _B680 = 7;

   // Singleton instances of SchedulingInfo_NB_r13_si_TB_r13
   protected static final SchedulingInfo_NB_r13_si_TB_r13 _b56 = new SchedulingInfo_NB_r13_si_TB_r13(0);
   protected static final SchedulingInfo_NB_r13_si_TB_r13 _b120 = new SchedulingInfo_NB_r13_si_TB_r13(1);
   protected static final SchedulingInfo_NB_r13_si_TB_r13 _b208 = new SchedulingInfo_NB_r13_si_TB_r13(2);
   protected static final SchedulingInfo_NB_r13_si_TB_r13 _b256 = new SchedulingInfo_NB_r13_si_TB_r13(3);
   protected static final SchedulingInfo_NB_r13_si_TB_r13 _b328 = new SchedulingInfo_NB_r13_si_TB_r13(4);
   protected static final SchedulingInfo_NB_r13_si_TB_r13 _b440 = new SchedulingInfo_NB_r13_si_TB_r13(5);
   protected static final SchedulingInfo_NB_r13_si_TB_r13 _b552 = new SchedulingInfo_NB_r13_si_TB_r13(6);
   protected static final SchedulingInfo_NB_r13_si_TB_r13 _b680 = new SchedulingInfo_NB_r13_si_TB_r13(7);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    *   7
    */
   protected SchedulingInfo_NB_r13_si_TB_r13 (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for b56.
    */
   public static SchedulingInfo_NB_r13_si_TB_r13 b56() {
      return _b56;
   }

   /**
    * Singleton accessor method for b120.
    */
   public static SchedulingInfo_NB_r13_si_TB_r13 b120() {
      return _b120;
   }

   /**
    * Singleton accessor method for b208.
    */
   public static SchedulingInfo_NB_r13_si_TB_r13 b208() {
      return _b208;
   }

   /**
    * Singleton accessor method for b256.
    */
   public static SchedulingInfo_NB_r13_si_TB_r13 b256() {
      return _b256;
   }

   /**
    * Singleton accessor method for b328.
    */
   public static SchedulingInfo_NB_r13_si_TB_r13 b328() {
      return _b328;
   }

   /**
    * Singleton accessor method for b440.
    */
   public static SchedulingInfo_NB_r13_si_TB_r13 b440() {
      return _b440;
   }

   /**
    * Singleton accessor method for b552.
    */
   public static SchedulingInfo_NB_r13_si_TB_r13 b552() {
      return _b552;
   }

   /**
    * Singleton accessor method for b680.
    */
   public static SchedulingInfo_NB_r13_si_TB_r13 b680() {
      return _b680;
   }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return SchedulingInfo_NB_r13_si_TB_r13.valueOf( SchedulingInfo_NB_r13_si_TB_r13.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static SchedulingInfo_NB_r13_si_TB_r13 valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 0: return b56();
         case 1: return b120();
         case 2: return b208();
         case 3: return b256();
         case 4: return b328();
         case 5: return b440();
         case 6: return b552();
         case 7: return b680();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      ui = (int) buffer.decodeConsWholeNumber (8);

      switch (ui) {
         case 0: ret =  0; break;
         case 1: ret =  1; break;
         case 2: ret =  2; break;
         case 3: ret =  3; break;
         case 4: ret =  4; break;
         case 5: ret =  5; break;
         case 6: ret =  6; break;
         case 7: ret =  7; break;
         default: throw new Asn1InvalidEnumException (ui);
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (SchedulingInfo_NB_r13_si_TB_r13.valueOf(ret).toString());

      return ret;
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("b56");
         case 1: return ("b120");
         case 2: return ("b208");
         case 3: return ("b256");
         case 4: return ("b328");
         case 5: return ("b440");
         case 6: return ("b552");
         case 7: return ("b680");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
