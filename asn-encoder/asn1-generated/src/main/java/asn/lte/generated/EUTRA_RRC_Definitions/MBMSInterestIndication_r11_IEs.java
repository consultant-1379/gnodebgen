/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MBMSInterestIndication_r11_IEs extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "MBMSInterestIndication-r11-IEs";
   }

   public CarrierFreqListMBMS_r11 mbms_FreqList_r11;  // optional
   public MBMSInterestIndication_r11_IEs_mbms_Priority_r11 mbms_Priority_r11 = null;  // optional
   public Asn1OctetString lateNonCriticalExtension;  // optional
   public MBMSInterestIndication_v1310_IEs nonCriticalExtension;  // optional

   public MBMSInterestIndication_r11_IEs () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MBMSInterestIndication_r11_IEs (
      CarrierFreqListMBMS_r11 mbms_FreqList_r11_,
      MBMSInterestIndication_r11_IEs_mbms_Priority_r11 mbms_Priority_r11_,
      Asn1OctetString lateNonCriticalExtension_,
      MBMSInterestIndication_v1310_IEs nonCriticalExtension_
   ) {
      super();
      mbms_FreqList_r11 = mbms_FreqList_r11_;
      mbms_Priority_r11 = mbms_Priority_r11_;
      lateNonCriticalExtension = lateNonCriticalExtension_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public MBMSInterestIndication_r11_IEs (CarrierFreqListMBMS_r11 mbms_FreqList_r11_,
      MBMSInterestIndication_r11_IEs_mbms_Priority_r11 mbms_Priority_r11_,
      byte[] lateNonCriticalExtension_,
      MBMSInterestIndication_v1310_IEs nonCriticalExtension_
   ) {
      super();
      mbms_FreqList_r11 = mbms_FreqList_r11_;
      mbms_Priority_r11 = mbms_Priority_r11_;
      lateNonCriticalExtension = new Asn1OctetString (lateNonCriticalExtension_);
      nonCriticalExtension = nonCriticalExtension_;
   }

   public void init () {
      mbms_FreqList_r11 = null;
      mbms_Priority_r11 = null;
      lateNonCriticalExtension = null;
      nonCriticalExtension = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return mbms_FreqList_r11;
         case 1: return mbms_Priority_r11;
         case 2: return lateNonCriticalExtension;
         case 3: return nonCriticalExtension;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "mbms-FreqList-r11";
         case 1: return "mbms-Priority-r11";
         case 2: return "lateNonCriticalExtension";
         case 3: return "nonCriticalExtension";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean mbms_FreqList_r11Present = buffer.decodeBit ("mbms_FreqList_r11Present");
      boolean mbms_Priority_r11Present = buffer.decodeBit ("mbms_Priority_r11Present");
      boolean lateNonCriticalExtensionPresent = buffer.decodeBit ("lateNonCriticalExtensionPresent");
      boolean nonCriticalExtensionPresent = buffer.decodeBit ("nonCriticalExtensionPresent");

      // decode mbms_FreqList_r11

      if (mbms_FreqList_r11Present) {
         buffer.getContext().eventDispatcher.startElement("mbms_FreqList_r11", -1);

         mbms_FreqList_r11 = new CarrierFreqListMBMS_r11();
         mbms_FreqList_r11.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("mbms_FreqList_r11", -1);
      }
      else {
         mbms_FreqList_r11 = null;
      }

      // decode mbms_Priority_r11

      if (mbms_Priority_r11Present) {
         buffer.getContext().eventDispatcher.startElement("mbms_Priority_r11", -1);

         int tval = MBMSInterestIndication_r11_IEs_mbms_Priority_r11.decodeEnumValue (buffer);
         mbms_Priority_r11 = MBMSInterestIndication_r11_IEs_mbms_Priority_r11.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("mbms_Priority_r11", -1);
      }
      else {
         mbms_Priority_r11 = null;
      }

      // decode lateNonCriticalExtension

      if (lateNonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("lateNonCriticalExtension", -1);

         lateNonCriticalExtension = new Asn1OctetString();
         lateNonCriticalExtension.decode (buffer);

         buffer.invokeCharacters(lateNonCriticalExtension.toString());
         buffer.getContext().eventDispatcher.endElement("lateNonCriticalExtension", -1);
      }
      else {
         lateNonCriticalExtension = null;
      }

      // decode nonCriticalExtension

      if (nonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension = new MBMSInterestIndication_v1310_IEs();
         nonCriticalExtension.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }
      else {
         nonCriticalExtension = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (mbms_FreqList_r11 != null) mbms_FreqList_r11.print (_sb, "mbms_FreqList_r11", _level+1);
      if (mbms_Priority_r11 != null) mbms_Priority_r11.print (_sb, "mbms_Priority_r11", _level+1);
      if (lateNonCriticalExtension != null) lateNonCriticalExtension.print (_sb, "lateNonCriticalExtension", _level+1);
      if (nonCriticalExtension != null) nonCriticalExtension.print (_sb, "nonCriticalExtension", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
