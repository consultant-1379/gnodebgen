/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.LPPA_IEs;

import com.objsys.asn1j.runtime.*;

public class OTDOACell_Information_Item extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPPA_IEsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "OTDOACell-Information-Item";
   }

   // Choice element identifier constants
   public final static byte _PCI = 1;
   public final static byte _CELLID = 2;
   public final static byte _TAC = 3;
   public final static byte _EARFCN = 4;
   public final static byte _PRS_BANDWIDTH = 5;
   public final static byte _PRS_CONFIGURATIONINDEX = 6;
   public final static byte _CPLENGTH = 7;
   public final static byte _NUMBEROFDLFRAMES = 8;
   public final static byte _NUMBEROFANTENNAPORTS = 9;
   public final static byte _SFNINITIALISATIONTIME = 10;
   public final static byte _E_UTRANACCESSPOINTPOSITION = 11;
   public final static byte _PRSMUTINGCONFIGURATION = 12;
   public final static byte _EXTELEM1 = 13;

   public OTDOACell_Information_Item () {
      super();
   }

   public OTDOACell_Information_Item (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _PCI: return "pCI";
      case _CELLID: return "cellId";
      case _TAC: return "tAC";
      case _EARFCN: return "eARFCN";
      case _PRS_BANDWIDTH: return "pRS_Bandwidth";
      case _PRS_CONFIGURATIONINDEX: return "pRS_ConfigurationIndex";
      case _CPLENGTH: return "cPLength";
      case _NUMBEROFDLFRAMES: return "numberOfDlFrames";
      case _NUMBEROFANTENNAPORTS: return "numberOfAntennaPorts";
      case _SFNINITIALISATIONTIME: return "sFNInitialisationTime";
      case _E_UTRANACCESSPOINTPOSITION: return "e_UTRANAccessPointPosition";
      case _PRSMUTINGCONFIGURATION: return "pRSMutingConfiguration";
      case _EXTELEM1: return "...";
      default: return "UNDEFINED";
      }
   }

   public void set_pCI (PCI value) {
      setElement (_PCI, value);
   }

   public void set_cellId (ECGI value) {
      setElement (_CELLID, value);
   }

   public void set_tAC (TAC value) {
      setElement (_TAC, value);
   }

   public void set_eARFCN (EARFCN value) {
      setElement (_EARFCN, value);
   }

   public void set_pRS_Bandwidth (PRS_Bandwidth value) {
      setElement (_PRS_BANDWIDTH, value);
   }

   public void set_pRS_ConfigurationIndex (PRS_Configuration_Index value) {
      setElement (_PRS_CONFIGURATIONINDEX, value);
   }

   public void set_cPLength (CPLength value) {
      setElement (_CPLENGTH, value);
   }

   public void set_numberOfDlFrames (NumberOfDlFrames value) {
      setElement (_NUMBEROFDLFRAMES, value);
   }

   public void set_numberOfAntennaPorts (NumberOfAntennaPorts value) {
      setElement (_NUMBEROFANTENNAPORTS, value);
   }

   public void set_sFNInitialisationTime (SFNInitialisationTime value) {
      setElement (_SFNINITIALISATIONTIME, value);
   }

   public void set_e_UTRANAccessPointPosition (E_UTRANAccessPointPosition value) {
      setElement (_E_UTRANACCESSPOINTPOSITION, value);
   }

   public void set_pRSMutingConfiguration (PRSMutingConfiguration value) {
      setElement (_PRSMUTINGCONFIGURATION, value);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      Asn1PerDecodeBuffer savedBuffer = null;
      boolean extbit = buffer.decodeBit ("extbit");

      if (!extbit) {
         int idx = (int) buffer.decodeConsWholeNumber (11, "index");
         choiceID = idx + 1;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         switch (idx) {
            // pCI
            case 0: { 
               PCI pCI;
               element = pCI = new PCI();
               pCI.decode (buffer);
               break;
            }

            // cellId
            case 1: { 
               ECGI cellId;
               element = cellId = new ECGI();
               cellId.decode (buffer);
               break;
            }

            // tAC
            case 2: { 
               TAC tAC;
               element = tAC = new TAC();
               tAC.decode (buffer);
               break;
            }

            // eARFCN
            case 3: { 
               EARFCN eARFCN;
               element = eARFCN = new EARFCN();
               eARFCN.decode (buffer);
               break;
            }

            // pRS_Bandwidth
            case 4: { 
               PRS_Bandwidth pRS_Bandwidth;
               int tval = PRS_Bandwidth.decodeEnumValue (buffer);
               element = pRS_Bandwidth = PRS_Bandwidth.valueOf (tval);
               break;
            }

            // pRS_ConfigurationIndex
            case 5: { 
               PRS_Configuration_Index pRS_ConfigurationIndex;
               element = pRS_ConfigurationIndex = new PRS_Configuration_Index();
               pRS_ConfigurationIndex.decode (buffer);
               break;
            }

            // cPLength
            case 6: { 
               CPLength cPLength;
               int tval = CPLength.decodeEnumValue (buffer);
               element = cPLength = CPLength.valueOf (tval);
               break;
            }

            // numberOfDlFrames
            case 7: { 
               NumberOfDlFrames numberOfDlFrames;
               int tval = NumberOfDlFrames.decodeEnumValue (buffer);
               element = numberOfDlFrames = NumberOfDlFrames.valueOf (tval);
               break;
            }

            // numberOfAntennaPorts
            case 8: { 
               NumberOfAntennaPorts numberOfAntennaPorts;
               int tval = NumberOfAntennaPorts.decodeEnumValue (buffer);
               element = numberOfAntennaPorts = NumberOfAntennaPorts.valueOf (tval);
               break;
            }

            // sFNInitialisationTime
            case 9: { 
               SFNInitialisationTime sFNInitialisationTime;
               element = sFNInitialisationTime = new SFNInitialisationTime();
               sFNInitialisationTime.decode (buffer);
               break;
            }

            // e_UTRANAccessPointPosition
            case 10: { 
               E_UTRANAccessPointPosition e_UTRANAccessPointPosition;
               element = e_UTRANAccessPointPosition = new E_UTRANAccessPointPosition();
               e_UTRANAccessPointPosition.decode (buffer);
               break;
            }

            default:
            throw new Asn1InvalidChoiceOptionException (buffer, idx);
         }
      }
      else {
         int idx = (int) buffer.decodeSmallNonNegWholeNumber ();
         choiceID = idx + 12;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         buffer.byteAlign();

         Asn1OpenType openType = new Asn1OpenType ();
         openType.decode (buffer);

         savedBuffer = buffer;
         buffer = new Asn1PerDecodeBuffer (openType.value, savedBuffer.isAligned());
         buffer.setEventHandlerList (savedBuffer);

         switch (idx) {
            // pRSMutingConfiguration
            case 0: { 
               PRSMutingConfiguration pRSMutingConfiguration;
               element = pRSMutingConfiguration = new PRSMutingConfiguration();
               pRSMutingConfiguration.decode (buffer);
               break;
            }

            // extElem1
            case 1: { 
               Asn1OpenType extElem1;
               element = extElem1 = new Asn1OpenType();
               extElem1.decode (buffer);

               buffer.invokeCharacters(extElem1.toString());
               break;
            }

            default:
               setElement (_EXTELEM1, openType);
               buffer.invokeCharacters (openType.toString());
         }

      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);

      if (savedBuffer != null) {
         buffer = savedBuffer;
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (element != null) {
         element.print (_sb, getElemName(), _level+1);
      }
      indent (_sb, _level);
      _sb.append("}\n");
   }

}
