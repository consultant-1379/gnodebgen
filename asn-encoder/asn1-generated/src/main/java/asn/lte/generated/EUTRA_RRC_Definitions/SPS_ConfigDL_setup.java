/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SPS_ConfigDL_setup extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public SPS_ConfigDL_setup_semiPersistSchedIntervalDL semiPersistSchedIntervalDL = null;
   public Asn1Integer numberOfConfSPS_Processes;
   public N1PUCCH_AN_PersistentList n1PUCCH_AN_PersistentList;
   public boolean mV2ExtPresent;
   public SPS_ConfigDL_setup_twoAntennaPortActivated_r10 twoAntennaPortActivated_r10;  // optional
   public Asn1OpenExt extElem1;

   public SPS_ConfigDL_setup () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SPS_ConfigDL_setup (
      SPS_ConfigDL_setup_semiPersistSchedIntervalDL semiPersistSchedIntervalDL_,
      Asn1Integer numberOfConfSPS_Processes_,
      N1PUCCH_AN_PersistentList n1PUCCH_AN_PersistentList_,
      SPS_ConfigDL_setup_twoAntennaPortActivated_r10 twoAntennaPortActivated_r10_
   ) {
      super();
      semiPersistSchedIntervalDL = semiPersistSchedIntervalDL_;
      numberOfConfSPS_Processes = numberOfConfSPS_Processes_;
      n1PUCCH_AN_PersistentList = n1PUCCH_AN_PersistentList_;
      twoAntennaPortActivated_r10 = twoAntennaPortActivated_r10_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SPS_ConfigDL_setup (
      SPS_ConfigDL_setup_semiPersistSchedIntervalDL semiPersistSchedIntervalDL_,
      Asn1Integer numberOfConfSPS_Processes_,
      N1PUCCH_AN_PersistentList n1PUCCH_AN_PersistentList_
   ) {
      super();
      semiPersistSchedIntervalDL = semiPersistSchedIntervalDL_;
      numberOfConfSPS_Processes = numberOfConfSPS_Processes_;
      n1PUCCH_AN_PersistentList = n1PUCCH_AN_PersistentList_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SPS_ConfigDL_setup (SPS_ConfigDL_setup_semiPersistSchedIntervalDL semiPersistSchedIntervalDL_,
      long numberOfConfSPS_Processes_,
      N1PUCCH_AN_PersistentList n1PUCCH_AN_PersistentList_,
      SPS_ConfigDL_setup_twoAntennaPortActivated_r10 twoAntennaPortActivated_r10_
   ) {
      super();
      semiPersistSchedIntervalDL = semiPersistSchedIntervalDL_;
      numberOfConfSPS_Processes = new Asn1Integer (numberOfConfSPS_Processes_);
      n1PUCCH_AN_PersistentList = n1PUCCH_AN_PersistentList_;
      twoAntennaPortActivated_r10 = twoAntennaPortActivated_r10_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public SPS_ConfigDL_setup (
      SPS_ConfigDL_setup_semiPersistSchedIntervalDL semiPersistSchedIntervalDL_,
      long numberOfConfSPS_Processes_,
      N1PUCCH_AN_PersistentList n1PUCCH_AN_PersistentList_
   ) {
      super();
      semiPersistSchedIntervalDL = semiPersistSchedIntervalDL_;
      numberOfConfSPS_Processes = new Asn1Integer (numberOfConfSPS_Processes_);
      n1PUCCH_AN_PersistentList = n1PUCCH_AN_PersistentList_;
   }

   public void init () {
      semiPersistSchedIntervalDL = null;
      numberOfConfSPS_Processes = null;
      n1PUCCH_AN_PersistentList = null;
      twoAntennaPortActivated_r10 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return semiPersistSchedIntervalDL;
         case 1: return numberOfConfSPS_Processes;
         case 2: return n1PUCCH_AN_PersistentList;
         case 3: return twoAntennaPortActivated_r10;
         case 4: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "semiPersistSchedIntervalDL";
         case 1: return "numberOfConfSPS-Processes";
         case 2: return "n1PUCCH-AN-PersistentList";
         case 3: return "twoAntennaPortActivated-r10";
         case 4: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      // decode semiPersistSchedIntervalDL

      buffer.getContext().eventDispatcher.startElement("semiPersistSchedIntervalDL", -1);

      {
         int tval = SPS_ConfigDL_setup_semiPersistSchedIntervalDL.decodeEnumValue (buffer);
         semiPersistSchedIntervalDL = SPS_ConfigDL_setup_semiPersistSchedIntervalDL.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("semiPersistSchedIntervalDL", -1);

      // decode numberOfConfSPS_Processes

      buffer.getContext().eventDispatcher.startElement("numberOfConfSPS_Processes", -1);

      numberOfConfSPS_Processes = new Asn1Integer();
      numberOfConfSPS_Processes.decode (buffer, 1, 8);

      buffer.invokeCharacters(numberOfConfSPS_Processes.toString());
      buffer.getContext().eventDispatcher.endElement("numberOfConfSPS_Processes", -1);

      // decode n1PUCCH_AN_PersistentList

      buffer.getContext().eventDispatcher.startElement("n1PUCCH_AN_PersistentList", -1);

      n1PUCCH_AN_PersistentList = new N1PUCCH_AN_PersistentList();
      n1PUCCH_AN_PersistentList.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("n1PUCCH_AN_PersistentList", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean twoAntennaPortActivated_r10Present = buffer.decodeBit ("twoAntennaPortActivated_r10Present");

            // decode twoAntennaPortActivated_r10

            if (twoAntennaPortActivated_r10Present) {
               buffer.getContext().eventDispatcher.startElement("twoAntennaPortActivated_r10", -1);

               twoAntennaPortActivated_r10 = new SPS_ConfigDL_setup_twoAntennaPortActivated_r10();
               twoAntennaPortActivated_r10.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("twoAntennaPortActivated_r10", -1);
            }
            else {
               twoAntennaPortActivated_r10 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (semiPersistSchedIntervalDL != null) semiPersistSchedIntervalDL.print (_sb, "semiPersistSchedIntervalDL", _level+1);
      if (numberOfConfSPS_Processes != null) numberOfConfSPS_Processes.print (_sb, "numberOfConfSPS_Processes", _level+1);
      if (n1PUCCH_AN_PersistentList != null) n1PUCCH_AN_PersistentList.print (_sb, "n1PUCCH_AN_PersistentList", _level+1);
      if (twoAntennaPortActivated_r10 != null) twoAntennaPortActivated_r10.print (_sb, "twoAntennaPortActivated_r10", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
