/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_Sidelink_Preconf;

import com.objsys.asn1j.runtime.*;
import asn.lte.generated.EUTRA_RRC_Definitions.ARFCN_ValueEUTRA_r9;
import asn.lte.generated.EUTRA_RRC_Definitions.P_Max;
import asn.lte.generated.EUTRA_RRC_Definitions.AdditionalSpectrumEmission;
import asn.lte.generated.EUTRA_RRC_Definitions.TDD_ConfigSL_r12;
import asn.lte.generated.EUTRA_RRC_Definitions.AdditionalSpectrumEmission_v10l0;

public class SL_PreconfigGeneral_r12 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_Sidelink_PreconfRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SL-PreconfigGeneral-r12";
   }

   public SL_PreconfigGeneral_r12_rohc_Profiles_r12 rohc_Profiles_r12;
   public ARFCN_ValueEUTRA_r9 carrierFreq_r12;
   public P_Max maxTxPower_r12;
   public AdditionalSpectrumEmission additionalSpectrumEmission_r12;
   public SL_PreconfigGeneral_r12_sl_bandwidth_r12 sl_bandwidth_r12 = null;
   public TDD_ConfigSL_r12 tdd_ConfigSL_r12;
   public Asn1BitString reserved_r12;
   public boolean mV2ExtPresent;
   public AdditionalSpectrumEmission_v10l0 additionalSpectrumEmission_v1440;  // optional
   public Asn1OpenExt extElem1;

   public SL_PreconfigGeneral_r12 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SL_PreconfigGeneral_r12 (
      SL_PreconfigGeneral_r12_rohc_Profiles_r12 rohc_Profiles_r12_,
      ARFCN_ValueEUTRA_r9 carrierFreq_r12_,
      P_Max maxTxPower_r12_,
      AdditionalSpectrumEmission additionalSpectrumEmission_r12_,
      SL_PreconfigGeneral_r12_sl_bandwidth_r12 sl_bandwidth_r12_,
      TDD_ConfigSL_r12 tdd_ConfigSL_r12_,
      Asn1BitString reserved_r12_,
      AdditionalSpectrumEmission_v10l0 additionalSpectrumEmission_v1440_
   ) {
      super();
      rohc_Profiles_r12 = rohc_Profiles_r12_;
      carrierFreq_r12 = carrierFreq_r12_;
      maxTxPower_r12 = maxTxPower_r12_;
      additionalSpectrumEmission_r12 = additionalSpectrumEmission_r12_;
      sl_bandwidth_r12 = sl_bandwidth_r12_;
      tdd_ConfigSL_r12 = tdd_ConfigSL_r12_;
      reserved_r12 = reserved_r12_;
      additionalSpectrumEmission_v1440 = additionalSpectrumEmission_v1440_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SL_PreconfigGeneral_r12 (
      SL_PreconfigGeneral_r12_rohc_Profiles_r12 rohc_Profiles_r12_,
      ARFCN_ValueEUTRA_r9 carrierFreq_r12_,
      P_Max maxTxPower_r12_,
      AdditionalSpectrumEmission additionalSpectrumEmission_r12_,
      SL_PreconfigGeneral_r12_sl_bandwidth_r12 sl_bandwidth_r12_,
      TDD_ConfigSL_r12 tdd_ConfigSL_r12_,
      Asn1BitString reserved_r12_
   ) {
      super();
      rohc_Profiles_r12 = rohc_Profiles_r12_;
      carrierFreq_r12 = carrierFreq_r12_;
      maxTxPower_r12 = maxTxPower_r12_;
      additionalSpectrumEmission_r12 = additionalSpectrumEmission_r12_;
      sl_bandwidth_r12 = sl_bandwidth_r12_;
      tdd_ConfigSL_r12 = tdd_ConfigSL_r12_;
      reserved_r12 = reserved_r12_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SL_PreconfigGeneral_r12 (SL_PreconfigGeneral_r12_rohc_Profiles_r12 rohc_Profiles_r12_,
      long carrierFreq_r12_,
      long maxTxPower_r12_,
      long additionalSpectrumEmission_r12_,
      SL_PreconfigGeneral_r12_sl_bandwidth_r12 sl_bandwidth_r12_,
      TDD_ConfigSL_r12 tdd_ConfigSL_r12_,
      Asn1BitString reserved_r12_,
      long additionalSpectrumEmission_v1440_
   ) {
      super();
      rohc_Profiles_r12 = rohc_Profiles_r12_;
      carrierFreq_r12 = new ARFCN_ValueEUTRA_r9 (carrierFreq_r12_);
      maxTxPower_r12 = new P_Max (maxTxPower_r12_);
      additionalSpectrumEmission_r12 = new AdditionalSpectrumEmission (additionalSpectrumEmission_r12_);
      sl_bandwidth_r12 = sl_bandwidth_r12_;
      tdd_ConfigSL_r12 = tdd_ConfigSL_r12_;
      reserved_r12 = reserved_r12_;
      additionalSpectrumEmission_v1440 = new AdditionalSpectrumEmission_v10l0 (additionalSpectrumEmission_v1440_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public SL_PreconfigGeneral_r12 (
      SL_PreconfigGeneral_r12_rohc_Profiles_r12 rohc_Profiles_r12_,
      long carrierFreq_r12_,
      long maxTxPower_r12_,
      long additionalSpectrumEmission_r12_,
      SL_PreconfigGeneral_r12_sl_bandwidth_r12 sl_bandwidth_r12_,
      TDD_ConfigSL_r12 tdd_ConfigSL_r12_,
      Asn1BitString reserved_r12_
   ) {
      super();
      rohc_Profiles_r12 = rohc_Profiles_r12_;
      carrierFreq_r12 = new ARFCN_ValueEUTRA_r9 (carrierFreq_r12_);
      maxTxPower_r12 = new P_Max (maxTxPower_r12_);
      additionalSpectrumEmission_r12 = new AdditionalSpectrumEmission (additionalSpectrumEmission_r12_);
      sl_bandwidth_r12 = sl_bandwidth_r12_;
      tdd_ConfigSL_r12 = tdd_ConfigSL_r12_;
      reserved_r12 = reserved_r12_;
   }

   public void init () {
      rohc_Profiles_r12 = null;
      carrierFreq_r12 = null;
      maxTxPower_r12 = null;
      additionalSpectrumEmission_r12 = null;
      sl_bandwidth_r12 = null;
      tdd_ConfigSL_r12 = null;
      reserved_r12 = null;
      additionalSpectrumEmission_v1440 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 9; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return rohc_Profiles_r12;
         case 1: return carrierFreq_r12;
         case 2: return maxTxPower_r12;
         case 3: return additionalSpectrumEmission_r12;
         case 4: return sl_bandwidth_r12;
         case 5: return tdd_ConfigSL_r12;
         case 6: return reserved_r12;
         case 7: return additionalSpectrumEmission_v1440;
         case 8: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "rohc-Profiles-r12";
         case 1: return "carrierFreq-r12";
         case 2: return "maxTxPower-r12";
         case 3: return "additionalSpectrumEmission-r12";
         case 4: return "sl-bandwidth-r12";
         case 5: return "tdd-ConfigSL-r12";
         case 6: return "reserved-r12";
         case 7: return "additionalSpectrumEmission-v1440";
         case 8: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      // decode rohc_Profiles_r12

      buffer.getContext().eventDispatcher.startElement("rohc_Profiles_r12", -1);

      rohc_Profiles_r12 = new SL_PreconfigGeneral_r12_rohc_Profiles_r12();
      rohc_Profiles_r12.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("rohc_Profiles_r12", -1);

      // decode carrierFreq_r12

      buffer.getContext().eventDispatcher.startElement("carrierFreq_r12", -1);

      carrierFreq_r12 = new ARFCN_ValueEUTRA_r9();
      carrierFreq_r12.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("carrierFreq_r12", -1);

      // decode maxTxPower_r12

      buffer.getContext().eventDispatcher.startElement("maxTxPower_r12", -1);

      maxTxPower_r12 = new P_Max();
      maxTxPower_r12.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("maxTxPower_r12", -1);

      // decode additionalSpectrumEmission_r12

      buffer.getContext().eventDispatcher.startElement("additionalSpectrumEmission_r12", -1);

      additionalSpectrumEmission_r12 = new AdditionalSpectrumEmission();
      additionalSpectrumEmission_r12.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("additionalSpectrumEmission_r12", -1);

      // decode sl_bandwidth_r12

      buffer.getContext().eventDispatcher.startElement("sl_bandwidth_r12", -1);

      {
         int tval = SL_PreconfigGeneral_r12_sl_bandwidth_r12.decodeEnumValue (buffer);
         sl_bandwidth_r12 = SL_PreconfigGeneral_r12_sl_bandwidth_r12.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("sl_bandwidth_r12", -1);

      // decode tdd_ConfigSL_r12

      buffer.getContext().eventDispatcher.startElement("tdd_ConfigSL_r12", -1);

      tdd_ConfigSL_r12 = new TDD_ConfigSL_r12();
      tdd_ConfigSL_r12.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("tdd_ConfigSL_r12", -1);

      // decode reserved_r12

      buffer.getContext().eventDispatcher.startElement("reserved_r12", -1);

      reserved_r12 = new Asn1BitString();
      reserved_r12.decode (buffer, 19, 19);

      buffer.invokeCharacters(reserved_r12.toString());
      buffer.getContext().eventDispatcher.endElement("reserved_r12", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean additionalSpectrumEmission_v1440Present = buffer.decodeBit ("additionalSpectrumEmission_v1440Present");

            // decode additionalSpectrumEmission_v1440

            if (additionalSpectrumEmission_v1440Present) {
               buffer.getContext().eventDispatcher.startElement("additionalSpectrumEmission_v1440", -1);

               additionalSpectrumEmission_v1440 = new AdditionalSpectrumEmission_v10l0();
               additionalSpectrumEmission_v1440.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("additionalSpectrumEmission_v1440", -1);
            }
            else {
               additionalSpectrumEmission_v1440 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (rohc_Profiles_r12 != null) rohc_Profiles_r12.print (_sb, "rohc_Profiles_r12", _level+1);
      if (carrierFreq_r12 != null) carrierFreq_r12.print (_sb, "carrierFreq_r12", _level+1);
      if (maxTxPower_r12 != null) maxTxPower_r12.print (_sb, "maxTxPower_r12", _level+1);
      if (additionalSpectrumEmission_r12 != null) additionalSpectrumEmission_r12.print (_sb, "additionalSpectrumEmission_r12", _level+1);
      if (sl_bandwidth_r12 != null) sl_bandwidth_r12.print (_sb, "sl_bandwidth_r12", _level+1);
      if (tdd_ConfigSL_r12 != null) tdd_ConfigSL_r12.print (_sb, "tdd_ConfigSL_r12", _level+1);
      if (reserved_r12 != null) reserved_r12.print (_sb, "reserved_r12", _level+1);
      if (additionalSpectrumEmission_v1440 != null) additionalSpectrumEmission_v1440.print (_sb, "additionalSpectrumEmission_v1440", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
