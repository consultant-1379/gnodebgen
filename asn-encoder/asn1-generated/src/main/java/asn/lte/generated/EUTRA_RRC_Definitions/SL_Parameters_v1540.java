/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SL_Parameters_v1540 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SL-Parameters-v1540";
   }

   public SL_Parameters_v1540_sl_64QAM_Rx_r15 sl_64QAM_Rx_r15 = null;  // optional
   public SL_Parameters_v1540_sl_RateMatchingTBSScaling_r15 sl_RateMatchingTBSScaling_r15 = null;  // optional
   public SL_Parameters_v1540_sl_LowT2min_r15 sl_LowT2min_r15 = null;  // optional
   public SL_Parameters_v1540_v2x_SensingReportingMode3_r15 v2x_SensingReportingMode3_r15 = null;  // optional

   public SL_Parameters_v1540 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SL_Parameters_v1540 (
      SL_Parameters_v1540_sl_64QAM_Rx_r15 sl_64QAM_Rx_r15_,
      SL_Parameters_v1540_sl_RateMatchingTBSScaling_r15 sl_RateMatchingTBSScaling_r15_,
      SL_Parameters_v1540_sl_LowT2min_r15 sl_LowT2min_r15_,
      SL_Parameters_v1540_v2x_SensingReportingMode3_r15 v2x_SensingReportingMode3_r15_
   ) {
      super();
      sl_64QAM_Rx_r15 = sl_64QAM_Rx_r15_;
      sl_RateMatchingTBSScaling_r15 = sl_RateMatchingTBSScaling_r15_;
      sl_LowT2min_r15 = sl_LowT2min_r15_;
      v2x_SensingReportingMode3_r15 = v2x_SensingReportingMode3_r15_;
   }

   public void init () {
      sl_64QAM_Rx_r15 = null;
      sl_RateMatchingTBSScaling_r15 = null;
      sl_LowT2min_r15 = null;
      v2x_SensingReportingMode3_r15 = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return sl_64QAM_Rx_r15;
         case 1: return sl_RateMatchingTBSScaling_r15;
         case 2: return sl_LowT2min_r15;
         case 3: return v2x_SensingReportingMode3_r15;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "sl-64QAM-Rx-r15";
         case 1: return "sl-RateMatchingTBSScaling-r15";
         case 2: return "sl-LowT2min-r15";
         case 3: return "v2x-SensingReportingMode3-r15";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean sl_64QAM_Rx_r15Present = buffer.decodeBit ("sl_64QAM_Rx_r15Present");
      boolean sl_RateMatchingTBSScaling_r15Present = buffer.decodeBit ("sl_RateMatchingTBSScaling_r15Present");
      boolean sl_LowT2min_r15Present = buffer.decodeBit ("sl_LowT2min_r15Present");
      boolean v2x_SensingReportingMode3_r15Present = buffer.decodeBit ("v2x_SensingReportingMode3_r15Present");

      // decode sl_64QAM_Rx_r15

      if (sl_64QAM_Rx_r15Present) {
         buffer.getContext().eventDispatcher.startElement("sl_64QAM_Rx_r15", -1);

         int tval = SL_Parameters_v1540_sl_64QAM_Rx_r15.decodeEnumValue (buffer);
         sl_64QAM_Rx_r15 = SL_Parameters_v1540_sl_64QAM_Rx_r15.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("sl_64QAM_Rx_r15", -1);
      }
      else {
         sl_64QAM_Rx_r15 = null;
      }

      // decode sl_RateMatchingTBSScaling_r15

      if (sl_RateMatchingTBSScaling_r15Present) {
         buffer.getContext().eventDispatcher.startElement("sl_RateMatchingTBSScaling_r15", -1);

         int tval = SL_Parameters_v1540_sl_RateMatchingTBSScaling_r15.decodeEnumValue (buffer);
         sl_RateMatchingTBSScaling_r15 = SL_Parameters_v1540_sl_RateMatchingTBSScaling_r15.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("sl_RateMatchingTBSScaling_r15", -1);
      }
      else {
         sl_RateMatchingTBSScaling_r15 = null;
      }

      // decode sl_LowT2min_r15

      if (sl_LowT2min_r15Present) {
         buffer.getContext().eventDispatcher.startElement("sl_LowT2min_r15", -1);

         int tval = SL_Parameters_v1540_sl_LowT2min_r15.decodeEnumValue (buffer);
         sl_LowT2min_r15 = SL_Parameters_v1540_sl_LowT2min_r15.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("sl_LowT2min_r15", -1);
      }
      else {
         sl_LowT2min_r15 = null;
      }

      // decode v2x_SensingReportingMode3_r15

      if (v2x_SensingReportingMode3_r15Present) {
         buffer.getContext().eventDispatcher.startElement("v2x_SensingReportingMode3_r15", -1);

         int tval = SL_Parameters_v1540_v2x_SensingReportingMode3_r15.decodeEnumValue (buffer);
         v2x_SensingReportingMode3_r15 = SL_Parameters_v1540_v2x_SensingReportingMode3_r15.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("v2x_SensingReportingMode3_r15", -1);
      }
      else {
         v2x_SensingReportingMode3_r15 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (sl_64QAM_Rx_r15 != null) sl_64QAM_Rx_r15.print (_sb, "sl_64QAM_Rx_r15", _level+1);
      if (sl_RateMatchingTBSScaling_r15 != null) sl_RateMatchingTBSScaling_r15.print (_sb, "sl_RateMatchingTBSScaling_r15", _level+1);
      if (sl_LowT2min_r15 != null) sl_LowT2min_r15.print (_sb, "sl_LowT2min_r15", _level+1);
      if (v2x_SensingReportingMode3_r15 != null) v2x_SensingReportingMode3_r15.print (_sb, "v2x_SensingReportingMode3_r15", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
