/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MeasResult2NR_r16 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "MeasResult2NR-r16";
   }

   public ARFCN_ValueNR ssbFrequency_r16;  // optional
   public ARFCN_ValueNR refFreqCSI_RS_r16;  // optional
   public MeasResultListNR measResultList_r16;

   public MeasResult2NR_r16 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MeasResult2NR_r16 (
      ARFCN_ValueNR ssbFrequency_r16_,
      ARFCN_ValueNR refFreqCSI_RS_r16_,
      MeasResultListNR measResultList_r16_
   ) {
      super();
      ssbFrequency_r16 = ssbFrequency_r16_;
      refFreqCSI_RS_r16 = refFreqCSI_RS_r16_;
      measResultList_r16 = measResultList_r16_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public MeasResult2NR_r16 (
      MeasResultListNR measResultList_r16_
   ) {
      super();
      measResultList_r16 = measResultList_r16_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public MeasResult2NR_r16 (long ssbFrequency_r16_,
      long refFreqCSI_RS_r16_,
      MeasResultListNR measResultList_r16_
   ) {
      super();
      ssbFrequency_r16 = new ARFCN_ValueNR (ssbFrequency_r16_);
      refFreqCSI_RS_r16 = new ARFCN_ValueNR (refFreqCSI_RS_r16_);
      measResultList_r16 = measResultList_r16_;
   }

   public void init () {
      ssbFrequency_r16 = null;
      refFreqCSI_RS_r16 = null;
      measResultList_r16 = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return ssbFrequency_r16;
         case 1: return refFreqCSI_RS_r16;
         case 2: return measResultList_r16;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "ssbFrequency-r16";
         case 1: return "refFreqCSI-RS-r16";
         case 2: return "measResultList-r16";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean ssbFrequency_r16Present = buffer.decodeBit ("ssbFrequency_r16Present");
      boolean refFreqCSI_RS_r16Present = buffer.decodeBit ("refFreqCSI_RS_r16Present");

      // decode ssbFrequency_r16

      if (ssbFrequency_r16Present) {
         buffer.getContext().eventDispatcher.startElement("ssbFrequency_r16", -1);

         ssbFrequency_r16 = new ARFCN_ValueNR();
         ssbFrequency_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ssbFrequency_r16", -1);
      }
      else {
         ssbFrequency_r16 = null;
      }

      // decode refFreqCSI_RS_r16

      if (refFreqCSI_RS_r16Present) {
         buffer.getContext().eventDispatcher.startElement("refFreqCSI_RS_r16", -1);

         refFreqCSI_RS_r16 = new ARFCN_ValueNR();
         refFreqCSI_RS_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("refFreqCSI_RS_r16", -1);
      }
      else {
         refFreqCSI_RS_r16 = null;
      }

      // decode measResultList_r16

      buffer.getContext().eventDispatcher.startElement("measResultList_r16", -1);

      measResultList_r16 = new MeasResultListNR();
      measResultList_r16.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("measResultList_r16", -1);

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (ssbFrequency_r16 != null) ssbFrequency_r16.print (_sb, "ssbFrequency_r16", _level+1);
      if (refFreqCSI_RS_r16 != null) refFreqCSI_RS_r16.print (_sb, "refFreqCSI_RS_r16", _level+1);
      if (measResultList_r16 != null) measResultList_r16.print (_sb, "measResultList_r16", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
