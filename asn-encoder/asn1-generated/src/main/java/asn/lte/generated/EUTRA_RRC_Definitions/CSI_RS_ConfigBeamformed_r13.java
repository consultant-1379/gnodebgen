/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class CSI_RS_ConfigBeamformed_r13 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CSI-RS-ConfigBeamformed-r13";
   }

   public CSI_RS_ConfigBeamformed_r13_csi_RS_ConfigNZPIdListExt_r13 csi_RS_ConfigNZPIdListExt_r13;  // optional
   public CSI_RS_ConfigBeamformed_r13_csi_IM_ConfigIdList_r13 csi_IM_ConfigIdList_r13;  // optional
   public CSI_RS_ConfigBeamformed_r13_p_C_AndCBSR_PerResourceConfigList_r13 p_C_AndCBSR_PerResourceConfigList_r13;  // optional
   public CSI_RS_ConfigBeamformed_r13_ace_For4Tx_PerResourceConfigList_r13 ace_For4Tx_PerResourceConfigList_r13;  // optional
   public CSI_RS_ConfigBeamformed_r13_alternativeCodebookEnabledBeamformed_r13 alternativeCodebookEnabledBeamformed_r13 = null;  // optional
   public CSI_RS_ConfigBeamformed_r13_channelMeasRestriction_r13 channelMeasRestriction_r13 = null;  // optional

   public CSI_RS_ConfigBeamformed_r13 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CSI_RS_ConfigBeamformed_r13 (
      CSI_RS_ConfigBeamformed_r13_csi_RS_ConfigNZPIdListExt_r13 csi_RS_ConfigNZPIdListExt_r13_,
      CSI_RS_ConfigBeamformed_r13_csi_IM_ConfigIdList_r13 csi_IM_ConfigIdList_r13_,
      CSI_RS_ConfigBeamformed_r13_p_C_AndCBSR_PerResourceConfigList_r13 p_C_AndCBSR_PerResourceConfigList_r13_,
      CSI_RS_ConfigBeamformed_r13_ace_For4Tx_PerResourceConfigList_r13 ace_For4Tx_PerResourceConfigList_r13_,
      CSI_RS_ConfigBeamformed_r13_alternativeCodebookEnabledBeamformed_r13 alternativeCodebookEnabledBeamformed_r13_,
      CSI_RS_ConfigBeamformed_r13_channelMeasRestriction_r13 channelMeasRestriction_r13_
   ) {
      super();
      csi_RS_ConfigNZPIdListExt_r13 = csi_RS_ConfigNZPIdListExt_r13_;
      csi_IM_ConfigIdList_r13 = csi_IM_ConfigIdList_r13_;
      p_C_AndCBSR_PerResourceConfigList_r13 = p_C_AndCBSR_PerResourceConfigList_r13_;
      ace_For4Tx_PerResourceConfigList_r13 = ace_For4Tx_PerResourceConfigList_r13_;
      alternativeCodebookEnabledBeamformed_r13 = alternativeCodebookEnabledBeamformed_r13_;
      channelMeasRestriction_r13 = channelMeasRestriction_r13_;
   }

   public void init () {
      csi_RS_ConfigNZPIdListExt_r13 = null;
      csi_IM_ConfigIdList_r13 = null;
      p_C_AndCBSR_PerResourceConfigList_r13 = null;
      ace_For4Tx_PerResourceConfigList_r13 = null;
      alternativeCodebookEnabledBeamformed_r13 = null;
      channelMeasRestriction_r13 = null;
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return csi_RS_ConfigNZPIdListExt_r13;
         case 1: return csi_IM_ConfigIdList_r13;
         case 2: return p_C_AndCBSR_PerResourceConfigList_r13;
         case 3: return ace_For4Tx_PerResourceConfigList_r13;
         case 4: return alternativeCodebookEnabledBeamformed_r13;
         case 5: return channelMeasRestriction_r13;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "csi-RS-ConfigNZPIdListExt-r13";
         case 1: return "csi-IM-ConfigIdList-r13";
         case 2: return "p-C-AndCBSR-PerResourceConfigList-r13";
         case 3: return "ace-For4Tx-PerResourceConfigList-r13";
         case 4: return "alternativeCodebookEnabledBeamformed-r13";
         case 5: return "channelMeasRestriction-r13";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean csi_RS_ConfigNZPIdListExt_r13Present = buffer.decodeBit ("csi_RS_ConfigNZPIdListExt_r13Present");
      boolean csi_IM_ConfigIdList_r13Present = buffer.decodeBit ("csi_IM_ConfigIdList_r13Present");
      boolean p_C_AndCBSR_PerResourceConfigList_r13Present = buffer.decodeBit ("p_C_AndCBSR_PerResourceConfigList_r13Present");
      boolean ace_For4Tx_PerResourceConfigList_r13Present = buffer.decodeBit ("ace_For4Tx_PerResourceConfigList_r13Present");
      boolean alternativeCodebookEnabledBeamformed_r13Present = buffer.decodeBit ("alternativeCodebookEnabledBeamformed_r13Present");
      boolean channelMeasRestriction_r13Present = buffer.decodeBit ("channelMeasRestriction_r13Present");

      // decode csi_RS_ConfigNZPIdListExt_r13

      if (csi_RS_ConfigNZPIdListExt_r13Present) {
         buffer.getContext().eventDispatcher.startElement("csi_RS_ConfigNZPIdListExt_r13", -1);

         csi_RS_ConfigNZPIdListExt_r13 = new CSI_RS_ConfigBeamformed_r13_csi_RS_ConfigNZPIdListExt_r13();
         csi_RS_ConfigNZPIdListExt_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("csi_RS_ConfigNZPIdListExt_r13", -1);
      }
      else {
         csi_RS_ConfigNZPIdListExt_r13 = null;
      }

      // decode csi_IM_ConfigIdList_r13

      if (csi_IM_ConfigIdList_r13Present) {
         buffer.getContext().eventDispatcher.startElement("csi_IM_ConfigIdList_r13", -1);

         csi_IM_ConfigIdList_r13 = new CSI_RS_ConfigBeamformed_r13_csi_IM_ConfigIdList_r13();
         csi_IM_ConfigIdList_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("csi_IM_ConfigIdList_r13", -1);
      }
      else {
         csi_IM_ConfigIdList_r13 = null;
      }

      // decode p_C_AndCBSR_PerResourceConfigList_r13

      if (p_C_AndCBSR_PerResourceConfigList_r13Present) {
         buffer.getContext().eventDispatcher.startElement("p_C_AndCBSR_PerResourceConfigList_r13", -1);

         p_C_AndCBSR_PerResourceConfigList_r13 = new CSI_RS_ConfigBeamformed_r13_p_C_AndCBSR_PerResourceConfigList_r13();
         p_C_AndCBSR_PerResourceConfigList_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("p_C_AndCBSR_PerResourceConfigList_r13", -1);
      }
      else {
         p_C_AndCBSR_PerResourceConfigList_r13 = null;
      }

      // decode ace_For4Tx_PerResourceConfigList_r13

      if (ace_For4Tx_PerResourceConfigList_r13Present) {
         buffer.getContext().eventDispatcher.startElement("ace_For4Tx_PerResourceConfigList_r13", -1);

         ace_For4Tx_PerResourceConfigList_r13 = new CSI_RS_ConfigBeamformed_r13_ace_For4Tx_PerResourceConfigList_r13();
         ace_For4Tx_PerResourceConfigList_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ace_For4Tx_PerResourceConfigList_r13", -1);
      }
      else {
         ace_For4Tx_PerResourceConfigList_r13 = null;
      }

      // decode alternativeCodebookEnabledBeamformed_r13

      if (alternativeCodebookEnabledBeamformed_r13Present) {
         buffer.getContext().eventDispatcher.startElement("alternativeCodebookEnabledBeamformed_r13", -1);

         int tval = CSI_RS_ConfigBeamformed_r13_alternativeCodebookEnabledBeamformed_r13.decodeEnumValue (buffer);
         alternativeCodebookEnabledBeamformed_r13 = CSI_RS_ConfigBeamformed_r13_alternativeCodebookEnabledBeamformed_r13.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("alternativeCodebookEnabledBeamformed_r13", -1);
      }
      else {
         alternativeCodebookEnabledBeamformed_r13 = null;
      }

      // decode channelMeasRestriction_r13

      if (channelMeasRestriction_r13Present) {
         buffer.getContext().eventDispatcher.startElement("channelMeasRestriction_r13", -1);

         int tval = CSI_RS_ConfigBeamformed_r13_channelMeasRestriction_r13.decodeEnumValue (buffer);
         channelMeasRestriction_r13 = CSI_RS_ConfigBeamformed_r13_channelMeasRestriction_r13.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("channelMeasRestriction_r13", -1);
      }
      else {
         channelMeasRestriction_r13 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (csi_RS_ConfigNZPIdListExt_r13 != null) csi_RS_ConfigNZPIdListExt_r13.print (_sb, "csi_RS_ConfigNZPIdListExt_r13", _level+1);
      if (csi_IM_ConfigIdList_r13 != null) csi_IM_ConfigIdList_r13.print (_sb, "csi_IM_ConfigIdList_r13", _level+1);
      if (p_C_AndCBSR_PerResourceConfigList_r13 != null) p_C_AndCBSR_PerResourceConfigList_r13.print (_sb, "p_C_AndCBSR_PerResourceConfigList_r13", _level+1);
      if (ace_For4Tx_PerResourceConfigList_r13 != null) ace_For4Tx_PerResourceConfigList_r13.print (_sb, "ace_For4Tx_PerResourceConfigList_r13", _level+1);
      if (alternativeCodebookEnabledBeamformed_r13 != null) alternativeCodebookEnabledBeamformed_r13.print (_sb, "alternativeCodebookEnabledBeamformed_r13", _level+1);
      if (channelMeasRestriction_r13 != null) channelMeasRestriction_r13.print (_sb, "channelMeasRestriction_r13", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
