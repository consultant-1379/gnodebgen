/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class ModulationOrder extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ModulationOrder";
   }

   // Integer constants for switch-case
   public static final int _BPSK_HALFPI = 0;
   public static final int _BPSK = 1;
   public static final int _QPSK = 2;
   public static final int _QAM16 = 3;
   public static final int _QAM64 = 4;
   public static final int _QAM256 = 5;

   // Singleton instances of ModulationOrder
   protected static final ModulationOrder _bpsk_halfpi = new ModulationOrder(0);
   protected static final ModulationOrder _bpsk = new ModulationOrder(1);
   protected static final ModulationOrder _qpsk = new ModulationOrder(2);
   protected static final ModulationOrder _qam16 = new ModulationOrder(3);
   protected static final ModulationOrder _qam64 = new ModulationOrder(4);
   protected static final ModulationOrder _qam256 = new ModulationOrder(5);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    */
   protected ModulationOrder (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for bpsk_halfpi.
    */
   public static ModulationOrder bpsk_halfpi() {
      return _bpsk_halfpi;
   }

   /**
    * Singleton accessor method for bpsk.
    */
   public static ModulationOrder bpsk() {
      return _bpsk;
   }

   /**
    * Singleton accessor method for qpsk.
    */
   public static ModulationOrder qpsk() {
      return _qpsk;
   }

   /**
    * Singleton accessor method for qam16.
    */
   public static ModulationOrder qam16() {
      return _qam16;
   }

   /**
    * Singleton accessor method for qam64.
    */
   public static ModulationOrder qam64() {
      return _qam64;
   }

   /**
    * Singleton accessor method for qam256.
    */
   public static ModulationOrder qam256() {
      return _qam256;
   }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return ModulationOrder.valueOf( ModulationOrder.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static ModulationOrder valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 0: return bpsk_halfpi();
         case 1: return bpsk();
         case 2: return qpsk();
         case 3: return qam16();
         case 4: return qam64();
         case 5: return qam256();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      ui = (int) buffer.decodeConsWholeNumber (6);

      switch (ui) {
         case 0: ret =  0; break;
         case 1: ret =  1; break;
         case 2: ret =  2; break;
         case 3: ret =  3; break;
         case 4: ret =  4; break;
         case 5: ret =  5; break;
         default: throw new Asn1InvalidEnumException (ui);
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (ModulationOrder.valueOf(ret).toString());

      return ret;
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("bpsk-halfpi");
         case 1: return ("bpsk");
         case 2: return ("qpsk");
         case 3: return ("qam16");
         case 4: return ("qam64");
         case 5: return ("qam256");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
