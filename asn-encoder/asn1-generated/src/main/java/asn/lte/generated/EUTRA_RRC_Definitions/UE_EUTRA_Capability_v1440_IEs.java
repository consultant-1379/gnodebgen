/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class UE_EUTRA_Capability_v1440_IEs extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "UE-EUTRA-Capability-v1440-IEs";
   }

   public LWA_Parameters_v1440 lwa_Parameters_v1440;
   public MAC_Parameters_v1440 mac_Parameters_v1440;
   public UE_EUTRA_Capability_v1450_IEs nonCriticalExtension;  // optional

   public UE_EUTRA_Capability_v1440_IEs () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public UE_EUTRA_Capability_v1440_IEs (
      LWA_Parameters_v1440 lwa_Parameters_v1440_,
      MAC_Parameters_v1440 mac_Parameters_v1440_,
      UE_EUTRA_Capability_v1450_IEs nonCriticalExtension_
   ) {
      super();
      lwa_Parameters_v1440 = lwa_Parameters_v1440_;
      mac_Parameters_v1440 = mac_Parameters_v1440_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public UE_EUTRA_Capability_v1440_IEs (
      LWA_Parameters_v1440 lwa_Parameters_v1440_,
      MAC_Parameters_v1440 mac_Parameters_v1440_
   ) {
      super();
      lwa_Parameters_v1440 = lwa_Parameters_v1440_;
      mac_Parameters_v1440 = mac_Parameters_v1440_;
   }

   public void init () {
      lwa_Parameters_v1440 = null;
      mac_Parameters_v1440 = null;
      nonCriticalExtension = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return lwa_Parameters_v1440;
         case 1: return mac_Parameters_v1440;
         case 2: return nonCriticalExtension;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "lwa-Parameters-v1440";
         case 1: return "mac-Parameters-v1440";
         case 2: return "nonCriticalExtension";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean nonCriticalExtensionPresent = buffer.decodeBit ("nonCriticalExtensionPresent");

      // decode lwa_Parameters_v1440

      buffer.getContext().eventDispatcher.startElement("lwa_Parameters_v1440", -1);

      lwa_Parameters_v1440 = new LWA_Parameters_v1440();
      lwa_Parameters_v1440.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("lwa_Parameters_v1440", -1);

      // decode mac_Parameters_v1440

      buffer.getContext().eventDispatcher.startElement("mac_Parameters_v1440", -1);

      mac_Parameters_v1440 = new MAC_Parameters_v1440();
      mac_Parameters_v1440.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("mac_Parameters_v1440", -1);

      // decode nonCriticalExtension

      if (nonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension = new UE_EUTRA_Capability_v1450_IEs();
         nonCriticalExtension.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }
      else {
         nonCriticalExtension = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (lwa_Parameters_v1440 != null) lwa_Parameters_v1440.print (_sb, "lwa_Parameters_v1440", _level+1);
      if (mac_Parameters_v1440 != null) mac_Parameters_v1440.print (_sb, "mac_Parameters_v1440", _level+1);
      if (nonCriticalExtension != null) nonCriticalExtension.print (_sb, "nonCriticalExtension", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
