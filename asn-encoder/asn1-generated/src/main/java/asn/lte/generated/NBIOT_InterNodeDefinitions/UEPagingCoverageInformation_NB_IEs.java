/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NBIOT_InterNodeDefinitions;

import com.objsys.asn1j.runtime.*;

public class UEPagingCoverageInformation_NB_IEs extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NBIOT_InterNodeDefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "UEPagingCoverageInformation-NB-IEs";
   }

   public Asn1Integer npdcch_NumRepetitionPaging_r13;  // optional
   public UEPagingCoverageInformation_NB_IEs_nonCriticalExtension nonCriticalExtension;  // optional

   public UEPagingCoverageInformation_NB_IEs () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public UEPagingCoverageInformation_NB_IEs (
      Asn1Integer npdcch_NumRepetitionPaging_r13_,
      UEPagingCoverageInformation_NB_IEs_nonCriticalExtension nonCriticalExtension_
   ) {
      super();
      npdcch_NumRepetitionPaging_r13 = npdcch_NumRepetitionPaging_r13_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public UEPagingCoverageInformation_NB_IEs (long npdcch_NumRepetitionPaging_r13_,
      UEPagingCoverageInformation_NB_IEs_nonCriticalExtension nonCriticalExtension_
   ) {
      super();
      npdcch_NumRepetitionPaging_r13 = new Asn1Integer (npdcch_NumRepetitionPaging_r13_);
      nonCriticalExtension = nonCriticalExtension_;
   }

   public void init () {
      npdcch_NumRepetitionPaging_r13 = null;
      nonCriticalExtension = null;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return npdcch_NumRepetitionPaging_r13;
         case 1: return nonCriticalExtension;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "npdcch-NumRepetitionPaging-r13";
         case 1: return "nonCriticalExtension";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean npdcch_NumRepetitionPaging_r13Present = buffer.decodeBit ("npdcch_NumRepetitionPaging_r13Present");
      boolean nonCriticalExtensionPresent = buffer.decodeBit ("nonCriticalExtensionPresent");

      // decode npdcch_NumRepetitionPaging_r13

      if (npdcch_NumRepetitionPaging_r13Present) {
         buffer.getContext().eventDispatcher.startElement("npdcch_NumRepetitionPaging_r13", -1);

         npdcch_NumRepetitionPaging_r13 = new Asn1Integer();
         npdcch_NumRepetitionPaging_r13.decode (buffer, 1, 2048);

         buffer.invokeCharacters(npdcch_NumRepetitionPaging_r13.toString());
         buffer.getContext().eventDispatcher.endElement("npdcch_NumRepetitionPaging_r13", -1);
      }
      else {
         npdcch_NumRepetitionPaging_r13 = null;
      }

      // decode nonCriticalExtension

      if (nonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension = new UEPagingCoverageInformation_NB_IEs_nonCriticalExtension();
         nonCriticalExtension.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }
      else {
         nonCriticalExtension = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (npdcch_NumRepetitionPaging_r13 != null) npdcch_NumRepetitionPaging_r13.print (_sb, "npdcch_NumRepetitionPaging_r13", _level+1);
      if (nonCriticalExtension != null) nonCriticalExtension.print (_sb, "nonCriticalExtension", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
