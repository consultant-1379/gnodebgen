/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class ReportConfigInterRAT extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ReportConfigInterRAT";
   }

   public ReportConfigInterRAT_triggerType triggerType;
   public Asn1Integer maxReportCells;
   public ReportInterval reportInterval = null;
   public ReportConfigInterRAT_reportAmount reportAmount = null;
   public boolean mV2ExtPresent;
   public ReportConfigInterRAT_si_RequestForHO_r9 si_RequestForHO_r9 = null;  // optional
   public boolean mV3ExtPresent;
   public ReportConfigInterRAT_reportQuantityUTRA_FDD_r10 reportQuantityUTRA_FDD_r10 = null;  // optional
   public boolean mV4ExtPresent;
   public Asn1Boolean includeLocationInfo_r11;  // optional
   public boolean mV5ExtPresent;
   public ReportConfigInterRAT_b2_Threshold1_v1250 b2_Threshold1_v1250;  // optional
   public boolean mV6ExtPresent;
   public ReportQuantityWLAN_r13 reportQuantityWLAN_r13;  // optional
   public boolean mV7ExtPresent;
   public Asn1Boolean reportAnyWLAN_r14;  // optional
   public boolean mV8ExtPresent;
   public ReportQuantityNR_r15 reportQuantityCellNR_r15;  // optional
   public Asn1Integer maxReportRS_Index_r15;  // optional
   public ReportQuantityNR_r15 reportQuantityRS_IndexNR_r15;  // optional
   public Asn1Boolean reportRS_IndexResultsNR;  // optional
   public ReportConfigInterRAT_reportSFTD_Meas_r15 reportSFTD_Meas_r15 = null;  // optional
   public Asn1OpenExt extElem1;

   public ReportConfigInterRAT () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ReportConfigInterRAT (
      ReportConfigInterRAT_triggerType triggerType_,
      Asn1Integer maxReportCells_,
      ReportInterval reportInterval_,
      ReportConfigInterRAT_reportAmount reportAmount_,
      ReportConfigInterRAT_si_RequestForHO_r9 si_RequestForHO_r9_,
      ReportConfigInterRAT_reportQuantityUTRA_FDD_r10 reportQuantityUTRA_FDD_r10_,
      Asn1Boolean includeLocationInfo_r11_,
      ReportConfigInterRAT_b2_Threshold1_v1250 b2_Threshold1_v1250_,
      ReportQuantityWLAN_r13 reportQuantityWLAN_r13_,
      Asn1Boolean reportAnyWLAN_r14_,
      ReportQuantityNR_r15 reportQuantityCellNR_r15_,
      Asn1Integer maxReportRS_Index_r15_,
      ReportQuantityNR_r15 reportQuantityRS_IndexNR_r15_,
      Asn1Boolean reportRS_IndexResultsNR_,
      ReportConfigInterRAT_reportSFTD_Meas_r15 reportSFTD_Meas_r15_
   ) {
      super();
      triggerType = triggerType_;
      maxReportCells = maxReportCells_;
      reportInterval = reportInterval_;
      reportAmount = reportAmount_;
      si_RequestForHO_r9 = si_RequestForHO_r9_;
      reportQuantityUTRA_FDD_r10 = reportQuantityUTRA_FDD_r10_;
      includeLocationInfo_r11 = includeLocationInfo_r11_;
      b2_Threshold1_v1250 = b2_Threshold1_v1250_;
      reportQuantityWLAN_r13 = reportQuantityWLAN_r13_;
      reportAnyWLAN_r14 = reportAnyWLAN_r14_;
      reportQuantityCellNR_r15 = reportQuantityCellNR_r15_;
      maxReportRS_Index_r15 = maxReportRS_Index_r15_;
      reportQuantityRS_IndexNR_r15 = reportQuantityRS_IndexNR_r15_;
      reportRS_IndexResultsNR = reportRS_IndexResultsNR_;
      reportSFTD_Meas_r15 = reportSFTD_Meas_r15_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public ReportConfigInterRAT (
      ReportConfigInterRAT_triggerType triggerType_,
      Asn1Integer maxReportCells_,
      ReportInterval reportInterval_,
      ReportConfigInterRAT_reportAmount reportAmount_
   ) {
      super();
      triggerType = triggerType_;
      maxReportCells = maxReportCells_;
      reportInterval = reportInterval_;
      reportAmount = reportAmount_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public ReportConfigInterRAT (ReportConfigInterRAT_triggerType triggerType_,
      long maxReportCells_,
      ReportInterval reportInterval_,
      ReportConfigInterRAT_reportAmount reportAmount_,
      ReportConfigInterRAT_si_RequestForHO_r9 si_RequestForHO_r9_,
      ReportConfigInterRAT_reportQuantityUTRA_FDD_r10 reportQuantityUTRA_FDD_r10_,
      boolean includeLocationInfo_r11_,
      ReportConfigInterRAT_b2_Threshold1_v1250 b2_Threshold1_v1250_,
      ReportQuantityWLAN_r13 reportQuantityWLAN_r13_,
      boolean reportAnyWLAN_r14_,
      ReportQuantityNR_r15 reportQuantityCellNR_r15_,
      long maxReportRS_Index_r15_,
      ReportQuantityNR_r15 reportQuantityRS_IndexNR_r15_,
      boolean reportRS_IndexResultsNR_,
      ReportConfigInterRAT_reportSFTD_Meas_r15 reportSFTD_Meas_r15_
   ) {
      super();
      triggerType = triggerType_;
      maxReportCells = new Asn1Integer (maxReportCells_);
      reportInterval = reportInterval_;
      reportAmount = reportAmount_;
      si_RequestForHO_r9 = si_RequestForHO_r9_;
      reportQuantityUTRA_FDD_r10 = reportQuantityUTRA_FDD_r10_;
      includeLocationInfo_r11 = new Asn1Boolean (includeLocationInfo_r11_);
      b2_Threshold1_v1250 = b2_Threshold1_v1250_;
      reportQuantityWLAN_r13 = reportQuantityWLAN_r13_;
      reportAnyWLAN_r14 = new Asn1Boolean (reportAnyWLAN_r14_);
      reportQuantityCellNR_r15 = reportQuantityCellNR_r15_;
      maxReportRS_Index_r15 = new Asn1Integer (maxReportRS_Index_r15_);
      reportQuantityRS_IndexNR_r15 = reportQuantityRS_IndexNR_r15_;
      reportRS_IndexResultsNR = new Asn1Boolean (reportRS_IndexResultsNR_);
      reportSFTD_Meas_r15 = reportSFTD_Meas_r15_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public ReportConfigInterRAT (
      ReportConfigInterRAT_triggerType triggerType_,
      long maxReportCells_,
      ReportInterval reportInterval_,
      ReportConfigInterRAT_reportAmount reportAmount_
   ) {
      super();
      triggerType = triggerType_;
      maxReportCells = new Asn1Integer (maxReportCells_);
      reportInterval = reportInterval_;
      reportAmount = reportAmount_;
   }

   public void init () {
      triggerType = null;
      maxReportCells = null;
      reportInterval = null;
      reportAmount = null;
      si_RequestForHO_r9 = null;
      reportQuantityUTRA_FDD_r10 = null;
      includeLocationInfo_r11 = null;
      b2_Threshold1_v1250 = null;
      reportQuantityWLAN_r13 = null;
      reportAnyWLAN_r14 = null;
      reportQuantityCellNR_r15 = null;
      maxReportRS_Index_r15 = null;
      reportQuantityRS_IndexNR_r15 = null;
      reportRS_IndexResultsNR = null;
      reportSFTD_Meas_r15 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 16; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return triggerType;
         case 1: return maxReportCells;
         case 2: return reportInterval;
         case 3: return reportAmount;
         case 4: return si_RequestForHO_r9;
         case 5: return reportQuantityUTRA_FDD_r10;
         case 6: return includeLocationInfo_r11;
         case 7: return b2_Threshold1_v1250;
         case 8: return reportQuantityWLAN_r13;
         case 9: return reportAnyWLAN_r14;
         case 10: return reportQuantityCellNR_r15;
         case 11: return maxReportRS_Index_r15;
         case 12: return reportQuantityRS_IndexNR_r15;
         case 13: return reportRS_IndexResultsNR;
         case 14: return reportSFTD_Meas_r15;
         case 15: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "triggerType";
         case 1: return "maxReportCells";
         case 2: return "reportInterval";
         case 3: return "reportAmount";
         case 4: return "si-RequestForHO-r9";
         case 5: return "reportQuantityUTRA-FDD-r10";
         case 6: return "includeLocationInfo-r11";
         case 7: return "b2-Threshold1-v1250";
         case 8: return "reportQuantityWLAN-r13";
         case 9: return "reportAnyWLAN-r14";
         case 10: return "reportQuantityCellNR-r15";
         case 11: return "maxReportRS-Index-r15";
         case 12: return "reportQuantityRS-IndexNR-r15";
         case 13: return "reportRS-IndexResultsNR";
         case 14: return "reportSFTD-Meas-r15";
         case 15: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      // decode triggerType

      buffer.getContext().eventDispatcher.startElement("triggerType", -1);

      triggerType = new ReportConfigInterRAT_triggerType();
      triggerType.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("triggerType", -1);

      // decode maxReportCells

      buffer.getContext().eventDispatcher.startElement("maxReportCells", -1);

      maxReportCells = new Asn1Integer();
      maxReportCells.decode (buffer, 1, 8);

      buffer.invokeCharacters(maxReportCells.toString());
      buffer.getContext().eventDispatcher.endElement("maxReportCells", -1);

      // decode reportInterval

      buffer.getContext().eventDispatcher.startElement("reportInterval", -1);

      {
         int tval = ReportInterval.decodeEnumValue (buffer);
         reportInterval = ReportInterval.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("reportInterval", -1);

      // decode reportAmount

      buffer.getContext().eventDispatcher.startElement("reportAmount", -1);

      {
         int tval = ReportConfigInterRAT_reportAmount.decodeEnumValue (buffer);
         reportAmount = ReportConfigInterRAT_reportAmount.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("reportAmount", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV4ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV5ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV6ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV7ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV8ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean si_RequestForHO_r9Present = buffer.decodeBit ("si_RequestForHO_r9Present");

            // decode si_RequestForHO_r9

            if (si_RequestForHO_r9Present) {
               buffer.getContext().eventDispatcher.startElement("si_RequestForHO_r9", -1);

               int tval = ReportConfigInterRAT_si_RequestForHO_r9.decodeEnumValue (buffer);
               si_RequestForHO_r9 = ReportConfigInterRAT_si_RequestForHO_r9.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("si_RequestForHO_r9", -1);
            }
            else {
               si_RequestForHO_r9 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean reportQuantityUTRA_FDD_r10Present = buffer.decodeBit ("reportQuantityUTRA_FDD_r10Present");

            // decode reportQuantityUTRA_FDD_r10

            if (reportQuantityUTRA_FDD_r10Present) {
               buffer.getContext().eventDispatcher.startElement("reportQuantityUTRA_FDD_r10", -1);

               int tval = ReportConfigInterRAT_reportQuantityUTRA_FDD_r10.decodeEnumValue (buffer);
               reportQuantityUTRA_FDD_r10 = ReportConfigInterRAT_reportQuantityUTRA_FDD_r10.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("reportQuantityUTRA_FDD_r10", -1);
            }
            else {
               reportQuantityUTRA_FDD_r10 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV4ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean includeLocationInfo_r11Present = buffer.decodeBit ("includeLocationInfo_r11Present");

            // decode includeLocationInfo_r11

            if (includeLocationInfo_r11Present) {
               buffer.getContext().eventDispatcher.startElement("includeLocationInfo_r11", -1);

               includeLocationInfo_r11 = new Asn1Boolean();
               includeLocationInfo_r11.decode (buffer);

               buffer.invokeCharacters(includeLocationInfo_r11.toString());
               buffer.getContext().eventDispatcher.endElement("includeLocationInfo_r11", -1);
            }
            else {
               includeLocationInfo_r11 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV5ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean b2_Threshold1_v1250Present = buffer.decodeBit ("b2_Threshold1_v1250Present");

            // decode b2_Threshold1_v1250

            if (b2_Threshold1_v1250Present) {
               buffer.getContext().eventDispatcher.startElement("b2_Threshold1_v1250", -1);

               b2_Threshold1_v1250 = new ReportConfigInterRAT_b2_Threshold1_v1250();
               b2_Threshold1_v1250.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("b2_Threshold1_v1250", -1);
            }
            else {
               b2_Threshold1_v1250 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV6ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean reportQuantityWLAN_r13Present = buffer.decodeBit ("reportQuantityWLAN_r13Present");

            // decode reportQuantityWLAN_r13

            if (reportQuantityWLAN_r13Present) {
               buffer.getContext().eventDispatcher.startElement("reportQuantityWLAN_r13", -1);

               reportQuantityWLAN_r13 = new ReportQuantityWLAN_r13();
               reportQuantityWLAN_r13.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("reportQuantityWLAN_r13", -1);
            }
            else {
               reportQuantityWLAN_r13 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV7ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean reportAnyWLAN_r14Present = buffer.decodeBit ("reportAnyWLAN_r14Present");

            // decode reportAnyWLAN_r14

            if (reportAnyWLAN_r14Present) {
               buffer.getContext().eventDispatcher.startElement("reportAnyWLAN_r14", -1);

               reportAnyWLAN_r14 = new Asn1Boolean();
               reportAnyWLAN_r14.decode (buffer);

               buffer.invokeCharacters(reportAnyWLAN_r14.toString());
               buffer.getContext().eventDispatcher.endElement("reportAnyWLAN_r14", -1);
            }
            else {
               reportAnyWLAN_r14 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV8ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean reportQuantityCellNR_r15Present = buffer.decodeBit ("reportQuantityCellNR_r15Present");

            boolean maxReportRS_Index_r15Present = buffer.decodeBit ("maxReportRS_Index_r15Present");

            boolean reportQuantityRS_IndexNR_r15Present = buffer.decodeBit ("reportQuantityRS_IndexNR_r15Present");

            boolean reportRS_IndexResultsNRPresent = buffer.decodeBit ("reportRS_IndexResultsNRPresent");

            boolean reportSFTD_Meas_r15Present = buffer.decodeBit ("reportSFTD_Meas_r15Present");

            // decode reportQuantityCellNR_r15

            if (reportQuantityCellNR_r15Present) {
               buffer.getContext().eventDispatcher.startElement("reportQuantityCellNR_r15", -1);

               reportQuantityCellNR_r15 = new ReportQuantityNR_r15();
               reportQuantityCellNR_r15.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("reportQuantityCellNR_r15", -1);
            }
            else {
               reportQuantityCellNR_r15 = null;
            }

            // decode maxReportRS_Index_r15

            if (maxReportRS_Index_r15Present) {
               buffer.getContext().eventDispatcher.startElement("maxReportRS_Index_r15", -1);

               maxReportRS_Index_r15 = new Asn1Integer();
               maxReportRS_Index_r15.decode (buffer, 0, 32);

               buffer.invokeCharacters(maxReportRS_Index_r15.toString());
               buffer.getContext().eventDispatcher.endElement("maxReportRS_Index_r15", -1);
            }
            else {
               maxReportRS_Index_r15 = null;
            }

            // decode reportQuantityRS_IndexNR_r15

            if (reportQuantityRS_IndexNR_r15Present) {
               buffer.getContext().eventDispatcher.startElement("reportQuantityRS_IndexNR_r15", -1);

               reportQuantityRS_IndexNR_r15 = new ReportQuantityNR_r15();
               reportQuantityRS_IndexNR_r15.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("reportQuantityRS_IndexNR_r15", -1);
            }
            else {
               reportQuantityRS_IndexNR_r15 = null;
            }

            // decode reportRS_IndexResultsNR

            if (reportRS_IndexResultsNRPresent) {
               buffer.getContext().eventDispatcher.startElement("reportRS_IndexResultsNR", -1);

               reportRS_IndexResultsNR = new Asn1Boolean();
               reportRS_IndexResultsNR.decode (buffer);

               buffer.invokeCharacters(reportRS_IndexResultsNR.toString());
               buffer.getContext().eventDispatcher.endElement("reportRS_IndexResultsNR", -1);
            }
            else {
               reportRS_IndexResultsNR = null;
            }

            // decode reportSFTD_Meas_r15

            if (reportSFTD_Meas_r15Present) {
               buffer.getContext().eventDispatcher.startElement("reportSFTD_Meas_r15", -1);

               int tval = ReportConfigInterRAT_reportSFTD_Meas_r15.decodeEnumValue (buffer);
               reportSFTD_Meas_r15 = ReportConfigInterRAT_reportSFTD_Meas_r15.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("reportSFTD_Meas_r15", -1);
            }
            else {
               reportSFTD_Meas_r15 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (triggerType != null) triggerType.print (_sb, "triggerType", _level+1);
      if (maxReportCells != null) maxReportCells.print (_sb, "maxReportCells", _level+1);
      if (reportInterval != null) reportInterval.print (_sb, "reportInterval", _level+1);
      if (reportAmount != null) reportAmount.print (_sb, "reportAmount", _level+1);
      if (si_RequestForHO_r9 != null) si_RequestForHO_r9.print (_sb, "si_RequestForHO_r9", _level+1);
      if (reportQuantityUTRA_FDD_r10 != null) reportQuantityUTRA_FDD_r10.print (_sb, "reportQuantityUTRA_FDD_r10", _level+1);
      if (includeLocationInfo_r11 != null) includeLocationInfo_r11.print (_sb, "includeLocationInfo_r11", _level+1);
      if (b2_Threshold1_v1250 != null) b2_Threshold1_v1250.print (_sb, "b2_Threshold1_v1250", _level+1);
      if (reportQuantityWLAN_r13 != null) reportQuantityWLAN_r13.print (_sb, "reportQuantityWLAN_r13", _level+1);
      if (reportAnyWLAN_r14 != null) reportAnyWLAN_r14.print (_sb, "reportAnyWLAN_r14", _level+1);
      if (reportQuantityCellNR_r15 != null) reportQuantityCellNR_r15.print (_sb, "reportQuantityCellNR_r15", _level+1);
      if (maxReportRS_Index_r15 != null) maxReportRS_Index_r15.print (_sb, "maxReportRS_Index_r15", _level+1);
      if (reportQuantityRS_IndexNR_r15 != null) reportQuantityRS_IndexNR_r15.print (_sb, "reportQuantityRS_IndexNR_r15", _level+1);
      if (reportRS_IndexResultsNR != null) reportRS_IndexResultsNR.print (_sb, "reportRS_IndexResultsNR", _level+1);
      if (reportSFTD_Meas_r15 != null) reportSFTD_Meas_r15.print (_sb, "reportSFTD_Meas_r15", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
