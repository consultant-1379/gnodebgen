/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class UplinkPowerControlDedicatedSCell_r10 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "UplinkPowerControlDedicatedSCell-r10";
   }

   public Asn1Integer p0_UE_PUSCH_r10;
   public UplinkPowerControlDedicatedSCell_r10_deltaMCS_Enabled_r10 deltaMCS_Enabled_r10 = null;
   public Asn1Boolean accumulationEnabled_r10;
   public Asn1Integer pSRS_Offset_r10;
   public Asn1Integer pSRS_OffsetAp_r10;  // optional
   public FilterCoefficient filterCoefficient_r10 = null;  // default = FilterCoefficient.fc4()
   public UplinkPowerControlDedicatedSCell_r10_pathlossReferenceLinking_r10 pathlossReferenceLinking_r10 = null;

   public UplinkPowerControlDedicatedSCell_r10 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public UplinkPowerControlDedicatedSCell_r10 (
      Asn1Integer p0_UE_PUSCH_r10_,
      UplinkPowerControlDedicatedSCell_r10_deltaMCS_Enabled_r10 deltaMCS_Enabled_r10_,
      Asn1Boolean accumulationEnabled_r10_,
      Asn1Integer pSRS_Offset_r10_,
      Asn1Integer pSRS_OffsetAp_r10_,
      FilterCoefficient filterCoefficient_r10_,
      UplinkPowerControlDedicatedSCell_r10_pathlossReferenceLinking_r10 pathlossReferenceLinking_r10_
   ) {
      super();
      p0_UE_PUSCH_r10 = p0_UE_PUSCH_r10_;
      deltaMCS_Enabled_r10 = deltaMCS_Enabled_r10_;
      accumulationEnabled_r10 = accumulationEnabled_r10_;
      pSRS_Offset_r10 = pSRS_Offset_r10_;
      pSRS_OffsetAp_r10 = pSRS_OffsetAp_r10_;
      filterCoefficient_r10 = filterCoefficient_r10_;
      pathlossReferenceLinking_r10 = pathlossReferenceLinking_r10_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public UplinkPowerControlDedicatedSCell_r10 (
      Asn1Integer p0_UE_PUSCH_r10_,
      UplinkPowerControlDedicatedSCell_r10_deltaMCS_Enabled_r10 deltaMCS_Enabled_r10_,
      Asn1Boolean accumulationEnabled_r10_,
      Asn1Integer pSRS_Offset_r10_,
      UplinkPowerControlDedicatedSCell_r10_pathlossReferenceLinking_r10 pathlossReferenceLinking_r10_
   ) {
      super();
      p0_UE_PUSCH_r10 = p0_UE_PUSCH_r10_;
      deltaMCS_Enabled_r10 = deltaMCS_Enabled_r10_;
      accumulationEnabled_r10 = accumulationEnabled_r10_;
      pSRS_Offset_r10 = pSRS_Offset_r10_;
      filterCoefficient_r10 = FilterCoefficient.fc4();
      pathlossReferenceLinking_r10 = pathlossReferenceLinking_r10_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public UplinkPowerControlDedicatedSCell_r10 (long p0_UE_PUSCH_r10_,
      UplinkPowerControlDedicatedSCell_r10_deltaMCS_Enabled_r10 deltaMCS_Enabled_r10_,
      boolean accumulationEnabled_r10_,
      long pSRS_Offset_r10_,
      long pSRS_OffsetAp_r10_,
      FilterCoefficient filterCoefficient_r10_,
      UplinkPowerControlDedicatedSCell_r10_pathlossReferenceLinking_r10 pathlossReferenceLinking_r10_
   ) {
      super();
      p0_UE_PUSCH_r10 = new Asn1Integer (p0_UE_PUSCH_r10_);
      deltaMCS_Enabled_r10 = deltaMCS_Enabled_r10_;
      accumulationEnabled_r10 = new Asn1Boolean (accumulationEnabled_r10_);
      pSRS_Offset_r10 = new Asn1Integer (pSRS_Offset_r10_);
      pSRS_OffsetAp_r10 = new Asn1Integer (pSRS_OffsetAp_r10_);
      filterCoefficient_r10 = filterCoefficient_r10_;
      pathlossReferenceLinking_r10 = pathlossReferenceLinking_r10_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public UplinkPowerControlDedicatedSCell_r10 (
      long p0_UE_PUSCH_r10_,
      UplinkPowerControlDedicatedSCell_r10_deltaMCS_Enabled_r10 deltaMCS_Enabled_r10_,
      boolean accumulationEnabled_r10_,
      long pSRS_Offset_r10_,
      UplinkPowerControlDedicatedSCell_r10_pathlossReferenceLinking_r10 pathlossReferenceLinking_r10_
   ) {
      super();
      p0_UE_PUSCH_r10 = new Asn1Integer (p0_UE_PUSCH_r10_);
      deltaMCS_Enabled_r10 = deltaMCS_Enabled_r10_;
      accumulationEnabled_r10 = new Asn1Boolean (accumulationEnabled_r10_);
      pSRS_Offset_r10 = new Asn1Integer (pSRS_Offset_r10_);
      filterCoefficient_r10 = FilterCoefficient.fc4();
      pathlossReferenceLinking_r10 = pathlossReferenceLinking_r10_;
   }

   public void init () {
      p0_UE_PUSCH_r10 = null;
      deltaMCS_Enabled_r10 = null;
      accumulationEnabled_r10 = null;
      pSRS_Offset_r10 = null;
      pSRS_OffsetAp_r10 = null;
      filterCoefficient_r10 = FilterCoefficient.fc4();
      pathlossReferenceLinking_r10 = null;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return p0_UE_PUSCH_r10;
         case 1: return deltaMCS_Enabled_r10;
         case 2: return accumulationEnabled_r10;
         case 3: return pSRS_Offset_r10;
         case 4: return pSRS_OffsetAp_r10;
         case 5: return filterCoefficient_r10;
         case 6: return pathlossReferenceLinking_r10;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "p0-UE-PUSCH-r10";
         case 1: return "deltaMCS-Enabled-r10";
         case 2: return "accumulationEnabled-r10";
         case 3: return "pSRS-Offset-r10";
         case 4: return "pSRS-OffsetAp-r10";
         case 5: return "filterCoefficient-r10";
         case 6: return "pathlossReferenceLinking-r10";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean pSRS_OffsetAp_r10Present = buffer.decodeBit ("pSRS_OffsetAp_r10Present");
      boolean filterCoefficient_r10Present = buffer.decodeBit ("filterCoefficient_r10Present");

      // decode p0_UE_PUSCH_r10

      buffer.getContext().eventDispatcher.startElement("p0_UE_PUSCH_r10", -1);

      p0_UE_PUSCH_r10 = new Asn1Integer();
      p0_UE_PUSCH_r10.decode (buffer, -8, 7);

      buffer.invokeCharacters(p0_UE_PUSCH_r10.toString());
      buffer.getContext().eventDispatcher.endElement("p0_UE_PUSCH_r10", -1);

      // decode deltaMCS_Enabled_r10

      buffer.getContext().eventDispatcher.startElement("deltaMCS_Enabled_r10", -1);

      {
         int tval = UplinkPowerControlDedicatedSCell_r10_deltaMCS_Enabled_r10.decodeEnumValue (buffer);
         deltaMCS_Enabled_r10 = UplinkPowerControlDedicatedSCell_r10_deltaMCS_Enabled_r10.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("deltaMCS_Enabled_r10", -1);

      // decode accumulationEnabled_r10

      buffer.getContext().eventDispatcher.startElement("accumulationEnabled_r10", -1);

      accumulationEnabled_r10 = new Asn1Boolean();
      accumulationEnabled_r10.decode (buffer);

      buffer.invokeCharacters(accumulationEnabled_r10.toString());
      buffer.getContext().eventDispatcher.endElement("accumulationEnabled_r10", -1);

      // decode pSRS_Offset_r10

      buffer.getContext().eventDispatcher.startElement("pSRS_Offset_r10", -1);

      pSRS_Offset_r10 = new Asn1Integer();
      pSRS_Offset_r10.decode (buffer, 0, 15);

      buffer.invokeCharacters(pSRS_Offset_r10.toString());
      buffer.getContext().eventDispatcher.endElement("pSRS_Offset_r10", -1);

      // decode pSRS_OffsetAp_r10

      if (pSRS_OffsetAp_r10Present) {
         buffer.getContext().eventDispatcher.startElement("pSRS_OffsetAp_r10", -1);

         pSRS_OffsetAp_r10 = new Asn1Integer();
         pSRS_OffsetAp_r10.decode (buffer, 0, 15);

         buffer.invokeCharacters(pSRS_OffsetAp_r10.toString());
         buffer.getContext().eventDispatcher.endElement("pSRS_OffsetAp_r10", -1);
      }
      else {
         pSRS_OffsetAp_r10 = null;
      }

      // decode filterCoefficient_r10

      if (filterCoefficient_r10Present) {
         buffer.getContext().eventDispatcher.startElement("filterCoefficient_r10", -1);

         int tval = FilterCoefficient.decodeEnumValue (buffer);
         filterCoefficient_r10 = FilterCoefficient.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("filterCoefficient_r10", -1);
      }
      else {
         filterCoefficient_r10 = FilterCoefficient.fc4();
      }

      // decode pathlossReferenceLinking_r10

      buffer.getContext().eventDispatcher.startElement("pathlossReferenceLinking_r10", -1);

      {
         int tval = UplinkPowerControlDedicatedSCell_r10_pathlossReferenceLinking_r10.decodeEnumValue (buffer);
         pathlossReferenceLinking_r10 = UplinkPowerControlDedicatedSCell_r10_pathlossReferenceLinking_r10.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("pathlossReferenceLinking_r10", -1);

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (p0_UE_PUSCH_r10 != null) p0_UE_PUSCH_r10.print (_sb, "p0_UE_PUSCH_r10", _level+1);
      if (deltaMCS_Enabled_r10 != null) deltaMCS_Enabled_r10.print (_sb, "deltaMCS_Enabled_r10", _level+1);
      if (accumulationEnabled_r10 != null) accumulationEnabled_r10.print (_sb, "accumulationEnabled_r10", _level+1);
      if (pSRS_Offset_r10 != null) pSRS_Offset_r10.print (_sb, "pSRS_Offset_r10", _level+1);
      if (pSRS_OffsetAp_r10 != null) pSRS_OffsetAp_r10.print (_sb, "pSRS_OffsetAp_r10", _level+1);
      if (filterCoefficient_r10 != null) filterCoefficient_r10.print (_sb, "filterCoefficient_r10", _level+1);
      if (pathlossReferenceLinking_r10 != null) pathlossReferenceLinking_r10.print (_sb, "pathlossReferenceLinking_r10", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
