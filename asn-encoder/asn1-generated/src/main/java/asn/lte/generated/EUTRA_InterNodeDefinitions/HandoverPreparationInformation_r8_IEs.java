/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_InterNodeDefinitions;

import com.objsys.asn1j.runtime.*;
import asn.lte.generated.EUTRA_RRC_Definitions.UE_CapabilityRAT_ContainerList;

public class HandoverPreparationInformation_r8_IEs extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_InterNodeDefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "HandoverPreparationInformation-r8-IEs";
   }

   public UE_CapabilityRAT_ContainerList ue_RadioAccessCapabilityInfo;
   public AS_Config as_Config;  // optional
   public RRM_Config rrm_Config;  // optional
   public AS_Context as_Context;  // optional
   public HandoverPreparationInformation_v920_IEs nonCriticalExtension;  // optional

   public HandoverPreparationInformation_r8_IEs () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public HandoverPreparationInformation_r8_IEs (
      UE_CapabilityRAT_ContainerList ue_RadioAccessCapabilityInfo_,
      AS_Config as_Config_,
      RRM_Config rrm_Config_,
      AS_Context as_Context_,
      HandoverPreparationInformation_v920_IEs nonCriticalExtension_
   ) {
      super();
      ue_RadioAccessCapabilityInfo = ue_RadioAccessCapabilityInfo_;
      as_Config = as_Config_;
      rrm_Config = rrm_Config_;
      as_Context = as_Context_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public HandoverPreparationInformation_r8_IEs (
      UE_CapabilityRAT_ContainerList ue_RadioAccessCapabilityInfo_
   ) {
      super();
      ue_RadioAccessCapabilityInfo = ue_RadioAccessCapabilityInfo_;
   }

   public void init () {
      ue_RadioAccessCapabilityInfo = null;
      as_Config = null;
      rrm_Config = null;
      as_Context = null;
      nonCriticalExtension = null;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return ue_RadioAccessCapabilityInfo;
         case 1: return as_Config;
         case 2: return rrm_Config;
         case 3: return as_Context;
         case 4: return nonCriticalExtension;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "ue-RadioAccessCapabilityInfo";
         case 1: return "as-Config";
         case 2: return "rrm-Config";
         case 3: return "as-Context";
         case 4: return "nonCriticalExtension";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean as_ConfigPresent = buffer.decodeBit ("as_ConfigPresent");
      boolean rrm_ConfigPresent = buffer.decodeBit ("rrm_ConfigPresent");
      boolean as_ContextPresent = buffer.decodeBit ("as_ContextPresent");
      boolean nonCriticalExtensionPresent = buffer.decodeBit ("nonCriticalExtensionPresent");

      // decode ue_RadioAccessCapabilityInfo

      buffer.getContext().eventDispatcher.startElement("ue_RadioAccessCapabilityInfo", -1);

      ue_RadioAccessCapabilityInfo = new UE_CapabilityRAT_ContainerList();
      ue_RadioAccessCapabilityInfo.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("ue_RadioAccessCapabilityInfo", -1);

      // decode as_Config

      if (as_ConfigPresent) {
         buffer.getContext().eventDispatcher.startElement("as_Config", -1);

         as_Config = new AS_Config();
         as_Config.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("as_Config", -1);
      }
      else {
         as_Config = null;
      }

      // decode rrm_Config

      if (rrm_ConfigPresent) {
         buffer.getContext().eventDispatcher.startElement("rrm_Config", -1);

         rrm_Config = new RRM_Config();
         rrm_Config.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("rrm_Config", -1);
      }
      else {
         rrm_Config = null;
      }

      // decode as_Context

      if (as_ContextPresent) {
         buffer.getContext().eventDispatcher.startElement("as_Context", -1);

         as_Context = new AS_Context();
         as_Context.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("as_Context", -1);
      }
      else {
         as_Context = null;
      }

      // decode nonCriticalExtension

      if (nonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension = new HandoverPreparationInformation_v920_IEs();
         nonCriticalExtension.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }
      else {
         nonCriticalExtension = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (ue_RadioAccessCapabilityInfo != null) ue_RadioAccessCapabilityInfo.print (_sb, "ue_RadioAccessCapabilityInfo", _level+1);
      if (as_Config != null) as_Config.print (_sb, "as_Config", _level+1);
      if (rrm_Config != null) rrm_Config.print (_sb, "rrm_Config", _level+1);
      if (as_Context != null) as_Context.print (_sb, "as_Context", _level+1);
      if (nonCriticalExtension != null) nonCriticalExtension.print (_sb, "nonCriticalExtension", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
