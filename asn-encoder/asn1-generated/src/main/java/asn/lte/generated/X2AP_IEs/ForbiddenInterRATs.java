/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.X2AP_IEs;

import com.objsys.asn1j.runtime.*;

public class ForbiddenInterRATs extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_X2AP_IEsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ForbiddenInterRATs";
   }

   // Integer constants for switch-case
   public static final int _ALL = 0;
   public static final int _GERAN = 1;
   public static final int _UTRAN = 2;
   public static final int _CDMA2000 = 3;
   public static final int _GERANANDUTRAN = 4;
   public static final int _CDMA2000ANDUTRAN = 5;

   // Singleton instances of ForbiddenInterRATs
   protected static final ForbiddenInterRATs _all = new ForbiddenInterRATs(0);
   protected static final ForbiddenInterRATs _geran = new ForbiddenInterRATs(1);
   protected static final ForbiddenInterRATs _utran = new ForbiddenInterRATs(2);
   protected static final ForbiddenInterRATs _cdma2000 = new ForbiddenInterRATs(3);
   protected static final ForbiddenInterRATs _geranandutran = new ForbiddenInterRATs(4);
   protected static final ForbiddenInterRATs _cdma2000andutran = new ForbiddenInterRATs(5);
   private static ForbiddenInterRATs __undefined = new ForbiddenInterRATs(-999);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    */
   protected ForbiddenInterRATs (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for all.
    */
   public static ForbiddenInterRATs all() {
      return _all;
   }

   /**
    * Singleton accessor method for geran.
    */
   public static ForbiddenInterRATs geran() {
      return _geran;
   }

   /**
    * Singleton accessor method for utran.
    */
   public static ForbiddenInterRATs utran() {
      return _utran;
   }

   /**
    * Singleton accessor method for cdma2000.
    */
   public static ForbiddenInterRATs cdma2000() {
      return _cdma2000;
   }

   /**
    * Singleton accessor method for geranandutran.
    */
   public static ForbiddenInterRATs geranandutran() {
      return _geranandutran;
   }

   /**
    * Singleton accessor method for cdma2000andutran.
    */
   public static ForbiddenInterRATs cdma2000andutran() {
      return _cdma2000andutran;
   }

   /** Undefined value. */
   protected static ForbiddenInterRATs __undefined_() { return __undefined; }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return ForbiddenInterRATs.valueOf( ForbiddenInterRATs.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static ForbiddenInterRATs valueOf (int _value)
   {
      switch ((int)_value) {
         case 0: return all();
         case 1: return geran();
         case 2: return utran();
         case 3: return cdma2000();
         case 4: return geranandutran();
         case 5: return cdma2000andutran();
         default: return __undefined_();
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      boolean extbit = buffer.decodeBit ("extbit");

      if (extbit) {
         ui = buffer.decodeSmallNonNegWholeNumber ();

         switch (ui) {
            case 0: ret = 4; break;
            case 1: ret = 5; break;
            default: ret = 0x7fffffff; break;
         }
      }
      else {
         ui = (int) buffer.decodeConsWholeNumber (4);

         switch (ui) {
            case 0: ret =  0; break;
            case 1: ret =  1; break;
            case 2: ret =  2; break;
            case 3: ret =  3; break;
            default: throw new Asn1InvalidEnumException (ui);
         }
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (ForbiddenInterRATs.valueOf(ret).toString());

      return ret;
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("all");
         case 1: return ("geran");
         case 2: return ("utran");
         case 3: return ("cdma2000");
         case 4: return ("geranandutran");
         case 5: return ("cdma2000andutran");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
