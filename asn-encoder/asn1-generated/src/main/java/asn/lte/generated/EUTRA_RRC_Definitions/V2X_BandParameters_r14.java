/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class V2X_BandParameters_r14 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "V2X-BandParameters-r14";
   }

   public FreqBandIndicator_r11 v2x_FreqBandEUTRA_r14;
   public BandParametersTxSL_r14 bandParametersTxSL_r14;  // optional
   public BandParametersRxSL_r14 bandParametersRxSL_r14;  // optional

   public V2X_BandParameters_r14 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public V2X_BandParameters_r14 (
      FreqBandIndicator_r11 v2x_FreqBandEUTRA_r14_,
      BandParametersTxSL_r14 bandParametersTxSL_r14_,
      BandParametersRxSL_r14 bandParametersRxSL_r14_
   ) {
      super();
      v2x_FreqBandEUTRA_r14 = v2x_FreqBandEUTRA_r14_;
      bandParametersTxSL_r14 = bandParametersTxSL_r14_;
      bandParametersRxSL_r14 = bandParametersRxSL_r14_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public V2X_BandParameters_r14 (
      FreqBandIndicator_r11 v2x_FreqBandEUTRA_r14_
   ) {
      super();
      v2x_FreqBandEUTRA_r14 = v2x_FreqBandEUTRA_r14_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public V2X_BandParameters_r14 (long v2x_FreqBandEUTRA_r14_,
      BandParametersTxSL_r14 bandParametersTxSL_r14_,
      BandParametersRxSL_r14 bandParametersRxSL_r14_
   ) {
      super();
      v2x_FreqBandEUTRA_r14 = new FreqBandIndicator_r11 (v2x_FreqBandEUTRA_r14_);
      bandParametersTxSL_r14 = bandParametersTxSL_r14_;
      bandParametersRxSL_r14 = bandParametersRxSL_r14_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public V2X_BandParameters_r14 (
      long v2x_FreqBandEUTRA_r14_
   ) {
      super();
      v2x_FreqBandEUTRA_r14 = new FreqBandIndicator_r11 (v2x_FreqBandEUTRA_r14_);
   }

   public void init () {
      v2x_FreqBandEUTRA_r14 = null;
      bandParametersTxSL_r14 = null;
      bandParametersRxSL_r14 = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return v2x_FreqBandEUTRA_r14;
         case 1: return bandParametersTxSL_r14;
         case 2: return bandParametersRxSL_r14;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "v2x-FreqBandEUTRA-r14";
         case 1: return "bandParametersTxSL-r14";
         case 2: return "bandParametersRxSL-r14";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean bandParametersTxSL_r14Present = buffer.decodeBit ("bandParametersTxSL_r14Present");
      boolean bandParametersRxSL_r14Present = buffer.decodeBit ("bandParametersRxSL_r14Present");

      // decode v2x_FreqBandEUTRA_r14

      buffer.getContext().eventDispatcher.startElement("v2x_FreqBandEUTRA_r14", -1);

      v2x_FreqBandEUTRA_r14 = new FreqBandIndicator_r11();
      v2x_FreqBandEUTRA_r14.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("v2x_FreqBandEUTRA_r14", -1);

      // decode bandParametersTxSL_r14

      if (bandParametersTxSL_r14Present) {
         buffer.getContext().eventDispatcher.startElement("bandParametersTxSL_r14", -1);

         bandParametersTxSL_r14 = new BandParametersTxSL_r14();
         bandParametersTxSL_r14.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("bandParametersTxSL_r14", -1);
      }
      else {
         bandParametersTxSL_r14 = null;
      }

      // decode bandParametersRxSL_r14

      if (bandParametersRxSL_r14Present) {
         buffer.getContext().eventDispatcher.startElement("bandParametersRxSL_r14", -1);

         bandParametersRxSL_r14 = new BandParametersRxSL_r14();
         bandParametersRxSL_r14.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("bandParametersRxSL_r14", -1);
      }
      else {
         bandParametersRxSL_r14 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (v2x_FreqBandEUTRA_r14 != null) v2x_FreqBandEUTRA_r14.print (_sb, "v2x_FreqBandEUTRA_r14", _level+1);
      if (bandParametersTxSL_r14 != null) bandParametersTxSL_r14.print (_sb, "bandParametersTxSL_r14", _level+1);
      if (bandParametersRxSL_r14 != null) bandParametersRxSL_r14.print (_sb, "bandParametersRxSL_r14", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
