/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NBIOT_RRC_Definitions;

import com.objsys.asn1j.runtime.*;
import asn.lte.generated.EUTRA_RRC_Definitions.S_TMSI;
import asn.lte.generated.EUTRA_RRC_Definitions.RegisteredMME;
import asn.lte.generated.EUTRA_RRC_Definitions.DedicatedInfoNAS;

public class RRCConnectionSetupComplete_NB_r13_IEs extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NBIOT_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "RRCConnectionSetupComplete-NB-r13-IEs";
   }

   public Asn1Integer selectedPLMN_Identity_r13;
   public S_TMSI s_TMSI_r13;  // optional
   public RegisteredMME registeredMME_r13;  // optional
   public DedicatedInfoNAS dedicatedInfoNAS_r13;
   public RRCConnectionSetupComplete_NB_r13_IEs_attachWithoutPDN_Connectivity_r13 attachWithoutPDN_Connectivity_r13 = null;  // optional
   public RRCConnectionSetupComplete_NB_r13_IEs_up_CIoT_EPS_Optimisation_r13 up_CIoT_EPS_Optimisation_r13 = null;  // optional
   public Asn1OctetString lateNonCriticalExtension;  // optional
   public RRCConnectionSetupComplete_NB_v1430_IEs nonCriticalExtension;  // optional

   public RRCConnectionSetupComplete_NB_r13_IEs () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public RRCConnectionSetupComplete_NB_r13_IEs (
      Asn1Integer selectedPLMN_Identity_r13_,
      S_TMSI s_TMSI_r13_,
      RegisteredMME registeredMME_r13_,
      DedicatedInfoNAS dedicatedInfoNAS_r13_,
      RRCConnectionSetupComplete_NB_r13_IEs_attachWithoutPDN_Connectivity_r13 attachWithoutPDN_Connectivity_r13_,
      RRCConnectionSetupComplete_NB_r13_IEs_up_CIoT_EPS_Optimisation_r13 up_CIoT_EPS_Optimisation_r13_,
      Asn1OctetString lateNonCriticalExtension_,
      RRCConnectionSetupComplete_NB_v1430_IEs nonCriticalExtension_
   ) {
      super();
      selectedPLMN_Identity_r13 = selectedPLMN_Identity_r13_;
      s_TMSI_r13 = s_TMSI_r13_;
      registeredMME_r13 = registeredMME_r13_;
      dedicatedInfoNAS_r13 = dedicatedInfoNAS_r13_;
      attachWithoutPDN_Connectivity_r13 = attachWithoutPDN_Connectivity_r13_;
      up_CIoT_EPS_Optimisation_r13 = up_CIoT_EPS_Optimisation_r13_;
      lateNonCriticalExtension = lateNonCriticalExtension_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public RRCConnectionSetupComplete_NB_r13_IEs (
      Asn1Integer selectedPLMN_Identity_r13_,
      DedicatedInfoNAS dedicatedInfoNAS_r13_
   ) {
      super();
      selectedPLMN_Identity_r13 = selectedPLMN_Identity_r13_;
      dedicatedInfoNAS_r13 = dedicatedInfoNAS_r13_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public RRCConnectionSetupComplete_NB_r13_IEs (long selectedPLMN_Identity_r13_,
      S_TMSI s_TMSI_r13_,
      RegisteredMME registeredMME_r13_,
      byte[] dedicatedInfoNAS_r13_,
      RRCConnectionSetupComplete_NB_r13_IEs_attachWithoutPDN_Connectivity_r13 attachWithoutPDN_Connectivity_r13_,
      RRCConnectionSetupComplete_NB_r13_IEs_up_CIoT_EPS_Optimisation_r13 up_CIoT_EPS_Optimisation_r13_,
      byte[] lateNonCriticalExtension_,
      RRCConnectionSetupComplete_NB_v1430_IEs nonCriticalExtension_
   ) {
      super();
      selectedPLMN_Identity_r13 = new Asn1Integer (selectedPLMN_Identity_r13_);
      s_TMSI_r13 = s_TMSI_r13_;
      registeredMME_r13 = registeredMME_r13_;
      dedicatedInfoNAS_r13 = new DedicatedInfoNAS (dedicatedInfoNAS_r13_);
      attachWithoutPDN_Connectivity_r13 = attachWithoutPDN_Connectivity_r13_;
      up_CIoT_EPS_Optimisation_r13 = up_CIoT_EPS_Optimisation_r13_;
      lateNonCriticalExtension = new Asn1OctetString (lateNonCriticalExtension_);
      nonCriticalExtension = nonCriticalExtension_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public RRCConnectionSetupComplete_NB_r13_IEs (
      long selectedPLMN_Identity_r13_,
      byte[] dedicatedInfoNAS_r13_
   ) {
      super();
      selectedPLMN_Identity_r13 = new Asn1Integer (selectedPLMN_Identity_r13_);
      dedicatedInfoNAS_r13 = new DedicatedInfoNAS (dedicatedInfoNAS_r13_);
   }

   public void init () {
      selectedPLMN_Identity_r13 = null;
      s_TMSI_r13 = null;
      registeredMME_r13 = null;
      dedicatedInfoNAS_r13 = null;
      attachWithoutPDN_Connectivity_r13 = null;
      up_CIoT_EPS_Optimisation_r13 = null;
      lateNonCriticalExtension = null;
      nonCriticalExtension = null;
   }

   public int getElementCount() { return 8; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return selectedPLMN_Identity_r13;
         case 1: return s_TMSI_r13;
         case 2: return registeredMME_r13;
         case 3: return dedicatedInfoNAS_r13;
         case 4: return attachWithoutPDN_Connectivity_r13;
         case 5: return up_CIoT_EPS_Optimisation_r13;
         case 6: return lateNonCriticalExtension;
         case 7: return nonCriticalExtension;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "selectedPLMN-Identity-r13";
         case 1: return "s-TMSI-r13";
         case 2: return "registeredMME-r13";
         case 3: return "dedicatedInfoNAS-r13";
         case 4: return "attachWithoutPDN-Connectivity-r13";
         case 5: return "up-CIoT-EPS-Optimisation-r13";
         case 6: return "lateNonCriticalExtension";
         case 7: return "nonCriticalExtension";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean s_TMSI_r13Present = buffer.decodeBit ("s_TMSI_r13Present");
      boolean registeredMME_r13Present = buffer.decodeBit ("registeredMME_r13Present");
      boolean attachWithoutPDN_Connectivity_r13Present = buffer.decodeBit ("attachWithoutPDN_Connectivity_r13Present");
      boolean up_CIoT_EPS_Optimisation_r13Present = buffer.decodeBit ("up_CIoT_EPS_Optimisation_r13Present");
      boolean lateNonCriticalExtensionPresent = buffer.decodeBit ("lateNonCriticalExtensionPresent");
      boolean nonCriticalExtensionPresent = buffer.decodeBit ("nonCriticalExtensionPresent");

      // decode selectedPLMN_Identity_r13

      buffer.getContext().eventDispatcher.startElement("selectedPLMN_Identity_r13", -1);

      selectedPLMN_Identity_r13 = new Asn1Integer();
      selectedPLMN_Identity_r13.decode (buffer, 1, 6);

      buffer.invokeCharacters(selectedPLMN_Identity_r13.toString());
      buffer.getContext().eventDispatcher.endElement("selectedPLMN_Identity_r13", -1);

      // decode s_TMSI_r13

      if (s_TMSI_r13Present) {
         buffer.getContext().eventDispatcher.startElement("s_TMSI_r13", -1);

         s_TMSI_r13 = new S_TMSI();
         s_TMSI_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("s_TMSI_r13", -1);
      }
      else {
         s_TMSI_r13 = null;
      }

      // decode registeredMME_r13

      if (registeredMME_r13Present) {
         buffer.getContext().eventDispatcher.startElement("registeredMME_r13", -1);

         registeredMME_r13 = new RegisteredMME();
         registeredMME_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("registeredMME_r13", -1);
      }
      else {
         registeredMME_r13 = null;
      }

      // decode dedicatedInfoNAS_r13

      buffer.getContext().eventDispatcher.startElement("dedicatedInfoNAS_r13", -1);

      dedicatedInfoNAS_r13 = new DedicatedInfoNAS();
      dedicatedInfoNAS_r13.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("dedicatedInfoNAS_r13", -1);

      // decode attachWithoutPDN_Connectivity_r13

      if (attachWithoutPDN_Connectivity_r13Present) {
         buffer.getContext().eventDispatcher.startElement("attachWithoutPDN_Connectivity_r13", -1);

         int tval = RRCConnectionSetupComplete_NB_r13_IEs_attachWithoutPDN_Connectivity_r13.decodeEnumValue (buffer);
         attachWithoutPDN_Connectivity_r13 = RRCConnectionSetupComplete_NB_r13_IEs_attachWithoutPDN_Connectivity_r13.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("attachWithoutPDN_Connectivity_r13", -1);
      }
      else {
         attachWithoutPDN_Connectivity_r13 = null;
      }

      // decode up_CIoT_EPS_Optimisation_r13

      if (up_CIoT_EPS_Optimisation_r13Present) {
         buffer.getContext().eventDispatcher.startElement("up_CIoT_EPS_Optimisation_r13", -1);

         int tval = RRCConnectionSetupComplete_NB_r13_IEs_up_CIoT_EPS_Optimisation_r13.decodeEnumValue (buffer);
         up_CIoT_EPS_Optimisation_r13 = RRCConnectionSetupComplete_NB_r13_IEs_up_CIoT_EPS_Optimisation_r13.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("up_CIoT_EPS_Optimisation_r13", -1);
      }
      else {
         up_CIoT_EPS_Optimisation_r13 = null;
      }

      // decode lateNonCriticalExtension

      if (lateNonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("lateNonCriticalExtension", -1);

         lateNonCriticalExtension = new Asn1OctetString();
         lateNonCriticalExtension.decode (buffer);

         buffer.invokeCharacters(lateNonCriticalExtension.toString());
         buffer.getContext().eventDispatcher.endElement("lateNonCriticalExtension", -1);
      }
      else {
         lateNonCriticalExtension = null;
      }

      // decode nonCriticalExtension

      if (nonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension = new RRCConnectionSetupComplete_NB_v1430_IEs();
         nonCriticalExtension.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }
      else {
         nonCriticalExtension = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (selectedPLMN_Identity_r13 != null) selectedPLMN_Identity_r13.print (_sb, "selectedPLMN_Identity_r13", _level+1);
      if (s_TMSI_r13 != null) s_TMSI_r13.print (_sb, "s_TMSI_r13", _level+1);
      if (registeredMME_r13 != null) registeredMME_r13.print (_sb, "registeredMME_r13", _level+1);
      if (dedicatedInfoNAS_r13 != null) dedicatedInfoNAS_r13.print (_sb, "dedicatedInfoNAS_r13", _level+1);
      if (attachWithoutPDN_Connectivity_r13 != null) attachWithoutPDN_Connectivity_r13.print (_sb, "attachWithoutPDN_Connectivity_r13", _level+1);
      if (up_CIoT_EPS_Optimisation_r13 != null) up_CIoT_EPS_Optimisation_r13.print (_sb, "up_CIoT_EPS_Optimisation_r13", _level+1);
      if (lateNonCriticalExtension != null) lateNonCriticalExtension.print (_sb, "lateNonCriticalExtension", _level+1);
      if (nonCriticalExtension != null) nonCriticalExtension.print (_sb, "nonCriticalExtension", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
