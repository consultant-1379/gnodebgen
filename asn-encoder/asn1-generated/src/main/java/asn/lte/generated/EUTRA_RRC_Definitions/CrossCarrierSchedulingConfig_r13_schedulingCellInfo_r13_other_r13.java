/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class CrossCarrierSchedulingConfig_r13_schedulingCellInfo_r13_other_r13 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public ServCellIndex_r13 schedulingCellId_r13;
   public Asn1Integer pdsch_Start_r13;
   public Asn1Integer cif_InSchedulingCell_r13;

   public CrossCarrierSchedulingConfig_r13_schedulingCellInfo_r13_other_r13 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CrossCarrierSchedulingConfig_r13_schedulingCellInfo_r13_other_r13 (
      ServCellIndex_r13 schedulingCellId_r13_,
      Asn1Integer pdsch_Start_r13_,
      Asn1Integer cif_InSchedulingCell_r13_
   ) {
      super();
      schedulingCellId_r13 = schedulingCellId_r13_;
      pdsch_Start_r13 = pdsch_Start_r13_;
      cif_InSchedulingCell_r13 = cif_InSchedulingCell_r13_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public CrossCarrierSchedulingConfig_r13_schedulingCellInfo_r13_other_r13 (long schedulingCellId_r13_,
      long pdsch_Start_r13_,
      long cif_InSchedulingCell_r13_
   ) {
      super();
      schedulingCellId_r13 = new ServCellIndex_r13 (schedulingCellId_r13_);
      pdsch_Start_r13 = new Asn1Integer (pdsch_Start_r13_);
      cif_InSchedulingCell_r13 = new Asn1Integer (cif_InSchedulingCell_r13_);
   }

   public void init () {
      schedulingCellId_r13 = null;
      pdsch_Start_r13 = null;
      cif_InSchedulingCell_r13 = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return schedulingCellId_r13;
         case 1: return pdsch_Start_r13;
         case 2: return cif_InSchedulingCell_r13;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "schedulingCellId-r13";
         case 1: return "pdsch-Start-r13";
         case 2: return "cif-InSchedulingCell-r13";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode schedulingCellId_r13

      buffer.getContext().eventDispatcher.startElement("schedulingCellId_r13", -1);

      schedulingCellId_r13 = new ServCellIndex_r13();
      schedulingCellId_r13.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("schedulingCellId_r13", -1);

      // decode pdsch_Start_r13

      buffer.getContext().eventDispatcher.startElement("pdsch_Start_r13", -1);

      pdsch_Start_r13 = new Asn1Integer();
      pdsch_Start_r13.decode (buffer, 1, 4);

      buffer.invokeCharacters(pdsch_Start_r13.toString());
      buffer.getContext().eventDispatcher.endElement("pdsch_Start_r13", -1);

      // decode cif_InSchedulingCell_r13

      buffer.getContext().eventDispatcher.startElement("cif_InSchedulingCell_r13", -1);

      cif_InSchedulingCell_r13 = new Asn1Integer();
      cif_InSchedulingCell_r13.decode (buffer, 1, 7);

      buffer.invokeCharacters(cif_InSchedulingCell_r13.toString());
      buffer.getContext().eventDispatcher.endElement("cif_InSchedulingCell_r13", -1);

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (schedulingCellId_r13 != null) schedulingCellId_r13.print (_sb, "schedulingCellId_r13", _level+1);
      if (pdsch_Start_r13 != null) pdsch_Start_r13.print (_sb, "pdsch_Start_r13", _level+1);
      if (cif_InSchedulingCell_r13 != null) cif_InSchedulingCell_r13.print (_sb, "cif_InSchedulingCell_r13", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
