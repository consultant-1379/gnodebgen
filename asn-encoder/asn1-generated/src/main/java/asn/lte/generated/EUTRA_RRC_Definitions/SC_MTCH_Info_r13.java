/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SC_MTCH_Info_r13 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SC-MTCH-Info-r13";
   }

   public MBMSSessionInfo_r13 mbmsSessionInfo_r13;
   public Asn1BitString g_RNTI_r13;
   public SC_MTCH_SchedulingInfo_r13 sc_mtch_schedulingInfo_r13;  // optional
   public Asn1BitString sc_mtch_neighbourCell_r13;  // optional
   public boolean mV2ExtPresent;
   public SC_MTCH_Info_r13_p_a_r13 p_a_r13 = null;  // optional
   public Asn1OpenExt extElem1;

   public SC_MTCH_Info_r13 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SC_MTCH_Info_r13 (
      MBMSSessionInfo_r13 mbmsSessionInfo_r13_,
      Asn1BitString g_RNTI_r13_,
      SC_MTCH_SchedulingInfo_r13 sc_mtch_schedulingInfo_r13_,
      Asn1BitString sc_mtch_neighbourCell_r13_,
      SC_MTCH_Info_r13_p_a_r13 p_a_r13_
   ) {
      super();
      mbmsSessionInfo_r13 = mbmsSessionInfo_r13_;
      g_RNTI_r13 = g_RNTI_r13_;
      sc_mtch_schedulingInfo_r13 = sc_mtch_schedulingInfo_r13_;
      sc_mtch_neighbourCell_r13 = sc_mtch_neighbourCell_r13_;
      p_a_r13 = p_a_r13_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SC_MTCH_Info_r13 (
      MBMSSessionInfo_r13 mbmsSessionInfo_r13_,
      Asn1BitString g_RNTI_r13_
   ) {
      super();
      mbmsSessionInfo_r13 = mbmsSessionInfo_r13_;
      g_RNTI_r13 = g_RNTI_r13_;
   }

   public void init () {
      mbmsSessionInfo_r13 = null;
      g_RNTI_r13 = null;
      sc_mtch_schedulingInfo_r13 = null;
      sc_mtch_neighbourCell_r13 = null;
      p_a_r13 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return mbmsSessionInfo_r13;
         case 1: return g_RNTI_r13;
         case 2: return sc_mtch_schedulingInfo_r13;
         case 3: return sc_mtch_neighbourCell_r13;
         case 4: return p_a_r13;
         case 5: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "mbmsSessionInfo-r13";
         case 1: return "g-RNTI-r13";
         case 2: return "sc-mtch-schedulingInfo-r13";
         case 3: return "sc-mtch-neighbourCell-r13";
         case 4: return "p-a-r13";
         case 5: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean sc_mtch_schedulingInfo_r13Present = buffer.decodeBit ("sc_mtch_schedulingInfo_r13Present");
      boolean sc_mtch_neighbourCell_r13Present = buffer.decodeBit ("sc_mtch_neighbourCell_r13Present");

      // decode mbmsSessionInfo_r13

      buffer.getContext().eventDispatcher.startElement("mbmsSessionInfo_r13", -1);

      mbmsSessionInfo_r13 = new MBMSSessionInfo_r13();
      mbmsSessionInfo_r13.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("mbmsSessionInfo_r13", -1);

      // decode g_RNTI_r13

      buffer.getContext().eventDispatcher.startElement("g_RNTI_r13", -1);

      g_RNTI_r13 = new Asn1BitString();
      g_RNTI_r13.decode (buffer, 16, 16);

      buffer.invokeCharacters(g_RNTI_r13.toString());
      buffer.getContext().eventDispatcher.endElement("g_RNTI_r13", -1);

      // decode sc_mtch_schedulingInfo_r13

      if (sc_mtch_schedulingInfo_r13Present) {
         buffer.getContext().eventDispatcher.startElement("sc_mtch_schedulingInfo_r13", -1);

         sc_mtch_schedulingInfo_r13 = new SC_MTCH_SchedulingInfo_r13();
         sc_mtch_schedulingInfo_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sc_mtch_schedulingInfo_r13", -1);
      }
      else {
         sc_mtch_schedulingInfo_r13 = null;
      }

      // decode sc_mtch_neighbourCell_r13

      if (sc_mtch_neighbourCell_r13Present) {
         buffer.getContext().eventDispatcher.startElement("sc_mtch_neighbourCell_r13", -1);

         sc_mtch_neighbourCell_r13 = new Asn1BitString();
         sc_mtch_neighbourCell_r13.decode (buffer, 8, 8);

         buffer.invokeCharacters(sc_mtch_neighbourCell_r13.toString());
         buffer.getContext().eventDispatcher.endElement("sc_mtch_neighbourCell_r13", -1);
      }
      else {
         sc_mtch_neighbourCell_r13 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean p_a_r13Present = buffer.decodeBit ("p_a_r13Present");

            // decode p_a_r13

            if (p_a_r13Present) {
               buffer.getContext().eventDispatcher.startElement("p_a_r13", -1);

               int tval = SC_MTCH_Info_r13_p_a_r13.decodeEnumValue (buffer);
               p_a_r13 = SC_MTCH_Info_r13_p_a_r13.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("p_a_r13", -1);
            }
            else {
               p_a_r13 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (mbmsSessionInfo_r13 != null) mbmsSessionInfo_r13.print (_sb, "mbmsSessionInfo_r13", _level+1);
      if (g_RNTI_r13 != null) g_RNTI_r13.print (_sb, "g_RNTI_r13", _level+1);
      if (sc_mtch_schedulingInfo_r13 != null) sc_mtch_schedulingInfo_r13.print (_sb, "sc_mtch_schedulingInfo_r13", _level+1);
      if (sc_mtch_neighbourCell_r13 != null) sc_mtch_neighbourCell_r13.print (_sb, "sc_mtch_neighbourCell_r13", _level+1);
      if (p_a_r13 != null) p_a_r13.print (_sb, "p_a_r13", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
