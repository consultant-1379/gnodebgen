/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.LPPA_IEs;

import com.objsys.asn1j.runtime.*;

public class MeasuredResultsValue extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPPA_IEsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "MeasuredResultsValue";
   }

   // Choice element identifier constants
   public final static byte _VALUEANGLEOFARRIVAL = 1;
   public final static byte _VALUETIMINGADVANCETYPE1 = 2;
   public final static byte _VALUETIMINGADVANCETYPE2 = 3;
   public final static byte _RESULTRSRP = 4;
   public final static byte _RESULTRSRQ = 5;
   public final static byte _EXTELEM1 = 6;

   public MeasuredResultsValue () {
      super();
   }

   public MeasuredResultsValue (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _VALUEANGLEOFARRIVAL: return "valueAngleOfArrival";
      case _VALUETIMINGADVANCETYPE1: return "valueTimingAdvanceType1";
      case _VALUETIMINGADVANCETYPE2: return "valueTimingAdvanceType2";
      case _RESULTRSRP: return "resultRSRP";
      case _RESULTRSRQ: return "resultRSRQ";
      case _EXTELEM1: return "...";
      default: return "UNDEFINED";
      }
   }

   public void set_valueAngleOfArrival (Asn1Integer value) {
      setElement (_VALUEANGLEOFARRIVAL, value);
   }

   public void set_valueTimingAdvanceType1 (Asn1Integer value) {
      setElement (_VALUETIMINGADVANCETYPE1, value);
   }

   public void set_valueTimingAdvanceType2 (Asn1Integer value) {
      setElement (_VALUETIMINGADVANCETYPE2, value);
   }

   public void set_resultRSRP (ResultRSRP value) {
      setElement (_RESULTRSRP, value);
   }

   public void set_resultRSRQ (ResultRSRQ value) {
      setElement (_RESULTRSRQ, value);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      Asn1PerDecodeBuffer savedBuffer = null;
      boolean extbit = buffer.decodeBit ("extbit");

      if (!extbit) {
         int idx = (int) buffer.decodeConsWholeNumber (5, "index");
         choiceID = idx + 1;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         switch (idx) {
            // valueAngleOfArrival
            case 0: { 
               Asn1Integer valueAngleOfArrival;
               element = valueAngleOfArrival = new Asn1Integer();
               valueAngleOfArrival.decode (buffer, 0, 719);

               buffer.invokeCharacters(valueAngleOfArrival.toString());
               break;
            }

            // valueTimingAdvanceType1
            case 1: { 
               Asn1Integer valueTimingAdvanceType1;
               element = valueTimingAdvanceType1 = new Asn1Integer();
               valueTimingAdvanceType1.decode (buffer, 0, 7690);

               buffer.invokeCharacters(valueTimingAdvanceType1.toString());
               break;
            }

            // valueTimingAdvanceType2
            case 2: { 
               Asn1Integer valueTimingAdvanceType2;
               element = valueTimingAdvanceType2 = new Asn1Integer();
               valueTimingAdvanceType2.decode (buffer, 0, 7690);

               buffer.invokeCharacters(valueTimingAdvanceType2.toString());
               break;
            }

            // resultRSRP
            case 3: { 
               ResultRSRP resultRSRP;
               element = resultRSRP = new ResultRSRP();
               resultRSRP.decode (buffer);
               break;
            }

            // resultRSRQ
            case 4: { 
               ResultRSRQ resultRSRQ;
               element = resultRSRQ = new ResultRSRQ();
               resultRSRQ.decode (buffer);
               break;
            }

            default:
            throw new Asn1InvalidChoiceOptionException (buffer, idx);
         }
      }
      else {
         int idx = (int) buffer.decodeSmallNonNegWholeNumber ();
         choiceID = idx + 6;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         buffer.byteAlign();

         Asn1OpenType openType = new Asn1OpenType ();
         openType.decode (buffer);

         setElement (_EXTELEM1, openType);
         buffer.invokeCharacters (openType.toString());
      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);

      if (savedBuffer != null) {
         buffer = savedBuffer;
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (element != null) {
         element.print (_sb, getElemName(), _level+1);
      }
      indent (_sb, _level);
      _sb.append("}\n");
   }

}
