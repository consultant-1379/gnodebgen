/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NBIOT_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class NPRACH_ParametersTDD_NB_r15_nprach_Parameters_r15 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NBIOT_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public NPRACH_ParametersTDD_NB_r15_nprach_Parameters_r15_nprach_Periodicity_r15 nprach_Periodicity_r15 = null;  // optional
   public NPRACH_ParametersTDD_NB_r15_nprach_Parameters_r15_nprach_StartTime_r15 nprach_StartTime_r15 = null;  // optional
   public NPRACH_ParametersTDD_NB_r15_nprach_Parameters_r15_nprach_SubcarrierOffset_r15 nprach_SubcarrierOffset_r15 = null;  // optional
   public NPRACH_ParametersTDD_NB_r15_nprach_Parameters_r15_nprach_NumSubcarriers_r15 nprach_NumSubcarriers_r15 = null;  // optional
   public NPRACH_ParametersTDD_NB_r15_nprach_Parameters_r15_nprach_SubcarrierMSG3_RangeStart_r15 nprach_SubcarrierMSG3_RangeStart_r15 = null;  // optional
   public NPRACH_ParametersTDD_NB_r15_nprach_Parameters_r15_npdcch_NumRepetitions_RA_r15 npdcch_NumRepetitions_RA_r15 = null;  // optional
   public NPRACH_ParametersTDD_NB_r15_nprach_Parameters_r15_npdcch_StartSF_CSS_RA_r15 npdcch_StartSF_CSS_RA_r15 = null;  // optional
   public NPRACH_ParametersTDD_NB_r15_nprach_Parameters_r15_npdcch_Offset_RA_r15 npdcch_Offset_RA_r15 = null;  // optional
   public NPRACH_ParametersTDD_NB_r15_nprach_Parameters_r15_nprach_NumCBRA_StartSubcarriers_r15 nprach_NumCBRA_StartSubcarriers_r15 = null;  // optional
   public Asn1OpenExt extElem1;

   public NPRACH_ParametersTDD_NB_r15_nprach_Parameters_r15 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public NPRACH_ParametersTDD_NB_r15_nprach_Parameters_r15 (
      NPRACH_ParametersTDD_NB_r15_nprach_Parameters_r15_nprach_Periodicity_r15 nprach_Periodicity_r15_,
      NPRACH_ParametersTDD_NB_r15_nprach_Parameters_r15_nprach_StartTime_r15 nprach_StartTime_r15_,
      NPRACH_ParametersTDD_NB_r15_nprach_Parameters_r15_nprach_SubcarrierOffset_r15 nprach_SubcarrierOffset_r15_,
      NPRACH_ParametersTDD_NB_r15_nprach_Parameters_r15_nprach_NumSubcarriers_r15 nprach_NumSubcarriers_r15_,
      NPRACH_ParametersTDD_NB_r15_nprach_Parameters_r15_nprach_SubcarrierMSG3_RangeStart_r15 nprach_SubcarrierMSG3_RangeStart_r15_,
      NPRACH_ParametersTDD_NB_r15_nprach_Parameters_r15_npdcch_NumRepetitions_RA_r15 npdcch_NumRepetitions_RA_r15_,
      NPRACH_ParametersTDD_NB_r15_nprach_Parameters_r15_npdcch_StartSF_CSS_RA_r15 npdcch_StartSF_CSS_RA_r15_,
      NPRACH_ParametersTDD_NB_r15_nprach_Parameters_r15_npdcch_Offset_RA_r15 npdcch_Offset_RA_r15_,
      NPRACH_ParametersTDD_NB_r15_nprach_Parameters_r15_nprach_NumCBRA_StartSubcarriers_r15 nprach_NumCBRA_StartSubcarriers_r15_
   ) {
      super();
      nprach_Periodicity_r15 = nprach_Periodicity_r15_;
      nprach_StartTime_r15 = nprach_StartTime_r15_;
      nprach_SubcarrierOffset_r15 = nprach_SubcarrierOffset_r15_;
      nprach_NumSubcarriers_r15 = nprach_NumSubcarriers_r15_;
      nprach_SubcarrierMSG3_RangeStart_r15 = nprach_SubcarrierMSG3_RangeStart_r15_;
      npdcch_NumRepetitions_RA_r15 = npdcch_NumRepetitions_RA_r15_;
      npdcch_StartSF_CSS_RA_r15 = npdcch_StartSF_CSS_RA_r15_;
      npdcch_Offset_RA_r15 = npdcch_Offset_RA_r15_;
      nprach_NumCBRA_StartSubcarriers_r15 = nprach_NumCBRA_StartSubcarriers_r15_;
   }

   public void init () {
      nprach_Periodicity_r15 = null;
      nprach_StartTime_r15 = null;
      nprach_SubcarrierOffset_r15 = null;
      nprach_NumSubcarriers_r15 = null;
      nprach_SubcarrierMSG3_RangeStart_r15 = null;
      npdcch_NumRepetitions_RA_r15 = null;
      npdcch_StartSF_CSS_RA_r15 = null;
      npdcch_Offset_RA_r15 = null;
      nprach_NumCBRA_StartSubcarriers_r15 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 10; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return nprach_Periodicity_r15;
         case 1: return nprach_StartTime_r15;
         case 2: return nprach_SubcarrierOffset_r15;
         case 3: return nprach_NumSubcarriers_r15;
         case 4: return nprach_SubcarrierMSG3_RangeStart_r15;
         case 5: return npdcch_NumRepetitions_RA_r15;
         case 6: return npdcch_StartSF_CSS_RA_r15;
         case 7: return npdcch_Offset_RA_r15;
         case 8: return nprach_NumCBRA_StartSubcarriers_r15;
         case 9: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "nprach-Periodicity-r15";
         case 1: return "nprach-StartTime-r15";
         case 2: return "nprach-SubcarrierOffset-r15";
         case 3: return "nprach-NumSubcarriers-r15";
         case 4: return "nprach-SubcarrierMSG3-RangeStart-r15";
         case 5: return "npdcch-NumRepetitions-RA-r15";
         case 6: return "npdcch-StartSF-CSS-RA-r15";
         case 7: return "npdcch-Offset-RA-r15";
         case 8: return "nprach-NumCBRA-StartSubcarriers-r15";
         case 9: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean nprach_Periodicity_r15Present = buffer.decodeBit ("nprach_Periodicity_r15Present");
      boolean nprach_StartTime_r15Present = buffer.decodeBit ("nprach_StartTime_r15Present");
      boolean nprach_SubcarrierOffset_r15Present = buffer.decodeBit ("nprach_SubcarrierOffset_r15Present");
      boolean nprach_NumSubcarriers_r15Present = buffer.decodeBit ("nprach_NumSubcarriers_r15Present");
      boolean nprach_SubcarrierMSG3_RangeStart_r15Present = buffer.decodeBit ("nprach_SubcarrierMSG3_RangeStart_r15Present");
      boolean npdcch_NumRepetitions_RA_r15Present = buffer.decodeBit ("npdcch_NumRepetitions_RA_r15Present");
      boolean npdcch_StartSF_CSS_RA_r15Present = buffer.decodeBit ("npdcch_StartSF_CSS_RA_r15Present");
      boolean npdcch_Offset_RA_r15Present = buffer.decodeBit ("npdcch_Offset_RA_r15Present");
      boolean nprach_NumCBRA_StartSubcarriers_r15Present = buffer.decodeBit ("nprach_NumCBRA_StartSubcarriers_r15Present");

      // decode nprach_Periodicity_r15

      if (nprach_Periodicity_r15Present) {
         buffer.getContext().eventDispatcher.startElement("nprach_Periodicity_r15", -1);

         int tval = NPRACH_ParametersTDD_NB_r15_nprach_Parameters_r15_nprach_Periodicity_r15.decodeEnumValue (buffer);
         nprach_Periodicity_r15 = NPRACH_ParametersTDD_NB_r15_nprach_Parameters_r15_nprach_Periodicity_r15.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("nprach_Periodicity_r15", -1);
      }
      else {
         nprach_Periodicity_r15 = null;
      }

      // decode nprach_StartTime_r15

      if (nprach_StartTime_r15Present) {
         buffer.getContext().eventDispatcher.startElement("nprach_StartTime_r15", -1);

         int tval = NPRACH_ParametersTDD_NB_r15_nprach_Parameters_r15_nprach_StartTime_r15.decodeEnumValue (buffer);
         nprach_StartTime_r15 = NPRACH_ParametersTDD_NB_r15_nprach_Parameters_r15_nprach_StartTime_r15.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("nprach_StartTime_r15", -1);
      }
      else {
         nprach_StartTime_r15 = null;
      }

      // decode nprach_SubcarrierOffset_r15

      if (nprach_SubcarrierOffset_r15Present) {
         buffer.getContext().eventDispatcher.startElement("nprach_SubcarrierOffset_r15", -1);

         int tval = NPRACH_ParametersTDD_NB_r15_nprach_Parameters_r15_nprach_SubcarrierOffset_r15.decodeEnumValue (buffer);
         nprach_SubcarrierOffset_r15 = NPRACH_ParametersTDD_NB_r15_nprach_Parameters_r15_nprach_SubcarrierOffset_r15.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("nprach_SubcarrierOffset_r15", -1);
      }
      else {
         nprach_SubcarrierOffset_r15 = null;
      }

      // decode nprach_NumSubcarriers_r15

      if (nprach_NumSubcarriers_r15Present) {
         buffer.getContext().eventDispatcher.startElement("nprach_NumSubcarriers_r15", -1);

         int tval = NPRACH_ParametersTDD_NB_r15_nprach_Parameters_r15_nprach_NumSubcarriers_r15.decodeEnumValue (buffer);
         nprach_NumSubcarriers_r15 = NPRACH_ParametersTDD_NB_r15_nprach_Parameters_r15_nprach_NumSubcarriers_r15.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("nprach_NumSubcarriers_r15", -1);
      }
      else {
         nprach_NumSubcarriers_r15 = null;
      }

      // decode nprach_SubcarrierMSG3_RangeStart_r15

      if (nprach_SubcarrierMSG3_RangeStart_r15Present) {
         buffer.getContext().eventDispatcher.startElement("nprach_SubcarrierMSG3_RangeStart_r15", -1);

         int tval = NPRACH_ParametersTDD_NB_r15_nprach_Parameters_r15_nprach_SubcarrierMSG3_RangeStart_r15.decodeEnumValue (buffer);
         nprach_SubcarrierMSG3_RangeStart_r15 = NPRACH_ParametersTDD_NB_r15_nprach_Parameters_r15_nprach_SubcarrierMSG3_RangeStart_r15.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("nprach_SubcarrierMSG3_RangeStart_r15", -1);
      }
      else {
         nprach_SubcarrierMSG3_RangeStart_r15 = null;
      }

      // decode npdcch_NumRepetitions_RA_r15

      if (npdcch_NumRepetitions_RA_r15Present) {
         buffer.getContext().eventDispatcher.startElement("npdcch_NumRepetitions_RA_r15", -1);

         int tval = NPRACH_ParametersTDD_NB_r15_nprach_Parameters_r15_npdcch_NumRepetitions_RA_r15.decodeEnumValue (buffer);
         npdcch_NumRepetitions_RA_r15 = NPRACH_ParametersTDD_NB_r15_nprach_Parameters_r15_npdcch_NumRepetitions_RA_r15.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("npdcch_NumRepetitions_RA_r15", -1);
      }
      else {
         npdcch_NumRepetitions_RA_r15 = null;
      }

      // decode npdcch_StartSF_CSS_RA_r15

      if (npdcch_StartSF_CSS_RA_r15Present) {
         buffer.getContext().eventDispatcher.startElement("npdcch_StartSF_CSS_RA_r15", -1);

         int tval = NPRACH_ParametersTDD_NB_r15_nprach_Parameters_r15_npdcch_StartSF_CSS_RA_r15.decodeEnumValue (buffer);
         npdcch_StartSF_CSS_RA_r15 = NPRACH_ParametersTDD_NB_r15_nprach_Parameters_r15_npdcch_StartSF_CSS_RA_r15.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("npdcch_StartSF_CSS_RA_r15", -1);
      }
      else {
         npdcch_StartSF_CSS_RA_r15 = null;
      }

      // decode npdcch_Offset_RA_r15

      if (npdcch_Offset_RA_r15Present) {
         buffer.getContext().eventDispatcher.startElement("npdcch_Offset_RA_r15", -1);

         int tval = NPRACH_ParametersTDD_NB_r15_nprach_Parameters_r15_npdcch_Offset_RA_r15.decodeEnumValue (buffer);
         npdcch_Offset_RA_r15 = NPRACH_ParametersTDD_NB_r15_nprach_Parameters_r15_npdcch_Offset_RA_r15.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("npdcch_Offset_RA_r15", -1);
      }
      else {
         npdcch_Offset_RA_r15 = null;
      }

      // decode nprach_NumCBRA_StartSubcarriers_r15

      if (nprach_NumCBRA_StartSubcarriers_r15Present) {
         buffer.getContext().eventDispatcher.startElement("nprach_NumCBRA_StartSubcarriers_r15", -1);

         int tval = NPRACH_ParametersTDD_NB_r15_nprach_Parameters_r15_nprach_NumCBRA_StartSubcarriers_r15.decodeEnumValue (buffer);
         nprach_NumCBRA_StartSubcarriers_r15 = NPRACH_ParametersTDD_NB_r15_nprach_Parameters_r15_nprach_NumCBRA_StartSubcarriers_r15.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("nprach_NumCBRA_StartSubcarriers_r15", -1);
      }
      else {
         nprach_NumCBRA_StartSubcarriers_r15 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (nprach_Periodicity_r15 != null) nprach_Periodicity_r15.print (_sb, "nprach_Periodicity_r15", _level+1);
      if (nprach_StartTime_r15 != null) nprach_StartTime_r15.print (_sb, "nprach_StartTime_r15", _level+1);
      if (nprach_SubcarrierOffset_r15 != null) nprach_SubcarrierOffset_r15.print (_sb, "nprach_SubcarrierOffset_r15", _level+1);
      if (nprach_NumSubcarriers_r15 != null) nprach_NumSubcarriers_r15.print (_sb, "nprach_NumSubcarriers_r15", _level+1);
      if (nprach_SubcarrierMSG3_RangeStart_r15 != null) nprach_SubcarrierMSG3_RangeStart_r15.print (_sb, "nprach_SubcarrierMSG3_RangeStart_r15", _level+1);
      if (npdcch_NumRepetitions_RA_r15 != null) npdcch_NumRepetitions_RA_r15.print (_sb, "npdcch_NumRepetitions_RA_r15", _level+1);
      if (npdcch_StartSF_CSS_RA_r15 != null) npdcch_StartSF_CSS_RA_r15.print (_sb, "npdcch_StartSF_CSS_RA_r15", _level+1);
      if (npdcch_Offset_RA_r15 != null) npdcch_Offset_RA_r15.print (_sb, "npdcch_Offset_RA_r15", _level+1);
      if (nprach_NumCBRA_StartSubcarriers_r15 != null) nprach_NumCBRA_StartSubcarriers_r15.print (_sb, "nprach_NumCBRA_StartSubcarriers_r15", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
