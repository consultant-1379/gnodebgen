/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SlotOrSubslotPUSCH_Config_r15_setup extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public Asn1Integer betaOffsetSlot_ACK_Index_r15;  // optional
   public Asn1Integer betaOffset2Slot_ACK_Index_r15;  // optional
   public SlotOrSubslotPUSCH_Config_r15_setup_betaOffsetSubslot_ACK_Index_r15 betaOffsetSubslot_ACK_Index_r15;  // optional
   public SlotOrSubslotPUSCH_Config_r15_setup_betaOffset2Subslot_ACK_Index_r15 betaOffset2Subslot_ACK_Index_r15;  // optional
   public Asn1Integer betaOffsetSlot_RI_Index_r15;  // optional
   public SlotOrSubslotPUSCH_Config_r15_setup_betaOffsetSubslot_RI_Index_r15 betaOffsetSubslot_RI_Index_r15;  // optional
   public Asn1Integer betaOffsetSlot_CQI_Index_r15;  // optional
   public Asn1Integer betaOffsetSubslot_CQI_Index_r15;  // optional
   public Enable256QAM_r14 enable256QAM_SlotOrSubslot_r15;  // optional
   public Asn1Integer resourceAllocationOffset_r15;  // optional
   public Asn1Boolean ul_DMRS_IFDMA_SlotOrSubslot_r15;
   public Asn1OpenExt extElem1;

   public SlotOrSubslotPUSCH_Config_r15_setup () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SlotOrSubslotPUSCH_Config_r15_setup (
      Asn1Integer betaOffsetSlot_ACK_Index_r15_,
      Asn1Integer betaOffset2Slot_ACK_Index_r15_,
      SlotOrSubslotPUSCH_Config_r15_setup_betaOffsetSubslot_ACK_Index_r15 betaOffsetSubslot_ACK_Index_r15_,
      SlotOrSubslotPUSCH_Config_r15_setup_betaOffset2Subslot_ACK_Index_r15 betaOffset2Subslot_ACK_Index_r15_,
      Asn1Integer betaOffsetSlot_RI_Index_r15_,
      SlotOrSubslotPUSCH_Config_r15_setup_betaOffsetSubslot_RI_Index_r15 betaOffsetSubslot_RI_Index_r15_,
      Asn1Integer betaOffsetSlot_CQI_Index_r15_,
      Asn1Integer betaOffsetSubslot_CQI_Index_r15_,
      Enable256QAM_r14 enable256QAM_SlotOrSubslot_r15_,
      Asn1Integer resourceAllocationOffset_r15_,
      Asn1Boolean ul_DMRS_IFDMA_SlotOrSubslot_r15_
   ) {
      super();
      betaOffsetSlot_ACK_Index_r15 = betaOffsetSlot_ACK_Index_r15_;
      betaOffset2Slot_ACK_Index_r15 = betaOffset2Slot_ACK_Index_r15_;
      betaOffsetSubslot_ACK_Index_r15 = betaOffsetSubslot_ACK_Index_r15_;
      betaOffset2Subslot_ACK_Index_r15 = betaOffset2Subslot_ACK_Index_r15_;
      betaOffsetSlot_RI_Index_r15 = betaOffsetSlot_RI_Index_r15_;
      betaOffsetSubslot_RI_Index_r15 = betaOffsetSubslot_RI_Index_r15_;
      betaOffsetSlot_CQI_Index_r15 = betaOffsetSlot_CQI_Index_r15_;
      betaOffsetSubslot_CQI_Index_r15 = betaOffsetSubslot_CQI_Index_r15_;
      enable256QAM_SlotOrSubslot_r15 = enable256QAM_SlotOrSubslot_r15_;
      resourceAllocationOffset_r15 = resourceAllocationOffset_r15_;
      ul_DMRS_IFDMA_SlotOrSubslot_r15 = ul_DMRS_IFDMA_SlotOrSubslot_r15_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SlotOrSubslotPUSCH_Config_r15_setup (
      Asn1Boolean ul_DMRS_IFDMA_SlotOrSubslot_r15_
   ) {
      super();
      ul_DMRS_IFDMA_SlotOrSubslot_r15 = ul_DMRS_IFDMA_SlotOrSubslot_r15_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SlotOrSubslotPUSCH_Config_r15_setup (long betaOffsetSlot_ACK_Index_r15_,
      long betaOffset2Slot_ACK_Index_r15_,
      SlotOrSubslotPUSCH_Config_r15_setup_betaOffsetSubslot_ACK_Index_r15 betaOffsetSubslot_ACK_Index_r15_,
      SlotOrSubslotPUSCH_Config_r15_setup_betaOffset2Subslot_ACK_Index_r15 betaOffset2Subslot_ACK_Index_r15_,
      long betaOffsetSlot_RI_Index_r15_,
      SlotOrSubslotPUSCH_Config_r15_setup_betaOffsetSubslot_RI_Index_r15 betaOffsetSubslot_RI_Index_r15_,
      long betaOffsetSlot_CQI_Index_r15_,
      long betaOffsetSubslot_CQI_Index_r15_,
      Enable256QAM_r14 enable256QAM_SlotOrSubslot_r15_,
      long resourceAllocationOffset_r15_,
      boolean ul_DMRS_IFDMA_SlotOrSubslot_r15_
   ) {
      super();
      betaOffsetSlot_ACK_Index_r15 = new Asn1Integer (betaOffsetSlot_ACK_Index_r15_);
      betaOffset2Slot_ACK_Index_r15 = new Asn1Integer (betaOffset2Slot_ACK_Index_r15_);
      betaOffsetSubslot_ACK_Index_r15 = betaOffsetSubslot_ACK_Index_r15_;
      betaOffset2Subslot_ACK_Index_r15 = betaOffset2Subslot_ACK_Index_r15_;
      betaOffsetSlot_RI_Index_r15 = new Asn1Integer (betaOffsetSlot_RI_Index_r15_);
      betaOffsetSubslot_RI_Index_r15 = betaOffsetSubslot_RI_Index_r15_;
      betaOffsetSlot_CQI_Index_r15 = new Asn1Integer (betaOffsetSlot_CQI_Index_r15_);
      betaOffsetSubslot_CQI_Index_r15 = new Asn1Integer (betaOffsetSubslot_CQI_Index_r15_);
      enable256QAM_SlotOrSubslot_r15 = enable256QAM_SlotOrSubslot_r15_;
      resourceAllocationOffset_r15 = new Asn1Integer (resourceAllocationOffset_r15_);
      ul_DMRS_IFDMA_SlotOrSubslot_r15 = new Asn1Boolean (ul_DMRS_IFDMA_SlotOrSubslot_r15_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public SlotOrSubslotPUSCH_Config_r15_setup (
      boolean ul_DMRS_IFDMA_SlotOrSubslot_r15_
   ) {
      super();
      ul_DMRS_IFDMA_SlotOrSubslot_r15 = new Asn1Boolean (ul_DMRS_IFDMA_SlotOrSubslot_r15_);
   }

   public void init () {
      betaOffsetSlot_ACK_Index_r15 = null;
      betaOffset2Slot_ACK_Index_r15 = null;
      betaOffsetSubslot_ACK_Index_r15 = null;
      betaOffset2Subslot_ACK_Index_r15 = null;
      betaOffsetSlot_RI_Index_r15 = null;
      betaOffsetSubslot_RI_Index_r15 = null;
      betaOffsetSlot_CQI_Index_r15 = null;
      betaOffsetSubslot_CQI_Index_r15 = null;
      enable256QAM_SlotOrSubslot_r15 = null;
      resourceAllocationOffset_r15 = null;
      ul_DMRS_IFDMA_SlotOrSubslot_r15 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 12; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return betaOffsetSlot_ACK_Index_r15;
         case 1: return betaOffset2Slot_ACK_Index_r15;
         case 2: return betaOffsetSubslot_ACK_Index_r15;
         case 3: return betaOffset2Subslot_ACK_Index_r15;
         case 4: return betaOffsetSlot_RI_Index_r15;
         case 5: return betaOffsetSubslot_RI_Index_r15;
         case 6: return betaOffsetSlot_CQI_Index_r15;
         case 7: return betaOffsetSubslot_CQI_Index_r15;
         case 8: return enable256QAM_SlotOrSubslot_r15;
         case 9: return resourceAllocationOffset_r15;
         case 10: return ul_DMRS_IFDMA_SlotOrSubslot_r15;
         case 11: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "betaOffsetSlot-ACK-Index-r15";
         case 1: return "betaOffset2Slot-ACK-Index-r15";
         case 2: return "betaOffsetSubslot-ACK-Index-r15";
         case 3: return "betaOffset2Subslot-ACK-Index-r15";
         case 4: return "betaOffsetSlot-RI-Index-r15";
         case 5: return "betaOffsetSubslot-RI-Index-r15";
         case 6: return "betaOffsetSlot-CQI-Index-r15";
         case 7: return "betaOffsetSubslot-CQI-Index-r15";
         case 8: return "enable256QAM-SlotOrSubslot-r15";
         case 9: return "resourceAllocationOffset-r15";
         case 10: return "ul-DMRS-IFDMA-SlotOrSubslot-r15";
         case 11: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean betaOffsetSlot_ACK_Index_r15Present = buffer.decodeBit ("betaOffsetSlot_ACK_Index_r15Present");
      boolean betaOffset2Slot_ACK_Index_r15Present = buffer.decodeBit ("betaOffset2Slot_ACK_Index_r15Present");
      boolean betaOffsetSubslot_ACK_Index_r15Present = buffer.decodeBit ("betaOffsetSubslot_ACK_Index_r15Present");
      boolean betaOffset2Subslot_ACK_Index_r15Present = buffer.decodeBit ("betaOffset2Subslot_ACK_Index_r15Present");
      boolean betaOffsetSlot_RI_Index_r15Present = buffer.decodeBit ("betaOffsetSlot_RI_Index_r15Present");
      boolean betaOffsetSubslot_RI_Index_r15Present = buffer.decodeBit ("betaOffsetSubslot_RI_Index_r15Present");
      boolean betaOffsetSlot_CQI_Index_r15Present = buffer.decodeBit ("betaOffsetSlot_CQI_Index_r15Present");
      boolean betaOffsetSubslot_CQI_Index_r15Present = buffer.decodeBit ("betaOffsetSubslot_CQI_Index_r15Present");
      boolean enable256QAM_SlotOrSubslot_r15Present = buffer.decodeBit ("enable256QAM_SlotOrSubslot_r15Present");
      boolean resourceAllocationOffset_r15Present = buffer.decodeBit ("resourceAllocationOffset_r15Present");

      // decode betaOffsetSlot_ACK_Index_r15

      if (betaOffsetSlot_ACK_Index_r15Present) {
         buffer.getContext().eventDispatcher.startElement("betaOffsetSlot_ACK_Index_r15", -1);

         betaOffsetSlot_ACK_Index_r15 = new Asn1Integer();
         betaOffsetSlot_ACK_Index_r15.decode (buffer, 0, 15);

         buffer.invokeCharacters(betaOffsetSlot_ACK_Index_r15.toString());
         buffer.getContext().eventDispatcher.endElement("betaOffsetSlot_ACK_Index_r15", -1);
      }
      else {
         betaOffsetSlot_ACK_Index_r15 = null;
      }

      // decode betaOffset2Slot_ACK_Index_r15

      if (betaOffset2Slot_ACK_Index_r15Present) {
         buffer.getContext().eventDispatcher.startElement("betaOffset2Slot_ACK_Index_r15", -1);

         betaOffset2Slot_ACK_Index_r15 = new Asn1Integer();
         betaOffset2Slot_ACK_Index_r15.decode (buffer, 0, 15);

         buffer.invokeCharacters(betaOffset2Slot_ACK_Index_r15.toString());
         buffer.getContext().eventDispatcher.endElement("betaOffset2Slot_ACK_Index_r15", -1);
      }
      else {
         betaOffset2Slot_ACK_Index_r15 = null;
      }

      // decode betaOffsetSubslot_ACK_Index_r15

      if (betaOffsetSubslot_ACK_Index_r15Present) {
         buffer.getContext().eventDispatcher.startElement("betaOffsetSubslot_ACK_Index_r15", -1);

         betaOffsetSubslot_ACK_Index_r15 = new SlotOrSubslotPUSCH_Config_r15_setup_betaOffsetSubslot_ACK_Index_r15();
         betaOffsetSubslot_ACK_Index_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("betaOffsetSubslot_ACK_Index_r15", -1);
      }
      else {
         betaOffsetSubslot_ACK_Index_r15 = null;
      }

      // decode betaOffset2Subslot_ACK_Index_r15

      if (betaOffset2Subslot_ACK_Index_r15Present) {
         buffer.getContext().eventDispatcher.startElement("betaOffset2Subslot_ACK_Index_r15", -1);

         betaOffset2Subslot_ACK_Index_r15 = new SlotOrSubslotPUSCH_Config_r15_setup_betaOffset2Subslot_ACK_Index_r15();
         betaOffset2Subslot_ACK_Index_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("betaOffset2Subslot_ACK_Index_r15", -1);
      }
      else {
         betaOffset2Subslot_ACK_Index_r15 = null;
      }

      // decode betaOffsetSlot_RI_Index_r15

      if (betaOffsetSlot_RI_Index_r15Present) {
         buffer.getContext().eventDispatcher.startElement("betaOffsetSlot_RI_Index_r15", -1);

         betaOffsetSlot_RI_Index_r15 = new Asn1Integer();
         betaOffsetSlot_RI_Index_r15.decode (buffer, 0, 15);

         buffer.invokeCharacters(betaOffsetSlot_RI_Index_r15.toString());
         buffer.getContext().eventDispatcher.endElement("betaOffsetSlot_RI_Index_r15", -1);
      }
      else {
         betaOffsetSlot_RI_Index_r15 = null;
      }

      // decode betaOffsetSubslot_RI_Index_r15

      if (betaOffsetSubslot_RI_Index_r15Present) {
         buffer.getContext().eventDispatcher.startElement("betaOffsetSubslot_RI_Index_r15", -1);

         betaOffsetSubslot_RI_Index_r15 = new SlotOrSubslotPUSCH_Config_r15_setup_betaOffsetSubslot_RI_Index_r15();
         betaOffsetSubslot_RI_Index_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("betaOffsetSubslot_RI_Index_r15", -1);
      }
      else {
         betaOffsetSubslot_RI_Index_r15 = null;
      }

      // decode betaOffsetSlot_CQI_Index_r15

      if (betaOffsetSlot_CQI_Index_r15Present) {
         buffer.getContext().eventDispatcher.startElement("betaOffsetSlot_CQI_Index_r15", -1);

         betaOffsetSlot_CQI_Index_r15 = new Asn1Integer();
         betaOffsetSlot_CQI_Index_r15.decode (buffer, 0, 15);

         buffer.invokeCharacters(betaOffsetSlot_CQI_Index_r15.toString());
         buffer.getContext().eventDispatcher.endElement("betaOffsetSlot_CQI_Index_r15", -1);
      }
      else {
         betaOffsetSlot_CQI_Index_r15 = null;
      }

      // decode betaOffsetSubslot_CQI_Index_r15

      if (betaOffsetSubslot_CQI_Index_r15Present) {
         buffer.getContext().eventDispatcher.startElement("betaOffsetSubslot_CQI_Index_r15", -1);

         betaOffsetSubslot_CQI_Index_r15 = new Asn1Integer();
         betaOffsetSubslot_CQI_Index_r15.decode (buffer, 0, 15);

         buffer.invokeCharacters(betaOffsetSubslot_CQI_Index_r15.toString());
         buffer.getContext().eventDispatcher.endElement("betaOffsetSubslot_CQI_Index_r15", -1);
      }
      else {
         betaOffsetSubslot_CQI_Index_r15 = null;
      }

      // decode enable256QAM_SlotOrSubslot_r15

      if (enable256QAM_SlotOrSubslot_r15Present) {
         buffer.getContext().eventDispatcher.startElement("enable256QAM_SlotOrSubslot_r15", -1);

         enable256QAM_SlotOrSubslot_r15 = new Enable256QAM_r14();
         enable256QAM_SlotOrSubslot_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("enable256QAM_SlotOrSubslot_r15", -1);
      }
      else {
         enable256QAM_SlotOrSubslot_r15 = null;
      }

      // decode resourceAllocationOffset_r15

      if (resourceAllocationOffset_r15Present) {
         buffer.getContext().eventDispatcher.startElement("resourceAllocationOffset_r15", -1);

         resourceAllocationOffset_r15 = new Asn1Integer();
         resourceAllocationOffset_r15.decode (buffer, 1, 2);

         buffer.invokeCharacters(resourceAllocationOffset_r15.toString());
         buffer.getContext().eventDispatcher.endElement("resourceAllocationOffset_r15", -1);
      }
      else {
         resourceAllocationOffset_r15 = null;
      }

      // decode ul_DMRS_IFDMA_SlotOrSubslot_r15

      buffer.getContext().eventDispatcher.startElement("ul_DMRS_IFDMA_SlotOrSubslot_r15", -1);

      ul_DMRS_IFDMA_SlotOrSubslot_r15 = new Asn1Boolean();
      ul_DMRS_IFDMA_SlotOrSubslot_r15.decode (buffer);

      buffer.invokeCharacters(ul_DMRS_IFDMA_SlotOrSubslot_r15.toString());
      buffer.getContext().eventDispatcher.endElement("ul_DMRS_IFDMA_SlotOrSubslot_r15", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (betaOffsetSlot_ACK_Index_r15 != null) betaOffsetSlot_ACK_Index_r15.print (_sb, "betaOffsetSlot_ACK_Index_r15", _level+1);
      if (betaOffset2Slot_ACK_Index_r15 != null) betaOffset2Slot_ACK_Index_r15.print (_sb, "betaOffset2Slot_ACK_Index_r15", _level+1);
      if (betaOffsetSubslot_ACK_Index_r15 != null) betaOffsetSubslot_ACK_Index_r15.print (_sb, "betaOffsetSubslot_ACK_Index_r15", _level+1);
      if (betaOffset2Subslot_ACK_Index_r15 != null) betaOffset2Subslot_ACK_Index_r15.print (_sb, "betaOffset2Subslot_ACK_Index_r15", _level+1);
      if (betaOffsetSlot_RI_Index_r15 != null) betaOffsetSlot_RI_Index_r15.print (_sb, "betaOffsetSlot_RI_Index_r15", _level+1);
      if (betaOffsetSubslot_RI_Index_r15 != null) betaOffsetSubslot_RI_Index_r15.print (_sb, "betaOffsetSubslot_RI_Index_r15", _level+1);
      if (betaOffsetSlot_CQI_Index_r15 != null) betaOffsetSlot_CQI_Index_r15.print (_sb, "betaOffsetSlot_CQI_Index_r15", _level+1);
      if (betaOffsetSubslot_CQI_Index_r15 != null) betaOffsetSubslot_CQI_Index_r15.print (_sb, "betaOffsetSubslot_CQI_Index_r15", _level+1);
      if (enable256QAM_SlotOrSubslot_r15 != null) enable256QAM_SlotOrSubslot_r15.print (_sb, "enable256QAM_SlotOrSubslot_r15", _level+1);
      if (resourceAllocationOffset_r15 != null) resourceAllocationOffset_r15.print (_sb, "resourceAllocationOffset_r15", _level+1);
      if (ul_DMRS_IFDMA_SlotOrSubslot_r15 != null) ul_DMRS_IFDMA_SlotOrSubslot_r15.print (_sb, "ul_DMRS_IFDMA_SlotOrSubslot_r15", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
