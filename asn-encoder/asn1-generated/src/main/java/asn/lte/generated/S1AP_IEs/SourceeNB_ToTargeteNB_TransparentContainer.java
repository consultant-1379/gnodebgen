/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.S1AP_IEs;

import com.objsys.asn1j.runtime.*;

public class SourceeNB_ToTargeteNB_TransparentContainer extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_S1AP_IEsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SourceeNB-ToTargeteNB-TransparentContainer";
   }

   public RRC_Container rRC_Container;
   public E_RABInformationList e_RABInformationList;  // optional
   public EUTRAN_CGI targetCell_ID;
   public SubscriberProfileIDforRFP subscriberProfileIDforRFP;  // optional
   public UE_HistoryInformation uE_HistoryInformation;
   public SourceeNB_ToTargeteNB_TransparentContainer_iE_Extensions iE_Extensions;  // optional
   public Asn1OpenExt extElem1;

   public SourceeNB_ToTargeteNB_TransparentContainer () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SourceeNB_ToTargeteNB_TransparentContainer (
      RRC_Container rRC_Container_,
      E_RABInformationList e_RABInformationList_,
      EUTRAN_CGI targetCell_ID_,
      SubscriberProfileIDforRFP subscriberProfileIDforRFP_,
      UE_HistoryInformation uE_HistoryInformation_,
      SourceeNB_ToTargeteNB_TransparentContainer_iE_Extensions iE_Extensions_
   ) {
      super();
      rRC_Container = rRC_Container_;
      e_RABInformationList = e_RABInformationList_;
      targetCell_ID = targetCell_ID_;
      subscriberProfileIDforRFP = subscriberProfileIDforRFP_;
      uE_HistoryInformation = uE_HistoryInformation_;
      iE_Extensions = iE_Extensions_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SourceeNB_ToTargeteNB_TransparentContainer (
      RRC_Container rRC_Container_,
      EUTRAN_CGI targetCell_ID_,
      UE_HistoryInformation uE_HistoryInformation_
   ) {
      super();
      rRC_Container = rRC_Container_;
      targetCell_ID = targetCell_ID_;
      uE_HistoryInformation = uE_HistoryInformation_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SourceeNB_ToTargeteNB_TransparentContainer (byte[] rRC_Container_,
      E_RABInformationList e_RABInformationList_,
      EUTRAN_CGI targetCell_ID_,
      long subscriberProfileIDforRFP_,
      UE_HistoryInformation uE_HistoryInformation_,
      SourceeNB_ToTargeteNB_TransparentContainer_iE_Extensions iE_Extensions_
   ) {
      super();
      rRC_Container = new RRC_Container (rRC_Container_);
      e_RABInformationList = e_RABInformationList_;
      targetCell_ID = targetCell_ID_;
      subscriberProfileIDforRFP = new SubscriberProfileIDforRFP (subscriberProfileIDforRFP_);
      uE_HistoryInformation = uE_HistoryInformation_;
      iE_Extensions = iE_Extensions_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public SourceeNB_ToTargeteNB_TransparentContainer (
      byte[] rRC_Container_,
      EUTRAN_CGI targetCell_ID_,
      UE_HistoryInformation uE_HistoryInformation_
   ) {
      super();
      rRC_Container = new RRC_Container (rRC_Container_);
      targetCell_ID = targetCell_ID_;
      uE_HistoryInformation = uE_HistoryInformation_;
   }

   public void init () {
      rRC_Container = null;
      e_RABInformationList = null;
      targetCell_ID = null;
      subscriberProfileIDforRFP = null;
      uE_HistoryInformation = null;
      iE_Extensions = null;
      extElem1 = null;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return rRC_Container;
         case 1: return e_RABInformationList;
         case 2: return targetCell_ID;
         case 3: return subscriberProfileIDforRFP;
         case 4: return uE_HistoryInformation;
         case 5: return iE_Extensions;
         case 6: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "rRC-Container";
         case 1: return "e-RABInformationList";
         case 2: return "targetCell-ID";
         case 3: return "subscriberProfileIDforRFP";
         case 4: return "uE-HistoryInformation";
         case 5: return "iE-Extensions";
         case 6: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean e_RABInformationListPresent = buffer.decodeBit ("e_RABInformationListPresent");
      boolean subscriberProfileIDforRFPPresent = buffer.decodeBit ("subscriberProfileIDforRFPPresent");
      boolean iE_ExtensionsPresent = buffer.decodeBit ("iE_ExtensionsPresent");

      // decode rRC_Container

      buffer.getContext().eventDispatcher.startElement("rRC_Container", -1);

      rRC_Container = new RRC_Container();
      rRC_Container.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("rRC_Container", -1);

      // decode e_RABInformationList

      if (e_RABInformationListPresent) {
         buffer.getContext().eventDispatcher.startElement("e_RABInformationList", -1);

         e_RABInformationList = new E_RABInformationList();
         e_RABInformationList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("e_RABInformationList", -1);
      }
      else {
         e_RABInformationList = null;
      }

      // decode targetCell_ID

      buffer.getContext().eventDispatcher.startElement("targetCell_ID", -1);

      targetCell_ID = new EUTRAN_CGI();
      targetCell_ID.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("targetCell_ID", -1);

      // decode subscriberProfileIDforRFP

      if (subscriberProfileIDforRFPPresent) {
         buffer.getContext().eventDispatcher.startElement("subscriberProfileIDforRFP", -1);

         subscriberProfileIDforRFP = new SubscriberProfileIDforRFP();
         subscriberProfileIDforRFP.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("subscriberProfileIDforRFP", -1);
      }
      else {
         subscriberProfileIDforRFP = null;
      }

      // decode uE_HistoryInformation

      buffer.getContext().eventDispatcher.startElement("uE_HistoryInformation", -1);

      uE_HistoryInformation = new UE_HistoryInformation();
      uE_HistoryInformation.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("uE_HistoryInformation", -1);

      // decode iE_Extensions

      if (iE_ExtensionsPresent) {
         buffer.getContext().eventDispatcher.startElement("iE_Extensions", -1);

         iE_Extensions = new SourceeNB_ToTargeteNB_TransparentContainer_iE_Extensions();
         iE_Extensions.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("iE_Extensions", -1);
      }
      else {
         iE_Extensions = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (rRC_Container != null) rRC_Container.print (_sb, "rRC_Container", _level+1);
      if (e_RABInformationList != null) e_RABInformationList.print (_sb, "e_RABInformationList", _level+1);
      if (targetCell_ID != null) targetCell_ID.print (_sb, "targetCell_ID", _level+1);
      if (subscriberProfileIDforRFP != null) subscriberProfileIDforRFP.print (_sb, "subscriberProfileIDforRFP", _level+1);
      if (uE_HistoryInformation != null) uE_HistoryInformation.print (_sb, "uE_HistoryInformation", _level+1);
      if (iE_Extensions != null) iE_Extensions.print (_sb, "iE_Extensions", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
