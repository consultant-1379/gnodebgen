/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NBIOT_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class UL_CarrierConfigDedicated_NB_r13 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NBIOT_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "UL-CarrierConfigDedicated-NB-r13";
   }

   public CarrierFreq_NB_r13 ul_CarrierFreq_r13;  // optional
   public boolean mV2ExtPresent;
   public TDD_UL_DL_AlignmentOffset_NB_r15 tdd_UL_DL_AlignmentOffset_r15 = null;  // optional
   public Asn1OpenExt extElem1;

   public UL_CarrierConfigDedicated_NB_r13 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public UL_CarrierConfigDedicated_NB_r13 (
      CarrierFreq_NB_r13 ul_CarrierFreq_r13_,
      TDD_UL_DL_AlignmentOffset_NB_r15 tdd_UL_DL_AlignmentOffset_r15_
   ) {
      super();
      ul_CarrierFreq_r13 = ul_CarrierFreq_r13_;
      tdd_UL_DL_AlignmentOffset_r15 = tdd_UL_DL_AlignmentOffset_r15_;
   }

   public void init () {
      ul_CarrierFreq_r13 = null;
      tdd_UL_DL_AlignmentOffset_r15 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return ul_CarrierFreq_r13;
         case 1: return tdd_UL_DL_AlignmentOffset_r15;
         case 2: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "ul-CarrierFreq-r13";
         case 1: return "tdd-UL-DL-AlignmentOffset-r15";
         case 2: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean ul_CarrierFreq_r13Present = buffer.decodeBit ("ul_CarrierFreq_r13Present");

      // decode ul_CarrierFreq_r13

      if (ul_CarrierFreq_r13Present) {
         buffer.getContext().eventDispatcher.startElement("ul_CarrierFreq_r13", -1);

         ul_CarrierFreq_r13 = new CarrierFreq_NB_r13();
         ul_CarrierFreq_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ul_CarrierFreq_r13", -1);
      }
      else {
         ul_CarrierFreq_r13 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean tdd_UL_DL_AlignmentOffset_r15Present = buffer.decodeBit ("tdd_UL_DL_AlignmentOffset_r15Present");

            // decode tdd_UL_DL_AlignmentOffset_r15

            if (tdd_UL_DL_AlignmentOffset_r15Present) {
               buffer.getContext().eventDispatcher.startElement("tdd_UL_DL_AlignmentOffset_r15", -1);

               int tval = TDD_UL_DL_AlignmentOffset_NB_r15.decodeEnumValue (buffer);
               tdd_UL_DL_AlignmentOffset_r15 = TDD_UL_DL_AlignmentOffset_NB_r15.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("tdd_UL_DL_AlignmentOffset_r15", -1);
            }
            else {
               tdd_UL_DL_AlignmentOffset_r15 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (ul_CarrierFreq_r13 != null) ul_CarrierFreq_r13.print (_sb, "ul_CarrierFreq_r13", _level+1);
      if (tdd_UL_DL_AlignmentOffset_r15 != null) tdd_UL_DL_AlignmentOffset_r15.print (_sb, "tdd_UL_DL_AlignmentOffset_r15", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
