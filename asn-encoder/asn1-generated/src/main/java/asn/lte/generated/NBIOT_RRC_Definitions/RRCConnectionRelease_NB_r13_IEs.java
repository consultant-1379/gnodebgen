/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NBIOT_RRC_Definitions;

import com.objsys.asn1j.runtime.*;
import asn.lte.generated.EUTRA_RRC_Definitions.ResumeIdentity_r13;

public class RRCConnectionRelease_NB_r13_IEs extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NBIOT_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "RRCConnectionRelease-NB-r13-IEs";
   }

   public ReleaseCause_NB_r13 releaseCause_r13 = null;
   public ResumeIdentity_r13 resumeIdentity_r13;  // optional
   public Asn1Integer extendedWaitTime_r13;  // optional
   public RedirectedCarrierInfo_NB_r13 redirectedCarrierInfo_r13;  // optional
   public Asn1OctetString lateNonCriticalExtension;  // optional
   public RRCConnectionRelease_NB_v1430_IEs nonCriticalExtension;  // optional

   public RRCConnectionRelease_NB_r13_IEs () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public RRCConnectionRelease_NB_r13_IEs (
      ReleaseCause_NB_r13 releaseCause_r13_,
      ResumeIdentity_r13 resumeIdentity_r13_,
      Asn1Integer extendedWaitTime_r13_,
      RedirectedCarrierInfo_NB_r13 redirectedCarrierInfo_r13_,
      Asn1OctetString lateNonCriticalExtension_,
      RRCConnectionRelease_NB_v1430_IEs nonCriticalExtension_
   ) {
      super();
      releaseCause_r13 = releaseCause_r13_;
      resumeIdentity_r13 = resumeIdentity_r13_;
      extendedWaitTime_r13 = extendedWaitTime_r13_;
      redirectedCarrierInfo_r13 = redirectedCarrierInfo_r13_;
      lateNonCriticalExtension = lateNonCriticalExtension_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public RRCConnectionRelease_NB_r13_IEs (
      ReleaseCause_NB_r13 releaseCause_r13_
   ) {
      super();
      releaseCause_r13 = releaseCause_r13_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public RRCConnectionRelease_NB_r13_IEs (ReleaseCause_NB_r13 releaseCause_r13_,
      ResumeIdentity_r13 resumeIdentity_r13_,
      long extendedWaitTime_r13_,
      RedirectedCarrierInfo_NB_r13 redirectedCarrierInfo_r13_,
      byte[] lateNonCriticalExtension_,
      RRCConnectionRelease_NB_v1430_IEs nonCriticalExtension_
   ) {
      super();
      releaseCause_r13 = releaseCause_r13_;
      resumeIdentity_r13 = resumeIdentity_r13_;
      extendedWaitTime_r13 = new Asn1Integer (extendedWaitTime_r13_);
      redirectedCarrierInfo_r13 = redirectedCarrierInfo_r13_;
      lateNonCriticalExtension = new Asn1OctetString (lateNonCriticalExtension_);
      nonCriticalExtension = nonCriticalExtension_;
   }

   public void init () {
      releaseCause_r13 = null;
      resumeIdentity_r13 = null;
      extendedWaitTime_r13 = null;
      redirectedCarrierInfo_r13 = null;
      lateNonCriticalExtension = null;
      nonCriticalExtension = null;
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return releaseCause_r13;
         case 1: return resumeIdentity_r13;
         case 2: return extendedWaitTime_r13;
         case 3: return redirectedCarrierInfo_r13;
         case 4: return lateNonCriticalExtension;
         case 5: return nonCriticalExtension;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "releaseCause-r13";
         case 1: return "resumeIdentity-r13";
         case 2: return "extendedWaitTime-r13";
         case 3: return "redirectedCarrierInfo-r13";
         case 4: return "lateNonCriticalExtension";
         case 5: return "nonCriticalExtension";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean resumeIdentity_r13Present = buffer.decodeBit ("resumeIdentity_r13Present");
      boolean extendedWaitTime_r13Present = buffer.decodeBit ("extendedWaitTime_r13Present");
      boolean redirectedCarrierInfo_r13Present = buffer.decodeBit ("redirectedCarrierInfo_r13Present");
      boolean lateNonCriticalExtensionPresent = buffer.decodeBit ("lateNonCriticalExtensionPresent");
      boolean nonCriticalExtensionPresent = buffer.decodeBit ("nonCriticalExtensionPresent");

      // decode releaseCause_r13

      buffer.getContext().eventDispatcher.startElement("releaseCause_r13", -1);

      {
         int tval = ReleaseCause_NB_r13.decodeEnumValue (buffer);
         releaseCause_r13 = ReleaseCause_NB_r13.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("releaseCause_r13", -1);

      // decode resumeIdentity_r13

      if (resumeIdentity_r13Present) {
         buffer.getContext().eventDispatcher.startElement("resumeIdentity_r13", -1);

         resumeIdentity_r13 = new ResumeIdentity_r13();
         resumeIdentity_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("resumeIdentity_r13", -1);
      }
      else {
         resumeIdentity_r13 = null;
      }

      // decode extendedWaitTime_r13

      if (extendedWaitTime_r13Present) {
         buffer.getContext().eventDispatcher.startElement("extendedWaitTime_r13", -1);

         extendedWaitTime_r13 = new Asn1Integer();
         extendedWaitTime_r13.decode (buffer, 1, 1800);

         buffer.invokeCharacters(extendedWaitTime_r13.toString());
         buffer.getContext().eventDispatcher.endElement("extendedWaitTime_r13", -1);
      }
      else {
         extendedWaitTime_r13 = null;
      }

      // decode redirectedCarrierInfo_r13

      if (redirectedCarrierInfo_r13Present) {
         buffer.getContext().eventDispatcher.startElement("redirectedCarrierInfo_r13", -1);

         redirectedCarrierInfo_r13 = new RedirectedCarrierInfo_NB_r13();
         redirectedCarrierInfo_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("redirectedCarrierInfo_r13", -1);
      }
      else {
         redirectedCarrierInfo_r13 = null;
      }

      // decode lateNonCriticalExtension

      if (lateNonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("lateNonCriticalExtension", -1);

         lateNonCriticalExtension = new Asn1OctetString();
         lateNonCriticalExtension.decode (buffer);

         buffer.invokeCharacters(lateNonCriticalExtension.toString());
         buffer.getContext().eventDispatcher.endElement("lateNonCriticalExtension", -1);
      }
      else {
         lateNonCriticalExtension = null;
      }

      // decode nonCriticalExtension

      if (nonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension = new RRCConnectionRelease_NB_v1430_IEs();
         nonCriticalExtension.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }
      else {
         nonCriticalExtension = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (releaseCause_r13 != null) releaseCause_r13.print (_sb, "releaseCause_r13", _level+1);
      if (resumeIdentity_r13 != null) resumeIdentity_r13.print (_sb, "resumeIdentity_r13", _level+1);
      if (extendedWaitTime_r13 != null) extendedWaitTime_r13.print (_sb, "extendedWaitTime_r13", _level+1);
      if (redirectedCarrierInfo_r13 != null) redirectedCarrierInfo_r13.print (_sb, "redirectedCarrierInfo_r13", _level+1);
      if (lateNonCriticalExtension != null) lateNonCriticalExtension.print (_sb, "lateNonCriticalExtension", _level+1);
      if (nonCriticalExtension != null) nonCriticalExtension.print (_sb, "nonCriticalExtension", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
