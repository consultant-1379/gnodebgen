/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class PUSCH_ConfigCommon extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "PUSCH-ConfigCommon";
   }

   public PUSCH_ConfigCommon_groupHoppingEnabledTransformPrecoding groupHoppingEnabledTransformPrecoding = null;  // optional
   public PUSCH_TimeDomainResourceAllocationList pusch_TimeDomainAllocationList;  // optional
   public Asn1Integer msg3_DeltaPreamble;  // optional
   public Asn1Integer p0_NominalWithGrant;  // optional
   public Asn1OpenExt extElem1;

   public PUSCH_ConfigCommon () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public PUSCH_ConfigCommon (
      PUSCH_ConfigCommon_groupHoppingEnabledTransformPrecoding groupHoppingEnabledTransformPrecoding_,
      PUSCH_TimeDomainResourceAllocationList pusch_TimeDomainAllocationList_,
      Asn1Integer msg3_DeltaPreamble_,
      Asn1Integer p0_NominalWithGrant_
   ) {
      super();
      groupHoppingEnabledTransformPrecoding = groupHoppingEnabledTransformPrecoding_;
      pusch_TimeDomainAllocationList = pusch_TimeDomainAllocationList_;
      msg3_DeltaPreamble = msg3_DeltaPreamble_;
      p0_NominalWithGrant = p0_NominalWithGrant_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public PUSCH_ConfigCommon (PUSCH_ConfigCommon_groupHoppingEnabledTransformPrecoding groupHoppingEnabledTransformPrecoding_,
      PUSCH_TimeDomainResourceAllocationList pusch_TimeDomainAllocationList_,
      long msg3_DeltaPreamble_,
      long p0_NominalWithGrant_
   ) {
      super();
      groupHoppingEnabledTransformPrecoding = groupHoppingEnabledTransformPrecoding_;
      pusch_TimeDomainAllocationList = pusch_TimeDomainAllocationList_;
      msg3_DeltaPreamble = new Asn1Integer (msg3_DeltaPreamble_);
      p0_NominalWithGrant = new Asn1Integer (p0_NominalWithGrant_);
   }

   public void init () {
      groupHoppingEnabledTransformPrecoding = null;
      pusch_TimeDomainAllocationList = null;
      msg3_DeltaPreamble = null;
      p0_NominalWithGrant = null;
      extElem1 = null;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return groupHoppingEnabledTransformPrecoding;
         case 1: return pusch_TimeDomainAllocationList;
         case 2: return msg3_DeltaPreamble;
         case 3: return p0_NominalWithGrant;
         case 4: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "groupHoppingEnabledTransformPrecoding";
         case 1: return "pusch-TimeDomainAllocationList";
         case 2: return "msg3-DeltaPreamble";
         case 3: return "p0-NominalWithGrant";
         case 4: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean groupHoppingEnabledTransformPrecodingPresent = buffer.decodeBit ("groupHoppingEnabledTransformPrecodingPresent");
      boolean pusch_TimeDomainAllocationListPresent = buffer.decodeBit ("pusch_TimeDomainAllocationListPresent");
      boolean msg3_DeltaPreamblePresent = buffer.decodeBit ("msg3_DeltaPreamblePresent");
      boolean p0_NominalWithGrantPresent = buffer.decodeBit ("p0_NominalWithGrantPresent");

      // decode groupHoppingEnabledTransformPrecoding

      if (groupHoppingEnabledTransformPrecodingPresent) {
         buffer.getContext().eventDispatcher.startElement("groupHoppingEnabledTransformPrecoding", -1);

         int tval = PUSCH_ConfigCommon_groupHoppingEnabledTransformPrecoding.decodeEnumValue (buffer);
         groupHoppingEnabledTransformPrecoding = PUSCH_ConfigCommon_groupHoppingEnabledTransformPrecoding.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("groupHoppingEnabledTransformPrecoding", -1);
      }
      else {
         groupHoppingEnabledTransformPrecoding = null;
      }

      // decode pusch_TimeDomainAllocationList

      if (pusch_TimeDomainAllocationListPresent) {
         buffer.getContext().eventDispatcher.startElement("pusch_TimeDomainAllocationList", -1);

         pusch_TimeDomainAllocationList = new PUSCH_TimeDomainResourceAllocationList();
         pusch_TimeDomainAllocationList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("pusch_TimeDomainAllocationList", -1);
      }
      else {
         pusch_TimeDomainAllocationList = null;
      }

      // decode msg3_DeltaPreamble

      if (msg3_DeltaPreamblePresent) {
         buffer.getContext().eventDispatcher.startElement("msg3_DeltaPreamble", -1);

         msg3_DeltaPreamble = new Asn1Integer();
         msg3_DeltaPreamble.decode (buffer, -1, 6);

         buffer.invokeCharacters(msg3_DeltaPreamble.toString());
         buffer.getContext().eventDispatcher.endElement("msg3_DeltaPreamble", -1);
      }
      else {
         msg3_DeltaPreamble = null;
      }

      // decode p0_NominalWithGrant

      if (p0_NominalWithGrantPresent) {
         buffer.getContext().eventDispatcher.startElement("p0_NominalWithGrant", -1);

         p0_NominalWithGrant = new Asn1Integer();
         p0_NominalWithGrant.decode (buffer, -202, 24);

         buffer.invokeCharacters(p0_NominalWithGrant.toString());
         buffer.getContext().eventDispatcher.endElement("p0_NominalWithGrant", -1);
      }
      else {
         p0_NominalWithGrant = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (groupHoppingEnabledTransformPrecoding != null) groupHoppingEnabledTransformPrecoding.print (_sb, "groupHoppingEnabledTransformPrecoding", _level+1);
      if (pusch_TimeDomainAllocationList != null) pusch_TimeDomainAllocationList.print (_sb, "pusch_TimeDomainAllocationList", _level+1);
      if (msg3_DeltaPreamble != null) msg3_DeltaPreamble.print (_sb, "msg3_DeltaPreamble", _level+1);
      if (p0_NominalWithGrant != null) p0_NominalWithGrant.print (_sb, "p0_NominalWithGrant", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
