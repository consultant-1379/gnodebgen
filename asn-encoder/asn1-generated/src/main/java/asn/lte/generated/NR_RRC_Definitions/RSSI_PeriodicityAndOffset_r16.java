/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class RSSI_PeriodicityAndOffset_r16 extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "RSSI-PeriodicityAndOffset-r16";
   }

   // Choice element identifier constants
   public final static byte _SL10 = 1;
   public final static byte _SL20 = 2;
   public final static byte _SL40 = 3;
   public final static byte _SL80 = 4;
   public final static byte _SL160 = 5;
   public final static byte _SL320 = 6;
   public final static byte _S1640 = 7;
   public final static byte _EXTELEM1 = 8;

   public RSSI_PeriodicityAndOffset_r16 () {
      super();
   }

   public RSSI_PeriodicityAndOffset_r16 (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _SL10: return "sl10";
      case _SL20: return "sl20";
      case _SL40: return "sl40";
      case _SL80: return "sl80";
      case _SL160: return "sl160";
      case _SL320: return "sl320";
      case _S1640: return "s1640";
      case _EXTELEM1: return "...";
      default: return "UNDEFINED";
      }
   }

   public void set_sl10 (Asn1Integer value) {
      setElement (_SL10, value);
   }

   public void set_sl20 (Asn1Integer value) {
      setElement (_SL20, value);
   }

   public void set_sl40 (Asn1Integer value) {
      setElement (_SL40, value);
   }

   public void set_sl80 (Asn1Integer value) {
      setElement (_SL80, value);
   }

   public void set_sl160 (Asn1Integer value) {
      setElement (_SL160, value);
   }

   public void set_sl320 (Asn1Integer value) {
      setElement (_SL320, value);
   }

   public void set_s1640 (Asn1Integer value) {
      setElement (_S1640, value);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      Asn1PerDecodeBuffer savedBuffer = null;
      boolean extbit = buffer.decodeBit ("extbit");

      if (!extbit) {
         int idx = (int) buffer.decodeConsWholeNumber (7, "index");
         choiceID = idx + 1;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         switch (idx) {
            // sl10
            case 0: { 
               Asn1Integer sl10;
               element = sl10 = new Asn1Integer();
               sl10.decode (buffer, 0, 9);

               buffer.invokeCharacters(sl10.toString());
               break;
            }

            // sl20
            case 1: { 
               Asn1Integer sl20;
               element = sl20 = new Asn1Integer();
               sl20.decode (buffer, 0, 19);

               buffer.invokeCharacters(sl20.toString());
               break;
            }

            // sl40
            case 2: { 
               Asn1Integer sl40;
               element = sl40 = new Asn1Integer();
               sl40.decode (buffer, 0, 39);

               buffer.invokeCharacters(sl40.toString());
               break;
            }

            // sl80
            case 3: { 
               Asn1Integer sl80;
               element = sl80 = new Asn1Integer();
               sl80.decode (buffer, 0, 79);

               buffer.invokeCharacters(sl80.toString());
               break;
            }

            // sl160
            case 4: { 
               Asn1Integer sl160;
               element = sl160 = new Asn1Integer();
               sl160.decode (buffer, 0, 159);

               buffer.invokeCharacters(sl160.toString());
               break;
            }

            // sl320
            case 5: { 
               Asn1Integer sl320;
               element = sl320 = new Asn1Integer();
               sl320.decode (buffer, 0, 319);

               buffer.invokeCharacters(sl320.toString());
               break;
            }

            // s1640
            case 6: { 
               Asn1Integer s1640;
               element = s1640 = new Asn1Integer();
               s1640.decode (buffer, 0, 639);

               buffer.invokeCharacters(s1640.toString());
               break;
            }

            default:
            throw new Asn1InvalidChoiceOptionException (buffer, idx);
         }
      }
      else {
         int idx = (int) buffer.decodeSmallNonNegWholeNumber ();
         choiceID = idx + 8;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         buffer.byteAlign();

         Asn1OpenType openType = new Asn1OpenType ();
         openType.decode (buffer);

         setElement (_EXTELEM1, openType);
         buffer.invokeCharacters (openType.toString());
      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);

      if (savedBuffer != null) {
         buffer = savedBuffer;
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (element != null) {
         element.print (_sb, getElemName(), _level+1);
      }
      indent (_sb, _level);
      _sb.append("}\n");
   }

}
