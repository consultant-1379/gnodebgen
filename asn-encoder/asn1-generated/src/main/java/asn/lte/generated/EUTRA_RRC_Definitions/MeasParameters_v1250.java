/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MeasParameters_v1250 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "MeasParameters-v1250";
   }

   public MeasParameters_v1250_timerT312_r12 timerT312_r12 = null;  // optional
   public MeasParameters_v1250_alternativeTimeToTrigger_r12 alternativeTimeToTrigger_r12 = null;  // optional
   public MeasParameters_v1250_incMonEUTRA_r12 incMonEUTRA_r12 = null;  // optional
   public MeasParameters_v1250_incMonUTRA_r12 incMonUTRA_r12 = null;  // optional
   public MeasParameters_v1250_extendedMaxMeasId_r12 extendedMaxMeasId_r12 = null;  // optional
   public MeasParameters_v1250_extendedRSRQ_LowerRange_r12 extendedRSRQ_LowerRange_r12 = null;  // optional
   public MeasParameters_v1250_rsrq_OnAllSymbols_r12 rsrq_OnAllSymbols_r12 = null;  // optional
   public MeasParameters_v1250_crs_DiscoverySignalsMeas_r12 crs_DiscoverySignalsMeas_r12 = null;  // optional
   public MeasParameters_v1250_csi_RS_DiscoverySignalsMeas_r12 csi_RS_DiscoverySignalsMeas_r12 = null;  // optional

   public MeasParameters_v1250 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MeasParameters_v1250 (
      MeasParameters_v1250_timerT312_r12 timerT312_r12_,
      MeasParameters_v1250_alternativeTimeToTrigger_r12 alternativeTimeToTrigger_r12_,
      MeasParameters_v1250_incMonEUTRA_r12 incMonEUTRA_r12_,
      MeasParameters_v1250_incMonUTRA_r12 incMonUTRA_r12_,
      MeasParameters_v1250_extendedMaxMeasId_r12 extendedMaxMeasId_r12_,
      MeasParameters_v1250_extendedRSRQ_LowerRange_r12 extendedRSRQ_LowerRange_r12_,
      MeasParameters_v1250_rsrq_OnAllSymbols_r12 rsrq_OnAllSymbols_r12_,
      MeasParameters_v1250_crs_DiscoverySignalsMeas_r12 crs_DiscoverySignalsMeas_r12_,
      MeasParameters_v1250_csi_RS_DiscoverySignalsMeas_r12 csi_RS_DiscoverySignalsMeas_r12_
   ) {
      super();
      timerT312_r12 = timerT312_r12_;
      alternativeTimeToTrigger_r12 = alternativeTimeToTrigger_r12_;
      incMonEUTRA_r12 = incMonEUTRA_r12_;
      incMonUTRA_r12 = incMonUTRA_r12_;
      extendedMaxMeasId_r12 = extendedMaxMeasId_r12_;
      extendedRSRQ_LowerRange_r12 = extendedRSRQ_LowerRange_r12_;
      rsrq_OnAllSymbols_r12 = rsrq_OnAllSymbols_r12_;
      crs_DiscoverySignalsMeas_r12 = crs_DiscoverySignalsMeas_r12_;
      csi_RS_DiscoverySignalsMeas_r12 = csi_RS_DiscoverySignalsMeas_r12_;
   }

   public void init () {
      timerT312_r12 = null;
      alternativeTimeToTrigger_r12 = null;
      incMonEUTRA_r12 = null;
      incMonUTRA_r12 = null;
      extendedMaxMeasId_r12 = null;
      extendedRSRQ_LowerRange_r12 = null;
      rsrq_OnAllSymbols_r12 = null;
      crs_DiscoverySignalsMeas_r12 = null;
      csi_RS_DiscoverySignalsMeas_r12 = null;
   }

   public int getElementCount() { return 9; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return timerT312_r12;
         case 1: return alternativeTimeToTrigger_r12;
         case 2: return incMonEUTRA_r12;
         case 3: return incMonUTRA_r12;
         case 4: return extendedMaxMeasId_r12;
         case 5: return extendedRSRQ_LowerRange_r12;
         case 6: return rsrq_OnAllSymbols_r12;
         case 7: return crs_DiscoverySignalsMeas_r12;
         case 8: return csi_RS_DiscoverySignalsMeas_r12;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "timerT312-r12";
         case 1: return "alternativeTimeToTrigger-r12";
         case 2: return "incMonEUTRA-r12";
         case 3: return "incMonUTRA-r12";
         case 4: return "extendedMaxMeasId-r12";
         case 5: return "extendedRSRQ-LowerRange-r12";
         case 6: return "rsrq-OnAllSymbols-r12";
         case 7: return "crs-DiscoverySignalsMeas-r12";
         case 8: return "csi-RS-DiscoverySignalsMeas-r12";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean timerT312_r12Present = buffer.decodeBit ("timerT312_r12Present");
      boolean alternativeTimeToTrigger_r12Present = buffer.decodeBit ("alternativeTimeToTrigger_r12Present");
      boolean incMonEUTRA_r12Present = buffer.decodeBit ("incMonEUTRA_r12Present");
      boolean incMonUTRA_r12Present = buffer.decodeBit ("incMonUTRA_r12Present");
      boolean extendedMaxMeasId_r12Present = buffer.decodeBit ("extendedMaxMeasId_r12Present");
      boolean extendedRSRQ_LowerRange_r12Present = buffer.decodeBit ("extendedRSRQ_LowerRange_r12Present");
      boolean rsrq_OnAllSymbols_r12Present = buffer.decodeBit ("rsrq_OnAllSymbols_r12Present");
      boolean crs_DiscoverySignalsMeas_r12Present = buffer.decodeBit ("crs_DiscoverySignalsMeas_r12Present");
      boolean csi_RS_DiscoverySignalsMeas_r12Present = buffer.decodeBit ("csi_RS_DiscoverySignalsMeas_r12Present");

      // decode timerT312_r12

      if (timerT312_r12Present) {
         buffer.getContext().eventDispatcher.startElement("timerT312_r12", -1);

         int tval = MeasParameters_v1250_timerT312_r12.decodeEnumValue (buffer);
         timerT312_r12 = MeasParameters_v1250_timerT312_r12.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("timerT312_r12", -1);
      }
      else {
         timerT312_r12 = null;
      }

      // decode alternativeTimeToTrigger_r12

      if (alternativeTimeToTrigger_r12Present) {
         buffer.getContext().eventDispatcher.startElement("alternativeTimeToTrigger_r12", -1);

         int tval = MeasParameters_v1250_alternativeTimeToTrigger_r12.decodeEnumValue (buffer);
         alternativeTimeToTrigger_r12 = MeasParameters_v1250_alternativeTimeToTrigger_r12.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("alternativeTimeToTrigger_r12", -1);
      }
      else {
         alternativeTimeToTrigger_r12 = null;
      }

      // decode incMonEUTRA_r12

      if (incMonEUTRA_r12Present) {
         buffer.getContext().eventDispatcher.startElement("incMonEUTRA_r12", -1);

         int tval = MeasParameters_v1250_incMonEUTRA_r12.decodeEnumValue (buffer);
         incMonEUTRA_r12 = MeasParameters_v1250_incMonEUTRA_r12.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("incMonEUTRA_r12", -1);
      }
      else {
         incMonEUTRA_r12 = null;
      }

      // decode incMonUTRA_r12

      if (incMonUTRA_r12Present) {
         buffer.getContext().eventDispatcher.startElement("incMonUTRA_r12", -1);

         int tval = MeasParameters_v1250_incMonUTRA_r12.decodeEnumValue (buffer);
         incMonUTRA_r12 = MeasParameters_v1250_incMonUTRA_r12.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("incMonUTRA_r12", -1);
      }
      else {
         incMonUTRA_r12 = null;
      }

      // decode extendedMaxMeasId_r12

      if (extendedMaxMeasId_r12Present) {
         buffer.getContext().eventDispatcher.startElement("extendedMaxMeasId_r12", -1);

         int tval = MeasParameters_v1250_extendedMaxMeasId_r12.decodeEnumValue (buffer);
         extendedMaxMeasId_r12 = MeasParameters_v1250_extendedMaxMeasId_r12.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("extendedMaxMeasId_r12", -1);
      }
      else {
         extendedMaxMeasId_r12 = null;
      }

      // decode extendedRSRQ_LowerRange_r12

      if (extendedRSRQ_LowerRange_r12Present) {
         buffer.getContext().eventDispatcher.startElement("extendedRSRQ_LowerRange_r12", -1);

         int tval = MeasParameters_v1250_extendedRSRQ_LowerRange_r12.decodeEnumValue (buffer);
         extendedRSRQ_LowerRange_r12 = MeasParameters_v1250_extendedRSRQ_LowerRange_r12.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("extendedRSRQ_LowerRange_r12", -1);
      }
      else {
         extendedRSRQ_LowerRange_r12 = null;
      }

      // decode rsrq_OnAllSymbols_r12

      if (rsrq_OnAllSymbols_r12Present) {
         buffer.getContext().eventDispatcher.startElement("rsrq_OnAllSymbols_r12", -1);

         int tval = MeasParameters_v1250_rsrq_OnAllSymbols_r12.decodeEnumValue (buffer);
         rsrq_OnAllSymbols_r12 = MeasParameters_v1250_rsrq_OnAllSymbols_r12.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("rsrq_OnAllSymbols_r12", -1);
      }
      else {
         rsrq_OnAllSymbols_r12 = null;
      }

      // decode crs_DiscoverySignalsMeas_r12

      if (crs_DiscoverySignalsMeas_r12Present) {
         buffer.getContext().eventDispatcher.startElement("crs_DiscoverySignalsMeas_r12", -1);

         int tval = MeasParameters_v1250_crs_DiscoverySignalsMeas_r12.decodeEnumValue (buffer);
         crs_DiscoverySignalsMeas_r12 = MeasParameters_v1250_crs_DiscoverySignalsMeas_r12.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("crs_DiscoverySignalsMeas_r12", -1);
      }
      else {
         crs_DiscoverySignalsMeas_r12 = null;
      }

      // decode csi_RS_DiscoverySignalsMeas_r12

      if (csi_RS_DiscoverySignalsMeas_r12Present) {
         buffer.getContext().eventDispatcher.startElement("csi_RS_DiscoverySignalsMeas_r12", -1);

         int tval = MeasParameters_v1250_csi_RS_DiscoverySignalsMeas_r12.decodeEnumValue (buffer);
         csi_RS_DiscoverySignalsMeas_r12 = MeasParameters_v1250_csi_RS_DiscoverySignalsMeas_r12.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("csi_RS_DiscoverySignalsMeas_r12", -1);
      }
      else {
         csi_RS_DiscoverySignalsMeas_r12 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (timerT312_r12 != null) timerT312_r12.print (_sb, "timerT312_r12", _level+1);
      if (alternativeTimeToTrigger_r12 != null) alternativeTimeToTrigger_r12.print (_sb, "alternativeTimeToTrigger_r12", _level+1);
      if (incMonEUTRA_r12 != null) incMonEUTRA_r12.print (_sb, "incMonEUTRA_r12", _level+1);
      if (incMonUTRA_r12 != null) incMonUTRA_r12.print (_sb, "incMonUTRA_r12", _level+1);
      if (extendedMaxMeasId_r12 != null) extendedMaxMeasId_r12.print (_sb, "extendedMaxMeasId_r12", _level+1);
      if (extendedRSRQ_LowerRange_r12 != null) extendedRSRQ_LowerRange_r12.print (_sb, "extendedRSRQ_LowerRange_r12", _level+1);
      if (rsrq_OnAllSymbols_r12 != null) rsrq_OnAllSymbols_r12.print (_sb, "rsrq_OnAllSymbols_r12", _level+1);
      if (crs_DiscoverySignalsMeas_r12 != null) crs_DiscoverySignalsMeas_r12.print (_sb, "crs_DiscoverySignalsMeas_r12", _level+1);
      if (csi_RS_DiscoverySignalsMeas_r12 != null) csi_RS_DiscoverySignalsMeas_r12.print (_sb, "csi_RS_DiscoverySignalsMeas_r12", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
