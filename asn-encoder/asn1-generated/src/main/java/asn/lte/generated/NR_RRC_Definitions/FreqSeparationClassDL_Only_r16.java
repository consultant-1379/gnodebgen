/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class FreqSeparationClassDL_Only_r16 extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "FreqSeparationClassDL-Only-r16";
   }

   // Integer constants for switch-case
   public static final int _MHZ200 = 0;
   public static final int _MHZ400 = 1;
   public static final int _MHZ600 = 2;
   public static final int _MHZ800 = 3;
   public static final int _MHZ1000 = 4;
   public static final int _MHZ1200 = 5;

   // Singleton instances of FreqSeparationClassDL_Only_r16
   protected static final FreqSeparationClassDL_Only_r16 _mhz200 = new FreqSeparationClassDL_Only_r16(0);
   protected static final FreqSeparationClassDL_Only_r16 _mhz400 = new FreqSeparationClassDL_Only_r16(1);
   protected static final FreqSeparationClassDL_Only_r16 _mhz600 = new FreqSeparationClassDL_Only_r16(2);
   protected static final FreqSeparationClassDL_Only_r16 _mhz800 = new FreqSeparationClassDL_Only_r16(3);
   protected static final FreqSeparationClassDL_Only_r16 _mhz1000 = new FreqSeparationClassDL_Only_r16(4);
   protected static final FreqSeparationClassDL_Only_r16 _mhz1200 = new FreqSeparationClassDL_Only_r16(5);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    */
   protected FreqSeparationClassDL_Only_r16 (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for mhz200.
    */
   public static FreqSeparationClassDL_Only_r16 mhz200() {
      return _mhz200;
   }

   /**
    * Singleton accessor method for mhz400.
    */
   public static FreqSeparationClassDL_Only_r16 mhz400() {
      return _mhz400;
   }

   /**
    * Singleton accessor method for mhz600.
    */
   public static FreqSeparationClassDL_Only_r16 mhz600() {
      return _mhz600;
   }

   /**
    * Singleton accessor method for mhz800.
    */
   public static FreqSeparationClassDL_Only_r16 mhz800() {
      return _mhz800;
   }

   /**
    * Singleton accessor method for mhz1000.
    */
   public static FreqSeparationClassDL_Only_r16 mhz1000() {
      return _mhz1000;
   }

   /**
    * Singleton accessor method for mhz1200.
    */
   public static FreqSeparationClassDL_Only_r16 mhz1200() {
      return _mhz1200;
   }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return FreqSeparationClassDL_Only_r16.valueOf( FreqSeparationClassDL_Only_r16.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static FreqSeparationClassDL_Only_r16 valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 0: return mhz200();
         case 1: return mhz400();
         case 2: return mhz600();
         case 3: return mhz800();
         case 4: return mhz1000();
         case 5: return mhz1200();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      ui = (int) buffer.decodeConsWholeNumber (6);

      switch (ui) {
         case 0: ret =  0; break;
         case 1: ret =  1; break;
         case 2: ret =  2; break;
         case 3: ret =  3; break;
         case 4: ret =  4; break;
         case 5: ret =  5; break;
         default: throw new Asn1InvalidEnumException (ui);
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (FreqSeparationClassDL_Only_r16.valueOf(ret).toString());

      return ret;
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("mhz200");
         case 1: return ("mhz400");
         case 2: return ("mhz600");
         case 3: return ("mhz800");
         case 4: return ("mhz1000");
         case 5: return ("mhz1200");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
