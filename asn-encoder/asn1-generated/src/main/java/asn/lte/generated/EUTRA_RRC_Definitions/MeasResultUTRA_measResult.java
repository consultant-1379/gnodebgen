/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MeasResultUTRA_measResult extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public Asn1Integer utra_RSCP;  // optional
   public Asn1Integer utra_EcN0;  // optional
   public boolean mV2ExtPresent;
   public AdditionalSI_Info_r9 additionalSI_Info_r9;  // optional
   public boolean mV3ExtPresent;
   public MeasResultUTRA_measResult_primaryPLMN_Suitable_r12 primaryPLMN_Suitable_r12 = null;  // optional
   public Asn1OpenExt extElem1;

   public MeasResultUTRA_measResult () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MeasResultUTRA_measResult (
      Asn1Integer utra_RSCP_,
      Asn1Integer utra_EcN0_,
      AdditionalSI_Info_r9 additionalSI_Info_r9_,
      MeasResultUTRA_measResult_primaryPLMN_Suitable_r12 primaryPLMN_Suitable_r12_
   ) {
      super();
      utra_RSCP = utra_RSCP_;
      utra_EcN0 = utra_EcN0_;
      additionalSI_Info_r9 = additionalSI_Info_r9_;
      primaryPLMN_Suitable_r12 = primaryPLMN_Suitable_r12_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public MeasResultUTRA_measResult (long utra_RSCP_,
      long utra_EcN0_,
      AdditionalSI_Info_r9 additionalSI_Info_r9_,
      MeasResultUTRA_measResult_primaryPLMN_Suitable_r12 primaryPLMN_Suitable_r12_
   ) {
      super();
      utra_RSCP = new Asn1Integer (utra_RSCP_);
      utra_EcN0 = new Asn1Integer (utra_EcN0_);
      additionalSI_Info_r9 = additionalSI_Info_r9_;
      primaryPLMN_Suitable_r12 = primaryPLMN_Suitable_r12_;
   }

   public void init () {
      utra_RSCP = null;
      utra_EcN0 = null;
      additionalSI_Info_r9 = null;
      primaryPLMN_Suitable_r12 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return utra_RSCP;
         case 1: return utra_EcN0;
         case 2: return additionalSI_Info_r9;
         case 3: return primaryPLMN_Suitable_r12;
         case 4: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "utra-RSCP";
         case 1: return "utra-EcN0";
         case 2: return "additionalSI-Info-r9";
         case 3: return "primaryPLMN-Suitable-r12";
         case 4: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean utra_RSCPPresent = buffer.decodeBit ("utra_RSCPPresent");
      boolean utra_EcN0Present = buffer.decodeBit ("utra_EcN0Present");

      // decode utra_RSCP

      if (utra_RSCPPresent) {
         buffer.getContext().eventDispatcher.startElement("utra_RSCP", -1);

         utra_RSCP = new Asn1Integer();
         utra_RSCP.decode (buffer, -5, 91);

         buffer.invokeCharacters(utra_RSCP.toString());
         buffer.getContext().eventDispatcher.endElement("utra_RSCP", -1);
      }
      else {
         utra_RSCP = null;
      }

      // decode utra_EcN0

      if (utra_EcN0Present) {
         buffer.getContext().eventDispatcher.startElement("utra_EcN0", -1);

         utra_EcN0 = new Asn1Integer();
         utra_EcN0.decode (buffer, 0, 49);

         buffer.invokeCharacters(utra_EcN0.toString());
         buffer.getContext().eventDispatcher.endElement("utra_EcN0", -1);
      }
      else {
         utra_EcN0 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean additionalSI_Info_r9Present = buffer.decodeBit ("additionalSI_Info_r9Present");

            // decode additionalSI_Info_r9

            if (additionalSI_Info_r9Present) {
               buffer.getContext().eventDispatcher.startElement("additionalSI_Info_r9", -1);

               additionalSI_Info_r9 = new AdditionalSI_Info_r9();
               additionalSI_Info_r9.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("additionalSI_Info_r9", -1);
            }
            else {
               additionalSI_Info_r9 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean primaryPLMN_Suitable_r12Present = buffer.decodeBit ("primaryPLMN_Suitable_r12Present");

            // decode primaryPLMN_Suitable_r12

            if (primaryPLMN_Suitable_r12Present) {
               buffer.getContext().eventDispatcher.startElement("primaryPLMN_Suitable_r12", -1);

               int tval = MeasResultUTRA_measResult_primaryPLMN_Suitable_r12.decodeEnumValue (buffer);
               primaryPLMN_Suitable_r12 = MeasResultUTRA_measResult_primaryPLMN_Suitable_r12.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("primaryPLMN_Suitable_r12", -1);
            }
            else {
               primaryPLMN_Suitable_r12 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (utra_RSCP != null) utra_RSCP.print (_sb, "utra_RSCP", _level+1);
      if (utra_EcN0 != null) utra_EcN0.print (_sb, "utra_EcN0", _level+1);
      if (additionalSI_Info_r9 != null) additionalSI_Info_r9.print (_sb, "additionalSI_Info_r9", _level+1);
      if (primaryPLMN_Suitable_r12 != null) primaryPLMN_Suitable_r12.print (_sb, "primaryPLMN_Suitable_r12", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
