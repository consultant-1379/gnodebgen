/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class UE_EUTRA_Capability extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "UE-EUTRA-Capability";
   }

   public AccessStratumRelease accessStratumRelease = null;
   public Asn1Integer ue_Category;
   public PDCP_Parameters pdcp_Parameters;
   public PhyLayerParameters phyLayerParameters;
   public RF_Parameters rf_Parameters;
   public MeasParameters measParameters;
   public Asn1BitString featureGroupIndicators;  // optional
   public UE_EUTRA_Capability_interRAT_Parameters interRAT_Parameters;
   public UE_EUTRA_Capability_v920_IEs nonCriticalExtension;  // optional

   public UE_EUTRA_Capability () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public UE_EUTRA_Capability (
      AccessStratumRelease accessStratumRelease_,
      Asn1Integer ue_Category_,
      PDCP_Parameters pdcp_Parameters_,
      PhyLayerParameters phyLayerParameters_,
      RF_Parameters rf_Parameters_,
      MeasParameters measParameters_,
      Asn1BitString featureGroupIndicators_,
      UE_EUTRA_Capability_interRAT_Parameters interRAT_Parameters_,
      UE_EUTRA_Capability_v920_IEs nonCriticalExtension_
   ) {
      super();
      accessStratumRelease = accessStratumRelease_;
      ue_Category = ue_Category_;
      pdcp_Parameters = pdcp_Parameters_;
      phyLayerParameters = phyLayerParameters_;
      rf_Parameters = rf_Parameters_;
      measParameters = measParameters_;
      featureGroupIndicators = featureGroupIndicators_;
      interRAT_Parameters = interRAT_Parameters_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public UE_EUTRA_Capability (
      AccessStratumRelease accessStratumRelease_,
      Asn1Integer ue_Category_,
      PDCP_Parameters pdcp_Parameters_,
      PhyLayerParameters phyLayerParameters_,
      RF_Parameters rf_Parameters_,
      MeasParameters measParameters_,
      UE_EUTRA_Capability_interRAT_Parameters interRAT_Parameters_
   ) {
      super();
      accessStratumRelease = accessStratumRelease_;
      ue_Category = ue_Category_;
      pdcp_Parameters = pdcp_Parameters_;
      phyLayerParameters = phyLayerParameters_;
      rf_Parameters = rf_Parameters_;
      measParameters = measParameters_;
      interRAT_Parameters = interRAT_Parameters_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public UE_EUTRA_Capability (AccessStratumRelease accessStratumRelease_,
      long ue_Category_,
      PDCP_Parameters pdcp_Parameters_,
      PhyLayerParameters phyLayerParameters_,
      RF_Parameters rf_Parameters_,
      MeasParameters measParameters_,
      Asn1BitString featureGroupIndicators_,
      UE_EUTRA_Capability_interRAT_Parameters interRAT_Parameters_,
      UE_EUTRA_Capability_v920_IEs nonCriticalExtension_
   ) {
      super();
      accessStratumRelease = accessStratumRelease_;
      ue_Category = new Asn1Integer (ue_Category_);
      pdcp_Parameters = pdcp_Parameters_;
      phyLayerParameters = phyLayerParameters_;
      rf_Parameters = rf_Parameters_;
      measParameters = measParameters_;
      featureGroupIndicators = featureGroupIndicators_;
      interRAT_Parameters = interRAT_Parameters_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public UE_EUTRA_Capability (
      AccessStratumRelease accessStratumRelease_,
      long ue_Category_,
      PDCP_Parameters pdcp_Parameters_,
      PhyLayerParameters phyLayerParameters_,
      RF_Parameters rf_Parameters_,
      MeasParameters measParameters_,
      UE_EUTRA_Capability_interRAT_Parameters interRAT_Parameters_
   ) {
      super();
      accessStratumRelease = accessStratumRelease_;
      ue_Category = new Asn1Integer (ue_Category_);
      pdcp_Parameters = pdcp_Parameters_;
      phyLayerParameters = phyLayerParameters_;
      rf_Parameters = rf_Parameters_;
      measParameters = measParameters_;
      interRAT_Parameters = interRAT_Parameters_;
   }

   public void init () {
      accessStratumRelease = null;
      ue_Category = null;
      pdcp_Parameters = null;
      phyLayerParameters = null;
      rf_Parameters = null;
      measParameters = null;
      featureGroupIndicators = null;
      interRAT_Parameters = null;
      nonCriticalExtension = null;
   }

   public int getElementCount() { return 9; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return accessStratumRelease;
         case 1: return ue_Category;
         case 2: return pdcp_Parameters;
         case 3: return phyLayerParameters;
         case 4: return rf_Parameters;
         case 5: return measParameters;
         case 6: return featureGroupIndicators;
         case 7: return interRAT_Parameters;
         case 8: return nonCriticalExtension;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "accessStratumRelease";
         case 1: return "ue-Category";
         case 2: return "pdcp-Parameters";
         case 3: return "phyLayerParameters";
         case 4: return "rf-Parameters";
         case 5: return "measParameters";
         case 6: return "featureGroupIndicators";
         case 7: return "interRAT-Parameters";
         case 8: return "nonCriticalExtension";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean featureGroupIndicatorsPresent = buffer.decodeBit ("featureGroupIndicatorsPresent");
      boolean nonCriticalExtensionPresent = buffer.decodeBit ("nonCriticalExtensionPresent");

      // decode accessStratumRelease

      buffer.getContext().eventDispatcher.startElement("accessStratumRelease", -1);

      {
         int tval = AccessStratumRelease.decodeEnumValue (buffer);
         accessStratumRelease = AccessStratumRelease.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("accessStratumRelease", -1);

      // decode ue_Category

      buffer.getContext().eventDispatcher.startElement("ue_Category", -1);

      ue_Category = new Asn1Integer();
      ue_Category.decode (buffer, 1, 5);

      buffer.invokeCharacters(ue_Category.toString());
      buffer.getContext().eventDispatcher.endElement("ue_Category", -1);

      // decode pdcp_Parameters

      buffer.getContext().eventDispatcher.startElement("pdcp_Parameters", -1);

      pdcp_Parameters = new PDCP_Parameters();
      pdcp_Parameters.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("pdcp_Parameters", -1);

      // decode phyLayerParameters

      buffer.getContext().eventDispatcher.startElement("phyLayerParameters", -1);

      phyLayerParameters = new PhyLayerParameters();
      phyLayerParameters.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("phyLayerParameters", -1);

      // decode rf_Parameters

      buffer.getContext().eventDispatcher.startElement("rf_Parameters", -1);

      rf_Parameters = new RF_Parameters();
      rf_Parameters.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("rf_Parameters", -1);

      // decode measParameters

      buffer.getContext().eventDispatcher.startElement("measParameters", -1);

      measParameters = new MeasParameters();
      measParameters.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("measParameters", -1);

      // decode featureGroupIndicators

      if (featureGroupIndicatorsPresent) {
         buffer.getContext().eventDispatcher.startElement("featureGroupIndicators", -1);

         featureGroupIndicators = new Asn1BitString();
         featureGroupIndicators.decode (buffer, 32, 32);

         buffer.invokeCharacters(featureGroupIndicators.toString());
         buffer.getContext().eventDispatcher.endElement("featureGroupIndicators", -1);
      }
      else {
         featureGroupIndicators = null;
      }

      // decode interRAT_Parameters

      buffer.getContext().eventDispatcher.startElement("interRAT_Parameters", -1);

      interRAT_Parameters = new UE_EUTRA_Capability_interRAT_Parameters();
      interRAT_Parameters.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("interRAT_Parameters", -1);

      // decode nonCriticalExtension

      if (nonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension = new UE_EUTRA_Capability_v920_IEs();
         nonCriticalExtension.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }
      else {
         nonCriticalExtension = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (accessStratumRelease != null) accessStratumRelease.print (_sb, "accessStratumRelease", _level+1);
      if (ue_Category != null) ue_Category.print (_sb, "ue_Category", _level+1);
      if (pdcp_Parameters != null) pdcp_Parameters.print (_sb, "pdcp_Parameters", _level+1);
      if (phyLayerParameters != null) phyLayerParameters.print (_sb, "phyLayerParameters", _level+1);
      if (rf_Parameters != null) rf_Parameters.print (_sb, "rf_Parameters", _level+1);
      if (measParameters != null) measParameters.print (_sb, "measParameters", _level+1);
      if (featureGroupIndicators != null) featureGroupIndicators.print (_sb, "featureGroupIndicators", _level+1);
      if (interRAT_Parameters != null) interRAT_Parameters.print (_sb, "interRAT_Parameters", _level+1);
      if (nonCriticalExtension != null) nonCriticalExtension.print (_sb, "nonCriticalExtension", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
