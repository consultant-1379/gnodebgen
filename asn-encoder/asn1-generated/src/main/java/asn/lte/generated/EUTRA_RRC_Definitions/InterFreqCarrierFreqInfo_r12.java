/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class InterFreqCarrierFreqInfo_r12 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "InterFreqCarrierFreqInfo-r12";
   }

   public ARFCN_ValueEUTRA_r9 dl_CarrierFreq_r12;
   public Q_RxLevMin q_RxLevMin_r12;
   public P_Max p_Max_r12;  // optional
   public T_Reselection t_ReselectionEUTRA_r12;
   public SpeedStateScaleFactors t_ReselectionEUTRA_SF_r12;  // optional
   public ReselectionThreshold threshX_High_r12;
   public ReselectionThreshold threshX_Low_r12;
   public AllowedMeasBandwidth allowedMeasBandwidth_r12 = null;
   public PresenceAntennaPort1 presenceAntennaPort1_r12;
   public CellReselectionPriority cellReselectionPriority_r12;  // optional
   public NeighCellConfig neighCellConfig_r12;
   public Q_OffsetRange q_OffsetFreq_r12 = null;  // default = Q_OffsetRange.dB0()
   public InterFreqNeighCellList interFreqNeighCellList_r12;  // optional
   public InterFreqBlackCellList interFreqBlackCellList_r12;  // optional
   public Q_QualMin_r9 q_QualMin_r12;  // optional
   public InterFreqCarrierFreqInfo_r12_threshX_Q_r12 threshX_Q_r12;  // optional
   public Q_QualMin_r9 q_QualMinWB_r12;  // optional
   public MultiBandInfoList_r11 multiBandInfoList_r12;  // optional
   public InterFreqCarrierFreqInfo_r12_reducedMeasPerformance_r12 reducedMeasPerformance_r12 = null;  // optional
   public Q_QualMin_r9 q_QualMinRSRQ_OnAllSymbols_r12;  // optional
   public Asn1OpenExt extElem1;

   public InterFreqCarrierFreqInfo_r12 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public InterFreqCarrierFreqInfo_r12 (
      ARFCN_ValueEUTRA_r9 dl_CarrierFreq_r12_,
      Q_RxLevMin q_RxLevMin_r12_,
      P_Max p_Max_r12_,
      T_Reselection t_ReselectionEUTRA_r12_,
      SpeedStateScaleFactors t_ReselectionEUTRA_SF_r12_,
      ReselectionThreshold threshX_High_r12_,
      ReselectionThreshold threshX_Low_r12_,
      AllowedMeasBandwidth allowedMeasBandwidth_r12_,
      PresenceAntennaPort1 presenceAntennaPort1_r12_,
      CellReselectionPriority cellReselectionPriority_r12_,
      NeighCellConfig neighCellConfig_r12_,
      Q_OffsetRange q_OffsetFreq_r12_,
      InterFreqNeighCellList interFreqNeighCellList_r12_,
      InterFreqBlackCellList interFreqBlackCellList_r12_,
      Q_QualMin_r9 q_QualMin_r12_,
      InterFreqCarrierFreqInfo_r12_threshX_Q_r12 threshX_Q_r12_,
      Q_QualMin_r9 q_QualMinWB_r12_,
      MultiBandInfoList_r11 multiBandInfoList_r12_,
      InterFreqCarrierFreqInfo_r12_reducedMeasPerformance_r12 reducedMeasPerformance_r12_,
      Q_QualMin_r9 q_QualMinRSRQ_OnAllSymbols_r12_
   ) {
      super();
      dl_CarrierFreq_r12 = dl_CarrierFreq_r12_;
      q_RxLevMin_r12 = q_RxLevMin_r12_;
      p_Max_r12 = p_Max_r12_;
      t_ReselectionEUTRA_r12 = t_ReselectionEUTRA_r12_;
      t_ReselectionEUTRA_SF_r12 = t_ReselectionEUTRA_SF_r12_;
      threshX_High_r12 = threshX_High_r12_;
      threshX_Low_r12 = threshX_Low_r12_;
      allowedMeasBandwidth_r12 = allowedMeasBandwidth_r12_;
      presenceAntennaPort1_r12 = presenceAntennaPort1_r12_;
      cellReselectionPriority_r12 = cellReselectionPriority_r12_;
      neighCellConfig_r12 = neighCellConfig_r12_;
      q_OffsetFreq_r12 = q_OffsetFreq_r12_;
      interFreqNeighCellList_r12 = interFreqNeighCellList_r12_;
      interFreqBlackCellList_r12 = interFreqBlackCellList_r12_;
      q_QualMin_r12 = q_QualMin_r12_;
      threshX_Q_r12 = threshX_Q_r12_;
      q_QualMinWB_r12 = q_QualMinWB_r12_;
      multiBandInfoList_r12 = multiBandInfoList_r12_;
      reducedMeasPerformance_r12 = reducedMeasPerformance_r12_;
      q_QualMinRSRQ_OnAllSymbols_r12 = q_QualMinRSRQ_OnAllSymbols_r12_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public InterFreqCarrierFreqInfo_r12 (
      ARFCN_ValueEUTRA_r9 dl_CarrierFreq_r12_,
      Q_RxLevMin q_RxLevMin_r12_,
      T_Reselection t_ReselectionEUTRA_r12_,
      ReselectionThreshold threshX_High_r12_,
      ReselectionThreshold threshX_Low_r12_,
      AllowedMeasBandwidth allowedMeasBandwidth_r12_,
      PresenceAntennaPort1 presenceAntennaPort1_r12_,
      NeighCellConfig neighCellConfig_r12_
   ) {
      super();
      dl_CarrierFreq_r12 = dl_CarrierFreq_r12_;
      q_RxLevMin_r12 = q_RxLevMin_r12_;
      t_ReselectionEUTRA_r12 = t_ReselectionEUTRA_r12_;
      threshX_High_r12 = threshX_High_r12_;
      threshX_Low_r12 = threshX_Low_r12_;
      allowedMeasBandwidth_r12 = allowedMeasBandwidth_r12_;
      presenceAntennaPort1_r12 = presenceAntennaPort1_r12_;
      neighCellConfig_r12 = neighCellConfig_r12_;
      q_OffsetFreq_r12 = Q_OffsetRange.dB0();
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public InterFreqCarrierFreqInfo_r12 (long dl_CarrierFreq_r12_,
      long q_RxLevMin_r12_,
      long p_Max_r12_,
      long t_ReselectionEUTRA_r12_,
      SpeedStateScaleFactors t_ReselectionEUTRA_SF_r12_,
      long threshX_High_r12_,
      long threshX_Low_r12_,
      AllowedMeasBandwidth allowedMeasBandwidth_r12_,
      boolean presenceAntennaPort1_r12_,
      long cellReselectionPriority_r12_,
      NeighCellConfig neighCellConfig_r12_,
      Q_OffsetRange q_OffsetFreq_r12_,
      InterFreqNeighCellList interFreqNeighCellList_r12_,
      InterFreqBlackCellList interFreqBlackCellList_r12_,
      long q_QualMin_r12_,
      InterFreqCarrierFreqInfo_r12_threshX_Q_r12 threshX_Q_r12_,
      long q_QualMinWB_r12_,
      MultiBandInfoList_r11 multiBandInfoList_r12_,
      InterFreqCarrierFreqInfo_r12_reducedMeasPerformance_r12 reducedMeasPerformance_r12_,
      long q_QualMinRSRQ_OnAllSymbols_r12_
   ) {
      super();
      dl_CarrierFreq_r12 = new ARFCN_ValueEUTRA_r9 (dl_CarrierFreq_r12_);
      q_RxLevMin_r12 = new Q_RxLevMin (q_RxLevMin_r12_);
      p_Max_r12 = new P_Max (p_Max_r12_);
      t_ReselectionEUTRA_r12 = new T_Reselection (t_ReselectionEUTRA_r12_);
      t_ReselectionEUTRA_SF_r12 = t_ReselectionEUTRA_SF_r12_;
      threshX_High_r12 = new ReselectionThreshold (threshX_High_r12_);
      threshX_Low_r12 = new ReselectionThreshold (threshX_Low_r12_);
      allowedMeasBandwidth_r12 = allowedMeasBandwidth_r12_;
      presenceAntennaPort1_r12 = new PresenceAntennaPort1 (presenceAntennaPort1_r12_);
      cellReselectionPriority_r12 = new CellReselectionPriority (cellReselectionPriority_r12_);
      neighCellConfig_r12 = neighCellConfig_r12_;
      q_OffsetFreq_r12 = q_OffsetFreq_r12_;
      interFreqNeighCellList_r12 = interFreqNeighCellList_r12_;
      interFreqBlackCellList_r12 = interFreqBlackCellList_r12_;
      q_QualMin_r12 = new Q_QualMin_r9 (q_QualMin_r12_);
      threshX_Q_r12 = threshX_Q_r12_;
      q_QualMinWB_r12 = new Q_QualMin_r9 (q_QualMinWB_r12_);
      multiBandInfoList_r12 = multiBandInfoList_r12_;
      reducedMeasPerformance_r12 = reducedMeasPerformance_r12_;
      q_QualMinRSRQ_OnAllSymbols_r12 = new Q_QualMin_r9 (q_QualMinRSRQ_OnAllSymbols_r12_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public InterFreqCarrierFreqInfo_r12 (
      long dl_CarrierFreq_r12_,
      long q_RxLevMin_r12_,
      long t_ReselectionEUTRA_r12_,
      long threshX_High_r12_,
      long threshX_Low_r12_,
      AllowedMeasBandwidth allowedMeasBandwidth_r12_,
      boolean presenceAntennaPort1_r12_,
      NeighCellConfig neighCellConfig_r12_
   ) {
      super();
      dl_CarrierFreq_r12 = new ARFCN_ValueEUTRA_r9 (dl_CarrierFreq_r12_);
      q_RxLevMin_r12 = new Q_RxLevMin (q_RxLevMin_r12_);
      t_ReselectionEUTRA_r12 = new T_Reselection (t_ReselectionEUTRA_r12_);
      threshX_High_r12 = new ReselectionThreshold (threshX_High_r12_);
      threshX_Low_r12 = new ReselectionThreshold (threshX_Low_r12_);
      allowedMeasBandwidth_r12 = allowedMeasBandwidth_r12_;
      presenceAntennaPort1_r12 = new PresenceAntennaPort1 (presenceAntennaPort1_r12_);
      neighCellConfig_r12 = neighCellConfig_r12_;
      q_OffsetFreq_r12 = Q_OffsetRange.dB0();
   }

   public void init () {
      dl_CarrierFreq_r12 = null;
      q_RxLevMin_r12 = null;
      p_Max_r12 = null;
      t_ReselectionEUTRA_r12 = null;
      t_ReselectionEUTRA_SF_r12 = null;
      threshX_High_r12 = null;
      threshX_Low_r12 = null;
      allowedMeasBandwidth_r12 = null;
      presenceAntennaPort1_r12 = null;
      cellReselectionPriority_r12 = null;
      neighCellConfig_r12 = null;
      q_OffsetFreq_r12 = Q_OffsetRange.dB0();
      interFreqNeighCellList_r12 = null;
      interFreqBlackCellList_r12 = null;
      q_QualMin_r12 = null;
      threshX_Q_r12 = null;
      q_QualMinWB_r12 = null;
      multiBandInfoList_r12 = null;
      reducedMeasPerformance_r12 = null;
      q_QualMinRSRQ_OnAllSymbols_r12 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 21; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return dl_CarrierFreq_r12;
         case 1: return q_RxLevMin_r12;
         case 2: return p_Max_r12;
         case 3: return t_ReselectionEUTRA_r12;
         case 4: return t_ReselectionEUTRA_SF_r12;
         case 5: return threshX_High_r12;
         case 6: return threshX_Low_r12;
         case 7: return allowedMeasBandwidth_r12;
         case 8: return presenceAntennaPort1_r12;
         case 9: return cellReselectionPriority_r12;
         case 10: return neighCellConfig_r12;
         case 11: return q_OffsetFreq_r12;
         case 12: return interFreqNeighCellList_r12;
         case 13: return interFreqBlackCellList_r12;
         case 14: return q_QualMin_r12;
         case 15: return threshX_Q_r12;
         case 16: return q_QualMinWB_r12;
         case 17: return multiBandInfoList_r12;
         case 18: return reducedMeasPerformance_r12;
         case 19: return q_QualMinRSRQ_OnAllSymbols_r12;
         case 20: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "dl-CarrierFreq-r12";
         case 1: return "q-RxLevMin-r12";
         case 2: return "p-Max-r12";
         case 3: return "t-ReselectionEUTRA-r12";
         case 4: return "t-ReselectionEUTRA-SF-r12";
         case 5: return "threshX-High-r12";
         case 6: return "threshX-Low-r12";
         case 7: return "allowedMeasBandwidth-r12";
         case 8: return "presenceAntennaPort1-r12";
         case 9: return "cellReselectionPriority-r12";
         case 10: return "neighCellConfig-r12";
         case 11: return "q-OffsetFreq-r12";
         case 12: return "interFreqNeighCellList-r12";
         case 13: return "interFreqBlackCellList-r12";
         case 14: return "q-QualMin-r12";
         case 15: return "threshX-Q-r12";
         case 16: return "q-QualMinWB-r12";
         case 17: return "multiBandInfoList-r12";
         case 18: return "reducedMeasPerformance-r12";
         case 19: return "q-QualMinRSRQ-OnAllSymbols-r12";
         case 20: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean p_Max_r12Present = buffer.decodeBit ("p_Max_r12Present");
      boolean t_ReselectionEUTRA_SF_r12Present = buffer.decodeBit ("t_ReselectionEUTRA_SF_r12Present");
      boolean cellReselectionPriority_r12Present = buffer.decodeBit ("cellReselectionPriority_r12Present");
      boolean q_OffsetFreq_r12Present = buffer.decodeBit ("q_OffsetFreq_r12Present");
      boolean interFreqNeighCellList_r12Present = buffer.decodeBit ("interFreqNeighCellList_r12Present");
      boolean interFreqBlackCellList_r12Present = buffer.decodeBit ("interFreqBlackCellList_r12Present");
      boolean q_QualMin_r12Present = buffer.decodeBit ("q_QualMin_r12Present");
      boolean threshX_Q_r12Present = buffer.decodeBit ("threshX_Q_r12Present");
      boolean q_QualMinWB_r12Present = buffer.decodeBit ("q_QualMinWB_r12Present");
      boolean multiBandInfoList_r12Present = buffer.decodeBit ("multiBandInfoList_r12Present");
      boolean reducedMeasPerformance_r12Present = buffer.decodeBit ("reducedMeasPerformance_r12Present");
      boolean q_QualMinRSRQ_OnAllSymbols_r12Present = buffer.decodeBit ("q_QualMinRSRQ_OnAllSymbols_r12Present");

      // decode dl_CarrierFreq_r12

      buffer.getContext().eventDispatcher.startElement("dl_CarrierFreq_r12", -1);

      dl_CarrierFreq_r12 = new ARFCN_ValueEUTRA_r9();
      dl_CarrierFreq_r12.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("dl_CarrierFreq_r12", -1);

      // decode q_RxLevMin_r12

      buffer.getContext().eventDispatcher.startElement("q_RxLevMin_r12", -1);

      q_RxLevMin_r12 = new Q_RxLevMin();
      q_RxLevMin_r12.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("q_RxLevMin_r12", -1);

      // decode p_Max_r12

      if (p_Max_r12Present) {
         buffer.getContext().eventDispatcher.startElement("p_Max_r12", -1);

         p_Max_r12 = new P_Max();
         p_Max_r12.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("p_Max_r12", -1);
      }
      else {
         p_Max_r12 = null;
      }

      // decode t_ReselectionEUTRA_r12

      buffer.getContext().eventDispatcher.startElement("t_ReselectionEUTRA_r12", -1);

      t_ReselectionEUTRA_r12 = new T_Reselection();
      t_ReselectionEUTRA_r12.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("t_ReselectionEUTRA_r12", -1);

      // decode t_ReselectionEUTRA_SF_r12

      if (t_ReselectionEUTRA_SF_r12Present) {
         buffer.getContext().eventDispatcher.startElement("t_ReselectionEUTRA_SF_r12", -1);

         t_ReselectionEUTRA_SF_r12 = new SpeedStateScaleFactors();
         t_ReselectionEUTRA_SF_r12.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("t_ReselectionEUTRA_SF_r12", -1);
      }
      else {
         t_ReselectionEUTRA_SF_r12 = null;
      }

      // decode threshX_High_r12

      buffer.getContext().eventDispatcher.startElement("threshX_High_r12", -1);

      threshX_High_r12 = new ReselectionThreshold();
      threshX_High_r12.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("threshX_High_r12", -1);

      // decode threshX_Low_r12

      buffer.getContext().eventDispatcher.startElement("threshX_Low_r12", -1);

      threshX_Low_r12 = new ReselectionThreshold();
      threshX_Low_r12.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("threshX_Low_r12", -1);

      // decode allowedMeasBandwidth_r12

      buffer.getContext().eventDispatcher.startElement("allowedMeasBandwidth_r12", -1);

      {
         int tval = AllowedMeasBandwidth.decodeEnumValue (buffer);
         allowedMeasBandwidth_r12 = AllowedMeasBandwidth.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("allowedMeasBandwidth_r12", -1);

      // decode presenceAntennaPort1_r12

      buffer.getContext().eventDispatcher.startElement("presenceAntennaPort1_r12", -1);

      presenceAntennaPort1_r12 = new PresenceAntennaPort1();
      presenceAntennaPort1_r12.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("presenceAntennaPort1_r12", -1);

      // decode cellReselectionPriority_r12

      if (cellReselectionPriority_r12Present) {
         buffer.getContext().eventDispatcher.startElement("cellReselectionPriority_r12", -1);

         cellReselectionPriority_r12 = new CellReselectionPriority();
         cellReselectionPriority_r12.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("cellReselectionPriority_r12", -1);
      }
      else {
         cellReselectionPriority_r12 = null;
      }

      // decode neighCellConfig_r12

      buffer.getContext().eventDispatcher.startElement("neighCellConfig_r12", -1);

      neighCellConfig_r12 = new NeighCellConfig();
      neighCellConfig_r12.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("neighCellConfig_r12", -1);

      // decode q_OffsetFreq_r12

      if (q_OffsetFreq_r12Present) {
         buffer.getContext().eventDispatcher.startElement("q_OffsetFreq_r12", -1);

         int tval = Q_OffsetRange.decodeEnumValue (buffer);
         q_OffsetFreq_r12 = Q_OffsetRange.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("q_OffsetFreq_r12", -1);
      }
      else {
         q_OffsetFreq_r12 = Q_OffsetRange.dB0();
      }

      // decode interFreqNeighCellList_r12

      if (interFreqNeighCellList_r12Present) {
         buffer.getContext().eventDispatcher.startElement("interFreqNeighCellList_r12", -1);

         interFreqNeighCellList_r12 = new InterFreqNeighCellList();
         interFreqNeighCellList_r12.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("interFreqNeighCellList_r12", -1);
      }
      else {
         interFreqNeighCellList_r12 = null;
      }

      // decode interFreqBlackCellList_r12

      if (interFreqBlackCellList_r12Present) {
         buffer.getContext().eventDispatcher.startElement("interFreqBlackCellList_r12", -1);

         interFreqBlackCellList_r12 = new InterFreqBlackCellList();
         interFreqBlackCellList_r12.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("interFreqBlackCellList_r12", -1);
      }
      else {
         interFreqBlackCellList_r12 = null;
      }

      // decode q_QualMin_r12

      if (q_QualMin_r12Present) {
         buffer.getContext().eventDispatcher.startElement("q_QualMin_r12", -1);

         q_QualMin_r12 = new Q_QualMin_r9();
         q_QualMin_r12.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("q_QualMin_r12", -1);
      }
      else {
         q_QualMin_r12 = null;
      }

      // decode threshX_Q_r12

      if (threshX_Q_r12Present) {
         buffer.getContext().eventDispatcher.startElement("threshX_Q_r12", -1);

         threshX_Q_r12 = new InterFreqCarrierFreqInfo_r12_threshX_Q_r12();
         threshX_Q_r12.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("threshX_Q_r12", -1);
      }
      else {
         threshX_Q_r12 = null;
      }

      // decode q_QualMinWB_r12

      if (q_QualMinWB_r12Present) {
         buffer.getContext().eventDispatcher.startElement("q_QualMinWB_r12", -1);

         q_QualMinWB_r12 = new Q_QualMin_r9();
         q_QualMinWB_r12.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("q_QualMinWB_r12", -1);
      }
      else {
         q_QualMinWB_r12 = null;
      }

      // decode multiBandInfoList_r12

      if (multiBandInfoList_r12Present) {
         buffer.getContext().eventDispatcher.startElement("multiBandInfoList_r12", -1);

         multiBandInfoList_r12 = new MultiBandInfoList_r11();
         multiBandInfoList_r12.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("multiBandInfoList_r12", -1);
      }
      else {
         multiBandInfoList_r12 = null;
      }

      // decode reducedMeasPerformance_r12

      if (reducedMeasPerformance_r12Present) {
         buffer.getContext().eventDispatcher.startElement("reducedMeasPerformance_r12", -1);

         int tval = InterFreqCarrierFreqInfo_r12_reducedMeasPerformance_r12.decodeEnumValue (buffer);
         reducedMeasPerformance_r12 = InterFreqCarrierFreqInfo_r12_reducedMeasPerformance_r12.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("reducedMeasPerformance_r12", -1);
      }
      else {
         reducedMeasPerformance_r12 = null;
      }

      // decode q_QualMinRSRQ_OnAllSymbols_r12

      if (q_QualMinRSRQ_OnAllSymbols_r12Present) {
         buffer.getContext().eventDispatcher.startElement("q_QualMinRSRQ_OnAllSymbols_r12", -1);

         q_QualMinRSRQ_OnAllSymbols_r12 = new Q_QualMin_r9();
         q_QualMinRSRQ_OnAllSymbols_r12.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("q_QualMinRSRQ_OnAllSymbols_r12", -1);
      }
      else {
         q_QualMinRSRQ_OnAllSymbols_r12 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (dl_CarrierFreq_r12 != null) dl_CarrierFreq_r12.print (_sb, "dl_CarrierFreq_r12", _level+1);
      if (q_RxLevMin_r12 != null) q_RxLevMin_r12.print (_sb, "q_RxLevMin_r12", _level+1);
      if (p_Max_r12 != null) p_Max_r12.print (_sb, "p_Max_r12", _level+1);
      if (t_ReselectionEUTRA_r12 != null) t_ReselectionEUTRA_r12.print (_sb, "t_ReselectionEUTRA_r12", _level+1);
      if (t_ReselectionEUTRA_SF_r12 != null) t_ReselectionEUTRA_SF_r12.print (_sb, "t_ReselectionEUTRA_SF_r12", _level+1);
      if (threshX_High_r12 != null) threshX_High_r12.print (_sb, "threshX_High_r12", _level+1);
      if (threshX_Low_r12 != null) threshX_Low_r12.print (_sb, "threshX_Low_r12", _level+1);
      if (allowedMeasBandwidth_r12 != null) allowedMeasBandwidth_r12.print (_sb, "allowedMeasBandwidth_r12", _level+1);
      if (presenceAntennaPort1_r12 != null) presenceAntennaPort1_r12.print (_sb, "presenceAntennaPort1_r12", _level+1);
      if (cellReselectionPriority_r12 != null) cellReselectionPriority_r12.print (_sb, "cellReselectionPriority_r12", _level+1);
      if (neighCellConfig_r12 != null) neighCellConfig_r12.print (_sb, "neighCellConfig_r12", _level+1);
      if (q_OffsetFreq_r12 != null) q_OffsetFreq_r12.print (_sb, "q_OffsetFreq_r12", _level+1);
      if (interFreqNeighCellList_r12 != null) interFreqNeighCellList_r12.print (_sb, "interFreqNeighCellList_r12", _level+1);
      if (interFreqBlackCellList_r12 != null) interFreqBlackCellList_r12.print (_sb, "interFreqBlackCellList_r12", _level+1);
      if (q_QualMin_r12 != null) q_QualMin_r12.print (_sb, "q_QualMin_r12", _level+1);
      if (threshX_Q_r12 != null) threshX_Q_r12.print (_sb, "threshX_Q_r12", _level+1);
      if (q_QualMinWB_r12 != null) q_QualMinWB_r12.print (_sb, "q_QualMinWB_r12", _level+1);
      if (multiBandInfoList_r12 != null) multiBandInfoList_r12.print (_sb, "multiBandInfoList_r12", _level+1);
      if (reducedMeasPerformance_r12 != null) reducedMeasPerformance_r12.print (_sb, "reducedMeasPerformance_r12", _level+1);
      if (q_QualMinRSRQ_OnAllSymbols_r12 != null) q_QualMinRSRQ_OnAllSymbols_r12.print (_sb, "q_QualMinRSRQ_OnAllSymbols_r12", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
