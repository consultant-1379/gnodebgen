/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class UE_EUTRA_Capability_v1310_IEs extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "UE-EUTRA-Capability-v1310-IEs";
   }

   public UE_EUTRA_Capability_v1310_IEs_ue_CategoryDL_v1310 ue_CategoryDL_v1310 = null;  // optional
   public UE_EUTRA_Capability_v1310_IEs_ue_CategoryUL_v1310 ue_CategoryUL_v1310 = null;  // optional
   public PDCP_Parameters_v1310 pdcp_Parameters_v1310;
   public RLC_Parameters_v1310 rlc_Parameters_v1310;
   public MAC_Parameters_v1310 mac_Parameters_v1310;  // optional
   public PhyLayerParameters_v1310 phyLayerParameters_v1310;  // optional
   public RF_Parameters_v1310 rf_Parameters_v1310;  // optional
   public MeasParameters_v1310 measParameters_v1310;  // optional
   public DC_Parameters_v1310 dc_Parameters_v1310;  // optional
   public SL_Parameters_v1310 sl_Parameters_v1310;  // optional
   public SCPTM_Parameters_r13 scptm_Parameters_r13;  // optional
   public CE_Parameters_r13 ce_Parameters_r13;  // optional
   public IRAT_ParametersWLAN_r13 interRAT_ParametersWLAN_r13;
   public LAA_Parameters_r13 laa_Parameters_r13;  // optional
   public LWA_Parameters_r13 lwa_Parameters_r13;  // optional
   public WLAN_IW_Parameters_v1310 wlan_IW_Parameters_v1310;
   public LWIP_Parameters_r13 lwip_Parameters_r13;
   public UE_EUTRA_CapabilityAddXDD_Mode_v1310 fdd_Add_UE_EUTRA_Capabilities_v1310;  // optional
   public UE_EUTRA_CapabilityAddXDD_Mode_v1310 tdd_Add_UE_EUTRA_Capabilities_v1310;  // optional
   public UE_EUTRA_Capability_v1320_IEs nonCriticalExtension;  // optional

   public UE_EUTRA_Capability_v1310_IEs () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public UE_EUTRA_Capability_v1310_IEs (
      UE_EUTRA_Capability_v1310_IEs_ue_CategoryDL_v1310 ue_CategoryDL_v1310_,
      UE_EUTRA_Capability_v1310_IEs_ue_CategoryUL_v1310 ue_CategoryUL_v1310_,
      PDCP_Parameters_v1310 pdcp_Parameters_v1310_,
      RLC_Parameters_v1310 rlc_Parameters_v1310_,
      MAC_Parameters_v1310 mac_Parameters_v1310_,
      PhyLayerParameters_v1310 phyLayerParameters_v1310_,
      RF_Parameters_v1310 rf_Parameters_v1310_,
      MeasParameters_v1310 measParameters_v1310_,
      DC_Parameters_v1310 dc_Parameters_v1310_,
      SL_Parameters_v1310 sl_Parameters_v1310_,
      SCPTM_Parameters_r13 scptm_Parameters_r13_,
      CE_Parameters_r13 ce_Parameters_r13_,
      IRAT_ParametersWLAN_r13 interRAT_ParametersWLAN_r13_,
      LAA_Parameters_r13 laa_Parameters_r13_,
      LWA_Parameters_r13 lwa_Parameters_r13_,
      WLAN_IW_Parameters_v1310 wlan_IW_Parameters_v1310_,
      LWIP_Parameters_r13 lwip_Parameters_r13_,
      UE_EUTRA_CapabilityAddXDD_Mode_v1310 fdd_Add_UE_EUTRA_Capabilities_v1310_,
      UE_EUTRA_CapabilityAddXDD_Mode_v1310 tdd_Add_UE_EUTRA_Capabilities_v1310_,
      UE_EUTRA_Capability_v1320_IEs nonCriticalExtension_
   ) {
      super();
      ue_CategoryDL_v1310 = ue_CategoryDL_v1310_;
      ue_CategoryUL_v1310 = ue_CategoryUL_v1310_;
      pdcp_Parameters_v1310 = pdcp_Parameters_v1310_;
      rlc_Parameters_v1310 = rlc_Parameters_v1310_;
      mac_Parameters_v1310 = mac_Parameters_v1310_;
      phyLayerParameters_v1310 = phyLayerParameters_v1310_;
      rf_Parameters_v1310 = rf_Parameters_v1310_;
      measParameters_v1310 = measParameters_v1310_;
      dc_Parameters_v1310 = dc_Parameters_v1310_;
      sl_Parameters_v1310 = sl_Parameters_v1310_;
      scptm_Parameters_r13 = scptm_Parameters_r13_;
      ce_Parameters_r13 = ce_Parameters_r13_;
      interRAT_ParametersWLAN_r13 = interRAT_ParametersWLAN_r13_;
      laa_Parameters_r13 = laa_Parameters_r13_;
      lwa_Parameters_r13 = lwa_Parameters_r13_;
      wlan_IW_Parameters_v1310 = wlan_IW_Parameters_v1310_;
      lwip_Parameters_r13 = lwip_Parameters_r13_;
      fdd_Add_UE_EUTRA_Capabilities_v1310 = fdd_Add_UE_EUTRA_Capabilities_v1310_;
      tdd_Add_UE_EUTRA_Capabilities_v1310 = tdd_Add_UE_EUTRA_Capabilities_v1310_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public UE_EUTRA_Capability_v1310_IEs (
      PDCP_Parameters_v1310 pdcp_Parameters_v1310_,
      RLC_Parameters_v1310 rlc_Parameters_v1310_,
      IRAT_ParametersWLAN_r13 interRAT_ParametersWLAN_r13_,
      WLAN_IW_Parameters_v1310 wlan_IW_Parameters_v1310_,
      LWIP_Parameters_r13 lwip_Parameters_r13_
   ) {
      super();
      pdcp_Parameters_v1310 = pdcp_Parameters_v1310_;
      rlc_Parameters_v1310 = rlc_Parameters_v1310_;
      interRAT_ParametersWLAN_r13 = interRAT_ParametersWLAN_r13_;
      wlan_IW_Parameters_v1310 = wlan_IW_Parameters_v1310_;
      lwip_Parameters_r13 = lwip_Parameters_r13_;
   }

   public void init () {
      ue_CategoryDL_v1310 = null;
      ue_CategoryUL_v1310 = null;
      pdcp_Parameters_v1310 = null;
      rlc_Parameters_v1310 = null;
      mac_Parameters_v1310 = null;
      phyLayerParameters_v1310 = null;
      rf_Parameters_v1310 = null;
      measParameters_v1310 = null;
      dc_Parameters_v1310 = null;
      sl_Parameters_v1310 = null;
      scptm_Parameters_r13 = null;
      ce_Parameters_r13 = null;
      interRAT_ParametersWLAN_r13 = null;
      laa_Parameters_r13 = null;
      lwa_Parameters_r13 = null;
      wlan_IW_Parameters_v1310 = null;
      lwip_Parameters_r13 = null;
      fdd_Add_UE_EUTRA_Capabilities_v1310 = null;
      tdd_Add_UE_EUTRA_Capabilities_v1310 = null;
      nonCriticalExtension = null;
   }

   public int getElementCount() { return 20; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return ue_CategoryDL_v1310;
         case 1: return ue_CategoryUL_v1310;
         case 2: return pdcp_Parameters_v1310;
         case 3: return rlc_Parameters_v1310;
         case 4: return mac_Parameters_v1310;
         case 5: return phyLayerParameters_v1310;
         case 6: return rf_Parameters_v1310;
         case 7: return measParameters_v1310;
         case 8: return dc_Parameters_v1310;
         case 9: return sl_Parameters_v1310;
         case 10: return scptm_Parameters_r13;
         case 11: return ce_Parameters_r13;
         case 12: return interRAT_ParametersWLAN_r13;
         case 13: return laa_Parameters_r13;
         case 14: return lwa_Parameters_r13;
         case 15: return wlan_IW_Parameters_v1310;
         case 16: return lwip_Parameters_r13;
         case 17: return fdd_Add_UE_EUTRA_Capabilities_v1310;
         case 18: return tdd_Add_UE_EUTRA_Capabilities_v1310;
         case 19: return nonCriticalExtension;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "ue-CategoryDL-v1310";
         case 1: return "ue-CategoryUL-v1310";
         case 2: return "pdcp-Parameters-v1310";
         case 3: return "rlc-Parameters-v1310";
         case 4: return "mac-Parameters-v1310";
         case 5: return "phyLayerParameters-v1310";
         case 6: return "rf-Parameters-v1310";
         case 7: return "measParameters-v1310";
         case 8: return "dc-Parameters-v1310";
         case 9: return "sl-Parameters-v1310";
         case 10: return "scptm-Parameters-r13";
         case 11: return "ce-Parameters-r13";
         case 12: return "interRAT-ParametersWLAN-r13";
         case 13: return "laa-Parameters-r13";
         case 14: return "lwa-Parameters-r13";
         case 15: return "wlan-IW-Parameters-v1310";
         case 16: return "lwip-Parameters-r13";
         case 17: return "fdd-Add-UE-EUTRA-Capabilities-v1310";
         case 18: return "tdd-Add-UE-EUTRA-Capabilities-v1310";
         case 19: return "nonCriticalExtension";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean ue_CategoryDL_v1310Present = buffer.decodeBit ("ue_CategoryDL_v1310Present");
      boolean ue_CategoryUL_v1310Present = buffer.decodeBit ("ue_CategoryUL_v1310Present");
      boolean mac_Parameters_v1310Present = buffer.decodeBit ("mac_Parameters_v1310Present");
      boolean phyLayerParameters_v1310Present = buffer.decodeBit ("phyLayerParameters_v1310Present");
      boolean rf_Parameters_v1310Present = buffer.decodeBit ("rf_Parameters_v1310Present");
      boolean measParameters_v1310Present = buffer.decodeBit ("measParameters_v1310Present");
      boolean dc_Parameters_v1310Present = buffer.decodeBit ("dc_Parameters_v1310Present");
      boolean sl_Parameters_v1310Present = buffer.decodeBit ("sl_Parameters_v1310Present");
      boolean scptm_Parameters_r13Present = buffer.decodeBit ("scptm_Parameters_r13Present");
      boolean ce_Parameters_r13Present = buffer.decodeBit ("ce_Parameters_r13Present");
      boolean laa_Parameters_r13Present = buffer.decodeBit ("laa_Parameters_r13Present");
      boolean lwa_Parameters_r13Present = buffer.decodeBit ("lwa_Parameters_r13Present");
      boolean fdd_Add_UE_EUTRA_Capabilities_v1310Present = buffer.decodeBit ("fdd_Add_UE_EUTRA_Capabilities_v1310Present");
      boolean tdd_Add_UE_EUTRA_Capabilities_v1310Present = buffer.decodeBit ("tdd_Add_UE_EUTRA_Capabilities_v1310Present");
      boolean nonCriticalExtensionPresent = buffer.decodeBit ("nonCriticalExtensionPresent");

      // decode ue_CategoryDL_v1310

      if (ue_CategoryDL_v1310Present) {
         buffer.getContext().eventDispatcher.startElement("ue_CategoryDL_v1310", -1);

         int tval = UE_EUTRA_Capability_v1310_IEs_ue_CategoryDL_v1310.decodeEnumValue (buffer);
         ue_CategoryDL_v1310 = UE_EUTRA_Capability_v1310_IEs_ue_CategoryDL_v1310.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("ue_CategoryDL_v1310", -1);
      }
      else {
         ue_CategoryDL_v1310 = null;
      }

      // decode ue_CategoryUL_v1310

      if (ue_CategoryUL_v1310Present) {
         buffer.getContext().eventDispatcher.startElement("ue_CategoryUL_v1310", -1);

         int tval = UE_EUTRA_Capability_v1310_IEs_ue_CategoryUL_v1310.decodeEnumValue (buffer);
         ue_CategoryUL_v1310 = UE_EUTRA_Capability_v1310_IEs_ue_CategoryUL_v1310.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("ue_CategoryUL_v1310", -1);
      }
      else {
         ue_CategoryUL_v1310 = null;
      }

      // decode pdcp_Parameters_v1310

      buffer.getContext().eventDispatcher.startElement("pdcp_Parameters_v1310", -1);

      pdcp_Parameters_v1310 = new PDCP_Parameters_v1310();
      pdcp_Parameters_v1310.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("pdcp_Parameters_v1310", -1);

      // decode rlc_Parameters_v1310

      buffer.getContext().eventDispatcher.startElement("rlc_Parameters_v1310", -1);

      rlc_Parameters_v1310 = new RLC_Parameters_v1310();
      rlc_Parameters_v1310.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("rlc_Parameters_v1310", -1);

      // decode mac_Parameters_v1310

      if (mac_Parameters_v1310Present) {
         buffer.getContext().eventDispatcher.startElement("mac_Parameters_v1310", -1);

         mac_Parameters_v1310 = new MAC_Parameters_v1310();
         mac_Parameters_v1310.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("mac_Parameters_v1310", -1);
      }
      else {
         mac_Parameters_v1310 = null;
      }

      // decode phyLayerParameters_v1310

      if (phyLayerParameters_v1310Present) {
         buffer.getContext().eventDispatcher.startElement("phyLayerParameters_v1310", -1);

         phyLayerParameters_v1310 = new PhyLayerParameters_v1310();
         phyLayerParameters_v1310.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("phyLayerParameters_v1310", -1);
      }
      else {
         phyLayerParameters_v1310 = null;
      }

      // decode rf_Parameters_v1310

      if (rf_Parameters_v1310Present) {
         buffer.getContext().eventDispatcher.startElement("rf_Parameters_v1310", -1);

         rf_Parameters_v1310 = new RF_Parameters_v1310();
         rf_Parameters_v1310.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("rf_Parameters_v1310", -1);
      }
      else {
         rf_Parameters_v1310 = null;
      }

      // decode measParameters_v1310

      if (measParameters_v1310Present) {
         buffer.getContext().eventDispatcher.startElement("measParameters_v1310", -1);

         measParameters_v1310 = new MeasParameters_v1310();
         measParameters_v1310.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("measParameters_v1310", -1);
      }
      else {
         measParameters_v1310 = null;
      }

      // decode dc_Parameters_v1310

      if (dc_Parameters_v1310Present) {
         buffer.getContext().eventDispatcher.startElement("dc_Parameters_v1310", -1);

         dc_Parameters_v1310 = new DC_Parameters_v1310();
         dc_Parameters_v1310.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("dc_Parameters_v1310", -1);
      }
      else {
         dc_Parameters_v1310 = null;
      }

      // decode sl_Parameters_v1310

      if (sl_Parameters_v1310Present) {
         buffer.getContext().eventDispatcher.startElement("sl_Parameters_v1310", -1);

         sl_Parameters_v1310 = new SL_Parameters_v1310();
         sl_Parameters_v1310.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sl_Parameters_v1310", -1);
      }
      else {
         sl_Parameters_v1310 = null;
      }

      // decode scptm_Parameters_r13

      if (scptm_Parameters_r13Present) {
         buffer.getContext().eventDispatcher.startElement("scptm_Parameters_r13", -1);

         scptm_Parameters_r13 = new SCPTM_Parameters_r13();
         scptm_Parameters_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("scptm_Parameters_r13", -1);
      }
      else {
         scptm_Parameters_r13 = null;
      }

      // decode ce_Parameters_r13

      if (ce_Parameters_r13Present) {
         buffer.getContext().eventDispatcher.startElement("ce_Parameters_r13", -1);

         ce_Parameters_r13 = new CE_Parameters_r13();
         ce_Parameters_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ce_Parameters_r13", -1);
      }
      else {
         ce_Parameters_r13 = null;
      }

      // decode interRAT_ParametersWLAN_r13

      buffer.getContext().eventDispatcher.startElement("interRAT_ParametersWLAN_r13", -1);

      interRAT_ParametersWLAN_r13 = new IRAT_ParametersWLAN_r13();
      interRAT_ParametersWLAN_r13.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("interRAT_ParametersWLAN_r13", -1);

      // decode laa_Parameters_r13

      if (laa_Parameters_r13Present) {
         buffer.getContext().eventDispatcher.startElement("laa_Parameters_r13", -1);

         laa_Parameters_r13 = new LAA_Parameters_r13();
         laa_Parameters_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("laa_Parameters_r13", -1);
      }
      else {
         laa_Parameters_r13 = null;
      }

      // decode lwa_Parameters_r13

      if (lwa_Parameters_r13Present) {
         buffer.getContext().eventDispatcher.startElement("lwa_Parameters_r13", -1);

         lwa_Parameters_r13 = new LWA_Parameters_r13();
         lwa_Parameters_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("lwa_Parameters_r13", -1);
      }
      else {
         lwa_Parameters_r13 = null;
      }

      // decode wlan_IW_Parameters_v1310

      buffer.getContext().eventDispatcher.startElement("wlan_IW_Parameters_v1310", -1);

      wlan_IW_Parameters_v1310 = new WLAN_IW_Parameters_v1310();
      wlan_IW_Parameters_v1310.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("wlan_IW_Parameters_v1310", -1);

      // decode lwip_Parameters_r13

      buffer.getContext().eventDispatcher.startElement("lwip_Parameters_r13", -1);

      lwip_Parameters_r13 = new LWIP_Parameters_r13();
      lwip_Parameters_r13.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("lwip_Parameters_r13", -1);

      // decode fdd_Add_UE_EUTRA_Capabilities_v1310

      if (fdd_Add_UE_EUTRA_Capabilities_v1310Present) {
         buffer.getContext().eventDispatcher.startElement("fdd_Add_UE_EUTRA_Capabilities_v1310", -1);

         fdd_Add_UE_EUTRA_Capabilities_v1310 = new UE_EUTRA_CapabilityAddXDD_Mode_v1310();
         fdd_Add_UE_EUTRA_Capabilities_v1310.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("fdd_Add_UE_EUTRA_Capabilities_v1310", -1);
      }
      else {
         fdd_Add_UE_EUTRA_Capabilities_v1310 = null;
      }

      // decode tdd_Add_UE_EUTRA_Capabilities_v1310

      if (tdd_Add_UE_EUTRA_Capabilities_v1310Present) {
         buffer.getContext().eventDispatcher.startElement("tdd_Add_UE_EUTRA_Capabilities_v1310", -1);

         tdd_Add_UE_EUTRA_Capabilities_v1310 = new UE_EUTRA_CapabilityAddXDD_Mode_v1310();
         tdd_Add_UE_EUTRA_Capabilities_v1310.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("tdd_Add_UE_EUTRA_Capabilities_v1310", -1);
      }
      else {
         tdd_Add_UE_EUTRA_Capabilities_v1310 = null;
      }

      // decode nonCriticalExtension

      if (nonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension = new UE_EUTRA_Capability_v1320_IEs();
         nonCriticalExtension.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }
      else {
         nonCriticalExtension = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (ue_CategoryDL_v1310 != null) ue_CategoryDL_v1310.print (_sb, "ue_CategoryDL_v1310", _level+1);
      if (ue_CategoryUL_v1310 != null) ue_CategoryUL_v1310.print (_sb, "ue_CategoryUL_v1310", _level+1);
      if (pdcp_Parameters_v1310 != null) pdcp_Parameters_v1310.print (_sb, "pdcp_Parameters_v1310", _level+1);
      if (rlc_Parameters_v1310 != null) rlc_Parameters_v1310.print (_sb, "rlc_Parameters_v1310", _level+1);
      if (mac_Parameters_v1310 != null) mac_Parameters_v1310.print (_sb, "mac_Parameters_v1310", _level+1);
      if (phyLayerParameters_v1310 != null) phyLayerParameters_v1310.print (_sb, "phyLayerParameters_v1310", _level+1);
      if (rf_Parameters_v1310 != null) rf_Parameters_v1310.print (_sb, "rf_Parameters_v1310", _level+1);
      if (measParameters_v1310 != null) measParameters_v1310.print (_sb, "measParameters_v1310", _level+1);
      if (dc_Parameters_v1310 != null) dc_Parameters_v1310.print (_sb, "dc_Parameters_v1310", _level+1);
      if (sl_Parameters_v1310 != null) sl_Parameters_v1310.print (_sb, "sl_Parameters_v1310", _level+1);
      if (scptm_Parameters_r13 != null) scptm_Parameters_r13.print (_sb, "scptm_Parameters_r13", _level+1);
      if (ce_Parameters_r13 != null) ce_Parameters_r13.print (_sb, "ce_Parameters_r13", _level+1);
      if (interRAT_ParametersWLAN_r13 != null) interRAT_ParametersWLAN_r13.print (_sb, "interRAT_ParametersWLAN_r13", _level+1);
      if (laa_Parameters_r13 != null) laa_Parameters_r13.print (_sb, "laa_Parameters_r13", _level+1);
      if (lwa_Parameters_r13 != null) lwa_Parameters_r13.print (_sb, "lwa_Parameters_r13", _level+1);
      if (wlan_IW_Parameters_v1310 != null) wlan_IW_Parameters_v1310.print (_sb, "wlan_IW_Parameters_v1310", _level+1);
      if (lwip_Parameters_r13 != null) lwip_Parameters_r13.print (_sb, "lwip_Parameters_r13", _level+1);
      if (fdd_Add_UE_EUTRA_Capabilities_v1310 != null) fdd_Add_UE_EUTRA_Capabilities_v1310.print (_sb, "fdd_Add_UE_EUTRA_Capabilities_v1310", _level+1);
      if (tdd_Add_UE_EUTRA_Capabilities_v1310 != null) tdd_Add_UE_EUTRA_Capabilities_v1310.print (_sb, "tdd_Add_UE_EUTRA_Capabilities_v1310", _level+1);
      if (nonCriticalExtension != null) nonCriticalExtension.print (_sb, "nonCriticalExtension", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
