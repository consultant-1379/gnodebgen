/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SL_DiscConfigOtherInterFreq_r13 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SL-DiscConfigOtherInterFreq-r13";
   }

   public SL_DiscTxPowerInfoList_r12 txPowerInfo_r13;  // optional
   public SL_DiscConfigOtherInterFreq_r13_refCarrierCommon_r13 refCarrierCommon_r13 = null;  // optional
   public SL_SyncConfigListNFreq_r13 discSyncConfig_r13;  // optional
   public CellSelectionInfoNFreq_r13 discCellSelectionInfo_r13;  // optional

   public SL_DiscConfigOtherInterFreq_r13 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SL_DiscConfigOtherInterFreq_r13 (
      SL_DiscTxPowerInfoList_r12 txPowerInfo_r13_,
      SL_DiscConfigOtherInterFreq_r13_refCarrierCommon_r13 refCarrierCommon_r13_,
      SL_SyncConfigListNFreq_r13 discSyncConfig_r13_,
      CellSelectionInfoNFreq_r13 discCellSelectionInfo_r13_
   ) {
      super();
      txPowerInfo_r13 = txPowerInfo_r13_;
      refCarrierCommon_r13 = refCarrierCommon_r13_;
      discSyncConfig_r13 = discSyncConfig_r13_;
      discCellSelectionInfo_r13 = discCellSelectionInfo_r13_;
   }

   public void init () {
      txPowerInfo_r13 = null;
      refCarrierCommon_r13 = null;
      discSyncConfig_r13 = null;
      discCellSelectionInfo_r13 = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return txPowerInfo_r13;
         case 1: return refCarrierCommon_r13;
         case 2: return discSyncConfig_r13;
         case 3: return discCellSelectionInfo_r13;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "txPowerInfo-r13";
         case 1: return "refCarrierCommon-r13";
         case 2: return "discSyncConfig-r13";
         case 3: return "discCellSelectionInfo-r13";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean txPowerInfo_r13Present = buffer.decodeBit ("txPowerInfo_r13Present");
      boolean refCarrierCommon_r13Present = buffer.decodeBit ("refCarrierCommon_r13Present");
      boolean discSyncConfig_r13Present = buffer.decodeBit ("discSyncConfig_r13Present");
      boolean discCellSelectionInfo_r13Present = buffer.decodeBit ("discCellSelectionInfo_r13Present");

      // decode txPowerInfo_r13

      if (txPowerInfo_r13Present) {
         buffer.getContext().eventDispatcher.startElement("txPowerInfo_r13", -1);

         txPowerInfo_r13 = new SL_DiscTxPowerInfoList_r12();
         txPowerInfo_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("txPowerInfo_r13", -1);
      }
      else {
         txPowerInfo_r13 = null;
      }

      // decode refCarrierCommon_r13

      if (refCarrierCommon_r13Present) {
         buffer.getContext().eventDispatcher.startElement("refCarrierCommon_r13", -1);

         int tval = SL_DiscConfigOtherInterFreq_r13_refCarrierCommon_r13.decodeEnumValue (buffer);
         refCarrierCommon_r13 = SL_DiscConfigOtherInterFreq_r13_refCarrierCommon_r13.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("refCarrierCommon_r13", -1);
      }
      else {
         refCarrierCommon_r13 = null;
      }

      // decode discSyncConfig_r13

      if (discSyncConfig_r13Present) {
         buffer.getContext().eventDispatcher.startElement("discSyncConfig_r13", -1);

         discSyncConfig_r13 = new SL_SyncConfigListNFreq_r13();
         discSyncConfig_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("discSyncConfig_r13", -1);
      }
      else {
         discSyncConfig_r13 = null;
      }

      // decode discCellSelectionInfo_r13

      if (discCellSelectionInfo_r13Present) {
         buffer.getContext().eventDispatcher.startElement("discCellSelectionInfo_r13", -1);

         discCellSelectionInfo_r13 = new CellSelectionInfoNFreq_r13();
         discCellSelectionInfo_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("discCellSelectionInfo_r13", -1);
      }
      else {
         discCellSelectionInfo_r13 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (txPowerInfo_r13 != null) txPowerInfo_r13.print (_sb, "txPowerInfo_r13", _level+1);
      if (refCarrierCommon_r13 != null) refCarrierCommon_r13.print (_sb, "refCarrierCommon_r13", _level+1);
      if (discSyncConfig_r13 != null) discSyncConfig_r13.print (_sb, "discSyncConfig_r13", _level+1);
      if (discCellSelectionInfo_r13 != null) discCellSelectionInfo_r13.print (_sb, "discCellSelectionInfo_r13", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
