/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SidelinkUEInformation_r12_IEs extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SidelinkUEInformation-r12-IEs";
   }

   public ARFCN_ValueEUTRA_r9 commRxInterestedFreq_r12;  // optional
   public SL_CommTxResourceReq_r12 commTxResourceReq_r12;  // optional
   public SidelinkUEInformation_r12_IEs_discRxInterest_r12 discRxInterest_r12 = null;  // optional
   public Asn1Integer discTxResourceReq_r12;  // optional
   public Asn1OctetString lateNonCriticalExtension;  // optional
   public SidelinkUEInformation_v1310_IEs nonCriticalExtension;  // optional

   public SidelinkUEInformation_r12_IEs () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SidelinkUEInformation_r12_IEs (
      ARFCN_ValueEUTRA_r9 commRxInterestedFreq_r12_,
      SL_CommTxResourceReq_r12 commTxResourceReq_r12_,
      SidelinkUEInformation_r12_IEs_discRxInterest_r12 discRxInterest_r12_,
      Asn1Integer discTxResourceReq_r12_,
      Asn1OctetString lateNonCriticalExtension_,
      SidelinkUEInformation_v1310_IEs nonCriticalExtension_
   ) {
      super();
      commRxInterestedFreq_r12 = commRxInterestedFreq_r12_;
      commTxResourceReq_r12 = commTxResourceReq_r12_;
      discRxInterest_r12 = discRxInterest_r12_;
      discTxResourceReq_r12 = discTxResourceReq_r12_;
      lateNonCriticalExtension = lateNonCriticalExtension_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SidelinkUEInformation_r12_IEs (long commRxInterestedFreq_r12_,
      SL_CommTxResourceReq_r12 commTxResourceReq_r12_,
      SidelinkUEInformation_r12_IEs_discRxInterest_r12 discRxInterest_r12_,
      long discTxResourceReq_r12_,
      byte[] lateNonCriticalExtension_,
      SidelinkUEInformation_v1310_IEs nonCriticalExtension_
   ) {
      super();
      commRxInterestedFreq_r12 = new ARFCN_ValueEUTRA_r9 (commRxInterestedFreq_r12_);
      commTxResourceReq_r12 = commTxResourceReq_r12_;
      discRxInterest_r12 = discRxInterest_r12_;
      discTxResourceReq_r12 = new Asn1Integer (discTxResourceReq_r12_);
      lateNonCriticalExtension = new Asn1OctetString (lateNonCriticalExtension_);
      nonCriticalExtension = nonCriticalExtension_;
   }

   public void init () {
      commRxInterestedFreq_r12 = null;
      commTxResourceReq_r12 = null;
      discRxInterest_r12 = null;
      discTxResourceReq_r12 = null;
      lateNonCriticalExtension = null;
      nonCriticalExtension = null;
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return commRxInterestedFreq_r12;
         case 1: return commTxResourceReq_r12;
         case 2: return discRxInterest_r12;
         case 3: return discTxResourceReq_r12;
         case 4: return lateNonCriticalExtension;
         case 5: return nonCriticalExtension;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "commRxInterestedFreq-r12";
         case 1: return "commTxResourceReq-r12";
         case 2: return "discRxInterest-r12";
         case 3: return "discTxResourceReq-r12";
         case 4: return "lateNonCriticalExtension";
         case 5: return "nonCriticalExtension";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean commRxInterestedFreq_r12Present = buffer.decodeBit ("commRxInterestedFreq_r12Present");
      boolean commTxResourceReq_r12Present = buffer.decodeBit ("commTxResourceReq_r12Present");
      boolean discRxInterest_r12Present = buffer.decodeBit ("discRxInterest_r12Present");
      boolean discTxResourceReq_r12Present = buffer.decodeBit ("discTxResourceReq_r12Present");
      boolean lateNonCriticalExtensionPresent = buffer.decodeBit ("lateNonCriticalExtensionPresent");
      boolean nonCriticalExtensionPresent = buffer.decodeBit ("nonCriticalExtensionPresent");

      // decode commRxInterestedFreq_r12

      if (commRxInterestedFreq_r12Present) {
         buffer.getContext().eventDispatcher.startElement("commRxInterestedFreq_r12", -1);

         commRxInterestedFreq_r12 = new ARFCN_ValueEUTRA_r9();
         commRxInterestedFreq_r12.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("commRxInterestedFreq_r12", -1);
      }
      else {
         commRxInterestedFreq_r12 = null;
      }

      // decode commTxResourceReq_r12

      if (commTxResourceReq_r12Present) {
         buffer.getContext().eventDispatcher.startElement("commTxResourceReq_r12", -1);

         commTxResourceReq_r12 = new SL_CommTxResourceReq_r12();
         commTxResourceReq_r12.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("commTxResourceReq_r12", -1);
      }
      else {
         commTxResourceReq_r12 = null;
      }

      // decode discRxInterest_r12

      if (discRxInterest_r12Present) {
         buffer.getContext().eventDispatcher.startElement("discRxInterest_r12", -1);

         int tval = SidelinkUEInformation_r12_IEs_discRxInterest_r12.decodeEnumValue (buffer);
         discRxInterest_r12 = SidelinkUEInformation_r12_IEs_discRxInterest_r12.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("discRxInterest_r12", -1);
      }
      else {
         discRxInterest_r12 = null;
      }

      // decode discTxResourceReq_r12

      if (discTxResourceReq_r12Present) {
         buffer.getContext().eventDispatcher.startElement("discTxResourceReq_r12", -1);

         discTxResourceReq_r12 = new Asn1Integer();
         discTxResourceReq_r12.decode (buffer, 1, 63);

         buffer.invokeCharacters(discTxResourceReq_r12.toString());
         buffer.getContext().eventDispatcher.endElement("discTxResourceReq_r12", -1);
      }
      else {
         discTxResourceReq_r12 = null;
      }

      // decode lateNonCriticalExtension

      if (lateNonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("lateNonCriticalExtension", -1);

         lateNonCriticalExtension = new Asn1OctetString();
         lateNonCriticalExtension.decode (buffer);

         buffer.invokeCharacters(lateNonCriticalExtension.toString());
         buffer.getContext().eventDispatcher.endElement("lateNonCriticalExtension", -1);
      }
      else {
         lateNonCriticalExtension = null;
      }

      // decode nonCriticalExtension

      if (nonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension = new SidelinkUEInformation_v1310_IEs();
         nonCriticalExtension.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }
      else {
         nonCriticalExtension = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (commRxInterestedFreq_r12 != null) commRxInterestedFreq_r12.print (_sb, "commRxInterestedFreq_r12", _level+1);
      if (commTxResourceReq_r12 != null) commTxResourceReq_r12.print (_sb, "commTxResourceReq_r12", _level+1);
      if (discRxInterest_r12 != null) discRxInterest_r12.print (_sb, "discRxInterest_r12", _level+1);
      if (discTxResourceReq_r12 != null) discTxResourceReq_r12.print (_sb, "discTxResourceReq_r12", _level+1);
      if (lateNonCriticalExtension != null) lateNonCriticalExtension.print (_sb, "lateNonCriticalExtension", _level+1);
      if (nonCriticalExtension != null) nonCriticalExtension.print (_sb, "nonCriticalExtension", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
