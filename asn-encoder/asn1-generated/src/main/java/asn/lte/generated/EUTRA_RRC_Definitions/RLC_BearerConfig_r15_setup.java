/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class RLC_BearerConfig_r15_setup extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public RLC_Config_r15 rlc_Config_r15;  // optional
   public RLC_BearerConfig_r15_setup_logicalChannelIdentityConfig_r15 logicalChannelIdentityConfig_r15;
   public LogicalChannelConfig logicalChannelConfig_r15;  // optional

   public RLC_BearerConfig_r15_setup () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public RLC_BearerConfig_r15_setup (
      RLC_Config_r15 rlc_Config_r15_,
      RLC_BearerConfig_r15_setup_logicalChannelIdentityConfig_r15 logicalChannelIdentityConfig_r15_,
      LogicalChannelConfig logicalChannelConfig_r15_
   ) {
      super();
      rlc_Config_r15 = rlc_Config_r15_;
      logicalChannelIdentityConfig_r15 = logicalChannelIdentityConfig_r15_;
      logicalChannelConfig_r15 = logicalChannelConfig_r15_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public RLC_BearerConfig_r15_setup (
      RLC_BearerConfig_r15_setup_logicalChannelIdentityConfig_r15 logicalChannelIdentityConfig_r15_
   ) {
      super();
      logicalChannelIdentityConfig_r15 = logicalChannelIdentityConfig_r15_;
   }

   public void init () {
      rlc_Config_r15 = null;
      logicalChannelIdentityConfig_r15 = null;
      logicalChannelConfig_r15 = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return rlc_Config_r15;
         case 1: return logicalChannelIdentityConfig_r15;
         case 2: return logicalChannelConfig_r15;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "rlc-Config-r15";
         case 1: return "logicalChannelIdentityConfig-r15";
         case 2: return "logicalChannelConfig-r15";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean rlc_Config_r15Present = buffer.decodeBit ("rlc_Config_r15Present");
      boolean logicalChannelConfig_r15Present = buffer.decodeBit ("logicalChannelConfig_r15Present");

      // decode rlc_Config_r15

      if (rlc_Config_r15Present) {
         buffer.getContext().eventDispatcher.startElement("rlc_Config_r15", -1);

         rlc_Config_r15 = new RLC_Config_r15();
         rlc_Config_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("rlc_Config_r15", -1);
      }
      else {
         rlc_Config_r15 = null;
      }

      // decode logicalChannelIdentityConfig_r15

      buffer.getContext().eventDispatcher.startElement("logicalChannelIdentityConfig_r15", -1);

      logicalChannelIdentityConfig_r15 = new RLC_BearerConfig_r15_setup_logicalChannelIdentityConfig_r15();
      logicalChannelIdentityConfig_r15.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("logicalChannelIdentityConfig_r15", -1);

      // decode logicalChannelConfig_r15

      if (logicalChannelConfig_r15Present) {
         buffer.getContext().eventDispatcher.startElement("logicalChannelConfig_r15", -1);

         logicalChannelConfig_r15 = new LogicalChannelConfig();
         logicalChannelConfig_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("logicalChannelConfig_r15", -1);
      }
      else {
         logicalChannelConfig_r15 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (rlc_Config_r15 != null) rlc_Config_r15.print (_sb, "rlc_Config_r15", _level+1);
      if (logicalChannelIdentityConfig_r15 != null) logicalChannelIdentityConfig_r15.print (_sb, "logicalChannelIdentityConfig_r15", _level+1);
      if (logicalChannelConfig_r15 != null) logicalChannelConfig_r15.print (_sb, "logicalChannelConfig_r15", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
