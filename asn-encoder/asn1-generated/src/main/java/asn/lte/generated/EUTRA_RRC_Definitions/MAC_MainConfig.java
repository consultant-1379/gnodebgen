/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MAC_MainConfig extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "MAC-MainConfig";
   }

   public MAC_MainConfig_ul_SCH_Config ul_SCH_Config;  // optional
   public DRX_Config drx_Config;  // optional
   public TimeAlignmentTimer timeAlignmentTimerDedicated = null;
   public MAC_MainConfig_phr_Config phr_Config;  // optional
   public boolean mV2ExtPresent;
   public Asn1Integer sr_ProhibitTimer_r9;  // optional
   public boolean mV3ExtPresent;
   public MAC_MainConfig_mac_MainConfig_v1020 mac_MainConfig_v1020;  // optional
   public boolean mV4ExtPresent;
   public STAG_ToReleaseList_r11 stag_ToReleaseList_r11;  // optional
   public STAG_ToAddModList_r11 stag_ToAddModList_r11;  // optional
   public DRX_Config_v1130 drx_Config_v1130;  // optional
   public boolean mV5ExtPresent;
   public Asn1Boolean e_HARQ_Pattern_r12;  // optional
   public MAC_MainConfig_dualConnectivityPHR dualConnectivityPHR;  // optional
   public MAC_MainConfig_logicalChannelSR_Config_r12 logicalChannelSR_Config_r12;  // optional
   public boolean mV6ExtPresent;
   public DRX_Config_v1310 drx_Config_v1310;  // optional
   public Asn1Boolean extendedPHR2_r13;  // optional
   public MAC_MainConfig_eDRX_Config_CycleStartOffset_r13 eDRX_Config_CycleStartOffset_r13;  // optional
   public boolean mV7ExtPresent;
   public MAC_MainConfig_drx_Config_r13 drx_Config_r13;  // optional
   public boolean mV8ExtPresent;
   public MAC_MainConfig_skipUplinkTx_r14 skipUplinkTx_r14;  // optional
   public MAC_MainConfig_dataInactivityTimerConfig_r14 dataInactivityTimerConfig_r14;  // optional
   public boolean mV9ExtPresent;
   public MAC_MainConfig_rai_Activation_r14 rai_Activation_r14 = null;  // optional
   public boolean mV10ExtPresent;
   public MAC_MainConfig_shortTTI_AndSPT_r15 shortTTI_AndSPT_r15;  // optional
   public Asn1Boolean mpdcch_UL_HARQ_ACK_FeedbackConfig_r15;  // optional
   public MAC_MainConfig_dormantStateTimers_r15 dormantStateTimers_r15;  // optional
   public Asn1OpenExt extElem1;

   public MAC_MainConfig () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MAC_MainConfig (
      MAC_MainConfig_ul_SCH_Config ul_SCH_Config_,
      DRX_Config drx_Config_,
      TimeAlignmentTimer timeAlignmentTimerDedicated_,
      MAC_MainConfig_phr_Config phr_Config_,
      Asn1Integer sr_ProhibitTimer_r9_,
      MAC_MainConfig_mac_MainConfig_v1020 mac_MainConfig_v1020_,
      STAG_ToReleaseList_r11 stag_ToReleaseList_r11_,
      STAG_ToAddModList_r11 stag_ToAddModList_r11_,
      DRX_Config_v1130 drx_Config_v1130_,
      Asn1Boolean e_HARQ_Pattern_r12_,
      MAC_MainConfig_dualConnectivityPHR dualConnectivityPHR_,
      MAC_MainConfig_logicalChannelSR_Config_r12 logicalChannelSR_Config_r12_,
      DRX_Config_v1310 drx_Config_v1310_,
      Asn1Boolean extendedPHR2_r13_,
      MAC_MainConfig_eDRX_Config_CycleStartOffset_r13 eDRX_Config_CycleStartOffset_r13_,
      MAC_MainConfig_drx_Config_r13 drx_Config_r13_,
      MAC_MainConfig_skipUplinkTx_r14 skipUplinkTx_r14_,
      MAC_MainConfig_dataInactivityTimerConfig_r14 dataInactivityTimerConfig_r14_,
      MAC_MainConfig_rai_Activation_r14 rai_Activation_r14_,
      MAC_MainConfig_shortTTI_AndSPT_r15 shortTTI_AndSPT_r15_,
      Asn1Boolean mpdcch_UL_HARQ_ACK_FeedbackConfig_r15_,
      MAC_MainConfig_dormantStateTimers_r15 dormantStateTimers_r15_
   ) {
      super();
      ul_SCH_Config = ul_SCH_Config_;
      drx_Config = drx_Config_;
      timeAlignmentTimerDedicated = timeAlignmentTimerDedicated_;
      phr_Config = phr_Config_;
      sr_ProhibitTimer_r9 = sr_ProhibitTimer_r9_;
      mac_MainConfig_v1020 = mac_MainConfig_v1020_;
      stag_ToReleaseList_r11 = stag_ToReleaseList_r11_;
      stag_ToAddModList_r11 = stag_ToAddModList_r11_;
      drx_Config_v1130 = drx_Config_v1130_;
      e_HARQ_Pattern_r12 = e_HARQ_Pattern_r12_;
      dualConnectivityPHR = dualConnectivityPHR_;
      logicalChannelSR_Config_r12 = logicalChannelSR_Config_r12_;
      drx_Config_v1310 = drx_Config_v1310_;
      extendedPHR2_r13 = extendedPHR2_r13_;
      eDRX_Config_CycleStartOffset_r13 = eDRX_Config_CycleStartOffset_r13_;
      drx_Config_r13 = drx_Config_r13_;
      skipUplinkTx_r14 = skipUplinkTx_r14_;
      dataInactivityTimerConfig_r14 = dataInactivityTimerConfig_r14_;
      rai_Activation_r14 = rai_Activation_r14_;
      shortTTI_AndSPT_r15 = shortTTI_AndSPT_r15_;
      mpdcch_UL_HARQ_ACK_FeedbackConfig_r15 = mpdcch_UL_HARQ_ACK_FeedbackConfig_r15_;
      dormantStateTimers_r15 = dormantStateTimers_r15_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public MAC_MainConfig (
      TimeAlignmentTimer timeAlignmentTimerDedicated_
   ) {
      super();
      timeAlignmentTimerDedicated = timeAlignmentTimerDedicated_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public MAC_MainConfig (MAC_MainConfig_ul_SCH_Config ul_SCH_Config_,
      DRX_Config drx_Config_,
      TimeAlignmentTimer timeAlignmentTimerDedicated_,
      MAC_MainConfig_phr_Config phr_Config_,
      long sr_ProhibitTimer_r9_,
      MAC_MainConfig_mac_MainConfig_v1020 mac_MainConfig_v1020_,
      STAG_ToReleaseList_r11 stag_ToReleaseList_r11_,
      STAG_ToAddModList_r11 stag_ToAddModList_r11_,
      DRX_Config_v1130 drx_Config_v1130_,
      boolean e_HARQ_Pattern_r12_,
      MAC_MainConfig_dualConnectivityPHR dualConnectivityPHR_,
      MAC_MainConfig_logicalChannelSR_Config_r12 logicalChannelSR_Config_r12_,
      DRX_Config_v1310 drx_Config_v1310_,
      boolean extendedPHR2_r13_,
      MAC_MainConfig_eDRX_Config_CycleStartOffset_r13 eDRX_Config_CycleStartOffset_r13_,
      MAC_MainConfig_drx_Config_r13 drx_Config_r13_,
      MAC_MainConfig_skipUplinkTx_r14 skipUplinkTx_r14_,
      MAC_MainConfig_dataInactivityTimerConfig_r14 dataInactivityTimerConfig_r14_,
      MAC_MainConfig_rai_Activation_r14 rai_Activation_r14_,
      MAC_MainConfig_shortTTI_AndSPT_r15 shortTTI_AndSPT_r15_,
      boolean mpdcch_UL_HARQ_ACK_FeedbackConfig_r15_,
      MAC_MainConfig_dormantStateTimers_r15 dormantStateTimers_r15_
   ) {
      super();
      ul_SCH_Config = ul_SCH_Config_;
      drx_Config = drx_Config_;
      timeAlignmentTimerDedicated = timeAlignmentTimerDedicated_;
      phr_Config = phr_Config_;
      sr_ProhibitTimer_r9 = new Asn1Integer (sr_ProhibitTimer_r9_);
      mac_MainConfig_v1020 = mac_MainConfig_v1020_;
      stag_ToReleaseList_r11 = stag_ToReleaseList_r11_;
      stag_ToAddModList_r11 = stag_ToAddModList_r11_;
      drx_Config_v1130 = drx_Config_v1130_;
      e_HARQ_Pattern_r12 = new Asn1Boolean (e_HARQ_Pattern_r12_);
      dualConnectivityPHR = dualConnectivityPHR_;
      logicalChannelSR_Config_r12 = logicalChannelSR_Config_r12_;
      drx_Config_v1310 = drx_Config_v1310_;
      extendedPHR2_r13 = new Asn1Boolean (extendedPHR2_r13_);
      eDRX_Config_CycleStartOffset_r13 = eDRX_Config_CycleStartOffset_r13_;
      drx_Config_r13 = drx_Config_r13_;
      skipUplinkTx_r14 = skipUplinkTx_r14_;
      dataInactivityTimerConfig_r14 = dataInactivityTimerConfig_r14_;
      rai_Activation_r14 = rai_Activation_r14_;
      shortTTI_AndSPT_r15 = shortTTI_AndSPT_r15_;
      mpdcch_UL_HARQ_ACK_FeedbackConfig_r15 = new Asn1Boolean (mpdcch_UL_HARQ_ACK_FeedbackConfig_r15_);
      dormantStateTimers_r15 = dormantStateTimers_r15_;
   }

   public void init () {
      ul_SCH_Config = null;
      drx_Config = null;
      timeAlignmentTimerDedicated = null;
      phr_Config = null;
      sr_ProhibitTimer_r9 = null;
      mac_MainConfig_v1020 = null;
      stag_ToReleaseList_r11 = null;
      stag_ToAddModList_r11 = null;
      drx_Config_v1130 = null;
      e_HARQ_Pattern_r12 = null;
      dualConnectivityPHR = null;
      logicalChannelSR_Config_r12 = null;
      drx_Config_v1310 = null;
      extendedPHR2_r13 = null;
      eDRX_Config_CycleStartOffset_r13 = null;
      drx_Config_r13 = null;
      skipUplinkTx_r14 = null;
      dataInactivityTimerConfig_r14 = null;
      rai_Activation_r14 = null;
      shortTTI_AndSPT_r15 = null;
      mpdcch_UL_HARQ_ACK_FeedbackConfig_r15 = null;
      dormantStateTimers_r15 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 23; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return ul_SCH_Config;
         case 1: return drx_Config;
         case 2: return timeAlignmentTimerDedicated;
         case 3: return phr_Config;
         case 4: return sr_ProhibitTimer_r9;
         case 5: return mac_MainConfig_v1020;
         case 6: return stag_ToReleaseList_r11;
         case 7: return stag_ToAddModList_r11;
         case 8: return drx_Config_v1130;
         case 9: return e_HARQ_Pattern_r12;
         case 10: return dualConnectivityPHR;
         case 11: return logicalChannelSR_Config_r12;
         case 12: return drx_Config_v1310;
         case 13: return extendedPHR2_r13;
         case 14: return eDRX_Config_CycleStartOffset_r13;
         case 15: return drx_Config_r13;
         case 16: return skipUplinkTx_r14;
         case 17: return dataInactivityTimerConfig_r14;
         case 18: return rai_Activation_r14;
         case 19: return shortTTI_AndSPT_r15;
         case 20: return mpdcch_UL_HARQ_ACK_FeedbackConfig_r15;
         case 21: return dormantStateTimers_r15;
         case 22: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "ul-SCH-Config";
         case 1: return "drx-Config";
         case 2: return "timeAlignmentTimerDedicated";
         case 3: return "phr-Config";
         case 4: return "sr-ProhibitTimer-r9";
         case 5: return "mac-MainConfig-v1020";
         case 6: return "stag-ToReleaseList-r11";
         case 7: return "stag-ToAddModList-r11";
         case 8: return "drx-Config-v1130";
         case 9: return "e-HARQ-Pattern-r12";
         case 10: return "dualConnectivityPHR";
         case 11: return "logicalChannelSR-Config-r12";
         case 12: return "drx-Config-v1310";
         case 13: return "extendedPHR2-r13";
         case 14: return "eDRX-Config-CycleStartOffset-r13";
         case 15: return "drx-Config-r13";
         case 16: return "skipUplinkTx-r14";
         case 17: return "dataInactivityTimerConfig-r14";
         case 18: return "rai-Activation-r14";
         case 19: return "shortTTI-AndSPT-r15";
         case 20: return "mpdcch-UL-HARQ-ACK-FeedbackConfig-r15";
         case 21: return "dormantStateTimers-r15";
         case 22: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean ul_SCH_ConfigPresent = buffer.decodeBit ("ul_SCH_ConfigPresent");
      boolean drx_ConfigPresent = buffer.decodeBit ("drx_ConfigPresent");
      boolean phr_ConfigPresent = buffer.decodeBit ("phr_ConfigPresent");

      // decode ul_SCH_Config

      if (ul_SCH_ConfigPresent) {
         buffer.getContext().eventDispatcher.startElement("ul_SCH_Config", -1);

         ul_SCH_Config = new MAC_MainConfig_ul_SCH_Config();
         ul_SCH_Config.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ul_SCH_Config", -1);
      }
      else {
         ul_SCH_Config = null;
      }

      // decode drx_Config

      if (drx_ConfigPresent) {
         buffer.getContext().eventDispatcher.startElement("drx_Config", -1);

         drx_Config = new DRX_Config();
         drx_Config.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("drx_Config", -1);
      }
      else {
         drx_Config = null;
      }

      // decode timeAlignmentTimerDedicated

      buffer.getContext().eventDispatcher.startElement("timeAlignmentTimerDedicated", -1);

      {
         int tval = TimeAlignmentTimer.decodeEnumValue (buffer);
         timeAlignmentTimerDedicated = TimeAlignmentTimer.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("timeAlignmentTimerDedicated", -1);

      // decode phr_Config

      if (phr_ConfigPresent) {
         buffer.getContext().eventDispatcher.startElement("phr_Config", -1);

         phr_Config = new MAC_MainConfig_phr_Config();
         phr_Config.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("phr_Config", -1);
      }
      else {
         phr_Config = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV4ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV5ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV6ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV7ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV8ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV9ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV10ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean sr_ProhibitTimer_r9Present = buffer.decodeBit ("sr_ProhibitTimer_r9Present");

            // decode sr_ProhibitTimer_r9

            if (sr_ProhibitTimer_r9Present) {
               buffer.getContext().eventDispatcher.startElement("sr_ProhibitTimer_r9", -1);

               sr_ProhibitTimer_r9 = new Asn1Integer();
               sr_ProhibitTimer_r9.decode (buffer, 0, 7);

               buffer.invokeCharacters(sr_ProhibitTimer_r9.toString());
               buffer.getContext().eventDispatcher.endElement("sr_ProhibitTimer_r9", -1);
            }
            else {
               sr_ProhibitTimer_r9 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean mac_MainConfig_v1020Present = buffer.decodeBit ("mac_MainConfig_v1020Present");

            // decode mac_MainConfig_v1020

            if (mac_MainConfig_v1020Present) {
               buffer.getContext().eventDispatcher.startElement("mac_MainConfig_v1020", -1);

               mac_MainConfig_v1020 = new MAC_MainConfig_mac_MainConfig_v1020();
               mac_MainConfig_v1020.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("mac_MainConfig_v1020", -1);
            }
            else {
               mac_MainConfig_v1020 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV4ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean stag_ToReleaseList_r11Present = buffer.decodeBit ("stag_ToReleaseList_r11Present");

            boolean stag_ToAddModList_r11Present = buffer.decodeBit ("stag_ToAddModList_r11Present");

            boolean drx_Config_v1130Present = buffer.decodeBit ("drx_Config_v1130Present");

            // decode stag_ToReleaseList_r11

            if (stag_ToReleaseList_r11Present) {
               buffer.getContext().eventDispatcher.startElement("stag_ToReleaseList_r11", -1);

               stag_ToReleaseList_r11 = new STAG_ToReleaseList_r11();
               stag_ToReleaseList_r11.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("stag_ToReleaseList_r11", -1);
            }
            else {
               stag_ToReleaseList_r11 = null;
            }

            // decode stag_ToAddModList_r11

            if (stag_ToAddModList_r11Present) {
               buffer.getContext().eventDispatcher.startElement("stag_ToAddModList_r11", -1);

               stag_ToAddModList_r11 = new STAG_ToAddModList_r11();
               stag_ToAddModList_r11.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("stag_ToAddModList_r11", -1);
            }
            else {
               stag_ToAddModList_r11 = null;
            }

            // decode drx_Config_v1130

            if (drx_Config_v1130Present) {
               buffer.getContext().eventDispatcher.startElement("drx_Config_v1130", -1);

               drx_Config_v1130 = new DRX_Config_v1130();
               drx_Config_v1130.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("drx_Config_v1130", -1);
            }
            else {
               drx_Config_v1130 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV5ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean e_HARQ_Pattern_r12Present = buffer.decodeBit ("e_HARQ_Pattern_r12Present");

            boolean dualConnectivityPHRPresent = buffer.decodeBit ("dualConnectivityPHRPresent");

            boolean logicalChannelSR_Config_r12Present = buffer.decodeBit ("logicalChannelSR_Config_r12Present");

            // decode e_HARQ_Pattern_r12

            if (e_HARQ_Pattern_r12Present) {
               buffer.getContext().eventDispatcher.startElement("e_HARQ_Pattern_r12", -1);

               e_HARQ_Pattern_r12 = new Asn1Boolean();
               e_HARQ_Pattern_r12.decode (buffer);

               buffer.invokeCharacters(e_HARQ_Pattern_r12.toString());
               buffer.getContext().eventDispatcher.endElement("e_HARQ_Pattern_r12", -1);
            }
            else {
               e_HARQ_Pattern_r12 = null;
            }

            // decode dualConnectivityPHR

            if (dualConnectivityPHRPresent) {
               buffer.getContext().eventDispatcher.startElement("dualConnectivityPHR", -1);

               dualConnectivityPHR = new MAC_MainConfig_dualConnectivityPHR();
               dualConnectivityPHR.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("dualConnectivityPHR", -1);
            }
            else {
               dualConnectivityPHR = null;
            }

            // decode logicalChannelSR_Config_r12

            if (logicalChannelSR_Config_r12Present) {
               buffer.getContext().eventDispatcher.startElement("logicalChannelSR_Config_r12", -1);

               logicalChannelSR_Config_r12 = new MAC_MainConfig_logicalChannelSR_Config_r12();
               logicalChannelSR_Config_r12.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("logicalChannelSR_Config_r12", -1);
            }
            else {
               logicalChannelSR_Config_r12 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV6ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean drx_Config_v1310Present = buffer.decodeBit ("drx_Config_v1310Present");

            boolean extendedPHR2_r13Present = buffer.decodeBit ("extendedPHR2_r13Present");

            boolean eDRX_Config_CycleStartOffset_r13Present = buffer.decodeBit ("eDRX_Config_CycleStartOffset_r13Present");

            // decode drx_Config_v1310

            if (drx_Config_v1310Present) {
               buffer.getContext().eventDispatcher.startElement("drx_Config_v1310", -1);

               drx_Config_v1310 = new DRX_Config_v1310();
               drx_Config_v1310.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("drx_Config_v1310", -1);
            }
            else {
               drx_Config_v1310 = null;
            }

            // decode extendedPHR2_r13

            if (extendedPHR2_r13Present) {
               buffer.getContext().eventDispatcher.startElement("extendedPHR2_r13", -1);

               extendedPHR2_r13 = new Asn1Boolean();
               extendedPHR2_r13.decode (buffer);

               buffer.invokeCharacters(extendedPHR2_r13.toString());
               buffer.getContext().eventDispatcher.endElement("extendedPHR2_r13", -1);
            }
            else {
               extendedPHR2_r13 = null;
            }

            // decode eDRX_Config_CycleStartOffset_r13

            if (eDRX_Config_CycleStartOffset_r13Present) {
               buffer.getContext().eventDispatcher.startElement("eDRX_Config_CycleStartOffset_r13", -1);

               eDRX_Config_CycleStartOffset_r13 = new MAC_MainConfig_eDRX_Config_CycleStartOffset_r13();
               eDRX_Config_CycleStartOffset_r13.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("eDRX_Config_CycleStartOffset_r13", -1);
            }
            else {
               eDRX_Config_CycleStartOffset_r13 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV7ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean drx_Config_r13Present = buffer.decodeBit ("drx_Config_r13Present");

            // decode drx_Config_r13

            if (drx_Config_r13Present) {
               buffer.getContext().eventDispatcher.startElement("drx_Config_r13", -1);

               drx_Config_r13 = new MAC_MainConfig_drx_Config_r13();
               drx_Config_r13.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("drx_Config_r13", -1);
            }
            else {
               drx_Config_r13 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV8ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean skipUplinkTx_r14Present = buffer.decodeBit ("skipUplinkTx_r14Present");

            boolean dataInactivityTimerConfig_r14Present = buffer.decodeBit ("dataInactivityTimerConfig_r14Present");

            // decode skipUplinkTx_r14

            if (skipUplinkTx_r14Present) {
               buffer.getContext().eventDispatcher.startElement("skipUplinkTx_r14", -1);

               skipUplinkTx_r14 = new MAC_MainConfig_skipUplinkTx_r14();
               skipUplinkTx_r14.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("skipUplinkTx_r14", -1);
            }
            else {
               skipUplinkTx_r14 = null;
            }

            // decode dataInactivityTimerConfig_r14

            if (dataInactivityTimerConfig_r14Present) {
               buffer.getContext().eventDispatcher.startElement("dataInactivityTimerConfig_r14", -1);

               dataInactivityTimerConfig_r14 = new MAC_MainConfig_dataInactivityTimerConfig_r14();
               dataInactivityTimerConfig_r14.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("dataInactivityTimerConfig_r14", -1);
            }
            else {
               dataInactivityTimerConfig_r14 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV9ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean rai_Activation_r14Present = buffer.decodeBit ("rai_Activation_r14Present");

            // decode rai_Activation_r14

            if (rai_Activation_r14Present) {
               buffer.getContext().eventDispatcher.startElement("rai_Activation_r14", -1);

               int tval = MAC_MainConfig_rai_Activation_r14.decodeEnumValue (buffer);
               rai_Activation_r14 = MAC_MainConfig_rai_Activation_r14.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("rai_Activation_r14", -1);
            }
            else {
               rai_Activation_r14 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV10ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean shortTTI_AndSPT_r15Present = buffer.decodeBit ("shortTTI_AndSPT_r15Present");

            boolean mpdcch_UL_HARQ_ACK_FeedbackConfig_r15Present = buffer.decodeBit ("mpdcch_UL_HARQ_ACK_FeedbackConfig_r15Present");

            boolean dormantStateTimers_r15Present = buffer.decodeBit ("dormantStateTimers_r15Present");

            // decode shortTTI_AndSPT_r15

            if (shortTTI_AndSPT_r15Present) {
               buffer.getContext().eventDispatcher.startElement("shortTTI_AndSPT_r15", -1);

               shortTTI_AndSPT_r15 = new MAC_MainConfig_shortTTI_AndSPT_r15();
               shortTTI_AndSPT_r15.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("shortTTI_AndSPT_r15", -1);
            }
            else {
               shortTTI_AndSPT_r15 = null;
            }

            // decode mpdcch_UL_HARQ_ACK_FeedbackConfig_r15

            if (mpdcch_UL_HARQ_ACK_FeedbackConfig_r15Present) {
               buffer.getContext().eventDispatcher.startElement("mpdcch_UL_HARQ_ACK_FeedbackConfig_r15", -1);

               mpdcch_UL_HARQ_ACK_FeedbackConfig_r15 = new Asn1Boolean();
               mpdcch_UL_HARQ_ACK_FeedbackConfig_r15.decode (buffer);

               buffer.invokeCharacters(mpdcch_UL_HARQ_ACK_FeedbackConfig_r15.toString());
               buffer.getContext().eventDispatcher.endElement("mpdcch_UL_HARQ_ACK_FeedbackConfig_r15", -1);
            }
            else {
               mpdcch_UL_HARQ_ACK_FeedbackConfig_r15 = null;
            }

            // decode dormantStateTimers_r15

            if (dormantStateTimers_r15Present) {
               buffer.getContext().eventDispatcher.startElement("dormantStateTimers_r15", -1);

               dormantStateTimers_r15 = new MAC_MainConfig_dormantStateTimers_r15();
               dormantStateTimers_r15.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("dormantStateTimers_r15", -1);
            }
            else {
               dormantStateTimers_r15 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (ul_SCH_Config != null) ul_SCH_Config.print (_sb, "ul_SCH_Config", _level+1);
      if (drx_Config != null) drx_Config.print (_sb, "drx_Config", _level+1);
      if (timeAlignmentTimerDedicated != null) timeAlignmentTimerDedicated.print (_sb, "timeAlignmentTimerDedicated", _level+1);
      if (phr_Config != null) phr_Config.print (_sb, "phr_Config", _level+1);
      if (sr_ProhibitTimer_r9 != null) sr_ProhibitTimer_r9.print (_sb, "sr_ProhibitTimer_r9", _level+1);
      if (mac_MainConfig_v1020 != null) mac_MainConfig_v1020.print (_sb, "mac_MainConfig_v1020", _level+1);
      if (stag_ToReleaseList_r11 != null) stag_ToReleaseList_r11.print (_sb, "stag_ToReleaseList_r11", _level+1);
      if (stag_ToAddModList_r11 != null) stag_ToAddModList_r11.print (_sb, "stag_ToAddModList_r11", _level+1);
      if (drx_Config_v1130 != null) drx_Config_v1130.print (_sb, "drx_Config_v1130", _level+1);
      if (e_HARQ_Pattern_r12 != null) e_HARQ_Pattern_r12.print (_sb, "e_HARQ_Pattern_r12", _level+1);
      if (dualConnectivityPHR != null) dualConnectivityPHR.print (_sb, "dualConnectivityPHR", _level+1);
      if (logicalChannelSR_Config_r12 != null) logicalChannelSR_Config_r12.print (_sb, "logicalChannelSR_Config_r12", _level+1);
      if (drx_Config_v1310 != null) drx_Config_v1310.print (_sb, "drx_Config_v1310", _level+1);
      if (extendedPHR2_r13 != null) extendedPHR2_r13.print (_sb, "extendedPHR2_r13", _level+1);
      if (eDRX_Config_CycleStartOffset_r13 != null) eDRX_Config_CycleStartOffset_r13.print (_sb, "eDRX_Config_CycleStartOffset_r13", _level+1);
      if (drx_Config_r13 != null) drx_Config_r13.print (_sb, "drx_Config_r13", _level+1);
      if (skipUplinkTx_r14 != null) skipUplinkTx_r14.print (_sb, "skipUplinkTx_r14", _level+1);
      if (dataInactivityTimerConfig_r14 != null) dataInactivityTimerConfig_r14.print (_sb, "dataInactivityTimerConfig_r14", _level+1);
      if (rai_Activation_r14 != null) rai_Activation_r14.print (_sb, "rai_Activation_r14", _level+1);
      if (shortTTI_AndSPT_r15 != null) shortTTI_AndSPT_r15.print (_sb, "shortTTI_AndSPT_r15", _level+1);
      if (mpdcch_UL_HARQ_ACK_FeedbackConfig_r15 != null) mpdcch_UL_HARQ_ACK_FeedbackConfig_r15.print (_sb, "mpdcch_UL_HARQ_ACK_FeedbackConfig_r15", _level+1);
      if (dormantStateTimers_r15 != null) dormantStateTimers_r15.print (_sb, "dormantStateTimers_r15", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
