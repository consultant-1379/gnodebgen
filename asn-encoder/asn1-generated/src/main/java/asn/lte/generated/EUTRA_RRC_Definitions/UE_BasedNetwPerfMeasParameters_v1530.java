/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class UE_BasedNetwPerfMeasParameters_v1530 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "UE-BasedNetwPerfMeasParameters-v1530";
   }

   public UE_BasedNetwPerfMeasParameters_v1530_loggedMeasBT_r15 loggedMeasBT_r15 = null;  // optional
   public UE_BasedNetwPerfMeasParameters_v1530_loggedMeasWLAN_r15 loggedMeasWLAN_r15 = null;  // optional
   public UE_BasedNetwPerfMeasParameters_v1530_immMeasBT_r15 immMeasBT_r15 = null;  // optional
   public UE_BasedNetwPerfMeasParameters_v1530_immMeasWLAN_r15 immMeasWLAN_r15 = null;  // optional

   public UE_BasedNetwPerfMeasParameters_v1530 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public UE_BasedNetwPerfMeasParameters_v1530 (
      UE_BasedNetwPerfMeasParameters_v1530_loggedMeasBT_r15 loggedMeasBT_r15_,
      UE_BasedNetwPerfMeasParameters_v1530_loggedMeasWLAN_r15 loggedMeasWLAN_r15_,
      UE_BasedNetwPerfMeasParameters_v1530_immMeasBT_r15 immMeasBT_r15_,
      UE_BasedNetwPerfMeasParameters_v1530_immMeasWLAN_r15 immMeasWLAN_r15_
   ) {
      super();
      loggedMeasBT_r15 = loggedMeasBT_r15_;
      loggedMeasWLAN_r15 = loggedMeasWLAN_r15_;
      immMeasBT_r15 = immMeasBT_r15_;
      immMeasWLAN_r15 = immMeasWLAN_r15_;
   }

   public void init () {
      loggedMeasBT_r15 = null;
      loggedMeasWLAN_r15 = null;
      immMeasBT_r15 = null;
      immMeasWLAN_r15 = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return loggedMeasBT_r15;
         case 1: return loggedMeasWLAN_r15;
         case 2: return immMeasBT_r15;
         case 3: return immMeasWLAN_r15;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "loggedMeasBT-r15";
         case 1: return "loggedMeasWLAN-r15";
         case 2: return "immMeasBT-r15";
         case 3: return "immMeasWLAN-r15";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean loggedMeasBT_r15Present = buffer.decodeBit ("loggedMeasBT_r15Present");
      boolean loggedMeasWLAN_r15Present = buffer.decodeBit ("loggedMeasWLAN_r15Present");
      boolean immMeasBT_r15Present = buffer.decodeBit ("immMeasBT_r15Present");
      boolean immMeasWLAN_r15Present = buffer.decodeBit ("immMeasWLAN_r15Present");

      // decode loggedMeasBT_r15

      if (loggedMeasBT_r15Present) {
         buffer.getContext().eventDispatcher.startElement("loggedMeasBT_r15", -1);

         int tval = UE_BasedNetwPerfMeasParameters_v1530_loggedMeasBT_r15.decodeEnumValue (buffer);
         loggedMeasBT_r15 = UE_BasedNetwPerfMeasParameters_v1530_loggedMeasBT_r15.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("loggedMeasBT_r15", -1);
      }
      else {
         loggedMeasBT_r15 = null;
      }

      // decode loggedMeasWLAN_r15

      if (loggedMeasWLAN_r15Present) {
         buffer.getContext().eventDispatcher.startElement("loggedMeasWLAN_r15", -1);

         int tval = UE_BasedNetwPerfMeasParameters_v1530_loggedMeasWLAN_r15.decodeEnumValue (buffer);
         loggedMeasWLAN_r15 = UE_BasedNetwPerfMeasParameters_v1530_loggedMeasWLAN_r15.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("loggedMeasWLAN_r15", -1);
      }
      else {
         loggedMeasWLAN_r15 = null;
      }

      // decode immMeasBT_r15

      if (immMeasBT_r15Present) {
         buffer.getContext().eventDispatcher.startElement("immMeasBT_r15", -1);

         int tval = UE_BasedNetwPerfMeasParameters_v1530_immMeasBT_r15.decodeEnumValue (buffer);
         immMeasBT_r15 = UE_BasedNetwPerfMeasParameters_v1530_immMeasBT_r15.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("immMeasBT_r15", -1);
      }
      else {
         immMeasBT_r15 = null;
      }

      // decode immMeasWLAN_r15

      if (immMeasWLAN_r15Present) {
         buffer.getContext().eventDispatcher.startElement("immMeasWLAN_r15", -1);

         int tval = UE_BasedNetwPerfMeasParameters_v1530_immMeasWLAN_r15.decodeEnumValue (buffer);
         immMeasWLAN_r15 = UE_BasedNetwPerfMeasParameters_v1530_immMeasWLAN_r15.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("immMeasWLAN_r15", -1);
      }
      else {
         immMeasWLAN_r15 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (loggedMeasBT_r15 != null) loggedMeasBT_r15.print (_sb, "loggedMeasBT_r15", _level+1);
      if (loggedMeasWLAN_r15 != null) loggedMeasWLAN_r15.print (_sb, "loggedMeasWLAN_r15", _level+1);
      if (immMeasBT_r15 != null) immMeasBT_r15.print (_sb, "immMeasBT_r15", _level+1);
      if (immMeasWLAN_r15 != null) immMeasWLAN_r15.print (_sb, "immMeasWLAN_r15", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
