/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class LogicalChannelConfig_ul_SpecificParameters extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public Asn1Integer priority;
   public LogicalChannelConfig_ul_SpecificParameters_prioritisedBitRate prioritisedBitRate = null;
   public LogicalChannelConfig_ul_SpecificParameters_bucketSizeDuration bucketSizeDuration = null;
   public LogicalChannelConfig_ul_SpecificParameters_allowedServingCells allowedServingCells;  // optional
   public LogicalChannelConfig_ul_SpecificParameters_allowedSCS_List allowedSCS_List;  // optional
   public LogicalChannelConfig_ul_SpecificParameters_maxPUSCH_Duration maxPUSCH_Duration = null;  // optional
   public LogicalChannelConfig_ul_SpecificParameters_configuredGrantType1Allowed configuredGrantType1Allowed = null;  // optional
   public Asn1Integer logicalChannelGroup;  // optional
   public SchedulingRequestId schedulingRequestID;  // optional
   public Asn1Boolean logicalChannelSR_Mask;
   public Asn1Boolean logicalChannelSR_DelayTimerApplied;
   public LogicalChannelConfig_ul_SpecificParameters_bitRateQueryProhibitTimer bitRateQueryProhibitTimer = null;  // optional
   public boolean mV3ExtPresent;
   public LogicalChannelConfig_ul_SpecificParameters_allowedCG_List_r16 allowedCG_List_r16;  // optional
   public LogicalChannelConfig_ul_SpecificParameters_allowedPHY_PriorityIndex_r16 allowedPHY_PriorityIndex_r16 = null;  // optional
   public Asn1OpenExt extElem1;

   public LogicalChannelConfig_ul_SpecificParameters () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public LogicalChannelConfig_ul_SpecificParameters (
      Asn1Integer priority_,
      LogicalChannelConfig_ul_SpecificParameters_prioritisedBitRate prioritisedBitRate_,
      LogicalChannelConfig_ul_SpecificParameters_bucketSizeDuration bucketSizeDuration_,
      LogicalChannelConfig_ul_SpecificParameters_allowedServingCells allowedServingCells_,
      LogicalChannelConfig_ul_SpecificParameters_allowedSCS_List allowedSCS_List_,
      LogicalChannelConfig_ul_SpecificParameters_maxPUSCH_Duration maxPUSCH_Duration_,
      LogicalChannelConfig_ul_SpecificParameters_configuredGrantType1Allowed configuredGrantType1Allowed_,
      Asn1Integer logicalChannelGroup_,
      SchedulingRequestId schedulingRequestID_,
      Asn1Boolean logicalChannelSR_Mask_,
      Asn1Boolean logicalChannelSR_DelayTimerApplied_,
      LogicalChannelConfig_ul_SpecificParameters_bitRateQueryProhibitTimer bitRateQueryProhibitTimer_,
      LogicalChannelConfig_ul_SpecificParameters_allowedCG_List_r16 allowedCG_List_r16_,
      LogicalChannelConfig_ul_SpecificParameters_allowedPHY_PriorityIndex_r16 allowedPHY_PriorityIndex_r16_
   ) {
      super();
      priority = priority_;
      prioritisedBitRate = prioritisedBitRate_;
      bucketSizeDuration = bucketSizeDuration_;
      allowedServingCells = allowedServingCells_;
      allowedSCS_List = allowedSCS_List_;
      maxPUSCH_Duration = maxPUSCH_Duration_;
      configuredGrantType1Allowed = configuredGrantType1Allowed_;
      logicalChannelGroup = logicalChannelGroup_;
      schedulingRequestID = schedulingRequestID_;
      logicalChannelSR_Mask = logicalChannelSR_Mask_;
      logicalChannelSR_DelayTimerApplied = logicalChannelSR_DelayTimerApplied_;
      bitRateQueryProhibitTimer = bitRateQueryProhibitTimer_;
      allowedCG_List_r16 = allowedCG_List_r16_;
      allowedPHY_PriorityIndex_r16 = allowedPHY_PriorityIndex_r16_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public LogicalChannelConfig_ul_SpecificParameters (
      Asn1Integer priority_,
      LogicalChannelConfig_ul_SpecificParameters_prioritisedBitRate prioritisedBitRate_,
      LogicalChannelConfig_ul_SpecificParameters_bucketSizeDuration bucketSizeDuration_,
      Asn1Boolean logicalChannelSR_Mask_,
      Asn1Boolean logicalChannelSR_DelayTimerApplied_
   ) {
      super();
      priority = priority_;
      prioritisedBitRate = prioritisedBitRate_;
      bucketSizeDuration = bucketSizeDuration_;
      logicalChannelSR_Mask = logicalChannelSR_Mask_;
      logicalChannelSR_DelayTimerApplied = logicalChannelSR_DelayTimerApplied_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public LogicalChannelConfig_ul_SpecificParameters (long priority_,
      LogicalChannelConfig_ul_SpecificParameters_prioritisedBitRate prioritisedBitRate_,
      LogicalChannelConfig_ul_SpecificParameters_bucketSizeDuration bucketSizeDuration_,
      LogicalChannelConfig_ul_SpecificParameters_allowedServingCells allowedServingCells_,
      LogicalChannelConfig_ul_SpecificParameters_allowedSCS_List allowedSCS_List_,
      LogicalChannelConfig_ul_SpecificParameters_maxPUSCH_Duration maxPUSCH_Duration_,
      LogicalChannelConfig_ul_SpecificParameters_configuredGrantType1Allowed configuredGrantType1Allowed_,
      long logicalChannelGroup_,
      long schedulingRequestID_,
      boolean logicalChannelSR_Mask_,
      boolean logicalChannelSR_DelayTimerApplied_,
      LogicalChannelConfig_ul_SpecificParameters_bitRateQueryProhibitTimer bitRateQueryProhibitTimer_,
      LogicalChannelConfig_ul_SpecificParameters_allowedCG_List_r16 allowedCG_List_r16_,
      LogicalChannelConfig_ul_SpecificParameters_allowedPHY_PriorityIndex_r16 allowedPHY_PriorityIndex_r16_
   ) {
      super();
      priority = new Asn1Integer (priority_);
      prioritisedBitRate = prioritisedBitRate_;
      bucketSizeDuration = bucketSizeDuration_;
      allowedServingCells = allowedServingCells_;
      allowedSCS_List = allowedSCS_List_;
      maxPUSCH_Duration = maxPUSCH_Duration_;
      configuredGrantType1Allowed = configuredGrantType1Allowed_;
      logicalChannelGroup = new Asn1Integer (logicalChannelGroup_);
      schedulingRequestID = new SchedulingRequestId (schedulingRequestID_);
      logicalChannelSR_Mask = new Asn1Boolean (logicalChannelSR_Mask_);
      logicalChannelSR_DelayTimerApplied = new Asn1Boolean (logicalChannelSR_DelayTimerApplied_);
      bitRateQueryProhibitTimer = bitRateQueryProhibitTimer_;
      allowedCG_List_r16 = allowedCG_List_r16_;
      allowedPHY_PriorityIndex_r16 = allowedPHY_PriorityIndex_r16_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public LogicalChannelConfig_ul_SpecificParameters (
      long priority_,
      LogicalChannelConfig_ul_SpecificParameters_prioritisedBitRate prioritisedBitRate_,
      LogicalChannelConfig_ul_SpecificParameters_bucketSizeDuration bucketSizeDuration_,
      boolean logicalChannelSR_Mask_,
      boolean logicalChannelSR_DelayTimerApplied_
   ) {
      super();
      priority = new Asn1Integer (priority_);
      prioritisedBitRate = prioritisedBitRate_;
      bucketSizeDuration = bucketSizeDuration_;
      logicalChannelSR_Mask = new Asn1Boolean (logicalChannelSR_Mask_);
      logicalChannelSR_DelayTimerApplied = new Asn1Boolean (logicalChannelSR_DelayTimerApplied_);
   }

   public void init () {
      priority = null;
      prioritisedBitRate = null;
      bucketSizeDuration = null;
      allowedServingCells = null;
      allowedSCS_List = null;
      maxPUSCH_Duration = null;
      configuredGrantType1Allowed = null;
      logicalChannelGroup = null;
      schedulingRequestID = null;
      logicalChannelSR_Mask = null;
      logicalChannelSR_DelayTimerApplied = null;
      bitRateQueryProhibitTimer = null;
      allowedCG_List_r16 = null;
      allowedPHY_PriorityIndex_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 15; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return priority;
         case 1: return prioritisedBitRate;
         case 2: return bucketSizeDuration;
         case 3: return allowedServingCells;
         case 4: return allowedSCS_List;
         case 5: return maxPUSCH_Duration;
         case 6: return configuredGrantType1Allowed;
         case 7: return logicalChannelGroup;
         case 8: return schedulingRequestID;
         case 9: return logicalChannelSR_Mask;
         case 10: return logicalChannelSR_DelayTimerApplied;
         case 11: return bitRateQueryProhibitTimer;
         case 12: return allowedCG_List_r16;
         case 13: return allowedPHY_PriorityIndex_r16;
         case 14: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "priority";
         case 1: return "prioritisedBitRate";
         case 2: return "bucketSizeDuration";
         case 3: return "allowedServingCells";
         case 4: return "allowedSCS-List";
         case 5: return "maxPUSCH-Duration";
         case 6: return "configuredGrantType1Allowed";
         case 7: return "logicalChannelGroup";
         case 8: return "schedulingRequestID";
         case 9: return "logicalChannelSR-Mask";
         case 10: return "logicalChannelSR-DelayTimerApplied";
         case 11: return "bitRateQueryProhibitTimer";
         case 12: return "allowedCG-List-r16";
         case 13: return "allowedPHY-PriorityIndex-r16";
         case 14: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean allowedServingCellsPresent = buffer.decodeBit ("allowedServingCellsPresent");
      boolean allowedSCS_ListPresent = buffer.decodeBit ("allowedSCS_ListPresent");
      boolean maxPUSCH_DurationPresent = buffer.decodeBit ("maxPUSCH_DurationPresent");
      boolean configuredGrantType1AllowedPresent = buffer.decodeBit ("configuredGrantType1AllowedPresent");
      boolean logicalChannelGroupPresent = buffer.decodeBit ("logicalChannelGroupPresent");
      boolean schedulingRequestIDPresent = buffer.decodeBit ("schedulingRequestIDPresent");

      // decode priority

      buffer.getContext().eventDispatcher.startElement("priority", -1);

      priority = new Asn1Integer();
      priority.decode (buffer, 1, 16);

      buffer.invokeCharacters(priority.toString());
      buffer.getContext().eventDispatcher.endElement("priority", -1);

      // decode prioritisedBitRate

      buffer.getContext().eventDispatcher.startElement("prioritisedBitRate", -1);

      {
         int tval = LogicalChannelConfig_ul_SpecificParameters_prioritisedBitRate.decodeEnumValue (buffer);
         prioritisedBitRate = LogicalChannelConfig_ul_SpecificParameters_prioritisedBitRate.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("prioritisedBitRate", -1);

      // decode bucketSizeDuration

      buffer.getContext().eventDispatcher.startElement("bucketSizeDuration", -1);

      {
         int tval = LogicalChannelConfig_ul_SpecificParameters_bucketSizeDuration.decodeEnumValue (buffer);
         bucketSizeDuration = LogicalChannelConfig_ul_SpecificParameters_bucketSizeDuration.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("bucketSizeDuration", -1);

      // decode allowedServingCells

      if (allowedServingCellsPresent) {
         buffer.getContext().eventDispatcher.startElement("allowedServingCells", -1);

         allowedServingCells = new LogicalChannelConfig_ul_SpecificParameters_allowedServingCells();
         allowedServingCells.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("allowedServingCells", -1);
      }
      else {
         allowedServingCells = null;
      }

      // decode allowedSCS_List

      if (allowedSCS_ListPresent) {
         buffer.getContext().eventDispatcher.startElement("allowedSCS_List", -1);

         allowedSCS_List = new LogicalChannelConfig_ul_SpecificParameters_allowedSCS_List();
         allowedSCS_List.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("allowedSCS_List", -1);
      }
      else {
         allowedSCS_List = null;
      }

      // decode maxPUSCH_Duration

      if (maxPUSCH_DurationPresent) {
         buffer.getContext().eventDispatcher.startElement("maxPUSCH_Duration", -1);

         int tval = LogicalChannelConfig_ul_SpecificParameters_maxPUSCH_Duration.decodeEnumValue (buffer);
         maxPUSCH_Duration = LogicalChannelConfig_ul_SpecificParameters_maxPUSCH_Duration.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("maxPUSCH_Duration", -1);
      }
      else {
         maxPUSCH_Duration = null;
      }

      // decode configuredGrantType1Allowed

      if (configuredGrantType1AllowedPresent) {
         buffer.getContext().eventDispatcher.startElement("configuredGrantType1Allowed", -1);

         int tval = LogicalChannelConfig_ul_SpecificParameters_configuredGrantType1Allowed.decodeEnumValue (buffer);
         configuredGrantType1Allowed = LogicalChannelConfig_ul_SpecificParameters_configuredGrantType1Allowed.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("configuredGrantType1Allowed", -1);
      }
      else {
         configuredGrantType1Allowed = null;
      }

      // decode logicalChannelGroup

      if (logicalChannelGroupPresent) {
         buffer.getContext().eventDispatcher.startElement("logicalChannelGroup", -1);

         logicalChannelGroup = new Asn1Integer();
         logicalChannelGroup.decode (buffer, 0, 7);

         buffer.invokeCharacters(logicalChannelGroup.toString());
         buffer.getContext().eventDispatcher.endElement("logicalChannelGroup", -1);
      }
      else {
         logicalChannelGroup = null;
      }

      // decode schedulingRequestID

      if (schedulingRequestIDPresent) {
         buffer.getContext().eventDispatcher.startElement("schedulingRequestID", -1);

         schedulingRequestID = new SchedulingRequestId();
         schedulingRequestID.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("schedulingRequestID", -1);
      }
      else {
         schedulingRequestID = null;
      }

      // decode logicalChannelSR_Mask

      buffer.getContext().eventDispatcher.startElement("logicalChannelSR_Mask", -1);

      logicalChannelSR_Mask = new Asn1Boolean();
      logicalChannelSR_Mask.decode (buffer);

      buffer.invokeCharacters(logicalChannelSR_Mask.toString());
      buffer.getContext().eventDispatcher.endElement("logicalChannelSR_Mask", -1);

      // decode logicalChannelSR_DelayTimerApplied

      buffer.getContext().eventDispatcher.startElement("logicalChannelSR_DelayTimerApplied", -1);

      logicalChannelSR_DelayTimerApplied = new Asn1Boolean();
      logicalChannelSR_DelayTimerApplied.decode (buffer);

      buffer.invokeCharacters(logicalChannelSR_DelayTimerApplied.toString());
      buffer.getContext().eventDispatcher.endElement("logicalChannelSR_DelayTimerApplied", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("bitRateQueryProhibitTimerPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode bitRateQueryProhibitTimer

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("bitRateQueryProhibitTimer", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            {
               int tval = LogicalChannelConfig_ul_SpecificParameters_bitRateQueryProhibitTimer.decodeEnumValue (buffer);
               bitRateQueryProhibitTimer = LogicalChannelConfig_ul_SpecificParameters_bitRateQueryProhibitTimer.valueOf (tval);
               buffer.moveBitCursor (bitidx);
            }
            buffer.getContext().eventDispatcher.endElement("bitRateQueryProhibitTimer", -1);

         }
         else {
            bitRateQueryProhibitTimer = null;
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean allowedCG_List_r16Present = buffer.decodeBit ("allowedCG_List_r16Present");

            boolean allowedPHY_PriorityIndex_r16Present = buffer.decodeBit ("allowedPHY_PriorityIndex_r16Present");

            // decode allowedCG_List_r16

            if (allowedCG_List_r16Present) {
               buffer.getContext().eventDispatcher.startElement("allowedCG_List_r16", -1);

               allowedCG_List_r16 = new LogicalChannelConfig_ul_SpecificParameters_allowedCG_List_r16();
               allowedCG_List_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("allowedCG_List_r16", -1);
            }
            else {
               allowedCG_List_r16 = null;
            }

            // decode allowedPHY_PriorityIndex_r16

            if (allowedPHY_PriorityIndex_r16Present) {
               buffer.getContext().eventDispatcher.startElement("allowedPHY_PriorityIndex_r16", -1);

               int tval = LogicalChannelConfig_ul_SpecificParameters_allowedPHY_PriorityIndex_r16.decodeEnumValue (buffer);
               allowedPHY_PriorityIndex_r16 = LogicalChannelConfig_ul_SpecificParameters_allowedPHY_PriorityIndex_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("allowedPHY_PriorityIndex_r16", -1);
            }
            else {
               allowedPHY_PriorityIndex_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (priority != null) priority.print (_sb, "priority", _level+1);
      if (prioritisedBitRate != null) prioritisedBitRate.print (_sb, "prioritisedBitRate", _level+1);
      if (bucketSizeDuration != null) bucketSizeDuration.print (_sb, "bucketSizeDuration", _level+1);
      if (allowedServingCells != null) allowedServingCells.print (_sb, "allowedServingCells", _level+1);
      if (allowedSCS_List != null) allowedSCS_List.print (_sb, "allowedSCS_List", _level+1);
      if (maxPUSCH_Duration != null) maxPUSCH_Duration.print (_sb, "maxPUSCH_Duration", _level+1);
      if (configuredGrantType1Allowed != null) configuredGrantType1Allowed.print (_sb, "configuredGrantType1Allowed", _level+1);
      if (logicalChannelGroup != null) logicalChannelGroup.print (_sb, "logicalChannelGroup", _level+1);
      if (schedulingRequestID != null) schedulingRequestID.print (_sb, "schedulingRequestID", _level+1);
      if (logicalChannelSR_Mask != null) logicalChannelSR_Mask.print (_sb, "logicalChannelSR_Mask", _level+1);
      if (logicalChannelSR_DelayTimerApplied != null) logicalChannelSR_DelayTimerApplied.print (_sb, "logicalChannelSR_DelayTimerApplied", _level+1);
      if (bitRateQueryProhibitTimer != null) bitRateQueryProhibitTimer.print (_sb, "bitRateQueryProhibitTimer", _level+1);
      if (allowedCG_List_r16 != null) allowedCG_List_r16.print (_sb, "allowedCG_List_r16", _level+1);
      if (allowedPHY_PriorityIndex_r16 != null) allowedPHY_PriorityIndex_r16.print (_sb, "allowedPHY_PriorityIndex_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
