/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class CSI_RS_ConfigNZP_r11 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CSI-RS-ConfigNZP-r11";
   }

   public CSI_RS_ConfigNZPId_r11 csi_RS_ConfigNZPId_r11;
   public CSI_RS_ConfigNZP_r11_antennaPortsCount_r11 antennaPortsCount_r11 = null;
   public Asn1Integer resourceConfig_r11;
   public Asn1Integer subframeConfig_r11;
   public Asn1Integer scramblingIdentity_r11;
   public CSI_RS_ConfigNZP_r11_qcl_CRS_Info_r11 qcl_CRS_Info_r11;  // optional
   public boolean mV2ExtPresent;
   public CSI_RS_ConfigNZPId_v1310 csi_RS_ConfigNZPId_v1310;  // optional
   public boolean mV3ExtPresent;
   public NZP_TransmissionComb_r14 transmissionComb_r14;  // optional
   public NZP_FrequencyDensity_r14 frequencyDensity_r14 = null;  // optional
   public boolean mV4ExtPresent;
   public CSI_RS_ConfigNZP_r11_mbsfn_SubframeConfigList_v1430 mbsfn_SubframeConfigList_v1430;  // optional
   public Asn1OpenExt extElem1;

   public CSI_RS_ConfigNZP_r11 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CSI_RS_ConfigNZP_r11 (
      CSI_RS_ConfigNZPId_r11 csi_RS_ConfigNZPId_r11_,
      CSI_RS_ConfigNZP_r11_antennaPortsCount_r11 antennaPortsCount_r11_,
      Asn1Integer resourceConfig_r11_,
      Asn1Integer subframeConfig_r11_,
      Asn1Integer scramblingIdentity_r11_,
      CSI_RS_ConfigNZP_r11_qcl_CRS_Info_r11 qcl_CRS_Info_r11_,
      CSI_RS_ConfigNZPId_v1310 csi_RS_ConfigNZPId_v1310_,
      NZP_TransmissionComb_r14 transmissionComb_r14_,
      NZP_FrequencyDensity_r14 frequencyDensity_r14_,
      CSI_RS_ConfigNZP_r11_mbsfn_SubframeConfigList_v1430 mbsfn_SubframeConfigList_v1430_
   ) {
      super();
      csi_RS_ConfigNZPId_r11 = csi_RS_ConfigNZPId_r11_;
      antennaPortsCount_r11 = antennaPortsCount_r11_;
      resourceConfig_r11 = resourceConfig_r11_;
      subframeConfig_r11 = subframeConfig_r11_;
      scramblingIdentity_r11 = scramblingIdentity_r11_;
      qcl_CRS_Info_r11 = qcl_CRS_Info_r11_;
      csi_RS_ConfigNZPId_v1310 = csi_RS_ConfigNZPId_v1310_;
      transmissionComb_r14 = transmissionComb_r14_;
      frequencyDensity_r14 = frequencyDensity_r14_;
      mbsfn_SubframeConfigList_v1430 = mbsfn_SubframeConfigList_v1430_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public CSI_RS_ConfigNZP_r11 (
      CSI_RS_ConfigNZPId_r11 csi_RS_ConfigNZPId_r11_,
      CSI_RS_ConfigNZP_r11_antennaPortsCount_r11 antennaPortsCount_r11_,
      Asn1Integer resourceConfig_r11_,
      Asn1Integer subframeConfig_r11_,
      Asn1Integer scramblingIdentity_r11_
   ) {
      super();
      csi_RS_ConfigNZPId_r11 = csi_RS_ConfigNZPId_r11_;
      antennaPortsCount_r11 = antennaPortsCount_r11_;
      resourceConfig_r11 = resourceConfig_r11_;
      subframeConfig_r11 = subframeConfig_r11_;
      scramblingIdentity_r11 = scramblingIdentity_r11_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public CSI_RS_ConfigNZP_r11 (long csi_RS_ConfigNZPId_r11_,
      CSI_RS_ConfigNZP_r11_antennaPortsCount_r11 antennaPortsCount_r11_,
      long resourceConfig_r11_,
      long subframeConfig_r11_,
      long scramblingIdentity_r11_,
      CSI_RS_ConfigNZP_r11_qcl_CRS_Info_r11 qcl_CRS_Info_r11_,
      long csi_RS_ConfigNZPId_v1310_,
      long transmissionComb_r14_,
      NZP_FrequencyDensity_r14 frequencyDensity_r14_,
      CSI_RS_ConfigNZP_r11_mbsfn_SubframeConfigList_v1430 mbsfn_SubframeConfigList_v1430_
   ) {
      super();
      csi_RS_ConfigNZPId_r11 = new CSI_RS_ConfigNZPId_r11 (csi_RS_ConfigNZPId_r11_);
      antennaPortsCount_r11 = antennaPortsCount_r11_;
      resourceConfig_r11 = new Asn1Integer (resourceConfig_r11_);
      subframeConfig_r11 = new Asn1Integer (subframeConfig_r11_);
      scramblingIdentity_r11 = new Asn1Integer (scramblingIdentity_r11_);
      qcl_CRS_Info_r11 = qcl_CRS_Info_r11_;
      csi_RS_ConfigNZPId_v1310 = new CSI_RS_ConfigNZPId_v1310 (csi_RS_ConfigNZPId_v1310_);
      transmissionComb_r14 = new NZP_TransmissionComb_r14 (transmissionComb_r14_);
      frequencyDensity_r14 = frequencyDensity_r14_;
      mbsfn_SubframeConfigList_v1430 = mbsfn_SubframeConfigList_v1430_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public CSI_RS_ConfigNZP_r11 (
      long csi_RS_ConfigNZPId_r11_,
      CSI_RS_ConfigNZP_r11_antennaPortsCount_r11 antennaPortsCount_r11_,
      long resourceConfig_r11_,
      long subframeConfig_r11_,
      long scramblingIdentity_r11_
   ) {
      super();
      csi_RS_ConfigNZPId_r11 = new CSI_RS_ConfigNZPId_r11 (csi_RS_ConfigNZPId_r11_);
      antennaPortsCount_r11 = antennaPortsCount_r11_;
      resourceConfig_r11 = new Asn1Integer (resourceConfig_r11_);
      subframeConfig_r11 = new Asn1Integer (subframeConfig_r11_);
      scramblingIdentity_r11 = new Asn1Integer (scramblingIdentity_r11_);
   }

   public void init () {
      csi_RS_ConfigNZPId_r11 = null;
      antennaPortsCount_r11 = null;
      resourceConfig_r11 = null;
      subframeConfig_r11 = null;
      scramblingIdentity_r11 = null;
      qcl_CRS_Info_r11 = null;
      csi_RS_ConfigNZPId_v1310 = null;
      transmissionComb_r14 = null;
      frequencyDensity_r14 = null;
      mbsfn_SubframeConfigList_v1430 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 11; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return csi_RS_ConfigNZPId_r11;
         case 1: return antennaPortsCount_r11;
         case 2: return resourceConfig_r11;
         case 3: return subframeConfig_r11;
         case 4: return scramblingIdentity_r11;
         case 5: return qcl_CRS_Info_r11;
         case 6: return csi_RS_ConfigNZPId_v1310;
         case 7: return transmissionComb_r14;
         case 8: return frequencyDensity_r14;
         case 9: return mbsfn_SubframeConfigList_v1430;
         case 10: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "csi-RS-ConfigNZPId-r11";
         case 1: return "antennaPortsCount-r11";
         case 2: return "resourceConfig-r11";
         case 3: return "subframeConfig-r11";
         case 4: return "scramblingIdentity-r11";
         case 5: return "qcl-CRS-Info-r11";
         case 6: return "csi-RS-ConfigNZPId-v1310";
         case 7: return "transmissionComb-r14";
         case 8: return "frequencyDensity-r14";
         case 9: return "mbsfn-SubframeConfigList-v1430";
         case 10: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean qcl_CRS_Info_r11Present = buffer.decodeBit ("qcl_CRS_Info_r11Present");

      // decode csi_RS_ConfigNZPId_r11

      buffer.getContext().eventDispatcher.startElement("csi_RS_ConfigNZPId_r11", -1);

      csi_RS_ConfigNZPId_r11 = new CSI_RS_ConfigNZPId_r11();
      csi_RS_ConfigNZPId_r11.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("csi_RS_ConfigNZPId_r11", -1);

      // decode antennaPortsCount_r11

      buffer.getContext().eventDispatcher.startElement("antennaPortsCount_r11", -1);

      {
         int tval = CSI_RS_ConfigNZP_r11_antennaPortsCount_r11.decodeEnumValue (buffer);
         antennaPortsCount_r11 = CSI_RS_ConfigNZP_r11_antennaPortsCount_r11.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("antennaPortsCount_r11", -1);

      // decode resourceConfig_r11

      buffer.getContext().eventDispatcher.startElement("resourceConfig_r11", -1);

      resourceConfig_r11 = new Asn1Integer();
      resourceConfig_r11.decode (buffer, 0, 31);

      buffer.invokeCharacters(resourceConfig_r11.toString());
      buffer.getContext().eventDispatcher.endElement("resourceConfig_r11", -1);

      // decode subframeConfig_r11

      buffer.getContext().eventDispatcher.startElement("subframeConfig_r11", -1);

      subframeConfig_r11 = new Asn1Integer();
      subframeConfig_r11.decode (buffer, 0, 154);

      buffer.invokeCharacters(subframeConfig_r11.toString());
      buffer.getContext().eventDispatcher.endElement("subframeConfig_r11", -1);

      // decode scramblingIdentity_r11

      buffer.getContext().eventDispatcher.startElement("scramblingIdentity_r11", -1);

      scramblingIdentity_r11 = new Asn1Integer();
      scramblingIdentity_r11.decode (buffer, 0, 503);

      buffer.invokeCharacters(scramblingIdentity_r11.toString());
      buffer.getContext().eventDispatcher.endElement("scramblingIdentity_r11", -1);

      // decode qcl_CRS_Info_r11

      if (qcl_CRS_Info_r11Present) {
         buffer.getContext().eventDispatcher.startElement("qcl_CRS_Info_r11", -1);

         qcl_CRS_Info_r11 = new CSI_RS_ConfigNZP_r11_qcl_CRS_Info_r11();
         qcl_CRS_Info_r11.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("qcl_CRS_Info_r11", -1);
      }
      else {
         qcl_CRS_Info_r11 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV4ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean csi_RS_ConfigNZPId_v1310Present = buffer.decodeBit ("csi_RS_ConfigNZPId_v1310Present");

            // decode csi_RS_ConfigNZPId_v1310

            if (csi_RS_ConfigNZPId_v1310Present) {
               buffer.getContext().eventDispatcher.startElement("csi_RS_ConfigNZPId_v1310", -1);

               csi_RS_ConfigNZPId_v1310 = new CSI_RS_ConfigNZPId_v1310();
               csi_RS_ConfigNZPId_v1310.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("csi_RS_ConfigNZPId_v1310", -1);
            }
            else {
               csi_RS_ConfigNZPId_v1310 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean transmissionComb_r14Present = buffer.decodeBit ("transmissionComb_r14Present");

            boolean frequencyDensity_r14Present = buffer.decodeBit ("frequencyDensity_r14Present");

            // decode transmissionComb_r14

            if (transmissionComb_r14Present) {
               buffer.getContext().eventDispatcher.startElement("transmissionComb_r14", -1);

               transmissionComb_r14 = new NZP_TransmissionComb_r14();
               transmissionComb_r14.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("transmissionComb_r14", -1);
            }
            else {
               transmissionComb_r14 = null;
            }

            // decode frequencyDensity_r14

            if (frequencyDensity_r14Present) {
               buffer.getContext().eventDispatcher.startElement("frequencyDensity_r14", -1);

               int tval = NZP_FrequencyDensity_r14.decodeEnumValue (buffer);
               frequencyDensity_r14 = NZP_FrequencyDensity_r14.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("frequencyDensity_r14", -1);
            }
            else {
               frequencyDensity_r14 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV4ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean mbsfn_SubframeConfigList_v1430Present = buffer.decodeBit ("mbsfn_SubframeConfigList_v1430Present");

            // decode mbsfn_SubframeConfigList_v1430

            if (mbsfn_SubframeConfigList_v1430Present) {
               buffer.getContext().eventDispatcher.startElement("mbsfn_SubframeConfigList_v1430", -1);

               mbsfn_SubframeConfigList_v1430 = new CSI_RS_ConfigNZP_r11_mbsfn_SubframeConfigList_v1430();
               mbsfn_SubframeConfigList_v1430.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("mbsfn_SubframeConfigList_v1430", -1);
            }
            else {
               mbsfn_SubframeConfigList_v1430 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (csi_RS_ConfigNZPId_r11 != null) csi_RS_ConfigNZPId_r11.print (_sb, "csi_RS_ConfigNZPId_r11", _level+1);
      if (antennaPortsCount_r11 != null) antennaPortsCount_r11.print (_sb, "antennaPortsCount_r11", _level+1);
      if (resourceConfig_r11 != null) resourceConfig_r11.print (_sb, "resourceConfig_r11", _level+1);
      if (subframeConfig_r11 != null) subframeConfig_r11.print (_sb, "subframeConfig_r11", _level+1);
      if (scramblingIdentity_r11 != null) scramblingIdentity_r11.print (_sb, "scramblingIdentity_r11", _level+1);
      if (qcl_CRS_Info_r11 != null) qcl_CRS_Info_r11.print (_sb, "qcl_CRS_Info_r11", _level+1);
      if (csi_RS_ConfigNZPId_v1310 != null) csi_RS_ConfigNZPId_v1310.print (_sb, "csi_RS_ConfigNZPId_v1310", _level+1);
      if (transmissionComb_r14 != null) transmissionComb_r14.print (_sb, "transmissionComb_r14", _level+1);
      if (frequencyDensity_r14 != null) frequencyDensity_r14.print (_sb, "frequencyDensity_r14", _level+1);
      if (mbsfn_SubframeConfigList_v1430 != null) mbsfn_SubframeConfigList_v1430.print (_sb, "mbsfn_SubframeConfigList_v1430", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
