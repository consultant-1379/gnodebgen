/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MAC_MainConfigSL_r12 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "MAC-MainConfigSL-r12";
   }

   public PeriodicBSR_Timer_r12 periodic_BSR_TimerSL = null;  // optional
   public RetxBSR_Timer_r12 retx_BSR_TimerSL = null;

   public MAC_MainConfigSL_r12 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MAC_MainConfigSL_r12 (
      PeriodicBSR_Timer_r12 periodic_BSR_TimerSL_,
      RetxBSR_Timer_r12 retx_BSR_TimerSL_
   ) {
      super();
      periodic_BSR_TimerSL = periodic_BSR_TimerSL_;
      retx_BSR_TimerSL = retx_BSR_TimerSL_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public MAC_MainConfigSL_r12 (
      RetxBSR_Timer_r12 retx_BSR_TimerSL_
   ) {
      super();
      retx_BSR_TimerSL = retx_BSR_TimerSL_;
   }

   public void init () {
      periodic_BSR_TimerSL = null;
      retx_BSR_TimerSL = null;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return periodic_BSR_TimerSL;
         case 1: return retx_BSR_TimerSL;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "periodic-BSR-TimerSL";
         case 1: return "retx-BSR-TimerSL";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean periodic_BSR_TimerSLPresent = buffer.decodeBit ("periodic_BSR_TimerSLPresent");

      // decode periodic_BSR_TimerSL

      if (periodic_BSR_TimerSLPresent) {
         buffer.getContext().eventDispatcher.startElement("periodic_BSR_TimerSL", -1);

         int tval = PeriodicBSR_Timer_r12.decodeEnumValue (buffer);
         periodic_BSR_TimerSL = PeriodicBSR_Timer_r12.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("periodic_BSR_TimerSL", -1);
      }
      else {
         periodic_BSR_TimerSL = null;
      }

      // decode retx_BSR_TimerSL

      buffer.getContext().eventDispatcher.startElement("retx_BSR_TimerSL", -1);

      {
         int tval = RetxBSR_Timer_r12.decodeEnumValue (buffer);
         retx_BSR_TimerSL = RetxBSR_Timer_r12.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("retx_BSR_TimerSL", -1);

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (periodic_BSR_TimerSL != null) periodic_BSR_TimerSL.print (_sb, "periodic_BSR_TimerSL", _level+1);
      if (retx_BSR_TimerSL != null) retx_BSR_TimerSL.print (_sb, "retx_BSR_TimerSL", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
