/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class FlightPathInfoReportConfig_r15 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "FlightPathInfoReportConfig-r15";
   }

   public Asn1Integer maxWayPointNumber_r15;
   public FlightPathInfoReportConfig_r15_includeTimeStamp_r15 includeTimeStamp_r15 = null;  // optional

   public FlightPathInfoReportConfig_r15 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public FlightPathInfoReportConfig_r15 (
      Asn1Integer maxWayPointNumber_r15_,
      FlightPathInfoReportConfig_r15_includeTimeStamp_r15 includeTimeStamp_r15_
   ) {
      super();
      maxWayPointNumber_r15 = maxWayPointNumber_r15_;
      includeTimeStamp_r15 = includeTimeStamp_r15_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public FlightPathInfoReportConfig_r15 (
      Asn1Integer maxWayPointNumber_r15_
   ) {
      super();
      maxWayPointNumber_r15 = maxWayPointNumber_r15_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public FlightPathInfoReportConfig_r15 (long maxWayPointNumber_r15_,
      FlightPathInfoReportConfig_r15_includeTimeStamp_r15 includeTimeStamp_r15_
   ) {
      super();
      maxWayPointNumber_r15 = new Asn1Integer (maxWayPointNumber_r15_);
      includeTimeStamp_r15 = includeTimeStamp_r15_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public FlightPathInfoReportConfig_r15 (
      long maxWayPointNumber_r15_
   ) {
      super();
      maxWayPointNumber_r15 = new Asn1Integer (maxWayPointNumber_r15_);
   }

   public void init () {
      maxWayPointNumber_r15 = null;
      includeTimeStamp_r15 = null;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return maxWayPointNumber_r15;
         case 1: return includeTimeStamp_r15;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "maxWayPointNumber-r15";
         case 1: return "includeTimeStamp-r15";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean includeTimeStamp_r15Present = buffer.decodeBit ("includeTimeStamp_r15Present");

      // decode maxWayPointNumber_r15

      buffer.getContext().eventDispatcher.startElement("maxWayPointNumber_r15", -1);

      maxWayPointNumber_r15 = new Asn1Integer();
      maxWayPointNumber_r15.decode (buffer, 1, 20);

      buffer.invokeCharacters(maxWayPointNumber_r15.toString());
      buffer.getContext().eventDispatcher.endElement("maxWayPointNumber_r15", -1);

      // decode includeTimeStamp_r15

      if (includeTimeStamp_r15Present) {
         buffer.getContext().eventDispatcher.startElement("includeTimeStamp_r15", -1);

         int tval = FlightPathInfoReportConfig_r15_includeTimeStamp_r15.decodeEnumValue (buffer);
         includeTimeStamp_r15 = FlightPathInfoReportConfig_r15_includeTimeStamp_r15.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("includeTimeStamp_r15", -1);
      }
      else {
         includeTimeStamp_r15 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (maxWayPointNumber_r15 != null) maxWayPointNumber_r15.print (_sb, "maxWayPointNumber_r15", _level+1);
      if (includeTimeStamp_r15 != null) includeTimeStamp_r15.print (_sb, "includeTimeStamp_r15", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
