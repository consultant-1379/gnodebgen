/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class ParametersCDMA2000_r11 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ParametersCDMA2000-r11";
   }

   public ParametersCDMA2000_r11_systemTimeInfo_r11 systemTimeInfo_r11;  // optional
   public Asn1Integer searchWindowSize_r11;
   public ParametersCDMA2000_r11_parametersHRPD_r11 parametersHRPD_r11;  // optional
   public ParametersCDMA2000_r11_parameters1XRTT_r11 parameters1XRTT_r11;  // optional
   public Asn1OpenExt extElem1;

   public ParametersCDMA2000_r11 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ParametersCDMA2000_r11 (
      ParametersCDMA2000_r11_systemTimeInfo_r11 systemTimeInfo_r11_,
      Asn1Integer searchWindowSize_r11_,
      ParametersCDMA2000_r11_parametersHRPD_r11 parametersHRPD_r11_,
      ParametersCDMA2000_r11_parameters1XRTT_r11 parameters1XRTT_r11_
   ) {
      super();
      systemTimeInfo_r11 = systemTimeInfo_r11_;
      searchWindowSize_r11 = searchWindowSize_r11_;
      parametersHRPD_r11 = parametersHRPD_r11_;
      parameters1XRTT_r11 = parameters1XRTT_r11_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public ParametersCDMA2000_r11 (
      Asn1Integer searchWindowSize_r11_
   ) {
      super();
      searchWindowSize_r11 = searchWindowSize_r11_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public ParametersCDMA2000_r11 (ParametersCDMA2000_r11_systemTimeInfo_r11 systemTimeInfo_r11_,
      long searchWindowSize_r11_,
      ParametersCDMA2000_r11_parametersHRPD_r11 parametersHRPD_r11_,
      ParametersCDMA2000_r11_parameters1XRTT_r11 parameters1XRTT_r11_
   ) {
      super();
      systemTimeInfo_r11 = systemTimeInfo_r11_;
      searchWindowSize_r11 = new Asn1Integer (searchWindowSize_r11_);
      parametersHRPD_r11 = parametersHRPD_r11_;
      parameters1XRTT_r11 = parameters1XRTT_r11_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public ParametersCDMA2000_r11 (
      long searchWindowSize_r11_
   ) {
      super();
      searchWindowSize_r11 = new Asn1Integer (searchWindowSize_r11_);
   }

   public void init () {
      systemTimeInfo_r11 = null;
      searchWindowSize_r11 = null;
      parametersHRPD_r11 = null;
      parameters1XRTT_r11 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return systemTimeInfo_r11;
         case 1: return searchWindowSize_r11;
         case 2: return parametersHRPD_r11;
         case 3: return parameters1XRTT_r11;
         case 4: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "systemTimeInfo-r11";
         case 1: return "searchWindowSize-r11";
         case 2: return "parametersHRPD-r11";
         case 3: return "parameters1XRTT-r11";
         case 4: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean systemTimeInfo_r11Present = buffer.decodeBit ("systemTimeInfo_r11Present");
      boolean parametersHRPD_r11Present = buffer.decodeBit ("parametersHRPD_r11Present");
      boolean parameters1XRTT_r11Present = buffer.decodeBit ("parameters1XRTT_r11Present");

      // decode systemTimeInfo_r11

      if (systemTimeInfo_r11Present) {
         buffer.getContext().eventDispatcher.startElement("systemTimeInfo_r11", -1);

         systemTimeInfo_r11 = new ParametersCDMA2000_r11_systemTimeInfo_r11();
         systemTimeInfo_r11.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("systemTimeInfo_r11", -1);
      }
      else {
         systemTimeInfo_r11 = null;
      }

      // decode searchWindowSize_r11

      buffer.getContext().eventDispatcher.startElement("searchWindowSize_r11", -1);

      searchWindowSize_r11 = new Asn1Integer();
      searchWindowSize_r11.decode (buffer, 0, 15);

      buffer.invokeCharacters(searchWindowSize_r11.toString());
      buffer.getContext().eventDispatcher.endElement("searchWindowSize_r11", -1);

      // decode parametersHRPD_r11

      if (parametersHRPD_r11Present) {
         buffer.getContext().eventDispatcher.startElement("parametersHRPD_r11", -1);

         parametersHRPD_r11 = new ParametersCDMA2000_r11_parametersHRPD_r11();
         parametersHRPD_r11.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("parametersHRPD_r11", -1);
      }
      else {
         parametersHRPD_r11 = null;
      }

      // decode parameters1XRTT_r11

      if (parameters1XRTT_r11Present) {
         buffer.getContext().eventDispatcher.startElement("parameters1XRTT_r11", -1);

         parameters1XRTT_r11 = new ParametersCDMA2000_r11_parameters1XRTT_r11();
         parameters1XRTT_r11.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("parameters1XRTT_r11", -1);
      }
      else {
         parameters1XRTT_r11 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (systemTimeInfo_r11 != null) systemTimeInfo_r11.print (_sb, "systemTimeInfo_r11", _level+1);
      if (searchWindowSize_r11 != null) searchWindowSize_r11.print (_sb, "searchWindowSize_r11", _level+1);
      if (parametersHRPD_r11 != null) parametersHRPD_r11.print (_sb, "parametersHRPD_r11", _level+1);
      if (parameters1XRTT_r11 != null) parameters1XRTT_r11.print (_sb, "parameters1XRTT_r11", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
