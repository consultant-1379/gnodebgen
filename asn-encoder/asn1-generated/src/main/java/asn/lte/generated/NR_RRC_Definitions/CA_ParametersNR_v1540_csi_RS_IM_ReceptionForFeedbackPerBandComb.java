/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class CA_ParametersNR_v1540_csi_RS_IM_ReceptionForFeedbackPerBandComb extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public Asn1Integer maxNumberSimultaneousNZP_CSI_RS_ActBWP_AllCC;  // optional
   public Asn1Integer totalNumberPortsSimultaneousNZP_CSI_RS_ActBWP_AllCC;  // optional

   public CA_ParametersNR_v1540_csi_RS_IM_ReceptionForFeedbackPerBandComb () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CA_ParametersNR_v1540_csi_RS_IM_ReceptionForFeedbackPerBandComb (
      Asn1Integer maxNumberSimultaneousNZP_CSI_RS_ActBWP_AllCC_,
      Asn1Integer totalNumberPortsSimultaneousNZP_CSI_RS_ActBWP_AllCC_
   ) {
      super();
      maxNumberSimultaneousNZP_CSI_RS_ActBWP_AllCC = maxNumberSimultaneousNZP_CSI_RS_ActBWP_AllCC_;
      totalNumberPortsSimultaneousNZP_CSI_RS_ActBWP_AllCC = totalNumberPortsSimultaneousNZP_CSI_RS_ActBWP_AllCC_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public CA_ParametersNR_v1540_csi_RS_IM_ReceptionForFeedbackPerBandComb (long maxNumberSimultaneousNZP_CSI_RS_ActBWP_AllCC_,
      long totalNumberPortsSimultaneousNZP_CSI_RS_ActBWP_AllCC_
   ) {
      super();
      maxNumberSimultaneousNZP_CSI_RS_ActBWP_AllCC = new Asn1Integer (maxNumberSimultaneousNZP_CSI_RS_ActBWP_AllCC_);
      totalNumberPortsSimultaneousNZP_CSI_RS_ActBWP_AllCC = new Asn1Integer (totalNumberPortsSimultaneousNZP_CSI_RS_ActBWP_AllCC_);
   }

   public void init () {
      maxNumberSimultaneousNZP_CSI_RS_ActBWP_AllCC = null;
      totalNumberPortsSimultaneousNZP_CSI_RS_ActBWP_AllCC = null;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return maxNumberSimultaneousNZP_CSI_RS_ActBWP_AllCC;
         case 1: return totalNumberPortsSimultaneousNZP_CSI_RS_ActBWP_AllCC;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "maxNumberSimultaneousNZP-CSI-RS-ActBWP-AllCC";
         case 1: return "totalNumberPortsSimultaneousNZP-CSI-RS-ActBWP-AllCC";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean maxNumberSimultaneousNZP_CSI_RS_ActBWP_AllCCPresent = buffer.decodeBit ("maxNumberSimultaneousNZP_CSI_RS_ActBWP_AllCCPresent");
      boolean totalNumberPortsSimultaneousNZP_CSI_RS_ActBWP_AllCCPresent = buffer.decodeBit ("totalNumberPortsSimultaneousNZP_CSI_RS_ActBWP_AllCCPresent");

      // decode maxNumberSimultaneousNZP_CSI_RS_ActBWP_AllCC

      if (maxNumberSimultaneousNZP_CSI_RS_ActBWP_AllCCPresent) {
         buffer.getContext().eventDispatcher.startElement("maxNumberSimultaneousNZP_CSI_RS_ActBWP_AllCC", -1);

         maxNumberSimultaneousNZP_CSI_RS_ActBWP_AllCC = new Asn1Integer();
         maxNumberSimultaneousNZP_CSI_RS_ActBWP_AllCC.decode (buffer, 1, 64);

         buffer.invokeCharacters(maxNumberSimultaneousNZP_CSI_RS_ActBWP_AllCC.toString());
         buffer.getContext().eventDispatcher.endElement("maxNumberSimultaneousNZP_CSI_RS_ActBWP_AllCC", -1);
      }
      else {
         maxNumberSimultaneousNZP_CSI_RS_ActBWP_AllCC = null;
      }

      // decode totalNumberPortsSimultaneousNZP_CSI_RS_ActBWP_AllCC

      if (totalNumberPortsSimultaneousNZP_CSI_RS_ActBWP_AllCCPresent) {
         buffer.getContext().eventDispatcher.startElement("totalNumberPortsSimultaneousNZP_CSI_RS_ActBWP_AllCC", -1);

         totalNumberPortsSimultaneousNZP_CSI_RS_ActBWP_AllCC = new Asn1Integer();
         totalNumberPortsSimultaneousNZP_CSI_RS_ActBWP_AllCC.decode (buffer, 2, 256);

         buffer.invokeCharacters(totalNumberPortsSimultaneousNZP_CSI_RS_ActBWP_AllCC.toString());
         buffer.getContext().eventDispatcher.endElement("totalNumberPortsSimultaneousNZP_CSI_RS_ActBWP_AllCC", -1);
      }
      else {
         totalNumberPortsSimultaneousNZP_CSI_RS_ActBWP_AllCC = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (maxNumberSimultaneousNZP_CSI_RS_ActBWP_AllCC != null) maxNumberSimultaneousNZP_CSI_RS_ActBWP_AllCC.print (_sb, "maxNumberSimultaneousNZP_CSI_RS_ActBWP_AllCC", _level+1);
      if (totalNumberPortsSimultaneousNZP_CSI_RS_ActBWP_AllCC != null) totalNumberPortsSimultaneousNZP_CSI_RS_ActBWP_AllCC.print (_sb, "totalNumberPortsSimultaneousNZP_CSI_RS_ActBWP_AllCC", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
