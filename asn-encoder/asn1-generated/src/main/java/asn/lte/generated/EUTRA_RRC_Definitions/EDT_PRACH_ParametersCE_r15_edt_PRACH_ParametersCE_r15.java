/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class EDT_PRACH_ParametersCE_r15_edt_PRACH_ParametersCE_r15 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public Asn1Integer prach_ConfigIndex_r15;
   public Asn1Integer prach_FreqOffset_r15;
   public EDT_PRACH_ParametersCE_r15_edt_PRACH_ParametersCE_r15_prach_StartingSubframe_r15 prach_StartingSubframe_r15 = null;  // optional
   public EDT_PRACH_ParametersCE_r15_edt_PRACH_ParametersCE_r15_mpdcch_NarrowbandsToMonitor_r15 mpdcch_NarrowbandsToMonitor_r15;

   public EDT_PRACH_ParametersCE_r15_edt_PRACH_ParametersCE_r15 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public EDT_PRACH_ParametersCE_r15_edt_PRACH_ParametersCE_r15 (
      Asn1Integer prach_ConfigIndex_r15_,
      Asn1Integer prach_FreqOffset_r15_,
      EDT_PRACH_ParametersCE_r15_edt_PRACH_ParametersCE_r15_prach_StartingSubframe_r15 prach_StartingSubframe_r15_,
      EDT_PRACH_ParametersCE_r15_edt_PRACH_ParametersCE_r15_mpdcch_NarrowbandsToMonitor_r15 mpdcch_NarrowbandsToMonitor_r15_
   ) {
      super();
      prach_ConfigIndex_r15 = prach_ConfigIndex_r15_;
      prach_FreqOffset_r15 = prach_FreqOffset_r15_;
      prach_StartingSubframe_r15 = prach_StartingSubframe_r15_;
      mpdcch_NarrowbandsToMonitor_r15 = mpdcch_NarrowbandsToMonitor_r15_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public EDT_PRACH_ParametersCE_r15_edt_PRACH_ParametersCE_r15 (
      Asn1Integer prach_ConfigIndex_r15_,
      Asn1Integer prach_FreqOffset_r15_,
      EDT_PRACH_ParametersCE_r15_edt_PRACH_ParametersCE_r15_mpdcch_NarrowbandsToMonitor_r15 mpdcch_NarrowbandsToMonitor_r15_
   ) {
      super();
      prach_ConfigIndex_r15 = prach_ConfigIndex_r15_;
      prach_FreqOffset_r15 = prach_FreqOffset_r15_;
      mpdcch_NarrowbandsToMonitor_r15 = mpdcch_NarrowbandsToMonitor_r15_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public EDT_PRACH_ParametersCE_r15_edt_PRACH_ParametersCE_r15 (long prach_ConfigIndex_r15_,
      long prach_FreqOffset_r15_,
      EDT_PRACH_ParametersCE_r15_edt_PRACH_ParametersCE_r15_prach_StartingSubframe_r15 prach_StartingSubframe_r15_,
      EDT_PRACH_ParametersCE_r15_edt_PRACH_ParametersCE_r15_mpdcch_NarrowbandsToMonitor_r15 mpdcch_NarrowbandsToMonitor_r15_
   ) {
      super();
      prach_ConfigIndex_r15 = new Asn1Integer (prach_ConfigIndex_r15_);
      prach_FreqOffset_r15 = new Asn1Integer (prach_FreqOffset_r15_);
      prach_StartingSubframe_r15 = prach_StartingSubframe_r15_;
      mpdcch_NarrowbandsToMonitor_r15 = mpdcch_NarrowbandsToMonitor_r15_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public EDT_PRACH_ParametersCE_r15_edt_PRACH_ParametersCE_r15 (
      long prach_ConfigIndex_r15_,
      long prach_FreqOffset_r15_,
      EDT_PRACH_ParametersCE_r15_edt_PRACH_ParametersCE_r15_mpdcch_NarrowbandsToMonitor_r15 mpdcch_NarrowbandsToMonitor_r15_
   ) {
      super();
      prach_ConfigIndex_r15 = new Asn1Integer (prach_ConfigIndex_r15_);
      prach_FreqOffset_r15 = new Asn1Integer (prach_FreqOffset_r15_);
      mpdcch_NarrowbandsToMonitor_r15 = mpdcch_NarrowbandsToMonitor_r15_;
   }

   public void init () {
      prach_ConfigIndex_r15 = null;
      prach_FreqOffset_r15 = null;
      prach_StartingSubframe_r15 = null;
      mpdcch_NarrowbandsToMonitor_r15 = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return prach_ConfigIndex_r15;
         case 1: return prach_FreqOffset_r15;
         case 2: return prach_StartingSubframe_r15;
         case 3: return mpdcch_NarrowbandsToMonitor_r15;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "prach-ConfigIndex-r15";
         case 1: return "prach-FreqOffset-r15";
         case 2: return "prach-StartingSubframe-r15";
         case 3: return "mpdcch-NarrowbandsToMonitor-r15";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean prach_StartingSubframe_r15Present = buffer.decodeBit ("prach_StartingSubframe_r15Present");

      // decode prach_ConfigIndex_r15

      buffer.getContext().eventDispatcher.startElement("prach_ConfigIndex_r15", -1);

      prach_ConfigIndex_r15 = new Asn1Integer();
      prach_ConfigIndex_r15.decode (buffer, 0, 63);

      buffer.invokeCharacters(prach_ConfigIndex_r15.toString());
      buffer.getContext().eventDispatcher.endElement("prach_ConfigIndex_r15", -1);

      // decode prach_FreqOffset_r15

      buffer.getContext().eventDispatcher.startElement("prach_FreqOffset_r15", -1);

      prach_FreqOffset_r15 = new Asn1Integer();
      prach_FreqOffset_r15.decode (buffer, 0, 94);

      buffer.invokeCharacters(prach_FreqOffset_r15.toString());
      buffer.getContext().eventDispatcher.endElement("prach_FreqOffset_r15", -1);

      // decode prach_StartingSubframe_r15

      if (prach_StartingSubframe_r15Present) {
         buffer.getContext().eventDispatcher.startElement("prach_StartingSubframe_r15", -1);

         int tval = EDT_PRACH_ParametersCE_r15_edt_PRACH_ParametersCE_r15_prach_StartingSubframe_r15.decodeEnumValue (buffer);
         prach_StartingSubframe_r15 = EDT_PRACH_ParametersCE_r15_edt_PRACH_ParametersCE_r15_prach_StartingSubframe_r15.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("prach_StartingSubframe_r15", -1);
      }
      else {
         prach_StartingSubframe_r15 = null;
      }

      // decode mpdcch_NarrowbandsToMonitor_r15

      buffer.getContext().eventDispatcher.startElement("mpdcch_NarrowbandsToMonitor_r15", -1);

      mpdcch_NarrowbandsToMonitor_r15 = new EDT_PRACH_ParametersCE_r15_edt_PRACH_ParametersCE_r15_mpdcch_NarrowbandsToMonitor_r15();
      mpdcch_NarrowbandsToMonitor_r15.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("mpdcch_NarrowbandsToMonitor_r15", -1);

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (prach_ConfigIndex_r15 != null) prach_ConfigIndex_r15.print (_sb, "prach_ConfigIndex_r15", _level+1);
      if (prach_FreqOffset_r15 != null) prach_FreqOffset_r15.print (_sb, "prach_FreqOffset_r15", _level+1);
      if (prach_StartingSubframe_r15 != null) prach_StartingSubframe_r15.print (_sb, "prach_StartingSubframe_r15", _level+1);
      if (mpdcch_NarrowbandsToMonitor_r15 != null) mpdcch_NarrowbandsToMonitor_r15.print (_sb, "mpdcch_NarrowbandsToMonitor_r15", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
