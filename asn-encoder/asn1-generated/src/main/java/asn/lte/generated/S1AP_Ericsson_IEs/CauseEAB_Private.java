/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.S1AP_Ericsson_IEs;

import com.objsys.asn1j.runtime.*;

public class CauseEAB_Private extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_S1AP_Ericsson_IEsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CauseEAB-Private";
   }

   // Integer constants for switch-case
   public static final int _UNSPECIFIED = 0;
   public static final int _UNKNOWNCELLID = 1;
   public static final int _ONGOINGPROCEDURE = 2;
   public static final int _FEATUREUNAVAILABLE = 3;
   public static final int _HIGHLOAD = 4;

   // Singleton instances of CauseEAB_Private
   protected static final CauseEAB_Private _unspecified = new CauseEAB_Private(0);
   protected static final CauseEAB_Private _unknownCellID = new CauseEAB_Private(1);
   protected static final CauseEAB_Private _ongoingProcedure = new CauseEAB_Private(2);
   protected static final CauseEAB_Private _featureUnavailable = new CauseEAB_Private(3);
   protected static final CauseEAB_Private _highLoad = new CauseEAB_Private(4);
   private static CauseEAB_Private __undefined = new CauseEAB_Private(-999);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    */
   protected CauseEAB_Private (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for unspecified.
    */
   public static CauseEAB_Private unspecified() {
      return _unspecified;
   }

   /**
    * Singleton accessor method for unknownCellID.
    */
   public static CauseEAB_Private unknownCellID() {
      return _unknownCellID;
   }

   /**
    * Singleton accessor method for ongoingProcedure.
    */
   public static CauseEAB_Private ongoingProcedure() {
      return _ongoingProcedure;
   }

   /**
    * Singleton accessor method for featureUnavailable.
    */
   public static CauseEAB_Private featureUnavailable() {
      return _featureUnavailable;
   }

   /**
    * Singleton accessor method for highLoad.
    */
   public static CauseEAB_Private highLoad() {
      return _highLoad;
   }

   /** Undefined value. */
   protected static CauseEAB_Private __undefined_() { return __undefined; }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return CauseEAB_Private.valueOf( CauseEAB_Private.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static CauseEAB_Private valueOf (int _value)
   {
      switch ((int)_value) {
         case 0: return unspecified();
         case 1: return unknownCellID();
         case 2: return ongoingProcedure();
         case 3: return featureUnavailable();
         case 4: return highLoad();
         default: return __undefined_();
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      boolean extbit = buffer.decodeBit ("extbit");

      if (extbit) {
         ui = buffer.decodeSmallNonNegWholeNumber ();

         switch (ui) {
            case 0: ret = 4; break;
            default: ret = 0x7fffffff; break;
         }
      }
      else {
         ui = (int) buffer.decodeConsWholeNumber (4);

         switch (ui) {
            case 0: ret =  0; break;
            case 1: ret =  1; break;
            case 2: ret =  2; break;
            case 3: ret =  3; break;
            default: throw new Asn1InvalidEnumException (ui);
         }
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (CauseEAB_Private.valueOf(ret).toString());

      return ret;
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("unspecified");
         case 1: return ("unknownCellID");
         case 2: return ("ongoingProcedure");
         case 3: return ("featureUnavailable");
         case 4: return ("highLoad");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
