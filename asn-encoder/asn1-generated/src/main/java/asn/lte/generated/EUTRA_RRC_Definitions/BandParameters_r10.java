/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class BandParameters_r10 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "BandParameters-r10";
   }

   public FreqBandIndicator bandEUTRA_r10;
   public BandParametersUL_r10 bandParametersUL_r10;  // optional
   public BandParametersDL_r10 bandParametersDL_r10;  // optional

   public BandParameters_r10 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public BandParameters_r10 (
      FreqBandIndicator bandEUTRA_r10_,
      BandParametersUL_r10 bandParametersUL_r10_,
      BandParametersDL_r10 bandParametersDL_r10_
   ) {
      super();
      bandEUTRA_r10 = bandEUTRA_r10_;
      bandParametersUL_r10 = bandParametersUL_r10_;
      bandParametersDL_r10 = bandParametersDL_r10_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public BandParameters_r10 (
      FreqBandIndicator bandEUTRA_r10_
   ) {
      super();
      bandEUTRA_r10 = bandEUTRA_r10_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public BandParameters_r10 (long bandEUTRA_r10_,
      BandParametersUL_r10 bandParametersUL_r10_,
      BandParametersDL_r10 bandParametersDL_r10_
   ) {
      super();
      bandEUTRA_r10 = new FreqBandIndicator (bandEUTRA_r10_);
      bandParametersUL_r10 = bandParametersUL_r10_;
      bandParametersDL_r10 = bandParametersDL_r10_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public BandParameters_r10 (
      long bandEUTRA_r10_
   ) {
      super();
      bandEUTRA_r10 = new FreqBandIndicator (bandEUTRA_r10_);
   }

   public void init () {
      bandEUTRA_r10 = null;
      bandParametersUL_r10 = null;
      bandParametersDL_r10 = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return bandEUTRA_r10;
         case 1: return bandParametersUL_r10;
         case 2: return bandParametersDL_r10;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "bandEUTRA-r10";
         case 1: return "bandParametersUL-r10";
         case 2: return "bandParametersDL-r10";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean bandParametersUL_r10Present = buffer.decodeBit ("bandParametersUL_r10Present");
      boolean bandParametersDL_r10Present = buffer.decodeBit ("bandParametersDL_r10Present");

      // decode bandEUTRA_r10

      buffer.getContext().eventDispatcher.startElement("bandEUTRA_r10", -1);

      bandEUTRA_r10 = new FreqBandIndicator();
      bandEUTRA_r10.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("bandEUTRA_r10", -1);

      // decode bandParametersUL_r10

      if (bandParametersUL_r10Present) {
         buffer.getContext().eventDispatcher.startElement("bandParametersUL_r10", -1);

         bandParametersUL_r10 = new BandParametersUL_r10();
         bandParametersUL_r10.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("bandParametersUL_r10", -1);
      }
      else {
         bandParametersUL_r10 = null;
      }

      // decode bandParametersDL_r10

      if (bandParametersDL_r10Present) {
         buffer.getContext().eventDispatcher.startElement("bandParametersDL_r10", -1);

         bandParametersDL_r10 = new BandParametersDL_r10();
         bandParametersDL_r10.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("bandParametersDL_r10", -1);
      }
      else {
         bandParametersDL_r10 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (bandEUTRA_r10 != null) bandEUTRA_r10.print (_sb, "bandEUTRA_r10", _level+1);
      if (bandParametersUL_r10 != null) bandParametersUL_r10.print (_sb, "bandParametersUL_r10", _level+1);
      if (bandParametersDL_r10 != null) bandParametersDL_r10.print (_sb, "bandParametersDL_r10", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
