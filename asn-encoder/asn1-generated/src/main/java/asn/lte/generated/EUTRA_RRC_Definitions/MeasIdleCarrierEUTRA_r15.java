/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MeasIdleCarrierEUTRA_r15 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "MeasIdleCarrierEUTRA-r15";
   }

   public ARFCN_ValueEUTRA_r9 carrierFreq_r15;
   public AllowedMeasBandwidth allowedMeasBandwidth_r15 = null;
   public CellList_r15 validityArea_r15;  // optional
   public CellList_r15 measCellList_r15;  // optional
   public MeasIdleCarrierEUTRA_r15_reportQuantities reportQuantities = null;
   public MeasIdleCarrierEUTRA_r15_qualityThreshold_r15 qualityThreshold_r15;  // optional
   public Asn1OpenExt extElem1;

   public MeasIdleCarrierEUTRA_r15 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MeasIdleCarrierEUTRA_r15 (
      ARFCN_ValueEUTRA_r9 carrierFreq_r15_,
      AllowedMeasBandwidth allowedMeasBandwidth_r15_,
      CellList_r15 validityArea_r15_,
      CellList_r15 measCellList_r15_,
      MeasIdleCarrierEUTRA_r15_reportQuantities reportQuantities_,
      MeasIdleCarrierEUTRA_r15_qualityThreshold_r15 qualityThreshold_r15_
   ) {
      super();
      carrierFreq_r15 = carrierFreq_r15_;
      allowedMeasBandwidth_r15 = allowedMeasBandwidth_r15_;
      validityArea_r15 = validityArea_r15_;
      measCellList_r15 = measCellList_r15_;
      reportQuantities = reportQuantities_;
      qualityThreshold_r15 = qualityThreshold_r15_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public MeasIdleCarrierEUTRA_r15 (
      ARFCN_ValueEUTRA_r9 carrierFreq_r15_,
      AllowedMeasBandwidth allowedMeasBandwidth_r15_,
      MeasIdleCarrierEUTRA_r15_reportQuantities reportQuantities_
   ) {
      super();
      carrierFreq_r15 = carrierFreq_r15_;
      allowedMeasBandwidth_r15 = allowedMeasBandwidth_r15_;
      reportQuantities = reportQuantities_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public MeasIdleCarrierEUTRA_r15 (long carrierFreq_r15_,
      AllowedMeasBandwidth allowedMeasBandwidth_r15_,
      CellList_r15 validityArea_r15_,
      CellList_r15 measCellList_r15_,
      MeasIdleCarrierEUTRA_r15_reportQuantities reportQuantities_,
      MeasIdleCarrierEUTRA_r15_qualityThreshold_r15 qualityThreshold_r15_
   ) {
      super();
      carrierFreq_r15 = new ARFCN_ValueEUTRA_r9 (carrierFreq_r15_);
      allowedMeasBandwidth_r15 = allowedMeasBandwidth_r15_;
      validityArea_r15 = validityArea_r15_;
      measCellList_r15 = measCellList_r15_;
      reportQuantities = reportQuantities_;
      qualityThreshold_r15 = qualityThreshold_r15_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public MeasIdleCarrierEUTRA_r15 (
      long carrierFreq_r15_,
      AllowedMeasBandwidth allowedMeasBandwidth_r15_,
      MeasIdleCarrierEUTRA_r15_reportQuantities reportQuantities_
   ) {
      super();
      carrierFreq_r15 = new ARFCN_ValueEUTRA_r9 (carrierFreq_r15_);
      allowedMeasBandwidth_r15 = allowedMeasBandwidth_r15_;
      reportQuantities = reportQuantities_;
   }

   public void init () {
      carrierFreq_r15 = null;
      allowedMeasBandwidth_r15 = null;
      validityArea_r15 = null;
      measCellList_r15 = null;
      reportQuantities = null;
      qualityThreshold_r15 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return carrierFreq_r15;
         case 1: return allowedMeasBandwidth_r15;
         case 2: return validityArea_r15;
         case 3: return measCellList_r15;
         case 4: return reportQuantities;
         case 5: return qualityThreshold_r15;
         case 6: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "carrierFreq-r15";
         case 1: return "allowedMeasBandwidth-r15";
         case 2: return "validityArea-r15";
         case 3: return "measCellList-r15";
         case 4: return "reportQuantities";
         case 5: return "qualityThreshold-r15";
         case 6: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean validityArea_r15Present = buffer.decodeBit ("validityArea_r15Present");
      boolean measCellList_r15Present = buffer.decodeBit ("measCellList_r15Present");
      boolean qualityThreshold_r15Present = buffer.decodeBit ("qualityThreshold_r15Present");

      // decode carrierFreq_r15

      buffer.getContext().eventDispatcher.startElement("carrierFreq_r15", -1);

      carrierFreq_r15 = new ARFCN_ValueEUTRA_r9();
      carrierFreq_r15.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("carrierFreq_r15", -1);

      // decode allowedMeasBandwidth_r15

      buffer.getContext().eventDispatcher.startElement("allowedMeasBandwidth_r15", -1);

      {
         int tval = AllowedMeasBandwidth.decodeEnumValue (buffer);
         allowedMeasBandwidth_r15 = AllowedMeasBandwidth.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("allowedMeasBandwidth_r15", -1);

      // decode validityArea_r15

      if (validityArea_r15Present) {
         buffer.getContext().eventDispatcher.startElement("validityArea_r15", -1);

         validityArea_r15 = new CellList_r15();
         validityArea_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("validityArea_r15", -1);
      }
      else {
         validityArea_r15 = null;
      }

      // decode measCellList_r15

      if (measCellList_r15Present) {
         buffer.getContext().eventDispatcher.startElement("measCellList_r15", -1);

         measCellList_r15 = new CellList_r15();
         measCellList_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("measCellList_r15", -1);
      }
      else {
         measCellList_r15 = null;
      }

      // decode reportQuantities

      buffer.getContext().eventDispatcher.startElement("reportQuantities", -1);

      {
         int tval = MeasIdleCarrierEUTRA_r15_reportQuantities.decodeEnumValue (buffer);
         reportQuantities = MeasIdleCarrierEUTRA_r15_reportQuantities.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("reportQuantities", -1);

      // decode qualityThreshold_r15

      if (qualityThreshold_r15Present) {
         buffer.getContext().eventDispatcher.startElement("qualityThreshold_r15", -1);

         qualityThreshold_r15 = new MeasIdleCarrierEUTRA_r15_qualityThreshold_r15();
         qualityThreshold_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("qualityThreshold_r15", -1);
      }
      else {
         qualityThreshold_r15 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (carrierFreq_r15 != null) carrierFreq_r15.print (_sb, "carrierFreq_r15", _level+1);
      if (allowedMeasBandwidth_r15 != null) allowedMeasBandwidth_r15.print (_sb, "allowedMeasBandwidth_r15", _level+1);
      if (validityArea_r15 != null) validityArea_r15.print (_sb, "validityArea_r15", _level+1);
      if (measCellList_r15 != null) measCellList_r15.print (_sb, "measCellList_r15", _level+1);
      if (reportQuantities != null) reportQuantities.print (_sb, "reportQuantities", _level+1);
      if (qualityThreshold_r15 != null) qualityThreshold_r15.print (_sb, "qualityThreshold_r15", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
