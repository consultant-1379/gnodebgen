/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.X2AP_IEs;

import com.objsys.asn1j.runtime.*;

public class ENB_ID extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_X2AP_IEsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ENB-ID";
   }

   // Choice element identifier constants
   public final static byte _MACRO_ENB_ID = 1;
   public final static byte _HOME_ENB_ID = 2;
   public final static byte _SHORT_MACRO_ENB_ID = 3;
   public final static byte _LONG_MACRO_ENB_ID = 4;
   public final static byte _EXTELEM1 = 5;

   public ENB_ID () {
      super();
   }

   public ENB_ID (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _MACRO_ENB_ID: return "macro_eNB_ID";
      case _HOME_ENB_ID: return "home_eNB_ID";
      case _SHORT_MACRO_ENB_ID: return "short_Macro_eNB_ID";
      case _LONG_MACRO_ENB_ID: return "long_Macro_eNB_ID";
      case _EXTELEM1: return "...";
      default: return "UNDEFINED";
      }
   }

   public void set_macro_eNB_ID (Asn1BitString value) {
      setElement (_MACRO_ENB_ID, value);
   }

   public void set_home_eNB_ID (Asn1BitString value) {
      setElement (_HOME_ENB_ID, value);
   }

   public void set_short_Macro_eNB_ID (Asn1BitString value) {
      setElement (_SHORT_MACRO_ENB_ID, value);
   }

   public void set_long_Macro_eNB_ID (Asn1BitString value) {
      setElement (_LONG_MACRO_ENB_ID, value);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      Asn1PerDecodeBuffer savedBuffer = null;
      boolean extbit = buffer.decodeBit ("extbit");

      if (!extbit) {
         int idx = (int) buffer.decodeConsWholeNumber (2, "index");
         choiceID = idx + 1;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         switch (idx) {
            // macro_eNB_ID
            case 0: { 
               Asn1BitString macro_eNB_ID;
               element = macro_eNB_ID = new Asn1BitString();
               macro_eNB_ID.decode (buffer, 20, 20);

               buffer.invokeCharacters(macro_eNB_ID.toString());
               break;
            }

            // home_eNB_ID
            case 1: { 
               Asn1BitString home_eNB_ID;
               element = home_eNB_ID = new Asn1BitString();
               home_eNB_ID.decode (buffer, 28, 28);

               buffer.invokeCharacters(home_eNB_ID.toString());
               break;
            }

            default:
            throw new Asn1InvalidChoiceOptionException (buffer, idx);
         }
      }
      else {
         int idx = (int) buffer.decodeSmallNonNegWholeNumber ();
         choiceID = idx + 3;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         buffer.byteAlign();

         Asn1OpenType openType = new Asn1OpenType ();
         openType.decode (buffer);

         savedBuffer = buffer;
         buffer = new Asn1PerDecodeBuffer (openType.value, savedBuffer.isAligned());
         buffer.setEventHandlerList (savedBuffer);

         switch (idx) {
            // short_Macro_eNB_ID
            case 0: { 
               Asn1BitString short_Macro_eNB_ID;
               element = short_Macro_eNB_ID = new Asn1BitString();
               short_Macro_eNB_ID.decode (buffer, 18, 18);

               buffer.invokeCharacters(short_Macro_eNB_ID.toString());
               break;
            }

            // long_Macro_eNB_ID
            case 1: { 
               Asn1BitString long_Macro_eNB_ID;
               element = long_Macro_eNB_ID = new Asn1BitString();
               long_Macro_eNB_ID.decode (buffer, 21, 21);

               buffer.invokeCharacters(long_Macro_eNB_ID.toString());
               break;
            }

            // extElem1
            case 2: { 
               Asn1OpenType extElem1;
               element = extElem1 = new Asn1OpenType();
               extElem1.decode (buffer);

               buffer.invokeCharacters(extElem1.toString());
               break;
            }

            default:
               setElement (_EXTELEM1, openType);
               buffer.invokeCharacters (openType.toString());
         }

      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);

      if (savedBuffer != null) {
         buffer = savedBuffer;
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (element != null) {
         element.print (_sb, getElemName(), _level+1);
      }
      indent (_sb, _level);
      _sb.append("}\n");
   }

}
