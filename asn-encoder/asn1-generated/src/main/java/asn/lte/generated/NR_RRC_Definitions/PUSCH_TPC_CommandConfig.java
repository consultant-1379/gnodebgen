/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class PUSCH_TPC_CommandConfig extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "PUSCH-TPC-CommandConfig";
   }

   public Asn1Integer tpc_Index;  // optional
   public Asn1Integer tpc_IndexSUL;  // optional
   public ServCellIndex targetCell;  // optional
   public Asn1OpenExt extElem1;

   public PUSCH_TPC_CommandConfig () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public PUSCH_TPC_CommandConfig (
      Asn1Integer tpc_Index_,
      Asn1Integer tpc_IndexSUL_,
      ServCellIndex targetCell_
   ) {
      super();
      tpc_Index = tpc_Index_;
      tpc_IndexSUL = tpc_IndexSUL_;
      targetCell = targetCell_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public PUSCH_TPC_CommandConfig (long tpc_Index_,
      long tpc_IndexSUL_,
      long targetCell_
   ) {
      super();
      tpc_Index = new Asn1Integer (tpc_Index_);
      tpc_IndexSUL = new Asn1Integer (tpc_IndexSUL_);
      targetCell = new ServCellIndex (targetCell_);
   }

   public void init () {
      tpc_Index = null;
      tpc_IndexSUL = null;
      targetCell = null;
      extElem1 = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return tpc_Index;
         case 1: return tpc_IndexSUL;
         case 2: return targetCell;
         case 3: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "tpc-Index";
         case 1: return "tpc-IndexSUL";
         case 2: return "targetCell";
         case 3: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean tpc_IndexPresent = buffer.decodeBit ("tpc_IndexPresent");
      boolean tpc_IndexSULPresent = buffer.decodeBit ("tpc_IndexSULPresent");
      boolean targetCellPresent = buffer.decodeBit ("targetCellPresent");

      // decode tpc_Index

      if (tpc_IndexPresent) {
         buffer.getContext().eventDispatcher.startElement("tpc_Index", -1);

         tpc_Index = new Asn1Integer();
         tpc_Index.decode (buffer, 1, 15);

         buffer.invokeCharacters(tpc_Index.toString());
         buffer.getContext().eventDispatcher.endElement("tpc_Index", -1);
      }
      else {
         tpc_Index = null;
      }

      // decode tpc_IndexSUL

      if (tpc_IndexSULPresent) {
         buffer.getContext().eventDispatcher.startElement("tpc_IndexSUL", -1);

         tpc_IndexSUL = new Asn1Integer();
         tpc_IndexSUL.decode (buffer, 1, 15);

         buffer.invokeCharacters(tpc_IndexSUL.toString());
         buffer.getContext().eventDispatcher.endElement("tpc_IndexSUL", -1);
      }
      else {
         tpc_IndexSUL = null;
      }

      // decode targetCell

      if (targetCellPresent) {
         buffer.getContext().eventDispatcher.startElement("targetCell", -1);

         targetCell = new ServCellIndex();
         targetCell.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("targetCell", -1);
      }
      else {
         targetCell = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (tpc_Index != null) tpc_Index.print (_sb, "tpc_Index", _level+1);
      if (tpc_IndexSUL != null) tpc_IndexSUL.print (_sb, "tpc_IndexSUL", _level+1);
      if (targetCell != null) targetCell.print (_sb, "targetCell", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
