/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MeasConfig extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "MeasConfig";
   }

   public MeasObjectToRemoveList measObjectToRemoveList;  // optional
   public MeasObjectToAddModList measObjectToAddModList;  // optional
   public ReportConfigToRemoveList reportConfigToRemoveList;  // optional
   public ReportConfigToAddModList reportConfigToAddModList;  // optional
   public MeasIdToRemoveList measIdToRemoveList;  // optional
   public MeasIdToAddModList measIdToAddModList;  // optional
   public QuantityConfig quantityConfig;  // optional
   public MeasGapConfig measGapConfig;  // optional
   public RSRP_Range s_Measure;  // optional
   public PreRegistrationInfoHRPD preRegistrationInfoHRPD;  // optional
   public MeasConfig_speedStatePars speedStatePars;  // optional
   public boolean mV2ExtPresent;
   public MeasObjectToAddModList_v9e0 measObjectToAddModList_v9e0;  // optional
   public boolean mV3ExtPresent;
   public Asn1Boolean allowInterruptions_r11;  // optional
   public boolean mV4ExtPresent;
   public MeasConfig_measScaleFactor_r12 measScaleFactor_r12;  // optional
   public MeasIdToRemoveListExt_r12 measIdToRemoveListExt_r12;  // optional
   public MeasIdToAddModListExt_r12 measIdToAddModListExt_r12;  // optional
   public Asn1Boolean measRSRQ_OnAllSymbols_r12;  // optional
   public boolean mV5ExtPresent;
   public MeasObjectToRemoveListExt_r13 measObjectToRemoveListExt_r13;  // optional
   public MeasObjectToAddModListExt_r13 measObjectToAddModListExt_r13;  // optional
   public MeasIdToAddModList_v1310 measIdToAddModList_v1310;  // optional
   public MeasIdToAddModListExt_v1310 measIdToAddModListExt_v1310;  // optional
   public boolean mV6ExtPresent;
   public MeasGapConfigPerCC_List_r14 measGapConfigPerCC_List_r14;  // optional
   public MeasGapSharingConfig_r14 measGapSharingConfig_r14;  // optional
   public boolean mV7ExtPresent;
   public Asn1Boolean fr1_Gap_r15;  // optional
   public Asn1Boolean mgta_r15;  // optional
   public boolean mV8ExtPresent;
   public MeasGapConfigDensePRS_r15 measGapConfigDensePRS_r15;  // optional
   public MeasConfig_heightThreshRef_r15 heightThreshRef_r15;  // optional
   public Asn1OpenExt extElem1;

   public MeasConfig () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MeasConfig (
      MeasObjectToRemoveList measObjectToRemoveList_,
      MeasObjectToAddModList measObjectToAddModList_,
      ReportConfigToRemoveList reportConfigToRemoveList_,
      ReportConfigToAddModList reportConfigToAddModList_,
      MeasIdToRemoveList measIdToRemoveList_,
      MeasIdToAddModList measIdToAddModList_,
      QuantityConfig quantityConfig_,
      MeasGapConfig measGapConfig_,
      RSRP_Range s_Measure_,
      PreRegistrationInfoHRPD preRegistrationInfoHRPD_,
      MeasConfig_speedStatePars speedStatePars_,
      MeasObjectToAddModList_v9e0 measObjectToAddModList_v9e0_,
      Asn1Boolean allowInterruptions_r11_,
      MeasConfig_measScaleFactor_r12 measScaleFactor_r12_,
      MeasIdToRemoveListExt_r12 measIdToRemoveListExt_r12_,
      MeasIdToAddModListExt_r12 measIdToAddModListExt_r12_,
      Asn1Boolean measRSRQ_OnAllSymbols_r12_,
      MeasObjectToRemoveListExt_r13 measObjectToRemoveListExt_r13_,
      MeasObjectToAddModListExt_r13 measObjectToAddModListExt_r13_,
      MeasIdToAddModList_v1310 measIdToAddModList_v1310_,
      MeasIdToAddModListExt_v1310 measIdToAddModListExt_v1310_,
      MeasGapConfigPerCC_List_r14 measGapConfigPerCC_List_r14_,
      MeasGapSharingConfig_r14 measGapSharingConfig_r14_,
      Asn1Boolean fr1_Gap_r15_,
      Asn1Boolean mgta_r15_,
      MeasGapConfigDensePRS_r15 measGapConfigDensePRS_r15_,
      MeasConfig_heightThreshRef_r15 heightThreshRef_r15_
   ) {
      super();
      measObjectToRemoveList = measObjectToRemoveList_;
      measObjectToAddModList = measObjectToAddModList_;
      reportConfigToRemoveList = reportConfigToRemoveList_;
      reportConfigToAddModList = reportConfigToAddModList_;
      measIdToRemoveList = measIdToRemoveList_;
      measIdToAddModList = measIdToAddModList_;
      quantityConfig = quantityConfig_;
      measGapConfig = measGapConfig_;
      s_Measure = s_Measure_;
      preRegistrationInfoHRPD = preRegistrationInfoHRPD_;
      speedStatePars = speedStatePars_;
      measObjectToAddModList_v9e0 = measObjectToAddModList_v9e0_;
      allowInterruptions_r11 = allowInterruptions_r11_;
      measScaleFactor_r12 = measScaleFactor_r12_;
      measIdToRemoveListExt_r12 = measIdToRemoveListExt_r12_;
      measIdToAddModListExt_r12 = measIdToAddModListExt_r12_;
      measRSRQ_OnAllSymbols_r12 = measRSRQ_OnAllSymbols_r12_;
      measObjectToRemoveListExt_r13 = measObjectToRemoveListExt_r13_;
      measObjectToAddModListExt_r13 = measObjectToAddModListExt_r13_;
      measIdToAddModList_v1310 = measIdToAddModList_v1310_;
      measIdToAddModListExt_v1310 = measIdToAddModListExt_v1310_;
      measGapConfigPerCC_List_r14 = measGapConfigPerCC_List_r14_;
      measGapSharingConfig_r14 = measGapSharingConfig_r14_;
      fr1_Gap_r15 = fr1_Gap_r15_;
      mgta_r15 = mgta_r15_;
      measGapConfigDensePRS_r15 = measGapConfigDensePRS_r15_;
      heightThreshRef_r15 = heightThreshRef_r15_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public MeasConfig (MeasObjectToRemoveList measObjectToRemoveList_,
      MeasObjectToAddModList measObjectToAddModList_,
      ReportConfigToRemoveList reportConfigToRemoveList_,
      ReportConfigToAddModList reportConfigToAddModList_,
      MeasIdToRemoveList measIdToRemoveList_,
      MeasIdToAddModList measIdToAddModList_,
      QuantityConfig quantityConfig_,
      MeasGapConfig measGapConfig_,
      long s_Measure_,
      PreRegistrationInfoHRPD preRegistrationInfoHRPD_,
      MeasConfig_speedStatePars speedStatePars_,
      MeasObjectToAddModList_v9e0 measObjectToAddModList_v9e0_,
      boolean allowInterruptions_r11_,
      MeasConfig_measScaleFactor_r12 measScaleFactor_r12_,
      MeasIdToRemoveListExt_r12 measIdToRemoveListExt_r12_,
      MeasIdToAddModListExt_r12 measIdToAddModListExt_r12_,
      boolean measRSRQ_OnAllSymbols_r12_,
      MeasObjectToRemoveListExt_r13 measObjectToRemoveListExt_r13_,
      MeasObjectToAddModListExt_r13 measObjectToAddModListExt_r13_,
      MeasIdToAddModList_v1310 measIdToAddModList_v1310_,
      MeasIdToAddModListExt_v1310 measIdToAddModListExt_v1310_,
      MeasGapConfigPerCC_List_r14 measGapConfigPerCC_List_r14_,
      MeasGapSharingConfig_r14 measGapSharingConfig_r14_,
      boolean fr1_Gap_r15_,
      boolean mgta_r15_,
      MeasGapConfigDensePRS_r15 measGapConfigDensePRS_r15_,
      MeasConfig_heightThreshRef_r15 heightThreshRef_r15_
   ) {
      super();
      measObjectToRemoveList = measObjectToRemoveList_;
      measObjectToAddModList = measObjectToAddModList_;
      reportConfigToRemoveList = reportConfigToRemoveList_;
      reportConfigToAddModList = reportConfigToAddModList_;
      measIdToRemoveList = measIdToRemoveList_;
      measIdToAddModList = measIdToAddModList_;
      quantityConfig = quantityConfig_;
      measGapConfig = measGapConfig_;
      s_Measure = new RSRP_Range (s_Measure_);
      preRegistrationInfoHRPD = preRegistrationInfoHRPD_;
      speedStatePars = speedStatePars_;
      measObjectToAddModList_v9e0 = measObjectToAddModList_v9e0_;
      allowInterruptions_r11 = new Asn1Boolean (allowInterruptions_r11_);
      measScaleFactor_r12 = measScaleFactor_r12_;
      measIdToRemoveListExt_r12 = measIdToRemoveListExt_r12_;
      measIdToAddModListExt_r12 = measIdToAddModListExt_r12_;
      measRSRQ_OnAllSymbols_r12 = new Asn1Boolean (measRSRQ_OnAllSymbols_r12_);
      measObjectToRemoveListExt_r13 = measObjectToRemoveListExt_r13_;
      measObjectToAddModListExt_r13 = measObjectToAddModListExt_r13_;
      measIdToAddModList_v1310 = measIdToAddModList_v1310_;
      measIdToAddModListExt_v1310 = measIdToAddModListExt_v1310_;
      measGapConfigPerCC_List_r14 = measGapConfigPerCC_List_r14_;
      measGapSharingConfig_r14 = measGapSharingConfig_r14_;
      fr1_Gap_r15 = new Asn1Boolean (fr1_Gap_r15_);
      mgta_r15 = new Asn1Boolean (mgta_r15_);
      measGapConfigDensePRS_r15 = measGapConfigDensePRS_r15_;
      heightThreshRef_r15 = heightThreshRef_r15_;
   }

   public void init () {
      measObjectToRemoveList = null;
      measObjectToAddModList = null;
      reportConfigToRemoveList = null;
      reportConfigToAddModList = null;
      measIdToRemoveList = null;
      measIdToAddModList = null;
      quantityConfig = null;
      measGapConfig = null;
      s_Measure = null;
      preRegistrationInfoHRPD = null;
      speedStatePars = null;
      measObjectToAddModList_v9e0 = null;
      allowInterruptions_r11 = null;
      measScaleFactor_r12 = null;
      measIdToRemoveListExt_r12 = null;
      measIdToAddModListExt_r12 = null;
      measRSRQ_OnAllSymbols_r12 = null;
      measObjectToRemoveListExt_r13 = null;
      measObjectToAddModListExt_r13 = null;
      measIdToAddModList_v1310 = null;
      measIdToAddModListExt_v1310 = null;
      measGapConfigPerCC_List_r14 = null;
      measGapSharingConfig_r14 = null;
      fr1_Gap_r15 = null;
      mgta_r15 = null;
      measGapConfigDensePRS_r15 = null;
      heightThreshRef_r15 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 28; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return measObjectToRemoveList;
         case 1: return measObjectToAddModList;
         case 2: return reportConfigToRemoveList;
         case 3: return reportConfigToAddModList;
         case 4: return measIdToRemoveList;
         case 5: return measIdToAddModList;
         case 6: return quantityConfig;
         case 7: return measGapConfig;
         case 8: return s_Measure;
         case 9: return preRegistrationInfoHRPD;
         case 10: return speedStatePars;
         case 11: return measObjectToAddModList_v9e0;
         case 12: return allowInterruptions_r11;
         case 13: return measScaleFactor_r12;
         case 14: return measIdToRemoveListExt_r12;
         case 15: return measIdToAddModListExt_r12;
         case 16: return measRSRQ_OnAllSymbols_r12;
         case 17: return measObjectToRemoveListExt_r13;
         case 18: return measObjectToAddModListExt_r13;
         case 19: return measIdToAddModList_v1310;
         case 20: return measIdToAddModListExt_v1310;
         case 21: return measGapConfigPerCC_List_r14;
         case 22: return measGapSharingConfig_r14;
         case 23: return fr1_Gap_r15;
         case 24: return mgta_r15;
         case 25: return measGapConfigDensePRS_r15;
         case 26: return heightThreshRef_r15;
         case 27: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "measObjectToRemoveList";
         case 1: return "measObjectToAddModList";
         case 2: return "reportConfigToRemoveList";
         case 3: return "reportConfigToAddModList";
         case 4: return "measIdToRemoveList";
         case 5: return "measIdToAddModList";
         case 6: return "quantityConfig";
         case 7: return "measGapConfig";
         case 8: return "s-Measure";
         case 9: return "preRegistrationInfoHRPD";
         case 10: return "speedStatePars";
         case 11: return "measObjectToAddModList-v9e0";
         case 12: return "allowInterruptions-r11";
         case 13: return "measScaleFactor-r12";
         case 14: return "measIdToRemoveListExt-r12";
         case 15: return "measIdToAddModListExt-r12";
         case 16: return "measRSRQ-OnAllSymbols-r12";
         case 17: return "measObjectToRemoveListExt-r13";
         case 18: return "measObjectToAddModListExt-r13";
         case 19: return "measIdToAddModList-v1310";
         case 20: return "measIdToAddModListExt-v1310";
         case 21: return "measGapConfigPerCC-List-r14";
         case 22: return "measGapSharingConfig-r14";
         case 23: return "fr1-Gap-r15";
         case 24: return "mgta-r15";
         case 25: return "measGapConfigDensePRS-r15";
         case 26: return "heightThreshRef-r15";
         case 27: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean measObjectToRemoveListPresent = buffer.decodeBit ("measObjectToRemoveListPresent");
      boolean measObjectToAddModListPresent = buffer.decodeBit ("measObjectToAddModListPresent");
      boolean reportConfigToRemoveListPresent = buffer.decodeBit ("reportConfigToRemoveListPresent");
      boolean reportConfigToAddModListPresent = buffer.decodeBit ("reportConfigToAddModListPresent");
      boolean measIdToRemoveListPresent = buffer.decodeBit ("measIdToRemoveListPresent");
      boolean measIdToAddModListPresent = buffer.decodeBit ("measIdToAddModListPresent");
      boolean quantityConfigPresent = buffer.decodeBit ("quantityConfigPresent");
      boolean measGapConfigPresent = buffer.decodeBit ("measGapConfigPresent");
      boolean s_MeasurePresent = buffer.decodeBit ("s_MeasurePresent");
      boolean preRegistrationInfoHRPDPresent = buffer.decodeBit ("preRegistrationInfoHRPDPresent");
      boolean speedStateParsPresent = buffer.decodeBit ("speedStateParsPresent");

      // decode measObjectToRemoveList

      if (measObjectToRemoveListPresent) {
         buffer.getContext().eventDispatcher.startElement("measObjectToRemoveList", -1);

         measObjectToRemoveList = new MeasObjectToRemoveList();
         measObjectToRemoveList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("measObjectToRemoveList", -1);
      }
      else {
         measObjectToRemoveList = null;
      }

      // decode measObjectToAddModList

      if (measObjectToAddModListPresent) {
         buffer.getContext().eventDispatcher.startElement("measObjectToAddModList", -1);

         measObjectToAddModList = new MeasObjectToAddModList();
         measObjectToAddModList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("measObjectToAddModList", -1);
      }
      else {
         measObjectToAddModList = null;
      }

      // decode reportConfigToRemoveList

      if (reportConfigToRemoveListPresent) {
         buffer.getContext().eventDispatcher.startElement("reportConfigToRemoveList", -1);

         reportConfigToRemoveList = new ReportConfigToRemoveList();
         reportConfigToRemoveList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("reportConfigToRemoveList", -1);
      }
      else {
         reportConfigToRemoveList = null;
      }

      // decode reportConfigToAddModList

      if (reportConfigToAddModListPresent) {
         buffer.getContext().eventDispatcher.startElement("reportConfigToAddModList", -1);

         reportConfigToAddModList = new ReportConfigToAddModList();
         reportConfigToAddModList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("reportConfigToAddModList", -1);
      }
      else {
         reportConfigToAddModList = null;
      }

      // decode measIdToRemoveList

      if (measIdToRemoveListPresent) {
         buffer.getContext().eventDispatcher.startElement("measIdToRemoveList", -1);

         measIdToRemoveList = new MeasIdToRemoveList();
         measIdToRemoveList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("measIdToRemoveList", -1);
      }
      else {
         measIdToRemoveList = null;
      }

      // decode measIdToAddModList

      if (measIdToAddModListPresent) {
         buffer.getContext().eventDispatcher.startElement("measIdToAddModList", -1);

         measIdToAddModList = new MeasIdToAddModList();
         measIdToAddModList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("measIdToAddModList", -1);
      }
      else {
         measIdToAddModList = null;
      }

      // decode quantityConfig

      if (quantityConfigPresent) {
         buffer.getContext().eventDispatcher.startElement("quantityConfig", -1);

         quantityConfig = new QuantityConfig();
         quantityConfig.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("quantityConfig", -1);
      }
      else {
         quantityConfig = null;
      }

      // decode measGapConfig

      if (measGapConfigPresent) {
         buffer.getContext().eventDispatcher.startElement("measGapConfig", -1);

         measGapConfig = new MeasGapConfig();
         measGapConfig.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("measGapConfig", -1);
      }
      else {
         measGapConfig = null;
      }

      // decode s_Measure

      if (s_MeasurePresent) {
         buffer.getContext().eventDispatcher.startElement("s_Measure", -1);

         s_Measure = new RSRP_Range();
         s_Measure.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("s_Measure", -1);
      }
      else {
         s_Measure = null;
      }

      // decode preRegistrationInfoHRPD

      if (preRegistrationInfoHRPDPresent) {
         buffer.getContext().eventDispatcher.startElement("preRegistrationInfoHRPD", -1);

         preRegistrationInfoHRPD = new PreRegistrationInfoHRPD();
         preRegistrationInfoHRPD.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("preRegistrationInfoHRPD", -1);
      }
      else {
         preRegistrationInfoHRPD = null;
      }

      // decode speedStatePars

      if (speedStateParsPresent) {
         buffer.getContext().eventDispatcher.startElement("speedStatePars", -1);

         speedStatePars = new MeasConfig_speedStatePars();
         speedStatePars.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("speedStatePars", -1);
      }
      else {
         speedStatePars = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV4ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV5ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV6ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV7ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV8ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean measObjectToAddModList_v9e0Present = buffer.decodeBit ("measObjectToAddModList_v9e0Present");

            // decode measObjectToAddModList_v9e0

            if (measObjectToAddModList_v9e0Present) {
               buffer.getContext().eventDispatcher.startElement("measObjectToAddModList_v9e0", -1);

               measObjectToAddModList_v9e0 = new MeasObjectToAddModList_v9e0();
               measObjectToAddModList_v9e0.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("measObjectToAddModList_v9e0", -1);
            }
            else {
               measObjectToAddModList_v9e0 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean allowInterruptions_r11Present = buffer.decodeBit ("allowInterruptions_r11Present");

            // decode allowInterruptions_r11

            if (allowInterruptions_r11Present) {
               buffer.getContext().eventDispatcher.startElement("allowInterruptions_r11", -1);

               allowInterruptions_r11 = new Asn1Boolean();
               allowInterruptions_r11.decode (buffer);

               buffer.invokeCharacters(allowInterruptions_r11.toString());
               buffer.getContext().eventDispatcher.endElement("allowInterruptions_r11", -1);
            }
            else {
               allowInterruptions_r11 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV4ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean measScaleFactor_r12Present = buffer.decodeBit ("measScaleFactor_r12Present");

            boolean measIdToRemoveListExt_r12Present = buffer.decodeBit ("measIdToRemoveListExt_r12Present");

            boolean measIdToAddModListExt_r12Present = buffer.decodeBit ("measIdToAddModListExt_r12Present");

            boolean measRSRQ_OnAllSymbols_r12Present = buffer.decodeBit ("measRSRQ_OnAllSymbols_r12Present");

            // decode measScaleFactor_r12

            if (measScaleFactor_r12Present) {
               buffer.getContext().eventDispatcher.startElement("measScaleFactor_r12", -1);

               measScaleFactor_r12 = new MeasConfig_measScaleFactor_r12();
               measScaleFactor_r12.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("measScaleFactor_r12", -1);
            }
            else {
               measScaleFactor_r12 = null;
            }

            // decode measIdToRemoveListExt_r12

            if (measIdToRemoveListExt_r12Present) {
               buffer.getContext().eventDispatcher.startElement("measIdToRemoveListExt_r12", -1);

               measIdToRemoveListExt_r12 = new MeasIdToRemoveListExt_r12();
               measIdToRemoveListExt_r12.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("measIdToRemoveListExt_r12", -1);
            }
            else {
               measIdToRemoveListExt_r12 = null;
            }

            // decode measIdToAddModListExt_r12

            if (measIdToAddModListExt_r12Present) {
               buffer.getContext().eventDispatcher.startElement("measIdToAddModListExt_r12", -1);

               measIdToAddModListExt_r12 = new MeasIdToAddModListExt_r12();
               measIdToAddModListExt_r12.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("measIdToAddModListExt_r12", -1);
            }
            else {
               measIdToAddModListExt_r12 = null;
            }

            // decode measRSRQ_OnAllSymbols_r12

            if (measRSRQ_OnAllSymbols_r12Present) {
               buffer.getContext().eventDispatcher.startElement("measRSRQ_OnAllSymbols_r12", -1);

               measRSRQ_OnAllSymbols_r12 = new Asn1Boolean();
               measRSRQ_OnAllSymbols_r12.decode (buffer);

               buffer.invokeCharacters(measRSRQ_OnAllSymbols_r12.toString());
               buffer.getContext().eventDispatcher.endElement("measRSRQ_OnAllSymbols_r12", -1);
            }
            else {
               measRSRQ_OnAllSymbols_r12 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV5ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean measObjectToRemoveListExt_r13Present = buffer.decodeBit ("measObjectToRemoveListExt_r13Present");

            boolean measObjectToAddModListExt_r13Present = buffer.decodeBit ("measObjectToAddModListExt_r13Present");

            boolean measIdToAddModList_v1310Present = buffer.decodeBit ("measIdToAddModList_v1310Present");

            boolean measIdToAddModListExt_v1310Present = buffer.decodeBit ("measIdToAddModListExt_v1310Present");

            // decode measObjectToRemoveListExt_r13

            if (measObjectToRemoveListExt_r13Present) {
               buffer.getContext().eventDispatcher.startElement("measObjectToRemoveListExt_r13", -1);

               measObjectToRemoveListExt_r13 = new MeasObjectToRemoveListExt_r13();
               measObjectToRemoveListExt_r13.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("measObjectToRemoveListExt_r13", -1);
            }
            else {
               measObjectToRemoveListExt_r13 = null;
            }

            // decode measObjectToAddModListExt_r13

            if (measObjectToAddModListExt_r13Present) {
               buffer.getContext().eventDispatcher.startElement("measObjectToAddModListExt_r13", -1);

               measObjectToAddModListExt_r13 = new MeasObjectToAddModListExt_r13();
               measObjectToAddModListExt_r13.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("measObjectToAddModListExt_r13", -1);
            }
            else {
               measObjectToAddModListExt_r13 = null;
            }

            // decode measIdToAddModList_v1310

            if (measIdToAddModList_v1310Present) {
               buffer.getContext().eventDispatcher.startElement("measIdToAddModList_v1310", -1);

               measIdToAddModList_v1310 = new MeasIdToAddModList_v1310();
               measIdToAddModList_v1310.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("measIdToAddModList_v1310", -1);
            }
            else {
               measIdToAddModList_v1310 = null;
            }

            // decode measIdToAddModListExt_v1310

            if (measIdToAddModListExt_v1310Present) {
               buffer.getContext().eventDispatcher.startElement("measIdToAddModListExt_v1310", -1);

               measIdToAddModListExt_v1310 = new MeasIdToAddModListExt_v1310();
               measIdToAddModListExt_v1310.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("measIdToAddModListExt_v1310", -1);
            }
            else {
               measIdToAddModListExt_v1310 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV6ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean measGapConfigPerCC_List_r14Present = buffer.decodeBit ("measGapConfigPerCC_List_r14Present");

            boolean measGapSharingConfig_r14Present = buffer.decodeBit ("measGapSharingConfig_r14Present");

            // decode measGapConfigPerCC_List_r14

            if (measGapConfigPerCC_List_r14Present) {
               buffer.getContext().eventDispatcher.startElement("measGapConfigPerCC_List_r14", -1);

               measGapConfigPerCC_List_r14 = new MeasGapConfigPerCC_List_r14();
               measGapConfigPerCC_List_r14.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("measGapConfigPerCC_List_r14", -1);
            }
            else {
               measGapConfigPerCC_List_r14 = null;
            }

            // decode measGapSharingConfig_r14

            if (measGapSharingConfig_r14Present) {
               buffer.getContext().eventDispatcher.startElement("measGapSharingConfig_r14", -1);

               measGapSharingConfig_r14 = new MeasGapSharingConfig_r14();
               measGapSharingConfig_r14.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("measGapSharingConfig_r14", -1);
            }
            else {
               measGapSharingConfig_r14 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV7ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean fr1_Gap_r15Present = buffer.decodeBit ("fr1_Gap_r15Present");

            boolean mgta_r15Present = buffer.decodeBit ("mgta_r15Present");

            // decode fr1_Gap_r15

            if (fr1_Gap_r15Present) {
               buffer.getContext().eventDispatcher.startElement("fr1_Gap_r15", -1);

               fr1_Gap_r15 = new Asn1Boolean();
               fr1_Gap_r15.decode (buffer);

               buffer.invokeCharacters(fr1_Gap_r15.toString());
               buffer.getContext().eventDispatcher.endElement("fr1_Gap_r15", -1);
            }
            else {
               fr1_Gap_r15 = null;
            }

            // decode mgta_r15

            if (mgta_r15Present) {
               buffer.getContext().eventDispatcher.startElement("mgta_r15", -1);

               mgta_r15 = new Asn1Boolean();
               mgta_r15.decode (buffer);

               buffer.invokeCharacters(mgta_r15.toString());
               buffer.getContext().eventDispatcher.endElement("mgta_r15", -1);
            }
            else {
               mgta_r15 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV8ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean measGapConfigDensePRS_r15Present = buffer.decodeBit ("measGapConfigDensePRS_r15Present");

            boolean heightThreshRef_r15Present = buffer.decodeBit ("heightThreshRef_r15Present");

            // decode measGapConfigDensePRS_r15

            if (measGapConfigDensePRS_r15Present) {
               buffer.getContext().eventDispatcher.startElement("measGapConfigDensePRS_r15", -1);

               measGapConfigDensePRS_r15 = new MeasGapConfigDensePRS_r15();
               measGapConfigDensePRS_r15.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("measGapConfigDensePRS_r15", -1);
            }
            else {
               measGapConfigDensePRS_r15 = null;
            }

            // decode heightThreshRef_r15

            if (heightThreshRef_r15Present) {
               buffer.getContext().eventDispatcher.startElement("heightThreshRef_r15", -1);

               heightThreshRef_r15 = new MeasConfig_heightThreshRef_r15();
               heightThreshRef_r15.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("heightThreshRef_r15", -1);
            }
            else {
               heightThreshRef_r15 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (measObjectToRemoveList != null) measObjectToRemoveList.print (_sb, "measObjectToRemoveList", _level+1);
      if (measObjectToAddModList != null) measObjectToAddModList.print (_sb, "measObjectToAddModList", _level+1);
      if (reportConfigToRemoveList != null) reportConfigToRemoveList.print (_sb, "reportConfigToRemoveList", _level+1);
      if (reportConfigToAddModList != null) reportConfigToAddModList.print (_sb, "reportConfigToAddModList", _level+1);
      if (measIdToRemoveList != null) measIdToRemoveList.print (_sb, "measIdToRemoveList", _level+1);
      if (measIdToAddModList != null) measIdToAddModList.print (_sb, "measIdToAddModList", _level+1);
      if (quantityConfig != null) quantityConfig.print (_sb, "quantityConfig", _level+1);
      if (measGapConfig != null) measGapConfig.print (_sb, "measGapConfig", _level+1);
      if (s_Measure != null) s_Measure.print (_sb, "s_Measure", _level+1);
      if (preRegistrationInfoHRPD != null) preRegistrationInfoHRPD.print (_sb, "preRegistrationInfoHRPD", _level+1);
      if (speedStatePars != null) speedStatePars.print (_sb, "speedStatePars", _level+1);
      if (measObjectToAddModList_v9e0 != null) measObjectToAddModList_v9e0.print (_sb, "measObjectToAddModList_v9e0", _level+1);
      if (allowInterruptions_r11 != null) allowInterruptions_r11.print (_sb, "allowInterruptions_r11", _level+1);
      if (measScaleFactor_r12 != null) measScaleFactor_r12.print (_sb, "measScaleFactor_r12", _level+1);
      if (measIdToRemoveListExt_r12 != null) measIdToRemoveListExt_r12.print (_sb, "measIdToRemoveListExt_r12", _level+1);
      if (measIdToAddModListExt_r12 != null) measIdToAddModListExt_r12.print (_sb, "measIdToAddModListExt_r12", _level+1);
      if (measRSRQ_OnAllSymbols_r12 != null) measRSRQ_OnAllSymbols_r12.print (_sb, "measRSRQ_OnAllSymbols_r12", _level+1);
      if (measObjectToRemoveListExt_r13 != null) measObjectToRemoveListExt_r13.print (_sb, "measObjectToRemoveListExt_r13", _level+1);
      if (measObjectToAddModListExt_r13 != null) measObjectToAddModListExt_r13.print (_sb, "measObjectToAddModListExt_r13", _level+1);
      if (measIdToAddModList_v1310 != null) measIdToAddModList_v1310.print (_sb, "measIdToAddModList_v1310", _level+1);
      if (measIdToAddModListExt_v1310 != null) measIdToAddModListExt_v1310.print (_sb, "measIdToAddModListExt_v1310", _level+1);
      if (measGapConfigPerCC_List_r14 != null) measGapConfigPerCC_List_r14.print (_sb, "measGapConfigPerCC_List_r14", _level+1);
      if (measGapSharingConfig_r14 != null) measGapSharingConfig_r14.print (_sb, "measGapSharingConfig_r14", _level+1);
      if (fr1_Gap_r15 != null) fr1_Gap_r15.print (_sb, "fr1_Gap_r15", _level+1);
      if (mgta_r15 != null) mgta_r15.print (_sb, "mgta_r15", _level+1);
      if (measGapConfigDensePRS_r15 != null) measGapConfigDensePRS_r15.print (_sb, "measGapConfigDensePRS_r15", _level+1);
      if (heightThreshRef_r15 != null) heightThreshRef_r15.print (_sb, "heightThreshRef_r15", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
