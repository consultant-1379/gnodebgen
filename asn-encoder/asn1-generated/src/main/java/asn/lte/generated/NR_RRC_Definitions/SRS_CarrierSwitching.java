/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SRS_CarrierSwitching extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SRS-CarrierSwitching";
   }

   public Asn1Integer srs_SwitchFromServCellIndex;  // optional
   public SRS_CarrierSwitching_srs_SwitchFromCarrier srs_SwitchFromCarrier = null;
   public SRS_CarrierSwitching_srs_TPC_PDCCH_Group srs_TPC_PDCCH_Group;  // optional
   public SRS_CarrierSwitching_monitoringCells monitoringCells;  // optional
   public Asn1OpenExt extElem1;

   public SRS_CarrierSwitching () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SRS_CarrierSwitching (
      Asn1Integer srs_SwitchFromServCellIndex_,
      SRS_CarrierSwitching_srs_SwitchFromCarrier srs_SwitchFromCarrier_,
      SRS_CarrierSwitching_srs_TPC_PDCCH_Group srs_TPC_PDCCH_Group_,
      SRS_CarrierSwitching_monitoringCells monitoringCells_
   ) {
      super();
      srs_SwitchFromServCellIndex = srs_SwitchFromServCellIndex_;
      srs_SwitchFromCarrier = srs_SwitchFromCarrier_;
      srs_TPC_PDCCH_Group = srs_TPC_PDCCH_Group_;
      monitoringCells = monitoringCells_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SRS_CarrierSwitching (
      SRS_CarrierSwitching_srs_SwitchFromCarrier srs_SwitchFromCarrier_
   ) {
      super();
      srs_SwitchFromCarrier = srs_SwitchFromCarrier_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SRS_CarrierSwitching (long srs_SwitchFromServCellIndex_,
      SRS_CarrierSwitching_srs_SwitchFromCarrier srs_SwitchFromCarrier_,
      SRS_CarrierSwitching_srs_TPC_PDCCH_Group srs_TPC_PDCCH_Group_,
      SRS_CarrierSwitching_monitoringCells monitoringCells_
   ) {
      super();
      srs_SwitchFromServCellIndex = new Asn1Integer (srs_SwitchFromServCellIndex_);
      srs_SwitchFromCarrier = srs_SwitchFromCarrier_;
      srs_TPC_PDCCH_Group = srs_TPC_PDCCH_Group_;
      monitoringCells = monitoringCells_;
   }

   public void init () {
      srs_SwitchFromServCellIndex = null;
      srs_SwitchFromCarrier = null;
      srs_TPC_PDCCH_Group = null;
      monitoringCells = null;
      extElem1 = null;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return srs_SwitchFromServCellIndex;
         case 1: return srs_SwitchFromCarrier;
         case 2: return srs_TPC_PDCCH_Group;
         case 3: return monitoringCells;
         case 4: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "srs-SwitchFromServCellIndex";
         case 1: return "srs-SwitchFromCarrier";
         case 2: return "srs-TPC-PDCCH-Group";
         case 3: return "monitoringCells";
         case 4: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean srs_SwitchFromServCellIndexPresent = buffer.decodeBit ("srs_SwitchFromServCellIndexPresent");
      boolean srs_TPC_PDCCH_GroupPresent = buffer.decodeBit ("srs_TPC_PDCCH_GroupPresent");
      boolean monitoringCellsPresent = buffer.decodeBit ("monitoringCellsPresent");

      // decode srs_SwitchFromServCellIndex

      if (srs_SwitchFromServCellIndexPresent) {
         buffer.getContext().eventDispatcher.startElement("srs_SwitchFromServCellIndex", -1);

         srs_SwitchFromServCellIndex = new Asn1Integer();
         srs_SwitchFromServCellIndex.decode (buffer, 0, 31);

         buffer.invokeCharacters(srs_SwitchFromServCellIndex.toString());
         buffer.getContext().eventDispatcher.endElement("srs_SwitchFromServCellIndex", -1);
      }
      else {
         srs_SwitchFromServCellIndex = null;
      }

      // decode srs_SwitchFromCarrier

      buffer.getContext().eventDispatcher.startElement("srs_SwitchFromCarrier", -1);

      {
         int tval = SRS_CarrierSwitching_srs_SwitchFromCarrier.decodeEnumValue (buffer);
         srs_SwitchFromCarrier = SRS_CarrierSwitching_srs_SwitchFromCarrier.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("srs_SwitchFromCarrier", -1);

      // decode srs_TPC_PDCCH_Group

      if (srs_TPC_PDCCH_GroupPresent) {
         buffer.getContext().eventDispatcher.startElement("srs_TPC_PDCCH_Group", -1);

         srs_TPC_PDCCH_Group = new SRS_CarrierSwitching_srs_TPC_PDCCH_Group();
         srs_TPC_PDCCH_Group.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("srs_TPC_PDCCH_Group", -1);
      }
      else {
         srs_TPC_PDCCH_Group = null;
      }

      // decode monitoringCells

      if (monitoringCellsPresent) {
         buffer.getContext().eventDispatcher.startElement("monitoringCells", -1);

         monitoringCells = new SRS_CarrierSwitching_monitoringCells();
         monitoringCells.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("monitoringCells", -1);
      }
      else {
         monitoringCells = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (srs_SwitchFromServCellIndex != null) srs_SwitchFromServCellIndex.print (_sb, "srs_SwitchFromServCellIndex", _level+1);
      if (srs_SwitchFromCarrier != null) srs_SwitchFromCarrier.print (_sb, "srs_SwitchFromCarrier", _level+1);
      if (srs_TPC_PDCCH_Group != null) srs_TPC_PDCCH_Group.print (_sb, "srs_TPC_PDCCH_Group", _level+1);
      if (monitoringCells != null) monitoringCells.print (_sb, "monitoringCells", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
