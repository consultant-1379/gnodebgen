/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class RACH_ConfigCommon extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "RACH-ConfigCommon";
   }

   public RACH_ConfigCommon_preambleInfo preambleInfo;
   public PowerRampingParameters powerRampingParameters;
   public RACH_ConfigCommon_ra_SupervisionInfo ra_SupervisionInfo;
   public Asn1Integer maxHARQ_Msg3Tx;
   public boolean mV2ExtPresent;
   public PreambleTransMax preambleTransMax_CE_r13 = null;  // optional
   public RACH_CE_LevelInfoList_r13 rach_CE_LevelInfoList_r13;  // optional
   public boolean mV3ExtPresent;
   public RACH_ConfigCommon_edt_SmallTBS_Subset_r15 edt_SmallTBS_Subset_r15 = null;  // optional
   public Asn1OpenExt extElem1;

   public RACH_ConfigCommon () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public RACH_ConfigCommon (
      RACH_ConfigCommon_preambleInfo preambleInfo_,
      PowerRampingParameters powerRampingParameters_,
      RACH_ConfigCommon_ra_SupervisionInfo ra_SupervisionInfo_,
      Asn1Integer maxHARQ_Msg3Tx_,
      PreambleTransMax preambleTransMax_CE_r13_,
      RACH_CE_LevelInfoList_r13 rach_CE_LevelInfoList_r13_,
      RACH_ConfigCommon_edt_SmallTBS_Subset_r15 edt_SmallTBS_Subset_r15_
   ) {
      super();
      preambleInfo = preambleInfo_;
      powerRampingParameters = powerRampingParameters_;
      ra_SupervisionInfo = ra_SupervisionInfo_;
      maxHARQ_Msg3Tx = maxHARQ_Msg3Tx_;
      preambleTransMax_CE_r13 = preambleTransMax_CE_r13_;
      rach_CE_LevelInfoList_r13 = rach_CE_LevelInfoList_r13_;
      edt_SmallTBS_Subset_r15 = edt_SmallTBS_Subset_r15_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public RACH_ConfigCommon (
      RACH_ConfigCommon_preambleInfo preambleInfo_,
      PowerRampingParameters powerRampingParameters_,
      RACH_ConfigCommon_ra_SupervisionInfo ra_SupervisionInfo_,
      Asn1Integer maxHARQ_Msg3Tx_
   ) {
      super();
      preambleInfo = preambleInfo_;
      powerRampingParameters = powerRampingParameters_;
      ra_SupervisionInfo = ra_SupervisionInfo_;
      maxHARQ_Msg3Tx = maxHARQ_Msg3Tx_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public RACH_ConfigCommon (RACH_ConfigCommon_preambleInfo preambleInfo_,
      PowerRampingParameters powerRampingParameters_,
      RACH_ConfigCommon_ra_SupervisionInfo ra_SupervisionInfo_,
      long maxHARQ_Msg3Tx_,
      PreambleTransMax preambleTransMax_CE_r13_,
      RACH_CE_LevelInfoList_r13 rach_CE_LevelInfoList_r13_,
      RACH_ConfigCommon_edt_SmallTBS_Subset_r15 edt_SmallTBS_Subset_r15_
   ) {
      super();
      preambleInfo = preambleInfo_;
      powerRampingParameters = powerRampingParameters_;
      ra_SupervisionInfo = ra_SupervisionInfo_;
      maxHARQ_Msg3Tx = new Asn1Integer (maxHARQ_Msg3Tx_);
      preambleTransMax_CE_r13 = preambleTransMax_CE_r13_;
      rach_CE_LevelInfoList_r13 = rach_CE_LevelInfoList_r13_;
      edt_SmallTBS_Subset_r15 = edt_SmallTBS_Subset_r15_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public RACH_ConfigCommon (
      RACH_ConfigCommon_preambleInfo preambleInfo_,
      PowerRampingParameters powerRampingParameters_,
      RACH_ConfigCommon_ra_SupervisionInfo ra_SupervisionInfo_,
      long maxHARQ_Msg3Tx_
   ) {
      super();
      preambleInfo = preambleInfo_;
      powerRampingParameters = powerRampingParameters_;
      ra_SupervisionInfo = ra_SupervisionInfo_;
      maxHARQ_Msg3Tx = new Asn1Integer (maxHARQ_Msg3Tx_);
   }

   public void init () {
      preambleInfo = null;
      powerRampingParameters = null;
      ra_SupervisionInfo = null;
      maxHARQ_Msg3Tx = null;
      preambleTransMax_CE_r13 = null;
      rach_CE_LevelInfoList_r13 = null;
      edt_SmallTBS_Subset_r15 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 8; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return preambleInfo;
         case 1: return powerRampingParameters;
         case 2: return ra_SupervisionInfo;
         case 3: return maxHARQ_Msg3Tx;
         case 4: return preambleTransMax_CE_r13;
         case 5: return rach_CE_LevelInfoList_r13;
         case 6: return edt_SmallTBS_Subset_r15;
         case 7: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "preambleInfo";
         case 1: return "powerRampingParameters";
         case 2: return "ra-SupervisionInfo";
         case 3: return "maxHARQ-Msg3Tx";
         case 4: return "preambleTransMax-CE-r13";
         case 5: return "rach-CE-LevelInfoList-r13";
         case 6: return "edt-SmallTBS-Subset-r15";
         case 7: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      // decode preambleInfo

      buffer.getContext().eventDispatcher.startElement("preambleInfo", -1);

      preambleInfo = new RACH_ConfigCommon_preambleInfo();
      preambleInfo.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("preambleInfo", -1);

      // decode powerRampingParameters

      buffer.getContext().eventDispatcher.startElement("powerRampingParameters", -1);

      powerRampingParameters = new PowerRampingParameters();
      powerRampingParameters.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("powerRampingParameters", -1);

      // decode ra_SupervisionInfo

      buffer.getContext().eventDispatcher.startElement("ra_SupervisionInfo", -1);

      ra_SupervisionInfo = new RACH_ConfigCommon_ra_SupervisionInfo();
      ra_SupervisionInfo.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("ra_SupervisionInfo", -1);

      // decode maxHARQ_Msg3Tx

      buffer.getContext().eventDispatcher.startElement("maxHARQ_Msg3Tx", -1);

      maxHARQ_Msg3Tx = new Asn1Integer();
      maxHARQ_Msg3Tx.decode (buffer, 1, 8);

      buffer.invokeCharacters(maxHARQ_Msg3Tx.toString());
      buffer.getContext().eventDispatcher.endElement("maxHARQ_Msg3Tx", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean preambleTransMax_CE_r13Present = buffer.decodeBit ("preambleTransMax_CE_r13Present");

            boolean rach_CE_LevelInfoList_r13Present = buffer.decodeBit ("rach_CE_LevelInfoList_r13Present");

            // decode preambleTransMax_CE_r13

            if (preambleTransMax_CE_r13Present) {
               buffer.getContext().eventDispatcher.startElement("preambleTransMax_CE_r13", -1);

               int tval = PreambleTransMax.decodeEnumValue (buffer);
               preambleTransMax_CE_r13 = PreambleTransMax.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("preambleTransMax_CE_r13", -1);
            }
            else {
               preambleTransMax_CE_r13 = null;
            }

            // decode rach_CE_LevelInfoList_r13

            if (rach_CE_LevelInfoList_r13Present) {
               buffer.getContext().eventDispatcher.startElement("rach_CE_LevelInfoList_r13", -1);

               rach_CE_LevelInfoList_r13 = new RACH_CE_LevelInfoList_r13();
               rach_CE_LevelInfoList_r13.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("rach_CE_LevelInfoList_r13", -1);
            }
            else {
               rach_CE_LevelInfoList_r13 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean edt_SmallTBS_Subset_r15Present = buffer.decodeBit ("edt_SmallTBS_Subset_r15Present");

            // decode edt_SmallTBS_Subset_r15

            if (edt_SmallTBS_Subset_r15Present) {
               buffer.getContext().eventDispatcher.startElement("edt_SmallTBS_Subset_r15", -1);

               int tval = RACH_ConfigCommon_edt_SmallTBS_Subset_r15.decodeEnumValue (buffer);
               edt_SmallTBS_Subset_r15 = RACH_ConfigCommon_edt_SmallTBS_Subset_r15.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("edt_SmallTBS_Subset_r15", -1);
            }
            else {
               edt_SmallTBS_Subset_r15 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (preambleInfo != null) preambleInfo.print (_sb, "preambleInfo", _level+1);
      if (powerRampingParameters != null) powerRampingParameters.print (_sb, "powerRampingParameters", _level+1);
      if (ra_SupervisionInfo != null) ra_SupervisionInfo.print (_sb, "ra_SupervisionInfo", _level+1);
      if (maxHARQ_Msg3Tx != null) maxHARQ_Msg3Tx.print (_sb, "maxHARQ_Msg3Tx", _level+1);
      if (preambleTransMax_CE_r13 != null) preambleTransMax_CE_r13.print (_sb, "preambleTransMax_CE_r13", _level+1);
      if (rach_CE_LevelInfoList_r13 != null) rach_CE_LevelInfoList_r13.print (_sb, "rach_CE_LevelInfoList_r13", _level+1);
      if (edt_SmallTBS_Subset_r15 != null) edt_SmallTBS_Subset_r15.print (_sb, "edt_SmallTBS_Subset_r15", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
