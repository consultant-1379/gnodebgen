/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class UE_EUTRA_Capability_v1530_IEs extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "UE-EUTRA-Capability-v1530-IEs";
   }

   public MeasParameters_v1530 measParameters_v1530;  // optional
   public Other_Parameters_v1530 otherParameters_v1530;  // optional
   public NeighCellSI_AcquisitionParameters_v1530 neighCellSI_AcquisitionParameters_v1530;  // optional
   public MAC_Parameters_v1530 mac_Parameters_v1530;  // optional
   public PhyLayerParameters_v1530 phyLayerParameters_v1530;  // optional
   public RF_Parameters_v1530 rf_Parameters_v1530;  // optional
   public PDCP_Parameters_v1530 pdcp_Parameters_v1530;  // optional
   public Asn1Integer ue_CategoryDL_v1530;  // optional
   public UE_BasedNetwPerfMeasParameters_v1530 ue_BasedNetwPerfMeasParameters_v1530;  // optional
   public RLC_Parameters_v1530 rlc_Parameters_v1530;  // optional
   public SL_Parameters_v1530 sl_Parameters_v1530;  // optional
   public UE_EUTRA_Capability_v1530_IEs_extendedNumberOfDRBs_r15 extendedNumberOfDRBs_r15 = null;  // optional
   public UE_EUTRA_Capability_v1530_IEs_reducedCP_Latency_r15 reducedCP_Latency_r15 = null;  // optional
   public LAA_Parameters_v1530 laa_Parameters_v1530;  // optional
   public Asn1Integer ue_CategoryUL_v1530;  // optional
   public UE_EUTRA_CapabilityAddXDD_Mode_v1530 fdd_Add_UE_EUTRA_Capabilities_v1530;  // optional
   public UE_EUTRA_CapabilityAddXDD_Mode_v1530 tdd_Add_UE_EUTRA_Capabilities_v1530;  // optional
   public UE_EUTRA_Capability_v1540_IEs nonCriticalExtension;  // optional

   public UE_EUTRA_Capability_v1530_IEs () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public UE_EUTRA_Capability_v1530_IEs (
      MeasParameters_v1530 measParameters_v1530_,
      Other_Parameters_v1530 otherParameters_v1530_,
      NeighCellSI_AcquisitionParameters_v1530 neighCellSI_AcquisitionParameters_v1530_,
      MAC_Parameters_v1530 mac_Parameters_v1530_,
      PhyLayerParameters_v1530 phyLayerParameters_v1530_,
      RF_Parameters_v1530 rf_Parameters_v1530_,
      PDCP_Parameters_v1530 pdcp_Parameters_v1530_,
      Asn1Integer ue_CategoryDL_v1530_,
      UE_BasedNetwPerfMeasParameters_v1530 ue_BasedNetwPerfMeasParameters_v1530_,
      RLC_Parameters_v1530 rlc_Parameters_v1530_,
      SL_Parameters_v1530 sl_Parameters_v1530_,
      UE_EUTRA_Capability_v1530_IEs_extendedNumberOfDRBs_r15 extendedNumberOfDRBs_r15_,
      UE_EUTRA_Capability_v1530_IEs_reducedCP_Latency_r15 reducedCP_Latency_r15_,
      LAA_Parameters_v1530 laa_Parameters_v1530_,
      Asn1Integer ue_CategoryUL_v1530_,
      UE_EUTRA_CapabilityAddXDD_Mode_v1530 fdd_Add_UE_EUTRA_Capabilities_v1530_,
      UE_EUTRA_CapabilityAddXDD_Mode_v1530 tdd_Add_UE_EUTRA_Capabilities_v1530_,
      UE_EUTRA_Capability_v1540_IEs nonCriticalExtension_
   ) {
      super();
      measParameters_v1530 = measParameters_v1530_;
      otherParameters_v1530 = otherParameters_v1530_;
      neighCellSI_AcquisitionParameters_v1530 = neighCellSI_AcquisitionParameters_v1530_;
      mac_Parameters_v1530 = mac_Parameters_v1530_;
      phyLayerParameters_v1530 = phyLayerParameters_v1530_;
      rf_Parameters_v1530 = rf_Parameters_v1530_;
      pdcp_Parameters_v1530 = pdcp_Parameters_v1530_;
      ue_CategoryDL_v1530 = ue_CategoryDL_v1530_;
      ue_BasedNetwPerfMeasParameters_v1530 = ue_BasedNetwPerfMeasParameters_v1530_;
      rlc_Parameters_v1530 = rlc_Parameters_v1530_;
      sl_Parameters_v1530 = sl_Parameters_v1530_;
      extendedNumberOfDRBs_r15 = extendedNumberOfDRBs_r15_;
      reducedCP_Latency_r15 = reducedCP_Latency_r15_;
      laa_Parameters_v1530 = laa_Parameters_v1530_;
      ue_CategoryUL_v1530 = ue_CategoryUL_v1530_;
      fdd_Add_UE_EUTRA_Capabilities_v1530 = fdd_Add_UE_EUTRA_Capabilities_v1530_;
      tdd_Add_UE_EUTRA_Capabilities_v1530 = tdd_Add_UE_EUTRA_Capabilities_v1530_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public UE_EUTRA_Capability_v1530_IEs (MeasParameters_v1530 measParameters_v1530_,
      Other_Parameters_v1530 otherParameters_v1530_,
      NeighCellSI_AcquisitionParameters_v1530 neighCellSI_AcquisitionParameters_v1530_,
      MAC_Parameters_v1530 mac_Parameters_v1530_,
      PhyLayerParameters_v1530 phyLayerParameters_v1530_,
      RF_Parameters_v1530 rf_Parameters_v1530_,
      PDCP_Parameters_v1530 pdcp_Parameters_v1530_,
      long ue_CategoryDL_v1530_,
      UE_BasedNetwPerfMeasParameters_v1530 ue_BasedNetwPerfMeasParameters_v1530_,
      RLC_Parameters_v1530 rlc_Parameters_v1530_,
      SL_Parameters_v1530 sl_Parameters_v1530_,
      UE_EUTRA_Capability_v1530_IEs_extendedNumberOfDRBs_r15 extendedNumberOfDRBs_r15_,
      UE_EUTRA_Capability_v1530_IEs_reducedCP_Latency_r15 reducedCP_Latency_r15_,
      LAA_Parameters_v1530 laa_Parameters_v1530_,
      long ue_CategoryUL_v1530_,
      UE_EUTRA_CapabilityAddXDD_Mode_v1530 fdd_Add_UE_EUTRA_Capabilities_v1530_,
      UE_EUTRA_CapabilityAddXDD_Mode_v1530 tdd_Add_UE_EUTRA_Capabilities_v1530_,
      UE_EUTRA_Capability_v1540_IEs nonCriticalExtension_
   ) {
      super();
      measParameters_v1530 = measParameters_v1530_;
      otherParameters_v1530 = otherParameters_v1530_;
      neighCellSI_AcquisitionParameters_v1530 = neighCellSI_AcquisitionParameters_v1530_;
      mac_Parameters_v1530 = mac_Parameters_v1530_;
      phyLayerParameters_v1530 = phyLayerParameters_v1530_;
      rf_Parameters_v1530 = rf_Parameters_v1530_;
      pdcp_Parameters_v1530 = pdcp_Parameters_v1530_;
      ue_CategoryDL_v1530 = new Asn1Integer (ue_CategoryDL_v1530_);
      ue_BasedNetwPerfMeasParameters_v1530 = ue_BasedNetwPerfMeasParameters_v1530_;
      rlc_Parameters_v1530 = rlc_Parameters_v1530_;
      sl_Parameters_v1530 = sl_Parameters_v1530_;
      extendedNumberOfDRBs_r15 = extendedNumberOfDRBs_r15_;
      reducedCP_Latency_r15 = reducedCP_Latency_r15_;
      laa_Parameters_v1530 = laa_Parameters_v1530_;
      ue_CategoryUL_v1530 = new Asn1Integer (ue_CategoryUL_v1530_);
      fdd_Add_UE_EUTRA_Capabilities_v1530 = fdd_Add_UE_EUTRA_Capabilities_v1530_;
      tdd_Add_UE_EUTRA_Capabilities_v1530 = tdd_Add_UE_EUTRA_Capabilities_v1530_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   public void init () {
      measParameters_v1530 = null;
      otherParameters_v1530 = null;
      neighCellSI_AcquisitionParameters_v1530 = null;
      mac_Parameters_v1530 = null;
      phyLayerParameters_v1530 = null;
      rf_Parameters_v1530 = null;
      pdcp_Parameters_v1530 = null;
      ue_CategoryDL_v1530 = null;
      ue_BasedNetwPerfMeasParameters_v1530 = null;
      rlc_Parameters_v1530 = null;
      sl_Parameters_v1530 = null;
      extendedNumberOfDRBs_r15 = null;
      reducedCP_Latency_r15 = null;
      laa_Parameters_v1530 = null;
      ue_CategoryUL_v1530 = null;
      fdd_Add_UE_EUTRA_Capabilities_v1530 = null;
      tdd_Add_UE_EUTRA_Capabilities_v1530 = null;
      nonCriticalExtension = null;
   }

   public int getElementCount() { return 18; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return measParameters_v1530;
         case 1: return otherParameters_v1530;
         case 2: return neighCellSI_AcquisitionParameters_v1530;
         case 3: return mac_Parameters_v1530;
         case 4: return phyLayerParameters_v1530;
         case 5: return rf_Parameters_v1530;
         case 6: return pdcp_Parameters_v1530;
         case 7: return ue_CategoryDL_v1530;
         case 8: return ue_BasedNetwPerfMeasParameters_v1530;
         case 9: return rlc_Parameters_v1530;
         case 10: return sl_Parameters_v1530;
         case 11: return extendedNumberOfDRBs_r15;
         case 12: return reducedCP_Latency_r15;
         case 13: return laa_Parameters_v1530;
         case 14: return ue_CategoryUL_v1530;
         case 15: return fdd_Add_UE_EUTRA_Capabilities_v1530;
         case 16: return tdd_Add_UE_EUTRA_Capabilities_v1530;
         case 17: return nonCriticalExtension;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "measParameters-v1530";
         case 1: return "otherParameters-v1530";
         case 2: return "neighCellSI-AcquisitionParameters-v1530";
         case 3: return "mac-Parameters-v1530";
         case 4: return "phyLayerParameters-v1530";
         case 5: return "rf-Parameters-v1530";
         case 6: return "pdcp-Parameters-v1530";
         case 7: return "ue-CategoryDL-v1530";
         case 8: return "ue-BasedNetwPerfMeasParameters-v1530";
         case 9: return "rlc-Parameters-v1530";
         case 10: return "sl-Parameters-v1530";
         case 11: return "extendedNumberOfDRBs-r15";
         case 12: return "reducedCP-Latency-r15";
         case 13: return "laa-Parameters-v1530";
         case 14: return "ue-CategoryUL-v1530";
         case 15: return "fdd-Add-UE-EUTRA-Capabilities-v1530";
         case 16: return "tdd-Add-UE-EUTRA-Capabilities-v1530";
         case 17: return "nonCriticalExtension";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean measParameters_v1530Present = buffer.decodeBit ("measParameters_v1530Present");
      boolean otherParameters_v1530Present = buffer.decodeBit ("otherParameters_v1530Present");
      boolean neighCellSI_AcquisitionParameters_v1530Present = buffer.decodeBit ("neighCellSI_AcquisitionParameters_v1530Present");
      boolean mac_Parameters_v1530Present = buffer.decodeBit ("mac_Parameters_v1530Present");
      boolean phyLayerParameters_v1530Present = buffer.decodeBit ("phyLayerParameters_v1530Present");
      boolean rf_Parameters_v1530Present = buffer.decodeBit ("rf_Parameters_v1530Present");
      boolean pdcp_Parameters_v1530Present = buffer.decodeBit ("pdcp_Parameters_v1530Present");
      boolean ue_CategoryDL_v1530Present = buffer.decodeBit ("ue_CategoryDL_v1530Present");
      boolean ue_BasedNetwPerfMeasParameters_v1530Present = buffer.decodeBit ("ue_BasedNetwPerfMeasParameters_v1530Present");
      boolean rlc_Parameters_v1530Present = buffer.decodeBit ("rlc_Parameters_v1530Present");
      boolean sl_Parameters_v1530Present = buffer.decodeBit ("sl_Parameters_v1530Present");
      boolean extendedNumberOfDRBs_r15Present = buffer.decodeBit ("extendedNumberOfDRBs_r15Present");
      boolean reducedCP_Latency_r15Present = buffer.decodeBit ("reducedCP_Latency_r15Present");
      boolean laa_Parameters_v1530Present = buffer.decodeBit ("laa_Parameters_v1530Present");
      boolean ue_CategoryUL_v1530Present = buffer.decodeBit ("ue_CategoryUL_v1530Present");
      boolean fdd_Add_UE_EUTRA_Capabilities_v1530Present = buffer.decodeBit ("fdd_Add_UE_EUTRA_Capabilities_v1530Present");
      boolean tdd_Add_UE_EUTRA_Capabilities_v1530Present = buffer.decodeBit ("tdd_Add_UE_EUTRA_Capabilities_v1530Present");
      boolean nonCriticalExtensionPresent = buffer.decodeBit ("nonCriticalExtensionPresent");

      // decode measParameters_v1530

      if (measParameters_v1530Present) {
         buffer.getContext().eventDispatcher.startElement("measParameters_v1530", -1);

         measParameters_v1530 = new MeasParameters_v1530();
         measParameters_v1530.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("measParameters_v1530", -1);
      }
      else {
         measParameters_v1530 = null;
      }

      // decode otherParameters_v1530

      if (otherParameters_v1530Present) {
         buffer.getContext().eventDispatcher.startElement("otherParameters_v1530", -1);

         otherParameters_v1530 = new Other_Parameters_v1530();
         otherParameters_v1530.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("otherParameters_v1530", -1);
      }
      else {
         otherParameters_v1530 = null;
      }

      // decode neighCellSI_AcquisitionParameters_v1530

      if (neighCellSI_AcquisitionParameters_v1530Present) {
         buffer.getContext().eventDispatcher.startElement("neighCellSI_AcquisitionParameters_v1530", -1);

         neighCellSI_AcquisitionParameters_v1530 = new NeighCellSI_AcquisitionParameters_v1530();
         neighCellSI_AcquisitionParameters_v1530.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("neighCellSI_AcquisitionParameters_v1530", -1);
      }
      else {
         neighCellSI_AcquisitionParameters_v1530 = null;
      }

      // decode mac_Parameters_v1530

      if (mac_Parameters_v1530Present) {
         buffer.getContext().eventDispatcher.startElement("mac_Parameters_v1530", -1);

         mac_Parameters_v1530 = new MAC_Parameters_v1530();
         mac_Parameters_v1530.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("mac_Parameters_v1530", -1);
      }
      else {
         mac_Parameters_v1530 = null;
      }

      // decode phyLayerParameters_v1530

      if (phyLayerParameters_v1530Present) {
         buffer.getContext().eventDispatcher.startElement("phyLayerParameters_v1530", -1);

         phyLayerParameters_v1530 = new PhyLayerParameters_v1530();
         phyLayerParameters_v1530.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("phyLayerParameters_v1530", -1);
      }
      else {
         phyLayerParameters_v1530 = null;
      }

      // decode rf_Parameters_v1530

      if (rf_Parameters_v1530Present) {
         buffer.getContext().eventDispatcher.startElement("rf_Parameters_v1530", -1);

         rf_Parameters_v1530 = new RF_Parameters_v1530();
         rf_Parameters_v1530.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("rf_Parameters_v1530", -1);
      }
      else {
         rf_Parameters_v1530 = null;
      }

      // decode pdcp_Parameters_v1530

      if (pdcp_Parameters_v1530Present) {
         buffer.getContext().eventDispatcher.startElement("pdcp_Parameters_v1530", -1);

         pdcp_Parameters_v1530 = new PDCP_Parameters_v1530();
         pdcp_Parameters_v1530.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("pdcp_Parameters_v1530", -1);
      }
      else {
         pdcp_Parameters_v1530 = null;
      }

      // decode ue_CategoryDL_v1530

      if (ue_CategoryDL_v1530Present) {
         buffer.getContext().eventDispatcher.startElement("ue_CategoryDL_v1530", -1);

         ue_CategoryDL_v1530 = new Asn1Integer();
         ue_CategoryDL_v1530.decode (buffer, 22, 26);

         buffer.invokeCharacters(ue_CategoryDL_v1530.toString());
         buffer.getContext().eventDispatcher.endElement("ue_CategoryDL_v1530", -1);
      }
      else {
         ue_CategoryDL_v1530 = null;
      }

      // decode ue_BasedNetwPerfMeasParameters_v1530

      if (ue_BasedNetwPerfMeasParameters_v1530Present) {
         buffer.getContext().eventDispatcher.startElement("ue_BasedNetwPerfMeasParameters_v1530", -1);

         ue_BasedNetwPerfMeasParameters_v1530 = new UE_BasedNetwPerfMeasParameters_v1530();
         ue_BasedNetwPerfMeasParameters_v1530.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ue_BasedNetwPerfMeasParameters_v1530", -1);
      }
      else {
         ue_BasedNetwPerfMeasParameters_v1530 = null;
      }

      // decode rlc_Parameters_v1530

      if (rlc_Parameters_v1530Present) {
         buffer.getContext().eventDispatcher.startElement("rlc_Parameters_v1530", -1);

         rlc_Parameters_v1530 = new RLC_Parameters_v1530();
         rlc_Parameters_v1530.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("rlc_Parameters_v1530", -1);
      }
      else {
         rlc_Parameters_v1530 = null;
      }

      // decode sl_Parameters_v1530

      if (sl_Parameters_v1530Present) {
         buffer.getContext().eventDispatcher.startElement("sl_Parameters_v1530", -1);

         sl_Parameters_v1530 = new SL_Parameters_v1530();
         sl_Parameters_v1530.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sl_Parameters_v1530", -1);
      }
      else {
         sl_Parameters_v1530 = null;
      }

      // decode extendedNumberOfDRBs_r15

      if (extendedNumberOfDRBs_r15Present) {
         buffer.getContext().eventDispatcher.startElement("extendedNumberOfDRBs_r15", -1);

         int tval = UE_EUTRA_Capability_v1530_IEs_extendedNumberOfDRBs_r15.decodeEnumValue (buffer);
         extendedNumberOfDRBs_r15 = UE_EUTRA_Capability_v1530_IEs_extendedNumberOfDRBs_r15.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("extendedNumberOfDRBs_r15", -1);
      }
      else {
         extendedNumberOfDRBs_r15 = null;
      }

      // decode reducedCP_Latency_r15

      if (reducedCP_Latency_r15Present) {
         buffer.getContext().eventDispatcher.startElement("reducedCP_Latency_r15", -1);

         int tval = UE_EUTRA_Capability_v1530_IEs_reducedCP_Latency_r15.decodeEnumValue (buffer);
         reducedCP_Latency_r15 = UE_EUTRA_Capability_v1530_IEs_reducedCP_Latency_r15.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("reducedCP_Latency_r15", -1);
      }
      else {
         reducedCP_Latency_r15 = null;
      }

      // decode laa_Parameters_v1530

      if (laa_Parameters_v1530Present) {
         buffer.getContext().eventDispatcher.startElement("laa_Parameters_v1530", -1);

         laa_Parameters_v1530 = new LAA_Parameters_v1530();
         laa_Parameters_v1530.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("laa_Parameters_v1530", -1);
      }
      else {
         laa_Parameters_v1530 = null;
      }

      // decode ue_CategoryUL_v1530

      if (ue_CategoryUL_v1530Present) {
         buffer.getContext().eventDispatcher.startElement("ue_CategoryUL_v1530", -1);

         ue_CategoryUL_v1530 = new Asn1Integer();
         ue_CategoryUL_v1530.decode (buffer, 22, 26);

         buffer.invokeCharacters(ue_CategoryUL_v1530.toString());
         buffer.getContext().eventDispatcher.endElement("ue_CategoryUL_v1530", -1);
      }
      else {
         ue_CategoryUL_v1530 = null;
      }

      // decode fdd_Add_UE_EUTRA_Capabilities_v1530

      if (fdd_Add_UE_EUTRA_Capabilities_v1530Present) {
         buffer.getContext().eventDispatcher.startElement("fdd_Add_UE_EUTRA_Capabilities_v1530", -1);

         fdd_Add_UE_EUTRA_Capabilities_v1530 = new UE_EUTRA_CapabilityAddXDD_Mode_v1530();
         fdd_Add_UE_EUTRA_Capabilities_v1530.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("fdd_Add_UE_EUTRA_Capabilities_v1530", -1);
      }
      else {
         fdd_Add_UE_EUTRA_Capabilities_v1530 = null;
      }

      // decode tdd_Add_UE_EUTRA_Capabilities_v1530

      if (tdd_Add_UE_EUTRA_Capabilities_v1530Present) {
         buffer.getContext().eventDispatcher.startElement("tdd_Add_UE_EUTRA_Capabilities_v1530", -1);

         tdd_Add_UE_EUTRA_Capabilities_v1530 = new UE_EUTRA_CapabilityAddXDD_Mode_v1530();
         tdd_Add_UE_EUTRA_Capabilities_v1530.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("tdd_Add_UE_EUTRA_Capabilities_v1530", -1);
      }
      else {
         tdd_Add_UE_EUTRA_Capabilities_v1530 = null;
      }

      // decode nonCriticalExtension

      if (nonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension = new UE_EUTRA_Capability_v1540_IEs();
         nonCriticalExtension.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }
      else {
         nonCriticalExtension = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (measParameters_v1530 != null) measParameters_v1530.print (_sb, "measParameters_v1530", _level+1);
      if (otherParameters_v1530 != null) otherParameters_v1530.print (_sb, "otherParameters_v1530", _level+1);
      if (neighCellSI_AcquisitionParameters_v1530 != null) neighCellSI_AcquisitionParameters_v1530.print (_sb, "neighCellSI_AcquisitionParameters_v1530", _level+1);
      if (mac_Parameters_v1530 != null) mac_Parameters_v1530.print (_sb, "mac_Parameters_v1530", _level+1);
      if (phyLayerParameters_v1530 != null) phyLayerParameters_v1530.print (_sb, "phyLayerParameters_v1530", _level+1);
      if (rf_Parameters_v1530 != null) rf_Parameters_v1530.print (_sb, "rf_Parameters_v1530", _level+1);
      if (pdcp_Parameters_v1530 != null) pdcp_Parameters_v1530.print (_sb, "pdcp_Parameters_v1530", _level+1);
      if (ue_CategoryDL_v1530 != null) ue_CategoryDL_v1530.print (_sb, "ue_CategoryDL_v1530", _level+1);
      if (ue_BasedNetwPerfMeasParameters_v1530 != null) ue_BasedNetwPerfMeasParameters_v1530.print (_sb, "ue_BasedNetwPerfMeasParameters_v1530", _level+1);
      if (rlc_Parameters_v1530 != null) rlc_Parameters_v1530.print (_sb, "rlc_Parameters_v1530", _level+1);
      if (sl_Parameters_v1530 != null) sl_Parameters_v1530.print (_sb, "sl_Parameters_v1530", _level+1);
      if (extendedNumberOfDRBs_r15 != null) extendedNumberOfDRBs_r15.print (_sb, "extendedNumberOfDRBs_r15", _level+1);
      if (reducedCP_Latency_r15 != null) reducedCP_Latency_r15.print (_sb, "reducedCP_Latency_r15", _level+1);
      if (laa_Parameters_v1530 != null) laa_Parameters_v1530.print (_sb, "laa_Parameters_v1530", _level+1);
      if (ue_CategoryUL_v1530 != null) ue_CategoryUL_v1530.print (_sb, "ue_CategoryUL_v1530", _level+1);
      if (fdd_Add_UE_EUTRA_Capabilities_v1530 != null) fdd_Add_UE_EUTRA_Capabilities_v1530.print (_sb, "fdd_Add_UE_EUTRA_Capabilities_v1530", _level+1);
      if (tdd_Add_UE_EUTRA_Capabilities_v1530 != null) tdd_Add_UE_EUTRA_Capabilities_v1530.print (_sb, "tdd_Add_UE_EUTRA_Capabilities_v1530", _level+1);
      if (nonCriticalExtension != null) nonCriticalExtension.print (_sb, "nonCriticalExtension", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
