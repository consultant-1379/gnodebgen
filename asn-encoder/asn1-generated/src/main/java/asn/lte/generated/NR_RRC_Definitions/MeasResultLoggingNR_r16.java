/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MeasResultLoggingNR_r16 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "MeasResultLoggingNR-r16";
   }

   public PhysCellId physCellId_r16;
   public MeasQuantityResults resultsSSB_Cell_r16;
   public Asn1Integer numberOfGoodSSB_r16;  // optional

   public MeasResultLoggingNR_r16 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MeasResultLoggingNR_r16 (
      PhysCellId physCellId_r16_,
      MeasQuantityResults resultsSSB_Cell_r16_,
      Asn1Integer numberOfGoodSSB_r16_
   ) {
      super();
      physCellId_r16 = physCellId_r16_;
      resultsSSB_Cell_r16 = resultsSSB_Cell_r16_;
      numberOfGoodSSB_r16 = numberOfGoodSSB_r16_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public MeasResultLoggingNR_r16 (
      PhysCellId physCellId_r16_,
      MeasQuantityResults resultsSSB_Cell_r16_
   ) {
      super();
      physCellId_r16 = physCellId_r16_;
      resultsSSB_Cell_r16 = resultsSSB_Cell_r16_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public MeasResultLoggingNR_r16 (long physCellId_r16_,
      MeasQuantityResults resultsSSB_Cell_r16_,
      long numberOfGoodSSB_r16_
   ) {
      super();
      physCellId_r16 = new PhysCellId (physCellId_r16_);
      resultsSSB_Cell_r16 = resultsSSB_Cell_r16_;
      numberOfGoodSSB_r16 = new Asn1Integer (numberOfGoodSSB_r16_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public MeasResultLoggingNR_r16 (
      long physCellId_r16_,
      MeasQuantityResults resultsSSB_Cell_r16_
   ) {
      super();
      physCellId_r16 = new PhysCellId (physCellId_r16_);
      resultsSSB_Cell_r16 = resultsSSB_Cell_r16_;
   }

   public void init () {
      physCellId_r16 = null;
      resultsSSB_Cell_r16 = null;
      numberOfGoodSSB_r16 = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return physCellId_r16;
         case 1: return resultsSSB_Cell_r16;
         case 2: return numberOfGoodSSB_r16;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "physCellId-r16";
         case 1: return "resultsSSB-Cell-r16";
         case 2: return "numberOfGoodSSB-r16";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean numberOfGoodSSB_r16Present = buffer.decodeBit ("numberOfGoodSSB_r16Present");

      // decode physCellId_r16

      buffer.getContext().eventDispatcher.startElement("physCellId_r16", -1);

      physCellId_r16 = new PhysCellId();
      physCellId_r16.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("physCellId_r16", -1);

      // decode resultsSSB_Cell_r16

      buffer.getContext().eventDispatcher.startElement("resultsSSB_Cell_r16", -1);

      resultsSSB_Cell_r16 = new MeasQuantityResults();
      resultsSSB_Cell_r16.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("resultsSSB_Cell_r16", -1);

      // decode numberOfGoodSSB_r16

      if (numberOfGoodSSB_r16Present) {
         buffer.getContext().eventDispatcher.startElement("numberOfGoodSSB_r16", -1);

         numberOfGoodSSB_r16 = new Asn1Integer();
         numberOfGoodSSB_r16.decode (buffer, 1, 64);

         buffer.invokeCharacters(numberOfGoodSSB_r16.toString());
         buffer.getContext().eventDispatcher.endElement("numberOfGoodSSB_r16", -1);
      }
      else {
         numberOfGoodSSB_r16 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (physCellId_r16 != null) physCellId_r16.print (_sb, "physCellId_r16", _level+1);
      if (resultsSSB_Cell_r16 != null) resultsSSB_Cell_r16.print (_sb, "resultsSSB_Cell_r16", _level+1);
      if (numberOfGoodSSB_r16 != null) numberOfGoodSSB_r16.print (_sb, "numberOfGoodSSB_r16", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
