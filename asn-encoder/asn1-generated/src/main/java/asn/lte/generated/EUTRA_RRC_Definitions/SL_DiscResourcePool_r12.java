/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SL_DiscResourcePool_r12 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SL-DiscResourcePool-r12";
   }

   public SL_CP_Len_r12 cp_Len_r12 = null;
   public SL_DiscResourcePool_r12_discPeriod_r12 discPeriod_r12 = null;
   public Asn1Integer numRetx_r12;
   public Asn1Integer numRepetition_r12;
   public SL_TF_ResourceConfig_r12 tf_ResourceConfig_r12;
   public SL_DiscResourcePool_r12_txParameters_r12 txParameters_r12;  // optional
   public SL_DiscResourcePool_r12_rxParameters_r12 rxParameters_r12;  // optional
   public boolean mV2ExtPresent;
   public SL_DiscResourcePool_r12_discPeriod_v1310 discPeriod_v1310;  // optional
   public SL_DiscResourcePool_r12_rxParamsAddNeighFreq_r13 rxParamsAddNeighFreq_r13;  // optional
   public SL_DiscResourcePool_r12_txParamsAddNeighFreq_r13 txParamsAddNeighFreq_r13;  // optional
   public boolean mV3ExtPresent;
   public SL_DiscResourcePool_r12_txParamsAddNeighFreq_v1370 txParamsAddNeighFreq_v1370;  // optional
   public Asn1OpenExt extElem1;

   public SL_DiscResourcePool_r12 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SL_DiscResourcePool_r12 (
      SL_CP_Len_r12 cp_Len_r12_,
      SL_DiscResourcePool_r12_discPeriod_r12 discPeriod_r12_,
      Asn1Integer numRetx_r12_,
      Asn1Integer numRepetition_r12_,
      SL_TF_ResourceConfig_r12 tf_ResourceConfig_r12_,
      SL_DiscResourcePool_r12_txParameters_r12 txParameters_r12_,
      SL_DiscResourcePool_r12_rxParameters_r12 rxParameters_r12_,
      SL_DiscResourcePool_r12_discPeriod_v1310 discPeriod_v1310_,
      SL_DiscResourcePool_r12_rxParamsAddNeighFreq_r13 rxParamsAddNeighFreq_r13_,
      SL_DiscResourcePool_r12_txParamsAddNeighFreq_r13 txParamsAddNeighFreq_r13_,
      SL_DiscResourcePool_r12_txParamsAddNeighFreq_v1370 txParamsAddNeighFreq_v1370_
   ) {
      super();
      cp_Len_r12 = cp_Len_r12_;
      discPeriod_r12 = discPeriod_r12_;
      numRetx_r12 = numRetx_r12_;
      numRepetition_r12 = numRepetition_r12_;
      tf_ResourceConfig_r12 = tf_ResourceConfig_r12_;
      txParameters_r12 = txParameters_r12_;
      rxParameters_r12 = rxParameters_r12_;
      discPeriod_v1310 = discPeriod_v1310_;
      rxParamsAddNeighFreq_r13 = rxParamsAddNeighFreq_r13_;
      txParamsAddNeighFreq_r13 = txParamsAddNeighFreq_r13_;
      txParamsAddNeighFreq_v1370 = txParamsAddNeighFreq_v1370_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SL_DiscResourcePool_r12 (
      SL_CP_Len_r12 cp_Len_r12_,
      SL_DiscResourcePool_r12_discPeriod_r12 discPeriod_r12_,
      Asn1Integer numRetx_r12_,
      Asn1Integer numRepetition_r12_,
      SL_TF_ResourceConfig_r12 tf_ResourceConfig_r12_
   ) {
      super();
      cp_Len_r12 = cp_Len_r12_;
      discPeriod_r12 = discPeriod_r12_;
      numRetx_r12 = numRetx_r12_;
      numRepetition_r12 = numRepetition_r12_;
      tf_ResourceConfig_r12 = tf_ResourceConfig_r12_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SL_DiscResourcePool_r12 (SL_CP_Len_r12 cp_Len_r12_,
      SL_DiscResourcePool_r12_discPeriod_r12 discPeriod_r12_,
      long numRetx_r12_,
      long numRepetition_r12_,
      SL_TF_ResourceConfig_r12 tf_ResourceConfig_r12_,
      SL_DiscResourcePool_r12_txParameters_r12 txParameters_r12_,
      SL_DiscResourcePool_r12_rxParameters_r12 rxParameters_r12_,
      SL_DiscResourcePool_r12_discPeriod_v1310 discPeriod_v1310_,
      SL_DiscResourcePool_r12_rxParamsAddNeighFreq_r13 rxParamsAddNeighFreq_r13_,
      SL_DiscResourcePool_r12_txParamsAddNeighFreq_r13 txParamsAddNeighFreq_r13_,
      SL_DiscResourcePool_r12_txParamsAddNeighFreq_v1370 txParamsAddNeighFreq_v1370_
   ) {
      super();
      cp_Len_r12 = cp_Len_r12_;
      discPeriod_r12 = discPeriod_r12_;
      numRetx_r12 = new Asn1Integer (numRetx_r12_);
      numRepetition_r12 = new Asn1Integer (numRepetition_r12_);
      tf_ResourceConfig_r12 = tf_ResourceConfig_r12_;
      txParameters_r12 = txParameters_r12_;
      rxParameters_r12 = rxParameters_r12_;
      discPeriod_v1310 = discPeriod_v1310_;
      rxParamsAddNeighFreq_r13 = rxParamsAddNeighFreq_r13_;
      txParamsAddNeighFreq_r13 = txParamsAddNeighFreq_r13_;
      txParamsAddNeighFreq_v1370 = txParamsAddNeighFreq_v1370_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public SL_DiscResourcePool_r12 (
      SL_CP_Len_r12 cp_Len_r12_,
      SL_DiscResourcePool_r12_discPeriod_r12 discPeriod_r12_,
      long numRetx_r12_,
      long numRepetition_r12_,
      SL_TF_ResourceConfig_r12 tf_ResourceConfig_r12_
   ) {
      super();
      cp_Len_r12 = cp_Len_r12_;
      discPeriod_r12 = discPeriod_r12_;
      numRetx_r12 = new Asn1Integer (numRetx_r12_);
      numRepetition_r12 = new Asn1Integer (numRepetition_r12_);
      tf_ResourceConfig_r12 = tf_ResourceConfig_r12_;
   }

   public void init () {
      cp_Len_r12 = null;
      discPeriod_r12 = null;
      numRetx_r12 = null;
      numRepetition_r12 = null;
      tf_ResourceConfig_r12 = null;
      txParameters_r12 = null;
      rxParameters_r12 = null;
      discPeriod_v1310 = null;
      rxParamsAddNeighFreq_r13 = null;
      txParamsAddNeighFreq_r13 = null;
      txParamsAddNeighFreq_v1370 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 12; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return cp_Len_r12;
         case 1: return discPeriod_r12;
         case 2: return numRetx_r12;
         case 3: return numRepetition_r12;
         case 4: return tf_ResourceConfig_r12;
         case 5: return txParameters_r12;
         case 6: return rxParameters_r12;
         case 7: return discPeriod_v1310;
         case 8: return rxParamsAddNeighFreq_r13;
         case 9: return txParamsAddNeighFreq_r13;
         case 10: return txParamsAddNeighFreq_v1370;
         case 11: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "cp-Len-r12";
         case 1: return "discPeriod-r12";
         case 2: return "numRetx-r12";
         case 3: return "numRepetition-r12";
         case 4: return "tf-ResourceConfig-r12";
         case 5: return "txParameters-r12";
         case 6: return "rxParameters-r12";
         case 7: return "discPeriod-v1310";
         case 8: return "rxParamsAddNeighFreq-r13";
         case 9: return "txParamsAddNeighFreq-r13";
         case 10: return "txParamsAddNeighFreq-v1370";
         case 11: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean txParameters_r12Present = buffer.decodeBit ("txParameters_r12Present");
      boolean rxParameters_r12Present = buffer.decodeBit ("rxParameters_r12Present");

      // decode cp_Len_r12

      buffer.getContext().eventDispatcher.startElement("cp_Len_r12", -1);

      {
         int tval = SL_CP_Len_r12.decodeEnumValue (buffer);
         cp_Len_r12 = SL_CP_Len_r12.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("cp_Len_r12", -1);

      // decode discPeriod_r12

      buffer.getContext().eventDispatcher.startElement("discPeriod_r12", -1);

      {
         int tval = SL_DiscResourcePool_r12_discPeriod_r12.decodeEnumValue (buffer);
         discPeriod_r12 = SL_DiscResourcePool_r12_discPeriod_r12.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("discPeriod_r12", -1);

      // decode numRetx_r12

      buffer.getContext().eventDispatcher.startElement("numRetx_r12", -1);

      numRetx_r12 = new Asn1Integer();
      numRetx_r12.decode (buffer, 0, 3);

      buffer.invokeCharacters(numRetx_r12.toString());
      buffer.getContext().eventDispatcher.endElement("numRetx_r12", -1);

      // decode numRepetition_r12

      buffer.getContext().eventDispatcher.startElement("numRepetition_r12", -1);

      numRepetition_r12 = new Asn1Integer();
      numRepetition_r12.decode (buffer, 1, 50);

      buffer.invokeCharacters(numRepetition_r12.toString());
      buffer.getContext().eventDispatcher.endElement("numRepetition_r12", -1);

      // decode tf_ResourceConfig_r12

      buffer.getContext().eventDispatcher.startElement("tf_ResourceConfig_r12", -1);

      tf_ResourceConfig_r12 = new SL_TF_ResourceConfig_r12();
      tf_ResourceConfig_r12.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("tf_ResourceConfig_r12", -1);

      // decode txParameters_r12

      if (txParameters_r12Present) {
         buffer.getContext().eventDispatcher.startElement("txParameters_r12", -1);

         txParameters_r12 = new SL_DiscResourcePool_r12_txParameters_r12();
         txParameters_r12.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("txParameters_r12", -1);
      }
      else {
         txParameters_r12 = null;
      }

      // decode rxParameters_r12

      if (rxParameters_r12Present) {
         buffer.getContext().eventDispatcher.startElement("rxParameters_r12", -1);

         rxParameters_r12 = new SL_DiscResourcePool_r12_rxParameters_r12();
         rxParameters_r12.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("rxParameters_r12", -1);
      }
      else {
         rxParameters_r12 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean discPeriod_v1310Present = buffer.decodeBit ("discPeriod_v1310Present");

            boolean rxParamsAddNeighFreq_r13Present = buffer.decodeBit ("rxParamsAddNeighFreq_r13Present");

            boolean txParamsAddNeighFreq_r13Present = buffer.decodeBit ("txParamsAddNeighFreq_r13Present");

            // decode discPeriod_v1310

            if (discPeriod_v1310Present) {
               buffer.getContext().eventDispatcher.startElement("discPeriod_v1310", -1);

               discPeriod_v1310 = new SL_DiscResourcePool_r12_discPeriod_v1310();
               discPeriod_v1310.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("discPeriod_v1310", -1);
            }
            else {
               discPeriod_v1310 = null;
            }

            // decode rxParamsAddNeighFreq_r13

            if (rxParamsAddNeighFreq_r13Present) {
               buffer.getContext().eventDispatcher.startElement("rxParamsAddNeighFreq_r13", -1);

               rxParamsAddNeighFreq_r13 = new SL_DiscResourcePool_r12_rxParamsAddNeighFreq_r13();
               rxParamsAddNeighFreq_r13.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("rxParamsAddNeighFreq_r13", -1);
            }
            else {
               rxParamsAddNeighFreq_r13 = null;
            }

            // decode txParamsAddNeighFreq_r13

            if (txParamsAddNeighFreq_r13Present) {
               buffer.getContext().eventDispatcher.startElement("txParamsAddNeighFreq_r13", -1);

               txParamsAddNeighFreq_r13 = new SL_DiscResourcePool_r12_txParamsAddNeighFreq_r13();
               txParamsAddNeighFreq_r13.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("txParamsAddNeighFreq_r13", -1);
            }
            else {
               txParamsAddNeighFreq_r13 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean txParamsAddNeighFreq_v1370Present = buffer.decodeBit ("txParamsAddNeighFreq_v1370Present");

            // decode txParamsAddNeighFreq_v1370

            if (txParamsAddNeighFreq_v1370Present) {
               buffer.getContext().eventDispatcher.startElement("txParamsAddNeighFreq_v1370", -1);

               txParamsAddNeighFreq_v1370 = new SL_DiscResourcePool_r12_txParamsAddNeighFreq_v1370();
               txParamsAddNeighFreq_v1370.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("txParamsAddNeighFreq_v1370", -1);
            }
            else {
               txParamsAddNeighFreq_v1370 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (cp_Len_r12 != null) cp_Len_r12.print (_sb, "cp_Len_r12", _level+1);
      if (discPeriod_r12 != null) discPeriod_r12.print (_sb, "discPeriod_r12", _level+1);
      if (numRetx_r12 != null) numRetx_r12.print (_sb, "numRetx_r12", _level+1);
      if (numRepetition_r12 != null) numRepetition_r12.print (_sb, "numRepetition_r12", _level+1);
      if (tf_ResourceConfig_r12 != null) tf_ResourceConfig_r12.print (_sb, "tf_ResourceConfig_r12", _level+1);
      if (txParameters_r12 != null) txParameters_r12.print (_sb, "txParameters_r12", _level+1);
      if (rxParameters_r12 != null) rxParameters_r12.print (_sb, "rxParameters_r12", _level+1);
      if (discPeriod_v1310 != null) discPeriod_v1310.print (_sb, "discPeriod_v1310", _level+1);
      if (rxParamsAddNeighFreq_r13 != null) rxParamsAddNeighFreq_r13.print (_sb, "rxParamsAddNeighFreq_r13", _level+1);
      if (txParamsAddNeighFreq_r13 != null) txParamsAddNeighFreq_r13.print (_sb, "txParamsAddNeighFreq_r13", _level+1);
      if (txParamsAddNeighFreq_v1370 != null) txParamsAddNeighFreq_v1370.print (_sb, "txParamsAddNeighFreq_v1370", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
