/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MeasObjectNR_r15 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "MeasObjectNR-r15";
   }

   public ARFCN_ValueNR_r15 carrierFreq_r15;
   public RS_ConfigSSB_NR_r15 rs_ConfigSSB_r15;
   public ThresholdListNR_r15 threshRS_Index_r15;  // optional
   public MaxRS_IndexCellQualNR_r15 maxRS_IndexCellQual_r15;  // optional
   public Q_OffsetRangeInterRAT offsetFreq_r15;  // default = 0()
   public CellIndexList blackCellsToRemoveList_r15;  // optional
   public CellsToAddModListNR_r15 blackCellsToAddModList_r15;  // optional
   public Asn1Integer quantityConfigSet_r15;
   public MeasObjectNR_r15_cellsForWhichToReportSFTD_r15 cellsForWhichToReportSFTD_r15;  // optional
   public boolean mV2ExtPresent;
   public PhysCellIdNR_r15 cellForWhichToReportCGI_r15;  // optional
   public Asn1Boolean deriveSSB_IndexFromCell_r15;  // optional
   public SS_RSSI_Measurement_r15 ss_RSSI_Measurement_r15;  // optional
   public MeasObjectNR_r15_bandNR_r15 bandNR_r15;  // optional
   public Asn1OpenExt extElem1;

   public MeasObjectNR_r15 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MeasObjectNR_r15 (
      ARFCN_ValueNR_r15 carrierFreq_r15_,
      RS_ConfigSSB_NR_r15 rs_ConfigSSB_r15_,
      ThresholdListNR_r15 threshRS_Index_r15_,
      MaxRS_IndexCellQualNR_r15 maxRS_IndexCellQual_r15_,
      Q_OffsetRangeInterRAT offsetFreq_r15_,
      CellIndexList blackCellsToRemoveList_r15_,
      CellsToAddModListNR_r15 blackCellsToAddModList_r15_,
      Asn1Integer quantityConfigSet_r15_,
      MeasObjectNR_r15_cellsForWhichToReportSFTD_r15 cellsForWhichToReportSFTD_r15_,
      PhysCellIdNR_r15 cellForWhichToReportCGI_r15_,
      Asn1Boolean deriveSSB_IndexFromCell_r15_,
      SS_RSSI_Measurement_r15 ss_RSSI_Measurement_r15_,
      MeasObjectNR_r15_bandNR_r15 bandNR_r15_
   ) {
      super();
      carrierFreq_r15 = carrierFreq_r15_;
      rs_ConfigSSB_r15 = rs_ConfigSSB_r15_;
      threshRS_Index_r15 = threshRS_Index_r15_;
      maxRS_IndexCellQual_r15 = maxRS_IndexCellQual_r15_;
      offsetFreq_r15 = offsetFreq_r15_;
      blackCellsToRemoveList_r15 = blackCellsToRemoveList_r15_;
      blackCellsToAddModList_r15 = blackCellsToAddModList_r15_;
      quantityConfigSet_r15 = quantityConfigSet_r15_;
      cellsForWhichToReportSFTD_r15 = cellsForWhichToReportSFTD_r15_;
      cellForWhichToReportCGI_r15 = cellForWhichToReportCGI_r15_;
      deriveSSB_IndexFromCell_r15 = deriveSSB_IndexFromCell_r15_;
      ss_RSSI_Measurement_r15 = ss_RSSI_Measurement_r15_;
      bandNR_r15 = bandNR_r15_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public MeasObjectNR_r15 (
      ARFCN_ValueNR_r15 carrierFreq_r15_,
      RS_ConfigSSB_NR_r15 rs_ConfigSSB_r15_,
      Asn1Integer quantityConfigSet_r15_
   ) {
      super();
      carrierFreq_r15 = carrierFreq_r15_;
      rs_ConfigSSB_r15 = rs_ConfigSSB_r15_;
      offsetFreq_r15 = new Q_OffsetRangeInterRAT (0);
      quantityConfigSet_r15 = quantityConfigSet_r15_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public MeasObjectNR_r15 (long carrierFreq_r15_,
      RS_ConfigSSB_NR_r15 rs_ConfigSSB_r15_,
      ThresholdListNR_r15 threshRS_Index_r15_,
      long maxRS_IndexCellQual_r15_,
      long offsetFreq_r15_,
      CellIndexList blackCellsToRemoveList_r15_,
      CellsToAddModListNR_r15 blackCellsToAddModList_r15_,
      long quantityConfigSet_r15_,
      MeasObjectNR_r15_cellsForWhichToReportSFTD_r15 cellsForWhichToReportSFTD_r15_,
      long cellForWhichToReportCGI_r15_,
      boolean deriveSSB_IndexFromCell_r15_,
      SS_RSSI_Measurement_r15 ss_RSSI_Measurement_r15_,
      MeasObjectNR_r15_bandNR_r15 bandNR_r15_
   ) {
      super();
      carrierFreq_r15 = new ARFCN_ValueNR_r15 (carrierFreq_r15_);
      rs_ConfigSSB_r15 = rs_ConfigSSB_r15_;
      threshRS_Index_r15 = threshRS_Index_r15_;
      maxRS_IndexCellQual_r15 = new MaxRS_IndexCellQualNR_r15 (maxRS_IndexCellQual_r15_);
      offsetFreq_r15 = new Q_OffsetRangeInterRAT (offsetFreq_r15_);
      blackCellsToRemoveList_r15 = blackCellsToRemoveList_r15_;
      blackCellsToAddModList_r15 = blackCellsToAddModList_r15_;
      quantityConfigSet_r15 = new Asn1Integer (quantityConfigSet_r15_);
      cellsForWhichToReportSFTD_r15 = cellsForWhichToReportSFTD_r15_;
      cellForWhichToReportCGI_r15 = new PhysCellIdNR_r15 (cellForWhichToReportCGI_r15_);
      deriveSSB_IndexFromCell_r15 = new Asn1Boolean (deriveSSB_IndexFromCell_r15_);
      ss_RSSI_Measurement_r15 = ss_RSSI_Measurement_r15_;
      bandNR_r15 = bandNR_r15_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public MeasObjectNR_r15 (
      long carrierFreq_r15_,
      RS_ConfigSSB_NR_r15 rs_ConfigSSB_r15_,
      long quantityConfigSet_r15_
   ) {
      super();
      carrierFreq_r15 = new ARFCN_ValueNR_r15 (carrierFreq_r15_);
      rs_ConfigSSB_r15 = rs_ConfigSSB_r15_;
      offsetFreq_r15 = new Q_OffsetRangeInterRAT (0);
      quantityConfigSet_r15 = new Asn1Integer (quantityConfigSet_r15_);
   }

   public void init () {
      carrierFreq_r15 = null;
      rs_ConfigSSB_r15 = null;
      threshRS_Index_r15 = null;
      maxRS_IndexCellQual_r15 = null;
      offsetFreq_r15 = new Q_OffsetRangeInterRAT (0);
      blackCellsToRemoveList_r15 = null;
      blackCellsToAddModList_r15 = null;
      quantityConfigSet_r15 = null;
      cellsForWhichToReportSFTD_r15 = null;
      cellForWhichToReportCGI_r15 = null;
      deriveSSB_IndexFromCell_r15 = null;
      ss_RSSI_Measurement_r15 = null;
      bandNR_r15 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 14; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return carrierFreq_r15;
         case 1: return rs_ConfigSSB_r15;
         case 2: return threshRS_Index_r15;
         case 3: return maxRS_IndexCellQual_r15;
         case 4: return offsetFreq_r15;
         case 5: return blackCellsToRemoveList_r15;
         case 6: return blackCellsToAddModList_r15;
         case 7: return quantityConfigSet_r15;
         case 8: return cellsForWhichToReportSFTD_r15;
         case 9: return cellForWhichToReportCGI_r15;
         case 10: return deriveSSB_IndexFromCell_r15;
         case 11: return ss_RSSI_Measurement_r15;
         case 12: return bandNR_r15;
         case 13: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "carrierFreq-r15";
         case 1: return "rs-ConfigSSB-r15";
         case 2: return "threshRS-Index-r15";
         case 3: return "maxRS-IndexCellQual-r15";
         case 4: return "offsetFreq-r15";
         case 5: return "blackCellsToRemoveList-r15";
         case 6: return "blackCellsToAddModList-r15";
         case 7: return "quantityConfigSet-r15";
         case 8: return "cellsForWhichToReportSFTD-r15";
         case 9: return "cellForWhichToReportCGI-r15";
         case 10: return "deriveSSB-IndexFromCell-r15";
         case 11: return "ss-RSSI-Measurement-r15";
         case 12: return "bandNR-r15";
         case 13: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean threshRS_Index_r15Present = buffer.decodeBit ("threshRS_Index_r15Present");
      boolean maxRS_IndexCellQual_r15Present = buffer.decodeBit ("maxRS_IndexCellQual_r15Present");
      boolean offsetFreq_r15Present = buffer.decodeBit ("offsetFreq_r15Present");
      boolean blackCellsToRemoveList_r15Present = buffer.decodeBit ("blackCellsToRemoveList_r15Present");
      boolean blackCellsToAddModList_r15Present = buffer.decodeBit ("blackCellsToAddModList_r15Present");
      boolean cellsForWhichToReportSFTD_r15Present = buffer.decodeBit ("cellsForWhichToReportSFTD_r15Present");

      // decode carrierFreq_r15

      buffer.getContext().eventDispatcher.startElement("carrierFreq_r15", -1);

      carrierFreq_r15 = new ARFCN_ValueNR_r15();
      carrierFreq_r15.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("carrierFreq_r15", -1);

      // decode rs_ConfigSSB_r15

      buffer.getContext().eventDispatcher.startElement("rs_ConfigSSB_r15", -1);

      rs_ConfigSSB_r15 = new RS_ConfigSSB_NR_r15();
      rs_ConfigSSB_r15.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("rs_ConfigSSB_r15", -1);

      // decode threshRS_Index_r15

      if (threshRS_Index_r15Present) {
         buffer.getContext().eventDispatcher.startElement("threshRS_Index_r15", -1);

         threshRS_Index_r15 = new ThresholdListNR_r15();
         threshRS_Index_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("threshRS_Index_r15", -1);
      }
      else {
         threshRS_Index_r15 = null;
      }

      // decode maxRS_IndexCellQual_r15

      if (maxRS_IndexCellQual_r15Present) {
         buffer.getContext().eventDispatcher.startElement("maxRS_IndexCellQual_r15", -1);

         maxRS_IndexCellQual_r15 = new MaxRS_IndexCellQualNR_r15();
         maxRS_IndexCellQual_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("maxRS_IndexCellQual_r15", -1);
      }
      else {
         maxRS_IndexCellQual_r15 = null;
      }

      // decode offsetFreq_r15

      if (offsetFreq_r15Present) {
         buffer.getContext().eventDispatcher.startElement("offsetFreq_r15", -1);

         offsetFreq_r15 = new Q_OffsetRangeInterRAT();
         offsetFreq_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("offsetFreq_r15", -1);
      }
      else {
         offsetFreq_r15 = new Q_OffsetRangeInterRAT();
         offsetFreq_r15.value = 0;
      }

      // decode blackCellsToRemoveList_r15

      if (blackCellsToRemoveList_r15Present) {
         buffer.getContext().eventDispatcher.startElement("blackCellsToRemoveList_r15", -1);

         blackCellsToRemoveList_r15 = new CellIndexList();
         blackCellsToRemoveList_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("blackCellsToRemoveList_r15", -1);
      }
      else {
         blackCellsToRemoveList_r15 = null;
      }

      // decode blackCellsToAddModList_r15

      if (blackCellsToAddModList_r15Present) {
         buffer.getContext().eventDispatcher.startElement("blackCellsToAddModList_r15", -1);

         blackCellsToAddModList_r15 = new CellsToAddModListNR_r15();
         blackCellsToAddModList_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("blackCellsToAddModList_r15", -1);
      }
      else {
         blackCellsToAddModList_r15 = null;
      }

      // decode quantityConfigSet_r15

      buffer.getContext().eventDispatcher.startElement("quantityConfigSet_r15", -1);

      quantityConfigSet_r15 = new Asn1Integer();
      quantityConfigSet_r15.decode (buffer, 1, 2);

      buffer.invokeCharacters(quantityConfigSet_r15.toString());
      buffer.getContext().eventDispatcher.endElement("quantityConfigSet_r15", -1);

      // decode cellsForWhichToReportSFTD_r15

      if (cellsForWhichToReportSFTD_r15Present) {
         buffer.getContext().eventDispatcher.startElement("cellsForWhichToReportSFTD_r15", -1);

         cellsForWhichToReportSFTD_r15 = new MeasObjectNR_r15_cellsForWhichToReportSFTD_r15();
         cellsForWhichToReportSFTD_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("cellsForWhichToReportSFTD_r15", -1);
      }
      else {
         cellsForWhichToReportSFTD_r15 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean cellForWhichToReportCGI_r15Present = buffer.decodeBit ("cellForWhichToReportCGI_r15Present");

            boolean deriveSSB_IndexFromCell_r15Present = buffer.decodeBit ("deriveSSB_IndexFromCell_r15Present");

            boolean ss_RSSI_Measurement_r15Present = buffer.decodeBit ("ss_RSSI_Measurement_r15Present");

            boolean bandNR_r15Present = buffer.decodeBit ("bandNR_r15Present");

            // decode cellForWhichToReportCGI_r15

            if (cellForWhichToReportCGI_r15Present) {
               buffer.getContext().eventDispatcher.startElement("cellForWhichToReportCGI_r15", -1);

               cellForWhichToReportCGI_r15 = new PhysCellIdNR_r15();
               cellForWhichToReportCGI_r15.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("cellForWhichToReportCGI_r15", -1);
            }
            else {
               cellForWhichToReportCGI_r15 = null;
            }

            // decode deriveSSB_IndexFromCell_r15

            if (deriveSSB_IndexFromCell_r15Present) {
               buffer.getContext().eventDispatcher.startElement("deriveSSB_IndexFromCell_r15", -1);

               deriveSSB_IndexFromCell_r15 = new Asn1Boolean();
               deriveSSB_IndexFromCell_r15.decode (buffer);

               buffer.invokeCharacters(deriveSSB_IndexFromCell_r15.toString());
               buffer.getContext().eventDispatcher.endElement("deriveSSB_IndexFromCell_r15", -1);
            }
            else {
               deriveSSB_IndexFromCell_r15 = null;
            }

            // decode ss_RSSI_Measurement_r15

            if (ss_RSSI_Measurement_r15Present) {
               buffer.getContext().eventDispatcher.startElement("ss_RSSI_Measurement_r15", -1);

               ss_RSSI_Measurement_r15 = new SS_RSSI_Measurement_r15();
               ss_RSSI_Measurement_r15.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("ss_RSSI_Measurement_r15", -1);
            }
            else {
               ss_RSSI_Measurement_r15 = null;
            }

            // decode bandNR_r15

            if (bandNR_r15Present) {
               buffer.getContext().eventDispatcher.startElement("bandNR_r15", -1);

               bandNR_r15 = new MeasObjectNR_r15_bandNR_r15();
               bandNR_r15.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("bandNR_r15", -1);
            }
            else {
               bandNR_r15 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (carrierFreq_r15 != null) carrierFreq_r15.print (_sb, "carrierFreq_r15", _level+1);
      if (rs_ConfigSSB_r15 != null) rs_ConfigSSB_r15.print (_sb, "rs_ConfigSSB_r15", _level+1);
      if (threshRS_Index_r15 != null) threshRS_Index_r15.print (_sb, "threshRS_Index_r15", _level+1);
      if (maxRS_IndexCellQual_r15 != null) maxRS_IndexCellQual_r15.print (_sb, "maxRS_IndexCellQual_r15", _level+1);
      if (offsetFreq_r15 != null) offsetFreq_r15.print (_sb, "offsetFreq_r15", _level+1);
      if (blackCellsToRemoveList_r15 != null) blackCellsToRemoveList_r15.print (_sb, "blackCellsToRemoveList_r15", _level+1);
      if (blackCellsToAddModList_r15 != null) blackCellsToAddModList_r15.print (_sb, "blackCellsToAddModList_r15", _level+1);
      if (quantityConfigSet_r15 != null) quantityConfigSet_r15.print (_sb, "quantityConfigSet_r15", _level+1);
      if (cellsForWhichToReportSFTD_r15 != null) cellsForWhichToReportSFTD_r15.print (_sb, "cellsForWhichToReportSFTD_r15", _level+1);
      if (cellForWhichToReportCGI_r15 != null) cellForWhichToReportCGI_r15.print (_sb, "cellForWhichToReportCGI_r15", _level+1);
      if (deriveSSB_IndexFromCell_r15 != null) deriveSSB_IndexFromCell_r15.print (_sb, "deriveSSB_IndexFromCell_r15", _level+1);
      if (ss_RSSI_Measurement_r15 != null) ss_RSSI_Measurement_r15.print (_sb, "ss_RSSI_Measurement_r15", _level+1);
      if (bandNR_r15 != null) bandNR_r15.print (_sb, "bandNR_r15", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
