/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class CellChangeOrder_targetRAT_Type_geran extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public PhysCellIdGERAN physCellId;
   public CarrierFreqGERAN carrierFreq;
   public Asn1BitString networkControlOrder;  // optional
   public SI_OrPSI_GERAN systemInformation;  // optional

   public CellChangeOrder_targetRAT_Type_geran () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CellChangeOrder_targetRAT_Type_geran (
      PhysCellIdGERAN physCellId_,
      CarrierFreqGERAN carrierFreq_,
      Asn1BitString networkControlOrder_,
      SI_OrPSI_GERAN systemInformation_
   ) {
      super();
      physCellId = physCellId_;
      carrierFreq = carrierFreq_;
      networkControlOrder = networkControlOrder_;
      systemInformation = systemInformation_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public CellChangeOrder_targetRAT_Type_geran (
      PhysCellIdGERAN physCellId_,
      CarrierFreqGERAN carrierFreq_
   ) {
      super();
      physCellId = physCellId_;
      carrierFreq = carrierFreq_;
   }

   public void init () {
      physCellId = null;
      carrierFreq = null;
      networkControlOrder = null;
      systemInformation = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return physCellId;
         case 1: return carrierFreq;
         case 2: return networkControlOrder;
         case 3: return systemInformation;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "physCellId";
         case 1: return "carrierFreq";
         case 2: return "networkControlOrder";
         case 3: return "systemInformation";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean networkControlOrderPresent = buffer.decodeBit ("networkControlOrderPresent");
      boolean systemInformationPresent = buffer.decodeBit ("systemInformationPresent");

      // decode physCellId

      buffer.getContext().eventDispatcher.startElement("physCellId", -1);

      physCellId = new PhysCellIdGERAN();
      physCellId.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("physCellId", -1);

      // decode carrierFreq

      buffer.getContext().eventDispatcher.startElement("carrierFreq", -1);

      carrierFreq = new CarrierFreqGERAN();
      carrierFreq.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("carrierFreq", -1);

      // decode networkControlOrder

      if (networkControlOrderPresent) {
         buffer.getContext().eventDispatcher.startElement("networkControlOrder", -1);

         networkControlOrder = new Asn1BitString();
         networkControlOrder.decode (buffer, 2, 2);

         buffer.invokeCharacters(networkControlOrder.toString());
         buffer.getContext().eventDispatcher.endElement("networkControlOrder", -1);
      }
      else {
         networkControlOrder = null;
      }

      // decode systemInformation

      if (systemInformationPresent) {
         buffer.getContext().eventDispatcher.startElement("systemInformation", -1);

         systemInformation = new SI_OrPSI_GERAN();
         systemInformation.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("systemInformation", -1);
      }
      else {
         systemInformation = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (physCellId != null) physCellId.print (_sb, "physCellId", _level+1);
      if (carrierFreq != null) carrierFreq.print (_sb, "carrierFreq", _level+1);
      if (networkControlOrder != null) networkControlOrder.print (_sb, "networkControlOrder", _level+1);
      if (systemInformation != null) systemInformation.print (_sb, "systemInformation", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
