/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.X2AP_PDU_Contents;

import com.objsys.asn1j.runtime.*;
import asn.lte.generated.X2AP_IEs.ECGI;

public class MeasurementInitiationResult_Item extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_X2AP_PDU_ContentsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "MeasurementInitiationResult-Item";
   }

   public ECGI cell_ID;
   public MeasurementFailureCause_List measurementFailureCause_List;  // optional
   public MeasurementInitiationResult_Item_iE_Extensions iE_Extensions;  // optional
   public Asn1OpenExt extElem1;

   public MeasurementInitiationResult_Item () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MeasurementInitiationResult_Item (
      ECGI cell_ID_,
      MeasurementFailureCause_List measurementFailureCause_List_,
      MeasurementInitiationResult_Item_iE_Extensions iE_Extensions_
   ) {
      super();
      cell_ID = cell_ID_;
      measurementFailureCause_List = measurementFailureCause_List_;
      iE_Extensions = iE_Extensions_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public MeasurementInitiationResult_Item (
      ECGI cell_ID_
   ) {
      super();
      cell_ID = cell_ID_;
   }

   public void init () {
      cell_ID = null;
      measurementFailureCause_List = null;
      iE_Extensions = null;
      extElem1 = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return cell_ID;
         case 1: return measurementFailureCause_List;
         case 2: return iE_Extensions;
         case 3: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "cell-ID";
         case 1: return "measurementFailureCause-List";
         case 2: return "iE-Extensions";
         case 3: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean measurementFailureCause_ListPresent = buffer.decodeBit ("measurementFailureCause_ListPresent");
      boolean iE_ExtensionsPresent = buffer.decodeBit ("iE_ExtensionsPresent");

      // decode cell_ID

      buffer.getContext().eventDispatcher.startElement("cell_ID", -1);

      cell_ID = new ECGI();
      cell_ID.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("cell_ID", -1);

      // decode measurementFailureCause_List

      if (measurementFailureCause_ListPresent) {
         buffer.getContext().eventDispatcher.startElement("measurementFailureCause_List", -1);

         measurementFailureCause_List = new MeasurementFailureCause_List();
         measurementFailureCause_List.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("measurementFailureCause_List", -1);
      }
      else {
         measurementFailureCause_List = null;
      }

      // decode iE_Extensions

      if (iE_ExtensionsPresent) {
         buffer.getContext().eventDispatcher.startElement("iE_Extensions", -1);

         iE_Extensions = new MeasurementInitiationResult_Item_iE_Extensions();
         iE_Extensions.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("iE_Extensions", -1);
      }
      else {
         iE_Extensions = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (cell_ID != null) cell_ID.print (_sb, "cell_ID", _level+1);
      if (measurementFailureCause_List != null) measurementFailureCause_List.print (_sb, "measurementFailureCause_List", _level+1);
      if (iE_Extensions != null) iE_Extensions.print (_sb, "iE_Extensions", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
