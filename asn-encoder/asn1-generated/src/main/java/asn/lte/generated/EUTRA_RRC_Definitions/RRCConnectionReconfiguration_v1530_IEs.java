/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class RRCConnectionReconfiguration_v1530_IEs extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "RRCConnectionReconfiguration-v1530-IEs";
   }

   public SecurityConfigHO_v1530 securityConfigHO_v1530;  // optional
   public SCellGroupToReleaseList_r15 sCellGroupToReleaseList_r15;  // optional
   public SCellGroupToAddModList_r15 sCellGroupToAddModList_r15;  // optional
   public RRCConnectionReconfiguration_v1530_IEs_dedicatedInfoNASList_r15 dedicatedInfoNASList_r15;  // optional
   public P_Max p_MaxUE_FR1_r15;  // optional
   public MTC_SSB_NR_r15 smtc_r15;  // optional
   public RRCConnectionReconfiguration_v1530_IEs_nonCriticalExtension nonCriticalExtension;  // optional

   public RRCConnectionReconfiguration_v1530_IEs () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public RRCConnectionReconfiguration_v1530_IEs (
      SecurityConfigHO_v1530 securityConfigHO_v1530_,
      SCellGroupToReleaseList_r15 sCellGroupToReleaseList_r15_,
      SCellGroupToAddModList_r15 sCellGroupToAddModList_r15_,
      RRCConnectionReconfiguration_v1530_IEs_dedicatedInfoNASList_r15 dedicatedInfoNASList_r15_,
      P_Max p_MaxUE_FR1_r15_,
      MTC_SSB_NR_r15 smtc_r15_,
      RRCConnectionReconfiguration_v1530_IEs_nonCriticalExtension nonCriticalExtension_
   ) {
      super();
      securityConfigHO_v1530 = securityConfigHO_v1530_;
      sCellGroupToReleaseList_r15 = sCellGroupToReleaseList_r15_;
      sCellGroupToAddModList_r15 = sCellGroupToAddModList_r15_;
      dedicatedInfoNASList_r15 = dedicatedInfoNASList_r15_;
      p_MaxUE_FR1_r15 = p_MaxUE_FR1_r15_;
      smtc_r15 = smtc_r15_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public RRCConnectionReconfiguration_v1530_IEs (SecurityConfigHO_v1530 securityConfigHO_v1530_,
      SCellGroupToReleaseList_r15 sCellGroupToReleaseList_r15_,
      SCellGroupToAddModList_r15 sCellGroupToAddModList_r15_,
      RRCConnectionReconfiguration_v1530_IEs_dedicatedInfoNASList_r15 dedicatedInfoNASList_r15_,
      long p_MaxUE_FR1_r15_,
      MTC_SSB_NR_r15 smtc_r15_,
      RRCConnectionReconfiguration_v1530_IEs_nonCriticalExtension nonCriticalExtension_
   ) {
      super();
      securityConfigHO_v1530 = securityConfigHO_v1530_;
      sCellGroupToReleaseList_r15 = sCellGroupToReleaseList_r15_;
      sCellGroupToAddModList_r15 = sCellGroupToAddModList_r15_;
      dedicatedInfoNASList_r15 = dedicatedInfoNASList_r15_;
      p_MaxUE_FR1_r15 = new P_Max (p_MaxUE_FR1_r15_);
      smtc_r15 = smtc_r15_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   public void init () {
      securityConfigHO_v1530 = null;
      sCellGroupToReleaseList_r15 = null;
      sCellGroupToAddModList_r15 = null;
      dedicatedInfoNASList_r15 = null;
      p_MaxUE_FR1_r15 = null;
      smtc_r15 = null;
      nonCriticalExtension = null;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return securityConfigHO_v1530;
         case 1: return sCellGroupToReleaseList_r15;
         case 2: return sCellGroupToAddModList_r15;
         case 3: return dedicatedInfoNASList_r15;
         case 4: return p_MaxUE_FR1_r15;
         case 5: return smtc_r15;
         case 6: return nonCriticalExtension;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "securityConfigHO-v1530";
         case 1: return "sCellGroupToReleaseList-r15";
         case 2: return "sCellGroupToAddModList-r15";
         case 3: return "dedicatedInfoNASList-r15";
         case 4: return "p-MaxUE-FR1-r15";
         case 5: return "smtc-r15";
         case 6: return "nonCriticalExtension";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean securityConfigHO_v1530Present = buffer.decodeBit ("securityConfigHO_v1530Present");
      boolean sCellGroupToReleaseList_r15Present = buffer.decodeBit ("sCellGroupToReleaseList_r15Present");
      boolean sCellGroupToAddModList_r15Present = buffer.decodeBit ("sCellGroupToAddModList_r15Present");
      boolean dedicatedInfoNASList_r15Present = buffer.decodeBit ("dedicatedInfoNASList_r15Present");
      boolean p_MaxUE_FR1_r15Present = buffer.decodeBit ("p_MaxUE_FR1_r15Present");
      boolean smtc_r15Present = buffer.decodeBit ("smtc_r15Present");
      boolean nonCriticalExtensionPresent = buffer.decodeBit ("nonCriticalExtensionPresent");

      // decode securityConfigHO_v1530

      if (securityConfigHO_v1530Present) {
         buffer.getContext().eventDispatcher.startElement("securityConfigHO_v1530", -1);

         securityConfigHO_v1530 = new SecurityConfigHO_v1530();
         securityConfigHO_v1530.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("securityConfigHO_v1530", -1);
      }
      else {
         securityConfigHO_v1530 = null;
      }

      // decode sCellGroupToReleaseList_r15

      if (sCellGroupToReleaseList_r15Present) {
         buffer.getContext().eventDispatcher.startElement("sCellGroupToReleaseList_r15", -1);

         sCellGroupToReleaseList_r15 = new SCellGroupToReleaseList_r15();
         sCellGroupToReleaseList_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sCellGroupToReleaseList_r15", -1);
      }
      else {
         sCellGroupToReleaseList_r15 = null;
      }

      // decode sCellGroupToAddModList_r15

      if (sCellGroupToAddModList_r15Present) {
         buffer.getContext().eventDispatcher.startElement("sCellGroupToAddModList_r15", -1);

         sCellGroupToAddModList_r15 = new SCellGroupToAddModList_r15();
         sCellGroupToAddModList_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sCellGroupToAddModList_r15", -1);
      }
      else {
         sCellGroupToAddModList_r15 = null;
      }

      // decode dedicatedInfoNASList_r15

      if (dedicatedInfoNASList_r15Present) {
         buffer.getContext().eventDispatcher.startElement("dedicatedInfoNASList_r15", -1);

         dedicatedInfoNASList_r15 = new RRCConnectionReconfiguration_v1530_IEs_dedicatedInfoNASList_r15();
         dedicatedInfoNASList_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("dedicatedInfoNASList_r15", -1);
      }
      else {
         dedicatedInfoNASList_r15 = null;
      }

      // decode p_MaxUE_FR1_r15

      if (p_MaxUE_FR1_r15Present) {
         buffer.getContext().eventDispatcher.startElement("p_MaxUE_FR1_r15", -1);

         p_MaxUE_FR1_r15 = new P_Max();
         p_MaxUE_FR1_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("p_MaxUE_FR1_r15", -1);
      }
      else {
         p_MaxUE_FR1_r15 = null;
      }

      // decode smtc_r15

      if (smtc_r15Present) {
         buffer.getContext().eventDispatcher.startElement("smtc_r15", -1);

         smtc_r15 = new MTC_SSB_NR_r15();
         smtc_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("smtc_r15", -1);
      }
      else {
         smtc_r15 = null;
      }

      // decode nonCriticalExtension

      if (nonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension = new RRCConnectionReconfiguration_v1530_IEs_nonCriticalExtension();
         nonCriticalExtension.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }
      else {
         nonCriticalExtension = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (securityConfigHO_v1530 != null) securityConfigHO_v1530.print (_sb, "securityConfigHO_v1530", _level+1);
      if (sCellGroupToReleaseList_r15 != null) sCellGroupToReleaseList_r15.print (_sb, "sCellGroupToReleaseList_r15", _level+1);
      if (sCellGroupToAddModList_r15 != null) sCellGroupToAddModList_r15.print (_sb, "sCellGroupToAddModList_r15", _level+1);
      if (dedicatedInfoNASList_r15 != null) dedicatedInfoNASList_r15.print (_sb, "dedicatedInfoNASList_r15", _level+1);
      if (p_MaxUE_FR1_r15 != null) p_MaxUE_FR1_r15.print (_sb, "p_MaxUE_FR1_r15", _level+1);
      if (smtc_r15 != null) smtc_r15.print (_sb, "smtc_r15", _level+1);
      if (nonCriticalExtension != null) nonCriticalExtension.print (_sb, "nonCriticalExtension", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
