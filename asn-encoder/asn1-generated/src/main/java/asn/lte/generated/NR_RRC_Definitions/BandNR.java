/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class BandNR extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "BandNR";
   }

   public FreqBandIndicatorNR bandNR;
   public Asn1BitString modifiedMPR_Behaviour;  // optional
   public MIMO_ParametersPerBand mimo_ParametersPerBand;  // optional
   public BandNR_extendedCP extendedCP = null;  // optional
   public BandNR_multipleTCI multipleTCI = null;  // optional
   public BandNR_bwp_WithoutRestriction bwp_WithoutRestriction = null;  // optional
   public BandNR_bwp_SameNumerology bwp_SameNumerology = null;  // optional
   public BandNR_bwp_DiffNumerology bwp_DiffNumerology = null;  // optional
   public BandNR_crossCarrierScheduling_SameSCS crossCarrierScheduling_SameSCS = null;  // optional
   public BandNR_pdsch_256QAM_FR2 pdsch_256QAM_FR2 = null;  // optional
   public BandNR_pusch_256QAM pusch_256QAM = null;  // optional
   public BandNR_ue_PowerClass ue_PowerClass = null;  // optional
   public BandNR_rateMatchingLTE_CRS rateMatchingLTE_CRS = null;  // optional
   public BandNR_channelBWs_DL channelBWs_DL;  // optional
   public BandNR_channelBWs_UL channelBWs_UL;  // optional
   public boolean mV2ExtPresent;
   public BandNR_maxUplinkDutyCycle_PC2_FR1 maxUplinkDutyCycle_PC2_FR1 = null;  // optional
   public boolean mV3ExtPresent;
   public BandNR_pucch_SpatialRelInfoMAC_CE pucch_SpatialRelInfoMAC_CE = null;  // optional
   public BandNR_powerBoosting_pi2BPSK powerBoosting_pi2BPSK = null;  // optional
   public boolean mV4ExtPresent;
   public BandNR_maxUplinkDutyCycle_FR2 maxUplinkDutyCycle_FR2 = null;  // optional
   public boolean mV5ExtPresent;
   public BandNR_channelBWs_DL_v1590 channelBWs_DL_v1590;  // optional
   public BandNR_channelBWs_UL_v1590 channelBWs_UL_v1590;  // optional
   public boolean mV6ExtPresent;
   public Asn1BitString asymmetricBandwidthCombinationSet;  // optional
   public boolean mV7ExtPresent;
   public SharedSpectrumChAccessParamsPerBand_r16 sharedSpectrumChAccessParamsPerBand_r16;  // optional
   public BandNR_cancelOverlappingPUSCH_r16 cancelOverlappingPUSCH_r16 = null;  // optional
   public BandNR_multipleRateMatchingEUTRA_CRS_r16 multipleRateMatchingEUTRA_CRS_r16;  // optional
   public BandNR_overlapRateMatchingEUTRA_CRS_r16 overlapRateMatchingEUTRA_CRS_r16 = null;  // optional
   public BandNR_pdsch_MappingTypeB_Alt_r16 pdsch_MappingTypeB_Alt_r16 = null;  // optional
   public BandNR_oneSlotPeriodicTRS_r16 oneSlotPeriodicTRS_r16 = null;  // optional
   public OLPC_SRS_Pos_r16 olpc_SRS_Pos_r16;  // optional
   public SpatialRelationsSRS_Pos_r16 spatialRelationsSRS_Pos_r16;  // optional
   public BandNR_simulSRS_MIMO_TransWithinBand_r16 simulSRS_MIMO_TransWithinBand_r16 = null;  // optional
   public BandNR_channelBW_DL_IAB_r16 channelBW_DL_IAB_r16;  // optional
   public BandNR_channelBW_UL_IAB_r16 channelBW_UL_IAB_r16;  // optional
   public BandNR_rasterShift7dot5_IAB_r16 rasterShift7dot5_IAB_r16 = null;  // optional
   public BandNR_ue_PowerClass_v1610 ue_PowerClass_v1610 = null;  // optional
   public BandNR_condHandover_r16 condHandover_r16 = null;  // optional
   public BandNR_condHandoverFailure_r16 condHandoverFailure_r16 = null;  // optional
   public BandNR_condHandoverTwoTriggerEvents_r16 condHandoverTwoTriggerEvents_r16 = null;  // optional
   public BandNR_condPSCellChange_r16 condPSCellChange_r16 = null;  // optional
   public BandNR_condPSCellChangeTwoTriggerEvents_r16 condPSCellChangeTwoTriggerEvents_r16 = null;  // optional
   public BandNR_mpr_PowerBoost_FR2_r16 mpr_PowerBoost_FR2_r16 = null;  // optional
   public BandNR_activeConfiguredGrant_r16 activeConfiguredGrant_r16;  // optional
   public BandNR_jointReleaseConfiguredGrantType2_r16 jointReleaseConfiguredGrantType2_r16 = null;  // optional
   public BandNR_sps_r16 sps_r16;  // optional
   public BandNR_jointReleaseSPS_r16 jointReleaseSPS_r16 = null;  // optional
   public BandNR_simulSRS_TransWithinBand_r16 simulSRS_TransWithinBand_r16 = null;  // optional
   public BandNR_trs_AdditionalBandwidth_r16 trs_AdditionalBandwidth_r16 = null;  // optional
   public BandNR_handoverIntraF_IAB_r16 handoverIntraF_IAB_r16 = null;  // optional
   public boolean mV8ExtPresent;
   public SimulSRS_ForAntennaSwitching_r16 simulTX_SRS_AntSwitchingIntraBandUL_CA_r16;  // optional
   public SharedSpectrumChAccessParamsPerBand_v1630 sharedSpectrumChAccessParamsPerBand_v1630;  // optional
   public Asn1OpenExt extElem1;

   public BandNR () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public BandNR (
      FreqBandIndicatorNR bandNR_,
      Asn1BitString modifiedMPR_Behaviour_,
      MIMO_ParametersPerBand mimo_ParametersPerBand_,
      BandNR_extendedCP extendedCP_,
      BandNR_multipleTCI multipleTCI_,
      BandNR_bwp_WithoutRestriction bwp_WithoutRestriction_,
      BandNR_bwp_SameNumerology bwp_SameNumerology_,
      BandNR_bwp_DiffNumerology bwp_DiffNumerology_,
      BandNR_crossCarrierScheduling_SameSCS crossCarrierScheduling_SameSCS_,
      BandNR_pdsch_256QAM_FR2 pdsch_256QAM_FR2_,
      BandNR_pusch_256QAM pusch_256QAM_,
      BandNR_ue_PowerClass ue_PowerClass_,
      BandNR_rateMatchingLTE_CRS rateMatchingLTE_CRS_,
      BandNR_channelBWs_DL channelBWs_DL_,
      BandNR_channelBWs_UL channelBWs_UL_,
      BandNR_maxUplinkDutyCycle_PC2_FR1 maxUplinkDutyCycle_PC2_FR1_,
      BandNR_pucch_SpatialRelInfoMAC_CE pucch_SpatialRelInfoMAC_CE_,
      BandNR_powerBoosting_pi2BPSK powerBoosting_pi2BPSK_,
      BandNR_maxUplinkDutyCycle_FR2 maxUplinkDutyCycle_FR2_,
      BandNR_channelBWs_DL_v1590 channelBWs_DL_v1590_,
      BandNR_channelBWs_UL_v1590 channelBWs_UL_v1590_,
      Asn1BitString asymmetricBandwidthCombinationSet_,
      SharedSpectrumChAccessParamsPerBand_r16 sharedSpectrumChAccessParamsPerBand_r16_,
      BandNR_cancelOverlappingPUSCH_r16 cancelOverlappingPUSCH_r16_,
      BandNR_multipleRateMatchingEUTRA_CRS_r16 multipleRateMatchingEUTRA_CRS_r16_,
      BandNR_overlapRateMatchingEUTRA_CRS_r16 overlapRateMatchingEUTRA_CRS_r16_,
      BandNR_pdsch_MappingTypeB_Alt_r16 pdsch_MappingTypeB_Alt_r16_,
      BandNR_oneSlotPeriodicTRS_r16 oneSlotPeriodicTRS_r16_,
      OLPC_SRS_Pos_r16 olpc_SRS_Pos_r16_,
      SpatialRelationsSRS_Pos_r16 spatialRelationsSRS_Pos_r16_,
      BandNR_simulSRS_MIMO_TransWithinBand_r16 simulSRS_MIMO_TransWithinBand_r16_,
      BandNR_channelBW_DL_IAB_r16 channelBW_DL_IAB_r16_,
      BandNR_channelBW_UL_IAB_r16 channelBW_UL_IAB_r16_,
      BandNR_rasterShift7dot5_IAB_r16 rasterShift7dot5_IAB_r16_,
      BandNR_ue_PowerClass_v1610 ue_PowerClass_v1610_,
      BandNR_condHandover_r16 condHandover_r16_,
      BandNR_condHandoverFailure_r16 condHandoverFailure_r16_,
      BandNR_condHandoverTwoTriggerEvents_r16 condHandoverTwoTriggerEvents_r16_,
      BandNR_condPSCellChange_r16 condPSCellChange_r16_,
      BandNR_condPSCellChangeTwoTriggerEvents_r16 condPSCellChangeTwoTriggerEvents_r16_,
      BandNR_mpr_PowerBoost_FR2_r16 mpr_PowerBoost_FR2_r16_,
      BandNR_activeConfiguredGrant_r16 activeConfiguredGrant_r16_,
      BandNR_jointReleaseConfiguredGrantType2_r16 jointReleaseConfiguredGrantType2_r16_,
      BandNR_sps_r16 sps_r16_,
      BandNR_jointReleaseSPS_r16 jointReleaseSPS_r16_,
      BandNR_simulSRS_TransWithinBand_r16 simulSRS_TransWithinBand_r16_,
      BandNR_trs_AdditionalBandwidth_r16 trs_AdditionalBandwidth_r16_,
      BandNR_handoverIntraF_IAB_r16 handoverIntraF_IAB_r16_,
      SimulSRS_ForAntennaSwitching_r16 simulTX_SRS_AntSwitchingIntraBandUL_CA_r16_,
      SharedSpectrumChAccessParamsPerBand_v1630 sharedSpectrumChAccessParamsPerBand_v1630_
   ) {
      super();
      bandNR = bandNR_;
      modifiedMPR_Behaviour = modifiedMPR_Behaviour_;
      mimo_ParametersPerBand = mimo_ParametersPerBand_;
      extendedCP = extendedCP_;
      multipleTCI = multipleTCI_;
      bwp_WithoutRestriction = bwp_WithoutRestriction_;
      bwp_SameNumerology = bwp_SameNumerology_;
      bwp_DiffNumerology = bwp_DiffNumerology_;
      crossCarrierScheduling_SameSCS = crossCarrierScheduling_SameSCS_;
      pdsch_256QAM_FR2 = pdsch_256QAM_FR2_;
      pusch_256QAM = pusch_256QAM_;
      ue_PowerClass = ue_PowerClass_;
      rateMatchingLTE_CRS = rateMatchingLTE_CRS_;
      channelBWs_DL = channelBWs_DL_;
      channelBWs_UL = channelBWs_UL_;
      maxUplinkDutyCycle_PC2_FR1 = maxUplinkDutyCycle_PC2_FR1_;
      pucch_SpatialRelInfoMAC_CE = pucch_SpatialRelInfoMAC_CE_;
      powerBoosting_pi2BPSK = powerBoosting_pi2BPSK_;
      maxUplinkDutyCycle_FR2 = maxUplinkDutyCycle_FR2_;
      channelBWs_DL_v1590 = channelBWs_DL_v1590_;
      channelBWs_UL_v1590 = channelBWs_UL_v1590_;
      asymmetricBandwidthCombinationSet = asymmetricBandwidthCombinationSet_;
      sharedSpectrumChAccessParamsPerBand_r16 = sharedSpectrumChAccessParamsPerBand_r16_;
      cancelOverlappingPUSCH_r16 = cancelOverlappingPUSCH_r16_;
      multipleRateMatchingEUTRA_CRS_r16 = multipleRateMatchingEUTRA_CRS_r16_;
      overlapRateMatchingEUTRA_CRS_r16 = overlapRateMatchingEUTRA_CRS_r16_;
      pdsch_MappingTypeB_Alt_r16 = pdsch_MappingTypeB_Alt_r16_;
      oneSlotPeriodicTRS_r16 = oneSlotPeriodicTRS_r16_;
      olpc_SRS_Pos_r16 = olpc_SRS_Pos_r16_;
      spatialRelationsSRS_Pos_r16 = spatialRelationsSRS_Pos_r16_;
      simulSRS_MIMO_TransWithinBand_r16 = simulSRS_MIMO_TransWithinBand_r16_;
      channelBW_DL_IAB_r16 = channelBW_DL_IAB_r16_;
      channelBW_UL_IAB_r16 = channelBW_UL_IAB_r16_;
      rasterShift7dot5_IAB_r16 = rasterShift7dot5_IAB_r16_;
      ue_PowerClass_v1610 = ue_PowerClass_v1610_;
      condHandover_r16 = condHandover_r16_;
      condHandoverFailure_r16 = condHandoverFailure_r16_;
      condHandoverTwoTriggerEvents_r16 = condHandoverTwoTriggerEvents_r16_;
      condPSCellChange_r16 = condPSCellChange_r16_;
      condPSCellChangeTwoTriggerEvents_r16 = condPSCellChangeTwoTriggerEvents_r16_;
      mpr_PowerBoost_FR2_r16 = mpr_PowerBoost_FR2_r16_;
      activeConfiguredGrant_r16 = activeConfiguredGrant_r16_;
      jointReleaseConfiguredGrantType2_r16 = jointReleaseConfiguredGrantType2_r16_;
      sps_r16 = sps_r16_;
      jointReleaseSPS_r16 = jointReleaseSPS_r16_;
      simulSRS_TransWithinBand_r16 = simulSRS_TransWithinBand_r16_;
      trs_AdditionalBandwidth_r16 = trs_AdditionalBandwidth_r16_;
      handoverIntraF_IAB_r16 = handoverIntraF_IAB_r16_;
      simulTX_SRS_AntSwitchingIntraBandUL_CA_r16 = simulTX_SRS_AntSwitchingIntraBandUL_CA_r16_;
      sharedSpectrumChAccessParamsPerBand_v1630 = sharedSpectrumChAccessParamsPerBand_v1630_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public BandNR (
      FreqBandIndicatorNR bandNR_
   ) {
      super();
      bandNR = bandNR_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public BandNR (long bandNR_,
      Asn1BitString modifiedMPR_Behaviour_,
      MIMO_ParametersPerBand mimo_ParametersPerBand_,
      BandNR_extendedCP extendedCP_,
      BandNR_multipleTCI multipleTCI_,
      BandNR_bwp_WithoutRestriction bwp_WithoutRestriction_,
      BandNR_bwp_SameNumerology bwp_SameNumerology_,
      BandNR_bwp_DiffNumerology bwp_DiffNumerology_,
      BandNR_crossCarrierScheduling_SameSCS crossCarrierScheduling_SameSCS_,
      BandNR_pdsch_256QAM_FR2 pdsch_256QAM_FR2_,
      BandNR_pusch_256QAM pusch_256QAM_,
      BandNR_ue_PowerClass ue_PowerClass_,
      BandNR_rateMatchingLTE_CRS rateMatchingLTE_CRS_,
      BandNR_channelBWs_DL channelBWs_DL_,
      BandNR_channelBWs_UL channelBWs_UL_,
      BandNR_maxUplinkDutyCycle_PC2_FR1 maxUplinkDutyCycle_PC2_FR1_,
      BandNR_pucch_SpatialRelInfoMAC_CE pucch_SpatialRelInfoMAC_CE_,
      BandNR_powerBoosting_pi2BPSK powerBoosting_pi2BPSK_,
      BandNR_maxUplinkDutyCycle_FR2 maxUplinkDutyCycle_FR2_,
      BandNR_channelBWs_DL_v1590 channelBWs_DL_v1590_,
      BandNR_channelBWs_UL_v1590 channelBWs_UL_v1590_,
      Asn1BitString asymmetricBandwidthCombinationSet_,
      SharedSpectrumChAccessParamsPerBand_r16 sharedSpectrumChAccessParamsPerBand_r16_,
      BandNR_cancelOverlappingPUSCH_r16 cancelOverlappingPUSCH_r16_,
      BandNR_multipleRateMatchingEUTRA_CRS_r16 multipleRateMatchingEUTRA_CRS_r16_,
      BandNR_overlapRateMatchingEUTRA_CRS_r16 overlapRateMatchingEUTRA_CRS_r16_,
      BandNR_pdsch_MappingTypeB_Alt_r16 pdsch_MappingTypeB_Alt_r16_,
      BandNR_oneSlotPeriodicTRS_r16 oneSlotPeriodicTRS_r16_,
      OLPC_SRS_Pos_r16 olpc_SRS_Pos_r16_,
      SpatialRelationsSRS_Pos_r16 spatialRelationsSRS_Pos_r16_,
      BandNR_simulSRS_MIMO_TransWithinBand_r16 simulSRS_MIMO_TransWithinBand_r16_,
      BandNR_channelBW_DL_IAB_r16 channelBW_DL_IAB_r16_,
      BandNR_channelBW_UL_IAB_r16 channelBW_UL_IAB_r16_,
      BandNR_rasterShift7dot5_IAB_r16 rasterShift7dot5_IAB_r16_,
      BandNR_ue_PowerClass_v1610 ue_PowerClass_v1610_,
      BandNR_condHandover_r16 condHandover_r16_,
      BandNR_condHandoverFailure_r16 condHandoverFailure_r16_,
      BandNR_condHandoverTwoTriggerEvents_r16 condHandoverTwoTriggerEvents_r16_,
      BandNR_condPSCellChange_r16 condPSCellChange_r16_,
      BandNR_condPSCellChangeTwoTriggerEvents_r16 condPSCellChangeTwoTriggerEvents_r16_,
      BandNR_mpr_PowerBoost_FR2_r16 mpr_PowerBoost_FR2_r16_,
      BandNR_activeConfiguredGrant_r16 activeConfiguredGrant_r16_,
      BandNR_jointReleaseConfiguredGrantType2_r16 jointReleaseConfiguredGrantType2_r16_,
      BandNR_sps_r16 sps_r16_,
      BandNR_jointReleaseSPS_r16 jointReleaseSPS_r16_,
      BandNR_simulSRS_TransWithinBand_r16 simulSRS_TransWithinBand_r16_,
      BandNR_trs_AdditionalBandwidth_r16 trs_AdditionalBandwidth_r16_,
      BandNR_handoverIntraF_IAB_r16 handoverIntraF_IAB_r16_,
      SimulSRS_ForAntennaSwitching_r16 simulTX_SRS_AntSwitchingIntraBandUL_CA_r16_,
      SharedSpectrumChAccessParamsPerBand_v1630 sharedSpectrumChAccessParamsPerBand_v1630_
   ) {
      super();
      bandNR = new FreqBandIndicatorNR (bandNR_);
      modifiedMPR_Behaviour = modifiedMPR_Behaviour_;
      mimo_ParametersPerBand = mimo_ParametersPerBand_;
      extendedCP = extendedCP_;
      multipleTCI = multipleTCI_;
      bwp_WithoutRestriction = bwp_WithoutRestriction_;
      bwp_SameNumerology = bwp_SameNumerology_;
      bwp_DiffNumerology = bwp_DiffNumerology_;
      crossCarrierScheduling_SameSCS = crossCarrierScheduling_SameSCS_;
      pdsch_256QAM_FR2 = pdsch_256QAM_FR2_;
      pusch_256QAM = pusch_256QAM_;
      ue_PowerClass = ue_PowerClass_;
      rateMatchingLTE_CRS = rateMatchingLTE_CRS_;
      channelBWs_DL = channelBWs_DL_;
      channelBWs_UL = channelBWs_UL_;
      maxUplinkDutyCycle_PC2_FR1 = maxUplinkDutyCycle_PC2_FR1_;
      pucch_SpatialRelInfoMAC_CE = pucch_SpatialRelInfoMAC_CE_;
      powerBoosting_pi2BPSK = powerBoosting_pi2BPSK_;
      maxUplinkDutyCycle_FR2 = maxUplinkDutyCycle_FR2_;
      channelBWs_DL_v1590 = channelBWs_DL_v1590_;
      channelBWs_UL_v1590 = channelBWs_UL_v1590_;
      asymmetricBandwidthCombinationSet = asymmetricBandwidthCombinationSet_;
      sharedSpectrumChAccessParamsPerBand_r16 = sharedSpectrumChAccessParamsPerBand_r16_;
      cancelOverlappingPUSCH_r16 = cancelOverlappingPUSCH_r16_;
      multipleRateMatchingEUTRA_CRS_r16 = multipleRateMatchingEUTRA_CRS_r16_;
      overlapRateMatchingEUTRA_CRS_r16 = overlapRateMatchingEUTRA_CRS_r16_;
      pdsch_MappingTypeB_Alt_r16 = pdsch_MappingTypeB_Alt_r16_;
      oneSlotPeriodicTRS_r16 = oneSlotPeriodicTRS_r16_;
      olpc_SRS_Pos_r16 = olpc_SRS_Pos_r16_;
      spatialRelationsSRS_Pos_r16 = spatialRelationsSRS_Pos_r16_;
      simulSRS_MIMO_TransWithinBand_r16 = simulSRS_MIMO_TransWithinBand_r16_;
      channelBW_DL_IAB_r16 = channelBW_DL_IAB_r16_;
      channelBW_UL_IAB_r16 = channelBW_UL_IAB_r16_;
      rasterShift7dot5_IAB_r16 = rasterShift7dot5_IAB_r16_;
      ue_PowerClass_v1610 = ue_PowerClass_v1610_;
      condHandover_r16 = condHandover_r16_;
      condHandoverFailure_r16 = condHandoverFailure_r16_;
      condHandoverTwoTriggerEvents_r16 = condHandoverTwoTriggerEvents_r16_;
      condPSCellChange_r16 = condPSCellChange_r16_;
      condPSCellChangeTwoTriggerEvents_r16 = condPSCellChangeTwoTriggerEvents_r16_;
      mpr_PowerBoost_FR2_r16 = mpr_PowerBoost_FR2_r16_;
      activeConfiguredGrant_r16 = activeConfiguredGrant_r16_;
      jointReleaseConfiguredGrantType2_r16 = jointReleaseConfiguredGrantType2_r16_;
      sps_r16 = sps_r16_;
      jointReleaseSPS_r16 = jointReleaseSPS_r16_;
      simulSRS_TransWithinBand_r16 = simulSRS_TransWithinBand_r16_;
      trs_AdditionalBandwidth_r16 = trs_AdditionalBandwidth_r16_;
      handoverIntraF_IAB_r16 = handoverIntraF_IAB_r16_;
      simulTX_SRS_AntSwitchingIntraBandUL_CA_r16 = simulTX_SRS_AntSwitchingIntraBandUL_CA_r16_;
      sharedSpectrumChAccessParamsPerBand_v1630 = sharedSpectrumChAccessParamsPerBand_v1630_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public BandNR (
      long bandNR_
   ) {
      super();
      bandNR = new FreqBandIndicatorNR (bandNR_);
   }

   public void init () {
      bandNR = null;
      modifiedMPR_Behaviour = null;
      mimo_ParametersPerBand = null;
      extendedCP = null;
      multipleTCI = null;
      bwp_WithoutRestriction = null;
      bwp_SameNumerology = null;
      bwp_DiffNumerology = null;
      crossCarrierScheduling_SameSCS = null;
      pdsch_256QAM_FR2 = null;
      pusch_256QAM = null;
      ue_PowerClass = null;
      rateMatchingLTE_CRS = null;
      channelBWs_DL = null;
      channelBWs_UL = null;
      maxUplinkDutyCycle_PC2_FR1 = null;
      pucch_SpatialRelInfoMAC_CE = null;
      powerBoosting_pi2BPSK = null;
      maxUplinkDutyCycle_FR2 = null;
      channelBWs_DL_v1590 = null;
      channelBWs_UL_v1590 = null;
      asymmetricBandwidthCombinationSet = null;
      sharedSpectrumChAccessParamsPerBand_r16 = null;
      cancelOverlappingPUSCH_r16 = null;
      multipleRateMatchingEUTRA_CRS_r16 = null;
      overlapRateMatchingEUTRA_CRS_r16 = null;
      pdsch_MappingTypeB_Alt_r16 = null;
      oneSlotPeriodicTRS_r16 = null;
      olpc_SRS_Pos_r16 = null;
      spatialRelationsSRS_Pos_r16 = null;
      simulSRS_MIMO_TransWithinBand_r16 = null;
      channelBW_DL_IAB_r16 = null;
      channelBW_UL_IAB_r16 = null;
      rasterShift7dot5_IAB_r16 = null;
      ue_PowerClass_v1610 = null;
      condHandover_r16 = null;
      condHandoverFailure_r16 = null;
      condHandoverTwoTriggerEvents_r16 = null;
      condPSCellChange_r16 = null;
      condPSCellChangeTwoTriggerEvents_r16 = null;
      mpr_PowerBoost_FR2_r16 = null;
      activeConfiguredGrant_r16 = null;
      jointReleaseConfiguredGrantType2_r16 = null;
      sps_r16 = null;
      jointReleaseSPS_r16 = null;
      simulSRS_TransWithinBand_r16 = null;
      trs_AdditionalBandwidth_r16 = null;
      handoverIntraF_IAB_r16 = null;
      simulTX_SRS_AntSwitchingIntraBandUL_CA_r16 = null;
      sharedSpectrumChAccessParamsPerBand_v1630 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 51; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return bandNR;
         case 1: return modifiedMPR_Behaviour;
         case 2: return mimo_ParametersPerBand;
         case 3: return extendedCP;
         case 4: return multipleTCI;
         case 5: return bwp_WithoutRestriction;
         case 6: return bwp_SameNumerology;
         case 7: return bwp_DiffNumerology;
         case 8: return crossCarrierScheduling_SameSCS;
         case 9: return pdsch_256QAM_FR2;
         case 10: return pusch_256QAM;
         case 11: return ue_PowerClass;
         case 12: return rateMatchingLTE_CRS;
         case 13: return channelBWs_DL;
         case 14: return channelBWs_UL;
         case 15: return maxUplinkDutyCycle_PC2_FR1;
         case 16: return pucch_SpatialRelInfoMAC_CE;
         case 17: return powerBoosting_pi2BPSK;
         case 18: return maxUplinkDutyCycle_FR2;
         case 19: return channelBWs_DL_v1590;
         case 20: return channelBWs_UL_v1590;
         case 21: return asymmetricBandwidthCombinationSet;
         case 22: return sharedSpectrumChAccessParamsPerBand_r16;
         case 23: return cancelOverlappingPUSCH_r16;
         case 24: return multipleRateMatchingEUTRA_CRS_r16;
         case 25: return overlapRateMatchingEUTRA_CRS_r16;
         case 26: return pdsch_MappingTypeB_Alt_r16;
         case 27: return oneSlotPeriodicTRS_r16;
         case 28: return olpc_SRS_Pos_r16;
         case 29: return spatialRelationsSRS_Pos_r16;
         case 30: return simulSRS_MIMO_TransWithinBand_r16;
         case 31: return channelBW_DL_IAB_r16;
         case 32: return channelBW_UL_IAB_r16;
         case 33: return rasterShift7dot5_IAB_r16;
         case 34: return ue_PowerClass_v1610;
         case 35: return condHandover_r16;
         case 36: return condHandoverFailure_r16;
         case 37: return condHandoverTwoTriggerEvents_r16;
         case 38: return condPSCellChange_r16;
         case 39: return condPSCellChangeTwoTriggerEvents_r16;
         case 40: return mpr_PowerBoost_FR2_r16;
         case 41: return activeConfiguredGrant_r16;
         case 42: return jointReleaseConfiguredGrantType2_r16;
         case 43: return sps_r16;
         case 44: return jointReleaseSPS_r16;
         case 45: return simulSRS_TransWithinBand_r16;
         case 46: return trs_AdditionalBandwidth_r16;
         case 47: return handoverIntraF_IAB_r16;
         case 48: return simulTX_SRS_AntSwitchingIntraBandUL_CA_r16;
         case 49: return sharedSpectrumChAccessParamsPerBand_v1630;
         case 50: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "bandNR";
         case 1: return "modifiedMPR-Behaviour";
         case 2: return "mimo-ParametersPerBand";
         case 3: return "extendedCP";
         case 4: return "multipleTCI";
         case 5: return "bwp-WithoutRestriction";
         case 6: return "bwp-SameNumerology";
         case 7: return "bwp-DiffNumerology";
         case 8: return "crossCarrierScheduling-SameSCS";
         case 9: return "pdsch-256QAM-FR2";
         case 10: return "pusch-256QAM";
         case 11: return "ue-PowerClass";
         case 12: return "rateMatchingLTE-CRS";
         case 13: return "channelBWs-DL";
         case 14: return "channelBWs-UL";
         case 15: return "maxUplinkDutyCycle-PC2-FR1";
         case 16: return "pucch-SpatialRelInfoMAC-CE";
         case 17: return "powerBoosting-pi2BPSK";
         case 18: return "maxUplinkDutyCycle-FR2";
         case 19: return "channelBWs-DL-v1590";
         case 20: return "channelBWs-UL-v1590";
         case 21: return "asymmetricBandwidthCombinationSet";
         case 22: return "sharedSpectrumChAccessParamsPerBand-r16";
         case 23: return "cancelOverlappingPUSCH-r16";
         case 24: return "multipleRateMatchingEUTRA-CRS-r16";
         case 25: return "overlapRateMatchingEUTRA-CRS-r16";
         case 26: return "pdsch-MappingTypeB-Alt-r16";
         case 27: return "oneSlotPeriodicTRS-r16";
         case 28: return "olpc-SRS-Pos-r16";
         case 29: return "spatialRelationsSRS-Pos-r16";
         case 30: return "simulSRS-MIMO-TransWithinBand-r16";
         case 31: return "channelBW-DL-IAB-r16";
         case 32: return "channelBW-UL-IAB-r16";
         case 33: return "rasterShift7dot5-IAB-r16";
         case 34: return "ue-PowerClass-v1610";
         case 35: return "condHandover-r16";
         case 36: return "condHandoverFailure-r16";
         case 37: return "condHandoverTwoTriggerEvents-r16";
         case 38: return "condPSCellChange-r16";
         case 39: return "condPSCellChangeTwoTriggerEvents-r16";
         case 40: return "mpr-PowerBoost-FR2-r16";
         case 41: return "activeConfiguredGrant-r16";
         case 42: return "jointReleaseConfiguredGrantType2-r16";
         case 43: return "sps-r16";
         case 44: return "jointReleaseSPS-r16";
         case 45: return "simulSRS-TransWithinBand-r16";
         case 46: return "trs-AdditionalBandwidth-r16";
         case 47: return "handoverIntraF-IAB-r16";
         case 48: return "simulTX-SRS-AntSwitchingIntraBandUL-CA-r16";
         case 49: return "sharedSpectrumChAccessParamsPerBand-v1630";
         case 50: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean modifiedMPR_BehaviourPresent = buffer.decodeBit ("modifiedMPR_BehaviourPresent");
      boolean mimo_ParametersPerBandPresent = buffer.decodeBit ("mimo_ParametersPerBandPresent");
      boolean extendedCPPresent = buffer.decodeBit ("extendedCPPresent");
      boolean multipleTCIPresent = buffer.decodeBit ("multipleTCIPresent");
      boolean bwp_WithoutRestrictionPresent = buffer.decodeBit ("bwp_WithoutRestrictionPresent");
      boolean bwp_SameNumerologyPresent = buffer.decodeBit ("bwp_SameNumerologyPresent");
      boolean bwp_DiffNumerologyPresent = buffer.decodeBit ("bwp_DiffNumerologyPresent");
      boolean crossCarrierScheduling_SameSCSPresent = buffer.decodeBit ("crossCarrierScheduling_SameSCSPresent");
      boolean pdsch_256QAM_FR2Present = buffer.decodeBit ("pdsch_256QAM_FR2Present");
      boolean pusch_256QAMPresent = buffer.decodeBit ("pusch_256QAMPresent");
      boolean ue_PowerClassPresent = buffer.decodeBit ("ue_PowerClassPresent");
      boolean rateMatchingLTE_CRSPresent = buffer.decodeBit ("rateMatchingLTE_CRSPresent");
      boolean channelBWs_DLPresent = buffer.decodeBit ("channelBWs_DLPresent");
      boolean channelBWs_ULPresent = buffer.decodeBit ("channelBWs_ULPresent");

      // decode bandNR

      buffer.getContext().eventDispatcher.startElement("bandNR", -1);

      bandNR = new FreqBandIndicatorNR();
      bandNR.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("bandNR", -1);

      // decode modifiedMPR_Behaviour

      if (modifiedMPR_BehaviourPresent) {
         buffer.getContext().eventDispatcher.startElement("modifiedMPR_Behaviour", -1);

         modifiedMPR_Behaviour = new Asn1BitString();
         modifiedMPR_Behaviour.decode (buffer, 8, 8);

         buffer.invokeCharacters(modifiedMPR_Behaviour.toString());
         buffer.getContext().eventDispatcher.endElement("modifiedMPR_Behaviour", -1);
      }
      else {
         modifiedMPR_Behaviour = null;
      }

      // decode mimo_ParametersPerBand

      if (mimo_ParametersPerBandPresent) {
         buffer.getContext().eventDispatcher.startElement("mimo_ParametersPerBand", -1);

         mimo_ParametersPerBand = new MIMO_ParametersPerBand();
         mimo_ParametersPerBand.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("mimo_ParametersPerBand", -1);
      }
      else {
         mimo_ParametersPerBand = null;
      }

      // decode extendedCP

      if (extendedCPPresent) {
         buffer.getContext().eventDispatcher.startElement("extendedCP", -1);

         int tval = BandNR_extendedCP.decodeEnumValue (buffer);
         extendedCP = BandNR_extendedCP.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("extendedCP", -1);
      }
      else {
         extendedCP = null;
      }

      // decode multipleTCI

      if (multipleTCIPresent) {
         buffer.getContext().eventDispatcher.startElement("multipleTCI", -1);

         int tval = BandNR_multipleTCI.decodeEnumValue (buffer);
         multipleTCI = BandNR_multipleTCI.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("multipleTCI", -1);
      }
      else {
         multipleTCI = null;
      }

      // decode bwp_WithoutRestriction

      if (bwp_WithoutRestrictionPresent) {
         buffer.getContext().eventDispatcher.startElement("bwp_WithoutRestriction", -1);

         int tval = BandNR_bwp_WithoutRestriction.decodeEnumValue (buffer);
         bwp_WithoutRestriction = BandNR_bwp_WithoutRestriction.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("bwp_WithoutRestriction", -1);
      }
      else {
         bwp_WithoutRestriction = null;
      }

      // decode bwp_SameNumerology

      if (bwp_SameNumerologyPresent) {
         buffer.getContext().eventDispatcher.startElement("bwp_SameNumerology", -1);

         int tval = BandNR_bwp_SameNumerology.decodeEnumValue (buffer);
         bwp_SameNumerology = BandNR_bwp_SameNumerology.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("bwp_SameNumerology", -1);
      }
      else {
         bwp_SameNumerology = null;
      }

      // decode bwp_DiffNumerology

      if (bwp_DiffNumerologyPresent) {
         buffer.getContext().eventDispatcher.startElement("bwp_DiffNumerology", -1);

         int tval = BandNR_bwp_DiffNumerology.decodeEnumValue (buffer);
         bwp_DiffNumerology = BandNR_bwp_DiffNumerology.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("bwp_DiffNumerology", -1);
      }
      else {
         bwp_DiffNumerology = null;
      }

      // decode crossCarrierScheduling_SameSCS

      if (crossCarrierScheduling_SameSCSPresent) {
         buffer.getContext().eventDispatcher.startElement("crossCarrierScheduling_SameSCS", -1);

         int tval = BandNR_crossCarrierScheduling_SameSCS.decodeEnumValue (buffer);
         crossCarrierScheduling_SameSCS = BandNR_crossCarrierScheduling_SameSCS.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("crossCarrierScheduling_SameSCS", -1);
      }
      else {
         crossCarrierScheduling_SameSCS = null;
      }

      // decode pdsch_256QAM_FR2

      if (pdsch_256QAM_FR2Present) {
         buffer.getContext().eventDispatcher.startElement("pdsch_256QAM_FR2", -1);

         int tval = BandNR_pdsch_256QAM_FR2.decodeEnumValue (buffer);
         pdsch_256QAM_FR2 = BandNR_pdsch_256QAM_FR2.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("pdsch_256QAM_FR2", -1);
      }
      else {
         pdsch_256QAM_FR2 = null;
      }

      // decode pusch_256QAM

      if (pusch_256QAMPresent) {
         buffer.getContext().eventDispatcher.startElement("pusch_256QAM", -1);

         int tval = BandNR_pusch_256QAM.decodeEnumValue (buffer);
         pusch_256QAM = BandNR_pusch_256QAM.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("pusch_256QAM", -1);
      }
      else {
         pusch_256QAM = null;
      }

      // decode ue_PowerClass

      if (ue_PowerClassPresent) {
         buffer.getContext().eventDispatcher.startElement("ue_PowerClass", -1);

         int tval = BandNR_ue_PowerClass.decodeEnumValue (buffer);
         ue_PowerClass = BandNR_ue_PowerClass.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("ue_PowerClass", -1);
      }
      else {
         ue_PowerClass = null;
      }

      // decode rateMatchingLTE_CRS

      if (rateMatchingLTE_CRSPresent) {
         buffer.getContext().eventDispatcher.startElement("rateMatchingLTE_CRS", -1);

         int tval = BandNR_rateMatchingLTE_CRS.decodeEnumValue (buffer);
         rateMatchingLTE_CRS = BandNR_rateMatchingLTE_CRS.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("rateMatchingLTE_CRS", -1);
      }
      else {
         rateMatchingLTE_CRS = null;
      }

      // decode channelBWs_DL

      if (channelBWs_DLPresent) {
         buffer.getContext().eventDispatcher.startElement("channelBWs_DL", -1);

         channelBWs_DL = new BandNR_channelBWs_DL();
         channelBWs_DL.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("channelBWs_DL", -1);
      }
      else {
         channelBWs_DL = null;
      }

      // decode channelBWs_UL

      if (channelBWs_ULPresent) {
         buffer.getContext().eventDispatcher.startElement("channelBWs_UL", -1);

         channelBWs_UL = new BandNR_channelBWs_UL();
         channelBWs_UL.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("channelBWs_UL", -1);
      }
      else {
         channelBWs_UL = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV4ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV5ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV6ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV7ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV8ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean maxUplinkDutyCycle_PC2_FR1Present = buffer.decodeBit ("maxUplinkDutyCycle_PC2_FR1Present");

            // decode maxUplinkDutyCycle_PC2_FR1

            if (maxUplinkDutyCycle_PC2_FR1Present) {
               buffer.getContext().eventDispatcher.startElement("maxUplinkDutyCycle_PC2_FR1", -1);

               int tval = BandNR_maxUplinkDutyCycle_PC2_FR1.decodeEnumValue (buffer);
               maxUplinkDutyCycle_PC2_FR1 = BandNR_maxUplinkDutyCycle_PC2_FR1.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("maxUplinkDutyCycle_PC2_FR1", -1);
            }
            else {
               maxUplinkDutyCycle_PC2_FR1 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean pucch_SpatialRelInfoMAC_CEPresent = buffer.decodeBit ("pucch_SpatialRelInfoMAC_CEPresent");

            boolean powerBoosting_pi2BPSKPresent = buffer.decodeBit ("powerBoosting_pi2BPSKPresent");

            // decode pucch_SpatialRelInfoMAC_CE

            if (pucch_SpatialRelInfoMAC_CEPresent) {
               buffer.getContext().eventDispatcher.startElement("pucch_SpatialRelInfoMAC_CE", -1);

               int tval = BandNR_pucch_SpatialRelInfoMAC_CE.decodeEnumValue (buffer);
               pucch_SpatialRelInfoMAC_CE = BandNR_pucch_SpatialRelInfoMAC_CE.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("pucch_SpatialRelInfoMAC_CE", -1);
            }
            else {
               pucch_SpatialRelInfoMAC_CE = null;
            }

            // decode powerBoosting_pi2BPSK

            if (powerBoosting_pi2BPSKPresent) {
               buffer.getContext().eventDispatcher.startElement("powerBoosting_pi2BPSK", -1);

               int tval = BandNR_powerBoosting_pi2BPSK.decodeEnumValue (buffer);
               powerBoosting_pi2BPSK = BandNR_powerBoosting_pi2BPSK.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("powerBoosting_pi2BPSK", -1);
            }
            else {
               powerBoosting_pi2BPSK = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV4ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean maxUplinkDutyCycle_FR2Present = buffer.decodeBit ("maxUplinkDutyCycle_FR2Present");

            // decode maxUplinkDutyCycle_FR2

            if (maxUplinkDutyCycle_FR2Present) {
               buffer.getContext().eventDispatcher.startElement("maxUplinkDutyCycle_FR2", -1);

               int tval = BandNR_maxUplinkDutyCycle_FR2.decodeEnumValue (buffer);
               maxUplinkDutyCycle_FR2 = BandNR_maxUplinkDutyCycle_FR2.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("maxUplinkDutyCycle_FR2", -1);
            }
            else {
               maxUplinkDutyCycle_FR2 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV5ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean channelBWs_DL_v1590Present = buffer.decodeBit ("channelBWs_DL_v1590Present");

            boolean channelBWs_UL_v1590Present = buffer.decodeBit ("channelBWs_UL_v1590Present");

            // decode channelBWs_DL_v1590

            if (channelBWs_DL_v1590Present) {
               buffer.getContext().eventDispatcher.startElement("channelBWs_DL_v1590", -1);

               channelBWs_DL_v1590 = new BandNR_channelBWs_DL_v1590();
               channelBWs_DL_v1590.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("channelBWs_DL_v1590", -1);
            }
            else {
               channelBWs_DL_v1590 = null;
            }

            // decode channelBWs_UL_v1590

            if (channelBWs_UL_v1590Present) {
               buffer.getContext().eventDispatcher.startElement("channelBWs_UL_v1590", -1);

               channelBWs_UL_v1590 = new BandNR_channelBWs_UL_v1590();
               channelBWs_UL_v1590.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("channelBWs_UL_v1590", -1);
            }
            else {
               channelBWs_UL_v1590 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV6ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean asymmetricBandwidthCombinationSetPresent = buffer.decodeBit ("asymmetricBandwidthCombinationSetPresent");

            // decode asymmetricBandwidthCombinationSet

            if (asymmetricBandwidthCombinationSetPresent) {
               buffer.getContext().eventDispatcher.startElement("asymmetricBandwidthCombinationSet", -1);

               asymmetricBandwidthCombinationSet = new Asn1BitString();
               asymmetricBandwidthCombinationSet.decode (buffer, 1, 32);

               buffer.invokeCharacters(asymmetricBandwidthCombinationSet.toString());
               buffer.getContext().eventDispatcher.endElement("asymmetricBandwidthCombinationSet", -1);
            }
            else {
               asymmetricBandwidthCombinationSet = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV7ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean sharedSpectrumChAccessParamsPerBand_r16Present = buffer.decodeBit ("sharedSpectrumChAccessParamsPerBand_r16Present");

            boolean cancelOverlappingPUSCH_r16Present = buffer.decodeBit ("cancelOverlappingPUSCH_r16Present");

            boolean multipleRateMatchingEUTRA_CRS_r16Present = buffer.decodeBit ("multipleRateMatchingEUTRA_CRS_r16Present");

            boolean overlapRateMatchingEUTRA_CRS_r16Present = buffer.decodeBit ("overlapRateMatchingEUTRA_CRS_r16Present");

            boolean pdsch_MappingTypeB_Alt_r16Present = buffer.decodeBit ("pdsch_MappingTypeB_Alt_r16Present");

            boolean oneSlotPeriodicTRS_r16Present = buffer.decodeBit ("oneSlotPeriodicTRS_r16Present");

            boolean olpc_SRS_Pos_r16Present = buffer.decodeBit ("olpc_SRS_Pos_r16Present");

            boolean spatialRelationsSRS_Pos_r16Present = buffer.decodeBit ("spatialRelationsSRS_Pos_r16Present");

            boolean simulSRS_MIMO_TransWithinBand_r16Present = buffer.decodeBit ("simulSRS_MIMO_TransWithinBand_r16Present");

            boolean channelBW_DL_IAB_r16Present = buffer.decodeBit ("channelBW_DL_IAB_r16Present");

            boolean channelBW_UL_IAB_r16Present = buffer.decodeBit ("channelBW_UL_IAB_r16Present");

            boolean rasterShift7dot5_IAB_r16Present = buffer.decodeBit ("rasterShift7dot5_IAB_r16Present");

            boolean ue_PowerClass_v1610Present = buffer.decodeBit ("ue_PowerClass_v1610Present");

            boolean condHandover_r16Present = buffer.decodeBit ("condHandover_r16Present");

            boolean condHandoverFailure_r16Present = buffer.decodeBit ("condHandoverFailure_r16Present");

            boolean condHandoverTwoTriggerEvents_r16Present = buffer.decodeBit ("condHandoverTwoTriggerEvents_r16Present");

            boolean condPSCellChange_r16Present = buffer.decodeBit ("condPSCellChange_r16Present");

            boolean condPSCellChangeTwoTriggerEvents_r16Present = buffer.decodeBit ("condPSCellChangeTwoTriggerEvents_r16Present");

            boolean mpr_PowerBoost_FR2_r16Present = buffer.decodeBit ("mpr_PowerBoost_FR2_r16Present");

            boolean activeConfiguredGrant_r16Present = buffer.decodeBit ("activeConfiguredGrant_r16Present");

            boolean jointReleaseConfiguredGrantType2_r16Present = buffer.decodeBit ("jointReleaseConfiguredGrantType2_r16Present");

            boolean sps_r16Present = buffer.decodeBit ("sps_r16Present");

            boolean jointReleaseSPS_r16Present = buffer.decodeBit ("jointReleaseSPS_r16Present");

            boolean simulSRS_TransWithinBand_r16Present = buffer.decodeBit ("simulSRS_TransWithinBand_r16Present");

            boolean trs_AdditionalBandwidth_r16Present = buffer.decodeBit ("trs_AdditionalBandwidth_r16Present");

            boolean handoverIntraF_IAB_r16Present = buffer.decodeBit ("handoverIntraF_IAB_r16Present");

            // decode sharedSpectrumChAccessParamsPerBand_r16

            if (sharedSpectrumChAccessParamsPerBand_r16Present) {
               buffer.getContext().eventDispatcher.startElement("sharedSpectrumChAccessParamsPerBand_r16", -1);

               sharedSpectrumChAccessParamsPerBand_r16 = new SharedSpectrumChAccessParamsPerBand_r16();
               sharedSpectrumChAccessParamsPerBand_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("sharedSpectrumChAccessParamsPerBand_r16", -1);
            }
            else {
               sharedSpectrumChAccessParamsPerBand_r16 = null;
            }

            // decode cancelOverlappingPUSCH_r16

            if (cancelOverlappingPUSCH_r16Present) {
               buffer.getContext().eventDispatcher.startElement("cancelOverlappingPUSCH_r16", -1);

               int tval = BandNR_cancelOverlappingPUSCH_r16.decodeEnumValue (buffer);
               cancelOverlappingPUSCH_r16 = BandNR_cancelOverlappingPUSCH_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("cancelOverlappingPUSCH_r16", -1);
            }
            else {
               cancelOverlappingPUSCH_r16 = null;
            }

            // decode multipleRateMatchingEUTRA_CRS_r16

            if (multipleRateMatchingEUTRA_CRS_r16Present) {
               buffer.getContext().eventDispatcher.startElement("multipleRateMatchingEUTRA_CRS_r16", -1);

               multipleRateMatchingEUTRA_CRS_r16 = new BandNR_multipleRateMatchingEUTRA_CRS_r16();
               multipleRateMatchingEUTRA_CRS_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("multipleRateMatchingEUTRA_CRS_r16", -1);
            }
            else {
               multipleRateMatchingEUTRA_CRS_r16 = null;
            }

            // decode overlapRateMatchingEUTRA_CRS_r16

            if (overlapRateMatchingEUTRA_CRS_r16Present) {
               buffer.getContext().eventDispatcher.startElement("overlapRateMatchingEUTRA_CRS_r16", -1);

               int tval = BandNR_overlapRateMatchingEUTRA_CRS_r16.decodeEnumValue (buffer);
               overlapRateMatchingEUTRA_CRS_r16 = BandNR_overlapRateMatchingEUTRA_CRS_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("overlapRateMatchingEUTRA_CRS_r16", -1);
            }
            else {
               overlapRateMatchingEUTRA_CRS_r16 = null;
            }

            // decode pdsch_MappingTypeB_Alt_r16

            if (pdsch_MappingTypeB_Alt_r16Present) {
               buffer.getContext().eventDispatcher.startElement("pdsch_MappingTypeB_Alt_r16", -1);

               int tval = BandNR_pdsch_MappingTypeB_Alt_r16.decodeEnumValue (buffer);
               pdsch_MappingTypeB_Alt_r16 = BandNR_pdsch_MappingTypeB_Alt_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("pdsch_MappingTypeB_Alt_r16", -1);
            }
            else {
               pdsch_MappingTypeB_Alt_r16 = null;
            }

            // decode oneSlotPeriodicTRS_r16

            if (oneSlotPeriodicTRS_r16Present) {
               buffer.getContext().eventDispatcher.startElement("oneSlotPeriodicTRS_r16", -1);

               int tval = BandNR_oneSlotPeriodicTRS_r16.decodeEnumValue (buffer);
               oneSlotPeriodicTRS_r16 = BandNR_oneSlotPeriodicTRS_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("oneSlotPeriodicTRS_r16", -1);
            }
            else {
               oneSlotPeriodicTRS_r16 = null;
            }

            // decode olpc_SRS_Pos_r16

            if (olpc_SRS_Pos_r16Present) {
               buffer.getContext().eventDispatcher.startElement("olpc_SRS_Pos_r16", -1);

               olpc_SRS_Pos_r16 = new OLPC_SRS_Pos_r16();
               olpc_SRS_Pos_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("olpc_SRS_Pos_r16", -1);
            }
            else {
               olpc_SRS_Pos_r16 = null;
            }

            // decode spatialRelationsSRS_Pos_r16

            if (spatialRelationsSRS_Pos_r16Present) {
               buffer.getContext().eventDispatcher.startElement("spatialRelationsSRS_Pos_r16", -1);

               spatialRelationsSRS_Pos_r16 = new SpatialRelationsSRS_Pos_r16();
               spatialRelationsSRS_Pos_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("spatialRelationsSRS_Pos_r16", -1);
            }
            else {
               spatialRelationsSRS_Pos_r16 = null;
            }

            // decode simulSRS_MIMO_TransWithinBand_r16

            if (simulSRS_MIMO_TransWithinBand_r16Present) {
               buffer.getContext().eventDispatcher.startElement("simulSRS_MIMO_TransWithinBand_r16", -1);

               int tval = BandNR_simulSRS_MIMO_TransWithinBand_r16.decodeEnumValue (buffer);
               simulSRS_MIMO_TransWithinBand_r16 = BandNR_simulSRS_MIMO_TransWithinBand_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("simulSRS_MIMO_TransWithinBand_r16", -1);
            }
            else {
               simulSRS_MIMO_TransWithinBand_r16 = null;
            }

            // decode channelBW_DL_IAB_r16

            if (channelBW_DL_IAB_r16Present) {
               buffer.getContext().eventDispatcher.startElement("channelBW_DL_IAB_r16", -1);

               channelBW_DL_IAB_r16 = new BandNR_channelBW_DL_IAB_r16();
               channelBW_DL_IAB_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("channelBW_DL_IAB_r16", -1);
            }
            else {
               channelBW_DL_IAB_r16 = null;
            }

            // decode channelBW_UL_IAB_r16

            if (channelBW_UL_IAB_r16Present) {
               buffer.getContext().eventDispatcher.startElement("channelBW_UL_IAB_r16", -1);

               channelBW_UL_IAB_r16 = new BandNR_channelBW_UL_IAB_r16();
               channelBW_UL_IAB_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("channelBW_UL_IAB_r16", -1);
            }
            else {
               channelBW_UL_IAB_r16 = null;
            }

            // decode rasterShift7dot5_IAB_r16

            if (rasterShift7dot5_IAB_r16Present) {
               buffer.getContext().eventDispatcher.startElement("rasterShift7dot5_IAB_r16", -1);

               int tval = BandNR_rasterShift7dot5_IAB_r16.decodeEnumValue (buffer);
               rasterShift7dot5_IAB_r16 = BandNR_rasterShift7dot5_IAB_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("rasterShift7dot5_IAB_r16", -1);
            }
            else {
               rasterShift7dot5_IAB_r16 = null;
            }

            // decode ue_PowerClass_v1610

            if (ue_PowerClass_v1610Present) {
               buffer.getContext().eventDispatcher.startElement("ue_PowerClass_v1610", -1);

               int tval = BandNR_ue_PowerClass_v1610.decodeEnumValue (buffer);
               ue_PowerClass_v1610 = BandNR_ue_PowerClass_v1610.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("ue_PowerClass_v1610", -1);
            }
            else {
               ue_PowerClass_v1610 = null;
            }

            // decode condHandover_r16

            if (condHandover_r16Present) {
               buffer.getContext().eventDispatcher.startElement("condHandover_r16", -1);

               int tval = BandNR_condHandover_r16.decodeEnumValue (buffer);
               condHandover_r16 = BandNR_condHandover_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("condHandover_r16", -1);
            }
            else {
               condHandover_r16 = null;
            }

            // decode condHandoverFailure_r16

            if (condHandoverFailure_r16Present) {
               buffer.getContext().eventDispatcher.startElement("condHandoverFailure_r16", -1);

               int tval = BandNR_condHandoverFailure_r16.decodeEnumValue (buffer);
               condHandoverFailure_r16 = BandNR_condHandoverFailure_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("condHandoverFailure_r16", -1);
            }
            else {
               condHandoverFailure_r16 = null;
            }

            // decode condHandoverTwoTriggerEvents_r16

            if (condHandoverTwoTriggerEvents_r16Present) {
               buffer.getContext().eventDispatcher.startElement("condHandoverTwoTriggerEvents_r16", -1);

               int tval = BandNR_condHandoverTwoTriggerEvents_r16.decodeEnumValue (buffer);
               condHandoverTwoTriggerEvents_r16 = BandNR_condHandoverTwoTriggerEvents_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("condHandoverTwoTriggerEvents_r16", -1);
            }
            else {
               condHandoverTwoTriggerEvents_r16 = null;
            }

            // decode condPSCellChange_r16

            if (condPSCellChange_r16Present) {
               buffer.getContext().eventDispatcher.startElement("condPSCellChange_r16", -1);

               int tval = BandNR_condPSCellChange_r16.decodeEnumValue (buffer);
               condPSCellChange_r16 = BandNR_condPSCellChange_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("condPSCellChange_r16", -1);
            }
            else {
               condPSCellChange_r16 = null;
            }

            // decode condPSCellChangeTwoTriggerEvents_r16

            if (condPSCellChangeTwoTriggerEvents_r16Present) {
               buffer.getContext().eventDispatcher.startElement("condPSCellChangeTwoTriggerEvents_r16", -1);

               int tval = BandNR_condPSCellChangeTwoTriggerEvents_r16.decodeEnumValue (buffer);
               condPSCellChangeTwoTriggerEvents_r16 = BandNR_condPSCellChangeTwoTriggerEvents_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("condPSCellChangeTwoTriggerEvents_r16", -1);
            }
            else {
               condPSCellChangeTwoTriggerEvents_r16 = null;
            }

            // decode mpr_PowerBoost_FR2_r16

            if (mpr_PowerBoost_FR2_r16Present) {
               buffer.getContext().eventDispatcher.startElement("mpr_PowerBoost_FR2_r16", -1);

               int tval = BandNR_mpr_PowerBoost_FR2_r16.decodeEnumValue (buffer);
               mpr_PowerBoost_FR2_r16 = BandNR_mpr_PowerBoost_FR2_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("mpr_PowerBoost_FR2_r16", -1);
            }
            else {
               mpr_PowerBoost_FR2_r16 = null;
            }

            // decode activeConfiguredGrant_r16

            if (activeConfiguredGrant_r16Present) {
               buffer.getContext().eventDispatcher.startElement("activeConfiguredGrant_r16", -1);

               activeConfiguredGrant_r16 = new BandNR_activeConfiguredGrant_r16();
               activeConfiguredGrant_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("activeConfiguredGrant_r16", -1);
            }
            else {
               activeConfiguredGrant_r16 = null;
            }

            // decode jointReleaseConfiguredGrantType2_r16

            if (jointReleaseConfiguredGrantType2_r16Present) {
               buffer.getContext().eventDispatcher.startElement("jointReleaseConfiguredGrantType2_r16", -1);

               int tval = BandNR_jointReleaseConfiguredGrantType2_r16.decodeEnumValue (buffer);
               jointReleaseConfiguredGrantType2_r16 = BandNR_jointReleaseConfiguredGrantType2_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("jointReleaseConfiguredGrantType2_r16", -1);
            }
            else {
               jointReleaseConfiguredGrantType2_r16 = null;
            }

            // decode sps_r16

            if (sps_r16Present) {
               buffer.getContext().eventDispatcher.startElement("sps_r16", -1);

               sps_r16 = new BandNR_sps_r16();
               sps_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("sps_r16", -1);
            }
            else {
               sps_r16 = null;
            }

            // decode jointReleaseSPS_r16

            if (jointReleaseSPS_r16Present) {
               buffer.getContext().eventDispatcher.startElement("jointReleaseSPS_r16", -1);

               int tval = BandNR_jointReleaseSPS_r16.decodeEnumValue (buffer);
               jointReleaseSPS_r16 = BandNR_jointReleaseSPS_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("jointReleaseSPS_r16", -1);
            }
            else {
               jointReleaseSPS_r16 = null;
            }

            // decode simulSRS_TransWithinBand_r16

            if (simulSRS_TransWithinBand_r16Present) {
               buffer.getContext().eventDispatcher.startElement("simulSRS_TransWithinBand_r16", -1);

               int tval = BandNR_simulSRS_TransWithinBand_r16.decodeEnumValue (buffer);
               simulSRS_TransWithinBand_r16 = BandNR_simulSRS_TransWithinBand_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("simulSRS_TransWithinBand_r16", -1);
            }
            else {
               simulSRS_TransWithinBand_r16 = null;
            }

            // decode trs_AdditionalBandwidth_r16

            if (trs_AdditionalBandwidth_r16Present) {
               buffer.getContext().eventDispatcher.startElement("trs_AdditionalBandwidth_r16", -1);

               int tval = BandNR_trs_AdditionalBandwidth_r16.decodeEnumValue (buffer);
               trs_AdditionalBandwidth_r16 = BandNR_trs_AdditionalBandwidth_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("trs_AdditionalBandwidth_r16", -1);
            }
            else {
               trs_AdditionalBandwidth_r16 = null;
            }

            // decode handoverIntraF_IAB_r16

            if (handoverIntraF_IAB_r16Present) {
               buffer.getContext().eventDispatcher.startElement("handoverIntraF_IAB_r16", -1);

               int tval = BandNR_handoverIntraF_IAB_r16.decodeEnumValue (buffer);
               handoverIntraF_IAB_r16 = BandNR_handoverIntraF_IAB_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("handoverIntraF_IAB_r16", -1);
            }
            else {
               handoverIntraF_IAB_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV8ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean simulTX_SRS_AntSwitchingIntraBandUL_CA_r16Present = buffer.decodeBit ("simulTX_SRS_AntSwitchingIntraBandUL_CA_r16Present");

            boolean sharedSpectrumChAccessParamsPerBand_v1630Present = buffer.decodeBit ("sharedSpectrumChAccessParamsPerBand_v1630Present");

            // decode simulTX_SRS_AntSwitchingIntraBandUL_CA_r16

            if (simulTX_SRS_AntSwitchingIntraBandUL_CA_r16Present) {
               buffer.getContext().eventDispatcher.startElement("simulTX_SRS_AntSwitchingIntraBandUL_CA_r16", -1);

               simulTX_SRS_AntSwitchingIntraBandUL_CA_r16 = new SimulSRS_ForAntennaSwitching_r16();
               simulTX_SRS_AntSwitchingIntraBandUL_CA_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("simulTX_SRS_AntSwitchingIntraBandUL_CA_r16", -1);
            }
            else {
               simulTX_SRS_AntSwitchingIntraBandUL_CA_r16 = null;
            }

            // decode sharedSpectrumChAccessParamsPerBand_v1630

            if (sharedSpectrumChAccessParamsPerBand_v1630Present) {
               buffer.getContext().eventDispatcher.startElement("sharedSpectrumChAccessParamsPerBand_v1630", -1);

               sharedSpectrumChAccessParamsPerBand_v1630 = new SharedSpectrumChAccessParamsPerBand_v1630();
               sharedSpectrumChAccessParamsPerBand_v1630.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("sharedSpectrumChAccessParamsPerBand_v1630", -1);
            }
            else {
               sharedSpectrumChAccessParamsPerBand_v1630 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (bandNR != null) bandNR.print (_sb, "bandNR", _level+1);
      if (modifiedMPR_Behaviour != null) modifiedMPR_Behaviour.print (_sb, "modifiedMPR_Behaviour", _level+1);
      if (mimo_ParametersPerBand != null) mimo_ParametersPerBand.print (_sb, "mimo_ParametersPerBand", _level+1);
      if (extendedCP != null) extendedCP.print (_sb, "extendedCP", _level+1);
      if (multipleTCI != null) multipleTCI.print (_sb, "multipleTCI", _level+1);
      if (bwp_WithoutRestriction != null) bwp_WithoutRestriction.print (_sb, "bwp_WithoutRestriction", _level+1);
      if (bwp_SameNumerology != null) bwp_SameNumerology.print (_sb, "bwp_SameNumerology", _level+1);
      if (bwp_DiffNumerology != null) bwp_DiffNumerology.print (_sb, "bwp_DiffNumerology", _level+1);
      if (crossCarrierScheduling_SameSCS != null) crossCarrierScheduling_SameSCS.print (_sb, "crossCarrierScheduling_SameSCS", _level+1);
      if (pdsch_256QAM_FR2 != null) pdsch_256QAM_FR2.print (_sb, "pdsch_256QAM_FR2", _level+1);
      if (pusch_256QAM != null) pusch_256QAM.print (_sb, "pusch_256QAM", _level+1);
      if (ue_PowerClass != null) ue_PowerClass.print (_sb, "ue_PowerClass", _level+1);
      if (rateMatchingLTE_CRS != null) rateMatchingLTE_CRS.print (_sb, "rateMatchingLTE_CRS", _level+1);
      if (channelBWs_DL != null) channelBWs_DL.print (_sb, "channelBWs_DL", _level+1);
      if (channelBWs_UL != null) channelBWs_UL.print (_sb, "channelBWs_UL", _level+1);
      if (maxUplinkDutyCycle_PC2_FR1 != null) maxUplinkDutyCycle_PC2_FR1.print (_sb, "maxUplinkDutyCycle_PC2_FR1", _level+1);
      if (pucch_SpatialRelInfoMAC_CE != null) pucch_SpatialRelInfoMAC_CE.print (_sb, "pucch_SpatialRelInfoMAC_CE", _level+1);
      if (powerBoosting_pi2BPSK != null) powerBoosting_pi2BPSK.print (_sb, "powerBoosting_pi2BPSK", _level+1);
      if (maxUplinkDutyCycle_FR2 != null) maxUplinkDutyCycle_FR2.print (_sb, "maxUplinkDutyCycle_FR2", _level+1);
      if (channelBWs_DL_v1590 != null) channelBWs_DL_v1590.print (_sb, "channelBWs_DL_v1590", _level+1);
      if (channelBWs_UL_v1590 != null) channelBWs_UL_v1590.print (_sb, "channelBWs_UL_v1590", _level+1);
      if (asymmetricBandwidthCombinationSet != null) asymmetricBandwidthCombinationSet.print (_sb, "asymmetricBandwidthCombinationSet", _level+1);
      if (sharedSpectrumChAccessParamsPerBand_r16 != null) sharedSpectrumChAccessParamsPerBand_r16.print (_sb, "sharedSpectrumChAccessParamsPerBand_r16", _level+1);
      if (cancelOverlappingPUSCH_r16 != null) cancelOverlappingPUSCH_r16.print (_sb, "cancelOverlappingPUSCH_r16", _level+1);
      if (multipleRateMatchingEUTRA_CRS_r16 != null) multipleRateMatchingEUTRA_CRS_r16.print (_sb, "multipleRateMatchingEUTRA_CRS_r16", _level+1);
      if (overlapRateMatchingEUTRA_CRS_r16 != null) overlapRateMatchingEUTRA_CRS_r16.print (_sb, "overlapRateMatchingEUTRA_CRS_r16", _level+1);
      if (pdsch_MappingTypeB_Alt_r16 != null) pdsch_MappingTypeB_Alt_r16.print (_sb, "pdsch_MappingTypeB_Alt_r16", _level+1);
      if (oneSlotPeriodicTRS_r16 != null) oneSlotPeriodicTRS_r16.print (_sb, "oneSlotPeriodicTRS_r16", _level+1);
      if (olpc_SRS_Pos_r16 != null) olpc_SRS_Pos_r16.print (_sb, "olpc_SRS_Pos_r16", _level+1);
      if (spatialRelationsSRS_Pos_r16 != null) spatialRelationsSRS_Pos_r16.print (_sb, "spatialRelationsSRS_Pos_r16", _level+1);
      if (simulSRS_MIMO_TransWithinBand_r16 != null) simulSRS_MIMO_TransWithinBand_r16.print (_sb, "simulSRS_MIMO_TransWithinBand_r16", _level+1);
      if (channelBW_DL_IAB_r16 != null) channelBW_DL_IAB_r16.print (_sb, "channelBW_DL_IAB_r16", _level+1);
      if (channelBW_UL_IAB_r16 != null) channelBW_UL_IAB_r16.print (_sb, "channelBW_UL_IAB_r16", _level+1);
      if (rasterShift7dot5_IAB_r16 != null) rasterShift7dot5_IAB_r16.print (_sb, "rasterShift7dot5_IAB_r16", _level+1);
      if (ue_PowerClass_v1610 != null) ue_PowerClass_v1610.print (_sb, "ue_PowerClass_v1610", _level+1);
      if (condHandover_r16 != null) condHandover_r16.print (_sb, "condHandover_r16", _level+1);
      if (condHandoverFailure_r16 != null) condHandoverFailure_r16.print (_sb, "condHandoverFailure_r16", _level+1);
      if (condHandoverTwoTriggerEvents_r16 != null) condHandoverTwoTriggerEvents_r16.print (_sb, "condHandoverTwoTriggerEvents_r16", _level+1);
      if (condPSCellChange_r16 != null) condPSCellChange_r16.print (_sb, "condPSCellChange_r16", _level+1);
      if (condPSCellChangeTwoTriggerEvents_r16 != null) condPSCellChangeTwoTriggerEvents_r16.print (_sb, "condPSCellChangeTwoTriggerEvents_r16", _level+1);
      if (mpr_PowerBoost_FR2_r16 != null) mpr_PowerBoost_FR2_r16.print (_sb, "mpr_PowerBoost_FR2_r16", _level+1);
      if (activeConfiguredGrant_r16 != null) activeConfiguredGrant_r16.print (_sb, "activeConfiguredGrant_r16", _level+1);
      if (jointReleaseConfiguredGrantType2_r16 != null) jointReleaseConfiguredGrantType2_r16.print (_sb, "jointReleaseConfiguredGrantType2_r16", _level+1);
      if (sps_r16 != null) sps_r16.print (_sb, "sps_r16", _level+1);
      if (jointReleaseSPS_r16 != null) jointReleaseSPS_r16.print (_sb, "jointReleaseSPS_r16", _level+1);
      if (simulSRS_TransWithinBand_r16 != null) simulSRS_TransWithinBand_r16.print (_sb, "simulSRS_TransWithinBand_r16", _level+1);
      if (trs_AdditionalBandwidth_r16 != null) trs_AdditionalBandwidth_r16.print (_sb, "trs_AdditionalBandwidth_r16", _level+1);
      if (handoverIntraF_IAB_r16 != null) handoverIntraF_IAB_r16.print (_sb, "handoverIntraF_IAB_r16", _level+1);
      if (simulTX_SRS_AntSwitchingIntraBandUL_CA_r16 != null) simulTX_SRS_AntSwitchingIntraBandUL_CA_r16.print (_sb, "simulTX_SRS_AntSwitchingIntraBandUL_CA_r16", _level+1);
      if (sharedSpectrumChAccessParamsPerBand_v1630 != null) sharedSpectrumChAccessParamsPerBand_v1630.print (_sb, "sharedSpectrumChAccessParamsPerBand_v1630", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
