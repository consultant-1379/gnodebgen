/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SchedulingRequestConfig_setup extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public Asn1Integer sr_PUCCH_ResourceIndex;
   public Asn1Integer sr_ConfigIndex;
   public SchedulingRequestConfig_setup_dsr_TransMax dsr_TransMax = null;

   public SchedulingRequestConfig_setup () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SchedulingRequestConfig_setup (
      Asn1Integer sr_PUCCH_ResourceIndex_,
      Asn1Integer sr_ConfigIndex_,
      SchedulingRequestConfig_setup_dsr_TransMax dsr_TransMax_
   ) {
      super();
      sr_PUCCH_ResourceIndex = sr_PUCCH_ResourceIndex_;
      sr_ConfigIndex = sr_ConfigIndex_;
      dsr_TransMax = dsr_TransMax_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SchedulingRequestConfig_setup (long sr_PUCCH_ResourceIndex_,
      long sr_ConfigIndex_,
      SchedulingRequestConfig_setup_dsr_TransMax dsr_TransMax_
   ) {
      super();
      sr_PUCCH_ResourceIndex = new Asn1Integer (sr_PUCCH_ResourceIndex_);
      sr_ConfigIndex = new Asn1Integer (sr_ConfigIndex_);
      dsr_TransMax = dsr_TransMax_;
   }

   public void init () {
      sr_PUCCH_ResourceIndex = null;
      sr_ConfigIndex = null;
      dsr_TransMax = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return sr_PUCCH_ResourceIndex;
         case 1: return sr_ConfigIndex;
         case 2: return dsr_TransMax;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "sr-PUCCH-ResourceIndex";
         case 1: return "sr-ConfigIndex";
         case 2: return "dsr-TransMax";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode sr_PUCCH_ResourceIndex

      buffer.getContext().eventDispatcher.startElement("sr_PUCCH_ResourceIndex", -1);

      sr_PUCCH_ResourceIndex = new Asn1Integer();
      sr_PUCCH_ResourceIndex.decode (buffer, 0, 2047);

      buffer.invokeCharacters(sr_PUCCH_ResourceIndex.toString());
      buffer.getContext().eventDispatcher.endElement("sr_PUCCH_ResourceIndex", -1);

      // decode sr_ConfigIndex

      buffer.getContext().eventDispatcher.startElement("sr_ConfigIndex", -1);

      sr_ConfigIndex = new Asn1Integer();
      sr_ConfigIndex.decode (buffer, 0, 157);

      buffer.invokeCharacters(sr_ConfigIndex.toString());
      buffer.getContext().eventDispatcher.endElement("sr_ConfigIndex", -1);

      // decode dsr_TransMax

      buffer.getContext().eventDispatcher.startElement("dsr_TransMax", -1);

      {
         int tval = SchedulingRequestConfig_setup_dsr_TransMax.decodeEnumValue (buffer);
         dsr_TransMax = SchedulingRequestConfig_setup_dsr_TransMax.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("dsr_TransMax", -1);

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (sr_PUCCH_ResourceIndex != null) sr_PUCCH_ResourceIndex.print (_sb, "sr_PUCCH_ResourceIndex", _level+1);
      if (sr_ConfigIndex != null) sr_ConfigIndex.print (_sb, "sr_ConfigIndex", _level+1);
      if (dsr_TransMax != null) dsr_TransMax.print (_sb, "dsr_TransMax", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
