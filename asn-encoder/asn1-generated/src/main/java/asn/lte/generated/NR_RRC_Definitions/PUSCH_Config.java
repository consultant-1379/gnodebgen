/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class PUSCH_Config extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "PUSCH-Config";
   }

   public Asn1Integer dataScramblingIdentityPUSCH;  // optional
   public PUSCH_Config_txConfig txConfig = null;  // optional
   public PUSCH_Config_dmrs_UplinkForPUSCH_MappingTypeA dmrs_UplinkForPUSCH_MappingTypeA;  // optional
   public PUSCH_Config_dmrs_UplinkForPUSCH_MappingTypeB dmrs_UplinkForPUSCH_MappingTypeB;  // optional
   public PUSCH_PowerControl pusch_PowerControl;  // optional
   public PUSCH_Config_frequencyHopping frequencyHopping = null;  // optional
   public PUSCH_Config_frequencyHoppingOffsetLists frequencyHoppingOffsetLists;  // optional
   public PUSCH_Config_resourceAllocation resourceAllocation = null;
   public PUSCH_Config_pusch_TimeDomainAllocationList pusch_TimeDomainAllocationList;  // optional
   public PUSCH_Config_pusch_AggregationFactor pusch_AggregationFactor = null;  // optional
   public PUSCH_Config_mcs_Table mcs_Table = null;  // optional
   public PUSCH_Config_mcs_TableTransformPrecoder mcs_TableTransformPrecoder = null;  // optional
   public PUSCH_Config_transformPrecoder transformPrecoder = null;  // optional
   public PUSCH_Config_codebookSubset codebookSubset = null;  // optional
   public Asn1Integer maxRank;  // optional
   public PUSCH_Config_rbg_Size rbg_Size = null;  // optional
   public PUSCH_Config_uci_OnPUSCH uci_OnPUSCH;  // optional
   public PUSCH_Config_tp_pi2BPSK tp_pi2BPSK = null;  // optional
   public boolean mV2ExtPresent;
   public PUSCH_Config_minimumSchedulingOffsetK2_r16 minimumSchedulingOffsetK2_r16;  // optional
   public PUSCH_Config_ul_AccessConfigListDCI_0_1_r16 ul_AccessConfigListDCI_0_1_r16;  // optional
   public Asn1Integer harq_ProcessNumberSizeDCI_0_2_r16;  // optional
   public PUSCH_Config_dmrs_SequenceInitializationDCI_0_2_r16 dmrs_SequenceInitializationDCI_0_2_r16 = null;  // optional
   public Asn1Integer numberOfBitsForRV_DCI_0_2_r16;  // optional
   public PUSCH_Config_antennaPortsFieldPresenceDCI_0_2_r16 antennaPortsFieldPresenceDCI_0_2_r16 = null;  // optional
   public PUSCH_Config_dmrs_UplinkForPUSCH_MappingTypeA_DCI_0_2_r16 dmrs_UplinkForPUSCH_MappingTypeA_DCI_0_2_r16;  // optional
   public PUSCH_Config_dmrs_UplinkForPUSCH_MappingTypeB_DCI_0_2_r16 dmrs_UplinkForPUSCH_MappingTypeB_DCI_0_2_r16;  // optional
   public PUSCH_Config_frequencyHoppingDCI_0_2_r16 frequencyHoppingDCI_0_2_r16;  // optional
   public PUSCH_Config_frequencyHoppingOffsetListsDCI_0_2_r16 frequencyHoppingOffsetListsDCI_0_2_r16;  // optional
   public PUSCH_Config_codebookSubsetDCI_0_2_r16 codebookSubsetDCI_0_2_r16 = null;  // optional
   public PUSCH_Config_invalidSymbolPatternIndicatorDCI_0_2_r16 invalidSymbolPatternIndicatorDCI_0_2_r16 = null;  // optional
   public Asn1Integer maxRankDCI_0_2_r16;  // optional
   public PUSCH_Config_mcs_TableDCI_0_2_r16 mcs_TableDCI_0_2_r16 = null;  // optional
   public PUSCH_Config_mcs_TableTransformPrecoderDCI_0_2_r16 mcs_TableTransformPrecoderDCI_0_2_r16 = null;  // optional
   public PUSCH_Config_priorityIndicatorDCI_0_2_r16 priorityIndicatorDCI_0_2_r16 = null;  // optional
   public PUSCH_Config_pusch_RepTypeIndicatorDCI_0_2_r16 pusch_RepTypeIndicatorDCI_0_2_r16 = null;  // optional
   public PUSCH_Config_resourceAllocationDCI_0_2_r16 resourceAllocationDCI_0_2_r16 = null;  // optional
   public PUSCH_Config_resourceAllocationType1GranularityDCI_0_2_r16 resourceAllocationType1GranularityDCI_0_2_r16 = null;  // optional
   public PUSCH_Config_uci_OnPUSCH_ListDCI_0_2_r16 uci_OnPUSCH_ListDCI_0_2_r16;  // optional
   public PUSCH_Config_pusch_TimeDomainAllocationListDCI_0_2_r16 pusch_TimeDomainAllocationListDCI_0_2_r16;  // optional
   public PUSCH_Config_pusch_TimeDomainAllocationListDCI_0_1_r16 pusch_TimeDomainAllocationListDCI_0_1_r16;  // optional
   public PUSCH_Config_invalidSymbolPatternIndicatorDCI_0_1_r16 invalidSymbolPatternIndicatorDCI_0_1_r16 = null;  // optional
   public PUSCH_Config_priorityIndicatorDCI_0_1_r16 priorityIndicatorDCI_0_1_r16 = null;  // optional
   public PUSCH_Config_pusch_RepTypeIndicatorDCI_0_1_r16 pusch_RepTypeIndicatorDCI_0_1_r16 = null;  // optional
   public PUSCH_Config_frequencyHoppingDCI_0_1_r16 frequencyHoppingDCI_0_1_r16 = null;  // optional
   public PUSCH_Config_uci_OnPUSCH_ListDCI_0_1_r16 uci_OnPUSCH_ListDCI_0_1_r16;  // optional
   public InvalidSymbolPattern_r16 invalidSymbolPattern_r16;  // optional
   public PUSCH_Config_pusch_PowerControl_v1610 pusch_PowerControl_v1610;  // optional
   public PUSCH_Config_ul_FullPowerTransmission_r16 ul_FullPowerTransmission_r16 = null;  // optional
   public PUSCH_Config_pusch_TimeDomainAllocationListForMultiPUSCH_r16 pusch_TimeDomainAllocationListForMultiPUSCH_r16;  // optional
   public Asn1Integer numberOfInvalidSymbolsForDL_UL_Switching_r16;  // optional
   public Asn1OpenExt extElem1;

   public PUSCH_Config () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public PUSCH_Config (
      Asn1Integer dataScramblingIdentityPUSCH_,
      PUSCH_Config_txConfig txConfig_,
      PUSCH_Config_dmrs_UplinkForPUSCH_MappingTypeA dmrs_UplinkForPUSCH_MappingTypeA_,
      PUSCH_Config_dmrs_UplinkForPUSCH_MappingTypeB dmrs_UplinkForPUSCH_MappingTypeB_,
      PUSCH_PowerControl pusch_PowerControl_,
      PUSCH_Config_frequencyHopping frequencyHopping_,
      PUSCH_Config_frequencyHoppingOffsetLists frequencyHoppingOffsetLists_,
      PUSCH_Config_resourceAllocation resourceAllocation_,
      PUSCH_Config_pusch_TimeDomainAllocationList pusch_TimeDomainAllocationList_,
      PUSCH_Config_pusch_AggregationFactor pusch_AggregationFactor_,
      PUSCH_Config_mcs_Table mcs_Table_,
      PUSCH_Config_mcs_TableTransformPrecoder mcs_TableTransformPrecoder_,
      PUSCH_Config_transformPrecoder transformPrecoder_,
      PUSCH_Config_codebookSubset codebookSubset_,
      Asn1Integer maxRank_,
      PUSCH_Config_rbg_Size rbg_Size_,
      PUSCH_Config_uci_OnPUSCH uci_OnPUSCH_,
      PUSCH_Config_tp_pi2BPSK tp_pi2BPSK_,
      PUSCH_Config_minimumSchedulingOffsetK2_r16 minimumSchedulingOffsetK2_r16_,
      PUSCH_Config_ul_AccessConfigListDCI_0_1_r16 ul_AccessConfigListDCI_0_1_r16_,
      Asn1Integer harq_ProcessNumberSizeDCI_0_2_r16_,
      PUSCH_Config_dmrs_SequenceInitializationDCI_0_2_r16 dmrs_SequenceInitializationDCI_0_2_r16_,
      Asn1Integer numberOfBitsForRV_DCI_0_2_r16_,
      PUSCH_Config_antennaPortsFieldPresenceDCI_0_2_r16 antennaPortsFieldPresenceDCI_0_2_r16_,
      PUSCH_Config_dmrs_UplinkForPUSCH_MappingTypeA_DCI_0_2_r16 dmrs_UplinkForPUSCH_MappingTypeA_DCI_0_2_r16_,
      PUSCH_Config_dmrs_UplinkForPUSCH_MappingTypeB_DCI_0_2_r16 dmrs_UplinkForPUSCH_MappingTypeB_DCI_0_2_r16_,
      PUSCH_Config_frequencyHoppingDCI_0_2_r16 frequencyHoppingDCI_0_2_r16_,
      PUSCH_Config_frequencyHoppingOffsetListsDCI_0_2_r16 frequencyHoppingOffsetListsDCI_0_2_r16_,
      PUSCH_Config_codebookSubsetDCI_0_2_r16 codebookSubsetDCI_0_2_r16_,
      PUSCH_Config_invalidSymbolPatternIndicatorDCI_0_2_r16 invalidSymbolPatternIndicatorDCI_0_2_r16_,
      Asn1Integer maxRankDCI_0_2_r16_,
      PUSCH_Config_mcs_TableDCI_0_2_r16 mcs_TableDCI_0_2_r16_,
      PUSCH_Config_mcs_TableTransformPrecoderDCI_0_2_r16 mcs_TableTransformPrecoderDCI_0_2_r16_,
      PUSCH_Config_priorityIndicatorDCI_0_2_r16 priorityIndicatorDCI_0_2_r16_,
      PUSCH_Config_pusch_RepTypeIndicatorDCI_0_2_r16 pusch_RepTypeIndicatorDCI_0_2_r16_,
      PUSCH_Config_resourceAllocationDCI_0_2_r16 resourceAllocationDCI_0_2_r16_,
      PUSCH_Config_resourceAllocationType1GranularityDCI_0_2_r16 resourceAllocationType1GranularityDCI_0_2_r16_,
      PUSCH_Config_uci_OnPUSCH_ListDCI_0_2_r16 uci_OnPUSCH_ListDCI_0_2_r16_,
      PUSCH_Config_pusch_TimeDomainAllocationListDCI_0_2_r16 pusch_TimeDomainAllocationListDCI_0_2_r16_,
      PUSCH_Config_pusch_TimeDomainAllocationListDCI_0_1_r16 pusch_TimeDomainAllocationListDCI_0_1_r16_,
      PUSCH_Config_invalidSymbolPatternIndicatorDCI_0_1_r16 invalidSymbolPatternIndicatorDCI_0_1_r16_,
      PUSCH_Config_priorityIndicatorDCI_0_1_r16 priorityIndicatorDCI_0_1_r16_,
      PUSCH_Config_pusch_RepTypeIndicatorDCI_0_1_r16 pusch_RepTypeIndicatorDCI_0_1_r16_,
      PUSCH_Config_frequencyHoppingDCI_0_1_r16 frequencyHoppingDCI_0_1_r16_,
      PUSCH_Config_uci_OnPUSCH_ListDCI_0_1_r16 uci_OnPUSCH_ListDCI_0_1_r16_,
      InvalidSymbolPattern_r16 invalidSymbolPattern_r16_,
      PUSCH_Config_pusch_PowerControl_v1610 pusch_PowerControl_v1610_,
      PUSCH_Config_ul_FullPowerTransmission_r16 ul_FullPowerTransmission_r16_,
      PUSCH_Config_pusch_TimeDomainAllocationListForMultiPUSCH_r16 pusch_TimeDomainAllocationListForMultiPUSCH_r16_,
      Asn1Integer numberOfInvalidSymbolsForDL_UL_Switching_r16_
   ) {
      super();
      dataScramblingIdentityPUSCH = dataScramblingIdentityPUSCH_;
      txConfig = txConfig_;
      dmrs_UplinkForPUSCH_MappingTypeA = dmrs_UplinkForPUSCH_MappingTypeA_;
      dmrs_UplinkForPUSCH_MappingTypeB = dmrs_UplinkForPUSCH_MappingTypeB_;
      pusch_PowerControl = pusch_PowerControl_;
      frequencyHopping = frequencyHopping_;
      frequencyHoppingOffsetLists = frequencyHoppingOffsetLists_;
      resourceAllocation = resourceAllocation_;
      pusch_TimeDomainAllocationList = pusch_TimeDomainAllocationList_;
      pusch_AggregationFactor = pusch_AggregationFactor_;
      mcs_Table = mcs_Table_;
      mcs_TableTransformPrecoder = mcs_TableTransformPrecoder_;
      transformPrecoder = transformPrecoder_;
      codebookSubset = codebookSubset_;
      maxRank = maxRank_;
      rbg_Size = rbg_Size_;
      uci_OnPUSCH = uci_OnPUSCH_;
      tp_pi2BPSK = tp_pi2BPSK_;
      minimumSchedulingOffsetK2_r16 = minimumSchedulingOffsetK2_r16_;
      ul_AccessConfigListDCI_0_1_r16 = ul_AccessConfigListDCI_0_1_r16_;
      harq_ProcessNumberSizeDCI_0_2_r16 = harq_ProcessNumberSizeDCI_0_2_r16_;
      dmrs_SequenceInitializationDCI_0_2_r16 = dmrs_SequenceInitializationDCI_0_2_r16_;
      numberOfBitsForRV_DCI_0_2_r16 = numberOfBitsForRV_DCI_0_2_r16_;
      antennaPortsFieldPresenceDCI_0_2_r16 = antennaPortsFieldPresenceDCI_0_2_r16_;
      dmrs_UplinkForPUSCH_MappingTypeA_DCI_0_2_r16 = dmrs_UplinkForPUSCH_MappingTypeA_DCI_0_2_r16_;
      dmrs_UplinkForPUSCH_MappingTypeB_DCI_0_2_r16 = dmrs_UplinkForPUSCH_MappingTypeB_DCI_0_2_r16_;
      frequencyHoppingDCI_0_2_r16 = frequencyHoppingDCI_0_2_r16_;
      frequencyHoppingOffsetListsDCI_0_2_r16 = frequencyHoppingOffsetListsDCI_0_2_r16_;
      codebookSubsetDCI_0_2_r16 = codebookSubsetDCI_0_2_r16_;
      invalidSymbolPatternIndicatorDCI_0_2_r16 = invalidSymbolPatternIndicatorDCI_0_2_r16_;
      maxRankDCI_0_2_r16 = maxRankDCI_0_2_r16_;
      mcs_TableDCI_0_2_r16 = mcs_TableDCI_0_2_r16_;
      mcs_TableTransformPrecoderDCI_0_2_r16 = mcs_TableTransformPrecoderDCI_0_2_r16_;
      priorityIndicatorDCI_0_2_r16 = priorityIndicatorDCI_0_2_r16_;
      pusch_RepTypeIndicatorDCI_0_2_r16 = pusch_RepTypeIndicatorDCI_0_2_r16_;
      resourceAllocationDCI_0_2_r16 = resourceAllocationDCI_0_2_r16_;
      resourceAllocationType1GranularityDCI_0_2_r16 = resourceAllocationType1GranularityDCI_0_2_r16_;
      uci_OnPUSCH_ListDCI_0_2_r16 = uci_OnPUSCH_ListDCI_0_2_r16_;
      pusch_TimeDomainAllocationListDCI_0_2_r16 = pusch_TimeDomainAllocationListDCI_0_2_r16_;
      pusch_TimeDomainAllocationListDCI_0_1_r16 = pusch_TimeDomainAllocationListDCI_0_1_r16_;
      invalidSymbolPatternIndicatorDCI_0_1_r16 = invalidSymbolPatternIndicatorDCI_0_1_r16_;
      priorityIndicatorDCI_0_1_r16 = priorityIndicatorDCI_0_1_r16_;
      pusch_RepTypeIndicatorDCI_0_1_r16 = pusch_RepTypeIndicatorDCI_0_1_r16_;
      frequencyHoppingDCI_0_1_r16 = frequencyHoppingDCI_0_1_r16_;
      uci_OnPUSCH_ListDCI_0_1_r16 = uci_OnPUSCH_ListDCI_0_1_r16_;
      invalidSymbolPattern_r16 = invalidSymbolPattern_r16_;
      pusch_PowerControl_v1610 = pusch_PowerControl_v1610_;
      ul_FullPowerTransmission_r16 = ul_FullPowerTransmission_r16_;
      pusch_TimeDomainAllocationListForMultiPUSCH_r16 = pusch_TimeDomainAllocationListForMultiPUSCH_r16_;
      numberOfInvalidSymbolsForDL_UL_Switching_r16 = numberOfInvalidSymbolsForDL_UL_Switching_r16_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public PUSCH_Config (
      PUSCH_Config_resourceAllocation resourceAllocation_
   ) {
      super();
      resourceAllocation = resourceAllocation_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public PUSCH_Config (long dataScramblingIdentityPUSCH_,
      PUSCH_Config_txConfig txConfig_,
      PUSCH_Config_dmrs_UplinkForPUSCH_MappingTypeA dmrs_UplinkForPUSCH_MappingTypeA_,
      PUSCH_Config_dmrs_UplinkForPUSCH_MappingTypeB dmrs_UplinkForPUSCH_MappingTypeB_,
      PUSCH_PowerControl pusch_PowerControl_,
      PUSCH_Config_frequencyHopping frequencyHopping_,
      PUSCH_Config_frequencyHoppingOffsetLists frequencyHoppingOffsetLists_,
      PUSCH_Config_resourceAllocation resourceAllocation_,
      PUSCH_Config_pusch_TimeDomainAllocationList pusch_TimeDomainAllocationList_,
      PUSCH_Config_pusch_AggregationFactor pusch_AggregationFactor_,
      PUSCH_Config_mcs_Table mcs_Table_,
      PUSCH_Config_mcs_TableTransformPrecoder mcs_TableTransformPrecoder_,
      PUSCH_Config_transformPrecoder transformPrecoder_,
      PUSCH_Config_codebookSubset codebookSubset_,
      long maxRank_,
      PUSCH_Config_rbg_Size rbg_Size_,
      PUSCH_Config_uci_OnPUSCH uci_OnPUSCH_,
      PUSCH_Config_tp_pi2BPSK tp_pi2BPSK_,
      PUSCH_Config_minimumSchedulingOffsetK2_r16 minimumSchedulingOffsetK2_r16_,
      PUSCH_Config_ul_AccessConfigListDCI_0_1_r16 ul_AccessConfigListDCI_0_1_r16_,
      long harq_ProcessNumberSizeDCI_0_2_r16_,
      PUSCH_Config_dmrs_SequenceInitializationDCI_0_2_r16 dmrs_SequenceInitializationDCI_0_2_r16_,
      long numberOfBitsForRV_DCI_0_2_r16_,
      PUSCH_Config_antennaPortsFieldPresenceDCI_0_2_r16 antennaPortsFieldPresenceDCI_0_2_r16_,
      PUSCH_Config_dmrs_UplinkForPUSCH_MappingTypeA_DCI_0_2_r16 dmrs_UplinkForPUSCH_MappingTypeA_DCI_0_2_r16_,
      PUSCH_Config_dmrs_UplinkForPUSCH_MappingTypeB_DCI_0_2_r16 dmrs_UplinkForPUSCH_MappingTypeB_DCI_0_2_r16_,
      PUSCH_Config_frequencyHoppingDCI_0_2_r16 frequencyHoppingDCI_0_2_r16_,
      PUSCH_Config_frequencyHoppingOffsetListsDCI_0_2_r16 frequencyHoppingOffsetListsDCI_0_2_r16_,
      PUSCH_Config_codebookSubsetDCI_0_2_r16 codebookSubsetDCI_0_2_r16_,
      PUSCH_Config_invalidSymbolPatternIndicatorDCI_0_2_r16 invalidSymbolPatternIndicatorDCI_0_2_r16_,
      long maxRankDCI_0_2_r16_,
      PUSCH_Config_mcs_TableDCI_0_2_r16 mcs_TableDCI_0_2_r16_,
      PUSCH_Config_mcs_TableTransformPrecoderDCI_0_2_r16 mcs_TableTransformPrecoderDCI_0_2_r16_,
      PUSCH_Config_priorityIndicatorDCI_0_2_r16 priorityIndicatorDCI_0_2_r16_,
      PUSCH_Config_pusch_RepTypeIndicatorDCI_0_2_r16 pusch_RepTypeIndicatorDCI_0_2_r16_,
      PUSCH_Config_resourceAllocationDCI_0_2_r16 resourceAllocationDCI_0_2_r16_,
      PUSCH_Config_resourceAllocationType1GranularityDCI_0_2_r16 resourceAllocationType1GranularityDCI_0_2_r16_,
      PUSCH_Config_uci_OnPUSCH_ListDCI_0_2_r16 uci_OnPUSCH_ListDCI_0_2_r16_,
      PUSCH_Config_pusch_TimeDomainAllocationListDCI_0_2_r16 pusch_TimeDomainAllocationListDCI_0_2_r16_,
      PUSCH_Config_pusch_TimeDomainAllocationListDCI_0_1_r16 pusch_TimeDomainAllocationListDCI_0_1_r16_,
      PUSCH_Config_invalidSymbolPatternIndicatorDCI_0_1_r16 invalidSymbolPatternIndicatorDCI_0_1_r16_,
      PUSCH_Config_priorityIndicatorDCI_0_1_r16 priorityIndicatorDCI_0_1_r16_,
      PUSCH_Config_pusch_RepTypeIndicatorDCI_0_1_r16 pusch_RepTypeIndicatorDCI_0_1_r16_,
      PUSCH_Config_frequencyHoppingDCI_0_1_r16 frequencyHoppingDCI_0_1_r16_,
      PUSCH_Config_uci_OnPUSCH_ListDCI_0_1_r16 uci_OnPUSCH_ListDCI_0_1_r16_,
      InvalidSymbolPattern_r16 invalidSymbolPattern_r16_,
      PUSCH_Config_pusch_PowerControl_v1610 pusch_PowerControl_v1610_,
      PUSCH_Config_ul_FullPowerTransmission_r16 ul_FullPowerTransmission_r16_,
      PUSCH_Config_pusch_TimeDomainAllocationListForMultiPUSCH_r16 pusch_TimeDomainAllocationListForMultiPUSCH_r16_,
      long numberOfInvalidSymbolsForDL_UL_Switching_r16_
   ) {
      super();
      dataScramblingIdentityPUSCH = new Asn1Integer (dataScramblingIdentityPUSCH_);
      txConfig = txConfig_;
      dmrs_UplinkForPUSCH_MappingTypeA = dmrs_UplinkForPUSCH_MappingTypeA_;
      dmrs_UplinkForPUSCH_MappingTypeB = dmrs_UplinkForPUSCH_MappingTypeB_;
      pusch_PowerControl = pusch_PowerControl_;
      frequencyHopping = frequencyHopping_;
      frequencyHoppingOffsetLists = frequencyHoppingOffsetLists_;
      resourceAllocation = resourceAllocation_;
      pusch_TimeDomainAllocationList = pusch_TimeDomainAllocationList_;
      pusch_AggregationFactor = pusch_AggregationFactor_;
      mcs_Table = mcs_Table_;
      mcs_TableTransformPrecoder = mcs_TableTransformPrecoder_;
      transformPrecoder = transformPrecoder_;
      codebookSubset = codebookSubset_;
      maxRank = new Asn1Integer (maxRank_);
      rbg_Size = rbg_Size_;
      uci_OnPUSCH = uci_OnPUSCH_;
      tp_pi2BPSK = tp_pi2BPSK_;
      minimumSchedulingOffsetK2_r16 = minimumSchedulingOffsetK2_r16_;
      ul_AccessConfigListDCI_0_1_r16 = ul_AccessConfigListDCI_0_1_r16_;
      harq_ProcessNumberSizeDCI_0_2_r16 = new Asn1Integer (harq_ProcessNumberSizeDCI_0_2_r16_);
      dmrs_SequenceInitializationDCI_0_2_r16 = dmrs_SequenceInitializationDCI_0_2_r16_;
      numberOfBitsForRV_DCI_0_2_r16 = new Asn1Integer (numberOfBitsForRV_DCI_0_2_r16_);
      antennaPortsFieldPresenceDCI_0_2_r16 = antennaPortsFieldPresenceDCI_0_2_r16_;
      dmrs_UplinkForPUSCH_MappingTypeA_DCI_0_2_r16 = dmrs_UplinkForPUSCH_MappingTypeA_DCI_0_2_r16_;
      dmrs_UplinkForPUSCH_MappingTypeB_DCI_0_2_r16 = dmrs_UplinkForPUSCH_MappingTypeB_DCI_0_2_r16_;
      frequencyHoppingDCI_0_2_r16 = frequencyHoppingDCI_0_2_r16_;
      frequencyHoppingOffsetListsDCI_0_2_r16 = frequencyHoppingOffsetListsDCI_0_2_r16_;
      codebookSubsetDCI_0_2_r16 = codebookSubsetDCI_0_2_r16_;
      invalidSymbolPatternIndicatorDCI_0_2_r16 = invalidSymbolPatternIndicatorDCI_0_2_r16_;
      maxRankDCI_0_2_r16 = new Asn1Integer (maxRankDCI_0_2_r16_);
      mcs_TableDCI_0_2_r16 = mcs_TableDCI_0_2_r16_;
      mcs_TableTransformPrecoderDCI_0_2_r16 = mcs_TableTransformPrecoderDCI_0_2_r16_;
      priorityIndicatorDCI_0_2_r16 = priorityIndicatorDCI_0_2_r16_;
      pusch_RepTypeIndicatorDCI_0_2_r16 = pusch_RepTypeIndicatorDCI_0_2_r16_;
      resourceAllocationDCI_0_2_r16 = resourceAllocationDCI_0_2_r16_;
      resourceAllocationType1GranularityDCI_0_2_r16 = resourceAllocationType1GranularityDCI_0_2_r16_;
      uci_OnPUSCH_ListDCI_0_2_r16 = uci_OnPUSCH_ListDCI_0_2_r16_;
      pusch_TimeDomainAllocationListDCI_0_2_r16 = pusch_TimeDomainAllocationListDCI_0_2_r16_;
      pusch_TimeDomainAllocationListDCI_0_1_r16 = pusch_TimeDomainAllocationListDCI_0_1_r16_;
      invalidSymbolPatternIndicatorDCI_0_1_r16 = invalidSymbolPatternIndicatorDCI_0_1_r16_;
      priorityIndicatorDCI_0_1_r16 = priorityIndicatorDCI_0_1_r16_;
      pusch_RepTypeIndicatorDCI_0_1_r16 = pusch_RepTypeIndicatorDCI_0_1_r16_;
      frequencyHoppingDCI_0_1_r16 = frequencyHoppingDCI_0_1_r16_;
      uci_OnPUSCH_ListDCI_0_1_r16 = uci_OnPUSCH_ListDCI_0_1_r16_;
      invalidSymbolPattern_r16 = invalidSymbolPattern_r16_;
      pusch_PowerControl_v1610 = pusch_PowerControl_v1610_;
      ul_FullPowerTransmission_r16 = ul_FullPowerTransmission_r16_;
      pusch_TimeDomainAllocationListForMultiPUSCH_r16 = pusch_TimeDomainAllocationListForMultiPUSCH_r16_;
      numberOfInvalidSymbolsForDL_UL_Switching_r16 = new Asn1Integer (numberOfInvalidSymbolsForDL_UL_Switching_r16_);
   }

   public void init () {
      dataScramblingIdentityPUSCH = null;
      txConfig = null;
      dmrs_UplinkForPUSCH_MappingTypeA = null;
      dmrs_UplinkForPUSCH_MappingTypeB = null;
      pusch_PowerControl = null;
      frequencyHopping = null;
      frequencyHoppingOffsetLists = null;
      resourceAllocation = null;
      pusch_TimeDomainAllocationList = null;
      pusch_AggregationFactor = null;
      mcs_Table = null;
      mcs_TableTransformPrecoder = null;
      transformPrecoder = null;
      codebookSubset = null;
      maxRank = null;
      rbg_Size = null;
      uci_OnPUSCH = null;
      tp_pi2BPSK = null;
      minimumSchedulingOffsetK2_r16 = null;
      ul_AccessConfigListDCI_0_1_r16 = null;
      harq_ProcessNumberSizeDCI_0_2_r16 = null;
      dmrs_SequenceInitializationDCI_0_2_r16 = null;
      numberOfBitsForRV_DCI_0_2_r16 = null;
      antennaPortsFieldPresenceDCI_0_2_r16 = null;
      dmrs_UplinkForPUSCH_MappingTypeA_DCI_0_2_r16 = null;
      dmrs_UplinkForPUSCH_MappingTypeB_DCI_0_2_r16 = null;
      frequencyHoppingDCI_0_2_r16 = null;
      frequencyHoppingOffsetListsDCI_0_2_r16 = null;
      codebookSubsetDCI_0_2_r16 = null;
      invalidSymbolPatternIndicatorDCI_0_2_r16 = null;
      maxRankDCI_0_2_r16 = null;
      mcs_TableDCI_0_2_r16 = null;
      mcs_TableTransformPrecoderDCI_0_2_r16 = null;
      priorityIndicatorDCI_0_2_r16 = null;
      pusch_RepTypeIndicatorDCI_0_2_r16 = null;
      resourceAllocationDCI_0_2_r16 = null;
      resourceAllocationType1GranularityDCI_0_2_r16 = null;
      uci_OnPUSCH_ListDCI_0_2_r16 = null;
      pusch_TimeDomainAllocationListDCI_0_2_r16 = null;
      pusch_TimeDomainAllocationListDCI_0_1_r16 = null;
      invalidSymbolPatternIndicatorDCI_0_1_r16 = null;
      priorityIndicatorDCI_0_1_r16 = null;
      pusch_RepTypeIndicatorDCI_0_1_r16 = null;
      frequencyHoppingDCI_0_1_r16 = null;
      uci_OnPUSCH_ListDCI_0_1_r16 = null;
      invalidSymbolPattern_r16 = null;
      pusch_PowerControl_v1610 = null;
      ul_FullPowerTransmission_r16 = null;
      pusch_TimeDomainAllocationListForMultiPUSCH_r16 = null;
      numberOfInvalidSymbolsForDL_UL_Switching_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 51; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return dataScramblingIdentityPUSCH;
         case 1: return txConfig;
         case 2: return dmrs_UplinkForPUSCH_MappingTypeA;
         case 3: return dmrs_UplinkForPUSCH_MappingTypeB;
         case 4: return pusch_PowerControl;
         case 5: return frequencyHopping;
         case 6: return frequencyHoppingOffsetLists;
         case 7: return resourceAllocation;
         case 8: return pusch_TimeDomainAllocationList;
         case 9: return pusch_AggregationFactor;
         case 10: return mcs_Table;
         case 11: return mcs_TableTransformPrecoder;
         case 12: return transformPrecoder;
         case 13: return codebookSubset;
         case 14: return maxRank;
         case 15: return rbg_Size;
         case 16: return uci_OnPUSCH;
         case 17: return tp_pi2BPSK;
         case 18: return minimumSchedulingOffsetK2_r16;
         case 19: return ul_AccessConfigListDCI_0_1_r16;
         case 20: return harq_ProcessNumberSizeDCI_0_2_r16;
         case 21: return dmrs_SequenceInitializationDCI_0_2_r16;
         case 22: return numberOfBitsForRV_DCI_0_2_r16;
         case 23: return antennaPortsFieldPresenceDCI_0_2_r16;
         case 24: return dmrs_UplinkForPUSCH_MappingTypeA_DCI_0_2_r16;
         case 25: return dmrs_UplinkForPUSCH_MappingTypeB_DCI_0_2_r16;
         case 26: return frequencyHoppingDCI_0_2_r16;
         case 27: return frequencyHoppingOffsetListsDCI_0_2_r16;
         case 28: return codebookSubsetDCI_0_2_r16;
         case 29: return invalidSymbolPatternIndicatorDCI_0_2_r16;
         case 30: return maxRankDCI_0_2_r16;
         case 31: return mcs_TableDCI_0_2_r16;
         case 32: return mcs_TableTransformPrecoderDCI_0_2_r16;
         case 33: return priorityIndicatorDCI_0_2_r16;
         case 34: return pusch_RepTypeIndicatorDCI_0_2_r16;
         case 35: return resourceAllocationDCI_0_2_r16;
         case 36: return resourceAllocationType1GranularityDCI_0_2_r16;
         case 37: return uci_OnPUSCH_ListDCI_0_2_r16;
         case 38: return pusch_TimeDomainAllocationListDCI_0_2_r16;
         case 39: return pusch_TimeDomainAllocationListDCI_0_1_r16;
         case 40: return invalidSymbolPatternIndicatorDCI_0_1_r16;
         case 41: return priorityIndicatorDCI_0_1_r16;
         case 42: return pusch_RepTypeIndicatorDCI_0_1_r16;
         case 43: return frequencyHoppingDCI_0_1_r16;
         case 44: return uci_OnPUSCH_ListDCI_0_1_r16;
         case 45: return invalidSymbolPattern_r16;
         case 46: return pusch_PowerControl_v1610;
         case 47: return ul_FullPowerTransmission_r16;
         case 48: return pusch_TimeDomainAllocationListForMultiPUSCH_r16;
         case 49: return numberOfInvalidSymbolsForDL_UL_Switching_r16;
         case 50: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "dataScramblingIdentityPUSCH";
         case 1: return "txConfig";
         case 2: return "dmrs-UplinkForPUSCH-MappingTypeA";
         case 3: return "dmrs-UplinkForPUSCH-MappingTypeB";
         case 4: return "pusch-PowerControl";
         case 5: return "frequencyHopping";
         case 6: return "frequencyHoppingOffsetLists";
         case 7: return "resourceAllocation";
         case 8: return "pusch-TimeDomainAllocationList";
         case 9: return "pusch-AggregationFactor";
         case 10: return "mcs-Table";
         case 11: return "mcs-TableTransformPrecoder";
         case 12: return "transformPrecoder";
         case 13: return "codebookSubset";
         case 14: return "maxRank";
         case 15: return "rbg-Size";
         case 16: return "uci-OnPUSCH";
         case 17: return "tp-pi2BPSK";
         case 18: return "minimumSchedulingOffsetK2-r16";
         case 19: return "ul-AccessConfigListDCI-0-1-r16";
         case 20: return "harq-ProcessNumberSizeDCI-0-2-r16";
         case 21: return "dmrs-SequenceInitializationDCI-0-2-r16";
         case 22: return "numberOfBitsForRV-DCI-0-2-r16";
         case 23: return "antennaPortsFieldPresenceDCI-0-2-r16";
         case 24: return "dmrs-UplinkForPUSCH-MappingTypeA-DCI-0-2-r16";
         case 25: return "dmrs-UplinkForPUSCH-MappingTypeB-DCI-0-2-r16";
         case 26: return "frequencyHoppingDCI-0-2-r16";
         case 27: return "frequencyHoppingOffsetListsDCI-0-2-r16";
         case 28: return "codebookSubsetDCI-0-2-r16";
         case 29: return "invalidSymbolPatternIndicatorDCI-0-2-r16";
         case 30: return "maxRankDCI-0-2-r16";
         case 31: return "mcs-TableDCI-0-2-r16";
         case 32: return "mcs-TableTransformPrecoderDCI-0-2-r16";
         case 33: return "priorityIndicatorDCI-0-2-r16";
         case 34: return "pusch-RepTypeIndicatorDCI-0-2-r16";
         case 35: return "resourceAllocationDCI-0-2-r16";
         case 36: return "resourceAllocationType1GranularityDCI-0-2-r16";
         case 37: return "uci-OnPUSCH-ListDCI-0-2-r16";
         case 38: return "pusch-TimeDomainAllocationListDCI-0-2-r16";
         case 39: return "pusch-TimeDomainAllocationListDCI-0-1-r16";
         case 40: return "invalidSymbolPatternIndicatorDCI-0-1-r16";
         case 41: return "priorityIndicatorDCI-0-1-r16";
         case 42: return "pusch-RepTypeIndicatorDCI-0-1-r16";
         case 43: return "frequencyHoppingDCI-0-1-r16";
         case 44: return "uci-OnPUSCH-ListDCI-0-1-r16";
         case 45: return "invalidSymbolPattern-r16";
         case 46: return "pusch-PowerControl-v1610";
         case 47: return "ul-FullPowerTransmission-r16";
         case 48: return "pusch-TimeDomainAllocationListForMultiPUSCH-r16";
         case 49: return "numberOfInvalidSymbolsForDL-UL-Switching-r16";
         case 50: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean dataScramblingIdentityPUSCHPresent = buffer.decodeBit ("dataScramblingIdentityPUSCHPresent");
      boolean txConfigPresent = buffer.decodeBit ("txConfigPresent");
      boolean dmrs_UplinkForPUSCH_MappingTypeAPresent = buffer.decodeBit ("dmrs_UplinkForPUSCH_MappingTypeAPresent");
      boolean dmrs_UplinkForPUSCH_MappingTypeBPresent = buffer.decodeBit ("dmrs_UplinkForPUSCH_MappingTypeBPresent");
      boolean pusch_PowerControlPresent = buffer.decodeBit ("pusch_PowerControlPresent");
      boolean frequencyHoppingPresent = buffer.decodeBit ("frequencyHoppingPresent");
      boolean frequencyHoppingOffsetListsPresent = buffer.decodeBit ("frequencyHoppingOffsetListsPresent");
      boolean pusch_TimeDomainAllocationListPresent = buffer.decodeBit ("pusch_TimeDomainAllocationListPresent");
      boolean pusch_AggregationFactorPresent = buffer.decodeBit ("pusch_AggregationFactorPresent");
      boolean mcs_TablePresent = buffer.decodeBit ("mcs_TablePresent");
      boolean mcs_TableTransformPrecoderPresent = buffer.decodeBit ("mcs_TableTransformPrecoderPresent");
      boolean transformPrecoderPresent = buffer.decodeBit ("transformPrecoderPresent");
      boolean codebookSubsetPresent = buffer.decodeBit ("codebookSubsetPresent");
      boolean maxRankPresent = buffer.decodeBit ("maxRankPresent");
      boolean rbg_SizePresent = buffer.decodeBit ("rbg_SizePresent");
      boolean uci_OnPUSCHPresent = buffer.decodeBit ("uci_OnPUSCHPresent");
      boolean tp_pi2BPSKPresent = buffer.decodeBit ("tp_pi2BPSKPresent");

      // decode dataScramblingIdentityPUSCH

      if (dataScramblingIdentityPUSCHPresent) {
         buffer.getContext().eventDispatcher.startElement("dataScramblingIdentityPUSCH", -1);

         dataScramblingIdentityPUSCH = new Asn1Integer();
         dataScramblingIdentityPUSCH.decode (buffer, 0, 1023);

         buffer.invokeCharacters(dataScramblingIdentityPUSCH.toString());
         buffer.getContext().eventDispatcher.endElement("dataScramblingIdentityPUSCH", -1);
      }
      else {
         dataScramblingIdentityPUSCH = null;
      }

      // decode txConfig

      if (txConfigPresent) {
         buffer.getContext().eventDispatcher.startElement("txConfig", -1);

         int tval = PUSCH_Config_txConfig.decodeEnumValue (buffer);
         txConfig = PUSCH_Config_txConfig.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("txConfig", -1);
      }
      else {
         txConfig = null;
      }

      // decode dmrs_UplinkForPUSCH_MappingTypeA

      if (dmrs_UplinkForPUSCH_MappingTypeAPresent) {
         buffer.getContext().eventDispatcher.startElement("dmrs_UplinkForPUSCH_MappingTypeA", -1);

         dmrs_UplinkForPUSCH_MappingTypeA = new PUSCH_Config_dmrs_UplinkForPUSCH_MappingTypeA();
         dmrs_UplinkForPUSCH_MappingTypeA.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("dmrs_UplinkForPUSCH_MappingTypeA", -1);
      }
      else {
         dmrs_UplinkForPUSCH_MappingTypeA = null;
      }

      // decode dmrs_UplinkForPUSCH_MappingTypeB

      if (dmrs_UplinkForPUSCH_MappingTypeBPresent) {
         buffer.getContext().eventDispatcher.startElement("dmrs_UplinkForPUSCH_MappingTypeB", -1);

         dmrs_UplinkForPUSCH_MappingTypeB = new PUSCH_Config_dmrs_UplinkForPUSCH_MappingTypeB();
         dmrs_UplinkForPUSCH_MappingTypeB.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("dmrs_UplinkForPUSCH_MappingTypeB", -1);
      }
      else {
         dmrs_UplinkForPUSCH_MappingTypeB = null;
      }

      // decode pusch_PowerControl

      if (pusch_PowerControlPresent) {
         buffer.getContext().eventDispatcher.startElement("pusch_PowerControl", -1);

         pusch_PowerControl = new PUSCH_PowerControl();
         pusch_PowerControl.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("pusch_PowerControl", -1);
      }
      else {
         pusch_PowerControl = null;
      }

      // decode frequencyHopping

      if (frequencyHoppingPresent) {
         buffer.getContext().eventDispatcher.startElement("frequencyHopping", -1);

         int tval = PUSCH_Config_frequencyHopping.decodeEnumValue (buffer);
         frequencyHopping = PUSCH_Config_frequencyHopping.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("frequencyHopping", -1);
      }
      else {
         frequencyHopping = null;
      }

      // decode frequencyHoppingOffsetLists

      if (frequencyHoppingOffsetListsPresent) {
         buffer.getContext().eventDispatcher.startElement("frequencyHoppingOffsetLists", -1);

         frequencyHoppingOffsetLists = new PUSCH_Config_frequencyHoppingOffsetLists();
         frequencyHoppingOffsetLists.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("frequencyHoppingOffsetLists", -1);
      }
      else {
         frequencyHoppingOffsetLists = null;
      }

      // decode resourceAllocation

      buffer.getContext().eventDispatcher.startElement("resourceAllocation", -1);

      {
         int tval = PUSCH_Config_resourceAllocation.decodeEnumValue (buffer);
         resourceAllocation = PUSCH_Config_resourceAllocation.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("resourceAllocation", -1);

      // decode pusch_TimeDomainAllocationList

      if (pusch_TimeDomainAllocationListPresent) {
         buffer.getContext().eventDispatcher.startElement("pusch_TimeDomainAllocationList", -1);

         pusch_TimeDomainAllocationList = new PUSCH_Config_pusch_TimeDomainAllocationList();
         pusch_TimeDomainAllocationList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("pusch_TimeDomainAllocationList", -1);
      }
      else {
         pusch_TimeDomainAllocationList = null;
      }

      // decode pusch_AggregationFactor

      if (pusch_AggregationFactorPresent) {
         buffer.getContext().eventDispatcher.startElement("pusch_AggregationFactor", -1);

         int tval = PUSCH_Config_pusch_AggregationFactor.decodeEnumValue (buffer);
         pusch_AggregationFactor = PUSCH_Config_pusch_AggregationFactor.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("pusch_AggregationFactor", -1);
      }
      else {
         pusch_AggregationFactor = null;
      }

      // decode mcs_Table

      if (mcs_TablePresent) {
         buffer.getContext().eventDispatcher.startElement("mcs_Table", -1);

         int tval = PUSCH_Config_mcs_Table.decodeEnumValue (buffer);
         mcs_Table = PUSCH_Config_mcs_Table.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("mcs_Table", -1);
      }
      else {
         mcs_Table = null;
      }

      // decode mcs_TableTransformPrecoder

      if (mcs_TableTransformPrecoderPresent) {
         buffer.getContext().eventDispatcher.startElement("mcs_TableTransformPrecoder", -1);

         int tval = PUSCH_Config_mcs_TableTransformPrecoder.decodeEnumValue (buffer);
         mcs_TableTransformPrecoder = PUSCH_Config_mcs_TableTransformPrecoder.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("mcs_TableTransformPrecoder", -1);
      }
      else {
         mcs_TableTransformPrecoder = null;
      }

      // decode transformPrecoder

      if (transformPrecoderPresent) {
         buffer.getContext().eventDispatcher.startElement("transformPrecoder", -1);

         int tval = PUSCH_Config_transformPrecoder.decodeEnumValue (buffer);
         transformPrecoder = PUSCH_Config_transformPrecoder.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("transformPrecoder", -1);
      }
      else {
         transformPrecoder = null;
      }

      // decode codebookSubset

      if (codebookSubsetPresent) {
         buffer.getContext().eventDispatcher.startElement("codebookSubset", -1);

         int tval = PUSCH_Config_codebookSubset.decodeEnumValue (buffer);
         codebookSubset = PUSCH_Config_codebookSubset.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("codebookSubset", -1);
      }
      else {
         codebookSubset = null;
      }

      // decode maxRank

      if (maxRankPresent) {
         buffer.getContext().eventDispatcher.startElement("maxRank", -1);

         maxRank = new Asn1Integer();
         maxRank.decode (buffer, 1, 4);

         buffer.invokeCharacters(maxRank.toString());
         buffer.getContext().eventDispatcher.endElement("maxRank", -1);
      }
      else {
         maxRank = null;
      }

      // decode rbg_Size

      if (rbg_SizePresent) {
         buffer.getContext().eventDispatcher.startElement("rbg_Size", -1);

         int tval = PUSCH_Config_rbg_Size.decodeEnumValue (buffer);
         rbg_Size = PUSCH_Config_rbg_Size.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("rbg_Size", -1);
      }
      else {
         rbg_Size = null;
      }

      // decode uci_OnPUSCH

      if (uci_OnPUSCHPresent) {
         buffer.getContext().eventDispatcher.startElement("uci_OnPUSCH", -1);

         uci_OnPUSCH = new PUSCH_Config_uci_OnPUSCH();
         uci_OnPUSCH.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("uci_OnPUSCH", -1);
      }
      else {
         uci_OnPUSCH = null;
      }

      // decode tp_pi2BPSK

      if (tp_pi2BPSKPresent) {
         buffer.getContext().eventDispatcher.startElement("tp_pi2BPSK", -1);

         int tval = PUSCH_Config_tp_pi2BPSK.decodeEnumValue (buffer);
         tp_pi2BPSK = PUSCH_Config_tp_pi2BPSK.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("tp_pi2BPSK", -1);
      }
      else {
         tp_pi2BPSK = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean minimumSchedulingOffsetK2_r16Present = buffer.decodeBit ("minimumSchedulingOffsetK2_r16Present");

            boolean ul_AccessConfigListDCI_0_1_r16Present = buffer.decodeBit ("ul_AccessConfigListDCI_0_1_r16Present");

            boolean harq_ProcessNumberSizeDCI_0_2_r16Present = buffer.decodeBit ("harq_ProcessNumberSizeDCI_0_2_r16Present");

            boolean dmrs_SequenceInitializationDCI_0_2_r16Present = buffer.decodeBit ("dmrs_SequenceInitializationDCI_0_2_r16Present");

            boolean numberOfBitsForRV_DCI_0_2_r16Present = buffer.decodeBit ("numberOfBitsForRV_DCI_0_2_r16Present");

            boolean antennaPortsFieldPresenceDCI_0_2_r16Present = buffer.decodeBit ("antennaPortsFieldPresenceDCI_0_2_r16Present");

            boolean dmrs_UplinkForPUSCH_MappingTypeA_DCI_0_2_r16Present = buffer.decodeBit ("dmrs_UplinkForPUSCH_MappingTypeA_DCI_0_2_r16Present");

            boolean dmrs_UplinkForPUSCH_MappingTypeB_DCI_0_2_r16Present = buffer.decodeBit ("dmrs_UplinkForPUSCH_MappingTypeB_DCI_0_2_r16Present");

            boolean frequencyHoppingDCI_0_2_r16Present = buffer.decodeBit ("frequencyHoppingDCI_0_2_r16Present");

            boolean frequencyHoppingOffsetListsDCI_0_2_r16Present = buffer.decodeBit ("frequencyHoppingOffsetListsDCI_0_2_r16Present");

            boolean codebookSubsetDCI_0_2_r16Present = buffer.decodeBit ("codebookSubsetDCI_0_2_r16Present");

            boolean invalidSymbolPatternIndicatorDCI_0_2_r16Present = buffer.decodeBit ("invalidSymbolPatternIndicatorDCI_0_2_r16Present");

            boolean maxRankDCI_0_2_r16Present = buffer.decodeBit ("maxRankDCI_0_2_r16Present");

            boolean mcs_TableDCI_0_2_r16Present = buffer.decodeBit ("mcs_TableDCI_0_2_r16Present");

            boolean mcs_TableTransformPrecoderDCI_0_2_r16Present = buffer.decodeBit ("mcs_TableTransformPrecoderDCI_0_2_r16Present");

            boolean priorityIndicatorDCI_0_2_r16Present = buffer.decodeBit ("priorityIndicatorDCI_0_2_r16Present");

            boolean pusch_RepTypeIndicatorDCI_0_2_r16Present = buffer.decodeBit ("pusch_RepTypeIndicatorDCI_0_2_r16Present");

            boolean resourceAllocationDCI_0_2_r16Present = buffer.decodeBit ("resourceAllocationDCI_0_2_r16Present");

            boolean resourceAllocationType1GranularityDCI_0_2_r16Present = buffer.decodeBit ("resourceAllocationType1GranularityDCI_0_2_r16Present");

            boolean uci_OnPUSCH_ListDCI_0_2_r16Present = buffer.decodeBit ("uci_OnPUSCH_ListDCI_0_2_r16Present");

            boolean pusch_TimeDomainAllocationListDCI_0_2_r16Present = buffer.decodeBit ("pusch_TimeDomainAllocationListDCI_0_2_r16Present");

            boolean pusch_TimeDomainAllocationListDCI_0_1_r16Present = buffer.decodeBit ("pusch_TimeDomainAllocationListDCI_0_1_r16Present");

            boolean invalidSymbolPatternIndicatorDCI_0_1_r16Present = buffer.decodeBit ("invalidSymbolPatternIndicatorDCI_0_1_r16Present");

            boolean priorityIndicatorDCI_0_1_r16Present = buffer.decodeBit ("priorityIndicatorDCI_0_1_r16Present");

            boolean pusch_RepTypeIndicatorDCI_0_1_r16Present = buffer.decodeBit ("pusch_RepTypeIndicatorDCI_0_1_r16Present");

            boolean frequencyHoppingDCI_0_1_r16Present = buffer.decodeBit ("frequencyHoppingDCI_0_1_r16Present");

            boolean uci_OnPUSCH_ListDCI_0_1_r16Present = buffer.decodeBit ("uci_OnPUSCH_ListDCI_0_1_r16Present");

            boolean invalidSymbolPattern_r16Present = buffer.decodeBit ("invalidSymbolPattern_r16Present");

            boolean pusch_PowerControl_v1610Present = buffer.decodeBit ("pusch_PowerControl_v1610Present");

            boolean ul_FullPowerTransmission_r16Present = buffer.decodeBit ("ul_FullPowerTransmission_r16Present");

            boolean pusch_TimeDomainAllocationListForMultiPUSCH_r16Present = buffer.decodeBit ("pusch_TimeDomainAllocationListForMultiPUSCH_r16Present");

            boolean numberOfInvalidSymbolsForDL_UL_Switching_r16Present = buffer.decodeBit ("numberOfInvalidSymbolsForDL_UL_Switching_r16Present");

            // decode minimumSchedulingOffsetK2_r16

            if (minimumSchedulingOffsetK2_r16Present) {
               buffer.getContext().eventDispatcher.startElement("minimumSchedulingOffsetK2_r16", -1);

               minimumSchedulingOffsetK2_r16 = new PUSCH_Config_minimumSchedulingOffsetK2_r16();
               minimumSchedulingOffsetK2_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("minimumSchedulingOffsetK2_r16", -1);
            }
            else {
               minimumSchedulingOffsetK2_r16 = null;
            }

            // decode ul_AccessConfigListDCI_0_1_r16

            if (ul_AccessConfigListDCI_0_1_r16Present) {
               buffer.getContext().eventDispatcher.startElement("ul_AccessConfigListDCI_0_1_r16", -1);

               ul_AccessConfigListDCI_0_1_r16 = new PUSCH_Config_ul_AccessConfigListDCI_0_1_r16();
               ul_AccessConfigListDCI_0_1_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("ul_AccessConfigListDCI_0_1_r16", -1);
            }
            else {
               ul_AccessConfigListDCI_0_1_r16 = null;
            }

            // decode harq_ProcessNumberSizeDCI_0_2_r16

            if (harq_ProcessNumberSizeDCI_0_2_r16Present) {
               buffer.getContext().eventDispatcher.startElement("harq_ProcessNumberSizeDCI_0_2_r16", -1);

               harq_ProcessNumberSizeDCI_0_2_r16 = new Asn1Integer();
               harq_ProcessNumberSizeDCI_0_2_r16.decode (buffer, 0, 4);

               buffer.invokeCharacters(harq_ProcessNumberSizeDCI_0_2_r16.toString());
               buffer.getContext().eventDispatcher.endElement("harq_ProcessNumberSizeDCI_0_2_r16", -1);
            }
            else {
               harq_ProcessNumberSizeDCI_0_2_r16 = null;
            }

            // decode dmrs_SequenceInitializationDCI_0_2_r16

            if (dmrs_SequenceInitializationDCI_0_2_r16Present) {
               buffer.getContext().eventDispatcher.startElement("dmrs_SequenceInitializationDCI_0_2_r16", -1);

               int tval = PUSCH_Config_dmrs_SequenceInitializationDCI_0_2_r16.decodeEnumValue (buffer);
               dmrs_SequenceInitializationDCI_0_2_r16 = PUSCH_Config_dmrs_SequenceInitializationDCI_0_2_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("dmrs_SequenceInitializationDCI_0_2_r16", -1);
            }
            else {
               dmrs_SequenceInitializationDCI_0_2_r16 = null;
            }

            // decode numberOfBitsForRV_DCI_0_2_r16

            if (numberOfBitsForRV_DCI_0_2_r16Present) {
               buffer.getContext().eventDispatcher.startElement("numberOfBitsForRV_DCI_0_2_r16", -1);

               numberOfBitsForRV_DCI_0_2_r16 = new Asn1Integer();
               numberOfBitsForRV_DCI_0_2_r16.decode (buffer, 0, 2);

               buffer.invokeCharacters(numberOfBitsForRV_DCI_0_2_r16.toString());
               buffer.getContext().eventDispatcher.endElement("numberOfBitsForRV_DCI_0_2_r16", -1);
            }
            else {
               numberOfBitsForRV_DCI_0_2_r16 = null;
            }

            // decode antennaPortsFieldPresenceDCI_0_2_r16

            if (antennaPortsFieldPresenceDCI_0_2_r16Present) {
               buffer.getContext().eventDispatcher.startElement("antennaPortsFieldPresenceDCI_0_2_r16", -1);

               int tval = PUSCH_Config_antennaPortsFieldPresenceDCI_0_2_r16.decodeEnumValue (buffer);
               antennaPortsFieldPresenceDCI_0_2_r16 = PUSCH_Config_antennaPortsFieldPresenceDCI_0_2_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("antennaPortsFieldPresenceDCI_0_2_r16", -1);
            }
            else {
               antennaPortsFieldPresenceDCI_0_2_r16 = null;
            }

            // decode dmrs_UplinkForPUSCH_MappingTypeA_DCI_0_2_r16

            if (dmrs_UplinkForPUSCH_MappingTypeA_DCI_0_2_r16Present) {
               buffer.getContext().eventDispatcher.startElement("dmrs_UplinkForPUSCH_MappingTypeA_DCI_0_2_r16", -1);

               dmrs_UplinkForPUSCH_MappingTypeA_DCI_0_2_r16 = new PUSCH_Config_dmrs_UplinkForPUSCH_MappingTypeA_DCI_0_2_r16();
               dmrs_UplinkForPUSCH_MappingTypeA_DCI_0_2_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("dmrs_UplinkForPUSCH_MappingTypeA_DCI_0_2_r16", -1);
            }
            else {
               dmrs_UplinkForPUSCH_MappingTypeA_DCI_0_2_r16 = null;
            }

            // decode dmrs_UplinkForPUSCH_MappingTypeB_DCI_0_2_r16

            if (dmrs_UplinkForPUSCH_MappingTypeB_DCI_0_2_r16Present) {
               buffer.getContext().eventDispatcher.startElement("dmrs_UplinkForPUSCH_MappingTypeB_DCI_0_2_r16", -1);

               dmrs_UplinkForPUSCH_MappingTypeB_DCI_0_2_r16 = new PUSCH_Config_dmrs_UplinkForPUSCH_MappingTypeB_DCI_0_2_r16();
               dmrs_UplinkForPUSCH_MappingTypeB_DCI_0_2_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("dmrs_UplinkForPUSCH_MappingTypeB_DCI_0_2_r16", -1);
            }
            else {
               dmrs_UplinkForPUSCH_MappingTypeB_DCI_0_2_r16 = null;
            }

            // decode frequencyHoppingDCI_0_2_r16

            if (frequencyHoppingDCI_0_2_r16Present) {
               buffer.getContext().eventDispatcher.startElement("frequencyHoppingDCI_0_2_r16", -1);

               frequencyHoppingDCI_0_2_r16 = new PUSCH_Config_frequencyHoppingDCI_0_2_r16();
               frequencyHoppingDCI_0_2_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("frequencyHoppingDCI_0_2_r16", -1);
            }
            else {
               frequencyHoppingDCI_0_2_r16 = null;
            }

            // decode frequencyHoppingOffsetListsDCI_0_2_r16

            if (frequencyHoppingOffsetListsDCI_0_2_r16Present) {
               buffer.getContext().eventDispatcher.startElement("frequencyHoppingOffsetListsDCI_0_2_r16", -1);

               frequencyHoppingOffsetListsDCI_0_2_r16 = new PUSCH_Config_frequencyHoppingOffsetListsDCI_0_2_r16();
               frequencyHoppingOffsetListsDCI_0_2_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("frequencyHoppingOffsetListsDCI_0_2_r16", -1);
            }
            else {
               frequencyHoppingOffsetListsDCI_0_2_r16 = null;
            }

            // decode codebookSubsetDCI_0_2_r16

            if (codebookSubsetDCI_0_2_r16Present) {
               buffer.getContext().eventDispatcher.startElement("codebookSubsetDCI_0_2_r16", -1);

               int tval = PUSCH_Config_codebookSubsetDCI_0_2_r16.decodeEnumValue (buffer);
               codebookSubsetDCI_0_2_r16 = PUSCH_Config_codebookSubsetDCI_0_2_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("codebookSubsetDCI_0_2_r16", -1);
            }
            else {
               codebookSubsetDCI_0_2_r16 = null;
            }

            // decode invalidSymbolPatternIndicatorDCI_0_2_r16

            if (invalidSymbolPatternIndicatorDCI_0_2_r16Present) {
               buffer.getContext().eventDispatcher.startElement("invalidSymbolPatternIndicatorDCI_0_2_r16", -1);

               int tval = PUSCH_Config_invalidSymbolPatternIndicatorDCI_0_2_r16.decodeEnumValue (buffer);
               invalidSymbolPatternIndicatorDCI_0_2_r16 = PUSCH_Config_invalidSymbolPatternIndicatorDCI_0_2_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("invalidSymbolPatternIndicatorDCI_0_2_r16", -1);
            }
            else {
               invalidSymbolPatternIndicatorDCI_0_2_r16 = null;
            }

            // decode maxRankDCI_0_2_r16

            if (maxRankDCI_0_2_r16Present) {
               buffer.getContext().eventDispatcher.startElement("maxRankDCI_0_2_r16", -1);

               maxRankDCI_0_2_r16 = new Asn1Integer();
               maxRankDCI_0_2_r16.decode (buffer, 1, 4);

               buffer.invokeCharacters(maxRankDCI_0_2_r16.toString());
               buffer.getContext().eventDispatcher.endElement("maxRankDCI_0_2_r16", -1);
            }
            else {
               maxRankDCI_0_2_r16 = null;
            }

            // decode mcs_TableDCI_0_2_r16

            if (mcs_TableDCI_0_2_r16Present) {
               buffer.getContext().eventDispatcher.startElement("mcs_TableDCI_0_2_r16", -1);

               int tval = PUSCH_Config_mcs_TableDCI_0_2_r16.decodeEnumValue (buffer);
               mcs_TableDCI_0_2_r16 = PUSCH_Config_mcs_TableDCI_0_2_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("mcs_TableDCI_0_2_r16", -1);
            }
            else {
               mcs_TableDCI_0_2_r16 = null;
            }

            // decode mcs_TableTransformPrecoderDCI_0_2_r16

            if (mcs_TableTransformPrecoderDCI_0_2_r16Present) {
               buffer.getContext().eventDispatcher.startElement("mcs_TableTransformPrecoderDCI_0_2_r16", -1);

               int tval = PUSCH_Config_mcs_TableTransformPrecoderDCI_0_2_r16.decodeEnumValue (buffer);
               mcs_TableTransformPrecoderDCI_0_2_r16 = PUSCH_Config_mcs_TableTransformPrecoderDCI_0_2_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("mcs_TableTransformPrecoderDCI_0_2_r16", -1);
            }
            else {
               mcs_TableTransformPrecoderDCI_0_2_r16 = null;
            }

            // decode priorityIndicatorDCI_0_2_r16

            if (priorityIndicatorDCI_0_2_r16Present) {
               buffer.getContext().eventDispatcher.startElement("priorityIndicatorDCI_0_2_r16", -1);

               int tval = PUSCH_Config_priorityIndicatorDCI_0_2_r16.decodeEnumValue (buffer);
               priorityIndicatorDCI_0_2_r16 = PUSCH_Config_priorityIndicatorDCI_0_2_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("priorityIndicatorDCI_0_2_r16", -1);
            }
            else {
               priorityIndicatorDCI_0_2_r16 = null;
            }

            // decode pusch_RepTypeIndicatorDCI_0_2_r16

            if (pusch_RepTypeIndicatorDCI_0_2_r16Present) {
               buffer.getContext().eventDispatcher.startElement("pusch_RepTypeIndicatorDCI_0_2_r16", -1);

               int tval = PUSCH_Config_pusch_RepTypeIndicatorDCI_0_2_r16.decodeEnumValue (buffer);
               pusch_RepTypeIndicatorDCI_0_2_r16 = PUSCH_Config_pusch_RepTypeIndicatorDCI_0_2_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("pusch_RepTypeIndicatorDCI_0_2_r16", -1);
            }
            else {
               pusch_RepTypeIndicatorDCI_0_2_r16 = null;
            }

            // decode resourceAllocationDCI_0_2_r16

            if (resourceAllocationDCI_0_2_r16Present) {
               buffer.getContext().eventDispatcher.startElement("resourceAllocationDCI_0_2_r16", -1);

               int tval = PUSCH_Config_resourceAllocationDCI_0_2_r16.decodeEnumValue (buffer);
               resourceAllocationDCI_0_2_r16 = PUSCH_Config_resourceAllocationDCI_0_2_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("resourceAllocationDCI_0_2_r16", -1);
            }
            else {
               resourceAllocationDCI_0_2_r16 = null;
            }

            // decode resourceAllocationType1GranularityDCI_0_2_r16

            if (resourceAllocationType1GranularityDCI_0_2_r16Present) {
               buffer.getContext().eventDispatcher.startElement("resourceAllocationType1GranularityDCI_0_2_r16", -1);

               int tval = PUSCH_Config_resourceAllocationType1GranularityDCI_0_2_r16.decodeEnumValue (buffer);
               resourceAllocationType1GranularityDCI_0_2_r16 = PUSCH_Config_resourceAllocationType1GranularityDCI_0_2_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("resourceAllocationType1GranularityDCI_0_2_r16", -1);
            }
            else {
               resourceAllocationType1GranularityDCI_0_2_r16 = null;
            }

            // decode uci_OnPUSCH_ListDCI_0_2_r16

            if (uci_OnPUSCH_ListDCI_0_2_r16Present) {
               buffer.getContext().eventDispatcher.startElement("uci_OnPUSCH_ListDCI_0_2_r16", -1);

               uci_OnPUSCH_ListDCI_0_2_r16 = new PUSCH_Config_uci_OnPUSCH_ListDCI_0_2_r16();
               uci_OnPUSCH_ListDCI_0_2_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("uci_OnPUSCH_ListDCI_0_2_r16", -1);
            }
            else {
               uci_OnPUSCH_ListDCI_0_2_r16 = null;
            }

            // decode pusch_TimeDomainAllocationListDCI_0_2_r16

            if (pusch_TimeDomainAllocationListDCI_0_2_r16Present) {
               buffer.getContext().eventDispatcher.startElement("pusch_TimeDomainAllocationListDCI_0_2_r16", -1);

               pusch_TimeDomainAllocationListDCI_0_2_r16 = new PUSCH_Config_pusch_TimeDomainAllocationListDCI_0_2_r16();
               pusch_TimeDomainAllocationListDCI_0_2_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("pusch_TimeDomainAllocationListDCI_0_2_r16", -1);
            }
            else {
               pusch_TimeDomainAllocationListDCI_0_2_r16 = null;
            }

            // decode pusch_TimeDomainAllocationListDCI_0_1_r16

            if (pusch_TimeDomainAllocationListDCI_0_1_r16Present) {
               buffer.getContext().eventDispatcher.startElement("pusch_TimeDomainAllocationListDCI_0_1_r16", -1);

               pusch_TimeDomainAllocationListDCI_0_1_r16 = new PUSCH_Config_pusch_TimeDomainAllocationListDCI_0_1_r16();
               pusch_TimeDomainAllocationListDCI_0_1_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("pusch_TimeDomainAllocationListDCI_0_1_r16", -1);
            }
            else {
               pusch_TimeDomainAllocationListDCI_0_1_r16 = null;
            }

            // decode invalidSymbolPatternIndicatorDCI_0_1_r16

            if (invalidSymbolPatternIndicatorDCI_0_1_r16Present) {
               buffer.getContext().eventDispatcher.startElement("invalidSymbolPatternIndicatorDCI_0_1_r16", -1);

               int tval = PUSCH_Config_invalidSymbolPatternIndicatorDCI_0_1_r16.decodeEnumValue (buffer);
               invalidSymbolPatternIndicatorDCI_0_1_r16 = PUSCH_Config_invalidSymbolPatternIndicatorDCI_0_1_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("invalidSymbolPatternIndicatorDCI_0_1_r16", -1);
            }
            else {
               invalidSymbolPatternIndicatorDCI_0_1_r16 = null;
            }

            // decode priorityIndicatorDCI_0_1_r16

            if (priorityIndicatorDCI_0_1_r16Present) {
               buffer.getContext().eventDispatcher.startElement("priorityIndicatorDCI_0_1_r16", -1);

               int tval = PUSCH_Config_priorityIndicatorDCI_0_1_r16.decodeEnumValue (buffer);
               priorityIndicatorDCI_0_1_r16 = PUSCH_Config_priorityIndicatorDCI_0_1_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("priorityIndicatorDCI_0_1_r16", -1);
            }
            else {
               priorityIndicatorDCI_0_1_r16 = null;
            }

            // decode pusch_RepTypeIndicatorDCI_0_1_r16

            if (pusch_RepTypeIndicatorDCI_0_1_r16Present) {
               buffer.getContext().eventDispatcher.startElement("pusch_RepTypeIndicatorDCI_0_1_r16", -1);

               int tval = PUSCH_Config_pusch_RepTypeIndicatorDCI_0_1_r16.decodeEnumValue (buffer);
               pusch_RepTypeIndicatorDCI_0_1_r16 = PUSCH_Config_pusch_RepTypeIndicatorDCI_0_1_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("pusch_RepTypeIndicatorDCI_0_1_r16", -1);
            }
            else {
               pusch_RepTypeIndicatorDCI_0_1_r16 = null;
            }

            // decode frequencyHoppingDCI_0_1_r16

            if (frequencyHoppingDCI_0_1_r16Present) {
               buffer.getContext().eventDispatcher.startElement("frequencyHoppingDCI_0_1_r16", -1);

               int tval = PUSCH_Config_frequencyHoppingDCI_0_1_r16.decodeEnumValue (buffer);
               frequencyHoppingDCI_0_1_r16 = PUSCH_Config_frequencyHoppingDCI_0_1_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("frequencyHoppingDCI_0_1_r16", -1);
            }
            else {
               frequencyHoppingDCI_0_1_r16 = null;
            }

            // decode uci_OnPUSCH_ListDCI_0_1_r16

            if (uci_OnPUSCH_ListDCI_0_1_r16Present) {
               buffer.getContext().eventDispatcher.startElement("uci_OnPUSCH_ListDCI_0_1_r16", -1);

               uci_OnPUSCH_ListDCI_0_1_r16 = new PUSCH_Config_uci_OnPUSCH_ListDCI_0_1_r16();
               uci_OnPUSCH_ListDCI_0_1_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("uci_OnPUSCH_ListDCI_0_1_r16", -1);
            }
            else {
               uci_OnPUSCH_ListDCI_0_1_r16 = null;
            }

            // decode invalidSymbolPattern_r16

            if (invalidSymbolPattern_r16Present) {
               buffer.getContext().eventDispatcher.startElement("invalidSymbolPattern_r16", -1);

               invalidSymbolPattern_r16 = new InvalidSymbolPattern_r16();
               invalidSymbolPattern_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("invalidSymbolPattern_r16", -1);
            }
            else {
               invalidSymbolPattern_r16 = null;
            }

            // decode pusch_PowerControl_v1610

            if (pusch_PowerControl_v1610Present) {
               buffer.getContext().eventDispatcher.startElement("pusch_PowerControl_v1610", -1);

               pusch_PowerControl_v1610 = new PUSCH_Config_pusch_PowerControl_v1610();
               pusch_PowerControl_v1610.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("pusch_PowerControl_v1610", -1);
            }
            else {
               pusch_PowerControl_v1610 = null;
            }

            // decode ul_FullPowerTransmission_r16

            if (ul_FullPowerTransmission_r16Present) {
               buffer.getContext().eventDispatcher.startElement("ul_FullPowerTransmission_r16", -1);

               int tval = PUSCH_Config_ul_FullPowerTransmission_r16.decodeEnumValue (buffer);
               ul_FullPowerTransmission_r16 = PUSCH_Config_ul_FullPowerTransmission_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("ul_FullPowerTransmission_r16", -1);
            }
            else {
               ul_FullPowerTransmission_r16 = null;
            }

            // decode pusch_TimeDomainAllocationListForMultiPUSCH_r16

            if (pusch_TimeDomainAllocationListForMultiPUSCH_r16Present) {
               buffer.getContext().eventDispatcher.startElement("pusch_TimeDomainAllocationListForMultiPUSCH_r16", -1);

               pusch_TimeDomainAllocationListForMultiPUSCH_r16 = new PUSCH_Config_pusch_TimeDomainAllocationListForMultiPUSCH_r16();
               pusch_TimeDomainAllocationListForMultiPUSCH_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("pusch_TimeDomainAllocationListForMultiPUSCH_r16", -1);
            }
            else {
               pusch_TimeDomainAllocationListForMultiPUSCH_r16 = null;
            }

            // decode numberOfInvalidSymbolsForDL_UL_Switching_r16

            if (numberOfInvalidSymbolsForDL_UL_Switching_r16Present) {
               buffer.getContext().eventDispatcher.startElement("numberOfInvalidSymbolsForDL_UL_Switching_r16", -1);

               numberOfInvalidSymbolsForDL_UL_Switching_r16 = new Asn1Integer();
               numberOfInvalidSymbolsForDL_UL_Switching_r16.decode (buffer, 1, 4);

               buffer.invokeCharacters(numberOfInvalidSymbolsForDL_UL_Switching_r16.toString());
               buffer.getContext().eventDispatcher.endElement("numberOfInvalidSymbolsForDL_UL_Switching_r16", -1);
            }
            else {
               numberOfInvalidSymbolsForDL_UL_Switching_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (dataScramblingIdentityPUSCH != null) dataScramblingIdentityPUSCH.print (_sb, "dataScramblingIdentityPUSCH", _level+1);
      if (txConfig != null) txConfig.print (_sb, "txConfig", _level+1);
      if (dmrs_UplinkForPUSCH_MappingTypeA != null) dmrs_UplinkForPUSCH_MappingTypeA.print (_sb, "dmrs_UplinkForPUSCH_MappingTypeA", _level+1);
      if (dmrs_UplinkForPUSCH_MappingTypeB != null) dmrs_UplinkForPUSCH_MappingTypeB.print (_sb, "dmrs_UplinkForPUSCH_MappingTypeB", _level+1);
      if (pusch_PowerControl != null) pusch_PowerControl.print (_sb, "pusch_PowerControl", _level+1);
      if (frequencyHopping != null) frequencyHopping.print (_sb, "frequencyHopping", _level+1);
      if (frequencyHoppingOffsetLists != null) frequencyHoppingOffsetLists.print (_sb, "frequencyHoppingOffsetLists", _level+1);
      if (resourceAllocation != null) resourceAllocation.print (_sb, "resourceAllocation", _level+1);
      if (pusch_TimeDomainAllocationList != null) pusch_TimeDomainAllocationList.print (_sb, "pusch_TimeDomainAllocationList", _level+1);
      if (pusch_AggregationFactor != null) pusch_AggregationFactor.print (_sb, "pusch_AggregationFactor", _level+1);
      if (mcs_Table != null) mcs_Table.print (_sb, "mcs_Table", _level+1);
      if (mcs_TableTransformPrecoder != null) mcs_TableTransformPrecoder.print (_sb, "mcs_TableTransformPrecoder", _level+1);
      if (transformPrecoder != null) transformPrecoder.print (_sb, "transformPrecoder", _level+1);
      if (codebookSubset != null) codebookSubset.print (_sb, "codebookSubset", _level+1);
      if (maxRank != null) maxRank.print (_sb, "maxRank", _level+1);
      if (rbg_Size != null) rbg_Size.print (_sb, "rbg_Size", _level+1);
      if (uci_OnPUSCH != null) uci_OnPUSCH.print (_sb, "uci_OnPUSCH", _level+1);
      if (tp_pi2BPSK != null) tp_pi2BPSK.print (_sb, "tp_pi2BPSK", _level+1);
      if (minimumSchedulingOffsetK2_r16 != null) minimumSchedulingOffsetK2_r16.print (_sb, "minimumSchedulingOffsetK2_r16", _level+1);
      if (ul_AccessConfigListDCI_0_1_r16 != null) ul_AccessConfigListDCI_0_1_r16.print (_sb, "ul_AccessConfigListDCI_0_1_r16", _level+1);
      if (harq_ProcessNumberSizeDCI_0_2_r16 != null) harq_ProcessNumberSizeDCI_0_2_r16.print (_sb, "harq_ProcessNumberSizeDCI_0_2_r16", _level+1);
      if (dmrs_SequenceInitializationDCI_0_2_r16 != null) dmrs_SequenceInitializationDCI_0_2_r16.print (_sb, "dmrs_SequenceInitializationDCI_0_2_r16", _level+1);
      if (numberOfBitsForRV_DCI_0_2_r16 != null) numberOfBitsForRV_DCI_0_2_r16.print (_sb, "numberOfBitsForRV_DCI_0_2_r16", _level+1);
      if (antennaPortsFieldPresenceDCI_0_2_r16 != null) antennaPortsFieldPresenceDCI_0_2_r16.print (_sb, "antennaPortsFieldPresenceDCI_0_2_r16", _level+1);
      if (dmrs_UplinkForPUSCH_MappingTypeA_DCI_0_2_r16 != null) dmrs_UplinkForPUSCH_MappingTypeA_DCI_0_2_r16.print (_sb, "dmrs_UplinkForPUSCH_MappingTypeA_DCI_0_2_r16", _level+1);
      if (dmrs_UplinkForPUSCH_MappingTypeB_DCI_0_2_r16 != null) dmrs_UplinkForPUSCH_MappingTypeB_DCI_0_2_r16.print (_sb, "dmrs_UplinkForPUSCH_MappingTypeB_DCI_0_2_r16", _level+1);
      if (frequencyHoppingDCI_0_2_r16 != null) frequencyHoppingDCI_0_2_r16.print (_sb, "frequencyHoppingDCI_0_2_r16", _level+1);
      if (frequencyHoppingOffsetListsDCI_0_2_r16 != null) frequencyHoppingOffsetListsDCI_0_2_r16.print (_sb, "frequencyHoppingOffsetListsDCI_0_2_r16", _level+1);
      if (codebookSubsetDCI_0_2_r16 != null) codebookSubsetDCI_0_2_r16.print (_sb, "codebookSubsetDCI_0_2_r16", _level+1);
      if (invalidSymbolPatternIndicatorDCI_0_2_r16 != null) invalidSymbolPatternIndicatorDCI_0_2_r16.print (_sb, "invalidSymbolPatternIndicatorDCI_0_2_r16", _level+1);
      if (maxRankDCI_0_2_r16 != null) maxRankDCI_0_2_r16.print (_sb, "maxRankDCI_0_2_r16", _level+1);
      if (mcs_TableDCI_0_2_r16 != null) mcs_TableDCI_0_2_r16.print (_sb, "mcs_TableDCI_0_2_r16", _level+1);
      if (mcs_TableTransformPrecoderDCI_0_2_r16 != null) mcs_TableTransformPrecoderDCI_0_2_r16.print (_sb, "mcs_TableTransformPrecoderDCI_0_2_r16", _level+1);
      if (priorityIndicatorDCI_0_2_r16 != null) priorityIndicatorDCI_0_2_r16.print (_sb, "priorityIndicatorDCI_0_2_r16", _level+1);
      if (pusch_RepTypeIndicatorDCI_0_2_r16 != null) pusch_RepTypeIndicatorDCI_0_2_r16.print (_sb, "pusch_RepTypeIndicatorDCI_0_2_r16", _level+1);
      if (resourceAllocationDCI_0_2_r16 != null) resourceAllocationDCI_0_2_r16.print (_sb, "resourceAllocationDCI_0_2_r16", _level+1);
      if (resourceAllocationType1GranularityDCI_0_2_r16 != null) resourceAllocationType1GranularityDCI_0_2_r16.print (_sb, "resourceAllocationType1GranularityDCI_0_2_r16", _level+1);
      if (uci_OnPUSCH_ListDCI_0_2_r16 != null) uci_OnPUSCH_ListDCI_0_2_r16.print (_sb, "uci_OnPUSCH_ListDCI_0_2_r16", _level+1);
      if (pusch_TimeDomainAllocationListDCI_0_2_r16 != null) pusch_TimeDomainAllocationListDCI_0_2_r16.print (_sb, "pusch_TimeDomainAllocationListDCI_0_2_r16", _level+1);
      if (pusch_TimeDomainAllocationListDCI_0_1_r16 != null) pusch_TimeDomainAllocationListDCI_0_1_r16.print (_sb, "pusch_TimeDomainAllocationListDCI_0_1_r16", _level+1);
      if (invalidSymbolPatternIndicatorDCI_0_1_r16 != null) invalidSymbolPatternIndicatorDCI_0_1_r16.print (_sb, "invalidSymbolPatternIndicatorDCI_0_1_r16", _level+1);
      if (priorityIndicatorDCI_0_1_r16 != null) priorityIndicatorDCI_0_1_r16.print (_sb, "priorityIndicatorDCI_0_1_r16", _level+1);
      if (pusch_RepTypeIndicatorDCI_0_1_r16 != null) pusch_RepTypeIndicatorDCI_0_1_r16.print (_sb, "pusch_RepTypeIndicatorDCI_0_1_r16", _level+1);
      if (frequencyHoppingDCI_0_1_r16 != null) frequencyHoppingDCI_0_1_r16.print (_sb, "frequencyHoppingDCI_0_1_r16", _level+1);
      if (uci_OnPUSCH_ListDCI_0_1_r16 != null) uci_OnPUSCH_ListDCI_0_1_r16.print (_sb, "uci_OnPUSCH_ListDCI_0_1_r16", _level+1);
      if (invalidSymbolPattern_r16 != null) invalidSymbolPattern_r16.print (_sb, "invalidSymbolPattern_r16", _level+1);
      if (pusch_PowerControl_v1610 != null) pusch_PowerControl_v1610.print (_sb, "pusch_PowerControl_v1610", _level+1);
      if (ul_FullPowerTransmission_r16 != null) ul_FullPowerTransmission_r16.print (_sb, "ul_FullPowerTransmission_r16", _level+1);
      if (pusch_TimeDomainAllocationListForMultiPUSCH_r16 != null) pusch_TimeDomainAllocationListForMultiPUSCH_r16.print (_sb, "pusch_TimeDomainAllocationListForMultiPUSCH_r16", _level+1);
      if (numberOfInvalidSymbolsForDL_UL_Switching_r16 != null) numberOfInvalidSymbolsForDL_UL_Switching_r16.print (_sb, "numberOfInvalidSymbolsForDL_UL_Switching_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
