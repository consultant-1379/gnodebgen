/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.LPPA_IEs;

import com.objsys.asn1j.runtime.*;

public class E_CID_MeasurementResult extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPPA_IEsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "E-CID-MeasurementResult";
   }

   public ECGI servingCell_ID;
   public TAC servingCellTAC;
   public E_UTRANAccessPointPosition e_UTRANAccessPointPosition;  // optional
   public MeasuredResults measuredResults;  // optional
   public Asn1OpenExt extElem1;

   public E_CID_MeasurementResult () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public E_CID_MeasurementResult (
      ECGI servingCell_ID_,
      TAC servingCellTAC_,
      E_UTRANAccessPointPosition e_UTRANAccessPointPosition_,
      MeasuredResults measuredResults_
   ) {
      super();
      servingCell_ID = servingCell_ID_;
      servingCellTAC = servingCellTAC_;
      e_UTRANAccessPointPosition = e_UTRANAccessPointPosition_;
      measuredResults = measuredResults_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public E_CID_MeasurementResult (
      ECGI servingCell_ID_,
      TAC servingCellTAC_
   ) {
      super();
      servingCell_ID = servingCell_ID_;
      servingCellTAC = servingCellTAC_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public E_CID_MeasurementResult (ECGI servingCell_ID_,
      byte[] servingCellTAC_,
      E_UTRANAccessPointPosition e_UTRANAccessPointPosition_,
      MeasuredResults measuredResults_
   ) {
      super();
      servingCell_ID = servingCell_ID_;
      servingCellTAC = new TAC (servingCellTAC_);
      e_UTRANAccessPointPosition = e_UTRANAccessPointPosition_;
      measuredResults = measuredResults_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public E_CID_MeasurementResult (
      ECGI servingCell_ID_,
      byte[] servingCellTAC_
   ) {
      super();
      servingCell_ID = servingCell_ID_;
      servingCellTAC = new TAC (servingCellTAC_);
   }

   public void init () {
      servingCell_ID = null;
      servingCellTAC = null;
      e_UTRANAccessPointPosition = null;
      measuredResults = null;
      extElem1 = null;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return servingCell_ID;
         case 1: return servingCellTAC;
         case 2: return e_UTRANAccessPointPosition;
         case 3: return measuredResults;
         case 4: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "servingCell-ID";
         case 1: return "servingCellTAC";
         case 2: return "e-UTRANAccessPointPosition";
         case 3: return "measuredResults";
         case 4: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean e_UTRANAccessPointPositionPresent = buffer.decodeBit ("e_UTRANAccessPointPositionPresent");
      boolean measuredResultsPresent = buffer.decodeBit ("measuredResultsPresent");

      // decode servingCell_ID

      buffer.getContext().eventDispatcher.startElement("servingCell_ID", -1);

      servingCell_ID = new ECGI();
      servingCell_ID.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("servingCell_ID", -1);

      // decode servingCellTAC

      buffer.getContext().eventDispatcher.startElement("servingCellTAC", -1);

      servingCellTAC = new TAC();
      servingCellTAC.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("servingCellTAC", -1);

      // decode e_UTRANAccessPointPosition

      if (e_UTRANAccessPointPositionPresent) {
         buffer.getContext().eventDispatcher.startElement("e_UTRANAccessPointPosition", -1);

         e_UTRANAccessPointPosition = new E_UTRANAccessPointPosition();
         e_UTRANAccessPointPosition.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("e_UTRANAccessPointPosition", -1);
      }
      else {
         e_UTRANAccessPointPosition = null;
      }

      // decode measuredResults

      if (measuredResultsPresent) {
         buffer.getContext().eventDispatcher.startElement("measuredResults", -1);

         measuredResults = new MeasuredResults();
         measuredResults.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("measuredResults", -1);
      }
      else {
         measuredResults = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (servingCell_ID != null) servingCell_ID.print (_sb, "servingCell_ID", _level+1);
      if (servingCellTAC != null) servingCellTAC.print (_sb, "servingCellTAC", _level+1);
      if (e_UTRANAccessPointPosition != null) e_UTRANAccessPointPosition.print (_sb, "e_UTRANAccessPointPosition", _level+1);
      if (measuredResults != null) measuredResults.print (_sb, "measuredResults", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
