/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MeasIdleCarrierEUTRA_r15_qualityThreshold_r15 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public RSRP_Range idleRSRP_Threshold_r15;  // optional
   public RSRQ_Range_r13 idleRSRQ_Threshold_r15;  // optional

   public MeasIdleCarrierEUTRA_r15_qualityThreshold_r15 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MeasIdleCarrierEUTRA_r15_qualityThreshold_r15 (
      RSRP_Range idleRSRP_Threshold_r15_,
      RSRQ_Range_r13 idleRSRQ_Threshold_r15_
   ) {
      super();
      idleRSRP_Threshold_r15 = idleRSRP_Threshold_r15_;
      idleRSRQ_Threshold_r15 = idleRSRQ_Threshold_r15_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public MeasIdleCarrierEUTRA_r15_qualityThreshold_r15 (long idleRSRP_Threshold_r15_,
      long idleRSRQ_Threshold_r15_
   ) {
      super();
      idleRSRP_Threshold_r15 = new RSRP_Range (idleRSRP_Threshold_r15_);
      idleRSRQ_Threshold_r15 = new RSRQ_Range_r13 (idleRSRQ_Threshold_r15_);
   }

   public void init () {
      idleRSRP_Threshold_r15 = null;
      idleRSRQ_Threshold_r15 = null;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return idleRSRP_Threshold_r15;
         case 1: return idleRSRQ_Threshold_r15;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "idleRSRP-Threshold-r15";
         case 1: return "idleRSRQ-Threshold-r15";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean idleRSRP_Threshold_r15Present = buffer.decodeBit ("idleRSRP_Threshold_r15Present");
      boolean idleRSRQ_Threshold_r15Present = buffer.decodeBit ("idleRSRQ_Threshold_r15Present");

      // decode idleRSRP_Threshold_r15

      if (idleRSRP_Threshold_r15Present) {
         buffer.getContext().eventDispatcher.startElement("idleRSRP_Threshold_r15", -1);

         idleRSRP_Threshold_r15 = new RSRP_Range();
         idleRSRP_Threshold_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("idleRSRP_Threshold_r15", -1);
      }
      else {
         idleRSRP_Threshold_r15 = null;
      }

      // decode idleRSRQ_Threshold_r15

      if (idleRSRQ_Threshold_r15Present) {
         buffer.getContext().eventDispatcher.startElement("idleRSRQ_Threshold_r15", -1);

         idleRSRQ_Threshold_r15 = new RSRQ_Range_r13();
         idleRSRQ_Threshold_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("idleRSRQ_Threshold_r15", -1);
      }
      else {
         idleRSRQ_Threshold_r15 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (idleRSRP_Threshold_r15 != null) idleRSRP_Threshold_r15.print (_sb, "idleRSRP_Threshold_r15", _level+1);
      if (idleRSRQ_Threshold_r15 != null) idleRSRQ_Threshold_r15.print (_sb, "idleRSRQ_Threshold_r15", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
