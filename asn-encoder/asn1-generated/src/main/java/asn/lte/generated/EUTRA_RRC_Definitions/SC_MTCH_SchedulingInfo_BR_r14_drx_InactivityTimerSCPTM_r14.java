/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SC_MTCH_SchedulingInfo_BR_r14_drx_InactivityTimerSCPTM_r14 extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ENUMERATED";
   }

   // Integer constants for switch-case
   public static final int _PSF0 = 0;
   public static final int _PSF1 = 1;
   public static final int _PSF2 = 2;
   public static final int _PSF4 = 3;
   public static final int _PSF8 = 4;
   public static final int _PSF16 = 5;
   public static final int _PSF32 = 6;
   public static final int _PSF64 = 7;
   public static final int _PSF128 = 8;
   public static final int _PSF256 = 9;
   public static final int _PS512 = 10;
   public static final int _PSF1024 = 11;
   public static final int _PSF2048 = 12;
   public static final int _PSF4096 = 13;
   public static final int _PSF8192 = 14;
   public static final int _PSF16384 = 15;

   // Singleton instances of SC_MTCH_SchedulingInfo_BR_r14_drx_InactivityTimerSCPTM_r14
   protected static final SC_MTCH_SchedulingInfo_BR_r14_drx_InactivityTimerSCPTM_r14 _psf0 = new SC_MTCH_SchedulingInfo_BR_r14_drx_InactivityTimerSCPTM_r14(0);
   protected static final SC_MTCH_SchedulingInfo_BR_r14_drx_InactivityTimerSCPTM_r14 _psf1 = new SC_MTCH_SchedulingInfo_BR_r14_drx_InactivityTimerSCPTM_r14(1);
   protected static final SC_MTCH_SchedulingInfo_BR_r14_drx_InactivityTimerSCPTM_r14 _psf2 = new SC_MTCH_SchedulingInfo_BR_r14_drx_InactivityTimerSCPTM_r14(2);
   protected static final SC_MTCH_SchedulingInfo_BR_r14_drx_InactivityTimerSCPTM_r14 _psf4 = new SC_MTCH_SchedulingInfo_BR_r14_drx_InactivityTimerSCPTM_r14(3);
   protected static final SC_MTCH_SchedulingInfo_BR_r14_drx_InactivityTimerSCPTM_r14 _psf8 = new SC_MTCH_SchedulingInfo_BR_r14_drx_InactivityTimerSCPTM_r14(4);
   protected static final SC_MTCH_SchedulingInfo_BR_r14_drx_InactivityTimerSCPTM_r14 _psf16 = new SC_MTCH_SchedulingInfo_BR_r14_drx_InactivityTimerSCPTM_r14(5);
   protected static final SC_MTCH_SchedulingInfo_BR_r14_drx_InactivityTimerSCPTM_r14 _psf32 = new SC_MTCH_SchedulingInfo_BR_r14_drx_InactivityTimerSCPTM_r14(6);
   protected static final SC_MTCH_SchedulingInfo_BR_r14_drx_InactivityTimerSCPTM_r14 _psf64 = new SC_MTCH_SchedulingInfo_BR_r14_drx_InactivityTimerSCPTM_r14(7);
   protected static final SC_MTCH_SchedulingInfo_BR_r14_drx_InactivityTimerSCPTM_r14 _psf128 = new SC_MTCH_SchedulingInfo_BR_r14_drx_InactivityTimerSCPTM_r14(8);
   protected static final SC_MTCH_SchedulingInfo_BR_r14_drx_InactivityTimerSCPTM_r14 _psf256 = new SC_MTCH_SchedulingInfo_BR_r14_drx_InactivityTimerSCPTM_r14(9);
   protected static final SC_MTCH_SchedulingInfo_BR_r14_drx_InactivityTimerSCPTM_r14 _ps512 = new SC_MTCH_SchedulingInfo_BR_r14_drx_InactivityTimerSCPTM_r14(10);
   protected static final SC_MTCH_SchedulingInfo_BR_r14_drx_InactivityTimerSCPTM_r14 _psf1024 = new SC_MTCH_SchedulingInfo_BR_r14_drx_InactivityTimerSCPTM_r14(11);
   protected static final SC_MTCH_SchedulingInfo_BR_r14_drx_InactivityTimerSCPTM_r14 _psf2048 = new SC_MTCH_SchedulingInfo_BR_r14_drx_InactivityTimerSCPTM_r14(12);
   protected static final SC_MTCH_SchedulingInfo_BR_r14_drx_InactivityTimerSCPTM_r14 _psf4096 = new SC_MTCH_SchedulingInfo_BR_r14_drx_InactivityTimerSCPTM_r14(13);
   protected static final SC_MTCH_SchedulingInfo_BR_r14_drx_InactivityTimerSCPTM_r14 _psf8192 = new SC_MTCH_SchedulingInfo_BR_r14_drx_InactivityTimerSCPTM_r14(14);
   protected static final SC_MTCH_SchedulingInfo_BR_r14_drx_InactivityTimerSCPTM_r14 _psf16384 = new SC_MTCH_SchedulingInfo_BR_r14_drx_InactivityTimerSCPTM_r14(15);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    *   7
    *   8
    *   9
    *   10
    *   11
    *   12
    *   13
    *   14
    *   15
    */
   protected SC_MTCH_SchedulingInfo_BR_r14_drx_InactivityTimerSCPTM_r14 (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for psf0.
    */
   public static SC_MTCH_SchedulingInfo_BR_r14_drx_InactivityTimerSCPTM_r14 psf0() {
      return _psf0;
   }

   /**
    * Singleton accessor method for psf1.
    */
   public static SC_MTCH_SchedulingInfo_BR_r14_drx_InactivityTimerSCPTM_r14 psf1() {
      return _psf1;
   }

   /**
    * Singleton accessor method for psf2.
    */
   public static SC_MTCH_SchedulingInfo_BR_r14_drx_InactivityTimerSCPTM_r14 psf2() {
      return _psf2;
   }

   /**
    * Singleton accessor method for psf4.
    */
   public static SC_MTCH_SchedulingInfo_BR_r14_drx_InactivityTimerSCPTM_r14 psf4() {
      return _psf4;
   }

   /**
    * Singleton accessor method for psf8.
    */
   public static SC_MTCH_SchedulingInfo_BR_r14_drx_InactivityTimerSCPTM_r14 psf8() {
      return _psf8;
   }

   /**
    * Singleton accessor method for psf16.
    */
   public static SC_MTCH_SchedulingInfo_BR_r14_drx_InactivityTimerSCPTM_r14 psf16() {
      return _psf16;
   }

   /**
    * Singleton accessor method for psf32.
    */
   public static SC_MTCH_SchedulingInfo_BR_r14_drx_InactivityTimerSCPTM_r14 psf32() {
      return _psf32;
   }

   /**
    * Singleton accessor method for psf64.
    */
   public static SC_MTCH_SchedulingInfo_BR_r14_drx_InactivityTimerSCPTM_r14 psf64() {
      return _psf64;
   }

   /**
    * Singleton accessor method for psf128.
    */
   public static SC_MTCH_SchedulingInfo_BR_r14_drx_InactivityTimerSCPTM_r14 psf128() {
      return _psf128;
   }

   /**
    * Singleton accessor method for psf256.
    */
   public static SC_MTCH_SchedulingInfo_BR_r14_drx_InactivityTimerSCPTM_r14 psf256() {
      return _psf256;
   }

   /**
    * Singleton accessor method for ps512.
    */
   public static SC_MTCH_SchedulingInfo_BR_r14_drx_InactivityTimerSCPTM_r14 ps512() {
      return _ps512;
   }

   /**
    * Singleton accessor method for psf1024.
    */
   public static SC_MTCH_SchedulingInfo_BR_r14_drx_InactivityTimerSCPTM_r14 psf1024() {
      return _psf1024;
   }

   /**
    * Singleton accessor method for psf2048.
    */
   public static SC_MTCH_SchedulingInfo_BR_r14_drx_InactivityTimerSCPTM_r14 psf2048() {
      return _psf2048;
   }

   /**
    * Singleton accessor method for psf4096.
    */
   public static SC_MTCH_SchedulingInfo_BR_r14_drx_InactivityTimerSCPTM_r14 psf4096() {
      return _psf4096;
   }

   /**
    * Singleton accessor method for psf8192.
    */
   public static SC_MTCH_SchedulingInfo_BR_r14_drx_InactivityTimerSCPTM_r14 psf8192() {
      return _psf8192;
   }

   /**
    * Singleton accessor method for psf16384.
    */
   public static SC_MTCH_SchedulingInfo_BR_r14_drx_InactivityTimerSCPTM_r14 psf16384() {
      return _psf16384;
   }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return SC_MTCH_SchedulingInfo_BR_r14_drx_InactivityTimerSCPTM_r14.valueOf( SC_MTCH_SchedulingInfo_BR_r14_drx_InactivityTimerSCPTM_r14.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static SC_MTCH_SchedulingInfo_BR_r14_drx_InactivityTimerSCPTM_r14 valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 0: return psf0();
         case 1: return psf1();
         case 2: return psf2();
         case 3: return psf4();
         case 4: return psf8();
         case 5: return psf16();
         case 6: return psf32();
         case 7: return psf64();
         case 8: return psf128();
         case 9: return psf256();
         case 10: return ps512();
         case 11: return psf1024();
         case 12: return psf2048();
         case 13: return psf4096();
         case 14: return psf8192();
         case 15: return psf16384();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      ui = (int) buffer.decodeConsWholeNumber (16);

      switch (ui) {
         case 0: ret =  0; break;
         case 1: ret =  1; break;
         case 2: ret =  2; break;
         case 3: ret =  3; break;
         case 4: ret =  4; break;
         case 5: ret =  5; break;
         case 6: ret =  6; break;
         case 7: ret =  7; break;
         case 8: ret =  8; break;
         case 9: ret =  9; break;
         case 10: ret =  10; break;
         case 11: ret =  11; break;
         case 12: ret =  12; break;
         case 13: ret =  13; break;
         case 14: ret =  14; break;
         case 15: ret =  15; break;
         default: throw new Asn1InvalidEnumException (ui);
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (SC_MTCH_SchedulingInfo_BR_r14_drx_InactivityTimerSCPTM_r14.valueOf(ret).toString());

      return ret;
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("psf0");
         case 1: return ("psf1");
         case 2: return ("psf2");
         case 3: return ("psf4");
         case 4: return ("psf8");
         case 5: return ("psf16");
         case 6: return ("psf32");
         case 7: return ("psf64");
         case 8: return ("psf128");
         case 9: return ("psf256");
         case 10: return ("ps512");
         case 11: return ("psf1024");
         case 12: return ("psf2048");
         case 13: return ("psf4096");
         case 14: return ("psf8192");
         case 15: return ("psf16384");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
