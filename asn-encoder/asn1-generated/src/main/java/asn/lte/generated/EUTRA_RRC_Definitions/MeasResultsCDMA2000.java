/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MeasResultsCDMA2000 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "MeasResultsCDMA2000";
   }

   public Asn1Boolean preRegistrationStatusHRPD;
   public MeasResultListCDMA2000 measResultListCDMA2000;

   public MeasResultsCDMA2000 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MeasResultsCDMA2000 (
      Asn1Boolean preRegistrationStatusHRPD_,
      MeasResultListCDMA2000 measResultListCDMA2000_
   ) {
      super();
      preRegistrationStatusHRPD = preRegistrationStatusHRPD_;
      measResultListCDMA2000 = measResultListCDMA2000_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public MeasResultsCDMA2000 (boolean preRegistrationStatusHRPD_,
      MeasResultListCDMA2000 measResultListCDMA2000_
   ) {
      super();
      preRegistrationStatusHRPD = new Asn1Boolean (preRegistrationStatusHRPD_);
      measResultListCDMA2000 = measResultListCDMA2000_;
   }

   public void init () {
      preRegistrationStatusHRPD = null;
      measResultListCDMA2000 = null;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return preRegistrationStatusHRPD;
         case 1: return measResultListCDMA2000;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "preRegistrationStatusHRPD";
         case 1: return "measResultListCDMA2000";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode preRegistrationStatusHRPD

      buffer.getContext().eventDispatcher.startElement("preRegistrationStatusHRPD", -1);

      preRegistrationStatusHRPD = new Asn1Boolean();
      preRegistrationStatusHRPD.decode (buffer);

      buffer.invokeCharacters(preRegistrationStatusHRPD.toString());
      buffer.getContext().eventDispatcher.endElement("preRegistrationStatusHRPD", -1);

      // decode measResultListCDMA2000

      buffer.getContext().eventDispatcher.startElement("measResultListCDMA2000", -1);

      measResultListCDMA2000 = new MeasResultListCDMA2000();
      measResultListCDMA2000.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("measResultListCDMA2000", -1);

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (preRegistrationStatusHRPD != null) preRegistrationStatusHRPD.print (_sb, "preRegistrationStatusHRPD", _level+1);
      if (measResultListCDMA2000 != null) measResultListCDMA2000.print (_sb, "measResultListCDMA2000", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
