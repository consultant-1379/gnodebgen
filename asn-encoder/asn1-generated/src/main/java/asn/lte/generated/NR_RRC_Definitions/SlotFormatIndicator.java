/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SlotFormatIndicator extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SlotFormatIndicator";
   }

   public RNTI_Value sfi_RNTI;
   public Asn1Integer dci_PayloadSize;
   public SlotFormatIndicator_slotFormatCombToAddModList slotFormatCombToAddModList;  // optional
   public SlotFormatIndicator_slotFormatCombToReleaseList slotFormatCombToReleaseList;  // optional
   public boolean mV2ExtPresent;
   public SlotFormatIndicator_availableRB_SetsToAddModList_r16 availableRB_SetsToAddModList_r16;  // optional
   public SlotFormatIndicator_availableRB_SetsToRelease_r16 availableRB_SetsToRelease_r16;  // optional
   public SlotFormatIndicator_switchTriggerToAddModList_r16 switchTriggerToAddModList_r16;  // optional
   public SlotFormatIndicator_switchTriggerToReleaseList_r16 switchTriggerToReleaseList_r16;  // optional
   public SlotFormatIndicator_co_DurationsPerCellToAddModList_r16 co_DurationsPerCellToAddModList_r16;  // optional
   public SlotFormatIndicator_co_DurationsPerCellToReleaseList_r16 co_DurationsPerCellToReleaseList_r16;  // optional
   public Asn1OpenExt extElem1;

   public SlotFormatIndicator () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SlotFormatIndicator (
      RNTI_Value sfi_RNTI_,
      Asn1Integer dci_PayloadSize_,
      SlotFormatIndicator_slotFormatCombToAddModList slotFormatCombToAddModList_,
      SlotFormatIndicator_slotFormatCombToReleaseList slotFormatCombToReleaseList_,
      SlotFormatIndicator_availableRB_SetsToAddModList_r16 availableRB_SetsToAddModList_r16_,
      SlotFormatIndicator_availableRB_SetsToRelease_r16 availableRB_SetsToRelease_r16_,
      SlotFormatIndicator_switchTriggerToAddModList_r16 switchTriggerToAddModList_r16_,
      SlotFormatIndicator_switchTriggerToReleaseList_r16 switchTriggerToReleaseList_r16_,
      SlotFormatIndicator_co_DurationsPerCellToAddModList_r16 co_DurationsPerCellToAddModList_r16_,
      SlotFormatIndicator_co_DurationsPerCellToReleaseList_r16 co_DurationsPerCellToReleaseList_r16_
   ) {
      super();
      sfi_RNTI = sfi_RNTI_;
      dci_PayloadSize = dci_PayloadSize_;
      slotFormatCombToAddModList = slotFormatCombToAddModList_;
      slotFormatCombToReleaseList = slotFormatCombToReleaseList_;
      availableRB_SetsToAddModList_r16 = availableRB_SetsToAddModList_r16_;
      availableRB_SetsToRelease_r16 = availableRB_SetsToRelease_r16_;
      switchTriggerToAddModList_r16 = switchTriggerToAddModList_r16_;
      switchTriggerToReleaseList_r16 = switchTriggerToReleaseList_r16_;
      co_DurationsPerCellToAddModList_r16 = co_DurationsPerCellToAddModList_r16_;
      co_DurationsPerCellToReleaseList_r16 = co_DurationsPerCellToReleaseList_r16_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SlotFormatIndicator (
      RNTI_Value sfi_RNTI_,
      Asn1Integer dci_PayloadSize_
   ) {
      super();
      sfi_RNTI = sfi_RNTI_;
      dci_PayloadSize = dci_PayloadSize_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SlotFormatIndicator (long sfi_RNTI_,
      long dci_PayloadSize_,
      SlotFormatIndicator_slotFormatCombToAddModList slotFormatCombToAddModList_,
      SlotFormatIndicator_slotFormatCombToReleaseList slotFormatCombToReleaseList_,
      SlotFormatIndicator_availableRB_SetsToAddModList_r16 availableRB_SetsToAddModList_r16_,
      SlotFormatIndicator_availableRB_SetsToRelease_r16 availableRB_SetsToRelease_r16_,
      SlotFormatIndicator_switchTriggerToAddModList_r16 switchTriggerToAddModList_r16_,
      SlotFormatIndicator_switchTriggerToReleaseList_r16 switchTriggerToReleaseList_r16_,
      SlotFormatIndicator_co_DurationsPerCellToAddModList_r16 co_DurationsPerCellToAddModList_r16_,
      SlotFormatIndicator_co_DurationsPerCellToReleaseList_r16 co_DurationsPerCellToReleaseList_r16_
   ) {
      super();
      sfi_RNTI = new RNTI_Value (sfi_RNTI_);
      dci_PayloadSize = new Asn1Integer (dci_PayloadSize_);
      slotFormatCombToAddModList = slotFormatCombToAddModList_;
      slotFormatCombToReleaseList = slotFormatCombToReleaseList_;
      availableRB_SetsToAddModList_r16 = availableRB_SetsToAddModList_r16_;
      availableRB_SetsToRelease_r16 = availableRB_SetsToRelease_r16_;
      switchTriggerToAddModList_r16 = switchTriggerToAddModList_r16_;
      switchTriggerToReleaseList_r16 = switchTriggerToReleaseList_r16_;
      co_DurationsPerCellToAddModList_r16 = co_DurationsPerCellToAddModList_r16_;
      co_DurationsPerCellToReleaseList_r16 = co_DurationsPerCellToReleaseList_r16_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public SlotFormatIndicator (
      long sfi_RNTI_,
      long dci_PayloadSize_
   ) {
      super();
      sfi_RNTI = new RNTI_Value (sfi_RNTI_);
      dci_PayloadSize = new Asn1Integer (dci_PayloadSize_);
   }

   public void init () {
      sfi_RNTI = null;
      dci_PayloadSize = null;
      slotFormatCombToAddModList = null;
      slotFormatCombToReleaseList = null;
      availableRB_SetsToAddModList_r16 = null;
      availableRB_SetsToRelease_r16 = null;
      switchTriggerToAddModList_r16 = null;
      switchTriggerToReleaseList_r16 = null;
      co_DurationsPerCellToAddModList_r16 = null;
      co_DurationsPerCellToReleaseList_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 11; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return sfi_RNTI;
         case 1: return dci_PayloadSize;
         case 2: return slotFormatCombToAddModList;
         case 3: return slotFormatCombToReleaseList;
         case 4: return availableRB_SetsToAddModList_r16;
         case 5: return availableRB_SetsToRelease_r16;
         case 6: return switchTriggerToAddModList_r16;
         case 7: return switchTriggerToReleaseList_r16;
         case 8: return co_DurationsPerCellToAddModList_r16;
         case 9: return co_DurationsPerCellToReleaseList_r16;
         case 10: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "sfi-RNTI";
         case 1: return "dci-PayloadSize";
         case 2: return "slotFormatCombToAddModList";
         case 3: return "slotFormatCombToReleaseList";
         case 4: return "availableRB-SetsToAddModList-r16";
         case 5: return "availableRB-SetsToRelease-r16";
         case 6: return "switchTriggerToAddModList-r16";
         case 7: return "switchTriggerToReleaseList-r16";
         case 8: return "co-DurationsPerCellToAddModList-r16";
         case 9: return "co-DurationsPerCellToReleaseList-r16";
         case 10: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean slotFormatCombToAddModListPresent = buffer.decodeBit ("slotFormatCombToAddModListPresent");
      boolean slotFormatCombToReleaseListPresent = buffer.decodeBit ("slotFormatCombToReleaseListPresent");

      // decode sfi_RNTI

      buffer.getContext().eventDispatcher.startElement("sfi_RNTI", -1);

      sfi_RNTI = new RNTI_Value();
      sfi_RNTI.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("sfi_RNTI", -1);

      // decode dci_PayloadSize

      buffer.getContext().eventDispatcher.startElement("dci_PayloadSize", -1);

      dci_PayloadSize = new Asn1Integer();
      dci_PayloadSize.decode (buffer, 1, 128);

      buffer.invokeCharacters(dci_PayloadSize.toString());
      buffer.getContext().eventDispatcher.endElement("dci_PayloadSize", -1);

      // decode slotFormatCombToAddModList

      if (slotFormatCombToAddModListPresent) {
         buffer.getContext().eventDispatcher.startElement("slotFormatCombToAddModList", -1);

         slotFormatCombToAddModList = new SlotFormatIndicator_slotFormatCombToAddModList();
         slotFormatCombToAddModList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("slotFormatCombToAddModList", -1);
      }
      else {
         slotFormatCombToAddModList = null;
      }

      // decode slotFormatCombToReleaseList

      if (slotFormatCombToReleaseListPresent) {
         buffer.getContext().eventDispatcher.startElement("slotFormatCombToReleaseList", -1);

         slotFormatCombToReleaseList = new SlotFormatIndicator_slotFormatCombToReleaseList();
         slotFormatCombToReleaseList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("slotFormatCombToReleaseList", -1);
      }
      else {
         slotFormatCombToReleaseList = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean availableRB_SetsToAddModList_r16Present = buffer.decodeBit ("availableRB_SetsToAddModList_r16Present");

            boolean availableRB_SetsToRelease_r16Present = buffer.decodeBit ("availableRB_SetsToRelease_r16Present");

            boolean switchTriggerToAddModList_r16Present = buffer.decodeBit ("switchTriggerToAddModList_r16Present");

            boolean switchTriggerToReleaseList_r16Present = buffer.decodeBit ("switchTriggerToReleaseList_r16Present");

            boolean co_DurationsPerCellToAddModList_r16Present = buffer.decodeBit ("co_DurationsPerCellToAddModList_r16Present");

            boolean co_DurationsPerCellToReleaseList_r16Present = buffer.decodeBit ("co_DurationsPerCellToReleaseList_r16Present");

            // decode availableRB_SetsToAddModList_r16

            if (availableRB_SetsToAddModList_r16Present) {
               buffer.getContext().eventDispatcher.startElement("availableRB_SetsToAddModList_r16", -1);

               availableRB_SetsToAddModList_r16 = new SlotFormatIndicator_availableRB_SetsToAddModList_r16();
               availableRB_SetsToAddModList_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("availableRB_SetsToAddModList_r16", -1);
            }
            else {
               availableRB_SetsToAddModList_r16 = null;
            }

            // decode availableRB_SetsToRelease_r16

            if (availableRB_SetsToRelease_r16Present) {
               buffer.getContext().eventDispatcher.startElement("availableRB_SetsToRelease_r16", -1);

               availableRB_SetsToRelease_r16 = new SlotFormatIndicator_availableRB_SetsToRelease_r16();
               availableRB_SetsToRelease_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("availableRB_SetsToRelease_r16", -1);
            }
            else {
               availableRB_SetsToRelease_r16 = null;
            }

            // decode switchTriggerToAddModList_r16

            if (switchTriggerToAddModList_r16Present) {
               buffer.getContext().eventDispatcher.startElement("switchTriggerToAddModList_r16", -1);

               switchTriggerToAddModList_r16 = new SlotFormatIndicator_switchTriggerToAddModList_r16();
               switchTriggerToAddModList_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("switchTriggerToAddModList_r16", -1);
            }
            else {
               switchTriggerToAddModList_r16 = null;
            }

            // decode switchTriggerToReleaseList_r16

            if (switchTriggerToReleaseList_r16Present) {
               buffer.getContext().eventDispatcher.startElement("switchTriggerToReleaseList_r16", -1);

               switchTriggerToReleaseList_r16 = new SlotFormatIndicator_switchTriggerToReleaseList_r16();
               switchTriggerToReleaseList_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("switchTriggerToReleaseList_r16", -1);
            }
            else {
               switchTriggerToReleaseList_r16 = null;
            }

            // decode co_DurationsPerCellToAddModList_r16

            if (co_DurationsPerCellToAddModList_r16Present) {
               buffer.getContext().eventDispatcher.startElement("co_DurationsPerCellToAddModList_r16", -1);

               co_DurationsPerCellToAddModList_r16 = new SlotFormatIndicator_co_DurationsPerCellToAddModList_r16();
               co_DurationsPerCellToAddModList_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("co_DurationsPerCellToAddModList_r16", -1);
            }
            else {
               co_DurationsPerCellToAddModList_r16 = null;
            }

            // decode co_DurationsPerCellToReleaseList_r16

            if (co_DurationsPerCellToReleaseList_r16Present) {
               buffer.getContext().eventDispatcher.startElement("co_DurationsPerCellToReleaseList_r16", -1);

               co_DurationsPerCellToReleaseList_r16 = new SlotFormatIndicator_co_DurationsPerCellToReleaseList_r16();
               co_DurationsPerCellToReleaseList_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("co_DurationsPerCellToReleaseList_r16", -1);
            }
            else {
               co_DurationsPerCellToReleaseList_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (sfi_RNTI != null) sfi_RNTI.print (_sb, "sfi_RNTI", _level+1);
      if (dci_PayloadSize != null) dci_PayloadSize.print (_sb, "dci_PayloadSize", _level+1);
      if (slotFormatCombToAddModList != null) slotFormatCombToAddModList.print (_sb, "slotFormatCombToAddModList", _level+1);
      if (slotFormatCombToReleaseList != null) slotFormatCombToReleaseList.print (_sb, "slotFormatCombToReleaseList", _level+1);
      if (availableRB_SetsToAddModList_r16 != null) availableRB_SetsToAddModList_r16.print (_sb, "availableRB_SetsToAddModList_r16", _level+1);
      if (availableRB_SetsToRelease_r16 != null) availableRB_SetsToRelease_r16.print (_sb, "availableRB_SetsToRelease_r16", _level+1);
      if (switchTriggerToAddModList_r16 != null) switchTriggerToAddModList_r16.print (_sb, "switchTriggerToAddModList_r16", _level+1);
      if (switchTriggerToReleaseList_r16 != null) switchTriggerToReleaseList_r16.print (_sb, "switchTriggerToReleaseList_r16", _level+1);
      if (co_DurationsPerCellToAddModList_r16 != null) co_DurationsPerCellToAddModList_r16.print (_sb, "co_DurationsPerCellToAddModList_r16", _level+1);
      if (co_DurationsPerCellToReleaseList_r16 != null) co_DurationsPerCellToReleaseList_r16.print (_sb, "co_DurationsPerCellToReleaseList_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
