/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MeasResultServFreq_r10_measResultBestNeighCell_r10 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public PhysCellId physCellId_r10;
   public RSRP_Range rsrpResultNCell_r10;
   public RSRQ_Range rsrqResultNCell_r10;

   public MeasResultServFreq_r10_measResultBestNeighCell_r10 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MeasResultServFreq_r10_measResultBestNeighCell_r10 (
      PhysCellId physCellId_r10_,
      RSRP_Range rsrpResultNCell_r10_,
      RSRQ_Range rsrqResultNCell_r10_
   ) {
      super();
      physCellId_r10 = physCellId_r10_;
      rsrpResultNCell_r10 = rsrpResultNCell_r10_;
      rsrqResultNCell_r10 = rsrqResultNCell_r10_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public MeasResultServFreq_r10_measResultBestNeighCell_r10 (long physCellId_r10_,
      long rsrpResultNCell_r10_,
      long rsrqResultNCell_r10_
   ) {
      super();
      physCellId_r10 = new PhysCellId (physCellId_r10_);
      rsrpResultNCell_r10 = new RSRP_Range (rsrpResultNCell_r10_);
      rsrqResultNCell_r10 = new RSRQ_Range (rsrqResultNCell_r10_);
   }

   public void init () {
      physCellId_r10 = null;
      rsrpResultNCell_r10 = null;
      rsrqResultNCell_r10 = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return physCellId_r10;
         case 1: return rsrpResultNCell_r10;
         case 2: return rsrqResultNCell_r10;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "physCellId-r10";
         case 1: return "rsrpResultNCell-r10";
         case 2: return "rsrqResultNCell-r10";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode physCellId_r10

      buffer.getContext().eventDispatcher.startElement("physCellId_r10", -1);

      physCellId_r10 = new PhysCellId();
      physCellId_r10.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("physCellId_r10", -1);

      // decode rsrpResultNCell_r10

      buffer.getContext().eventDispatcher.startElement("rsrpResultNCell_r10", -1);

      rsrpResultNCell_r10 = new RSRP_Range();
      rsrpResultNCell_r10.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("rsrpResultNCell_r10", -1);

      // decode rsrqResultNCell_r10

      buffer.getContext().eventDispatcher.startElement("rsrqResultNCell_r10", -1);

      rsrqResultNCell_r10 = new RSRQ_Range();
      rsrqResultNCell_r10.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("rsrqResultNCell_r10", -1);

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (physCellId_r10 != null) physCellId_r10.print (_sb, "physCellId_r10", _level+1);
      if (rsrpResultNCell_r10 != null) rsrpResultNCell_r10.print (_sb, "rsrpResultNCell_r10", _level+1);
      if (rsrqResultNCell_r10 != null) rsrqResultNCell_r10.print (_sb, "rsrqResultNCell_r10", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
