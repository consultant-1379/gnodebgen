/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class DownlinkPreemption extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "DownlinkPreemption";
   }

   public RNTI_Value int_RNTI;
   public DownlinkPreemption_timeFrequencySet timeFrequencySet = null;
   public Asn1Integer dci_PayloadSize;
   public DownlinkPreemption_int_ConfigurationPerServingCell int_ConfigurationPerServingCell;
   public Asn1OpenExt extElem1;

   public DownlinkPreemption () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public DownlinkPreemption (
      RNTI_Value int_RNTI_,
      DownlinkPreemption_timeFrequencySet timeFrequencySet_,
      Asn1Integer dci_PayloadSize_,
      DownlinkPreemption_int_ConfigurationPerServingCell int_ConfigurationPerServingCell_
   ) {
      super();
      int_RNTI = int_RNTI_;
      timeFrequencySet = timeFrequencySet_;
      dci_PayloadSize = dci_PayloadSize_;
      int_ConfigurationPerServingCell = int_ConfigurationPerServingCell_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public DownlinkPreemption (long int_RNTI_,
      DownlinkPreemption_timeFrequencySet timeFrequencySet_,
      long dci_PayloadSize_,
      DownlinkPreemption_int_ConfigurationPerServingCell int_ConfigurationPerServingCell_
   ) {
      super();
      int_RNTI = new RNTI_Value (int_RNTI_);
      timeFrequencySet = timeFrequencySet_;
      dci_PayloadSize = new Asn1Integer (dci_PayloadSize_);
      int_ConfigurationPerServingCell = int_ConfigurationPerServingCell_;
   }

   public void init () {
      int_RNTI = null;
      timeFrequencySet = null;
      dci_PayloadSize = null;
      int_ConfigurationPerServingCell = null;
      extElem1 = null;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return int_RNTI;
         case 1: return timeFrequencySet;
         case 2: return dci_PayloadSize;
         case 3: return int_ConfigurationPerServingCell;
         case 4: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "int-RNTI";
         case 1: return "timeFrequencySet";
         case 2: return "dci-PayloadSize";
         case 3: return "int-ConfigurationPerServingCell";
         case 4: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // decode int_RNTI

      buffer.getContext().eventDispatcher.startElement("int_RNTI", -1);

      int_RNTI = new RNTI_Value();
      int_RNTI.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("int_RNTI", -1);

      // decode timeFrequencySet

      buffer.getContext().eventDispatcher.startElement("timeFrequencySet", -1);

      {
         int tval = DownlinkPreemption_timeFrequencySet.decodeEnumValue (buffer);
         timeFrequencySet = DownlinkPreemption_timeFrequencySet.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("timeFrequencySet", -1);

      // decode dci_PayloadSize

      buffer.getContext().eventDispatcher.startElement("dci_PayloadSize", -1);

      dci_PayloadSize = new Asn1Integer();
      dci_PayloadSize.decode (buffer, 0, 126);

      buffer.invokeCharacters(dci_PayloadSize.toString());
      buffer.getContext().eventDispatcher.endElement("dci_PayloadSize", -1);

      // decode int_ConfigurationPerServingCell

      buffer.getContext().eventDispatcher.startElement("int_ConfigurationPerServingCell", -1);

      int_ConfigurationPerServingCell = new DownlinkPreemption_int_ConfigurationPerServingCell();
      int_ConfigurationPerServingCell.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("int_ConfigurationPerServingCell", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (int_RNTI != null) int_RNTI.print (_sb, "int_RNTI", _level+1);
      if (timeFrequencySet != null) timeFrequencySet.print (_sb, "timeFrequencySet", _level+1);
      if (dci_PayloadSize != null) dci_PayloadSize.print (_sb, "dci_PayloadSize", _level+1);
      if (int_ConfigurationPerServingCell != null) int_ConfigurationPerServingCell.print (_sb, "int_ConfigurationPerServingCell", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
