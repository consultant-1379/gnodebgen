/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class CSI_RS_ConfigNZP_r11_qcl_CRS_Info_r11 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public Asn1Integer qcl_ScramblingIdentity_r11;
   public CSI_RS_ConfigNZP_r11_qcl_CRS_Info_r11_crs_PortsCount_r11 crs_PortsCount_r11 = null;
   public CSI_RS_ConfigNZP_r11_qcl_CRS_Info_r11_mbsfn_SubframeConfigList_r11 mbsfn_SubframeConfigList_r11;  // optional

   public CSI_RS_ConfigNZP_r11_qcl_CRS_Info_r11 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CSI_RS_ConfigNZP_r11_qcl_CRS_Info_r11 (
      Asn1Integer qcl_ScramblingIdentity_r11_,
      CSI_RS_ConfigNZP_r11_qcl_CRS_Info_r11_crs_PortsCount_r11 crs_PortsCount_r11_,
      CSI_RS_ConfigNZP_r11_qcl_CRS_Info_r11_mbsfn_SubframeConfigList_r11 mbsfn_SubframeConfigList_r11_
   ) {
      super();
      qcl_ScramblingIdentity_r11 = qcl_ScramblingIdentity_r11_;
      crs_PortsCount_r11 = crs_PortsCount_r11_;
      mbsfn_SubframeConfigList_r11 = mbsfn_SubframeConfigList_r11_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public CSI_RS_ConfigNZP_r11_qcl_CRS_Info_r11 (
      Asn1Integer qcl_ScramblingIdentity_r11_,
      CSI_RS_ConfigNZP_r11_qcl_CRS_Info_r11_crs_PortsCount_r11 crs_PortsCount_r11_
   ) {
      super();
      qcl_ScramblingIdentity_r11 = qcl_ScramblingIdentity_r11_;
      crs_PortsCount_r11 = crs_PortsCount_r11_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public CSI_RS_ConfigNZP_r11_qcl_CRS_Info_r11 (long qcl_ScramblingIdentity_r11_,
      CSI_RS_ConfigNZP_r11_qcl_CRS_Info_r11_crs_PortsCount_r11 crs_PortsCount_r11_,
      CSI_RS_ConfigNZP_r11_qcl_CRS_Info_r11_mbsfn_SubframeConfigList_r11 mbsfn_SubframeConfigList_r11_
   ) {
      super();
      qcl_ScramblingIdentity_r11 = new Asn1Integer (qcl_ScramblingIdentity_r11_);
      crs_PortsCount_r11 = crs_PortsCount_r11_;
      mbsfn_SubframeConfigList_r11 = mbsfn_SubframeConfigList_r11_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public CSI_RS_ConfigNZP_r11_qcl_CRS_Info_r11 (
      long qcl_ScramblingIdentity_r11_,
      CSI_RS_ConfigNZP_r11_qcl_CRS_Info_r11_crs_PortsCount_r11 crs_PortsCount_r11_
   ) {
      super();
      qcl_ScramblingIdentity_r11 = new Asn1Integer (qcl_ScramblingIdentity_r11_);
      crs_PortsCount_r11 = crs_PortsCount_r11_;
   }

   public void init () {
      qcl_ScramblingIdentity_r11 = null;
      crs_PortsCount_r11 = null;
      mbsfn_SubframeConfigList_r11 = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return qcl_ScramblingIdentity_r11;
         case 1: return crs_PortsCount_r11;
         case 2: return mbsfn_SubframeConfigList_r11;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "qcl-ScramblingIdentity-r11";
         case 1: return "crs-PortsCount-r11";
         case 2: return "mbsfn-SubframeConfigList-r11";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean mbsfn_SubframeConfigList_r11Present = buffer.decodeBit ("mbsfn_SubframeConfigList_r11Present");

      // decode qcl_ScramblingIdentity_r11

      buffer.getContext().eventDispatcher.startElement("qcl_ScramblingIdentity_r11", -1);

      qcl_ScramblingIdentity_r11 = new Asn1Integer();
      qcl_ScramblingIdentity_r11.decode (buffer, 0, 503);

      buffer.invokeCharacters(qcl_ScramblingIdentity_r11.toString());
      buffer.getContext().eventDispatcher.endElement("qcl_ScramblingIdentity_r11", -1);

      // decode crs_PortsCount_r11

      buffer.getContext().eventDispatcher.startElement("crs_PortsCount_r11", -1);

      {
         int tval = CSI_RS_ConfigNZP_r11_qcl_CRS_Info_r11_crs_PortsCount_r11.decodeEnumValue (buffer);
         crs_PortsCount_r11 = CSI_RS_ConfigNZP_r11_qcl_CRS_Info_r11_crs_PortsCount_r11.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("crs_PortsCount_r11", -1);

      // decode mbsfn_SubframeConfigList_r11

      if (mbsfn_SubframeConfigList_r11Present) {
         buffer.getContext().eventDispatcher.startElement("mbsfn_SubframeConfigList_r11", -1);

         mbsfn_SubframeConfigList_r11 = new CSI_RS_ConfigNZP_r11_qcl_CRS_Info_r11_mbsfn_SubframeConfigList_r11();
         mbsfn_SubframeConfigList_r11.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("mbsfn_SubframeConfigList_r11", -1);
      }
      else {
         mbsfn_SubframeConfigList_r11 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (qcl_ScramblingIdentity_r11 != null) qcl_ScramblingIdentity_r11.print (_sb, "qcl_ScramblingIdentity_r11", _level+1);
      if (crs_PortsCount_r11 != null) crs_PortsCount_r11.print (_sb, "crs_PortsCount_r11", _level+1);
      if (mbsfn_SubframeConfigList_r11 != null) mbsfn_SubframeConfigList_r11.print (_sb, "mbsfn_SubframeConfigList_r11", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
