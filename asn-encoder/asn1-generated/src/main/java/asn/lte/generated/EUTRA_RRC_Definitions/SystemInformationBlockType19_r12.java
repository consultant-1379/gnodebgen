/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SystemInformationBlockType19_r12 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SystemInformationBlockType19-r12";
   }

   public SystemInformationBlockType19_r12_discConfig_r12 discConfig_r12;  // optional
   public SL_CarrierFreqInfoList_r12 discInterFreqList_r12;  // optional
   public Asn1OctetString lateNonCriticalExtension;  // optional
   public boolean mV2ExtPresent;
   public SystemInformationBlockType19_r12_discConfig_v1310 discConfig_v1310;  // optional
   public SystemInformationBlockType19_r12_discConfigRelay_r13 discConfigRelay_r13;  // optional
   public SystemInformationBlockType19_r12_discConfigPS_13 discConfigPS_13;  // optional
   public Asn1OpenExt extElem1;

   public SystemInformationBlockType19_r12 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SystemInformationBlockType19_r12 (
      SystemInformationBlockType19_r12_discConfig_r12 discConfig_r12_,
      SL_CarrierFreqInfoList_r12 discInterFreqList_r12_,
      Asn1OctetString lateNonCriticalExtension_,
      SystemInformationBlockType19_r12_discConfig_v1310 discConfig_v1310_,
      SystemInformationBlockType19_r12_discConfigRelay_r13 discConfigRelay_r13_,
      SystemInformationBlockType19_r12_discConfigPS_13 discConfigPS_13_
   ) {
      super();
      discConfig_r12 = discConfig_r12_;
      discInterFreqList_r12 = discInterFreqList_r12_;
      lateNonCriticalExtension = lateNonCriticalExtension_;
      discConfig_v1310 = discConfig_v1310_;
      discConfigRelay_r13 = discConfigRelay_r13_;
      discConfigPS_13 = discConfigPS_13_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SystemInformationBlockType19_r12 (SystemInformationBlockType19_r12_discConfig_r12 discConfig_r12_,
      SL_CarrierFreqInfoList_r12 discInterFreqList_r12_,
      byte[] lateNonCriticalExtension_,
      SystemInformationBlockType19_r12_discConfig_v1310 discConfig_v1310_,
      SystemInformationBlockType19_r12_discConfigRelay_r13 discConfigRelay_r13_,
      SystemInformationBlockType19_r12_discConfigPS_13 discConfigPS_13_
   ) {
      super();
      discConfig_r12 = discConfig_r12_;
      discInterFreqList_r12 = discInterFreqList_r12_;
      lateNonCriticalExtension = new Asn1OctetString (lateNonCriticalExtension_);
      discConfig_v1310 = discConfig_v1310_;
      discConfigRelay_r13 = discConfigRelay_r13_;
      discConfigPS_13 = discConfigPS_13_;
   }

   public void init () {
      discConfig_r12 = null;
      discInterFreqList_r12 = null;
      lateNonCriticalExtension = null;
      discConfig_v1310 = null;
      discConfigRelay_r13 = null;
      discConfigPS_13 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return discConfig_r12;
         case 1: return discInterFreqList_r12;
         case 2: return lateNonCriticalExtension;
         case 3: return discConfig_v1310;
         case 4: return discConfigRelay_r13;
         case 5: return discConfigPS_13;
         case 6: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "discConfig-r12";
         case 1: return "discInterFreqList-r12";
         case 2: return "lateNonCriticalExtension";
         case 3: return "discConfig-v1310";
         case 4: return "discConfigRelay-r13";
         case 5: return "discConfigPS-13";
         case 6: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean discConfig_r12Present = buffer.decodeBit ("discConfig_r12Present");
      boolean discInterFreqList_r12Present = buffer.decodeBit ("discInterFreqList_r12Present");
      boolean lateNonCriticalExtensionPresent = buffer.decodeBit ("lateNonCriticalExtensionPresent");

      // decode discConfig_r12

      if (discConfig_r12Present) {
         buffer.getContext().eventDispatcher.startElement("discConfig_r12", -1);

         discConfig_r12 = new SystemInformationBlockType19_r12_discConfig_r12();
         discConfig_r12.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("discConfig_r12", -1);
      }
      else {
         discConfig_r12 = null;
      }

      // decode discInterFreqList_r12

      if (discInterFreqList_r12Present) {
         buffer.getContext().eventDispatcher.startElement("discInterFreqList_r12", -1);

         discInterFreqList_r12 = new SL_CarrierFreqInfoList_r12();
         discInterFreqList_r12.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("discInterFreqList_r12", -1);
      }
      else {
         discInterFreqList_r12 = null;
      }

      // decode lateNonCriticalExtension

      if (lateNonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("lateNonCriticalExtension", -1);

         lateNonCriticalExtension = new Asn1OctetString();
         lateNonCriticalExtension.decode (buffer);

         buffer.invokeCharacters(lateNonCriticalExtension.toString());
         buffer.getContext().eventDispatcher.endElement("lateNonCriticalExtension", -1);
      }
      else {
         lateNonCriticalExtension = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean discConfig_v1310Present = buffer.decodeBit ("discConfig_v1310Present");

            boolean discConfigRelay_r13Present = buffer.decodeBit ("discConfigRelay_r13Present");

            boolean discConfigPS_13Present = buffer.decodeBit ("discConfigPS_13Present");

            // decode discConfig_v1310

            if (discConfig_v1310Present) {
               buffer.getContext().eventDispatcher.startElement("discConfig_v1310", -1);

               discConfig_v1310 = new SystemInformationBlockType19_r12_discConfig_v1310();
               discConfig_v1310.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("discConfig_v1310", -1);
            }
            else {
               discConfig_v1310 = null;
            }

            // decode discConfigRelay_r13

            if (discConfigRelay_r13Present) {
               buffer.getContext().eventDispatcher.startElement("discConfigRelay_r13", -1);

               discConfigRelay_r13 = new SystemInformationBlockType19_r12_discConfigRelay_r13();
               discConfigRelay_r13.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("discConfigRelay_r13", -1);
            }
            else {
               discConfigRelay_r13 = null;
            }

            // decode discConfigPS_13

            if (discConfigPS_13Present) {
               buffer.getContext().eventDispatcher.startElement("discConfigPS_13", -1);

               discConfigPS_13 = new SystemInformationBlockType19_r12_discConfigPS_13();
               discConfigPS_13.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("discConfigPS_13", -1);
            }
            else {
               discConfigPS_13 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (discConfig_r12 != null) discConfig_r12.print (_sb, "discConfig_r12", _level+1);
      if (discInterFreqList_r12 != null) discInterFreqList_r12.print (_sb, "discInterFreqList_r12", _level+1);
      if (lateNonCriticalExtension != null) lateNonCriticalExtension.print (_sb, "lateNonCriticalExtension", _level+1);
      if (discConfig_v1310 != null) discConfig_v1310.print (_sb, "discConfig_v1310", _level+1);
      if (discConfigRelay_r13 != null) discConfigRelay_r13.print (_sb, "discConfigRelay_r13", _level+1);
      if (discConfigPS_13 != null) discConfigPS_13.print (_sb, "discConfigPS_13", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
