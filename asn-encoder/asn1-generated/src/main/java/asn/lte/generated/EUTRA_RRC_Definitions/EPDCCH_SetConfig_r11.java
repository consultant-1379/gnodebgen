/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class EPDCCH_SetConfig_r11 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "EPDCCH-SetConfig-r11";
   }

   public EPDCCH_SetConfigId_r11 setConfigId_r11;
   public EPDCCH_SetConfig_r11_transmissionType_r11 transmissionType_r11 = null;
   public EPDCCH_SetConfig_r11_resourceBlockAssignment_r11 resourceBlockAssignment_r11;
   public Asn1Integer dmrs_ScramblingSequenceInt_r11;
   public Asn1Integer pucch_ResourceStartOffset_r11;
   public PDSCH_RE_MappingQCL_ConfigId_r11 re_MappingQCL_ConfigId_r11;  // optional
   public boolean mV2ExtPresent;
   public EPDCCH_SetConfig_r11_csi_RS_ConfigZPId2_r12 csi_RS_ConfigZPId2_r12;  // optional
   public boolean mV3ExtPresent;
   public EPDCCH_SetConfig_r11_numberPRB_Pairs_v1310 numberPRB_Pairs_v1310;  // optional
   public EPDCCH_SetConfig_r11_mpdcch_config_r13 mpdcch_config_r13;  // optional
   public Asn1OpenExt extElem1;

   public EPDCCH_SetConfig_r11 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public EPDCCH_SetConfig_r11 (
      EPDCCH_SetConfigId_r11 setConfigId_r11_,
      EPDCCH_SetConfig_r11_transmissionType_r11 transmissionType_r11_,
      EPDCCH_SetConfig_r11_resourceBlockAssignment_r11 resourceBlockAssignment_r11_,
      Asn1Integer dmrs_ScramblingSequenceInt_r11_,
      Asn1Integer pucch_ResourceStartOffset_r11_,
      PDSCH_RE_MappingQCL_ConfigId_r11 re_MappingQCL_ConfigId_r11_,
      EPDCCH_SetConfig_r11_csi_RS_ConfigZPId2_r12 csi_RS_ConfigZPId2_r12_,
      EPDCCH_SetConfig_r11_numberPRB_Pairs_v1310 numberPRB_Pairs_v1310_,
      EPDCCH_SetConfig_r11_mpdcch_config_r13 mpdcch_config_r13_
   ) {
      super();
      setConfigId_r11 = setConfigId_r11_;
      transmissionType_r11 = transmissionType_r11_;
      resourceBlockAssignment_r11 = resourceBlockAssignment_r11_;
      dmrs_ScramblingSequenceInt_r11 = dmrs_ScramblingSequenceInt_r11_;
      pucch_ResourceStartOffset_r11 = pucch_ResourceStartOffset_r11_;
      re_MappingQCL_ConfigId_r11 = re_MappingQCL_ConfigId_r11_;
      csi_RS_ConfigZPId2_r12 = csi_RS_ConfigZPId2_r12_;
      numberPRB_Pairs_v1310 = numberPRB_Pairs_v1310_;
      mpdcch_config_r13 = mpdcch_config_r13_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public EPDCCH_SetConfig_r11 (
      EPDCCH_SetConfigId_r11 setConfigId_r11_,
      EPDCCH_SetConfig_r11_transmissionType_r11 transmissionType_r11_,
      EPDCCH_SetConfig_r11_resourceBlockAssignment_r11 resourceBlockAssignment_r11_,
      Asn1Integer dmrs_ScramblingSequenceInt_r11_,
      Asn1Integer pucch_ResourceStartOffset_r11_
   ) {
      super();
      setConfigId_r11 = setConfigId_r11_;
      transmissionType_r11 = transmissionType_r11_;
      resourceBlockAssignment_r11 = resourceBlockAssignment_r11_;
      dmrs_ScramblingSequenceInt_r11 = dmrs_ScramblingSequenceInt_r11_;
      pucch_ResourceStartOffset_r11 = pucch_ResourceStartOffset_r11_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public EPDCCH_SetConfig_r11 (long setConfigId_r11_,
      EPDCCH_SetConfig_r11_transmissionType_r11 transmissionType_r11_,
      EPDCCH_SetConfig_r11_resourceBlockAssignment_r11 resourceBlockAssignment_r11_,
      long dmrs_ScramblingSequenceInt_r11_,
      long pucch_ResourceStartOffset_r11_,
      long re_MappingQCL_ConfigId_r11_,
      EPDCCH_SetConfig_r11_csi_RS_ConfigZPId2_r12 csi_RS_ConfigZPId2_r12_,
      EPDCCH_SetConfig_r11_numberPRB_Pairs_v1310 numberPRB_Pairs_v1310_,
      EPDCCH_SetConfig_r11_mpdcch_config_r13 mpdcch_config_r13_
   ) {
      super();
      setConfigId_r11 = new EPDCCH_SetConfigId_r11 (setConfigId_r11_);
      transmissionType_r11 = transmissionType_r11_;
      resourceBlockAssignment_r11 = resourceBlockAssignment_r11_;
      dmrs_ScramblingSequenceInt_r11 = new Asn1Integer (dmrs_ScramblingSequenceInt_r11_);
      pucch_ResourceStartOffset_r11 = new Asn1Integer (pucch_ResourceStartOffset_r11_);
      re_MappingQCL_ConfigId_r11 = new PDSCH_RE_MappingQCL_ConfigId_r11 (re_MappingQCL_ConfigId_r11_);
      csi_RS_ConfigZPId2_r12 = csi_RS_ConfigZPId2_r12_;
      numberPRB_Pairs_v1310 = numberPRB_Pairs_v1310_;
      mpdcch_config_r13 = mpdcch_config_r13_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public EPDCCH_SetConfig_r11 (
      long setConfigId_r11_,
      EPDCCH_SetConfig_r11_transmissionType_r11 transmissionType_r11_,
      EPDCCH_SetConfig_r11_resourceBlockAssignment_r11 resourceBlockAssignment_r11_,
      long dmrs_ScramblingSequenceInt_r11_,
      long pucch_ResourceStartOffset_r11_
   ) {
      super();
      setConfigId_r11 = new EPDCCH_SetConfigId_r11 (setConfigId_r11_);
      transmissionType_r11 = transmissionType_r11_;
      resourceBlockAssignment_r11 = resourceBlockAssignment_r11_;
      dmrs_ScramblingSequenceInt_r11 = new Asn1Integer (dmrs_ScramblingSequenceInt_r11_);
      pucch_ResourceStartOffset_r11 = new Asn1Integer (pucch_ResourceStartOffset_r11_);
   }

   public void init () {
      setConfigId_r11 = null;
      transmissionType_r11 = null;
      resourceBlockAssignment_r11 = null;
      dmrs_ScramblingSequenceInt_r11 = null;
      pucch_ResourceStartOffset_r11 = null;
      re_MappingQCL_ConfigId_r11 = null;
      csi_RS_ConfigZPId2_r12 = null;
      numberPRB_Pairs_v1310 = null;
      mpdcch_config_r13 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 10; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return setConfigId_r11;
         case 1: return transmissionType_r11;
         case 2: return resourceBlockAssignment_r11;
         case 3: return dmrs_ScramblingSequenceInt_r11;
         case 4: return pucch_ResourceStartOffset_r11;
         case 5: return re_MappingQCL_ConfigId_r11;
         case 6: return csi_RS_ConfigZPId2_r12;
         case 7: return numberPRB_Pairs_v1310;
         case 8: return mpdcch_config_r13;
         case 9: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "setConfigId-r11";
         case 1: return "transmissionType-r11";
         case 2: return "resourceBlockAssignment-r11";
         case 3: return "dmrs-ScramblingSequenceInt-r11";
         case 4: return "pucch-ResourceStartOffset-r11";
         case 5: return "re-MappingQCL-ConfigId-r11";
         case 6: return "csi-RS-ConfigZPId2-r12";
         case 7: return "numberPRB-Pairs-v1310";
         case 8: return "mpdcch-config-r13";
         case 9: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean re_MappingQCL_ConfigId_r11Present = buffer.decodeBit ("re_MappingQCL_ConfigId_r11Present");

      // decode setConfigId_r11

      buffer.getContext().eventDispatcher.startElement("setConfigId_r11", -1);

      setConfigId_r11 = new EPDCCH_SetConfigId_r11();
      setConfigId_r11.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("setConfigId_r11", -1);

      // decode transmissionType_r11

      buffer.getContext().eventDispatcher.startElement("transmissionType_r11", -1);

      {
         int tval = EPDCCH_SetConfig_r11_transmissionType_r11.decodeEnumValue (buffer);
         transmissionType_r11 = EPDCCH_SetConfig_r11_transmissionType_r11.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("transmissionType_r11", -1);

      // decode resourceBlockAssignment_r11

      buffer.getContext().eventDispatcher.startElement("resourceBlockAssignment_r11", -1);

      resourceBlockAssignment_r11 = new EPDCCH_SetConfig_r11_resourceBlockAssignment_r11();
      resourceBlockAssignment_r11.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("resourceBlockAssignment_r11", -1);

      // decode dmrs_ScramblingSequenceInt_r11

      buffer.getContext().eventDispatcher.startElement("dmrs_ScramblingSequenceInt_r11", -1);

      dmrs_ScramblingSequenceInt_r11 = new Asn1Integer();
      dmrs_ScramblingSequenceInt_r11.decode (buffer, 0, 503);

      buffer.invokeCharacters(dmrs_ScramblingSequenceInt_r11.toString());
      buffer.getContext().eventDispatcher.endElement("dmrs_ScramblingSequenceInt_r11", -1);

      // decode pucch_ResourceStartOffset_r11

      buffer.getContext().eventDispatcher.startElement("pucch_ResourceStartOffset_r11", -1);

      pucch_ResourceStartOffset_r11 = new Asn1Integer();
      pucch_ResourceStartOffset_r11.decode (buffer, 0, 2047);

      buffer.invokeCharacters(pucch_ResourceStartOffset_r11.toString());
      buffer.getContext().eventDispatcher.endElement("pucch_ResourceStartOffset_r11", -1);

      // decode re_MappingQCL_ConfigId_r11

      if (re_MappingQCL_ConfigId_r11Present) {
         buffer.getContext().eventDispatcher.startElement("re_MappingQCL_ConfigId_r11", -1);

         re_MappingQCL_ConfigId_r11 = new PDSCH_RE_MappingQCL_ConfigId_r11();
         re_MappingQCL_ConfigId_r11.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("re_MappingQCL_ConfigId_r11", -1);
      }
      else {
         re_MappingQCL_ConfigId_r11 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean csi_RS_ConfigZPId2_r12Present = buffer.decodeBit ("csi_RS_ConfigZPId2_r12Present");

            // decode csi_RS_ConfigZPId2_r12

            if (csi_RS_ConfigZPId2_r12Present) {
               buffer.getContext().eventDispatcher.startElement("csi_RS_ConfigZPId2_r12", -1);

               csi_RS_ConfigZPId2_r12 = new EPDCCH_SetConfig_r11_csi_RS_ConfigZPId2_r12();
               csi_RS_ConfigZPId2_r12.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("csi_RS_ConfigZPId2_r12", -1);
            }
            else {
               csi_RS_ConfigZPId2_r12 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean numberPRB_Pairs_v1310Present = buffer.decodeBit ("numberPRB_Pairs_v1310Present");

            boolean mpdcch_config_r13Present = buffer.decodeBit ("mpdcch_config_r13Present");

            // decode numberPRB_Pairs_v1310

            if (numberPRB_Pairs_v1310Present) {
               buffer.getContext().eventDispatcher.startElement("numberPRB_Pairs_v1310", -1);

               numberPRB_Pairs_v1310 = new EPDCCH_SetConfig_r11_numberPRB_Pairs_v1310();
               numberPRB_Pairs_v1310.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("numberPRB_Pairs_v1310", -1);
            }
            else {
               numberPRB_Pairs_v1310 = null;
            }

            // decode mpdcch_config_r13

            if (mpdcch_config_r13Present) {
               buffer.getContext().eventDispatcher.startElement("mpdcch_config_r13", -1);

               mpdcch_config_r13 = new EPDCCH_SetConfig_r11_mpdcch_config_r13();
               mpdcch_config_r13.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("mpdcch_config_r13", -1);
            }
            else {
               mpdcch_config_r13 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (setConfigId_r11 != null) setConfigId_r11.print (_sb, "setConfigId_r11", _level+1);
      if (transmissionType_r11 != null) transmissionType_r11.print (_sb, "transmissionType_r11", _level+1);
      if (resourceBlockAssignment_r11 != null) resourceBlockAssignment_r11.print (_sb, "resourceBlockAssignment_r11", _level+1);
      if (dmrs_ScramblingSequenceInt_r11 != null) dmrs_ScramblingSequenceInt_r11.print (_sb, "dmrs_ScramblingSequenceInt_r11", _level+1);
      if (pucch_ResourceStartOffset_r11 != null) pucch_ResourceStartOffset_r11.print (_sb, "pucch_ResourceStartOffset_r11", _level+1);
      if (re_MappingQCL_ConfigId_r11 != null) re_MappingQCL_ConfigId_r11.print (_sb, "re_MappingQCL_ConfigId_r11", _level+1);
      if (csi_RS_ConfigZPId2_r12 != null) csi_RS_ConfigZPId2_r12.print (_sb, "csi_RS_ConfigZPId2_r12", _level+1);
      if (numberPRB_Pairs_v1310 != null) numberPRB_Pairs_v1310.print (_sb, "numberPRB_Pairs_v1310", _level+1);
      if (mpdcch_config_r13 != null) mpdcch_config_r13.print (_sb, "mpdcch_config_r13", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
