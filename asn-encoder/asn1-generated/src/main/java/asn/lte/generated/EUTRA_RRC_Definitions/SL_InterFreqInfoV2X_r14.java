/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SL_InterFreqInfoV2X_r14 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SL-InterFreqInfoV2X-r14";
   }

   public PLMN_IdentityList plmn_IdentityList_r14;  // optional
   public ARFCN_ValueEUTRA_r9 v2x_CommCarrierFreq_r14;
   public P_Max sl_MaxTxPower_r14;  // optional
   public SL_InterFreqInfoV2X_r14_sl_Bandwidth_r14 sl_Bandwidth_r14 = null;  // optional
   public SL_CommResourcePoolV2X_r14 v2x_SchedulingPool_r14;  // optional
   public SL_V2X_UE_ConfigList_r14 v2x_UE_ConfigList_r14;  // optional
   public boolean mV2ExtPresent;
   public SL_InterFreqInfoV2X_r14_additionalSpectrumEmissionV2X_r14 additionalSpectrumEmissionV2X_r14;  // optional
   public boolean mV3ExtPresent;
   public SL_V2X_FreqSelectionConfigList_r15 v2x_FreqSelectionConfigList_r15;  // optional
   public Asn1OpenExt extElem1;

   public SL_InterFreqInfoV2X_r14 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SL_InterFreqInfoV2X_r14 (
      PLMN_IdentityList plmn_IdentityList_r14_,
      ARFCN_ValueEUTRA_r9 v2x_CommCarrierFreq_r14_,
      P_Max sl_MaxTxPower_r14_,
      SL_InterFreqInfoV2X_r14_sl_Bandwidth_r14 sl_Bandwidth_r14_,
      SL_CommResourcePoolV2X_r14 v2x_SchedulingPool_r14_,
      SL_V2X_UE_ConfigList_r14 v2x_UE_ConfigList_r14_,
      SL_InterFreqInfoV2X_r14_additionalSpectrumEmissionV2X_r14 additionalSpectrumEmissionV2X_r14_,
      SL_V2X_FreqSelectionConfigList_r15 v2x_FreqSelectionConfigList_r15_
   ) {
      super();
      plmn_IdentityList_r14 = plmn_IdentityList_r14_;
      v2x_CommCarrierFreq_r14 = v2x_CommCarrierFreq_r14_;
      sl_MaxTxPower_r14 = sl_MaxTxPower_r14_;
      sl_Bandwidth_r14 = sl_Bandwidth_r14_;
      v2x_SchedulingPool_r14 = v2x_SchedulingPool_r14_;
      v2x_UE_ConfigList_r14 = v2x_UE_ConfigList_r14_;
      additionalSpectrumEmissionV2X_r14 = additionalSpectrumEmissionV2X_r14_;
      v2x_FreqSelectionConfigList_r15 = v2x_FreqSelectionConfigList_r15_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SL_InterFreqInfoV2X_r14 (
      ARFCN_ValueEUTRA_r9 v2x_CommCarrierFreq_r14_
   ) {
      super();
      v2x_CommCarrierFreq_r14 = v2x_CommCarrierFreq_r14_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SL_InterFreqInfoV2X_r14 (PLMN_IdentityList plmn_IdentityList_r14_,
      long v2x_CommCarrierFreq_r14_,
      long sl_MaxTxPower_r14_,
      SL_InterFreqInfoV2X_r14_sl_Bandwidth_r14 sl_Bandwidth_r14_,
      SL_CommResourcePoolV2X_r14 v2x_SchedulingPool_r14_,
      SL_V2X_UE_ConfigList_r14 v2x_UE_ConfigList_r14_,
      SL_InterFreqInfoV2X_r14_additionalSpectrumEmissionV2X_r14 additionalSpectrumEmissionV2X_r14_,
      SL_V2X_FreqSelectionConfigList_r15 v2x_FreqSelectionConfigList_r15_
   ) {
      super();
      plmn_IdentityList_r14 = plmn_IdentityList_r14_;
      v2x_CommCarrierFreq_r14 = new ARFCN_ValueEUTRA_r9 (v2x_CommCarrierFreq_r14_);
      sl_MaxTxPower_r14 = new P_Max (sl_MaxTxPower_r14_);
      sl_Bandwidth_r14 = sl_Bandwidth_r14_;
      v2x_SchedulingPool_r14 = v2x_SchedulingPool_r14_;
      v2x_UE_ConfigList_r14 = v2x_UE_ConfigList_r14_;
      additionalSpectrumEmissionV2X_r14 = additionalSpectrumEmissionV2X_r14_;
      v2x_FreqSelectionConfigList_r15 = v2x_FreqSelectionConfigList_r15_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public SL_InterFreqInfoV2X_r14 (
      long v2x_CommCarrierFreq_r14_
   ) {
      super();
      v2x_CommCarrierFreq_r14 = new ARFCN_ValueEUTRA_r9 (v2x_CommCarrierFreq_r14_);
   }

   public void init () {
      plmn_IdentityList_r14 = null;
      v2x_CommCarrierFreq_r14 = null;
      sl_MaxTxPower_r14 = null;
      sl_Bandwidth_r14 = null;
      v2x_SchedulingPool_r14 = null;
      v2x_UE_ConfigList_r14 = null;
      additionalSpectrumEmissionV2X_r14 = null;
      v2x_FreqSelectionConfigList_r15 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 9; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return plmn_IdentityList_r14;
         case 1: return v2x_CommCarrierFreq_r14;
         case 2: return sl_MaxTxPower_r14;
         case 3: return sl_Bandwidth_r14;
         case 4: return v2x_SchedulingPool_r14;
         case 5: return v2x_UE_ConfigList_r14;
         case 6: return additionalSpectrumEmissionV2X_r14;
         case 7: return v2x_FreqSelectionConfigList_r15;
         case 8: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "plmn-IdentityList-r14";
         case 1: return "v2x-CommCarrierFreq-r14";
         case 2: return "sl-MaxTxPower-r14";
         case 3: return "sl-Bandwidth-r14";
         case 4: return "v2x-SchedulingPool-r14";
         case 5: return "v2x-UE-ConfigList-r14";
         case 6: return "additionalSpectrumEmissionV2X-r14";
         case 7: return "v2x-FreqSelectionConfigList-r15";
         case 8: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean plmn_IdentityList_r14Present = buffer.decodeBit ("plmn_IdentityList_r14Present");
      boolean sl_MaxTxPower_r14Present = buffer.decodeBit ("sl_MaxTxPower_r14Present");
      boolean sl_Bandwidth_r14Present = buffer.decodeBit ("sl_Bandwidth_r14Present");
      boolean v2x_SchedulingPool_r14Present = buffer.decodeBit ("v2x_SchedulingPool_r14Present");
      boolean v2x_UE_ConfigList_r14Present = buffer.decodeBit ("v2x_UE_ConfigList_r14Present");

      // decode plmn_IdentityList_r14

      if (plmn_IdentityList_r14Present) {
         buffer.getContext().eventDispatcher.startElement("plmn_IdentityList_r14", -1);

         plmn_IdentityList_r14 = new PLMN_IdentityList();
         plmn_IdentityList_r14.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("plmn_IdentityList_r14", -1);
      }
      else {
         plmn_IdentityList_r14 = null;
      }

      // decode v2x_CommCarrierFreq_r14

      buffer.getContext().eventDispatcher.startElement("v2x_CommCarrierFreq_r14", -1);

      v2x_CommCarrierFreq_r14 = new ARFCN_ValueEUTRA_r9();
      v2x_CommCarrierFreq_r14.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("v2x_CommCarrierFreq_r14", -1);

      // decode sl_MaxTxPower_r14

      if (sl_MaxTxPower_r14Present) {
         buffer.getContext().eventDispatcher.startElement("sl_MaxTxPower_r14", -1);

         sl_MaxTxPower_r14 = new P_Max();
         sl_MaxTxPower_r14.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sl_MaxTxPower_r14", -1);
      }
      else {
         sl_MaxTxPower_r14 = null;
      }

      // decode sl_Bandwidth_r14

      if (sl_Bandwidth_r14Present) {
         buffer.getContext().eventDispatcher.startElement("sl_Bandwidth_r14", -1);

         int tval = SL_InterFreqInfoV2X_r14_sl_Bandwidth_r14.decodeEnumValue (buffer);
         sl_Bandwidth_r14 = SL_InterFreqInfoV2X_r14_sl_Bandwidth_r14.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("sl_Bandwidth_r14", -1);
      }
      else {
         sl_Bandwidth_r14 = null;
      }

      // decode v2x_SchedulingPool_r14

      if (v2x_SchedulingPool_r14Present) {
         buffer.getContext().eventDispatcher.startElement("v2x_SchedulingPool_r14", -1);

         v2x_SchedulingPool_r14 = new SL_CommResourcePoolV2X_r14();
         v2x_SchedulingPool_r14.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("v2x_SchedulingPool_r14", -1);
      }
      else {
         v2x_SchedulingPool_r14 = null;
      }

      // decode v2x_UE_ConfigList_r14

      if (v2x_UE_ConfigList_r14Present) {
         buffer.getContext().eventDispatcher.startElement("v2x_UE_ConfigList_r14", -1);

         v2x_UE_ConfigList_r14 = new SL_V2X_UE_ConfigList_r14();
         v2x_UE_ConfigList_r14.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("v2x_UE_ConfigList_r14", -1);
      }
      else {
         v2x_UE_ConfigList_r14 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean additionalSpectrumEmissionV2X_r14Present = buffer.decodeBit ("additionalSpectrumEmissionV2X_r14Present");

            // decode additionalSpectrumEmissionV2X_r14

            if (additionalSpectrumEmissionV2X_r14Present) {
               buffer.getContext().eventDispatcher.startElement("additionalSpectrumEmissionV2X_r14", -1);

               additionalSpectrumEmissionV2X_r14 = new SL_InterFreqInfoV2X_r14_additionalSpectrumEmissionV2X_r14();
               additionalSpectrumEmissionV2X_r14.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("additionalSpectrumEmissionV2X_r14", -1);
            }
            else {
               additionalSpectrumEmissionV2X_r14 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean v2x_FreqSelectionConfigList_r15Present = buffer.decodeBit ("v2x_FreqSelectionConfigList_r15Present");

            // decode v2x_FreqSelectionConfigList_r15

            if (v2x_FreqSelectionConfigList_r15Present) {
               buffer.getContext().eventDispatcher.startElement("v2x_FreqSelectionConfigList_r15", -1);

               v2x_FreqSelectionConfigList_r15 = new SL_V2X_FreqSelectionConfigList_r15();
               v2x_FreqSelectionConfigList_r15.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("v2x_FreqSelectionConfigList_r15", -1);
            }
            else {
               v2x_FreqSelectionConfigList_r15 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (plmn_IdentityList_r14 != null) plmn_IdentityList_r14.print (_sb, "plmn_IdentityList_r14", _level+1);
      if (v2x_CommCarrierFreq_r14 != null) v2x_CommCarrierFreq_r14.print (_sb, "v2x_CommCarrierFreq_r14", _level+1);
      if (sl_MaxTxPower_r14 != null) sl_MaxTxPower_r14.print (_sb, "sl_MaxTxPower_r14", _level+1);
      if (sl_Bandwidth_r14 != null) sl_Bandwidth_r14.print (_sb, "sl_Bandwidth_r14", _level+1);
      if (v2x_SchedulingPool_r14 != null) v2x_SchedulingPool_r14.print (_sb, "v2x_SchedulingPool_r14", _level+1);
      if (v2x_UE_ConfigList_r14 != null) v2x_UE_ConfigList_r14.print (_sb, "v2x_UE_ConfigList_r14", _level+1);
      if (additionalSpectrumEmissionV2X_r14 != null) additionalSpectrumEmissionV2X_r14.print (_sb, "additionalSpectrumEmissionV2X_r14", _level+1);
      if (v2x_FreqSelectionConfigList_r15 != null) v2x_FreqSelectionConfigList_r15.print (_sb, "v2x_FreqSelectionConfigList_r15", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
