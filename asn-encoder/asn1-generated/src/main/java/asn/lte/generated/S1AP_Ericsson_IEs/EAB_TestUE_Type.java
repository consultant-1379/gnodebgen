/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.S1AP_Ericsson_IEs;

import com.objsys.asn1j.runtime.*;

public class EAB_TestUE_Type extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_S1AP_Ericsson_IEsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "EAB-TestUE-Type";
   }

   // Integer constants for switch-case
   public static final int _DL_TESTUE = 0;
   public static final int _UL_TESTUE = 1;
   public static final int _VOLTE_TESTUE = 2;
   public static final int _CANDIDATEUE = 3;

   // Singleton instances of EAB_TestUE_Type
   protected static final EAB_TestUE_Type _dL_TestUe = new EAB_TestUE_Type(0);
   protected static final EAB_TestUE_Type _uL_TestUe = new EAB_TestUE_Type(1);
   protected static final EAB_TestUE_Type _voLTE_TestUe = new EAB_TestUE_Type(2);
   protected static final EAB_TestUE_Type _candidateUe = new EAB_TestUE_Type(3);
   private static EAB_TestUE_Type __undefined = new EAB_TestUE_Type(-999);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    */
   protected EAB_TestUE_Type (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for dL_TestUe.
    */
   public static EAB_TestUE_Type dL_TestUe() {
      return _dL_TestUe;
   }

   /**
    * Singleton accessor method for uL_TestUe.
    */
   public static EAB_TestUE_Type uL_TestUe() {
      return _uL_TestUe;
   }

   /**
    * Singleton accessor method for voLTE_TestUe.
    */
   public static EAB_TestUE_Type voLTE_TestUe() {
      return _voLTE_TestUe;
   }

   /**
    * Singleton accessor method for candidateUe.
    */
   public static EAB_TestUE_Type candidateUe() {
      return _candidateUe;
   }

   /** Undefined value. */
   protected static EAB_TestUE_Type __undefined_() { return __undefined; }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return EAB_TestUE_Type.valueOf( EAB_TestUE_Type.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static EAB_TestUE_Type valueOf (int _value)
   {
      switch ((int)_value) {
         case 0: return dL_TestUe();
         case 1: return uL_TestUe();
         case 2: return voLTE_TestUe();
         case 3: return candidateUe();
         default: return __undefined_();
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      boolean extbit = buffer.decodeBit ("extbit");

      if (extbit) {
         ui = buffer.decodeSmallNonNegWholeNumber ();

         switch (ui) {
            case 0: ret = 3; break;
            default: ret = 0x7fffffff; break;
         }
      }
      else {
         ui = (int) buffer.decodeConsWholeNumber (3);

         switch (ui) {
            case 0: ret =  0; break;
            case 1: ret =  1; break;
            case 2: ret =  2; break;
            default: throw new Asn1InvalidEnumException (ui);
         }
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (EAB_TestUE_Type.valueOf(ret).toString());

      return ret;
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("dL-TestUe");
         case 1: return ("uL-TestUe");
         case 2: return ("voLTE-TestUe");
         case 3: return ("candidateUe");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
