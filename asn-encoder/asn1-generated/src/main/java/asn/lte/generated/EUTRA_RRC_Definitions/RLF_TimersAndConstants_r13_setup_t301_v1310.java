/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class RLF_TimersAndConstants_r13_setup_t301_v1310 extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ENUMERATED";
   }

   // Integer constants for switch-case
   public static final int _MS2500 = 0;
   public static final int _MS3000 = 1;
   public static final int _MS3500 = 2;
   public static final int _MS4000 = 3;
   public static final int _MS5000 = 4;
   public static final int _MS6000 = 5;
   public static final int _MS8000 = 6;
   public static final int _MS10000 = 7;

   // Singleton instances of RLF_TimersAndConstants_r13_setup_t301_v1310
   protected static final RLF_TimersAndConstants_r13_setup_t301_v1310 _ms2500 = new RLF_TimersAndConstants_r13_setup_t301_v1310(0);
   protected static final RLF_TimersAndConstants_r13_setup_t301_v1310 _ms3000 = new RLF_TimersAndConstants_r13_setup_t301_v1310(1);
   protected static final RLF_TimersAndConstants_r13_setup_t301_v1310 _ms3500 = new RLF_TimersAndConstants_r13_setup_t301_v1310(2);
   protected static final RLF_TimersAndConstants_r13_setup_t301_v1310 _ms4000 = new RLF_TimersAndConstants_r13_setup_t301_v1310(3);
   protected static final RLF_TimersAndConstants_r13_setup_t301_v1310 _ms5000 = new RLF_TimersAndConstants_r13_setup_t301_v1310(4);
   protected static final RLF_TimersAndConstants_r13_setup_t301_v1310 _ms6000 = new RLF_TimersAndConstants_r13_setup_t301_v1310(5);
   protected static final RLF_TimersAndConstants_r13_setup_t301_v1310 _ms8000 = new RLF_TimersAndConstants_r13_setup_t301_v1310(6);
   protected static final RLF_TimersAndConstants_r13_setup_t301_v1310 _ms10000 = new RLF_TimersAndConstants_r13_setup_t301_v1310(7);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    *   7
    */
   protected RLF_TimersAndConstants_r13_setup_t301_v1310 (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for ms2500.
    */
   public static RLF_TimersAndConstants_r13_setup_t301_v1310 ms2500() {
      return _ms2500;
   }

   /**
    * Singleton accessor method for ms3000.
    */
   public static RLF_TimersAndConstants_r13_setup_t301_v1310 ms3000() {
      return _ms3000;
   }

   /**
    * Singleton accessor method for ms3500.
    */
   public static RLF_TimersAndConstants_r13_setup_t301_v1310 ms3500() {
      return _ms3500;
   }

   /**
    * Singleton accessor method for ms4000.
    */
   public static RLF_TimersAndConstants_r13_setup_t301_v1310 ms4000() {
      return _ms4000;
   }

   /**
    * Singleton accessor method for ms5000.
    */
   public static RLF_TimersAndConstants_r13_setup_t301_v1310 ms5000() {
      return _ms5000;
   }

   /**
    * Singleton accessor method for ms6000.
    */
   public static RLF_TimersAndConstants_r13_setup_t301_v1310 ms6000() {
      return _ms6000;
   }

   /**
    * Singleton accessor method for ms8000.
    */
   public static RLF_TimersAndConstants_r13_setup_t301_v1310 ms8000() {
      return _ms8000;
   }

   /**
    * Singleton accessor method for ms10000.
    */
   public static RLF_TimersAndConstants_r13_setup_t301_v1310 ms10000() {
      return _ms10000;
   }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return RLF_TimersAndConstants_r13_setup_t301_v1310.valueOf( RLF_TimersAndConstants_r13_setup_t301_v1310.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static RLF_TimersAndConstants_r13_setup_t301_v1310 valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 0: return ms2500();
         case 1: return ms3000();
         case 2: return ms3500();
         case 3: return ms4000();
         case 4: return ms5000();
         case 5: return ms6000();
         case 6: return ms8000();
         case 7: return ms10000();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      ui = (int) buffer.decodeConsWholeNumber (8);

      switch (ui) {
         case 0: ret =  0; break;
         case 1: ret =  1; break;
         case 2: ret =  2; break;
         case 3: ret =  3; break;
         case 4: ret =  4; break;
         case 5: ret =  5; break;
         case 6: ret =  6; break;
         case 7: ret =  7; break;
         default: throw new Asn1InvalidEnumException (ui);
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (RLF_TimersAndConstants_r13_setup_t301_v1310.valueOf(ret).toString());

      return ret;
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("ms2500");
         case 1: return ("ms3000");
         case 2: return ("ms3500");
         case 3: return ("ms4000");
         case 4: return ("ms5000");
         case 5: return ("ms6000");
         case 6: return ("ms8000");
         case 7: return ("ms10000");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
