/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_InterNodeDefinitions;

import com.objsys.asn1j.runtime.*;
import asn.lte.generated.NR_RRC_Definitions.RRCReconfiguration;
import asn.lte.generated.NR_RRC_Definitions.RadioBearerConfig;

public class AS_Config extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_InterNodeDefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "AS-Config";
   }

   public RRCReconfiguration rrcReconfiguration;
   public boolean mV2ExtPresent;
   public RadioBearerConfig sourceRB_SN_Config;  // optional
   public RRCReconfiguration sourceSCG_NR_Config;  // optional
   public Asn1OctetString sourceSCG_EUTRA_Config;  // optional
   public boolean mV3ExtPresent;
   public AS_Config_sourceSCG_Configured sourceSCG_Configured = null;  // optional
   public Asn1OpenExt extElem1;

   public AS_Config () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public AS_Config (
      RRCReconfiguration rrcReconfiguration_,
      RadioBearerConfig sourceRB_SN_Config_,
      RRCReconfiguration sourceSCG_NR_Config_,
      Asn1OctetString sourceSCG_EUTRA_Config_,
      AS_Config_sourceSCG_Configured sourceSCG_Configured_
   ) {
      super();
      rrcReconfiguration = rrcReconfiguration_;
      sourceRB_SN_Config = sourceRB_SN_Config_;
      sourceSCG_NR_Config = sourceSCG_NR_Config_;
      sourceSCG_EUTRA_Config = sourceSCG_EUTRA_Config_;
      sourceSCG_Configured = sourceSCG_Configured_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public AS_Config (
      RRCReconfiguration rrcReconfiguration_
   ) {
      super();
      rrcReconfiguration = rrcReconfiguration_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public AS_Config (RRCReconfiguration rrcReconfiguration_,
      RadioBearerConfig sourceRB_SN_Config_,
      RRCReconfiguration sourceSCG_NR_Config_,
      byte[] sourceSCG_EUTRA_Config_,
      AS_Config_sourceSCG_Configured sourceSCG_Configured_
   ) {
      super();
      rrcReconfiguration = rrcReconfiguration_;
      sourceRB_SN_Config = sourceRB_SN_Config_;
      sourceSCG_NR_Config = sourceSCG_NR_Config_;
      sourceSCG_EUTRA_Config = new Asn1OctetString (sourceSCG_EUTRA_Config_);
      sourceSCG_Configured = sourceSCG_Configured_;
   }

   public void init () {
      rrcReconfiguration = null;
      sourceRB_SN_Config = null;
      sourceSCG_NR_Config = null;
      sourceSCG_EUTRA_Config = null;
      sourceSCG_Configured = null;
      extElem1 = null;
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return rrcReconfiguration;
         case 1: return sourceRB_SN_Config;
         case 2: return sourceSCG_NR_Config;
         case 3: return sourceSCG_EUTRA_Config;
         case 4: return sourceSCG_Configured;
         case 5: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "rrcReconfiguration";
         case 1: return "sourceRB-SN-Config";
         case 2: return "sourceSCG-NR-Config";
         case 3: return "sourceSCG-EUTRA-Config";
         case 4: return "sourceSCG-Configured";
         case 5: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      // decode rrcReconfiguration

      buffer.getContext().eventDispatcher.startElement("rrcReconfiguration", -1);

      {
         Asn1OctetString rrcReconfiguration_outer = new Asn1OctetString();
         rrcReconfiguration_outer.decode (buffer);
         if (rrcReconfiguration_outer.value == null) throw new Asn1Exception("contained type's complete encoding is empty");
         Asn1PerDecodeBuffer savedBuffer = buffer;
         buffer = new Asn1PerDecodeBuffer( rrcReconfiguration_outer.value, buffer.isAligned());
         buffer.setEventHandlerList( savedBuffer );
         rrcReconfiguration = new RRCReconfiguration();
         rrcReconfiguration.decode (buffer);
         buffer = savedBuffer;
      }
      buffer.getContext().eventDispatcher.endElement("rrcReconfiguration", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean sourceRB_SN_ConfigPresent = buffer.decodeBit ("sourceRB_SN_ConfigPresent");

            boolean sourceSCG_NR_ConfigPresent = buffer.decodeBit ("sourceSCG_NR_ConfigPresent");

            boolean sourceSCG_EUTRA_ConfigPresent = buffer.decodeBit ("sourceSCG_EUTRA_ConfigPresent");

            // decode sourceRB_SN_Config

            if (sourceRB_SN_ConfigPresent) {
               buffer.getContext().eventDispatcher.startElement("sourceRB_SN_Config", -1);

               Asn1OctetString sourceRB_SN_Config_outer = new Asn1OctetString();
               sourceRB_SN_Config_outer.decode (buffer);
               if (sourceRB_SN_Config_outer.value == null) throw new Asn1Exception("contained type's complete encoding is empty");
               Asn1PerDecodeBuffer savedBuffer = buffer;
               buffer = new Asn1PerDecodeBuffer( sourceRB_SN_Config_outer.value, buffer.isAligned());
               buffer.setEventHandlerList( savedBuffer );
               sourceRB_SN_Config = new RadioBearerConfig();
               sourceRB_SN_Config.decode (buffer);
               buffer = savedBuffer;
               buffer.getContext().eventDispatcher.endElement("sourceRB_SN_Config", -1);
            }
            else {
               sourceRB_SN_Config = null;
            }

            // decode sourceSCG_NR_Config

            if (sourceSCG_NR_ConfigPresent) {
               buffer.getContext().eventDispatcher.startElement("sourceSCG_NR_Config", -1);

               Asn1OctetString sourceSCG_NR_Config_outer = new Asn1OctetString();
               sourceSCG_NR_Config_outer.decode (buffer);
               if (sourceSCG_NR_Config_outer.value == null) throw new Asn1Exception("contained type's complete encoding is empty");
               Asn1PerDecodeBuffer savedBuffer = buffer;
               buffer = new Asn1PerDecodeBuffer( sourceSCG_NR_Config_outer.value, buffer.isAligned());
               buffer.setEventHandlerList( savedBuffer );
               sourceSCG_NR_Config = new RRCReconfiguration();
               sourceSCG_NR_Config.decode (buffer);
               buffer = savedBuffer;
               buffer.getContext().eventDispatcher.endElement("sourceSCG_NR_Config", -1);
            }
            else {
               sourceSCG_NR_Config = null;
            }

            // decode sourceSCG_EUTRA_Config

            if (sourceSCG_EUTRA_ConfigPresent) {
               buffer.getContext().eventDispatcher.startElement("sourceSCG_EUTRA_Config", -1);

               sourceSCG_EUTRA_Config = new Asn1OctetString();
               sourceSCG_EUTRA_Config.decode (buffer);

               buffer.invokeCharacters(sourceSCG_EUTRA_Config.toString());
               buffer.getContext().eventDispatcher.endElement("sourceSCG_EUTRA_Config", -1);
            }
            else {
               sourceSCG_EUTRA_Config = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean sourceSCG_ConfiguredPresent = buffer.decodeBit ("sourceSCG_ConfiguredPresent");

            // decode sourceSCG_Configured

            if (sourceSCG_ConfiguredPresent) {
               buffer.getContext().eventDispatcher.startElement("sourceSCG_Configured", -1);

               int tval = AS_Config_sourceSCG_Configured.decodeEnumValue (buffer);
               sourceSCG_Configured = AS_Config_sourceSCG_Configured.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("sourceSCG_Configured", -1);
            }
            else {
               sourceSCG_Configured = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (rrcReconfiguration != null) rrcReconfiguration.print (_sb, "rrcReconfiguration", _level+1);
      if (sourceRB_SN_Config != null) sourceRB_SN_Config.print (_sb, "sourceRB_SN_Config", _level+1);
      if (sourceSCG_NR_Config != null) sourceSCG_NR_Config.print (_sb, "sourceSCG_NR_Config", _level+1);
      if (sourceSCG_EUTRA_Config != null) sourceSCG_EUTRA_Config.print (_sb, "sourceSCG_EUTRA_Config", _level+1);
      if (sourceSCG_Configured != null) sourceSCG_Configured.print (_sb, "sourceSCG_Configured", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
