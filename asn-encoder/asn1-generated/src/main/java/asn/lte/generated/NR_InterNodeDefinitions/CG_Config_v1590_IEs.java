/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_InterNodeDefinitions;

import com.objsys.asn1j.runtime.*;

public class CG_Config_v1590_IEs extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_InterNodeDefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CG-Config-v1590-IEs";
   }

   public CG_Config_v1590_IEs_scellFrequenciesSN_NR scellFrequenciesSN_NR;  // optional
   public CG_Config_v1590_IEs_scellFrequenciesSN_EUTRA scellFrequenciesSN_EUTRA;  // optional
   public CG_Config_v1610_IEs nonCriticalExtension;  // optional

   public CG_Config_v1590_IEs () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CG_Config_v1590_IEs (
      CG_Config_v1590_IEs_scellFrequenciesSN_NR scellFrequenciesSN_NR_,
      CG_Config_v1590_IEs_scellFrequenciesSN_EUTRA scellFrequenciesSN_EUTRA_,
      CG_Config_v1610_IEs nonCriticalExtension_
   ) {
      super();
      scellFrequenciesSN_NR = scellFrequenciesSN_NR_;
      scellFrequenciesSN_EUTRA = scellFrequenciesSN_EUTRA_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   public void init () {
      scellFrequenciesSN_NR = null;
      scellFrequenciesSN_EUTRA = null;
      nonCriticalExtension = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return scellFrequenciesSN_NR;
         case 1: return scellFrequenciesSN_EUTRA;
         case 2: return nonCriticalExtension;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "scellFrequenciesSN-NR";
         case 1: return "scellFrequenciesSN-EUTRA";
         case 2: return "nonCriticalExtension";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean scellFrequenciesSN_NRPresent = buffer.decodeBit ("scellFrequenciesSN_NRPresent");
      boolean scellFrequenciesSN_EUTRAPresent = buffer.decodeBit ("scellFrequenciesSN_EUTRAPresent");
      boolean nonCriticalExtensionPresent = buffer.decodeBit ("nonCriticalExtensionPresent");

      // decode scellFrequenciesSN_NR

      if (scellFrequenciesSN_NRPresent) {
         buffer.getContext().eventDispatcher.startElement("scellFrequenciesSN_NR", -1);

         scellFrequenciesSN_NR = new CG_Config_v1590_IEs_scellFrequenciesSN_NR();
         scellFrequenciesSN_NR.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("scellFrequenciesSN_NR", -1);
      }
      else {
         scellFrequenciesSN_NR = null;
      }

      // decode scellFrequenciesSN_EUTRA

      if (scellFrequenciesSN_EUTRAPresent) {
         buffer.getContext().eventDispatcher.startElement("scellFrequenciesSN_EUTRA", -1);

         scellFrequenciesSN_EUTRA = new CG_Config_v1590_IEs_scellFrequenciesSN_EUTRA();
         scellFrequenciesSN_EUTRA.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("scellFrequenciesSN_EUTRA", -1);
      }
      else {
         scellFrequenciesSN_EUTRA = null;
      }

      // decode nonCriticalExtension

      if (nonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension = new CG_Config_v1610_IEs();
         nonCriticalExtension.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }
      else {
         nonCriticalExtension = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (scellFrequenciesSN_NR != null) scellFrequenciesSN_NR.print (_sb, "scellFrequenciesSN_NR", _level+1);
      if (scellFrequenciesSN_EUTRA != null) scellFrequenciesSN_EUTRA.print (_sb, "scellFrequenciesSN_EUTRA", _level+1);
      if (nonCriticalExtension != null) nonCriticalExtension.print (_sb, "nonCriticalExtension", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
