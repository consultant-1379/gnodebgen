/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class DMRS_DownlinkConfig extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "DMRS-DownlinkConfig";
   }

   public DMRS_DownlinkConfig_dmrs_Type dmrs_Type = null;  // optional
   public DMRS_DownlinkConfig_dmrs_AdditionalPosition dmrs_AdditionalPosition = null;  // optional
   public DMRS_DownlinkConfig_maxLength maxLength = null;  // optional
   public Asn1Integer scramblingID0;  // optional
   public Asn1Integer scramblingID1;  // optional
   public DMRS_DownlinkConfig_phaseTrackingRS phaseTrackingRS;  // optional
   public boolean mV2ExtPresent;
   public DMRS_DownlinkConfig_dmrs_Downlink_r16 dmrs_Downlink_r16 = null;  // optional
   public Asn1OpenExt extElem1;

   public DMRS_DownlinkConfig () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public DMRS_DownlinkConfig (
      DMRS_DownlinkConfig_dmrs_Type dmrs_Type_,
      DMRS_DownlinkConfig_dmrs_AdditionalPosition dmrs_AdditionalPosition_,
      DMRS_DownlinkConfig_maxLength maxLength_,
      Asn1Integer scramblingID0_,
      Asn1Integer scramblingID1_,
      DMRS_DownlinkConfig_phaseTrackingRS phaseTrackingRS_,
      DMRS_DownlinkConfig_dmrs_Downlink_r16 dmrs_Downlink_r16_
   ) {
      super();
      dmrs_Type = dmrs_Type_;
      dmrs_AdditionalPosition = dmrs_AdditionalPosition_;
      maxLength = maxLength_;
      scramblingID0 = scramblingID0_;
      scramblingID1 = scramblingID1_;
      phaseTrackingRS = phaseTrackingRS_;
      dmrs_Downlink_r16 = dmrs_Downlink_r16_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public DMRS_DownlinkConfig (DMRS_DownlinkConfig_dmrs_Type dmrs_Type_,
      DMRS_DownlinkConfig_dmrs_AdditionalPosition dmrs_AdditionalPosition_,
      DMRS_DownlinkConfig_maxLength maxLength_,
      long scramblingID0_,
      long scramblingID1_,
      DMRS_DownlinkConfig_phaseTrackingRS phaseTrackingRS_,
      DMRS_DownlinkConfig_dmrs_Downlink_r16 dmrs_Downlink_r16_
   ) {
      super();
      dmrs_Type = dmrs_Type_;
      dmrs_AdditionalPosition = dmrs_AdditionalPosition_;
      maxLength = maxLength_;
      scramblingID0 = new Asn1Integer (scramblingID0_);
      scramblingID1 = new Asn1Integer (scramblingID1_);
      phaseTrackingRS = phaseTrackingRS_;
      dmrs_Downlink_r16 = dmrs_Downlink_r16_;
   }

   public void init () {
      dmrs_Type = null;
      dmrs_AdditionalPosition = null;
      maxLength = null;
      scramblingID0 = null;
      scramblingID1 = null;
      phaseTrackingRS = null;
      dmrs_Downlink_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 8; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return dmrs_Type;
         case 1: return dmrs_AdditionalPosition;
         case 2: return maxLength;
         case 3: return scramblingID0;
         case 4: return scramblingID1;
         case 5: return phaseTrackingRS;
         case 6: return dmrs_Downlink_r16;
         case 7: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "dmrs-Type";
         case 1: return "dmrs-AdditionalPosition";
         case 2: return "maxLength";
         case 3: return "scramblingID0";
         case 4: return "scramblingID1";
         case 5: return "phaseTrackingRS";
         case 6: return "dmrs-Downlink-r16";
         case 7: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean dmrs_TypePresent = buffer.decodeBit ("dmrs_TypePresent");
      boolean dmrs_AdditionalPositionPresent = buffer.decodeBit ("dmrs_AdditionalPositionPresent");
      boolean maxLengthPresent = buffer.decodeBit ("maxLengthPresent");
      boolean scramblingID0Present = buffer.decodeBit ("scramblingID0Present");
      boolean scramblingID1Present = buffer.decodeBit ("scramblingID1Present");
      boolean phaseTrackingRSPresent = buffer.decodeBit ("phaseTrackingRSPresent");

      // decode dmrs_Type

      if (dmrs_TypePresent) {
         buffer.getContext().eventDispatcher.startElement("dmrs_Type", -1);

         int tval = DMRS_DownlinkConfig_dmrs_Type.decodeEnumValue (buffer);
         dmrs_Type = DMRS_DownlinkConfig_dmrs_Type.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("dmrs_Type", -1);
      }
      else {
         dmrs_Type = null;
      }

      // decode dmrs_AdditionalPosition

      if (dmrs_AdditionalPositionPresent) {
         buffer.getContext().eventDispatcher.startElement("dmrs_AdditionalPosition", -1);

         int tval = DMRS_DownlinkConfig_dmrs_AdditionalPosition.decodeEnumValue (buffer);
         dmrs_AdditionalPosition = DMRS_DownlinkConfig_dmrs_AdditionalPosition.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("dmrs_AdditionalPosition", -1);
      }
      else {
         dmrs_AdditionalPosition = null;
      }

      // decode maxLength

      if (maxLengthPresent) {
         buffer.getContext().eventDispatcher.startElement("maxLength", -1);

         int tval = DMRS_DownlinkConfig_maxLength.decodeEnumValue (buffer);
         maxLength = DMRS_DownlinkConfig_maxLength.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("maxLength", -1);
      }
      else {
         maxLength = null;
      }

      // decode scramblingID0

      if (scramblingID0Present) {
         buffer.getContext().eventDispatcher.startElement("scramblingID0", -1);

         scramblingID0 = new Asn1Integer();
         scramblingID0.decode (buffer, 0, 65535);

         buffer.invokeCharacters(scramblingID0.toString());
         buffer.getContext().eventDispatcher.endElement("scramblingID0", -1);
      }
      else {
         scramblingID0 = null;
      }

      // decode scramblingID1

      if (scramblingID1Present) {
         buffer.getContext().eventDispatcher.startElement("scramblingID1", -1);

         scramblingID1 = new Asn1Integer();
         scramblingID1.decode (buffer, 0, 65535);

         buffer.invokeCharacters(scramblingID1.toString());
         buffer.getContext().eventDispatcher.endElement("scramblingID1", -1);
      }
      else {
         scramblingID1 = null;
      }

      // decode phaseTrackingRS

      if (phaseTrackingRSPresent) {
         buffer.getContext().eventDispatcher.startElement("phaseTrackingRS", -1);

         phaseTrackingRS = new DMRS_DownlinkConfig_phaseTrackingRS();
         phaseTrackingRS.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("phaseTrackingRS", -1);
      }
      else {
         phaseTrackingRS = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean dmrs_Downlink_r16Present = buffer.decodeBit ("dmrs_Downlink_r16Present");

            // decode dmrs_Downlink_r16

            if (dmrs_Downlink_r16Present) {
               buffer.getContext().eventDispatcher.startElement("dmrs_Downlink_r16", -1);

               int tval = DMRS_DownlinkConfig_dmrs_Downlink_r16.decodeEnumValue (buffer);
               dmrs_Downlink_r16 = DMRS_DownlinkConfig_dmrs_Downlink_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("dmrs_Downlink_r16", -1);
            }
            else {
               dmrs_Downlink_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (dmrs_Type != null) dmrs_Type.print (_sb, "dmrs_Type", _level+1);
      if (dmrs_AdditionalPosition != null) dmrs_AdditionalPosition.print (_sb, "dmrs_AdditionalPosition", _level+1);
      if (maxLength != null) maxLength.print (_sb, "maxLength", _level+1);
      if (scramblingID0 != null) scramblingID0.print (_sb, "scramblingID0", _level+1);
      if (scramblingID1 != null) scramblingID1.print (_sb, "scramblingID1", _level+1);
      if (phaseTrackingRS != null) phaseTrackingRS.print (_sb, "phaseTrackingRS", _level+1);
      if (dmrs_Downlink_r16 != null) dmrs_Downlink_r16.print (_sb, "dmrs_Downlink_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
