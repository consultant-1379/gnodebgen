/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SL_CommConfig_r12 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SL-CommConfig-r12";
   }

   public SL_CommConfig_r12_commTxResources_r12 commTxResources_r12;  // optional
   public boolean mV2ExtPresent;
   public SL_CommConfig_r12_commTxResources_v1310 commTxResources_v1310;  // optional
   public Asn1Boolean commTxAllowRelayDedicated_r13;  // optional
   public Asn1OpenExt extElem1;

   public SL_CommConfig_r12 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SL_CommConfig_r12 (
      SL_CommConfig_r12_commTxResources_r12 commTxResources_r12_,
      SL_CommConfig_r12_commTxResources_v1310 commTxResources_v1310_,
      Asn1Boolean commTxAllowRelayDedicated_r13_
   ) {
      super();
      commTxResources_r12 = commTxResources_r12_;
      commTxResources_v1310 = commTxResources_v1310_;
      commTxAllowRelayDedicated_r13 = commTxAllowRelayDedicated_r13_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SL_CommConfig_r12 (SL_CommConfig_r12_commTxResources_r12 commTxResources_r12_,
      SL_CommConfig_r12_commTxResources_v1310 commTxResources_v1310_,
      boolean commTxAllowRelayDedicated_r13_
   ) {
      super();
      commTxResources_r12 = commTxResources_r12_;
      commTxResources_v1310 = commTxResources_v1310_;
      commTxAllowRelayDedicated_r13 = new Asn1Boolean (commTxAllowRelayDedicated_r13_);
   }

   public void init () {
      commTxResources_r12 = null;
      commTxResources_v1310 = null;
      commTxAllowRelayDedicated_r13 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return commTxResources_r12;
         case 1: return commTxResources_v1310;
         case 2: return commTxAllowRelayDedicated_r13;
         case 3: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "commTxResources-r12";
         case 1: return "commTxResources-v1310";
         case 2: return "commTxAllowRelayDedicated-r13";
         case 3: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean commTxResources_r12Present = buffer.decodeBit ("commTxResources_r12Present");

      // decode commTxResources_r12

      if (commTxResources_r12Present) {
         buffer.getContext().eventDispatcher.startElement("commTxResources_r12", -1);

         commTxResources_r12 = new SL_CommConfig_r12_commTxResources_r12();
         commTxResources_r12.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("commTxResources_r12", -1);
      }
      else {
         commTxResources_r12 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean commTxResources_v1310Present = buffer.decodeBit ("commTxResources_v1310Present");

            boolean commTxAllowRelayDedicated_r13Present = buffer.decodeBit ("commTxAllowRelayDedicated_r13Present");

            // decode commTxResources_v1310

            if (commTxResources_v1310Present) {
               buffer.getContext().eventDispatcher.startElement("commTxResources_v1310", -1);

               commTxResources_v1310 = new SL_CommConfig_r12_commTxResources_v1310();
               commTxResources_v1310.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("commTxResources_v1310", -1);
            }
            else {
               commTxResources_v1310 = null;
            }

            // decode commTxAllowRelayDedicated_r13

            if (commTxAllowRelayDedicated_r13Present) {
               buffer.getContext().eventDispatcher.startElement("commTxAllowRelayDedicated_r13", -1);

               commTxAllowRelayDedicated_r13 = new Asn1Boolean();
               commTxAllowRelayDedicated_r13.decode (buffer);

               buffer.invokeCharacters(commTxAllowRelayDedicated_r13.toString());
               buffer.getContext().eventDispatcher.endElement("commTxAllowRelayDedicated_r13", -1);
            }
            else {
               commTxAllowRelayDedicated_r13 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (commTxResources_r12 != null) commTxResources_r12.print (_sb, "commTxResources_r12", _level+1);
      if (commTxResources_v1310 != null) commTxResources_v1310.print (_sb, "commTxResources_v1310", _level+1);
      if (commTxAllowRelayDedicated_r13 != null) commTxAllowRelayDedicated_r13.print (_sb, "commTxAllowRelayDedicated_r13", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
