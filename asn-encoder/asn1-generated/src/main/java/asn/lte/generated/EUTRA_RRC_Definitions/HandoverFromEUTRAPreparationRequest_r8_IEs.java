/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class HandoverFromEUTRAPreparationRequest_r8_IEs extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "HandoverFromEUTRAPreparationRequest-r8-IEs";
   }

   public CDMA2000_Type cdma2000_Type = null;
   public RAND_CDMA2000 rand;  // optional
   public MobilityParametersCDMA2000 mobilityParameters;  // optional
   public HandoverFromEUTRAPreparationRequest_v890_IEs nonCriticalExtension;  // optional

   public HandoverFromEUTRAPreparationRequest_r8_IEs () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public HandoverFromEUTRAPreparationRequest_r8_IEs (
      CDMA2000_Type cdma2000_Type_,
      RAND_CDMA2000 rand_,
      MobilityParametersCDMA2000 mobilityParameters_,
      HandoverFromEUTRAPreparationRequest_v890_IEs nonCriticalExtension_
   ) {
      super();
      cdma2000_Type = cdma2000_Type_;
      rand = rand_;
      mobilityParameters = mobilityParameters_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public HandoverFromEUTRAPreparationRequest_r8_IEs (
      CDMA2000_Type cdma2000_Type_
   ) {
      super();
      cdma2000_Type = cdma2000_Type_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public HandoverFromEUTRAPreparationRequest_r8_IEs (CDMA2000_Type cdma2000_Type_,
      RAND_CDMA2000 rand_,
      byte[] mobilityParameters_,
      HandoverFromEUTRAPreparationRequest_v890_IEs nonCriticalExtension_
   ) {
      super();
      cdma2000_Type = cdma2000_Type_;
      rand = rand_;
      mobilityParameters = new MobilityParametersCDMA2000 (mobilityParameters_);
      nonCriticalExtension = nonCriticalExtension_;
   }

   public void init () {
      cdma2000_Type = null;
      rand = null;
      mobilityParameters = null;
      nonCriticalExtension = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return cdma2000_Type;
         case 1: return rand;
         case 2: return mobilityParameters;
         case 3: return nonCriticalExtension;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "cdma2000-Type";
         case 1: return "rand";
         case 2: return "mobilityParameters";
         case 3: return "nonCriticalExtension";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean randPresent = buffer.decodeBit ("randPresent");
      boolean mobilityParametersPresent = buffer.decodeBit ("mobilityParametersPresent");
      boolean nonCriticalExtensionPresent = buffer.decodeBit ("nonCriticalExtensionPresent");

      // decode cdma2000_Type

      buffer.getContext().eventDispatcher.startElement("cdma2000_Type", -1);

      {
         int tval = CDMA2000_Type.decodeEnumValue (buffer);
         cdma2000_Type = CDMA2000_Type.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("cdma2000_Type", -1);

      // decode rand

      if (randPresent) {
         buffer.getContext().eventDispatcher.startElement("rand", -1);

         rand = new RAND_CDMA2000();
         rand.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("rand", -1);
      }
      else {
         rand = null;
      }

      // decode mobilityParameters

      if (mobilityParametersPresent) {
         buffer.getContext().eventDispatcher.startElement("mobilityParameters", -1);

         mobilityParameters = new MobilityParametersCDMA2000();
         mobilityParameters.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("mobilityParameters", -1);
      }
      else {
         mobilityParameters = null;
      }

      // decode nonCriticalExtension

      if (nonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension = new HandoverFromEUTRAPreparationRequest_v890_IEs();
         nonCriticalExtension.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }
      else {
         nonCriticalExtension = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (cdma2000_Type != null) cdma2000_Type.print (_sb, "cdma2000_Type", _level+1);
      if (rand != null) rand.print (_sb, "rand", _level+1);
      if (mobilityParameters != null) mobilityParameters.print (_sb, "mobilityParameters", _level+1);
      if (nonCriticalExtension != null) nonCriticalExtension.print (_sb, "nonCriticalExtension", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
