/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class RSTD_InterFreqInfo_r10_measPRS_Offset_r15 extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CHOICE";
   }

   // Choice element identifier constants
   public final static byte _RSTD0_R15 = 1;
   public final static byte _RSTD1_R15 = 2;
   public final static byte _RSTD2_R15 = 3;
   public final static byte _RSTD3_R15 = 4;
   public final static byte _RSTD4_R15 = 5;
   public final static byte _RSTD5_R15 = 6;
   public final static byte _RSTD6_R15 = 7;
   public final static byte _RSTD7_R15 = 8;
   public final static byte _RSTD8_R15 = 9;
   public final static byte _RSTD9_R15 = 10;
   public final static byte _RSTD10_R15 = 11;
   public final static byte _RSTD11_R15 = 12;
   public final static byte _RSTD12_R15 = 13;
   public final static byte _RSTD13_R15 = 14;
   public final static byte _RSTD14_R15 = 15;
   public final static byte _RSTD15_R15 = 16;
   public final static byte _RSTD16_R15 = 17;
   public final static byte _RSTD17_R15 = 18;
   public final static byte _RSTD18_R15 = 19;
   public final static byte _RSTD19_R15 = 20;
   public final static byte _RSTD20_R15 = 21;

   public RSTD_InterFreqInfo_r10_measPRS_Offset_r15 () {
      super();
   }

   public RSTD_InterFreqInfo_r10_measPRS_Offset_r15 (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _RSTD0_R15: return "rstd0_r15";
      case _RSTD1_R15: return "rstd1_r15";
      case _RSTD2_R15: return "rstd2_r15";
      case _RSTD3_R15: return "rstd3_r15";
      case _RSTD4_R15: return "rstd4_r15";
      case _RSTD5_R15: return "rstd5_r15";
      case _RSTD6_R15: return "rstd6_r15";
      case _RSTD7_R15: return "rstd7_r15";
      case _RSTD8_R15: return "rstd8_r15";
      case _RSTD9_R15: return "rstd9_r15";
      case _RSTD10_R15: return "rstd10_r15";
      case _RSTD11_R15: return "rstd11_r15";
      case _RSTD12_R15: return "rstd12_r15";
      case _RSTD13_R15: return "rstd13_r15";
      case _RSTD14_R15: return "rstd14_r15";
      case _RSTD15_R15: return "rstd15_r15";
      case _RSTD16_R15: return "rstd16_r15";
      case _RSTD17_R15: return "rstd17_r15";
      case _RSTD18_R15: return "rstd18_r15";
      case _RSTD19_R15: return "rstd19_r15";
      case _RSTD20_R15: return "rstd20_r15";
      default: return "UNDEFINED";
      }
   }

   public void set_rstd0_r15 (Asn1Integer value) {
      setElement (_RSTD0_R15, value);
   }

   public void set_rstd1_r15 (Asn1Integer value) {
      setElement (_RSTD1_R15, value);
   }

   public void set_rstd2_r15 (Asn1Integer value) {
      setElement (_RSTD2_R15, value);
   }

   public void set_rstd3_r15 (Asn1Integer value) {
      setElement (_RSTD3_R15, value);
   }

   public void set_rstd4_r15 (Asn1Integer value) {
      setElement (_RSTD4_R15, value);
   }

   public void set_rstd5_r15 (Asn1Integer value) {
      setElement (_RSTD5_R15, value);
   }

   public void set_rstd6_r15 (Asn1Integer value) {
      setElement (_RSTD6_R15, value);
   }

   public void set_rstd7_r15 (Asn1Integer value) {
      setElement (_RSTD7_R15, value);
   }

   public void set_rstd8_r15 (Asn1Integer value) {
      setElement (_RSTD8_R15, value);
   }

   public void set_rstd9_r15 (Asn1Integer value) {
      setElement (_RSTD9_R15, value);
   }

   public void set_rstd10_r15 (Asn1Integer value) {
      setElement (_RSTD10_R15, value);
   }

   public void set_rstd11_r15 (Asn1Integer value) {
      setElement (_RSTD11_R15, value);
   }

   public void set_rstd12_r15 (Asn1Integer value) {
      setElement (_RSTD12_R15, value);
   }

   public void set_rstd13_r15 (Asn1Integer value) {
      setElement (_RSTD13_R15, value);
   }

   public void set_rstd14_r15 (Asn1Integer value) {
      setElement (_RSTD14_R15, value);
   }

   public void set_rstd15_r15 (Asn1Integer value) {
      setElement (_RSTD15_R15, value);
   }

   public void set_rstd16_r15 (Asn1Integer value) {
      setElement (_RSTD16_R15, value);
   }

   public void set_rstd17_r15 (Asn1Integer value) {
      setElement (_RSTD17_R15, value);
   }

   public void set_rstd18_r15 (Asn1Integer value) {
      setElement (_RSTD18_R15, value);
   }

   public void set_rstd19_r15 (Asn1Integer value) {
      setElement (_RSTD19_R15, value);
   }

   public void set_rstd20_r15 (Asn1Integer value) {
      setElement (_RSTD20_R15, value);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int idx = (int) buffer.decodeConsWholeNumber (21, "index");
      choiceID = idx + 1;
      buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

      switch (idx) {
         // rstd0_r15
         case 0: { 
            Asn1Integer rstd0_r15;
            element = rstd0_r15 = new Asn1Integer();
            rstd0_r15.decode (buffer, 0, 79);

            buffer.invokeCharacters(rstd0_r15.toString());
            break;
         }

         // rstd1_r15
         case 1: { 
            Asn1Integer rstd1_r15;
            element = rstd1_r15 = new Asn1Integer();
            rstd1_r15.decode (buffer, 0, 159);

            buffer.invokeCharacters(rstd1_r15.toString());
            break;
         }

         // rstd2_r15
         case 2: { 
            Asn1Integer rstd2_r15;
            element = rstd2_r15 = new Asn1Integer();
            rstd2_r15.decode (buffer, 0, 319);

            buffer.invokeCharacters(rstd2_r15.toString());
            break;
         }

         // rstd3_r15
         case 3: { 
            Asn1Integer rstd3_r15;
            element = rstd3_r15 = new Asn1Integer();
            rstd3_r15.decode (buffer, 0, 639);

            buffer.invokeCharacters(rstd3_r15.toString());
            break;
         }

         // rstd4_r15
         case 4: { 
            Asn1Integer rstd4_r15;
            element = rstd4_r15 = new Asn1Integer();
            rstd4_r15.decode (buffer, 0, 1279);

            buffer.invokeCharacters(rstd4_r15.toString());
            break;
         }

         // rstd5_r15
         case 5: { 
            Asn1Integer rstd5_r15;
            element = rstd5_r15 = new Asn1Integer();
            rstd5_r15.decode (buffer, 0, 159);

            buffer.invokeCharacters(rstd5_r15.toString());
            break;
         }

         // rstd6_r15
         case 6: { 
            Asn1Integer rstd6_r15;
            element = rstd6_r15 = new Asn1Integer();
            rstd6_r15.decode (buffer, 0, 319);

            buffer.invokeCharacters(rstd6_r15.toString());
            break;
         }

         // rstd7_r15
         case 7: { 
            Asn1Integer rstd7_r15;
            element = rstd7_r15 = new Asn1Integer();
            rstd7_r15.decode (buffer, 0, 639);

            buffer.invokeCharacters(rstd7_r15.toString());
            break;
         }

         // rstd8_r15
         case 8: { 
            Asn1Integer rstd8_r15;
            element = rstd8_r15 = new Asn1Integer();
            rstd8_r15.decode (buffer, 0, 1279);

            buffer.invokeCharacters(rstd8_r15.toString());
            break;
         }

         // rstd9_r15
         case 9: { 
            Asn1Integer rstd9_r15;
            element = rstd9_r15 = new Asn1Integer();
            rstd9_r15.decode (buffer, 0, 319);

            buffer.invokeCharacters(rstd9_r15.toString());
            break;
         }

         // rstd10_r15
         case 10: { 
            Asn1Integer rstd10_r15;
            element = rstd10_r15 = new Asn1Integer();
            rstd10_r15.decode (buffer, 0, 639);

            buffer.invokeCharacters(rstd10_r15.toString());
            break;
         }

         // rstd11_r15
         case 11: { 
            Asn1Integer rstd11_r15;
            element = rstd11_r15 = new Asn1Integer();
            rstd11_r15.decode (buffer, 0, 1279);

            buffer.invokeCharacters(rstd11_r15.toString());
            break;
         }

         // rstd12_r15
         case 12: { 
            Asn1Integer rstd12_r15;
            element = rstd12_r15 = new Asn1Integer();
            rstd12_r15.decode (buffer, 0, 319);

            buffer.invokeCharacters(rstd12_r15.toString());
            break;
         }

         // rstd13_r15
         case 13: { 
            Asn1Integer rstd13_r15;
            element = rstd13_r15 = new Asn1Integer();
            rstd13_r15.decode (buffer, 0, 639);

            buffer.invokeCharacters(rstd13_r15.toString());
            break;
         }

         // rstd14_r15
         case 14: { 
            Asn1Integer rstd14_r15;
            element = rstd14_r15 = new Asn1Integer();
            rstd14_r15.decode (buffer, 0, 1279);

            buffer.invokeCharacters(rstd14_r15.toString());
            break;
         }

         // rstd15_r15
         case 15: { 
            Asn1Integer rstd15_r15;
            element = rstd15_r15 = new Asn1Integer();
            rstd15_r15.decode (buffer, 0, 639);

            buffer.invokeCharacters(rstd15_r15.toString());
            break;
         }

         // rstd16_r15
         case 16: { 
            Asn1Integer rstd16_r15;
            element = rstd16_r15 = new Asn1Integer();
            rstd16_r15.decode (buffer, 0, 1279);

            buffer.invokeCharacters(rstd16_r15.toString());
            break;
         }

         // rstd17_r15
         case 17: { 
            Asn1Integer rstd17_r15;
            element = rstd17_r15 = new Asn1Integer();
            rstd17_r15.decode (buffer, 0, 639);

            buffer.invokeCharacters(rstd17_r15.toString());
            break;
         }

         // rstd18_r15
         case 18: { 
            Asn1Integer rstd18_r15;
            element = rstd18_r15 = new Asn1Integer();
            rstd18_r15.decode (buffer, 0, 1279);

            buffer.invokeCharacters(rstd18_r15.toString());
            break;
         }

         // rstd19_r15
         case 19: { 
            Asn1Integer rstd19_r15;
            element = rstd19_r15 = new Asn1Integer();
            rstd19_r15.decode (buffer, 0, 639);

            buffer.invokeCharacters(rstd19_r15.toString());
            break;
         }

         // rstd20_r15
         case 20: { 
            Asn1Integer rstd20_r15;
            element = rstd20_r15 = new Asn1Integer();
            rstd20_r15.decode (buffer, 0, 1279);

            buffer.invokeCharacters(rstd20_r15.toString());
            break;
         }

         default:
         throw new Asn1InvalidChoiceOptionException (buffer, idx);
      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (element != null) {
         element.print (_sb, getElemName(), _level+1);
      }
      indent (_sb, _level);
      _sb.append("}\n");
   }

}
