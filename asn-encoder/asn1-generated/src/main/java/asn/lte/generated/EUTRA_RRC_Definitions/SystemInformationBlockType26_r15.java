/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SystemInformationBlockType26_r15 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SystemInformationBlockType26-r15";
   }

   public SL_InterFreqInfoListV2X_r14 v2x_InterFreqInfoList_r15;  // optional
   public SL_CBR_PPPP_TxConfigList_r15 cbr_pssch_TxConfigList_r15;  // optional
   public SL_V2X_PacketDuplicationConfig_r15 v2x_PacketDuplicationConfig_r15;  // optional
   public SL_V2X_SyncFreqList_r15 syncFreqList_r15;  // optional
   public SystemInformationBlockType26_r15_slss_TxMultiFreq_r15 slss_TxMultiFreq_r15 = null;  // optional
   public SL_V2X_FreqSelectionConfigList_r15 v2x_FreqSelectionConfigList_r15;  // optional
   public Asn1Integer threshS_RSSI_CBR_r14;  // optional
   public Asn1OpenExt extElem1;

   public SystemInformationBlockType26_r15 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SystemInformationBlockType26_r15 (
      SL_InterFreqInfoListV2X_r14 v2x_InterFreqInfoList_r15_,
      SL_CBR_PPPP_TxConfigList_r15 cbr_pssch_TxConfigList_r15_,
      SL_V2X_PacketDuplicationConfig_r15 v2x_PacketDuplicationConfig_r15_,
      SL_V2X_SyncFreqList_r15 syncFreqList_r15_,
      SystemInformationBlockType26_r15_slss_TxMultiFreq_r15 slss_TxMultiFreq_r15_,
      SL_V2X_FreqSelectionConfigList_r15 v2x_FreqSelectionConfigList_r15_,
      Asn1Integer threshS_RSSI_CBR_r14_
   ) {
      super();
      v2x_InterFreqInfoList_r15 = v2x_InterFreqInfoList_r15_;
      cbr_pssch_TxConfigList_r15 = cbr_pssch_TxConfigList_r15_;
      v2x_PacketDuplicationConfig_r15 = v2x_PacketDuplicationConfig_r15_;
      syncFreqList_r15 = syncFreqList_r15_;
      slss_TxMultiFreq_r15 = slss_TxMultiFreq_r15_;
      v2x_FreqSelectionConfigList_r15 = v2x_FreqSelectionConfigList_r15_;
      threshS_RSSI_CBR_r14 = threshS_RSSI_CBR_r14_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SystemInformationBlockType26_r15 (SL_InterFreqInfoListV2X_r14 v2x_InterFreqInfoList_r15_,
      SL_CBR_PPPP_TxConfigList_r15 cbr_pssch_TxConfigList_r15_,
      SL_V2X_PacketDuplicationConfig_r15 v2x_PacketDuplicationConfig_r15_,
      SL_V2X_SyncFreqList_r15 syncFreqList_r15_,
      SystemInformationBlockType26_r15_slss_TxMultiFreq_r15 slss_TxMultiFreq_r15_,
      SL_V2X_FreqSelectionConfigList_r15 v2x_FreqSelectionConfigList_r15_,
      long threshS_RSSI_CBR_r14_
   ) {
      super();
      v2x_InterFreqInfoList_r15 = v2x_InterFreqInfoList_r15_;
      cbr_pssch_TxConfigList_r15 = cbr_pssch_TxConfigList_r15_;
      v2x_PacketDuplicationConfig_r15 = v2x_PacketDuplicationConfig_r15_;
      syncFreqList_r15 = syncFreqList_r15_;
      slss_TxMultiFreq_r15 = slss_TxMultiFreq_r15_;
      v2x_FreqSelectionConfigList_r15 = v2x_FreqSelectionConfigList_r15_;
      threshS_RSSI_CBR_r14 = new Asn1Integer (threshS_RSSI_CBR_r14_);
   }

   public void init () {
      v2x_InterFreqInfoList_r15 = null;
      cbr_pssch_TxConfigList_r15 = null;
      v2x_PacketDuplicationConfig_r15 = null;
      syncFreqList_r15 = null;
      slss_TxMultiFreq_r15 = null;
      v2x_FreqSelectionConfigList_r15 = null;
      threshS_RSSI_CBR_r14 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 8; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return v2x_InterFreqInfoList_r15;
         case 1: return cbr_pssch_TxConfigList_r15;
         case 2: return v2x_PacketDuplicationConfig_r15;
         case 3: return syncFreqList_r15;
         case 4: return slss_TxMultiFreq_r15;
         case 5: return v2x_FreqSelectionConfigList_r15;
         case 6: return threshS_RSSI_CBR_r14;
         case 7: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "v2x-InterFreqInfoList-r15";
         case 1: return "cbr-pssch-TxConfigList-r15";
         case 2: return "v2x-PacketDuplicationConfig-r15";
         case 3: return "syncFreqList-r15";
         case 4: return "slss-TxMultiFreq-r15";
         case 5: return "v2x-FreqSelectionConfigList-r15";
         case 6: return "threshS-RSSI-CBR-r14";
         case 7: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean v2x_InterFreqInfoList_r15Present = buffer.decodeBit ("v2x_InterFreqInfoList_r15Present");
      boolean cbr_pssch_TxConfigList_r15Present = buffer.decodeBit ("cbr_pssch_TxConfigList_r15Present");
      boolean v2x_PacketDuplicationConfig_r15Present = buffer.decodeBit ("v2x_PacketDuplicationConfig_r15Present");
      boolean syncFreqList_r15Present = buffer.decodeBit ("syncFreqList_r15Present");
      boolean slss_TxMultiFreq_r15Present = buffer.decodeBit ("slss_TxMultiFreq_r15Present");
      boolean v2x_FreqSelectionConfigList_r15Present = buffer.decodeBit ("v2x_FreqSelectionConfigList_r15Present");
      boolean threshS_RSSI_CBR_r14Present = buffer.decodeBit ("threshS_RSSI_CBR_r14Present");

      // decode v2x_InterFreqInfoList_r15

      if (v2x_InterFreqInfoList_r15Present) {
         buffer.getContext().eventDispatcher.startElement("v2x_InterFreqInfoList_r15", -1);

         v2x_InterFreqInfoList_r15 = new SL_InterFreqInfoListV2X_r14();
         v2x_InterFreqInfoList_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("v2x_InterFreqInfoList_r15", -1);
      }
      else {
         v2x_InterFreqInfoList_r15 = null;
      }

      // decode cbr_pssch_TxConfigList_r15

      if (cbr_pssch_TxConfigList_r15Present) {
         buffer.getContext().eventDispatcher.startElement("cbr_pssch_TxConfigList_r15", -1);

         cbr_pssch_TxConfigList_r15 = new SL_CBR_PPPP_TxConfigList_r15();
         cbr_pssch_TxConfigList_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("cbr_pssch_TxConfigList_r15", -1);
      }
      else {
         cbr_pssch_TxConfigList_r15 = null;
      }

      // decode v2x_PacketDuplicationConfig_r15

      if (v2x_PacketDuplicationConfig_r15Present) {
         buffer.getContext().eventDispatcher.startElement("v2x_PacketDuplicationConfig_r15", -1);

         v2x_PacketDuplicationConfig_r15 = new SL_V2X_PacketDuplicationConfig_r15();
         v2x_PacketDuplicationConfig_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("v2x_PacketDuplicationConfig_r15", -1);
      }
      else {
         v2x_PacketDuplicationConfig_r15 = null;
      }

      // decode syncFreqList_r15

      if (syncFreqList_r15Present) {
         buffer.getContext().eventDispatcher.startElement("syncFreqList_r15", -1);

         syncFreqList_r15 = new SL_V2X_SyncFreqList_r15();
         syncFreqList_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("syncFreqList_r15", -1);
      }
      else {
         syncFreqList_r15 = null;
      }

      // decode slss_TxMultiFreq_r15

      if (slss_TxMultiFreq_r15Present) {
         buffer.getContext().eventDispatcher.startElement("slss_TxMultiFreq_r15", -1);

         int tval = SystemInformationBlockType26_r15_slss_TxMultiFreq_r15.decodeEnumValue (buffer);
         slss_TxMultiFreq_r15 = SystemInformationBlockType26_r15_slss_TxMultiFreq_r15.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("slss_TxMultiFreq_r15", -1);
      }
      else {
         slss_TxMultiFreq_r15 = null;
      }

      // decode v2x_FreqSelectionConfigList_r15

      if (v2x_FreqSelectionConfigList_r15Present) {
         buffer.getContext().eventDispatcher.startElement("v2x_FreqSelectionConfigList_r15", -1);

         v2x_FreqSelectionConfigList_r15 = new SL_V2X_FreqSelectionConfigList_r15();
         v2x_FreqSelectionConfigList_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("v2x_FreqSelectionConfigList_r15", -1);
      }
      else {
         v2x_FreqSelectionConfigList_r15 = null;
      }

      // decode threshS_RSSI_CBR_r14

      if (threshS_RSSI_CBR_r14Present) {
         buffer.getContext().eventDispatcher.startElement("threshS_RSSI_CBR_r14", -1);

         threshS_RSSI_CBR_r14 = new Asn1Integer();
         threshS_RSSI_CBR_r14.decode (buffer, 0, 45);

         buffer.invokeCharacters(threshS_RSSI_CBR_r14.toString());
         buffer.getContext().eventDispatcher.endElement("threshS_RSSI_CBR_r14", -1);
      }
      else {
         threshS_RSSI_CBR_r14 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (v2x_InterFreqInfoList_r15 != null) v2x_InterFreqInfoList_r15.print (_sb, "v2x_InterFreqInfoList_r15", _level+1);
      if (cbr_pssch_TxConfigList_r15 != null) cbr_pssch_TxConfigList_r15.print (_sb, "cbr_pssch_TxConfigList_r15", _level+1);
      if (v2x_PacketDuplicationConfig_r15 != null) v2x_PacketDuplicationConfig_r15.print (_sb, "v2x_PacketDuplicationConfig_r15", _level+1);
      if (syncFreqList_r15 != null) syncFreqList_r15.print (_sb, "syncFreqList_r15", _level+1);
      if (slss_TxMultiFreq_r15 != null) slss_TxMultiFreq_r15.print (_sb, "slss_TxMultiFreq_r15", _level+1);
      if (v2x_FreqSelectionConfigList_r15 != null) v2x_FreqSelectionConfigList_r15.print (_sb, "v2x_FreqSelectionConfigList_r15", _level+1);
      if (threshS_RSSI_CBR_r14 != null) threshS_RSSI_CBR_r14.print (_sb, "threshS_RSSI_CBR_r14", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
