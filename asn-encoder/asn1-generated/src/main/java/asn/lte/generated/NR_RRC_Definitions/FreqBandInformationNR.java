/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class FreqBandInformationNR extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "FreqBandInformationNR";
   }

   public FreqBandIndicatorNR bandNR;
   public AggregatedBandwidth maxBandwidthRequestedDL = null;  // optional
   public AggregatedBandwidth maxBandwidthRequestedUL = null;  // optional
   public Asn1Integer maxCarriersRequestedDL;  // optional
   public Asn1Integer maxCarriersRequestedUL;  // optional

   public FreqBandInformationNR () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public FreqBandInformationNR (
      FreqBandIndicatorNR bandNR_,
      AggregatedBandwidth maxBandwidthRequestedDL_,
      AggregatedBandwidth maxBandwidthRequestedUL_,
      Asn1Integer maxCarriersRequestedDL_,
      Asn1Integer maxCarriersRequestedUL_
   ) {
      super();
      bandNR = bandNR_;
      maxBandwidthRequestedDL = maxBandwidthRequestedDL_;
      maxBandwidthRequestedUL = maxBandwidthRequestedUL_;
      maxCarriersRequestedDL = maxCarriersRequestedDL_;
      maxCarriersRequestedUL = maxCarriersRequestedUL_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public FreqBandInformationNR (
      FreqBandIndicatorNR bandNR_
   ) {
      super();
      bandNR = bandNR_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public FreqBandInformationNR (long bandNR_,
      AggregatedBandwidth maxBandwidthRequestedDL_,
      AggregatedBandwidth maxBandwidthRequestedUL_,
      long maxCarriersRequestedDL_,
      long maxCarriersRequestedUL_
   ) {
      super();
      bandNR = new FreqBandIndicatorNR (bandNR_);
      maxBandwidthRequestedDL = maxBandwidthRequestedDL_;
      maxBandwidthRequestedUL = maxBandwidthRequestedUL_;
      maxCarriersRequestedDL = new Asn1Integer (maxCarriersRequestedDL_);
      maxCarriersRequestedUL = new Asn1Integer (maxCarriersRequestedUL_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public FreqBandInformationNR (
      long bandNR_
   ) {
      super();
      bandNR = new FreqBandIndicatorNR (bandNR_);
   }

   public void init () {
      bandNR = null;
      maxBandwidthRequestedDL = null;
      maxBandwidthRequestedUL = null;
      maxCarriersRequestedDL = null;
      maxCarriersRequestedUL = null;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return bandNR;
         case 1: return maxBandwidthRequestedDL;
         case 2: return maxBandwidthRequestedUL;
         case 3: return maxCarriersRequestedDL;
         case 4: return maxCarriersRequestedUL;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "bandNR";
         case 1: return "maxBandwidthRequestedDL";
         case 2: return "maxBandwidthRequestedUL";
         case 3: return "maxCarriersRequestedDL";
         case 4: return "maxCarriersRequestedUL";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean maxBandwidthRequestedDLPresent = buffer.decodeBit ("maxBandwidthRequestedDLPresent");
      boolean maxBandwidthRequestedULPresent = buffer.decodeBit ("maxBandwidthRequestedULPresent");
      boolean maxCarriersRequestedDLPresent = buffer.decodeBit ("maxCarriersRequestedDLPresent");
      boolean maxCarriersRequestedULPresent = buffer.decodeBit ("maxCarriersRequestedULPresent");

      // decode bandNR

      buffer.getContext().eventDispatcher.startElement("bandNR", -1);

      bandNR = new FreqBandIndicatorNR();
      bandNR.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("bandNR", -1);

      // decode maxBandwidthRequestedDL

      if (maxBandwidthRequestedDLPresent) {
         buffer.getContext().eventDispatcher.startElement("maxBandwidthRequestedDL", -1);

         int tval = AggregatedBandwidth.decodeEnumValue (buffer);
         maxBandwidthRequestedDL = AggregatedBandwidth.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("maxBandwidthRequestedDL", -1);
      }
      else {
         maxBandwidthRequestedDL = null;
      }

      // decode maxBandwidthRequestedUL

      if (maxBandwidthRequestedULPresent) {
         buffer.getContext().eventDispatcher.startElement("maxBandwidthRequestedUL", -1);

         int tval = AggregatedBandwidth.decodeEnumValue (buffer);
         maxBandwidthRequestedUL = AggregatedBandwidth.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("maxBandwidthRequestedUL", -1);
      }
      else {
         maxBandwidthRequestedUL = null;
      }

      // decode maxCarriersRequestedDL

      if (maxCarriersRequestedDLPresent) {
         buffer.getContext().eventDispatcher.startElement("maxCarriersRequestedDL", -1);

         maxCarriersRequestedDL = new Asn1Integer();
         maxCarriersRequestedDL.decode (buffer, 1, 32);

         buffer.invokeCharacters(maxCarriersRequestedDL.toString());
         buffer.getContext().eventDispatcher.endElement("maxCarriersRequestedDL", -1);
      }
      else {
         maxCarriersRequestedDL = null;
      }

      // decode maxCarriersRequestedUL

      if (maxCarriersRequestedULPresent) {
         buffer.getContext().eventDispatcher.startElement("maxCarriersRequestedUL", -1);

         maxCarriersRequestedUL = new Asn1Integer();
         maxCarriersRequestedUL.decode (buffer, 1, 32);

         buffer.invokeCharacters(maxCarriersRequestedUL.toString());
         buffer.getContext().eventDispatcher.endElement("maxCarriersRequestedUL", -1);
      }
      else {
         maxCarriersRequestedUL = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (bandNR != null) bandNR.print (_sb, "bandNR", _level+1);
      if (maxBandwidthRequestedDL != null) maxBandwidthRequestedDL.print (_sb, "maxBandwidthRequestedDL", _level+1);
      if (maxBandwidthRequestedUL != null) maxBandwidthRequestedUL.print (_sb, "maxBandwidthRequestedUL", _level+1);
      if (maxCarriersRequestedDL != null) maxCarriersRequestedDL.print (_sb, "maxCarriersRequestedDL", _level+1);
      if (maxCarriersRequestedUL != null) maxCarriersRequestedUL.print (_sb, "maxCarriersRequestedUL", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
