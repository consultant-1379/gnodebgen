/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class ReportConfigEUTRA extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ReportConfigEUTRA";
   }

   public ReportConfigEUTRA_triggerType triggerType;
   public ReportConfigEUTRA_triggerQuantity triggerQuantity = null;
   public ReportConfigEUTRA_reportQuantity reportQuantity = null;
   public Asn1Integer maxReportCells;
   public ReportInterval reportInterval = null;
   public ReportConfigEUTRA_reportAmount reportAmount = null;
   public boolean mV2ExtPresent;
   public ReportConfigEUTRA_si_RequestForHO_r9 si_RequestForHO_r9 = null;  // optional
   public ReportConfigEUTRA_ue_RxTxTimeDiffPeriodical_r9 ue_RxTxTimeDiffPeriodical_r9 = null;  // optional
   public boolean mV3ExtPresent;
   public ReportConfigEUTRA_includeLocationInfo_r10 includeLocationInfo_r10 = null;  // optional
   public ReportConfigEUTRA_reportAddNeighMeas_r10 reportAddNeighMeas_r10 = null;  // optional
   public boolean mV4ExtPresent;
   public ReportConfigEUTRA_alternativeTimeToTrigger_r12 alternativeTimeToTrigger_r12;  // optional
   public Asn1Boolean useT312_r12;  // optional
   public Asn1Boolean usePSCell_r12;  // optional
   public RSRQ_RangeConfig_r12 aN_Threshold1_v1250;  // optional
   public RSRQ_RangeConfig_r12 a5_Threshold2_v1250;  // optional
   public Asn1Boolean reportStrongestCSI_RSs_r12;  // optional
   public Asn1Boolean reportCRS_Meas_r12;  // optional
   public Asn1Boolean triggerQuantityCSI_RS_r12;  // optional
   public boolean mV5ExtPresent;
   public Asn1Boolean reportSSTD_Meas_r13;  // optional
   public ReportConfigEUTRA_rs_sinr_Config_r13 rs_sinr_Config_r13;  // optional
   public Asn1Boolean useWhiteCellList_r13;  // optional
   public MeasRSSI_ReportConfig_r13 measRSSI_ReportConfig_r13;  // optional
   public ReportConfigEUTRA_includeMultiBandInfo_r13 includeMultiBandInfo_r13 = null;  // optional
   public UL_DelayConfig_r13 ul_DelayConfig_r13;  // optional
   public boolean mV6ExtPresent;
   public Asn1Boolean ue_RxTxTimeDiffPeriodicalTDD_r13;  // optional
   public boolean mV7ExtPresent;
   public ReportConfigEUTRA_purpose_v1430 purpose_v1430 = null;  // optional
   public boolean mV8ExtPresent;
   public Asn1Integer maxReportRS_Index_r15;  // optional
   public boolean mV9ExtPresent;
   public BT_NameListConfig_r15 includeBT_Meas_r15;  // optional
   public WLAN_NameListConfig_r15 includeWLAN_Meas_r15;  // optional
   public ReportConfigEUTRA_purpose_r15 purpose_r15 = null;  // optional
   public Asn1Integer numberOfTriggeringCells_r15;  // optional
   public Asn1Boolean a4_a5_ReportOnLeave_r15;  // optional
   public Asn1OpenExt extElem1;

   public ReportConfigEUTRA () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ReportConfigEUTRA (
      ReportConfigEUTRA_triggerType triggerType_,
      ReportConfigEUTRA_triggerQuantity triggerQuantity_,
      ReportConfigEUTRA_reportQuantity reportQuantity_,
      Asn1Integer maxReportCells_,
      ReportInterval reportInterval_,
      ReportConfigEUTRA_reportAmount reportAmount_,
      ReportConfigEUTRA_si_RequestForHO_r9 si_RequestForHO_r9_,
      ReportConfigEUTRA_ue_RxTxTimeDiffPeriodical_r9 ue_RxTxTimeDiffPeriodical_r9_,
      ReportConfigEUTRA_includeLocationInfo_r10 includeLocationInfo_r10_,
      ReportConfigEUTRA_reportAddNeighMeas_r10 reportAddNeighMeas_r10_,
      ReportConfigEUTRA_alternativeTimeToTrigger_r12 alternativeTimeToTrigger_r12_,
      Asn1Boolean useT312_r12_,
      Asn1Boolean usePSCell_r12_,
      RSRQ_RangeConfig_r12 aN_Threshold1_v1250_,
      RSRQ_RangeConfig_r12 a5_Threshold2_v1250_,
      Asn1Boolean reportStrongestCSI_RSs_r12_,
      Asn1Boolean reportCRS_Meas_r12_,
      Asn1Boolean triggerQuantityCSI_RS_r12_,
      Asn1Boolean reportSSTD_Meas_r13_,
      ReportConfigEUTRA_rs_sinr_Config_r13 rs_sinr_Config_r13_,
      Asn1Boolean useWhiteCellList_r13_,
      MeasRSSI_ReportConfig_r13 measRSSI_ReportConfig_r13_,
      ReportConfigEUTRA_includeMultiBandInfo_r13 includeMultiBandInfo_r13_,
      UL_DelayConfig_r13 ul_DelayConfig_r13_,
      Asn1Boolean ue_RxTxTimeDiffPeriodicalTDD_r13_,
      ReportConfigEUTRA_purpose_v1430 purpose_v1430_,
      Asn1Integer maxReportRS_Index_r15_,
      BT_NameListConfig_r15 includeBT_Meas_r15_,
      WLAN_NameListConfig_r15 includeWLAN_Meas_r15_,
      ReportConfigEUTRA_purpose_r15 purpose_r15_,
      Asn1Integer numberOfTriggeringCells_r15_,
      Asn1Boolean a4_a5_ReportOnLeave_r15_
   ) {
      super();
      triggerType = triggerType_;
      triggerQuantity = triggerQuantity_;
      reportQuantity = reportQuantity_;
      maxReportCells = maxReportCells_;
      reportInterval = reportInterval_;
      reportAmount = reportAmount_;
      si_RequestForHO_r9 = si_RequestForHO_r9_;
      ue_RxTxTimeDiffPeriodical_r9 = ue_RxTxTimeDiffPeriodical_r9_;
      includeLocationInfo_r10 = includeLocationInfo_r10_;
      reportAddNeighMeas_r10 = reportAddNeighMeas_r10_;
      alternativeTimeToTrigger_r12 = alternativeTimeToTrigger_r12_;
      useT312_r12 = useT312_r12_;
      usePSCell_r12 = usePSCell_r12_;
      aN_Threshold1_v1250 = aN_Threshold1_v1250_;
      a5_Threshold2_v1250 = a5_Threshold2_v1250_;
      reportStrongestCSI_RSs_r12 = reportStrongestCSI_RSs_r12_;
      reportCRS_Meas_r12 = reportCRS_Meas_r12_;
      triggerQuantityCSI_RS_r12 = triggerQuantityCSI_RS_r12_;
      reportSSTD_Meas_r13 = reportSSTD_Meas_r13_;
      rs_sinr_Config_r13 = rs_sinr_Config_r13_;
      useWhiteCellList_r13 = useWhiteCellList_r13_;
      measRSSI_ReportConfig_r13 = measRSSI_ReportConfig_r13_;
      includeMultiBandInfo_r13 = includeMultiBandInfo_r13_;
      ul_DelayConfig_r13 = ul_DelayConfig_r13_;
      ue_RxTxTimeDiffPeriodicalTDD_r13 = ue_RxTxTimeDiffPeriodicalTDD_r13_;
      purpose_v1430 = purpose_v1430_;
      maxReportRS_Index_r15 = maxReportRS_Index_r15_;
      includeBT_Meas_r15 = includeBT_Meas_r15_;
      includeWLAN_Meas_r15 = includeWLAN_Meas_r15_;
      purpose_r15 = purpose_r15_;
      numberOfTriggeringCells_r15 = numberOfTriggeringCells_r15_;
      a4_a5_ReportOnLeave_r15 = a4_a5_ReportOnLeave_r15_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public ReportConfigEUTRA (
      ReportConfigEUTRA_triggerType triggerType_,
      ReportConfigEUTRA_triggerQuantity triggerQuantity_,
      ReportConfigEUTRA_reportQuantity reportQuantity_,
      Asn1Integer maxReportCells_,
      ReportInterval reportInterval_,
      ReportConfigEUTRA_reportAmount reportAmount_
   ) {
      super();
      triggerType = triggerType_;
      triggerQuantity = triggerQuantity_;
      reportQuantity = reportQuantity_;
      maxReportCells = maxReportCells_;
      reportInterval = reportInterval_;
      reportAmount = reportAmount_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public ReportConfigEUTRA (ReportConfigEUTRA_triggerType triggerType_,
      ReportConfigEUTRA_triggerQuantity triggerQuantity_,
      ReportConfigEUTRA_reportQuantity reportQuantity_,
      long maxReportCells_,
      ReportInterval reportInterval_,
      ReportConfigEUTRA_reportAmount reportAmount_,
      ReportConfigEUTRA_si_RequestForHO_r9 si_RequestForHO_r9_,
      ReportConfigEUTRA_ue_RxTxTimeDiffPeriodical_r9 ue_RxTxTimeDiffPeriodical_r9_,
      ReportConfigEUTRA_includeLocationInfo_r10 includeLocationInfo_r10_,
      ReportConfigEUTRA_reportAddNeighMeas_r10 reportAddNeighMeas_r10_,
      ReportConfigEUTRA_alternativeTimeToTrigger_r12 alternativeTimeToTrigger_r12_,
      boolean useT312_r12_,
      boolean usePSCell_r12_,
      RSRQ_RangeConfig_r12 aN_Threshold1_v1250_,
      RSRQ_RangeConfig_r12 a5_Threshold2_v1250_,
      boolean reportStrongestCSI_RSs_r12_,
      boolean reportCRS_Meas_r12_,
      boolean triggerQuantityCSI_RS_r12_,
      boolean reportSSTD_Meas_r13_,
      ReportConfigEUTRA_rs_sinr_Config_r13 rs_sinr_Config_r13_,
      boolean useWhiteCellList_r13_,
      MeasRSSI_ReportConfig_r13 measRSSI_ReportConfig_r13_,
      ReportConfigEUTRA_includeMultiBandInfo_r13 includeMultiBandInfo_r13_,
      UL_DelayConfig_r13 ul_DelayConfig_r13_,
      boolean ue_RxTxTimeDiffPeriodicalTDD_r13_,
      ReportConfigEUTRA_purpose_v1430 purpose_v1430_,
      long maxReportRS_Index_r15_,
      BT_NameListConfig_r15 includeBT_Meas_r15_,
      WLAN_NameListConfig_r15 includeWLAN_Meas_r15_,
      ReportConfigEUTRA_purpose_r15 purpose_r15_,
      long numberOfTriggeringCells_r15_,
      boolean a4_a5_ReportOnLeave_r15_
   ) {
      super();
      triggerType = triggerType_;
      triggerQuantity = triggerQuantity_;
      reportQuantity = reportQuantity_;
      maxReportCells = new Asn1Integer (maxReportCells_);
      reportInterval = reportInterval_;
      reportAmount = reportAmount_;
      si_RequestForHO_r9 = si_RequestForHO_r9_;
      ue_RxTxTimeDiffPeriodical_r9 = ue_RxTxTimeDiffPeriodical_r9_;
      includeLocationInfo_r10 = includeLocationInfo_r10_;
      reportAddNeighMeas_r10 = reportAddNeighMeas_r10_;
      alternativeTimeToTrigger_r12 = alternativeTimeToTrigger_r12_;
      useT312_r12 = new Asn1Boolean (useT312_r12_);
      usePSCell_r12 = new Asn1Boolean (usePSCell_r12_);
      aN_Threshold1_v1250 = aN_Threshold1_v1250_;
      a5_Threshold2_v1250 = a5_Threshold2_v1250_;
      reportStrongestCSI_RSs_r12 = new Asn1Boolean (reportStrongestCSI_RSs_r12_);
      reportCRS_Meas_r12 = new Asn1Boolean (reportCRS_Meas_r12_);
      triggerQuantityCSI_RS_r12 = new Asn1Boolean (triggerQuantityCSI_RS_r12_);
      reportSSTD_Meas_r13 = new Asn1Boolean (reportSSTD_Meas_r13_);
      rs_sinr_Config_r13 = rs_sinr_Config_r13_;
      useWhiteCellList_r13 = new Asn1Boolean (useWhiteCellList_r13_);
      measRSSI_ReportConfig_r13 = measRSSI_ReportConfig_r13_;
      includeMultiBandInfo_r13 = includeMultiBandInfo_r13_;
      ul_DelayConfig_r13 = ul_DelayConfig_r13_;
      ue_RxTxTimeDiffPeriodicalTDD_r13 = new Asn1Boolean (ue_RxTxTimeDiffPeriodicalTDD_r13_);
      purpose_v1430 = purpose_v1430_;
      maxReportRS_Index_r15 = new Asn1Integer (maxReportRS_Index_r15_);
      includeBT_Meas_r15 = includeBT_Meas_r15_;
      includeWLAN_Meas_r15 = includeWLAN_Meas_r15_;
      purpose_r15 = purpose_r15_;
      numberOfTriggeringCells_r15 = new Asn1Integer (numberOfTriggeringCells_r15_);
      a4_a5_ReportOnLeave_r15 = new Asn1Boolean (a4_a5_ReportOnLeave_r15_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public ReportConfigEUTRA (
      ReportConfigEUTRA_triggerType triggerType_,
      ReportConfigEUTRA_triggerQuantity triggerQuantity_,
      ReportConfigEUTRA_reportQuantity reportQuantity_,
      long maxReportCells_,
      ReportInterval reportInterval_,
      ReportConfigEUTRA_reportAmount reportAmount_
   ) {
      super();
      triggerType = triggerType_;
      triggerQuantity = triggerQuantity_;
      reportQuantity = reportQuantity_;
      maxReportCells = new Asn1Integer (maxReportCells_);
      reportInterval = reportInterval_;
      reportAmount = reportAmount_;
   }

   public void init () {
      triggerType = null;
      triggerQuantity = null;
      reportQuantity = null;
      maxReportCells = null;
      reportInterval = null;
      reportAmount = null;
      si_RequestForHO_r9 = null;
      ue_RxTxTimeDiffPeriodical_r9 = null;
      includeLocationInfo_r10 = null;
      reportAddNeighMeas_r10 = null;
      alternativeTimeToTrigger_r12 = null;
      useT312_r12 = null;
      usePSCell_r12 = null;
      aN_Threshold1_v1250 = null;
      a5_Threshold2_v1250 = null;
      reportStrongestCSI_RSs_r12 = null;
      reportCRS_Meas_r12 = null;
      triggerQuantityCSI_RS_r12 = null;
      reportSSTD_Meas_r13 = null;
      rs_sinr_Config_r13 = null;
      useWhiteCellList_r13 = null;
      measRSSI_ReportConfig_r13 = null;
      includeMultiBandInfo_r13 = null;
      ul_DelayConfig_r13 = null;
      ue_RxTxTimeDiffPeriodicalTDD_r13 = null;
      purpose_v1430 = null;
      maxReportRS_Index_r15 = null;
      includeBT_Meas_r15 = null;
      includeWLAN_Meas_r15 = null;
      purpose_r15 = null;
      numberOfTriggeringCells_r15 = null;
      a4_a5_ReportOnLeave_r15 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 33; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return triggerType;
         case 1: return triggerQuantity;
         case 2: return reportQuantity;
         case 3: return maxReportCells;
         case 4: return reportInterval;
         case 5: return reportAmount;
         case 6: return si_RequestForHO_r9;
         case 7: return ue_RxTxTimeDiffPeriodical_r9;
         case 8: return includeLocationInfo_r10;
         case 9: return reportAddNeighMeas_r10;
         case 10: return alternativeTimeToTrigger_r12;
         case 11: return useT312_r12;
         case 12: return usePSCell_r12;
         case 13: return aN_Threshold1_v1250;
         case 14: return a5_Threshold2_v1250;
         case 15: return reportStrongestCSI_RSs_r12;
         case 16: return reportCRS_Meas_r12;
         case 17: return triggerQuantityCSI_RS_r12;
         case 18: return reportSSTD_Meas_r13;
         case 19: return rs_sinr_Config_r13;
         case 20: return useWhiteCellList_r13;
         case 21: return measRSSI_ReportConfig_r13;
         case 22: return includeMultiBandInfo_r13;
         case 23: return ul_DelayConfig_r13;
         case 24: return ue_RxTxTimeDiffPeriodicalTDD_r13;
         case 25: return purpose_v1430;
         case 26: return maxReportRS_Index_r15;
         case 27: return includeBT_Meas_r15;
         case 28: return includeWLAN_Meas_r15;
         case 29: return purpose_r15;
         case 30: return numberOfTriggeringCells_r15;
         case 31: return a4_a5_ReportOnLeave_r15;
         case 32: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "triggerType";
         case 1: return "triggerQuantity";
         case 2: return "reportQuantity";
         case 3: return "maxReportCells";
         case 4: return "reportInterval";
         case 5: return "reportAmount";
         case 6: return "si-RequestForHO-r9";
         case 7: return "ue-RxTxTimeDiffPeriodical-r9";
         case 8: return "includeLocationInfo-r10";
         case 9: return "reportAddNeighMeas-r10";
         case 10: return "alternativeTimeToTrigger-r12";
         case 11: return "useT312-r12";
         case 12: return "usePSCell-r12";
         case 13: return "aN-Threshold1-v1250";
         case 14: return "a5-Threshold2-v1250";
         case 15: return "reportStrongestCSI-RSs-r12";
         case 16: return "reportCRS-Meas-r12";
         case 17: return "triggerQuantityCSI-RS-r12";
         case 18: return "reportSSTD-Meas-r13";
         case 19: return "rs-sinr-Config-r13";
         case 20: return "useWhiteCellList-r13";
         case 21: return "measRSSI-ReportConfig-r13";
         case 22: return "includeMultiBandInfo-r13";
         case 23: return "ul-DelayConfig-r13";
         case 24: return "ue-RxTxTimeDiffPeriodicalTDD-r13";
         case 25: return "purpose-v1430";
         case 26: return "maxReportRS-Index-r15";
         case 27: return "includeBT-Meas-r15";
         case 28: return "includeWLAN-Meas-r15";
         case 29: return "purpose-r15";
         case 30: return "numberOfTriggeringCells-r15";
         case 31: return "a4-a5-ReportOnLeave-r15";
         case 32: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      // decode triggerType

      buffer.getContext().eventDispatcher.startElement("triggerType", -1);

      triggerType = new ReportConfigEUTRA_triggerType();
      triggerType.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("triggerType", -1);

      // decode triggerQuantity

      buffer.getContext().eventDispatcher.startElement("triggerQuantity", -1);

      {
         int tval = ReportConfigEUTRA_triggerQuantity.decodeEnumValue (buffer);
         triggerQuantity = ReportConfigEUTRA_triggerQuantity.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("triggerQuantity", -1);

      // decode reportQuantity

      buffer.getContext().eventDispatcher.startElement("reportQuantity", -1);

      {
         int tval = ReportConfigEUTRA_reportQuantity.decodeEnumValue (buffer);
         reportQuantity = ReportConfigEUTRA_reportQuantity.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("reportQuantity", -1);

      // decode maxReportCells

      buffer.getContext().eventDispatcher.startElement("maxReportCells", -1);

      maxReportCells = new Asn1Integer();
      maxReportCells.decode (buffer, 1, 8);

      buffer.invokeCharacters(maxReportCells.toString());
      buffer.getContext().eventDispatcher.endElement("maxReportCells", -1);

      // decode reportInterval

      buffer.getContext().eventDispatcher.startElement("reportInterval", -1);

      {
         int tval = ReportInterval.decodeEnumValue (buffer);
         reportInterval = ReportInterval.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("reportInterval", -1);

      // decode reportAmount

      buffer.getContext().eventDispatcher.startElement("reportAmount", -1);

      {
         int tval = ReportConfigEUTRA_reportAmount.decodeEnumValue (buffer);
         reportAmount = ReportConfigEUTRA_reportAmount.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("reportAmount", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV4ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV5ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV6ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV7ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV8ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV9ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean si_RequestForHO_r9Present = buffer.decodeBit ("si_RequestForHO_r9Present");

            boolean ue_RxTxTimeDiffPeriodical_r9Present = buffer.decodeBit ("ue_RxTxTimeDiffPeriodical_r9Present");

            // decode si_RequestForHO_r9

            if (si_RequestForHO_r9Present) {
               buffer.getContext().eventDispatcher.startElement("si_RequestForHO_r9", -1);

               int tval = ReportConfigEUTRA_si_RequestForHO_r9.decodeEnumValue (buffer);
               si_RequestForHO_r9 = ReportConfigEUTRA_si_RequestForHO_r9.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("si_RequestForHO_r9", -1);
            }
            else {
               si_RequestForHO_r9 = null;
            }

            // decode ue_RxTxTimeDiffPeriodical_r9

            if (ue_RxTxTimeDiffPeriodical_r9Present) {
               buffer.getContext().eventDispatcher.startElement("ue_RxTxTimeDiffPeriodical_r9", -1);

               int tval = ReportConfigEUTRA_ue_RxTxTimeDiffPeriodical_r9.decodeEnumValue (buffer);
               ue_RxTxTimeDiffPeriodical_r9 = ReportConfigEUTRA_ue_RxTxTimeDiffPeriodical_r9.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("ue_RxTxTimeDiffPeriodical_r9", -1);
            }
            else {
               ue_RxTxTimeDiffPeriodical_r9 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean includeLocationInfo_r10Present = buffer.decodeBit ("includeLocationInfo_r10Present");

            boolean reportAddNeighMeas_r10Present = buffer.decodeBit ("reportAddNeighMeas_r10Present");

            // decode includeLocationInfo_r10

            if (includeLocationInfo_r10Present) {
               buffer.getContext().eventDispatcher.startElement("includeLocationInfo_r10", -1);

               int tval = ReportConfigEUTRA_includeLocationInfo_r10.decodeEnumValue (buffer);
               includeLocationInfo_r10 = ReportConfigEUTRA_includeLocationInfo_r10.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("includeLocationInfo_r10", -1);
            }
            else {
               includeLocationInfo_r10 = null;
            }

            // decode reportAddNeighMeas_r10

            if (reportAddNeighMeas_r10Present) {
               buffer.getContext().eventDispatcher.startElement("reportAddNeighMeas_r10", -1);

               int tval = ReportConfigEUTRA_reportAddNeighMeas_r10.decodeEnumValue (buffer);
               reportAddNeighMeas_r10 = ReportConfigEUTRA_reportAddNeighMeas_r10.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("reportAddNeighMeas_r10", -1);
            }
            else {
               reportAddNeighMeas_r10 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV4ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean alternativeTimeToTrigger_r12Present = buffer.decodeBit ("alternativeTimeToTrigger_r12Present");

            boolean useT312_r12Present = buffer.decodeBit ("useT312_r12Present");

            boolean usePSCell_r12Present = buffer.decodeBit ("usePSCell_r12Present");

            boolean aN_Threshold1_v1250Present = buffer.decodeBit ("aN_Threshold1_v1250Present");

            boolean a5_Threshold2_v1250Present = buffer.decodeBit ("a5_Threshold2_v1250Present");

            boolean reportStrongestCSI_RSs_r12Present = buffer.decodeBit ("reportStrongestCSI_RSs_r12Present");

            boolean reportCRS_Meas_r12Present = buffer.decodeBit ("reportCRS_Meas_r12Present");

            boolean triggerQuantityCSI_RS_r12Present = buffer.decodeBit ("triggerQuantityCSI_RS_r12Present");

            // decode alternativeTimeToTrigger_r12

            if (alternativeTimeToTrigger_r12Present) {
               buffer.getContext().eventDispatcher.startElement("alternativeTimeToTrigger_r12", -1);

               alternativeTimeToTrigger_r12 = new ReportConfigEUTRA_alternativeTimeToTrigger_r12();
               alternativeTimeToTrigger_r12.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("alternativeTimeToTrigger_r12", -1);
            }
            else {
               alternativeTimeToTrigger_r12 = null;
            }

            // decode useT312_r12

            if (useT312_r12Present) {
               buffer.getContext().eventDispatcher.startElement("useT312_r12", -1);

               useT312_r12 = new Asn1Boolean();
               useT312_r12.decode (buffer);

               buffer.invokeCharacters(useT312_r12.toString());
               buffer.getContext().eventDispatcher.endElement("useT312_r12", -1);
            }
            else {
               useT312_r12 = null;
            }

            // decode usePSCell_r12

            if (usePSCell_r12Present) {
               buffer.getContext().eventDispatcher.startElement("usePSCell_r12", -1);

               usePSCell_r12 = new Asn1Boolean();
               usePSCell_r12.decode (buffer);

               buffer.invokeCharacters(usePSCell_r12.toString());
               buffer.getContext().eventDispatcher.endElement("usePSCell_r12", -1);
            }
            else {
               usePSCell_r12 = null;
            }

            // decode aN_Threshold1_v1250

            if (aN_Threshold1_v1250Present) {
               buffer.getContext().eventDispatcher.startElement("aN_Threshold1_v1250", -1);

               aN_Threshold1_v1250 = new RSRQ_RangeConfig_r12();
               aN_Threshold1_v1250.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("aN_Threshold1_v1250", -1);
            }
            else {
               aN_Threshold1_v1250 = null;
            }

            // decode a5_Threshold2_v1250

            if (a5_Threshold2_v1250Present) {
               buffer.getContext().eventDispatcher.startElement("a5_Threshold2_v1250", -1);

               a5_Threshold2_v1250 = new RSRQ_RangeConfig_r12();
               a5_Threshold2_v1250.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("a5_Threshold2_v1250", -1);
            }
            else {
               a5_Threshold2_v1250 = null;
            }

            // decode reportStrongestCSI_RSs_r12

            if (reportStrongestCSI_RSs_r12Present) {
               buffer.getContext().eventDispatcher.startElement("reportStrongestCSI_RSs_r12", -1);

               reportStrongestCSI_RSs_r12 = new Asn1Boolean();
               reportStrongestCSI_RSs_r12.decode (buffer);

               buffer.invokeCharacters(reportStrongestCSI_RSs_r12.toString());
               buffer.getContext().eventDispatcher.endElement("reportStrongestCSI_RSs_r12", -1);
            }
            else {
               reportStrongestCSI_RSs_r12 = null;
            }

            // decode reportCRS_Meas_r12

            if (reportCRS_Meas_r12Present) {
               buffer.getContext().eventDispatcher.startElement("reportCRS_Meas_r12", -1);

               reportCRS_Meas_r12 = new Asn1Boolean();
               reportCRS_Meas_r12.decode (buffer);

               buffer.invokeCharacters(reportCRS_Meas_r12.toString());
               buffer.getContext().eventDispatcher.endElement("reportCRS_Meas_r12", -1);
            }
            else {
               reportCRS_Meas_r12 = null;
            }

            // decode triggerQuantityCSI_RS_r12

            if (triggerQuantityCSI_RS_r12Present) {
               buffer.getContext().eventDispatcher.startElement("triggerQuantityCSI_RS_r12", -1);

               triggerQuantityCSI_RS_r12 = new Asn1Boolean();
               triggerQuantityCSI_RS_r12.decode (buffer);

               buffer.invokeCharacters(triggerQuantityCSI_RS_r12.toString());
               buffer.getContext().eventDispatcher.endElement("triggerQuantityCSI_RS_r12", -1);
            }
            else {
               triggerQuantityCSI_RS_r12 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV5ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean reportSSTD_Meas_r13Present = buffer.decodeBit ("reportSSTD_Meas_r13Present");

            boolean rs_sinr_Config_r13Present = buffer.decodeBit ("rs_sinr_Config_r13Present");

            boolean useWhiteCellList_r13Present = buffer.decodeBit ("useWhiteCellList_r13Present");

            boolean measRSSI_ReportConfig_r13Present = buffer.decodeBit ("measRSSI_ReportConfig_r13Present");

            boolean includeMultiBandInfo_r13Present = buffer.decodeBit ("includeMultiBandInfo_r13Present");

            boolean ul_DelayConfig_r13Present = buffer.decodeBit ("ul_DelayConfig_r13Present");

            // decode reportSSTD_Meas_r13

            if (reportSSTD_Meas_r13Present) {
               buffer.getContext().eventDispatcher.startElement("reportSSTD_Meas_r13", -1);

               reportSSTD_Meas_r13 = new Asn1Boolean();
               reportSSTD_Meas_r13.decode (buffer);

               buffer.invokeCharacters(reportSSTD_Meas_r13.toString());
               buffer.getContext().eventDispatcher.endElement("reportSSTD_Meas_r13", -1);
            }
            else {
               reportSSTD_Meas_r13 = null;
            }

            // decode rs_sinr_Config_r13

            if (rs_sinr_Config_r13Present) {
               buffer.getContext().eventDispatcher.startElement("rs_sinr_Config_r13", -1);

               rs_sinr_Config_r13 = new ReportConfigEUTRA_rs_sinr_Config_r13();
               rs_sinr_Config_r13.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("rs_sinr_Config_r13", -1);
            }
            else {
               rs_sinr_Config_r13 = null;
            }

            // decode useWhiteCellList_r13

            if (useWhiteCellList_r13Present) {
               buffer.getContext().eventDispatcher.startElement("useWhiteCellList_r13", -1);

               useWhiteCellList_r13 = new Asn1Boolean();
               useWhiteCellList_r13.decode (buffer);

               buffer.invokeCharacters(useWhiteCellList_r13.toString());
               buffer.getContext().eventDispatcher.endElement("useWhiteCellList_r13", -1);
            }
            else {
               useWhiteCellList_r13 = null;
            }

            // decode measRSSI_ReportConfig_r13

            if (measRSSI_ReportConfig_r13Present) {
               buffer.getContext().eventDispatcher.startElement("measRSSI_ReportConfig_r13", -1);

               measRSSI_ReportConfig_r13 = new MeasRSSI_ReportConfig_r13();
               measRSSI_ReportConfig_r13.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("measRSSI_ReportConfig_r13", -1);
            }
            else {
               measRSSI_ReportConfig_r13 = null;
            }

            // decode includeMultiBandInfo_r13

            if (includeMultiBandInfo_r13Present) {
               buffer.getContext().eventDispatcher.startElement("includeMultiBandInfo_r13", -1);

               int tval = ReportConfigEUTRA_includeMultiBandInfo_r13.decodeEnumValue (buffer);
               includeMultiBandInfo_r13 = ReportConfigEUTRA_includeMultiBandInfo_r13.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("includeMultiBandInfo_r13", -1);
            }
            else {
               includeMultiBandInfo_r13 = null;
            }

            // decode ul_DelayConfig_r13

            if (ul_DelayConfig_r13Present) {
               buffer.getContext().eventDispatcher.startElement("ul_DelayConfig_r13", -1);

               ul_DelayConfig_r13 = new UL_DelayConfig_r13();
               ul_DelayConfig_r13.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("ul_DelayConfig_r13", -1);
            }
            else {
               ul_DelayConfig_r13 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV6ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean ue_RxTxTimeDiffPeriodicalTDD_r13Present = buffer.decodeBit ("ue_RxTxTimeDiffPeriodicalTDD_r13Present");

            // decode ue_RxTxTimeDiffPeriodicalTDD_r13

            if (ue_RxTxTimeDiffPeriodicalTDD_r13Present) {
               buffer.getContext().eventDispatcher.startElement("ue_RxTxTimeDiffPeriodicalTDD_r13", -1);

               ue_RxTxTimeDiffPeriodicalTDD_r13 = new Asn1Boolean();
               ue_RxTxTimeDiffPeriodicalTDD_r13.decode (buffer);

               buffer.invokeCharacters(ue_RxTxTimeDiffPeriodicalTDD_r13.toString());
               buffer.getContext().eventDispatcher.endElement("ue_RxTxTimeDiffPeriodicalTDD_r13", -1);
            }
            else {
               ue_RxTxTimeDiffPeriodicalTDD_r13 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV7ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean purpose_v1430Present = buffer.decodeBit ("purpose_v1430Present");

            // decode purpose_v1430

            if (purpose_v1430Present) {
               buffer.getContext().eventDispatcher.startElement("purpose_v1430", -1);

               int tval = ReportConfigEUTRA_purpose_v1430.decodeEnumValue (buffer);
               purpose_v1430 = ReportConfigEUTRA_purpose_v1430.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("purpose_v1430", -1);
            }
            else {
               purpose_v1430 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV8ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean maxReportRS_Index_r15Present = buffer.decodeBit ("maxReportRS_Index_r15Present");

            // decode maxReportRS_Index_r15

            if (maxReportRS_Index_r15Present) {
               buffer.getContext().eventDispatcher.startElement("maxReportRS_Index_r15", -1);

               maxReportRS_Index_r15 = new Asn1Integer();
               maxReportRS_Index_r15.decode (buffer, 0, 32);

               buffer.invokeCharacters(maxReportRS_Index_r15.toString());
               buffer.getContext().eventDispatcher.endElement("maxReportRS_Index_r15", -1);
            }
            else {
               maxReportRS_Index_r15 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV9ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean includeBT_Meas_r15Present = buffer.decodeBit ("includeBT_Meas_r15Present");

            boolean includeWLAN_Meas_r15Present = buffer.decodeBit ("includeWLAN_Meas_r15Present");

            boolean purpose_r15Present = buffer.decodeBit ("purpose_r15Present");

            boolean numberOfTriggeringCells_r15Present = buffer.decodeBit ("numberOfTriggeringCells_r15Present");

            boolean a4_a5_ReportOnLeave_r15Present = buffer.decodeBit ("a4_a5_ReportOnLeave_r15Present");

            // decode includeBT_Meas_r15

            if (includeBT_Meas_r15Present) {
               buffer.getContext().eventDispatcher.startElement("includeBT_Meas_r15", -1);

               includeBT_Meas_r15 = new BT_NameListConfig_r15();
               includeBT_Meas_r15.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("includeBT_Meas_r15", -1);
            }
            else {
               includeBT_Meas_r15 = null;
            }

            // decode includeWLAN_Meas_r15

            if (includeWLAN_Meas_r15Present) {
               buffer.getContext().eventDispatcher.startElement("includeWLAN_Meas_r15", -1);

               includeWLAN_Meas_r15 = new WLAN_NameListConfig_r15();
               includeWLAN_Meas_r15.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("includeWLAN_Meas_r15", -1);
            }
            else {
               includeWLAN_Meas_r15 = null;
            }

            // decode purpose_r15

            if (purpose_r15Present) {
               buffer.getContext().eventDispatcher.startElement("purpose_r15", -1);

               int tval = ReportConfigEUTRA_purpose_r15.decodeEnumValue (buffer);
               purpose_r15 = ReportConfigEUTRA_purpose_r15.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("purpose_r15", -1);
            }
            else {
               purpose_r15 = null;
            }

            // decode numberOfTriggeringCells_r15

            if (numberOfTriggeringCells_r15Present) {
               buffer.getContext().eventDispatcher.startElement("numberOfTriggeringCells_r15", -1);

               numberOfTriggeringCells_r15 = new Asn1Integer();
               numberOfTriggeringCells_r15.decode (buffer, 2, 8);

               buffer.invokeCharacters(numberOfTriggeringCells_r15.toString());
               buffer.getContext().eventDispatcher.endElement("numberOfTriggeringCells_r15", -1);
            }
            else {
               numberOfTriggeringCells_r15 = null;
            }

            // decode a4_a5_ReportOnLeave_r15

            if (a4_a5_ReportOnLeave_r15Present) {
               buffer.getContext().eventDispatcher.startElement("a4_a5_ReportOnLeave_r15", -1);

               a4_a5_ReportOnLeave_r15 = new Asn1Boolean();
               a4_a5_ReportOnLeave_r15.decode (buffer);

               buffer.invokeCharacters(a4_a5_ReportOnLeave_r15.toString());
               buffer.getContext().eventDispatcher.endElement("a4_a5_ReportOnLeave_r15", -1);
            }
            else {
               a4_a5_ReportOnLeave_r15 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (triggerType != null) triggerType.print (_sb, "triggerType", _level+1);
      if (triggerQuantity != null) triggerQuantity.print (_sb, "triggerQuantity", _level+1);
      if (reportQuantity != null) reportQuantity.print (_sb, "reportQuantity", _level+1);
      if (maxReportCells != null) maxReportCells.print (_sb, "maxReportCells", _level+1);
      if (reportInterval != null) reportInterval.print (_sb, "reportInterval", _level+1);
      if (reportAmount != null) reportAmount.print (_sb, "reportAmount", _level+1);
      if (si_RequestForHO_r9 != null) si_RequestForHO_r9.print (_sb, "si_RequestForHO_r9", _level+1);
      if (ue_RxTxTimeDiffPeriodical_r9 != null) ue_RxTxTimeDiffPeriodical_r9.print (_sb, "ue_RxTxTimeDiffPeriodical_r9", _level+1);
      if (includeLocationInfo_r10 != null) includeLocationInfo_r10.print (_sb, "includeLocationInfo_r10", _level+1);
      if (reportAddNeighMeas_r10 != null) reportAddNeighMeas_r10.print (_sb, "reportAddNeighMeas_r10", _level+1);
      if (alternativeTimeToTrigger_r12 != null) alternativeTimeToTrigger_r12.print (_sb, "alternativeTimeToTrigger_r12", _level+1);
      if (useT312_r12 != null) useT312_r12.print (_sb, "useT312_r12", _level+1);
      if (usePSCell_r12 != null) usePSCell_r12.print (_sb, "usePSCell_r12", _level+1);
      if (aN_Threshold1_v1250 != null) aN_Threshold1_v1250.print (_sb, "aN_Threshold1_v1250", _level+1);
      if (a5_Threshold2_v1250 != null) a5_Threshold2_v1250.print (_sb, "a5_Threshold2_v1250", _level+1);
      if (reportStrongestCSI_RSs_r12 != null) reportStrongestCSI_RSs_r12.print (_sb, "reportStrongestCSI_RSs_r12", _level+1);
      if (reportCRS_Meas_r12 != null) reportCRS_Meas_r12.print (_sb, "reportCRS_Meas_r12", _level+1);
      if (triggerQuantityCSI_RS_r12 != null) triggerQuantityCSI_RS_r12.print (_sb, "triggerQuantityCSI_RS_r12", _level+1);
      if (reportSSTD_Meas_r13 != null) reportSSTD_Meas_r13.print (_sb, "reportSSTD_Meas_r13", _level+1);
      if (rs_sinr_Config_r13 != null) rs_sinr_Config_r13.print (_sb, "rs_sinr_Config_r13", _level+1);
      if (useWhiteCellList_r13 != null) useWhiteCellList_r13.print (_sb, "useWhiteCellList_r13", _level+1);
      if (measRSSI_ReportConfig_r13 != null) measRSSI_ReportConfig_r13.print (_sb, "measRSSI_ReportConfig_r13", _level+1);
      if (includeMultiBandInfo_r13 != null) includeMultiBandInfo_r13.print (_sb, "includeMultiBandInfo_r13", _level+1);
      if (ul_DelayConfig_r13 != null) ul_DelayConfig_r13.print (_sb, "ul_DelayConfig_r13", _level+1);
      if (ue_RxTxTimeDiffPeriodicalTDD_r13 != null) ue_RxTxTimeDiffPeriodicalTDD_r13.print (_sb, "ue_RxTxTimeDiffPeriodicalTDD_r13", _level+1);
      if (purpose_v1430 != null) purpose_v1430.print (_sb, "purpose_v1430", _level+1);
      if (maxReportRS_Index_r15 != null) maxReportRS_Index_r15.print (_sb, "maxReportRS_Index_r15", _level+1);
      if (includeBT_Meas_r15 != null) includeBT_Meas_r15.print (_sb, "includeBT_Meas_r15", _level+1);
      if (includeWLAN_Meas_r15 != null) includeWLAN_Meas_r15.print (_sb, "includeWLAN_Meas_r15", _level+1);
      if (purpose_r15 != null) purpose_r15.print (_sb, "purpose_r15", _level+1);
      if (numberOfTriggeringCells_r15 != null) numberOfTriggeringCells_r15.print (_sb, "numberOfTriggeringCells_r15", _level+1);
      if (a4_a5_ReportOnLeave_r15 != null) a4_a5_ReportOnLeave_r15.print (_sb, "a4_a5_ReportOnLeave_r15", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
