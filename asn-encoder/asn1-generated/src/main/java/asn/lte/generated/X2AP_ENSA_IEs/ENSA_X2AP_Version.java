/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.X2AP_ENSA_IEs;

import com.objsys.asn1j.runtime.*;
import asn.lte.generated.X2AP_ENSA_Containers.ENSA_VersionNumber_Field;

public class ENSA_X2AP_Version extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_X2AP_ENSA_IEsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ENSA-X2AP-Version";
   }

   public ENSA_VersionNumber_Field versionNumber;

   public ENSA_X2AP_Version () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ENSA_X2AP_Version (
      ENSA_VersionNumber_Field versionNumber_
   ) {
      super();
      versionNumber = versionNumber_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public ENSA_X2AP_Version (long versionNumber_
   ) {
      super();
      versionNumber = new ENSA_VersionNumber_Field (versionNumber_);
   }

   public void init () {
      versionNumber = null;
   }

   public int getElementCount() { return 1; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return versionNumber;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "versionNumber";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode versionNumber

      buffer.getContext().eventDispatcher.startElement("versionNumber", -1);

      versionNumber = new ENSA_VersionNumber_Field();
      versionNumber.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("versionNumber", -1);

      checkTC (true, buffer.getLazyOpenTypeDecode() ? 0 : 2, buffer.isAligned(), buffer.getContext().eventDispatcher);
   }

   public void checkTC(boolean decode, int decodeOpenTypeFlag, boolean aligned, Asn1NamedEventDispatcher eventDispatcher)
      throws Asn1Exception
   {
      int index;
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (versionNumber != null) versionNumber.print (_sb, "versionNumber", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
