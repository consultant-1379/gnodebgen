/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class CarrierFreqsGERAN_followingARFCNs extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CHOICE";
   }

   // Choice element identifier constants
   public final static byte _EXPLICITLISTOFARFCNS = 1;
   public final static byte _EQUALLYSPACEDARFCNS = 2;
   public final static byte _VARIABLEBITMAPOFARFCNS = 3;

   public CarrierFreqsGERAN_followingARFCNs () {
      super();
   }

   public CarrierFreqsGERAN_followingARFCNs (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _EXPLICITLISTOFARFCNS: return "explicitListOfARFCNs";
      case _EQUALLYSPACEDARFCNS: return "equallySpacedARFCNs";
      case _VARIABLEBITMAPOFARFCNS: return "variableBitMapOfARFCNs";
      default: return "UNDEFINED";
      }
   }

   public void set_explicitListOfARFCNs (ExplicitListOfARFCNs value) {
      setElement (_EXPLICITLISTOFARFCNS, value);
   }

   public void set_equallySpacedARFCNs (CarrierFreqsGERAN_followingARFCNs_equallySpacedARFCNs value) {
      setElement (_EQUALLYSPACEDARFCNS, value);
   }

   public void set_variableBitMapOfARFCNs (Asn1OctetString value) {
      setElement (_VARIABLEBITMAPOFARFCNS, value);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int idx = (int) buffer.decodeConsWholeNumber (3, "index");
      choiceID = idx + 1;
      buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

      switch (idx) {
         // explicitListOfARFCNs
         case 0: { 
            ExplicitListOfARFCNs explicitListOfARFCNs;
            element = explicitListOfARFCNs = new ExplicitListOfARFCNs();
            explicitListOfARFCNs.decode (buffer);
            break;
         }

         // equallySpacedARFCNs
         case 1: { 
            CarrierFreqsGERAN_followingARFCNs_equallySpacedARFCNs equallySpacedARFCNs;
            element = equallySpacedARFCNs = new CarrierFreqsGERAN_followingARFCNs_equallySpacedARFCNs();
            equallySpacedARFCNs.decode (buffer);
            break;
         }

         // variableBitMapOfARFCNs
         case 2: { 
            Asn1OctetString variableBitMapOfARFCNs;
            element = variableBitMapOfARFCNs = new Asn1OctetString();
            variableBitMapOfARFCNs.decode (buffer, 1, 16);

            buffer.invokeCharacters(variableBitMapOfARFCNs.toString());
            break;
         }

         default:
         throw new Asn1InvalidChoiceOptionException (buffer, idx);
      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (element != null) {
         element.print (_sb, getElemName(), _level+1);
      }
      indent (_sb, _level);
      _sb.append("}\n");
   }

}
