/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.S1AP_PDU_Contents;

import com.objsys.asn1j.runtime.*;
import asn.lte.generated.S1AP_CommonDataTypes.ProtocolIE_ID;
import asn.lte.generated.S1AP_CommonDataTypes.Criticality;

public class InitialUEMessage_protocolIEs_element extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_S1AP_PDU_ContentsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public ProtocolIE_ID id;
   public Criticality criticality = null;

   /**
    * id: id-eNB-UE-S1AP-ID
    * criticality: Criticality.reject
    * presence: Presence.mandatory
    * ASN.1 type: ENB-UE-S1AP-ID
    * Java type: ENB_UE_S1AP_ID
    *
    * id: id-NAS-PDU
    * criticality: Criticality.reject
    * presence: Presence.mandatory
    * ASN.1 type: NAS-PDU
    * Java type: NAS_PDU
    *
    * id: id-TAI
    * criticality: Criticality.reject
    * presence: Presence.mandatory
    * ASN.1 type: TAI
    * Java type: TAI
    *
    * id: id-EUTRAN-CGI
    * criticality: Criticality.ignore
    * presence: Presence.mandatory
    * ASN.1 type: EUTRAN-CGI
    * Java type: EUTRAN_CGI
    *
    * id: id-RRC-Establishment-Cause
    * criticality: Criticality.ignore
    * presence: Presence.mandatory
    * ASN.1 type: RRC-Establishment-Cause
    * Java type: RRC_Establishment_Cause
    *
    * id: id-S-TMSI
    * criticality: Criticality.reject
    * presence: Presence.optional
    * ASN.1 type: S-TMSI
    * Java type: S_TMSI
    *
    * id: id-CSG-Id
    * criticality: Criticality.reject
    * presence: Presence.optional
    * ASN.1 type: CSG-Id
    * Java type: CSG_Id
    *
    * id: id-GUMMEI-ID
    * criticality: Criticality.reject
    * presence: Presence.optional
    * ASN.1 type: GUMMEI
    * Java type: GUMMEI
    *
    * id: id-CellAccessMode
    * criticality: Criticality.reject
    * presence: Presence.optional
    * ASN.1 type: CellAccessMode
    * Java type: CellAccessMode
    *
    * id: id-GW-TransportLayerAddress
    * criticality: Criticality.ignore
    * presence: Presence.optional
    * ASN.1 type: TransportLayerAddress
    * Java type: TransportLayerAddress
    *
    * id: id-RelayNode-Indicator
    * criticality: Criticality.reject
    * presence: Presence.optional
    * ASN.1 type: RelayNode-Indicator
    * Java type: RelayNode_Indicator
    *
    * id: id-GUMMEIType
    * criticality: Criticality.ignore
    * presence: Presence.optional
    * ASN.1 type: GUMMEIType
    * Java type: GUMMEIType
    *
    * id: id-Tunnel-Information-for-BBF
    * criticality: Criticality.ignore
    * presence: Presence.optional
    * ASN.1 type: TunnelInformation
    * Java type: TunnelInformation
    *
    * id: id-SIPTO-L-GW-TransportLayerAddress
    * criticality: Criticality.ignore
    * presence: Presence.optional
    * ASN.1 type: TransportLayerAddress
    * Java type: TransportLayerAddress
    *
    * id: id-LHN-ID
    * criticality: Criticality.ignore
    * presence: Presence.optional
    * ASN.1 type: LHN-ID
    * Java type: LHN_ID
    *
    * id: id-MME-Group-ID
    * criticality: Criticality.ignore
    * presence: Presence.optional
    * ASN.1 type: MME-Group-ID
    * Java type: MME_Group_ID
    *
    * id: id-UE-Usage-Type
    * criticality: Criticality.ignore
    * presence: Presence.optional
    * ASN.1 type: UE-Usage-Type
    * Java type: UE_Usage_Type
    *
    * id: id-CE-mode-B-SupportIndicator
    * criticality: Criticality.ignore
    * presence: Presence.optional
    * ASN.1 type: CE-mode-B-SupportIndicator
    * Java type: CE_mode_B_SupportIndicator
    *
    * id: id-DCN-ID
    * criticality: Criticality.ignore
    * presence: Presence.optional
    * ASN.1 type: DCN-ID
    * Java type: DCN_ID
    *
    * id: id-Coverage-Level
    * criticality: Criticality.ignore
    * presence: Presence.optional
    * ASN.1 type: Coverage-Level
    * Java type: Coverage_Level
    *
    * id: id-UE-Application-Layer-Measurement-Capability
    * criticality: Criticality.ignore
    * presence: Presence.optional
    * ASN.1 type: UE-Application-Layer-Measurement-Capability
    * Java type: UE_Application_Layer_Measurement_Capability
    *
    * id: id-EDT-Session
    * criticality: Criticality.ignore
    * presence: Presence.optional
    * ASN.1 type: EDT-Session
    * Java type: EDT_Session
    */
   public Asn1Type value;

   public InitialUEMessage_protocolIEs_element () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public InitialUEMessage_protocolIEs_element (
      ProtocolIE_ID id_,
      Criticality criticality_,
      Asn1Type value_
   ) {
      super();
      id = id_;
      criticality = criticality_;
      value = value_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public InitialUEMessage_protocolIEs_element (long id_,
      Criticality criticality_,
      Asn1Type value_
   ) {
      super();
      id = new ProtocolIE_ID (id_);
      criticality = criticality_;
      value = value_;
   }

   public void init () {
      id = null;
      criticality = null;
      value = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return id;
         case 1: return criticality;
         case 2: return value;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "id";
         case 1: return "criticality";
         case 2: return "value";
         default: return null;
      }
   }


   /**
    * Assign fields according to information object having key id-eNB-UE-S1AP-ID
    */
   public void setUsing_id_eNB_UE_S1AP_ID(asn.lte.generated.S1AP_IEs.ENB_UE_S1AP_ID value) {
      this.id = new asn.lte.generated.S1AP_CommonDataTypes.ProtocolIE_ID(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_eNB_UE_S1AP_ID);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key id-NAS-PDU
    */
   public void setUsing_id_NAS_PDU(asn.lte.generated.S1AP_IEs.NAS_PDU value) {
      this.id = new asn.lte.generated.S1AP_CommonDataTypes.ProtocolIE_ID(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_NAS_PDU);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key id-TAI
    */
   public void setUsing_id_TAI(asn.lte.generated.S1AP_IEs.TAI value) {
      this.id = new asn.lte.generated.S1AP_CommonDataTypes.ProtocolIE_ID(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_TAI);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key id-EUTRAN-CGI
    */
   public void setUsing_id_EUTRAN_CGI(asn.lte.generated.S1AP_IEs.EUTRAN_CGI value) {
      this.id = new asn.lte.generated.S1AP_CommonDataTypes.ProtocolIE_ID(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_EUTRAN_CGI);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key id-RRC-Establishment-Cause
    */
   public void setUsing_id_RRC_Establishment_Cause(asn.lte.generated.S1AP_IEs.RRC_Establishment_Cause value) {
      this.id = new asn.lte.generated.S1AP_CommonDataTypes.ProtocolIE_ID(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_RRC_Establishment_Cause);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key id-S-TMSI
    */
   public void setUsing_id_S_TMSI(asn.lte.generated.S1AP_IEs.S_TMSI value) {
      this.id = new asn.lte.generated.S1AP_CommonDataTypes.ProtocolIE_ID(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_S_TMSI);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key id-CSG-Id
    */
   public void setUsing_id_CSG_Id(asn.lte.generated.S1AP_IEs.CSG_Id value) {
      this.id = new asn.lte.generated.S1AP_CommonDataTypes.ProtocolIE_ID(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_CSG_Id);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key id-GUMMEI-ID
    */
   public void setUsing_id_GUMMEI_ID(asn.lte.generated.S1AP_IEs.GUMMEI value) {
      this.id = new asn.lte.generated.S1AP_CommonDataTypes.ProtocolIE_ID(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_GUMMEI_ID);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key id-CellAccessMode
    */
   public void setUsing_id_CellAccessMode(asn.lte.generated.S1AP_IEs.CellAccessMode value) {
      this.id = new asn.lte.generated.S1AP_CommonDataTypes.ProtocolIE_ID(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_CellAccessMode);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key id-GW-TransportLayerAddress
    */
   public void setUsing_id_GW_TransportLayerAddress(asn.lte.generated.S1AP_IEs.TransportLayerAddress value) {
      this.id = new asn.lte.generated.S1AP_CommonDataTypes.ProtocolIE_ID(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_GW_TransportLayerAddress);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key id-RelayNode-Indicator
    */
   public void setUsing_id_RelayNode_Indicator(asn.lte.generated.S1AP_IEs.RelayNode_Indicator value) {
      this.id = new asn.lte.generated.S1AP_CommonDataTypes.ProtocolIE_ID(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_RelayNode_Indicator);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key id-GUMMEIType
    */
   public void setUsing_id_GUMMEIType(asn.lte.generated.S1AP_IEs.GUMMEIType value) {
      this.id = new asn.lte.generated.S1AP_CommonDataTypes.ProtocolIE_ID(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_GUMMEIType);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key id-Tunnel-Information-for-BBF
    */
   public void setUsing_id_Tunnel_Information_for_BBF(asn.lte.generated.S1AP_IEs.TunnelInformation value) {
      this.id = new asn.lte.generated.S1AP_CommonDataTypes.ProtocolIE_ID(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_Tunnel_Information_for_BBF);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key id-SIPTO-L-GW-TransportLayerAddress
    */
   public void setUsing_id_SIPTO_L_GW_TransportLayerAddress(asn.lte.generated.S1AP_IEs.TransportLayerAddress value) {
      this.id = new asn.lte.generated.S1AP_CommonDataTypes.ProtocolIE_ID(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_SIPTO_L_GW_TransportLayerAddress);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key id-LHN-ID
    */
   public void setUsing_id_LHN_ID(asn.lte.generated.S1AP_IEs.LHN_ID value) {
      this.id = new asn.lte.generated.S1AP_CommonDataTypes.ProtocolIE_ID(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_LHN_ID);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key id-MME-Group-ID
    */
   public void setUsing_id_MME_Group_ID(asn.lte.generated.S1AP_IEs.MME_Group_ID value) {
      this.id = new asn.lte.generated.S1AP_CommonDataTypes.ProtocolIE_ID(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_MME_Group_ID);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key id-UE-Usage-Type
    */
   public void setUsing_id_UE_Usage_Type(asn.lte.generated.S1AP_IEs.UE_Usage_Type value) {
      this.id = new asn.lte.generated.S1AP_CommonDataTypes.ProtocolIE_ID(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_UE_Usage_Type);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key id-CE-mode-B-SupportIndicator
    */
   public void setUsing_id_CE_mode_B_SupportIndicator(asn.lte.generated.S1AP_IEs.CE_mode_B_SupportIndicator value) {
      this.id = new asn.lte.generated.S1AP_CommonDataTypes.ProtocolIE_ID(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_CE_mode_B_SupportIndicator);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key id-DCN-ID
    */
   public void setUsing_id_DCN_ID(asn.lte.generated.S1AP_IEs.DCN_ID value) {
      this.id = new asn.lte.generated.S1AP_CommonDataTypes.ProtocolIE_ID(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_DCN_ID);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key id-Coverage-Level
    */
   public void setUsing_id_Coverage_Level(asn.lte.generated.S1AP_IEs.Coverage_Level value) {
      this.id = new asn.lte.generated.S1AP_CommonDataTypes.ProtocolIE_ID(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_Coverage_Level);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key id-UE-Application-Layer-Measurement-Capability
    */
   public void setUsing_id_UE_Application_Layer_Measurement_Capability(asn.lte.generated.S1AP_IEs.UE_Application_Layer_Measurement_Capability value) {
      this.id = new asn.lte.generated.S1AP_CommonDataTypes.ProtocolIE_ID(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_UE_Application_Layer_Measurement_Capability);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key id-EDT-Session
    */
   public void setUsing_id_EDT_Session(asn.lte.generated.S1AP_IEs.EDT_Session value) {
      this.id = new asn.lte.generated.S1AP_CommonDataTypes.ProtocolIE_ID(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_EDT_Session);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Get value of value with type set according to information object having key id-eNB-UE-S1AP-ID
    */
   public asn.lte.generated.S1AP_IEs.ENB_UE_S1AP_ID getValueFor_id_eNB_UE_S1AP_ID() {
      return (asn.lte.generated.S1AP_IEs.ENB_UE_S1AP_ID) this.value;
   }

   /**
    * Get value of value with type set according to information object having key id-NAS-PDU
    */
   public asn.lte.generated.S1AP_IEs.NAS_PDU getValueFor_id_NAS_PDU() {
      return (asn.lte.generated.S1AP_IEs.NAS_PDU) this.value;
   }

   /**
    * Get value of value with type set according to information object having key id-TAI
    */
   public asn.lte.generated.S1AP_IEs.TAI getValueFor_id_TAI() {
      return (asn.lte.generated.S1AP_IEs.TAI) this.value;
   }

   /**
    * Get value of value with type set according to information object having key id-EUTRAN-CGI
    */
   public asn.lte.generated.S1AP_IEs.EUTRAN_CGI getValueFor_id_EUTRAN_CGI() {
      return (asn.lte.generated.S1AP_IEs.EUTRAN_CGI) this.value;
   }

   /**
    * Get value of value with type set according to information object having key id-RRC-Establishment-Cause
    */
   public asn.lte.generated.S1AP_IEs.RRC_Establishment_Cause getValueFor_id_RRC_Establishment_Cause() {
      return (asn.lte.generated.S1AP_IEs.RRC_Establishment_Cause) this.value;
   }

   /**
    * Get value of value with type set according to information object having key id-S-TMSI
    */
   public asn.lte.generated.S1AP_IEs.S_TMSI getValueFor_id_S_TMSI() {
      return (asn.lte.generated.S1AP_IEs.S_TMSI) this.value;
   }

   /**
    * Get value of value with type set according to information object having key id-CSG-Id
    */
   public asn.lte.generated.S1AP_IEs.CSG_Id getValueFor_id_CSG_Id() {
      return (asn.lte.generated.S1AP_IEs.CSG_Id) this.value;
   }

   /**
    * Get value of value with type set according to information object having key id-GUMMEI-ID
    */
   public asn.lte.generated.S1AP_IEs.GUMMEI getValueFor_id_GUMMEI_ID() {
      return (asn.lte.generated.S1AP_IEs.GUMMEI) this.value;
   }

   /**
    * Get value of value with type set according to information object having key id-CellAccessMode
    */
   public asn.lte.generated.S1AP_IEs.CellAccessMode getValueFor_id_CellAccessMode() {
      return (asn.lte.generated.S1AP_IEs.CellAccessMode) this.value;
   }

   /**
    * Get value of value with type set according to information object having key id-GW-TransportLayerAddress
    */
   public asn.lte.generated.S1AP_IEs.TransportLayerAddress getValueFor_id_GW_TransportLayerAddress() {
      return (asn.lte.generated.S1AP_IEs.TransportLayerAddress) this.value;
   }

   /**
    * Get value of value with type set according to information object having key id-RelayNode-Indicator
    */
   public asn.lte.generated.S1AP_IEs.RelayNode_Indicator getValueFor_id_RelayNode_Indicator() {
      return (asn.lte.generated.S1AP_IEs.RelayNode_Indicator) this.value;
   }

   /**
    * Get value of value with type set according to information object having key id-GUMMEIType
    */
   public asn.lte.generated.S1AP_IEs.GUMMEIType getValueFor_id_GUMMEIType() {
      return (asn.lte.generated.S1AP_IEs.GUMMEIType) this.value;
   }

   /**
    * Get value of value with type set according to information object having key id-Tunnel-Information-for-BBF
    */
   public asn.lte.generated.S1AP_IEs.TunnelInformation getValueFor_id_Tunnel_Information_for_BBF() {
      return (asn.lte.generated.S1AP_IEs.TunnelInformation) this.value;
   }

   /**
    * Get value of value with type set according to information object having key id-SIPTO-L-GW-TransportLayerAddress
    */
   public asn.lte.generated.S1AP_IEs.TransportLayerAddress getValueFor_id_SIPTO_L_GW_TransportLayerAddress() {
      return (asn.lte.generated.S1AP_IEs.TransportLayerAddress) this.value;
   }

   /**
    * Get value of value with type set according to information object having key id-LHN-ID
    */
   public asn.lte.generated.S1AP_IEs.LHN_ID getValueFor_id_LHN_ID() {
      return (asn.lte.generated.S1AP_IEs.LHN_ID) this.value;
   }

   /**
    * Get value of value with type set according to information object having key id-MME-Group-ID
    */
   public asn.lte.generated.S1AP_IEs.MME_Group_ID getValueFor_id_MME_Group_ID() {
      return (asn.lte.generated.S1AP_IEs.MME_Group_ID) this.value;
   }

   /**
    * Get value of value with type set according to information object having key id-UE-Usage-Type
    */
   public asn.lte.generated.S1AP_IEs.UE_Usage_Type getValueFor_id_UE_Usage_Type() {
      return (asn.lte.generated.S1AP_IEs.UE_Usage_Type) this.value;
   }

   /**
    * Get value of value with type set according to information object having key id-CE-mode-B-SupportIndicator
    */
   public asn.lte.generated.S1AP_IEs.CE_mode_B_SupportIndicator getValueFor_id_CE_mode_B_SupportIndicator() {
      return (asn.lte.generated.S1AP_IEs.CE_mode_B_SupportIndicator) this.value;
   }

   /**
    * Get value of value with type set according to information object having key id-DCN-ID
    */
   public asn.lte.generated.S1AP_IEs.DCN_ID getValueFor_id_DCN_ID() {
      return (asn.lte.generated.S1AP_IEs.DCN_ID) this.value;
   }

   /**
    * Get value of value with type set according to information object having key id-Coverage-Level
    */
   public asn.lte.generated.S1AP_IEs.Coverage_Level getValueFor_id_Coverage_Level() {
      return (asn.lte.generated.S1AP_IEs.Coverage_Level) this.value;
   }

   /**
    * Get value of value with type set according to information object having key id-UE-Application-Layer-Measurement-Capability
    */
   public asn.lte.generated.S1AP_IEs.UE_Application_Layer_Measurement_Capability getValueFor_id_UE_Application_Layer_Measurement_Capability() {
      return (asn.lte.generated.S1AP_IEs.UE_Application_Layer_Measurement_Capability) this.value;
   }

   /**
    * Get value of value with type set according to information object having key id-EDT-Session
    */
   public asn.lte.generated.S1AP_IEs.EDT_Session getValueFor_id_EDT_Session() {
      return (asn.lte.generated.S1AP_IEs.EDT_Session) this.value;
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode id

      buffer.getContext().eventDispatcher.startElement("id", -1);

      id = new ProtocolIE_ID();
      id.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("id", -1);

      // decode criticality

      buffer.getContext().eventDispatcher.startElement("criticality", -1);

      {
         int tval = Criticality.decodeEnumValue (buffer);
         criticality = Criticality.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("criticality", -1);

      // decode value

      buffer.getContext().eventDispatcher.startElement("value", -1);

      value = new Asn1OpenType();
      value.decode (buffer);

      buffer.invokeCharacters(value.toString());
      buffer.getContext().eventDispatcher.endElement("value", -1);

      checkTC (true, buffer.getLazyOpenTypeDecode() ? 0 : 2, buffer.isAligned(), buffer.getContext().eventDispatcher);
   }

   public void checkTC(boolean decode, int decodeOpenTypeFlag, boolean aligned, Asn1NamedEventDispatcher eventDispatcher)
      throws Asn1Exception
   {
      /* check id */
      asn.lte.generated.S1AP_Containers.S1AP_PROTOCOL_IES _index = null;
      for(int i=0; i < _S1AP_PDU_ContentsValues.InitialUEMessage_IEs.length; i++) {
         if(_S1AP_PDU_ContentsValues.InitialUEMessage_IEs[i].id.equals(id)) {
            _index = _S1AP_PDU_ContentsValues.InitialUEMessage_IEs[i];
            break;
         }
      }
      if (null == _index) {
         return;
      }

      /* check value */
      if( decode && decodeOpenTypeFlag >=1 ) {
         try {
            Asn1PerDecodeBuffer buffer = new Asn1PerDecodeBuffer(((Asn1OpenType)value).value, aligned);
            buffer.setLazyOpenTypeDecode(decodeOpenTypeFlag == 1);
            if (eventDispatcher != null)buffer.getContext().eventDispatcher = eventDispatcher;
            buffer.getContext().eventDispatcher.startElement("value", -1);

            String className = _index.Value.actualType.getName();
            if (className.lastIndexOf('.') > 0) {
               className = className.substring (className.lastIndexOf (".")+1);
            }
            buffer.getContext().eventDispatcher.startElement(className, -1);

            value = Asn1Type.decode(buffer, _index.Value);

            buffer.getContext().eventDispatcher.endElement(className, -1);

            buffer.getContext().eventDispatcher.endElement("value", -1);
         }
         catch (java.io.IOException e) {
            throw new Asn1Exception(e.toString());
         }
      }

      /* use -strict option to validate the "criticality" element */
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (id.value == 8) {
         indent (_sb, _level+1);
         _sb.append("id = id-eNB-UE-S1AP-ID\n");
      }
      else if (id.value == 26) {
         indent (_sb, _level+1);
         _sb.append("id = id-NAS-PDU\n");
      }
      else if (id.value == 67) {
         indent (_sb, _level+1);
         _sb.append("id = id-TAI\n");
      }
      else if (id.value == 100) {
         indent (_sb, _level+1);
         _sb.append("id = id-EUTRAN-CGI\n");
      }
      else if (id.value == 134) {
         indent (_sb, _level+1);
         _sb.append("id = id-RRC-Establishment-Cause\n");
      }
      else if (id.value == 96) {
         indent (_sb, _level+1);
         _sb.append("id = id-S-TMSI\n");
      }
      else if (id.value == 127) {
         indent (_sb, _level+1);
         _sb.append("id = id-CSG-Id\n");
      }
      else if (id.value == 75) {
         indent (_sb, _level+1);
         _sb.append("id = id-GUMMEI-ID\n");
      }
      else if (id.value == 145) {
         indent (_sb, _level+1);
         _sb.append("id = id-CellAccessMode\n");
      }
      else if (id.value == 155) {
         indent (_sb, _level+1);
         _sb.append("id = id-GW-TransportLayerAddress\n");
      }
      else if (id.value == 160) {
         indent (_sb, _level+1);
         _sb.append("id = id-RelayNode-Indicator\n");
      }
      else if (id.value == 170) {
         indent (_sb, _level+1);
         _sb.append("id = id-GUMMEIType\n");
      }
      else if (id.value == 176) {
         indent (_sb, _level+1);
         _sb.append("id = id-Tunnel-Information-for-BBF\n");
      }
      else if (id.value == 184) {
         indent (_sb, _level+1);
         _sb.append("id = id-SIPTO-L-GW-TransportLayerAddress\n");
      }
      else if (id.value == 186) {
         indent (_sb, _level+1);
         _sb.append("id = id-LHN-ID\n");
      }
      else if (id.value == 223) {
         indent (_sb, _level+1);
         _sb.append("id = id-MME-Group-ID\n");
      }
      else if (id.value == 230) {
         indent (_sb, _level+1);
         _sb.append("id = id-UE-Usage-Type\n");
      }
      else if (id.value == 242) {
         indent (_sb, _level+1);
         _sb.append("id = id-CE-mode-B-SupportIndicator\n");
      }
      else if (id.value == 246) {
         indent (_sb, _level+1);
         _sb.append("id = id-DCN-ID\n");
      }
      else if (id.value == 250) {
         indent (_sb, _level+1);
         _sb.append("id = id-Coverage-Level\n");
      }
      else if (id.value == 263) {
         indent (_sb, _level+1);
         _sb.append("id = id-UE-Application-Layer-Measurement-Capability\n");
      }
      else if (id.value == 281) {
         indent (_sb, _level+1);
         _sb.append("id = id-EDT-Session\n");
      }

      if (criticality != null) {
         criticality.print (_sb, "criticality", _level+1);
      }
      if (value != null) {
         String tmpName = value.getAsn1TypeName();
         if (tmpName != null && tmpName != "")  {
            tmpName = "value" + " (" + tmpName + ")";
         }
         else  {
            tmpName = "value";
         }
         value.print (_sb, tmpName, _level+1);
      }
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
