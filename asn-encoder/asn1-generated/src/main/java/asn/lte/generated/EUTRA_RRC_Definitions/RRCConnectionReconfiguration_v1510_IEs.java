/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class RRCConnectionReconfiguration_v1510_IEs extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "RRCConnectionReconfiguration-v1510-IEs";
   }

   public RRCConnectionReconfiguration_v1510_IEs_nr_Config_r15 nr_Config_r15;  // optional
   public Asn1Integer sk_Counter_r15;  // optional
   public Asn1OctetString nr_RadioBearerConfig1_r15;  // optional
   public Asn1OctetString nr_RadioBearerConfig2_r15;  // optional
   public RRCConnectionReconfiguration_v1510_IEs_tdm_PatternConfig_r15 tdm_PatternConfig_r15;  // optional
   public RRCConnectionReconfiguration_v1530_IEs nonCriticalExtension;  // optional

   public RRCConnectionReconfiguration_v1510_IEs () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public RRCConnectionReconfiguration_v1510_IEs (
      RRCConnectionReconfiguration_v1510_IEs_nr_Config_r15 nr_Config_r15_,
      Asn1Integer sk_Counter_r15_,
      Asn1OctetString nr_RadioBearerConfig1_r15_,
      Asn1OctetString nr_RadioBearerConfig2_r15_,
      RRCConnectionReconfiguration_v1510_IEs_tdm_PatternConfig_r15 tdm_PatternConfig_r15_,
      RRCConnectionReconfiguration_v1530_IEs nonCriticalExtension_
   ) {
      super();
      nr_Config_r15 = nr_Config_r15_;
      sk_Counter_r15 = sk_Counter_r15_;
      nr_RadioBearerConfig1_r15 = nr_RadioBearerConfig1_r15_;
      nr_RadioBearerConfig2_r15 = nr_RadioBearerConfig2_r15_;
      tdm_PatternConfig_r15 = tdm_PatternConfig_r15_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public RRCConnectionReconfiguration_v1510_IEs (RRCConnectionReconfiguration_v1510_IEs_nr_Config_r15 nr_Config_r15_,
      long sk_Counter_r15_,
      byte[] nr_RadioBearerConfig1_r15_,
      byte[] nr_RadioBearerConfig2_r15_,
      RRCConnectionReconfiguration_v1510_IEs_tdm_PatternConfig_r15 tdm_PatternConfig_r15_,
      RRCConnectionReconfiguration_v1530_IEs nonCriticalExtension_
   ) {
      super();
      nr_Config_r15 = nr_Config_r15_;
      sk_Counter_r15 = new Asn1Integer (sk_Counter_r15_);
      nr_RadioBearerConfig1_r15 = new Asn1OctetString (nr_RadioBearerConfig1_r15_);
      nr_RadioBearerConfig2_r15 = new Asn1OctetString (nr_RadioBearerConfig2_r15_);
      tdm_PatternConfig_r15 = tdm_PatternConfig_r15_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   public void init () {
      nr_Config_r15 = null;
      sk_Counter_r15 = null;
      nr_RadioBearerConfig1_r15 = null;
      nr_RadioBearerConfig2_r15 = null;
      tdm_PatternConfig_r15 = null;
      nonCriticalExtension = null;
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return nr_Config_r15;
         case 1: return sk_Counter_r15;
         case 2: return nr_RadioBearerConfig1_r15;
         case 3: return nr_RadioBearerConfig2_r15;
         case 4: return tdm_PatternConfig_r15;
         case 5: return nonCriticalExtension;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "nr-Config-r15";
         case 1: return "sk-Counter-r15";
         case 2: return "nr-RadioBearerConfig1-r15";
         case 3: return "nr-RadioBearerConfig2-r15";
         case 4: return "tdm-PatternConfig-r15";
         case 5: return "nonCriticalExtension";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean nr_Config_r15Present = buffer.decodeBit ("nr_Config_r15Present");
      boolean sk_Counter_r15Present = buffer.decodeBit ("sk_Counter_r15Present");
      boolean nr_RadioBearerConfig1_r15Present = buffer.decodeBit ("nr_RadioBearerConfig1_r15Present");
      boolean nr_RadioBearerConfig2_r15Present = buffer.decodeBit ("nr_RadioBearerConfig2_r15Present");
      boolean tdm_PatternConfig_r15Present = buffer.decodeBit ("tdm_PatternConfig_r15Present");
      boolean nonCriticalExtensionPresent = buffer.decodeBit ("nonCriticalExtensionPresent");

      // decode nr_Config_r15

      if (nr_Config_r15Present) {
         buffer.getContext().eventDispatcher.startElement("nr_Config_r15", -1);

         nr_Config_r15 = new RRCConnectionReconfiguration_v1510_IEs_nr_Config_r15();
         nr_Config_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nr_Config_r15", -1);
      }
      else {
         nr_Config_r15 = null;
      }

      // decode sk_Counter_r15

      if (sk_Counter_r15Present) {
         buffer.getContext().eventDispatcher.startElement("sk_Counter_r15", -1);

         sk_Counter_r15 = new Asn1Integer();
         sk_Counter_r15.decode (buffer, 0, 65535);

         buffer.invokeCharacters(sk_Counter_r15.toString());
         buffer.getContext().eventDispatcher.endElement("sk_Counter_r15", -1);
      }
      else {
         sk_Counter_r15 = null;
      }

      // decode nr_RadioBearerConfig1_r15

      if (nr_RadioBearerConfig1_r15Present) {
         buffer.getContext().eventDispatcher.startElement("nr_RadioBearerConfig1_r15", -1);

         nr_RadioBearerConfig1_r15 = new Asn1OctetString();
         nr_RadioBearerConfig1_r15.decode (buffer);

         buffer.invokeCharacters(nr_RadioBearerConfig1_r15.toString());
         buffer.getContext().eventDispatcher.endElement("nr_RadioBearerConfig1_r15", -1);
      }
      else {
         nr_RadioBearerConfig1_r15 = null;
      }

      // decode nr_RadioBearerConfig2_r15

      if (nr_RadioBearerConfig2_r15Present) {
         buffer.getContext().eventDispatcher.startElement("nr_RadioBearerConfig2_r15", -1);

         nr_RadioBearerConfig2_r15 = new Asn1OctetString();
         nr_RadioBearerConfig2_r15.decode (buffer);

         buffer.invokeCharacters(nr_RadioBearerConfig2_r15.toString());
         buffer.getContext().eventDispatcher.endElement("nr_RadioBearerConfig2_r15", -1);
      }
      else {
         nr_RadioBearerConfig2_r15 = null;
      }

      // decode tdm_PatternConfig_r15

      if (tdm_PatternConfig_r15Present) {
         buffer.getContext().eventDispatcher.startElement("tdm_PatternConfig_r15", -1);

         tdm_PatternConfig_r15 = new RRCConnectionReconfiguration_v1510_IEs_tdm_PatternConfig_r15();
         tdm_PatternConfig_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("tdm_PatternConfig_r15", -1);
      }
      else {
         tdm_PatternConfig_r15 = null;
      }

      // decode nonCriticalExtension

      if (nonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension = new RRCConnectionReconfiguration_v1530_IEs();
         nonCriticalExtension.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }
      else {
         nonCriticalExtension = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (nr_Config_r15 != null) nr_Config_r15.print (_sb, "nr_Config_r15", _level+1);
      if (sk_Counter_r15 != null) sk_Counter_r15.print (_sb, "sk_Counter_r15", _level+1);
      if (nr_RadioBearerConfig1_r15 != null) nr_RadioBearerConfig1_r15.print (_sb, "nr_RadioBearerConfig1_r15", _level+1);
      if (nr_RadioBearerConfig2_r15 != null) nr_RadioBearerConfig2_r15.print (_sb, "nr_RadioBearerConfig2_r15", _level+1);
      if (tdm_PatternConfig_r15 != null) tdm_PatternConfig_r15.print (_sb, "tdm_PatternConfig_r15", _level+1);
      if (nonCriticalExtension != null) nonCriticalExtension.print (_sb, "nonCriticalExtension", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
