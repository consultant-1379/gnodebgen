/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class DL_DCCH_MessageType_c1 extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CHOICE";
   }

   // Choice element identifier constants
   public final static byte _CSFBPARAMETERSRESPONSECDMA2000 = 1;
   public final static byte _DLINFORMATIONTRANSFER = 2;
   public final static byte _HANDOVERFROMEUTRAPREPARATIONREQUEST = 3;
   public final static byte _MOBILITYFROMEUTRACOMMAND = 4;
   public final static byte _RRCCONNECTIONRECONFIGURATION = 5;
   public final static byte _RRCCONNECTIONRELEASE = 6;
   public final static byte _SECURITYMODECOMMAND = 7;
   public final static byte _UECAPABILITYENQUIRY = 8;
   public final static byte _COUNTERCHECK = 9;
   public final static byte _UEINFORMATIONREQUEST_R9 = 10;
   public final static byte _LOGGEDMEASUREMENTCONFIGURATION_R10 = 11;
   public final static byte _RNRECONFIGURATION_R10 = 12;
   public final static byte _RRCCONNECTIONRESUME_R13 = 13;
   public final static byte _SPARE3 = 14;
   public final static byte _SPARE2 = 15;
   public final static byte _SPARE1 = 16;

   public DL_DCCH_MessageType_c1 () {
      super();
   }

   public DL_DCCH_MessageType_c1 (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _CSFBPARAMETERSRESPONSECDMA2000: return "csfbParametersResponseCDMA2000";
      case _DLINFORMATIONTRANSFER: return "dlInformationTransfer";
      case _HANDOVERFROMEUTRAPREPARATIONREQUEST: return "handoverFromEUTRAPreparationRequest";
      case _MOBILITYFROMEUTRACOMMAND: return "mobilityFromEUTRACommand";
      case _RRCCONNECTIONRECONFIGURATION: return "rrcConnectionReconfiguration";
      case _RRCCONNECTIONRELEASE: return "rrcConnectionRelease";
      case _SECURITYMODECOMMAND: return "securityModeCommand";
      case _UECAPABILITYENQUIRY: return "ueCapabilityEnquiry";
      case _COUNTERCHECK: return "counterCheck";
      case _UEINFORMATIONREQUEST_R9: return "ueInformationRequest_r9";
      case _LOGGEDMEASUREMENTCONFIGURATION_R10: return "loggedMeasurementConfiguration_r10";
      case _RNRECONFIGURATION_R10: return "rnReconfiguration_r10";
      case _RRCCONNECTIONRESUME_R13: return "rrcConnectionResume_r13";
      case _SPARE3: return "spare3";
      case _SPARE2: return "spare2";
      case _SPARE1: return "spare1";
      default: return "UNDEFINED";
      }
   }

   public void set_csfbParametersResponseCDMA2000 (CSFBParametersResponseCDMA2000 value) {
      setElement (_CSFBPARAMETERSRESPONSECDMA2000, value);
   }

   public void set_dlInformationTransfer (DLInformationTransfer value) {
      setElement (_DLINFORMATIONTRANSFER, value);
   }

   public void set_handoverFromEUTRAPreparationRequest (HandoverFromEUTRAPreparationRequest value) {
      setElement (_HANDOVERFROMEUTRAPREPARATIONREQUEST, value);
   }

   public void set_mobilityFromEUTRACommand (MobilityFromEUTRACommand value) {
      setElement (_MOBILITYFROMEUTRACOMMAND, value);
   }

   public void set_rrcConnectionReconfiguration (RRCConnectionReconfiguration value) {
      setElement (_RRCCONNECTIONRECONFIGURATION, value);
   }

   public void set_rrcConnectionRelease (RRCConnectionRelease value) {
      setElement (_RRCCONNECTIONRELEASE, value);
   }

   public void set_securityModeCommand (SecurityModeCommand value) {
      setElement (_SECURITYMODECOMMAND, value);
   }

   public void set_ueCapabilityEnquiry (UECapabilityEnquiry value) {
      setElement (_UECAPABILITYENQUIRY, value);
   }

   public void set_counterCheck (CounterCheck value) {
      setElement (_COUNTERCHECK, value);
   }

   public void set_ueInformationRequest_r9 (UEInformationRequest_r9 value) {
      setElement (_UEINFORMATIONREQUEST_R9, value);
   }

   public void set_loggedMeasurementConfiguration_r10 (LoggedMeasurementConfiguration_r10 value) {
      setElement (_LOGGEDMEASUREMENTCONFIGURATION_R10, value);
   }

   public void set_rnReconfiguration_r10 (RNReconfiguration_r10 value) {
      setElement (_RNRECONFIGURATION_R10, value);
   }

   public void set_rrcConnectionResume_r13 (RRCConnectionResume_r13 value) {
      setElement (_RRCCONNECTIONRESUME_R13, value);
   }

   public void set_spare3 () {
      setElement (_SPARE3, Asn1Null.NULL_VALUE);
   }

   public void set_spare2 () {
      setElement (_SPARE2, Asn1Null.NULL_VALUE);
   }

   public void set_spare1 () {
      setElement (_SPARE1, Asn1Null.NULL_VALUE);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int idx = (int) buffer.decodeConsWholeNumber (16, "index");
      choiceID = idx + 1;
      buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

      switch (idx) {
         // csfbParametersResponseCDMA2000
         case 0: { 
            CSFBParametersResponseCDMA2000 csfbParametersResponseCDMA2000;
            element = csfbParametersResponseCDMA2000 = new CSFBParametersResponseCDMA2000();
            csfbParametersResponseCDMA2000.decode (buffer);
            break;
         }

         // dlInformationTransfer
         case 1: { 
            DLInformationTransfer dlInformationTransfer;
            element = dlInformationTransfer = new DLInformationTransfer();
            dlInformationTransfer.decode (buffer);
            break;
         }

         // handoverFromEUTRAPreparationRequest
         case 2: { 
            HandoverFromEUTRAPreparationRequest handoverFromEUTRAPreparationRequest;
            element = handoverFromEUTRAPreparationRequest = new HandoverFromEUTRAPreparationRequest();
            handoverFromEUTRAPreparationRequest.decode (buffer);
            break;
         }

         // mobilityFromEUTRACommand
         case 3: { 
            MobilityFromEUTRACommand mobilityFromEUTRACommand;
            element = mobilityFromEUTRACommand = new MobilityFromEUTRACommand();
            mobilityFromEUTRACommand.decode (buffer);
            break;
         }

         // rrcConnectionReconfiguration
         case 4: { 
            RRCConnectionReconfiguration rrcConnectionReconfiguration;
            element = rrcConnectionReconfiguration = new RRCConnectionReconfiguration();
            rrcConnectionReconfiguration.decode (buffer);
            break;
         }

         // rrcConnectionRelease
         case 5: { 
            RRCConnectionRelease rrcConnectionRelease;
            element = rrcConnectionRelease = new RRCConnectionRelease();
            rrcConnectionRelease.decode (buffer);
            break;
         }

         // securityModeCommand
         case 6: { 
            SecurityModeCommand securityModeCommand;
            element = securityModeCommand = new SecurityModeCommand();
            securityModeCommand.decode (buffer);
            break;
         }

         // ueCapabilityEnquiry
         case 7: { 
            UECapabilityEnquiry ueCapabilityEnquiry;
            element = ueCapabilityEnquiry = new UECapabilityEnquiry();
            ueCapabilityEnquiry.decode (buffer);
            break;
         }

         // counterCheck
         case 8: { 
            CounterCheck counterCheck;
            element = counterCheck = new CounterCheck();
            counterCheck.decode (buffer);
            break;
         }

         // ueInformationRequest_r9
         case 9: { 
            UEInformationRequest_r9 ueInformationRequest_r9;
            element = ueInformationRequest_r9 = new UEInformationRequest_r9();
            ueInformationRequest_r9.decode (buffer);
            break;
         }

         // loggedMeasurementConfiguration_r10
         case 10: { 
            LoggedMeasurementConfiguration_r10 loggedMeasurementConfiguration_r10;
            element = loggedMeasurementConfiguration_r10 = new LoggedMeasurementConfiguration_r10();
            loggedMeasurementConfiguration_r10.decode (buffer);
            break;
         }

         // rnReconfiguration_r10
         case 11: { 
            RNReconfiguration_r10 rnReconfiguration_r10;
            element = rnReconfiguration_r10 = new RNReconfiguration_r10();
            rnReconfiguration_r10.decode (buffer);
            break;
         }

         // rrcConnectionResume_r13
         case 12: { 
            RRCConnectionResume_r13 rrcConnectionResume_r13;
            element = rrcConnectionResume_r13 = new RRCConnectionResume_r13();
            rrcConnectionResume_r13.decode (buffer);
            break;
         }

         // spare3
         case 13: { 
            Asn1Null spare3;
            element = spare3 = Asn1Null.NULL_VALUE;
            spare3.decode (buffer);

            buffer.invokeCharacters(spare3.toString());
            break;
         }

         // spare2
         case 14: { 
            Asn1Null spare2;
            element = spare2 = Asn1Null.NULL_VALUE;
            spare2.decode (buffer);

            buffer.invokeCharacters(spare2.toString());
            break;
         }

         // spare1
         case 15: { 
            Asn1Null spare1;
            element = spare1 = Asn1Null.NULL_VALUE;
            spare1.decode (buffer);

            buffer.invokeCharacters(spare1.toString());
            break;
         }

         default:
         throw new Asn1InvalidChoiceOptionException (buffer, idx);
      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (element != null) {
         element.print (_sb, getElemName(), _level+1);
      }
      indent (_sb, _level);
      _sb.append("}\n");
   }

}
