/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.X2AP_Ericsson_PDU_Contents;

import com.objsys.asn1j.runtime.*;
import asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_ProtocolIE_ID;
import asn.lte.generated.X2AP_CommonDataTypes.Criticality;

public class EAB_UEContextFetchResponse_protocolIEs_element extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_X2AP_Ericsson_PDU_ContentsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public EAB_ProtocolIE_ID id;
   public Criticality criticality = null;

   /**
    * id: eid-Old-eNB-UE-X2AP-ID
    * criticality: Criticality.reject
    * presence: Presence.mandatory
    * ASN.1 type: UE-X2AP-ID
    * Java type: UE_X2AP_ID
    *
    * id: eid-New-eNB-UE-X2AP-ID
    * criticality: Criticality.reject
    * presence: Presence.mandatory
    * ASN.1 type: UE-X2AP-ID
    * Java type: UE_X2AP_ID
    *
    * id: eid-FailureCellPCI
    * criticality: Criticality.ignore
    * presence: Presence.optional
    * ASN.1 type: PCI
    * Java type: PCI
    *
    * id: eid-FailureCellCRNTI
    * criticality: Criticality.ignore
    * presence: Presence.optional
    * ASN.1 type: CRNTI
    * Java type: CRNTI
    *
    * id: eid-ShortMAC-I
    * criticality: Criticality.ignore
    * presence: Presence.optional
    * ASN.1 type: ShortMAC-I
    * Java type: ShortMAC_I
    *
    * id: eid-GUMMEI
    * criticality: Criticality.reject
    * presence: Presence.mandatory
    * ASN.1 type: GUMMEI
    * Java type: GUMMEI
    *
    * id: eid-UE-ContextInformation
    * criticality: Criticality.reject
    * presence: Presence.mandatory
    * ASN.1 type: EAB-UE-ContextInformation
    * Java type: EAB_UE_ContextInformation
    *
    * id: eid-UE-HistoryInformation
    * criticality: Criticality.ignore
    * presence: Presence.mandatory
    * ASN.1 type: UE-HistoryInformation
    * Java type: UE_HistoryInformation
    *
    * id: eid-TraceActivation
    * criticality: Criticality.ignore
    * presence: Presence.optional
    * ASN.1 type: TraceActivation
    * Java type: TraceActivation
    *
    * id: eid-SRVCCOperationPossible
    * criticality: Criticality.ignore
    * presence: Presence.optional
    * ASN.1 type: SRVCCOperationPossible
    * Java type: SRVCCOperationPossible
    *
    * id: eid-CSGMembershipStatus
    * criticality: Criticality.reject
    * presence: Presence.optional
    * ASN.1 type: CSGMembershipStatus
    * Java type: CSGMembershipStatus
    *
    * id: eid-E-RAB-SubjectToStatusTransfer-List
    * criticality: Criticality.ignore
    * presence: Presence.mandatory
    * ASN.1 type: EAB-E-RAB-SubjectToStatusTransfer-List
    * Java type: EAB_E_RAB_SubjectToStatusTransfer_List
    *
    * id: eid-CriticalityDiagnostics
    * criticality: Criticality.ignore
    * presence: Presence.optional
    * ASN.1 type: EAB-CriticalityDiagnostics
    * Java type: EAB_CriticalityDiagnostics
    *
    * id: eid-OngoingProcedure
    * criticality: Criticality.ignore
    * presence: Presence.optional
    * ASN.1 type: EAB-OngoingProcedure
    * Java type: EAB_OngoingProcedure
    *
    * id: eid-Masked-IMEISV
    * criticality: Criticality.ignore
    * presence: Presence.optional
    * ASN.1 type: Masked-IMEISV
    * Java type: Masked_IMEISV
    *
    * id: eid-UE-Type
    * criticality: Criticality.ignore
    * presence: Presence.optional
    * ASN.1 type: EAB-UE-Type
    * Java type: EAB_UE_Type
    *
    * id: eid-TestUE-Type
    * criticality: Criticality.ignore
    * presence: Presence.optional
    * ASN.1 type: EAB-TestUE-Type
    * Java type: EAB_TestUE_Type
    *
    * id: eid-UserBehavior-Info
    * criticality: Criticality.ignore
    * presence: Presence.optional
    * ASN.1 type: EAB-UserBehavior-Info
    * Java type: EAB_UserBehavior_Info
    *
    * id: eid-E6BearerIPAddress
    * criticality: Criticality.ignore
    * presence: Presence.optional
    * ASN.1 type: EAB-E6BearerIPAddress
    * Java type: EAB_E6BearerIPAddress
    *
    * id: eid-PPEResourceList
    * criticality: Criticality.ignore
    * presence: Presence.optional
    * ASN.1 type: EAB-PPEResourceList
    * Java type: EAB_PPEResourceList
    *
    * id: eid-S-TMSI
    * criticality: Criticality.ignore
    * presence: Presence.optional
    * ASN.1 type: EAB-S-TMSI
    * Java type: EAB_S_TMSI
    *
    * id: eid-Previous-eNB-UE-X2AP-ID
    * criticality: Criticality.ignore
    * presence: Presence.optional
    * ASN.1 type: UE-X2AP-ID
    * Java type: UE_X2AP_ID
    *
    * id: eid-RAN-UeTraceID
    * criticality: Criticality.ignore
    * presence: Presence.optional
    * ASN.1 type: EAB-RAN-UeTraceID
    * Java type: EAB_RAN_UeTraceID
    *
    * id: eid-RAN-UeTraceFlag
    * criticality: Criticality.ignore
    * presence: Presence.optional
    * ASN.1 type: EAB-RAN-UeTraceFlag
    * Java type: EAB_RAN_UeTraceFlag
    *
    * id: eid-NRUESecurityCapabilities
    * criticality: Criticality.ignore
    * presence: Presence.optional
    * ASN.1 type: NRUESecurityCapabilities
    * Java type: NRUESecurityCapabilities
    *
    * id: eid-VoLTE-EndTime
    * criticality: Criticality.ignore
    * presence: Presence.optional
    * ASN.1 type: EAB-VoLTE-EndTime
    * Java type: EAB_VoLTE_EndTime
    */
   public Asn1Type value;

   public EAB_UEContextFetchResponse_protocolIEs_element () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public EAB_UEContextFetchResponse_protocolIEs_element (
      EAB_ProtocolIE_ID id_,
      Criticality criticality_,
      Asn1Type value_
   ) {
      super();
      id = id_;
      criticality = criticality_;
      value = value_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public EAB_UEContextFetchResponse_protocolIEs_element (long id_,
      Criticality criticality_,
      Asn1Type value_
   ) {
      super();
      id = new EAB_ProtocolIE_ID (id_);
      criticality = criticality_;
      value = value_;
   }

   public void init () {
      id = null;
      criticality = null;
      value = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return id;
         case 1: return criticality;
         case 2: return value;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "id";
         case 1: return "criticality";
         case 2: return "value";
         default: return null;
      }
   }


   /**
    * Assign fields according to information object having key eid-Old-eNB-UE-X2AP-ID
    */
   public void setUsing_eid_Old_eNB_UE_X2AP_ID(asn.lte.generated.X2AP_IEs.UE_X2AP_ID value) {
      this.id = new asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_ProtocolIE_ID(asn.lte.generated.X2AP_Ericsson_Constants._X2AP_Ericsson_ConstantsValues.eid_Old_eNB_UE_X2AP_ID);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key eid-New-eNB-UE-X2AP-ID
    */
   public void setUsing_eid_New_eNB_UE_X2AP_ID(asn.lte.generated.X2AP_IEs.UE_X2AP_ID value) {
      this.id = new asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_ProtocolIE_ID(asn.lte.generated.X2AP_Ericsson_Constants._X2AP_Ericsson_ConstantsValues.eid_New_eNB_UE_X2AP_ID);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key eid-FailureCellPCI
    */
   public void setUsing_eid_FailureCellPCI(asn.lte.generated.X2AP_IEs.PCI value) {
      this.id = new asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_ProtocolIE_ID(asn.lte.generated.X2AP_Ericsson_Constants._X2AP_Ericsson_ConstantsValues.eid_FailureCellPCI);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key eid-FailureCellCRNTI
    */
   public void setUsing_eid_FailureCellCRNTI(asn.lte.generated.X2AP_IEs.CRNTI value) {
      this.id = new asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_ProtocolIE_ID(asn.lte.generated.X2AP_Ericsson_Constants._X2AP_Ericsson_ConstantsValues.eid_FailureCellCRNTI);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key eid-ShortMAC-I
    */
   public void setUsing_eid_ShortMAC_I(asn.lte.generated.X2AP_IEs.ShortMAC_I value) {
      this.id = new asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_ProtocolIE_ID(asn.lte.generated.X2AP_Ericsson_Constants._X2AP_Ericsson_ConstantsValues.eid_ShortMAC_I);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key eid-GUMMEI
    */
   public void setUsing_eid_GUMMEI(asn.lte.generated.X2AP_IEs.GUMMEI value) {
      this.id = new asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_ProtocolIE_ID(asn.lte.generated.X2AP_Ericsson_Constants._X2AP_Ericsson_ConstantsValues.eid_GUMMEI);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key eid-UE-ContextInformation
    */
   public void setUsing_eid_UE_ContextInformation(asn.lte.generated.X2AP_Ericsson_IEs.EAB_UE_ContextInformation value) {
      this.id = new asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_ProtocolIE_ID(asn.lte.generated.X2AP_Ericsson_Constants._X2AP_Ericsson_ConstantsValues.eid_UE_ContextInformation);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key eid-UE-HistoryInformation
    */
   public void setUsing_eid_UE_HistoryInformation(asn.lte.generated.X2AP_IEs.UE_HistoryInformation value) {
      this.id = new asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_ProtocolIE_ID(asn.lte.generated.X2AP_Ericsson_Constants._X2AP_Ericsson_ConstantsValues.eid_UE_HistoryInformation);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key eid-TraceActivation
    */
   public void setUsing_eid_TraceActivation(asn.lte.generated.X2AP_IEs.TraceActivation value) {
      this.id = new asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_ProtocolIE_ID(asn.lte.generated.X2AP_Ericsson_Constants._X2AP_Ericsson_ConstantsValues.eid_TraceActivation);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key eid-SRVCCOperationPossible
    */
   public void setUsing_eid_SRVCCOperationPossible(asn.lte.generated.X2AP_IEs.SRVCCOperationPossible value) {
      this.id = new asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_ProtocolIE_ID(asn.lte.generated.X2AP_Ericsson_Constants._X2AP_Ericsson_ConstantsValues.eid_SRVCCOperationPossible);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key eid-CSGMembershipStatus
    */
   public void setUsing_eid_CSGMembershipStatus(asn.lte.generated.X2AP_IEs.CSGMembershipStatus value) {
      this.id = new asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_ProtocolIE_ID(asn.lte.generated.X2AP_Ericsson_Constants._X2AP_Ericsson_ConstantsValues.eid_CSGMembershipStatus);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key eid-E-RAB-SubjectToStatusTransfer-List
    */
   public void setUsing_eid_E_RAB_SubjectToStatusTransfer_List(asn.lte.generated.X2AP_Ericsson_IEs.EAB_E_RAB_SubjectToStatusTransfer_List value) {
      this.id = new asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_ProtocolIE_ID(asn.lte.generated.X2AP_Ericsson_Constants._X2AP_Ericsson_ConstantsValues.eid_E_RAB_SubjectToStatusTransfer_List);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key eid-CriticalityDiagnostics
    */
   public void setUsing_eid_CriticalityDiagnostics(asn.lte.generated.X2AP_Ericsson_IEs.EAB_CriticalityDiagnostics value) {
      this.id = new asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_ProtocolIE_ID(asn.lte.generated.X2AP_Ericsson_Constants._X2AP_Ericsson_ConstantsValues.eid_CriticalityDiagnostics);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key eid-OngoingProcedure
    */
   public void setUsing_eid_OngoingProcedure(asn.lte.generated.X2AP_Ericsson_IEs.EAB_OngoingProcedure value) {
      this.id = new asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_ProtocolIE_ID(asn.lte.generated.X2AP_Ericsson_Constants._X2AP_Ericsson_ConstantsValues.eid_OngoingProcedure);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key eid-Masked-IMEISV
    */
   public void setUsing_eid_Masked_IMEISV(asn.lte.generated.X2AP_IEs.Masked_IMEISV value) {
      this.id = new asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_ProtocolIE_ID(asn.lte.generated.X2AP_Ericsson_Constants._X2AP_Ericsson_ConstantsValues.eid_Masked_IMEISV);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key eid-UE-Type
    */
   public void setUsing_eid_UE_Type(asn.lte.generated.X2AP_Ericsson_IEs.EAB_UE_Type value) {
      this.id = new asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_ProtocolIE_ID(asn.lte.generated.X2AP_Ericsson_Constants._X2AP_Ericsson_ConstantsValues.eid_UE_Type);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key eid-TestUE-Type
    */
   public void setUsing_eid_TestUE_Type(asn.lte.generated.X2AP_Ericsson_IEs.EAB_TestUE_Type value) {
      this.id = new asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_ProtocolIE_ID(asn.lte.generated.X2AP_Ericsson_Constants._X2AP_Ericsson_ConstantsValues.eid_TestUE_Type);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key eid-UserBehavior-Info
    */
   public void setUsing_eid_UserBehavior_Info(asn.lte.generated.X2AP_Ericsson_IEs.EAB_UserBehavior_Info value) {
      this.id = new asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_ProtocolIE_ID(asn.lte.generated.X2AP_Ericsson_Constants._X2AP_Ericsson_ConstantsValues.eid_UserBehavior_Info);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key eid-E6BearerIPAddress
    */
   public void setUsing_eid_E6BearerIPAddress(asn.lte.generated.X2AP_Ericsson_IEs.EAB_E6BearerIPAddress value) {
      this.id = new asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_ProtocolIE_ID(asn.lte.generated.X2AP_Ericsson_Constants._X2AP_Ericsson_ConstantsValues.eid_E6BearerIPAddress);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key eid-PPEResourceList
    */
   public void setUsing_eid_PPEResourceList(asn.lte.generated.X2AP_Ericsson_IEs.EAB_PPEResourceList value) {
      this.id = new asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_ProtocolIE_ID(asn.lte.generated.X2AP_Ericsson_Constants._X2AP_Ericsson_ConstantsValues.eid_PPEResourceList);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key eid-S-TMSI
    */
   public void setUsing_eid_S_TMSI(asn.lte.generated.X2AP_Ericsson_IEs.EAB_S_TMSI value) {
      this.id = new asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_ProtocolIE_ID(asn.lte.generated.X2AP_Ericsson_Constants._X2AP_Ericsson_ConstantsValues.eid_S_TMSI);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key eid-Previous-eNB-UE-X2AP-ID
    */
   public void setUsing_eid_Previous_eNB_UE_X2AP_ID(asn.lte.generated.X2AP_IEs.UE_X2AP_ID value) {
      this.id = new asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_ProtocolIE_ID(asn.lte.generated.X2AP_Ericsson_Constants._X2AP_Ericsson_ConstantsValues.eid_Previous_eNB_UE_X2AP_ID);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key eid-RAN-UeTraceID
    */
   public void setUsing_eid_RAN_UeTraceID(asn.lte.generated.X2AP_Ericsson_IEs.EAB_RAN_UeTraceID value) {
      this.id = new asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_ProtocolIE_ID(asn.lte.generated.X2AP_Ericsson_Constants._X2AP_Ericsson_ConstantsValues.eid_RAN_UeTraceID);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key eid-RAN-UeTraceFlag
    */
   public void setUsing_eid_RAN_UeTraceFlag(asn.lte.generated.X2AP_Ericsson_IEs.EAB_RAN_UeTraceFlag value) {
      this.id = new asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_ProtocolIE_ID(asn.lte.generated.X2AP_Ericsson_Constants._X2AP_Ericsson_ConstantsValues.eid_RAN_UeTraceFlag);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key eid-NRUESecurityCapabilities
    */
   public void setUsing_eid_NRUESecurityCapabilities(asn.lte.generated.X2AP_IEs.NRUESecurityCapabilities value) {
      this.id = new asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_ProtocolIE_ID(asn.lte.generated.X2AP_Ericsson_Constants._X2AP_Ericsson_ConstantsValues.eid_NRUESecurityCapabilities);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key eid-VoLTE-EndTime
    */
   public void setUsing_eid_VoLTE_EndTime(asn.lte.generated.X2AP_Ericsson_IEs.EAB_VoLTE_EndTime value) {
      this.id = new asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_ProtocolIE_ID(asn.lte.generated.X2AP_Ericsson_Constants._X2AP_Ericsson_ConstantsValues.eid_VoLTE_EndTime);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Get value of value with type set according to information object having key eid-Old-eNB-UE-X2AP-ID
    */
   public asn.lte.generated.X2AP_IEs.UE_X2AP_ID getValueFor_eid_Old_eNB_UE_X2AP_ID() {
      return (asn.lte.generated.X2AP_IEs.UE_X2AP_ID) this.value;
   }

   /**
    * Get value of value with type set according to information object having key eid-New-eNB-UE-X2AP-ID
    */
   public asn.lte.generated.X2AP_IEs.UE_X2AP_ID getValueFor_eid_New_eNB_UE_X2AP_ID() {
      return (asn.lte.generated.X2AP_IEs.UE_X2AP_ID) this.value;
   }

   /**
    * Get value of value with type set according to information object having key eid-FailureCellPCI
    */
   public asn.lte.generated.X2AP_IEs.PCI getValueFor_eid_FailureCellPCI() {
      return (asn.lte.generated.X2AP_IEs.PCI) this.value;
   }

   /**
    * Get value of value with type set according to information object having key eid-FailureCellCRNTI
    */
   public asn.lte.generated.X2AP_IEs.CRNTI getValueFor_eid_FailureCellCRNTI() {
      return (asn.lte.generated.X2AP_IEs.CRNTI) this.value;
   }

   /**
    * Get value of value with type set according to information object having key eid-ShortMAC-I
    */
   public asn.lte.generated.X2AP_IEs.ShortMAC_I getValueFor_eid_ShortMAC_I() {
      return (asn.lte.generated.X2AP_IEs.ShortMAC_I) this.value;
   }

   /**
    * Get value of value with type set according to information object having key eid-GUMMEI
    */
   public asn.lte.generated.X2AP_IEs.GUMMEI getValueFor_eid_GUMMEI() {
      return (asn.lte.generated.X2AP_IEs.GUMMEI) this.value;
   }

   /**
    * Get value of value with type set according to information object having key eid-UE-ContextInformation
    */
   public asn.lte.generated.X2AP_Ericsson_IEs.EAB_UE_ContextInformation getValueFor_eid_UE_ContextInformation() {
      return (asn.lte.generated.X2AP_Ericsson_IEs.EAB_UE_ContextInformation) this.value;
   }

   /**
    * Get value of value with type set according to information object having key eid-UE-HistoryInformation
    */
   public asn.lte.generated.X2AP_IEs.UE_HistoryInformation getValueFor_eid_UE_HistoryInformation() {
      return (asn.lte.generated.X2AP_IEs.UE_HistoryInformation) this.value;
   }

   /**
    * Get value of value with type set according to information object having key eid-TraceActivation
    */
   public asn.lte.generated.X2AP_IEs.TraceActivation getValueFor_eid_TraceActivation() {
      return (asn.lte.generated.X2AP_IEs.TraceActivation) this.value;
   }

   /**
    * Get value of value with type set according to information object having key eid-SRVCCOperationPossible
    */
   public asn.lte.generated.X2AP_IEs.SRVCCOperationPossible getValueFor_eid_SRVCCOperationPossible() {
      return (asn.lte.generated.X2AP_IEs.SRVCCOperationPossible) this.value;
   }

   /**
    * Get value of value with type set according to information object having key eid-CSGMembershipStatus
    */
   public asn.lte.generated.X2AP_IEs.CSGMembershipStatus getValueFor_eid_CSGMembershipStatus() {
      return (asn.lte.generated.X2AP_IEs.CSGMembershipStatus) this.value;
   }

   /**
    * Get value of value with type set according to information object having key eid-E-RAB-SubjectToStatusTransfer-List
    */
   public asn.lte.generated.X2AP_Ericsson_IEs.EAB_E_RAB_SubjectToStatusTransfer_List getValueFor_eid_E_RAB_SubjectToStatusTransfer_List() {
      return (asn.lte.generated.X2AP_Ericsson_IEs.EAB_E_RAB_SubjectToStatusTransfer_List) this.value;
   }

   /**
    * Get value of value with type set according to information object having key eid-CriticalityDiagnostics
    */
   public asn.lte.generated.X2AP_Ericsson_IEs.EAB_CriticalityDiagnostics getValueFor_eid_CriticalityDiagnostics() {
      return (asn.lte.generated.X2AP_Ericsson_IEs.EAB_CriticalityDiagnostics) this.value;
   }

   /**
    * Get value of value with type set according to information object having key eid-OngoingProcedure
    */
   public asn.lte.generated.X2AP_Ericsson_IEs.EAB_OngoingProcedure getValueFor_eid_OngoingProcedure() {
      return (asn.lte.generated.X2AP_Ericsson_IEs.EAB_OngoingProcedure) this.value;
   }

   /**
    * Get value of value with type set according to information object having key eid-Masked-IMEISV
    */
   public asn.lte.generated.X2AP_IEs.Masked_IMEISV getValueFor_eid_Masked_IMEISV() {
      return (asn.lte.generated.X2AP_IEs.Masked_IMEISV) this.value;
   }

   /**
    * Get value of value with type set according to information object having key eid-UE-Type
    */
   public asn.lte.generated.X2AP_Ericsson_IEs.EAB_UE_Type getValueFor_eid_UE_Type() {
      return (asn.lte.generated.X2AP_Ericsson_IEs.EAB_UE_Type) this.value;
   }

   /**
    * Get value of value with type set according to information object having key eid-TestUE-Type
    */
   public asn.lte.generated.X2AP_Ericsson_IEs.EAB_TestUE_Type getValueFor_eid_TestUE_Type() {
      return (asn.lte.generated.X2AP_Ericsson_IEs.EAB_TestUE_Type) this.value;
   }

   /**
    * Get value of value with type set according to information object having key eid-UserBehavior-Info
    */
   public asn.lte.generated.X2AP_Ericsson_IEs.EAB_UserBehavior_Info getValueFor_eid_UserBehavior_Info() {
      return (asn.lte.generated.X2AP_Ericsson_IEs.EAB_UserBehavior_Info) this.value;
   }

   /**
    * Get value of value with type set according to information object having key eid-E6BearerIPAddress
    */
   public asn.lte.generated.X2AP_Ericsson_IEs.EAB_E6BearerIPAddress getValueFor_eid_E6BearerIPAddress() {
      return (asn.lte.generated.X2AP_Ericsson_IEs.EAB_E6BearerIPAddress) this.value;
   }

   /**
    * Get value of value with type set according to information object having key eid-PPEResourceList
    */
   public asn.lte.generated.X2AP_Ericsson_IEs.EAB_PPEResourceList getValueFor_eid_PPEResourceList() {
      return (asn.lte.generated.X2AP_Ericsson_IEs.EAB_PPEResourceList) this.value;
   }

   /**
    * Get value of value with type set according to information object having key eid-S-TMSI
    */
   public asn.lte.generated.X2AP_Ericsson_IEs.EAB_S_TMSI getValueFor_eid_S_TMSI() {
      return (asn.lte.generated.X2AP_Ericsson_IEs.EAB_S_TMSI) this.value;
   }

   /**
    * Get value of value with type set according to information object having key eid-Previous-eNB-UE-X2AP-ID
    */
   public asn.lte.generated.X2AP_IEs.UE_X2AP_ID getValueFor_eid_Previous_eNB_UE_X2AP_ID() {
      return (asn.lte.generated.X2AP_IEs.UE_X2AP_ID) this.value;
   }

   /**
    * Get value of value with type set according to information object having key eid-RAN-UeTraceID
    */
   public asn.lte.generated.X2AP_Ericsson_IEs.EAB_RAN_UeTraceID getValueFor_eid_RAN_UeTraceID() {
      return (asn.lte.generated.X2AP_Ericsson_IEs.EAB_RAN_UeTraceID) this.value;
   }

   /**
    * Get value of value with type set according to information object having key eid-RAN-UeTraceFlag
    */
   public asn.lte.generated.X2AP_Ericsson_IEs.EAB_RAN_UeTraceFlag getValueFor_eid_RAN_UeTraceFlag() {
      return (asn.lte.generated.X2AP_Ericsson_IEs.EAB_RAN_UeTraceFlag) this.value;
   }

   /**
    * Get value of value with type set according to information object having key eid-NRUESecurityCapabilities
    */
   public asn.lte.generated.X2AP_IEs.NRUESecurityCapabilities getValueFor_eid_NRUESecurityCapabilities() {
      return (asn.lte.generated.X2AP_IEs.NRUESecurityCapabilities) this.value;
   }

   /**
    * Get value of value with type set according to information object having key eid-VoLTE-EndTime
    */
   public asn.lte.generated.X2AP_Ericsson_IEs.EAB_VoLTE_EndTime getValueFor_eid_VoLTE_EndTime() {
      return (asn.lte.generated.X2AP_Ericsson_IEs.EAB_VoLTE_EndTime) this.value;
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode id

      buffer.getContext().eventDispatcher.startElement("id", -1);

      id = new EAB_ProtocolIE_ID();
      id.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("id", -1);

      // decode criticality

      buffer.getContext().eventDispatcher.startElement("criticality", -1);

      {
         int tval = Criticality.decodeEnumValue (buffer);
         criticality = Criticality.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("criticality", -1);

      // decode value

      buffer.getContext().eventDispatcher.startElement("value", -1);

      value = new Asn1OpenType();
      value.decode (buffer);

      buffer.invokeCharacters(value.toString());
      buffer.getContext().eventDispatcher.endElement("value", -1);

      checkTC (true, buffer.getLazyOpenTypeDecode() ? 0 : 2, buffer.isAligned(), buffer.getContext().eventDispatcher);
   }

   public void checkTC(boolean decode, int decodeOpenTypeFlag, boolean aligned, Asn1NamedEventDispatcher eventDispatcher)
      throws Asn1Exception
   {
      /* check id */
      asn.lte.generated.X2AP_Ericsson_Containers.X2AP_EAB_PROTOCOL_IES _index = null;
      for(int i=0; i < _X2AP_Ericsson_PDU_ContentsValues.EAB_UEContextFetchResponse_IEs.length; i++) {
         if(_X2AP_Ericsson_PDU_ContentsValues.EAB_UEContextFetchResponse_IEs[i].id.equals(id)) {
            _index = _X2AP_Ericsson_PDU_ContentsValues.EAB_UEContextFetchResponse_IEs[i];
            break;
         }
      }
      if (null == _index) {
         return;
      }

      /* check value */
      if( decode && decodeOpenTypeFlag >=1 ) {
         try {
            Asn1PerDecodeBuffer buffer = new Asn1PerDecodeBuffer(((Asn1OpenType)value).value, aligned);
            buffer.setLazyOpenTypeDecode(decodeOpenTypeFlag == 1);
            if (eventDispatcher != null)buffer.getContext().eventDispatcher = eventDispatcher;
            buffer.getContext().eventDispatcher.startElement("value", -1);

            String className = _index.Value.actualType.getName();
            if (className.lastIndexOf('.') > 0) {
               className = className.substring (className.lastIndexOf (".")+1);
            }
            buffer.getContext().eventDispatcher.startElement(className, -1);

            value = Asn1Type.decode(buffer, _index.Value);

            buffer.getContext().eventDispatcher.endElement(className, -1);

            buffer.getContext().eventDispatcher.endElement("value", -1);
         }
         catch (java.io.IOException e) {
            throw new Asn1Exception(e.toString());
         }
      }

      /* use -strict option to validate the "criticality" element */
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (id.value == 31) {
         indent (_sb, _level+1);
         _sb.append("id = eid-Old-eNB-UE-X2AP-ID\n");
      }
      else if (id.value == 30) {
         indent (_sb, _level+1);
         _sb.append("id = eid-New-eNB-UE-X2AP-ID\n");
      }
      else if (id.value == 28) {
         indent (_sb, _level+1);
         _sb.append("id = eid-FailureCellPCI\n");
      }
      else if (id.value == 27) {
         indent (_sb, _level+1);
         _sb.append("id = eid-FailureCellCRNTI\n");
      }
      else if (id.value == 33) {
         indent (_sb, _level+1);
         _sb.append("id = eid-ShortMAC-I\n");
      }
      else if (id.value == 29) {
         indent (_sb, _level+1);
         _sb.append("id = eid-GUMMEI\n");
      }
      else if (id.value == 36) {
         indent (_sb, _level+1);
         _sb.append("id = eid-UE-ContextInformation\n");
      }
      else if (id.value == 37) {
         indent (_sb, _level+1);
         _sb.append("id = eid-UE-HistoryInformation\n");
      }
      else if (id.value == 35) {
         indent (_sb, _level+1);
         _sb.append("id = eid-TraceActivation\n");
      }
      else if (id.value == 34) {
         indent (_sb, _level+1);
         _sb.append("id = eid-SRVCCOperationPossible\n");
      }
      else if (id.value == 20) {
         indent (_sb, _level+1);
         _sb.append("id = eid-CSGMembershipStatus\n");
      }
      else if (id.value == 25) {
         indent (_sb, _level+1);
         _sb.append("id = eid-E-RAB-SubjectToStatusTransfer-List\n");
      }
      else if (id.value == 1) {
         indent (_sb, _level+1);
         _sb.append("id = eid-CriticalityDiagnostics\n");
      }
      else if (id.value == 4105) {
         indent (_sb, _level+1);
         _sb.append("id = eid-OngoingProcedure\n");
      }
      else if (id.value == 4108) {
         indent (_sb, _level+1);
         _sb.append("id = eid-Masked-IMEISV\n");
      }
      else if (id.value == 4117) {
         indent (_sb, _level+1);
         _sb.append("id = eid-UE-Type\n");
      }
      else if (id.value == 4141) {
         indent (_sb, _level+1);
         _sb.append("id = eid-TestUE-Type\n");
      }
      else if (id.value == 4151) {
         indent (_sb, _level+1);
         _sb.append("id = eid-UserBehavior-Info\n");
      }
      else if (id.value == 4152) {
         indent (_sb, _level+1);
         _sb.append("id = eid-E6BearerIPAddress\n");
      }
      else if (id.value == 4153) {
         indent (_sb, _level+1);
         _sb.append("id = eid-PPEResourceList\n");
      }
      else if (id.value == 4159) {
         indent (_sb, _level+1);
         _sb.append("id = eid-S-TMSI\n");
      }
      else if (id.value == 4160) {
         indent (_sb, _level+1);
         _sb.append("id = eid-Previous-eNB-UE-X2AP-ID\n");
      }
      else if (id.value == 4161) {
         indent (_sb, _level+1);
         _sb.append("id = eid-RAN-UeTraceID\n");
      }
      else if (id.value == 4162) {
         indent (_sb, _level+1);
         _sb.append("id = eid-RAN-UeTraceFlag\n");
      }
      else if (id.value == 4175) {
         indent (_sb, _level+1);
         _sb.append("id = eid-NRUESecurityCapabilities\n");
      }
      else if (id.value == 4194) {
         indent (_sb, _level+1);
         _sb.append("id = eid-VoLTE-EndTime\n");
      }

      if (criticality != null) {
         criticality.print (_sb, "criticality", _level+1);
      }
      if (value != null) {
         String tmpName = value.getAsn1TypeName();
         if (tmpName != null && tmpName != "")  {
            tmpName = "value" + " (" + tmpName + ")";
         }
         else  {
            tmpName = "value";
         }
         value.print (_sb, tmpName, _level+1);
      }
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
