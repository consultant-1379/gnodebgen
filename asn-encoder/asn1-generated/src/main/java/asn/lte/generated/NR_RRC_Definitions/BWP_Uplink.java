/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class BWP_Uplink extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "BWP-Uplink";
   }

   public BWP_Id bwp_Id;
   public BWP_UplinkCommon bwp_Common;  // optional
   public BWP_UplinkDedicated bwp_Dedicated;  // optional
   public Asn1OpenExt extElem1;

   public BWP_Uplink () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public BWP_Uplink (
      BWP_Id bwp_Id_,
      BWP_UplinkCommon bwp_Common_,
      BWP_UplinkDedicated bwp_Dedicated_
   ) {
      super();
      bwp_Id = bwp_Id_;
      bwp_Common = bwp_Common_;
      bwp_Dedicated = bwp_Dedicated_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public BWP_Uplink (
      BWP_Id bwp_Id_
   ) {
      super();
      bwp_Id = bwp_Id_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public BWP_Uplink (long bwp_Id_,
      BWP_UplinkCommon bwp_Common_,
      BWP_UplinkDedicated bwp_Dedicated_
   ) {
      super();
      bwp_Id = new BWP_Id (bwp_Id_);
      bwp_Common = bwp_Common_;
      bwp_Dedicated = bwp_Dedicated_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public BWP_Uplink (
      long bwp_Id_
   ) {
      super();
      bwp_Id = new BWP_Id (bwp_Id_);
   }

   public void init () {
      bwp_Id = null;
      bwp_Common = null;
      bwp_Dedicated = null;
      extElem1 = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return bwp_Id;
         case 1: return bwp_Common;
         case 2: return bwp_Dedicated;
         case 3: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "bwp-Id";
         case 1: return "bwp-Common";
         case 2: return "bwp-Dedicated";
         case 3: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean bwp_CommonPresent = buffer.decodeBit ("bwp_CommonPresent");
      boolean bwp_DedicatedPresent = buffer.decodeBit ("bwp_DedicatedPresent");

      // decode bwp_Id

      buffer.getContext().eventDispatcher.startElement("bwp_Id", -1);

      bwp_Id = new BWP_Id();
      bwp_Id.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("bwp_Id", -1);

      // decode bwp_Common

      if (bwp_CommonPresent) {
         buffer.getContext().eventDispatcher.startElement("bwp_Common", -1);

         bwp_Common = new BWP_UplinkCommon();
         bwp_Common.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("bwp_Common", -1);
      }
      else {
         bwp_Common = null;
      }

      // decode bwp_Dedicated

      if (bwp_DedicatedPresent) {
         buffer.getContext().eventDispatcher.startElement("bwp_Dedicated", -1);

         bwp_Dedicated = new BWP_UplinkDedicated();
         bwp_Dedicated.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("bwp_Dedicated", -1);
      }
      else {
         bwp_Dedicated = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (bwp_Id != null) bwp_Id.print (_sb, "bwp_Id", _level+1);
      if (bwp_Common != null) bwp_Common.print (_sb, "bwp_Common", _level+1);
      if (bwp_Dedicated != null) bwp_Dedicated.print (_sb, "bwp_Dedicated", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
