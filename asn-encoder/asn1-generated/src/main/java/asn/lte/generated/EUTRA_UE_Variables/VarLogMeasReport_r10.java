/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_UE_Variables;

import com.objsys.asn1j.runtime.*;
import asn.lte.generated.EUTRA_RRC_Definitions.TraceReference_r10;
import asn.lte.generated.EUTRA_RRC_Definitions.PLMN_Identity;
import asn.lte.generated.EUTRA_RRC_Definitions.AbsoluteTimeInfo_r10;

public class VarLogMeasReport_r10 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_UE_VariablesRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "VarLogMeasReport-r10";
   }

   public TraceReference_r10 traceReference_r10;
   public Asn1OctetString traceRecordingSessionRef_r10;
   public Asn1OctetString tce_Id_r10;
   public PLMN_Identity plmn_Identity_r10;
   public AbsoluteTimeInfo_r10 absoluteTimeInfo_r10;
   public LogMeasInfoList2_r10 logMeasInfoList_r10;

   public VarLogMeasReport_r10 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public VarLogMeasReport_r10 (
      TraceReference_r10 traceReference_r10_,
      Asn1OctetString traceRecordingSessionRef_r10_,
      Asn1OctetString tce_Id_r10_,
      PLMN_Identity plmn_Identity_r10_,
      AbsoluteTimeInfo_r10 absoluteTimeInfo_r10_,
      LogMeasInfoList2_r10 logMeasInfoList_r10_
   ) {
      super();
      traceReference_r10 = traceReference_r10_;
      traceRecordingSessionRef_r10 = traceRecordingSessionRef_r10_;
      tce_Id_r10 = tce_Id_r10_;
      plmn_Identity_r10 = plmn_Identity_r10_;
      absoluteTimeInfo_r10 = absoluteTimeInfo_r10_;
      logMeasInfoList_r10 = logMeasInfoList_r10_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public VarLogMeasReport_r10 (TraceReference_r10 traceReference_r10_,
      byte[] traceRecordingSessionRef_r10_,
      byte[] tce_Id_r10_,
      PLMN_Identity plmn_Identity_r10_,
      AbsoluteTimeInfo_r10 absoluteTimeInfo_r10_,
      LogMeasInfoList2_r10 logMeasInfoList_r10_
   ) {
      super();
      traceReference_r10 = traceReference_r10_;
      traceRecordingSessionRef_r10 = new Asn1OctetString (traceRecordingSessionRef_r10_);
      tce_Id_r10 = new Asn1OctetString (tce_Id_r10_);
      plmn_Identity_r10 = plmn_Identity_r10_;
      absoluteTimeInfo_r10 = absoluteTimeInfo_r10_;
      logMeasInfoList_r10 = logMeasInfoList_r10_;
   }

   public void init () {
      traceReference_r10 = null;
      traceRecordingSessionRef_r10 = null;
      tce_Id_r10 = null;
      plmn_Identity_r10 = null;
      absoluteTimeInfo_r10 = null;
      logMeasInfoList_r10 = null;
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return traceReference_r10;
         case 1: return traceRecordingSessionRef_r10;
         case 2: return tce_Id_r10;
         case 3: return plmn_Identity_r10;
         case 4: return absoluteTimeInfo_r10;
         case 5: return logMeasInfoList_r10;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "traceReference-r10";
         case 1: return "traceRecordingSessionRef-r10";
         case 2: return "tce-Id-r10";
         case 3: return "plmn-Identity-r10";
         case 4: return "absoluteTimeInfo-r10";
         case 5: return "logMeasInfoList-r10";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode traceReference_r10

      buffer.getContext().eventDispatcher.startElement("traceReference_r10", -1);

      traceReference_r10 = new TraceReference_r10();
      traceReference_r10.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("traceReference_r10", -1);

      // decode traceRecordingSessionRef_r10

      buffer.getContext().eventDispatcher.startElement("traceRecordingSessionRef_r10", -1);

      traceRecordingSessionRef_r10 = new Asn1OctetString();
      traceRecordingSessionRef_r10.decode (buffer, 2, 2);

      buffer.invokeCharacters(traceRecordingSessionRef_r10.toString());
      buffer.getContext().eventDispatcher.endElement("traceRecordingSessionRef_r10", -1);

      // decode tce_Id_r10

      buffer.getContext().eventDispatcher.startElement("tce_Id_r10", -1);

      tce_Id_r10 = new Asn1OctetString();
      tce_Id_r10.decode (buffer, 1, 1);

      buffer.invokeCharacters(tce_Id_r10.toString());
      buffer.getContext().eventDispatcher.endElement("tce_Id_r10", -1);

      // decode plmn_Identity_r10

      buffer.getContext().eventDispatcher.startElement("plmn_Identity_r10", -1);

      plmn_Identity_r10 = new PLMN_Identity();
      plmn_Identity_r10.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("plmn_Identity_r10", -1);

      // decode absoluteTimeInfo_r10

      buffer.getContext().eventDispatcher.startElement("absoluteTimeInfo_r10", -1);

      absoluteTimeInfo_r10 = new AbsoluteTimeInfo_r10();
      absoluteTimeInfo_r10.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("absoluteTimeInfo_r10", -1);

      // decode logMeasInfoList_r10

      buffer.getContext().eventDispatcher.startElement("logMeasInfoList_r10", -1);

      logMeasInfoList_r10 = new LogMeasInfoList2_r10();
      logMeasInfoList_r10.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("logMeasInfoList_r10", -1);

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (traceReference_r10 != null) traceReference_r10.print (_sb, "traceReference_r10", _level+1);
      if (traceRecordingSessionRef_r10 != null) traceRecordingSessionRef_r10.print (_sb, "traceRecordingSessionRef_r10", _level+1);
      if (tce_Id_r10 != null) tce_Id_r10.print (_sb, "tce_Id_r10", _level+1);
      if (plmn_Identity_r10 != null) plmn_Identity_r10.print (_sb, "plmn_Identity_r10", _level+1);
      if (absoluteTimeInfo_r10 != null) absoluteTimeInfo_r10.print (_sb, "absoluteTimeInfo_r10", _level+1);
      if (logMeasInfoList_r10 != null) logMeasInfoList_r10.print (_sb, "logMeasInfoList_r10", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
