/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class RRCResume_v1610_IEs_mrdc_SecondaryCellGroup_r16 extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CHOICE";
   }

   // Choice element identifier constants
   public final static byte _NR_SCG_R16 = 1;
   public final static byte _EUTRA_SCG_R16 = 2;

   public RRCResume_v1610_IEs_mrdc_SecondaryCellGroup_r16 () {
      super();
   }

   public RRCResume_v1610_IEs_mrdc_SecondaryCellGroup_r16 (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _NR_SCG_R16: return "nr_SCG_r16";
      case _EUTRA_SCG_R16: return "eutra_SCG_r16";
      default: return "UNDEFINED";
      }
   }

   public void set_nr_SCG_r16 (RRCReconfiguration value) {
      setElement (_NR_SCG_R16, value);
   }

   public void set_eutra_SCG_r16 (Asn1OctetString value) {
      setElement (_EUTRA_SCG_R16, value);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int idx = (int) buffer.decodeConsWholeNumber (2, "index");
      choiceID = idx + 1;
      buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

      switch (idx) {
         // nr_SCG_r16
         case 0: { 
            RRCReconfiguration nr_SCG_r16;
            Asn1OctetString nr_SCG_r16_outer = new Asn1OctetString();
            nr_SCG_r16_outer.decode (buffer);
            if (nr_SCG_r16_outer.value == null) throw new Asn1Exception("contained type's complete encoding is empty");
            Asn1PerDecodeBuffer savedBuffer = buffer;
            buffer = new Asn1PerDecodeBuffer( nr_SCG_r16_outer.value, buffer.isAligned());
            buffer.setEventHandlerList( savedBuffer );
            element = nr_SCG_r16 = new RRCReconfiguration();
            nr_SCG_r16.decode (buffer);
            buffer = savedBuffer;
            break;
         }

         // eutra_SCG_r16
         case 1: { 
            Asn1OctetString eutra_SCG_r16;
            element = eutra_SCG_r16 = new Asn1OctetString();
            eutra_SCG_r16.decode (buffer);

            buffer.invokeCharacters(eutra_SCG_r16.toString());
            break;
         }

         default:
         throw new Asn1InvalidChoiceOptionException (buffer, idx);
      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (element != null) {
         element.print (_sb, getElemName(), _level+1);
      }
      indent (_sb, _level);
      _sb.append("}\n");
   }

}
