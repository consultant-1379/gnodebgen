/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NBIOT_RRC_Definitions;

import com.objsys.asn1j.runtime.*;
import asn.lte.generated.EUTRA_RRC_Definitions.DRB_Identity;

public class DRB_ToAddMod_NB_r13 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NBIOT_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "DRB-ToAddMod-NB-r13";
   }

   public Asn1Integer eps_BearerIdentity_r13;  // optional
   public DRB_Identity drb_Identity_r13;
   public PDCP_Config_NB_r13 pdcp_Config_r13;  // optional
   public RLC_Config_NB_r13 rlc_Config_r13;  // optional
   public Asn1Integer logicalChannelIdentity_r13;  // optional
   public LogicalChannelConfig_NB_r13 logicalChannelConfig_r13;  // optional
   public boolean mV2ExtPresent;
   public RLC_Config_NB_v1430 rlc_Config_v1430;  // optional
   public Asn1OpenExt extElem1;

   public DRB_ToAddMod_NB_r13 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public DRB_ToAddMod_NB_r13 (
      Asn1Integer eps_BearerIdentity_r13_,
      DRB_Identity drb_Identity_r13_,
      PDCP_Config_NB_r13 pdcp_Config_r13_,
      RLC_Config_NB_r13 rlc_Config_r13_,
      Asn1Integer logicalChannelIdentity_r13_,
      LogicalChannelConfig_NB_r13 logicalChannelConfig_r13_,
      RLC_Config_NB_v1430 rlc_Config_v1430_
   ) {
      super();
      eps_BearerIdentity_r13 = eps_BearerIdentity_r13_;
      drb_Identity_r13 = drb_Identity_r13_;
      pdcp_Config_r13 = pdcp_Config_r13_;
      rlc_Config_r13 = rlc_Config_r13_;
      logicalChannelIdentity_r13 = logicalChannelIdentity_r13_;
      logicalChannelConfig_r13 = logicalChannelConfig_r13_;
      rlc_Config_v1430 = rlc_Config_v1430_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public DRB_ToAddMod_NB_r13 (
      DRB_Identity drb_Identity_r13_
   ) {
      super();
      drb_Identity_r13 = drb_Identity_r13_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public DRB_ToAddMod_NB_r13 (long eps_BearerIdentity_r13_,
      long drb_Identity_r13_,
      PDCP_Config_NB_r13 pdcp_Config_r13_,
      RLC_Config_NB_r13 rlc_Config_r13_,
      long logicalChannelIdentity_r13_,
      LogicalChannelConfig_NB_r13 logicalChannelConfig_r13_,
      RLC_Config_NB_v1430 rlc_Config_v1430_
   ) {
      super();
      eps_BearerIdentity_r13 = new Asn1Integer (eps_BearerIdentity_r13_);
      drb_Identity_r13 = new DRB_Identity (drb_Identity_r13_);
      pdcp_Config_r13 = pdcp_Config_r13_;
      rlc_Config_r13 = rlc_Config_r13_;
      logicalChannelIdentity_r13 = new Asn1Integer (logicalChannelIdentity_r13_);
      logicalChannelConfig_r13 = logicalChannelConfig_r13_;
      rlc_Config_v1430 = rlc_Config_v1430_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public DRB_ToAddMod_NB_r13 (
      long drb_Identity_r13_
   ) {
      super();
      drb_Identity_r13 = new DRB_Identity (drb_Identity_r13_);
   }

   public void init () {
      eps_BearerIdentity_r13 = null;
      drb_Identity_r13 = null;
      pdcp_Config_r13 = null;
      rlc_Config_r13 = null;
      logicalChannelIdentity_r13 = null;
      logicalChannelConfig_r13 = null;
      rlc_Config_v1430 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 8; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return eps_BearerIdentity_r13;
         case 1: return drb_Identity_r13;
         case 2: return pdcp_Config_r13;
         case 3: return rlc_Config_r13;
         case 4: return logicalChannelIdentity_r13;
         case 5: return logicalChannelConfig_r13;
         case 6: return rlc_Config_v1430;
         case 7: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "eps-BearerIdentity-r13";
         case 1: return "drb-Identity-r13";
         case 2: return "pdcp-Config-r13";
         case 3: return "rlc-Config-r13";
         case 4: return "logicalChannelIdentity-r13";
         case 5: return "logicalChannelConfig-r13";
         case 6: return "rlc-Config-v1430";
         case 7: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean eps_BearerIdentity_r13Present = buffer.decodeBit ("eps_BearerIdentity_r13Present");
      boolean pdcp_Config_r13Present = buffer.decodeBit ("pdcp_Config_r13Present");
      boolean rlc_Config_r13Present = buffer.decodeBit ("rlc_Config_r13Present");
      boolean logicalChannelIdentity_r13Present = buffer.decodeBit ("logicalChannelIdentity_r13Present");
      boolean logicalChannelConfig_r13Present = buffer.decodeBit ("logicalChannelConfig_r13Present");

      // decode eps_BearerIdentity_r13

      if (eps_BearerIdentity_r13Present) {
         buffer.getContext().eventDispatcher.startElement("eps_BearerIdentity_r13", -1);

         eps_BearerIdentity_r13 = new Asn1Integer();
         eps_BearerIdentity_r13.decode (buffer, 0, 15);

         buffer.invokeCharacters(eps_BearerIdentity_r13.toString());
         buffer.getContext().eventDispatcher.endElement("eps_BearerIdentity_r13", -1);
      }
      else {
         eps_BearerIdentity_r13 = null;
      }

      // decode drb_Identity_r13

      buffer.getContext().eventDispatcher.startElement("drb_Identity_r13", -1);

      drb_Identity_r13 = new DRB_Identity();
      drb_Identity_r13.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("drb_Identity_r13", -1);

      // decode pdcp_Config_r13

      if (pdcp_Config_r13Present) {
         buffer.getContext().eventDispatcher.startElement("pdcp_Config_r13", -1);

         pdcp_Config_r13 = new PDCP_Config_NB_r13();
         pdcp_Config_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("pdcp_Config_r13", -1);
      }
      else {
         pdcp_Config_r13 = null;
      }

      // decode rlc_Config_r13

      if (rlc_Config_r13Present) {
         buffer.getContext().eventDispatcher.startElement("rlc_Config_r13", -1);

         rlc_Config_r13 = new RLC_Config_NB_r13();
         rlc_Config_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("rlc_Config_r13", -1);
      }
      else {
         rlc_Config_r13 = null;
      }

      // decode logicalChannelIdentity_r13

      if (logicalChannelIdentity_r13Present) {
         buffer.getContext().eventDispatcher.startElement("logicalChannelIdentity_r13", -1);

         logicalChannelIdentity_r13 = new Asn1Integer();
         logicalChannelIdentity_r13.decode (buffer, 3, 10);

         buffer.invokeCharacters(logicalChannelIdentity_r13.toString());
         buffer.getContext().eventDispatcher.endElement("logicalChannelIdentity_r13", -1);
      }
      else {
         logicalChannelIdentity_r13 = null;
      }

      // decode logicalChannelConfig_r13

      if (logicalChannelConfig_r13Present) {
         buffer.getContext().eventDispatcher.startElement("logicalChannelConfig_r13", -1);

         logicalChannelConfig_r13 = new LogicalChannelConfig_NB_r13();
         logicalChannelConfig_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("logicalChannelConfig_r13", -1);
      }
      else {
         logicalChannelConfig_r13 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean rlc_Config_v1430Present = buffer.decodeBit ("rlc_Config_v1430Present");

            // decode rlc_Config_v1430

            if (rlc_Config_v1430Present) {
               buffer.getContext().eventDispatcher.startElement("rlc_Config_v1430", -1);

               rlc_Config_v1430 = new RLC_Config_NB_v1430();
               rlc_Config_v1430.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("rlc_Config_v1430", -1);
            }
            else {
               rlc_Config_v1430 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (eps_BearerIdentity_r13 != null) eps_BearerIdentity_r13.print (_sb, "eps_BearerIdentity_r13", _level+1);
      if (drb_Identity_r13 != null) drb_Identity_r13.print (_sb, "drb_Identity_r13", _level+1);
      if (pdcp_Config_r13 != null) pdcp_Config_r13.print (_sb, "pdcp_Config_r13", _level+1);
      if (rlc_Config_r13 != null) rlc_Config_r13.print (_sb, "rlc_Config_r13", _level+1);
      if (logicalChannelIdentity_r13 != null) logicalChannelIdentity_r13.print (_sb, "logicalChannelIdentity_r13", _level+1);
      if (logicalChannelConfig_r13 != null) logicalChannelConfig_r13.print (_sb, "logicalChannelConfig_r13", _level+1);
      if (rlc_Config_v1430 != null) rlc_Config_v1430.print (_sb, "rlc_Config_v1430", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
