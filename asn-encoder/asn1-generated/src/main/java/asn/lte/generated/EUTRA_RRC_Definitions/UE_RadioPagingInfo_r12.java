/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class UE_RadioPagingInfo_r12 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "UE-RadioPagingInfo-r12";
   }

   public Asn1Integer ue_Category_v1250;  // optional
   public boolean mV2ExtPresent;
   public UE_RadioPagingInfo_r12_ue_CategoryDL_v1310 ue_CategoryDL_v1310 = null;  // optional
   public UE_RadioPagingInfo_r12_ce_ModeA_r13 ce_ModeA_r13 = null;  // optional
   public UE_RadioPagingInfo_r12_ce_ModeB_r13 ce_ModeB_r13 = null;  // optional
   public boolean mV3ExtPresent;
   public UE_RadioPagingInfo_r12_wakeUpSignal_r15 wakeUpSignal_r15 = null;  // optional
   public UE_RadioPagingInfo_r12_wakeUpSignal_TDD_r15 wakeUpSignal_TDD_r15 = null;  // optional
   public UE_RadioPagingInfo_r12_wakeUpSignalMinGap_eDRX_r15 wakeUpSignalMinGap_eDRX_r15 = null;  // optional
   public UE_RadioPagingInfo_r12_wakeUpSignalMinGap_eDRX_TDD_r15 wakeUpSignalMinGap_eDRX_TDD_r15 = null;  // optional
   public Asn1OpenExt extElem1;

   public UE_RadioPagingInfo_r12 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public UE_RadioPagingInfo_r12 (
      Asn1Integer ue_Category_v1250_,
      UE_RadioPagingInfo_r12_ue_CategoryDL_v1310 ue_CategoryDL_v1310_,
      UE_RadioPagingInfo_r12_ce_ModeA_r13 ce_ModeA_r13_,
      UE_RadioPagingInfo_r12_ce_ModeB_r13 ce_ModeB_r13_,
      UE_RadioPagingInfo_r12_wakeUpSignal_r15 wakeUpSignal_r15_,
      UE_RadioPagingInfo_r12_wakeUpSignal_TDD_r15 wakeUpSignal_TDD_r15_,
      UE_RadioPagingInfo_r12_wakeUpSignalMinGap_eDRX_r15 wakeUpSignalMinGap_eDRX_r15_,
      UE_RadioPagingInfo_r12_wakeUpSignalMinGap_eDRX_TDD_r15 wakeUpSignalMinGap_eDRX_TDD_r15_
   ) {
      super();
      ue_Category_v1250 = ue_Category_v1250_;
      ue_CategoryDL_v1310 = ue_CategoryDL_v1310_;
      ce_ModeA_r13 = ce_ModeA_r13_;
      ce_ModeB_r13 = ce_ModeB_r13_;
      wakeUpSignal_r15 = wakeUpSignal_r15_;
      wakeUpSignal_TDD_r15 = wakeUpSignal_TDD_r15_;
      wakeUpSignalMinGap_eDRX_r15 = wakeUpSignalMinGap_eDRX_r15_;
      wakeUpSignalMinGap_eDRX_TDD_r15 = wakeUpSignalMinGap_eDRX_TDD_r15_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public UE_RadioPagingInfo_r12 (long ue_Category_v1250_,
      UE_RadioPagingInfo_r12_ue_CategoryDL_v1310 ue_CategoryDL_v1310_,
      UE_RadioPagingInfo_r12_ce_ModeA_r13 ce_ModeA_r13_,
      UE_RadioPagingInfo_r12_ce_ModeB_r13 ce_ModeB_r13_,
      UE_RadioPagingInfo_r12_wakeUpSignal_r15 wakeUpSignal_r15_,
      UE_RadioPagingInfo_r12_wakeUpSignal_TDD_r15 wakeUpSignal_TDD_r15_,
      UE_RadioPagingInfo_r12_wakeUpSignalMinGap_eDRX_r15 wakeUpSignalMinGap_eDRX_r15_,
      UE_RadioPagingInfo_r12_wakeUpSignalMinGap_eDRX_TDD_r15 wakeUpSignalMinGap_eDRX_TDD_r15_
   ) {
      super();
      ue_Category_v1250 = new Asn1Integer (ue_Category_v1250_);
      ue_CategoryDL_v1310 = ue_CategoryDL_v1310_;
      ce_ModeA_r13 = ce_ModeA_r13_;
      ce_ModeB_r13 = ce_ModeB_r13_;
      wakeUpSignal_r15 = wakeUpSignal_r15_;
      wakeUpSignal_TDD_r15 = wakeUpSignal_TDD_r15_;
      wakeUpSignalMinGap_eDRX_r15 = wakeUpSignalMinGap_eDRX_r15_;
      wakeUpSignalMinGap_eDRX_TDD_r15 = wakeUpSignalMinGap_eDRX_TDD_r15_;
   }

   public void init () {
      ue_Category_v1250 = null;
      ue_CategoryDL_v1310 = null;
      ce_ModeA_r13 = null;
      ce_ModeB_r13 = null;
      wakeUpSignal_r15 = null;
      wakeUpSignal_TDD_r15 = null;
      wakeUpSignalMinGap_eDRX_r15 = null;
      wakeUpSignalMinGap_eDRX_TDD_r15 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 9; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return ue_Category_v1250;
         case 1: return ue_CategoryDL_v1310;
         case 2: return ce_ModeA_r13;
         case 3: return ce_ModeB_r13;
         case 4: return wakeUpSignal_r15;
         case 5: return wakeUpSignal_TDD_r15;
         case 6: return wakeUpSignalMinGap_eDRX_r15;
         case 7: return wakeUpSignalMinGap_eDRX_TDD_r15;
         case 8: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "ue-Category-v1250";
         case 1: return "ue-CategoryDL-v1310";
         case 2: return "ce-ModeA-r13";
         case 3: return "ce-ModeB-r13";
         case 4: return "wakeUpSignal-r15";
         case 5: return "wakeUpSignal-TDD-r15";
         case 6: return "wakeUpSignalMinGap-eDRX-r15";
         case 7: return "wakeUpSignalMinGap-eDRX-TDD-r15";
         case 8: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean ue_Category_v1250Present = buffer.decodeBit ("ue_Category_v1250Present");

      // decode ue_Category_v1250

      if (ue_Category_v1250Present) {
         buffer.getContext().eventDispatcher.startElement("ue_Category_v1250", -1);

         ue_Category_v1250 = new Asn1Integer();
         ue_Category_v1250.decode (buffer, 0, 0);

         buffer.invokeCharacters(ue_Category_v1250.toString());
         buffer.getContext().eventDispatcher.endElement("ue_Category_v1250", -1);
      }
      else {
         ue_Category_v1250 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean ue_CategoryDL_v1310Present = buffer.decodeBit ("ue_CategoryDL_v1310Present");

            boolean ce_ModeA_r13Present = buffer.decodeBit ("ce_ModeA_r13Present");

            boolean ce_ModeB_r13Present = buffer.decodeBit ("ce_ModeB_r13Present");

            // decode ue_CategoryDL_v1310

            if (ue_CategoryDL_v1310Present) {
               buffer.getContext().eventDispatcher.startElement("ue_CategoryDL_v1310", -1);

               int tval = UE_RadioPagingInfo_r12_ue_CategoryDL_v1310.decodeEnumValue (buffer);
               ue_CategoryDL_v1310 = UE_RadioPagingInfo_r12_ue_CategoryDL_v1310.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("ue_CategoryDL_v1310", -1);
            }
            else {
               ue_CategoryDL_v1310 = null;
            }

            // decode ce_ModeA_r13

            if (ce_ModeA_r13Present) {
               buffer.getContext().eventDispatcher.startElement("ce_ModeA_r13", -1);

               int tval = UE_RadioPagingInfo_r12_ce_ModeA_r13.decodeEnumValue (buffer);
               ce_ModeA_r13 = UE_RadioPagingInfo_r12_ce_ModeA_r13.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("ce_ModeA_r13", -1);
            }
            else {
               ce_ModeA_r13 = null;
            }

            // decode ce_ModeB_r13

            if (ce_ModeB_r13Present) {
               buffer.getContext().eventDispatcher.startElement("ce_ModeB_r13", -1);

               int tval = UE_RadioPagingInfo_r12_ce_ModeB_r13.decodeEnumValue (buffer);
               ce_ModeB_r13 = UE_RadioPagingInfo_r12_ce_ModeB_r13.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("ce_ModeB_r13", -1);
            }
            else {
               ce_ModeB_r13 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean wakeUpSignal_r15Present = buffer.decodeBit ("wakeUpSignal_r15Present");

            boolean wakeUpSignal_TDD_r15Present = buffer.decodeBit ("wakeUpSignal_TDD_r15Present");

            boolean wakeUpSignalMinGap_eDRX_r15Present = buffer.decodeBit ("wakeUpSignalMinGap_eDRX_r15Present");

            boolean wakeUpSignalMinGap_eDRX_TDD_r15Present = buffer.decodeBit ("wakeUpSignalMinGap_eDRX_TDD_r15Present");

            // decode wakeUpSignal_r15

            if (wakeUpSignal_r15Present) {
               buffer.getContext().eventDispatcher.startElement("wakeUpSignal_r15", -1);

               int tval = UE_RadioPagingInfo_r12_wakeUpSignal_r15.decodeEnumValue (buffer);
               wakeUpSignal_r15 = UE_RadioPagingInfo_r12_wakeUpSignal_r15.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("wakeUpSignal_r15", -1);
            }
            else {
               wakeUpSignal_r15 = null;
            }

            // decode wakeUpSignal_TDD_r15

            if (wakeUpSignal_TDD_r15Present) {
               buffer.getContext().eventDispatcher.startElement("wakeUpSignal_TDD_r15", -1);

               int tval = UE_RadioPagingInfo_r12_wakeUpSignal_TDD_r15.decodeEnumValue (buffer);
               wakeUpSignal_TDD_r15 = UE_RadioPagingInfo_r12_wakeUpSignal_TDD_r15.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("wakeUpSignal_TDD_r15", -1);
            }
            else {
               wakeUpSignal_TDD_r15 = null;
            }

            // decode wakeUpSignalMinGap_eDRX_r15

            if (wakeUpSignalMinGap_eDRX_r15Present) {
               buffer.getContext().eventDispatcher.startElement("wakeUpSignalMinGap_eDRX_r15", -1);

               int tval = UE_RadioPagingInfo_r12_wakeUpSignalMinGap_eDRX_r15.decodeEnumValue (buffer);
               wakeUpSignalMinGap_eDRX_r15 = UE_RadioPagingInfo_r12_wakeUpSignalMinGap_eDRX_r15.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("wakeUpSignalMinGap_eDRX_r15", -1);
            }
            else {
               wakeUpSignalMinGap_eDRX_r15 = null;
            }

            // decode wakeUpSignalMinGap_eDRX_TDD_r15

            if (wakeUpSignalMinGap_eDRX_TDD_r15Present) {
               buffer.getContext().eventDispatcher.startElement("wakeUpSignalMinGap_eDRX_TDD_r15", -1);

               int tval = UE_RadioPagingInfo_r12_wakeUpSignalMinGap_eDRX_TDD_r15.decodeEnumValue (buffer);
               wakeUpSignalMinGap_eDRX_TDD_r15 = UE_RadioPagingInfo_r12_wakeUpSignalMinGap_eDRX_TDD_r15.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("wakeUpSignalMinGap_eDRX_TDD_r15", -1);
            }
            else {
               wakeUpSignalMinGap_eDRX_TDD_r15 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (ue_Category_v1250 != null) ue_Category_v1250.print (_sb, "ue_Category_v1250", _level+1);
      if (ue_CategoryDL_v1310 != null) ue_CategoryDL_v1310.print (_sb, "ue_CategoryDL_v1310", _level+1);
      if (ce_ModeA_r13 != null) ce_ModeA_r13.print (_sb, "ce_ModeA_r13", _level+1);
      if (ce_ModeB_r13 != null) ce_ModeB_r13.print (_sb, "ce_ModeB_r13", _level+1);
      if (wakeUpSignal_r15 != null) wakeUpSignal_r15.print (_sb, "wakeUpSignal_r15", _level+1);
      if (wakeUpSignal_TDD_r15 != null) wakeUpSignal_TDD_r15.print (_sb, "wakeUpSignal_TDD_r15", _level+1);
      if (wakeUpSignalMinGap_eDRX_r15 != null) wakeUpSignalMinGap_eDRX_r15.print (_sb, "wakeUpSignalMinGap_eDRX_r15", _level+1);
      if (wakeUpSignalMinGap_eDRX_TDD_r15 != null) wakeUpSignalMinGap_eDRX_TDD_r15.print (_sb, "wakeUpSignalMinGap_eDRX_TDD_r15", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
