/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SoundingRS_UL_ConfigCommon_setup extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public SoundingRS_UL_ConfigCommon_setup_srs_BandwidthConfig srs_BandwidthConfig = null;
   public SoundingRS_UL_ConfigCommon_setup_srs_SubframeConfig srs_SubframeConfig = null;
   public Asn1Boolean ackNackSRS_SimultaneousTransmission;
   public SoundingRS_UL_ConfigCommon_setup_srs_MaxUpPts srs_MaxUpPts = null;  // optional

   public SoundingRS_UL_ConfigCommon_setup () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SoundingRS_UL_ConfigCommon_setup (
      SoundingRS_UL_ConfigCommon_setup_srs_BandwidthConfig srs_BandwidthConfig_,
      SoundingRS_UL_ConfigCommon_setup_srs_SubframeConfig srs_SubframeConfig_,
      Asn1Boolean ackNackSRS_SimultaneousTransmission_,
      SoundingRS_UL_ConfigCommon_setup_srs_MaxUpPts srs_MaxUpPts_
   ) {
      super();
      srs_BandwidthConfig = srs_BandwidthConfig_;
      srs_SubframeConfig = srs_SubframeConfig_;
      ackNackSRS_SimultaneousTransmission = ackNackSRS_SimultaneousTransmission_;
      srs_MaxUpPts = srs_MaxUpPts_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SoundingRS_UL_ConfigCommon_setup (
      SoundingRS_UL_ConfigCommon_setup_srs_BandwidthConfig srs_BandwidthConfig_,
      SoundingRS_UL_ConfigCommon_setup_srs_SubframeConfig srs_SubframeConfig_,
      Asn1Boolean ackNackSRS_SimultaneousTransmission_
   ) {
      super();
      srs_BandwidthConfig = srs_BandwidthConfig_;
      srs_SubframeConfig = srs_SubframeConfig_;
      ackNackSRS_SimultaneousTransmission = ackNackSRS_SimultaneousTransmission_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SoundingRS_UL_ConfigCommon_setup (SoundingRS_UL_ConfigCommon_setup_srs_BandwidthConfig srs_BandwidthConfig_,
      SoundingRS_UL_ConfigCommon_setup_srs_SubframeConfig srs_SubframeConfig_,
      boolean ackNackSRS_SimultaneousTransmission_,
      SoundingRS_UL_ConfigCommon_setup_srs_MaxUpPts srs_MaxUpPts_
   ) {
      super();
      srs_BandwidthConfig = srs_BandwidthConfig_;
      srs_SubframeConfig = srs_SubframeConfig_;
      ackNackSRS_SimultaneousTransmission = new Asn1Boolean (ackNackSRS_SimultaneousTransmission_);
      srs_MaxUpPts = srs_MaxUpPts_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public SoundingRS_UL_ConfigCommon_setup (
      SoundingRS_UL_ConfigCommon_setup_srs_BandwidthConfig srs_BandwidthConfig_,
      SoundingRS_UL_ConfigCommon_setup_srs_SubframeConfig srs_SubframeConfig_,
      boolean ackNackSRS_SimultaneousTransmission_
   ) {
      super();
      srs_BandwidthConfig = srs_BandwidthConfig_;
      srs_SubframeConfig = srs_SubframeConfig_;
      ackNackSRS_SimultaneousTransmission = new Asn1Boolean (ackNackSRS_SimultaneousTransmission_);
   }

   public void init () {
      srs_BandwidthConfig = null;
      srs_SubframeConfig = null;
      ackNackSRS_SimultaneousTransmission = null;
      srs_MaxUpPts = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return srs_BandwidthConfig;
         case 1: return srs_SubframeConfig;
         case 2: return ackNackSRS_SimultaneousTransmission;
         case 3: return srs_MaxUpPts;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "srs-BandwidthConfig";
         case 1: return "srs-SubframeConfig";
         case 2: return "ackNackSRS-SimultaneousTransmission";
         case 3: return "srs-MaxUpPts";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean srs_MaxUpPtsPresent = buffer.decodeBit ("srs_MaxUpPtsPresent");

      // decode srs_BandwidthConfig

      buffer.getContext().eventDispatcher.startElement("srs_BandwidthConfig", -1);

      {
         int tval = SoundingRS_UL_ConfigCommon_setup_srs_BandwidthConfig.decodeEnumValue (buffer);
         srs_BandwidthConfig = SoundingRS_UL_ConfigCommon_setup_srs_BandwidthConfig.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("srs_BandwidthConfig", -1);

      // decode srs_SubframeConfig

      buffer.getContext().eventDispatcher.startElement("srs_SubframeConfig", -1);

      {
         int tval = SoundingRS_UL_ConfigCommon_setup_srs_SubframeConfig.decodeEnumValue (buffer);
         srs_SubframeConfig = SoundingRS_UL_ConfigCommon_setup_srs_SubframeConfig.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("srs_SubframeConfig", -1);

      // decode ackNackSRS_SimultaneousTransmission

      buffer.getContext().eventDispatcher.startElement("ackNackSRS_SimultaneousTransmission", -1);

      ackNackSRS_SimultaneousTransmission = new Asn1Boolean();
      ackNackSRS_SimultaneousTransmission.decode (buffer);

      buffer.invokeCharacters(ackNackSRS_SimultaneousTransmission.toString());
      buffer.getContext().eventDispatcher.endElement("ackNackSRS_SimultaneousTransmission", -1);

      // decode srs_MaxUpPts

      if (srs_MaxUpPtsPresent) {
         buffer.getContext().eventDispatcher.startElement("srs_MaxUpPts", -1);

         int tval = SoundingRS_UL_ConfigCommon_setup_srs_MaxUpPts.decodeEnumValue (buffer);
         srs_MaxUpPts = SoundingRS_UL_ConfigCommon_setup_srs_MaxUpPts.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("srs_MaxUpPts", -1);
      }
      else {
         srs_MaxUpPts = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (srs_BandwidthConfig != null) srs_BandwidthConfig.print (_sb, "srs_BandwidthConfig", _level+1);
      if (srs_SubframeConfig != null) srs_SubframeConfig.print (_sb, "srs_SubframeConfig", _level+1);
      if (ackNackSRS_SimultaneousTransmission != null) ackNackSRS_SimultaneousTransmission.print (_sb, "ackNackSRS_SimultaneousTransmission", _level+1);
      if (srs_MaxUpPts != null) srs_MaxUpPts.print (_sb, "srs_MaxUpPts", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
