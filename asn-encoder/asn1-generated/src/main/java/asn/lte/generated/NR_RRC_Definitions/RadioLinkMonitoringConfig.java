/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class RadioLinkMonitoringConfig extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "RadioLinkMonitoringConfig";
   }

   public RadioLinkMonitoringConfig_failureDetectionResourcesToAddModList failureDetectionResourcesToAddModList;  // optional
   public RadioLinkMonitoringConfig_failureDetectionResourcesToReleaseList failureDetectionResourcesToReleaseList;  // optional
   public RadioLinkMonitoringConfig_beamFailureInstanceMaxCount beamFailureInstanceMaxCount = null;  // optional
   public RadioLinkMonitoringConfig_beamFailureDetectionTimer beamFailureDetectionTimer = null;  // optional
   public Asn1OpenExt extElem1;

   public RadioLinkMonitoringConfig () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public RadioLinkMonitoringConfig (
      RadioLinkMonitoringConfig_failureDetectionResourcesToAddModList failureDetectionResourcesToAddModList_,
      RadioLinkMonitoringConfig_failureDetectionResourcesToReleaseList failureDetectionResourcesToReleaseList_,
      RadioLinkMonitoringConfig_beamFailureInstanceMaxCount beamFailureInstanceMaxCount_,
      RadioLinkMonitoringConfig_beamFailureDetectionTimer beamFailureDetectionTimer_
   ) {
      super();
      failureDetectionResourcesToAddModList = failureDetectionResourcesToAddModList_;
      failureDetectionResourcesToReleaseList = failureDetectionResourcesToReleaseList_;
      beamFailureInstanceMaxCount = beamFailureInstanceMaxCount_;
      beamFailureDetectionTimer = beamFailureDetectionTimer_;
   }

   public void init () {
      failureDetectionResourcesToAddModList = null;
      failureDetectionResourcesToReleaseList = null;
      beamFailureInstanceMaxCount = null;
      beamFailureDetectionTimer = null;
      extElem1 = null;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return failureDetectionResourcesToAddModList;
         case 1: return failureDetectionResourcesToReleaseList;
         case 2: return beamFailureInstanceMaxCount;
         case 3: return beamFailureDetectionTimer;
         case 4: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "failureDetectionResourcesToAddModList";
         case 1: return "failureDetectionResourcesToReleaseList";
         case 2: return "beamFailureInstanceMaxCount";
         case 3: return "beamFailureDetectionTimer";
         case 4: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean failureDetectionResourcesToAddModListPresent = buffer.decodeBit ("failureDetectionResourcesToAddModListPresent");
      boolean failureDetectionResourcesToReleaseListPresent = buffer.decodeBit ("failureDetectionResourcesToReleaseListPresent");
      boolean beamFailureInstanceMaxCountPresent = buffer.decodeBit ("beamFailureInstanceMaxCountPresent");
      boolean beamFailureDetectionTimerPresent = buffer.decodeBit ("beamFailureDetectionTimerPresent");

      // decode failureDetectionResourcesToAddModList

      if (failureDetectionResourcesToAddModListPresent) {
         buffer.getContext().eventDispatcher.startElement("failureDetectionResourcesToAddModList", -1);

         failureDetectionResourcesToAddModList = new RadioLinkMonitoringConfig_failureDetectionResourcesToAddModList();
         failureDetectionResourcesToAddModList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("failureDetectionResourcesToAddModList", -1);
      }
      else {
         failureDetectionResourcesToAddModList = null;
      }

      // decode failureDetectionResourcesToReleaseList

      if (failureDetectionResourcesToReleaseListPresent) {
         buffer.getContext().eventDispatcher.startElement("failureDetectionResourcesToReleaseList", -1);

         failureDetectionResourcesToReleaseList = new RadioLinkMonitoringConfig_failureDetectionResourcesToReleaseList();
         failureDetectionResourcesToReleaseList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("failureDetectionResourcesToReleaseList", -1);
      }
      else {
         failureDetectionResourcesToReleaseList = null;
      }

      // decode beamFailureInstanceMaxCount

      if (beamFailureInstanceMaxCountPresent) {
         buffer.getContext().eventDispatcher.startElement("beamFailureInstanceMaxCount", -1);

         int tval = RadioLinkMonitoringConfig_beamFailureInstanceMaxCount.decodeEnumValue (buffer);
         beamFailureInstanceMaxCount = RadioLinkMonitoringConfig_beamFailureInstanceMaxCount.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("beamFailureInstanceMaxCount", -1);
      }
      else {
         beamFailureInstanceMaxCount = null;
      }

      // decode beamFailureDetectionTimer

      if (beamFailureDetectionTimerPresent) {
         buffer.getContext().eventDispatcher.startElement("beamFailureDetectionTimer", -1);

         int tval = RadioLinkMonitoringConfig_beamFailureDetectionTimer.decodeEnumValue (buffer);
         beamFailureDetectionTimer = RadioLinkMonitoringConfig_beamFailureDetectionTimer.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("beamFailureDetectionTimer", -1);
      }
      else {
         beamFailureDetectionTimer = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (failureDetectionResourcesToAddModList != null) failureDetectionResourcesToAddModList.print (_sb, "failureDetectionResourcesToAddModList", _level+1);
      if (failureDetectionResourcesToReleaseList != null) failureDetectionResourcesToReleaseList.print (_sb, "failureDetectionResourcesToReleaseList", _level+1);
      if (beamFailureInstanceMaxCount != null) beamFailureInstanceMaxCount.print (_sb, "beamFailureInstanceMaxCount", _level+1);
      if (beamFailureDetectionTimer != null) beamFailureDetectionTimer.print (_sb, "beamFailureDetectionTimer", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
