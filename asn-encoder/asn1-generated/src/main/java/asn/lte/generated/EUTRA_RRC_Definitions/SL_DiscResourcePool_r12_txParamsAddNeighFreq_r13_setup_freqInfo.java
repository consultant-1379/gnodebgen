/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SL_DiscResourcePool_r12_txParamsAddNeighFreq_r13_setup_freqInfo extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public ARFCN_ValueEUTRA ul_CarrierFreq;  // optional
   public SL_DiscResourcePool_r12_txParamsAddNeighFreq_r13_setup_freqInfo_ul_Bandwidth ul_Bandwidth = null;  // optional
   public AdditionalSpectrumEmission additionalSpectrumEmission;

   public SL_DiscResourcePool_r12_txParamsAddNeighFreq_r13_setup_freqInfo () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SL_DiscResourcePool_r12_txParamsAddNeighFreq_r13_setup_freqInfo (
      ARFCN_ValueEUTRA ul_CarrierFreq_,
      SL_DiscResourcePool_r12_txParamsAddNeighFreq_r13_setup_freqInfo_ul_Bandwidth ul_Bandwidth_,
      AdditionalSpectrumEmission additionalSpectrumEmission_
   ) {
      super();
      ul_CarrierFreq = ul_CarrierFreq_;
      ul_Bandwidth = ul_Bandwidth_;
      additionalSpectrumEmission = additionalSpectrumEmission_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SL_DiscResourcePool_r12_txParamsAddNeighFreq_r13_setup_freqInfo (
      AdditionalSpectrumEmission additionalSpectrumEmission_
   ) {
      super();
      additionalSpectrumEmission = additionalSpectrumEmission_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SL_DiscResourcePool_r12_txParamsAddNeighFreq_r13_setup_freqInfo (long ul_CarrierFreq_,
      SL_DiscResourcePool_r12_txParamsAddNeighFreq_r13_setup_freqInfo_ul_Bandwidth ul_Bandwidth_,
      long additionalSpectrumEmission_
   ) {
      super();
      ul_CarrierFreq = new ARFCN_ValueEUTRA (ul_CarrierFreq_);
      ul_Bandwidth = ul_Bandwidth_;
      additionalSpectrumEmission = new AdditionalSpectrumEmission (additionalSpectrumEmission_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public SL_DiscResourcePool_r12_txParamsAddNeighFreq_r13_setup_freqInfo (
      long additionalSpectrumEmission_
   ) {
      super();
      additionalSpectrumEmission = new AdditionalSpectrumEmission (additionalSpectrumEmission_);
   }

   public void init () {
      ul_CarrierFreq = null;
      ul_Bandwidth = null;
      additionalSpectrumEmission = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return ul_CarrierFreq;
         case 1: return ul_Bandwidth;
         case 2: return additionalSpectrumEmission;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "ul-CarrierFreq";
         case 1: return "ul-Bandwidth";
         case 2: return "additionalSpectrumEmission";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean ul_CarrierFreqPresent = buffer.decodeBit ("ul_CarrierFreqPresent");
      boolean ul_BandwidthPresent = buffer.decodeBit ("ul_BandwidthPresent");

      // decode ul_CarrierFreq

      if (ul_CarrierFreqPresent) {
         buffer.getContext().eventDispatcher.startElement("ul_CarrierFreq", -1);

         ul_CarrierFreq = new ARFCN_ValueEUTRA();
         ul_CarrierFreq.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ul_CarrierFreq", -1);
      }
      else {
         ul_CarrierFreq = null;
      }

      // decode ul_Bandwidth

      if (ul_BandwidthPresent) {
         buffer.getContext().eventDispatcher.startElement("ul_Bandwidth", -1);

         int tval = SL_DiscResourcePool_r12_txParamsAddNeighFreq_r13_setup_freqInfo_ul_Bandwidth.decodeEnumValue (buffer);
         ul_Bandwidth = SL_DiscResourcePool_r12_txParamsAddNeighFreq_r13_setup_freqInfo_ul_Bandwidth.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("ul_Bandwidth", -1);
      }
      else {
         ul_Bandwidth = null;
      }

      // decode additionalSpectrumEmission

      buffer.getContext().eventDispatcher.startElement("additionalSpectrumEmission", -1);

      additionalSpectrumEmission = new AdditionalSpectrumEmission();
      additionalSpectrumEmission.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("additionalSpectrumEmission", -1);

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (ul_CarrierFreq != null) ul_CarrierFreq.print (_sb, "ul_CarrierFreq", _level+1);
      if (ul_Bandwidth != null) ul_Bandwidth.print (_sb, "ul_Bandwidth", _level+1);
      if (additionalSpectrumEmission != null) additionalSpectrumEmission.print (_sb, "additionalSpectrumEmission", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
