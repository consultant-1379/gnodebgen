/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class RRCConnectionResumeComplete_r13_IEs extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "RRCConnectionResumeComplete-r13-IEs";
   }

   public Asn1Integer selectedPLMN_Identity_r13;  // optional
   public DedicatedInfoNAS dedicatedInfoNAS_r13;  // optional
   public RRCConnectionResumeComplete_r13_IEs_rlf_InfoAvailable_r13 rlf_InfoAvailable_r13 = null;  // optional
   public RRCConnectionResumeComplete_r13_IEs_logMeasAvailable_r13 logMeasAvailable_r13 = null;  // optional
   public RRCConnectionResumeComplete_r13_IEs_connEstFailInfoAvailable_r13 connEstFailInfoAvailable_r13 = null;  // optional
   public RRCConnectionResumeComplete_r13_IEs_mobilityState_r13 mobilityState_r13 = null;  // optional
   public RRCConnectionResumeComplete_r13_IEs_mobilityHistoryAvail_r13 mobilityHistoryAvail_r13 = null;  // optional
   public RRCConnectionResumeComplete_r13_IEs_logMeasAvailableMBSFN_r13 logMeasAvailableMBSFN_r13 = null;  // optional
   public Asn1OctetString lateNonCriticalExtension;  // optional
   public RRCConnectionResumeComplete_v1530_IEs nonCriticalExtension;  // optional

   public RRCConnectionResumeComplete_r13_IEs () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public RRCConnectionResumeComplete_r13_IEs (
      Asn1Integer selectedPLMN_Identity_r13_,
      DedicatedInfoNAS dedicatedInfoNAS_r13_,
      RRCConnectionResumeComplete_r13_IEs_rlf_InfoAvailable_r13 rlf_InfoAvailable_r13_,
      RRCConnectionResumeComplete_r13_IEs_logMeasAvailable_r13 logMeasAvailable_r13_,
      RRCConnectionResumeComplete_r13_IEs_connEstFailInfoAvailable_r13 connEstFailInfoAvailable_r13_,
      RRCConnectionResumeComplete_r13_IEs_mobilityState_r13 mobilityState_r13_,
      RRCConnectionResumeComplete_r13_IEs_mobilityHistoryAvail_r13 mobilityHistoryAvail_r13_,
      RRCConnectionResumeComplete_r13_IEs_logMeasAvailableMBSFN_r13 logMeasAvailableMBSFN_r13_,
      Asn1OctetString lateNonCriticalExtension_,
      RRCConnectionResumeComplete_v1530_IEs nonCriticalExtension_
   ) {
      super();
      selectedPLMN_Identity_r13 = selectedPLMN_Identity_r13_;
      dedicatedInfoNAS_r13 = dedicatedInfoNAS_r13_;
      rlf_InfoAvailable_r13 = rlf_InfoAvailable_r13_;
      logMeasAvailable_r13 = logMeasAvailable_r13_;
      connEstFailInfoAvailable_r13 = connEstFailInfoAvailable_r13_;
      mobilityState_r13 = mobilityState_r13_;
      mobilityHistoryAvail_r13 = mobilityHistoryAvail_r13_;
      logMeasAvailableMBSFN_r13 = logMeasAvailableMBSFN_r13_;
      lateNonCriticalExtension = lateNonCriticalExtension_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public RRCConnectionResumeComplete_r13_IEs (long selectedPLMN_Identity_r13_,
      byte[] dedicatedInfoNAS_r13_,
      RRCConnectionResumeComplete_r13_IEs_rlf_InfoAvailable_r13 rlf_InfoAvailable_r13_,
      RRCConnectionResumeComplete_r13_IEs_logMeasAvailable_r13 logMeasAvailable_r13_,
      RRCConnectionResumeComplete_r13_IEs_connEstFailInfoAvailable_r13 connEstFailInfoAvailable_r13_,
      RRCConnectionResumeComplete_r13_IEs_mobilityState_r13 mobilityState_r13_,
      RRCConnectionResumeComplete_r13_IEs_mobilityHistoryAvail_r13 mobilityHistoryAvail_r13_,
      RRCConnectionResumeComplete_r13_IEs_logMeasAvailableMBSFN_r13 logMeasAvailableMBSFN_r13_,
      byte[] lateNonCriticalExtension_,
      RRCConnectionResumeComplete_v1530_IEs nonCriticalExtension_
   ) {
      super();
      selectedPLMN_Identity_r13 = new Asn1Integer (selectedPLMN_Identity_r13_);
      dedicatedInfoNAS_r13 = new DedicatedInfoNAS (dedicatedInfoNAS_r13_);
      rlf_InfoAvailable_r13 = rlf_InfoAvailable_r13_;
      logMeasAvailable_r13 = logMeasAvailable_r13_;
      connEstFailInfoAvailable_r13 = connEstFailInfoAvailable_r13_;
      mobilityState_r13 = mobilityState_r13_;
      mobilityHistoryAvail_r13 = mobilityHistoryAvail_r13_;
      logMeasAvailableMBSFN_r13 = logMeasAvailableMBSFN_r13_;
      lateNonCriticalExtension = new Asn1OctetString (lateNonCriticalExtension_);
      nonCriticalExtension = nonCriticalExtension_;
   }

   public void init () {
      selectedPLMN_Identity_r13 = null;
      dedicatedInfoNAS_r13 = null;
      rlf_InfoAvailable_r13 = null;
      logMeasAvailable_r13 = null;
      connEstFailInfoAvailable_r13 = null;
      mobilityState_r13 = null;
      mobilityHistoryAvail_r13 = null;
      logMeasAvailableMBSFN_r13 = null;
      lateNonCriticalExtension = null;
      nonCriticalExtension = null;
   }

   public int getElementCount() { return 10; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return selectedPLMN_Identity_r13;
         case 1: return dedicatedInfoNAS_r13;
         case 2: return rlf_InfoAvailable_r13;
         case 3: return logMeasAvailable_r13;
         case 4: return connEstFailInfoAvailable_r13;
         case 5: return mobilityState_r13;
         case 6: return mobilityHistoryAvail_r13;
         case 7: return logMeasAvailableMBSFN_r13;
         case 8: return lateNonCriticalExtension;
         case 9: return nonCriticalExtension;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "selectedPLMN-Identity-r13";
         case 1: return "dedicatedInfoNAS-r13";
         case 2: return "rlf-InfoAvailable-r13";
         case 3: return "logMeasAvailable-r13";
         case 4: return "connEstFailInfoAvailable-r13";
         case 5: return "mobilityState-r13";
         case 6: return "mobilityHistoryAvail-r13";
         case 7: return "logMeasAvailableMBSFN-r13";
         case 8: return "lateNonCriticalExtension";
         case 9: return "nonCriticalExtension";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean selectedPLMN_Identity_r13Present = buffer.decodeBit ("selectedPLMN_Identity_r13Present");
      boolean dedicatedInfoNAS_r13Present = buffer.decodeBit ("dedicatedInfoNAS_r13Present");
      boolean rlf_InfoAvailable_r13Present = buffer.decodeBit ("rlf_InfoAvailable_r13Present");
      boolean logMeasAvailable_r13Present = buffer.decodeBit ("logMeasAvailable_r13Present");
      boolean connEstFailInfoAvailable_r13Present = buffer.decodeBit ("connEstFailInfoAvailable_r13Present");
      boolean mobilityState_r13Present = buffer.decodeBit ("mobilityState_r13Present");
      boolean mobilityHistoryAvail_r13Present = buffer.decodeBit ("mobilityHistoryAvail_r13Present");
      boolean logMeasAvailableMBSFN_r13Present = buffer.decodeBit ("logMeasAvailableMBSFN_r13Present");
      boolean lateNonCriticalExtensionPresent = buffer.decodeBit ("lateNonCriticalExtensionPresent");
      boolean nonCriticalExtensionPresent = buffer.decodeBit ("nonCriticalExtensionPresent");

      // decode selectedPLMN_Identity_r13

      if (selectedPLMN_Identity_r13Present) {
         buffer.getContext().eventDispatcher.startElement("selectedPLMN_Identity_r13", -1);

         selectedPLMN_Identity_r13 = new Asn1Integer();
         selectedPLMN_Identity_r13.decode (buffer, 1, 6);

         buffer.invokeCharacters(selectedPLMN_Identity_r13.toString());
         buffer.getContext().eventDispatcher.endElement("selectedPLMN_Identity_r13", -1);
      }
      else {
         selectedPLMN_Identity_r13 = null;
      }

      // decode dedicatedInfoNAS_r13

      if (dedicatedInfoNAS_r13Present) {
         buffer.getContext().eventDispatcher.startElement("dedicatedInfoNAS_r13", -1);

         dedicatedInfoNAS_r13 = new DedicatedInfoNAS();
         dedicatedInfoNAS_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("dedicatedInfoNAS_r13", -1);
      }
      else {
         dedicatedInfoNAS_r13 = null;
      }

      // decode rlf_InfoAvailable_r13

      if (rlf_InfoAvailable_r13Present) {
         buffer.getContext().eventDispatcher.startElement("rlf_InfoAvailable_r13", -1);

         int tval = RRCConnectionResumeComplete_r13_IEs_rlf_InfoAvailable_r13.decodeEnumValue (buffer);
         rlf_InfoAvailable_r13 = RRCConnectionResumeComplete_r13_IEs_rlf_InfoAvailable_r13.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("rlf_InfoAvailable_r13", -1);
      }
      else {
         rlf_InfoAvailable_r13 = null;
      }

      // decode logMeasAvailable_r13

      if (logMeasAvailable_r13Present) {
         buffer.getContext().eventDispatcher.startElement("logMeasAvailable_r13", -1);

         int tval = RRCConnectionResumeComplete_r13_IEs_logMeasAvailable_r13.decodeEnumValue (buffer);
         logMeasAvailable_r13 = RRCConnectionResumeComplete_r13_IEs_logMeasAvailable_r13.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("logMeasAvailable_r13", -1);
      }
      else {
         logMeasAvailable_r13 = null;
      }

      // decode connEstFailInfoAvailable_r13

      if (connEstFailInfoAvailable_r13Present) {
         buffer.getContext().eventDispatcher.startElement("connEstFailInfoAvailable_r13", -1);

         int tval = RRCConnectionResumeComplete_r13_IEs_connEstFailInfoAvailable_r13.decodeEnumValue (buffer);
         connEstFailInfoAvailable_r13 = RRCConnectionResumeComplete_r13_IEs_connEstFailInfoAvailable_r13.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("connEstFailInfoAvailable_r13", -1);
      }
      else {
         connEstFailInfoAvailable_r13 = null;
      }

      // decode mobilityState_r13

      if (mobilityState_r13Present) {
         buffer.getContext().eventDispatcher.startElement("mobilityState_r13", -1);

         int tval = RRCConnectionResumeComplete_r13_IEs_mobilityState_r13.decodeEnumValue (buffer);
         mobilityState_r13 = RRCConnectionResumeComplete_r13_IEs_mobilityState_r13.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("mobilityState_r13", -1);
      }
      else {
         mobilityState_r13 = null;
      }

      // decode mobilityHistoryAvail_r13

      if (mobilityHistoryAvail_r13Present) {
         buffer.getContext().eventDispatcher.startElement("mobilityHistoryAvail_r13", -1);

         int tval = RRCConnectionResumeComplete_r13_IEs_mobilityHistoryAvail_r13.decodeEnumValue (buffer);
         mobilityHistoryAvail_r13 = RRCConnectionResumeComplete_r13_IEs_mobilityHistoryAvail_r13.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("mobilityHistoryAvail_r13", -1);
      }
      else {
         mobilityHistoryAvail_r13 = null;
      }

      // decode logMeasAvailableMBSFN_r13

      if (logMeasAvailableMBSFN_r13Present) {
         buffer.getContext().eventDispatcher.startElement("logMeasAvailableMBSFN_r13", -1);

         int tval = RRCConnectionResumeComplete_r13_IEs_logMeasAvailableMBSFN_r13.decodeEnumValue (buffer);
         logMeasAvailableMBSFN_r13 = RRCConnectionResumeComplete_r13_IEs_logMeasAvailableMBSFN_r13.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("logMeasAvailableMBSFN_r13", -1);
      }
      else {
         logMeasAvailableMBSFN_r13 = null;
      }

      // decode lateNonCriticalExtension

      if (lateNonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("lateNonCriticalExtension", -1);

         lateNonCriticalExtension = new Asn1OctetString();
         lateNonCriticalExtension.decode (buffer);

         buffer.invokeCharacters(lateNonCriticalExtension.toString());
         buffer.getContext().eventDispatcher.endElement("lateNonCriticalExtension", -1);
      }
      else {
         lateNonCriticalExtension = null;
      }

      // decode nonCriticalExtension

      if (nonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension = new RRCConnectionResumeComplete_v1530_IEs();
         nonCriticalExtension.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }
      else {
         nonCriticalExtension = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (selectedPLMN_Identity_r13 != null) selectedPLMN_Identity_r13.print (_sb, "selectedPLMN_Identity_r13", _level+1);
      if (dedicatedInfoNAS_r13 != null) dedicatedInfoNAS_r13.print (_sb, "dedicatedInfoNAS_r13", _level+1);
      if (rlf_InfoAvailable_r13 != null) rlf_InfoAvailable_r13.print (_sb, "rlf_InfoAvailable_r13", _level+1);
      if (logMeasAvailable_r13 != null) logMeasAvailable_r13.print (_sb, "logMeasAvailable_r13", _level+1);
      if (connEstFailInfoAvailable_r13 != null) connEstFailInfoAvailable_r13.print (_sb, "connEstFailInfoAvailable_r13", _level+1);
      if (mobilityState_r13 != null) mobilityState_r13.print (_sb, "mobilityState_r13", _level+1);
      if (mobilityHistoryAvail_r13 != null) mobilityHistoryAvail_r13.print (_sb, "mobilityHistoryAvail_r13", _level+1);
      if (logMeasAvailableMBSFN_r13 != null) logMeasAvailableMBSFN_r13.print (_sb, "logMeasAvailableMBSFN_r13", _level+1);
      if (lateNonCriticalExtension != null) lateNonCriticalExtension.print (_sb, "lateNonCriticalExtension", _level+1);
      if (nonCriticalExtension != null) nonCriticalExtension.print (_sb, "nonCriticalExtension", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
