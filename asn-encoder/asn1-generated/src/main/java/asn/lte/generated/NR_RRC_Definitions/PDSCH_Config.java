/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class PDSCH_Config extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "PDSCH-Config";
   }

   public Asn1Integer dataScramblingIdentityPDSCH;  // optional
   public PDSCH_Config_dmrs_DownlinkForPDSCH_MappingTypeA dmrs_DownlinkForPDSCH_MappingTypeA;  // optional
   public PDSCH_Config_dmrs_DownlinkForPDSCH_MappingTypeB dmrs_DownlinkForPDSCH_MappingTypeB;  // optional
   public PDSCH_Config_tci_StatesToAddModList tci_StatesToAddModList;  // optional
   public PDSCH_Config_tci_StatesToReleaseList tci_StatesToReleaseList;  // optional
   public PDSCH_Config_vrb_ToPRB_Interleaver vrb_ToPRB_Interleaver = null;  // optional
   public PDSCH_Config_resourceAllocation resourceAllocation = null;
   public PDSCH_Config_pdsch_TimeDomainAllocationList pdsch_TimeDomainAllocationList;  // optional
   public PDSCH_Config_pdsch_AggregationFactor pdsch_AggregationFactor = null;  // optional
   public PDSCH_Config_rateMatchPatternToAddModList rateMatchPatternToAddModList;  // optional
   public PDSCH_Config_rateMatchPatternToReleaseList rateMatchPatternToReleaseList;  // optional
   public RateMatchPatternGroup rateMatchPatternGroup1;  // optional
   public RateMatchPatternGroup rateMatchPatternGroup2;  // optional
   public PDSCH_Config_rbg_Size rbg_Size = null;
   public PDSCH_Config_mcs_Table mcs_Table = null;  // optional
   public PDSCH_Config_maxNrofCodeWordsScheduledByDCI maxNrofCodeWordsScheduledByDCI = null;  // optional
   public PDSCH_Config_prb_BundlingType prb_BundlingType;
   public PDSCH_Config_zp_CSI_RS_ResourceToAddModList zp_CSI_RS_ResourceToAddModList;  // optional
   public PDSCH_Config_zp_CSI_RS_ResourceToReleaseList zp_CSI_RS_ResourceToReleaseList;  // optional
   public PDSCH_Config_aperiodic_ZP_CSI_RS_ResourceSetsToAddModList aperiodic_ZP_CSI_RS_ResourceSetsToAddModList;  // optional
   public PDSCH_Config_aperiodic_ZP_CSI_RS_ResourceSetsToReleaseList aperiodic_ZP_CSI_RS_ResourceSetsToReleaseList;  // optional
   public PDSCH_Config_sp_ZP_CSI_RS_ResourceSetsToAddModList sp_ZP_CSI_RS_ResourceSetsToAddModList;  // optional
   public PDSCH_Config_sp_ZP_CSI_RS_ResourceSetsToReleaseList sp_ZP_CSI_RS_ResourceSetsToReleaseList;  // optional
   public PDSCH_Config_p_ZP_CSI_RS_ResourceSet p_ZP_CSI_RS_ResourceSet;  // optional
   public boolean mV2ExtPresent;
   public PDSCH_Config_maxMIMO_Layers_r16 maxMIMO_Layers_r16;  // optional
   public PDSCH_Config_minimumSchedulingOffsetK0_r16 minimumSchedulingOffsetK0_r16;  // optional
   public PDSCH_Config_antennaPortsFieldPresenceDCI_1_2_r16 antennaPortsFieldPresenceDCI_1_2_r16 = null;  // optional
   public PDSCH_Config_aperiodicZP_CSI_RS_ResourceSetsToAddModListDCI_1_2_r16 aperiodicZP_CSI_RS_ResourceSetsToAddModListDCI_1_2_r16;  // optional
   public PDSCH_Config_aperiodicZP_CSI_RS_ResourceSetsToReleaseListDCI_1_2_r16 aperiodicZP_CSI_RS_ResourceSetsToReleaseListDCI_1_2_r16;  // optional
   public PDSCH_Config_dmrs_DownlinkForPDSCH_MappingTypeA_DCI_1_2_r16 dmrs_DownlinkForPDSCH_MappingTypeA_DCI_1_2_r16;  // optional
   public PDSCH_Config_dmrs_DownlinkForPDSCH_MappingTypeB_DCI_1_2_r16 dmrs_DownlinkForPDSCH_MappingTypeB_DCI_1_2_r16;  // optional
   public PDSCH_Config_dmrs_SequenceInitializationDCI_1_2_r16 dmrs_SequenceInitializationDCI_1_2_r16 = null;  // optional
   public Asn1Integer harq_ProcessNumberSizeDCI_1_2_r16;  // optional
   public PDSCH_Config_mcs_TableDCI_1_2_r16 mcs_TableDCI_1_2_r16 = null;  // optional
   public Asn1Integer numberOfBitsForRV_DCI_1_2_r16;  // optional
   public PDSCH_Config_pdsch_TimeDomainAllocationListDCI_1_2_r16 pdsch_TimeDomainAllocationListDCI_1_2_r16;  // optional
   public PDSCH_Config_prb_BundlingTypeDCI_1_2_r16 prb_BundlingTypeDCI_1_2_r16;  // optional
   public PDSCH_Config_priorityIndicatorDCI_1_2_r16 priorityIndicatorDCI_1_2_r16 = null;  // optional
   public RateMatchPatternGroup rateMatchPatternGroup1DCI_1_2_r16;  // optional
   public RateMatchPatternGroup rateMatchPatternGroup2DCI_1_2_r16;  // optional
   public PDSCH_Config_resourceAllocationType1GranularityDCI_1_2_r16 resourceAllocationType1GranularityDCI_1_2_r16 = null;  // optional
   public PDSCH_Config_vrb_ToPRB_InterleaverDCI_1_2_r16 vrb_ToPRB_InterleaverDCI_1_2_r16 = null;  // optional
   public PDSCH_Config_referenceOfSLIVDCI_1_2_r16 referenceOfSLIVDCI_1_2_r16 = null;  // optional
   public PDSCH_Config_resourceAllocationDCI_1_2_r16 resourceAllocationDCI_1_2_r16 = null;  // optional
   public PDSCH_Config_priorityIndicatorDCI_1_1_r16 priorityIndicatorDCI_1_1_r16 = null;  // optional
   public Asn1Integer dataScramblingIdentityPDSCH2_r16;  // optional
   public PDSCH_Config_pdsch_TimeDomainAllocationList_r16 pdsch_TimeDomainAllocationList_r16;  // optional
   public PDSCH_Config_repetitionSchemeConfig_r16 repetitionSchemeConfig_r16;  // optional
   public boolean mV3ExtPresent;
   public PDSCH_Config_repetitionSchemeConfig_v1630 repetitionSchemeConfig_v1630;  // optional
   public Asn1OpenExt extElem1;

   public PDSCH_Config () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public PDSCH_Config (
      Asn1Integer dataScramblingIdentityPDSCH_,
      PDSCH_Config_dmrs_DownlinkForPDSCH_MappingTypeA dmrs_DownlinkForPDSCH_MappingTypeA_,
      PDSCH_Config_dmrs_DownlinkForPDSCH_MappingTypeB dmrs_DownlinkForPDSCH_MappingTypeB_,
      PDSCH_Config_tci_StatesToAddModList tci_StatesToAddModList_,
      PDSCH_Config_tci_StatesToReleaseList tci_StatesToReleaseList_,
      PDSCH_Config_vrb_ToPRB_Interleaver vrb_ToPRB_Interleaver_,
      PDSCH_Config_resourceAllocation resourceAllocation_,
      PDSCH_Config_pdsch_TimeDomainAllocationList pdsch_TimeDomainAllocationList_,
      PDSCH_Config_pdsch_AggregationFactor pdsch_AggregationFactor_,
      PDSCH_Config_rateMatchPatternToAddModList rateMatchPatternToAddModList_,
      PDSCH_Config_rateMatchPatternToReleaseList rateMatchPatternToReleaseList_,
      RateMatchPatternGroup rateMatchPatternGroup1_,
      RateMatchPatternGroup rateMatchPatternGroup2_,
      PDSCH_Config_rbg_Size rbg_Size_,
      PDSCH_Config_mcs_Table mcs_Table_,
      PDSCH_Config_maxNrofCodeWordsScheduledByDCI maxNrofCodeWordsScheduledByDCI_,
      PDSCH_Config_prb_BundlingType prb_BundlingType_,
      PDSCH_Config_zp_CSI_RS_ResourceToAddModList zp_CSI_RS_ResourceToAddModList_,
      PDSCH_Config_zp_CSI_RS_ResourceToReleaseList zp_CSI_RS_ResourceToReleaseList_,
      PDSCH_Config_aperiodic_ZP_CSI_RS_ResourceSetsToAddModList aperiodic_ZP_CSI_RS_ResourceSetsToAddModList_,
      PDSCH_Config_aperiodic_ZP_CSI_RS_ResourceSetsToReleaseList aperiodic_ZP_CSI_RS_ResourceSetsToReleaseList_,
      PDSCH_Config_sp_ZP_CSI_RS_ResourceSetsToAddModList sp_ZP_CSI_RS_ResourceSetsToAddModList_,
      PDSCH_Config_sp_ZP_CSI_RS_ResourceSetsToReleaseList sp_ZP_CSI_RS_ResourceSetsToReleaseList_,
      PDSCH_Config_p_ZP_CSI_RS_ResourceSet p_ZP_CSI_RS_ResourceSet_,
      PDSCH_Config_maxMIMO_Layers_r16 maxMIMO_Layers_r16_,
      PDSCH_Config_minimumSchedulingOffsetK0_r16 minimumSchedulingOffsetK0_r16_,
      PDSCH_Config_antennaPortsFieldPresenceDCI_1_2_r16 antennaPortsFieldPresenceDCI_1_2_r16_,
      PDSCH_Config_aperiodicZP_CSI_RS_ResourceSetsToAddModListDCI_1_2_r16 aperiodicZP_CSI_RS_ResourceSetsToAddModListDCI_1_2_r16_,
      PDSCH_Config_aperiodicZP_CSI_RS_ResourceSetsToReleaseListDCI_1_2_r16 aperiodicZP_CSI_RS_ResourceSetsToReleaseListDCI_1_2_r16_,
      PDSCH_Config_dmrs_DownlinkForPDSCH_MappingTypeA_DCI_1_2_r16 dmrs_DownlinkForPDSCH_MappingTypeA_DCI_1_2_r16_,
      PDSCH_Config_dmrs_DownlinkForPDSCH_MappingTypeB_DCI_1_2_r16 dmrs_DownlinkForPDSCH_MappingTypeB_DCI_1_2_r16_,
      PDSCH_Config_dmrs_SequenceInitializationDCI_1_2_r16 dmrs_SequenceInitializationDCI_1_2_r16_,
      Asn1Integer harq_ProcessNumberSizeDCI_1_2_r16_,
      PDSCH_Config_mcs_TableDCI_1_2_r16 mcs_TableDCI_1_2_r16_,
      Asn1Integer numberOfBitsForRV_DCI_1_2_r16_,
      PDSCH_Config_pdsch_TimeDomainAllocationListDCI_1_2_r16 pdsch_TimeDomainAllocationListDCI_1_2_r16_,
      PDSCH_Config_prb_BundlingTypeDCI_1_2_r16 prb_BundlingTypeDCI_1_2_r16_,
      PDSCH_Config_priorityIndicatorDCI_1_2_r16 priorityIndicatorDCI_1_2_r16_,
      RateMatchPatternGroup rateMatchPatternGroup1DCI_1_2_r16_,
      RateMatchPatternGroup rateMatchPatternGroup2DCI_1_2_r16_,
      PDSCH_Config_resourceAllocationType1GranularityDCI_1_2_r16 resourceAllocationType1GranularityDCI_1_2_r16_,
      PDSCH_Config_vrb_ToPRB_InterleaverDCI_1_2_r16 vrb_ToPRB_InterleaverDCI_1_2_r16_,
      PDSCH_Config_referenceOfSLIVDCI_1_2_r16 referenceOfSLIVDCI_1_2_r16_,
      PDSCH_Config_resourceAllocationDCI_1_2_r16 resourceAllocationDCI_1_2_r16_,
      PDSCH_Config_priorityIndicatorDCI_1_1_r16 priorityIndicatorDCI_1_1_r16_,
      Asn1Integer dataScramblingIdentityPDSCH2_r16_,
      PDSCH_Config_pdsch_TimeDomainAllocationList_r16 pdsch_TimeDomainAllocationList_r16_,
      PDSCH_Config_repetitionSchemeConfig_r16 repetitionSchemeConfig_r16_,
      PDSCH_Config_repetitionSchemeConfig_v1630 repetitionSchemeConfig_v1630_
   ) {
      super();
      dataScramblingIdentityPDSCH = dataScramblingIdentityPDSCH_;
      dmrs_DownlinkForPDSCH_MappingTypeA = dmrs_DownlinkForPDSCH_MappingTypeA_;
      dmrs_DownlinkForPDSCH_MappingTypeB = dmrs_DownlinkForPDSCH_MappingTypeB_;
      tci_StatesToAddModList = tci_StatesToAddModList_;
      tci_StatesToReleaseList = tci_StatesToReleaseList_;
      vrb_ToPRB_Interleaver = vrb_ToPRB_Interleaver_;
      resourceAllocation = resourceAllocation_;
      pdsch_TimeDomainAllocationList = pdsch_TimeDomainAllocationList_;
      pdsch_AggregationFactor = pdsch_AggregationFactor_;
      rateMatchPatternToAddModList = rateMatchPatternToAddModList_;
      rateMatchPatternToReleaseList = rateMatchPatternToReleaseList_;
      rateMatchPatternGroup1 = rateMatchPatternGroup1_;
      rateMatchPatternGroup2 = rateMatchPatternGroup2_;
      rbg_Size = rbg_Size_;
      mcs_Table = mcs_Table_;
      maxNrofCodeWordsScheduledByDCI = maxNrofCodeWordsScheduledByDCI_;
      prb_BundlingType = prb_BundlingType_;
      zp_CSI_RS_ResourceToAddModList = zp_CSI_RS_ResourceToAddModList_;
      zp_CSI_RS_ResourceToReleaseList = zp_CSI_RS_ResourceToReleaseList_;
      aperiodic_ZP_CSI_RS_ResourceSetsToAddModList = aperiodic_ZP_CSI_RS_ResourceSetsToAddModList_;
      aperiodic_ZP_CSI_RS_ResourceSetsToReleaseList = aperiodic_ZP_CSI_RS_ResourceSetsToReleaseList_;
      sp_ZP_CSI_RS_ResourceSetsToAddModList = sp_ZP_CSI_RS_ResourceSetsToAddModList_;
      sp_ZP_CSI_RS_ResourceSetsToReleaseList = sp_ZP_CSI_RS_ResourceSetsToReleaseList_;
      p_ZP_CSI_RS_ResourceSet = p_ZP_CSI_RS_ResourceSet_;
      maxMIMO_Layers_r16 = maxMIMO_Layers_r16_;
      minimumSchedulingOffsetK0_r16 = minimumSchedulingOffsetK0_r16_;
      antennaPortsFieldPresenceDCI_1_2_r16 = antennaPortsFieldPresenceDCI_1_2_r16_;
      aperiodicZP_CSI_RS_ResourceSetsToAddModListDCI_1_2_r16 = aperiodicZP_CSI_RS_ResourceSetsToAddModListDCI_1_2_r16_;
      aperiodicZP_CSI_RS_ResourceSetsToReleaseListDCI_1_2_r16 = aperiodicZP_CSI_RS_ResourceSetsToReleaseListDCI_1_2_r16_;
      dmrs_DownlinkForPDSCH_MappingTypeA_DCI_1_2_r16 = dmrs_DownlinkForPDSCH_MappingTypeA_DCI_1_2_r16_;
      dmrs_DownlinkForPDSCH_MappingTypeB_DCI_1_2_r16 = dmrs_DownlinkForPDSCH_MappingTypeB_DCI_1_2_r16_;
      dmrs_SequenceInitializationDCI_1_2_r16 = dmrs_SequenceInitializationDCI_1_2_r16_;
      harq_ProcessNumberSizeDCI_1_2_r16 = harq_ProcessNumberSizeDCI_1_2_r16_;
      mcs_TableDCI_1_2_r16 = mcs_TableDCI_1_2_r16_;
      numberOfBitsForRV_DCI_1_2_r16 = numberOfBitsForRV_DCI_1_2_r16_;
      pdsch_TimeDomainAllocationListDCI_1_2_r16 = pdsch_TimeDomainAllocationListDCI_1_2_r16_;
      prb_BundlingTypeDCI_1_2_r16 = prb_BundlingTypeDCI_1_2_r16_;
      priorityIndicatorDCI_1_2_r16 = priorityIndicatorDCI_1_2_r16_;
      rateMatchPatternGroup1DCI_1_2_r16 = rateMatchPatternGroup1DCI_1_2_r16_;
      rateMatchPatternGroup2DCI_1_2_r16 = rateMatchPatternGroup2DCI_1_2_r16_;
      resourceAllocationType1GranularityDCI_1_2_r16 = resourceAllocationType1GranularityDCI_1_2_r16_;
      vrb_ToPRB_InterleaverDCI_1_2_r16 = vrb_ToPRB_InterleaverDCI_1_2_r16_;
      referenceOfSLIVDCI_1_2_r16 = referenceOfSLIVDCI_1_2_r16_;
      resourceAllocationDCI_1_2_r16 = resourceAllocationDCI_1_2_r16_;
      priorityIndicatorDCI_1_1_r16 = priorityIndicatorDCI_1_1_r16_;
      dataScramblingIdentityPDSCH2_r16 = dataScramblingIdentityPDSCH2_r16_;
      pdsch_TimeDomainAllocationList_r16 = pdsch_TimeDomainAllocationList_r16_;
      repetitionSchemeConfig_r16 = repetitionSchemeConfig_r16_;
      repetitionSchemeConfig_v1630 = repetitionSchemeConfig_v1630_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public PDSCH_Config (
      PDSCH_Config_resourceAllocation resourceAllocation_,
      PDSCH_Config_rbg_Size rbg_Size_,
      PDSCH_Config_prb_BundlingType prb_BundlingType_
   ) {
      super();
      resourceAllocation = resourceAllocation_;
      rbg_Size = rbg_Size_;
      prb_BundlingType = prb_BundlingType_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public PDSCH_Config (long dataScramblingIdentityPDSCH_,
      PDSCH_Config_dmrs_DownlinkForPDSCH_MappingTypeA dmrs_DownlinkForPDSCH_MappingTypeA_,
      PDSCH_Config_dmrs_DownlinkForPDSCH_MappingTypeB dmrs_DownlinkForPDSCH_MappingTypeB_,
      PDSCH_Config_tci_StatesToAddModList tci_StatesToAddModList_,
      PDSCH_Config_tci_StatesToReleaseList tci_StatesToReleaseList_,
      PDSCH_Config_vrb_ToPRB_Interleaver vrb_ToPRB_Interleaver_,
      PDSCH_Config_resourceAllocation resourceAllocation_,
      PDSCH_Config_pdsch_TimeDomainAllocationList pdsch_TimeDomainAllocationList_,
      PDSCH_Config_pdsch_AggregationFactor pdsch_AggregationFactor_,
      PDSCH_Config_rateMatchPatternToAddModList rateMatchPatternToAddModList_,
      PDSCH_Config_rateMatchPatternToReleaseList rateMatchPatternToReleaseList_,
      RateMatchPatternGroup rateMatchPatternGroup1_,
      RateMatchPatternGroup rateMatchPatternGroup2_,
      PDSCH_Config_rbg_Size rbg_Size_,
      PDSCH_Config_mcs_Table mcs_Table_,
      PDSCH_Config_maxNrofCodeWordsScheduledByDCI maxNrofCodeWordsScheduledByDCI_,
      PDSCH_Config_prb_BundlingType prb_BundlingType_,
      PDSCH_Config_zp_CSI_RS_ResourceToAddModList zp_CSI_RS_ResourceToAddModList_,
      PDSCH_Config_zp_CSI_RS_ResourceToReleaseList zp_CSI_RS_ResourceToReleaseList_,
      PDSCH_Config_aperiodic_ZP_CSI_RS_ResourceSetsToAddModList aperiodic_ZP_CSI_RS_ResourceSetsToAddModList_,
      PDSCH_Config_aperiodic_ZP_CSI_RS_ResourceSetsToReleaseList aperiodic_ZP_CSI_RS_ResourceSetsToReleaseList_,
      PDSCH_Config_sp_ZP_CSI_RS_ResourceSetsToAddModList sp_ZP_CSI_RS_ResourceSetsToAddModList_,
      PDSCH_Config_sp_ZP_CSI_RS_ResourceSetsToReleaseList sp_ZP_CSI_RS_ResourceSetsToReleaseList_,
      PDSCH_Config_p_ZP_CSI_RS_ResourceSet p_ZP_CSI_RS_ResourceSet_,
      PDSCH_Config_maxMIMO_Layers_r16 maxMIMO_Layers_r16_,
      PDSCH_Config_minimumSchedulingOffsetK0_r16 minimumSchedulingOffsetK0_r16_,
      PDSCH_Config_antennaPortsFieldPresenceDCI_1_2_r16 antennaPortsFieldPresenceDCI_1_2_r16_,
      PDSCH_Config_aperiodicZP_CSI_RS_ResourceSetsToAddModListDCI_1_2_r16 aperiodicZP_CSI_RS_ResourceSetsToAddModListDCI_1_2_r16_,
      PDSCH_Config_aperiodicZP_CSI_RS_ResourceSetsToReleaseListDCI_1_2_r16 aperiodicZP_CSI_RS_ResourceSetsToReleaseListDCI_1_2_r16_,
      PDSCH_Config_dmrs_DownlinkForPDSCH_MappingTypeA_DCI_1_2_r16 dmrs_DownlinkForPDSCH_MappingTypeA_DCI_1_2_r16_,
      PDSCH_Config_dmrs_DownlinkForPDSCH_MappingTypeB_DCI_1_2_r16 dmrs_DownlinkForPDSCH_MappingTypeB_DCI_1_2_r16_,
      PDSCH_Config_dmrs_SequenceInitializationDCI_1_2_r16 dmrs_SequenceInitializationDCI_1_2_r16_,
      long harq_ProcessNumberSizeDCI_1_2_r16_,
      PDSCH_Config_mcs_TableDCI_1_2_r16 mcs_TableDCI_1_2_r16_,
      long numberOfBitsForRV_DCI_1_2_r16_,
      PDSCH_Config_pdsch_TimeDomainAllocationListDCI_1_2_r16 pdsch_TimeDomainAllocationListDCI_1_2_r16_,
      PDSCH_Config_prb_BundlingTypeDCI_1_2_r16 prb_BundlingTypeDCI_1_2_r16_,
      PDSCH_Config_priorityIndicatorDCI_1_2_r16 priorityIndicatorDCI_1_2_r16_,
      RateMatchPatternGroup rateMatchPatternGroup1DCI_1_2_r16_,
      RateMatchPatternGroup rateMatchPatternGroup2DCI_1_2_r16_,
      PDSCH_Config_resourceAllocationType1GranularityDCI_1_2_r16 resourceAllocationType1GranularityDCI_1_2_r16_,
      PDSCH_Config_vrb_ToPRB_InterleaverDCI_1_2_r16 vrb_ToPRB_InterleaverDCI_1_2_r16_,
      PDSCH_Config_referenceOfSLIVDCI_1_2_r16 referenceOfSLIVDCI_1_2_r16_,
      PDSCH_Config_resourceAllocationDCI_1_2_r16 resourceAllocationDCI_1_2_r16_,
      PDSCH_Config_priorityIndicatorDCI_1_1_r16 priorityIndicatorDCI_1_1_r16_,
      long dataScramblingIdentityPDSCH2_r16_,
      PDSCH_Config_pdsch_TimeDomainAllocationList_r16 pdsch_TimeDomainAllocationList_r16_,
      PDSCH_Config_repetitionSchemeConfig_r16 repetitionSchemeConfig_r16_,
      PDSCH_Config_repetitionSchemeConfig_v1630 repetitionSchemeConfig_v1630_
   ) {
      super();
      dataScramblingIdentityPDSCH = new Asn1Integer (dataScramblingIdentityPDSCH_);
      dmrs_DownlinkForPDSCH_MappingTypeA = dmrs_DownlinkForPDSCH_MappingTypeA_;
      dmrs_DownlinkForPDSCH_MappingTypeB = dmrs_DownlinkForPDSCH_MappingTypeB_;
      tci_StatesToAddModList = tci_StatesToAddModList_;
      tci_StatesToReleaseList = tci_StatesToReleaseList_;
      vrb_ToPRB_Interleaver = vrb_ToPRB_Interleaver_;
      resourceAllocation = resourceAllocation_;
      pdsch_TimeDomainAllocationList = pdsch_TimeDomainAllocationList_;
      pdsch_AggregationFactor = pdsch_AggregationFactor_;
      rateMatchPatternToAddModList = rateMatchPatternToAddModList_;
      rateMatchPatternToReleaseList = rateMatchPatternToReleaseList_;
      rateMatchPatternGroup1 = rateMatchPatternGroup1_;
      rateMatchPatternGroup2 = rateMatchPatternGroup2_;
      rbg_Size = rbg_Size_;
      mcs_Table = mcs_Table_;
      maxNrofCodeWordsScheduledByDCI = maxNrofCodeWordsScheduledByDCI_;
      prb_BundlingType = prb_BundlingType_;
      zp_CSI_RS_ResourceToAddModList = zp_CSI_RS_ResourceToAddModList_;
      zp_CSI_RS_ResourceToReleaseList = zp_CSI_RS_ResourceToReleaseList_;
      aperiodic_ZP_CSI_RS_ResourceSetsToAddModList = aperiodic_ZP_CSI_RS_ResourceSetsToAddModList_;
      aperiodic_ZP_CSI_RS_ResourceSetsToReleaseList = aperiodic_ZP_CSI_RS_ResourceSetsToReleaseList_;
      sp_ZP_CSI_RS_ResourceSetsToAddModList = sp_ZP_CSI_RS_ResourceSetsToAddModList_;
      sp_ZP_CSI_RS_ResourceSetsToReleaseList = sp_ZP_CSI_RS_ResourceSetsToReleaseList_;
      p_ZP_CSI_RS_ResourceSet = p_ZP_CSI_RS_ResourceSet_;
      maxMIMO_Layers_r16 = maxMIMO_Layers_r16_;
      minimumSchedulingOffsetK0_r16 = minimumSchedulingOffsetK0_r16_;
      antennaPortsFieldPresenceDCI_1_2_r16 = antennaPortsFieldPresenceDCI_1_2_r16_;
      aperiodicZP_CSI_RS_ResourceSetsToAddModListDCI_1_2_r16 = aperiodicZP_CSI_RS_ResourceSetsToAddModListDCI_1_2_r16_;
      aperiodicZP_CSI_RS_ResourceSetsToReleaseListDCI_1_2_r16 = aperiodicZP_CSI_RS_ResourceSetsToReleaseListDCI_1_2_r16_;
      dmrs_DownlinkForPDSCH_MappingTypeA_DCI_1_2_r16 = dmrs_DownlinkForPDSCH_MappingTypeA_DCI_1_2_r16_;
      dmrs_DownlinkForPDSCH_MappingTypeB_DCI_1_2_r16 = dmrs_DownlinkForPDSCH_MappingTypeB_DCI_1_2_r16_;
      dmrs_SequenceInitializationDCI_1_2_r16 = dmrs_SequenceInitializationDCI_1_2_r16_;
      harq_ProcessNumberSizeDCI_1_2_r16 = new Asn1Integer (harq_ProcessNumberSizeDCI_1_2_r16_);
      mcs_TableDCI_1_2_r16 = mcs_TableDCI_1_2_r16_;
      numberOfBitsForRV_DCI_1_2_r16 = new Asn1Integer (numberOfBitsForRV_DCI_1_2_r16_);
      pdsch_TimeDomainAllocationListDCI_1_2_r16 = pdsch_TimeDomainAllocationListDCI_1_2_r16_;
      prb_BundlingTypeDCI_1_2_r16 = prb_BundlingTypeDCI_1_2_r16_;
      priorityIndicatorDCI_1_2_r16 = priorityIndicatorDCI_1_2_r16_;
      rateMatchPatternGroup1DCI_1_2_r16 = rateMatchPatternGroup1DCI_1_2_r16_;
      rateMatchPatternGroup2DCI_1_2_r16 = rateMatchPatternGroup2DCI_1_2_r16_;
      resourceAllocationType1GranularityDCI_1_2_r16 = resourceAllocationType1GranularityDCI_1_2_r16_;
      vrb_ToPRB_InterleaverDCI_1_2_r16 = vrb_ToPRB_InterleaverDCI_1_2_r16_;
      referenceOfSLIVDCI_1_2_r16 = referenceOfSLIVDCI_1_2_r16_;
      resourceAllocationDCI_1_2_r16 = resourceAllocationDCI_1_2_r16_;
      priorityIndicatorDCI_1_1_r16 = priorityIndicatorDCI_1_1_r16_;
      dataScramblingIdentityPDSCH2_r16 = new Asn1Integer (dataScramblingIdentityPDSCH2_r16_);
      pdsch_TimeDomainAllocationList_r16 = pdsch_TimeDomainAllocationList_r16_;
      repetitionSchemeConfig_r16 = repetitionSchemeConfig_r16_;
      repetitionSchemeConfig_v1630 = repetitionSchemeConfig_v1630_;
   }

   public void init () {
      dataScramblingIdentityPDSCH = null;
      dmrs_DownlinkForPDSCH_MappingTypeA = null;
      dmrs_DownlinkForPDSCH_MappingTypeB = null;
      tci_StatesToAddModList = null;
      tci_StatesToReleaseList = null;
      vrb_ToPRB_Interleaver = null;
      resourceAllocation = null;
      pdsch_TimeDomainAllocationList = null;
      pdsch_AggregationFactor = null;
      rateMatchPatternToAddModList = null;
      rateMatchPatternToReleaseList = null;
      rateMatchPatternGroup1 = null;
      rateMatchPatternGroup2 = null;
      rbg_Size = null;
      mcs_Table = null;
      maxNrofCodeWordsScheduledByDCI = null;
      prb_BundlingType = null;
      zp_CSI_RS_ResourceToAddModList = null;
      zp_CSI_RS_ResourceToReleaseList = null;
      aperiodic_ZP_CSI_RS_ResourceSetsToAddModList = null;
      aperiodic_ZP_CSI_RS_ResourceSetsToReleaseList = null;
      sp_ZP_CSI_RS_ResourceSetsToAddModList = null;
      sp_ZP_CSI_RS_ResourceSetsToReleaseList = null;
      p_ZP_CSI_RS_ResourceSet = null;
      maxMIMO_Layers_r16 = null;
      minimumSchedulingOffsetK0_r16 = null;
      antennaPortsFieldPresenceDCI_1_2_r16 = null;
      aperiodicZP_CSI_RS_ResourceSetsToAddModListDCI_1_2_r16 = null;
      aperiodicZP_CSI_RS_ResourceSetsToReleaseListDCI_1_2_r16 = null;
      dmrs_DownlinkForPDSCH_MappingTypeA_DCI_1_2_r16 = null;
      dmrs_DownlinkForPDSCH_MappingTypeB_DCI_1_2_r16 = null;
      dmrs_SequenceInitializationDCI_1_2_r16 = null;
      harq_ProcessNumberSizeDCI_1_2_r16 = null;
      mcs_TableDCI_1_2_r16 = null;
      numberOfBitsForRV_DCI_1_2_r16 = null;
      pdsch_TimeDomainAllocationListDCI_1_2_r16 = null;
      prb_BundlingTypeDCI_1_2_r16 = null;
      priorityIndicatorDCI_1_2_r16 = null;
      rateMatchPatternGroup1DCI_1_2_r16 = null;
      rateMatchPatternGroup2DCI_1_2_r16 = null;
      resourceAllocationType1GranularityDCI_1_2_r16 = null;
      vrb_ToPRB_InterleaverDCI_1_2_r16 = null;
      referenceOfSLIVDCI_1_2_r16 = null;
      resourceAllocationDCI_1_2_r16 = null;
      priorityIndicatorDCI_1_1_r16 = null;
      dataScramblingIdentityPDSCH2_r16 = null;
      pdsch_TimeDomainAllocationList_r16 = null;
      repetitionSchemeConfig_r16 = null;
      repetitionSchemeConfig_v1630 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 50; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return dataScramblingIdentityPDSCH;
         case 1: return dmrs_DownlinkForPDSCH_MappingTypeA;
         case 2: return dmrs_DownlinkForPDSCH_MappingTypeB;
         case 3: return tci_StatesToAddModList;
         case 4: return tci_StatesToReleaseList;
         case 5: return vrb_ToPRB_Interleaver;
         case 6: return resourceAllocation;
         case 7: return pdsch_TimeDomainAllocationList;
         case 8: return pdsch_AggregationFactor;
         case 9: return rateMatchPatternToAddModList;
         case 10: return rateMatchPatternToReleaseList;
         case 11: return rateMatchPatternGroup1;
         case 12: return rateMatchPatternGroup2;
         case 13: return rbg_Size;
         case 14: return mcs_Table;
         case 15: return maxNrofCodeWordsScheduledByDCI;
         case 16: return prb_BundlingType;
         case 17: return zp_CSI_RS_ResourceToAddModList;
         case 18: return zp_CSI_RS_ResourceToReleaseList;
         case 19: return aperiodic_ZP_CSI_RS_ResourceSetsToAddModList;
         case 20: return aperiodic_ZP_CSI_RS_ResourceSetsToReleaseList;
         case 21: return sp_ZP_CSI_RS_ResourceSetsToAddModList;
         case 22: return sp_ZP_CSI_RS_ResourceSetsToReleaseList;
         case 23: return p_ZP_CSI_RS_ResourceSet;
         case 24: return maxMIMO_Layers_r16;
         case 25: return minimumSchedulingOffsetK0_r16;
         case 26: return antennaPortsFieldPresenceDCI_1_2_r16;
         case 27: return aperiodicZP_CSI_RS_ResourceSetsToAddModListDCI_1_2_r16;
         case 28: return aperiodicZP_CSI_RS_ResourceSetsToReleaseListDCI_1_2_r16;
         case 29: return dmrs_DownlinkForPDSCH_MappingTypeA_DCI_1_2_r16;
         case 30: return dmrs_DownlinkForPDSCH_MappingTypeB_DCI_1_2_r16;
         case 31: return dmrs_SequenceInitializationDCI_1_2_r16;
         case 32: return harq_ProcessNumberSizeDCI_1_2_r16;
         case 33: return mcs_TableDCI_1_2_r16;
         case 34: return numberOfBitsForRV_DCI_1_2_r16;
         case 35: return pdsch_TimeDomainAllocationListDCI_1_2_r16;
         case 36: return prb_BundlingTypeDCI_1_2_r16;
         case 37: return priorityIndicatorDCI_1_2_r16;
         case 38: return rateMatchPatternGroup1DCI_1_2_r16;
         case 39: return rateMatchPatternGroup2DCI_1_2_r16;
         case 40: return resourceAllocationType1GranularityDCI_1_2_r16;
         case 41: return vrb_ToPRB_InterleaverDCI_1_2_r16;
         case 42: return referenceOfSLIVDCI_1_2_r16;
         case 43: return resourceAllocationDCI_1_2_r16;
         case 44: return priorityIndicatorDCI_1_1_r16;
         case 45: return dataScramblingIdentityPDSCH2_r16;
         case 46: return pdsch_TimeDomainAllocationList_r16;
         case 47: return repetitionSchemeConfig_r16;
         case 48: return repetitionSchemeConfig_v1630;
         case 49: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "dataScramblingIdentityPDSCH";
         case 1: return "dmrs-DownlinkForPDSCH-MappingTypeA";
         case 2: return "dmrs-DownlinkForPDSCH-MappingTypeB";
         case 3: return "tci-StatesToAddModList";
         case 4: return "tci-StatesToReleaseList";
         case 5: return "vrb-ToPRB-Interleaver";
         case 6: return "resourceAllocation";
         case 7: return "pdsch-TimeDomainAllocationList";
         case 8: return "pdsch-AggregationFactor";
         case 9: return "rateMatchPatternToAddModList";
         case 10: return "rateMatchPatternToReleaseList";
         case 11: return "rateMatchPatternGroup1";
         case 12: return "rateMatchPatternGroup2";
         case 13: return "rbg-Size";
         case 14: return "mcs-Table";
         case 15: return "maxNrofCodeWordsScheduledByDCI";
         case 16: return "prb-BundlingType";
         case 17: return "zp-CSI-RS-ResourceToAddModList";
         case 18: return "zp-CSI-RS-ResourceToReleaseList";
         case 19: return "aperiodic-ZP-CSI-RS-ResourceSetsToAddModList";
         case 20: return "aperiodic-ZP-CSI-RS-ResourceSetsToReleaseList";
         case 21: return "sp-ZP-CSI-RS-ResourceSetsToAddModList";
         case 22: return "sp-ZP-CSI-RS-ResourceSetsToReleaseList";
         case 23: return "p-ZP-CSI-RS-ResourceSet";
         case 24: return "maxMIMO-Layers-r16";
         case 25: return "minimumSchedulingOffsetK0-r16";
         case 26: return "antennaPortsFieldPresenceDCI-1-2-r16";
         case 27: return "aperiodicZP-CSI-RS-ResourceSetsToAddModListDCI-1-2-r16";
         case 28: return "aperiodicZP-CSI-RS-ResourceSetsToReleaseListDCI-1-2-r16";
         case 29: return "dmrs-DownlinkForPDSCH-MappingTypeA-DCI-1-2-r16";
         case 30: return "dmrs-DownlinkForPDSCH-MappingTypeB-DCI-1-2-r16";
         case 31: return "dmrs-SequenceInitializationDCI-1-2-r16";
         case 32: return "harq-ProcessNumberSizeDCI-1-2-r16";
         case 33: return "mcs-TableDCI-1-2-r16";
         case 34: return "numberOfBitsForRV-DCI-1-2-r16";
         case 35: return "pdsch-TimeDomainAllocationListDCI-1-2-r16";
         case 36: return "prb-BundlingTypeDCI-1-2-r16";
         case 37: return "priorityIndicatorDCI-1-2-r16";
         case 38: return "rateMatchPatternGroup1DCI-1-2-r16";
         case 39: return "rateMatchPatternGroup2DCI-1-2-r16";
         case 40: return "resourceAllocationType1GranularityDCI-1-2-r16";
         case 41: return "vrb-ToPRB-InterleaverDCI-1-2-r16";
         case 42: return "referenceOfSLIVDCI-1-2-r16";
         case 43: return "resourceAllocationDCI-1-2-r16";
         case 44: return "priorityIndicatorDCI-1-1-r16";
         case 45: return "dataScramblingIdentityPDSCH2-r16";
         case 46: return "pdsch-TimeDomainAllocationList-r16";
         case 47: return "repetitionSchemeConfig-r16";
         case 48: return "repetitionSchemeConfig-v1630";
         case 49: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean dataScramblingIdentityPDSCHPresent = buffer.decodeBit ("dataScramblingIdentityPDSCHPresent");
      boolean dmrs_DownlinkForPDSCH_MappingTypeAPresent = buffer.decodeBit ("dmrs_DownlinkForPDSCH_MappingTypeAPresent");
      boolean dmrs_DownlinkForPDSCH_MappingTypeBPresent = buffer.decodeBit ("dmrs_DownlinkForPDSCH_MappingTypeBPresent");
      boolean tci_StatesToAddModListPresent = buffer.decodeBit ("tci_StatesToAddModListPresent");
      boolean tci_StatesToReleaseListPresent = buffer.decodeBit ("tci_StatesToReleaseListPresent");
      boolean vrb_ToPRB_InterleaverPresent = buffer.decodeBit ("vrb_ToPRB_InterleaverPresent");
      boolean pdsch_TimeDomainAllocationListPresent = buffer.decodeBit ("pdsch_TimeDomainAllocationListPresent");
      boolean pdsch_AggregationFactorPresent = buffer.decodeBit ("pdsch_AggregationFactorPresent");
      boolean rateMatchPatternToAddModListPresent = buffer.decodeBit ("rateMatchPatternToAddModListPresent");
      boolean rateMatchPatternToReleaseListPresent = buffer.decodeBit ("rateMatchPatternToReleaseListPresent");
      boolean rateMatchPatternGroup1Present = buffer.decodeBit ("rateMatchPatternGroup1Present");
      boolean rateMatchPatternGroup2Present = buffer.decodeBit ("rateMatchPatternGroup2Present");
      boolean mcs_TablePresent = buffer.decodeBit ("mcs_TablePresent");
      boolean maxNrofCodeWordsScheduledByDCIPresent = buffer.decodeBit ("maxNrofCodeWordsScheduledByDCIPresent");
      boolean zp_CSI_RS_ResourceToAddModListPresent = buffer.decodeBit ("zp_CSI_RS_ResourceToAddModListPresent");
      boolean zp_CSI_RS_ResourceToReleaseListPresent = buffer.decodeBit ("zp_CSI_RS_ResourceToReleaseListPresent");
      boolean aperiodic_ZP_CSI_RS_ResourceSetsToAddModListPresent = buffer.decodeBit ("aperiodic_ZP_CSI_RS_ResourceSetsToAddModListPresent");
      boolean aperiodic_ZP_CSI_RS_ResourceSetsToReleaseListPresent = buffer.decodeBit ("aperiodic_ZP_CSI_RS_ResourceSetsToReleaseListPresent");
      boolean sp_ZP_CSI_RS_ResourceSetsToAddModListPresent = buffer.decodeBit ("sp_ZP_CSI_RS_ResourceSetsToAddModListPresent");
      boolean sp_ZP_CSI_RS_ResourceSetsToReleaseListPresent = buffer.decodeBit ("sp_ZP_CSI_RS_ResourceSetsToReleaseListPresent");
      boolean p_ZP_CSI_RS_ResourceSetPresent = buffer.decodeBit ("p_ZP_CSI_RS_ResourceSetPresent");

      // decode dataScramblingIdentityPDSCH

      if (dataScramblingIdentityPDSCHPresent) {
         buffer.getContext().eventDispatcher.startElement("dataScramblingIdentityPDSCH", -1);

         dataScramblingIdentityPDSCH = new Asn1Integer();
         dataScramblingIdentityPDSCH.decode (buffer, 0, 1023);

         buffer.invokeCharacters(dataScramblingIdentityPDSCH.toString());
         buffer.getContext().eventDispatcher.endElement("dataScramblingIdentityPDSCH", -1);
      }
      else {
         dataScramblingIdentityPDSCH = null;
      }

      // decode dmrs_DownlinkForPDSCH_MappingTypeA

      if (dmrs_DownlinkForPDSCH_MappingTypeAPresent) {
         buffer.getContext().eventDispatcher.startElement("dmrs_DownlinkForPDSCH_MappingTypeA", -1);

         dmrs_DownlinkForPDSCH_MappingTypeA = new PDSCH_Config_dmrs_DownlinkForPDSCH_MappingTypeA();
         dmrs_DownlinkForPDSCH_MappingTypeA.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("dmrs_DownlinkForPDSCH_MappingTypeA", -1);
      }
      else {
         dmrs_DownlinkForPDSCH_MappingTypeA = null;
      }

      // decode dmrs_DownlinkForPDSCH_MappingTypeB

      if (dmrs_DownlinkForPDSCH_MappingTypeBPresent) {
         buffer.getContext().eventDispatcher.startElement("dmrs_DownlinkForPDSCH_MappingTypeB", -1);

         dmrs_DownlinkForPDSCH_MappingTypeB = new PDSCH_Config_dmrs_DownlinkForPDSCH_MappingTypeB();
         dmrs_DownlinkForPDSCH_MappingTypeB.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("dmrs_DownlinkForPDSCH_MappingTypeB", -1);
      }
      else {
         dmrs_DownlinkForPDSCH_MappingTypeB = null;
      }

      // decode tci_StatesToAddModList

      if (tci_StatesToAddModListPresent) {
         buffer.getContext().eventDispatcher.startElement("tci_StatesToAddModList", -1);

         tci_StatesToAddModList = new PDSCH_Config_tci_StatesToAddModList();
         tci_StatesToAddModList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("tci_StatesToAddModList", -1);
      }
      else {
         tci_StatesToAddModList = null;
      }

      // decode tci_StatesToReleaseList

      if (tci_StatesToReleaseListPresent) {
         buffer.getContext().eventDispatcher.startElement("tci_StatesToReleaseList", -1);

         tci_StatesToReleaseList = new PDSCH_Config_tci_StatesToReleaseList();
         tci_StatesToReleaseList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("tci_StatesToReleaseList", -1);
      }
      else {
         tci_StatesToReleaseList = null;
      }

      // decode vrb_ToPRB_Interleaver

      if (vrb_ToPRB_InterleaverPresent) {
         buffer.getContext().eventDispatcher.startElement("vrb_ToPRB_Interleaver", -1);

         int tval = PDSCH_Config_vrb_ToPRB_Interleaver.decodeEnumValue (buffer);
         vrb_ToPRB_Interleaver = PDSCH_Config_vrb_ToPRB_Interleaver.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("vrb_ToPRB_Interleaver", -1);
      }
      else {
         vrb_ToPRB_Interleaver = null;
      }

      // decode resourceAllocation

      buffer.getContext().eventDispatcher.startElement("resourceAllocation", -1);

      {
         int tval = PDSCH_Config_resourceAllocation.decodeEnumValue (buffer);
         resourceAllocation = PDSCH_Config_resourceAllocation.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("resourceAllocation", -1);

      // decode pdsch_TimeDomainAllocationList

      if (pdsch_TimeDomainAllocationListPresent) {
         buffer.getContext().eventDispatcher.startElement("pdsch_TimeDomainAllocationList", -1);

         pdsch_TimeDomainAllocationList = new PDSCH_Config_pdsch_TimeDomainAllocationList();
         pdsch_TimeDomainAllocationList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("pdsch_TimeDomainAllocationList", -1);
      }
      else {
         pdsch_TimeDomainAllocationList = null;
      }

      // decode pdsch_AggregationFactor

      if (pdsch_AggregationFactorPresent) {
         buffer.getContext().eventDispatcher.startElement("pdsch_AggregationFactor", -1);

         int tval = PDSCH_Config_pdsch_AggregationFactor.decodeEnumValue (buffer);
         pdsch_AggregationFactor = PDSCH_Config_pdsch_AggregationFactor.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("pdsch_AggregationFactor", -1);
      }
      else {
         pdsch_AggregationFactor = null;
      }

      // decode rateMatchPatternToAddModList

      if (rateMatchPatternToAddModListPresent) {
         buffer.getContext().eventDispatcher.startElement("rateMatchPatternToAddModList", -1);

         rateMatchPatternToAddModList = new PDSCH_Config_rateMatchPatternToAddModList();
         rateMatchPatternToAddModList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("rateMatchPatternToAddModList", -1);
      }
      else {
         rateMatchPatternToAddModList = null;
      }

      // decode rateMatchPatternToReleaseList

      if (rateMatchPatternToReleaseListPresent) {
         buffer.getContext().eventDispatcher.startElement("rateMatchPatternToReleaseList", -1);

         rateMatchPatternToReleaseList = new PDSCH_Config_rateMatchPatternToReleaseList();
         rateMatchPatternToReleaseList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("rateMatchPatternToReleaseList", -1);
      }
      else {
         rateMatchPatternToReleaseList = null;
      }

      // decode rateMatchPatternGroup1

      if (rateMatchPatternGroup1Present) {
         buffer.getContext().eventDispatcher.startElement("rateMatchPatternGroup1", -1);

         rateMatchPatternGroup1 = new RateMatchPatternGroup();
         rateMatchPatternGroup1.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("rateMatchPatternGroup1", -1);
      }
      else {
         rateMatchPatternGroup1 = null;
      }

      // decode rateMatchPatternGroup2

      if (rateMatchPatternGroup2Present) {
         buffer.getContext().eventDispatcher.startElement("rateMatchPatternGroup2", -1);

         rateMatchPatternGroup2 = new RateMatchPatternGroup();
         rateMatchPatternGroup2.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("rateMatchPatternGroup2", -1);
      }
      else {
         rateMatchPatternGroup2 = null;
      }

      // decode rbg_Size

      buffer.getContext().eventDispatcher.startElement("rbg_Size", -1);

      {
         int tval = PDSCH_Config_rbg_Size.decodeEnumValue (buffer);
         rbg_Size = PDSCH_Config_rbg_Size.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("rbg_Size", -1);

      // decode mcs_Table

      if (mcs_TablePresent) {
         buffer.getContext().eventDispatcher.startElement("mcs_Table", -1);

         int tval = PDSCH_Config_mcs_Table.decodeEnumValue (buffer);
         mcs_Table = PDSCH_Config_mcs_Table.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("mcs_Table", -1);
      }
      else {
         mcs_Table = null;
      }

      // decode maxNrofCodeWordsScheduledByDCI

      if (maxNrofCodeWordsScheduledByDCIPresent) {
         buffer.getContext().eventDispatcher.startElement("maxNrofCodeWordsScheduledByDCI", -1);

         int tval = PDSCH_Config_maxNrofCodeWordsScheduledByDCI.decodeEnumValue (buffer);
         maxNrofCodeWordsScheduledByDCI = PDSCH_Config_maxNrofCodeWordsScheduledByDCI.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("maxNrofCodeWordsScheduledByDCI", -1);
      }
      else {
         maxNrofCodeWordsScheduledByDCI = null;
      }

      // decode prb_BundlingType

      buffer.getContext().eventDispatcher.startElement("prb_BundlingType", -1);

      prb_BundlingType = new PDSCH_Config_prb_BundlingType();
      prb_BundlingType.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("prb_BundlingType", -1);

      // decode zp_CSI_RS_ResourceToAddModList

      if (zp_CSI_RS_ResourceToAddModListPresent) {
         buffer.getContext().eventDispatcher.startElement("zp_CSI_RS_ResourceToAddModList", -1);

         zp_CSI_RS_ResourceToAddModList = new PDSCH_Config_zp_CSI_RS_ResourceToAddModList();
         zp_CSI_RS_ResourceToAddModList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("zp_CSI_RS_ResourceToAddModList", -1);
      }
      else {
         zp_CSI_RS_ResourceToAddModList = null;
      }

      // decode zp_CSI_RS_ResourceToReleaseList

      if (zp_CSI_RS_ResourceToReleaseListPresent) {
         buffer.getContext().eventDispatcher.startElement("zp_CSI_RS_ResourceToReleaseList", -1);

         zp_CSI_RS_ResourceToReleaseList = new PDSCH_Config_zp_CSI_RS_ResourceToReleaseList();
         zp_CSI_RS_ResourceToReleaseList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("zp_CSI_RS_ResourceToReleaseList", -1);
      }
      else {
         zp_CSI_RS_ResourceToReleaseList = null;
      }

      // decode aperiodic_ZP_CSI_RS_ResourceSetsToAddModList

      if (aperiodic_ZP_CSI_RS_ResourceSetsToAddModListPresent) {
         buffer.getContext().eventDispatcher.startElement("aperiodic_ZP_CSI_RS_ResourceSetsToAddModList", -1);

         aperiodic_ZP_CSI_RS_ResourceSetsToAddModList = new PDSCH_Config_aperiodic_ZP_CSI_RS_ResourceSetsToAddModList();
         aperiodic_ZP_CSI_RS_ResourceSetsToAddModList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("aperiodic_ZP_CSI_RS_ResourceSetsToAddModList", -1);
      }
      else {
         aperiodic_ZP_CSI_RS_ResourceSetsToAddModList = null;
      }

      // decode aperiodic_ZP_CSI_RS_ResourceSetsToReleaseList

      if (aperiodic_ZP_CSI_RS_ResourceSetsToReleaseListPresent) {
         buffer.getContext().eventDispatcher.startElement("aperiodic_ZP_CSI_RS_ResourceSetsToReleaseList", -1);

         aperiodic_ZP_CSI_RS_ResourceSetsToReleaseList = new PDSCH_Config_aperiodic_ZP_CSI_RS_ResourceSetsToReleaseList();
         aperiodic_ZP_CSI_RS_ResourceSetsToReleaseList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("aperiodic_ZP_CSI_RS_ResourceSetsToReleaseList", -1);
      }
      else {
         aperiodic_ZP_CSI_RS_ResourceSetsToReleaseList = null;
      }

      // decode sp_ZP_CSI_RS_ResourceSetsToAddModList

      if (sp_ZP_CSI_RS_ResourceSetsToAddModListPresent) {
         buffer.getContext().eventDispatcher.startElement("sp_ZP_CSI_RS_ResourceSetsToAddModList", -1);

         sp_ZP_CSI_RS_ResourceSetsToAddModList = new PDSCH_Config_sp_ZP_CSI_RS_ResourceSetsToAddModList();
         sp_ZP_CSI_RS_ResourceSetsToAddModList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sp_ZP_CSI_RS_ResourceSetsToAddModList", -1);
      }
      else {
         sp_ZP_CSI_RS_ResourceSetsToAddModList = null;
      }

      // decode sp_ZP_CSI_RS_ResourceSetsToReleaseList

      if (sp_ZP_CSI_RS_ResourceSetsToReleaseListPresent) {
         buffer.getContext().eventDispatcher.startElement("sp_ZP_CSI_RS_ResourceSetsToReleaseList", -1);

         sp_ZP_CSI_RS_ResourceSetsToReleaseList = new PDSCH_Config_sp_ZP_CSI_RS_ResourceSetsToReleaseList();
         sp_ZP_CSI_RS_ResourceSetsToReleaseList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sp_ZP_CSI_RS_ResourceSetsToReleaseList", -1);
      }
      else {
         sp_ZP_CSI_RS_ResourceSetsToReleaseList = null;
      }

      // decode p_ZP_CSI_RS_ResourceSet

      if (p_ZP_CSI_RS_ResourceSetPresent) {
         buffer.getContext().eventDispatcher.startElement("p_ZP_CSI_RS_ResourceSet", -1);

         p_ZP_CSI_RS_ResourceSet = new PDSCH_Config_p_ZP_CSI_RS_ResourceSet();
         p_ZP_CSI_RS_ResourceSet.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("p_ZP_CSI_RS_ResourceSet", -1);
      }
      else {
         p_ZP_CSI_RS_ResourceSet = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean maxMIMO_Layers_r16Present = buffer.decodeBit ("maxMIMO_Layers_r16Present");

            boolean minimumSchedulingOffsetK0_r16Present = buffer.decodeBit ("minimumSchedulingOffsetK0_r16Present");

            boolean antennaPortsFieldPresenceDCI_1_2_r16Present = buffer.decodeBit ("antennaPortsFieldPresenceDCI_1_2_r16Present");

            boolean aperiodicZP_CSI_RS_ResourceSetsToAddModListDCI_1_2_r16Present = buffer.decodeBit ("aperiodicZP_CSI_RS_ResourceSetsToAddModListDCI_1_2_r16Present");

            boolean aperiodicZP_CSI_RS_ResourceSetsToReleaseListDCI_1_2_r16Present = buffer.decodeBit ("aperiodicZP_CSI_RS_ResourceSetsToReleaseListDCI_1_2_r16Present");

            boolean dmrs_DownlinkForPDSCH_MappingTypeA_DCI_1_2_r16Present = buffer.decodeBit ("dmrs_DownlinkForPDSCH_MappingTypeA_DCI_1_2_r16Present");

            boolean dmrs_DownlinkForPDSCH_MappingTypeB_DCI_1_2_r16Present = buffer.decodeBit ("dmrs_DownlinkForPDSCH_MappingTypeB_DCI_1_2_r16Present");

            boolean dmrs_SequenceInitializationDCI_1_2_r16Present = buffer.decodeBit ("dmrs_SequenceInitializationDCI_1_2_r16Present");

            boolean harq_ProcessNumberSizeDCI_1_2_r16Present = buffer.decodeBit ("harq_ProcessNumberSizeDCI_1_2_r16Present");

            boolean mcs_TableDCI_1_2_r16Present = buffer.decodeBit ("mcs_TableDCI_1_2_r16Present");

            boolean numberOfBitsForRV_DCI_1_2_r16Present = buffer.decodeBit ("numberOfBitsForRV_DCI_1_2_r16Present");

            boolean pdsch_TimeDomainAllocationListDCI_1_2_r16Present = buffer.decodeBit ("pdsch_TimeDomainAllocationListDCI_1_2_r16Present");

            boolean prb_BundlingTypeDCI_1_2_r16Present = buffer.decodeBit ("prb_BundlingTypeDCI_1_2_r16Present");

            boolean priorityIndicatorDCI_1_2_r16Present = buffer.decodeBit ("priorityIndicatorDCI_1_2_r16Present");

            boolean rateMatchPatternGroup1DCI_1_2_r16Present = buffer.decodeBit ("rateMatchPatternGroup1DCI_1_2_r16Present");

            boolean rateMatchPatternGroup2DCI_1_2_r16Present = buffer.decodeBit ("rateMatchPatternGroup2DCI_1_2_r16Present");

            boolean resourceAllocationType1GranularityDCI_1_2_r16Present = buffer.decodeBit ("resourceAllocationType1GranularityDCI_1_2_r16Present");

            boolean vrb_ToPRB_InterleaverDCI_1_2_r16Present = buffer.decodeBit ("vrb_ToPRB_InterleaverDCI_1_2_r16Present");

            boolean referenceOfSLIVDCI_1_2_r16Present = buffer.decodeBit ("referenceOfSLIVDCI_1_2_r16Present");

            boolean resourceAllocationDCI_1_2_r16Present = buffer.decodeBit ("resourceAllocationDCI_1_2_r16Present");

            boolean priorityIndicatorDCI_1_1_r16Present = buffer.decodeBit ("priorityIndicatorDCI_1_1_r16Present");

            boolean dataScramblingIdentityPDSCH2_r16Present = buffer.decodeBit ("dataScramblingIdentityPDSCH2_r16Present");

            boolean pdsch_TimeDomainAllocationList_r16Present = buffer.decodeBit ("pdsch_TimeDomainAllocationList_r16Present");

            boolean repetitionSchemeConfig_r16Present = buffer.decodeBit ("repetitionSchemeConfig_r16Present");

            // decode maxMIMO_Layers_r16

            if (maxMIMO_Layers_r16Present) {
               buffer.getContext().eventDispatcher.startElement("maxMIMO_Layers_r16", -1);

               maxMIMO_Layers_r16 = new PDSCH_Config_maxMIMO_Layers_r16();
               maxMIMO_Layers_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("maxMIMO_Layers_r16", -1);
            }
            else {
               maxMIMO_Layers_r16 = null;
            }

            // decode minimumSchedulingOffsetK0_r16

            if (minimumSchedulingOffsetK0_r16Present) {
               buffer.getContext().eventDispatcher.startElement("minimumSchedulingOffsetK0_r16", -1);

               minimumSchedulingOffsetK0_r16 = new PDSCH_Config_minimumSchedulingOffsetK0_r16();
               minimumSchedulingOffsetK0_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("minimumSchedulingOffsetK0_r16", -1);
            }
            else {
               minimumSchedulingOffsetK0_r16 = null;
            }

            // decode antennaPortsFieldPresenceDCI_1_2_r16

            if (antennaPortsFieldPresenceDCI_1_2_r16Present) {
               buffer.getContext().eventDispatcher.startElement("antennaPortsFieldPresenceDCI_1_2_r16", -1);

               int tval = PDSCH_Config_antennaPortsFieldPresenceDCI_1_2_r16.decodeEnumValue (buffer);
               antennaPortsFieldPresenceDCI_1_2_r16 = PDSCH_Config_antennaPortsFieldPresenceDCI_1_2_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("antennaPortsFieldPresenceDCI_1_2_r16", -1);
            }
            else {
               antennaPortsFieldPresenceDCI_1_2_r16 = null;
            }

            // decode aperiodicZP_CSI_RS_ResourceSetsToAddModListDCI_1_2_r16

            if (aperiodicZP_CSI_RS_ResourceSetsToAddModListDCI_1_2_r16Present) {
               buffer.getContext().eventDispatcher.startElement("aperiodicZP_CSI_RS_ResourceSetsToAddModListDCI_1_2_r16", -1);

               aperiodicZP_CSI_RS_ResourceSetsToAddModListDCI_1_2_r16 = new PDSCH_Config_aperiodicZP_CSI_RS_ResourceSetsToAddModListDCI_1_2_r16();
               aperiodicZP_CSI_RS_ResourceSetsToAddModListDCI_1_2_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("aperiodicZP_CSI_RS_ResourceSetsToAddModListDCI_1_2_r16", -1);
            }
            else {
               aperiodicZP_CSI_RS_ResourceSetsToAddModListDCI_1_2_r16 = null;
            }

            // decode aperiodicZP_CSI_RS_ResourceSetsToReleaseListDCI_1_2_r16

            if (aperiodicZP_CSI_RS_ResourceSetsToReleaseListDCI_1_2_r16Present) {
               buffer.getContext().eventDispatcher.startElement("aperiodicZP_CSI_RS_ResourceSetsToReleaseListDCI_1_2_r16", -1);

               aperiodicZP_CSI_RS_ResourceSetsToReleaseListDCI_1_2_r16 = new PDSCH_Config_aperiodicZP_CSI_RS_ResourceSetsToReleaseListDCI_1_2_r16();
               aperiodicZP_CSI_RS_ResourceSetsToReleaseListDCI_1_2_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("aperiodicZP_CSI_RS_ResourceSetsToReleaseListDCI_1_2_r16", -1);
            }
            else {
               aperiodicZP_CSI_RS_ResourceSetsToReleaseListDCI_1_2_r16 = null;
            }

            // decode dmrs_DownlinkForPDSCH_MappingTypeA_DCI_1_2_r16

            if (dmrs_DownlinkForPDSCH_MappingTypeA_DCI_1_2_r16Present) {
               buffer.getContext().eventDispatcher.startElement("dmrs_DownlinkForPDSCH_MappingTypeA_DCI_1_2_r16", -1);

               dmrs_DownlinkForPDSCH_MappingTypeA_DCI_1_2_r16 = new PDSCH_Config_dmrs_DownlinkForPDSCH_MappingTypeA_DCI_1_2_r16();
               dmrs_DownlinkForPDSCH_MappingTypeA_DCI_1_2_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("dmrs_DownlinkForPDSCH_MappingTypeA_DCI_1_2_r16", -1);
            }
            else {
               dmrs_DownlinkForPDSCH_MappingTypeA_DCI_1_2_r16 = null;
            }

            // decode dmrs_DownlinkForPDSCH_MappingTypeB_DCI_1_2_r16

            if (dmrs_DownlinkForPDSCH_MappingTypeB_DCI_1_2_r16Present) {
               buffer.getContext().eventDispatcher.startElement("dmrs_DownlinkForPDSCH_MappingTypeB_DCI_1_2_r16", -1);

               dmrs_DownlinkForPDSCH_MappingTypeB_DCI_1_2_r16 = new PDSCH_Config_dmrs_DownlinkForPDSCH_MappingTypeB_DCI_1_2_r16();
               dmrs_DownlinkForPDSCH_MappingTypeB_DCI_1_2_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("dmrs_DownlinkForPDSCH_MappingTypeB_DCI_1_2_r16", -1);
            }
            else {
               dmrs_DownlinkForPDSCH_MappingTypeB_DCI_1_2_r16 = null;
            }

            // decode dmrs_SequenceInitializationDCI_1_2_r16

            if (dmrs_SequenceInitializationDCI_1_2_r16Present) {
               buffer.getContext().eventDispatcher.startElement("dmrs_SequenceInitializationDCI_1_2_r16", -1);

               int tval = PDSCH_Config_dmrs_SequenceInitializationDCI_1_2_r16.decodeEnumValue (buffer);
               dmrs_SequenceInitializationDCI_1_2_r16 = PDSCH_Config_dmrs_SequenceInitializationDCI_1_2_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("dmrs_SequenceInitializationDCI_1_2_r16", -1);
            }
            else {
               dmrs_SequenceInitializationDCI_1_2_r16 = null;
            }

            // decode harq_ProcessNumberSizeDCI_1_2_r16

            if (harq_ProcessNumberSizeDCI_1_2_r16Present) {
               buffer.getContext().eventDispatcher.startElement("harq_ProcessNumberSizeDCI_1_2_r16", -1);

               harq_ProcessNumberSizeDCI_1_2_r16 = new Asn1Integer();
               harq_ProcessNumberSizeDCI_1_2_r16.decode (buffer, 0, 4);

               buffer.invokeCharacters(harq_ProcessNumberSizeDCI_1_2_r16.toString());
               buffer.getContext().eventDispatcher.endElement("harq_ProcessNumberSizeDCI_1_2_r16", -1);
            }
            else {
               harq_ProcessNumberSizeDCI_1_2_r16 = null;
            }

            // decode mcs_TableDCI_1_2_r16

            if (mcs_TableDCI_1_2_r16Present) {
               buffer.getContext().eventDispatcher.startElement("mcs_TableDCI_1_2_r16", -1);

               int tval = PDSCH_Config_mcs_TableDCI_1_2_r16.decodeEnumValue (buffer);
               mcs_TableDCI_1_2_r16 = PDSCH_Config_mcs_TableDCI_1_2_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("mcs_TableDCI_1_2_r16", -1);
            }
            else {
               mcs_TableDCI_1_2_r16 = null;
            }

            // decode numberOfBitsForRV_DCI_1_2_r16

            if (numberOfBitsForRV_DCI_1_2_r16Present) {
               buffer.getContext().eventDispatcher.startElement("numberOfBitsForRV_DCI_1_2_r16", -1);

               numberOfBitsForRV_DCI_1_2_r16 = new Asn1Integer();
               numberOfBitsForRV_DCI_1_2_r16.decode (buffer, 0, 2);

               buffer.invokeCharacters(numberOfBitsForRV_DCI_1_2_r16.toString());
               buffer.getContext().eventDispatcher.endElement("numberOfBitsForRV_DCI_1_2_r16", -1);
            }
            else {
               numberOfBitsForRV_DCI_1_2_r16 = null;
            }

            // decode pdsch_TimeDomainAllocationListDCI_1_2_r16

            if (pdsch_TimeDomainAllocationListDCI_1_2_r16Present) {
               buffer.getContext().eventDispatcher.startElement("pdsch_TimeDomainAllocationListDCI_1_2_r16", -1);

               pdsch_TimeDomainAllocationListDCI_1_2_r16 = new PDSCH_Config_pdsch_TimeDomainAllocationListDCI_1_2_r16();
               pdsch_TimeDomainAllocationListDCI_1_2_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("pdsch_TimeDomainAllocationListDCI_1_2_r16", -1);
            }
            else {
               pdsch_TimeDomainAllocationListDCI_1_2_r16 = null;
            }

            // decode prb_BundlingTypeDCI_1_2_r16

            if (prb_BundlingTypeDCI_1_2_r16Present) {
               buffer.getContext().eventDispatcher.startElement("prb_BundlingTypeDCI_1_2_r16", -1);

               prb_BundlingTypeDCI_1_2_r16 = new PDSCH_Config_prb_BundlingTypeDCI_1_2_r16();
               prb_BundlingTypeDCI_1_2_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("prb_BundlingTypeDCI_1_2_r16", -1);
            }
            else {
               prb_BundlingTypeDCI_1_2_r16 = null;
            }

            // decode priorityIndicatorDCI_1_2_r16

            if (priorityIndicatorDCI_1_2_r16Present) {
               buffer.getContext().eventDispatcher.startElement("priorityIndicatorDCI_1_2_r16", -1);

               int tval = PDSCH_Config_priorityIndicatorDCI_1_2_r16.decodeEnumValue (buffer);
               priorityIndicatorDCI_1_2_r16 = PDSCH_Config_priorityIndicatorDCI_1_2_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("priorityIndicatorDCI_1_2_r16", -1);
            }
            else {
               priorityIndicatorDCI_1_2_r16 = null;
            }

            // decode rateMatchPatternGroup1DCI_1_2_r16

            if (rateMatchPatternGroup1DCI_1_2_r16Present) {
               buffer.getContext().eventDispatcher.startElement("rateMatchPatternGroup1DCI_1_2_r16", -1);

               rateMatchPatternGroup1DCI_1_2_r16 = new RateMatchPatternGroup();
               rateMatchPatternGroup1DCI_1_2_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("rateMatchPatternGroup1DCI_1_2_r16", -1);
            }
            else {
               rateMatchPatternGroup1DCI_1_2_r16 = null;
            }

            // decode rateMatchPatternGroup2DCI_1_2_r16

            if (rateMatchPatternGroup2DCI_1_2_r16Present) {
               buffer.getContext().eventDispatcher.startElement("rateMatchPatternGroup2DCI_1_2_r16", -1);

               rateMatchPatternGroup2DCI_1_2_r16 = new RateMatchPatternGroup();
               rateMatchPatternGroup2DCI_1_2_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("rateMatchPatternGroup2DCI_1_2_r16", -1);
            }
            else {
               rateMatchPatternGroup2DCI_1_2_r16 = null;
            }

            // decode resourceAllocationType1GranularityDCI_1_2_r16

            if (resourceAllocationType1GranularityDCI_1_2_r16Present) {
               buffer.getContext().eventDispatcher.startElement("resourceAllocationType1GranularityDCI_1_2_r16", -1);

               int tval = PDSCH_Config_resourceAllocationType1GranularityDCI_1_2_r16.decodeEnumValue (buffer);
               resourceAllocationType1GranularityDCI_1_2_r16 = PDSCH_Config_resourceAllocationType1GranularityDCI_1_2_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("resourceAllocationType1GranularityDCI_1_2_r16", -1);
            }
            else {
               resourceAllocationType1GranularityDCI_1_2_r16 = null;
            }

            // decode vrb_ToPRB_InterleaverDCI_1_2_r16

            if (vrb_ToPRB_InterleaverDCI_1_2_r16Present) {
               buffer.getContext().eventDispatcher.startElement("vrb_ToPRB_InterleaverDCI_1_2_r16", -1);

               int tval = PDSCH_Config_vrb_ToPRB_InterleaverDCI_1_2_r16.decodeEnumValue (buffer);
               vrb_ToPRB_InterleaverDCI_1_2_r16 = PDSCH_Config_vrb_ToPRB_InterleaverDCI_1_2_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("vrb_ToPRB_InterleaverDCI_1_2_r16", -1);
            }
            else {
               vrb_ToPRB_InterleaverDCI_1_2_r16 = null;
            }

            // decode referenceOfSLIVDCI_1_2_r16

            if (referenceOfSLIVDCI_1_2_r16Present) {
               buffer.getContext().eventDispatcher.startElement("referenceOfSLIVDCI_1_2_r16", -1);

               int tval = PDSCH_Config_referenceOfSLIVDCI_1_2_r16.decodeEnumValue (buffer);
               referenceOfSLIVDCI_1_2_r16 = PDSCH_Config_referenceOfSLIVDCI_1_2_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("referenceOfSLIVDCI_1_2_r16", -1);
            }
            else {
               referenceOfSLIVDCI_1_2_r16 = null;
            }

            // decode resourceAllocationDCI_1_2_r16

            if (resourceAllocationDCI_1_2_r16Present) {
               buffer.getContext().eventDispatcher.startElement("resourceAllocationDCI_1_2_r16", -1);

               int tval = PDSCH_Config_resourceAllocationDCI_1_2_r16.decodeEnumValue (buffer);
               resourceAllocationDCI_1_2_r16 = PDSCH_Config_resourceAllocationDCI_1_2_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("resourceAllocationDCI_1_2_r16", -1);
            }
            else {
               resourceAllocationDCI_1_2_r16 = null;
            }

            // decode priorityIndicatorDCI_1_1_r16

            if (priorityIndicatorDCI_1_1_r16Present) {
               buffer.getContext().eventDispatcher.startElement("priorityIndicatorDCI_1_1_r16", -1);

               int tval = PDSCH_Config_priorityIndicatorDCI_1_1_r16.decodeEnumValue (buffer);
               priorityIndicatorDCI_1_1_r16 = PDSCH_Config_priorityIndicatorDCI_1_1_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("priorityIndicatorDCI_1_1_r16", -1);
            }
            else {
               priorityIndicatorDCI_1_1_r16 = null;
            }

            // decode dataScramblingIdentityPDSCH2_r16

            if (dataScramblingIdentityPDSCH2_r16Present) {
               buffer.getContext().eventDispatcher.startElement("dataScramblingIdentityPDSCH2_r16", -1);

               dataScramblingIdentityPDSCH2_r16 = new Asn1Integer();
               dataScramblingIdentityPDSCH2_r16.decode (buffer, 0, 1023);

               buffer.invokeCharacters(dataScramblingIdentityPDSCH2_r16.toString());
               buffer.getContext().eventDispatcher.endElement("dataScramblingIdentityPDSCH2_r16", -1);
            }
            else {
               dataScramblingIdentityPDSCH2_r16 = null;
            }

            // decode pdsch_TimeDomainAllocationList_r16

            if (pdsch_TimeDomainAllocationList_r16Present) {
               buffer.getContext().eventDispatcher.startElement("pdsch_TimeDomainAllocationList_r16", -1);

               pdsch_TimeDomainAllocationList_r16 = new PDSCH_Config_pdsch_TimeDomainAllocationList_r16();
               pdsch_TimeDomainAllocationList_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("pdsch_TimeDomainAllocationList_r16", -1);
            }
            else {
               pdsch_TimeDomainAllocationList_r16 = null;
            }

            // decode repetitionSchemeConfig_r16

            if (repetitionSchemeConfig_r16Present) {
               buffer.getContext().eventDispatcher.startElement("repetitionSchemeConfig_r16", -1);

               repetitionSchemeConfig_r16 = new PDSCH_Config_repetitionSchemeConfig_r16();
               repetitionSchemeConfig_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("repetitionSchemeConfig_r16", -1);
            }
            else {
               repetitionSchemeConfig_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean repetitionSchemeConfig_v1630Present = buffer.decodeBit ("repetitionSchemeConfig_v1630Present");

            // decode repetitionSchemeConfig_v1630

            if (repetitionSchemeConfig_v1630Present) {
               buffer.getContext().eventDispatcher.startElement("repetitionSchemeConfig_v1630", -1);

               repetitionSchemeConfig_v1630 = new PDSCH_Config_repetitionSchemeConfig_v1630();
               repetitionSchemeConfig_v1630.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("repetitionSchemeConfig_v1630", -1);
            }
            else {
               repetitionSchemeConfig_v1630 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (dataScramblingIdentityPDSCH != null) dataScramblingIdentityPDSCH.print (_sb, "dataScramblingIdentityPDSCH", _level+1);
      if (dmrs_DownlinkForPDSCH_MappingTypeA != null) dmrs_DownlinkForPDSCH_MappingTypeA.print (_sb, "dmrs_DownlinkForPDSCH_MappingTypeA", _level+1);
      if (dmrs_DownlinkForPDSCH_MappingTypeB != null) dmrs_DownlinkForPDSCH_MappingTypeB.print (_sb, "dmrs_DownlinkForPDSCH_MappingTypeB", _level+1);
      if (tci_StatesToAddModList != null) tci_StatesToAddModList.print (_sb, "tci_StatesToAddModList", _level+1);
      if (tci_StatesToReleaseList != null) tci_StatesToReleaseList.print (_sb, "tci_StatesToReleaseList", _level+1);
      if (vrb_ToPRB_Interleaver != null) vrb_ToPRB_Interleaver.print (_sb, "vrb_ToPRB_Interleaver", _level+1);
      if (resourceAllocation != null) resourceAllocation.print (_sb, "resourceAllocation", _level+1);
      if (pdsch_TimeDomainAllocationList != null) pdsch_TimeDomainAllocationList.print (_sb, "pdsch_TimeDomainAllocationList", _level+1);
      if (pdsch_AggregationFactor != null) pdsch_AggregationFactor.print (_sb, "pdsch_AggregationFactor", _level+1);
      if (rateMatchPatternToAddModList != null) rateMatchPatternToAddModList.print (_sb, "rateMatchPatternToAddModList", _level+1);
      if (rateMatchPatternToReleaseList != null) rateMatchPatternToReleaseList.print (_sb, "rateMatchPatternToReleaseList", _level+1);
      if (rateMatchPatternGroup1 != null) rateMatchPatternGroup1.print (_sb, "rateMatchPatternGroup1", _level+1);
      if (rateMatchPatternGroup2 != null) rateMatchPatternGroup2.print (_sb, "rateMatchPatternGroup2", _level+1);
      if (rbg_Size != null) rbg_Size.print (_sb, "rbg_Size", _level+1);
      if (mcs_Table != null) mcs_Table.print (_sb, "mcs_Table", _level+1);
      if (maxNrofCodeWordsScheduledByDCI != null) maxNrofCodeWordsScheduledByDCI.print (_sb, "maxNrofCodeWordsScheduledByDCI", _level+1);
      if (prb_BundlingType != null) prb_BundlingType.print (_sb, "prb_BundlingType", _level+1);
      if (zp_CSI_RS_ResourceToAddModList != null) zp_CSI_RS_ResourceToAddModList.print (_sb, "zp_CSI_RS_ResourceToAddModList", _level+1);
      if (zp_CSI_RS_ResourceToReleaseList != null) zp_CSI_RS_ResourceToReleaseList.print (_sb, "zp_CSI_RS_ResourceToReleaseList", _level+1);
      if (aperiodic_ZP_CSI_RS_ResourceSetsToAddModList != null) aperiodic_ZP_CSI_RS_ResourceSetsToAddModList.print (_sb, "aperiodic_ZP_CSI_RS_ResourceSetsToAddModList", _level+1);
      if (aperiodic_ZP_CSI_RS_ResourceSetsToReleaseList != null) aperiodic_ZP_CSI_RS_ResourceSetsToReleaseList.print (_sb, "aperiodic_ZP_CSI_RS_ResourceSetsToReleaseList", _level+1);
      if (sp_ZP_CSI_RS_ResourceSetsToAddModList != null) sp_ZP_CSI_RS_ResourceSetsToAddModList.print (_sb, "sp_ZP_CSI_RS_ResourceSetsToAddModList", _level+1);
      if (sp_ZP_CSI_RS_ResourceSetsToReleaseList != null) sp_ZP_CSI_RS_ResourceSetsToReleaseList.print (_sb, "sp_ZP_CSI_RS_ResourceSetsToReleaseList", _level+1);
      if (p_ZP_CSI_RS_ResourceSet != null) p_ZP_CSI_RS_ResourceSet.print (_sb, "p_ZP_CSI_RS_ResourceSet", _level+1);
      if (maxMIMO_Layers_r16 != null) maxMIMO_Layers_r16.print (_sb, "maxMIMO_Layers_r16", _level+1);
      if (minimumSchedulingOffsetK0_r16 != null) minimumSchedulingOffsetK0_r16.print (_sb, "minimumSchedulingOffsetK0_r16", _level+1);
      if (antennaPortsFieldPresenceDCI_1_2_r16 != null) antennaPortsFieldPresenceDCI_1_2_r16.print (_sb, "antennaPortsFieldPresenceDCI_1_2_r16", _level+1);
      if (aperiodicZP_CSI_RS_ResourceSetsToAddModListDCI_1_2_r16 != null) aperiodicZP_CSI_RS_ResourceSetsToAddModListDCI_1_2_r16.print (_sb, "aperiodicZP_CSI_RS_ResourceSetsToAddModListDCI_1_2_r16", _level+1);
      if (aperiodicZP_CSI_RS_ResourceSetsToReleaseListDCI_1_2_r16 != null) aperiodicZP_CSI_RS_ResourceSetsToReleaseListDCI_1_2_r16.print (_sb, "aperiodicZP_CSI_RS_ResourceSetsToReleaseListDCI_1_2_r16", _level+1);
      if (dmrs_DownlinkForPDSCH_MappingTypeA_DCI_1_2_r16 != null) dmrs_DownlinkForPDSCH_MappingTypeA_DCI_1_2_r16.print (_sb, "dmrs_DownlinkForPDSCH_MappingTypeA_DCI_1_2_r16", _level+1);
      if (dmrs_DownlinkForPDSCH_MappingTypeB_DCI_1_2_r16 != null) dmrs_DownlinkForPDSCH_MappingTypeB_DCI_1_2_r16.print (_sb, "dmrs_DownlinkForPDSCH_MappingTypeB_DCI_1_2_r16", _level+1);
      if (dmrs_SequenceInitializationDCI_1_2_r16 != null) dmrs_SequenceInitializationDCI_1_2_r16.print (_sb, "dmrs_SequenceInitializationDCI_1_2_r16", _level+1);
      if (harq_ProcessNumberSizeDCI_1_2_r16 != null) harq_ProcessNumberSizeDCI_1_2_r16.print (_sb, "harq_ProcessNumberSizeDCI_1_2_r16", _level+1);
      if (mcs_TableDCI_1_2_r16 != null) mcs_TableDCI_1_2_r16.print (_sb, "mcs_TableDCI_1_2_r16", _level+1);
      if (numberOfBitsForRV_DCI_1_2_r16 != null) numberOfBitsForRV_DCI_1_2_r16.print (_sb, "numberOfBitsForRV_DCI_1_2_r16", _level+1);
      if (pdsch_TimeDomainAllocationListDCI_1_2_r16 != null) pdsch_TimeDomainAllocationListDCI_1_2_r16.print (_sb, "pdsch_TimeDomainAllocationListDCI_1_2_r16", _level+1);
      if (prb_BundlingTypeDCI_1_2_r16 != null) prb_BundlingTypeDCI_1_2_r16.print (_sb, "prb_BundlingTypeDCI_1_2_r16", _level+1);
      if (priorityIndicatorDCI_1_2_r16 != null) priorityIndicatorDCI_1_2_r16.print (_sb, "priorityIndicatorDCI_1_2_r16", _level+1);
      if (rateMatchPatternGroup1DCI_1_2_r16 != null) rateMatchPatternGroup1DCI_1_2_r16.print (_sb, "rateMatchPatternGroup1DCI_1_2_r16", _level+1);
      if (rateMatchPatternGroup2DCI_1_2_r16 != null) rateMatchPatternGroup2DCI_1_2_r16.print (_sb, "rateMatchPatternGroup2DCI_1_2_r16", _level+1);
      if (resourceAllocationType1GranularityDCI_1_2_r16 != null) resourceAllocationType1GranularityDCI_1_2_r16.print (_sb, "resourceAllocationType1GranularityDCI_1_2_r16", _level+1);
      if (vrb_ToPRB_InterleaverDCI_1_2_r16 != null) vrb_ToPRB_InterleaverDCI_1_2_r16.print (_sb, "vrb_ToPRB_InterleaverDCI_1_2_r16", _level+1);
      if (referenceOfSLIVDCI_1_2_r16 != null) referenceOfSLIVDCI_1_2_r16.print (_sb, "referenceOfSLIVDCI_1_2_r16", _level+1);
      if (resourceAllocationDCI_1_2_r16 != null) resourceAllocationDCI_1_2_r16.print (_sb, "resourceAllocationDCI_1_2_r16", _level+1);
      if (priorityIndicatorDCI_1_1_r16 != null) priorityIndicatorDCI_1_1_r16.print (_sb, "priorityIndicatorDCI_1_1_r16", _level+1);
      if (dataScramblingIdentityPDSCH2_r16 != null) dataScramblingIdentityPDSCH2_r16.print (_sb, "dataScramblingIdentityPDSCH2_r16", _level+1);
      if (pdsch_TimeDomainAllocationList_r16 != null) pdsch_TimeDomainAllocationList_r16.print (_sb, "pdsch_TimeDomainAllocationList_r16", _level+1);
      if (repetitionSchemeConfig_r16 != null) repetitionSchemeConfig_r16.print (_sb, "repetitionSchemeConfig_r16", _level+1);
      if (repetitionSchemeConfig_v1630 != null) repetitionSchemeConfig_v1630.print (_sb, "repetitionSchemeConfig_v1630", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
