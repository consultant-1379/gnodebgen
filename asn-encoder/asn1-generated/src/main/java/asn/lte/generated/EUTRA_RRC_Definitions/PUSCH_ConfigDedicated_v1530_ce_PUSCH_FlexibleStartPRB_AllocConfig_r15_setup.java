/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class PUSCH_ConfigDedicated_v1530_ce_PUSCH_FlexibleStartPRB_AllocConfig_r15_setup extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public Asn1Integer offsetCE_ModeB_r15;  // optional

   public PUSCH_ConfigDedicated_v1530_ce_PUSCH_FlexibleStartPRB_AllocConfig_r15_setup () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public PUSCH_ConfigDedicated_v1530_ce_PUSCH_FlexibleStartPRB_AllocConfig_r15_setup (
      Asn1Integer offsetCE_ModeB_r15_
   ) {
      super();
      offsetCE_ModeB_r15 = offsetCE_ModeB_r15_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public PUSCH_ConfigDedicated_v1530_ce_PUSCH_FlexibleStartPRB_AllocConfig_r15_setup (long offsetCE_ModeB_r15_
   ) {
      super();
      offsetCE_ModeB_r15 = new Asn1Integer (offsetCE_ModeB_r15_);
   }

   public void init () {
      offsetCE_ModeB_r15 = null;
   }

   public int getElementCount() { return 1; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return offsetCE_ModeB_r15;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "offsetCE-ModeB-r15";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean offsetCE_ModeB_r15Present = buffer.decodeBit ("offsetCE_ModeB_r15Present");

      // decode offsetCE_ModeB_r15

      if (offsetCE_ModeB_r15Present) {
         buffer.getContext().eventDispatcher.startElement("offsetCE_ModeB_r15", -1);

         offsetCE_ModeB_r15 = new Asn1Integer();
         offsetCE_ModeB_r15.decode (buffer, -1, 3);

         buffer.invokeCharacters(offsetCE_ModeB_r15.toString());
         buffer.getContext().eventDispatcher.endElement("offsetCE_ModeB_r15", -1);
      }
      else {
         offsetCE_ModeB_r15 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (offsetCE_ModeB_r15 != null) offsetCE_ModeB_r15.print (_sb, "offsetCE_ModeB_r15", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
