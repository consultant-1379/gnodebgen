/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SSB_Configuration_r16_sfn0_Offset_r16 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public Asn1Integer sfn_Offset_r16;
   public Asn1Integer integerSubframeOffset_r16;  // optional

   public SSB_Configuration_r16_sfn0_Offset_r16 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SSB_Configuration_r16_sfn0_Offset_r16 (
      Asn1Integer sfn_Offset_r16_,
      Asn1Integer integerSubframeOffset_r16_
   ) {
      super();
      sfn_Offset_r16 = sfn_Offset_r16_;
      integerSubframeOffset_r16 = integerSubframeOffset_r16_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SSB_Configuration_r16_sfn0_Offset_r16 (
      Asn1Integer sfn_Offset_r16_
   ) {
      super();
      sfn_Offset_r16 = sfn_Offset_r16_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SSB_Configuration_r16_sfn0_Offset_r16 (long sfn_Offset_r16_,
      long integerSubframeOffset_r16_
   ) {
      super();
      sfn_Offset_r16 = new Asn1Integer (sfn_Offset_r16_);
      integerSubframeOffset_r16 = new Asn1Integer (integerSubframeOffset_r16_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public SSB_Configuration_r16_sfn0_Offset_r16 (
      long sfn_Offset_r16_
   ) {
      super();
      sfn_Offset_r16 = new Asn1Integer (sfn_Offset_r16_);
   }

   public void init () {
      sfn_Offset_r16 = null;
      integerSubframeOffset_r16 = null;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return sfn_Offset_r16;
         case 1: return integerSubframeOffset_r16;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "sfn-Offset-r16";
         case 1: return "integerSubframeOffset-r16";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean integerSubframeOffset_r16Present = buffer.decodeBit ("integerSubframeOffset_r16Present");

      // decode sfn_Offset_r16

      buffer.getContext().eventDispatcher.startElement("sfn_Offset_r16", -1);

      sfn_Offset_r16 = new Asn1Integer();
      sfn_Offset_r16.decode (buffer, 0, 1023);

      buffer.invokeCharacters(sfn_Offset_r16.toString());
      buffer.getContext().eventDispatcher.endElement("sfn_Offset_r16", -1);

      // decode integerSubframeOffset_r16

      if (integerSubframeOffset_r16Present) {
         buffer.getContext().eventDispatcher.startElement("integerSubframeOffset_r16", -1);

         integerSubframeOffset_r16 = new Asn1Integer();
         integerSubframeOffset_r16.decode (buffer, 0, 9);

         buffer.invokeCharacters(integerSubframeOffset_r16.toString());
         buffer.getContext().eventDispatcher.endElement("integerSubframeOffset_r16", -1);
      }
      else {
         integerSubframeOffset_r16 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (sfn_Offset_r16 != null) sfn_Offset_r16.print (_sb, "sfn_Offset_r16", _level+1);
      if (integerSubframeOffset_r16 != null) integerSubframeOffset_r16.print (_sb, "integerSubframeOffset_r16", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
