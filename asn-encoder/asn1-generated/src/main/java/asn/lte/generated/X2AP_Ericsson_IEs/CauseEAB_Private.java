/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.X2AP_Ericsson_IEs;

import com.objsys.asn1j.runtime.*;

public class CauseEAB_Private extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_X2AP_Ericsson_IEsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CauseEAB-Private";
   }

   // Integer constants for switch-case
   public static final int _UNSPECIFIED = 0;
   public static final int _UNKNOWNCELLID = 1;
   public static final int _UNKNOWNUECONTEXT = 2;
   public static final int _UNLICENSEDFEATURE = 3;
   public static final int _RESOURCESUNAVAILABLE = 4;
   public static final int _RESOURCESALREADYALLOCATED = 5;
   public static final int _TARGETULBELOWTHRESHOLD = 6;
   public static final int _ULIMPROVEMENTBELOWTHRESHOLD = 7;
   public static final int _MAXNUMBEROFENBS = 8;
   public static final int _VLANMISMATCH = 9;
   public static final int _TUNNELSINUSE = 10;

   // Singleton instances of CauseEAB_Private
   protected static final CauseEAB_Private _unspecified = new CauseEAB_Private(0);
   protected static final CauseEAB_Private _unknownCellID = new CauseEAB_Private(1);
   protected static final CauseEAB_Private _unknownUEContext = new CauseEAB_Private(2);
   protected static final CauseEAB_Private _unlicensedFeature = new CauseEAB_Private(3);
   protected static final CauseEAB_Private _resourcesUnavailable = new CauseEAB_Private(4);
   protected static final CauseEAB_Private _resourcesAlreadyAllocated = new CauseEAB_Private(5);
   protected static final CauseEAB_Private _targetUlBelowThreshold = new CauseEAB_Private(6);
   protected static final CauseEAB_Private _ulImprovementBelowThreshold = new CauseEAB_Private(7);
   protected static final CauseEAB_Private _maxNumberOfeNBs = new CauseEAB_Private(8);
   protected static final CauseEAB_Private _vlanMismatch = new CauseEAB_Private(9);
   protected static final CauseEAB_Private _tunnelsInUse = new CauseEAB_Private(10);
   private static CauseEAB_Private __undefined = new CauseEAB_Private(-999);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    *   7
    *   8
    *   9
    *   10
    */
   protected CauseEAB_Private (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for unspecified.
    */
   public static CauseEAB_Private unspecified() {
      return _unspecified;
   }

   /**
    * Singleton accessor method for unknownCellID.
    */
   public static CauseEAB_Private unknownCellID() {
      return _unknownCellID;
   }

   /**
    * Singleton accessor method for unknownUEContext.
    */
   public static CauseEAB_Private unknownUEContext() {
      return _unknownUEContext;
   }

   /**
    * Singleton accessor method for unlicensedFeature.
    */
   public static CauseEAB_Private unlicensedFeature() {
      return _unlicensedFeature;
   }

   /**
    * Singleton accessor method for resourcesUnavailable.
    */
   public static CauseEAB_Private resourcesUnavailable() {
      return _resourcesUnavailable;
   }

   /**
    * Singleton accessor method for resourcesAlreadyAllocated.
    */
   public static CauseEAB_Private resourcesAlreadyAllocated() {
      return _resourcesAlreadyAllocated;
   }

   /**
    * Singleton accessor method for targetUlBelowThreshold.
    */
   public static CauseEAB_Private targetUlBelowThreshold() {
      return _targetUlBelowThreshold;
   }

   /**
    * Singleton accessor method for ulImprovementBelowThreshold.
    */
   public static CauseEAB_Private ulImprovementBelowThreshold() {
      return _ulImprovementBelowThreshold;
   }

   /**
    * Singleton accessor method for maxNumberOfeNBs.
    */
   public static CauseEAB_Private maxNumberOfeNBs() {
      return _maxNumberOfeNBs;
   }

   /**
    * Singleton accessor method for vlanMismatch.
    */
   public static CauseEAB_Private vlanMismatch() {
      return _vlanMismatch;
   }

   /**
    * Singleton accessor method for tunnelsInUse.
    */
   public static CauseEAB_Private tunnelsInUse() {
      return _tunnelsInUse;
   }

   /** Undefined value. */
   protected static CauseEAB_Private __undefined_() { return __undefined; }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return CauseEAB_Private.valueOf( CauseEAB_Private.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static CauseEAB_Private valueOf (int _value)
   {
      switch ((int)_value) {
         case 0: return unspecified();
         case 1: return unknownCellID();
         case 2: return unknownUEContext();
         case 3: return unlicensedFeature();
         case 4: return resourcesUnavailable();
         case 5: return resourcesAlreadyAllocated();
         case 6: return targetUlBelowThreshold();
         case 7: return ulImprovementBelowThreshold();
         case 8: return maxNumberOfeNBs();
         case 9: return vlanMismatch();
         case 10: return tunnelsInUse();
         default: return __undefined_();
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      boolean extbit = buffer.decodeBit ("extbit");

      if (extbit) {
         ui = buffer.decodeSmallNonNegWholeNumber ();

         switch (ui) {
            case 0: ret = 1; break;
            case 1: ret = 2; break;
            case 2: ret = 3; break;
            case 3: ret = 4; break;
            case 4: ret = 5; break;
            case 5: ret = 6; break;
            case 6: ret = 7; break;
            case 7: ret = 8; break;
            case 8: ret = 9; break;
            case 9: ret = 10; break;
            default: ret = 0x7fffffff; break;
         }
      }
      else {
         ui = (int) buffer.decodeConsWholeNumber (1);

         switch (ui) {
            case 0: ret =  0; break;
            default: throw new Asn1InvalidEnumException (ui);
         }
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (CauseEAB_Private.valueOf(ret).toString());

      return ret;
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("unspecified");
         case 1: return ("unknownCellID");
         case 2: return ("unknownUEContext");
         case 3: return ("unlicensedFeature");
         case 4: return ("resourcesUnavailable");
         case 5: return ("resourcesAlreadyAllocated");
         case 6: return ("targetUlBelowThreshold");
         case 7: return ("ulImprovementBelowThreshold");
         case 8: return ("maxNumberOfeNBs");
         case 9: return ("vlanMismatch");
         case 10: return ("tunnelsInUse");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
