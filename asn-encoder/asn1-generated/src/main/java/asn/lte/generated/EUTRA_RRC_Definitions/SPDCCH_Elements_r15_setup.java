/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SPDCCH_Elements_r15_setup extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public Asn1Integer spdcch_SetConfigId_r15;  // optional
   public SPDCCH_Elements_r15_setup_spdcch_SetReferenceSig_r15 spdcch_SetReferenceSig_r15 = null;  // optional
   public SPDCCH_Elements_r15_setup_transmissionType_r15 transmissionType_r15 = null;  // optional
   public Asn1Integer spdcch_NoOfSymbols_r15;  // optional
   public Asn1Integer dmrs_ScramblingSequenceInt_r15;  // optional
   public SPDCCH_Elements_r15_setup_dci7_CandidatesPerAL_PDCCH_r15 dci7_CandidatesPerAL_PDCCH_r15;  // optional
   public SPDCCH_Elements_r15_setup_dci7_CandidateSetsPerAL_SPDCCH_r15 dci7_CandidateSetsPerAL_SPDCCH_r15;  // optional
   public SPDCCH_Elements_r15_setup_resourceBlockAssignment_r15 resourceBlockAssignment_r15;  // optional
   public Asn1BitString subslotApplicability_r15;  // optional
   public SPDCCH_Elements_r15_setup_al_StartingPointSPDCCH_r15 al_StartingPointSPDCCH_r15;  // optional
   public SPDCCH_Elements_r15_setup_subframeType_r15 subframeType_r15 = null;  // optional
   public SPDCCH_Elements_r15_setup_rateMatchingMode_r15 rateMatchingMode_r15 = null;  // optional
   public Asn1OpenExt extElem1;

   public SPDCCH_Elements_r15_setup () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SPDCCH_Elements_r15_setup (
      Asn1Integer spdcch_SetConfigId_r15_,
      SPDCCH_Elements_r15_setup_spdcch_SetReferenceSig_r15 spdcch_SetReferenceSig_r15_,
      SPDCCH_Elements_r15_setup_transmissionType_r15 transmissionType_r15_,
      Asn1Integer spdcch_NoOfSymbols_r15_,
      Asn1Integer dmrs_ScramblingSequenceInt_r15_,
      SPDCCH_Elements_r15_setup_dci7_CandidatesPerAL_PDCCH_r15 dci7_CandidatesPerAL_PDCCH_r15_,
      SPDCCH_Elements_r15_setup_dci7_CandidateSetsPerAL_SPDCCH_r15 dci7_CandidateSetsPerAL_SPDCCH_r15_,
      SPDCCH_Elements_r15_setup_resourceBlockAssignment_r15 resourceBlockAssignment_r15_,
      Asn1BitString subslotApplicability_r15_,
      SPDCCH_Elements_r15_setup_al_StartingPointSPDCCH_r15 al_StartingPointSPDCCH_r15_,
      SPDCCH_Elements_r15_setup_subframeType_r15 subframeType_r15_,
      SPDCCH_Elements_r15_setup_rateMatchingMode_r15 rateMatchingMode_r15_
   ) {
      super();
      spdcch_SetConfigId_r15 = spdcch_SetConfigId_r15_;
      spdcch_SetReferenceSig_r15 = spdcch_SetReferenceSig_r15_;
      transmissionType_r15 = transmissionType_r15_;
      spdcch_NoOfSymbols_r15 = spdcch_NoOfSymbols_r15_;
      dmrs_ScramblingSequenceInt_r15 = dmrs_ScramblingSequenceInt_r15_;
      dci7_CandidatesPerAL_PDCCH_r15 = dci7_CandidatesPerAL_PDCCH_r15_;
      dci7_CandidateSetsPerAL_SPDCCH_r15 = dci7_CandidateSetsPerAL_SPDCCH_r15_;
      resourceBlockAssignment_r15 = resourceBlockAssignment_r15_;
      subslotApplicability_r15 = subslotApplicability_r15_;
      al_StartingPointSPDCCH_r15 = al_StartingPointSPDCCH_r15_;
      subframeType_r15 = subframeType_r15_;
      rateMatchingMode_r15 = rateMatchingMode_r15_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SPDCCH_Elements_r15_setup (long spdcch_SetConfigId_r15_,
      SPDCCH_Elements_r15_setup_spdcch_SetReferenceSig_r15 spdcch_SetReferenceSig_r15_,
      SPDCCH_Elements_r15_setup_transmissionType_r15 transmissionType_r15_,
      long spdcch_NoOfSymbols_r15_,
      long dmrs_ScramblingSequenceInt_r15_,
      SPDCCH_Elements_r15_setup_dci7_CandidatesPerAL_PDCCH_r15 dci7_CandidatesPerAL_PDCCH_r15_,
      SPDCCH_Elements_r15_setup_dci7_CandidateSetsPerAL_SPDCCH_r15 dci7_CandidateSetsPerAL_SPDCCH_r15_,
      SPDCCH_Elements_r15_setup_resourceBlockAssignment_r15 resourceBlockAssignment_r15_,
      Asn1BitString subslotApplicability_r15_,
      SPDCCH_Elements_r15_setup_al_StartingPointSPDCCH_r15 al_StartingPointSPDCCH_r15_,
      SPDCCH_Elements_r15_setup_subframeType_r15 subframeType_r15_,
      SPDCCH_Elements_r15_setup_rateMatchingMode_r15 rateMatchingMode_r15_
   ) {
      super();
      spdcch_SetConfigId_r15 = new Asn1Integer (spdcch_SetConfigId_r15_);
      spdcch_SetReferenceSig_r15 = spdcch_SetReferenceSig_r15_;
      transmissionType_r15 = transmissionType_r15_;
      spdcch_NoOfSymbols_r15 = new Asn1Integer (spdcch_NoOfSymbols_r15_);
      dmrs_ScramblingSequenceInt_r15 = new Asn1Integer (dmrs_ScramblingSequenceInt_r15_);
      dci7_CandidatesPerAL_PDCCH_r15 = dci7_CandidatesPerAL_PDCCH_r15_;
      dci7_CandidateSetsPerAL_SPDCCH_r15 = dci7_CandidateSetsPerAL_SPDCCH_r15_;
      resourceBlockAssignment_r15 = resourceBlockAssignment_r15_;
      subslotApplicability_r15 = subslotApplicability_r15_;
      al_StartingPointSPDCCH_r15 = al_StartingPointSPDCCH_r15_;
      subframeType_r15 = subframeType_r15_;
      rateMatchingMode_r15 = rateMatchingMode_r15_;
   }

   public void init () {
      spdcch_SetConfigId_r15 = null;
      spdcch_SetReferenceSig_r15 = null;
      transmissionType_r15 = null;
      spdcch_NoOfSymbols_r15 = null;
      dmrs_ScramblingSequenceInt_r15 = null;
      dci7_CandidatesPerAL_PDCCH_r15 = null;
      dci7_CandidateSetsPerAL_SPDCCH_r15 = null;
      resourceBlockAssignment_r15 = null;
      subslotApplicability_r15 = null;
      al_StartingPointSPDCCH_r15 = null;
      subframeType_r15 = null;
      rateMatchingMode_r15 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 13; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return spdcch_SetConfigId_r15;
         case 1: return spdcch_SetReferenceSig_r15;
         case 2: return transmissionType_r15;
         case 3: return spdcch_NoOfSymbols_r15;
         case 4: return dmrs_ScramblingSequenceInt_r15;
         case 5: return dci7_CandidatesPerAL_PDCCH_r15;
         case 6: return dci7_CandidateSetsPerAL_SPDCCH_r15;
         case 7: return resourceBlockAssignment_r15;
         case 8: return subslotApplicability_r15;
         case 9: return al_StartingPointSPDCCH_r15;
         case 10: return subframeType_r15;
         case 11: return rateMatchingMode_r15;
         case 12: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "spdcch-SetConfigId-r15";
         case 1: return "spdcch-SetReferenceSig-r15";
         case 2: return "transmissionType-r15";
         case 3: return "spdcch-NoOfSymbols-r15";
         case 4: return "dmrs-ScramblingSequenceInt-r15";
         case 5: return "dci7-CandidatesPerAL-PDCCH-r15";
         case 6: return "dci7-CandidateSetsPerAL-SPDCCH-r15";
         case 7: return "resourceBlockAssignment-r15";
         case 8: return "subslotApplicability-r15";
         case 9: return "al-StartingPointSPDCCH-r15";
         case 10: return "subframeType-r15";
         case 11: return "rateMatchingMode-r15";
         case 12: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean spdcch_SetConfigId_r15Present = buffer.decodeBit ("spdcch_SetConfigId_r15Present");
      boolean spdcch_SetReferenceSig_r15Present = buffer.decodeBit ("spdcch_SetReferenceSig_r15Present");
      boolean transmissionType_r15Present = buffer.decodeBit ("transmissionType_r15Present");
      boolean spdcch_NoOfSymbols_r15Present = buffer.decodeBit ("spdcch_NoOfSymbols_r15Present");
      boolean dmrs_ScramblingSequenceInt_r15Present = buffer.decodeBit ("dmrs_ScramblingSequenceInt_r15Present");
      boolean dci7_CandidatesPerAL_PDCCH_r15Present = buffer.decodeBit ("dci7_CandidatesPerAL_PDCCH_r15Present");
      boolean dci7_CandidateSetsPerAL_SPDCCH_r15Present = buffer.decodeBit ("dci7_CandidateSetsPerAL_SPDCCH_r15Present");
      boolean resourceBlockAssignment_r15Present = buffer.decodeBit ("resourceBlockAssignment_r15Present");
      boolean subslotApplicability_r15Present = buffer.decodeBit ("subslotApplicability_r15Present");
      boolean al_StartingPointSPDCCH_r15Present = buffer.decodeBit ("al_StartingPointSPDCCH_r15Present");
      boolean subframeType_r15Present = buffer.decodeBit ("subframeType_r15Present");
      boolean rateMatchingMode_r15Present = buffer.decodeBit ("rateMatchingMode_r15Present");

      // decode spdcch_SetConfigId_r15

      if (spdcch_SetConfigId_r15Present) {
         buffer.getContext().eventDispatcher.startElement("spdcch_SetConfigId_r15", -1);

         spdcch_SetConfigId_r15 = new Asn1Integer();
         spdcch_SetConfigId_r15.decode (buffer, 0, 3);

         buffer.invokeCharacters(spdcch_SetConfigId_r15.toString());
         buffer.getContext().eventDispatcher.endElement("spdcch_SetConfigId_r15", -1);
      }
      else {
         spdcch_SetConfigId_r15 = null;
      }

      // decode spdcch_SetReferenceSig_r15

      if (spdcch_SetReferenceSig_r15Present) {
         buffer.getContext().eventDispatcher.startElement("spdcch_SetReferenceSig_r15", -1);

         int tval = SPDCCH_Elements_r15_setup_spdcch_SetReferenceSig_r15.decodeEnumValue (buffer);
         spdcch_SetReferenceSig_r15 = SPDCCH_Elements_r15_setup_spdcch_SetReferenceSig_r15.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("spdcch_SetReferenceSig_r15", -1);
      }
      else {
         spdcch_SetReferenceSig_r15 = null;
      }

      // decode transmissionType_r15

      if (transmissionType_r15Present) {
         buffer.getContext().eventDispatcher.startElement("transmissionType_r15", -1);

         int tval = SPDCCH_Elements_r15_setup_transmissionType_r15.decodeEnumValue (buffer);
         transmissionType_r15 = SPDCCH_Elements_r15_setup_transmissionType_r15.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("transmissionType_r15", -1);
      }
      else {
         transmissionType_r15 = null;
      }

      // decode spdcch_NoOfSymbols_r15

      if (spdcch_NoOfSymbols_r15Present) {
         buffer.getContext().eventDispatcher.startElement("spdcch_NoOfSymbols_r15", -1);

         spdcch_NoOfSymbols_r15 = new Asn1Integer();
         spdcch_NoOfSymbols_r15.decode (buffer, 1, 2);

         buffer.invokeCharacters(spdcch_NoOfSymbols_r15.toString());
         buffer.getContext().eventDispatcher.endElement("spdcch_NoOfSymbols_r15", -1);
      }
      else {
         spdcch_NoOfSymbols_r15 = null;
      }

      // decode dmrs_ScramblingSequenceInt_r15

      if (dmrs_ScramblingSequenceInt_r15Present) {
         buffer.getContext().eventDispatcher.startElement("dmrs_ScramblingSequenceInt_r15", -1);

         dmrs_ScramblingSequenceInt_r15 = new Asn1Integer();
         dmrs_ScramblingSequenceInt_r15.decode (buffer, 0, 503);

         buffer.invokeCharacters(dmrs_ScramblingSequenceInt_r15.toString());
         buffer.getContext().eventDispatcher.endElement("dmrs_ScramblingSequenceInt_r15", -1);
      }
      else {
         dmrs_ScramblingSequenceInt_r15 = null;
      }

      // decode dci7_CandidatesPerAL_PDCCH_r15

      if (dci7_CandidatesPerAL_PDCCH_r15Present) {
         buffer.getContext().eventDispatcher.startElement("dci7_CandidatesPerAL_PDCCH_r15", -1);

         dci7_CandidatesPerAL_PDCCH_r15 = new SPDCCH_Elements_r15_setup_dci7_CandidatesPerAL_PDCCH_r15();
         dci7_CandidatesPerAL_PDCCH_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("dci7_CandidatesPerAL_PDCCH_r15", -1);
      }
      else {
         dci7_CandidatesPerAL_PDCCH_r15 = null;
      }

      // decode dci7_CandidateSetsPerAL_SPDCCH_r15

      if (dci7_CandidateSetsPerAL_SPDCCH_r15Present) {
         buffer.getContext().eventDispatcher.startElement("dci7_CandidateSetsPerAL_SPDCCH_r15", -1);

         dci7_CandidateSetsPerAL_SPDCCH_r15 = new SPDCCH_Elements_r15_setup_dci7_CandidateSetsPerAL_SPDCCH_r15();
         dci7_CandidateSetsPerAL_SPDCCH_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("dci7_CandidateSetsPerAL_SPDCCH_r15", -1);
      }
      else {
         dci7_CandidateSetsPerAL_SPDCCH_r15 = null;
      }

      // decode resourceBlockAssignment_r15

      if (resourceBlockAssignment_r15Present) {
         buffer.getContext().eventDispatcher.startElement("resourceBlockAssignment_r15", -1);

         resourceBlockAssignment_r15 = new SPDCCH_Elements_r15_setup_resourceBlockAssignment_r15();
         resourceBlockAssignment_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("resourceBlockAssignment_r15", -1);
      }
      else {
         resourceBlockAssignment_r15 = null;
      }

      // decode subslotApplicability_r15

      if (subslotApplicability_r15Present) {
         buffer.getContext().eventDispatcher.startElement("subslotApplicability_r15", -1);

         subslotApplicability_r15 = new Asn1BitString();
         subslotApplicability_r15.decode (buffer, 5, 5);

         buffer.invokeCharacters(subslotApplicability_r15.toString());
         buffer.getContext().eventDispatcher.endElement("subslotApplicability_r15", -1);
      }
      else {
         subslotApplicability_r15 = null;
      }

      // decode al_StartingPointSPDCCH_r15

      if (al_StartingPointSPDCCH_r15Present) {
         buffer.getContext().eventDispatcher.startElement("al_StartingPointSPDCCH_r15", -1);

         al_StartingPointSPDCCH_r15 = new SPDCCH_Elements_r15_setup_al_StartingPointSPDCCH_r15();
         al_StartingPointSPDCCH_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("al_StartingPointSPDCCH_r15", -1);
      }
      else {
         al_StartingPointSPDCCH_r15 = null;
      }

      // decode subframeType_r15

      if (subframeType_r15Present) {
         buffer.getContext().eventDispatcher.startElement("subframeType_r15", -1);

         int tval = SPDCCH_Elements_r15_setup_subframeType_r15.decodeEnumValue (buffer);
         subframeType_r15 = SPDCCH_Elements_r15_setup_subframeType_r15.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("subframeType_r15", -1);
      }
      else {
         subframeType_r15 = null;
      }

      // decode rateMatchingMode_r15

      if (rateMatchingMode_r15Present) {
         buffer.getContext().eventDispatcher.startElement("rateMatchingMode_r15", -1);

         int tval = SPDCCH_Elements_r15_setup_rateMatchingMode_r15.decodeEnumValue (buffer);
         rateMatchingMode_r15 = SPDCCH_Elements_r15_setup_rateMatchingMode_r15.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("rateMatchingMode_r15", -1);
      }
      else {
         rateMatchingMode_r15 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (spdcch_SetConfigId_r15 != null) spdcch_SetConfigId_r15.print (_sb, "spdcch_SetConfigId_r15", _level+1);
      if (spdcch_SetReferenceSig_r15 != null) spdcch_SetReferenceSig_r15.print (_sb, "spdcch_SetReferenceSig_r15", _level+1);
      if (transmissionType_r15 != null) transmissionType_r15.print (_sb, "transmissionType_r15", _level+1);
      if (spdcch_NoOfSymbols_r15 != null) spdcch_NoOfSymbols_r15.print (_sb, "spdcch_NoOfSymbols_r15", _level+1);
      if (dmrs_ScramblingSequenceInt_r15 != null) dmrs_ScramblingSequenceInt_r15.print (_sb, "dmrs_ScramblingSequenceInt_r15", _level+1);
      if (dci7_CandidatesPerAL_PDCCH_r15 != null) dci7_CandidatesPerAL_PDCCH_r15.print (_sb, "dci7_CandidatesPerAL_PDCCH_r15", _level+1);
      if (dci7_CandidateSetsPerAL_SPDCCH_r15 != null) dci7_CandidateSetsPerAL_SPDCCH_r15.print (_sb, "dci7_CandidateSetsPerAL_SPDCCH_r15", _level+1);
      if (resourceBlockAssignment_r15 != null) resourceBlockAssignment_r15.print (_sb, "resourceBlockAssignment_r15", _level+1);
      if (subslotApplicability_r15 != null) subslotApplicability_r15.print (_sb, "subslotApplicability_r15", _level+1);
      if (al_StartingPointSPDCCH_r15 != null) al_StartingPointSPDCCH_r15.print (_sb, "al_StartingPointSPDCCH_r15", _level+1);
      if (subframeType_r15 != null) subframeType_r15.print (_sb, "subframeType_r15", _level+1);
      if (rateMatchingMode_r15 != null) rateMatchingMode_r15.print (_sb, "rateMatchingMode_r15", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
