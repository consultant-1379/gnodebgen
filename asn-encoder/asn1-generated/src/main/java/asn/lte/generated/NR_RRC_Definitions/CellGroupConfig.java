/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class CellGroupConfig extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CellGroupConfig";
   }

   public CellGroupId cellGroupId;
   public CellGroupConfig_rlc_BearerToAddModList rlc_BearerToAddModList;  // optional
   public CellGroupConfig_rlc_BearerToReleaseList rlc_BearerToReleaseList;  // optional
   public MAC_CellGroupConfig mac_CellGroupConfig;  // optional
   public PhysicalCellGroupConfig physicalCellGroupConfig;  // optional
   public SpCellConfig spCellConfig;  // optional
   public CellGroupConfig_sCellToAddModList sCellToAddModList;  // optional
   public CellGroupConfig_sCellToReleaseList sCellToReleaseList;  // optional
   public boolean mV2ExtPresent;
   public CellGroupConfig_reportUplinkTxDirectCurrent reportUplinkTxDirectCurrent = null;  // optional
   public boolean mV3ExtPresent;
   public Asn1BitString bap_Address_r16;  // optional
   public CellGroupConfig_bh_RLC_ChannelToAddModList_r16 bh_RLC_ChannelToAddModList_r16;  // optional
   public CellGroupConfig_bh_RLC_ChannelToReleaseList_r16 bh_RLC_ChannelToReleaseList_r16;  // optional
   public CellGroupConfig_f1c_TransferPath_r16 f1c_TransferPath_r16 = null;  // optional
   public CellGroupConfig_simultaneousTCI_UpdateList1_r16 simultaneousTCI_UpdateList1_r16;  // optional
   public CellGroupConfig_simultaneousTCI_UpdateList2_r16 simultaneousTCI_UpdateList2_r16;  // optional
   public CellGroupConfig_simultaneousSpatial_UpdatedList1_r16 simultaneousSpatial_UpdatedList1_r16;  // optional
   public CellGroupConfig_simultaneousSpatial_UpdatedList2_r16 simultaneousSpatial_UpdatedList2_r16;  // optional
   public CellGroupConfig_uplinkTxSwitchingOption_r16 uplinkTxSwitchingOption_r16 = null;  // optional
   public CellGroupConfig_uplinkTxSwitchingPowerBoosting_r16 uplinkTxSwitchingPowerBoosting_r16 = null;  // optional
   public Asn1OpenExt extElem1;

   public CellGroupConfig () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CellGroupConfig (
      CellGroupId cellGroupId_,
      CellGroupConfig_rlc_BearerToAddModList rlc_BearerToAddModList_,
      CellGroupConfig_rlc_BearerToReleaseList rlc_BearerToReleaseList_,
      MAC_CellGroupConfig mac_CellGroupConfig_,
      PhysicalCellGroupConfig physicalCellGroupConfig_,
      SpCellConfig spCellConfig_,
      CellGroupConfig_sCellToAddModList sCellToAddModList_,
      CellGroupConfig_sCellToReleaseList sCellToReleaseList_,
      CellGroupConfig_reportUplinkTxDirectCurrent reportUplinkTxDirectCurrent_,
      Asn1BitString bap_Address_r16_,
      CellGroupConfig_bh_RLC_ChannelToAddModList_r16 bh_RLC_ChannelToAddModList_r16_,
      CellGroupConfig_bh_RLC_ChannelToReleaseList_r16 bh_RLC_ChannelToReleaseList_r16_,
      CellGroupConfig_f1c_TransferPath_r16 f1c_TransferPath_r16_,
      CellGroupConfig_simultaneousTCI_UpdateList1_r16 simultaneousTCI_UpdateList1_r16_,
      CellGroupConfig_simultaneousTCI_UpdateList2_r16 simultaneousTCI_UpdateList2_r16_,
      CellGroupConfig_simultaneousSpatial_UpdatedList1_r16 simultaneousSpatial_UpdatedList1_r16_,
      CellGroupConfig_simultaneousSpatial_UpdatedList2_r16 simultaneousSpatial_UpdatedList2_r16_,
      CellGroupConfig_uplinkTxSwitchingOption_r16 uplinkTxSwitchingOption_r16_,
      CellGroupConfig_uplinkTxSwitchingPowerBoosting_r16 uplinkTxSwitchingPowerBoosting_r16_
   ) {
      super();
      cellGroupId = cellGroupId_;
      rlc_BearerToAddModList = rlc_BearerToAddModList_;
      rlc_BearerToReleaseList = rlc_BearerToReleaseList_;
      mac_CellGroupConfig = mac_CellGroupConfig_;
      physicalCellGroupConfig = physicalCellGroupConfig_;
      spCellConfig = spCellConfig_;
      sCellToAddModList = sCellToAddModList_;
      sCellToReleaseList = sCellToReleaseList_;
      reportUplinkTxDirectCurrent = reportUplinkTxDirectCurrent_;
      bap_Address_r16 = bap_Address_r16_;
      bh_RLC_ChannelToAddModList_r16 = bh_RLC_ChannelToAddModList_r16_;
      bh_RLC_ChannelToReleaseList_r16 = bh_RLC_ChannelToReleaseList_r16_;
      f1c_TransferPath_r16 = f1c_TransferPath_r16_;
      simultaneousTCI_UpdateList1_r16 = simultaneousTCI_UpdateList1_r16_;
      simultaneousTCI_UpdateList2_r16 = simultaneousTCI_UpdateList2_r16_;
      simultaneousSpatial_UpdatedList1_r16 = simultaneousSpatial_UpdatedList1_r16_;
      simultaneousSpatial_UpdatedList2_r16 = simultaneousSpatial_UpdatedList2_r16_;
      uplinkTxSwitchingOption_r16 = uplinkTxSwitchingOption_r16_;
      uplinkTxSwitchingPowerBoosting_r16 = uplinkTxSwitchingPowerBoosting_r16_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public CellGroupConfig (
      CellGroupId cellGroupId_
   ) {
      super();
      cellGroupId = cellGroupId_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public CellGroupConfig (long cellGroupId_,
      CellGroupConfig_rlc_BearerToAddModList rlc_BearerToAddModList_,
      CellGroupConfig_rlc_BearerToReleaseList rlc_BearerToReleaseList_,
      MAC_CellGroupConfig mac_CellGroupConfig_,
      PhysicalCellGroupConfig physicalCellGroupConfig_,
      SpCellConfig spCellConfig_,
      CellGroupConfig_sCellToAddModList sCellToAddModList_,
      CellGroupConfig_sCellToReleaseList sCellToReleaseList_,
      CellGroupConfig_reportUplinkTxDirectCurrent reportUplinkTxDirectCurrent_,
      Asn1BitString bap_Address_r16_,
      CellGroupConfig_bh_RLC_ChannelToAddModList_r16 bh_RLC_ChannelToAddModList_r16_,
      CellGroupConfig_bh_RLC_ChannelToReleaseList_r16 bh_RLC_ChannelToReleaseList_r16_,
      CellGroupConfig_f1c_TransferPath_r16 f1c_TransferPath_r16_,
      CellGroupConfig_simultaneousTCI_UpdateList1_r16 simultaneousTCI_UpdateList1_r16_,
      CellGroupConfig_simultaneousTCI_UpdateList2_r16 simultaneousTCI_UpdateList2_r16_,
      CellGroupConfig_simultaneousSpatial_UpdatedList1_r16 simultaneousSpatial_UpdatedList1_r16_,
      CellGroupConfig_simultaneousSpatial_UpdatedList2_r16 simultaneousSpatial_UpdatedList2_r16_,
      CellGroupConfig_uplinkTxSwitchingOption_r16 uplinkTxSwitchingOption_r16_,
      CellGroupConfig_uplinkTxSwitchingPowerBoosting_r16 uplinkTxSwitchingPowerBoosting_r16_
   ) {
      super();
      cellGroupId = new CellGroupId (cellGroupId_);
      rlc_BearerToAddModList = rlc_BearerToAddModList_;
      rlc_BearerToReleaseList = rlc_BearerToReleaseList_;
      mac_CellGroupConfig = mac_CellGroupConfig_;
      physicalCellGroupConfig = physicalCellGroupConfig_;
      spCellConfig = spCellConfig_;
      sCellToAddModList = sCellToAddModList_;
      sCellToReleaseList = sCellToReleaseList_;
      reportUplinkTxDirectCurrent = reportUplinkTxDirectCurrent_;
      bap_Address_r16 = bap_Address_r16_;
      bh_RLC_ChannelToAddModList_r16 = bh_RLC_ChannelToAddModList_r16_;
      bh_RLC_ChannelToReleaseList_r16 = bh_RLC_ChannelToReleaseList_r16_;
      f1c_TransferPath_r16 = f1c_TransferPath_r16_;
      simultaneousTCI_UpdateList1_r16 = simultaneousTCI_UpdateList1_r16_;
      simultaneousTCI_UpdateList2_r16 = simultaneousTCI_UpdateList2_r16_;
      simultaneousSpatial_UpdatedList1_r16 = simultaneousSpatial_UpdatedList1_r16_;
      simultaneousSpatial_UpdatedList2_r16 = simultaneousSpatial_UpdatedList2_r16_;
      uplinkTxSwitchingOption_r16 = uplinkTxSwitchingOption_r16_;
      uplinkTxSwitchingPowerBoosting_r16 = uplinkTxSwitchingPowerBoosting_r16_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public CellGroupConfig (
      long cellGroupId_
   ) {
      super();
      cellGroupId = new CellGroupId (cellGroupId_);
   }

   public void init () {
      cellGroupId = null;
      rlc_BearerToAddModList = null;
      rlc_BearerToReleaseList = null;
      mac_CellGroupConfig = null;
      physicalCellGroupConfig = null;
      spCellConfig = null;
      sCellToAddModList = null;
      sCellToReleaseList = null;
      reportUplinkTxDirectCurrent = null;
      bap_Address_r16 = null;
      bh_RLC_ChannelToAddModList_r16 = null;
      bh_RLC_ChannelToReleaseList_r16 = null;
      f1c_TransferPath_r16 = null;
      simultaneousTCI_UpdateList1_r16 = null;
      simultaneousTCI_UpdateList2_r16 = null;
      simultaneousSpatial_UpdatedList1_r16 = null;
      simultaneousSpatial_UpdatedList2_r16 = null;
      uplinkTxSwitchingOption_r16 = null;
      uplinkTxSwitchingPowerBoosting_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 20; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return cellGroupId;
         case 1: return rlc_BearerToAddModList;
         case 2: return rlc_BearerToReleaseList;
         case 3: return mac_CellGroupConfig;
         case 4: return physicalCellGroupConfig;
         case 5: return spCellConfig;
         case 6: return sCellToAddModList;
         case 7: return sCellToReleaseList;
         case 8: return reportUplinkTxDirectCurrent;
         case 9: return bap_Address_r16;
         case 10: return bh_RLC_ChannelToAddModList_r16;
         case 11: return bh_RLC_ChannelToReleaseList_r16;
         case 12: return f1c_TransferPath_r16;
         case 13: return simultaneousTCI_UpdateList1_r16;
         case 14: return simultaneousTCI_UpdateList2_r16;
         case 15: return simultaneousSpatial_UpdatedList1_r16;
         case 16: return simultaneousSpatial_UpdatedList2_r16;
         case 17: return uplinkTxSwitchingOption_r16;
         case 18: return uplinkTxSwitchingPowerBoosting_r16;
         case 19: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "cellGroupId";
         case 1: return "rlc-BearerToAddModList";
         case 2: return "rlc-BearerToReleaseList";
         case 3: return "mac-CellGroupConfig";
         case 4: return "physicalCellGroupConfig";
         case 5: return "spCellConfig";
         case 6: return "sCellToAddModList";
         case 7: return "sCellToReleaseList";
         case 8: return "reportUplinkTxDirectCurrent";
         case 9: return "bap-Address-r16";
         case 10: return "bh-RLC-ChannelToAddModList-r16";
         case 11: return "bh-RLC-ChannelToReleaseList-r16";
         case 12: return "f1c-TransferPath-r16";
         case 13: return "simultaneousTCI-UpdateList1-r16";
         case 14: return "simultaneousTCI-UpdateList2-r16";
         case 15: return "simultaneousSpatial-UpdatedList1-r16";
         case 16: return "simultaneousSpatial-UpdatedList2-r16";
         case 17: return "uplinkTxSwitchingOption-r16";
         case 18: return "uplinkTxSwitchingPowerBoosting-r16";
         case 19: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean rlc_BearerToAddModListPresent = buffer.decodeBit ("rlc_BearerToAddModListPresent");
      boolean rlc_BearerToReleaseListPresent = buffer.decodeBit ("rlc_BearerToReleaseListPresent");
      boolean mac_CellGroupConfigPresent = buffer.decodeBit ("mac_CellGroupConfigPresent");
      boolean physicalCellGroupConfigPresent = buffer.decodeBit ("physicalCellGroupConfigPresent");
      boolean spCellConfigPresent = buffer.decodeBit ("spCellConfigPresent");
      boolean sCellToAddModListPresent = buffer.decodeBit ("sCellToAddModListPresent");
      boolean sCellToReleaseListPresent = buffer.decodeBit ("sCellToReleaseListPresent");

      // decode cellGroupId

      buffer.getContext().eventDispatcher.startElement("cellGroupId", -1);

      cellGroupId = new CellGroupId();
      cellGroupId.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("cellGroupId", -1);

      // decode rlc_BearerToAddModList

      if (rlc_BearerToAddModListPresent) {
         buffer.getContext().eventDispatcher.startElement("rlc_BearerToAddModList", -1);

         rlc_BearerToAddModList = new CellGroupConfig_rlc_BearerToAddModList();
         rlc_BearerToAddModList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("rlc_BearerToAddModList", -1);
      }
      else {
         rlc_BearerToAddModList = null;
      }

      // decode rlc_BearerToReleaseList

      if (rlc_BearerToReleaseListPresent) {
         buffer.getContext().eventDispatcher.startElement("rlc_BearerToReleaseList", -1);

         rlc_BearerToReleaseList = new CellGroupConfig_rlc_BearerToReleaseList();
         rlc_BearerToReleaseList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("rlc_BearerToReleaseList", -1);
      }
      else {
         rlc_BearerToReleaseList = null;
      }

      // decode mac_CellGroupConfig

      if (mac_CellGroupConfigPresent) {
         buffer.getContext().eventDispatcher.startElement("mac_CellGroupConfig", -1);

         mac_CellGroupConfig = new MAC_CellGroupConfig();
         mac_CellGroupConfig.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("mac_CellGroupConfig", -1);
      }
      else {
         mac_CellGroupConfig = null;
      }

      // decode physicalCellGroupConfig

      if (physicalCellGroupConfigPresent) {
         buffer.getContext().eventDispatcher.startElement("physicalCellGroupConfig", -1);

         physicalCellGroupConfig = new PhysicalCellGroupConfig();
         physicalCellGroupConfig.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("physicalCellGroupConfig", -1);
      }
      else {
         physicalCellGroupConfig = null;
      }

      // decode spCellConfig

      if (spCellConfigPresent) {
         buffer.getContext().eventDispatcher.startElement("spCellConfig", -1);

         spCellConfig = new SpCellConfig();
         spCellConfig.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("spCellConfig", -1);
      }
      else {
         spCellConfig = null;
      }

      // decode sCellToAddModList

      if (sCellToAddModListPresent) {
         buffer.getContext().eventDispatcher.startElement("sCellToAddModList", -1);

         sCellToAddModList = new CellGroupConfig_sCellToAddModList();
         sCellToAddModList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sCellToAddModList", -1);
      }
      else {
         sCellToAddModList = null;
      }

      // decode sCellToReleaseList

      if (sCellToReleaseListPresent) {
         buffer.getContext().eventDispatcher.startElement("sCellToReleaseList", -1);

         sCellToReleaseList = new CellGroupConfig_sCellToReleaseList();
         sCellToReleaseList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sCellToReleaseList", -1);
      }
      else {
         sCellToReleaseList = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean reportUplinkTxDirectCurrentPresent = buffer.decodeBit ("reportUplinkTxDirectCurrentPresent");

            // decode reportUplinkTxDirectCurrent

            if (reportUplinkTxDirectCurrentPresent) {
               buffer.getContext().eventDispatcher.startElement("reportUplinkTxDirectCurrent", -1);

               int tval = CellGroupConfig_reportUplinkTxDirectCurrent.decodeEnumValue (buffer);
               reportUplinkTxDirectCurrent = CellGroupConfig_reportUplinkTxDirectCurrent.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("reportUplinkTxDirectCurrent", -1);
            }
            else {
               reportUplinkTxDirectCurrent = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean bap_Address_r16Present = buffer.decodeBit ("bap_Address_r16Present");

            boolean bh_RLC_ChannelToAddModList_r16Present = buffer.decodeBit ("bh_RLC_ChannelToAddModList_r16Present");

            boolean bh_RLC_ChannelToReleaseList_r16Present = buffer.decodeBit ("bh_RLC_ChannelToReleaseList_r16Present");

            boolean f1c_TransferPath_r16Present = buffer.decodeBit ("f1c_TransferPath_r16Present");

            boolean simultaneousTCI_UpdateList1_r16Present = buffer.decodeBit ("simultaneousTCI_UpdateList1_r16Present");

            boolean simultaneousTCI_UpdateList2_r16Present = buffer.decodeBit ("simultaneousTCI_UpdateList2_r16Present");

            boolean simultaneousSpatial_UpdatedList1_r16Present = buffer.decodeBit ("simultaneousSpatial_UpdatedList1_r16Present");

            boolean simultaneousSpatial_UpdatedList2_r16Present = buffer.decodeBit ("simultaneousSpatial_UpdatedList2_r16Present");

            boolean uplinkTxSwitchingOption_r16Present = buffer.decodeBit ("uplinkTxSwitchingOption_r16Present");

            boolean uplinkTxSwitchingPowerBoosting_r16Present = buffer.decodeBit ("uplinkTxSwitchingPowerBoosting_r16Present");

            // decode bap_Address_r16

            if (bap_Address_r16Present) {
               buffer.getContext().eventDispatcher.startElement("bap_Address_r16", -1);

               bap_Address_r16 = new Asn1BitString();
               bap_Address_r16.decode (buffer, 10, 10);

               buffer.invokeCharacters(bap_Address_r16.toString());
               buffer.getContext().eventDispatcher.endElement("bap_Address_r16", -1);
            }
            else {
               bap_Address_r16 = null;
            }

            // decode bh_RLC_ChannelToAddModList_r16

            if (bh_RLC_ChannelToAddModList_r16Present) {
               buffer.getContext().eventDispatcher.startElement("bh_RLC_ChannelToAddModList_r16", -1);

               bh_RLC_ChannelToAddModList_r16 = new CellGroupConfig_bh_RLC_ChannelToAddModList_r16();
               bh_RLC_ChannelToAddModList_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("bh_RLC_ChannelToAddModList_r16", -1);
            }
            else {
               bh_RLC_ChannelToAddModList_r16 = null;
            }

            // decode bh_RLC_ChannelToReleaseList_r16

            if (bh_RLC_ChannelToReleaseList_r16Present) {
               buffer.getContext().eventDispatcher.startElement("bh_RLC_ChannelToReleaseList_r16", -1);

               bh_RLC_ChannelToReleaseList_r16 = new CellGroupConfig_bh_RLC_ChannelToReleaseList_r16();
               bh_RLC_ChannelToReleaseList_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("bh_RLC_ChannelToReleaseList_r16", -1);
            }
            else {
               bh_RLC_ChannelToReleaseList_r16 = null;
            }

            // decode f1c_TransferPath_r16

            if (f1c_TransferPath_r16Present) {
               buffer.getContext().eventDispatcher.startElement("f1c_TransferPath_r16", -1);

               int tval = CellGroupConfig_f1c_TransferPath_r16.decodeEnumValue (buffer);
               f1c_TransferPath_r16 = CellGroupConfig_f1c_TransferPath_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("f1c_TransferPath_r16", -1);
            }
            else {
               f1c_TransferPath_r16 = null;
            }

            // decode simultaneousTCI_UpdateList1_r16

            if (simultaneousTCI_UpdateList1_r16Present) {
               buffer.getContext().eventDispatcher.startElement("simultaneousTCI_UpdateList1_r16", -1);

               simultaneousTCI_UpdateList1_r16 = new CellGroupConfig_simultaneousTCI_UpdateList1_r16();
               simultaneousTCI_UpdateList1_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("simultaneousTCI_UpdateList1_r16", -1);
            }
            else {
               simultaneousTCI_UpdateList1_r16 = null;
            }

            // decode simultaneousTCI_UpdateList2_r16

            if (simultaneousTCI_UpdateList2_r16Present) {
               buffer.getContext().eventDispatcher.startElement("simultaneousTCI_UpdateList2_r16", -1);

               simultaneousTCI_UpdateList2_r16 = new CellGroupConfig_simultaneousTCI_UpdateList2_r16();
               simultaneousTCI_UpdateList2_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("simultaneousTCI_UpdateList2_r16", -1);
            }
            else {
               simultaneousTCI_UpdateList2_r16 = null;
            }

            // decode simultaneousSpatial_UpdatedList1_r16

            if (simultaneousSpatial_UpdatedList1_r16Present) {
               buffer.getContext().eventDispatcher.startElement("simultaneousSpatial_UpdatedList1_r16", -1);

               simultaneousSpatial_UpdatedList1_r16 = new CellGroupConfig_simultaneousSpatial_UpdatedList1_r16();
               simultaneousSpatial_UpdatedList1_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("simultaneousSpatial_UpdatedList1_r16", -1);
            }
            else {
               simultaneousSpatial_UpdatedList1_r16 = null;
            }

            // decode simultaneousSpatial_UpdatedList2_r16

            if (simultaneousSpatial_UpdatedList2_r16Present) {
               buffer.getContext().eventDispatcher.startElement("simultaneousSpatial_UpdatedList2_r16", -1);

               simultaneousSpatial_UpdatedList2_r16 = new CellGroupConfig_simultaneousSpatial_UpdatedList2_r16();
               simultaneousSpatial_UpdatedList2_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("simultaneousSpatial_UpdatedList2_r16", -1);
            }
            else {
               simultaneousSpatial_UpdatedList2_r16 = null;
            }

            // decode uplinkTxSwitchingOption_r16

            if (uplinkTxSwitchingOption_r16Present) {
               buffer.getContext().eventDispatcher.startElement("uplinkTxSwitchingOption_r16", -1);

               int tval = CellGroupConfig_uplinkTxSwitchingOption_r16.decodeEnumValue (buffer);
               uplinkTxSwitchingOption_r16 = CellGroupConfig_uplinkTxSwitchingOption_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("uplinkTxSwitchingOption_r16", -1);
            }
            else {
               uplinkTxSwitchingOption_r16 = null;
            }

            // decode uplinkTxSwitchingPowerBoosting_r16

            if (uplinkTxSwitchingPowerBoosting_r16Present) {
               buffer.getContext().eventDispatcher.startElement("uplinkTxSwitchingPowerBoosting_r16", -1);

               int tval = CellGroupConfig_uplinkTxSwitchingPowerBoosting_r16.decodeEnumValue (buffer);
               uplinkTxSwitchingPowerBoosting_r16 = CellGroupConfig_uplinkTxSwitchingPowerBoosting_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("uplinkTxSwitchingPowerBoosting_r16", -1);
            }
            else {
               uplinkTxSwitchingPowerBoosting_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (cellGroupId != null) cellGroupId.print (_sb, "cellGroupId", _level+1);
      if (rlc_BearerToAddModList != null) rlc_BearerToAddModList.print (_sb, "rlc_BearerToAddModList", _level+1);
      if (rlc_BearerToReleaseList != null) rlc_BearerToReleaseList.print (_sb, "rlc_BearerToReleaseList", _level+1);
      if (mac_CellGroupConfig != null) mac_CellGroupConfig.print (_sb, "mac_CellGroupConfig", _level+1);
      if (physicalCellGroupConfig != null) physicalCellGroupConfig.print (_sb, "physicalCellGroupConfig", _level+1);
      if (spCellConfig != null) spCellConfig.print (_sb, "spCellConfig", _level+1);
      if (sCellToAddModList != null) sCellToAddModList.print (_sb, "sCellToAddModList", _level+1);
      if (sCellToReleaseList != null) sCellToReleaseList.print (_sb, "sCellToReleaseList", _level+1);
      if (reportUplinkTxDirectCurrent != null) reportUplinkTxDirectCurrent.print (_sb, "reportUplinkTxDirectCurrent", _level+1);
      if (bap_Address_r16 != null) bap_Address_r16.print (_sb, "bap_Address_r16", _level+1);
      if (bh_RLC_ChannelToAddModList_r16 != null) bh_RLC_ChannelToAddModList_r16.print (_sb, "bh_RLC_ChannelToAddModList_r16", _level+1);
      if (bh_RLC_ChannelToReleaseList_r16 != null) bh_RLC_ChannelToReleaseList_r16.print (_sb, "bh_RLC_ChannelToReleaseList_r16", _level+1);
      if (f1c_TransferPath_r16 != null) f1c_TransferPath_r16.print (_sb, "f1c_TransferPath_r16", _level+1);
      if (simultaneousTCI_UpdateList1_r16 != null) simultaneousTCI_UpdateList1_r16.print (_sb, "simultaneousTCI_UpdateList1_r16", _level+1);
      if (simultaneousTCI_UpdateList2_r16 != null) simultaneousTCI_UpdateList2_r16.print (_sb, "simultaneousTCI_UpdateList2_r16", _level+1);
      if (simultaneousSpatial_UpdatedList1_r16 != null) simultaneousSpatial_UpdatedList1_r16.print (_sb, "simultaneousSpatial_UpdatedList1_r16", _level+1);
      if (simultaneousSpatial_UpdatedList2_r16 != null) simultaneousSpatial_UpdatedList2_r16.print (_sb, "simultaneousSpatial_UpdatedList2_r16", _level+1);
      if (uplinkTxSwitchingOption_r16 != null) uplinkTxSwitchingOption_r16.print (_sb, "uplinkTxSwitchingOption_r16", _level+1);
      if (uplinkTxSwitchingPowerBoosting_r16 != null) uplinkTxSwitchingPowerBoosting_r16.print (_sb, "uplinkTxSwitchingPowerBoosting_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
