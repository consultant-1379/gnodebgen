/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class PhysicalConfigDedicatedSTTI_r15_setup extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public AntennaInfoDedicatedSTTI_r15 antennaInfoDedicatedSTTI_r15;  // optional
   public AntennaInfoUL_STTI_r15 antennaInfoUL_STTI_r15;  // optional
   public PUCCH_ConfigDedicated_v1530 pucch_ConfigDedicated_v1530;  // optional
   public SchedulingRequestConfig_v1530 schedulingRequestConfig_v1530;  // optional
   public UplinkPowerControlDedicatedSTTI_r15 uplinkPowerControlDedicatedSTTI_r15;  // optional
   public CQI_ReportConfig_r15 cqi_ReportConfig_r15;  // optional
   public CSI_RS_Config_r15 csi_RS_Config_r15;  // optional
   public CSI_RS_ConfigNZPToReleaseList_r15 csi_RS_ConfigNZPToReleaseList_r15;  // optional
   public CSI_RS_ConfigNZPToAddModList_r15 csi_RS_ConfigNZPToAddModList_r15;  // optional
   public CSI_RS_ConfigZPToReleaseList_r11 csi_RS_ConfigZPToReleaseList_r15;  // optional
   public CSI_RS_ConfigZPToAddModList_r11 csi_RS_ConfigZPToAddModList_r11;  // optional
   public CSI_RS_ConfigZP_ApList_r14 csi_RS_ConfigZP_ApList_r15;  // optional
   public EIMTA_MainConfig_r12 eimta_MainConfig_r12;  // optional
   public EIMTA_MainConfigServCell_r12 eimta_MainConfigServCell_r15;  // optional
   public Asn1Boolean semiOpenLoopSTTI_r15;
   public SlotOrSubslotPDSCH_Config_r15 slotOrSubslotPDSCH_Config_r15;  // optional
   public SlotOrSubslotPUSCH_Config_r15 slotOrSubslotPUSCH_Config_r15;  // optional
   public SPDCCH_Config_r15 spdcch_Config_r15;  // optional
   public SPUCCH_Config_r15 spucch_Config_r15;  // optional
   public Asn1Boolean srs_DCI7_TriggeringConfig_r15;
   public Asn1Boolean shortProcessingTime_r15;
   public ShortTTI_r15 shortTTI_r15;  // optional

   public PhysicalConfigDedicatedSTTI_r15_setup () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public PhysicalConfigDedicatedSTTI_r15_setup (
      AntennaInfoDedicatedSTTI_r15 antennaInfoDedicatedSTTI_r15_,
      AntennaInfoUL_STTI_r15 antennaInfoUL_STTI_r15_,
      PUCCH_ConfigDedicated_v1530 pucch_ConfigDedicated_v1530_,
      SchedulingRequestConfig_v1530 schedulingRequestConfig_v1530_,
      UplinkPowerControlDedicatedSTTI_r15 uplinkPowerControlDedicatedSTTI_r15_,
      CQI_ReportConfig_r15 cqi_ReportConfig_r15_,
      CSI_RS_Config_r15 csi_RS_Config_r15_,
      CSI_RS_ConfigNZPToReleaseList_r15 csi_RS_ConfigNZPToReleaseList_r15_,
      CSI_RS_ConfigNZPToAddModList_r15 csi_RS_ConfigNZPToAddModList_r15_,
      CSI_RS_ConfigZPToReleaseList_r11 csi_RS_ConfigZPToReleaseList_r15_,
      CSI_RS_ConfigZPToAddModList_r11 csi_RS_ConfigZPToAddModList_r11_,
      CSI_RS_ConfigZP_ApList_r14 csi_RS_ConfigZP_ApList_r15_,
      EIMTA_MainConfig_r12 eimta_MainConfig_r12_,
      EIMTA_MainConfigServCell_r12 eimta_MainConfigServCell_r15_,
      Asn1Boolean semiOpenLoopSTTI_r15_,
      SlotOrSubslotPDSCH_Config_r15 slotOrSubslotPDSCH_Config_r15_,
      SlotOrSubslotPUSCH_Config_r15 slotOrSubslotPUSCH_Config_r15_,
      SPDCCH_Config_r15 spdcch_Config_r15_,
      SPUCCH_Config_r15 spucch_Config_r15_,
      Asn1Boolean srs_DCI7_TriggeringConfig_r15_,
      Asn1Boolean shortProcessingTime_r15_,
      ShortTTI_r15 shortTTI_r15_
   ) {
      super();
      antennaInfoDedicatedSTTI_r15 = antennaInfoDedicatedSTTI_r15_;
      antennaInfoUL_STTI_r15 = antennaInfoUL_STTI_r15_;
      pucch_ConfigDedicated_v1530 = pucch_ConfigDedicated_v1530_;
      schedulingRequestConfig_v1530 = schedulingRequestConfig_v1530_;
      uplinkPowerControlDedicatedSTTI_r15 = uplinkPowerControlDedicatedSTTI_r15_;
      cqi_ReportConfig_r15 = cqi_ReportConfig_r15_;
      csi_RS_Config_r15 = csi_RS_Config_r15_;
      csi_RS_ConfigNZPToReleaseList_r15 = csi_RS_ConfigNZPToReleaseList_r15_;
      csi_RS_ConfigNZPToAddModList_r15 = csi_RS_ConfigNZPToAddModList_r15_;
      csi_RS_ConfigZPToReleaseList_r15 = csi_RS_ConfigZPToReleaseList_r15_;
      csi_RS_ConfigZPToAddModList_r11 = csi_RS_ConfigZPToAddModList_r11_;
      csi_RS_ConfigZP_ApList_r15 = csi_RS_ConfigZP_ApList_r15_;
      eimta_MainConfig_r12 = eimta_MainConfig_r12_;
      eimta_MainConfigServCell_r15 = eimta_MainConfigServCell_r15_;
      semiOpenLoopSTTI_r15 = semiOpenLoopSTTI_r15_;
      slotOrSubslotPDSCH_Config_r15 = slotOrSubslotPDSCH_Config_r15_;
      slotOrSubslotPUSCH_Config_r15 = slotOrSubslotPUSCH_Config_r15_;
      spdcch_Config_r15 = spdcch_Config_r15_;
      spucch_Config_r15 = spucch_Config_r15_;
      srs_DCI7_TriggeringConfig_r15 = srs_DCI7_TriggeringConfig_r15_;
      shortProcessingTime_r15 = shortProcessingTime_r15_;
      shortTTI_r15 = shortTTI_r15_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public PhysicalConfigDedicatedSTTI_r15_setup (
      Asn1Boolean semiOpenLoopSTTI_r15_,
      Asn1Boolean srs_DCI7_TriggeringConfig_r15_,
      Asn1Boolean shortProcessingTime_r15_
   ) {
      super();
      semiOpenLoopSTTI_r15 = semiOpenLoopSTTI_r15_;
      srs_DCI7_TriggeringConfig_r15 = srs_DCI7_TriggeringConfig_r15_;
      shortProcessingTime_r15 = shortProcessingTime_r15_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public PhysicalConfigDedicatedSTTI_r15_setup (AntennaInfoDedicatedSTTI_r15 antennaInfoDedicatedSTTI_r15_,
      AntennaInfoUL_STTI_r15 antennaInfoUL_STTI_r15_,
      PUCCH_ConfigDedicated_v1530 pucch_ConfigDedicated_v1530_,
      SchedulingRequestConfig_v1530 schedulingRequestConfig_v1530_,
      UplinkPowerControlDedicatedSTTI_r15 uplinkPowerControlDedicatedSTTI_r15_,
      CQI_ReportConfig_r15 cqi_ReportConfig_r15_,
      CSI_RS_Config_r15 csi_RS_Config_r15_,
      CSI_RS_ConfigNZPToReleaseList_r15 csi_RS_ConfigNZPToReleaseList_r15_,
      CSI_RS_ConfigNZPToAddModList_r15 csi_RS_ConfigNZPToAddModList_r15_,
      CSI_RS_ConfigZPToReleaseList_r11 csi_RS_ConfigZPToReleaseList_r15_,
      CSI_RS_ConfigZPToAddModList_r11 csi_RS_ConfigZPToAddModList_r11_,
      CSI_RS_ConfigZP_ApList_r14 csi_RS_ConfigZP_ApList_r15_,
      EIMTA_MainConfig_r12 eimta_MainConfig_r12_,
      EIMTA_MainConfigServCell_r12 eimta_MainConfigServCell_r15_,
      boolean semiOpenLoopSTTI_r15_,
      SlotOrSubslotPDSCH_Config_r15 slotOrSubslotPDSCH_Config_r15_,
      SlotOrSubslotPUSCH_Config_r15 slotOrSubslotPUSCH_Config_r15_,
      SPDCCH_Config_r15 spdcch_Config_r15_,
      SPUCCH_Config_r15 spucch_Config_r15_,
      boolean srs_DCI7_TriggeringConfig_r15_,
      boolean shortProcessingTime_r15_,
      ShortTTI_r15 shortTTI_r15_
   ) {
      super();
      antennaInfoDedicatedSTTI_r15 = antennaInfoDedicatedSTTI_r15_;
      antennaInfoUL_STTI_r15 = antennaInfoUL_STTI_r15_;
      pucch_ConfigDedicated_v1530 = pucch_ConfigDedicated_v1530_;
      schedulingRequestConfig_v1530 = schedulingRequestConfig_v1530_;
      uplinkPowerControlDedicatedSTTI_r15 = uplinkPowerControlDedicatedSTTI_r15_;
      cqi_ReportConfig_r15 = cqi_ReportConfig_r15_;
      csi_RS_Config_r15 = csi_RS_Config_r15_;
      csi_RS_ConfigNZPToReleaseList_r15 = csi_RS_ConfigNZPToReleaseList_r15_;
      csi_RS_ConfigNZPToAddModList_r15 = csi_RS_ConfigNZPToAddModList_r15_;
      csi_RS_ConfigZPToReleaseList_r15 = csi_RS_ConfigZPToReleaseList_r15_;
      csi_RS_ConfigZPToAddModList_r11 = csi_RS_ConfigZPToAddModList_r11_;
      csi_RS_ConfigZP_ApList_r15 = csi_RS_ConfigZP_ApList_r15_;
      eimta_MainConfig_r12 = eimta_MainConfig_r12_;
      eimta_MainConfigServCell_r15 = eimta_MainConfigServCell_r15_;
      semiOpenLoopSTTI_r15 = new Asn1Boolean (semiOpenLoopSTTI_r15_);
      slotOrSubslotPDSCH_Config_r15 = slotOrSubslotPDSCH_Config_r15_;
      slotOrSubslotPUSCH_Config_r15 = slotOrSubslotPUSCH_Config_r15_;
      spdcch_Config_r15 = spdcch_Config_r15_;
      spucch_Config_r15 = spucch_Config_r15_;
      srs_DCI7_TriggeringConfig_r15 = new Asn1Boolean (srs_DCI7_TriggeringConfig_r15_);
      shortProcessingTime_r15 = new Asn1Boolean (shortProcessingTime_r15_);
      shortTTI_r15 = shortTTI_r15_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public PhysicalConfigDedicatedSTTI_r15_setup (
      boolean semiOpenLoopSTTI_r15_,
      boolean srs_DCI7_TriggeringConfig_r15_,
      boolean shortProcessingTime_r15_
   ) {
      super();
      semiOpenLoopSTTI_r15 = new Asn1Boolean (semiOpenLoopSTTI_r15_);
      srs_DCI7_TriggeringConfig_r15 = new Asn1Boolean (srs_DCI7_TriggeringConfig_r15_);
      shortProcessingTime_r15 = new Asn1Boolean (shortProcessingTime_r15_);
   }

   public void init () {
      antennaInfoDedicatedSTTI_r15 = null;
      antennaInfoUL_STTI_r15 = null;
      pucch_ConfigDedicated_v1530 = null;
      schedulingRequestConfig_v1530 = null;
      uplinkPowerControlDedicatedSTTI_r15 = null;
      cqi_ReportConfig_r15 = null;
      csi_RS_Config_r15 = null;
      csi_RS_ConfigNZPToReleaseList_r15 = null;
      csi_RS_ConfigNZPToAddModList_r15 = null;
      csi_RS_ConfigZPToReleaseList_r15 = null;
      csi_RS_ConfigZPToAddModList_r11 = null;
      csi_RS_ConfigZP_ApList_r15 = null;
      eimta_MainConfig_r12 = null;
      eimta_MainConfigServCell_r15 = null;
      semiOpenLoopSTTI_r15 = null;
      slotOrSubslotPDSCH_Config_r15 = null;
      slotOrSubslotPUSCH_Config_r15 = null;
      spdcch_Config_r15 = null;
      spucch_Config_r15 = null;
      srs_DCI7_TriggeringConfig_r15 = null;
      shortProcessingTime_r15 = null;
      shortTTI_r15 = null;
   }

   public int getElementCount() { return 22; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return antennaInfoDedicatedSTTI_r15;
         case 1: return antennaInfoUL_STTI_r15;
         case 2: return pucch_ConfigDedicated_v1530;
         case 3: return schedulingRequestConfig_v1530;
         case 4: return uplinkPowerControlDedicatedSTTI_r15;
         case 5: return cqi_ReportConfig_r15;
         case 6: return csi_RS_Config_r15;
         case 7: return csi_RS_ConfigNZPToReleaseList_r15;
         case 8: return csi_RS_ConfigNZPToAddModList_r15;
         case 9: return csi_RS_ConfigZPToReleaseList_r15;
         case 10: return csi_RS_ConfigZPToAddModList_r11;
         case 11: return csi_RS_ConfigZP_ApList_r15;
         case 12: return eimta_MainConfig_r12;
         case 13: return eimta_MainConfigServCell_r15;
         case 14: return semiOpenLoopSTTI_r15;
         case 15: return slotOrSubslotPDSCH_Config_r15;
         case 16: return slotOrSubslotPUSCH_Config_r15;
         case 17: return spdcch_Config_r15;
         case 18: return spucch_Config_r15;
         case 19: return srs_DCI7_TriggeringConfig_r15;
         case 20: return shortProcessingTime_r15;
         case 21: return shortTTI_r15;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "antennaInfoDedicatedSTTI-r15";
         case 1: return "antennaInfoUL-STTI-r15";
         case 2: return "pucch-ConfigDedicated-v1530";
         case 3: return "schedulingRequestConfig-v1530";
         case 4: return "uplinkPowerControlDedicatedSTTI-r15";
         case 5: return "cqi-ReportConfig-r15";
         case 6: return "csi-RS-Config-r15";
         case 7: return "csi-RS-ConfigNZPToReleaseList-r15";
         case 8: return "csi-RS-ConfigNZPToAddModList-r15";
         case 9: return "csi-RS-ConfigZPToReleaseList-r15";
         case 10: return "csi-RS-ConfigZPToAddModList-r11";
         case 11: return "csi-RS-ConfigZP-ApList-r15";
         case 12: return "eimta-MainConfig-r12";
         case 13: return "eimta-MainConfigServCell-r15";
         case 14: return "semiOpenLoopSTTI-r15";
         case 15: return "slotOrSubslotPDSCH-Config-r15";
         case 16: return "slotOrSubslotPUSCH-Config-r15";
         case 17: return "spdcch-Config-r15";
         case 18: return "spucch-Config-r15";
         case 19: return "srs-DCI7-TriggeringConfig-r15";
         case 20: return "shortProcessingTime-r15";
         case 21: return "shortTTI-r15";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean antennaInfoDedicatedSTTI_r15Present = buffer.decodeBit ("antennaInfoDedicatedSTTI_r15Present");
      boolean antennaInfoUL_STTI_r15Present = buffer.decodeBit ("antennaInfoUL_STTI_r15Present");
      boolean pucch_ConfigDedicated_v1530Present = buffer.decodeBit ("pucch_ConfigDedicated_v1530Present");
      boolean schedulingRequestConfig_v1530Present = buffer.decodeBit ("schedulingRequestConfig_v1530Present");
      boolean uplinkPowerControlDedicatedSTTI_r15Present = buffer.decodeBit ("uplinkPowerControlDedicatedSTTI_r15Present");
      boolean cqi_ReportConfig_r15Present = buffer.decodeBit ("cqi_ReportConfig_r15Present");
      boolean csi_RS_Config_r15Present = buffer.decodeBit ("csi_RS_Config_r15Present");
      boolean csi_RS_ConfigNZPToReleaseList_r15Present = buffer.decodeBit ("csi_RS_ConfigNZPToReleaseList_r15Present");
      boolean csi_RS_ConfigNZPToAddModList_r15Present = buffer.decodeBit ("csi_RS_ConfigNZPToAddModList_r15Present");
      boolean csi_RS_ConfigZPToReleaseList_r15Present = buffer.decodeBit ("csi_RS_ConfigZPToReleaseList_r15Present");
      boolean csi_RS_ConfigZPToAddModList_r11Present = buffer.decodeBit ("csi_RS_ConfigZPToAddModList_r11Present");
      boolean csi_RS_ConfigZP_ApList_r15Present = buffer.decodeBit ("csi_RS_ConfigZP_ApList_r15Present");
      boolean eimta_MainConfig_r12Present = buffer.decodeBit ("eimta_MainConfig_r12Present");
      boolean eimta_MainConfigServCell_r15Present = buffer.decodeBit ("eimta_MainConfigServCell_r15Present");
      boolean slotOrSubslotPDSCH_Config_r15Present = buffer.decodeBit ("slotOrSubslotPDSCH_Config_r15Present");
      boolean slotOrSubslotPUSCH_Config_r15Present = buffer.decodeBit ("slotOrSubslotPUSCH_Config_r15Present");
      boolean spdcch_Config_r15Present = buffer.decodeBit ("spdcch_Config_r15Present");
      boolean spucch_Config_r15Present = buffer.decodeBit ("spucch_Config_r15Present");
      boolean shortTTI_r15Present = buffer.decodeBit ("shortTTI_r15Present");

      // decode antennaInfoDedicatedSTTI_r15

      if (antennaInfoDedicatedSTTI_r15Present) {
         buffer.getContext().eventDispatcher.startElement("antennaInfoDedicatedSTTI_r15", -1);

         antennaInfoDedicatedSTTI_r15 = new AntennaInfoDedicatedSTTI_r15();
         antennaInfoDedicatedSTTI_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("antennaInfoDedicatedSTTI_r15", -1);
      }
      else {
         antennaInfoDedicatedSTTI_r15 = null;
      }

      // decode antennaInfoUL_STTI_r15

      if (antennaInfoUL_STTI_r15Present) {
         buffer.getContext().eventDispatcher.startElement("antennaInfoUL_STTI_r15", -1);

         antennaInfoUL_STTI_r15 = new AntennaInfoUL_STTI_r15();
         antennaInfoUL_STTI_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("antennaInfoUL_STTI_r15", -1);
      }
      else {
         antennaInfoUL_STTI_r15 = null;
      }

      // decode pucch_ConfigDedicated_v1530

      if (pucch_ConfigDedicated_v1530Present) {
         buffer.getContext().eventDispatcher.startElement("pucch_ConfigDedicated_v1530", -1);

         pucch_ConfigDedicated_v1530 = new PUCCH_ConfigDedicated_v1530();
         pucch_ConfigDedicated_v1530.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("pucch_ConfigDedicated_v1530", -1);
      }
      else {
         pucch_ConfigDedicated_v1530 = null;
      }

      // decode schedulingRequestConfig_v1530

      if (schedulingRequestConfig_v1530Present) {
         buffer.getContext().eventDispatcher.startElement("schedulingRequestConfig_v1530", -1);

         schedulingRequestConfig_v1530 = new SchedulingRequestConfig_v1530();
         schedulingRequestConfig_v1530.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("schedulingRequestConfig_v1530", -1);
      }
      else {
         schedulingRequestConfig_v1530 = null;
      }

      // decode uplinkPowerControlDedicatedSTTI_r15

      if (uplinkPowerControlDedicatedSTTI_r15Present) {
         buffer.getContext().eventDispatcher.startElement("uplinkPowerControlDedicatedSTTI_r15", -1);

         uplinkPowerControlDedicatedSTTI_r15 = new UplinkPowerControlDedicatedSTTI_r15();
         uplinkPowerControlDedicatedSTTI_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("uplinkPowerControlDedicatedSTTI_r15", -1);
      }
      else {
         uplinkPowerControlDedicatedSTTI_r15 = null;
      }

      // decode cqi_ReportConfig_r15

      if (cqi_ReportConfig_r15Present) {
         buffer.getContext().eventDispatcher.startElement("cqi_ReportConfig_r15", -1);

         cqi_ReportConfig_r15 = new CQI_ReportConfig_r15();
         cqi_ReportConfig_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("cqi_ReportConfig_r15", -1);
      }
      else {
         cqi_ReportConfig_r15 = null;
      }

      // decode csi_RS_Config_r15

      if (csi_RS_Config_r15Present) {
         buffer.getContext().eventDispatcher.startElement("csi_RS_Config_r15", -1);

         csi_RS_Config_r15 = new CSI_RS_Config_r15();
         csi_RS_Config_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("csi_RS_Config_r15", -1);
      }
      else {
         csi_RS_Config_r15 = null;
      }

      // decode csi_RS_ConfigNZPToReleaseList_r15

      if (csi_RS_ConfigNZPToReleaseList_r15Present) {
         buffer.getContext().eventDispatcher.startElement("csi_RS_ConfigNZPToReleaseList_r15", -1);

         csi_RS_ConfigNZPToReleaseList_r15 = new CSI_RS_ConfigNZPToReleaseList_r15();
         csi_RS_ConfigNZPToReleaseList_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("csi_RS_ConfigNZPToReleaseList_r15", -1);
      }
      else {
         csi_RS_ConfigNZPToReleaseList_r15 = null;
      }

      // decode csi_RS_ConfigNZPToAddModList_r15

      if (csi_RS_ConfigNZPToAddModList_r15Present) {
         buffer.getContext().eventDispatcher.startElement("csi_RS_ConfigNZPToAddModList_r15", -1);

         csi_RS_ConfigNZPToAddModList_r15 = new CSI_RS_ConfigNZPToAddModList_r15();
         csi_RS_ConfigNZPToAddModList_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("csi_RS_ConfigNZPToAddModList_r15", -1);
      }
      else {
         csi_RS_ConfigNZPToAddModList_r15 = null;
      }

      // decode csi_RS_ConfigZPToReleaseList_r15

      if (csi_RS_ConfigZPToReleaseList_r15Present) {
         buffer.getContext().eventDispatcher.startElement("csi_RS_ConfigZPToReleaseList_r15", -1);

         csi_RS_ConfigZPToReleaseList_r15 = new CSI_RS_ConfigZPToReleaseList_r11();
         csi_RS_ConfigZPToReleaseList_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("csi_RS_ConfigZPToReleaseList_r15", -1);
      }
      else {
         csi_RS_ConfigZPToReleaseList_r15 = null;
      }

      // decode csi_RS_ConfigZPToAddModList_r11

      if (csi_RS_ConfigZPToAddModList_r11Present) {
         buffer.getContext().eventDispatcher.startElement("csi_RS_ConfigZPToAddModList_r11", -1);

         csi_RS_ConfigZPToAddModList_r11 = new CSI_RS_ConfigZPToAddModList_r11();
         csi_RS_ConfigZPToAddModList_r11.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("csi_RS_ConfigZPToAddModList_r11", -1);
      }
      else {
         csi_RS_ConfigZPToAddModList_r11 = null;
      }

      // decode csi_RS_ConfigZP_ApList_r15

      if (csi_RS_ConfigZP_ApList_r15Present) {
         buffer.getContext().eventDispatcher.startElement("csi_RS_ConfigZP_ApList_r15", -1);

         csi_RS_ConfigZP_ApList_r15 = new CSI_RS_ConfigZP_ApList_r14();
         csi_RS_ConfigZP_ApList_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("csi_RS_ConfigZP_ApList_r15", -1);
      }
      else {
         csi_RS_ConfigZP_ApList_r15 = null;
      }

      // decode eimta_MainConfig_r12

      if (eimta_MainConfig_r12Present) {
         buffer.getContext().eventDispatcher.startElement("eimta_MainConfig_r12", -1);

         eimta_MainConfig_r12 = new EIMTA_MainConfig_r12();
         eimta_MainConfig_r12.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("eimta_MainConfig_r12", -1);
      }
      else {
         eimta_MainConfig_r12 = null;
      }

      // decode eimta_MainConfigServCell_r15

      if (eimta_MainConfigServCell_r15Present) {
         buffer.getContext().eventDispatcher.startElement("eimta_MainConfigServCell_r15", -1);

         eimta_MainConfigServCell_r15 = new EIMTA_MainConfigServCell_r12();
         eimta_MainConfigServCell_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("eimta_MainConfigServCell_r15", -1);
      }
      else {
         eimta_MainConfigServCell_r15 = null;
      }

      // decode semiOpenLoopSTTI_r15

      buffer.getContext().eventDispatcher.startElement("semiOpenLoopSTTI_r15", -1);

      semiOpenLoopSTTI_r15 = new Asn1Boolean();
      semiOpenLoopSTTI_r15.decode (buffer);

      buffer.invokeCharacters(semiOpenLoopSTTI_r15.toString());
      buffer.getContext().eventDispatcher.endElement("semiOpenLoopSTTI_r15", -1);

      // decode slotOrSubslotPDSCH_Config_r15

      if (slotOrSubslotPDSCH_Config_r15Present) {
         buffer.getContext().eventDispatcher.startElement("slotOrSubslotPDSCH_Config_r15", -1);

         slotOrSubslotPDSCH_Config_r15 = new SlotOrSubslotPDSCH_Config_r15();
         slotOrSubslotPDSCH_Config_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("slotOrSubslotPDSCH_Config_r15", -1);
      }
      else {
         slotOrSubslotPDSCH_Config_r15 = null;
      }

      // decode slotOrSubslotPUSCH_Config_r15

      if (slotOrSubslotPUSCH_Config_r15Present) {
         buffer.getContext().eventDispatcher.startElement("slotOrSubslotPUSCH_Config_r15", -1);

         slotOrSubslotPUSCH_Config_r15 = new SlotOrSubslotPUSCH_Config_r15();
         slotOrSubslotPUSCH_Config_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("slotOrSubslotPUSCH_Config_r15", -1);
      }
      else {
         slotOrSubslotPUSCH_Config_r15 = null;
      }

      // decode spdcch_Config_r15

      if (spdcch_Config_r15Present) {
         buffer.getContext().eventDispatcher.startElement("spdcch_Config_r15", -1);

         spdcch_Config_r15 = new SPDCCH_Config_r15();
         spdcch_Config_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("spdcch_Config_r15", -1);
      }
      else {
         spdcch_Config_r15 = null;
      }

      // decode spucch_Config_r15

      if (spucch_Config_r15Present) {
         buffer.getContext().eventDispatcher.startElement("spucch_Config_r15", -1);

         spucch_Config_r15 = new SPUCCH_Config_r15();
         spucch_Config_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("spucch_Config_r15", -1);
      }
      else {
         spucch_Config_r15 = null;
      }

      // decode srs_DCI7_TriggeringConfig_r15

      buffer.getContext().eventDispatcher.startElement("srs_DCI7_TriggeringConfig_r15", -1);

      srs_DCI7_TriggeringConfig_r15 = new Asn1Boolean();
      srs_DCI7_TriggeringConfig_r15.decode (buffer);

      buffer.invokeCharacters(srs_DCI7_TriggeringConfig_r15.toString());
      buffer.getContext().eventDispatcher.endElement("srs_DCI7_TriggeringConfig_r15", -1);

      // decode shortProcessingTime_r15

      buffer.getContext().eventDispatcher.startElement("shortProcessingTime_r15", -1);

      shortProcessingTime_r15 = new Asn1Boolean();
      shortProcessingTime_r15.decode (buffer);

      buffer.invokeCharacters(shortProcessingTime_r15.toString());
      buffer.getContext().eventDispatcher.endElement("shortProcessingTime_r15", -1);

      // decode shortTTI_r15

      if (shortTTI_r15Present) {
         buffer.getContext().eventDispatcher.startElement("shortTTI_r15", -1);

         shortTTI_r15 = new ShortTTI_r15();
         shortTTI_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("shortTTI_r15", -1);
      }
      else {
         shortTTI_r15 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (antennaInfoDedicatedSTTI_r15 != null) antennaInfoDedicatedSTTI_r15.print (_sb, "antennaInfoDedicatedSTTI_r15", _level+1);
      if (antennaInfoUL_STTI_r15 != null) antennaInfoUL_STTI_r15.print (_sb, "antennaInfoUL_STTI_r15", _level+1);
      if (pucch_ConfigDedicated_v1530 != null) pucch_ConfigDedicated_v1530.print (_sb, "pucch_ConfigDedicated_v1530", _level+1);
      if (schedulingRequestConfig_v1530 != null) schedulingRequestConfig_v1530.print (_sb, "schedulingRequestConfig_v1530", _level+1);
      if (uplinkPowerControlDedicatedSTTI_r15 != null) uplinkPowerControlDedicatedSTTI_r15.print (_sb, "uplinkPowerControlDedicatedSTTI_r15", _level+1);
      if (cqi_ReportConfig_r15 != null) cqi_ReportConfig_r15.print (_sb, "cqi_ReportConfig_r15", _level+1);
      if (csi_RS_Config_r15 != null) csi_RS_Config_r15.print (_sb, "csi_RS_Config_r15", _level+1);
      if (csi_RS_ConfigNZPToReleaseList_r15 != null) csi_RS_ConfigNZPToReleaseList_r15.print (_sb, "csi_RS_ConfigNZPToReleaseList_r15", _level+1);
      if (csi_RS_ConfigNZPToAddModList_r15 != null) csi_RS_ConfigNZPToAddModList_r15.print (_sb, "csi_RS_ConfigNZPToAddModList_r15", _level+1);
      if (csi_RS_ConfigZPToReleaseList_r15 != null) csi_RS_ConfigZPToReleaseList_r15.print (_sb, "csi_RS_ConfigZPToReleaseList_r15", _level+1);
      if (csi_RS_ConfigZPToAddModList_r11 != null) csi_RS_ConfigZPToAddModList_r11.print (_sb, "csi_RS_ConfigZPToAddModList_r11", _level+1);
      if (csi_RS_ConfigZP_ApList_r15 != null) csi_RS_ConfigZP_ApList_r15.print (_sb, "csi_RS_ConfigZP_ApList_r15", _level+1);
      if (eimta_MainConfig_r12 != null) eimta_MainConfig_r12.print (_sb, "eimta_MainConfig_r12", _level+1);
      if (eimta_MainConfigServCell_r15 != null) eimta_MainConfigServCell_r15.print (_sb, "eimta_MainConfigServCell_r15", _level+1);
      if (semiOpenLoopSTTI_r15 != null) semiOpenLoopSTTI_r15.print (_sb, "semiOpenLoopSTTI_r15", _level+1);
      if (slotOrSubslotPDSCH_Config_r15 != null) slotOrSubslotPDSCH_Config_r15.print (_sb, "slotOrSubslotPDSCH_Config_r15", _level+1);
      if (slotOrSubslotPUSCH_Config_r15 != null) slotOrSubslotPUSCH_Config_r15.print (_sb, "slotOrSubslotPUSCH_Config_r15", _level+1);
      if (spdcch_Config_r15 != null) spdcch_Config_r15.print (_sb, "spdcch_Config_r15", _level+1);
      if (spucch_Config_r15 != null) spucch_Config_r15.print (_sb, "spucch_Config_r15", _level+1);
      if (srs_DCI7_TriggeringConfig_r15 != null) srs_DCI7_TriggeringConfig_r15.print (_sb, "srs_DCI7_TriggeringConfig_r15", _level+1);
      if (shortProcessingTime_r15 != null) shortProcessingTime_r15.print (_sb, "shortProcessingTime_r15", _level+1);
      if (shortTTI_r15 != null) shortTTI_r15.print (_sb, "shortTTI_r15", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
