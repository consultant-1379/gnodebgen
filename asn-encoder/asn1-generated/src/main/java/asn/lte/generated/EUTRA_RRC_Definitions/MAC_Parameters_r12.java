/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MAC_Parameters_r12 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "MAC-Parameters-r12";
   }

   public MAC_Parameters_r12_logicalChannelSR_ProhibitTimer_r12 logicalChannelSR_ProhibitTimer_r12 = null;  // optional
   public MAC_Parameters_r12_longDRX_Command_r12 longDRX_Command_r12 = null;  // optional

   public MAC_Parameters_r12 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MAC_Parameters_r12 (
      MAC_Parameters_r12_logicalChannelSR_ProhibitTimer_r12 logicalChannelSR_ProhibitTimer_r12_,
      MAC_Parameters_r12_longDRX_Command_r12 longDRX_Command_r12_
   ) {
      super();
      logicalChannelSR_ProhibitTimer_r12 = logicalChannelSR_ProhibitTimer_r12_;
      longDRX_Command_r12 = longDRX_Command_r12_;
   }

   public void init () {
      logicalChannelSR_ProhibitTimer_r12 = null;
      longDRX_Command_r12 = null;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return logicalChannelSR_ProhibitTimer_r12;
         case 1: return longDRX_Command_r12;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "logicalChannelSR-ProhibitTimer-r12";
         case 1: return "longDRX-Command-r12";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean logicalChannelSR_ProhibitTimer_r12Present = buffer.decodeBit ("logicalChannelSR_ProhibitTimer_r12Present");
      boolean longDRX_Command_r12Present = buffer.decodeBit ("longDRX_Command_r12Present");

      // decode logicalChannelSR_ProhibitTimer_r12

      if (logicalChannelSR_ProhibitTimer_r12Present) {
         buffer.getContext().eventDispatcher.startElement("logicalChannelSR_ProhibitTimer_r12", -1);

         int tval = MAC_Parameters_r12_logicalChannelSR_ProhibitTimer_r12.decodeEnumValue (buffer);
         logicalChannelSR_ProhibitTimer_r12 = MAC_Parameters_r12_logicalChannelSR_ProhibitTimer_r12.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("logicalChannelSR_ProhibitTimer_r12", -1);
      }
      else {
         logicalChannelSR_ProhibitTimer_r12 = null;
      }

      // decode longDRX_Command_r12

      if (longDRX_Command_r12Present) {
         buffer.getContext().eventDispatcher.startElement("longDRX_Command_r12", -1);

         int tval = MAC_Parameters_r12_longDRX_Command_r12.decodeEnumValue (buffer);
         longDRX_Command_r12 = MAC_Parameters_r12_longDRX_Command_r12.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("longDRX_Command_r12", -1);
      }
      else {
         longDRX_Command_r12 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (logicalChannelSR_ProhibitTimer_r12 != null) logicalChannelSR_ProhibitTimer_r12.print (_sb, "logicalChannelSR_ProhibitTimer_r12", _level+1);
      if (longDRX_Command_r12 != null) longDRX_Command_r12.print (_sb, "longDRX_Command_r12", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
