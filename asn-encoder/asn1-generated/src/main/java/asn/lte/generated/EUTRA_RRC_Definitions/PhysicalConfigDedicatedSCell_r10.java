/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class PhysicalConfigDedicatedSCell_r10 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "PhysicalConfigDedicatedSCell-r10";
   }

   public PhysicalConfigDedicatedSCell_r10_nonUL_Configuration_r10 nonUL_Configuration_r10;  // optional
   public PhysicalConfigDedicatedSCell_r10_ul_Configuration_r10 ul_Configuration_r10;  // optional
   public boolean mV2ExtPresent;
   public CSI_RS_ConfigNZPToReleaseList_r11 csi_RS_ConfigNZPToReleaseList_r11;  // optional
   public CSI_RS_ConfigNZPToAddModList_r11 csi_RS_ConfigNZPToAddModList_r11;  // optional
   public CSI_RS_ConfigZPToReleaseList_r11 csi_RS_ConfigZPToReleaseList_r11;  // optional
   public CSI_RS_ConfigZPToAddModList_r11 csi_RS_ConfigZPToAddModList_r11;  // optional
   public EPDCCH_Config_r11 epdcch_Config_r11;  // optional
   public PDSCH_ConfigDedicated_v1130 pdsch_ConfigDedicated_v1130;  // optional
   public CQI_ReportConfig_v1130 cqi_ReportConfig_v1130;  // optional
   public PUSCH_ConfigDedicated_v1130 pusch_ConfigDedicated_v1130;  // optional
   public UplinkPowerControlDedicated_v1130 uplinkPowerControlDedicatedSCell_v1130;  // optional
   public boolean mV3ExtPresent;
   public AntennaInfoDedicated_v1250 antennaInfo_v1250;  // optional
   public EIMTA_MainConfigServCell_r12 eimta_MainConfigSCell_r12;  // optional
   public CQI_ReportConfig_v1250 cqi_ReportConfigSCell_v1250;  // optional
   public UplinkPowerControlDedicated_v1250 uplinkPowerControlDedicatedSCell_v1250;  // optional
   public CSI_RS_Config_v1250 csi_RS_Config_v1250;  // optional
   public boolean mV4ExtPresent;
   public PDSCH_ConfigDedicated_v1280 pdsch_ConfigDedicated_v1280;  // optional
   public boolean mV5ExtPresent;
   public PhysicalConfigDedicatedSCell_r10_pucch_Cell_r13 pucch_Cell_r13 = null;  // optional
   public PhysicalConfigDedicatedSCell_r10_pucch_SCell pucch_SCell;  // optional
   public CrossCarrierSchedulingConfig_r13 crossCarrierSchedulingConfig_r13;  // optional
   public PDCCH_ConfigSCell_r13 pdcch_ConfigSCell_r13;  // optional
   public CQI_ReportConfig_v1310 cqi_ReportConfig_v1310;  // optional
   public PDSCH_ConfigDedicated_v1310 pdsch_ConfigDedicated_v1310;  // optional
   public SoundingRS_UL_ConfigDedicated_v1310 soundingRS_UL_ConfigDedicated_v1310;  // optional
   public SoundingRS_UL_ConfigDedicatedUpPTsExt_r13 soundingRS_UL_ConfigDedicatedUpPTsExt_r13;  // optional
   public SoundingRS_UL_ConfigDedicatedAperiodic_v1310 soundingRS_UL_ConfigDedicatedAperiodic_v1310;  // optional
   public SoundingRS_UL_ConfigDedicatedAperiodicUpPTsExt_r13 soundingRS_UL_ConfigDedicatedAperiodicUpPTsExt_r13;  // optional
   public CSI_RS_Config_v1310 csi_RS_Config_v1310;  // optional
   public LAA_SCellConfiguration_r13 laa_SCellConfiguration_r13;  // optional
   public CSI_RS_ConfigNZPToAddModListExt_r13 csi_RS_ConfigNZPToAddModListExt_r13;  // optional
   public CSI_RS_ConfigNZPToReleaseListExt_r13 csi_RS_ConfigNZPToReleaseListExt_r13;  // optional
   public boolean mV6ExtPresent;
   public CQI_ReportConfig_v1320 cqi_ReportConfig_v1320;  // optional
   public boolean mV7ExtPresent;
   public LAA_SCellConfiguration_v1430 laa_SCellConfiguration_v1430;  // optional
   public SRS_TPC_PDCCH_Config_r14 typeB_SRS_TPC_PDCCH_Config_r14;  // optional
   public UplinkPUSCH_LessPowerControlDedicated_v1430 uplinkPUSCH_LessPowerControlDedicated_v1430;  // optional
   public PhysicalConfigDedicatedSCell_r10_soundingRS_UL_PeriodicConfigDedicatedList_r14 soundingRS_UL_PeriodicConfigDedicatedList_r14;  // optional
   public PhysicalConfigDedicatedSCell_r10_soundingRS_UL_PeriodicConfigDedicatedUpPTsExtList_r14 soundingRS_UL_PeriodicConfigDedicatedUpPTsExtList_r14;  // optional
   public PhysicalConfigDedicatedSCell_r10_soundingRS_UL_AperiodicConfigDedicatedList_r14 soundingRS_UL_AperiodicConfigDedicatedList_r14;  // optional
   public PhysicalConfigDedicatedSCell_r10_soundingRS_UL_ConfigDedicatedApUpPTsExtList_r14 soundingRS_UL_ConfigDedicatedApUpPTsExtList_r14;  // optional
   public PhysicalConfigDedicatedSCell_r10_must_Config_r14 must_Config_r14;  // optional
   public PUSCH_ConfigDedicatedSCell_v1430 pusch_ConfigDedicated_v1430;  // optional
   public CSI_RS_Config_v1430 csi_RS_Config_v1430;  // optional
   public CSI_RS_ConfigZP_ApList_r14 csi_RS_ConfigZP_ApList_r14;  // optional
   public CQI_ReportConfig_v1430 cqi_ReportConfig_v1430;  // optional
   public Asn1Boolean semiOpenLoop_r14;  // optional
   public PDSCH_ConfigDedicatedSCell_v1430 pdsch_ConfigDedicatedSCell_v1430;  // optional
   public boolean mV8ExtPresent;
   public CSI_RS_Config_v1480 csi_RS_Config_v1480;  // optional
   public boolean mV9ExtPresent;
   public PhysicalConfigDedicatedSTTI_r15 physicalConfigDedicatedSTTI_r15;  // optional
   public PDSCH_ConfigDedicated_v1530 pdsch_ConfigDedicated_v1530;  // optional
   public CQI_ReportConfig_v1530 cqi_ReportConfig_v1530;  // optional
   public CQI_ReportConfigSCell_r15 cqi_ReportConfigSCell_r15;  // optional
   public CQI_ShortConfigSCell_r15 cqi_ShortConfigSCell_r15;  // optional
   public CSI_RS_Config_v1530 csi_RS_Config_v1530;  // optional
   public UplinkPowerControlDedicated_v1530 uplinkPowerControlDedicatedSCell_v1530;  // optional
   public LAA_SCellConfiguration_v1530 laa_SCellConfiguration_v1530;  // optional
   public PUSCH_ConfigDedicatedScell_v1530 pusch_ConfigDedicated_v1530;  // optional
   public PhysicalConfigDedicatedSCell_r10_semiStaticCFI_Config_r15 semiStaticCFI_Config_r15;  // optional
   public PhysicalConfigDedicatedSCell_r10_blindPDSCH_Repetition_Config_r15 blindPDSCH_Repetition_Config_r15;  // optional
   public Asn1OpenExt extElem1;

   public PhysicalConfigDedicatedSCell_r10 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public PhysicalConfigDedicatedSCell_r10 (
      PhysicalConfigDedicatedSCell_r10_nonUL_Configuration_r10 nonUL_Configuration_r10_,
      PhysicalConfigDedicatedSCell_r10_ul_Configuration_r10 ul_Configuration_r10_,
      CSI_RS_ConfigNZPToReleaseList_r11 csi_RS_ConfigNZPToReleaseList_r11_,
      CSI_RS_ConfigNZPToAddModList_r11 csi_RS_ConfigNZPToAddModList_r11_,
      CSI_RS_ConfigZPToReleaseList_r11 csi_RS_ConfigZPToReleaseList_r11_,
      CSI_RS_ConfigZPToAddModList_r11 csi_RS_ConfigZPToAddModList_r11_,
      EPDCCH_Config_r11 epdcch_Config_r11_,
      PDSCH_ConfigDedicated_v1130 pdsch_ConfigDedicated_v1130_,
      CQI_ReportConfig_v1130 cqi_ReportConfig_v1130_,
      PUSCH_ConfigDedicated_v1130 pusch_ConfigDedicated_v1130_,
      UplinkPowerControlDedicated_v1130 uplinkPowerControlDedicatedSCell_v1130_,
      AntennaInfoDedicated_v1250 antennaInfo_v1250_,
      EIMTA_MainConfigServCell_r12 eimta_MainConfigSCell_r12_,
      CQI_ReportConfig_v1250 cqi_ReportConfigSCell_v1250_,
      UplinkPowerControlDedicated_v1250 uplinkPowerControlDedicatedSCell_v1250_,
      CSI_RS_Config_v1250 csi_RS_Config_v1250_,
      PDSCH_ConfigDedicated_v1280 pdsch_ConfigDedicated_v1280_,
      PhysicalConfigDedicatedSCell_r10_pucch_Cell_r13 pucch_Cell_r13_,
      PhysicalConfigDedicatedSCell_r10_pucch_SCell pucch_SCell_,
      CrossCarrierSchedulingConfig_r13 crossCarrierSchedulingConfig_r13_,
      PDCCH_ConfigSCell_r13 pdcch_ConfigSCell_r13_,
      CQI_ReportConfig_v1310 cqi_ReportConfig_v1310_,
      PDSCH_ConfigDedicated_v1310 pdsch_ConfigDedicated_v1310_,
      SoundingRS_UL_ConfigDedicated_v1310 soundingRS_UL_ConfigDedicated_v1310_,
      SoundingRS_UL_ConfigDedicatedUpPTsExt_r13 soundingRS_UL_ConfigDedicatedUpPTsExt_r13_,
      SoundingRS_UL_ConfigDedicatedAperiodic_v1310 soundingRS_UL_ConfigDedicatedAperiodic_v1310_,
      SoundingRS_UL_ConfigDedicatedAperiodicUpPTsExt_r13 soundingRS_UL_ConfigDedicatedAperiodicUpPTsExt_r13_,
      CSI_RS_Config_v1310 csi_RS_Config_v1310_,
      LAA_SCellConfiguration_r13 laa_SCellConfiguration_r13_,
      CSI_RS_ConfigNZPToAddModListExt_r13 csi_RS_ConfigNZPToAddModListExt_r13_,
      CSI_RS_ConfigNZPToReleaseListExt_r13 csi_RS_ConfigNZPToReleaseListExt_r13_,
      CQI_ReportConfig_v1320 cqi_ReportConfig_v1320_,
      LAA_SCellConfiguration_v1430 laa_SCellConfiguration_v1430_,
      SRS_TPC_PDCCH_Config_r14 typeB_SRS_TPC_PDCCH_Config_r14_,
      UplinkPUSCH_LessPowerControlDedicated_v1430 uplinkPUSCH_LessPowerControlDedicated_v1430_,
      PhysicalConfigDedicatedSCell_r10_soundingRS_UL_PeriodicConfigDedicatedList_r14 soundingRS_UL_PeriodicConfigDedicatedList_r14_,
      PhysicalConfigDedicatedSCell_r10_soundingRS_UL_PeriodicConfigDedicatedUpPTsExtList_r14 soundingRS_UL_PeriodicConfigDedicatedUpPTsExtList_r14_,
      PhysicalConfigDedicatedSCell_r10_soundingRS_UL_AperiodicConfigDedicatedList_r14 soundingRS_UL_AperiodicConfigDedicatedList_r14_,
      PhysicalConfigDedicatedSCell_r10_soundingRS_UL_ConfigDedicatedApUpPTsExtList_r14 soundingRS_UL_ConfigDedicatedApUpPTsExtList_r14_,
      PhysicalConfigDedicatedSCell_r10_must_Config_r14 must_Config_r14_,
      PUSCH_ConfigDedicatedSCell_v1430 pusch_ConfigDedicated_v1430_,
      CSI_RS_Config_v1430 csi_RS_Config_v1430_,
      CSI_RS_ConfigZP_ApList_r14 csi_RS_ConfigZP_ApList_r14_,
      CQI_ReportConfig_v1430 cqi_ReportConfig_v1430_,
      Asn1Boolean semiOpenLoop_r14_,
      PDSCH_ConfigDedicatedSCell_v1430 pdsch_ConfigDedicatedSCell_v1430_,
      CSI_RS_Config_v1480 csi_RS_Config_v1480_,
      PhysicalConfigDedicatedSTTI_r15 physicalConfigDedicatedSTTI_r15_,
      PDSCH_ConfigDedicated_v1530 pdsch_ConfigDedicated_v1530_,
      CQI_ReportConfig_v1530 cqi_ReportConfig_v1530_,
      CQI_ReportConfigSCell_r15 cqi_ReportConfigSCell_r15_,
      CQI_ShortConfigSCell_r15 cqi_ShortConfigSCell_r15_,
      CSI_RS_Config_v1530 csi_RS_Config_v1530_,
      UplinkPowerControlDedicated_v1530 uplinkPowerControlDedicatedSCell_v1530_,
      LAA_SCellConfiguration_v1530 laa_SCellConfiguration_v1530_,
      PUSCH_ConfigDedicatedScell_v1530 pusch_ConfigDedicated_v1530_,
      PhysicalConfigDedicatedSCell_r10_semiStaticCFI_Config_r15 semiStaticCFI_Config_r15_,
      PhysicalConfigDedicatedSCell_r10_blindPDSCH_Repetition_Config_r15 blindPDSCH_Repetition_Config_r15_
   ) {
      super();
      nonUL_Configuration_r10 = nonUL_Configuration_r10_;
      ul_Configuration_r10 = ul_Configuration_r10_;
      csi_RS_ConfigNZPToReleaseList_r11 = csi_RS_ConfigNZPToReleaseList_r11_;
      csi_RS_ConfigNZPToAddModList_r11 = csi_RS_ConfigNZPToAddModList_r11_;
      csi_RS_ConfigZPToReleaseList_r11 = csi_RS_ConfigZPToReleaseList_r11_;
      csi_RS_ConfigZPToAddModList_r11 = csi_RS_ConfigZPToAddModList_r11_;
      epdcch_Config_r11 = epdcch_Config_r11_;
      pdsch_ConfigDedicated_v1130 = pdsch_ConfigDedicated_v1130_;
      cqi_ReportConfig_v1130 = cqi_ReportConfig_v1130_;
      pusch_ConfigDedicated_v1130 = pusch_ConfigDedicated_v1130_;
      uplinkPowerControlDedicatedSCell_v1130 = uplinkPowerControlDedicatedSCell_v1130_;
      antennaInfo_v1250 = antennaInfo_v1250_;
      eimta_MainConfigSCell_r12 = eimta_MainConfigSCell_r12_;
      cqi_ReportConfigSCell_v1250 = cqi_ReportConfigSCell_v1250_;
      uplinkPowerControlDedicatedSCell_v1250 = uplinkPowerControlDedicatedSCell_v1250_;
      csi_RS_Config_v1250 = csi_RS_Config_v1250_;
      pdsch_ConfigDedicated_v1280 = pdsch_ConfigDedicated_v1280_;
      pucch_Cell_r13 = pucch_Cell_r13_;
      pucch_SCell = pucch_SCell_;
      crossCarrierSchedulingConfig_r13 = crossCarrierSchedulingConfig_r13_;
      pdcch_ConfigSCell_r13 = pdcch_ConfigSCell_r13_;
      cqi_ReportConfig_v1310 = cqi_ReportConfig_v1310_;
      pdsch_ConfigDedicated_v1310 = pdsch_ConfigDedicated_v1310_;
      soundingRS_UL_ConfigDedicated_v1310 = soundingRS_UL_ConfigDedicated_v1310_;
      soundingRS_UL_ConfigDedicatedUpPTsExt_r13 = soundingRS_UL_ConfigDedicatedUpPTsExt_r13_;
      soundingRS_UL_ConfigDedicatedAperiodic_v1310 = soundingRS_UL_ConfigDedicatedAperiodic_v1310_;
      soundingRS_UL_ConfigDedicatedAperiodicUpPTsExt_r13 = soundingRS_UL_ConfigDedicatedAperiodicUpPTsExt_r13_;
      csi_RS_Config_v1310 = csi_RS_Config_v1310_;
      laa_SCellConfiguration_r13 = laa_SCellConfiguration_r13_;
      csi_RS_ConfigNZPToAddModListExt_r13 = csi_RS_ConfigNZPToAddModListExt_r13_;
      csi_RS_ConfigNZPToReleaseListExt_r13 = csi_RS_ConfigNZPToReleaseListExt_r13_;
      cqi_ReportConfig_v1320 = cqi_ReportConfig_v1320_;
      laa_SCellConfiguration_v1430 = laa_SCellConfiguration_v1430_;
      typeB_SRS_TPC_PDCCH_Config_r14 = typeB_SRS_TPC_PDCCH_Config_r14_;
      uplinkPUSCH_LessPowerControlDedicated_v1430 = uplinkPUSCH_LessPowerControlDedicated_v1430_;
      soundingRS_UL_PeriodicConfigDedicatedList_r14 = soundingRS_UL_PeriodicConfigDedicatedList_r14_;
      soundingRS_UL_PeriodicConfigDedicatedUpPTsExtList_r14 = soundingRS_UL_PeriodicConfigDedicatedUpPTsExtList_r14_;
      soundingRS_UL_AperiodicConfigDedicatedList_r14 = soundingRS_UL_AperiodicConfigDedicatedList_r14_;
      soundingRS_UL_ConfigDedicatedApUpPTsExtList_r14 = soundingRS_UL_ConfigDedicatedApUpPTsExtList_r14_;
      must_Config_r14 = must_Config_r14_;
      pusch_ConfigDedicated_v1430 = pusch_ConfigDedicated_v1430_;
      csi_RS_Config_v1430 = csi_RS_Config_v1430_;
      csi_RS_ConfigZP_ApList_r14 = csi_RS_ConfigZP_ApList_r14_;
      cqi_ReportConfig_v1430 = cqi_ReportConfig_v1430_;
      semiOpenLoop_r14 = semiOpenLoop_r14_;
      pdsch_ConfigDedicatedSCell_v1430 = pdsch_ConfigDedicatedSCell_v1430_;
      csi_RS_Config_v1480 = csi_RS_Config_v1480_;
      physicalConfigDedicatedSTTI_r15 = physicalConfigDedicatedSTTI_r15_;
      pdsch_ConfigDedicated_v1530 = pdsch_ConfigDedicated_v1530_;
      cqi_ReportConfig_v1530 = cqi_ReportConfig_v1530_;
      cqi_ReportConfigSCell_r15 = cqi_ReportConfigSCell_r15_;
      cqi_ShortConfigSCell_r15 = cqi_ShortConfigSCell_r15_;
      csi_RS_Config_v1530 = csi_RS_Config_v1530_;
      uplinkPowerControlDedicatedSCell_v1530 = uplinkPowerControlDedicatedSCell_v1530_;
      laa_SCellConfiguration_v1530 = laa_SCellConfiguration_v1530_;
      pusch_ConfigDedicated_v1530 = pusch_ConfigDedicated_v1530_;
      semiStaticCFI_Config_r15 = semiStaticCFI_Config_r15_;
      blindPDSCH_Repetition_Config_r15 = blindPDSCH_Repetition_Config_r15_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public PhysicalConfigDedicatedSCell_r10 (PhysicalConfigDedicatedSCell_r10_nonUL_Configuration_r10 nonUL_Configuration_r10_,
      PhysicalConfigDedicatedSCell_r10_ul_Configuration_r10 ul_Configuration_r10_,
      CSI_RS_ConfigNZPToReleaseList_r11 csi_RS_ConfigNZPToReleaseList_r11_,
      CSI_RS_ConfigNZPToAddModList_r11 csi_RS_ConfigNZPToAddModList_r11_,
      CSI_RS_ConfigZPToReleaseList_r11 csi_RS_ConfigZPToReleaseList_r11_,
      CSI_RS_ConfigZPToAddModList_r11 csi_RS_ConfigZPToAddModList_r11_,
      EPDCCH_Config_r11 epdcch_Config_r11_,
      PDSCH_ConfigDedicated_v1130 pdsch_ConfigDedicated_v1130_,
      CQI_ReportConfig_v1130 cqi_ReportConfig_v1130_,
      PUSCH_ConfigDedicated_v1130 pusch_ConfigDedicated_v1130_,
      UplinkPowerControlDedicated_v1130 uplinkPowerControlDedicatedSCell_v1130_,
      AntennaInfoDedicated_v1250 antennaInfo_v1250_,
      EIMTA_MainConfigServCell_r12 eimta_MainConfigSCell_r12_,
      CQI_ReportConfig_v1250 cqi_ReportConfigSCell_v1250_,
      UplinkPowerControlDedicated_v1250 uplinkPowerControlDedicatedSCell_v1250_,
      CSI_RS_Config_v1250 csi_RS_Config_v1250_,
      PDSCH_ConfigDedicated_v1280 pdsch_ConfigDedicated_v1280_,
      PhysicalConfigDedicatedSCell_r10_pucch_Cell_r13 pucch_Cell_r13_,
      PhysicalConfigDedicatedSCell_r10_pucch_SCell pucch_SCell_,
      CrossCarrierSchedulingConfig_r13 crossCarrierSchedulingConfig_r13_,
      PDCCH_ConfigSCell_r13 pdcch_ConfigSCell_r13_,
      CQI_ReportConfig_v1310 cqi_ReportConfig_v1310_,
      PDSCH_ConfigDedicated_v1310 pdsch_ConfigDedicated_v1310_,
      SoundingRS_UL_ConfigDedicated_v1310 soundingRS_UL_ConfigDedicated_v1310_,
      SoundingRS_UL_ConfigDedicatedUpPTsExt_r13 soundingRS_UL_ConfigDedicatedUpPTsExt_r13_,
      SoundingRS_UL_ConfigDedicatedAperiodic_v1310 soundingRS_UL_ConfigDedicatedAperiodic_v1310_,
      SoundingRS_UL_ConfigDedicatedAperiodicUpPTsExt_r13 soundingRS_UL_ConfigDedicatedAperiodicUpPTsExt_r13_,
      CSI_RS_Config_v1310 csi_RS_Config_v1310_,
      LAA_SCellConfiguration_r13 laa_SCellConfiguration_r13_,
      CSI_RS_ConfigNZPToAddModListExt_r13 csi_RS_ConfigNZPToAddModListExt_r13_,
      CSI_RS_ConfigNZPToReleaseListExt_r13 csi_RS_ConfigNZPToReleaseListExt_r13_,
      CQI_ReportConfig_v1320 cqi_ReportConfig_v1320_,
      LAA_SCellConfiguration_v1430 laa_SCellConfiguration_v1430_,
      SRS_TPC_PDCCH_Config_r14 typeB_SRS_TPC_PDCCH_Config_r14_,
      UplinkPUSCH_LessPowerControlDedicated_v1430 uplinkPUSCH_LessPowerControlDedicated_v1430_,
      PhysicalConfigDedicatedSCell_r10_soundingRS_UL_PeriodicConfigDedicatedList_r14 soundingRS_UL_PeriodicConfigDedicatedList_r14_,
      PhysicalConfigDedicatedSCell_r10_soundingRS_UL_PeriodicConfigDedicatedUpPTsExtList_r14 soundingRS_UL_PeriodicConfigDedicatedUpPTsExtList_r14_,
      PhysicalConfigDedicatedSCell_r10_soundingRS_UL_AperiodicConfigDedicatedList_r14 soundingRS_UL_AperiodicConfigDedicatedList_r14_,
      PhysicalConfigDedicatedSCell_r10_soundingRS_UL_ConfigDedicatedApUpPTsExtList_r14 soundingRS_UL_ConfigDedicatedApUpPTsExtList_r14_,
      PhysicalConfigDedicatedSCell_r10_must_Config_r14 must_Config_r14_,
      PUSCH_ConfigDedicatedSCell_v1430 pusch_ConfigDedicated_v1430_,
      CSI_RS_Config_v1430 csi_RS_Config_v1430_,
      CSI_RS_ConfigZP_ApList_r14 csi_RS_ConfigZP_ApList_r14_,
      CQI_ReportConfig_v1430 cqi_ReportConfig_v1430_,
      boolean semiOpenLoop_r14_,
      PDSCH_ConfigDedicatedSCell_v1430 pdsch_ConfigDedicatedSCell_v1430_,
      CSI_RS_Config_v1480 csi_RS_Config_v1480_,
      PhysicalConfigDedicatedSTTI_r15 physicalConfigDedicatedSTTI_r15_,
      PDSCH_ConfigDedicated_v1530 pdsch_ConfigDedicated_v1530_,
      CQI_ReportConfig_v1530 cqi_ReportConfig_v1530_,
      CQI_ReportConfigSCell_r15 cqi_ReportConfigSCell_r15_,
      CQI_ShortConfigSCell_r15 cqi_ShortConfigSCell_r15_,
      CSI_RS_Config_v1530 csi_RS_Config_v1530_,
      UplinkPowerControlDedicated_v1530 uplinkPowerControlDedicatedSCell_v1530_,
      LAA_SCellConfiguration_v1530 laa_SCellConfiguration_v1530_,
      PUSCH_ConfigDedicatedScell_v1530 pusch_ConfigDedicated_v1530_,
      PhysicalConfigDedicatedSCell_r10_semiStaticCFI_Config_r15 semiStaticCFI_Config_r15_,
      PhysicalConfigDedicatedSCell_r10_blindPDSCH_Repetition_Config_r15 blindPDSCH_Repetition_Config_r15_
   ) {
      super();
      nonUL_Configuration_r10 = nonUL_Configuration_r10_;
      ul_Configuration_r10 = ul_Configuration_r10_;
      csi_RS_ConfigNZPToReleaseList_r11 = csi_RS_ConfigNZPToReleaseList_r11_;
      csi_RS_ConfigNZPToAddModList_r11 = csi_RS_ConfigNZPToAddModList_r11_;
      csi_RS_ConfigZPToReleaseList_r11 = csi_RS_ConfigZPToReleaseList_r11_;
      csi_RS_ConfigZPToAddModList_r11 = csi_RS_ConfigZPToAddModList_r11_;
      epdcch_Config_r11 = epdcch_Config_r11_;
      pdsch_ConfigDedicated_v1130 = pdsch_ConfigDedicated_v1130_;
      cqi_ReportConfig_v1130 = cqi_ReportConfig_v1130_;
      pusch_ConfigDedicated_v1130 = pusch_ConfigDedicated_v1130_;
      uplinkPowerControlDedicatedSCell_v1130 = uplinkPowerControlDedicatedSCell_v1130_;
      antennaInfo_v1250 = antennaInfo_v1250_;
      eimta_MainConfigSCell_r12 = eimta_MainConfigSCell_r12_;
      cqi_ReportConfigSCell_v1250 = cqi_ReportConfigSCell_v1250_;
      uplinkPowerControlDedicatedSCell_v1250 = uplinkPowerControlDedicatedSCell_v1250_;
      csi_RS_Config_v1250 = csi_RS_Config_v1250_;
      pdsch_ConfigDedicated_v1280 = pdsch_ConfigDedicated_v1280_;
      pucch_Cell_r13 = pucch_Cell_r13_;
      pucch_SCell = pucch_SCell_;
      crossCarrierSchedulingConfig_r13 = crossCarrierSchedulingConfig_r13_;
      pdcch_ConfigSCell_r13 = pdcch_ConfigSCell_r13_;
      cqi_ReportConfig_v1310 = cqi_ReportConfig_v1310_;
      pdsch_ConfigDedicated_v1310 = pdsch_ConfigDedicated_v1310_;
      soundingRS_UL_ConfigDedicated_v1310 = soundingRS_UL_ConfigDedicated_v1310_;
      soundingRS_UL_ConfigDedicatedUpPTsExt_r13 = soundingRS_UL_ConfigDedicatedUpPTsExt_r13_;
      soundingRS_UL_ConfigDedicatedAperiodic_v1310 = soundingRS_UL_ConfigDedicatedAperiodic_v1310_;
      soundingRS_UL_ConfigDedicatedAperiodicUpPTsExt_r13 = soundingRS_UL_ConfigDedicatedAperiodicUpPTsExt_r13_;
      csi_RS_Config_v1310 = csi_RS_Config_v1310_;
      laa_SCellConfiguration_r13 = laa_SCellConfiguration_r13_;
      csi_RS_ConfigNZPToAddModListExt_r13 = csi_RS_ConfigNZPToAddModListExt_r13_;
      csi_RS_ConfigNZPToReleaseListExt_r13 = csi_RS_ConfigNZPToReleaseListExt_r13_;
      cqi_ReportConfig_v1320 = cqi_ReportConfig_v1320_;
      laa_SCellConfiguration_v1430 = laa_SCellConfiguration_v1430_;
      typeB_SRS_TPC_PDCCH_Config_r14 = typeB_SRS_TPC_PDCCH_Config_r14_;
      uplinkPUSCH_LessPowerControlDedicated_v1430 = uplinkPUSCH_LessPowerControlDedicated_v1430_;
      soundingRS_UL_PeriodicConfigDedicatedList_r14 = soundingRS_UL_PeriodicConfigDedicatedList_r14_;
      soundingRS_UL_PeriodicConfigDedicatedUpPTsExtList_r14 = soundingRS_UL_PeriodicConfigDedicatedUpPTsExtList_r14_;
      soundingRS_UL_AperiodicConfigDedicatedList_r14 = soundingRS_UL_AperiodicConfigDedicatedList_r14_;
      soundingRS_UL_ConfigDedicatedApUpPTsExtList_r14 = soundingRS_UL_ConfigDedicatedApUpPTsExtList_r14_;
      must_Config_r14 = must_Config_r14_;
      pusch_ConfigDedicated_v1430 = pusch_ConfigDedicated_v1430_;
      csi_RS_Config_v1430 = csi_RS_Config_v1430_;
      csi_RS_ConfigZP_ApList_r14 = csi_RS_ConfigZP_ApList_r14_;
      cqi_ReportConfig_v1430 = cqi_ReportConfig_v1430_;
      semiOpenLoop_r14 = new Asn1Boolean (semiOpenLoop_r14_);
      pdsch_ConfigDedicatedSCell_v1430 = pdsch_ConfigDedicatedSCell_v1430_;
      csi_RS_Config_v1480 = csi_RS_Config_v1480_;
      physicalConfigDedicatedSTTI_r15 = physicalConfigDedicatedSTTI_r15_;
      pdsch_ConfigDedicated_v1530 = pdsch_ConfigDedicated_v1530_;
      cqi_ReportConfig_v1530 = cqi_ReportConfig_v1530_;
      cqi_ReportConfigSCell_r15 = cqi_ReportConfigSCell_r15_;
      cqi_ShortConfigSCell_r15 = cqi_ShortConfigSCell_r15_;
      csi_RS_Config_v1530 = csi_RS_Config_v1530_;
      uplinkPowerControlDedicatedSCell_v1530 = uplinkPowerControlDedicatedSCell_v1530_;
      laa_SCellConfiguration_v1530 = laa_SCellConfiguration_v1530_;
      pusch_ConfigDedicated_v1530 = pusch_ConfigDedicated_v1530_;
      semiStaticCFI_Config_r15 = semiStaticCFI_Config_r15_;
      blindPDSCH_Repetition_Config_r15 = blindPDSCH_Repetition_Config_r15_;
   }

   public void init () {
      nonUL_Configuration_r10 = null;
      ul_Configuration_r10 = null;
      csi_RS_ConfigNZPToReleaseList_r11 = null;
      csi_RS_ConfigNZPToAddModList_r11 = null;
      csi_RS_ConfigZPToReleaseList_r11 = null;
      csi_RS_ConfigZPToAddModList_r11 = null;
      epdcch_Config_r11 = null;
      pdsch_ConfigDedicated_v1130 = null;
      cqi_ReportConfig_v1130 = null;
      pusch_ConfigDedicated_v1130 = null;
      uplinkPowerControlDedicatedSCell_v1130 = null;
      antennaInfo_v1250 = null;
      eimta_MainConfigSCell_r12 = null;
      cqi_ReportConfigSCell_v1250 = null;
      uplinkPowerControlDedicatedSCell_v1250 = null;
      csi_RS_Config_v1250 = null;
      pdsch_ConfigDedicated_v1280 = null;
      pucch_Cell_r13 = null;
      pucch_SCell = null;
      crossCarrierSchedulingConfig_r13 = null;
      pdcch_ConfigSCell_r13 = null;
      cqi_ReportConfig_v1310 = null;
      pdsch_ConfigDedicated_v1310 = null;
      soundingRS_UL_ConfigDedicated_v1310 = null;
      soundingRS_UL_ConfigDedicatedUpPTsExt_r13 = null;
      soundingRS_UL_ConfigDedicatedAperiodic_v1310 = null;
      soundingRS_UL_ConfigDedicatedAperiodicUpPTsExt_r13 = null;
      csi_RS_Config_v1310 = null;
      laa_SCellConfiguration_r13 = null;
      csi_RS_ConfigNZPToAddModListExt_r13 = null;
      csi_RS_ConfigNZPToReleaseListExt_r13 = null;
      cqi_ReportConfig_v1320 = null;
      laa_SCellConfiguration_v1430 = null;
      typeB_SRS_TPC_PDCCH_Config_r14 = null;
      uplinkPUSCH_LessPowerControlDedicated_v1430 = null;
      soundingRS_UL_PeriodicConfigDedicatedList_r14 = null;
      soundingRS_UL_PeriodicConfigDedicatedUpPTsExtList_r14 = null;
      soundingRS_UL_AperiodicConfigDedicatedList_r14 = null;
      soundingRS_UL_ConfigDedicatedApUpPTsExtList_r14 = null;
      must_Config_r14 = null;
      pusch_ConfigDedicated_v1430 = null;
      csi_RS_Config_v1430 = null;
      csi_RS_ConfigZP_ApList_r14 = null;
      cqi_ReportConfig_v1430 = null;
      semiOpenLoop_r14 = null;
      pdsch_ConfigDedicatedSCell_v1430 = null;
      csi_RS_Config_v1480 = null;
      physicalConfigDedicatedSTTI_r15 = null;
      pdsch_ConfigDedicated_v1530 = null;
      cqi_ReportConfig_v1530 = null;
      cqi_ReportConfigSCell_r15 = null;
      cqi_ShortConfigSCell_r15 = null;
      csi_RS_Config_v1530 = null;
      uplinkPowerControlDedicatedSCell_v1530 = null;
      laa_SCellConfiguration_v1530 = null;
      pusch_ConfigDedicated_v1530 = null;
      semiStaticCFI_Config_r15 = null;
      blindPDSCH_Repetition_Config_r15 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 59; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return nonUL_Configuration_r10;
         case 1: return ul_Configuration_r10;
         case 2: return csi_RS_ConfigNZPToReleaseList_r11;
         case 3: return csi_RS_ConfigNZPToAddModList_r11;
         case 4: return csi_RS_ConfigZPToReleaseList_r11;
         case 5: return csi_RS_ConfigZPToAddModList_r11;
         case 6: return epdcch_Config_r11;
         case 7: return pdsch_ConfigDedicated_v1130;
         case 8: return cqi_ReportConfig_v1130;
         case 9: return pusch_ConfigDedicated_v1130;
         case 10: return uplinkPowerControlDedicatedSCell_v1130;
         case 11: return antennaInfo_v1250;
         case 12: return eimta_MainConfigSCell_r12;
         case 13: return cqi_ReportConfigSCell_v1250;
         case 14: return uplinkPowerControlDedicatedSCell_v1250;
         case 15: return csi_RS_Config_v1250;
         case 16: return pdsch_ConfigDedicated_v1280;
         case 17: return pucch_Cell_r13;
         case 18: return pucch_SCell;
         case 19: return crossCarrierSchedulingConfig_r13;
         case 20: return pdcch_ConfigSCell_r13;
         case 21: return cqi_ReportConfig_v1310;
         case 22: return pdsch_ConfigDedicated_v1310;
         case 23: return soundingRS_UL_ConfigDedicated_v1310;
         case 24: return soundingRS_UL_ConfigDedicatedUpPTsExt_r13;
         case 25: return soundingRS_UL_ConfigDedicatedAperiodic_v1310;
         case 26: return soundingRS_UL_ConfigDedicatedAperiodicUpPTsExt_r13;
         case 27: return csi_RS_Config_v1310;
         case 28: return laa_SCellConfiguration_r13;
         case 29: return csi_RS_ConfigNZPToAddModListExt_r13;
         case 30: return csi_RS_ConfigNZPToReleaseListExt_r13;
         case 31: return cqi_ReportConfig_v1320;
         case 32: return laa_SCellConfiguration_v1430;
         case 33: return typeB_SRS_TPC_PDCCH_Config_r14;
         case 34: return uplinkPUSCH_LessPowerControlDedicated_v1430;
         case 35: return soundingRS_UL_PeriodicConfigDedicatedList_r14;
         case 36: return soundingRS_UL_PeriodicConfigDedicatedUpPTsExtList_r14;
         case 37: return soundingRS_UL_AperiodicConfigDedicatedList_r14;
         case 38: return soundingRS_UL_ConfigDedicatedApUpPTsExtList_r14;
         case 39: return must_Config_r14;
         case 40: return pusch_ConfigDedicated_v1430;
         case 41: return csi_RS_Config_v1430;
         case 42: return csi_RS_ConfigZP_ApList_r14;
         case 43: return cqi_ReportConfig_v1430;
         case 44: return semiOpenLoop_r14;
         case 45: return pdsch_ConfigDedicatedSCell_v1430;
         case 46: return csi_RS_Config_v1480;
         case 47: return physicalConfigDedicatedSTTI_r15;
         case 48: return pdsch_ConfigDedicated_v1530;
         case 49: return cqi_ReportConfig_v1530;
         case 50: return cqi_ReportConfigSCell_r15;
         case 51: return cqi_ShortConfigSCell_r15;
         case 52: return csi_RS_Config_v1530;
         case 53: return uplinkPowerControlDedicatedSCell_v1530;
         case 54: return laa_SCellConfiguration_v1530;
         case 55: return pusch_ConfigDedicated_v1530;
         case 56: return semiStaticCFI_Config_r15;
         case 57: return blindPDSCH_Repetition_Config_r15;
         case 58: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "nonUL-Configuration-r10";
         case 1: return "ul-Configuration-r10";
         case 2: return "csi-RS-ConfigNZPToReleaseList-r11";
         case 3: return "csi-RS-ConfigNZPToAddModList-r11";
         case 4: return "csi-RS-ConfigZPToReleaseList-r11";
         case 5: return "csi-RS-ConfigZPToAddModList-r11";
         case 6: return "epdcch-Config-r11";
         case 7: return "pdsch-ConfigDedicated-v1130";
         case 8: return "cqi-ReportConfig-v1130";
         case 9: return "pusch-ConfigDedicated-v1130";
         case 10: return "uplinkPowerControlDedicatedSCell-v1130";
         case 11: return "antennaInfo-v1250";
         case 12: return "eimta-MainConfigSCell-r12";
         case 13: return "cqi-ReportConfigSCell-v1250";
         case 14: return "uplinkPowerControlDedicatedSCell-v1250";
         case 15: return "csi-RS-Config-v1250";
         case 16: return "pdsch-ConfigDedicated-v1280";
         case 17: return "pucch-Cell-r13";
         case 18: return "pucch-SCell";
         case 19: return "crossCarrierSchedulingConfig-r13";
         case 20: return "pdcch-ConfigSCell-r13";
         case 21: return "cqi-ReportConfig-v1310";
         case 22: return "pdsch-ConfigDedicated-v1310";
         case 23: return "soundingRS-UL-ConfigDedicated-v1310";
         case 24: return "soundingRS-UL-ConfigDedicatedUpPTsExt-r13";
         case 25: return "soundingRS-UL-ConfigDedicatedAperiodic-v1310";
         case 26: return "soundingRS-UL-ConfigDedicatedAperiodicUpPTsExt-r13";
         case 27: return "csi-RS-Config-v1310";
         case 28: return "laa-SCellConfiguration-r13";
         case 29: return "csi-RS-ConfigNZPToAddModListExt-r13";
         case 30: return "csi-RS-ConfigNZPToReleaseListExt-r13";
         case 31: return "cqi-ReportConfig-v1320";
         case 32: return "laa-SCellConfiguration-v1430";
         case 33: return "typeB-SRS-TPC-PDCCH-Config-r14";
         case 34: return "uplinkPUSCH-LessPowerControlDedicated-v1430";
         case 35: return "soundingRS-UL-PeriodicConfigDedicatedList-r14";
         case 36: return "soundingRS-UL-PeriodicConfigDedicatedUpPTsExtList-r14";
         case 37: return "soundingRS-UL-AperiodicConfigDedicatedList-r14";
         case 38: return "soundingRS-UL-ConfigDedicatedApUpPTsExtList-r14";
         case 39: return "must-Config-r14";
         case 40: return "pusch-ConfigDedicated-v1430";
         case 41: return "csi-RS-Config-v1430";
         case 42: return "csi-RS-ConfigZP-ApList-r14";
         case 43: return "cqi-ReportConfig-v1430";
         case 44: return "semiOpenLoop-r14";
         case 45: return "pdsch-ConfigDedicatedSCell-v1430";
         case 46: return "csi-RS-Config-v1480";
         case 47: return "physicalConfigDedicatedSTTI-r15";
         case 48: return "pdsch-ConfigDedicated-v1530";
         case 49: return "cqi-ReportConfig-v1530";
         case 50: return "cqi-ReportConfigSCell-r15";
         case 51: return "cqi-ShortConfigSCell-r15";
         case 52: return "csi-RS-Config-v1530";
         case 53: return "uplinkPowerControlDedicatedSCell-v1530";
         case 54: return "laa-SCellConfiguration-v1530";
         case 55: return "pusch-ConfigDedicated-v1530";
         case 56: return "semiStaticCFI-Config-r15";
         case 57: return "blindPDSCH-Repetition-Config-r15";
         case 58: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean nonUL_Configuration_r10Present = buffer.decodeBit ("nonUL_Configuration_r10Present");
      boolean ul_Configuration_r10Present = buffer.decodeBit ("ul_Configuration_r10Present");

      // decode nonUL_Configuration_r10

      if (nonUL_Configuration_r10Present) {
         buffer.getContext().eventDispatcher.startElement("nonUL_Configuration_r10", -1);

         nonUL_Configuration_r10 = new PhysicalConfigDedicatedSCell_r10_nonUL_Configuration_r10();
         nonUL_Configuration_r10.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nonUL_Configuration_r10", -1);
      }
      else {
         nonUL_Configuration_r10 = null;
      }

      // decode ul_Configuration_r10

      if (ul_Configuration_r10Present) {
         buffer.getContext().eventDispatcher.startElement("ul_Configuration_r10", -1);

         ul_Configuration_r10 = new PhysicalConfigDedicatedSCell_r10_ul_Configuration_r10();
         ul_Configuration_r10.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ul_Configuration_r10", -1);
      }
      else {
         ul_Configuration_r10 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV4ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV5ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV6ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV7ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV8ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV9ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean csi_RS_ConfigNZPToReleaseList_r11Present = buffer.decodeBit ("csi_RS_ConfigNZPToReleaseList_r11Present");

            boolean csi_RS_ConfigNZPToAddModList_r11Present = buffer.decodeBit ("csi_RS_ConfigNZPToAddModList_r11Present");

            boolean csi_RS_ConfigZPToReleaseList_r11Present = buffer.decodeBit ("csi_RS_ConfigZPToReleaseList_r11Present");

            boolean csi_RS_ConfigZPToAddModList_r11Present = buffer.decodeBit ("csi_RS_ConfigZPToAddModList_r11Present");

            boolean epdcch_Config_r11Present = buffer.decodeBit ("epdcch_Config_r11Present");

            boolean pdsch_ConfigDedicated_v1130Present = buffer.decodeBit ("pdsch_ConfigDedicated_v1130Present");

            boolean cqi_ReportConfig_v1130Present = buffer.decodeBit ("cqi_ReportConfig_v1130Present");

            boolean pusch_ConfigDedicated_v1130Present = buffer.decodeBit ("pusch_ConfigDedicated_v1130Present");

            boolean uplinkPowerControlDedicatedSCell_v1130Present = buffer.decodeBit ("uplinkPowerControlDedicatedSCell_v1130Present");

            // decode csi_RS_ConfigNZPToReleaseList_r11

            if (csi_RS_ConfigNZPToReleaseList_r11Present) {
               buffer.getContext().eventDispatcher.startElement("csi_RS_ConfigNZPToReleaseList_r11", -1);

               csi_RS_ConfigNZPToReleaseList_r11 = new CSI_RS_ConfigNZPToReleaseList_r11();
               csi_RS_ConfigNZPToReleaseList_r11.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("csi_RS_ConfigNZPToReleaseList_r11", -1);
            }
            else {
               csi_RS_ConfigNZPToReleaseList_r11 = null;
            }

            // decode csi_RS_ConfigNZPToAddModList_r11

            if (csi_RS_ConfigNZPToAddModList_r11Present) {
               buffer.getContext().eventDispatcher.startElement("csi_RS_ConfigNZPToAddModList_r11", -1);

               csi_RS_ConfigNZPToAddModList_r11 = new CSI_RS_ConfigNZPToAddModList_r11();
               csi_RS_ConfigNZPToAddModList_r11.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("csi_RS_ConfigNZPToAddModList_r11", -1);
            }
            else {
               csi_RS_ConfigNZPToAddModList_r11 = null;
            }

            // decode csi_RS_ConfigZPToReleaseList_r11

            if (csi_RS_ConfigZPToReleaseList_r11Present) {
               buffer.getContext().eventDispatcher.startElement("csi_RS_ConfigZPToReleaseList_r11", -1);

               csi_RS_ConfigZPToReleaseList_r11 = new CSI_RS_ConfigZPToReleaseList_r11();
               csi_RS_ConfigZPToReleaseList_r11.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("csi_RS_ConfigZPToReleaseList_r11", -1);
            }
            else {
               csi_RS_ConfigZPToReleaseList_r11 = null;
            }

            // decode csi_RS_ConfigZPToAddModList_r11

            if (csi_RS_ConfigZPToAddModList_r11Present) {
               buffer.getContext().eventDispatcher.startElement("csi_RS_ConfigZPToAddModList_r11", -1);

               csi_RS_ConfigZPToAddModList_r11 = new CSI_RS_ConfigZPToAddModList_r11();
               csi_RS_ConfigZPToAddModList_r11.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("csi_RS_ConfigZPToAddModList_r11", -1);
            }
            else {
               csi_RS_ConfigZPToAddModList_r11 = null;
            }

            // decode epdcch_Config_r11

            if (epdcch_Config_r11Present) {
               buffer.getContext().eventDispatcher.startElement("epdcch_Config_r11", -1);

               epdcch_Config_r11 = new EPDCCH_Config_r11();
               epdcch_Config_r11.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("epdcch_Config_r11", -1);
            }
            else {
               epdcch_Config_r11 = null;
            }

            // decode pdsch_ConfigDedicated_v1130

            if (pdsch_ConfigDedicated_v1130Present) {
               buffer.getContext().eventDispatcher.startElement("pdsch_ConfigDedicated_v1130", -1);

               pdsch_ConfigDedicated_v1130 = new PDSCH_ConfigDedicated_v1130();
               pdsch_ConfigDedicated_v1130.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("pdsch_ConfigDedicated_v1130", -1);
            }
            else {
               pdsch_ConfigDedicated_v1130 = null;
            }

            // decode cqi_ReportConfig_v1130

            if (cqi_ReportConfig_v1130Present) {
               buffer.getContext().eventDispatcher.startElement("cqi_ReportConfig_v1130", -1);

               cqi_ReportConfig_v1130 = new CQI_ReportConfig_v1130();
               cqi_ReportConfig_v1130.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("cqi_ReportConfig_v1130", -1);
            }
            else {
               cqi_ReportConfig_v1130 = null;
            }

            // decode pusch_ConfigDedicated_v1130

            if (pusch_ConfigDedicated_v1130Present) {
               buffer.getContext().eventDispatcher.startElement("pusch_ConfigDedicated_v1130", -1);

               pusch_ConfigDedicated_v1130 = new PUSCH_ConfigDedicated_v1130();
               pusch_ConfigDedicated_v1130.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("pusch_ConfigDedicated_v1130", -1);
            }
            else {
               pusch_ConfigDedicated_v1130 = null;
            }

            // decode uplinkPowerControlDedicatedSCell_v1130

            if (uplinkPowerControlDedicatedSCell_v1130Present) {
               buffer.getContext().eventDispatcher.startElement("uplinkPowerControlDedicatedSCell_v1130", -1);

               uplinkPowerControlDedicatedSCell_v1130 = new UplinkPowerControlDedicated_v1130();
               uplinkPowerControlDedicatedSCell_v1130.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("uplinkPowerControlDedicatedSCell_v1130", -1);
            }
            else {
               uplinkPowerControlDedicatedSCell_v1130 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean antennaInfo_v1250Present = buffer.decodeBit ("antennaInfo_v1250Present");

            boolean eimta_MainConfigSCell_r12Present = buffer.decodeBit ("eimta_MainConfigSCell_r12Present");

            boolean cqi_ReportConfigSCell_v1250Present = buffer.decodeBit ("cqi_ReportConfigSCell_v1250Present");

            boolean uplinkPowerControlDedicatedSCell_v1250Present = buffer.decodeBit ("uplinkPowerControlDedicatedSCell_v1250Present");

            boolean csi_RS_Config_v1250Present = buffer.decodeBit ("csi_RS_Config_v1250Present");

            // decode antennaInfo_v1250

            if (antennaInfo_v1250Present) {
               buffer.getContext().eventDispatcher.startElement("antennaInfo_v1250", -1);

               antennaInfo_v1250 = new AntennaInfoDedicated_v1250();
               antennaInfo_v1250.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("antennaInfo_v1250", -1);
            }
            else {
               antennaInfo_v1250 = null;
            }

            // decode eimta_MainConfigSCell_r12

            if (eimta_MainConfigSCell_r12Present) {
               buffer.getContext().eventDispatcher.startElement("eimta_MainConfigSCell_r12", -1);

               eimta_MainConfigSCell_r12 = new EIMTA_MainConfigServCell_r12();
               eimta_MainConfigSCell_r12.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("eimta_MainConfigSCell_r12", -1);
            }
            else {
               eimta_MainConfigSCell_r12 = null;
            }

            // decode cqi_ReportConfigSCell_v1250

            if (cqi_ReportConfigSCell_v1250Present) {
               buffer.getContext().eventDispatcher.startElement("cqi_ReportConfigSCell_v1250", -1);

               cqi_ReportConfigSCell_v1250 = new CQI_ReportConfig_v1250();
               cqi_ReportConfigSCell_v1250.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("cqi_ReportConfigSCell_v1250", -1);
            }
            else {
               cqi_ReportConfigSCell_v1250 = null;
            }

            // decode uplinkPowerControlDedicatedSCell_v1250

            if (uplinkPowerControlDedicatedSCell_v1250Present) {
               buffer.getContext().eventDispatcher.startElement("uplinkPowerControlDedicatedSCell_v1250", -1);

               uplinkPowerControlDedicatedSCell_v1250 = new UplinkPowerControlDedicated_v1250();
               uplinkPowerControlDedicatedSCell_v1250.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("uplinkPowerControlDedicatedSCell_v1250", -1);
            }
            else {
               uplinkPowerControlDedicatedSCell_v1250 = null;
            }

            // decode csi_RS_Config_v1250

            if (csi_RS_Config_v1250Present) {
               buffer.getContext().eventDispatcher.startElement("csi_RS_Config_v1250", -1);

               csi_RS_Config_v1250 = new CSI_RS_Config_v1250();
               csi_RS_Config_v1250.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("csi_RS_Config_v1250", -1);
            }
            else {
               csi_RS_Config_v1250 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV4ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean pdsch_ConfigDedicated_v1280Present = buffer.decodeBit ("pdsch_ConfigDedicated_v1280Present");

            // decode pdsch_ConfigDedicated_v1280

            if (pdsch_ConfigDedicated_v1280Present) {
               buffer.getContext().eventDispatcher.startElement("pdsch_ConfigDedicated_v1280", -1);

               pdsch_ConfigDedicated_v1280 = new PDSCH_ConfigDedicated_v1280();
               pdsch_ConfigDedicated_v1280.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("pdsch_ConfigDedicated_v1280", -1);
            }
            else {
               pdsch_ConfigDedicated_v1280 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV5ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean pucch_Cell_r13Present = buffer.decodeBit ("pucch_Cell_r13Present");

            boolean pucch_SCellPresent = buffer.decodeBit ("pucch_SCellPresent");

            boolean crossCarrierSchedulingConfig_r13Present = buffer.decodeBit ("crossCarrierSchedulingConfig_r13Present");

            boolean pdcch_ConfigSCell_r13Present = buffer.decodeBit ("pdcch_ConfigSCell_r13Present");

            boolean cqi_ReportConfig_v1310Present = buffer.decodeBit ("cqi_ReportConfig_v1310Present");

            boolean pdsch_ConfigDedicated_v1310Present = buffer.decodeBit ("pdsch_ConfigDedicated_v1310Present");

            boolean soundingRS_UL_ConfigDedicated_v1310Present = buffer.decodeBit ("soundingRS_UL_ConfigDedicated_v1310Present");

            boolean soundingRS_UL_ConfigDedicatedUpPTsExt_r13Present = buffer.decodeBit ("soundingRS_UL_ConfigDedicatedUpPTsExt_r13Present");

            boolean soundingRS_UL_ConfigDedicatedAperiodic_v1310Present = buffer.decodeBit ("soundingRS_UL_ConfigDedicatedAperiodic_v1310Present");

            boolean soundingRS_UL_ConfigDedicatedAperiodicUpPTsExt_r13Present = buffer.decodeBit ("soundingRS_UL_ConfigDedicatedAperiodicUpPTsExt_r13Present");

            boolean csi_RS_Config_v1310Present = buffer.decodeBit ("csi_RS_Config_v1310Present");

            boolean laa_SCellConfiguration_r13Present = buffer.decodeBit ("laa_SCellConfiguration_r13Present");

            boolean csi_RS_ConfigNZPToAddModListExt_r13Present = buffer.decodeBit ("csi_RS_ConfigNZPToAddModListExt_r13Present");

            boolean csi_RS_ConfigNZPToReleaseListExt_r13Present = buffer.decodeBit ("csi_RS_ConfigNZPToReleaseListExt_r13Present");

            // decode pucch_Cell_r13

            if (pucch_Cell_r13Present) {
               buffer.getContext().eventDispatcher.startElement("pucch_Cell_r13", -1);

               int tval = PhysicalConfigDedicatedSCell_r10_pucch_Cell_r13.decodeEnumValue (buffer);
               pucch_Cell_r13 = PhysicalConfigDedicatedSCell_r10_pucch_Cell_r13.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("pucch_Cell_r13", -1);
            }
            else {
               pucch_Cell_r13 = null;
            }

            // decode pucch_SCell

            if (pucch_SCellPresent) {
               buffer.getContext().eventDispatcher.startElement("pucch_SCell", -1);

               pucch_SCell = new PhysicalConfigDedicatedSCell_r10_pucch_SCell();
               pucch_SCell.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("pucch_SCell", -1);
            }
            else {
               pucch_SCell = null;
            }

            // decode crossCarrierSchedulingConfig_r13

            if (crossCarrierSchedulingConfig_r13Present) {
               buffer.getContext().eventDispatcher.startElement("crossCarrierSchedulingConfig_r13", -1);

               crossCarrierSchedulingConfig_r13 = new CrossCarrierSchedulingConfig_r13();
               crossCarrierSchedulingConfig_r13.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("crossCarrierSchedulingConfig_r13", -1);
            }
            else {
               crossCarrierSchedulingConfig_r13 = null;
            }

            // decode pdcch_ConfigSCell_r13

            if (pdcch_ConfigSCell_r13Present) {
               buffer.getContext().eventDispatcher.startElement("pdcch_ConfigSCell_r13", -1);

               pdcch_ConfigSCell_r13 = new PDCCH_ConfigSCell_r13();
               pdcch_ConfigSCell_r13.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("pdcch_ConfigSCell_r13", -1);
            }
            else {
               pdcch_ConfigSCell_r13 = null;
            }

            // decode cqi_ReportConfig_v1310

            if (cqi_ReportConfig_v1310Present) {
               buffer.getContext().eventDispatcher.startElement("cqi_ReportConfig_v1310", -1);

               cqi_ReportConfig_v1310 = new CQI_ReportConfig_v1310();
               cqi_ReportConfig_v1310.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("cqi_ReportConfig_v1310", -1);
            }
            else {
               cqi_ReportConfig_v1310 = null;
            }

            // decode pdsch_ConfigDedicated_v1310

            if (pdsch_ConfigDedicated_v1310Present) {
               buffer.getContext().eventDispatcher.startElement("pdsch_ConfigDedicated_v1310", -1);

               pdsch_ConfigDedicated_v1310 = new PDSCH_ConfigDedicated_v1310();
               pdsch_ConfigDedicated_v1310.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("pdsch_ConfigDedicated_v1310", -1);
            }
            else {
               pdsch_ConfigDedicated_v1310 = null;
            }

            // decode soundingRS_UL_ConfigDedicated_v1310

            if (soundingRS_UL_ConfigDedicated_v1310Present) {
               buffer.getContext().eventDispatcher.startElement("soundingRS_UL_ConfigDedicated_v1310", -1);

               soundingRS_UL_ConfigDedicated_v1310 = new SoundingRS_UL_ConfigDedicated_v1310();
               soundingRS_UL_ConfigDedicated_v1310.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("soundingRS_UL_ConfigDedicated_v1310", -1);
            }
            else {
               soundingRS_UL_ConfigDedicated_v1310 = null;
            }

            // decode soundingRS_UL_ConfigDedicatedUpPTsExt_r13

            if (soundingRS_UL_ConfigDedicatedUpPTsExt_r13Present) {
               buffer.getContext().eventDispatcher.startElement("soundingRS_UL_ConfigDedicatedUpPTsExt_r13", -1);

               soundingRS_UL_ConfigDedicatedUpPTsExt_r13 = new SoundingRS_UL_ConfigDedicatedUpPTsExt_r13();
               soundingRS_UL_ConfigDedicatedUpPTsExt_r13.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("soundingRS_UL_ConfigDedicatedUpPTsExt_r13", -1);
            }
            else {
               soundingRS_UL_ConfigDedicatedUpPTsExt_r13 = null;
            }

            // decode soundingRS_UL_ConfigDedicatedAperiodic_v1310

            if (soundingRS_UL_ConfigDedicatedAperiodic_v1310Present) {
               buffer.getContext().eventDispatcher.startElement("soundingRS_UL_ConfigDedicatedAperiodic_v1310", -1);

               soundingRS_UL_ConfigDedicatedAperiodic_v1310 = new SoundingRS_UL_ConfigDedicatedAperiodic_v1310();
               soundingRS_UL_ConfigDedicatedAperiodic_v1310.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("soundingRS_UL_ConfigDedicatedAperiodic_v1310", -1);
            }
            else {
               soundingRS_UL_ConfigDedicatedAperiodic_v1310 = null;
            }

            // decode soundingRS_UL_ConfigDedicatedAperiodicUpPTsExt_r13

            if (soundingRS_UL_ConfigDedicatedAperiodicUpPTsExt_r13Present) {
               buffer.getContext().eventDispatcher.startElement("soundingRS_UL_ConfigDedicatedAperiodicUpPTsExt_r13", -1);

               soundingRS_UL_ConfigDedicatedAperiodicUpPTsExt_r13 = new SoundingRS_UL_ConfigDedicatedAperiodicUpPTsExt_r13();
               soundingRS_UL_ConfigDedicatedAperiodicUpPTsExt_r13.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("soundingRS_UL_ConfigDedicatedAperiodicUpPTsExt_r13", -1);
            }
            else {
               soundingRS_UL_ConfigDedicatedAperiodicUpPTsExt_r13 = null;
            }

            // decode csi_RS_Config_v1310

            if (csi_RS_Config_v1310Present) {
               buffer.getContext().eventDispatcher.startElement("csi_RS_Config_v1310", -1);

               csi_RS_Config_v1310 = new CSI_RS_Config_v1310();
               csi_RS_Config_v1310.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("csi_RS_Config_v1310", -1);
            }
            else {
               csi_RS_Config_v1310 = null;
            }

            // decode laa_SCellConfiguration_r13

            if (laa_SCellConfiguration_r13Present) {
               buffer.getContext().eventDispatcher.startElement("laa_SCellConfiguration_r13", -1);

               laa_SCellConfiguration_r13 = new LAA_SCellConfiguration_r13();
               laa_SCellConfiguration_r13.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("laa_SCellConfiguration_r13", -1);
            }
            else {
               laa_SCellConfiguration_r13 = null;
            }

            // decode csi_RS_ConfigNZPToAddModListExt_r13

            if (csi_RS_ConfigNZPToAddModListExt_r13Present) {
               buffer.getContext().eventDispatcher.startElement("csi_RS_ConfigNZPToAddModListExt_r13", -1);

               csi_RS_ConfigNZPToAddModListExt_r13 = new CSI_RS_ConfigNZPToAddModListExt_r13();
               csi_RS_ConfigNZPToAddModListExt_r13.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("csi_RS_ConfigNZPToAddModListExt_r13", -1);
            }
            else {
               csi_RS_ConfigNZPToAddModListExt_r13 = null;
            }

            // decode csi_RS_ConfigNZPToReleaseListExt_r13

            if (csi_RS_ConfigNZPToReleaseListExt_r13Present) {
               buffer.getContext().eventDispatcher.startElement("csi_RS_ConfigNZPToReleaseListExt_r13", -1);

               csi_RS_ConfigNZPToReleaseListExt_r13 = new CSI_RS_ConfigNZPToReleaseListExt_r13();
               csi_RS_ConfigNZPToReleaseListExt_r13.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("csi_RS_ConfigNZPToReleaseListExt_r13", -1);
            }
            else {
               csi_RS_ConfigNZPToReleaseListExt_r13 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV6ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean cqi_ReportConfig_v1320Present = buffer.decodeBit ("cqi_ReportConfig_v1320Present");

            // decode cqi_ReportConfig_v1320

            if (cqi_ReportConfig_v1320Present) {
               buffer.getContext().eventDispatcher.startElement("cqi_ReportConfig_v1320", -1);

               cqi_ReportConfig_v1320 = new CQI_ReportConfig_v1320();
               cqi_ReportConfig_v1320.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("cqi_ReportConfig_v1320", -1);
            }
            else {
               cqi_ReportConfig_v1320 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV7ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean laa_SCellConfiguration_v1430Present = buffer.decodeBit ("laa_SCellConfiguration_v1430Present");

            boolean typeB_SRS_TPC_PDCCH_Config_r14Present = buffer.decodeBit ("typeB_SRS_TPC_PDCCH_Config_r14Present");

            boolean uplinkPUSCH_LessPowerControlDedicated_v1430Present = buffer.decodeBit ("uplinkPUSCH_LessPowerControlDedicated_v1430Present");

            boolean soundingRS_UL_PeriodicConfigDedicatedList_r14Present = buffer.decodeBit ("soundingRS_UL_PeriodicConfigDedicatedList_r14Present");

            boolean soundingRS_UL_PeriodicConfigDedicatedUpPTsExtList_r14Present = buffer.decodeBit ("soundingRS_UL_PeriodicConfigDedicatedUpPTsExtList_r14Present");

            boolean soundingRS_UL_AperiodicConfigDedicatedList_r14Present = buffer.decodeBit ("soundingRS_UL_AperiodicConfigDedicatedList_r14Present");

            boolean soundingRS_UL_ConfigDedicatedApUpPTsExtList_r14Present = buffer.decodeBit ("soundingRS_UL_ConfigDedicatedApUpPTsExtList_r14Present");

            boolean must_Config_r14Present = buffer.decodeBit ("must_Config_r14Present");

            boolean pusch_ConfigDedicated_v1430Present = buffer.decodeBit ("pusch_ConfigDedicated_v1430Present");

            boolean csi_RS_Config_v1430Present = buffer.decodeBit ("csi_RS_Config_v1430Present");

            boolean csi_RS_ConfigZP_ApList_r14Present = buffer.decodeBit ("csi_RS_ConfigZP_ApList_r14Present");

            boolean cqi_ReportConfig_v1430Present = buffer.decodeBit ("cqi_ReportConfig_v1430Present");

            boolean semiOpenLoop_r14Present = buffer.decodeBit ("semiOpenLoop_r14Present");

            boolean pdsch_ConfigDedicatedSCell_v1430Present = buffer.decodeBit ("pdsch_ConfigDedicatedSCell_v1430Present");

            // decode laa_SCellConfiguration_v1430

            if (laa_SCellConfiguration_v1430Present) {
               buffer.getContext().eventDispatcher.startElement("laa_SCellConfiguration_v1430", -1);

               laa_SCellConfiguration_v1430 = new LAA_SCellConfiguration_v1430();
               laa_SCellConfiguration_v1430.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("laa_SCellConfiguration_v1430", -1);
            }
            else {
               laa_SCellConfiguration_v1430 = null;
            }

            // decode typeB_SRS_TPC_PDCCH_Config_r14

            if (typeB_SRS_TPC_PDCCH_Config_r14Present) {
               buffer.getContext().eventDispatcher.startElement("typeB_SRS_TPC_PDCCH_Config_r14", -1);

               typeB_SRS_TPC_PDCCH_Config_r14 = new SRS_TPC_PDCCH_Config_r14();
               typeB_SRS_TPC_PDCCH_Config_r14.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("typeB_SRS_TPC_PDCCH_Config_r14", -1);
            }
            else {
               typeB_SRS_TPC_PDCCH_Config_r14 = null;
            }

            // decode uplinkPUSCH_LessPowerControlDedicated_v1430

            if (uplinkPUSCH_LessPowerControlDedicated_v1430Present) {
               buffer.getContext().eventDispatcher.startElement("uplinkPUSCH_LessPowerControlDedicated_v1430", -1);

               uplinkPUSCH_LessPowerControlDedicated_v1430 = new UplinkPUSCH_LessPowerControlDedicated_v1430();
               uplinkPUSCH_LessPowerControlDedicated_v1430.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("uplinkPUSCH_LessPowerControlDedicated_v1430", -1);
            }
            else {
               uplinkPUSCH_LessPowerControlDedicated_v1430 = null;
            }

            // decode soundingRS_UL_PeriodicConfigDedicatedList_r14

            if (soundingRS_UL_PeriodicConfigDedicatedList_r14Present) {
               buffer.getContext().eventDispatcher.startElement("soundingRS_UL_PeriodicConfigDedicatedList_r14", -1);

               soundingRS_UL_PeriodicConfigDedicatedList_r14 = new PhysicalConfigDedicatedSCell_r10_soundingRS_UL_PeriodicConfigDedicatedList_r14();
               soundingRS_UL_PeriodicConfigDedicatedList_r14.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("soundingRS_UL_PeriodicConfigDedicatedList_r14", -1);
            }
            else {
               soundingRS_UL_PeriodicConfigDedicatedList_r14 = null;
            }

            // decode soundingRS_UL_PeriodicConfigDedicatedUpPTsExtList_r14

            if (soundingRS_UL_PeriodicConfigDedicatedUpPTsExtList_r14Present) {
               buffer.getContext().eventDispatcher.startElement("soundingRS_UL_PeriodicConfigDedicatedUpPTsExtList_r14", -1);

               soundingRS_UL_PeriodicConfigDedicatedUpPTsExtList_r14 = new PhysicalConfigDedicatedSCell_r10_soundingRS_UL_PeriodicConfigDedicatedUpPTsExtList_r14();
               soundingRS_UL_PeriodicConfigDedicatedUpPTsExtList_r14.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("soundingRS_UL_PeriodicConfigDedicatedUpPTsExtList_r14", -1);
            }
            else {
               soundingRS_UL_PeriodicConfigDedicatedUpPTsExtList_r14 = null;
            }

            // decode soundingRS_UL_AperiodicConfigDedicatedList_r14

            if (soundingRS_UL_AperiodicConfigDedicatedList_r14Present) {
               buffer.getContext().eventDispatcher.startElement("soundingRS_UL_AperiodicConfigDedicatedList_r14", -1);

               soundingRS_UL_AperiodicConfigDedicatedList_r14 = new PhysicalConfigDedicatedSCell_r10_soundingRS_UL_AperiodicConfigDedicatedList_r14();
               soundingRS_UL_AperiodicConfigDedicatedList_r14.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("soundingRS_UL_AperiodicConfigDedicatedList_r14", -1);
            }
            else {
               soundingRS_UL_AperiodicConfigDedicatedList_r14 = null;
            }

            // decode soundingRS_UL_ConfigDedicatedApUpPTsExtList_r14

            if (soundingRS_UL_ConfigDedicatedApUpPTsExtList_r14Present) {
               buffer.getContext().eventDispatcher.startElement("soundingRS_UL_ConfigDedicatedApUpPTsExtList_r14", -1);

               soundingRS_UL_ConfigDedicatedApUpPTsExtList_r14 = new PhysicalConfigDedicatedSCell_r10_soundingRS_UL_ConfigDedicatedApUpPTsExtList_r14();
               soundingRS_UL_ConfigDedicatedApUpPTsExtList_r14.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("soundingRS_UL_ConfigDedicatedApUpPTsExtList_r14", -1);
            }
            else {
               soundingRS_UL_ConfigDedicatedApUpPTsExtList_r14 = null;
            }

            // decode must_Config_r14

            if (must_Config_r14Present) {
               buffer.getContext().eventDispatcher.startElement("must_Config_r14", -1);

               must_Config_r14 = new PhysicalConfigDedicatedSCell_r10_must_Config_r14();
               must_Config_r14.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("must_Config_r14", -1);
            }
            else {
               must_Config_r14 = null;
            }

            // decode pusch_ConfigDedicated_v1430

            if (pusch_ConfigDedicated_v1430Present) {
               buffer.getContext().eventDispatcher.startElement("pusch_ConfigDedicated_v1430", -1);

               pusch_ConfigDedicated_v1430 = new PUSCH_ConfigDedicatedSCell_v1430();
               pusch_ConfigDedicated_v1430.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("pusch_ConfigDedicated_v1430", -1);
            }
            else {
               pusch_ConfigDedicated_v1430 = null;
            }

            // decode csi_RS_Config_v1430

            if (csi_RS_Config_v1430Present) {
               buffer.getContext().eventDispatcher.startElement("csi_RS_Config_v1430", -1);

               csi_RS_Config_v1430 = new CSI_RS_Config_v1430();
               csi_RS_Config_v1430.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("csi_RS_Config_v1430", -1);
            }
            else {
               csi_RS_Config_v1430 = null;
            }

            // decode csi_RS_ConfigZP_ApList_r14

            if (csi_RS_ConfigZP_ApList_r14Present) {
               buffer.getContext().eventDispatcher.startElement("csi_RS_ConfigZP_ApList_r14", -1);

               csi_RS_ConfigZP_ApList_r14 = new CSI_RS_ConfigZP_ApList_r14();
               csi_RS_ConfigZP_ApList_r14.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("csi_RS_ConfigZP_ApList_r14", -1);
            }
            else {
               csi_RS_ConfigZP_ApList_r14 = null;
            }

            // decode cqi_ReportConfig_v1430

            if (cqi_ReportConfig_v1430Present) {
               buffer.getContext().eventDispatcher.startElement("cqi_ReportConfig_v1430", -1);

               cqi_ReportConfig_v1430 = new CQI_ReportConfig_v1430();
               cqi_ReportConfig_v1430.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("cqi_ReportConfig_v1430", -1);
            }
            else {
               cqi_ReportConfig_v1430 = null;
            }

            // decode semiOpenLoop_r14

            if (semiOpenLoop_r14Present) {
               buffer.getContext().eventDispatcher.startElement("semiOpenLoop_r14", -1);

               semiOpenLoop_r14 = new Asn1Boolean();
               semiOpenLoop_r14.decode (buffer);

               buffer.invokeCharacters(semiOpenLoop_r14.toString());
               buffer.getContext().eventDispatcher.endElement("semiOpenLoop_r14", -1);
            }
            else {
               semiOpenLoop_r14 = null;
            }

            // decode pdsch_ConfigDedicatedSCell_v1430

            if (pdsch_ConfigDedicatedSCell_v1430Present) {
               buffer.getContext().eventDispatcher.startElement("pdsch_ConfigDedicatedSCell_v1430", -1);

               pdsch_ConfigDedicatedSCell_v1430 = new PDSCH_ConfigDedicatedSCell_v1430();
               pdsch_ConfigDedicatedSCell_v1430.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("pdsch_ConfigDedicatedSCell_v1430", -1);
            }
            else {
               pdsch_ConfigDedicatedSCell_v1430 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV8ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean csi_RS_Config_v1480Present = buffer.decodeBit ("csi_RS_Config_v1480Present");

            // decode csi_RS_Config_v1480

            if (csi_RS_Config_v1480Present) {
               buffer.getContext().eventDispatcher.startElement("csi_RS_Config_v1480", -1);

               csi_RS_Config_v1480 = new CSI_RS_Config_v1480();
               csi_RS_Config_v1480.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("csi_RS_Config_v1480", -1);
            }
            else {
               csi_RS_Config_v1480 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV9ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean physicalConfigDedicatedSTTI_r15Present = buffer.decodeBit ("physicalConfigDedicatedSTTI_r15Present");

            boolean pdsch_ConfigDedicated_v1530Present = buffer.decodeBit ("pdsch_ConfigDedicated_v1530Present");

            boolean cqi_ReportConfig_v1530Present = buffer.decodeBit ("cqi_ReportConfig_v1530Present");

            boolean cqi_ReportConfigSCell_r15Present = buffer.decodeBit ("cqi_ReportConfigSCell_r15Present");

            boolean cqi_ShortConfigSCell_r15Present = buffer.decodeBit ("cqi_ShortConfigSCell_r15Present");

            boolean csi_RS_Config_v1530Present = buffer.decodeBit ("csi_RS_Config_v1530Present");

            boolean uplinkPowerControlDedicatedSCell_v1530Present = buffer.decodeBit ("uplinkPowerControlDedicatedSCell_v1530Present");

            boolean laa_SCellConfiguration_v1530Present = buffer.decodeBit ("laa_SCellConfiguration_v1530Present");

            boolean pusch_ConfigDedicated_v1530Present = buffer.decodeBit ("pusch_ConfigDedicated_v1530Present");

            boolean semiStaticCFI_Config_r15Present = buffer.decodeBit ("semiStaticCFI_Config_r15Present");

            boolean blindPDSCH_Repetition_Config_r15Present = buffer.decodeBit ("blindPDSCH_Repetition_Config_r15Present");

            // decode physicalConfigDedicatedSTTI_r15

            if (physicalConfigDedicatedSTTI_r15Present) {
               buffer.getContext().eventDispatcher.startElement("physicalConfigDedicatedSTTI_r15", -1);

               physicalConfigDedicatedSTTI_r15 = new PhysicalConfigDedicatedSTTI_r15();
               physicalConfigDedicatedSTTI_r15.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("physicalConfigDedicatedSTTI_r15", -1);
            }
            else {
               physicalConfigDedicatedSTTI_r15 = null;
            }

            // decode pdsch_ConfigDedicated_v1530

            if (pdsch_ConfigDedicated_v1530Present) {
               buffer.getContext().eventDispatcher.startElement("pdsch_ConfigDedicated_v1530", -1);

               pdsch_ConfigDedicated_v1530 = new PDSCH_ConfigDedicated_v1530();
               pdsch_ConfigDedicated_v1530.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("pdsch_ConfigDedicated_v1530", -1);
            }
            else {
               pdsch_ConfigDedicated_v1530 = null;
            }

            // decode cqi_ReportConfig_v1530

            if (cqi_ReportConfig_v1530Present) {
               buffer.getContext().eventDispatcher.startElement("cqi_ReportConfig_v1530", -1);

               cqi_ReportConfig_v1530 = new CQI_ReportConfig_v1530();
               cqi_ReportConfig_v1530.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("cqi_ReportConfig_v1530", -1);
            }
            else {
               cqi_ReportConfig_v1530 = null;
            }

            // decode cqi_ReportConfigSCell_r15

            if (cqi_ReportConfigSCell_r15Present) {
               buffer.getContext().eventDispatcher.startElement("cqi_ReportConfigSCell_r15", -1);

               cqi_ReportConfigSCell_r15 = new CQI_ReportConfigSCell_r15();
               cqi_ReportConfigSCell_r15.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("cqi_ReportConfigSCell_r15", -1);
            }
            else {
               cqi_ReportConfigSCell_r15 = null;
            }

            // decode cqi_ShortConfigSCell_r15

            if (cqi_ShortConfigSCell_r15Present) {
               buffer.getContext().eventDispatcher.startElement("cqi_ShortConfigSCell_r15", -1);

               cqi_ShortConfigSCell_r15 = new CQI_ShortConfigSCell_r15();
               cqi_ShortConfigSCell_r15.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("cqi_ShortConfigSCell_r15", -1);
            }
            else {
               cqi_ShortConfigSCell_r15 = null;
            }

            // decode csi_RS_Config_v1530

            if (csi_RS_Config_v1530Present) {
               buffer.getContext().eventDispatcher.startElement("csi_RS_Config_v1530", -1);

               csi_RS_Config_v1530 = new CSI_RS_Config_v1530();
               csi_RS_Config_v1530.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("csi_RS_Config_v1530", -1);
            }
            else {
               csi_RS_Config_v1530 = null;
            }

            // decode uplinkPowerControlDedicatedSCell_v1530

            if (uplinkPowerControlDedicatedSCell_v1530Present) {
               buffer.getContext().eventDispatcher.startElement("uplinkPowerControlDedicatedSCell_v1530", -1);

               uplinkPowerControlDedicatedSCell_v1530 = new UplinkPowerControlDedicated_v1530();
               uplinkPowerControlDedicatedSCell_v1530.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("uplinkPowerControlDedicatedSCell_v1530", -1);
            }
            else {
               uplinkPowerControlDedicatedSCell_v1530 = null;
            }

            // decode laa_SCellConfiguration_v1530

            if (laa_SCellConfiguration_v1530Present) {
               buffer.getContext().eventDispatcher.startElement("laa_SCellConfiguration_v1530", -1);

               laa_SCellConfiguration_v1530 = new LAA_SCellConfiguration_v1530();
               laa_SCellConfiguration_v1530.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("laa_SCellConfiguration_v1530", -1);
            }
            else {
               laa_SCellConfiguration_v1530 = null;
            }

            // decode pusch_ConfigDedicated_v1530

            if (pusch_ConfigDedicated_v1530Present) {
               buffer.getContext().eventDispatcher.startElement("pusch_ConfigDedicated_v1530", -1);

               pusch_ConfigDedicated_v1530 = new PUSCH_ConfigDedicatedScell_v1530();
               pusch_ConfigDedicated_v1530.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("pusch_ConfigDedicated_v1530", -1);
            }
            else {
               pusch_ConfigDedicated_v1530 = null;
            }

            // decode semiStaticCFI_Config_r15

            if (semiStaticCFI_Config_r15Present) {
               buffer.getContext().eventDispatcher.startElement("semiStaticCFI_Config_r15", -1);

               semiStaticCFI_Config_r15 = new PhysicalConfigDedicatedSCell_r10_semiStaticCFI_Config_r15();
               semiStaticCFI_Config_r15.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("semiStaticCFI_Config_r15", -1);
            }
            else {
               semiStaticCFI_Config_r15 = null;
            }

            // decode blindPDSCH_Repetition_Config_r15

            if (blindPDSCH_Repetition_Config_r15Present) {
               buffer.getContext().eventDispatcher.startElement("blindPDSCH_Repetition_Config_r15", -1);

               blindPDSCH_Repetition_Config_r15 = new PhysicalConfigDedicatedSCell_r10_blindPDSCH_Repetition_Config_r15();
               blindPDSCH_Repetition_Config_r15.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("blindPDSCH_Repetition_Config_r15", -1);
            }
            else {
               blindPDSCH_Repetition_Config_r15 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (nonUL_Configuration_r10 != null) nonUL_Configuration_r10.print (_sb, "nonUL_Configuration_r10", _level+1);
      if (ul_Configuration_r10 != null) ul_Configuration_r10.print (_sb, "ul_Configuration_r10", _level+1);
      if (csi_RS_ConfigNZPToReleaseList_r11 != null) csi_RS_ConfigNZPToReleaseList_r11.print (_sb, "csi_RS_ConfigNZPToReleaseList_r11", _level+1);
      if (csi_RS_ConfigNZPToAddModList_r11 != null) csi_RS_ConfigNZPToAddModList_r11.print (_sb, "csi_RS_ConfigNZPToAddModList_r11", _level+1);
      if (csi_RS_ConfigZPToReleaseList_r11 != null) csi_RS_ConfigZPToReleaseList_r11.print (_sb, "csi_RS_ConfigZPToReleaseList_r11", _level+1);
      if (csi_RS_ConfigZPToAddModList_r11 != null) csi_RS_ConfigZPToAddModList_r11.print (_sb, "csi_RS_ConfigZPToAddModList_r11", _level+1);
      if (epdcch_Config_r11 != null) epdcch_Config_r11.print (_sb, "epdcch_Config_r11", _level+1);
      if (pdsch_ConfigDedicated_v1130 != null) pdsch_ConfigDedicated_v1130.print (_sb, "pdsch_ConfigDedicated_v1130", _level+1);
      if (cqi_ReportConfig_v1130 != null) cqi_ReportConfig_v1130.print (_sb, "cqi_ReportConfig_v1130", _level+1);
      if (pusch_ConfigDedicated_v1130 != null) pusch_ConfigDedicated_v1130.print (_sb, "pusch_ConfigDedicated_v1130", _level+1);
      if (uplinkPowerControlDedicatedSCell_v1130 != null) uplinkPowerControlDedicatedSCell_v1130.print (_sb, "uplinkPowerControlDedicatedSCell_v1130", _level+1);
      if (antennaInfo_v1250 != null) antennaInfo_v1250.print (_sb, "antennaInfo_v1250", _level+1);
      if (eimta_MainConfigSCell_r12 != null) eimta_MainConfigSCell_r12.print (_sb, "eimta_MainConfigSCell_r12", _level+1);
      if (cqi_ReportConfigSCell_v1250 != null) cqi_ReportConfigSCell_v1250.print (_sb, "cqi_ReportConfigSCell_v1250", _level+1);
      if (uplinkPowerControlDedicatedSCell_v1250 != null) uplinkPowerControlDedicatedSCell_v1250.print (_sb, "uplinkPowerControlDedicatedSCell_v1250", _level+1);
      if (csi_RS_Config_v1250 != null) csi_RS_Config_v1250.print (_sb, "csi_RS_Config_v1250", _level+1);
      if (pdsch_ConfigDedicated_v1280 != null) pdsch_ConfigDedicated_v1280.print (_sb, "pdsch_ConfigDedicated_v1280", _level+1);
      if (pucch_Cell_r13 != null) pucch_Cell_r13.print (_sb, "pucch_Cell_r13", _level+1);
      if (pucch_SCell != null) pucch_SCell.print (_sb, "pucch_SCell", _level+1);
      if (crossCarrierSchedulingConfig_r13 != null) crossCarrierSchedulingConfig_r13.print (_sb, "crossCarrierSchedulingConfig_r13", _level+1);
      if (pdcch_ConfigSCell_r13 != null) pdcch_ConfigSCell_r13.print (_sb, "pdcch_ConfigSCell_r13", _level+1);
      if (cqi_ReportConfig_v1310 != null) cqi_ReportConfig_v1310.print (_sb, "cqi_ReportConfig_v1310", _level+1);
      if (pdsch_ConfigDedicated_v1310 != null) pdsch_ConfigDedicated_v1310.print (_sb, "pdsch_ConfigDedicated_v1310", _level+1);
      if (soundingRS_UL_ConfigDedicated_v1310 != null) soundingRS_UL_ConfigDedicated_v1310.print (_sb, "soundingRS_UL_ConfigDedicated_v1310", _level+1);
      if (soundingRS_UL_ConfigDedicatedUpPTsExt_r13 != null) soundingRS_UL_ConfigDedicatedUpPTsExt_r13.print (_sb, "soundingRS_UL_ConfigDedicatedUpPTsExt_r13", _level+1);
      if (soundingRS_UL_ConfigDedicatedAperiodic_v1310 != null) soundingRS_UL_ConfigDedicatedAperiodic_v1310.print (_sb, "soundingRS_UL_ConfigDedicatedAperiodic_v1310", _level+1);
      if (soundingRS_UL_ConfigDedicatedAperiodicUpPTsExt_r13 != null) soundingRS_UL_ConfigDedicatedAperiodicUpPTsExt_r13.print (_sb, "soundingRS_UL_ConfigDedicatedAperiodicUpPTsExt_r13", _level+1);
      if (csi_RS_Config_v1310 != null) csi_RS_Config_v1310.print (_sb, "csi_RS_Config_v1310", _level+1);
      if (laa_SCellConfiguration_r13 != null) laa_SCellConfiguration_r13.print (_sb, "laa_SCellConfiguration_r13", _level+1);
      if (csi_RS_ConfigNZPToAddModListExt_r13 != null) csi_RS_ConfigNZPToAddModListExt_r13.print (_sb, "csi_RS_ConfigNZPToAddModListExt_r13", _level+1);
      if (csi_RS_ConfigNZPToReleaseListExt_r13 != null) csi_RS_ConfigNZPToReleaseListExt_r13.print (_sb, "csi_RS_ConfigNZPToReleaseListExt_r13", _level+1);
      if (cqi_ReportConfig_v1320 != null) cqi_ReportConfig_v1320.print (_sb, "cqi_ReportConfig_v1320", _level+1);
      if (laa_SCellConfiguration_v1430 != null) laa_SCellConfiguration_v1430.print (_sb, "laa_SCellConfiguration_v1430", _level+1);
      if (typeB_SRS_TPC_PDCCH_Config_r14 != null) typeB_SRS_TPC_PDCCH_Config_r14.print (_sb, "typeB_SRS_TPC_PDCCH_Config_r14", _level+1);
      if (uplinkPUSCH_LessPowerControlDedicated_v1430 != null) uplinkPUSCH_LessPowerControlDedicated_v1430.print (_sb, "uplinkPUSCH_LessPowerControlDedicated_v1430", _level+1);
      if (soundingRS_UL_PeriodicConfigDedicatedList_r14 != null) soundingRS_UL_PeriodicConfigDedicatedList_r14.print (_sb, "soundingRS_UL_PeriodicConfigDedicatedList_r14", _level+1);
      if (soundingRS_UL_PeriodicConfigDedicatedUpPTsExtList_r14 != null) soundingRS_UL_PeriodicConfigDedicatedUpPTsExtList_r14.print (_sb, "soundingRS_UL_PeriodicConfigDedicatedUpPTsExtList_r14", _level+1);
      if (soundingRS_UL_AperiodicConfigDedicatedList_r14 != null) soundingRS_UL_AperiodicConfigDedicatedList_r14.print (_sb, "soundingRS_UL_AperiodicConfigDedicatedList_r14", _level+1);
      if (soundingRS_UL_ConfigDedicatedApUpPTsExtList_r14 != null) soundingRS_UL_ConfigDedicatedApUpPTsExtList_r14.print (_sb, "soundingRS_UL_ConfigDedicatedApUpPTsExtList_r14", _level+1);
      if (must_Config_r14 != null) must_Config_r14.print (_sb, "must_Config_r14", _level+1);
      if (pusch_ConfigDedicated_v1430 != null) pusch_ConfigDedicated_v1430.print (_sb, "pusch_ConfigDedicated_v1430", _level+1);
      if (csi_RS_Config_v1430 != null) csi_RS_Config_v1430.print (_sb, "csi_RS_Config_v1430", _level+1);
      if (csi_RS_ConfigZP_ApList_r14 != null) csi_RS_ConfigZP_ApList_r14.print (_sb, "csi_RS_ConfigZP_ApList_r14", _level+1);
      if (cqi_ReportConfig_v1430 != null) cqi_ReportConfig_v1430.print (_sb, "cqi_ReportConfig_v1430", _level+1);
      if (semiOpenLoop_r14 != null) semiOpenLoop_r14.print (_sb, "semiOpenLoop_r14", _level+1);
      if (pdsch_ConfigDedicatedSCell_v1430 != null) pdsch_ConfigDedicatedSCell_v1430.print (_sb, "pdsch_ConfigDedicatedSCell_v1430", _level+1);
      if (csi_RS_Config_v1480 != null) csi_RS_Config_v1480.print (_sb, "csi_RS_Config_v1480", _level+1);
      if (physicalConfigDedicatedSTTI_r15 != null) physicalConfigDedicatedSTTI_r15.print (_sb, "physicalConfigDedicatedSTTI_r15", _level+1);
      if (pdsch_ConfigDedicated_v1530 != null) pdsch_ConfigDedicated_v1530.print (_sb, "pdsch_ConfigDedicated_v1530", _level+1);
      if (cqi_ReportConfig_v1530 != null) cqi_ReportConfig_v1530.print (_sb, "cqi_ReportConfig_v1530", _level+1);
      if (cqi_ReportConfigSCell_r15 != null) cqi_ReportConfigSCell_r15.print (_sb, "cqi_ReportConfigSCell_r15", _level+1);
      if (cqi_ShortConfigSCell_r15 != null) cqi_ShortConfigSCell_r15.print (_sb, "cqi_ShortConfigSCell_r15", _level+1);
      if (csi_RS_Config_v1530 != null) csi_RS_Config_v1530.print (_sb, "csi_RS_Config_v1530", _level+1);
      if (uplinkPowerControlDedicatedSCell_v1530 != null) uplinkPowerControlDedicatedSCell_v1530.print (_sb, "uplinkPowerControlDedicatedSCell_v1530", _level+1);
      if (laa_SCellConfiguration_v1530 != null) laa_SCellConfiguration_v1530.print (_sb, "laa_SCellConfiguration_v1530", _level+1);
      if (pusch_ConfigDedicated_v1530 != null) pusch_ConfigDedicated_v1530.print (_sb, "pusch_ConfigDedicated_v1530", _level+1);
      if (semiStaticCFI_Config_r15 != null) semiStaticCFI_Config_r15.print (_sb, "semiStaticCFI_Config_r15", _level+1);
      if (blindPDSCH_Repetition_Config_r15 != null) blindPDSCH_Repetition_Config_r15.print (_sb, "blindPDSCH_Repetition_Config_r15", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
