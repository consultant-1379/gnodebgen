/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class Phy_ParametersXDD_Diff extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "Phy-ParametersXDD-Diff";
   }

   public Phy_ParametersXDD_Diff_dynamicSFI dynamicSFI = null;  // optional
   public Phy_ParametersXDD_Diff_twoPUCCH_F0_2_ConsecSymbols twoPUCCH_F0_2_ConsecSymbols = null;  // optional
   public Phy_ParametersXDD_Diff_twoDifferentTPC_Loop_PUSCH twoDifferentTPC_Loop_PUSCH = null;  // optional
   public Phy_ParametersXDD_Diff_twoDifferentTPC_Loop_PUCCH twoDifferentTPC_Loop_PUCCH = null;  // optional
   public boolean mV2ExtPresent;
   public Phy_ParametersXDD_Diff_dl_SchedulingOffset_PDSCH_TypeA dl_SchedulingOffset_PDSCH_TypeA = null;  // optional
   public Phy_ParametersXDD_Diff_dl_SchedulingOffset_PDSCH_TypeB dl_SchedulingOffset_PDSCH_TypeB = null;  // optional
   public Phy_ParametersXDD_Diff_ul_SchedulingOffset ul_SchedulingOffset = null;  // optional
   public Asn1OpenExt extElem1;

   public Phy_ParametersXDD_Diff () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public Phy_ParametersXDD_Diff (
      Phy_ParametersXDD_Diff_dynamicSFI dynamicSFI_,
      Phy_ParametersXDD_Diff_twoPUCCH_F0_2_ConsecSymbols twoPUCCH_F0_2_ConsecSymbols_,
      Phy_ParametersXDD_Diff_twoDifferentTPC_Loop_PUSCH twoDifferentTPC_Loop_PUSCH_,
      Phy_ParametersXDD_Diff_twoDifferentTPC_Loop_PUCCH twoDifferentTPC_Loop_PUCCH_,
      Phy_ParametersXDD_Diff_dl_SchedulingOffset_PDSCH_TypeA dl_SchedulingOffset_PDSCH_TypeA_,
      Phy_ParametersXDD_Diff_dl_SchedulingOffset_PDSCH_TypeB dl_SchedulingOffset_PDSCH_TypeB_,
      Phy_ParametersXDD_Diff_ul_SchedulingOffset ul_SchedulingOffset_
   ) {
      super();
      dynamicSFI = dynamicSFI_;
      twoPUCCH_F0_2_ConsecSymbols = twoPUCCH_F0_2_ConsecSymbols_;
      twoDifferentTPC_Loop_PUSCH = twoDifferentTPC_Loop_PUSCH_;
      twoDifferentTPC_Loop_PUCCH = twoDifferentTPC_Loop_PUCCH_;
      dl_SchedulingOffset_PDSCH_TypeA = dl_SchedulingOffset_PDSCH_TypeA_;
      dl_SchedulingOffset_PDSCH_TypeB = dl_SchedulingOffset_PDSCH_TypeB_;
      ul_SchedulingOffset = ul_SchedulingOffset_;
   }

   public void init () {
      dynamicSFI = null;
      twoPUCCH_F0_2_ConsecSymbols = null;
      twoDifferentTPC_Loop_PUSCH = null;
      twoDifferentTPC_Loop_PUCCH = null;
      dl_SchedulingOffset_PDSCH_TypeA = null;
      dl_SchedulingOffset_PDSCH_TypeB = null;
      ul_SchedulingOffset = null;
      extElem1 = null;
   }

   public int getElementCount() { return 8; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return dynamicSFI;
         case 1: return twoPUCCH_F0_2_ConsecSymbols;
         case 2: return twoDifferentTPC_Loop_PUSCH;
         case 3: return twoDifferentTPC_Loop_PUCCH;
         case 4: return dl_SchedulingOffset_PDSCH_TypeA;
         case 5: return dl_SchedulingOffset_PDSCH_TypeB;
         case 6: return ul_SchedulingOffset;
         case 7: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "dynamicSFI";
         case 1: return "twoPUCCH-F0-2-ConsecSymbols";
         case 2: return "twoDifferentTPC-Loop-PUSCH";
         case 3: return "twoDifferentTPC-Loop-PUCCH";
         case 4: return "dl-SchedulingOffset-PDSCH-TypeA";
         case 5: return "dl-SchedulingOffset-PDSCH-TypeB";
         case 6: return "ul-SchedulingOffset";
         case 7: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean dynamicSFIPresent = buffer.decodeBit ("dynamicSFIPresent");
      boolean twoPUCCH_F0_2_ConsecSymbolsPresent = buffer.decodeBit ("twoPUCCH_F0_2_ConsecSymbolsPresent");
      boolean twoDifferentTPC_Loop_PUSCHPresent = buffer.decodeBit ("twoDifferentTPC_Loop_PUSCHPresent");
      boolean twoDifferentTPC_Loop_PUCCHPresent = buffer.decodeBit ("twoDifferentTPC_Loop_PUCCHPresent");

      // decode dynamicSFI

      if (dynamicSFIPresent) {
         buffer.getContext().eventDispatcher.startElement("dynamicSFI", -1);

         int tval = Phy_ParametersXDD_Diff_dynamicSFI.decodeEnumValue (buffer);
         dynamicSFI = Phy_ParametersXDD_Diff_dynamicSFI.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("dynamicSFI", -1);
      }
      else {
         dynamicSFI = null;
      }

      // decode twoPUCCH_F0_2_ConsecSymbols

      if (twoPUCCH_F0_2_ConsecSymbolsPresent) {
         buffer.getContext().eventDispatcher.startElement("twoPUCCH_F0_2_ConsecSymbols", -1);

         int tval = Phy_ParametersXDD_Diff_twoPUCCH_F0_2_ConsecSymbols.decodeEnumValue (buffer);
         twoPUCCH_F0_2_ConsecSymbols = Phy_ParametersXDD_Diff_twoPUCCH_F0_2_ConsecSymbols.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("twoPUCCH_F0_2_ConsecSymbols", -1);
      }
      else {
         twoPUCCH_F0_2_ConsecSymbols = null;
      }

      // decode twoDifferentTPC_Loop_PUSCH

      if (twoDifferentTPC_Loop_PUSCHPresent) {
         buffer.getContext().eventDispatcher.startElement("twoDifferentTPC_Loop_PUSCH", -1);

         int tval = Phy_ParametersXDD_Diff_twoDifferentTPC_Loop_PUSCH.decodeEnumValue (buffer);
         twoDifferentTPC_Loop_PUSCH = Phy_ParametersXDD_Diff_twoDifferentTPC_Loop_PUSCH.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("twoDifferentTPC_Loop_PUSCH", -1);
      }
      else {
         twoDifferentTPC_Loop_PUSCH = null;
      }

      // decode twoDifferentTPC_Loop_PUCCH

      if (twoDifferentTPC_Loop_PUCCHPresent) {
         buffer.getContext().eventDispatcher.startElement("twoDifferentTPC_Loop_PUCCH", -1);

         int tval = Phy_ParametersXDD_Diff_twoDifferentTPC_Loop_PUCCH.decodeEnumValue (buffer);
         twoDifferentTPC_Loop_PUCCH = Phy_ParametersXDD_Diff_twoDifferentTPC_Loop_PUCCH.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("twoDifferentTPC_Loop_PUCCH", -1);
      }
      else {
         twoDifferentTPC_Loop_PUCCH = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean dl_SchedulingOffset_PDSCH_TypeAPresent = buffer.decodeBit ("dl_SchedulingOffset_PDSCH_TypeAPresent");

            boolean dl_SchedulingOffset_PDSCH_TypeBPresent = buffer.decodeBit ("dl_SchedulingOffset_PDSCH_TypeBPresent");

            boolean ul_SchedulingOffsetPresent = buffer.decodeBit ("ul_SchedulingOffsetPresent");

            // decode dl_SchedulingOffset_PDSCH_TypeA

            if (dl_SchedulingOffset_PDSCH_TypeAPresent) {
               buffer.getContext().eventDispatcher.startElement("dl_SchedulingOffset_PDSCH_TypeA", -1);

               int tval = Phy_ParametersXDD_Diff_dl_SchedulingOffset_PDSCH_TypeA.decodeEnumValue (buffer);
               dl_SchedulingOffset_PDSCH_TypeA = Phy_ParametersXDD_Diff_dl_SchedulingOffset_PDSCH_TypeA.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("dl_SchedulingOffset_PDSCH_TypeA", -1);
            }
            else {
               dl_SchedulingOffset_PDSCH_TypeA = null;
            }

            // decode dl_SchedulingOffset_PDSCH_TypeB

            if (dl_SchedulingOffset_PDSCH_TypeBPresent) {
               buffer.getContext().eventDispatcher.startElement("dl_SchedulingOffset_PDSCH_TypeB", -1);

               int tval = Phy_ParametersXDD_Diff_dl_SchedulingOffset_PDSCH_TypeB.decodeEnumValue (buffer);
               dl_SchedulingOffset_PDSCH_TypeB = Phy_ParametersXDD_Diff_dl_SchedulingOffset_PDSCH_TypeB.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("dl_SchedulingOffset_PDSCH_TypeB", -1);
            }
            else {
               dl_SchedulingOffset_PDSCH_TypeB = null;
            }

            // decode ul_SchedulingOffset

            if (ul_SchedulingOffsetPresent) {
               buffer.getContext().eventDispatcher.startElement("ul_SchedulingOffset", -1);

               int tval = Phy_ParametersXDD_Diff_ul_SchedulingOffset.decodeEnumValue (buffer);
               ul_SchedulingOffset = Phy_ParametersXDD_Diff_ul_SchedulingOffset.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("ul_SchedulingOffset", -1);
            }
            else {
               ul_SchedulingOffset = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (dynamicSFI != null) dynamicSFI.print (_sb, "dynamicSFI", _level+1);
      if (twoPUCCH_F0_2_ConsecSymbols != null) twoPUCCH_F0_2_ConsecSymbols.print (_sb, "twoPUCCH_F0_2_ConsecSymbols", _level+1);
      if (twoDifferentTPC_Loop_PUSCH != null) twoDifferentTPC_Loop_PUSCH.print (_sb, "twoDifferentTPC_Loop_PUSCH", _level+1);
      if (twoDifferentTPC_Loop_PUCCH != null) twoDifferentTPC_Loop_PUCCH.print (_sb, "twoDifferentTPC_Loop_PUCCH", _level+1);
      if (dl_SchedulingOffset_PDSCH_TypeA != null) dl_SchedulingOffset_PDSCH_TypeA.print (_sb, "dl_SchedulingOffset_PDSCH_TypeA", _level+1);
      if (dl_SchedulingOffset_PDSCH_TypeB != null) dl_SchedulingOffset_PDSCH_TypeB.print (_sb, "dl_SchedulingOffset_PDSCH_TypeB", _level+1);
      if (ul_SchedulingOffset != null) ul_SchedulingOffset.print (_sb, "ul_SchedulingOffset", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
