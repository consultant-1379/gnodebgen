/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.X2AP_PDU_Descriptions;

import com.objsys.asn1j.runtime.*;
import asn.lte.generated.X2AP_CommonDataTypes.ProcedureCode;
import asn.lte.generated.X2AP_CommonDataTypes.Criticality;

public class InitiatingMessage extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_X2AP_PDU_DescriptionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "InitiatingMessage";
   }

   public ProcedureCode procedureCode;
   public Criticality criticality = null;

   /**
    * procedureCode: id-handoverPreparation
    * criticality: Criticality.reject
    * ASN.1 type: HandoverRequest
    * Java type: HandoverRequest
    *
    * procedureCode: id-reset
    * criticality: Criticality.reject
    * ASN.1 type: ResetRequest
    * Java type: ResetRequest
    *
    * procedureCode: id-x2Setup
    * criticality: Criticality.reject
    * ASN.1 type: X2SetupRequest
    * Java type: X2SetupRequest
    *
    * procedureCode: id-resourceStatusReportingInitiation
    * criticality: Criticality.reject
    * ASN.1 type: ResourceStatusRequest
    * Java type: ResourceStatusRequest
    *
    * procedureCode: id-eNBConfigurationUpdate
    * criticality: Criticality.reject
    * ASN.1 type: ENBConfigurationUpdate
    * Java type: ENBConfigurationUpdate
    *
    * procedureCode: id-mobilitySettingsChange
    * criticality: Criticality.reject
    * ASN.1 type: MobilityChangeRequest
    * Java type: MobilityChangeRequest
    *
    * procedureCode: id-cellActivation
    * criticality: Criticality.reject
    * ASN.1 type: CellActivationRequest
    * Java type: CellActivationRequest
    *
    * procedureCode: id-seNBAdditionPreparation
    * criticality: Criticality.reject
    * ASN.1 type: SeNBAdditionRequest
    * Java type: SeNBAdditionRequest
    *
    * procedureCode: id-meNBinitiatedSeNBModificationPreparation
    * criticality: Criticality.reject
    * ASN.1 type: SeNBModificationRequest
    * Java type: SeNBModificationRequest
    *
    * procedureCode: id-seNBinitiatedSeNBModification
    * criticality: Criticality.reject
    * ASN.1 type: SeNBModificationRequired
    * Java type: SeNBModificationRequired
    *
    * procedureCode: id-seNBinitiatedSeNBRelease
    * criticality: Criticality.reject
    * ASN.1 type: SeNBReleaseRequired
    * Java type: SeNBReleaseRequired
    *
    * procedureCode: id-x2Removal
    * criticality: Criticality.reject
    * ASN.1 type: X2RemovalRequest
    * Java type: X2RemovalRequest
    *
    * procedureCode: id-retrieveUEContext
    * criticality: Criticality.reject
    * ASN.1 type: RetrieveUEContextRequest
    * Java type: RetrieveUEContextRequest
    *
    * procedureCode: id-sgNBAdditionPreparation
    * criticality: Criticality.reject
    * ASN.1 type: SgNBAdditionRequest
    * Java type: SgNBAdditionRequest
    *
    * procedureCode: id-meNBinitiatedSgNBModificationPreparation
    * criticality: Criticality.reject
    * ASN.1 type: SgNBModificationRequest
    * Java type: SgNBModificationRequest
    *
    * procedureCode: id-sgNBinitiatedSgNBModification
    * criticality: Criticality.reject
    * ASN.1 type: SgNBModificationRequired
    * Java type: SgNBModificationRequired
    *
    * procedureCode: id-meNBinitiatedSgNBRelease
    * criticality: Criticality.ignore
    * ASN.1 type: SgNBReleaseRequest
    * Java type: SgNBReleaseRequest
    *
    * procedureCode: id-sgNBinitiatedSgNBRelease
    * criticality: Criticality.reject
    * ASN.1 type: SgNBReleaseRequired
    * Java type: SgNBReleaseRequired
    *
    * procedureCode: id-sgNBChange
    * criticality: Criticality.reject
    * ASN.1 type: SgNBChangeRequired
    * Java type: SgNBChangeRequired
    *
    * procedureCode: id-endcX2Setup
    * criticality: Criticality.reject
    * ASN.1 type: ENDCX2SetupRequest
    * Java type: ENDCX2SetupRequest
    *
    * procedureCode: id-endcConfigurationUpdate
    * criticality: Criticality.reject
    * ASN.1 type: ENDCConfigurationUpdate
    * Java type: ENDCConfigurationUpdate
    *
    * procedureCode: id-endcCellActivation
    * criticality: Criticality.reject
    * ASN.1 type: ENDCCellActivationRequest
    * Java type: ENDCCellActivationRequest
    *
    * procedureCode: id-endcPartialReset
    * criticality: Criticality.reject
    * ASN.1 type: ENDCPartialResetRequired
    * Java type: ENDCPartialResetRequired
    *
    * procedureCode: id-eUTRANRCellResourceCoordination
    * criticality: Criticality.reject
    * ASN.1 type: EUTRANRCellResourceCoordinationRequest
    * Java type: EUTRANRCellResourceCoordinationRequest
    *
    * procedureCode: id-endcX2Removal
    * criticality: Criticality.reject
    * ASN.1 type: ENDCX2RemovalRequest
    * Java type: ENDCX2RemovalRequest
    *
    * procedureCode: id-snStatusTransfer
    * criticality: Criticality.ignore
    * ASN.1 type: SNStatusTransfer
    * Java type: SNStatusTransfer
    *
    * procedureCode: id-uEContextRelease
    * criticality: Criticality.ignore
    * ASN.1 type: UEContextRelease
    * Java type: UEContextRelease
    *
    * procedureCode: id-handoverCancel
    * criticality: Criticality.ignore
    * ASN.1 type: HandoverCancel
    * Java type: HandoverCancel
    *
    * procedureCode: id-errorIndication
    * criticality: Criticality.ignore
    * ASN.1 type: ErrorIndication
    * Java type: ErrorIndication
    *
    * procedureCode: id-resourceStatusReporting
    * criticality: Criticality.ignore
    * ASN.1 type: ResourceStatusUpdate
    * Java type: ResourceStatusUpdate
    *
    * procedureCode: id-loadIndication
    * criticality: Criticality.ignore
    * ASN.1 type: LoadInformation
    * Java type: LoadInformation
    *
    * procedureCode: id-privateMessage
    * criticality: Criticality.ignore
    * ASN.1 type: PrivateMessage
    * Java type: PrivateMessage
    *
    * procedureCode: id-rLFIndication
    * criticality: Criticality.ignore
    * ASN.1 type: RLFIndication
    * Java type: RLFIndication
    *
    * procedureCode: id-handoverReport
    * criticality: Criticality.ignore
    * ASN.1 type: HandoverReport
    * Java type: HandoverReport
    *
    * procedureCode: id-x2Release
    * criticality: Criticality.reject
    * ASN.1 type: X2Release
    * Java type: X2Release
    *
    * procedureCode: id-x2APMessageTransfer
    * criticality: Criticality.reject
    * ASN.1 type: X2APMessageTransfer
    * Java type: X2APMessageTransfer
    *
    * procedureCode: id-seNBReconfigurationCompletion
    * criticality: Criticality.ignore
    * ASN.1 type: SeNBReconfigurationComplete
    * Java type: SeNBReconfigurationComplete
    *
    * procedureCode: id-meNBinitiatedSeNBRelease
    * criticality: Criticality.ignore
    * ASN.1 type: SeNBReleaseRequest
    * Java type: SeNBReleaseRequest
    *
    * procedureCode: id-seNBCounterCheck
    * criticality: Criticality.reject
    * ASN.1 type: SeNBCounterCheckRequest
    * Java type: SeNBCounterCheckRequest
    *
    * procedureCode: id-sgNBReconfigurationCompletion
    * criticality: Criticality.ignore
    * ASN.1 type: SgNBReconfigurationComplete
    * Java type: SgNBReconfigurationComplete
    *
    * procedureCode: id-sgNBCounterCheck
    * criticality: Criticality.reject
    * ASN.1 type: SgNBCounterCheckRequest
    * Java type: SgNBCounterCheckRequest
    *
    * procedureCode: id-rRCTransfer
    * criticality: Criticality.reject
    * ASN.1 type: RRCTransfer
    * Java type: RRCTransfer
    *
    * procedureCode: id-secondaryRATDataUsageReport
    * criticality: Criticality.reject
    * ASN.1 type: SecondaryRATDataUsageReport
    * Java type: SecondaryRATDataUsageReport
    *
    * procedureCode: id-SgNBActivityNotification
    * criticality: Criticality.reject
    * ASN.1 type: SgNBActivityNotification
    * Java type: SgNBActivityNotification
    *
    * procedureCode: id-dataForwardingAddressIndication
    * criticality: Criticality.ignore
    * ASN.1 type: DataForwardingAddressIndication
    * Java type: DataForwardingAddressIndication
    *
    * procedureCode: id-gNBStatusIndication
    * criticality: Criticality.ignore
    * ASN.1 type: GNBStatusIndication
    * Java type: GNBStatusIndication
    *
    * procedureCode: id-endcConfigurationTransfer
    * criticality: Criticality.ignore
    * ASN.1 type: ENDCConfigurationTransfer
    * Java type: ENDCConfigurationTransfer
    *
    * procedureCode: id-deactivateTrace
    * criticality: Criticality.ignore
    * ASN.1 type: DeactivateTrace
    * Java type: DeactivateTrace
    *
    * procedureCode: id-traceStart
    * criticality: Criticality.ignore
    * ASN.1 type: TraceStart
    * Java type: TraceStart
    */
   public Asn1Type value;

   public InitiatingMessage () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public InitiatingMessage (
      ProcedureCode procedureCode_,
      Criticality criticality_,
      Asn1Type value_
   ) {
      super();
      procedureCode = procedureCode_;
      criticality = criticality_;
      value = value_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public InitiatingMessage (long procedureCode_,
      Criticality criticality_,
      Asn1Type value_
   ) {
      super();
      procedureCode = new ProcedureCode (procedureCode_);
      criticality = criticality_;
      value = value_;
   }

   public void init () {
      procedureCode = null;
      criticality = null;
      value = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return procedureCode;
         case 1: return criticality;
         case 2: return value;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "procedureCode";
         case 1: return "criticality";
         case 2: return "value";
         default: return null;
      }
   }


   /**
    * Assign fields according to information object handoverPreparation
    */
   public void setUsing_handoverPreparation(asn.lte.generated.X2AP_PDU_Contents.HandoverRequest value) {
      this.procedureCode = new asn.lte.generated.X2AP_CommonDataTypes.ProcedureCode(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_handoverPreparation);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object reset
    */
   public void setUsing_reset(asn.lte.generated.X2AP_PDU_Contents.ResetRequest value) {
      this.procedureCode = new asn.lte.generated.X2AP_CommonDataTypes.ProcedureCode(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_reset);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object x2Setup
    */
   public void setUsing_x2Setup(asn.lte.generated.X2AP_PDU_Contents.X2SetupRequest value) {
      this.procedureCode = new asn.lte.generated.X2AP_CommonDataTypes.ProcedureCode(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_x2Setup);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object resourceStatusReportingInitiation
    */
   public void setUsing_resourceStatusReportingInitiation(asn.lte.generated.X2AP_PDU_Contents.ResourceStatusRequest value) {
      this.procedureCode = new asn.lte.generated.X2AP_CommonDataTypes.ProcedureCode(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_resourceStatusReportingInitiation);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object eNBConfigurationUpdate
    */
   public void setUsing_eNBConfigurationUpdate(asn.lte.generated.X2AP_PDU_Contents.ENBConfigurationUpdate value) {
      this.procedureCode = new asn.lte.generated.X2AP_CommonDataTypes.ProcedureCode(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_eNBConfigurationUpdate);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object mobilitySettingsChange
    */
   public void setUsing_mobilitySettingsChange(asn.lte.generated.X2AP_PDU_Contents.MobilityChangeRequest value) {
      this.procedureCode = new asn.lte.generated.X2AP_CommonDataTypes.ProcedureCode(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_mobilitySettingsChange);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object cellActivation
    */
   public void setUsing_cellActivation(asn.lte.generated.X2AP_PDU_Contents.CellActivationRequest value) {
      this.procedureCode = new asn.lte.generated.X2AP_CommonDataTypes.ProcedureCode(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_cellActivation);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object seNBAdditionPreparation
    */
   public void setUsing_seNBAdditionPreparation(asn.lte.generated.X2AP_PDU_Contents.SeNBAdditionRequest value) {
      this.procedureCode = new asn.lte.generated.X2AP_CommonDataTypes.ProcedureCode(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_seNBAdditionPreparation);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object meNBinitiatedSeNBModificationPreparation
    */
   public void setUsing_meNBinitiatedSeNBModificationPreparation(asn.lte.generated.X2AP_PDU_Contents.SeNBModificationRequest value) {
      this.procedureCode = new asn.lte.generated.X2AP_CommonDataTypes.ProcedureCode(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_meNBinitiatedSeNBModificationPreparation);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object seNBinitiatedSeNBModification
    */
   public void setUsing_seNBinitiatedSeNBModification(asn.lte.generated.X2AP_PDU_Contents.SeNBModificationRequired value) {
      this.procedureCode = new asn.lte.generated.X2AP_CommonDataTypes.ProcedureCode(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_seNBinitiatedSeNBModification);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object seNBinitiatedSeNBRelease
    */
   public void setUsing_seNBinitiatedSeNBRelease(asn.lte.generated.X2AP_PDU_Contents.SeNBReleaseRequired value) {
      this.procedureCode = new asn.lte.generated.X2AP_CommonDataTypes.ProcedureCode(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_seNBinitiatedSeNBRelease);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object x2Removal
    */
   public void setUsing_x2Removal(asn.lte.generated.X2AP_PDU_Contents.X2RemovalRequest value) {
      this.procedureCode = new asn.lte.generated.X2AP_CommonDataTypes.ProcedureCode(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_x2Removal);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object retrieveUEContext
    */
   public void setUsing_retrieveUEContext(asn.lte.generated.X2AP_PDU_Contents.RetrieveUEContextRequest value) {
      this.procedureCode = new asn.lte.generated.X2AP_CommonDataTypes.ProcedureCode(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_retrieveUEContext);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object sgNBAdditionPreparation
    */
   public void setUsing_sgNBAdditionPreparation(asn.lte.generated.X2AP_PDU_Contents.SgNBAdditionRequest value) {
      this.procedureCode = new asn.lte.generated.X2AP_CommonDataTypes.ProcedureCode(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_sgNBAdditionPreparation);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object meNBinitiatedSgNBModificationPreparation
    */
   public void setUsing_meNBinitiatedSgNBModificationPreparation(asn.lte.generated.X2AP_PDU_Contents.SgNBModificationRequest value) {
      this.procedureCode = new asn.lte.generated.X2AP_CommonDataTypes.ProcedureCode(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_meNBinitiatedSgNBModificationPreparation);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object sgNBinitiatedSgNBModification
    */
   public void setUsing_sgNBinitiatedSgNBModification(asn.lte.generated.X2AP_PDU_Contents.SgNBModificationRequired value) {
      this.procedureCode = new asn.lte.generated.X2AP_CommonDataTypes.ProcedureCode(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_sgNBinitiatedSgNBModification);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object meNBinitiatedSgNBRelease
    */
   public void setUsing_meNBinitiatedSgNBRelease(asn.lte.generated.X2AP_PDU_Contents.SgNBReleaseRequest value) {
      this.procedureCode = new asn.lte.generated.X2AP_CommonDataTypes.ProcedureCode(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_meNBinitiatedSgNBRelease);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object sgNBinitiatedSgNBRelease
    */
   public void setUsing_sgNBinitiatedSgNBRelease(asn.lte.generated.X2AP_PDU_Contents.SgNBReleaseRequired value) {
      this.procedureCode = new asn.lte.generated.X2AP_CommonDataTypes.ProcedureCode(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_sgNBinitiatedSgNBRelease);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object sgNBChange
    */
   public void setUsing_sgNBChange(asn.lte.generated.X2AP_PDU_Contents.SgNBChangeRequired value) {
      this.procedureCode = new asn.lte.generated.X2AP_CommonDataTypes.ProcedureCode(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_sgNBChange);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object endcX2Setup
    */
   public void setUsing_endcX2Setup(asn.lte.generated.X2AP_PDU_Contents.ENDCX2SetupRequest value) {
      this.procedureCode = new asn.lte.generated.X2AP_CommonDataTypes.ProcedureCode(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_endcX2Setup);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object endcConfigurationUpdate
    */
   public void setUsing_endcConfigurationUpdate(asn.lte.generated.X2AP_PDU_Contents.ENDCConfigurationUpdate value) {
      this.procedureCode = new asn.lte.generated.X2AP_CommonDataTypes.ProcedureCode(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_endcConfigurationUpdate);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object endcCellActivation
    */
   public void setUsing_endcCellActivation(asn.lte.generated.X2AP_PDU_Contents.ENDCCellActivationRequest value) {
      this.procedureCode = new asn.lte.generated.X2AP_CommonDataTypes.ProcedureCode(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_endcCellActivation);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object endcPartialReset
    */
   public void setUsing_endcPartialReset(asn.lte.generated.X2AP_PDU_Contents.ENDCPartialResetRequired value) {
      this.procedureCode = new asn.lte.generated.X2AP_CommonDataTypes.ProcedureCode(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_endcPartialReset);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object eUTRANRCellResourceCoordination
    */
   public void setUsing_eUTRANRCellResourceCoordination(asn.lte.generated.X2AP_PDU_Contents.EUTRANRCellResourceCoordinationRequest value) {
      this.procedureCode = new asn.lte.generated.X2AP_CommonDataTypes.ProcedureCode(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_eUTRANRCellResourceCoordination);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object endcX2Removal
    */
   public void setUsing_endcX2Removal(asn.lte.generated.X2AP_PDU_Contents.ENDCX2RemovalRequest value) {
      this.procedureCode = new asn.lte.generated.X2AP_CommonDataTypes.ProcedureCode(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_endcX2Removal);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object snStatusTransfer
    */
   public void setUsing_snStatusTransfer(asn.lte.generated.X2AP_PDU_Contents.SNStatusTransfer value) {
      this.procedureCode = new asn.lte.generated.X2AP_CommonDataTypes.ProcedureCode(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_snStatusTransfer);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object uEContextRelease
    */
   public void setUsing_uEContextRelease(asn.lte.generated.X2AP_PDU_Contents.UEContextRelease value) {
      this.procedureCode = new asn.lte.generated.X2AP_CommonDataTypes.ProcedureCode(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_uEContextRelease);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object handoverCancel
    */
   public void setUsing_handoverCancel(asn.lte.generated.X2AP_PDU_Contents.HandoverCancel value) {
      this.procedureCode = new asn.lte.generated.X2AP_CommonDataTypes.ProcedureCode(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_handoverCancel);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object errorIndication
    */
   public void setUsing_errorIndication(asn.lte.generated.X2AP_PDU_Contents.ErrorIndication value) {
      this.procedureCode = new asn.lte.generated.X2AP_CommonDataTypes.ProcedureCode(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_errorIndication);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object resourceStatusReporting
    */
   public void setUsing_resourceStatusReporting(asn.lte.generated.X2AP_PDU_Contents.ResourceStatusUpdate value) {
      this.procedureCode = new asn.lte.generated.X2AP_CommonDataTypes.ProcedureCode(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_resourceStatusReporting);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object loadIndication
    */
   public void setUsing_loadIndication(asn.lte.generated.X2AP_PDU_Contents.LoadInformation value) {
      this.procedureCode = new asn.lte.generated.X2AP_CommonDataTypes.ProcedureCode(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_loadIndication);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object privateMessage
    */
   public void setUsing_privateMessage(asn.lte.generated.X2AP_PDU_Contents.PrivateMessage value) {
      this.procedureCode = new asn.lte.generated.X2AP_CommonDataTypes.ProcedureCode(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_privateMessage);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object rLFIndication
    */
   public void setUsing_rLFIndication(asn.lte.generated.X2AP_PDU_Contents.RLFIndication value) {
      this.procedureCode = new asn.lte.generated.X2AP_CommonDataTypes.ProcedureCode(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_rLFIndication);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object handoverReport
    */
   public void setUsing_handoverReport(asn.lte.generated.X2AP_PDU_Contents.HandoverReport value) {
      this.procedureCode = new asn.lte.generated.X2AP_CommonDataTypes.ProcedureCode(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_handoverReport);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object x2Release
    */
   public void setUsing_x2Release(asn.lte.generated.X2AP_PDU_Contents.X2Release value) {
      this.procedureCode = new asn.lte.generated.X2AP_CommonDataTypes.ProcedureCode(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_x2Release);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object x2APMessageTransfer
    */
   public void setUsing_x2APMessageTransfer(asn.lte.generated.X2AP_PDU_Contents.X2APMessageTransfer value) {
      this.procedureCode = new asn.lte.generated.X2AP_CommonDataTypes.ProcedureCode(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_x2APMessageTransfer);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object seNBReconfigurationCompletion
    */
   public void setUsing_seNBReconfigurationCompletion(asn.lte.generated.X2AP_PDU_Contents.SeNBReconfigurationComplete value) {
      this.procedureCode = new asn.lte.generated.X2AP_CommonDataTypes.ProcedureCode(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_seNBReconfigurationCompletion);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object meNBinitiatedSeNBRelease
    */
   public void setUsing_meNBinitiatedSeNBRelease(asn.lte.generated.X2AP_PDU_Contents.SeNBReleaseRequest value) {
      this.procedureCode = new asn.lte.generated.X2AP_CommonDataTypes.ProcedureCode(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_meNBinitiatedSeNBRelease);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object seNBCounterCheck
    */
   public void setUsing_seNBCounterCheck(asn.lte.generated.X2AP_PDU_Contents.SeNBCounterCheckRequest value) {
      this.procedureCode = new asn.lte.generated.X2AP_CommonDataTypes.ProcedureCode(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_seNBCounterCheck);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object sgNBReconfigurationCompletion
    */
   public void setUsing_sgNBReconfigurationCompletion(asn.lte.generated.X2AP_PDU_Contents.SgNBReconfigurationComplete value) {
      this.procedureCode = new asn.lte.generated.X2AP_CommonDataTypes.ProcedureCode(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_sgNBReconfigurationCompletion);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object sgNBCounterCheck
    */
   public void setUsing_sgNBCounterCheck(asn.lte.generated.X2AP_PDU_Contents.SgNBCounterCheckRequest value) {
      this.procedureCode = new asn.lte.generated.X2AP_CommonDataTypes.ProcedureCode(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_sgNBCounterCheck);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object rRCTransfer
    */
   public void setUsing_rRCTransfer(asn.lte.generated.X2AP_PDU_Contents.RRCTransfer value) {
      this.procedureCode = new asn.lte.generated.X2AP_CommonDataTypes.ProcedureCode(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_rRCTransfer);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object secondaryRATDataUsageReport
    */
   public void setUsing_secondaryRATDataUsageReport(asn.lte.generated.X2AP_PDU_Contents.SecondaryRATDataUsageReport value) {
      this.procedureCode = new asn.lte.generated.X2AP_CommonDataTypes.ProcedureCode(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_secondaryRATDataUsageReport);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object sgNBActivityNotification
    */
   public void setUsing_sgNBActivityNotification(asn.lte.generated.X2AP_PDU_Contents.SgNBActivityNotification value) {
      this.procedureCode = new asn.lte.generated.X2AP_CommonDataTypes.ProcedureCode(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_SgNBActivityNotification);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object dataForwardingAddressIndication
    */
   public void setUsing_dataForwardingAddressIndication(asn.lte.generated.X2AP_PDU_Contents.DataForwardingAddressIndication value) {
      this.procedureCode = new asn.lte.generated.X2AP_CommonDataTypes.ProcedureCode(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_dataForwardingAddressIndication);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object gNBStatusIndication
    */
   public void setUsing_gNBStatusIndication(asn.lte.generated.X2AP_PDU_Contents.GNBStatusIndication value) {
      this.procedureCode = new asn.lte.generated.X2AP_CommonDataTypes.ProcedureCode(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_gNBStatusIndication);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object endcConfigurationTransfer
    */
   public void setUsing_endcConfigurationTransfer(asn.lte.generated.X2AP_PDU_Contents.ENDCConfigurationTransfer value) {
      this.procedureCode = new asn.lte.generated.X2AP_CommonDataTypes.ProcedureCode(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_endcConfigurationTransfer);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object deactivateTrace
    */
   public void setUsing_deactivateTrace(asn.lte.generated.X2AP_PDU_Contents.DeactivateTrace value) {
      this.procedureCode = new asn.lte.generated.X2AP_CommonDataTypes.ProcedureCode(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_deactivateTrace);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object traceStart
    */
   public void setUsing_traceStart(asn.lte.generated.X2AP_PDU_Contents.TraceStart value) {
      this.procedureCode = new asn.lte.generated.X2AP_CommonDataTypes.ProcedureCode(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_traceStart);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Get value of value with type set according to information object handoverPreparation
    */
   public asn.lte.generated.X2AP_PDU_Contents.HandoverRequest getValueFor_handoverPreparation() {
      return (asn.lte.generated.X2AP_PDU_Contents.HandoverRequest) this.value;
   }

   /**
    * Get value of value with type set according to information object reset
    */
   public asn.lte.generated.X2AP_PDU_Contents.ResetRequest getValueFor_reset() {
      return (asn.lte.generated.X2AP_PDU_Contents.ResetRequest) this.value;
   }

   /**
    * Get value of value with type set according to information object x2Setup
    */
   public asn.lte.generated.X2AP_PDU_Contents.X2SetupRequest getValueFor_x2Setup() {
      return (asn.lte.generated.X2AP_PDU_Contents.X2SetupRequest) this.value;
   }

   /**
    * Get value of value with type set according to information object resourceStatusReportingInitiation
    */
   public asn.lte.generated.X2AP_PDU_Contents.ResourceStatusRequest getValueFor_resourceStatusReportingInitiation() {
      return (asn.lte.generated.X2AP_PDU_Contents.ResourceStatusRequest) this.value;
   }

   /**
    * Get value of value with type set according to information object eNBConfigurationUpdate
    */
   public asn.lte.generated.X2AP_PDU_Contents.ENBConfigurationUpdate getValueFor_eNBConfigurationUpdate() {
      return (asn.lte.generated.X2AP_PDU_Contents.ENBConfigurationUpdate) this.value;
   }

   /**
    * Get value of value with type set according to information object mobilitySettingsChange
    */
   public asn.lte.generated.X2AP_PDU_Contents.MobilityChangeRequest getValueFor_mobilitySettingsChange() {
      return (asn.lte.generated.X2AP_PDU_Contents.MobilityChangeRequest) this.value;
   }

   /**
    * Get value of value with type set according to information object cellActivation
    */
   public asn.lte.generated.X2AP_PDU_Contents.CellActivationRequest getValueFor_cellActivation() {
      return (asn.lte.generated.X2AP_PDU_Contents.CellActivationRequest) this.value;
   }

   /**
    * Get value of value with type set according to information object seNBAdditionPreparation
    */
   public asn.lte.generated.X2AP_PDU_Contents.SeNBAdditionRequest getValueFor_seNBAdditionPreparation() {
      return (asn.lte.generated.X2AP_PDU_Contents.SeNBAdditionRequest) this.value;
   }

   /**
    * Get value of value with type set according to information object meNBinitiatedSeNBModificationPreparation
    */
   public asn.lte.generated.X2AP_PDU_Contents.SeNBModificationRequest getValueFor_meNBinitiatedSeNBModificationPreparation() {
      return (asn.lte.generated.X2AP_PDU_Contents.SeNBModificationRequest) this.value;
   }

   /**
    * Get value of value with type set according to information object seNBinitiatedSeNBModification
    */
   public asn.lte.generated.X2AP_PDU_Contents.SeNBModificationRequired getValueFor_seNBinitiatedSeNBModification() {
      return (asn.lte.generated.X2AP_PDU_Contents.SeNBModificationRequired) this.value;
   }

   /**
    * Get value of value with type set according to information object seNBinitiatedSeNBRelease
    */
   public asn.lte.generated.X2AP_PDU_Contents.SeNBReleaseRequired getValueFor_seNBinitiatedSeNBRelease() {
      return (asn.lte.generated.X2AP_PDU_Contents.SeNBReleaseRequired) this.value;
   }

   /**
    * Get value of value with type set according to information object x2Removal
    */
   public asn.lte.generated.X2AP_PDU_Contents.X2RemovalRequest getValueFor_x2Removal() {
      return (asn.lte.generated.X2AP_PDU_Contents.X2RemovalRequest) this.value;
   }

   /**
    * Get value of value with type set according to information object retrieveUEContext
    */
   public asn.lte.generated.X2AP_PDU_Contents.RetrieveUEContextRequest getValueFor_retrieveUEContext() {
      return (asn.lte.generated.X2AP_PDU_Contents.RetrieveUEContextRequest) this.value;
   }

   /**
    * Get value of value with type set according to information object sgNBAdditionPreparation
    */
   public asn.lte.generated.X2AP_PDU_Contents.SgNBAdditionRequest getValueFor_sgNBAdditionPreparation() {
      return (asn.lte.generated.X2AP_PDU_Contents.SgNBAdditionRequest) this.value;
   }

   /**
    * Get value of value with type set according to information object meNBinitiatedSgNBModificationPreparation
    */
   public asn.lte.generated.X2AP_PDU_Contents.SgNBModificationRequest getValueFor_meNBinitiatedSgNBModificationPreparation() {
      return (asn.lte.generated.X2AP_PDU_Contents.SgNBModificationRequest) this.value;
   }

   /**
    * Get value of value with type set according to information object sgNBinitiatedSgNBModification
    */
   public asn.lte.generated.X2AP_PDU_Contents.SgNBModificationRequired getValueFor_sgNBinitiatedSgNBModification() {
      return (asn.lte.generated.X2AP_PDU_Contents.SgNBModificationRequired) this.value;
   }

   /**
    * Get value of value with type set according to information object meNBinitiatedSgNBRelease
    */
   public asn.lte.generated.X2AP_PDU_Contents.SgNBReleaseRequest getValueFor_meNBinitiatedSgNBRelease() {
      return (asn.lte.generated.X2AP_PDU_Contents.SgNBReleaseRequest) this.value;
   }

   /**
    * Get value of value with type set according to information object sgNBinitiatedSgNBRelease
    */
   public asn.lte.generated.X2AP_PDU_Contents.SgNBReleaseRequired getValueFor_sgNBinitiatedSgNBRelease() {
      return (asn.lte.generated.X2AP_PDU_Contents.SgNBReleaseRequired) this.value;
   }

   /**
    * Get value of value with type set according to information object sgNBChange
    */
   public asn.lte.generated.X2AP_PDU_Contents.SgNBChangeRequired getValueFor_sgNBChange() {
      return (asn.lte.generated.X2AP_PDU_Contents.SgNBChangeRequired) this.value;
   }

   /**
    * Get value of value with type set according to information object endcX2Setup
    */
   public asn.lte.generated.X2AP_PDU_Contents.ENDCX2SetupRequest getValueFor_endcX2Setup() {
      return (asn.lte.generated.X2AP_PDU_Contents.ENDCX2SetupRequest) this.value;
   }

   /**
    * Get value of value with type set according to information object endcConfigurationUpdate
    */
   public asn.lte.generated.X2AP_PDU_Contents.ENDCConfigurationUpdate getValueFor_endcConfigurationUpdate() {
      return (asn.lte.generated.X2AP_PDU_Contents.ENDCConfigurationUpdate) this.value;
   }

   /**
    * Get value of value with type set according to information object endcCellActivation
    */
   public asn.lte.generated.X2AP_PDU_Contents.ENDCCellActivationRequest getValueFor_endcCellActivation() {
      return (asn.lte.generated.X2AP_PDU_Contents.ENDCCellActivationRequest) this.value;
   }

   /**
    * Get value of value with type set according to information object endcPartialReset
    */
   public asn.lte.generated.X2AP_PDU_Contents.ENDCPartialResetRequired getValueFor_endcPartialReset() {
      return (asn.lte.generated.X2AP_PDU_Contents.ENDCPartialResetRequired) this.value;
   }

   /**
    * Get value of value with type set according to information object eUTRANRCellResourceCoordination
    */
   public asn.lte.generated.X2AP_PDU_Contents.EUTRANRCellResourceCoordinationRequest getValueFor_eUTRANRCellResourceCoordination() {
      return (asn.lte.generated.X2AP_PDU_Contents.EUTRANRCellResourceCoordinationRequest) this.value;
   }

   /**
    * Get value of value with type set according to information object endcX2Removal
    */
   public asn.lte.generated.X2AP_PDU_Contents.ENDCX2RemovalRequest getValueFor_endcX2Removal() {
      return (asn.lte.generated.X2AP_PDU_Contents.ENDCX2RemovalRequest) this.value;
   }

   /**
    * Get value of value with type set according to information object snStatusTransfer
    */
   public asn.lte.generated.X2AP_PDU_Contents.SNStatusTransfer getValueFor_snStatusTransfer() {
      return (asn.lte.generated.X2AP_PDU_Contents.SNStatusTransfer) this.value;
   }

   /**
    * Get value of value with type set according to information object uEContextRelease
    */
   public asn.lte.generated.X2AP_PDU_Contents.UEContextRelease getValueFor_uEContextRelease() {
      return (asn.lte.generated.X2AP_PDU_Contents.UEContextRelease) this.value;
   }

   /**
    * Get value of value with type set according to information object handoverCancel
    */
   public asn.lte.generated.X2AP_PDU_Contents.HandoverCancel getValueFor_handoverCancel() {
      return (asn.lte.generated.X2AP_PDU_Contents.HandoverCancel) this.value;
   }

   /**
    * Get value of value with type set according to information object errorIndication
    */
   public asn.lte.generated.X2AP_PDU_Contents.ErrorIndication getValueFor_errorIndication() {
      return (asn.lte.generated.X2AP_PDU_Contents.ErrorIndication) this.value;
   }

   /**
    * Get value of value with type set according to information object resourceStatusReporting
    */
   public asn.lte.generated.X2AP_PDU_Contents.ResourceStatusUpdate getValueFor_resourceStatusReporting() {
      return (asn.lte.generated.X2AP_PDU_Contents.ResourceStatusUpdate) this.value;
   }

   /**
    * Get value of value with type set according to information object loadIndication
    */
   public asn.lte.generated.X2AP_PDU_Contents.LoadInformation getValueFor_loadIndication() {
      return (asn.lte.generated.X2AP_PDU_Contents.LoadInformation) this.value;
   }

   /**
    * Get value of value with type set according to information object privateMessage
    */
   public asn.lte.generated.X2AP_PDU_Contents.PrivateMessage getValueFor_privateMessage() {
      return (asn.lte.generated.X2AP_PDU_Contents.PrivateMessage) this.value;
   }

   /**
    * Get value of value with type set according to information object rLFIndication
    */
   public asn.lte.generated.X2AP_PDU_Contents.RLFIndication getValueFor_rLFIndication() {
      return (asn.lte.generated.X2AP_PDU_Contents.RLFIndication) this.value;
   }

   /**
    * Get value of value with type set according to information object handoverReport
    */
   public asn.lte.generated.X2AP_PDU_Contents.HandoverReport getValueFor_handoverReport() {
      return (asn.lte.generated.X2AP_PDU_Contents.HandoverReport) this.value;
   }

   /**
    * Get value of value with type set according to information object x2Release
    */
   public asn.lte.generated.X2AP_PDU_Contents.X2Release getValueFor_x2Release() {
      return (asn.lte.generated.X2AP_PDU_Contents.X2Release) this.value;
   }

   /**
    * Get value of value with type set according to information object x2APMessageTransfer
    */
   public asn.lte.generated.X2AP_PDU_Contents.X2APMessageTransfer getValueFor_x2APMessageTransfer() {
      return (asn.lte.generated.X2AP_PDU_Contents.X2APMessageTransfer) this.value;
   }

   /**
    * Get value of value with type set according to information object seNBReconfigurationCompletion
    */
   public asn.lte.generated.X2AP_PDU_Contents.SeNBReconfigurationComplete getValueFor_seNBReconfigurationCompletion() {
      return (asn.lte.generated.X2AP_PDU_Contents.SeNBReconfigurationComplete) this.value;
   }

   /**
    * Get value of value with type set according to information object meNBinitiatedSeNBRelease
    */
   public asn.lte.generated.X2AP_PDU_Contents.SeNBReleaseRequest getValueFor_meNBinitiatedSeNBRelease() {
      return (asn.lte.generated.X2AP_PDU_Contents.SeNBReleaseRequest) this.value;
   }

   /**
    * Get value of value with type set according to information object seNBCounterCheck
    */
   public asn.lte.generated.X2AP_PDU_Contents.SeNBCounterCheckRequest getValueFor_seNBCounterCheck() {
      return (asn.lte.generated.X2AP_PDU_Contents.SeNBCounterCheckRequest) this.value;
   }

   /**
    * Get value of value with type set according to information object sgNBReconfigurationCompletion
    */
   public asn.lte.generated.X2AP_PDU_Contents.SgNBReconfigurationComplete getValueFor_sgNBReconfigurationCompletion() {
      return (asn.lte.generated.X2AP_PDU_Contents.SgNBReconfigurationComplete) this.value;
   }

   /**
    * Get value of value with type set according to information object sgNBCounterCheck
    */
   public asn.lte.generated.X2AP_PDU_Contents.SgNBCounterCheckRequest getValueFor_sgNBCounterCheck() {
      return (asn.lte.generated.X2AP_PDU_Contents.SgNBCounterCheckRequest) this.value;
   }

   /**
    * Get value of value with type set according to information object rRCTransfer
    */
   public asn.lte.generated.X2AP_PDU_Contents.RRCTransfer getValueFor_rRCTransfer() {
      return (asn.lte.generated.X2AP_PDU_Contents.RRCTransfer) this.value;
   }

   /**
    * Get value of value with type set according to information object secondaryRATDataUsageReport
    */
   public asn.lte.generated.X2AP_PDU_Contents.SecondaryRATDataUsageReport getValueFor_secondaryRATDataUsageReport() {
      return (asn.lte.generated.X2AP_PDU_Contents.SecondaryRATDataUsageReport) this.value;
   }

   /**
    * Get value of value with type set according to information object sgNBActivityNotification
    */
   public asn.lte.generated.X2AP_PDU_Contents.SgNBActivityNotification getValueFor_sgNBActivityNotification() {
      return (asn.lte.generated.X2AP_PDU_Contents.SgNBActivityNotification) this.value;
   }

   /**
    * Get value of value with type set according to information object dataForwardingAddressIndication
    */
   public asn.lte.generated.X2AP_PDU_Contents.DataForwardingAddressIndication getValueFor_dataForwardingAddressIndication() {
      return (asn.lte.generated.X2AP_PDU_Contents.DataForwardingAddressIndication) this.value;
   }

   /**
    * Get value of value with type set according to information object gNBStatusIndication
    */
   public asn.lte.generated.X2AP_PDU_Contents.GNBStatusIndication getValueFor_gNBStatusIndication() {
      return (asn.lte.generated.X2AP_PDU_Contents.GNBStatusIndication) this.value;
   }

   /**
    * Get value of value with type set according to information object endcConfigurationTransfer
    */
   public asn.lte.generated.X2AP_PDU_Contents.ENDCConfigurationTransfer getValueFor_endcConfigurationTransfer() {
      return (asn.lte.generated.X2AP_PDU_Contents.ENDCConfigurationTransfer) this.value;
   }

   /**
    * Get value of value with type set according to information object deactivateTrace
    */
   public asn.lte.generated.X2AP_PDU_Contents.DeactivateTrace getValueFor_deactivateTrace() {
      return (asn.lte.generated.X2AP_PDU_Contents.DeactivateTrace) this.value;
   }

   /**
    * Get value of value with type set according to information object traceStart
    */
   public asn.lte.generated.X2AP_PDU_Contents.TraceStart getValueFor_traceStart() {
      return (asn.lte.generated.X2AP_PDU_Contents.TraceStart) this.value;
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode procedureCode

      buffer.getContext().eventDispatcher.startElement("procedureCode", -1);

      procedureCode = new ProcedureCode();
      procedureCode.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("procedureCode", -1);

      // decode criticality

      buffer.getContext().eventDispatcher.startElement("criticality", -1);

      {
         int tval = Criticality.decodeEnumValue (buffer);
         criticality = Criticality.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("criticality", -1);

      // decode value

      buffer.getContext().eventDispatcher.startElement("value", -1);

      value = new Asn1OpenType();
      value.decode (buffer);

      buffer.invokeCharacters(value.toString());
      buffer.getContext().eventDispatcher.endElement("value", -1);

      checkTC (true, buffer.getLazyOpenTypeDecode() ? 0 : 2, buffer.isAligned(), buffer.getContext().eventDispatcher);
   }

   public void checkTC(boolean decode, int decodeOpenTypeFlag, boolean aligned, Asn1NamedEventDispatcher eventDispatcher)
      throws Asn1Exception
   {
      /* check procedureCode */
      X2AP_ELEMENTARY_PROCEDURE _index = null;
      for(int i=0; i < _X2AP_PDU_DescriptionsValues.X2AP_ELEMENTARY_PROCEDURES.length; i++) {
         if(_X2AP_PDU_DescriptionsValues.X2AP_ELEMENTARY_PROCEDURES[i].procedureCode.equals(procedureCode)) {
            _index = _X2AP_PDU_DescriptionsValues.X2AP_ELEMENTARY_PROCEDURES[i];
            break;
         }
      }
      if (null == _index) {
         return;
      }

      /* check value */
      if( decode && decodeOpenTypeFlag >=1 ) {
         try {
            Asn1PerDecodeBuffer buffer = new Asn1PerDecodeBuffer(((Asn1OpenType)value).value, aligned);
            buffer.setLazyOpenTypeDecode(decodeOpenTypeFlag == 1);
            if (eventDispatcher != null)buffer.getContext().eventDispatcher = eventDispatcher;
            buffer.getContext().eventDispatcher.startElement("value", -1);

            String className = _index.InitiatingMessage.actualType.getName();
            if (className.lastIndexOf('.') > 0) {
               className = className.substring (className.lastIndexOf (".")+1);
            }
            buffer.getContext().eventDispatcher.startElement(className, -1);

            value = Asn1Type.decode(buffer, _index.InitiatingMessage);

            buffer.getContext().eventDispatcher.endElement(className, -1);

            buffer.getContext().eventDispatcher.endElement("value", -1);
         }
         catch (java.io.IOException e) {
            throw new Asn1Exception(e.toString());
         }
      }

      /* use -strict option to validate the "criticality" element */
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (procedureCode.value == 0) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-handoverPreparation\n");
      }
      else if (procedureCode.value == 7) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-reset\n");
      }
      else if (procedureCode.value == 6) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-x2Setup\n");
      }
      else if (procedureCode.value == 9) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-resourceStatusReportingInitiation\n");
      }
      else if (procedureCode.value == 8) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-eNBConfigurationUpdate\n");
      }
      else if (procedureCode.value == 12) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-mobilitySettingsChange\n");
      }
      else if (procedureCode.value == 15) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-cellActivation\n");
      }
      else if (procedureCode.value == 19) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-seNBAdditionPreparation\n");
      }
      else if (procedureCode.value == 21) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-meNBinitiatedSeNBModificationPreparation\n");
      }
      else if (procedureCode.value == 22) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-seNBinitiatedSeNBModification\n");
      }
      else if (procedureCode.value == 24) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-seNBinitiatedSeNBRelease\n");
      }
      else if (procedureCode.value == 18) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-x2Removal\n");
      }
      else if (procedureCode.value == 26) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-retrieveUEContext\n");
      }
      else if (procedureCode.value == 27) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-sgNBAdditionPreparation\n");
      }
      else if (procedureCode.value == 29) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-meNBinitiatedSgNBModificationPreparation\n");
      }
      else if (procedureCode.value == 30) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-sgNBinitiatedSgNBModification\n");
      }
      else if (procedureCode.value == 31) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-meNBinitiatedSgNBRelease\n");
      }
      else if (procedureCode.value == 32) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-sgNBinitiatedSgNBRelease\n");
      }
      else if (procedureCode.value == 34) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-sgNBChange\n");
      }
      else if (procedureCode.value == 36) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-endcX2Setup\n");
      }
      else if (procedureCode.value == 37) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-endcConfigurationUpdate\n");
      }
      else if (procedureCode.value == 39) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-endcCellActivation\n");
      }
      else if (procedureCode.value == 40) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-endcPartialReset\n");
      }
      else if (procedureCode.value == 41) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-eUTRANRCellResourceCoordination\n");
      }
      else if (procedureCode.value == 43) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-endcX2Removal\n");
      }
      else if (procedureCode.value == 4) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-snStatusTransfer\n");
      }
      else if (procedureCode.value == 5) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-uEContextRelease\n");
      }
      else if (procedureCode.value == 1) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-handoverCancel\n");
      }
      else if (procedureCode.value == 3) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-errorIndication\n");
      }
      else if (procedureCode.value == 10) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-resourceStatusReporting\n");
      }
      else if (procedureCode.value == 2) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-loadIndication\n");
      }
      else if (procedureCode.value == 11) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-privateMessage\n");
      }
      else if (procedureCode.value == 13) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-rLFIndication\n");
      }
      else if (procedureCode.value == 14) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-handoverReport\n");
      }
      else if (procedureCode.value == 16) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-x2Release\n");
      }
      else if (procedureCode.value == 17) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-x2APMessageTransfer\n");
      }
      else if (procedureCode.value == 20) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-seNBReconfigurationCompletion\n");
      }
      else if (procedureCode.value == 23) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-meNBinitiatedSeNBRelease\n");
      }
      else if (procedureCode.value == 25) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-seNBCounterCheck\n");
      }
      else if (procedureCode.value == 28) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-sgNBReconfigurationCompletion\n");
      }
      else if (procedureCode.value == 33) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-sgNBCounterCheck\n");
      }
      else if (procedureCode.value == 35) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-rRCTransfer\n");
      }
      else if (procedureCode.value == 38) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-secondaryRATDataUsageReport\n");
      }
      else if (procedureCode.value == 42) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-SgNBActivityNotification\n");
      }
      else if (procedureCode.value == 44) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-dataForwardingAddressIndication\n");
      }
      else if (procedureCode.value == 45) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-gNBStatusIndication\n");
      }
      else if (procedureCode.value == 48) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-endcConfigurationTransfer\n");
      }
      else if (procedureCode.value == 46) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-deactivateTrace\n");
      }
      else if (procedureCode.value == 47) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-traceStart\n");
      }

      if (criticality != null) {
         criticality.print (_sb, "criticality", _level+1);
      }
      if (value != null) {
         String tmpName = value.getAsn1TypeName();
         if (tmpName != null && tmpName != "")  {
            tmpName = "value" + " (" + tmpName + ")";
         }
         else  {
            tmpName = "value";
         }
         value.print (_sb, tmpName, _level+1);
      }
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
