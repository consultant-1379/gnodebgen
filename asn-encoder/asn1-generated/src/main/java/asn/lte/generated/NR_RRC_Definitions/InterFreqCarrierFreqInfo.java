/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class InterFreqCarrierFreqInfo extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "InterFreqCarrierFreqInfo";
   }

   public ARFCN_ValueNR dl_CarrierFreq;
   public MultiFrequencyBandListNR_SIB frequencyBandList;  // optional
   public MultiFrequencyBandListNR_SIB frequencyBandListSUL;  // optional
   public Asn1Integer nrofSS_BlocksToAverage;  // optional
   public ThresholdNR absThreshSS_BlocksConsolidation;  // optional
   public SSB_MTC smtc;  // optional
   public SubcarrierSpacing ssbSubcarrierSpacing = null;
   public SSB_ToMeasure ssb_ToMeasure;  // optional
   public Asn1Boolean deriveSSB_IndexFromCell;
   public SS_RSSI_Measurement ss_RSSI_Measurement;  // optional
   public Q_RxLevMin q_RxLevMin;
   public Q_RxLevMin q_RxLevMinSUL;  // optional
   public Q_QualMin q_QualMin;  // optional
   public P_Max p_Max;  // optional
   public T_Reselection t_ReselectionNR;
   public SpeedStateScaleFactors t_ReselectionNR_SF;  // optional
   public ReselectionThreshold threshX_HighP;
   public ReselectionThreshold threshX_LowP;
   public InterFreqCarrierFreqInfo_threshX_Q threshX_Q;  // optional
   public CellReselectionPriority cellReselectionPriority;  // optional
   public CellReselectionSubPriority cellReselectionSubPriority = null;  // optional
   public Q_OffsetRange q_OffsetFreq = null;  // default = Q_OffsetRange.dB0()
   public InterFreqNeighCellList interFreqNeighCellList;  // optional
   public InterFreqBlackCellList interFreqBlackCellList;  // optional
   public Asn1OpenExt extElem1;

   public InterFreqCarrierFreqInfo () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public InterFreqCarrierFreqInfo (
      ARFCN_ValueNR dl_CarrierFreq_,
      MultiFrequencyBandListNR_SIB frequencyBandList_,
      MultiFrequencyBandListNR_SIB frequencyBandListSUL_,
      Asn1Integer nrofSS_BlocksToAverage_,
      ThresholdNR absThreshSS_BlocksConsolidation_,
      SSB_MTC smtc_,
      SubcarrierSpacing ssbSubcarrierSpacing_,
      SSB_ToMeasure ssb_ToMeasure_,
      Asn1Boolean deriveSSB_IndexFromCell_,
      SS_RSSI_Measurement ss_RSSI_Measurement_,
      Q_RxLevMin q_RxLevMin_,
      Q_RxLevMin q_RxLevMinSUL_,
      Q_QualMin q_QualMin_,
      P_Max p_Max_,
      T_Reselection t_ReselectionNR_,
      SpeedStateScaleFactors t_ReselectionNR_SF_,
      ReselectionThreshold threshX_HighP_,
      ReselectionThreshold threshX_LowP_,
      InterFreqCarrierFreqInfo_threshX_Q threshX_Q_,
      CellReselectionPriority cellReselectionPriority_,
      CellReselectionSubPriority cellReselectionSubPriority_,
      Q_OffsetRange q_OffsetFreq_,
      InterFreqNeighCellList interFreqNeighCellList_,
      InterFreqBlackCellList interFreqBlackCellList_
   ) {
      super();
      dl_CarrierFreq = dl_CarrierFreq_;
      frequencyBandList = frequencyBandList_;
      frequencyBandListSUL = frequencyBandListSUL_;
      nrofSS_BlocksToAverage = nrofSS_BlocksToAverage_;
      absThreshSS_BlocksConsolidation = absThreshSS_BlocksConsolidation_;
      smtc = smtc_;
      ssbSubcarrierSpacing = ssbSubcarrierSpacing_;
      ssb_ToMeasure = ssb_ToMeasure_;
      deriveSSB_IndexFromCell = deriveSSB_IndexFromCell_;
      ss_RSSI_Measurement = ss_RSSI_Measurement_;
      q_RxLevMin = q_RxLevMin_;
      q_RxLevMinSUL = q_RxLevMinSUL_;
      q_QualMin = q_QualMin_;
      p_Max = p_Max_;
      t_ReselectionNR = t_ReselectionNR_;
      t_ReselectionNR_SF = t_ReselectionNR_SF_;
      threshX_HighP = threshX_HighP_;
      threshX_LowP = threshX_LowP_;
      threshX_Q = threshX_Q_;
      cellReselectionPriority = cellReselectionPriority_;
      cellReselectionSubPriority = cellReselectionSubPriority_;
      q_OffsetFreq = q_OffsetFreq_;
      interFreqNeighCellList = interFreqNeighCellList_;
      interFreqBlackCellList = interFreqBlackCellList_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public InterFreqCarrierFreqInfo (
      ARFCN_ValueNR dl_CarrierFreq_,
      SubcarrierSpacing ssbSubcarrierSpacing_,
      Asn1Boolean deriveSSB_IndexFromCell_,
      Q_RxLevMin q_RxLevMin_,
      T_Reselection t_ReselectionNR_,
      ReselectionThreshold threshX_HighP_,
      ReselectionThreshold threshX_LowP_
   ) {
      super();
      dl_CarrierFreq = dl_CarrierFreq_;
      ssbSubcarrierSpacing = ssbSubcarrierSpacing_;
      deriveSSB_IndexFromCell = deriveSSB_IndexFromCell_;
      q_RxLevMin = q_RxLevMin_;
      t_ReselectionNR = t_ReselectionNR_;
      threshX_HighP = threshX_HighP_;
      threshX_LowP = threshX_LowP_;
      q_OffsetFreq = Q_OffsetRange.dB0();
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public InterFreqCarrierFreqInfo (long dl_CarrierFreq_,
      MultiFrequencyBandListNR_SIB frequencyBandList_,
      MultiFrequencyBandListNR_SIB frequencyBandListSUL_,
      long nrofSS_BlocksToAverage_,
      ThresholdNR absThreshSS_BlocksConsolidation_,
      SSB_MTC smtc_,
      SubcarrierSpacing ssbSubcarrierSpacing_,
      SSB_ToMeasure ssb_ToMeasure_,
      boolean deriveSSB_IndexFromCell_,
      SS_RSSI_Measurement ss_RSSI_Measurement_,
      long q_RxLevMin_,
      long q_RxLevMinSUL_,
      long q_QualMin_,
      long p_Max_,
      long t_ReselectionNR_,
      SpeedStateScaleFactors t_ReselectionNR_SF_,
      long threshX_HighP_,
      long threshX_LowP_,
      InterFreqCarrierFreqInfo_threshX_Q threshX_Q_,
      long cellReselectionPriority_,
      CellReselectionSubPriority cellReselectionSubPriority_,
      Q_OffsetRange q_OffsetFreq_,
      InterFreqNeighCellList interFreqNeighCellList_,
      InterFreqBlackCellList interFreqBlackCellList_
   ) {
      super();
      dl_CarrierFreq = new ARFCN_ValueNR (dl_CarrierFreq_);
      frequencyBandList = frequencyBandList_;
      frequencyBandListSUL = frequencyBandListSUL_;
      nrofSS_BlocksToAverage = new Asn1Integer (nrofSS_BlocksToAverage_);
      absThreshSS_BlocksConsolidation = absThreshSS_BlocksConsolidation_;
      smtc = smtc_;
      ssbSubcarrierSpacing = ssbSubcarrierSpacing_;
      ssb_ToMeasure = ssb_ToMeasure_;
      deriveSSB_IndexFromCell = new Asn1Boolean (deriveSSB_IndexFromCell_);
      ss_RSSI_Measurement = ss_RSSI_Measurement_;
      q_RxLevMin = new Q_RxLevMin (q_RxLevMin_);
      q_RxLevMinSUL = new Q_RxLevMin (q_RxLevMinSUL_);
      q_QualMin = new Q_QualMin (q_QualMin_);
      p_Max = new P_Max (p_Max_);
      t_ReselectionNR = new T_Reselection (t_ReselectionNR_);
      t_ReselectionNR_SF = t_ReselectionNR_SF_;
      threshX_HighP = new ReselectionThreshold (threshX_HighP_);
      threshX_LowP = new ReselectionThreshold (threshX_LowP_);
      threshX_Q = threshX_Q_;
      cellReselectionPriority = new CellReselectionPriority (cellReselectionPriority_);
      cellReselectionSubPriority = cellReselectionSubPriority_;
      q_OffsetFreq = q_OffsetFreq_;
      interFreqNeighCellList = interFreqNeighCellList_;
      interFreqBlackCellList = interFreqBlackCellList_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public InterFreqCarrierFreqInfo (
      long dl_CarrierFreq_,
      SubcarrierSpacing ssbSubcarrierSpacing_,
      boolean deriveSSB_IndexFromCell_,
      long q_RxLevMin_,
      long t_ReselectionNR_,
      long threshX_HighP_,
      long threshX_LowP_
   ) {
      super();
      dl_CarrierFreq = new ARFCN_ValueNR (dl_CarrierFreq_);
      ssbSubcarrierSpacing = ssbSubcarrierSpacing_;
      deriveSSB_IndexFromCell = new Asn1Boolean (deriveSSB_IndexFromCell_);
      q_RxLevMin = new Q_RxLevMin (q_RxLevMin_);
      t_ReselectionNR = new T_Reselection (t_ReselectionNR_);
      threshX_HighP = new ReselectionThreshold (threshX_HighP_);
      threshX_LowP = new ReselectionThreshold (threshX_LowP_);
      q_OffsetFreq = Q_OffsetRange.dB0();
   }

   public void init () {
      dl_CarrierFreq = null;
      frequencyBandList = null;
      frequencyBandListSUL = null;
      nrofSS_BlocksToAverage = null;
      absThreshSS_BlocksConsolidation = null;
      smtc = null;
      ssbSubcarrierSpacing = null;
      ssb_ToMeasure = null;
      deriveSSB_IndexFromCell = null;
      ss_RSSI_Measurement = null;
      q_RxLevMin = null;
      q_RxLevMinSUL = null;
      q_QualMin = null;
      p_Max = null;
      t_ReselectionNR = null;
      t_ReselectionNR_SF = null;
      threshX_HighP = null;
      threshX_LowP = null;
      threshX_Q = null;
      cellReselectionPriority = null;
      cellReselectionSubPriority = null;
      q_OffsetFreq = Q_OffsetRange.dB0();
      interFreqNeighCellList = null;
      interFreqBlackCellList = null;
      extElem1 = null;
   }

   public int getElementCount() { return 25; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return dl_CarrierFreq;
         case 1: return frequencyBandList;
         case 2: return frequencyBandListSUL;
         case 3: return nrofSS_BlocksToAverage;
         case 4: return absThreshSS_BlocksConsolidation;
         case 5: return smtc;
         case 6: return ssbSubcarrierSpacing;
         case 7: return ssb_ToMeasure;
         case 8: return deriveSSB_IndexFromCell;
         case 9: return ss_RSSI_Measurement;
         case 10: return q_RxLevMin;
         case 11: return q_RxLevMinSUL;
         case 12: return q_QualMin;
         case 13: return p_Max;
         case 14: return t_ReselectionNR;
         case 15: return t_ReselectionNR_SF;
         case 16: return threshX_HighP;
         case 17: return threshX_LowP;
         case 18: return threshX_Q;
         case 19: return cellReselectionPriority;
         case 20: return cellReselectionSubPriority;
         case 21: return q_OffsetFreq;
         case 22: return interFreqNeighCellList;
         case 23: return interFreqBlackCellList;
         case 24: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "dl-CarrierFreq";
         case 1: return "frequencyBandList";
         case 2: return "frequencyBandListSUL";
         case 3: return "nrofSS-BlocksToAverage";
         case 4: return "absThreshSS-BlocksConsolidation";
         case 5: return "smtc";
         case 6: return "ssbSubcarrierSpacing";
         case 7: return "ssb-ToMeasure";
         case 8: return "deriveSSB-IndexFromCell";
         case 9: return "ss-RSSI-Measurement";
         case 10: return "q-RxLevMin";
         case 11: return "q-RxLevMinSUL";
         case 12: return "q-QualMin";
         case 13: return "p-Max";
         case 14: return "t-ReselectionNR";
         case 15: return "t-ReselectionNR-SF";
         case 16: return "threshX-HighP";
         case 17: return "threshX-LowP";
         case 18: return "threshX-Q";
         case 19: return "cellReselectionPriority";
         case 20: return "cellReselectionSubPriority";
         case 21: return "q-OffsetFreq";
         case 22: return "interFreqNeighCellList";
         case 23: return "interFreqBlackCellList";
         case 24: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean frequencyBandListPresent = buffer.decodeBit ("frequencyBandListPresent");
      boolean frequencyBandListSULPresent = buffer.decodeBit ("frequencyBandListSULPresent");
      boolean nrofSS_BlocksToAveragePresent = buffer.decodeBit ("nrofSS_BlocksToAveragePresent");
      boolean absThreshSS_BlocksConsolidationPresent = buffer.decodeBit ("absThreshSS_BlocksConsolidationPresent");
      boolean smtcPresent = buffer.decodeBit ("smtcPresent");
      boolean ssb_ToMeasurePresent = buffer.decodeBit ("ssb_ToMeasurePresent");
      boolean ss_RSSI_MeasurementPresent = buffer.decodeBit ("ss_RSSI_MeasurementPresent");
      boolean q_RxLevMinSULPresent = buffer.decodeBit ("q_RxLevMinSULPresent");
      boolean q_QualMinPresent = buffer.decodeBit ("q_QualMinPresent");
      boolean p_MaxPresent = buffer.decodeBit ("p_MaxPresent");
      boolean t_ReselectionNR_SFPresent = buffer.decodeBit ("t_ReselectionNR_SFPresent");
      boolean threshX_QPresent = buffer.decodeBit ("threshX_QPresent");
      boolean cellReselectionPriorityPresent = buffer.decodeBit ("cellReselectionPriorityPresent");
      boolean cellReselectionSubPriorityPresent = buffer.decodeBit ("cellReselectionSubPriorityPresent");
      boolean q_OffsetFreqPresent = buffer.decodeBit ("q_OffsetFreqPresent");
      boolean interFreqNeighCellListPresent = buffer.decodeBit ("interFreqNeighCellListPresent");
      boolean interFreqBlackCellListPresent = buffer.decodeBit ("interFreqBlackCellListPresent");

      // decode dl_CarrierFreq

      buffer.getContext().eventDispatcher.startElement("dl_CarrierFreq", -1);

      dl_CarrierFreq = new ARFCN_ValueNR();
      dl_CarrierFreq.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("dl_CarrierFreq", -1);

      // decode frequencyBandList

      if (frequencyBandListPresent) {
         buffer.getContext().eventDispatcher.startElement("frequencyBandList", -1);

         frequencyBandList = new MultiFrequencyBandListNR_SIB();
         frequencyBandList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("frequencyBandList", -1);
      }
      else {
         frequencyBandList = null;
      }

      // decode frequencyBandListSUL

      if (frequencyBandListSULPresent) {
         buffer.getContext().eventDispatcher.startElement("frequencyBandListSUL", -1);

         frequencyBandListSUL = new MultiFrequencyBandListNR_SIB();
         frequencyBandListSUL.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("frequencyBandListSUL", -1);
      }
      else {
         frequencyBandListSUL = null;
      }

      // decode nrofSS_BlocksToAverage

      if (nrofSS_BlocksToAveragePresent) {
         buffer.getContext().eventDispatcher.startElement("nrofSS_BlocksToAverage", -1);

         nrofSS_BlocksToAverage = new Asn1Integer();
         nrofSS_BlocksToAverage.decode (buffer, 2, 16);

         buffer.invokeCharacters(nrofSS_BlocksToAverage.toString());
         buffer.getContext().eventDispatcher.endElement("nrofSS_BlocksToAverage", -1);
      }
      else {
         nrofSS_BlocksToAverage = null;
      }

      // decode absThreshSS_BlocksConsolidation

      if (absThreshSS_BlocksConsolidationPresent) {
         buffer.getContext().eventDispatcher.startElement("absThreshSS_BlocksConsolidation", -1);

         absThreshSS_BlocksConsolidation = new ThresholdNR();
         absThreshSS_BlocksConsolidation.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("absThreshSS_BlocksConsolidation", -1);
      }
      else {
         absThreshSS_BlocksConsolidation = null;
      }

      // decode smtc

      if (smtcPresent) {
         buffer.getContext().eventDispatcher.startElement("smtc", -1);

         smtc = new SSB_MTC();
         smtc.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("smtc", -1);
      }
      else {
         smtc = null;
      }

      // decode ssbSubcarrierSpacing

      buffer.getContext().eventDispatcher.startElement("ssbSubcarrierSpacing", -1);

      {
         int tval = SubcarrierSpacing.decodeEnumValue (buffer);
         ssbSubcarrierSpacing = SubcarrierSpacing.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("ssbSubcarrierSpacing", -1);

      // decode ssb_ToMeasure

      if (ssb_ToMeasurePresent) {
         buffer.getContext().eventDispatcher.startElement("ssb_ToMeasure", -1);

         ssb_ToMeasure = new SSB_ToMeasure();
         ssb_ToMeasure.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ssb_ToMeasure", -1);
      }
      else {
         ssb_ToMeasure = null;
      }

      // decode deriveSSB_IndexFromCell

      buffer.getContext().eventDispatcher.startElement("deriveSSB_IndexFromCell", -1);

      deriveSSB_IndexFromCell = new Asn1Boolean();
      deriveSSB_IndexFromCell.decode (buffer);

      buffer.invokeCharacters(deriveSSB_IndexFromCell.toString());
      buffer.getContext().eventDispatcher.endElement("deriveSSB_IndexFromCell", -1);

      // decode ss_RSSI_Measurement

      if (ss_RSSI_MeasurementPresent) {
         buffer.getContext().eventDispatcher.startElement("ss_RSSI_Measurement", -1);

         ss_RSSI_Measurement = new SS_RSSI_Measurement();
         ss_RSSI_Measurement.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ss_RSSI_Measurement", -1);
      }
      else {
         ss_RSSI_Measurement = null;
      }

      // decode q_RxLevMin

      buffer.getContext().eventDispatcher.startElement("q_RxLevMin", -1);

      q_RxLevMin = new Q_RxLevMin();
      q_RxLevMin.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("q_RxLevMin", -1);

      // decode q_RxLevMinSUL

      if (q_RxLevMinSULPresent) {
         buffer.getContext().eventDispatcher.startElement("q_RxLevMinSUL", -1);

         q_RxLevMinSUL = new Q_RxLevMin();
         q_RxLevMinSUL.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("q_RxLevMinSUL", -1);
      }
      else {
         q_RxLevMinSUL = null;
      }

      // decode q_QualMin

      if (q_QualMinPresent) {
         buffer.getContext().eventDispatcher.startElement("q_QualMin", -1);

         q_QualMin = new Q_QualMin();
         q_QualMin.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("q_QualMin", -1);
      }
      else {
         q_QualMin = null;
      }

      // decode p_Max

      if (p_MaxPresent) {
         buffer.getContext().eventDispatcher.startElement("p_Max", -1);

         p_Max = new P_Max();
         p_Max.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("p_Max", -1);
      }
      else {
         p_Max = null;
      }

      // decode t_ReselectionNR

      buffer.getContext().eventDispatcher.startElement("t_ReselectionNR", -1);

      t_ReselectionNR = new T_Reselection();
      t_ReselectionNR.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("t_ReselectionNR", -1);

      // decode t_ReselectionNR_SF

      if (t_ReselectionNR_SFPresent) {
         buffer.getContext().eventDispatcher.startElement("t_ReselectionNR_SF", -1);

         t_ReselectionNR_SF = new SpeedStateScaleFactors();
         t_ReselectionNR_SF.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("t_ReselectionNR_SF", -1);
      }
      else {
         t_ReselectionNR_SF = null;
      }

      // decode threshX_HighP

      buffer.getContext().eventDispatcher.startElement("threshX_HighP", -1);

      threshX_HighP = new ReselectionThreshold();
      threshX_HighP.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("threshX_HighP", -1);

      // decode threshX_LowP

      buffer.getContext().eventDispatcher.startElement("threshX_LowP", -1);

      threshX_LowP = new ReselectionThreshold();
      threshX_LowP.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("threshX_LowP", -1);

      // decode threshX_Q

      if (threshX_QPresent) {
         buffer.getContext().eventDispatcher.startElement("threshX_Q", -1);

         threshX_Q = new InterFreqCarrierFreqInfo_threshX_Q();
         threshX_Q.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("threshX_Q", -1);
      }
      else {
         threshX_Q = null;
      }

      // decode cellReselectionPriority

      if (cellReselectionPriorityPresent) {
         buffer.getContext().eventDispatcher.startElement("cellReselectionPriority", -1);

         cellReselectionPriority = new CellReselectionPriority();
         cellReselectionPriority.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("cellReselectionPriority", -1);
      }
      else {
         cellReselectionPriority = null;
      }

      // decode cellReselectionSubPriority

      if (cellReselectionSubPriorityPresent) {
         buffer.getContext().eventDispatcher.startElement("cellReselectionSubPriority", -1);

         int tval = CellReselectionSubPriority.decodeEnumValue (buffer);
         cellReselectionSubPriority = CellReselectionSubPriority.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("cellReselectionSubPriority", -1);
      }
      else {
         cellReselectionSubPriority = null;
      }

      // decode q_OffsetFreq

      if (q_OffsetFreqPresent) {
         buffer.getContext().eventDispatcher.startElement("q_OffsetFreq", -1);

         int tval = Q_OffsetRange.decodeEnumValue (buffer);
         q_OffsetFreq = Q_OffsetRange.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("q_OffsetFreq", -1);
      }
      else {
         q_OffsetFreq = Q_OffsetRange.dB0();
      }

      // decode interFreqNeighCellList

      if (interFreqNeighCellListPresent) {
         buffer.getContext().eventDispatcher.startElement("interFreqNeighCellList", -1);

         interFreqNeighCellList = new InterFreqNeighCellList();
         interFreqNeighCellList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("interFreqNeighCellList", -1);
      }
      else {
         interFreqNeighCellList = null;
      }

      // decode interFreqBlackCellList

      if (interFreqBlackCellListPresent) {
         buffer.getContext().eventDispatcher.startElement("interFreqBlackCellList", -1);

         interFreqBlackCellList = new InterFreqBlackCellList();
         interFreqBlackCellList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("interFreqBlackCellList", -1);
      }
      else {
         interFreqBlackCellList = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (dl_CarrierFreq != null) dl_CarrierFreq.print (_sb, "dl_CarrierFreq", _level+1);
      if (frequencyBandList != null) frequencyBandList.print (_sb, "frequencyBandList", _level+1);
      if (frequencyBandListSUL != null) frequencyBandListSUL.print (_sb, "frequencyBandListSUL", _level+1);
      if (nrofSS_BlocksToAverage != null) nrofSS_BlocksToAverage.print (_sb, "nrofSS_BlocksToAverage", _level+1);
      if (absThreshSS_BlocksConsolidation != null) absThreshSS_BlocksConsolidation.print (_sb, "absThreshSS_BlocksConsolidation", _level+1);
      if (smtc != null) smtc.print (_sb, "smtc", _level+1);
      if (ssbSubcarrierSpacing != null) ssbSubcarrierSpacing.print (_sb, "ssbSubcarrierSpacing", _level+1);
      if (ssb_ToMeasure != null) ssb_ToMeasure.print (_sb, "ssb_ToMeasure", _level+1);
      if (deriveSSB_IndexFromCell != null) deriveSSB_IndexFromCell.print (_sb, "deriveSSB_IndexFromCell", _level+1);
      if (ss_RSSI_Measurement != null) ss_RSSI_Measurement.print (_sb, "ss_RSSI_Measurement", _level+1);
      if (q_RxLevMin != null) q_RxLevMin.print (_sb, "q_RxLevMin", _level+1);
      if (q_RxLevMinSUL != null) q_RxLevMinSUL.print (_sb, "q_RxLevMinSUL", _level+1);
      if (q_QualMin != null) q_QualMin.print (_sb, "q_QualMin", _level+1);
      if (p_Max != null) p_Max.print (_sb, "p_Max", _level+1);
      if (t_ReselectionNR != null) t_ReselectionNR.print (_sb, "t_ReselectionNR", _level+1);
      if (t_ReselectionNR_SF != null) t_ReselectionNR_SF.print (_sb, "t_ReselectionNR_SF", _level+1);
      if (threshX_HighP != null) threshX_HighP.print (_sb, "threshX_HighP", _level+1);
      if (threshX_LowP != null) threshX_LowP.print (_sb, "threshX_LowP", _level+1);
      if (threshX_Q != null) threshX_Q.print (_sb, "threshX_Q", _level+1);
      if (cellReselectionPriority != null) cellReselectionPriority.print (_sb, "cellReselectionPriority", _level+1);
      if (cellReselectionSubPriority != null) cellReselectionSubPriority.print (_sb, "cellReselectionSubPriority", _level+1);
      if (q_OffsetFreq != null) q_OffsetFreq.print (_sb, "q_OffsetFreq", _level+1);
      if (interFreqNeighCellList != null) interFreqNeighCellList.print (_sb, "interFreqNeighCellList", _level+1);
      if (interFreqBlackCellList != null) interFreqBlackCellList.print (_sb, "interFreqBlackCellList", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
