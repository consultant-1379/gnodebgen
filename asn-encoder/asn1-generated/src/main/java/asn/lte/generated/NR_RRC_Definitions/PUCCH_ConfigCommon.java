/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class PUCCH_ConfigCommon extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "PUCCH-ConfigCommon";
   }

   public Asn1Integer pucch_ResourceCommon;  // optional
   public PUCCH_ConfigCommon_pucch_GroupHopping pucch_GroupHopping = null;
   public Asn1Integer hoppingId;  // optional
   public Asn1Integer p0_nominal;  // optional
   public Asn1OpenExt extElem1;

   public PUCCH_ConfigCommon () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public PUCCH_ConfigCommon (
      Asn1Integer pucch_ResourceCommon_,
      PUCCH_ConfigCommon_pucch_GroupHopping pucch_GroupHopping_,
      Asn1Integer hoppingId_,
      Asn1Integer p0_nominal_
   ) {
      super();
      pucch_ResourceCommon = pucch_ResourceCommon_;
      pucch_GroupHopping = pucch_GroupHopping_;
      hoppingId = hoppingId_;
      p0_nominal = p0_nominal_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public PUCCH_ConfigCommon (
      PUCCH_ConfigCommon_pucch_GroupHopping pucch_GroupHopping_
   ) {
      super();
      pucch_GroupHopping = pucch_GroupHopping_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public PUCCH_ConfigCommon (long pucch_ResourceCommon_,
      PUCCH_ConfigCommon_pucch_GroupHopping pucch_GroupHopping_,
      long hoppingId_,
      long p0_nominal_
   ) {
      super();
      pucch_ResourceCommon = new Asn1Integer (pucch_ResourceCommon_);
      pucch_GroupHopping = pucch_GroupHopping_;
      hoppingId = new Asn1Integer (hoppingId_);
      p0_nominal = new Asn1Integer (p0_nominal_);
   }

   public void init () {
      pucch_ResourceCommon = null;
      pucch_GroupHopping = null;
      hoppingId = null;
      p0_nominal = null;
      extElem1 = null;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return pucch_ResourceCommon;
         case 1: return pucch_GroupHopping;
         case 2: return hoppingId;
         case 3: return p0_nominal;
         case 4: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "pucch-ResourceCommon";
         case 1: return "pucch-GroupHopping";
         case 2: return "hoppingId";
         case 3: return "p0-nominal";
         case 4: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean pucch_ResourceCommonPresent = buffer.decodeBit ("pucch_ResourceCommonPresent");
      boolean hoppingIdPresent = buffer.decodeBit ("hoppingIdPresent");
      boolean p0_nominalPresent = buffer.decodeBit ("p0_nominalPresent");

      // decode pucch_ResourceCommon

      if (pucch_ResourceCommonPresent) {
         buffer.getContext().eventDispatcher.startElement("pucch_ResourceCommon", -1);

         pucch_ResourceCommon = new Asn1Integer();
         pucch_ResourceCommon.decode (buffer, 0, 15);

         buffer.invokeCharacters(pucch_ResourceCommon.toString());
         buffer.getContext().eventDispatcher.endElement("pucch_ResourceCommon", -1);
      }
      else {
         pucch_ResourceCommon = null;
      }

      // decode pucch_GroupHopping

      buffer.getContext().eventDispatcher.startElement("pucch_GroupHopping", -1);

      {
         int tval = PUCCH_ConfigCommon_pucch_GroupHopping.decodeEnumValue (buffer);
         pucch_GroupHopping = PUCCH_ConfigCommon_pucch_GroupHopping.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("pucch_GroupHopping", -1);

      // decode hoppingId

      if (hoppingIdPresent) {
         buffer.getContext().eventDispatcher.startElement("hoppingId", -1);

         hoppingId = new Asn1Integer();
         hoppingId.decode (buffer, 0, 1023);

         buffer.invokeCharacters(hoppingId.toString());
         buffer.getContext().eventDispatcher.endElement("hoppingId", -1);
      }
      else {
         hoppingId = null;
      }

      // decode p0_nominal

      if (p0_nominalPresent) {
         buffer.getContext().eventDispatcher.startElement("p0_nominal", -1);

         p0_nominal = new Asn1Integer();
         p0_nominal.decode (buffer, -202, 24);

         buffer.invokeCharacters(p0_nominal.toString());
         buffer.getContext().eventDispatcher.endElement("p0_nominal", -1);
      }
      else {
         p0_nominal = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (pucch_ResourceCommon != null) pucch_ResourceCommon.print (_sb, "pucch_ResourceCommon", _level+1);
      if (pucch_GroupHopping != null) pucch_GroupHopping.print (_sb, "pucch_GroupHopping", _level+1);
      if (hoppingId != null) hoppingId.print (_sb, "hoppingId", _level+1);
      if (p0_nominal != null) p0_nominal.print (_sb, "p0_nominal", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
