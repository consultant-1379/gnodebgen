/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MAC_ParametersXDD_Diff extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "MAC-ParametersXDD-Diff";
   }

   public MAC_ParametersXDD_Diff_skipUplinkTxDynamic skipUplinkTxDynamic = null;  // optional
   public MAC_ParametersXDD_Diff_logicalChannelSR_DelayTimer logicalChannelSR_DelayTimer = null;  // optional
   public MAC_ParametersXDD_Diff_longDRX_Cycle longDRX_Cycle = null;  // optional
   public MAC_ParametersXDD_Diff_shortDRX_Cycle shortDRX_Cycle = null;  // optional
   public MAC_ParametersXDD_Diff_multipleSR_Configurations multipleSR_Configurations = null;  // optional
   public MAC_ParametersXDD_Diff_multipleConfiguredGrants multipleConfiguredGrants = null;  // optional
   public boolean mV2ExtPresent;
   public MAC_ParametersXDD_Diff_secondaryDRX_Group_r16 secondaryDRX_Group_r16 = null;  // optional
   public Asn1OpenExt extElem1;

   public MAC_ParametersXDD_Diff () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MAC_ParametersXDD_Diff (
      MAC_ParametersXDD_Diff_skipUplinkTxDynamic skipUplinkTxDynamic_,
      MAC_ParametersXDD_Diff_logicalChannelSR_DelayTimer logicalChannelSR_DelayTimer_,
      MAC_ParametersXDD_Diff_longDRX_Cycle longDRX_Cycle_,
      MAC_ParametersXDD_Diff_shortDRX_Cycle shortDRX_Cycle_,
      MAC_ParametersXDD_Diff_multipleSR_Configurations multipleSR_Configurations_,
      MAC_ParametersXDD_Diff_multipleConfiguredGrants multipleConfiguredGrants_,
      MAC_ParametersXDD_Diff_secondaryDRX_Group_r16 secondaryDRX_Group_r16_
   ) {
      super();
      skipUplinkTxDynamic = skipUplinkTxDynamic_;
      logicalChannelSR_DelayTimer = logicalChannelSR_DelayTimer_;
      longDRX_Cycle = longDRX_Cycle_;
      shortDRX_Cycle = shortDRX_Cycle_;
      multipleSR_Configurations = multipleSR_Configurations_;
      multipleConfiguredGrants = multipleConfiguredGrants_;
      secondaryDRX_Group_r16 = secondaryDRX_Group_r16_;
   }

   public void init () {
      skipUplinkTxDynamic = null;
      logicalChannelSR_DelayTimer = null;
      longDRX_Cycle = null;
      shortDRX_Cycle = null;
      multipleSR_Configurations = null;
      multipleConfiguredGrants = null;
      secondaryDRX_Group_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 8; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return skipUplinkTxDynamic;
         case 1: return logicalChannelSR_DelayTimer;
         case 2: return longDRX_Cycle;
         case 3: return shortDRX_Cycle;
         case 4: return multipleSR_Configurations;
         case 5: return multipleConfiguredGrants;
         case 6: return secondaryDRX_Group_r16;
         case 7: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "skipUplinkTxDynamic";
         case 1: return "logicalChannelSR-DelayTimer";
         case 2: return "longDRX-Cycle";
         case 3: return "shortDRX-Cycle";
         case 4: return "multipleSR-Configurations";
         case 5: return "multipleConfiguredGrants";
         case 6: return "secondaryDRX-Group-r16";
         case 7: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean skipUplinkTxDynamicPresent = buffer.decodeBit ("skipUplinkTxDynamicPresent");
      boolean logicalChannelSR_DelayTimerPresent = buffer.decodeBit ("logicalChannelSR_DelayTimerPresent");
      boolean longDRX_CyclePresent = buffer.decodeBit ("longDRX_CyclePresent");
      boolean shortDRX_CyclePresent = buffer.decodeBit ("shortDRX_CyclePresent");
      boolean multipleSR_ConfigurationsPresent = buffer.decodeBit ("multipleSR_ConfigurationsPresent");
      boolean multipleConfiguredGrantsPresent = buffer.decodeBit ("multipleConfiguredGrantsPresent");

      // decode skipUplinkTxDynamic

      if (skipUplinkTxDynamicPresent) {
         buffer.getContext().eventDispatcher.startElement("skipUplinkTxDynamic", -1);

         int tval = MAC_ParametersXDD_Diff_skipUplinkTxDynamic.decodeEnumValue (buffer);
         skipUplinkTxDynamic = MAC_ParametersXDD_Diff_skipUplinkTxDynamic.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("skipUplinkTxDynamic", -1);
      }
      else {
         skipUplinkTxDynamic = null;
      }

      // decode logicalChannelSR_DelayTimer

      if (logicalChannelSR_DelayTimerPresent) {
         buffer.getContext().eventDispatcher.startElement("logicalChannelSR_DelayTimer", -1);

         int tval = MAC_ParametersXDD_Diff_logicalChannelSR_DelayTimer.decodeEnumValue (buffer);
         logicalChannelSR_DelayTimer = MAC_ParametersXDD_Diff_logicalChannelSR_DelayTimer.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("logicalChannelSR_DelayTimer", -1);
      }
      else {
         logicalChannelSR_DelayTimer = null;
      }

      // decode longDRX_Cycle

      if (longDRX_CyclePresent) {
         buffer.getContext().eventDispatcher.startElement("longDRX_Cycle", -1);

         int tval = MAC_ParametersXDD_Diff_longDRX_Cycle.decodeEnumValue (buffer);
         longDRX_Cycle = MAC_ParametersXDD_Diff_longDRX_Cycle.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("longDRX_Cycle", -1);
      }
      else {
         longDRX_Cycle = null;
      }

      // decode shortDRX_Cycle

      if (shortDRX_CyclePresent) {
         buffer.getContext().eventDispatcher.startElement("shortDRX_Cycle", -1);

         int tval = MAC_ParametersXDD_Diff_shortDRX_Cycle.decodeEnumValue (buffer);
         shortDRX_Cycle = MAC_ParametersXDD_Diff_shortDRX_Cycle.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("shortDRX_Cycle", -1);
      }
      else {
         shortDRX_Cycle = null;
      }

      // decode multipleSR_Configurations

      if (multipleSR_ConfigurationsPresent) {
         buffer.getContext().eventDispatcher.startElement("multipleSR_Configurations", -1);

         int tval = MAC_ParametersXDD_Diff_multipleSR_Configurations.decodeEnumValue (buffer);
         multipleSR_Configurations = MAC_ParametersXDD_Diff_multipleSR_Configurations.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("multipleSR_Configurations", -1);
      }
      else {
         multipleSR_Configurations = null;
      }

      // decode multipleConfiguredGrants

      if (multipleConfiguredGrantsPresent) {
         buffer.getContext().eventDispatcher.startElement("multipleConfiguredGrants", -1);

         int tval = MAC_ParametersXDD_Diff_multipleConfiguredGrants.decodeEnumValue (buffer);
         multipleConfiguredGrants = MAC_ParametersXDD_Diff_multipleConfiguredGrants.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("multipleConfiguredGrants", -1);
      }
      else {
         multipleConfiguredGrants = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean secondaryDRX_Group_r16Present = buffer.decodeBit ("secondaryDRX_Group_r16Present");

            // decode secondaryDRX_Group_r16

            if (secondaryDRX_Group_r16Present) {
               buffer.getContext().eventDispatcher.startElement("secondaryDRX_Group_r16", -1);

               int tval = MAC_ParametersXDD_Diff_secondaryDRX_Group_r16.decodeEnumValue (buffer);
               secondaryDRX_Group_r16 = MAC_ParametersXDD_Diff_secondaryDRX_Group_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("secondaryDRX_Group_r16", -1);
            }
            else {
               secondaryDRX_Group_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (skipUplinkTxDynamic != null) skipUplinkTxDynamic.print (_sb, "skipUplinkTxDynamic", _level+1);
      if (logicalChannelSR_DelayTimer != null) logicalChannelSR_DelayTimer.print (_sb, "logicalChannelSR_DelayTimer", _level+1);
      if (longDRX_Cycle != null) longDRX_Cycle.print (_sb, "longDRX_Cycle", _level+1);
      if (shortDRX_Cycle != null) shortDRX_Cycle.print (_sb, "shortDRX_Cycle", _level+1);
      if (multipleSR_Configurations != null) multipleSR_Configurations.print (_sb, "multipleSR_Configurations", _level+1);
      if (multipleConfiguredGrants != null) multipleConfiguredGrants.print (_sb, "multipleConfiguredGrants", _level+1);
      if (secondaryDRX_Group_r16 != null) secondaryDRX_Group_r16.print (_sb, "secondaryDRX_Group_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
