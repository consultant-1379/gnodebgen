/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SL_SyncConfigNFreq_r13_txParameters_r13 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public SL_TxParameters_r12 syncTxParameters_r13;
   public RSRP_RangeSL_r12 syncTxThreshIC_r13;
   public Asn1BitString syncInfoReserved_r13;  // optional
   public SL_SyncConfigNFreq_r13_txParameters_r13_syncTxPeriodic_r13 syncTxPeriodic_r13 = null;  // optional

   public SL_SyncConfigNFreq_r13_txParameters_r13 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SL_SyncConfigNFreq_r13_txParameters_r13 (
      SL_TxParameters_r12 syncTxParameters_r13_,
      RSRP_RangeSL_r12 syncTxThreshIC_r13_,
      Asn1BitString syncInfoReserved_r13_,
      SL_SyncConfigNFreq_r13_txParameters_r13_syncTxPeriodic_r13 syncTxPeriodic_r13_
   ) {
      super();
      syncTxParameters_r13 = syncTxParameters_r13_;
      syncTxThreshIC_r13 = syncTxThreshIC_r13_;
      syncInfoReserved_r13 = syncInfoReserved_r13_;
      syncTxPeriodic_r13 = syncTxPeriodic_r13_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SL_SyncConfigNFreq_r13_txParameters_r13 (
      SL_TxParameters_r12 syncTxParameters_r13_,
      RSRP_RangeSL_r12 syncTxThreshIC_r13_
   ) {
      super();
      syncTxParameters_r13 = syncTxParameters_r13_;
      syncTxThreshIC_r13 = syncTxThreshIC_r13_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SL_SyncConfigNFreq_r13_txParameters_r13 (SL_TxParameters_r12 syncTxParameters_r13_,
      long syncTxThreshIC_r13_,
      Asn1BitString syncInfoReserved_r13_,
      SL_SyncConfigNFreq_r13_txParameters_r13_syncTxPeriodic_r13 syncTxPeriodic_r13_
   ) {
      super();
      syncTxParameters_r13 = syncTxParameters_r13_;
      syncTxThreshIC_r13 = new RSRP_RangeSL_r12 (syncTxThreshIC_r13_);
      syncInfoReserved_r13 = syncInfoReserved_r13_;
      syncTxPeriodic_r13 = syncTxPeriodic_r13_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public SL_SyncConfigNFreq_r13_txParameters_r13 (
      SL_TxParameters_r12 syncTxParameters_r13_,
      long syncTxThreshIC_r13_
   ) {
      super();
      syncTxParameters_r13 = syncTxParameters_r13_;
      syncTxThreshIC_r13 = new RSRP_RangeSL_r12 (syncTxThreshIC_r13_);
   }

   public void init () {
      syncTxParameters_r13 = null;
      syncTxThreshIC_r13 = null;
      syncInfoReserved_r13 = null;
      syncTxPeriodic_r13 = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return syncTxParameters_r13;
         case 1: return syncTxThreshIC_r13;
         case 2: return syncInfoReserved_r13;
         case 3: return syncTxPeriodic_r13;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "syncTxParameters-r13";
         case 1: return "syncTxThreshIC-r13";
         case 2: return "syncInfoReserved-r13";
         case 3: return "syncTxPeriodic-r13";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean syncInfoReserved_r13Present = buffer.decodeBit ("syncInfoReserved_r13Present");
      boolean syncTxPeriodic_r13Present = buffer.decodeBit ("syncTxPeriodic_r13Present");

      // decode syncTxParameters_r13

      buffer.getContext().eventDispatcher.startElement("syncTxParameters_r13", -1);

      syncTxParameters_r13 = new SL_TxParameters_r12();
      syncTxParameters_r13.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("syncTxParameters_r13", -1);

      // decode syncTxThreshIC_r13

      buffer.getContext().eventDispatcher.startElement("syncTxThreshIC_r13", -1);

      syncTxThreshIC_r13 = new RSRP_RangeSL_r12();
      syncTxThreshIC_r13.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("syncTxThreshIC_r13", -1);

      // decode syncInfoReserved_r13

      if (syncInfoReserved_r13Present) {
         buffer.getContext().eventDispatcher.startElement("syncInfoReserved_r13", -1);

         syncInfoReserved_r13 = new Asn1BitString();
         syncInfoReserved_r13.decode (buffer, 19, 19);

         buffer.invokeCharacters(syncInfoReserved_r13.toString());
         buffer.getContext().eventDispatcher.endElement("syncInfoReserved_r13", -1);
      }
      else {
         syncInfoReserved_r13 = null;
      }

      // decode syncTxPeriodic_r13

      if (syncTxPeriodic_r13Present) {
         buffer.getContext().eventDispatcher.startElement("syncTxPeriodic_r13", -1);

         int tval = SL_SyncConfigNFreq_r13_txParameters_r13_syncTxPeriodic_r13.decodeEnumValue (buffer);
         syncTxPeriodic_r13 = SL_SyncConfigNFreq_r13_txParameters_r13_syncTxPeriodic_r13.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("syncTxPeriodic_r13", -1);
      }
      else {
         syncTxPeriodic_r13 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (syncTxParameters_r13 != null) syncTxParameters_r13.print (_sb, "syncTxParameters_r13", _level+1);
      if (syncTxThreshIC_r13 != null) syncTxThreshIC_r13.print (_sb, "syncTxThreshIC_r13", _level+1);
      if (syncInfoReserved_r13 != null) syncInfoReserved_r13.print (_sb, "syncInfoReserved_r13", _level+1);
      if (syncTxPeriodic_r13 != null) syncTxPeriodic_r13.print (_sb, "syncTxPeriodic_r13", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
