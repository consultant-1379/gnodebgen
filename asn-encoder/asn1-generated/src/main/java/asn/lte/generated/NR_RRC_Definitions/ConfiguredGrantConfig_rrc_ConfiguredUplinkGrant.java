/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class ConfiguredGrantConfig_rrc_ConfiguredUplinkGrant extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public Asn1Integer timeDomainOffset;
   public Asn1Integer timeDomainAllocation;
   public Asn1BitString frequencyDomainAllocation;
   public Asn1Integer antennaPort;
   public Asn1Integer dmrs_SeqInitialization;  // optional
   public Asn1Integer precodingAndNumberOfLayers;
   public Asn1Integer srs_ResourceIndicator;  // optional
   public Asn1Integer mcsAndTBS;
   public Asn1Integer frequencyHoppingOffset;  // optional
   public Asn1Integer pathlossReferenceIndex;
   public boolean mV2ExtPresent;
   public ConfiguredGrantConfig_rrc_ConfiguredUplinkGrant_pusch_RepTypeIndicator_r16 pusch_RepTypeIndicator_r16 = null;  // optional
   public ConfiguredGrantConfig_rrc_ConfiguredUplinkGrant_frequencyHoppingPUSCH_RepTypeB_r16 frequencyHoppingPUSCH_RepTypeB_r16 = null;  // optional
   public ConfiguredGrantConfig_rrc_ConfiguredUplinkGrant_timeReferenceSFN_r16 timeReferenceSFN_r16 = null;  // optional
   public Asn1OpenExt extElem1;

   public ConfiguredGrantConfig_rrc_ConfiguredUplinkGrant () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ConfiguredGrantConfig_rrc_ConfiguredUplinkGrant (
      Asn1Integer timeDomainOffset_,
      Asn1Integer timeDomainAllocation_,
      Asn1BitString frequencyDomainAllocation_,
      Asn1Integer antennaPort_,
      Asn1Integer dmrs_SeqInitialization_,
      Asn1Integer precodingAndNumberOfLayers_,
      Asn1Integer srs_ResourceIndicator_,
      Asn1Integer mcsAndTBS_,
      Asn1Integer frequencyHoppingOffset_,
      Asn1Integer pathlossReferenceIndex_,
      ConfiguredGrantConfig_rrc_ConfiguredUplinkGrant_pusch_RepTypeIndicator_r16 pusch_RepTypeIndicator_r16_,
      ConfiguredGrantConfig_rrc_ConfiguredUplinkGrant_frequencyHoppingPUSCH_RepTypeB_r16 frequencyHoppingPUSCH_RepTypeB_r16_,
      ConfiguredGrantConfig_rrc_ConfiguredUplinkGrant_timeReferenceSFN_r16 timeReferenceSFN_r16_
   ) {
      super();
      timeDomainOffset = timeDomainOffset_;
      timeDomainAllocation = timeDomainAllocation_;
      frequencyDomainAllocation = frequencyDomainAllocation_;
      antennaPort = antennaPort_;
      dmrs_SeqInitialization = dmrs_SeqInitialization_;
      precodingAndNumberOfLayers = precodingAndNumberOfLayers_;
      srs_ResourceIndicator = srs_ResourceIndicator_;
      mcsAndTBS = mcsAndTBS_;
      frequencyHoppingOffset = frequencyHoppingOffset_;
      pathlossReferenceIndex = pathlossReferenceIndex_;
      pusch_RepTypeIndicator_r16 = pusch_RepTypeIndicator_r16_;
      frequencyHoppingPUSCH_RepTypeB_r16 = frequencyHoppingPUSCH_RepTypeB_r16_;
      timeReferenceSFN_r16 = timeReferenceSFN_r16_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public ConfiguredGrantConfig_rrc_ConfiguredUplinkGrant (
      Asn1Integer timeDomainOffset_,
      Asn1Integer timeDomainAllocation_,
      Asn1BitString frequencyDomainAllocation_,
      Asn1Integer antennaPort_,
      Asn1Integer precodingAndNumberOfLayers_,
      Asn1Integer mcsAndTBS_,
      Asn1Integer pathlossReferenceIndex_
   ) {
      super();
      timeDomainOffset = timeDomainOffset_;
      timeDomainAllocation = timeDomainAllocation_;
      frequencyDomainAllocation = frequencyDomainAllocation_;
      antennaPort = antennaPort_;
      precodingAndNumberOfLayers = precodingAndNumberOfLayers_;
      mcsAndTBS = mcsAndTBS_;
      pathlossReferenceIndex = pathlossReferenceIndex_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public ConfiguredGrantConfig_rrc_ConfiguredUplinkGrant (long timeDomainOffset_,
      long timeDomainAllocation_,
      Asn1BitString frequencyDomainAllocation_,
      long antennaPort_,
      long dmrs_SeqInitialization_,
      long precodingAndNumberOfLayers_,
      long srs_ResourceIndicator_,
      long mcsAndTBS_,
      long frequencyHoppingOffset_,
      long pathlossReferenceIndex_,
      ConfiguredGrantConfig_rrc_ConfiguredUplinkGrant_pusch_RepTypeIndicator_r16 pusch_RepTypeIndicator_r16_,
      ConfiguredGrantConfig_rrc_ConfiguredUplinkGrant_frequencyHoppingPUSCH_RepTypeB_r16 frequencyHoppingPUSCH_RepTypeB_r16_,
      ConfiguredGrantConfig_rrc_ConfiguredUplinkGrant_timeReferenceSFN_r16 timeReferenceSFN_r16_
   ) {
      super();
      timeDomainOffset = new Asn1Integer (timeDomainOffset_);
      timeDomainAllocation = new Asn1Integer (timeDomainAllocation_);
      frequencyDomainAllocation = frequencyDomainAllocation_;
      antennaPort = new Asn1Integer (antennaPort_);
      dmrs_SeqInitialization = new Asn1Integer (dmrs_SeqInitialization_);
      precodingAndNumberOfLayers = new Asn1Integer (precodingAndNumberOfLayers_);
      srs_ResourceIndicator = new Asn1Integer (srs_ResourceIndicator_);
      mcsAndTBS = new Asn1Integer (mcsAndTBS_);
      frequencyHoppingOffset = new Asn1Integer (frequencyHoppingOffset_);
      pathlossReferenceIndex = new Asn1Integer (pathlossReferenceIndex_);
      pusch_RepTypeIndicator_r16 = pusch_RepTypeIndicator_r16_;
      frequencyHoppingPUSCH_RepTypeB_r16 = frequencyHoppingPUSCH_RepTypeB_r16_;
      timeReferenceSFN_r16 = timeReferenceSFN_r16_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public ConfiguredGrantConfig_rrc_ConfiguredUplinkGrant (
      long timeDomainOffset_,
      long timeDomainAllocation_,
      Asn1BitString frequencyDomainAllocation_,
      long antennaPort_,
      long precodingAndNumberOfLayers_,
      long mcsAndTBS_,
      long pathlossReferenceIndex_
   ) {
      super();
      timeDomainOffset = new Asn1Integer (timeDomainOffset_);
      timeDomainAllocation = new Asn1Integer (timeDomainAllocation_);
      frequencyDomainAllocation = frequencyDomainAllocation_;
      antennaPort = new Asn1Integer (antennaPort_);
      precodingAndNumberOfLayers = new Asn1Integer (precodingAndNumberOfLayers_);
      mcsAndTBS = new Asn1Integer (mcsAndTBS_);
      pathlossReferenceIndex = new Asn1Integer (pathlossReferenceIndex_);
   }

   public void init () {
      timeDomainOffset = null;
      timeDomainAllocation = null;
      frequencyDomainAllocation = null;
      antennaPort = null;
      dmrs_SeqInitialization = null;
      precodingAndNumberOfLayers = null;
      srs_ResourceIndicator = null;
      mcsAndTBS = null;
      frequencyHoppingOffset = null;
      pathlossReferenceIndex = null;
      pusch_RepTypeIndicator_r16 = null;
      frequencyHoppingPUSCH_RepTypeB_r16 = null;
      timeReferenceSFN_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 14; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return timeDomainOffset;
         case 1: return timeDomainAllocation;
         case 2: return frequencyDomainAllocation;
         case 3: return antennaPort;
         case 4: return dmrs_SeqInitialization;
         case 5: return precodingAndNumberOfLayers;
         case 6: return srs_ResourceIndicator;
         case 7: return mcsAndTBS;
         case 8: return frequencyHoppingOffset;
         case 9: return pathlossReferenceIndex;
         case 10: return pusch_RepTypeIndicator_r16;
         case 11: return frequencyHoppingPUSCH_RepTypeB_r16;
         case 12: return timeReferenceSFN_r16;
         case 13: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "timeDomainOffset";
         case 1: return "timeDomainAllocation";
         case 2: return "frequencyDomainAllocation";
         case 3: return "antennaPort";
         case 4: return "dmrs-SeqInitialization";
         case 5: return "precodingAndNumberOfLayers";
         case 6: return "srs-ResourceIndicator";
         case 7: return "mcsAndTBS";
         case 8: return "frequencyHoppingOffset";
         case 9: return "pathlossReferenceIndex";
         case 10: return "pusch-RepTypeIndicator-r16";
         case 11: return "frequencyHoppingPUSCH-RepTypeB-r16";
         case 12: return "timeReferenceSFN-r16";
         case 13: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean dmrs_SeqInitializationPresent = buffer.decodeBit ("dmrs_SeqInitializationPresent");
      boolean srs_ResourceIndicatorPresent = buffer.decodeBit ("srs_ResourceIndicatorPresent");
      boolean frequencyHoppingOffsetPresent = buffer.decodeBit ("frequencyHoppingOffsetPresent");

      // decode timeDomainOffset

      buffer.getContext().eventDispatcher.startElement("timeDomainOffset", -1);

      timeDomainOffset = new Asn1Integer();
      timeDomainOffset.decode (buffer, 0, 5119);

      buffer.invokeCharacters(timeDomainOffset.toString());
      buffer.getContext().eventDispatcher.endElement("timeDomainOffset", -1);

      // decode timeDomainAllocation

      buffer.getContext().eventDispatcher.startElement("timeDomainAllocation", -1);

      timeDomainAllocation = new Asn1Integer();
      timeDomainAllocation.decode (buffer, 0, 15);

      buffer.invokeCharacters(timeDomainAllocation.toString());
      buffer.getContext().eventDispatcher.endElement("timeDomainAllocation", -1);

      // decode frequencyDomainAllocation

      buffer.getContext().eventDispatcher.startElement("frequencyDomainAllocation", -1);

      frequencyDomainAllocation = new Asn1BitString();
      frequencyDomainAllocation.decode (buffer, 18, 18);

      buffer.invokeCharacters(frequencyDomainAllocation.toString());
      buffer.getContext().eventDispatcher.endElement("frequencyDomainAllocation", -1);

      // decode antennaPort

      buffer.getContext().eventDispatcher.startElement("antennaPort", -1);

      antennaPort = new Asn1Integer();
      antennaPort.decode (buffer, 0, 31);

      buffer.invokeCharacters(antennaPort.toString());
      buffer.getContext().eventDispatcher.endElement("antennaPort", -1);

      // decode dmrs_SeqInitialization

      if (dmrs_SeqInitializationPresent) {
         buffer.getContext().eventDispatcher.startElement("dmrs_SeqInitialization", -1);

         dmrs_SeqInitialization = new Asn1Integer();
         dmrs_SeqInitialization.decode (buffer, 0, 1);

         buffer.invokeCharacters(dmrs_SeqInitialization.toString());
         buffer.getContext().eventDispatcher.endElement("dmrs_SeqInitialization", -1);
      }
      else {
         dmrs_SeqInitialization = null;
      }

      // decode precodingAndNumberOfLayers

      buffer.getContext().eventDispatcher.startElement("precodingAndNumberOfLayers", -1);

      precodingAndNumberOfLayers = new Asn1Integer();
      precodingAndNumberOfLayers.decode (buffer, 0, 63);

      buffer.invokeCharacters(precodingAndNumberOfLayers.toString());
      buffer.getContext().eventDispatcher.endElement("precodingAndNumberOfLayers", -1);

      // decode srs_ResourceIndicator

      if (srs_ResourceIndicatorPresent) {
         buffer.getContext().eventDispatcher.startElement("srs_ResourceIndicator", -1);

         srs_ResourceIndicator = new Asn1Integer();
         srs_ResourceIndicator.decode (buffer, 0, 15);

         buffer.invokeCharacters(srs_ResourceIndicator.toString());
         buffer.getContext().eventDispatcher.endElement("srs_ResourceIndicator", -1);
      }
      else {
         srs_ResourceIndicator = null;
      }

      // decode mcsAndTBS

      buffer.getContext().eventDispatcher.startElement("mcsAndTBS", -1);

      mcsAndTBS = new Asn1Integer();
      mcsAndTBS.decode (buffer, 0, 31);

      buffer.invokeCharacters(mcsAndTBS.toString());
      buffer.getContext().eventDispatcher.endElement("mcsAndTBS", -1);

      // decode frequencyHoppingOffset

      if (frequencyHoppingOffsetPresent) {
         buffer.getContext().eventDispatcher.startElement("frequencyHoppingOffset", -1);

         frequencyHoppingOffset = new Asn1Integer();
         frequencyHoppingOffset.decode (buffer, 1, 274);

         buffer.invokeCharacters(frequencyHoppingOffset.toString());
         buffer.getContext().eventDispatcher.endElement("frequencyHoppingOffset", -1);
      }
      else {
         frequencyHoppingOffset = null;
      }

      // decode pathlossReferenceIndex

      buffer.getContext().eventDispatcher.startElement("pathlossReferenceIndex", -1);

      pathlossReferenceIndex = new Asn1Integer();
      pathlossReferenceIndex.decode (buffer, 0, 3);

      buffer.invokeCharacters(pathlossReferenceIndex.toString());
      buffer.getContext().eventDispatcher.endElement("pathlossReferenceIndex", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean pusch_RepTypeIndicator_r16Present = buffer.decodeBit ("pusch_RepTypeIndicator_r16Present");

            boolean frequencyHoppingPUSCH_RepTypeB_r16Present = buffer.decodeBit ("frequencyHoppingPUSCH_RepTypeB_r16Present");

            boolean timeReferenceSFN_r16Present = buffer.decodeBit ("timeReferenceSFN_r16Present");

            // decode pusch_RepTypeIndicator_r16

            if (pusch_RepTypeIndicator_r16Present) {
               buffer.getContext().eventDispatcher.startElement("pusch_RepTypeIndicator_r16", -1);

               int tval = ConfiguredGrantConfig_rrc_ConfiguredUplinkGrant_pusch_RepTypeIndicator_r16.decodeEnumValue (buffer);
               pusch_RepTypeIndicator_r16 = ConfiguredGrantConfig_rrc_ConfiguredUplinkGrant_pusch_RepTypeIndicator_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("pusch_RepTypeIndicator_r16", -1);
            }
            else {
               pusch_RepTypeIndicator_r16 = null;
            }

            // decode frequencyHoppingPUSCH_RepTypeB_r16

            if (frequencyHoppingPUSCH_RepTypeB_r16Present) {
               buffer.getContext().eventDispatcher.startElement("frequencyHoppingPUSCH_RepTypeB_r16", -1);

               int tval = ConfiguredGrantConfig_rrc_ConfiguredUplinkGrant_frequencyHoppingPUSCH_RepTypeB_r16.decodeEnumValue (buffer);
               frequencyHoppingPUSCH_RepTypeB_r16 = ConfiguredGrantConfig_rrc_ConfiguredUplinkGrant_frequencyHoppingPUSCH_RepTypeB_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("frequencyHoppingPUSCH_RepTypeB_r16", -1);
            }
            else {
               frequencyHoppingPUSCH_RepTypeB_r16 = null;
            }

            // decode timeReferenceSFN_r16

            if (timeReferenceSFN_r16Present) {
               buffer.getContext().eventDispatcher.startElement("timeReferenceSFN_r16", -1);

               int tval = ConfiguredGrantConfig_rrc_ConfiguredUplinkGrant_timeReferenceSFN_r16.decodeEnumValue (buffer);
               timeReferenceSFN_r16 = ConfiguredGrantConfig_rrc_ConfiguredUplinkGrant_timeReferenceSFN_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("timeReferenceSFN_r16", -1);
            }
            else {
               timeReferenceSFN_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (timeDomainOffset != null) timeDomainOffset.print (_sb, "timeDomainOffset", _level+1);
      if (timeDomainAllocation != null) timeDomainAllocation.print (_sb, "timeDomainAllocation", _level+1);
      if (frequencyDomainAllocation != null) frequencyDomainAllocation.print (_sb, "frequencyDomainAllocation", _level+1);
      if (antennaPort != null) antennaPort.print (_sb, "antennaPort", _level+1);
      if (dmrs_SeqInitialization != null) dmrs_SeqInitialization.print (_sb, "dmrs_SeqInitialization", _level+1);
      if (precodingAndNumberOfLayers != null) precodingAndNumberOfLayers.print (_sb, "precodingAndNumberOfLayers", _level+1);
      if (srs_ResourceIndicator != null) srs_ResourceIndicator.print (_sb, "srs_ResourceIndicator", _level+1);
      if (mcsAndTBS != null) mcsAndTBS.print (_sb, "mcsAndTBS", _level+1);
      if (frequencyHoppingOffset != null) frequencyHoppingOffset.print (_sb, "frequencyHoppingOffset", _level+1);
      if (pathlossReferenceIndex != null) pathlossReferenceIndex.print (_sb, "pathlossReferenceIndex", _level+1);
      if (pusch_RepTypeIndicator_r16 != null) pusch_RepTypeIndicator_r16.print (_sb, "pusch_RepTypeIndicator_r16", _level+1);
      if (frequencyHoppingPUSCH_RepTypeB_r16 != null) frequencyHoppingPUSCH_RepTypeB_r16.print (_sb, "frequencyHoppingPUSCH_RepTypeB_r16", _level+1);
      if (timeReferenceSFN_r16 != null) timeReferenceSFN_r16.print (_sb, "timeReferenceSFN_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
