/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class UL_ReferenceSignalsPUSCH extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "UL-ReferenceSignalsPUSCH";
   }

   public Asn1Boolean groupHoppingEnabled;
   public Asn1Integer groupAssignmentPUSCH;
   public Asn1Boolean sequenceHoppingEnabled;
   public Asn1Integer cyclicShift;

   public UL_ReferenceSignalsPUSCH () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public UL_ReferenceSignalsPUSCH (
      Asn1Boolean groupHoppingEnabled_,
      Asn1Integer groupAssignmentPUSCH_,
      Asn1Boolean sequenceHoppingEnabled_,
      Asn1Integer cyclicShift_
   ) {
      super();
      groupHoppingEnabled = groupHoppingEnabled_;
      groupAssignmentPUSCH = groupAssignmentPUSCH_;
      sequenceHoppingEnabled = sequenceHoppingEnabled_;
      cyclicShift = cyclicShift_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public UL_ReferenceSignalsPUSCH (boolean groupHoppingEnabled_,
      long groupAssignmentPUSCH_,
      boolean sequenceHoppingEnabled_,
      long cyclicShift_
   ) {
      super();
      groupHoppingEnabled = new Asn1Boolean (groupHoppingEnabled_);
      groupAssignmentPUSCH = new Asn1Integer (groupAssignmentPUSCH_);
      sequenceHoppingEnabled = new Asn1Boolean (sequenceHoppingEnabled_);
      cyclicShift = new Asn1Integer (cyclicShift_);
   }

   public void init () {
      groupHoppingEnabled = null;
      groupAssignmentPUSCH = null;
      sequenceHoppingEnabled = null;
      cyclicShift = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return groupHoppingEnabled;
         case 1: return groupAssignmentPUSCH;
         case 2: return sequenceHoppingEnabled;
         case 3: return cyclicShift;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "groupHoppingEnabled";
         case 1: return "groupAssignmentPUSCH";
         case 2: return "sequenceHoppingEnabled";
         case 3: return "cyclicShift";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode groupHoppingEnabled

      buffer.getContext().eventDispatcher.startElement("groupHoppingEnabled", -1);

      groupHoppingEnabled = new Asn1Boolean();
      groupHoppingEnabled.decode (buffer);

      buffer.invokeCharacters(groupHoppingEnabled.toString());
      buffer.getContext().eventDispatcher.endElement("groupHoppingEnabled", -1);

      // decode groupAssignmentPUSCH

      buffer.getContext().eventDispatcher.startElement("groupAssignmentPUSCH", -1);

      groupAssignmentPUSCH = new Asn1Integer();
      groupAssignmentPUSCH.decode (buffer, 0, 29);

      buffer.invokeCharacters(groupAssignmentPUSCH.toString());
      buffer.getContext().eventDispatcher.endElement("groupAssignmentPUSCH", -1);

      // decode sequenceHoppingEnabled

      buffer.getContext().eventDispatcher.startElement("sequenceHoppingEnabled", -1);

      sequenceHoppingEnabled = new Asn1Boolean();
      sequenceHoppingEnabled.decode (buffer);

      buffer.invokeCharacters(sequenceHoppingEnabled.toString());
      buffer.getContext().eventDispatcher.endElement("sequenceHoppingEnabled", -1);

      // decode cyclicShift

      buffer.getContext().eventDispatcher.startElement("cyclicShift", -1);

      cyclicShift = new Asn1Integer();
      cyclicShift.decode (buffer, 0, 7);

      buffer.invokeCharacters(cyclicShift.toString());
      buffer.getContext().eventDispatcher.endElement("cyclicShift", -1);

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (groupHoppingEnabled != null) groupHoppingEnabled.print (_sb, "groupHoppingEnabled", _level+1);
      if (groupAssignmentPUSCH != null) groupAssignmentPUSCH.print (_sb, "groupAssignmentPUSCH", _level+1);
      if (sequenceHoppingEnabled != null) sequenceHoppingEnabled.print (_sb, "sequenceHoppingEnabled", _level+1);
      if (cyclicShift != null) cyclicShift.print (_sb, "cyclicShift", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
