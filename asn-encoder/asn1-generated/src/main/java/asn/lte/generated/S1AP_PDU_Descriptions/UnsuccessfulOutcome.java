/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.S1AP_PDU_Descriptions;

import com.objsys.asn1j.runtime.*;
import asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode;
import asn.lte.generated.S1AP_CommonDataTypes.Criticality;

public class UnsuccessfulOutcome extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_S1AP_PDU_DescriptionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "UnsuccessfulOutcome";
   }

   public ProcedureCode procedureCode;
   public Criticality criticality = null;

   /**
    * procedureCode: id-HandoverPreparation
    * criticality: Criticality.reject
    * ASN.1 type: HandoverPreparationFailure
    * Java type: HandoverPreparationFailure
    *
    * procedureCode: id-HandoverResourceAllocation
    * criticality: Criticality.reject
    * ASN.1 type: HandoverFailure
    * Java type: HandoverFailure
    *
    * procedureCode: id-PathSwitchRequest
    * criticality: Criticality.reject
    * ASN.1 type: PathSwitchRequestFailure
    * Java type: PathSwitchRequestFailure
    *
    * procedureCode: id-E-RABSetup
    * criticality: Criticality.reject
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-E-RABModify
    * criticality: Criticality.reject
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-E-RABRelease
    * criticality: Criticality.reject
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-InitialContextSetup
    * criticality: Criticality.reject
    * ASN.1 type: InitialContextSetupFailure
    * Java type: InitialContextSetupFailure
    *
    * procedureCode: id-HandoverCancel
    * criticality: Criticality.reject
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-Kill
    * criticality: Criticality.reject
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-Reset
    * criticality: Criticality.reject
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-S1Setup
    * criticality: Criticality.reject
    * ASN.1 type: S1SetupFailure
    * Java type: S1SetupFailure
    *
    * procedureCode: id-UEContextModification
    * criticality: Criticality.reject
    * ASN.1 type: UEContextModificationFailure
    * Java type: UEContextModificationFailure
    *
    * procedureCode: id-UEContextRelease
    * criticality: Criticality.reject
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-ENBConfigurationUpdate
    * criticality: Criticality.reject
    * ASN.1 type: ENBConfigurationUpdateFailure
    * Java type: ENBConfigurationUpdateFailure
    *
    * procedureCode: id-MMEConfigurationUpdate
    * criticality: Criticality.reject
    * ASN.1 type: MMEConfigurationUpdateFailure
    * Java type: MMEConfigurationUpdateFailure
    *
    * procedureCode: id-WriteReplaceWarning
    * criticality: Criticality.reject
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-UERadioCapabilityMatch
    * criticality: Criticality.reject
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-E-RABModificationIndication
    * criticality: Criticality.reject
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-UEContextModificationIndication
    * criticality: Criticality.reject
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-UEContextSuspend
    * criticality: Criticality.reject
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-UEContextResume
    * criticality: Criticality.reject
    * ASN.1 type: UEContextResumeFailure
    * Java type: UEContextResumeFailure
    *
    * procedureCode: id-HandoverNotification
    * criticality: Criticality.ignore
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-E-RABReleaseIndication
    * criticality: Criticality.ignore
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-Paging
    * criticality: Criticality.ignore
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-downlinkNASTransport
    * criticality: Criticality.ignore
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-initialUEMessage
    * criticality: Criticality.ignore
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-uplinkNASTransport
    * criticality: Criticality.ignore
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-ErrorIndication
    * criticality: Criticality.ignore
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-NASNonDeliveryIndication
    * criticality: Criticality.ignore
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-UEContextReleaseRequest
    * criticality: Criticality.ignore
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-DownlinkS1cdma2000tunnelling
    * criticality: Criticality.ignore
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-UplinkS1cdma2000tunnelling
    * criticality: Criticality.ignore
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-UECapabilityInfoIndication
    * criticality: Criticality.ignore
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-eNBStatusTransfer
    * criticality: Criticality.ignore
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-MMEStatusTransfer
    * criticality: Criticality.ignore
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-DeactivateTrace
    * criticality: Criticality.ignore
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-TraceStart
    * criticality: Criticality.ignore
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-TraceFailureIndication
    * criticality: Criticality.ignore
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-CellTrafficTrace
    * criticality: Criticality.ignore
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-LocationReportingControl
    * criticality: Criticality.ignore
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-LocationReportingFailureIndication
    * criticality: Criticality.ignore
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-LocationReport
    * criticality: Criticality.ignore
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-OverloadStart
    * criticality: Criticality.ignore
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-OverloadStop
    * criticality: Criticality.reject
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-eNBDirectInformationTransfer
    * criticality: Criticality.ignore
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-MMEDirectInformationTransfer
    * criticality: Criticality.ignore
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-eNBConfigurationTransfer
    * criticality: Criticality.ignore
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-MMEConfigurationTransfer
    * criticality: Criticality.ignore
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-PrivateMessage
    * criticality: Criticality.ignore
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-downlinkUEAssociatedLPPaTransport
    * criticality: Criticality.ignore
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-uplinkUEAssociatedLPPaTransport
    * criticality: Criticality.ignore
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-downlinkNonUEAssociatedLPPaTransport
    * criticality: Criticality.ignore
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-uplinkNonUEAssociatedLPPaTransport
    * criticality: Criticality.ignore
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-PWSRestartIndication
    * criticality: Criticality.ignore
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-RerouteNASRequest
    * criticality: Criticality.reject
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-PWSFailureIndication
    * criticality: Criticality.ignore
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-ConnectionEstablishmentIndication
    * criticality: Criticality.reject
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-NASDeliveryIndication
    * criticality: Criticality.ignore
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-RetrieveUEInformation
    * criticality: Criticality.reject
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-UEInformationTransfer
    * criticality: Criticality.reject
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-eNBCPRelocationIndication
    * criticality: Criticality.reject
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-MMECPRelocationIndication
    * criticality: Criticality.reject
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-SecondaryRATDataUsageReport
    * criticality: Criticality.ignore
    * ASN.1 type: 
    * Java type: 
    */
   public Asn1Type value;

   public UnsuccessfulOutcome () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public UnsuccessfulOutcome (
      ProcedureCode procedureCode_,
      Criticality criticality_,
      Asn1Type value_
   ) {
      super();
      procedureCode = procedureCode_;
      criticality = criticality_;
      value = value_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public UnsuccessfulOutcome (long procedureCode_,
      Criticality criticality_,
      Asn1Type value_
   ) {
      super();
      procedureCode = new ProcedureCode (procedureCode_);
      criticality = criticality_;
      value = value_;
   }

   public void init () {
      procedureCode = null;
      criticality = null;
      value = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return procedureCode;
         case 1: return criticality;
         case 2: return value;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "procedureCode";
         case 1: return "criticality";
         case 2: return "value";
         default: return null;
      }
   }


   /**
    * Assign fields according to information object handoverPreparation
    */
   public void setUsing_handoverPreparation(asn.lte.generated.S1AP_PDU_Contents.HandoverPreparationFailure value) {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_HandoverPreparation);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object handoverResourceAllocation
    */
   public void setUsing_handoverResourceAllocation(asn.lte.generated.S1AP_PDU_Contents.HandoverFailure value) {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_HandoverResourceAllocation);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object pathSwitchRequest
    */
   public void setUsing_pathSwitchRequest(asn.lte.generated.S1AP_PDU_Contents.PathSwitchRequestFailure value) {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_PathSwitchRequest);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object e-RABSetup
    */
   public void setUsing_e_RABSetup() {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_E_RABSetup);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.reject();
   }

   /**
    * Assign fields according to information object e-RABModify
    */
   public void setUsing_e_RABModify() {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_E_RABModify);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.reject();
   }

   /**
    * Assign fields according to information object e-RABRelease
    */
   public void setUsing_e_RABRelease() {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_E_RABRelease);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.reject();
   }

   /**
    * Assign fields according to information object initialContextSetup
    */
   public void setUsing_initialContextSetup(asn.lte.generated.S1AP_PDU_Contents.InitialContextSetupFailure value) {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_InitialContextSetup);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object handoverCancel
    */
   public void setUsing_handoverCancel() {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_HandoverCancel);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.reject();
   }

   /**
    * Assign fields according to information object kill
    */
   public void setUsing_kill() {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_Kill);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.reject();
   }

   /**
    * Assign fields according to information object reset
    */
   public void setUsing_reset() {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_Reset);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.reject();
   }

   /**
    * Assign fields according to information object s1Setup
    */
   public void setUsing_s1Setup(asn.lte.generated.S1AP_PDU_Contents.S1SetupFailure value) {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_S1Setup);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object uEContextModification
    */
   public void setUsing_uEContextModification(asn.lte.generated.S1AP_PDU_Contents.UEContextModificationFailure value) {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_UEContextModification);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object uEContextRelease
    */
   public void setUsing_uEContextRelease() {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_UEContextRelease);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.reject();
   }

   /**
    * Assign fields according to information object eNBConfigurationUpdate
    */
   public void setUsing_eNBConfigurationUpdate(asn.lte.generated.S1AP_PDU_Contents.ENBConfigurationUpdateFailure value) {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_ENBConfigurationUpdate);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object mMEConfigurationUpdate
    */
   public void setUsing_mMEConfigurationUpdate(asn.lte.generated.S1AP_PDU_Contents.MMEConfigurationUpdateFailure value) {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_MMEConfigurationUpdate);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object writeReplaceWarning
    */
   public void setUsing_writeReplaceWarning() {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_WriteReplaceWarning);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.reject();
   }

   /**
    * Assign fields according to information object uERadioCapabilityMatch
    */
   public void setUsing_uERadioCapabilityMatch() {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_UERadioCapabilityMatch);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.reject();
   }

   /**
    * Assign fields according to information object e-RABModificationIndication
    */
   public void setUsing_e_RABModificationIndication() {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_E_RABModificationIndication);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.reject();
   }

   /**
    * Assign fields according to information object uEContextModificationIndication
    */
   public void setUsing_uEContextModificationIndication() {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_UEContextModificationIndication);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.reject();
   }

   /**
    * Assign fields according to information object uEContextSuspend
    */
   public void setUsing_uEContextSuspend() {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_UEContextSuspend);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.reject();
   }

   /**
    * Assign fields according to information object uEContextResume
    */
   public void setUsing_uEContextResume(asn.lte.generated.S1AP_PDU_Contents.UEContextResumeFailure value) {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_UEContextResume);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object handoverNotification
    */
   public void setUsing_handoverNotification() {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_HandoverNotification);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.ignore();
   }

   /**
    * Assign fields according to information object e-RABReleaseIndication
    */
   public void setUsing_e_RABReleaseIndication() {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_E_RABReleaseIndication);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.ignore();
   }

   /**
    * Assign fields according to information object paging
    */
   public void setUsing_paging() {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_Paging);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.ignore();
   }

   /**
    * Assign fields according to information object downlinkNASTransport
    */
   public void setUsing_downlinkNASTransport() {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_downlinkNASTransport);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.ignore();
   }

   /**
    * Assign fields according to information object initialUEMessage
    */
   public void setUsing_initialUEMessage() {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_initialUEMessage);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.ignore();
   }

   /**
    * Assign fields according to information object uplinkNASTransport
    */
   public void setUsing_uplinkNASTransport() {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_uplinkNASTransport);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.ignore();
   }

   /**
    * Assign fields according to information object errorIndication
    */
   public void setUsing_errorIndication() {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_ErrorIndication);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.ignore();
   }

   /**
    * Assign fields according to information object nASNonDeliveryIndication
    */
   public void setUsing_nASNonDeliveryIndication() {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_NASNonDeliveryIndication);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.ignore();
   }

   /**
    * Assign fields according to information object uEContextReleaseRequest
    */
   public void setUsing_uEContextReleaseRequest() {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_UEContextReleaseRequest);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.ignore();
   }

   /**
    * Assign fields according to information object downlinkS1cdma2000tunnelling
    */
   public void setUsing_downlinkS1cdma2000tunnelling() {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_DownlinkS1cdma2000tunnelling);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.ignore();
   }

   /**
    * Assign fields according to information object uplinkS1cdma2000tunnelling
    */
   public void setUsing_uplinkS1cdma2000tunnelling() {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_UplinkS1cdma2000tunnelling);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.ignore();
   }

   /**
    * Assign fields according to information object uECapabilityInfoIndication
    */
   public void setUsing_uECapabilityInfoIndication() {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_UECapabilityInfoIndication);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.ignore();
   }

   /**
    * Assign fields according to information object eNBStatusTransfer
    */
   public void setUsing_eNBStatusTransfer() {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_eNBStatusTransfer);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.ignore();
   }

   /**
    * Assign fields according to information object mMEStatusTransfer
    */
   public void setUsing_mMEStatusTransfer() {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_MMEStatusTransfer);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.ignore();
   }

   /**
    * Assign fields according to information object deactivateTrace
    */
   public void setUsing_deactivateTrace() {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_DeactivateTrace);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.ignore();
   }

   /**
    * Assign fields according to information object traceStart
    */
   public void setUsing_traceStart() {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_TraceStart);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.ignore();
   }

   /**
    * Assign fields according to information object traceFailureIndication
    */
   public void setUsing_traceFailureIndication() {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_TraceFailureIndication);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.ignore();
   }

   /**
    * Assign fields according to information object cellTrafficTrace
    */
   public void setUsing_cellTrafficTrace() {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_CellTrafficTrace);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.ignore();
   }

   /**
    * Assign fields according to information object locationReportingControl
    */
   public void setUsing_locationReportingControl() {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_LocationReportingControl);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.ignore();
   }

   /**
    * Assign fields according to information object locationReportingFailureIndication
    */
   public void setUsing_locationReportingFailureIndication() {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_LocationReportingFailureIndication);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.ignore();
   }

   /**
    * Assign fields according to information object locationReport
    */
   public void setUsing_locationReport() {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_LocationReport);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.ignore();
   }

   /**
    * Assign fields according to information object overloadStart
    */
   public void setUsing_overloadStart() {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_OverloadStart);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.ignore();
   }

   /**
    * Assign fields according to information object overloadStop
    */
   public void setUsing_overloadStop() {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_OverloadStop);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.reject();
   }

   /**
    * Assign fields according to information object eNBDirectInformationTransfer
    */
   public void setUsing_eNBDirectInformationTransfer() {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_eNBDirectInformationTransfer);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.ignore();
   }

   /**
    * Assign fields according to information object mMEDirectInformationTransfer
    */
   public void setUsing_mMEDirectInformationTransfer() {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_MMEDirectInformationTransfer);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.ignore();
   }

   /**
    * Assign fields according to information object eNBConfigurationTransfer
    */
   public void setUsing_eNBConfigurationTransfer() {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_eNBConfigurationTransfer);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.ignore();
   }

   /**
    * Assign fields according to information object mMEConfigurationTransfer
    */
   public void setUsing_mMEConfigurationTransfer() {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_MMEConfigurationTransfer);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.ignore();
   }

   /**
    * Assign fields according to information object privateMessage
    */
   public void setUsing_privateMessage() {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_PrivateMessage);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.ignore();
   }

   /**
    * Assign fields according to information object downlinkUEAssociatedLPPaTransport
    */
   public void setUsing_downlinkUEAssociatedLPPaTransport() {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_downlinkUEAssociatedLPPaTransport);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.ignore();
   }

   /**
    * Assign fields according to information object uplinkUEAssociatedLPPaTransport
    */
   public void setUsing_uplinkUEAssociatedLPPaTransport() {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_uplinkUEAssociatedLPPaTransport);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.ignore();
   }

   /**
    * Assign fields according to information object downlinkNonUEAssociatedLPPaTransport
    */
   public void setUsing_downlinkNonUEAssociatedLPPaTransport() {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_downlinkNonUEAssociatedLPPaTransport);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.ignore();
   }

   /**
    * Assign fields according to information object uplinkNonUEAssociatedLPPaTransport
    */
   public void setUsing_uplinkNonUEAssociatedLPPaTransport() {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_uplinkNonUEAssociatedLPPaTransport);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.ignore();
   }

   /**
    * Assign fields according to information object pWSRestartIndication
    */
   public void setUsing_pWSRestartIndication() {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_PWSRestartIndication);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.ignore();
   }

   /**
    * Assign fields according to information object rerouteNASRequest
    */
   public void setUsing_rerouteNASRequest() {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_RerouteNASRequest);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.reject();
   }

   /**
    * Assign fields according to information object pWSFailureIndication
    */
   public void setUsing_pWSFailureIndication() {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_PWSFailureIndication);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.ignore();
   }

   /**
    * Assign fields according to information object connectionEstablishmentIndication
    */
   public void setUsing_connectionEstablishmentIndication() {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_ConnectionEstablishmentIndication);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.reject();
   }

   /**
    * Assign fields according to information object nASDeliveryIndication
    */
   public void setUsing_nASDeliveryIndication() {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_NASDeliveryIndication);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.ignore();
   }

   /**
    * Assign fields according to information object retrieveUEInformation
    */
   public void setUsing_retrieveUEInformation() {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_RetrieveUEInformation);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.reject();
   }

   /**
    * Assign fields according to information object uEInformationTransfer
    */
   public void setUsing_uEInformationTransfer() {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_UEInformationTransfer);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.reject();
   }

   /**
    * Assign fields according to information object eNBCPRelocationIndication
    */
   public void setUsing_eNBCPRelocationIndication() {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_eNBCPRelocationIndication);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.reject();
   }

   /**
    * Assign fields according to information object mMECPRelocationIndication
    */
   public void setUsing_mMECPRelocationIndication() {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_MMECPRelocationIndication);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.reject();
   }

   /**
    * Assign fields according to information object secondaryRATDataUsageReport
    */
   public void setUsing_secondaryRATDataUsageReport() {
      this.procedureCode = new asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode(asn.lte.generated.S1AP_Constants._S1AP_ConstantsValues.id_SecondaryRATDataUsageReport);
      this.criticality = asn.lte.generated.S1AP_CommonDataTypes.Criticality.ignore();
   }

   /**
    * Get value of value with type set according to information object handoverPreparation
    */
   public asn.lte.generated.S1AP_PDU_Contents.HandoverPreparationFailure getValueFor_handoverPreparation() {
      return (asn.lte.generated.S1AP_PDU_Contents.HandoverPreparationFailure) this.value;
   }

   /**
    * Get value of value with type set according to information object handoverResourceAllocation
    */
   public asn.lte.generated.S1AP_PDU_Contents.HandoverFailure getValueFor_handoverResourceAllocation() {
      return (asn.lte.generated.S1AP_PDU_Contents.HandoverFailure) this.value;
   }

   /**
    * Get value of value with type set according to information object pathSwitchRequest
    */
   public asn.lte.generated.S1AP_PDU_Contents.PathSwitchRequestFailure getValueFor_pathSwitchRequest() {
      return (asn.lte.generated.S1AP_PDU_Contents.PathSwitchRequestFailure) this.value;
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode procedureCode

      buffer.getContext().eventDispatcher.startElement("procedureCode", -1);

      procedureCode = new ProcedureCode();
      procedureCode.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("procedureCode", -1);

      // decode criticality

      buffer.getContext().eventDispatcher.startElement("criticality", -1);

      {
         int tval = Criticality.decodeEnumValue (buffer);
         criticality = Criticality.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("criticality", -1);

      // decode value

      buffer.getContext().eventDispatcher.startElement("value", -1);

      value = new Asn1OpenType();
      value.decode (buffer);

      buffer.invokeCharacters(value.toString());
      buffer.getContext().eventDispatcher.endElement("value", -1);

      checkTC (true, buffer.getLazyOpenTypeDecode() ? 0 : 2, buffer.isAligned(), buffer.getContext().eventDispatcher);
   }

   public void checkTC(boolean decode, int decodeOpenTypeFlag, boolean aligned, Asn1NamedEventDispatcher eventDispatcher)
      throws Asn1Exception
   {
      /* check procedureCode */
      S1AP_ELEMENTARY_PROCEDURE _index = null;
      for(int i=0; i < _S1AP_PDU_DescriptionsValues.S1AP_ELEMENTARY_PROCEDURES.length; i++) {
         if(_S1AP_PDU_DescriptionsValues.S1AP_ELEMENTARY_PROCEDURES[i].procedureCode.equals(procedureCode)) {
            _index = _S1AP_PDU_DescriptionsValues.S1AP_ELEMENTARY_PROCEDURES[i];
            break;
         }
      }
      if (null == _index) {
         return;
      }

      /* check value */
      if( decode && decodeOpenTypeFlag >=1 ) {
         if(_index.UnsuccessfulOutcome != null)
         {
            try {
               Asn1PerDecodeBuffer buffer = new Asn1PerDecodeBuffer(((Asn1OpenType)value).value, aligned);
               buffer.setLazyOpenTypeDecode(decodeOpenTypeFlag == 1);
               if (eventDispatcher != null)buffer.getContext().eventDispatcher = eventDispatcher;
               buffer.getContext().eventDispatcher.startElement("value", -1);

               String className = _index.UnsuccessfulOutcome.actualType.getName();
               if (className.lastIndexOf('.') > 0) {
                  className = className.substring (className.lastIndexOf (".")+1);
               }
               buffer.getContext().eventDispatcher.startElement(className, -1);

               value = Asn1Type.decode(buffer, _index.UnsuccessfulOutcome);

               buffer.getContext().eventDispatcher.endElement(className, -1);

               buffer.getContext().eventDispatcher.endElement("value", -1);
            }
            catch (java.io.IOException e) {
               throw new Asn1Exception(e.toString());
            }
         }
      }

      /* use -strict option to validate the "criticality" element */
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (procedureCode.value == 0) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-HandoverPreparation\n");
      }
      else if (procedureCode.value == 1) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-HandoverResourceAllocation\n");
      }
      else if (procedureCode.value == 3) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-PathSwitchRequest\n");
      }
      else if (procedureCode.value == 5) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-E-RABSetup\n");
      }
      else if (procedureCode.value == 6) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-E-RABModify\n");
      }
      else if (procedureCode.value == 7) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-E-RABRelease\n");
      }
      else if (procedureCode.value == 9) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-InitialContextSetup\n");
      }
      else if (procedureCode.value == 4) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-HandoverCancel\n");
      }
      else if (procedureCode.value == 43) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-Kill\n");
      }
      else if (procedureCode.value == 14) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-Reset\n");
      }
      else if (procedureCode.value == 17) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-S1Setup\n");
      }
      else if (procedureCode.value == 21) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-UEContextModification\n");
      }
      else if (procedureCode.value == 23) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-UEContextRelease\n");
      }
      else if (procedureCode.value == 29) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-ENBConfigurationUpdate\n");
      }
      else if (procedureCode.value == 30) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-MMEConfigurationUpdate\n");
      }
      else if (procedureCode.value == 36) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-WriteReplaceWarning\n");
      }
      else if (procedureCode.value == 48) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-UERadioCapabilityMatch\n");
      }
      else if (procedureCode.value == 50) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-E-RABModificationIndication\n");
      }
      else if (procedureCode.value == 53) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-UEContextModificationIndication\n");
      }
      else if (procedureCode.value == 55) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-UEContextSuspend\n");
      }
      else if (procedureCode.value == 56) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-UEContextResume\n");
      }
      else if (procedureCode.value == 2) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-HandoverNotification\n");
      }
      else if (procedureCode.value == 8) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-E-RABReleaseIndication\n");
      }
      else if (procedureCode.value == 10) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-Paging\n");
      }
      else if (procedureCode.value == 11) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-downlinkNASTransport\n");
      }
      else if (procedureCode.value == 12) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-initialUEMessage\n");
      }
      else if (procedureCode.value == 13) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-uplinkNASTransport\n");
      }
      else if (procedureCode.value == 15) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-ErrorIndication\n");
      }
      else if (procedureCode.value == 16) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-NASNonDeliveryIndication\n");
      }
      else if (procedureCode.value == 18) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-UEContextReleaseRequest\n");
      }
      else if (procedureCode.value == 19) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-DownlinkS1cdma2000tunnelling\n");
      }
      else if (procedureCode.value == 20) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-UplinkS1cdma2000tunnelling\n");
      }
      else if (procedureCode.value == 22) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-UECapabilityInfoIndication\n");
      }
      else if (procedureCode.value == 24) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-eNBStatusTransfer\n");
      }
      else if (procedureCode.value == 25) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-MMEStatusTransfer\n");
      }
      else if (procedureCode.value == 26) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-DeactivateTrace\n");
      }
      else if (procedureCode.value == 27) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-TraceStart\n");
      }
      else if (procedureCode.value == 28) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-TraceFailureIndication\n");
      }
      else if (procedureCode.value == 42) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-CellTrafficTrace\n");
      }
      else if (procedureCode.value == 31) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-LocationReportingControl\n");
      }
      else if (procedureCode.value == 32) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-LocationReportingFailureIndication\n");
      }
      else if (procedureCode.value == 33) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-LocationReport\n");
      }
      else if (procedureCode.value == 34) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-OverloadStart\n");
      }
      else if (procedureCode.value == 35) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-OverloadStop\n");
      }
      else if (procedureCode.value == 37) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-eNBDirectInformationTransfer\n");
      }
      else if (procedureCode.value == 38) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-MMEDirectInformationTransfer\n");
      }
      else if (procedureCode.value == 40) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-eNBConfigurationTransfer\n");
      }
      else if (procedureCode.value == 41) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-MMEConfigurationTransfer\n");
      }
      else if (procedureCode.value == 39) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-PrivateMessage\n");
      }
      else if (procedureCode.value == 44) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-downlinkUEAssociatedLPPaTransport\n");
      }
      else if (procedureCode.value == 45) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-uplinkUEAssociatedLPPaTransport\n");
      }
      else if (procedureCode.value == 46) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-downlinkNonUEAssociatedLPPaTransport\n");
      }
      else if (procedureCode.value == 47) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-uplinkNonUEAssociatedLPPaTransport\n");
      }
      else if (procedureCode.value == 49) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-PWSRestartIndication\n");
      }
      else if (procedureCode.value == 52) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-RerouteNASRequest\n");
      }
      else if (procedureCode.value == 51) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-PWSFailureIndication\n");
      }
      else if (procedureCode.value == 54) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-ConnectionEstablishmentIndication\n");
      }
      else if (procedureCode.value == 57) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-NASDeliveryIndication\n");
      }
      else if (procedureCode.value == 58) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-RetrieveUEInformation\n");
      }
      else if (procedureCode.value == 59) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-UEInformationTransfer\n");
      }
      else if (procedureCode.value == 60) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-eNBCPRelocationIndication\n");
      }
      else if (procedureCode.value == 61) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-MMECPRelocationIndication\n");
      }
      else if (procedureCode.value == 62) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-SecondaryRATDataUsageReport\n");
      }

      if (criticality != null) {
         criticality.print (_sb, "criticality", _level+1);
      }
      if (value != null) {
         String tmpName = value.getAsn1TypeName();
         if (tmpName != null && tmpName != "")  {
            tmpName = "value" + " (" + tmpName + ")";
         }
         else  {
            tmpName = "value";
         }
         value.print (_sb, tmpName, _level+1);
      }
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
