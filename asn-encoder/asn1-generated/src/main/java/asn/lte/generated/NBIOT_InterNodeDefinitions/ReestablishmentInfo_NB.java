/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NBIOT_InterNodeDefinitions;

import com.objsys.asn1j.runtime.*;
import asn.lte.generated.EUTRA_RRC_Definitions.PhysCellId;
import asn.lte.generated.EUTRA_RRC_Definitions.ShortMAC_I;
import asn.lte.generated.EUTRA_InterNodeDefinitions.AdditionalReestabInfoList;

public class ReestablishmentInfo_NB extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NBIOT_InterNodeDefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ReestablishmentInfo-NB";
   }

   public PhysCellId sourcePhysCellId_r13;
   public ShortMAC_I targetCellShortMAC_I_r13;
   public AdditionalReestabInfoList additionalReestabInfoList_r13;  // optional
   public Asn1OpenExt extElem1;

   public ReestablishmentInfo_NB () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ReestablishmentInfo_NB (
      PhysCellId sourcePhysCellId_r13_,
      ShortMAC_I targetCellShortMAC_I_r13_,
      AdditionalReestabInfoList additionalReestabInfoList_r13_
   ) {
      super();
      sourcePhysCellId_r13 = sourcePhysCellId_r13_;
      targetCellShortMAC_I_r13 = targetCellShortMAC_I_r13_;
      additionalReestabInfoList_r13 = additionalReestabInfoList_r13_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public ReestablishmentInfo_NB (
      PhysCellId sourcePhysCellId_r13_,
      ShortMAC_I targetCellShortMAC_I_r13_
   ) {
      super();
      sourcePhysCellId_r13 = sourcePhysCellId_r13_;
      targetCellShortMAC_I_r13 = targetCellShortMAC_I_r13_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public ReestablishmentInfo_NB (long sourcePhysCellId_r13_,
      ShortMAC_I targetCellShortMAC_I_r13_,
      AdditionalReestabInfoList additionalReestabInfoList_r13_
   ) {
      super();
      sourcePhysCellId_r13 = new PhysCellId (sourcePhysCellId_r13_);
      targetCellShortMAC_I_r13 = targetCellShortMAC_I_r13_;
      additionalReestabInfoList_r13 = additionalReestabInfoList_r13_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public ReestablishmentInfo_NB (
      long sourcePhysCellId_r13_,
      ShortMAC_I targetCellShortMAC_I_r13_
   ) {
      super();
      sourcePhysCellId_r13 = new PhysCellId (sourcePhysCellId_r13_);
      targetCellShortMAC_I_r13 = targetCellShortMAC_I_r13_;
   }

   public void init () {
      sourcePhysCellId_r13 = null;
      targetCellShortMAC_I_r13 = null;
      additionalReestabInfoList_r13 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return sourcePhysCellId_r13;
         case 1: return targetCellShortMAC_I_r13;
         case 2: return additionalReestabInfoList_r13;
         case 3: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "sourcePhysCellId-r13";
         case 1: return "targetCellShortMAC-I-r13";
         case 2: return "additionalReestabInfoList-r13";
         case 3: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean additionalReestabInfoList_r13Present = buffer.decodeBit ("additionalReestabInfoList_r13Present");

      // decode sourcePhysCellId_r13

      buffer.getContext().eventDispatcher.startElement("sourcePhysCellId_r13", -1);

      sourcePhysCellId_r13 = new PhysCellId();
      sourcePhysCellId_r13.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("sourcePhysCellId_r13", -1);

      // decode targetCellShortMAC_I_r13

      buffer.getContext().eventDispatcher.startElement("targetCellShortMAC_I_r13", -1);

      targetCellShortMAC_I_r13 = new ShortMAC_I();
      targetCellShortMAC_I_r13.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("targetCellShortMAC_I_r13", -1);

      // decode additionalReestabInfoList_r13

      if (additionalReestabInfoList_r13Present) {
         buffer.getContext().eventDispatcher.startElement("additionalReestabInfoList_r13", -1);

         additionalReestabInfoList_r13 = new AdditionalReestabInfoList();
         additionalReestabInfoList_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("additionalReestabInfoList_r13", -1);
      }
      else {
         additionalReestabInfoList_r13 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (sourcePhysCellId_r13 != null) sourcePhysCellId_r13.print (_sb, "sourcePhysCellId_r13", _level+1);
      if (targetCellShortMAC_I_r13 != null) targetCellShortMAC_I_r13.print (_sb, "targetCellShortMAC_I_r13", _level+1);
      if (additionalReestabInfoList_r13 != null) additionalReestabInfoList_r13.print (_sb, "additionalReestabInfoList_r13", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
