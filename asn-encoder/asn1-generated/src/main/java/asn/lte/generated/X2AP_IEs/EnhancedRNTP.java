/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.X2AP_IEs;

import com.objsys.asn1j.runtime.*;

public class EnhancedRNTP extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_X2AP_IEsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "EnhancedRNTP";
   }

   public Asn1BitString enhancedRNTPBitmap;
   public RNTP_Threshold rNTP_High_Power_Threshold = null;
   public EnhancedRNTPStartTime enhancedRNTPStartTime;  // optional
   public EnhancedRNTP_iE_Extensions iE_Extensions;  // optional
   public Asn1OpenExt extElem1;

   public EnhancedRNTP () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public EnhancedRNTP (
      Asn1BitString enhancedRNTPBitmap_,
      RNTP_Threshold rNTP_High_Power_Threshold_,
      EnhancedRNTPStartTime enhancedRNTPStartTime_,
      EnhancedRNTP_iE_Extensions iE_Extensions_
   ) {
      super();
      enhancedRNTPBitmap = enhancedRNTPBitmap_;
      rNTP_High_Power_Threshold = rNTP_High_Power_Threshold_;
      enhancedRNTPStartTime = enhancedRNTPStartTime_;
      iE_Extensions = iE_Extensions_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public EnhancedRNTP (
      Asn1BitString enhancedRNTPBitmap_,
      RNTP_Threshold rNTP_High_Power_Threshold_
   ) {
      super();
      enhancedRNTPBitmap = enhancedRNTPBitmap_;
      rNTP_High_Power_Threshold = rNTP_High_Power_Threshold_;
   }

   public void init () {
      enhancedRNTPBitmap = null;
      rNTP_High_Power_Threshold = null;
      enhancedRNTPStartTime = null;
      iE_Extensions = null;
      extElem1 = null;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return enhancedRNTPBitmap;
         case 1: return rNTP_High_Power_Threshold;
         case 2: return enhancedRNTPStartTime;
         case 3: return iE_Extensions;
         case 4: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "enhancedRNTPBitmap";
         case 1: return "rNTP-High-Power-Threshold";
         case 2: return "enhancedRNTPStartTime";
         case 3: return "iE-Extensions";
         case 4: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean enhancedRNTPStartTimePresent = buffer.decodeBit ("enhancedRNTPStartTimePresent");
      boolean iE_ExtensionsPresent = buffer.decodeBit ("iE_ExtensionsPresent");

      // decode enhancedRNTPBitmap

      buffer.getContext().eventDispatcher.startElement("enhancedRNTPBitmap", -1);

      enhancedRNTPBitmap = new Asn1BitString();
      boolean extbit_1 = buffer.decodeBit ("extbit_1");
      if (!extbit_1) {
         enhancedRNTPBitmap.decode (buffer, 12, 8800);
      }
      else {
         enhancedRNTPBitmap.decode (buffer);
      }

      buffer.invokeCharacters(enhancedRNTPBitmap.toString());
      buffer.getContext().eventDispatcher.endElement("enhancedRNTPBitmap", -1);

      // decode rNTP_High_Power_Threshold

      buffer.getContext().eventDispatcher.startElement("rNTP_High_Power_Threshold", -1);

      {
         int tval = RNTP_Threshold.decodeEnumValue (buffer);
         rNTP_High_Power_Threshold = RNTP_Threshold.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("rNTP_High_Power_Threshold", -1);

      // decode enhancedRNTPStartTime

      if (enhancedRNTPStartTimePresent) {
         buffer.getContext().eventDispatcher.startElement("enhancedRNTPStartTime", -1);

         enhancedRNTPStartTime = new EnhancedRNTPStartTime();
         enhancedRNTPStartTime.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("enhancedRNTPStartTime", -1);
      }
      else {
         enhancedRNTPStartTime = null;
      }

      // decode iE_Extensions

      if (iE_ExtensionsPresent) {
         buffer.getContext().eventDispatcher.startElement("iE_Extensions", -1);

         iE_Extensions = new EnhancedRNTP_iE_Extensions();
         iE_Extensions.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("iE_Extensions", -1);
      }
      else {
         iE_Extensions = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (enhancedRNTPBitmap != null) enhancedRNTPBitmap.print (_sb, "enhancedRNTPBitmap", _level+1);
      if (rNTP_High_Power_Threshold != null) rNTP_High_Power_Threshold.print (_sb, "rNTP_High_Power_Threshold", _level+1);
      if (enhancedRNTPStartTime != null) enhancedRNTPStartTime.print (_sb, "enhancedRNTPStartTime", _level+1);
      if (iE_Extensions != null) iE_Extensions.print (_sb, "iE_Extensions", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
