/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.LPPA_IEs;

import com.objsys.asn1j.runtime.*;

public class ULConfiguration extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPPA_IEsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ULConfiguration";
   }

   public PCI pci;
   public EARFCN ul_earfcn;
   public Asn1Integer timingAdvanceType1;  // optional
   public Asn1Integer timingAdvanceType2;  // optional
   public Asn1Integer numberOfTransmissions;
   public SRSConfigurationForAllCells srsConfiguration;
   public Asn1OpenExt extElem1;

   public ULConfiguration () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ULConfiguration (
      PCI pci_,
      EARFCN ul_earfcn_,
      Asn1Integer timingAdvanceType1_,
      Asn1Integer timingAdvanceType2_,
      Asn1Integer numberOfTransmissions_,
      SRSConfigurationForAllCells srsConfiguration_
   ) {
      super();
      pci = pci_;
      ul_earfcn = ul_earfcn_;
      timingAdvanceType1 = timingAdvanceType1_;
      timingAdvanceType2 = timingAdvanceType2_;
      numberOfTransmissions = numberOfTransmissions_;
      srsConfiguration = srsConfiguration_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public ULConfiguration (
      PCI pci_,
      EARFCN ul_earfcn_,
      Asn1Integer numberOfTransmissions_,
      SRSConfigurationForAllCells srsConfiguration_
   ) {
      super();
      pci = pci_;
      ul_earfcn = ul_earfcn_;
      numberOfTransmissions = numberOfTransmissions_;
      srsConfiguration = srsConfiguration_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public ULConfiguration (long pci_,
      long ul_earfcn_,
      long timingAdvanceType1_,
      long timingAdvanceType2_,
      long numberOfTransmissions_,
      SRSConfigurationForAllCells srsConfiguration_
   ) {
      super();
      pci = new PCI (pci_);
      ul_earfcn = new EARFCN (ul_earfcn_);
      timingAdvanceType1 = new Asn1Integer (timingAdvanceType1_);
      timingAdvanceType2 = new Asn1Integer (timingAdvanceType2_);
      numberOfTransmissions = new Asn1Integer (numberOfTransmissions_);
      srsConfiguration = srsConfiguration_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public ULConfiguration (
      long pci_,
      long ul_earfcn_,
      long numberOfTransmissions_,
      SRSConfigurationForAllCells srsConfiguration_
   ) {
      super();
      pci = new PCI (pci_);
      ul_earfcn = new EARFCN (ul_earfcn_);
      numberOfTransmissions = new Asn1Integer (numberOfTransmissions_);
      srsConfiguration = srsConfiguration_;
   }

   public void init () {
      pci = null;
      ul_earfcn = null;
      timingAdvanceType1 = null;
      timingAdvanceType2 = null;
      numberOfTransmissions = null;
      srsConfiguration = null;
      extElem1 = null;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return pci;
         case 1: return ul_earfcn;
         case 2: return timingAdvanceType1;
         case 3: return timingAdvanceType2;
         case 4: return numberOfTransmissions;
         case 5: return srsConfiguration;
         case 6: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "pci";
         case 1: return "ul-earfcn";
         case 2: return "timingAdvanceType1";
         case 3: return "timingAdvanceType2";
         case 4: return "numberOfTransmissions";
         case 5: return "srsConfiguration";
         case 6: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean timingAdvanceType1Present = buffer.decodeBit ("timingAdvanceType1Present");
      boolean timingAdvanceType2Present = buffer.decodeBit ("timingAdvanceType2Present");

      // decode pci

      buffer.getContext().eventDispatcher.startElement("pci", -1);

      pci = new PCI();
      pci.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("pci", -1);

      // decode ul_earfcn

      buffer.getContext().eventDispatcher.startElement("ul_earfcn", -1);

      ul_earfcn = new EARFCN();
      ul_earfcn.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("ul_earfcn", -1);

      // decode timingAdvanceType1

      if (timingAdvanceType1Present) {
         buffer.getContext().eventDispatcher.startElement("timingAdvanceType1", -1);

         timingAdvanceType1 = new Asn1Integer();
         timingAdvanceType1.decode (buffer, 0, 7690);

         buffer.invokeCharacters(timingAdvanceType1.toString());
         buffer.getContext().eventDispatcher.endElement("timingAdvanceType1", -1);
      }
      else {
         timingAdvanceType1 = null;
      }

      // decode timingAdvanceType2

      if (timingAdvanceType2Present) {
         buffer.getContext().eventDispatcher.startElement("timingAdvanceType2", -1);

         timingAdvanceType2 = new Asn1Integer();
         timingAdvanceType2.decode (buffer, 0, 7690);

         buffer.invokeCharacters(timingAdvanceType2.toString());
         buffer.getContext().eventDispatcher.endElement("timingAdvanceType2", -1);
      }
      else {
         timingAdvanceType2 = null;
      }

      // decode numberOfTransmissions

      buffer.getContext().eventDispatcher.startElement("numberOfTransmissions", -1);

      numberOfTransmissions = new Asn1Integer();
      boolean extbit_1 = buffer.decodeBit ("extbit_1");
      if (!extbit_1) {
         numberOfTransmissions.decode (buffer, 0, 500);
      }
      else {
         numberOfTransmissions.decode (buffer);
      }

      buffer.invokeCharacters(numberOfTransmissions.toString());
      buffer.getContext().eventDispatcher.endElement("numberOfTransmissions", -1);

      // decode srsConfiguration

      buffer.getContext().eventDispatcher.startElement("srsConfiguration", -1);

      srsConfiguration = new SRSConfigurationForAllCells();
      srsConfiguration.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("srsConfiguration", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (pci != null) pci.print (_sb, "pci", _level+1);
      if (ul_earfcn != null) ul_earfcn.print (_sb, "ul_earfcn", _level+1);
      if (timingAdvanceType1 != null) timingAdvanceType1.print (_sb, "timingAdvanceType1", _level+1);
      if (timingAdvanceType2 != null) timingAdvanceType2.print (_sb, "timingAdvanceType2", _level+1);
      if (numberOfTransmissions != null) numberOfTransmissions.print (_sb, "numberOfTransmissions", _level+1);
      if (srsConfiguration != null) srsConfiguration.print (_sb, "srsConfiguration", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
