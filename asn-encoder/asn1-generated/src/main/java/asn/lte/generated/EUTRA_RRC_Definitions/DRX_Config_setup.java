/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class DRX_Config_setup extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public DRX_Config_setup_onDurationTimer onDurationTimer = null;
   public DRX_Config_setup_drx_InactivityTimer drx_InactivityTimer = null;
   public DRX_Config_setup_drx_RetransmissionTimer drx_RetransmissionTimer = null;
   public DRX_Config_setup_longDRX_CycleStartOffset longDRX_CycleStartOffset;
   public DRX_Config_setup_shortDRX shortDRX;  // optional

   public DRX_Config_setup () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public DRX_Config_setup (
      DRX_Config_setup_onDurationTimer onDurationTimer_,
      DRX_Config_setup_drx_InactivityTimer drx_InactivityTimer_,
      DRX_Config_setup_drx_RetransmissionTimer drx_RetransmissionTimer_,
      DRX_Config_setup_longDRX_CycleStartOffset longDRX_CycleStartOffset_,
      DRX_Config_setup_shortDRX shortDRX_
   ) {
      super();
      onDurationTimer = onDurationTimer_;
      drx_InactivityTimer = drx_InactivityTimer_;
      drx_RetransmissionTimer = drx_RetransmissionTimer_;
      longDRX_CycleStartOffset = longDRX_CycleStartOffset_;
      shortDRX = shortDRX_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public DRX_Config_setup (
      DRX_Config_setup_onDurationTimer onDurationTimer_,
      DRX_Config_setup_drx_InactivityTimer drx_InactivityTimer_,
      DRX_Config_setup_drx_RetransmissionTimer drx_RetransmissionTimer_,
      DRX_Config_setup_longDRX_CycleStartOffset longDRX_CycleStartOffset_
   ) {
      super();
      onDurationTimer = onDurationTimer_;
      drx_InactivityTimer = drx_InactivityTimer_;
      drx_RetransmissionTimer = drx_RetransmissionTimer_;
      longDRX_CycleStartOffset = longDRX_CycleStartOffset_;
   }

   public void init () {
      onDurationTimer = null;
      drx_InactivityTimer = null;
      drx_RetransmissionTimer = null;
      longDRX_CycleStartOffset = null;
      shortDRX = null;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return onDurationTimer;
         case 1: return drx_InactivityTimer;
         case 2: return drx_RetransmissionTimer;
         case 3: return longDRX_CycleStartOffset;
         case 4: return shortDRX;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "onDurationTimer";
         case 1: return "drx-InactivityTimer";
         case 2: return "drx-RetransmissionTimer";
         case 3: return "longDRX-CycleStartOffset";
         case 4: return "shortDRX";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean shortDRXPresent = buffer.decodeBit ("shortDRXPresent");

      // decode onDurationTimer

      buffer.getContext().eventDispatcher.startElement("onDurationTimer", -1);

      {
         int tval = DRX_Config_setup_onDurationTimer.decodeEnumValue (buffer);
         onDurationTimer = DRX_Config_setup_onDurationTimer.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("onDurationTimer", -1);

      // decode drx_InactivityTimer

      buffer.getContext().eventDispatcher.startElement("drx_InactivityTimer", -1);

      {
         int tval = DRX_Config_setup_drx_InactivityTimer.decodeEnumValue (buffer);
         drx_InactivityTimer = DRX_Config_setup_drx_InactivityTimer.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("drx_InactivityTimer", -1);

      // decode drx_RetransmissionTimer

      buffer.getContext().eventDispatcher.startElement("drx_RetransmissionTimer", -1);

      {
         int tval = DRX_Config_setup_drx_RetransmissionTimer.decodeEnumValue (buffer);
         drx_RetransmissionTimer = DRX_Config_setup_drx_RetransmissionTimer.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("drx_RetransmissionTimer", -1);

      // decode longDRX_CycleStartOffset

      buffer.getContext().eventDispatcher.startElement("longDRX_CycleStartOffset", -1);

      longDRX_CycleStartOffset = new DRX_Config_setup_longDRX_CycleStartOffset();
      longDRX_CycleStartOffset.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("longDRX_CycleStartOffset", -1);

      // decode shortDRX

      if (shortDRXPresent) {
         buffer.getContext().eventDispatcher.startElement("shortDRX", -1);

         shortDRX = new DRX_Config_setup_shortDRX();
         shortDRX.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("shortDRX", -1);
      }
      else {
         shortDRX = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (onDurationTimer != null) onDurationTimer.print (_sb, "onDurationTimer", _level+1);
      if (drx_InactivityTimer != null) drx_InactivityTimer.print (_sb, "drx_InactivityTimer", _level+1);
      if (drx_RetransmissionTimer != null) drx_RetransmissionTimer.print (_sb, "drx_RetransmissionTimer", _level+1);
      if (longDRX_CycleStartOffset != null) longDRX_CycleStartOffset.print (_sb, "longDRX_CycleStartOffset", _level+1);
      if (shortDRX != null) shortDRX.print (_sb, "shortDRX", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
