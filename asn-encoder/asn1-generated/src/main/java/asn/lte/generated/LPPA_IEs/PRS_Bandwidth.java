/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.LPPA_IEs;

import com.objsys.asn1j.runtime.*;

public class PRS_Bandwidth extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPPA_IEsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "PRS-Bandwidth";
   }

   // Integer constants for switch-case
   public static final int _BW6 = 0;
   public static final int _BW15 = 1;
   public static final int _BW25 = 2;
   public static final int _BW50 = 3;
   public static final int _BW75 = 4;
   public static final int _BW100 = 5;

   // Singleton instances of PRS_Bandwidth
   protected static final PRS_Bandwidth _bw6 = new PRS_Bandwidth(0);
   protected static final PRS_Bandwidth _bw15 = new PRS_Bandwidth(1);
   protected static final PRS_Bandwidth _bw25 = new PRS_Bandwidth(2);
   protected static final PRS_Bandwidth _bw50 = new PRS_Bandwidth(3);
   protected static final PRS_Bandwidth _bw75 = new PRS_Bandwidth(4);
   protected static final PRS_Bandwidth _bw100 = new PRS_Bandwidth(5);
   private static PRS_Bandwidth __undefined = new PRS_Bandwidth(-999);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    */
   protected PRS_Bandwidth (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for bw6.
    */
   public static PRS_Bandwidth bw6() {
      return _bw6;
   }

   /**
    * Singleton accessor method for bw15.
    */
   public static PRS_Bandwidth bw15() {
      return _bw15;
   }

   /**
    * Singleton accessor method for bw25.
    */
   public static PRS_Bandwidth bw25() {
      return _bw25;
   }

   /**
    * Singleton accessor method for bw50.
    */
   public static PRS_Bandwidth bw50() {
      return _bw50;
   }

   /**
    * Singleton accessor method for bw75.
    */
   public static PRS_Bandwidth bw75() {
      return _bw75;
   }

   /**
    * Singleton accessor method for bw100.
    */
   public static PRS_Bandwidth bw100() {
      return _bw100;
   }

   /** Undefined value. */
   protected static PRS_Bandwidth __undefined_() { return __undefined; }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return PRS_Bandwidth.valueOf( PRS_Bandwidth.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static PRS_Bandwidth valueOf (int _value)
   {
      switch ((int)_value) {
         case 0: return bw6();
         case 1: return bw15();
         case 2: return bw25();
         case 3: return bw50();
         case 4: return bw75();
         case 5: return bw100();
         default: return __undefined_();
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      boolean extbit = buffer.decodeBit ("extbit");

      if (extbit) {
         ui = buffer.decodeSmallNonNegWholeNumber ();

         return 0x7fffffff;
      }
      else {
         ui = (int) buffer.decodeConsWholeNumber (6);

         switch (ui) {
            case 0: ret =  0; break;
            case 1: ret =  1; break;
            case 2: ret =  2; break;
            case 3: ret =  3; break;
            case 4: ret =  4; break;
            case 5: ret =  5; break;
            default: throw new Asn1InvalidEnumException (ui);
         }
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (PRS_Bandwidth.valueOf(ret).toString());

      return ret;
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("bw6");
         case 1: return ("bw15");
         case 2: return ("bw25");
         case 3: return ("bw50");
         case 4: return ("bw75");
         case 5: return ("bw100");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
