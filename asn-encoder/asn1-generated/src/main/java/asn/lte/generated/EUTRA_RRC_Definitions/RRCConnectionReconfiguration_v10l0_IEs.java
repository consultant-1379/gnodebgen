/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class RRCConnectionReconfiguration_v10l0_IEs extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "RRCConnectionReconfiguration-v10l0-IEs";
   }

   public MobilityControlInfo_v10l0 mobilityControlInfo_v10l0;  // optional
   public SCellToAddModList_v10l0 sCellToAddModList_v10l0;  // optional
   public Asn1OctetString lateNonCriticalExtension;  // optional
   public RRCConnectionReconfiguration_v12f0_IEs nonCriticalExtension;  // optional

   public RRCConnectionReconfiguration_v10l0_IEs () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public RRCConnectionReconfiguration_v10l0_IEs (
      MobilityControlInfo_v10l0 mobilityControlInfo_v10l0_,
      SCellToAddModList_v10l0 sCellToAddModList_v10l0_,
      Asn1OctetString lateNonCriticalExtension_,
      RRCConnectionReconfiguration_v12f0_IEs nonCriticalExtension_
   ) {
      super();
      mobilityControlInfo_v10l0 = mobilityControlInfo_v10l0_;
      sCellToAddModList_v10l0 = sCellToAddModList_v10l0_;
      lateNonCriticalExtension = lateNonCriticalExtension_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public RRCConnectionReconfiguration_v10l0_IEs (MobilityControlInfo_v10l0 mobilityControlInfo_v10l0_,
      SCellToAddModList_v10l0 sCellToAddModList_v10l0_,
      byte[] lateNonCriticalExtension_,
      RRCConnectionReconfiguration_v12f0_IEs nonCriticalExtension_
   ) {
      super();
      mobilityControlInfo_v10l0 = mobilityControlInfo_v10l0_;
      sCellToAddModList_v10l0 = sCellToAddModList_v10l0_;
      lateNonCriticalExtension = new Asn1OctetString (lateNonCriticalExtension_);
      nonCriticalExtension = nonCriticalExtension_;
   }

   public void init () {
      mobilityControlInfo_v10l0 = null;
      sCellToAddModList_v10l0 = null;
      lateNonCriticalExtension = null;
      nonCriticalExtension = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return mobilityControlInfo_v10l0;
         case 1: return sCellToAddModList_v10l0;
         case 2: return lateNonCriticalExtension;
         case 3: return nonCriticalExtension;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "mobilityControlInfo-v10l0";
         case 1: return "sCellToAddModList-v10l0";
         case 2: return "lateNonCriticalExtension";
         case 3: return "nonCriticalExtension";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean mobilityControlInfo_v10l0Present = buffer.decodeBit ("mobilityControlInfo_v10l0Present");
      boolean sCellToAddModList_v10l0Present = buffer.decodeBit ("sCellToAddModList_v10l0Present");
      boolean lateNonCriticalExtensionPresent = buffer.decodeBit ("lateNonCriticalExtensionPresent");
      boolean nonCriticalExtensionPresent = buffer.decodeBit ("nonCriticalExtensionPresent");

      // decode mobilityControlInfo_v10l0

      if (mobilityControlInfo_v10l0Present) {
         buffer.getContext().eventDispatcher.startElement("mobilityControlInfo_v10l0", -1);

         mobilityControlInfo_v10l0 = new MobilityControlInfo_v10l0();
         mobilityControlInfo_v10l0.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("mobilityControlInfo_v10l0", -1);
      }
      else {
         mobilityControlInfo_v10l0 = null;
      }

      // decode sCellToAddModList_v10l0

      if (sCellToAddModList_v10l0Present) {
         buffer.getContext().eventDispatcher.startElement("sCellToAddModList_v10l0", -1);

         sCellToAddModList_v10l0 = new SCellToAddModList_v10l0();
         sCellToAddModList_v10l0.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sCellToAddModList_v10l0", -1);
      }
      else {
         sCellToAddModList_v10l0 = null;
      }

      // decode lateNonCriticalExtension

      if (lateNonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("lateNonCriticalExtension", -1);

         lateNonCriticalExtension = new Asn1OctetString();
         lateNonCriticalExtension.decode (buffer);

         buffer.invokeCharacters(lateNonCriticalExtension.toString());
         buffer.getContext().eventDispatcher.endElement("lateNonCriticalExtension", -1);
      }
      else {
         lateNonCriticalExtension = null;
      }

      // decode nonCriticalExtension

      if (nonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension = new RRCConnectionReconfiguration_v12f0_IEs();
         nonCriticalExtension.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }
      else {
         nonCriticalExtension = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (mobilityControlInfo_v10l0 != null) mobilityControlInfo_v10l0.print (_sb, "mobilityControlInfo_v10l0", _level+1);
      if (sCellToAddModList_v10l0 != null) sCellToAddModList_v10l0.print (_sb, "sCellToAddModList_v10l0", _level+1);
      if (lateNonCriticalExtension != null) lateNonCriticalExtension.print (_sb, "lateNonCriticalExtension", _level+1);
      if (nonCriticalExtension != null) nonCriticalExtension.print (_sb, "nonCriticalExtension", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
