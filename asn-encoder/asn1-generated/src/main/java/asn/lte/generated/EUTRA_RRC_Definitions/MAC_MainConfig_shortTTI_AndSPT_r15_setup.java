/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MAC_MainConfig_shortTTI_AndSPT_r15_setup extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public DRX_Config_r15 drx_Config_r15;  // optional
   public MAC_MainConfig_shortTTI_AndSPT_r15_setup_periodicBSR_Timer_r15 periodicBSR_Timer_r15 = null;  // optional
   public MAC_MainConfig_shortTTI_AndSPT_r15_setup_proc_Timeline_r15 proc_Timeline_r15 = null;  // optional
   public Asn1Integer ssr_ProhibitTimer_r15;  // optional

   public MAC_MainConfig_shortTTI_AndSPT_r15_setup () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MAC_MainConfig_shortTTI_AndSPT_r15_setup (
      DRX_Config_r15 drx_Config_r15_,
      MAC_MainConfig_shortTTI_AndSPT_r15_setup_periodicBSR_Timer_r15 periodicBSR_Timer_r15_,
      MAC_MainConfig_shortTTI_AndSPT_r15_setup_proc_Timeline_r15 proc_Timeline_r15_,
      Asn1Integer ssr_ProhibitTimer_r15_
   ) {
      super();
      drx_Config_r15 = drx_Config_r15_;
      periodicBSR_Timer_r15 = periodicBSR_Timer_r15_;
      proc_Timeline_r15 = proc_Timeline_r15_;
      ssr_ProhibitTimer_r15 = ssr_ProhibitTimer_r15_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public MAC_MainConfig_shortTTI_AndSPT_r15_setup (DRX_Config_r15 drx_Config_r15_,
      MAC_MainConfig_shortTTI_AndSPT_r15_setup_periodicBSR_Timer_r15 periodicBSR_Timer_r15_,
      MAC_MainConfig_shortTTI_AndSPT_r15_setup_proc_Timeline_r15 proc_Timeline_r15_,
      long ssr_ProhibitTimer_r15_
   ) {
      super();
      drx_Config_r15 = drx_Config_r15_;
      periodicBSR_Timer_r15 = periodicBSR_Timer_r15_;
      proc_Timeline_r15 = proc_Timeline_r15_;
      ssr_ProhibitTimer_r15 = new Asn1Integer (ssr_ProhibitTimer_r15_);
   }

   public void init () {
      drx_Config_r15 = null;
      periodicBSR_Timer_r15 = null;
      proc_Timeline_r15 = null;
      ssr_ProhibitTimer_r15 = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return drx_Config_r15;
         case 1: return periodicBSR_Timer_r15;
         case 2: return proc_Timeline_r15;
         case 3: return ssr_ProhibitTimer_r15;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "drx-Config-r15";
         case 1: return "periodicBSR-Timer-r15";
         case 2: return "proc-Timeline-r15";
         case 3: return "ssr-ProhibitTimer-r15";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean drx_Config_r15Present = buffer.decodeBit ("drx_Config_r15Present");
      boolean periodicBSR_Timer_r15Present = buffer.decodeBit ("periodicBSR_Timer_r15Present");
      boolean proc_Timeline_r15Present = buffer.decodeBit ("proc_Timeline_r15Present");
      boolean ssr_ProhibitTimer_r15Present = buffer.decodeBit ("ssr_ProhibitTimer_r15Present");

      // decode drx_Config_r15

      if (drx_Config_r15Present) {
         buffer.getContext().eventDispatcher.startElement("drx_Config_r15", -1);

         drx_Config_r15 = new DRX_Config_r15();
         drx_Config_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("drx_Config_r15", -1);
      }
      else {
         drx_Config_r15 = null;
      }

      // decode periodicBSR_Timer_r15

      if (periodicBSR_Timer_r15Present) {
         buffer.getContext().eventDispatcher.startElement("periodicBSR_Timer_r15", -1);

         int tval = MAC_MainConfig_shortTTI_AndSPT_r15_setup_periodicBSR_Timer_r15.decodeEnumValue (buffer);
         periodicBSR_Timer_r15 = MAC_MainConfig_shortTTI_AndSPT_r15_setup_periodicBSR_Timer_r15.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("periodicBSR_Timer_r15", -1);
      }
      else {
         periodicBSR_Timer_r15 = null;
      }

      // decode proc_Timeline_r15

      if (proc_Timeline_r15Present) {
         buffer.getContext().eventDispatcher.startElement("proc_Timeline_r15", -1);

         int tval = MAC_MainConfig_shortTTI_AndSPT_r15_setup_proc_Timeline_r15.decodeEnumValue (buffer);
         proc_Timeline_r15 = MAC_MainConfig_shortTTI_AndSPT_r15_setup_proc_Timeline_r15.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("proc_Timeline_r15", -1);
      }
      else {
         proc_Timeline_r15 = null;
      }

      // decode ssr_ProhibitTimer_r15

      if (ssr_ProhibitTimer_r15Present) {
         buffer.getContext().eventDispatcher.startElement("ssr_ProhibitTimer_r15", -1);

         ssr_ProhibitTimer_r15 = new Asn1Integer();
         ssr_ProhibitTimer_r15.decode (buffer, 0, 7);

         buffer.invokeCharacters(ssr_ProhibitTimer_r15.toString());
         buffer.getContext().eventDispatcher.endElement("ssr_ProhibitTimer_r15", -1);
      }
      else {
         ssr_ProhibitTimer_r15 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (drx_Config_r15 != null) drx_Config_r15.print (_sb, "drx_Config_r15", _level+1);
      if (periodicBSR_Timer_r15 != null) periodicBSR_Timer_r15.print (_sb, "periodicBSR_Timer_r15", _level+1);
      if (proc_Timeline_r15 != null) proc_Timeline_r15.print (_sb, "proc_Timeline_r15", _level+1);
      if (ssr_ProhibitTimer_r15 != null) ssr_ProhibitTimer_r15.print (_sb, "ssr_ProhibitTimer_r15", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
