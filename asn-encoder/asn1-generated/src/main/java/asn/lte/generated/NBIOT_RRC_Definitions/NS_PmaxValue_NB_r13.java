/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NBIOT_RRC_Definitions;

import com.objsys.asn1j.runtime.*;
import asn.lte.generated.EUTRA_RRC_Definitions.P_Max;
import asn.lte.generated.EUTRA_RRC_Definitions.AdditionalSpectrumEmission;

public class NS_PmaxValue_NB_r13 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NBIOT_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "NS-PmaxValue-NB-r13";
   }

   public P_Max additionalPmax_r13;  // optional
   public AdditionalSpectrumEmission additionalSpectrumEmission_r13;

   public NS_PmaxValue_NB_r13 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public NS_PmaxValue_NB_r13 (
      P_Max additionalPmax_r13_,
      AdditionalSpectrumEmission additionalSpectrumEmission_r13_
   ) {
      super();
      additionalPmax_r13 = additionalPmax_r13_;
      additionalSpectrumEmission_r13 = additionalSpectrumEmission_r13_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public NS_PmaxValue_NB_r13 (
      AdditionalSpectrumEmission additionalSpectrumEmission_r13_
   ) {
      super();
      additionalSpectrumEmission_r13 = additionalSpectrumEmission_r13_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public NS_PmaxValue_NB_r13 (long additionalPmax_r13_,
      long additionalSpectrumEmission_r13_
   ) {
      super();
      additionalPmax_r13 = new P_Max (additionalPmax_r13_);
      additionalSpectrumEmission_r13 = new AdditionalSpectrumEmission (additionalSpectrumEmission_r13_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public NS_PmaxValue_NB_r13 (
      long additionalSpectrumEmission_r13_
   ) {
      super();
      additionalSpectrumEmission_r13 = new AdditionalSpectrumEmission (additionalSpectrumEmission_r13_);
   }

   public void init () {
      additionalPmax_r13 = null;
      additionalSpectrumEmission_r13 = null;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return additionalPmax_r13;
         case 1: return additionalSpectrumEmission_r13;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "additionalPmax-r13";
         case 1: return "additionalSpectrumEmission-r13";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean additionalPmax_r13Present = buffer.decodeBit ("additionalPmax_r13Present");

      // decode additionalPmax_r13

      if (additionalPmax_r13Present) {
         buffer.getContext().eventDispatcher.startElement("additionalPmax_r13", -1);

         additionalPmax_r13 = new P_Max();
         additionalPmax_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("additionalPmax_r13", -1);
      }
      else {
         additionalPmax_r13 = null;
      }

      // decode additionalSpectrumEmission_r13

      buffer.getContext().eventDispatcher.startElement("additionalSpectrumEmission_r13", -1);

      additionalSpectrumEmission_r13 = new AdditionalSpectrumEmission();
      additionalSpectrumEmission_r13.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("additionalSpectrumEmission_r13", -1);

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (additionalPmax_r13 != null) additionalPmax_r13.print (_sb, "additionalPmax_r13", _level+1);
      if (additionalSpectrumEmission_r13 != null) additionalSpectrumEmission_r13.print (_sb, "additionalSpectrumEmission_r13", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
