/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class BandclassCDMA2000 extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "BandclassCDMA2000";
   }

   // Integer constants for switch-case
   public static final int _BC0 = 0;
   public static final int _BC1 = 1;
   public static final int _BC2 = 2;
   public static final int _BC3 = 3;
   public static final int _BC4 = 4;
   public static final int _BC5 = 5;
   public static final int _BC6 = 6;
   public static final int _BC7 = 7;
   public static final int _BC8 = 8;
   public static final int _BC9 = 9;
   public static final int _BC10 = 10;
   public static final int _BC11 = 11;
   public static final int _BC12 = 12;
   public static final int _BC13 = 13;
   public static final int _BC14 = 14;
   public static final int _BC15 = 15;
   public static final int _BC16 = 16;
   public static final int _BC17 = 17;
   public static final int _BC18_V9A0 = 18;
   public static final int _BC19_V9A0 = 19;
   public static final int _BC20_V9A0 = 20;
   public static final int _BC21_V9A0 = 21;
   public static final int _SPARE10 = 22;
   public static final int _SPARE9 = 23;
   public static final int _SPARE8 = 24;
   public static final int _SPARE7 = 25;
   public static final int _SPARE6 = 26;
   public static final int _SPARE5 = 27;
   public static final int _SPARE4 = 28;
   public static final int _SPARE3 = 29;
   public static final int _SPARE2 = 30;
   public static final int _SPARE1 = 31;

   // Singleton instances of BandclassCDMA2000
   protected static final BandclassCDMA2000 _bc0 = new BandclassCDMA2000(0);
   protected static final BandclassCDMA2000 _bc1 = new BandclassCDMA2000(1);
   protected static final BandclassCDMA2000 _bc2 = new BandclassCDMA2000(2);
   protected static final BandclassCDMA2000 _bc3 = new BandclassCDMA2000(3);
   protected static final BandclassCDMA2000 _bc4 = new BandclassCDMA2000(4);
   protected static final BandclassCDMA2000 _bc5 = new BandclassCDMA2000(5);
   protected static final BandclassCDMA2000 _bc6 = new BandclassCDMA2000(6);
   protected static final BandclassCDMA2000 _bc7 = new BandclassCDMA2000(7);
   protected static final BandclassCDMA2000 _bc8 = new BandclassCDMA2000(8);
   protected static final BandclassCDMA2000 _bc9 = new BandclassCDMA2000(9);
   protected static final BandclassCDMA2000 _bc10 = new BandclassCDMA2000(10);
   protected static final BandclassCDMA2000 _bc11 = new BandclassCDMA2000(11);
   protected static final BandclassCDMA2000 _bc12 = new BandclassCDMA2000(12);
   protected static final BandclassCDMA2000 _bc13 = new BandclassCDMA2000(13);
   protected static final BandclassCDMA2000 _bc14 = new BandclassCDMA2000(14);
   protected static final BandclassCDMA2000 _bc15 = new BandclassCDMA2000(15);
   protected static final BandclassCDMA2000 _bc16 = new BandclassCDMA2000(16);
   protected static final BandclassCDMA2000 _bc17 = new BandclassCDMA2000(17);
   protected static final BandclassCDMA2000 _bc18_v9a0 = new BandclassCDMA2000(18);
   protected static final BandclassCDMA2000 _bc19_v9a0 = new BandclassCDMA2000(19);
   protected static final BandclassCDMA2000 _bc20_v9a0 = new BandclassCDMA2000(20);
   protected static final BandclassCDMA2000 _bc21_v9a0 = new BandclassCDMA2000(21);
   protected static final BandclassCDMA2000 _spare10 = new BandclassCDMA2000(22);
   protected static final BandclassCDMA2000 _spare9 = new BandclassCDMA2000(23);
   protected static final BandclassCDMA2000 _spare8 = new BandclassCDMA2000(24);
   protected static final BandclassCDMA2000 _spare7 = new BandclassCDMA2000(25);
   protected static final BandclassCDMA2000 _spare6 = new BandclassCDMA2000(26);
   protected static final BandclassCDMA2000 _spare5 = new BandclassCDMA2000(27);
   protected static final BandclassCDMA2000 _spare4 = new BandclassCDMA2000(28);
   protected static final BandclassCDMA2000 _spare3 = new BandclassCDMA2000(29);
   protected static final BandclassCDMA2000 _spare2 = new BandclassCDMA2000(30);
   protected static final BandclassCDMA2000 _spare1 = new BandclassCDMA2000(31);
   private static BandclassCDMA2000 __undefined = new BandclassCDMA2000(-999);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    *   7
    *   8
    *   9
    *   10
    *   11
    *   12
    *   13
    *   14
    *   15
    *   16
    *   17
    *   18
    *   19
    *   20
    *   21
    *   22
    *   23
    *   24
    *   25
    *   26
    *   27
    *   28
    *   29
    *   30
    *   31
    */
   protected BandclassCDMA2000 (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for bc0.
    */
   public static BandclassCDMA2000 bc0() {
      return _bc0;
   }

   /**
    * Singleton accessor method for bc1.
    */
   public static BandclassCDMA2000 bc1() {
      return _bc1;
   }

   /**
    * Singleton accessor method for bc2.
    */
   public static BandclassCDMA2000 bc2() {
      return _bc2;
   }

   /**
    * Singleton accessor method for bc3.
    */
   public static BandclassCDMA2000 bc3() {
      return _bc3;
   }

   /**
    * Singleton accessor method for bc4.
    */
   public static BandclassCDMA2000 bc4() {
      return _bc4;
   }

   /**
    * Singleton accessor method for bc5.
    */
   public static BandclassCDMA2000 bc5() {
      return _bc5;
   }

   /**
    * Singleton accessor method for bc6.
    */
   public static BandclassCDMA2000 bc6() {
      return _bc6;
   }

   /**
    * Singleton accessor method for bc7.
    */
   public static BandclassCDMA2000 bc7() {
      return _bc7;
   }

   /**
    * Singleton accessor method for bc8.
    */
   public static BandclassCDMA2000 bc8() {
      return _bc8;
   }

   /**
    * Singleton accessor method for bc9.
    */
   public static BandclassCDMA2000 bc9() {
      return _bc9;
   }

   /**
    * Singleton accessor method for bc10.
    */
   public static BandclassCDMA2000 bc10() {
      return _bc10;
   }

   /**
    * Singleton accessor method for bc11.
    */
   public static BandclassCDMA2000 bc11() {
      return _bc11;
   }

   /**
    * Singleton accessor method for bc12.
    */
   public static BandclassCDMA2000 bc12() {
      return _bc12;
   }

   /**
    * Singleton accessor method for bc13.
    */
   public static BandclassCDMA2000 bc13() {
      return _bc13;
   }

   /**
    * Singleton accessor method for bc14.
    */
   public static BandclassCDMA2000 bc14() {
      return _bc14;
   }

   /**
    * Singleton accessor method for bc15.
    */
   public static BandclassCDMA2000 bc15() {
      return _bc15;
   }

   /**
    * Singleton accessor method for bc16.
    */
   public static BandclassCDMA2000 bc16() {
      return _bc16;
   }

   /**
    * Singleton accessor method for bc17.
    */
   public static BandclassCDMA2000 bc17() {
      return _bc17;
   }

   /**
    * Singleton accessor method for bc18_v9a0.
    */
   public static BandclassCDMA2000 bc18_v9a0() {
      return _bc18_v9a0;
   }

   /**
    * Singleton accessor method for bc19_v9a0.
    */
   public static BandclassCDMA2000 bc19_v9a0() {
      return _bc19_v9a0;
   }

   /**
    * Singleton accessor method for bc20_v9a0.
    */
   public static BandclassCDMA2000 bc20_v9a0() {
      return _bc20_v9a0;
   }

   /**
    * Singleton accessor method for bc21_v9a0.
    */
   public static BandclassCDMA2000 bc21_v9a0() {
      return _bc21_v9a0;
   }

   /**
    * Singleton accessor method for spare10.
    */
   public static BandclassCDMA2000 spare10() {
      return _spare10;
   }

   /**
    * Singleton accessor method for spare9.
    */
   public static BandclassCDMA2000 spare9() {
      return _spare9;
   }

   /**
    * Singleton accessor method for spare8.
    */
   public static BandclassCDMA2000 spare8() {
      return _spare8;
   }

   /**
    * Singleton accessor method for spare7.
    */
   public static BandclassCDMA2000 spare7() {
      return _spare7;
   }

   /**
    * Singleton accessor method for spare6.
    */
   public static BandclassCDMA2000 spare6() {
      return _spare6;
   }

   /**
    * Singleton accessor method for spare5.
    */
   public static BandclassCDMA2000 spare5() {
      return _spare5;
   }

   /**
    * Singleton accessor method for spare4.
    */
   public static BandclassCDMA2000 spare4() {
      return _spare4;
   }

   /**
    * Singleton accessor method for spare3.
    */
   public static BandclassCDMA2000 spare3() {
      return _spare3;
   }

   /**
    * Singleton accessor method for spare2.
    */
   public static BandclassCDMA2000 spare2() {
      return _spare2;
   }

   /**
    * Singleton accessor method for spare1.
    */
   public static BandclassCDMA2000 spare1() {
      return _spare1;
   }

   /** Undefined value. */
   protected static BandclassCDMA2000 __undefined_() { return __undefined; }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return BandclassCDMA2000.valueOf( BandclassCDMA2000.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static BandclassCDMA2000 valueOf (int _value)
   {
      switch ((int)_value) {
         case 0: return bc0();
         case 1: return bc1();
         case 2: return bc2();
         case 3: return bc3();
         case 4: return bc4();
         case 5: return bc5();
         case 6: return bc6();
         case 7: return bc7();
         case 8: return bc8();
         case 9: return bc9();
         case 10: return bc10();
         case 11: return bc11();
         case 12: return bc12();
         case 13: return bc13();
         case 14: return bc14();
         case 15: return bc15();
         case 16: return bc16();
         case 17: return bc17();
         case 18: return bc18_v9a0();
         case 19: return bc19_v9a0();
         case 20: return bc20_v9a0();
         case 21: return bc21_v9a0();
         case 22: return spare10();
         case 23: return spare9();
         case 24: return spare8();
         case 25: return spare7();
         case 26: return spare6();
         case 27: return spare5();
         case 28: return spare4();
         case 29: return spare3();
         case 30: return spare2();
         case 31: return spare1();
         default: return __undefined_();
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      boolean extbit = buffer.decodeBit ("extbit");

      if (extbit) {
         ui = buffer.decodeSmallNonNegWholeNumber ();

         return 0x7fffffff;
      }
      else {
         ui = (int) buffer.decodeConsWholeNumber (32);

         switch (ui) {
            case 0: ret =  0; break;
            case 1: ret =  1; break;
            case 2: ret =  2; break;
            case 3: ret =  3; break;
            case 4: ret =  4; break;
            case 5: ret =  5; break;
            case 6: ret =  6; break;
            case 7: ret =  7; break;
            case 8: ret =  8; break;
            case 9: ret =  9; break;
            case 10: ret =  10; break;
            case 11: ret =  11; break;
            case 12: ret =  12; break;
            case 13: ret =  13; break;
            case 14: ret =  14; break;
            case 15: ret =  15; break;
            case 16: ret =  16; break;
            case 17: ret =  17; break;
            case 18: ret =  18; break;
            case 19: ret =  19; break;
            case 20: ret =  20; break;
            case 21: ret =  21; break;
            case 22: ret =  22; break;
            case 23: ret =  23; break;
            case 24: ret =  24; break;
            case 25: ret =  25; break;
            case 26: ret =  26; break;
            case 27: ret =  27; break;
            case 28: ret =  28; break;
            case 29: ret =  29; break;
            case 30: ret =  30; break;
            case 31: ret =  31; break;
            default: throw new Asn1InvalidEnumException (ui);
         }
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (BandclassCDMA2000.valueOf(ret).toString());

      return ret;
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("bc0");
         case 1: return ("bc1");
         case 2: return ("bc2");
         case 3: return ("bc3");
         case 4: return ("bc4");
         case 5: return ("bc5");
         case 6: return ("bc6");
         case 7: return ("bc7");
         case 8: return ("bc8");
         case 9: return ("bc9");
         case 10: return ("bc10");
         case 11: return ("bc11");
         case 12: return ("bc12");
         case 13: return ("bc13");
         case 14: return ("bc14");
         case 15: return ("bc15");
         case 16: return ("bc16");
         case 17: return ("bc17");
         case 18: return ("bc18-v9a0");
         case 19: return ("bc19-v9a0");
         case 20: return ("bc20-v9a0");
         case 21: return ("bc21-v9a0");
         case 22: return ("spare10");
         case 23: return ("spare9");
         case 24: return ("spare8");
         case 25: return ("spare7");
         case 26: return ("spare6");
         case 27: return ("spare5");
         case 28: return ("spare4");
         case 29: return ("spare3");
         case 30: return ("spare2");
         case 31: return ("spare1");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
