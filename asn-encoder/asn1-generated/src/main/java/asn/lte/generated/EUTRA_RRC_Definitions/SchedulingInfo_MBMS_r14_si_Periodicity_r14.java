/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SchedulingInfo_MBMS_r14_si_Periodicity_r14 extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ENUMERATED";
   }

   // Integer constants for switch-case
   public static final int _RF16 = 0;
   public static final int _RF32 = 1;
   public static final int _RF64 = 2;
   public static final int _RF128 = 3;
   public static final int _RF256 = 4;
   public static final int _RF512 = 5;

   // Singleton instances of SchedulingInfo_MBMS_r14_si_Periodicity_r14
   protected static final SchedulingInfo_MBMS_r14_si_Periodicity_r14 _rf16 = new SchedulingInfo_MBMS_r14_si_Periodicity_r14(0);
   protected static final SchedulingInfo_MBMS_r14_si_Periodicity_r14 _rf32 = new SchedulingInfo_MBMS_r14_si_Periodicity_r14(1);
   protected static final SchedulingInfo_MBMS_r14_si_Periodicity_r14 _rf64 = new SchedulingInfo_MBMS_r14_si_Periodicity_r14(2);
   protected static final SchedulingInfo_MBMS_r14_si_Periodicity_r14 _rf128 = new SchedulingInfo_MBMS_r14_si_Periodicity_r14(3);
   protected static final SchedulingInfo_MBMS_r14_si_Periodicity_r14 _rf256 = new SchedulingInfo_MBMS_r14_si_Periodicity_r14(4);
   protected static final SchedulingInfo_MBMS_r14_si_Periodicity_r14 _rf512 = new SchedulingInfo_MBMS_r14_si_Periodicity_r14(5);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    */
   protected SchedulingInfo_MBMS_r14_si_Periodicity_r14 (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for rf16.
    */
   public static SchedulingInfo_MBMS_r14_si_Periodicity_r14 rf16() {
      return _rf16;
   }

   /**
    * Singleton accessor method for rf32.
    */
   public static SchedulingInfo_MBMS_r14_si_Periodicity_r14 rf32() {
      return _rf32;
   }

   /**
    * Singleton accessor method for rf64.
    */
   public static SchedulingInfo_MBMS_r14_si_Periodicity_r14 rf64() {
      return _rf64;
   }

   /**
    * Singleton accessor method for rf128.
    */
   public static SchedulingInfo_MBMS_r14_si_Periodicity_r14 rf128() {
      return _rf128;
   }

   /**
    * Singleton accessor method for rf256.
    */
   public static SchedulingInfo_MBMS_r14_si_Periodicity_r14 rf256() {
      return _rf256;
   }

   /**
    * Singleton accessor method for rf512.
    */
   public static SchedulingInfo_MBMS_r14_si_Periodicity_r14 rf512() {
      return _rf512;
   }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return SchedulingInfo_MBMS_r14_si_Periodicity_r14.valueOf( SchedulingInfo_MBMS_r14_si_Periodicity_r14.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static SchedulingInfo_MBMS_r14_si_Periodicity_r14 valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 0: return rf16();
         case 1: return rf32();
         case 2: return rf64();
         case 3: return rf128();
         case 4: return rf256();
         case 5: return rf512();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      ui = (int) buffer.decodeConsWholeNumber (6);

      switch (ui) {
         case 0: ret =  0; break;
         case 1: ret =  1; break;
         case 2: ret =  2; break;
         case 3: ret =  3; break;
         case 4: ret =  4; break;
         case 5: ret =  5; break;
         default: throw new Asn1InvalidEnumException (ui);
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (SchedulingInfo_MBMS_r14_si_Periodicity_r14.valueOf(ret).toString());

      return ret;
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("rf16");
         case 1: return ("rf32");
         case 2: return ("rf64");
         case 3: return ("rf128");
         case 4: return ("rf256");
         case 5: return ("rf512");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
