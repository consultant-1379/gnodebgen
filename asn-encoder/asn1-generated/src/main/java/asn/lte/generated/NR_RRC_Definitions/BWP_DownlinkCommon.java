/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class BWP_DownlinkCommon extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "BWP-DownlinkCommon";
   }

   public BWP genericParameters;
   public BWP_DownlinkCommon_pdcch_ConfigCommon pdcch_ConfigCommon;  // optional
   public BWP_DownlinkCommon_pdsch_ConfigCommon pdsch_ConfigCommon;  // optional
   public Asn1OpenExt extElem1;

   public BWP_DownlinkCommon () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public BWP_DownlinkCommon (
      BWP genericParameters_,
      BWP_DownlinkCommon_pdcch_ConfigCommon pdcch_ConfigCommon_,
      BWP_DownlinkCommon_pdsch_ConfigCommon pdsch_ConfigCommon_
   ) {
      super();
      genericParameters = genericParameters_;
      pdcch_ConfigCommon = pdcch_ConfigCommon_;
      pdsch_ConfigCommon = pdsch_ConfigCommon_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public BWP_DownlinkCommon (
      BWP genericParameters_
   ) {
      super();
      genericParameters = genericParameters_;
   }

   public void init () {
      genericParameters = null;
      pdcch_ConfigCommon = null;
      pdsch_ConfigCommon = null;
      extElem1 = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return genericParameters;
         case 1: return pdcch_ConfigCommon;
         case 2: return pdsch_ConfigCommon;
         case 3: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "genericParameters";
         case 1: return "pdcch-ConfigCommon";
         case 2: return "pdsch-ConfigCommon";
         case 3: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean pdcch_ConfigCommonPresent = buffer.decodeBit ("pdcch_ConfigCommonPresent");
      boolean pdsch_ConfigCommonPresent = buffer.decodeBit ("pdsch_ConfigCommonPresent");

      // decode genericParameters

      buffer.getContext().eventDispatcher.startElement("genericParameters", -1);

      genericParameters = new BWP();
      genericParameters.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("genericParameters", -1);

      // decode pdcch_ConfigCommon

      if (pdcch_ConfigCommonPresent) {
         buffer.getContext().eventDispatcher.startElement("pdcch_ConfigCommon", -1);

         pdcch_ConfigCommon = new BWP_DownlinkCommon_pdcch_ConfigCommon();
         pdcch_ConfigCommon.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("pdcch_ConfigCommon", -1);
      }
      else {
         pdcch_ConfigCommon = null;
      }

      // decode pdsch_ConfigCommon

      if (pdsch_ConfigCommonPresent) {
         buffer.getContext().eventDispatcher.startElement("pdsch_ConfigCommon", -1);

         pdsch_ConfigCommon = new BWP_DownlinkCommon_pdsch_ConfigCommon();
         pdsch_ConfigCommon.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("pdsch_ConfigCommon", -1);
      }
      else {
         pdsch_ConfigCommon = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (genericParameters != null) genericParameters.print (_sb, "genericParameters", _level+1);
      if (pdcch_ConfigCommon != null) pdcch_ConfigCommon.print (_sb, "pdcch_ConfigCommon", _level+1);
      if (pdsch_ConfigCommon != null) pdsch_ConfigCommon.print (_sb, "pdsch_ConfigCommon", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
