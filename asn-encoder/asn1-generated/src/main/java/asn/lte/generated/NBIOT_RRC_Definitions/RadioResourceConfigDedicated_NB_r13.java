/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NBIOT_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class RadioResourceConfigDedicated_NB_r13 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NBIOT_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "RadioResourceConfigDedicated-NB-r13";
   }

   public SRB_ToAddModList_NB_r13 srb_ToAddModList_r13;  // optional
   public DRB_ToAddModList_NB_r13 drb_ToAddModList_r13;  // optional
   public DRB_ToReleaseList_NB_r13 drb_ToReleaseList_r13;  // optional
   public RadioResourceConfigDedicated_NB_r13_mac_MainConfig_r13 mac_MainConfig_r13;  // optional
   public PhysicalConfigDedicated_NB_r13 physicalConfigDedicated_r13;  // optional
   public RLF_TimersAndConstants_NB_r13 rlf_TimersAndConstants_r13;  // optional
   public boolean mV2ExtPresent;
   public SchedulingRequestConfig_NB_r15 schedulingRequestConfig_r15;  // optional
   public Asn1OpenExt extElem1;

   public RadioResourceConfigDedicated_NB_r13 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public RadioResourceConfigDedicated_NB_r13 (
      SRB_ToAddModList_NB_r13 srb_ToAddModList_r13_,
      DRB_ToAddModList_NB_r13 drb_ToAddModList_r13_,
      DRB_ToReleaseList_NB_r13 drb_ToReleaseList_r13_,
      RadioResourceConfigDedicated_NB_r13_mac_MainConfig_r13 mac_MainConfig_r13_,
      PhysicalConfigDedicated_NB_r13 physicalConfigDedicated_r13_,
      RLF_TimersAndConstants_NB_r13 rlf_TimersAndConstants_r13_,
      SchedulingRequestConfig_NB_r15 schedulingRequestConfig_r15_
   ) {
      super();
      srb_ToAddModList_r13 = srb_ToAddModList_r13_;
      drb_ToAddModList_r13 = drb_ToAddModList_r13_;
      drb_ToReleaseList_r13 = drb_ToReleaseList_r13_;
      mac_MainConfig_r13 = mac_MainConfig_r13_;
      physicalConfigDedicated_r13 = physicalConfigDedicated_r13_;
      rlf_TimersAndConstants_r13 = rlf_TimersAndConstants_r13_;
      schedulingRequestConfig_r15 = schedulingRequestConfig_r15_;
   }

   public void init () {
      srb_ToAddModList_r13 = null;
      drb_ToAddModList_r13 = null;
      drb_ToReleaseList_r13 = null;
      mac_MainConfig_r13 = null;
      physicalConfigDedicated_r13 = null;
      rlf_TimersAndConstants_r13 = null;
      schedulingRequestConfig_r15 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 8; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return srb_ToAddModList_r13;
         case 1: return drb_ToAddModList_r13;
         case 2: return drb_ToReleaseList_r13;
         case 3: return mac_MainConfig_r13;
         case 4: return physicalConfigDedicated_r13;
         case 5: return rlf_TimersAndConstants_r13;
         case 6: return schedulingRequestConfig_r15;
         case 7: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "srb-ToAddModList-r13";
         case 1: return "drb-ToAddModList-r13";
         case 2: return "drb-ToReleaseList-r13";
         case 3: return "mac-MainConfig-r13";
         case 4: return "physicalConfigDedicated-r13";
         case 5: return "rlf-TimersAndConstants-r13";
         case 6: return "schedulingRequestConfig-r15";
         case 7: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean srb_ToAddModList_r13Present = buffer.decodeBit ("srb_ToAddModList_r13Present");
      boolean drb_ToAddModList_r13Present = buffer.decodeBit ("drb_ToAddModList_r13Present");
      boolean drb_ToReleaseList_r13Present = buffer.decodeBit ("drb_ToReleaseList_r13Present");
      boolean mac_MainConfig_r13Present = buffer.decodeBit ("mac_MainConfig_r13Present");
      boolean physicalConfigDedicated_r13Present = buffer.decodeBit ("physicalConfigDedicated_r13Present");
      boolean rlf_TimersAndConstants_r13Present = buffer.decodeBit ("rlf_TimersAndConstants_r13Present");

      // decode srb_ToAddModList_r13

      if (srb_ToAddModList_r13Present) {
         buffer.getContext().eventDispatcher.startElement("srb_ToAddModList_r13", -1);

         srb_ToAddModList_r13 = new SRB_ToAddModList_NB_r13();
         srb_ToAddModList_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("srb_ToAddModList_r13", -1);
      }
      else {
         srb_ToAddModList_r13 = null;
      }

      // decode drb_ToAddModList_r13

      if (drb_ToAddModList_r13Present) {
         buffer.getContext().eventDispatcher.startElement("drb_ToAddModList_r13", -1);

         drb_ToAddModList_r13 = new DRB_ToAddModList_NB_r13();
         drb_ToAddModList_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("drb_ToAddModList_r13", -1);
      }
      else {
         drb_ToAddModList_r13 = null;
      }

      // decode drb_ToReleaseList_r13

      if (drb_ToReleaseList_r13Present) {
         buffer.getContext().eventDispatcher.startElement("drb_ToReleaseList_r13", -1);

         drb_ToReleaseList_r13 = new DRB_ToReleaseList_NB_r13();
         drb_ToReleaseList_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("drb_ToReleaseList_r13", -1);
      }
      else {
         drb_ToReleaseList_r13 = null;
      }

      // decode mac_MainConfig_r13

      if (mac_MainConfig_r13Present) {
         buffer.getContext().eventDispatcher.startElement("mac_MainConfig_r13", -1);

         mac_MainConfig_r13 = new RadioResourceConfigDedicated_NB_r13_mac_MainConfig_r13();
         mac_MainConfig_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("mac_MainConfig_r13", -1);
      }
      else {
         mac_MainConfig_r13 = null;
      }

      // decode physicalConfigDedicated_r13

      if (physicalConfigDedicated_r13Present) {
         buffer.getContext().eventDispatcher.startElement("physicalConfigDedicated_r13", -1);

         physicalConfigDedicated_r13 = new PhysicalConfigDedicated_NB_r13();
         physicalConfigDedicated_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("physicalConfigDedicated_r13", -1);
      }
      else {
         physicalConfigDedicated_r13 = null;
      }

      // decode rlf_TimersAndConstants_r13

      if (rlf_TimersAndConstants_r13Present) {
         buffer.getContext().eventDispatcher.startElement("rlf_TimersAndConstants_r13", -1);

         rlf_TimersAndConstants_r13 = new RLF_TimersAndConstants_NB_r13();
         rlf_TimersAndConstants_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("rlf_TimersAndConstants_r13", -1);
      }
      else {
         rlf_TimersAndConstants_r13 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean schedulingRequestConfig_r15Present = buffer.decodeBit ("schedulingRequestConfig_r15Present");

            // decode schedulingRequestConfig_r15

            if (schedulingRequestConfig_r15Present) {
               buffer.getContext().eventDispatcher.startElement("schedulingRequestConfig_r15", -1);

               schedulingRequestConfig_r15 = new SchedulingRequestConfig_NB_r15();
               schedulingRequestConfig_r15.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("schedulingRequestConfig_r15", -1);
            }
            else {
               schedulingRequestConfig_r15 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (srb_ToAddModList_r13 != null) srb_ToAddModList_r13.print (_sb, "srb_ToAddModList_r13", _level+1);
      if (drb_ToAddModList_r13 != null) drb_ToAddModList_r13.print (_sb, "drb_ToAddModList_r13", _level+1);
      if (drb_ToReleaseList_r13 != null) drb_ToReleaseList_r13.print (_sb, "drb_ToReleaseList_r13", _level+1);
      if (mac_MainConfig_r13 != null) mac_MainConfig_r13.print (_sb, "mac_MainConfig_r13", _level+1);
      if (physicalConfigDedicated_r13 != null) physicalConfigDedicated_r13.print (_sb, "physicalConfigDedicated_r13", _level+1);
      if (rlf_TimersAndConstants_r13 != null) rlf_TimersAndConstants_r13.print (_sb, "rlf_TimersAndConstants_r13", _level+1);
      if (schedulingRequestConfig_r15 != null) schedulingRequestConfig_r15.print (_sb, "schedulingRequestConfig_r15", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
