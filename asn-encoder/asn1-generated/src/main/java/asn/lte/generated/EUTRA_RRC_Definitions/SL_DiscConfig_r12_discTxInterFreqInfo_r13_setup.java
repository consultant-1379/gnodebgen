/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SL_DiscConfig_r12_discTxInterFreqInfo_r13_setup extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public ARFCN_ValueEUTRA_r9 discTxCarrierFreq_r13;  // optional
   public SL_DiscTxRefCarrierDedicated_r13 discTxRefCarrierDedicated_r13;  // optional
   public SL_DiscTxInfoInterFreqListAdd_r13 discTxInfoInterFreqListAdd_r13;  // optional

   public SL_DiscConfig_r12_discTxInterFreqInfo_r13_setup () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SL_DiscConfig_r12_discTxInterFreqInfo_r13_setup (
      ARFCN_ValueEUTRA_r9 discTxCarrierFreq_r13_,
      SL_DiscTxRefCarrierDedicated_r13 discTxRefCarrierDedicated_r13_,
      SL_DiscTxInfoInterFreqListAdd_r13 discTxInfoInterFreqListAdd_r13_
   ) {
      super();
      discTxCarrierFreq_r13 = discTxCarrierFreq_r13_;
      discTxRefCarrierDedicated_r13 = discTxRefCarrierDedicated_r13_;
      discTxInfoInterFreqListAdd_r13 = discTxInfoInterFreqListAdd_r13_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SL_DiscConfig_r12_discTxInterFreqInfo_r13_setup (long discTxCarrierFreq_r13_,
      SL_DiscTxRefCarrierDedicated_r13 discTxRefCarrierDedicated_r13_,
      SL_DiscTxInfoInterFreqListAdd_r13 discTxInfoInterFreqListAdd_r13_
   ) {
      super();
      discTxCarrierFreq_r13 = new ARFCN_ValueEUTRA_r9 (discTxCarrierFreq_r13_);
      discTxRefCarrierDedicated_r13 = discTxRefCarrierDedicated_r13_;
      discTxInfoInterFreqListAdd_r13 = discTxInfoInterFreqListAdd_r13_;
   }

   public void init () {
      discTxCarrierFreq_r13 = null;
      discTxRefCarrierDedicated_r13 = null;
      discTxInfoInterFreqListAdd_r13 = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return discTxCarrierFreq_r13;
         case 1: return discTxRefCarrierDedicated_r13;
         case 2: return discTxInfoInterFreqListAdd_r13;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "discTxCarrierFreq-r13";
         case 1: return "discTxRefCarrierDedicated-r13";
         case 2: return "discTxInfoInterFreqListAdd-r13";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean discTxCarrierFreq_r13Present = buffer.decodeBit ("discTxCarrierFreq_r13Present");
      boolean discTxRefCarrierDedicated_r13Present = buffer.decodeBit ("discTxRefCarrierDedicated_r13Present");
      boolean discTxInfoInterFreqListAdd_r13Present = buffer.decodeBit ("discTxInfoInterFreqListAdd_r13Present");

      // decode discTxCarrierFreq_r13

      if (discTxCarrierFreq_r13Present) {
         buffer.getContext().eventDispatcher.startElement("discTxCarrierFreq_r13", -1);

         discTxCarrierFreq_r13 = new ARFCN_ValueEUTRA_r9();
         discTxCarrierFreq_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("discTxCarrierFreq_r13", -1);
      }
      else {
         discTxCarrierFreq_r13 = null;
      }

      // decode discTxRefCarrierDedicated_r13

      if (discTxRefCarrierDedicated_r13Present) {
         buffer.getContext().eventDispatcher.startElement("discTxRefCarrierDedicated_r13", -1);

         discTxRefCarrierDedicated_r13 = new SL_DiscTxRefCarrierDedicated_r13();
         discTxRefCarrierDedicated_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("discTxRefCarrierDedicated_r13", -1);
      }
      else {
         discTxRefCarrierDedicated_r13 = null;
      }

      // decode discTxInfoInterFreqListAdd_r13

      if (discTxInfoInterFreqListAdd_r13Present) {
         buffer.getContext().eventDispatcher.startElement("discTxInfoInterFreqListAdd_r13", -1);

         discTxInfoInterFreqListAdd_r13 = new SL_DiscTxInfoInterFreqListAdd_r13();
         discTxInfoInterFreqListAdd_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("discTxInfoInterFreqListAdd_r13", -1);
      }
      else {
         discTxInfoInterFreqListAdd_r13 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (discTxCarrierFreq_r13 != null) discTxCarrierFreq_r13.print (_sb, "discTxCarrierFreq_r13", _level+1);
      if (discTxRefCarrierDedicated_r13 != null) discTxRefCarrierDedicated_r13.print (_sb, "discTxRefCarrierDedicated_r13", _level+1);
      if (discTxInfoInterFreqListAdd_r13 != null) discTxInfoInterFreqListAdd_r13.print (_sb, "discTxInfoInterFreqListAdd_r13", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
