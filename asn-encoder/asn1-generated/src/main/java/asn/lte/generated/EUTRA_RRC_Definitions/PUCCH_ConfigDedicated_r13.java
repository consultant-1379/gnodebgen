/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class PUCCH_ConfigDedicated_r13 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "PUCCH-ConfigDedicated-r13";
   }

   public PUCCH_ConfigDedicated_r13_ackNackRepetition_r13 ackNackRepetition_r13;
   public PUCCH_ConfigDedicated_r13_tdd_AckNackFeedbackMode_r13 tdd_AckNackFeedbackMode_r13 = null;  // optional
   public PUCCH_ConfigDedicated_r13_pucch_Format_r13 pucch_Format_r13;  // optional
   public PUCCH_ConfigDedicated_r13_twoAntennaPortActivatedPUCCH_Format1a1b_r13 twoAntennaPortActivatedPUCCH_Format1a1b_r13 = null;  // optional
   public PUCCH_ConfigDedicated_r13_simultaneousPUCCH_PUSCH_r13 simultaneousPUCCH_PUSCH_r13 = null;  // optional
   public Asn1Integer n1PUCCH_AN_RepP1_r13;  // optional
   public PUCCH_ConfigDedicated_r13_nPUCCH_Param_r13 nPUCCH_Param_r13;  // optional
   public PUCCH_ConfigDedicated_r13_nkaPUCCH_Param_r13 nkaPUCCH_Param_r13;  // optional
   public Asn1Boolean spatialBundlingPUCCH_r13;
   public Asn1Boolean spatialBundlingPUSCH_r13;
   public Asn1Boolean harq_TimingTDD_r13;
   public PUCCH_ConfigDedicated_r13_codebooksizeDetermination_r13 codebooksizeDetermination_r13 = null;  // optional
   public Asn1Integer maximumPayloadCoderate_r13;  // optional
   public PUCCH_ConfigDedicated_r13_pucch_NumRepetitionCE_r13 pucch_NumRepetitionCE_r13;  // optional

   public PUCCH_ConfigDedicated_r13 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public PUCCH_ConfigDedicated_r13 (
      PUCCH_ConfigDedicated_r13_ackNackRepetition_r13 ackNackRepetition_r13_,
      PUCCH_ConfigDedicated_r13_tdd_AckNackFeedbackMode_r13 tdd_AckNackFeedbackMode_r13_,
      PUCCH_ConfigDedicated_r13_pucch_Format_r13 pucch_Format_r13_,
      PUCCH_ConfigDedicated_r13_twoAntennaPortActivatedPUCCH_Format1a1b_r13 twoAntennaPortActivatedPUCCH_Format1a1b_r13_,
      PUCCH_ConfigDedicated_r13_simultaneousPUCCH_PUSCH_r13 simultaneousPUCCH_PUSCH_r13_,
      Asn1Integer n1PUCCH_AN_RepP1_r13_,
      PUCCH_ConfigDedicated_r13_nPUCCH_Param_r13 nPUCCH_Param_r13_,
      PUCCH_ConfigDedicated_r13_nkaPUCCH_Param_r13 nkaPUCCH_Param_r13_,
      Asn1Boolean spatialBundlingPUCCH_r13_,
      Asn1Boolean spatialBundlingPUSCH_r13_,
      Asn1Boolean harq_TimingTDD_r13_,
      PUCCH_ConfigDedicated_r13_codebooksizeDetermination_r13 codebooksizeDetermination_r13_,
      Asn1Integer maximumPayloadCoderate_r13_,
      PUCCH_ConfigDedicated_r13_pucch_NumRepetitionCE_r13 pucch_NumRepetitionCE_r13_
   ) {
      super();
      ackNackRepetition_r13 = ackNackRepetition_r13_;
      tdd_AckNackFeedbackMode_r13 = tdd_AckNackFeedbackMode_r13_;
      pucch_Format_r13 = pucch_Format_r13_;
      twoAntennaPortActivatedPUCCH_Format1a1b_r13 = twoAntennaPortActivatedPUCCH_Format1a1b_r13_;
      simultaneousPUCCH_PUSCH_r13 = simultaneousPUCCH_PUSCH_r13_;
      n1PUCCH_AN_RepP1_r13 = n1PUCCH_AN_RepP1_r13_;
      nPUCCH_Param_r13 = nPUCCH_Param_r13_;
      nkaPUCCH_Param_r13 = nkaPUCCH_Param_r13_;
      spatialBundlingPUCCH_r13 = spatialBundlingPUCCH_r13_;
      spatialBundlingPUSCH_r13 = spatialBundlingPUSCH_r13_;
      harq_TimingTDD_r13 = harq_TimingTDD_r13_;
      codebooksizeDetermination_r13 = codebooksizeDetermination_r13_;
      maximumPayloadCoderate_r13 = maximumPayloadCoderate_r13_;
      pucch_NumRepetitionCE_r13 = pucch_NumRepetitionCE_r13_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public PUCCH_ConfigDedicated_r13 (
      PUCCH_ConfigDedicated_r13_ackNackRepetition_r13 ackNackRepetition_r13_,
      Asn1Boolean spatialBundlingPUCCH_r13_,
      Asn1Boolean spatialBundlingPUSCH_r13_,
      Asn1Boolean harq_TimingTDD_r13_
   ) {
      super();
      ackNackRepetition_r13 = ackNackRepetition_r13_;
      spatialBundlingPUCCH_r13 = spatialBundlingPUCCH_r13_;
      spatialBundlingPUSCH_r13 = spatialBundlingPUSCH_r13_;
      harq_TimingTDD_r13 = harq_TimingTDD_r13_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public PUCCH_ConfigDedicated_r13 (PUCCH_ConfigDedicated_r13_ackNackRepetition_r13 ackNackRepetition_r13_,
      PUCCH_ConfigDedicated_r13_tdd_AckNackFeedbackMode_r13 tdd_AckNackFeedbackMode_r13_,
      PUCCH_ConfigDedicated_r13_pucch_Format_r13 pucch_Format_r13_,
      PUCCH_ConfigDedicated_r13_twoAntennaPortActivatedPUCCH_Format1a1b_r13 twoAntennaPortActivatedPUCCH_Format1a1b_r13_,
      PUCCH_ConfigDedicated_r13_simultaneousPUCCH_PUSCH_r13 simultaneousPUCCH_PUSCH_r13_,
      long n1PUCCH_AN_RepP1_r13_,
      PUCCH_ConfigDedicated_r13_nPUCCH_Param_r13 nPUCCH_Param_r13_,
      PUCCH_ConfigDedicated_r13_nkaPUCCH_Param_r13 nkaPUCCH_Param_r13_,
      boolean spatialBundlingPUCCH_r13_,
      boolean spatialBundlingPUSCH_r13_,
      boolean harq_TimingTDD_r13_,
      PUCCH_ConfigDedicated_r13_codebooksizeDetermination_r13 codebooksizeDetermination_r13_,
      long maximumPayloadCoderate_r13_,
      PUCCH_ConfigDedicated_r13_pucch_NumRepetitionCE_r13 pucch_NumRepetitionCE_r13_
   ) {
      super();
      ackNackRepetition_r13 = ackNackRepetition_r13_;
      tdd_AckNackFeedbackMode_r13 = tdd_AckNackFeedbackMode_r13_;
      pucch_Format_r13 = pucch_Format_r13_;
      twoAntennaPortActivatedPUCCH_Format1a1b_r13 = twoAntennaPortActivatedPUCCH_Format1a1b_r13_;
      simultaneousPUCCH_PUSCH_r13 = simultaneousPUCCH_PUSCH_r13_;
      n1PUCCH_AN_RepP1_r13 = new Asn1Integer (n1PUCCH_AN_RepP1_r13_);
      nPUCCH_Param_r13 = nPUCCH_Param_r13_;
      nkaPUCCH_Param_r13 = nkaPUCCH_Param_r13_;
      spatialBundlingPUCCH_r13 = new Asn1Boolean (spatialBundlingPUCCH_r13_);
      spatialBundlingPUSCH_r13 = new Asn1Boolean (spatialBundlingPUSCH_r13_);
      harq_TimingTDD_r13 = new Asn1Boolean (harq_TimingTDD_r13_);
      codebooksizeDetermination_r13 = codebooksizeDetermination_r13_;
      maximumPayloadCoderate_r13 = new Asn1Integer (maximumPayloadCoderate_r13_);
      pucch_NumRepetitionCE_r13 = pucch_NumRepetitionCE_r13_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public PUCCH_ConfigDedicated_r13 (
      PUCCH_ConfigDedicated_r13_ackNackRepetition_r13 ackNackRepetition_r13_,
      boolean spatialBundlingPUCCH_r13_,
      boolean spatialBundlingPUSCH_r13_,
      boolean harq_TimingTDD_r13_
   ) {
      super();
      ackNackRepetition_r13 = ackNackRepetition_r13_;
      spatialBundlingPUCCH_r13 = new Asn1Boolean (spatialBundlingPUCCH_r13_);
      spatialBundlingPUSCH_r13 = new Asn1Boolean (spatialBundlingPUSCH_r13_);
      harq_TimingTDD_r13 = new Asn1Boolean (harq_TimingTDD_r13_);
   }

   public void init () {
      ackNackRepetition_r13 = null;
      tdd_AckNackFeedbackMode_r13 = null;
      pucch_Format_r13 = null;
      twoAntennaPortActivatedPUCCH_Format1a1b_r13 = null;
      simultaneousPUCCH_PUSCH_r13 = null;
      n1PUCCH_AN_RepP1_r13 = null;
      nPUCCH_Param_r13 = null;
      nkaPUCCH_Param_r13 = null;
      spatialBundlingPUCCH_r13 = null;
      spatialBundlingPUSCH_r13 = null;
      harq_TimingTDD_r13 = null;
      codebooksizeDetermination_r13 = null;
      maximumPayloadCoderate_r13 = null;
      pucch_NumRepetitionCE_r13 = null;
   }

   public int getElementCount() { return 14; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return ackNackRepetition_r13;
         case 1: return tdd_AckNackFeedbackMode_r13;
         case 2: return pucch_Format_r13;
         case 3: return twoAntennaPortActivatedPUCCH_Format1a1b_r13;
         case 4: return simultaneousPUCCH_PUSCH_r13;
         case 5: return n1PUCCH_AN_RepP1_r13;
         case 6: return nPUCCH_Param_r13;
         case 7: return nkaPUCCH_Param_r13;
         case 8: return spatialBundlingPUCCH_r13;
         case 9: return spatialBundlingPUSCH_r13;
         case 10: return harq_TimingTDD_r13;
         case 11: return codebooksizeDetermination_r13;
         case 12: return maximumPayloadCoderate_r13;
         case 13: return pucch_NumRepetitionCE_r13;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "ackNackRepetition-r13";
         case 1: return "tdd-AckNackFeedbackMode-r13";
         case 2: return "pucch-Format-r13";
         case 3: return "twoAntennaPortActivatedPUCCH-Format1a1b-r13";
         case 4: return "simultaneousPUCCH-PUSCH-r13";
         case 5: return "n1PUCCH-AN-RepP1-r13";
         case 6: return "nPUCCH-Param-r13";
         case 7: return "nkaPUCCH-Param-r13";
         case 8: return "spatialBundlingPUCCH-r13";
         case 9: return "spatialBundlingPUSCH-r13";
         case 10: return "harq-TimingTDD-r13";
         case 11: return "codebooksizeDetermination-r13";
         case 12: return "maximumPayloadCoderate-r13";
         case 13: return "pucch-NumRepetitionCE-r13";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean tdd_AckNackFeedbackMode_r13Present = buffer.decodeBit ("tdd_AckNackFeedbackMode_r13Present");
      boolean pucch_Format_r13Present = buffer.decodeBit ("pucch_Format_r13Present");
      boolean twoAntennaPortActivatedPUCCH_Format1a1b_r13Present = buffer.decodeBit ("twoAntennaPortActivatedPUCCH_Format1a1b_r13Present");
      boolean simultaneousPUCCH_PUSCH_r13Present = buffer.decodeBit ("simultaneousPUCCH_PUSCH_r13Present");
      boolean n1PUCCH_AN_RepP1_r13Present = buffer.decodeBit ("n1PUCCH_AN_RepP1_r13Present");
      boolean nPUCCH_Param_r13Present = buffer.decodeBit ("nPUCCH_Param_r13Present");
      boolean nkaPUCCH_Param_r13Present = buffer.decodeBit ("nkaPUCCH_Param_r13Present");
      boolean codebooksizeDetermination_r13Present = buffer.decodeBit ("codebooksizeDetermination_r13Present");
      boolean maximumPayloadCoderate_r13Present = buffer.decodeBit ("maximumPayloadCoderate_r13Present");
      boolean pucch_NumRepetitionCE_r13Present = buffer.decodeBit ("pucch_NumRepetitionCE_r13Present");

      // decode ackNackRepetition_r13

      buffer.getContext().eventDispatcher.startElement("ackNackRepetition_r13", -1);

      ackNackRepetition_r13 = new PUCCH_ConfigDedicated_r13_ackNackRepetition_r13();
      ackNackRepetition_r13.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("ackNackRepetition_r13", -1);

      // decode tdd_AckNackFeedbackMode_r13

      if (tdd_AckNackFeedbackMode_r13Present) {
         buffer.getContext().eventDispatcher.startElement("tdd_AckNackFeedbackMode_r13", -1);

         int tval = PUCCH_ConfigDedicated_r13_tdd_AckNackFeedbackMode_r13.decodeEnumValue (buffer);
         tdd_AckNackFeedbackMode_r13 = PUCCH_ConfigDedicated_r13_tdd_AckNackFeedbackMode_r13.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("tdd_AckNackFeedbackMode_r13", -1);
      }
      else {
         tdd_AckNackFeedbackMode_r13 = null;
      }

      // decode pucch_Format_r13

      if (pucch_Format_r13Present) {
         buffer.getContext().eventDispatcher.startElement("pucch_Format_r13", -1);

         pucch_Format_r13 = new PUCCH_ConfigDedicated_r13_pucch_Format_r13();
         pucch_Format_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("pucch_Format_r13", -1);
      }
      else {
         pucch_Format_r13 = null;
      }

      // decode twoAntennaPortActivatedPUCCH_Format1a1b_r13

      if (twoAntennaPortActivatedPUCCH_Format1a1b_r13Present) {
         buffer.getContext().eventDispatcher.startElement("twoAntennaPortActivatedPUCCH_Format1a1b_r13", -1);

         int tval = PUCCH_ConfigDedicated_r13_twoAntennaPortActivatedPUCCH_Format1a1b_r13.decodeEnumValue (buffer);
         twoAntennaPortActivatedPUCCH_Format1a1b_r13 = PUCCH_ConfigDedicated_r13_twoAntennaPortActivatedPUCCH_Format1a1b_r13.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("twoAntennaPortActivatedPUCCH_Format1a1b_r13", -1);
      }
      else {
         twoAntennaPortActivatedPUCCH_Format1a1b_r13 = null;
      }

      // decode simultaneousPUCCH_PUSCH_r13

      if (simultaneousPUCCH_PUSCH_r13Present) {
         buffer.getContext().eventDispatcher.startElement("simultaneousPUCCH_PUSCH_r13", -1);

         int tval = PUCCH_ConfigDedicated_r13_simultaneousPUCCH_PUSCH_r13.decodeEnumValue (buffer);
         simultaneousPUCCH_PUSCH_r13 = PUCCH_ConfigDedicated_r13_simultaneousPUCCH_PUSCH_r13.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("simultaneousPUCCH_PUSCH_r13", -1);
      }
      else {
         simultaneousPUCCH_PUSCH_r13 = null;
      }

      // decode n1PUCCH_AN_RepP1_r13

      if (n1PUCCH_AN_RepP1_r13Present) {
         buffer.getContext().eventDispatcher.startElement("n1PUCCH_AN_RepP1_r13", -1);

         n1PUCCH_AN_RepP1_r13 = new Asn1Integer();
         n1PUCCH_AN_RepP1_r13.decode (buffer, 0, 2047);

         buffer.invokeCharacters(n1PUCCH_AN_RepP1_r13.toString());
         buffer.getContext().eventDispatcher.endElement("n1PUCCH_AN_RepP1_r13", -1);
      }
      else {
         n1PUCCH_AN_RepP1_r13 = null;
      }

      // decode nPUCCH_Param_r13

      if (nPUCCH_Param_r13Present) {
         buffer.getContext().eventDispatcher.startElement("nPUCCH_Param_r13", -1);

         nPUCCH_Param_r13 = new PUCCH_ConfigDedicated_r13_nPUCCH_Param_r13();
         nPUCCH_Param_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nPUCCH_Param_r13", -1);
      }
      else {
         nPUCCH_Param_r13 = null;
      }

      // decode nkaPUCCH_Param_r13

      if (nkaPUCCH_Param_r13Present) {
         buffer.getContext().eventDispatcher.startElement("nkaPUCCH_Param_r13", -1);

         nkaPUCCH_Param_r13 = new PUCCH_ConfigDedicated_r13_nkaPUCCH_Param_r13();
         nkaPUCCH_Param_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nkaPUCCH_Param_r13", -1);
      }
      else {
         nkaPUCCH_Param_r13 = null;
      }

      // decode spatialBundlingPUCCH_r13

      buffer.getContext().eventDispatcher.startElement("spatialBundlingPUCCH_r13", -1);

      spatialBundlingPUCCH_r13 = new Asn1Boolean();
      spatialBundlingPUCCH_r13.decode (buffer);

      buffer.invokeCharacters(spatialBundlingPUCCH_r13.toString());
      buffer.getContext().eventDispatcher.endElement("spatialBundlingPUCCH_r13", -1);

      // decode spatialBundlingPUSCH_r13

      buffer.getContext().eventDispatcher.startElement("spatialBundlingPUSCH_r13", -1);

      spatialBundlingPUSCH_r13 = new Asn1Boolean();
      spatialBundlingPUSCH_r13.decode (buffer);

      buffer.invokeCharacters(spatialBundlingPUSCH_r13.toString());
      buffer.getContext().eventDispatcher.endElement("spatialBundlingPUSCH_r13", -1);

      // decode harq_TimingTDD_r13

      buffer.getContext().eventDispatcher.startElement("harq_TimingTDD_r13", -1);

      harq_TimingTDD_r13 = new Asn1Boolean();
      harq_TimingTDD_r13.decode (buffer);

      buffer.invokeCharacters(harq_TimingTDD_r13.toString());
      buffer.getContext().eventDispatcher.endElement("harq_TimingTDD_r13", -1);

      // decode codebooksizeDetermination_r13

      if (codebooksizeDetermination_r13Present) {
         buffer.getContext().eventDispatcher.startElement("codebooksizeDetermination_r13", -1);

         int tval = PUCCH_ConfigDedicated_r13_codebooksizeDetermination_r13.decodeEnumValue (buffer);
         codebooksizeDetermination_r13 = PUCCH_ConfigDedicated_r13_codebooksizeDetermination_r13.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("codebooksizeDetermination_r13", -1);
      }
      else {
         codebooksizeDetermination_r13 = null;
      }

      // decode maximumPayloadCoderate_r13

      if (maximumPayloadCoderate_r13Present) {
         buffer.getContext().eventDispatcher.startElement("maximumPayloadCoderate_r13", -1);

         maximumPayloadCoderate_r13 = new Asn1Integer();
         maximumPayloadCoderate_r13.decode (buffer, 0, 7);

         buffer.invokeCharacters(maximumPayloadCoderate_r13.toString());
         buffer.getContext().eventDispatcher.endElement("maximumPayloadCoderate_r13", -1);
      }
      else {
         maximumPayloadCoderate_r13 = null;
      }

      // decode pucch_NumRepetitionCE_r13

      if (pucch_NumRepetitionCE_r13Present) {
         buffer.getContext().eventDispatcher.startElement("pucch_NumRepetitionCE_r13", -1);

         pucch_NumRepetitionCE_r13 = new PUCCH_ConfigDedicated_r13_pucch_NumRepetitionCE_r13();
         pucch_NumRepetitionCE_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("pucch_NumRepetitionCE_r13", -1);
      }
      else {
         pucch_NumRepetitionCE_r13 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (ackNackRepetition_r13 != null) ackNackRepetition_r13.print (_sb, "ackNackRepetition_r13", _level+1);
      if (tdd_AckNackFeedbackMode_r13 != null) tdd_AckNackFeedbackMode_r13.print (_sb, "tdd_AckNackFeedbackMode_r13", _level+1);
      if (pucch_Format_r13 != null) pucch_Format_r13.print (_sb, "pucch_Format_r13", _level+1);
      if (twoAntennaPortActivatedPUCCH_Format1a1b_r13 != null) twoAntennaPortActivatedPUCCH_Format1a1b_r13.print (_sb, "twoAntennaPortActivatedPUCCH_Format1a1b_r13", _level+1);
      if (simultaneousPUCCH_PUSCH_r13 != null) simultaneousPUCCH_PUSCH_r13.print (_sb, "simultaneousPUCCH_PUSCH_r13", _level+1);
      if (n1PUCCH_AN_RepP1_r13 != null) n1PUCCH_AN_RepP1_r13.print (_sb, "n1PUCCH_AN_RepP1_r13", _level+1);
      if (nPUCCH_Param_r13 != null) nPUCCH_Param_r13.print (_sb, "nPUCCH_Param_r13", _level+1);
      if (nkaPUCCH_Param_r13 != null) nkaPUCCH_Param_r13.print (_sb, "nkaPUCCH_Param_r13", _level+1);
      if (spatialBundlingPUCCH_r13 != null) spatialBundlingPUCCH_r13.print (_sb, "spatialBundlingPUCCH_r13", _level+1);
      if (spatialBundlingPUSCH_r13 != null) spatialBundlingPUSCH_r13.print (_sb, "spatialBundlingPUSCH_r13", _level+1);
      if (harq_TimingTDD_r13 != null) harq_TimingTDD_r13.print (_sb, "harq_TimingTDD_r13", _level+1);
      if (codebooksizeDetermination_r13 != null) codebooksizeDetermination_r13.print (_sb, "codebooksizeDetermination_r13", _level+1);
      if (maximumPayloadCoderate_r13 != null) maximumPayloadCoderate_r13.print (_sb, "maximumPayloadCoderate_r13", _level+1);
      if (pucch_NumRepetitionCE_r13 != null) pucch_NumRepetitionCE_r13.print (_sb, "pucch_NumRepetitionCE_r13", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
