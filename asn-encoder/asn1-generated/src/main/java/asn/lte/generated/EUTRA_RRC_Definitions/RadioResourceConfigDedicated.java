/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class RadioResourceConfigDedicated extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "RadioResourceConfigDedicated";
   }

   public SRB_ToAddModList srb_ToAddModList;  // optional
   public DRB_ToAddModList drb_ToAddModList;  // optional
   public DRB_ToReleaseList drb_ToReleaseList;  // optional
   public RadioResourceConfigDedicated_mac_MainConfig mac_MainConfig;  // optional
   public SPS_Config sps_Config;  // optional
   public PhysicalConfigDedicated physicalConfigDedicated;  // optional
   public boolean mV2ExtPresent;
   public RLF_TimersAndConstants_r9 rlf_TimersAndConstants_r9;  // optional
   public boolean mV3ExtPresent;
   public MeasSubframePatternPCell_r10 measSubframePatternPCell_r10;  // optional
   public boolean mV4ExtPresent;
   public NeighCellsCRS_Info_r11 neighCellsCRS_Info_r11;  // optional
   public boolean mV5ExtPresent;
   public NAICS_AssistanceInfo_r12 naics_Info_r12;  // optional
   public boolean mV6ExtPresent;
   public NeighCellsCRS_Info_r13 neighCellsCRS_Info_r13;  // optional
   public RLF_TimersAndConstants_r13 rlf_TimersAndConstants_r13;  // optional
   public boolean mV7ExtPresent;
   public SPS_Config_v1430 sps_Config_v1430;  // optional
   public boolean mV8ExtPresent;
   public SRB_ToAddModExtList_r15 srb_ToAddModExtList_r15;  // optional
   public Asn1Integer srb_ToReleaseExtList_r15;  // optional
   public SPS_Config_v1530 sps_Config_v1530;  // optional
   public RadioResourceConfigDedicated_crs_IntfMitigConfig_r15 crs_IntfMitigConfig_r15;  // optional
   public NeighCellsCRS_Info_r15 neighCellsCRS_Info_r15;  // optional
   public DRB_ToAddModList_r15 drb_ToAddModList_r15;  // optional
   public DRB_ToReleaseList_r15 drb_ToReleaseList_r15;  // optional
   public RadioResourceConfigDedicated_dummy dummy;  // optional
   public boolean mV9ExtPresent;
   public SPS_Config_v1540 sps_Config_v1540;  // optional
   public Asn1OpenExt extElem1;

   public RadioResourceConfigDedicated () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public RadioResourceConfigDedicated (
      SRB_ToAddModList srb_ToAddModList_,
      DRB_ToAddModList drb_ToAddModList_,
      DRB_ToReleaseList drb_ToReleaseList_,
      RadioResourceConfigDedicated_mac_MainConfig mac_MainConfig_,
      SPS_Config sps_Config_,
      PhysicalConfigDedicated physicalConfigDedicated_,
      RLF_TimersAndConstants_r9 rlf_TimersAndConstants_r9_,
      MeasSubframePatternPCell_r10 measSubframePatternPCell_r10_,
      NeighCellsCRS_Info_r11 neighCellsCRS_Info_r11_,
      NAICS_AssistanceInfo_r12 naics_Info_r12_,
      NeighCellsCRS_Info_r13 neighCellsCRS_Info_r13_,
      RLF_TimersAndConstants_r13 rlf_TimersAndConstants_r13_,
      SPS_Config_v1430 sps_Config_v1430_,
      SRB_ToAddModExtList_r15 srb_ToAddModExtList_r15_,
      Asn1Integer srb_ToReleaseExtList_r15_,
      SPS_Config_v1530 sps_Config_v1530_,
      RadioResourceConfigDedicated_crs_IntfMitigConfig_r15 crs_IntfMitigConfig_r15_,
      NeighCellsCRS_Info_r15 neighCellsCRS_Info_r15_,
      DRB_ToAddModList_r15 drb_ToAddModList_r15_,
      DRB_ToReleaseList_r15 drb_ToReleaseList_r15_,
      RadioResourceConfigDedicated_dummy dummy_,
      SPS_Config_v1540 sps_Config_v1540_
   ) {
      super();
      srb_ToAddModList = srb_ToAddModList_;
      drb_ToAddModList = drb_ToAddModList_;
      drb_ToReleaseList = drb_ToReleaseList_;
      mac_MainConfig = mac_MainConfig_;
      sps_Config = sps_Config_;
      physicalConfigDedicated = physicalConfigDedicated_;
      rlf_TimersAndConstants_r9 = rlf_TimersAndConstants_r9_;
      measSubframePatternPCell_r10 = measSubframePatternPCell_r10_;
      neighCellsCRS_Info_r11 = neighCellsCRS_Info_r11_;
      naics_Info_r12 = naics_Info_r12_;
      neighCellsCRS_Info_r13 = neighCellsCRS_Info_r13_;
      rlf_TimersAndConstants_r13 = rlf_TimersAndConstants_r13_;
      sps_Config_v1430 = sps_Config_v1430_;
      srb_ToAddModExtList_r15 = srb_ToAddModExtList_r15_;
      srb_ToReleaseExtList_r15 = srb_ToReleaseExtList_r15_;
      sps_Config_v1530 = sps_Config_v1530_;
      crs_IntfMitigConfig_r15 = crs_IntfMitigConfig_r15_;
      neighCellsCRS_Info_r15 = neighCellsCRS_Info_r15_;
      drb_ToAddModList_r15 = drb_ToAddModList_r15_;
      drb_ToReleaseList_r15 = drb_ToReleaseList_r15_;
      dummy = dummy_;
      sps_Config_v1540 = sps_Config_v1540_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public RadioResourceConfigDedicated (SRB_ToAddModList srb_ToAddModList_,
      DRB_ToAddModList drb_ToAddModList_,
      DRB_ToReleaseList drb_ToReleaseList_,
      RadioResourceConfigDedicated_mac_MainConfig mac_MainConfig_,
      SPS_Config sps_Config_,
      PhysicalConfigDedicated physicalConfigDedicated_,
      RLF_TimersAndConstants_r9 rlf_TimersAndConstants_r9_,
      MeasSubframePatternPCell_r10 measSubframePatternPCell_r10_,
      NeighCellsCRS_Info_r11 neighCellsCRS_Info_r11_,
      NAICS_AssistanceInfo_r12 naics_Info_r12_,
      NeighCellsCRS_Info_r13 neighCellsCRS_Info_r13_,
      RLF_TimersAndConstants_r13 rlf_TimersAndConstants_r13_,
      SPS_Config_v1430 sps_Config_v1430_,
      SRB_ToAddModExtList_r15 srb_ToAddModExtList_r15_,
      long srb_ToReleaseExtList_r15_,
      SPS_Config_v1530 sps_Config_v1530_,
      RadioResourceConfigDedicated_crs_IntfMitigConfig_r15 crs_IntfMitigConfig_r15_,
      NeighCellsCRS_Info_r15 neighCellsCRS_Info_r15_,
      DRB_ToAddModList_r15 drb_ToAddModList_r15_,
      DRB_ToReleaseList_r15 drb_ToReleaseList_r15_,
      RadioResourceConfigDedicated_dummy dummy_,
      SPS_Config_v1540 sps_Config_v1540_
   ) {
      super();
      srb_ToAddModList = srb_ToAddModList_;
      drb_ToAddModList = drb_ToAddModList_;
      drb_ToReleaseList = drb_ToReleaseList_;
      mac_MainConfig = mac_MainConfig_;
      sps_Config = sps_Config_;
      physicalConfigDedicated = physicalConfigDedicated_;
      rlf_TimersAndConstants_r9 = rlf_TimersAndConstants_r9_;
      measSubframePatternPCell_r10 = measSubframePatternPCell_r10_;
      neighCellsCRS_Info_r11 = neighCellsCRS_Info_r11_;
      naics_Info_r12 = naics_Info_r12_;
      neighCellsCRS_Info_r13 = neighCellsCRS_Info_r13_;
      rlf_TimersAndConstants_r13 = rlf_TimersAndConstants_r13_;
      sps_Config_v1430 = sps_Config_v1430_;
      srb_ToAddModExtList_r15 = srb_ToAddModExtList_r15_;
      srb_ToReleaseExtList_r15 = new Asn1Integer (srb_ToReleaseExtList_r15_);
      sps_Config_v1530 = sps_Config_v1530_;
      crs_IntfMitigConfig_r15 = crs_IntfMitigConfig_r15_;
      neighCellsCRS_Info_r15 = neighCellsCRS_Info_r15_;
      drb_ToAddModList_r15 = drb_ToAddModList_r15_;
      drb_ToReleaseList_r15 = drb_ToReleaseList_r15_;
      dummy = dummy_;
      sps_Config_v1540 = sps_Config_v1540_;
   }

   public void init () {
      srb_ToAddModList = null;
      drb_ToAddModList = null;
      drb_ToReleaseList = null;
      mac_MainConfig = null;
      sps_Config = null;
      physicalConfigDedicated = null;
      rlf_TimersAndConstants_r9 = null;
      measSubframePatternPCell_r10 = null;
      neighCellsCRS_Info_r11 = null;
      naics_Info_r12 = null;
      neighCellsCRS_Info_r13 = null;
      rlf_TimersAndConstants_r13 = null;
      sps_Config_v1430 = null;
      srb_ToAddModExtList_r15 = null;
      srb_ToReleaseExtList_r15 = null;
      sps_Config_v1530 = null;
      crs_IntfMitigConfig_r15 = null;
      neighCellsCRS_Info_r15 = null;
      drb_ToAddModList_r15 = null;
      drb_ToReleaseList_r15 = null;
      dummy = null;
      sps_Config_v1540 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 23; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return srb_ToAddModList;
         case 1: return drb_ToAddModList;
         case 2: return drb_ToReleaseList;
         case 3: return mac_MainConfig;
         case 4: return sps_Config;
         case 5: return physicalConfigDedicated;
         case 6: return rlf_TimersAndConstants_r9;
         case 7: return measSubframePatternPCell_r10;
         case 8: return neighCellsCRS_Info_r11;
         case 9: return naics_Info_r12;
         case 10: return neighCellsCRS_Info_r13;
         case 11: return rlf_TimersAndConstants_r13;
         case 12: return sps_Config_v1430;
         case 13: return srb_ToAddModExtList_r15;
         case 14: return srb_ToReleaseExtList_r15;
         case 15: return sps_Config_v1530;
         case 16: return crs_IntfMitigConfig_r15;
         case 17: return neighCellsCRS_Info_r15;
         case 18: return drb_ToAddModList_r15;
         case 19: return drb_ToReleaseList_r15;
         case 20: return dummy;
         case 21: return sps_Config_v1540;
         case 22: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "srb-ToAddModList";
         case 1: return "drb-ToAddModList";
         case 2: return "drb-ToReleaseList";
         case 3: return "mac-MainConfig";
         case 4: return "sps-Config";
         case 5: return "physicalConfigDedicated";
         case 6: return "rlf-TimersAndConstants-r9";
         case 7: return "measSubframePatternPCell-r10";
         case 8: return "neighCellsCRS-Info-r11";
         case 9: return "naics-Info-r12";
         case 10: return "neighCellsCRS-Info-r13";
         case 11: return "rlf-TimersAndConstants-r13";
         case 12: return "sps-Config-v1430";
         case 13: return "srb-ToAddModExtList-r15";
         case 14: return "srb-ToReleaseExtList-r15";
         case 15: return "sps-Config-v1530";
         case 16: return "crs-IntfMitigConfig-r15";
         case 17: return "neighCellsCRS-Info-r15";
         case 18: return "drb-ToAddModList-r15";
         case 19: return "drb-ToReleaseList-r15";
         case 20: return "dummy";
         case 21: return "sps-Config-v1540";
         case 22: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean srb_ToAddModListPresent = buffer.decodeBit ("srb_ToAddModListPresent");
      boolean drb_ToAddModListPresent = buffer.decodeBit ("drb_ToAddModListPresent");
      boolean drb_ToReleaseListPresent = buffer.decodeBit ("drb_ToReleaseListPresent");
      boolean mac_MainConfigPresent = buffer.decodeBit ("mac_MainConfigPresent");
      boolean sps_ConfigPresent = buffer.decodeBit ("sps_ConfigPresent");
      boolean physicalConfigDedicatedPresent = buffer.decodeBit ("physicalConfigDedicatedPresent");

      // decode srb_ToAddModList

      if (srb_ToAddModListPresent) {
         buffer.getContext().eventDispatcher.startElement("srb_ToAddModList", -1);

         srb_ToAddModList = new SRB_ToAddModList();
         srb_ToAddModList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("srb_ToAddModList", -1);
      }
      else {
         srb_ToAddModList = null;
      }

      // decode drb_ToAddModList

      if (drb_ToAddModListPresent) {
         buffer.getContext().eventDispatcher.startElement("drb_ToAddModList", -1);

         drb_ToAddModList = new DRB_ToAddModList();
         drb_ToAddModList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("drb_ToAddModList", -1);
      }
      else {
         drb_ToAddModList = null;
      }

      // decode drb_ToReleaseList

      if (drb_ToReleaseListPresent) {
         buffer.getContext().eventDispatcher.startElement("drb_ToReleaseList", -1);

         drb_ToReleaseList = new DRB_ToReleaseList();
         drb_ToReleaseList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("drb_ToReleaseList", -1);
      }
      else {
         drb_ToReleaseList = null;
      }

      // decode mac_MainConfig

      if (mac_MainConfigPresent) {
         buffer.getContext().eventDispatcher.startElement("mac_MainConfig", -1);

         mac_MainConfig = new RadioResourceConfigDedicated_mac_MainConfig();
         mac_MainConfig.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("mac_MainConfig", -1);
      }
      else {
         mac_MainConfig = null;
      }

      // decode sps_Config

      if (sps_ConfigPresent) {
         buffer.getContext().eventDispatcher.startElement("sps_Config", -1);

         sps_Config = new SPS_Config();
         sps_Config.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sps_Config", -1);
      }
      else {
         sps_Config = null;
      }

      // decode physicalConfigDedicated

      if (physicalConfigDedicatedPresent) {
         buffer.getContext().eventDispatcher.startElement("physicalConfigDedicated", -1);

         physicalConfigDedicated = new PhysicalConfigDedicated();
         physicalConfigDedicated.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("physicalConfigDedicated", -1);
      }
      else {
         physicalConfigDedicated = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV4ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV5ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV6ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV7ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV8ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV9ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean rlf_TimersAndConstants_r9Present = buffer.decodeBit ("rlf_TimersAndConstants_r9Present");

            // decode rlf_TimersAndConstants_r9

            if (rlf_TimersAndConstants_r9Present) {
               buffer.getContext().eventDispatcher.startElement("rlf_TimersAndConstants_r9", -1);

               rlf_TimersAndConstants_r9 = new RLF_TimersAndConstants_r9();
               rlf_TimersAndConstants_r9.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("rlf_TimersAndConstants_r9", -1);
            }
            else {
               rlf_TimersAndConstants_r9 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean measSubframePatternPCell_r10Present = buffer.decodeBit ("measSubframePatternPCell_r10Present");

            // decode measSubframePatternPCell_r10

            if (measSubframePatternPCell_r10Present) {
               buffer.getContext().eventDispatcher.startElement("measSubframePatternPCell_r10", -1);

               measSubframePatternPCell_r10 = new MeasSubframePatternPCell_r10();
               measSubframePatternPCell_r10.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("measSubframePatternPCell_r10", -1);
            }
            else {
               measSubframePatternPCell_r10 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV4ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean neighCellsCRS_Info_r11Present = buffer.decodeBit ("neighCellsCRS_Info_r11Present");

            // decode neighCellsCRS_Info_r11

            if (neighCellsCRS_Info_r11Present) {
               buffer.getContext().eventDispatcher.startElement("neighCellsCRS_Info_r11", -1);

               neighCellsCRS_Info_r11 = new NeighCellsCRS_Info_r11();
               neighCellsCRS_Info_r11.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("neighCellsCRS_Info_r11", -1);
            }
            else {
               neighCellsCRS_Info_r11 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV5ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean naics_Info_r12Present = buffer.decodeBit ("naics_Info_r12Present");

            // decode naics_Info_r12

            if (naics_Info_r12Present) {
               buffer.getContext().eventDispatcher.startElement("naics_Info_r12", -1);

               naics_Info_r12 = new NAICS_AssistanceInfo_r12();
               naics_Info_r12.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("naics_Info_r12", -1);
            }
            else {
               naics_Info_r12 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV6ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean neighCellsCRS_Info_r13Present = buffer.decodeBit ("neighCellsCRS_Info_r13Present");

            boolean rlf_TimersAndConstants_r13Present = buffer.decodeBit ("rlf_TimersAndConstants_r13Present");

            // decode neighCellsCRS_Info_r13

            if (neighCellsCRS_Info_r13Present) {
               buffer.getContext().eventDispatcher.startElement("neighCellsCRS_Info_r13", -1);

               neighCellsCRS_Info_r13 = new NeighCellsCRS_Info_r13();
               neighCellsCRS_Info_r13.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("neighCellsCRS_Info_r13", -1);
            }
            else {
               neighCellsCRS_Info_r13 = null;
            }

            // decode rlf_TimersAndConstants_r13

            if (rlf_TimersAndConstants_r13Present) {
               buffer.getContext().eventDispatcher.startElement("rlf_TimersAndConstants_r13", -1);

               rlf_TimersAndConstants_r13 = new RLF_TimersAndConstants_r13();
               rlf_TimersAndConstants_r13.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("rlf_TimersAndConstants_r13", -1);
            }
            else {
               rlf_TimersAndConstants_r13 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV7ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean sps_Config_v1430Present = buffer.decodeBit ("sps_Config_v1430Present");

            // decode sps_Config_v1430

            if (sps_Config_v1430Present) {
               buffer.getContext().eventDispatcher.startElement("sps_Config_v1430", -1);

               sps_Config_v1430 = new SPS_Config_v1430();
               sps_Config_v1430.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("sps_Config_v1430", -1);
            }
            else {
               sps_Config_v1430 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV8ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean srb_ToAddModExtList_r15Present = buffer.decodeBit ("srb_ToAddModExtList_r15Present");

            boolean srb_ToReleaseExtList_r15Present = buffer.decodeBit ("srb_ToReleaseExtList_r15Present");

            boolean sps_Config_v1530Present = buffer.decodeBit ("sps_Config_v1530Present");

            boolean crs_IntfMitigConfig_r15Present = buffer.decodeBit ("crs_IntfMitigConfig_r15Present");

            boolean neighCellsCRS_Info_r15Present = buffer.decodeBit ("neighCellsCRS_Info_r15Present");

            boolean drb_ToAddModList_r15Present = buffer.decodeBit ("drb_ToAddModList_r15Present");

            boolean drb_ToReleaseList_r15Present = buffer.decodeBit ("drb_ToReleaseList_r15Present");

            boolean dummyPresent = buffer.decodeBit ("dummyPresent");

            // decode srb_ToAddModExtList_r15

            if (srb_ToAddModExtList_r15Present) {
               buffer.getContext().eventDispatcher.startElement("srb_ToAddModExtList_r15", -1);

               srb_ToAddModExtList_r15 = new SRB_ToAddModExtList_r15();
               srb_ToAddModExtList_r15.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("srb_ToAddModExtList_r15", -1);
            }
            else {
               srb_ToAddModExtList_r15 = null;
            }

            // decode srb_ToReleaseExtList_r15

            if (srb_ToReleaseExtList_r15Present) {
               buffer.getContext().eventDispatcher.startElement("srb_ToReleaseExtList_r15", -1);

               srb_ToReleaseExtList_r15 = new Asn1Integer();
               srb_ToReleaseExtList_r15.decode (buffer, 4, 4);

               buffer.invokeCharacters(srb_ToReleaseExtList_r15.toString());
               buffer.getContext().eventDispatcher.endElement("srb_ToReleaseExtList_r15", -1);
            }
            else {
               srb_ToReleaseExtList_r15 = null;
            }

            // decode sps_Config_v1530

            if (sps_Config_v1530Present) {
               buffer.getContext().eventDispatcher.startElement("sps_Config_v1530", -1);

               sps_Config_v1530 = new SPS_Config_v1530();
               sps_Config_v1530.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("sps_Config_v1530", -1);
            }
            else {
               sps_Config_v1530 = null;
            }

            // decode crs_IntfMitigConfig_r15

            if (crs_IntfMitigConfig_r15Present) {
               buffer.getContext().eventDispatcher.startElement("crs_IntfMitigConfig_r15", -1);

               crs_IntfMitigConfig_r15 = new RadioResourceConfigDedicated_crs_IntfMitigConfig_r15();
               crs_IntfMitigConfig_r15.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("crs_IntfMitigConfig_r15", -1);
            }
            else {
               crs_IntfMitigConfig_r15 = null;
            }

            // decode neighCellsCRS_Info_r15

            if (neighCellsCRS_Info_r15Present) {
               buffer.getContext().eventDispatcher.startElement("neighCellsCRS_Info_r15", -1);

               neighCellsCRS_Info_r15 = new NeighCellsCRS_Info_r15();
               neighCellsCRS_Info_r15.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("neighCellsCRS_Info_r15", -1);
            }
            else {
               neighCellsCRS_Info_r15 = null;
            }

            // decode drb_ToAddModList_r15

            if (drb_ToAddModList_r15Present) {
               buffer.getContext().eventDispatcher.startElement("drb_ToAddModList_r15", -1);

               drb_ToAddModList_r15 = new DRB_ToAddModList_r15();
               drb_ToAddModList_r15.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("drb_ToAddModList_r15", -1);
            }
            else {
               drb_ToAddModList_r15 = null;
            }

            // decode drb_ToReleaseList_r15

            if (drb_ToReleaseList_r15Present) {
               buffer.getContext().eventDispatcher.startElement("drb_ToReleaseList_r15", -1);

               drb_ToReleaseList_r15 = new DRB_ToReleaseList_r15();
               drb_ToReleaseList_r15.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("drb_ToReleaseList_r15", -1);
            }
            else {
               drb_ToReleaseList_r15 = null;
            }

            // decode dummy

            if (dummyPresent) {
               buffer.getContext().eventDispatcher.startElement("dummy", -1);

               dummy = new RadioResourceConfigDedicated_dummy();
               dummy.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("dummy", -1);
            }
            else {
               dummy = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV9ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean sps_Config_v1540Present = buffer.decodeBit ("sps_Config_v1540Present");

            // decode sps_Config_v1540

            if (sps_Config_v1540Present) {
               buffer.getContext().eventDispatcher.startElement("sps_Config_v1540", -1);

               sps_Config_v1540 = new SPS_Config_v1540();
               sps_Config_v1540.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("sps_Config_v1540", -1);
            }
            else {
               sps_Config_v1540 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (srb_ToAddModList != null) srb_ToAddModList.print (_sb, "srb_ToAddModList", _level+1);
      if (drb_ToAddModList != null) drb_ToAddModList.print (_sb, "drb_ToAddModList", _level+1);
      if (drb_ToReleaseList != null) drb_ToReleaseList.print (_sb, "drb_ToReleaseList", _level+1);
      if (mac_MainConfig != null) mac_MainConfig.print (_sb, "mac_MainConfig", _level+1);
      if (sps_Config != null) sps_Config.print (_sb, "sps_Config", _level+1);
      if (physicalConfigDedicated != null) physicalConfigDedicated.print (_sb, "physicalConfigDedicated", _level+1);
      if (rlf_TimersAndConstants_r9 != null) rlf_TimersAndConstants_r9.print (_sb, "rlf_TimersAndConstants_r9", _level+1);
      if (measSubframePatternPCell_r10 != null) measSubframePatternPCell_r10.print (_sb, "measSubframePatternPCell_r10", _level+1);
      if (neighCellsCRS_Info_r11 != null) neighCellsCRS_Info_r11.print (_sb, "neighCellsCRS_Info_r11", _level+1);
      if (naics_Info_r12 != null) naics_Info_r12.print (_sb, "naics_Info_r12", _level+1);
      if (neighCellsCRS_Info_r13 != null) neighCellsCRS_Info_r13.print (_sb, "neighCellsCRS_Info_r13", _level+1);
      if (rlf_TimersAndConstants_r13 != null) rlf_TimersAndConstants_r13.print (_sb, "rlf_TimersAndConstants_r13", _level+1);
      if (sps_Config_v1430 != null) sps_Config_v1430.print (_sb, "sps_Config_v1430", _level+1);
      if (srb_ToAddModExtList_r15 != null) srb_ToAddModExtList_r15.print (_sb, "srb_ToAddModExtList_r15", _level+1);
      if (srb_ToReleaseExtList_r15 != null) srb_ToReleaseExtList_r15.print (_sb, "srb_ToReleaseExtList_r15", _level+1);
      if (sps_Config_v1530 != null) sps_Config_v1530.print (_sb, "sps_Config_v1530", _level+1);
      if (crs_IntfMitigConfig_r15 != null) crs_IntfMitigConfig_r15.print (_sb, "crs_IntfMitigConfig_r15", _level+1);
      if (neighCellsCRS_Info_r15 != null) neighCellsCRS_Info_r15.print (_sb, "neighCellsCRS_Info_r15", _level+1);
      if (drb_ToAddModList_r15 != null) drb_ToAddModList_r15.print (_sb, "drb_ToAddModList_r15", _level+1);
      if (drb_ToReleaseList_r15 != null) drb_ToReleaseList_r15.print (_sb, "drb_ToReleaseList_r15", _level+1);
      if (dummy != null) dummy.print (_sb, "dummy", _level+1);
      if (sps_Config_v1540 != null) sps_Config_v1540.print (_sb, "sps_Config_v1540", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
