/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class UEInformationResponse_v1530_IEs extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "UEInformationResponse-v1530-IEs";
   }

   public MeasResultListIdle_r15 measResultListIdle_r15;  // optional
   public FlightPathInfoReport_r15 flightPathInfoReport_r15;  // optional
   public UEInformationResponse_v1530_IEs_nonCriticalExtension nonCriticalExtension;  // optional

   public UEInformationResponse_v1530_IEs () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public UEInformationResponse_v1530_IEs (
      MeasResultListIdle_r15 measResultListIdle_r15_,
      FlightPathInfoReport_r15 flightPathInfoReport_r15_,
      UEInformationResponse_v1530_IEs_nonCriticalExtension nonCriticalExtension_
   ) {
      super();
      measResultListIdle_r15 = measResultListIdle_r15_;
      flightPathInfoReport_r15 = flightPathInfoReport_r15_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   public void init () {
      measResultListIdle_r15 = null;
      flightPathInfoReport_r15 = null;
      nonCriticalExtension = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return measResultListIdle_r15;
         case 1: return flightPathInfoReport_r15;
         case 2: return nonCriticalExtension;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "measResultListIdle-r15";
         case 1: return "flightPathInfoReport-r15";
         case 2: return "nonCriticalExtension";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean measResultListIdle_r15Present = buffer.decodeBit ("measResultListIdle_r15Present");
      boolean flightPathInfoReport_r15Present = buffer.decodeBit ("flightPathInfoReport_r15Present");
      boolean nonCriticalExtensionPresent = buffer.decodeBit ("nonCriticalExtensionPresent");

      // decode measResultListIdle_r15

      if (measResultListIdle_r15Present) {
         buffer.getContext().eventDispatcher.startElement("measResultListIdle_r15", -1);

         measResultListIdle_r15 = new MeasResultListIdle_r15();
         measResultListIdle_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("measResultListIdle_r15", -1);
      }
      else {
         measResultListIdle_r15 = null;
      }

      // decode flightPathInfoReport_r15

      if (flightPathInfoReport_r15Present) {
         buffer.getContext().eventDispatcher.startElement("flightPathInfoReport_r15", -1);

         flightPathInfoReport_r15 = new FlightPathInfoReport_r15();
         flightPathInfoReport_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("flightPathInfoReport_r15", -1);
      }
      else {
         flightPathInfoReport_r15 = null;
      }

      // decode nonCriticalExtension

      if (nonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension = new UEInformationResponse_v1530_IEs_nonCriticalExtension();
         nonCriticalExtension.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }
      else {
         nonCriticalExtension = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (measResultListIdle_r15 != null) measResultListIdle_r15.print (_sb, "measResultListIdle_r15", _level+1);
      if (flightPathInfoReport_r15 != null) flightPathInfoReport_r15.print (_sb, "flightPathInfoReport_r15", _level+1);
      if (nonCriticalExtension != null) nonCriticalExtension.print (_sb, "nonCriticalExtension", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
