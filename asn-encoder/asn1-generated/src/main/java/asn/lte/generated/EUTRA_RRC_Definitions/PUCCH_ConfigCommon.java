/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class PUCCH_ConfigCommon extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "PUCCH-ConfigCommon";
   }

   public PUCCH_ConfigCommon_deltaPUCCH_Shift deltaPUCCH_Shift = null;
   public Asn1Integer nRB_CQI;
   public Asn1Integer nCS_AN;
   public Asn1Integer n1PUCCH_AN;

   public PUCCH_ConfigCommon () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public PUCCH_ConfigCommon (
      PUCCH_ConfigCommon_deltaPUCCH_Shift deltaPUCCH_Shift_,
      Asn1Integer nRB_CQI_,
      Asn1Integer nCS_AN_,
      Asn1Integer n1PUCCH_AN_
   ) {
      super();
      deltaPUCCH_Shift = deltaPUCCH_Shift_;
      nRB_CQI = nRB_CQI_;
      nCS_AN = nCS_AN_;
      n1PUCCH_AN = n1PUCCH_AN_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public PUCCH_ConfigCommon (PUCCH_ConfigCommon_deltaPUCCH_Shift deltaPUCCH_Shift_,
      long nRB_CQI_,
      long nCS_AN_,
      long n1PUCCH_AN_
   ) {
      super();
      deltaPUCCH_Shift = deltaPUCCH_Shift_;
      nRB_CQI = new Asn1Integer (nRB_CQI_);
      nCS_AN = new Asn1Integer (nCS_AN_);
      n1PUCCH_AN = new Asn1Integer (n1PUCCH_AN_);
   }

   public void init () {
      deltaPUCCH_Shift = null;
      nRB_CQI = null;
      nCS_AN = null;
      n1PUCCH_AN = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return deltaPUCCH_Shift;
         case 1: return nRB_CQI;
         case 2: return nCS_AN;
         case 3: return n1PUCCH_AN;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "deltaPUCCH-Shift";
         case 1: return "nRB-CQI";
         case 2: return "nCS-AN";
         case 3: return "n1PUCCH-AN";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode deltaPUCCH_Shift

      buffer.getContext().eventDispatcher.startElement("deltaPUCCH_Shift", -1);

      {
         int tval = PUCCH_ConfigCommon_deltaPUCCH_Shift.decodeEnumValue (buffer);
         deltaPUCCH_Shift = PUCCH_ConfigCommon_deltaPUCCH_Shift.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("deltaPUCCH_Shift", -1);

      // decode nRB_CQI

      buffer.getContext().eventDispatcher.startElement("nRB_CQI", -1);

      nRB_CQI = new Asn1Integer();
      nRB_CQI.decode (buffer, 0, 98);

      buffer.invokeCharacters(nRB_CQI.toString());
      buffer.getContext().eventDispatcher.endElement("nRB_CQI", -1);

      // decode nCS_AN

      buffer.getContext().eventDispatcher.startElement("nCS_AN", -1);

      nCS_AN = new Asn1Integer();
      nCS_AN.decode (buffer, 0, 7);

      buffer.invokeCharacters(nCS_AN.toString());
      buffer.getContext().eventDispatcher.endElement("nCS_AN", -1);

      // decode n1PUCCH_AN

      buffer.getContext().eventDispatcher.startElement("n1PUCCH_AN", -1);

      n1PUCCH_AN = new Asn1Integer();
      n1PUCCH_AN.decode (buffer, 0, 2047);

      buffer.invokeCharacters(n1PUCCH_AN.toString());
      buffer.getContext().eventDispatcher.endElement("n1PUCCH_AN", -1);

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (deltaPUCCH_Shift != null) deltaPUCCH_Shift.print (_sb, "deltaPUCCH_Shift", _level+1);
      if (nRB_CQI != null) nRB_CQI.print (_sb, "nRB_CQI", _level+1);
      if (nCS_AN != null) nCS_AN.print (_sb, "nCS_AN", _level+1);
      if (n1PUCCH_AN != null) n1PUCCH_AN.print (_sb, "n1PUCCH_AN", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
