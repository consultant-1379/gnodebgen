/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.X2AP_Ericsson_IEs;

import com.objsys.asn1j.runtime.*;
import asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_Feature_ID;
import asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_CriticalityIgnore;

public class EAB_eNB_FeatureList_element extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_X2AP_Ericsson_IEsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public EAB_Feature_ID fid;
   public EAB_CriticalityIgnore criticality = null;
   public EAB_eNB_FeatureList_element_feature feature;

   public EAB_eNB_FeatureList_element () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public EAB_eNB_FeatureList_element (
      EAB_Feature_ID fid_,
      EAB_CriticalityIgnore criticality_,
      EAB_eNB_FeatureList_element_feature feature_
   ) {
      super();
      fid = fid_;
      criticality = criticality_;
      feature = feature_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public EAB_eNB_FeatureList_element (long fid_,
      EAB_CriticalityIgnore criticality_,
      EAB_eNB_FeatureList_element_feature feature_
   ) {
      super();
      fid = new EAB_Feature_ID (fid_);
      criticality = criticality_;
      feature = feature_;
   }

   public void init () {
      fid = null;
      criticality = null;
      feature = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return fid;
         case 1: return criticality;
         case 2: return feature;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "fid";
         case 1: return "criticality";
         case 2: return "feature";
         default: return null;
      }
   }


   /**
    * Assign fields according to information object having key fid-OverlaidCellDetection
    */
   public void setUsing_fid_OverlaidCellDetection() {
      this.fid = new asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_Feature_ID(asn.lte.generated.X2AP_Ericsson_Constants._X2AP_Ericsson_ConstantsValues.fid_OverlaidCellDetection);
      this.criticality = asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_CriticalityIgnore.ignore();
   }

   /**
    * Assign fields according to information object having key fid-CarrierAggregation
    */
   public void setUsing_fid_CarrierAggregation() {
      this.fid = new asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_Feature_ID(asn.lte.generated.X2AP_Ericsson_Constants._X2AP_Ericsson_ConstantsValues.fid_CarrierAggregation);
      this.criticality = asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_CriticalityIgnore.ignore();
   }

   /**
    * Assign fields according to information object having key fid-CellSleepMode
    */
   public void setUsing_fid_CellSleepMode() {
      this.fid = new asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_Feature_ID(asn.lte.generated.X2AP_Ericsson_Constants._X2AP_Ericsson_ConstantsValues.fid_CellSleepMode);
      this.criticality = asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_CriticalityIgnore.ignore();
   }

   /**
    * Assign fields according to information object having key fid-Inter-eNB-LBM-CommunicationCapability
    */
   public void setUsing_fid_Inter_eNB_LBM_CommunicationCapability() {
      this.fid = new asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_Feature_ID(asn.lte.generated.X2AP_Ericsson_Constants._X2AP_Ericsson_ConstantsValues.fid_Inter_eNB_LBM_CommunicationCapability);
      this.criticality = asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_CriticalityIgnore.ignore();
   }

   /**
    * Assign fields according to information object having key fid-UplinkTriggeredInterFrequencyMobility
    */
   public void setUsing_fid_UplinkTriggeredInterFrequencyMobility() {
      this.fid = new asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_Feature_ID(asn.lte.generated.X2AP_Ericsson_Constants._X2AP_Ericsson_ConstantsValues.fid_UplinkTriggeredInterFrequencyMobility);
      this.criticality = asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_CriticalityIgnore.ignore();
   }

   /**
    * Assign fields according to information object having key fid-StickyEARFCN
    */
   public void setUsing_fid_StickyEARFCN() {
      this.fid = new asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_Feature_ID(asn.lte.generated.X2AP_Ericsson_Constants._X2AP_Ericsson_ConstantsValues.fid_StickyEARFCN);
      this.criticality = asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_CriticalityIgnore.ignore();
   }

   /**
    * Assign fields according to information object having key fid-ElasticRAN
    */
   public void setUsing_fid_ElasticRAN() {
      this.fid = new asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_Feature_ID(asn.lte.generated.X2AP_Ericsson_Constants._X2AP_Ericsson_ConstantsValues.fid_ElasticRAN);
      this.criticality = asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_CriticalityIgnore.ignore();
   }

   /**
    * Assign fields according to information object having key fid-Inter-eNB-UplinkCoMP
    */
   public void setUsing_fid_Inter_eNB_UplinkCoMP() {
      this.fid = new asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_Feature_ID(asn.lte.generated.X2AP_Ericsson_Constants._X2AP_Ericsson_ConstantsValues.fid_Inter_eNB_UplinkCoMP);
      this.criticality = asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_CriticalityIgnore.ignore();
   }

   /**
    * Assign fields according to information object having key fid-CarrierAggregationFddTdd
    */
   public void setUsing_fid_CarrierAggregationFddTdd() {
      this.fid = new asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_Feature_ID(asn.lte.generated.X2AP_Ericsson_Constants._X2AP_Ericsson_ConstantsValues.fid_CarrierAggregationFddTdd);
      this.criticality = asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_CriticalityIgnore.ignore();
   }

   /**
    * Assign fields according to information object having key fid-ElasticRANUplinkCoMP
    */
   public void setUsing_fid_ElasticRANUplinkCoMP() {
      this.fid = new asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_Feature_ID(asn.lte.generated.X2AP_Ericsson_Constants._X2AP_Ericsson_ConstantsValues.fid_ElasticRANUplinkCoMP);
      this.criticality = asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_CriticalityIgnore.ignore();
   }

   /**
    * Assign fields according to information object having key fid-Inter-eNB-BB-Collaboration
    */
   public void setUsing_fid_Inter_eNB_BB_Collaboration() {
      this.fid = new asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_Feature_ID(asn.lte.generated.X2AP_Ericsson_Constants._X2AP_Ericsson_ConstantsValues.fid_Inter_eNB_BB_Collaboration);
      this.criticality = asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_CriticalityIgnore.ignore();
   }

   /**
    * Assign fields according to information object having key fid-FrequencyBandIndicatorPriority
    */
   public void setUsing_fid_FrequencyBandIndicatorPriority() {
      this.fid = new asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_Feature_ID(asn.lte.generated.X2AP_Ericsson_Constants._X2AP_Ericsson_ConstantsValues.fid_FrequencyBandIndicatorPriority);
      this.criticality = asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_CriticalityIgnore.ignore();
   }

   /**
    * Assign fields according to information object having key fid-LicensedAssistedAccess
    */
   public void setUsing_fid_LicensedAssistedAccess() {
      this.fid = new asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_Feature_ID(asn.lte.generated.X2AP_Ericsson_Constants._X2AP_Ericsson_ConstantsValues.fid_LicensedAssistedAccess);
      this.criticality = asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_CriticalityIgnore.ignore();
   }

   /**
    * Assign fields according to information object having key fid-FrequencyBandIndicatorPriorityX2Handovers
    */
   public void setUsing_fid_FrequencyBandIndicatorPriorityX2Handovers() {
      this.fid = new asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_Feature_ID(asn.lte.generated.X2AP_Ericsson_Constants._X2AP_Ericsson_ConstantsValues.fid_FrequencyBandIndicatorPriorityX2Handovers);
      this.criticality = asn.lte.generated.X2AP_Ericsson_CommonDataTypes.EAB_CriticalityIgnore.ignore();
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode fid

      buffer.getContext().eventDispatcher.startElement("fid", -1);

      fid = new EAB_Feature_ID();
      fid.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("fid", -1);

      // decode criticality

      buffer.getContext().eventDispatcher.startElement("criticality", -1);

      {
         int tval = EAB_CriticalityIgnore.decodeEnumValue (buffer);
         criticality = EAB_CriticalityIgnore.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("criticality", -1);

      // decode feature

      buffer.getContext().eventDispatcher.startElement("feature", -1);

      feature = new EAB_eNB_FeatureList_element_feature();
      feature.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("feature", -1);

      checkTC (true, buffer.getLazyOpenTypeDecode() ? 0 : 2, buffer.isAligned(), buffer.getContext().eventDispatcher);
   }

   public void checkTC(boolean decode, int decodeOpenTypeFlag, boolean aligned, Asn1NamedEventDispatcher eventDispatcher)
      throws Asn1Exception
   {
      /* check fid */
      asn.lte.generated.X2AP_Ericsson_Containers.EAB_X2AP_FEATURE_PROPERTIES _index = null;
      for(int i=0; i < _X2AP_Ericsson_IEsValues.EAB_eNB_FeatureAndProperty_List.length; i++) {
         if(_X2AP_Ericsson_IEsValues.EAB_eNB_FeatureAndProperty_List[i].fid.equals(fid)) {
            _index = _X2AP_Ericsson_IEsValues.EAB_eNB_FeatureAndProperty_List[i];
            break;
         }
      }
      if (null == _index) {
         return;
      }

      /* use -strict option to validate the "criticality" element */

      /* check feature */
      switch (feature.getChoiceID()) {
         case 2: {
            EAB_eNB_FeatureList_element_feature_addOrModify _elem1 = (EAB_eNB_FeatureList_element_feature_addOrModify)feature.getElement();

            /* check addOrModify */
            {

            /* check propertyIE */
            if( decode && decodeOpenTypeFlag >=1 ) {
               if(_elem1.propertyIE != null)
               {
                  try {
                     Asn1PerDecodeBuffer buffer = new Asn1PerDecodeBuffer(((Asn1OpenType)_elem1.propertyIE).value, aligned);
                     buffer.setLazyOpenTypeDecode(decodeOpenTypeFlag == 1);
                     if (eventDispatcher != null)buffer.getContext().eventDispatcher = eventDispatcher;
                     buffer.getContext().eventDispatcher.startElement("propertyIE", -1);

                     String className = _index.Properties.actualType.getName();
                     if (className.lastIndexOf('.') > 0) {
                        className = className.substring (className.lastIndexOf (".")+1);
                     }
                     buffer.getContext().eventDispatcher.startElement(className, -1);

                     _elem1.propertyIE = Asn1Type.decode(buffer, _index.Properties);

                     buffer.getContext().eventDispatcher.endElement(className, -1);

                     buffer.getContext().eventDispatcher.endElement("propertyIE", -1);
                  }
                  catch (java.io.IOException e) {
                     throw new Asn1Exception(e.toString());
                  }
               }
            }
            }

            break;
         }

         default: break;
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (fid != null) fid.print (_sb, "fid", _level+1);
      if (criticality != null) criticality.print (_sb, "criticality", _level+1);
      if (feature != null) feature.print (_sb, "feature", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
