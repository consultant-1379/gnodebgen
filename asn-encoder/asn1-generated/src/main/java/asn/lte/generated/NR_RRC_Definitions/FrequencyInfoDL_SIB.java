/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class FrequencyInfoDL_SIB extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "FrequencyInfoDL-SIB";
   }

   public MultiFrequencyBandListNR_SIB frequencyBandList;
   public Asn1Integer offsetToPointA;
   public FrequencyInfoDL_SIB_scs_SpecificCarrierList scs_SpecificCarrierList;

   public FrequencyInfoDL_SIB () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public FrequencyInfoDL_SIB (
      MultiFrequencyBandListNR_SIB frequencyBandList_,
      Asn1Integer offsetToPointA_,
      FrequencyInfoDL_SIB_scs_SpecificCarrierList scs_SpecificCarrierList_
   ) {
      super();
      frequencyBandList = frequencyBandList_;
      offsetToPointA = offsetToPointA_;
      scs_SpecificCarrierList = scs_SpecificCarrierList_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public FrequencyInfoDL_SIB (MultiFrequencyBandListNR_SIB frequencyBandList_,
      long offsetToPointA_,
      FrequencyInfoDL_SIB_scs_SpecificCarrierList scs_SpecificCarrierList_
   ) {
      super();
      frequencyBandList = frequencyBandList_;
      offsetToPointA = new Asn1Integer (offsetToPointA_);
      scs_SpecificCarrierList = scs_SpecificCarrierList_;
   }

   public void init () {
      frequencyBandList = null;
      offsetToPointA = null;
      scs_SpecificCarrierList = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return frequencyBandList;
         case 1: return offsetToPointA;
         case 2: return scs_SpecificCarrierList;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "frequencyBandList";
         case 1: return "offsetToPointA";
         case 2: return "scs-SpecificCarrierList";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode frequencyBandList

      buffer.getContext().eventDispatcher.startElement("frequencyBandList", -1);

      frequencyBandList = new MultiFrequencyBandListNR_SIB();
      frequencyBandList.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("frequencyBandList", -1);

      // decode offsetToPointA

      buffer.getContext().eventDispatcher.startElement("offsetToPointA", -1);

      offsetToPointA = new Asn1Integer();
      offsetToPointA.decode (buffer, 0, 2199);

      buffer.invokeCharacters(offsetToPointA.toString());
      buffer.getContext().eventDispatcher.endElement("offsetToPointA", -1);

      // decode scs_SpecificCarrierList

      buffer.getContext().eventDispatcher.startElement("scs_SpecificCarrierList", -1);

      scs_SpecificCarrierList = new FrequencyInfoDL_SIB_scs_SpecificCarrierList();
      scs_SpecificCarrierList.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("scs_SpecificCarrierList", -1);

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (frequencyBandList != null) frequencyBandList.print (_sb, "frequencyBandList", _level+1);
      if (offsetToPointA != null) offsetToPointA.print (_sb, "offsetToPointA", _level+1);
      if (scs_SpecificCarrierList != null) scs_SpecificCarrierList.print (_sb, "scs_SpecificCarrierList", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
