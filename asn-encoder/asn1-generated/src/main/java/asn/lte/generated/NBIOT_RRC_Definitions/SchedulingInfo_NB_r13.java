/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NBIOT_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SchedulingInfo_NB_r13 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NBIOT_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SchedulingInfo-NB-r13";
   }

   public SchedulingInfo_NB_r13_si_Periodicity_r13 si_Periodicity_r13 = null;
   public SchedulingInfo_NB_r13_si_RepetitionPattern_r13 si_RepetitionPattern_r13 = null;
   public SIB_MappingInfo_NB_r13 sib_MappingInfo_r13;
   public SchedulingInfo_NB_r13_si_TB_r13 si_TB_r13 = null;

   public SchedulingInfo_NB_r13 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SchedulingInfo_NB_r13 (
      SchedulingInfo_NB_r13_si_Periodicity_r13 si_Periodicity_r13_,
      SchedulingInfo_NB_r13_si_RepetitionPattern_r13 si_RepetitionPattern_r13_,
      SIB_MappingInfo_NB_r13 sib_MappingInfo_r13_,
      SchedulingInfo_NB_r13_si_TB_r13 si_TB_r13_
   ) {
      super();
      si_Periodicity_r13 = si_Periodicity_r13_;
      si_RepetitionPattern_r13 = si_RepetitionPattern_r13_;
      sib_MappingInfo_r13 = sib_MappingInfo_r13_;
      si_TB_r13 = si_TB_r13_;
   }

   public void init () {
      si_Periodicity_r13 = null;
      si_RepetitionPattern_r13 = null;
      sib_MappingInfo_r13 = null;
      si_TB_r13 = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return si_Periodicity_r13;
         case 1: return si_RepetitionPattern_r13;
         case 2: return sib_MappingInfo_r13;
         case 3: return si_TB_r13;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "si-Periodicity-r13";
         case 1: return "si-RepetitionPattern-r13";
         case 2: return "sib-MappingInfo-r13";
         case 3: return "si-TB-r13";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode si_Periodicity_r13

      buffer.getContext().eventDispatcher.startElement("si_Periodicity_r13", -1);

      {
         int tval = SchedulingInfo_NB_r13_si_Periodicity_r13.decodeEnumValue (buffer);
         si_Periodicity_r13 = SchedulingInfo_NB_r13_si_Periodicity_r13.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("si_Periodicity_r13", -1);

      // decode si_RepetitionPattern_r13

      buffer.getContext().eventDispatcher.startElement("si_RepetitionPattern_r13", -1);

      {
         int tval = SchedulingInfo_NB_r13_si_RepetitionPattern_r13.decodeEnumValue (buffer);
         si_RepetitionPattern_r13 = SchedulingInfo_NB_r13_si_RepetitionPattern_r13.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("si_RepetitionPattern_r13", -1);

      // decode sib_MappingInfo_r13

      buffer.getContext().eventDispatcher.startElement("sib_MappingInfo_r13", -1);

      sib_MappingInfo_r13 = new SIB_MappingInfo_NB_r13();
      sib_MappingInfo_r13.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("sib_MappingInfo_r13", -1);

      // decode si_TB_r13

      buffer.getContext().eventDispatcher.startElement("si_TB_r13", -1);

      {
         int tval = SchedulingInfo_NB_r13_si_TB_r13.decodeEnumValue (buffer);
         si_TB_r13 = SchedulingInfo_NB_r13_si_TB_r13.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("si_TB_r13", -1);

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (si_Periodicity_r13 != null) si_Periodicity_r13.print (_sb, "si_Periodicity_r13", _level+1);
      if (si_RepetitionPattern_r13 != null) si_RepetitionPattern_r13.print (_sb, "si_RepetitionPattern_r13", _level+1);
      if (sib_MappingInfo_r13 != null) sib_MappingInfo_r13.print (_sb, "sib_MappingInfo_r13", _level+1);
      if (si_TB_r13 != null) si_TB_r13.print (_sb, "si_TB_r13", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
