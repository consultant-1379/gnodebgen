/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MeasResult2EUTRA_v1250 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "MeasResult2EUTRA-v1250";
   }

   public RSRQ_Type_r12 rsrq_Type_r12;  // optional

   public MeasResult2EUTRA_v1250 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MeasResult2EUTRA_v1250 (
      RSRQ_Type_r12 rsrq_Type_r12_
   ) {
      super();
      rsrq_Type_r12 = rsrq_Type_r12_;
   }

   public void init () {
      rsrq_Type_r12 = null;
   }

   public int getElementCount() { return 1; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return rsrq_Type_r12;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "rsrq-Type-r12";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean rsrq_Type_r12Present = buffer.decodeBit ("rsrq_Type_r12Present");

      // decode rsrq_Type_r12

      if (rsrq_Type_r12Present) {
         buffer.getContext().eventDispatcher.startElement("rsrq_Type_r12", -1);

         rsrq_Type_r12 = new RSRQ_Type_r12();
         rsrq_Type_r12.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("rsrq_Type_r12", -1);
      }
      else {
         rsrq_Type_r12 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (rsrq_Type_r12 != null) rsrq_Type_r12.print (_sb, "rsrq_Type_r12", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
