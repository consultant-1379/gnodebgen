/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.X2AP_IEs;

import com.objsys.asn1j.runtime.*;

public class ProtectedEUTRAResourceIndication extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_X2AP_IEsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ProtectedEUTRAResourceIndication";
   }

   public Asn1Integer activationSFN;
   public ProtectedResourceList protectedResourceList;
   public Asn1Integer mBSFNControlRegionLength;  // optional
   public Asn1Integer pDCCHRegionLength;  // optional
   public ProtectedEUTRAResourceIndication_iE_Extensions iE_Extensions;  // optional
   public Asn1OpenExt extElem1;

   public ProtectedEUTRAResourceIndication () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ProtectedEUTRAResourceIndication (
      Asn1Integer activationSFN_,
      ProtectedResourceList protectedResourceList_,
      Asn1Integer mBSFNControlRegionLength_,
      Asn1Integer pDCCHRegionLength_,
      ProtectedEUTRAResourceIndication_iE_Extensions iE_Extensions_
   ) {
      super();
      activationSFN = activationSFN_;
      protectedResourceList = protectedResourceList_;
      mBSFNControlRegionLength = mBSFNControlRegionLength_;
      pDCCHRegionLength = pDCCHRegionLength_;
      iE_Extensions = iE_Extensions_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public ProtectedEUTRAResourceIndication (
      Asn1Integer activationSFN_,
      ProtectedResourceList protectedResourceList_
   ) {
      super();
      activationSFN = activationSFN_;
      protectedResourceList = protectedResourceList_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public ProtectedEUTRAResourceIndication (long activationSFN_,
      ProtectedResourceList protectedResourceList_,
      long mBSFNControlRegionLength_,
      long pDCCHRegionLength_,
      ProtectedEUTRAResourceIndication_iE_Extensions iE_Extensions_
   ) {
      super();
      activationSFN = new Asn1Integer (activationSFN_);
      protectedResourceList = protectedResourceList_;
      mBSFNControlRegionLength = new Asn1Integer (mBSFNControlRegionLength_);
      pDCCHRegionLength = new Asn1Integer (pDCCHRegionLength_);
      iE_Extensions = iE_Extensions_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public ProtectedEUTRAResourceIndication (
      long activationSFN_,
      ProtectedResourceList protectedResourceList_
   ) {
      super();
      activationSFN = new Asn1Integer (activationSFN_);
      protectedResourceList = protectedResourceList_;
   }

   public void init () {
      activationSFN = null;
      protectedResourceList = null;
      mBSFNControlRegionLength = null;
      pDCCHRegionLength = null;
      iE_Extensions = null;
      extElem1 = null;
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return activationSFN;
         case 1: return protectedResourceList;
         case 2: return mBSFNControlRegionLength;
         case 3: return pDCCHRegionLength;
         case 4: return iE_Extensions;
         case 5: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "activationSFN";
         case 1: return "protectedResourceList";
         case 2: return "mBSFNControlRegionLength";
         case 3: return "pDCCHRegionLength";
         case 4: return "iE-Extensions";
         case 5: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean mBSFNControlRegionLengthPresent = buffer.decodeBit ("mBSFNControlRegionLengthPresent");
      boolean pDCCHRegionLengthPresent = buffer.decodeBit ("pDCCHRegionLengthPresent");
      boolean iE_ExtensionsPresent = buffer.decodeBit ("iE_ExtensionsPresent");

      // decode activationSFN

      buffer.getContext().eventDispatcher.startElement("activationSFN", -1);

      activationSFN = new Asn1Integer();
      activationSFN.decode (buffer, 0, 1023);

      buffer.invokeCharacters(activationSFN.toString());
      buffer.getContext().eventDispatcher.endElement("activationSFN", -1);

      // decode protectedResourceList

      buffer.getContext().eventDispatcher.startElement("protectedResourceList", -1);

      protectedResourceList = new ProtectedResourceList();
      protectedResourceList.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("protectedResourceList", -1);

      // decode mBSFNControlRegionLength

      if (mBSFNControlRegionLengthPresent) {
         buffer.getContext().eventDispatcher.startElement("mBSFNControlRegionLength", -1);

         mBSFNControlRegionLength = new Asn1Integer();
         mBSFNControlRegionLength.decode (buffer, 0, 3);

         buffer.invokeCharacters(mBSFNControlRegionLength.toString());
         buffer.getContext().eventDispatcher.endElement("mBSFNControlRegionLength", -1);
      }
      else {
         mBSFNControlRegionLength = null;
      }

      // decode pDCCHRegionLength

      if (pDCCHRegionLengthPresent) {
         buffer.getContext().eventDispatcher.startElement("pDCCHRegionLength", -1);

         pDCCHRegionLength = new Asn1Integer();
         pDCCHRegionLength.decode (buffer, 1, 3);

         buffer.invokeCharacters(pDCCHRegionLength.toString());
         buffer.getContext().eventDispatcher.endElement("pDCCHRegionLength", -1);
      }
      else {
         pDCCHRegionLength = null;
      }

      // decode iE_Extensions

      if (iE_ExtensionsPresent) {
         buffer.getContext().eventDispatcher.startElement("iE_Extensions", -1);

         iE_Extensions = new ProtectedEUTRAResourceIndication_iE_Extensions();
         iE_Extensions.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("iE_Extensions", -1);
      }
      else {
         iE_Extensions = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (activationSFN != null) activationSFN.print (_sb, "activationSFN", _level+1);
      if (protectedResourceList != null) protectedResourceList.print (_sb, "protectedResourceList", _level+1);
      if (mBSFNControlRegionLength != null) mBSFNControlRegionLength.print (_sb, "mBSFNControlRegionLength", _level+1);
      if (pDCCHRegionLength != null) pDCCHRegionLength.print (_sb, "pDCCHRegionLength", _level+1);
      if (iE_Extensions != null) iE_Extensions.print (_sb, "iE_Extensions", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
