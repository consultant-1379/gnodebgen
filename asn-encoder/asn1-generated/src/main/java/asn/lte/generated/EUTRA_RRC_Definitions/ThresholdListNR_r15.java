/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class ThresholdListNR_r15 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ThresholdListNR-r15";
   }

   public RSRP_RangeNR_r15 nr_RSRP_r15;  // optional
   public RSRQ_RangeNR_r15 nr_RSRQ_r15;  // optional
   public RS_SINR_RangeNR_r15 nr_SINR_r15;  // optional

   public ThresholdListNR_r15 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ThresholdListNR_r15 (
      RSRP_RangeNR_r15 nr_RSRP_r15_,
      RSRQ_RangeNR_r15 nr_RSRQ_r15_,
      RS_SINR_RangeNR_r15 nr_SINR_r15_
   ) {
      super();
      nr_RSRP_r15 = nr_RSRP_r15_;
      nr_RSRQ_r15 = nr_RSRQ_r15_;
      nr_SINR_r15 = nr_SINR_r15_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public ThresholdListNR_r15 (long nr_RSRP_r15_,
      long nr_RSRQ_r15_,
      long nr_SINR_r15_
   ) {
      super();
      nr_RSRP_r15 = new RSRP_RangeNR_r15 (nr_RSRP_r15_);
      nr_RSRQ_r15 = new RSRQ_RangeNR_r15 (nr_RSRQ_r15_);
      nr_SINR_r15 = new RS_SINR_RangeNR_r15 (nr_SINR_r15_);
   }

   public void init () {
      nr_RSRP_r15 = null;
      nr_RSRQ_r15 = null;
      nr_SINR_r15 = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return nr_RSRP_r15;
         case 1: return nr_RSRQ_r15;
         case 2: return nr_SINR_r15;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "nr-RSRP-r15";
         case 1: return "nr-RSRQ-r15";
         case 2: return "nr-SINR-r15";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean nr_RSRP_r15Present = buffer.decodeBit ("nr_RSRP_r15Present");
      boolean nr_RSRQ_r15Present = buffer.decodeBit ("nr_RSRQ_r15Present");
      boolean nr_SINR_r15Present = buffer.decodeBit ("nr_SINR_r15Present");

      // decode nr_RSRP_r15

      if (nr_RSRP_r15Present) {
         buffer.getContext().eventDispatcher.startElement("nr_RSRP_r15", -1);

         nr_RSRP_r15 = new RSRP_RangeNR_r15();
         nr_RSRP_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nr_RSRP_r15", -1);
      }
      else {
         nr_RSRP_r15 = null;
      }

      // decode nr_RSRQ_r15

      if (nr_RSRQ_r15Present) {
         buffer.getContext().eventDispatcher.startElement("nr_RSRQ_r15", -1);

         nr_RSRQ_r15 = new RSRQ_RangeNR_r15();
         nr_RSRQ_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nr_RSRQ_r15", -1);
      }
      else {
         nr_RSRQ_r15 = null;
      }

      // decode nr_SINR_r15

      if (nr_SINR_r15Present) {
         buffer.getContext().eventDispatcher.startElement("nr_SINR_r15", -1);

         nr_SINR_r15 = new RS_SINR_RangeNR_r15();
         nr_SINR_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nr_SINR_r15", -1);
      }
      else {
         nr_SINR_r15 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (nr_RSRP_r15 != null) nr_RSRP_r15.print (_sb, "nr_RSRP_r15", _level+1);
      if (nr_RSRQ_r15 != null) nr_RSRQ_r15.print (_sb, "nr_RSRQ_r15", _level+1);
      if (nr_SINR_r15 != null) nr_SINR_r15.print (_sb, "nr_SINR_r15", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
