/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class RateMatchPattern extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "RateMatchPattern";
   }

   public RateMatchPatternId rateMatchPatternId;
   public RateMatchPattern_patternType patternType;
   public SubcarrierSpacing subcarrierSpacing = null;  // optional
   public RateMatchPattern_dummy dummy = null;
   public boolean mV2ExtPresent;
   public ControlResourceSetId_r16 controlResourceSet_r16;  // optional
   public Asn1OpenExt extElem1;

   public RateMatchPattern () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public RateMatchPattern (
      RateMatchPatternId rateMatchPatternId_,
      RateMatchPattern_patternType patternType_,
      SubcarrierSpacing subcarrierSpacing_,
      RateMatchPattern_dummy dummy_,
      ControlResourceSetId_r16 controlResourceSet_r16_
   ) {
      super();
      rateMatchPatternId = rateMatchPatternId_;
      patternType = patternType_;
      subcarrierSpacing = subcarrierSpacing_;
      dummy = dummy_;
      controlResourceSet_r16 = controlResourceSet_r16_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public RateMatchPattern (
      RateMatchPatternId rateMatchPatternId_,
      RateMatchPattern_patternType patternType_,
      RateMatchPattern_dummy dummy_
   ) {
      super();
      rateMatchPatternId = rateMatchPatternId_;
      patternType = patternType_;
      dummy = dummy_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public RateMatchPattern (long rateMatchPatternId_,
      RateMatchPattern_patternType patternType_,
      SubcarrierSpacing subcarrierSpacing_,
      RateMatchPattern_dummy dummy_,
      long controlResourceSet_r16_
   ) {
      super();
      rateMatchPatternId = new RateMatchPatternId (rateMatchPatternId_);
      patternType = patternType_;
      subcarrierSpacing = subcarrierSpacing_;
      dummy = dummy_;
      controlResourceSet_r16 = new ControlResourceSetId_r16 (controlResourceSet_r16_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public RateMatchPattern (
      long rateMatchPatternId_,
      RateMatchPattern_patternType patternType_,
      RateMatchPattern_dummy dummy_
   ) {
      super();
      rateMatchPatternId = new RateMatchPatternId (rateMatchPatternId_);
      patternType = patternType_;
      dummy = dummy_;
   }

   public void init () {
      rateMatchPatternId = null;
      patternType = null;
      subcarrierSpacing = null;
      dummy = null;
      controlResourceSet_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return rateMatchPatternId;
         case 1: return patternType;
         case 2: return subcarrierSpacing;
         case 3: return dummy;
         case 4: return controlResourceSet_r16;
         case 5: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "rateMatchPatternId";
         case 1: return "patternType";
         case 2: return "subcarrierSpacing";
         case 3: return "dummy";
         case 4: return "controlResourceSet-r16";
         case 5: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean subcarrierSpacingPresent = buffer.decodeBit ("subcarrierSpacingPresent");

      // decode rateMatchPatternId

      buffer.getContext().eventDispatcher.startElement("rateMatchPatternId", -1);

      rateMatchPatternId = new RateMatchPatternId();
      rateMatchPatternId.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("rateMatchPatternId", -1);

      // decode patternType

      buffer.getContext().eventDispatcher.startElement("patternType", -1);

      patternType = new RateMatchPattern_patternType();
      patternType.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("patternType", -1);

      // decode subcarrierSpacing

      if (subcarrierSpacingPresent) {
         buffer.getContext().eventDispatcher.startElement("subcarrierSpacing", -1);

         int tval = SubcarrierSpacing.decodeEnumValue (buffer);
         subcarrierSpacing = SubcarrierSpacing.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("subcarrierSpacing", -1);
      }
      else {
         subcarrierSpacing = null;
      }

      // decode dummy

      buffer.getContext().eventDispatcher.startElement("dummy", -1);

      {
         int tval = RateMatchPattern_dummy.decodeEnumValue (buffer);
         dummy = RateMatchPattern_dummy.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("dummy", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean controlResourceSet_r16Present = buffer.decodeBit ("controlResourceSet_r16Present");

            // decode controlResourceSet_r16

            if (controlResourceSet_r16Present) {
               buffer.getContext().eventDispatcher.startElement("controlResourceSet_r16", -1);

               controlResourceSet_r16 = new ControlResourceSetId_r16();
               controlResourceSet_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("controlResourceSet_r16", -1);
            }
            else {
               controlResourceSet_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (rateMatchPatternId != null) rateMatchPatternId.print (_sb, "rateMatchPatternId", _level+1);
      if (patternType != null) patternType.print (_sb, "patternType", _level+1);
      if (subcarrierSpacing != null) subcarrierSpacing.print (_sb, "subcarrierSpacing", _level+1);
      if (dummy != null) dummy.print (_sb, "dummy", _level+1);
      if (controlResourceSet_r16 != null) controlResourceSet_r16.print (_sb, "controlResourceSet_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
