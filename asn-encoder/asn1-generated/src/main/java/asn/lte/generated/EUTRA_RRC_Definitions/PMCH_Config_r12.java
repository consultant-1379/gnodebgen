/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class PMCH_Config_r12 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "PMCH-Config-r12";
   }

   public Asn1Integer sf_AllocEnd_r12;
   public PMCH_Config_r12_dataMCS_r12 dataMCS_r12;
   public PMCH_Config_r12_mch_SchedulingPeriod_r12 mch_SchedulingPeriod_r12 = null;
   public boolean mV2ExtPresent;
   public PMCH_Config_r12_mch_SchedulingPeriod_v1430 mch_SchedulingPeriod_v1430 = null;  // optional
   public Asn1OpenExt extElem1;

   public PMCH_Config_r12 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public PMCH_Config_r12 (
      Asn1Integer sf_AllocEnd_r12_,
      PMCH_Config_r12_dataMCS_r12 dataMCS_r12_,
      PMCH_Config_r12_mch_SchedulingPeriod_r12 mch_SchedulingPeriod_r12_,
      PMCH_Config_r12_mch_SchedulingPeriod_v1430 mch_SchedulingPeriod_v1430_
   ) {
      super();
      sf_AllocEnd_r12 = sf_AllocEnd_r12_;
      dataMCS_r12 = dataMCS_r12_;
      mch_SchedulingPeriod_r12 = mch_SchedulingPeriod_r12_;
      mch_SchedulingPeriod_v1430 = mch_SchedulingPeriod_v1430_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public PMCH_Config_r12 (
      Asn1Integer sf_AllocEnd_r12_,
      PMCH_Config_r12_dataMCS_r12 dataMCS_r12_,
      PMCH_Config_r12_mch_SchedulingPeriod_r12 mch_SchedulingPeriod_r12_
   ) {
      super();
      sf_AllocEnd_r12 = sf_AllocEnd_r12_;
      dataMCS_r12 = dataMCS_r12_;
      mch_SchedulingPeriod_r12 = mch_SchedulingPeriod_r12_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public PMCH_Config_r12 (long sf_AllocEnd_r12_,
      PMCH_Config_r12_dataMCS_r12 dataMCS_r12_,
      PMCH_Config_r12_mch_SchedulingPeriod_r12 mch_SchedulingPeriod_r12_,
      PMCH_Config_r12_mch_SchedulingPeriod_v1430 mch_SchedulingPeriod_v1430_
   ) {
      super();
      sf_AllocEnd_r12 = new Asn1Integer (sf_AllocEnd_r12_);
      dataMCS_r12 = dataMCS_r12_;
      mch_SchedulingPeriod_r12 = mch_SchedulingPeriod_r12_;
      mch_SchedulingPeriod_v1430 = mch_SchedulingPeriod_v1430_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public PMCH_Config_r12 (
      long sf_AllocEnd_r12_,
      PMCH_Config_r12_dataMCS_r12 dataMCS_r12_,
      PMCH_Config_r12_mch_SchedulingPeriod_r12 mch_SchedulingPeriod_r12_
   ) {
      super();
      sf_AllocEnd_r12 = new Asn1Integer (sf_AllocEnd_r12_);
      dataMCS_r12 = dataMCS_r12_;
      mch_SchedulingPeriod_r12 = mch_SchedulingPeriod_r12_;
   }

   public void init () {
      sf_AllocEnd_r12 = null;
      dataMCS_r12 = null;
      mch_SchedulingPeriod_r12 = null;
      mch_SchedulingPeriod_v1430 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return sf_AllocEnd_r12;
         case 1: return dataMCS_r12;
         case 2: return mch_SchedulingPeriod_r12;
         case 3: return mch_SchedulingPeriod_v1430;
         case 4: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "sf-AllocEnd-r12";
         case 1: return "dataMCS-r12";
         case 2: return "mch-SchedulingPeriod-r12";
         case 3: return "mch-SchedulingPeriod-v1430";
         case 4: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      // decode sf_AllocEnd_r12

      buffer.getContext().eventDispatcher.startElement("sf_AllocEnd_r12", -1);

      sf_AllocEnd_r12 = new Asn1Integer();
      sf_AllocEnd_r12.decode (buffer, 0, 1535);

      buffer.invokeCharacters(sf_AllocEnd_r12.toString());
      buffer.getContext().eventDispatcher.endElement("sf_AllocEnd_r12", -1);

      // decode dataMCS_r12

      buffer.getContext().eventDispatcher.startElement("dataMCS_r12", -1);

      dataMCS_r12 = new PMCH_Config_r12_dataMCS_r12();
      dataMCS_r12.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("dataMCS_r12", -1);

      // decode mch_SchedulingPeriod_r12

      buffer.getContext().eventDispatcher.startElement("mch_SchedulingPeriod_r12", -1);

      {
         int tval = PMCH_Config_r12_mch_SchedulingPeriod_r12.decodeEnumValue (buffer);
         mch_SchedulingPeriod_r12 = PMCH_Config_r12_mch_SchedulingPeriod_r12.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("mch_SchedulingPeriod_r12", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean mch_SchedulingPeriod_v1430Present = buffer.decodeBit ("mch_SchedulingPeriod_v1430Present");

            // decode mch_SchedulingPeriod_v1430

            if (mch_SchedulingPeriod_v1430Present) {
               buffer.getContext().eventDispatcher.startElement("mch_SchedulingPeriod_v1430", -1);

               int tval = PMCH_Config_r12_mch_SchedulingPeriod_v1430.decodeEnumValue (buffer);
               mch_SchedulingPeriod_v1430 = PMCH_Config_r12_mch_SchedulingPeriod_v1430.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("mch_SchedulingPeriod_v1430", -1);
            }
            else {
               mch_SchedulingPeriod_v1430 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (sf_AllocEnd_r12 != null) sf_AllocEnd_r12.print (_sb, "sf_AllocEnd_r12", _level+1);
      if (dataMCS_r12 != null) dataMCS_r12.print (_sb, "dataMCS_r12", _level+1);
      if (mch_SchedulingPeriod_r12 != null) mch_SchedulingPeriod_r12.print (_sb, "mch_SchedulingPeriod_r12", _level+1);
      if (mch_SchedulingPeriod_v1430 != null) mch_SchedulingPeriod_v1430.print (_sb, "mch_SchedulingPeriod_v1430", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
