/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MeasObjectCDMA2000 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "MeasObjectCDMA2000";
   }

   public CDMA2000_Type cdma2000_Type = null;
   public CarrierFreqCDMA2000 carrierFreq;
   public Asn1Integer searchWindowSize;  // optional
   public Q_OffsetRangeInterRAT offsetFreq;  // default = 0()
   public CellIndexList cellsToRemoveList;  // optional
   public CellsToAddModListCDMA2000 cellsToAddModList;  // optional
   public PhysCellIdCDMA2000 cellForWhichToReportCGI;  // optional
   public Asn1OpenExt extElem1;

   public MeasObjectCDMA2000 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MeasObjectCDMA2000 (
      CDMA2000_Type cdma2000_Type_,
      CarrierFreqCDMA2000 carrierFreq_,
      Asn1Integer searchWindowSize_,
      Q_OffsetRangeInterRAT offsetFreq_,
      CellIndexList cellsToRemoveList_,
      CellsToAddModListCDMA2000 cellsToAddModList_,
      PhysCellIdCDMA2000 cellForWhichToReportCGI_
   ) {
      super();
      cdma2000_Type = cdma2000_Type_;
      carrierFreq = carrierFreq_;
      searchWindowSize = searchWindowSize_;
      offsetFreq = offsetFreq_;
      cellsToRemoveList = cellsToRemoveList_;
      cellsToAddModList = cellsToAddModList_;
      cellForWhichToReportCGI = cellForWhichToReportCGI_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public MeasObjectCDMA2000 (
      CDMA2000_Type cdma2000_Type_,
      CarrierFreqCDMA2000 carrierFreq_
   ) {
      super();
      cdma2000_Type = cdma2000_Type_;
      carrierFreq = carrierFreq_;
      offsetFreq = new Q_OffsetRangeInterRAT (0);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public MeasObjectCDMA2000 (CDMA2000_Type cdma2000_Type_,
      CarrierFreqCDMA2000 carrierFreq_,
      long searchWindowSize_,
      long offsetFreq_,
      CellIndexList cellsToRemoveList_,
      CellsToAddModListCDMA2000 cellsToAddModList_,
      long cellForWhichToReportCGI_
   ) {
      super();
      cdma2000_Type = cdma2000_Type_;
      carrierFreq = carrierFreq_;
      searchWindowSize = new Asn1Integer (searchWindowSize_);
      offsetFreq = new Q_OffsetRangeInterRAT (offsetFreq_);
      cellsToRemoveList = cellsToRemoveList_;
      cellsToAddModList = cellsToAddModList_;
      cellForWhichToReportCGI = new PhysCellIdCDMA2000 (cellForWhichToReportCGI_);
   }

   public void init () {
      cdma2000_Type = null;
      carrierFreq = null;
      searchWindowSize = null;
      offsetFreq = new Q_OffsetRangeInterRAT (0);
      cellsToRemoveList = null;
      cellsToAddModList = null;
      cellForWhichToReportCGI = null;
      extElem1 = null;
   }

   public int getElementCount() { return 8; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return cdma2000_Type;
         case 1: return carrierFreq;
         case 2: return searchWindowSize;
         case 3: return offsetFreq;
         case 4: return cellsToRemoveList;
         case 5: return cellsToAddModList;
         case 6: return cellForWhichToReportCGI;
         case 7: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "cdma2000-Type";
         case 1: return "carrierFreq";
         case 2: return "searchWindowSize";
         case 3: return "offsetFreq";
         case 4: return "cellsToRemoveList";
         case 5: return "cellsToAddModList";
         case 6: return "cellForWhichToReportCGI";
         case 7: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean searchWindowSizePresent = buffer.decodeBit ("searchWindowSizePresent");
      boolean offsetFreqPresent = buffer.decodeBit ("offsetFreqPresent");
      boolean cellsToRemoveListPresent = buffer.decodeBit ("cellsToRemoveListPresent");
      boolean cellsToAddModListPresent = buffer.decodeBit ("cellsToAddModListPresent");
      boolean cellForWhichToReportCGIPresent = buffer.decodeBit ("cellForWhichToReportCGIPresent");

      // decode cdma2000_Type

      buffer.getContext().eventDispatcher.startElement("cdma2000_Type", -1);

      {
         int tval = CDMA2000_Type.decodeEnumValue (buffer);
         cdma2000_Type = CDMA2000_Type.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("cdma2000_Type", -1);

      // decode carrierFreq

      buffer.getContext().eventDispatcher.startElement("carrierFreq", -1);

      carrierFreq = new CarrierFreqCDMA2000();
      carrierFreq.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("carrierFreq", -1);

      // decode searchWindowSize

      if (searchWindowSizePresent) {
         buffer.getContext().eventDispatcher.startElement("searchWindowSize", -1);

         searchWindowSize = new Asn1Integer();
         searchWindowSize.decode (buffer, 0, 15);

         buffer.invokeCharacters(searchWindowSize.toString());
         buffer.getContext().eventDispatcher.endElement("searchWindowSize", -1);
      }
      else {
         searchWindowSize = null;
      }

      // decode offsetFreq

      if (offsetFreqPresent) {
         buffer.getContext().eventDispatcher.startElement("offsetFreq", -1);

         offsetFreq = new Q_OffsetRangeInterRAT();
         offsetFreq.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("offsetFreq", -1);
      }
      else {
         offsetFreq = new Q_OffsetRangeInterRAT();
         offsetFreq.value = 0;
      }

      // decode cellsToRemoveList

      if (cellsToRemoveListPresent) {
         buffer.getContext().eventDispatcher.startElement("cellsToRemoveList", -1);

         cellsToRemoveList = new CellIndexList();
         cellsToRemoveList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("cellsToRemoveList", -1);
      }
      else {
         cellsToRemoveList = null;
      }

      // decode cellsToAddModList

      if (cellsToAddModListPresent) {
         buffer.getContext().eventDispatcher.startElement("cellsToAddModList", -1);

         cellsToAddModList = new CellsToAddModListCDMA2000();
         cellsToAddModList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("cellsToAddModList", -1);
      }
      else {
         cellsToAddModList = null;
      }

      // decode cellForWhichToReportCGI

      if (cellForWhichToReportCGIPresent) {
         buffer.getContext().eventDispatcher.startElement("cellForWhichToReportCGI", -1);

         cellForWhichToReportCGI = new PhysCellIdCDMA2000();
         cellForWhichToReportCGI.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("cellForWhichToReportCGI", -1);
      }
      else {
         cellForWhichToReportCGI = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (cdma2000_Type != null) cdma2000_Type.print (_sb, "cdma2000_Type", _level+1);
      if (carrierFreq != null) carrierFreq.print (_sb, "carrierFreq", _level+1);
      if (searchWindowSize != null) searchWindowSize.print (_sb, "searchWindowSize", _level+1);
      if (offsetFreq != null) offsetFreq.print (_sb, "offsetFreq", _level+1);
      if (cellsToRemoveList != null) cellsToRemoveList.print (_sb, "cellsToRemoveList", _level+1);
      if (cellsToAddModList != null) cellsToAddModList.print (_sb, "cellsToAddModList", _level+1);
      if (cellForWhichToReportCGI != null) cellForWhichToReportCGI.print (_sb, "cellForWhichToReportCGI", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
