/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NBIOT_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class UE_RadioPagingInfo_NB_r13 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NBIOT_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "UE-RadioPagingInfo-NB-r13";
   }

   public UE_RadioPagingInfo_NB_r13_ue_Category_NB_r13 ue_Category_NB_r13 = null;  // optional
   public boolean mV2ExtPresent;
   public UE_RadioPagingInfo_NB_r13_multiCarrierPaging_r14 multiCarrierPaging_r14 = null;  // optional
   public boolean mV3ExtPresent;
   public UE_RadioPagingInfo_NB_r13_mixedOperationMode_r15 mixedOperationMode_r15 = null;  // optional
   public UE_RadioPagingInfo_NB_r13_wakeUpSignal_r15 wakeUpSignal_r15 = null;  // optional
   public UE_RadioPagingInfo_NB_r13_wakeUpSignalMinGap_eDRX_r15 wakeUpSignalMinGap_eDRX_r15 = null;  // optional
   public UE_RadioPagingInfo_NB_r13_multiCarrierPagingTDD_r15 multiCarrierPagingTDD_r15 = null;  // optional
   public Asn1OpenExt extElem1;

   public UE_RadioPagingInfo_NB_r13 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public UE_RadioPagingInfo_NB_r13 (
      UE_RadioPagingInfo_NB_r13_ue_Category_NB_r13 ue_Category_NB_r13_,
      UE_RadioPagingInfo_NB_r13_multiCarrierPaging_r14 multiCarrierPaging_r14_,
      UE_RadioPagingInfo_NB_r13_mixedOperationMode_r15 mixedOperationMode_r15_,
      UE_RadioPagingInfo_NB_r13_wakeUpSignal_r15 wakeUpSignal_r15_,
      UE_RadioPagingInfo_NB_r13_wakeUpSignalMinGap_eDRX_r15 wakeUpSignalMinGap_eDRX_r15_,
      UE_RadioPagingInfo_NB_r13_multiCarrierPagingTDD_r15 multiCarrierPagingTDD_r15_
   ) {
      super();
      ue_Category_NB_r13 = ue_Category_NB_r13_;
      multiCarrierPaging_r14 = multiCarrierPaging_r14_;
      mixedOperationMode_r15 = mixedOperationMode_r15_;
      wakeUpSignal_r15 = wakeUpSignal_r15_;
      wakeUpSignalMinGap_eDRX_r15 = wakeUpSignalMinGap_eDRX_r15_;
      multiCarrierPagingTDD_r15 = multiCarrierPagingTDD_r15_;
   }

   public void init () {
      ue_Category_NB_r13 = null;
      multiCarrierPaging_r14 = null;
      mixedOperationMode_r15 = null;
      wakeUpSignal_r15 = null;
      wakeUpSignalMinGap_eDRX_r15 = null;
      multiCarrierPagingTDD_r15 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return ue_Category_NB_r13;
         case 1: return multiCarrierPaging_r14;
         case 2: return mixedOperationMode_r15;
         case 3: return wakeUpSignal_r15;
         case 4: return wakeUpSignalMinGap_eDRX_r15;
         case 5: return multiCarrierPagingTDD_r15;
         case 6: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "ue-Category-NB-r13";
         case 1: return "multiCarrierPaging-r14";
         case 2: return "mixedOperationMode-r15";
         case 3: return "wakeUpSignal-r15";
         case 4: return "wakeUpSignalMinGap-eDRX-r15";
         case 5: return "multiCarrierPagingTDD-r15";
         case 6: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean ue_Category_NB_r13Present = buffer.decodeBit ("ue_Category_NB_r13Present");

      // decode ue_Category_NB_r13

      if (ue_Category_NB_r13Present) {
         buffer.getContext().eventDispatcher.startElement("ue_Category_NB_r13", -1);

         int tval = UE_RadioPagingInfo_NB_r13_ue_Category_NB_r13.decodeEnumValue (buffer);
         ue_Category_NB_r13 = UE_RadioPagingInfo_NB_r13_ue_Category_NB_r13.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("ue_Category_NB_r13", -1);
      }
      else {
         ue_Category_NB_r13 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean multiCarrierPaging_r14Present = buffer.decodeBit ("multiCarrierPaging_r14Present");

            // decode multiCarrierPaging_r14

            if (multiCarrierPaging_r14Present) {
               buffer.getContext().eventDispatcher.startElement("multiCarrierPaging_r14", -1);

               int tval = UE_RadioPagingInfo_NB_r13_multiCarrierPaging_r14.decodeEnumValue (buffer);
               multiCarrierPaging_r14 = UE_RadioPagingInfo_NB_r13_multiCarrierPaging_r14.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("multiCarrierPaging_r14", -1);
            }
            else {
               multiCarrierPaging_r14 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean mixedOperationMode_r15Present = buffer.decodeBit ("mixedOperationMode_r15Present");

            boolean wakeUpSignal_r15Present = buffer.decodeBit ("wakeUpSignal_r15Present");

            boolean wakeUpSignalMinGap_eDRX_r15Present = buffer.decodeBit ("wakeUpSignalMinGap_eDRX_r15Present");

            boolean multiCarrierPagingTDD_r15Present = buffer.decodeBit ("multiCarrierPagingTDD_r15Present");

            // decode mixedOperationMode_r15

            if (mixedOperationMode_r15Present) {
               buffer.getContext().eventDispatcher.startElement("mixedOperationMode_r15", -1);

               int tval = UE_RadioPagingInfo_NB_r13_mixedOperationMode_r15.decodeEnumValue (buffer);
               mixedOperationMode_r15 = UE_RadioPagingInfo_NB_r13_mixedOperationMode_r15.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("mixedOperationMode_r15", -1);
            }
            else {
               mixedOperationMode_r15 = null;
            }

            // decode wakeUpSignal_r15

            if (wakeUpSignal_r15Present) {
               buffer.getContext().eventDispatcher.startElement("wakeUpSignal_r15", -1);

               int tval = UE_RadioPagingInfo_NB_r13_wakeUpSignal_r15.decodeEnumValue (buffer);
               wakeUpSignal_r15 = UE_RadioPagingInfo_NB_r13_wakeUpSignal_r15.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("wakeUpSignal_r15", -1);
            }
            else {
               wakeUpSignal_r15 = null;
            }

            // decode wakeUpSignalMinGap_eDRX_r15

            if (wakeUpSignalMinGap_eDRX_r15Present) {
               buffer.getContext().eventDispatcher.startElement("wakeUpSignalMinGap_eDRX_r15", -1);

               int tval = UE_RadioPagingInfo_NB_r13_wakeUpSignalMinGap_eDRX_r15.decodeEnumValue (buffer);
               wakeUpSignalMinGap_eDRX_r15 = UE_RadioPagingInfo_NB_r13_wakeUpSignalMinGap_eDRX_r15.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("wakeUpSignalMinGap_eDRX_r15", -1);
            }
            else {
               wakeUpSignalMinGap_eDRX_r15 = null;
            }

            // decode multiCarrierPagingTDD_r15

            if (multiCarrierPagingTDD_r15Present) {
               buffer.getContext().eventDispatcher.startElement("multiCarrierPagingTDD_r15", -1);

               int tval = UE_RadioPagingInfo_NB_r13_multiCarrierPagingTDD_r15.decodeEnumValue (buffer);
               multiCarrierPagingTDD_r15 = UE_RadioPagingInfo_NB_r13_multiCarrierPagingTDD_r15.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("multiCarrierPagingTDD_r15", -1);
            }
            else {
               multiCarrierPagingTDD_r15 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (ue_Category_NB_r13 != null) ue_Category_NB_r13.print (_sb, "ue_Category_NB_r13", _level+1);
      if (multiCarrierPaging_r14 != null) multiCarrierPaging_r14.print (_sb, "multiCarrierPaging_r14", _level+1);
      if (mixedOperationMode_r15 != null) mixedOperationMode_r15.print (_sb, "mixedOperationMode_r15", _level+1);
      if (wakeUpSignal_r15 != null) wakeUpSignal_r15.print (_sb, "wakeUpSignal_r15", _level+1);
      if (wakeUpSignalMinGap_eDRX_r15 != null) wakeUpSignalMinGap_eDRX_r15.print (_sb, "wakeUpSignalMinGap_eDRX_r15", _level+1);
      if (multiCarrierPagingTDD_r15 != null) multiCarrierPagingTDD_r15.print (_sb, "multiCarrierPagingTDD_r15", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
