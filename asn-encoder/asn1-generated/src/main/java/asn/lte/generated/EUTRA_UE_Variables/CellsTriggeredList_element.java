/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_UE_Variables;

import com.objsys.asn1j.runtime.*;
import asn.lte.generated.EUTRA_RRC_Definitions.PhysCellId;
import asn.lte.generated.EUTRA_RRC_Definitions.PhysCellIdCDMA2000;
import asn.lte.generated.EUTRA_RRC_Definitions.WLAN_Identifiers_r12;

public class CellsTriggeredList_element extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_UE_VariablesRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CHOICE";
   }

   // Choice element identifier constants
   public final static byte _PHYSCELLIDEUTRA = 1;
   public final static byte _PHYSCELLIDUTRA = 2;
   public final static byte _PHYSCELLIDGERAN = 3;
   public final static byte _PHYSCELLIDCDMA2000 = 4;
   public final static byte _WLAN_IDENTIFIERS_R13 = 5;
   public final static byte _PHYSCELLIDNR_R15 = 6;

   public CellsTriggeredList_element () {
      super();
   }

   public CellsTriggeredList_element (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _PHYSCELLIDEUTRA: return "physCellIdEUTRA";
      case _PHYSCELLIDUTRA: return "physCellIdUTRA";
      case _PHYSCELLIDGERAN: return "physCellIdGERAN";
      case _PHYSCELLIDCDMA2000: return "physCellIdCDMA2000";
      case _WLAN_IDENTIFIERS_R13: return "wlan_Identifiers_r13";
      case _PHYSCELLIDNR_R15: return "physCellIdNR_r15";
      default: return "UNDEFINED";
      }
   }

   public void set_physCellIdEUTRA (PhysCellId value) {
      setElement (_PHYSCELLIDEUTRA, value);
   }

   public void set_physCellIdUTRA (CellsTriggeredList_element_physCellIdUTRA value) {
      setElement (_PHYSCELLIDUTRA, value);
   }

   public void set_physCellIdGERAN (CellsTriggeredList_element_physCellIdGERAN value) {
      setElement (_PHYSCELLIDGERAN, value);
   }

   public void set_physCellIdCDMA2000 (PhysCellIdCDMA2000 value) {
      setElement (_PHYSCELLIDCDMA2000, value);
   }

   public void set_wlan_Identifiers_r13 (WLAN_Identifiers_r12 value) {
      setElement (_WLAN_IDENTIFIERS_R13, value);
   }

   public void set_physCellIdNR_r15 (CellsTriggeredList_element_physCellIdNR_r15 value) {
      setElement (_PHYSCELLIDNR_R15, value);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int idx = (int) buffer.decodeConsWholeNumber (6, "index");
      choiceID = idx + 1;
      buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

      switch (idx) {
         // physCellIdEUTRA
         case 0: { 
            PhysCellId physCellIdEUTRA;
            element = physCellIdEUTRA = new PhysCellId();
            physCellIdEUTRA.decode (buffer);
            break;
         }

         // physCellIdUTRA
         case 1: { 
            CellsTriggeredList_element_physCellIdUTRA physCellIdUTRA;
            element = physCellIdUTRA = new CellsTriggeredList_element_physCellIdUTRA();
            physCellIdUTRA.decode (buffer);
            break;
         }

         // physCellIdGERAN
         case 2: { 
            CellsTriggeredList_element_physCellIdGERAN physCellIdGERAN;
            element = physCellIdGERAN = new CellsTriggeredList_element_physCellIdGERAN();
            physCellIdGERAN.decode (buffer);
            break;
         }

         // physCellIdCDMA2000
         case 3: { 
            PhysCellIdCDMA2000 physCellIdCDMA2000;
            element = physCellIdCDMA2000 = new PhysCellIdCDMA2000();
            physCellIdCDMA2000.decode (buffer);
            break;
         }

         // wlan_Identifiers_r13
         case 4: { 
            WLAN_Identifiers_r12 wlan_Identifiers_r13;
            element = wlan_Identifiers_r13 = new WLAN_Identifiers_r12();
            wlan_Identifiers_r13.decode (buffer);
            break;
         }

         // physCellIdNR_r15
         case 5: { 
            CellsTriggeredList_element_physCellIdNR_r15 physCellIdNR_r15;
            element = physCellIdNR_r15 = new CellsTriggeredList_element_physCellIdNR_r15();
            physCellIdNR_r15.decode (buffer);
            break;
         }

         default:
         throw new Asn1InvalidChoiceOptionException (buffer, idx);
      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (element != null) {
         element.print (_sb, getElemName(), _level+1);
      }
      indent (_sb, _level);
      _sb.append("}\n");
   }

}
