/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class PollByte extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "PollByte";
   }

   // Integer constants for switch-case
   public static final int _KB1 = 0;
   public static final int _KB2 = 1;
   public static final int _KB5 = 2;
   public static final int _KB8 = 3;
   public static final int _KB10 = 4;
   public static final int _KB15 = 5;
   public static final int _KB25 = 6;
   public static final int _KB50 = 7;
   public static final int _KB75 = 8;
   public static final int _KB100 = 9;
   public static final int _KB125 = 10;
   public static final int _KB250 = 11;
   public static final int _KB375 = 12;
   public static final int _KB500 = 13;
   public static final int _KB750 = 14;
   public static final int _KB1000 = 15;
   public static final int _KB1250 = 16;
   public static final int _KB1500 = 17;
   public static final int _KB2000 = 18;
   public static final int _KB3000 = 19;
   public static final int _KB4000 = 20;
   public static final int _KB4500 = 21;
   public static final int _KB5000 = 22;
   public static final int _KB5500 = 23;
   public static final int _KB6000 = 24;
   public static final int _KB6500 = 25;
   public static final int _KB7000 = 26;
   public static final int _KB7500 = 27;
   public static final int _MB8 = 28;
   public static final int _MB9 = 29;
   public static final int _MB10 = 30;
   public static final int _MB11 = 31;
   public static final int _MB12 = 32;
   public static final int _MB13 = 33;
   public static final int _MB14 = 34;
   public static final int _MB15 = 35;
   public static final int _MB16 = 36;
   public static final int _MB17 = 37;
   public static final int _MB18 = 38;
   public static final int _MB20 = 39;
   public static final int _MB25 = 40;
   public static final int _MB30 = 41;
   public static final int _MB40 = 42;
   public static final int _INFINITY = 43;
   public static final int _SPARE20 = 44;
   public static final int _SPARE19 = 45;
   public static final int _SPARE18 = 46;
   public static final int _SPARE17 = 47;
   public static final int _SPARE16 = 48;
   public static final int _SPARE15 = 49;
   public static final int _SPARE14 = 50;
   public static final int _SPARE13 = 51;
   public static final int _SPARE12 = 52;
   public static final int _SPARE11 = 53;
   public static final int _SPARE10 = 54;
   public static final int _SPARE9 = 55;
   public static final int _SPARE8 = 56;
   public static final int _SPARE7 = 57;
   public static final int _SPARE6 = 58;
   public static final int _SPARE5 = 59;
   public static final int _SPARE4 = 60;
   public static final int _SPARE3 = 61;
   public static final int _SPARE2 = 62;
   public static final int _SPARE1 = 63;

   // Singleton instances of PollByte
   protected static final PollByte _kB1 = new PollByte(0);
   protected static final PollByte _kB2 = new PollByte(1);
   protected static final PollByte _kB5 = new PollByte(2);
   protected static final PollByte _kB8 = new PollByte(3);
   protected static final PollByte _kB10 = new PollByte(4);
   protected static final PollByte _kB15 = new PollByte(5);
   protected static final PollByte _kB25 = new PollByte(6);
   protected static final PollByte _kB50 = new PollByte(7);
   protected static final PollByte _kB75 = new PollByte(8);
   protected static final PollByte _kB100 = new PollByte(9);
   protected static final PollByte _kB125 = new PollByte(10);
   protected static final PollByte _kB250 = new PollByte(11);
   protected static final PollByte _kB375 = new PollByte(12);
   protected static final PollByte _kB500 = new PollByte(13);
   protected static final PollByte _kB750 = new PollByte(14);
   protected static final PollByte _kB1000 = new PollByte(15);
   protected static final PollByte _kB1250 = new PollByte(16);
   protected static final PollByte _kB1500 = new PollByte(17);
   protected static final PollByte _kB2000 = new PollByte(18);
   protected static final PollByte _kB3000 = new PollByte(19);
   protected static final PollByte _kB4000 = new PollByte(20);
   protected static final PollByte _kB4500 = new PollByte(21);
   protected static final PollByte _kB5000 = new PollByte(22);
   protected static final PollByte _kB5500 = new PollByte(23);
   protected static final PollByte _kB6000 = new PollByte(24);
   protected static final PollByte _kB6500 = new PollByte(25);
   protected static final PollByte _kB7000 = new PollByte(26);
   protected static final PollByte _kB7500 = new PollByte(27);
   protected static final PollByte _mB8 = new PollByte(28);
   protected static final PollByte _mB9 = new PollByte(29);
   protected static final PollByte _mB10 = new PollByte(30);
   protected static final PollByte _mB11 = new PollByte(31);
   protected static final PollByte _mB12 = new PollByte(32);
   protected static final PollByte _mB13 = new PollByte(33);
   protected static final PollByte _mB14 = new PollByte(34);
   protected static final PollByte _mB15 = new PollByte(35);
   protected static final PollByte _mB16 = new PollByte(36);
   protected static final PollByte _mB17 = new PollByte(37);
   protected static final PollByte _mB18 = new PollByte(38);
   protected static final PollByte _mB20 = new PollByte(39);
   protected static final PollByte _mB25 = new PollByte(40);
   protected static final PollByte _mB30 = new PollByte(41);
   protected static final PollByte _mB40 = new PollByte(42);
   protected static final PollByte _infinity = new PollByte(43);
   protected static final PollByte _spare20 = new PollByte(44);
   protected static final PollByte _spare19 = new PollByte(45);
   protected static final PollByte _spare18 = new PollByte(46);
   protected static final PollByte _spare17 = new PollByte(47);
   protected static final PollByte _spare16 = new PollByte(48);
   protected static final PollByte _spare15 = new PollByte(49);
   protected static final PollByte _spare14 = new PollByte(50);
   protected static final PollByte _spare13 = new PollByte(51);
   protected static final PollByte _spare12 = new PollByte(52);
   protected static final PollByte _spare11 = new PollByte(53);
   protected static final PollByte _spare10 = new PollByte(54);
   protected static final PollByte _spare9 = new PollByte(55);
   protected static final PollByte _spare8 = new PollByte(56);
   protected static final PollByte _spare7 = new PollByte(57);
   protected static final PollByte _spare6 = new PollByte(58);
   protected static final PollByte _spare5 = new PollByte(59);
   protected static final PollByte _spare4 = new PollByte(60);
   protected static final PollByte _spare3 = new PollByte(61);
   protected static final PollByte _spare2 = new PollByte(62);
   protected static final PollByte _spare1 = new PollByte(63);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    *   7
    *   8
    *   9
    *   10
    *   11
    *   12
    *   13
    *   14
    *   15
    *   16
    *   17
    *   18
    *   19
    *   20
    *   21
    *   22
    *   23
    *   24
    *   25
    *   26
    *   27
    *   28
    *   29
    *   30
    *   31
    *   32
    *   33
    *   34
    *   35
    *   36
    *   37
    *   38
    *   39
    *   40
    *   41
    *   42
    *   43
    *   44
    *   45
    *   46
    *   47
    *   48
    *   49
    *   50
    *   51
    *   52
    *   53
    *   54
    *   55
    *   56
    *   57
    *   58
    *   59
    *   60
    *   61
    *   62
    *   63
    */
   protected PollByte (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for kB1.
    */
   public static PollByte kB1() {
      return _kB1;
   }

   /**
    * Singleton accessor method for kB2.
    */
   public static PollByte kB2() {
      return _kB2;
   }

   /**
    * Singleton accessor method for kB5.
    */
   public static PollByte kB5() {
      return _kB5;
   }

   /**
    * Singleton accessor method for kB8.
    */
   public static PollByte kB8() {
      return _kB8;
   }

   /**
    * Singleton accessor method for kB10.
    */
   public static PollByte kB10() {
      return _kB10;
   }

   /**
    * Singleton accessor method for kB15.
    */
   public static PollByte kB15() {
      return _kB15;
   }

   /**
    * Singleton accessor method for kB25.
    */
   public static PollByte kB25() {
      return _kB25;
   }

   /**
    * Singleton accessor method for kB50.
    */
   public static PollByte kB50() {
      return _kB50;
   }

   /**
    * Singleton accessor method for kB75.
    */
   public static PollByte kB75() {
      return _kB75;
   }

   /**
    * Singleton accessor method for kB100.
    */
   public static PollByte kB100() {
      return _kB100;
   }

   /**
    * Singleton accessor method for kB125.
    */
   public static PollByte kB125() {
      return _kB125;
   }

   /**
    * Singleton accessor method for kB250.
    */
   public static PollByte kB250() {
      return _kB250;
   }

   /**
    * Singleton accessor method for kB375.
    */
   public static PollByte kB375() {
      return _kB375;
   }

   /**
    * Singleton accessor method for kB500.
    */
   public static PollByte kB500() {
      return _kB500;
   }

   /**
    * Singleton accessor method for kB750.
    */
   public static PollByte kB750() {
      return _kB750;
   }

   /**
    * Singleton accessor method for kB1000.
    */
   public static PollByte kB1000() {
      return _kB1000;
   }

   /**
    * Singleton accessor method for kB1250.
    */
   public static PollByte kB1250() {
      return _kB1250;
   }

   /**
    * Singleton accessor method for kB1500.
    */
   public static PollByte kB1500() {
      return _kB1500;
   }

   /**
    * Singleton accessor method for kB2000.
    */
   public static PollByte kB2000() {
      return _kB2000;
   }

   /**
    * Singleton accessor method for kB3000.
    */
   public static PollByte kB3000() {
      return _kB3000;
   }

   /**
    * Singleton accessor method for kB4000.
    */
   public static PollByte kB4000() {
      return _kB4000;
   }

   /**
    * Singleton accessor method for kB4500.
    */
   public static PollByte kB4500() {
      return _kB4500;
   }

   /**
    * Singleton accessor method for kB5000.
    */
   public static PollByte kB5000() {
      return _kB5000;
   }

   /**
    * Singleton accessor method for kB5500.
    */
   public static PollByte kB5500() {
      return _kB5500;
   }

   /**
    * Singleton accessor method for kB6000.
    */
   public static PollByte kB6000() {
      return _kB6000;
   }

   /**
    * Singleton accessor method for kB6500.
    */
   public static PollByte kB6500() {
      return _kB6500;
   }

   /**
    * Singleton accessor method for kB7000.
    */
   public static PollByte kB7000() {
      return _kB7000;
   }

   /**
    * Singleton accessor method for kB7500.
    */
   public static PollByte kB7500() {
      return _kB7500;
   }

   /**
    * Singleton accessor method for mB8.
    */
   public static PollByte mB8() {
      return _mB8;
   }

   /**
    * Singleton accessor method for mB9.
    */
   public static PollByte mB9() {
      return _mB9;
   }

   /**
    * Singleton accessor method for mB10.
    */
   public static PollByte mB10() {
      return _mB10;
   }

   /**
    * Singleton accessor method for mB11.
    */
   public static PollByte mB11() {
      return _mB11;
   }

   /**
    * Singleton accessor method for mB12.
    */
   public static PollByte mB12() {
      return _mB12;
   }

   /**
    * Singleton accessor method for mB13.
    */
   public static PollByte mB13() {
      return _mB13;
   }

   /**
    * Singleton accessor method for mB14.
    */
   public static PollByte mB14() {
      return _mB14;
   }

   /**
    * Singleton accessor method for mB15.
    */
   public static PollByte mB15() {
      return _mB15;
   }

   /**
    * Singleton accessor method for mB16.
    */
   public static PollByte mB16() {
      return _mB16;
   }

   /**
    * Singleton accessor method for mB17.
    */
   public static PollByte mB17() {
      return _mB17;
   }

   /**
    * Singleton accessor method for mB18.
    */
   public static PollByte mB18() {
      return _mB18;
   }

   /**
    * Singleton accessor method for mB20.
    */
   public static PollByte mB20() {
      return _mB20;
   }

   /**
    * Singleton accessor method for mB25.
    */
   public static PollByte mB25() {
      return _mB25;
   }

   /**
    * Singleton accessor method for mB30.
    */
   public static PollByte mB30() {
      return _mB30;
   }

   /**
    * Singleton accessor method for mB40.
    */
   public static PollByte mB40() {
      return _mB40;
   }

   /**
    * Singleton accessor method for infinity.
    */
   public static PollByte infinity() {
      return _infinity;
   }

   /**
    * Singleton accessor method for spare20.
    */
   public static PollByte spare20() {
      return _spare20;
   }

   /**
    * Singleton accessor method for spare19.
    */
   public static PollByte spare19() {
      return _spare19;
   }

   /**
    * Singleton accessor method for spare18.
    */
   public static PollByte spare18() {
      return _spare18;
   }

   /**
    * Singleton accessor method for spare17.
    */
   public static PollByte spare17() {
      return _spare17;
   }

   /**
    * Singleton accessor method for spare16.
    */
   public static PollByte spare16() {
      return _spare16;
   }

   /**
    * Singleton accessor method for spare15.
    */
   public static PollByte spare15() {
      return _spare15;
   }

   /**
    * Singleton accessor method for spare14.
    */
   public static PollByte spare14() {
      return _spare14;
   }

   /**
    * Singleton accessor method for spare13.
    */
   public static PollByte spare13() {
      return _spare13;
   }

   /**
    * Singleton accessor method for spare12.
    */
   public static PollByte spare12() {
      return _spare12;
   }

   /**
    * Singleton accessor method for spare11.
    */
   public static PollByte spare11() {
      return _spare11;
   }

   /**
    * Singleton accessor method for spare10.
    */
   public static PollByte spare10() {
      return _spare10;
   }

   /**
    * Singleton accessor method for spare9.
    */
   public static PollByte spare9() {
      return _spare9;
   }

   /**
    * Singleton accessor method for spare8.
    */
   public static PollByte spare8() {
      return _spare8;
   }

   /**
    * Singleton accessor method for spare7.
    */
   public static PollByte spare7() {
      return _spare7;
   }

   /**
    * Singleton accessor method for spare6.
    */
   public static PollByte spare6() {
      return _spare6;
   }

   /**
    * Singleton accessor method for spare5.
    */
   public static PollByte spare5() {
      return _spare5;
   }

   /**
    * Singleton accessor method for spare4.
    */
   public static PollByte spare4() {
      return _spare4;
   }

   /**
    * Singleton accessor method for spare3.
    */
   public static PollByte spare3() {
      return _spare3;
   }

   /**
    * Singleton accessor method for spare2.
    */
   public static PollByte spare2() {
      return _spare2;
   }

   /**
    * Singleton accessor method for spare1.
    */
   public static PollByte spare1() {
      return _spare1;
   }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return PollByte.valueOf( PollByte.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static PollByte valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 0: return kB1();
         case 1: return kB2();
         case 2: return kB5();
         case 3: return kB8();
         case 4: return kB10();
         case 5: return kB15();
         case 6: return kB25();
         case 7: return kB50();
         case 8: return kB75();
         case 9: return kB100();
         case 10: return kB125();
         case 11: return kB250();
         case 12: return kB375();
         case 13: return kB500();
         case 14: return kB750();
         case 15: return kB1000();
         case 16: return kB1250();
         case 17: return kB1500();
         case 18: return kB2000();
         case 19: return kB3000();
         case 20: return kB4000();
         case 21: return kB4500();
         case 22: return kB5000();
         case 23: return kB5500();
         case 24: return kB6000();
         case 25: return kB6500();
         case 26: return kB7000();
         case 27: return kB7500();
         case 28: return mB8();
         case 29: return mB9();
         case 30: return mB10();
         case 31: return mB11();
         case 32: return mB12();
         case 33: return mB13();
         case 34: return mB14();
         case 35: return mB15();
         case 36: return mB16();
         case 37: return mB17();
         case 38: return mB18();
         case 39: return mB20();
         case 40: return mB25();
         case 41: return mB30();
         case 42: return mB40();
         case 43: return infinity();
         case 44: return spare20();
         case 45: return spare19();
         case 46: return spare18();
         case 47: return spare17();
         case 48: return spare16();
         case 49: return spare15();
         case 50: return spare14();
         case 51: return spare13();
         case 52: return spare12();
         case 53: return spare11();
         case 54: return spare10();
         case 55: return spare9();
         case 56: return spare8();
         case 57: return spare7();
         case 58: return spare6();
         case 59: return spare5();
         case 60: return spare4();
         case 61: return spare3();
         case 62: return spare2();
         case 63: return spare1();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      ui = (int) buffer.decodeConsWholeNumber (64);

      switch (ui) {
         case 0: ret =  0; break;
         case 1: ret =  1; break;
         case 2: ret =  2; break;
         case 3: ret =  3; break;
         case 4: ret =  4; break;
         case 5: ret =  5; break;
         case 6: ret =  6; break;
         case 7: ret =  7; break;
         case 8: ret =  8; break;
         case 9: ret =  9; break;
         case 10: ret =  10; break;
         case 11: ret =  11; break;
         case 12: ret =  12; break;
         case 13: ret =  13; break;
         case 14: ret =  14; break;
         case 15: ret =  15; break;
         case 16: ret =  16; break;
         case 17: ret =  17; break;
         case 18: ret =  18; break;
         case 19: ret =  19; break;
         case 20: ret =  20; break;
         case 21: ret =  21; break;
         case 22: ret =  22; break;
         case 23: ret =  23; break;
         case 24: ret =  24; break;
         case 25: ret =  25; break;
         case 26: ret =  26; break;
         case 27: ret =  27; break;
         case 28: ret =  28; break;
         case 29: ret =  29; break;
         case 30: ret =  30; break;
         case 31: ret =  31; break;
         case 32: ret =  32; break;
         case 33: ret =  33; break;
         case 34: ret =  34; break;
         case 35: ret =  35; break;
         case 36: ret =  36; break;
         case 37: ret =  37; break;
         case 38: ret =  38; break;
         case 39: ret =  39; break;
         case 40: ret =  40; break;
         case 41: ret =  41; break;
         case 42: ret =  42; break;
         case 43: ret =  43; break;
         case 44: ret =  44; break;
         case 45: ret =  45; break;
         case 46: ret =  46; break;
         case 47: ret =  47; break;
         case 48: ret =  48; break;
         case 49: ret =  49; break;
         case 50: ret =  50; break;
         case 51: ret =  51; break;
         case 52: ret =  52; break;
         case 53: ret =  53; break;
         case 54: ret =  54; break;
         case 55: ret =  55; break;
         case 56: ret =  56; break;
         case 57: ret =  57; break;
         case 58: ret =  58; break;
         case 59: ret =  59; break;
         case 60: ret =  60; break;
         case 61: ret =  61; break;
         case 62: ret =  62; break;
         case 63: ret =  63; break;
         default: throw new Asn1InvalidEnumException (ui);
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (PollByte.valueOf(ret).toString());

      return ret;
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("kB1");
         case 1: return ("kB2");
         case 2: return ("kB5");
         case 3: return ("kB8");
         case 4: return ("kB10");
         case 5: return ("kB15");
         case 6: return ("kB25");
         case 7: return ("kB50");
         case 8: return ("kB75");
         case 9: return ("kB100");
         case 10: return ("kB125");
         case 11: return ("kB250");
         case 12: return ("kB375");
         case 13: return ("kB500");
         case 14: return ("kB750");
         case 15: return ("kB1000");
         case 16: return ("kB1250");
         case 17: return ("kB1500");
         case 18: return ("kB2000");
         case 19: return ("kB3000");
         case 20: return ("kB4000");
         case 21: return ("kB4500");
         case 22: return ("kB5000");
         case 23: return ("kB5500");
         case 24: return ("kB6000");
         case 25: return ("kB6500");
         case 26: return ("kB7000");
         case 27: return ("kB7500");
         case 28: return ("mB8");
         case 29: return ("mB9");
         case 30: return ("mB10");
         case 31: return ("mB11");
         case 32: return ("mB12");
         case 33: return ("mB13");
         case 34: return ("mB14");
         case 35: return ("mB15");
         case 36: return ("mB16");
         case 37: return ("mB17");
         case 38: return ("mB18");
         case 39: return ("mB20");
         case 40: return ("mB25");
         case 41: return ("mB30");
         case 42: return ("mB40");
         case 43: return ("infinity");
         case 44: return ("spare20");
         case 45: return ("spare19");
         case 46: return ("spare18");
         case 47: return ("spare17");
         case 48: return ("spare16");
         case 49: return ("spare15");
         case 50: return ("spare14");
         case 51: return ("spare13");
         case 52: return ("spare12");
         case 53: return ("spare11");
         case 54: return ("spare10");
         case 55: return ("spare9");
         case 56: return ("spare8");
         case 57: return ("spare7");
         case 58: return ("spare6");
         case 59: return ("spare5");
         case 60: return ("spare4");
         case 61: return ("spare3");
         case 62: return ("spare2");
         case 63: return ("spare1");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
