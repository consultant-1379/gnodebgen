/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_UE_Variables;

import com.objsys.asn1j.runtime.*;

public class VarPendingRNA_Update extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_UE_VariablesRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "VarPendingRNA-Update";
   }

   public Asn1Boolean pendingRNA_Update;  // optional

   public VarPendingRNA_Update () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public VarPendingRNA_Update (
      Asn1Boolean pendingRNA_Update_
   ) {
      super();
      pendingRNA_Update = pendingRNA_Update_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public VarPendingRNA_Update (boolean pendingRNA_Update_
   ) {
      super();
      pendingRNA_Update = new Asn1Boolean (pendingRNA_Update_);
   }

   public void init () {
      pendingRNA_Update = null;
   }

   public int getElementCount() { return 1; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return pendingRNA_Update;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "pendingRNA-Update";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean pendingRNA_UpdatePresent = buffer.decodeBit ("pendingRNA_UpdatePresent");

      // decode pendingRNA_Update

      if (pendingRNA_UpdatePresent) {
         buffer.getContext().eventDispatcher.startElement("pendingRNA_Update", -1);

         pendingRNA_Update = new Asn1Boolean();
         pendingRNA_Update.decode (buffer);

         buffer.invokeCharacters(pendingRNA_Update.toString());
         buffer.getContext().eventDispatcher.endElement("pendingRNA_Update", -1);
      }
      else {
         pendingRNA_Update = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (pendingRNA_Update != null) pendingRNA_Update.print (_sb, "pendingRNA_Update", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
