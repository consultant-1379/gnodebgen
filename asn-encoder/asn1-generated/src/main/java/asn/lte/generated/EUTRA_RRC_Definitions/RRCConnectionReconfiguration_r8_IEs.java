/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class RRCConnectionReconfiguration_r8_IEs extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "RRCConnectionReconfiguration-r8-IEs";
   }

   public MeasConfig measConfig;  // optional
   public MobilityControlInfo mobilityControlInfo;  // optional
   public RRCConnectionReconfiguration_r8_IEs_dedicatedInfoNASList dedicatedInfoNASList;  // optional
   public RadioResourceConfigDedicated radioResourceConfigDedicated;  // optional
   public SecurityConfigHO securityConfigHO;  // optional
   public RRCConnectionReconfiguration_v890_IEs nonCriticalExtension;  // optional

   public RRCConnectionReconfiguration_r8_IEs () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public RRCConnectionReconfiguration_r8_IEs (
      MeasConfig measConfig_,
      MobilityControlInfo mobilityControlInfo_,
      RRCConnectionReconfiguration_r8_IEs_dedicatedInfoNASList dedicatedInfoNASList_,
      RadioResourceConfigDedicated radioResourceConfigDedicated_,
      SecurityConfigHO securityConfigHO_,
      RRCConnectionReconfiguration_v890_IEs nonCriticalExtension_
   ) {
      super();
      measConfig = measConfig_;
      mobilityControlInfo = mobilityControlInfo_;
      dedicatedInfoNASList = dedicatedInfoNASList_;
      radioResourceConfigDedicated = radioResourceConfigDedicated_;
      securityConfigHO = securityConfigHO_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   public void init () {
      measConfig = null;
      mobilityControlInfo = null;
      dedicatedInfoNASList = null;
      radioResourceConfigDedicated = null;
      securityConfigHO = null;
      nonCriticalExtension = null;
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return measConfig;
         case 1: return mobilityControlInfo;
         case 2: return dedicatedInfoNASList;
         case 3: return radioResourceConfigDedicated;
         case 4: return securityConfigHO;
         case 5: return nonCriticalExtension;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "measConfig";
         case 1: return "mobilityControlInfo";
         case 2: return "dedicatedInfoNASList";
         case 3: return "radioResourceConfigDedicated";
         case 4: return "securityConfigHO";
         case 5: return "nonCriticalExtension";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean measConfigPresent = buffer.decodeBit ("measConfigPresent");
      boolean mobilityControlInfoPresent = buffer.decodeBit ("mobilityControlInfoPresent");
      boolean dedicatedInfoNASListPresent = buffer.decodeBit ("dedicatedInfoNASListPresent");
      boolean radioResourceConfigDedicatedPresent = buffer.decodeBit ("radioResourceConfigDedicatedPresent");
      boolean securityConfigHOPresent = buffer.decodeBit ("securityConfigHOPresent");
      boolean nonCriticalExtensionPresent = buffer.decodeBit ("nonCriticalExtensionPresent");

      // decode measConfig

      if (measConfigPresent) {
         buffer.getContext().eventDispatcher.startElement("measConfig", -1);

         measConfig = new MeasConfig();
         measConfig.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("measConfig", -1);
      }
      else {
         measConfig = null;
      }

      // decode mobilityControlInfo

      if (mobilityControlInfoPresent) {
         buffer.getContext().eventDispatcher.startElement("mobilityControlInfo", -1);

         mobilityControlInfo = new MobilityControlInfo();
         mobilityControlInfo.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("mobilityControlInfo", -1);
      }
      else {
         mobilityControlInfo = null;
      }

      // decode dedicatedInfoNASList

      if (dedicatedInfoNASListPresent) {
         buffer.getContext().eventDispatcher.startElement("dedicatedInfoNASList", -1);

         dedicatedInfoNASList = new RRCConnectionReconfiguration_r8_IEs_dedicatedInfoNASList();
         dedicatedInfoNASList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("dedicatedInfoNASList", -1);
      }
      else {
         dedicatedInfoNASList = null;
      }

      // decode radioResourceConfigDedicated

      if (radioResourceConfigDedicatedPresent) {
         buffer.getContext().eventDispatcher.startElement("radioResourceConfigDedicated", -1);

         radioResourceConfigDedicated = new RadioResourceConfigDedicated();
         radioResourceConfigDedicated.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("radioResourceConfigDedicated", -1);
      }
      else {
         radioResourceConfigDedicated = null;
      }

      // decode securityConfigHO

      if (securityConfigHOPresent) {
         buffer.getContext().eventDispatcher.startElement("securityConfigHO", -1);

         securityConfigHO = new SecurityConfigHO();
         securityConfigHO.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("securityConfigHO", -1);
      }
      else {
         securityConfigHO = null;
      }

      // decode nonCriticalExtension

      if (nonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension = new RRCConnectionReconfiguration_v890_IEs();
         nonCriticalExtension.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }
      else {
         nonCriticalExtension = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (measConfig != null) measConfig.print (_sb, "measConfig", _level+1);
      if (mobilityControlInfo != null) mobilityControlInfo.print (_sb, "mobilityControlInfo", _level+1);
      if (dedicatedInfoNASList != null) dedicatedInfoNASList.print (_sb, "dedicatedInfoNASList", _level+1);
      if (radioResourceConfigDedicated != null) radioResourceConfigDedicated.print (_sb, "radioResourceConfigDedicated", _level+1);
      if (securityConfigHO != null) securityConfigHO.print (_sb, "securityConfigHO", _level+1);
      if (nonCriticalExtension != null) nonCriticalExtension.print (_sb, "nonCriticalExtension", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
