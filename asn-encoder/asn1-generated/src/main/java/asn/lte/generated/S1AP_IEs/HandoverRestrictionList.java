/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.S1AP_IEs;

import com.objsys.asn1j.runtime.*;

public class HandoverRestrictionList extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_S1AP_IEsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "HandoverRestrictionList";
   }

   public PLMNidentity servingPLMN;
   public EPLMNs equivalentPLMNs;  // optional
   public ForbiddenTAs forbiddenTAs;  // optional
   public ForbiddenLAs forbiddenLAs;  // optional
   public ForbiddenInterRATs forbiddenInterRATs = null;  // optional
   public HandoverRestrictionList_iE_Extensions iE_Extensions;  // optional
   public Asn1OpenExt extElem1;

   public HandoverRestrictionList () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public HandoverRestrictionList (
      PLMNidentity servingPLMN_,
      EPLMNs equivalentPLMNs_,
      ForbiddenTAs forbiddenTAs_,
      ForbiddenLAs forbiddenLAs_,
      ForbiddenInterRATs forbiddenInterRATs_,
      HandoverRestrictionList_iE_Extensions iE_Extensions_
   ) {
      super();
      servingPLMN = servingPLMN_;
      equivalentPLMNs = equivalentPLMNs_;
      forbiddenTAs = forbiddenTAs_;
      forbiddenLAs = forbiddenLAs_;
      forbiddenInterRATs = forbiddenInterRATs_;
      iE_Extensions = iE_Extensions_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public HandoverRestrictionList (
      PLMNidentity servingPLMN_
   ) {
      super();
      servingPLMN = servingPLMN_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public HandoverRestrictionList (byte[] servingPLMN_,
      EPLMNs equivalentPLMNs_,
      ForbiddenTAs forbiddenTAs_,
      ForbiddenLAs forbiddenLAs_,
      ForbiddenInterRATs forbiddenInterRATs_,
      HandoverRestrictionList_iE_Extensions iE_Extensions_
   ) {
      super();
      servingPLMN = new PLMNidentity (servingPLMN_);
      equivalentPLMNs = equivalentPLMNs_;
      forbiddenTAs = forbiddenTAs_;
      forbiddenLAs = forbiddenLAs_;
      forbiddenInterRATs = forbiddenInterRATs_;
      iE_Extensions = iE_Extensions_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public HandoverRestrictionList (
      byte[] servingPLMN_
   ) {
      super();
      servingPLMN = new PLMNidentity (servingPLMN_);
   }

   public void init () {
      servingPLMN = null;
      equivalentPLMNs = null;
      forbiddenTAs = null;
      forbiddenLAs = null;
      forbiddenInterRATs = null;
      iE_Extensions = null;
      extElem1 = null;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return servingPLMN;
         case 1: return equivalentPLMNs;
         case 2: return forbiddenTAs;
         case 3: return forbiddenLAs;
         case 4: return forbiddenInterRATs;
         case 5: return iE_Extensions;
         case 6: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "servingPLMN";
         case 1: return "equivalentPLMNs";
         case 2: return "forbiddenTAs";
         case 3: return "forbiddenLAs";
         case 4: return "forbiddenInterRATs";
         case 5: return "iE-Extensions";
         case 6: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean equivalentPLMNsPresent = buffer.decodeBit ("equivalentPLMNsPresent");
      boolean forbiddenTAsPresent = buffer.decodeBit ("forbiddenTAsPresent");
      boolean forbiddenLAsPresent = buffer.decodeBit ("forbiddenLAsPresent");
      boolean forbiddenInterRATsPresent = buffer.decodeBit ("forbiddenInterRATsPresent");
      boolean iE_ExtensionsPresent = buffer.decodeBit ("iE_ExtensionsPresent");

      // decode servingPLMN

      buffer.getContext().eventDispatcher.startElement("servingPLMN", -1);

      servingPLMN = new PLMNidentity();
      servingPLMN.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("servingPLMN", -1);

      // decode equivalentPLMNs

      if (equivalentPLMNsPresent) {
         buffer.getContext().eventDispatcher.startElement("equivalentPLMNs", -1);

         equivalentPLMNs = new EPLMNs();
         equivalentPLMNs.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("equivalentPLMNs", -1);
      }
      else {
         equivalentPLMNs = null;
      }

      // decode forbiddenTAs

      if (forbiddenTAsPresent) {
         buffer.getContext().eventDispatcher.startElement("forbiddenTAs", -1);

         forbiddenTAs = new ForbiddenTAs();
         forbiddenTAs.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("forbiddenTAs", -1);
      }
      else {
         forbiddenTAs = null;
      }

      // decode forbiddenLAs

      if (forbiddenLAsPresent) {
         buffer.getContext().eventDispatcher.startElement("forbiddenLAs", -1);

         forbiddenLAs = new ForbiddenLAs();
         forbiddenLAs.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("forbiddenLAs", -1);
      }
      else {
         forbiddenLAs = null;
      }

      // decode forbiddenInterRATs

      if (forbiddenInterRATsPresent) {
         buffer.getContext().eventDispatcher.startElement("forbiddenInterRATs", -1);

         int tval = ForbiddenInterRATs.decodeEnumValue (buffer);
         forbiddenInterRATs = ForbiddenInterRATs.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("forbiddenInterRATs", -1);
      }
      else {
         forbiddenInterRATs = null;
      }

      // decode iE_Extensions

      if (iE_ExtensionsPresent) {
         buffer.getContext().eventDispatcher.startElement("iE_Extensions", -1);

         iE_Extensions = new HandoverRestrictionList_iE_Extensions();
         iE_Extensions.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("iE_Extensions", -1);
      }
      else {
         iE_Extensions = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (servingPLMN != null) servingPLMN.print (_sb, "servingPLMN", _level+1);
      if (equivalentPLMNs != null) equivalentPLMNs.print (_sb, "equivalentPLMNs", _level+1);
      if (forbiddenTAs != null) forbiddenTAs.print (_sb, "forbiddenTAs", _level+1);
      if (forbiddenLAs != null) forbiddenLAs.print (_sb, "forbiddenLAs", _level+1);
      if (forbiddenInterRATs != null) forbiddenInterRATs.print (_sb, "forbiddenInterRATs", _level+1);
      if (iE_Extensions != null) iE_Extensions.print (_sb, "iE_Extensions", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
