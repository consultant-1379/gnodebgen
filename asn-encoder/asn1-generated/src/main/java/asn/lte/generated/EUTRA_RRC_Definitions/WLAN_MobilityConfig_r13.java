/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class WLAN_MobilityConfig_r13 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "WLAN-MobilityConfig-r13";
   }

   public WLAN_Id_List_r13 wlan_ToReleaseList_r13;  // optional
   public WLAN_Id_List_r13 wlan_ToAddList_r13;  // optional
   public WLAN_MobilityConfig_r13_associationTimer_r13 associationTimer_r13 = null;  // optional
   public WLAN_MobilityConfig_r13_successReportRequested_r13 successReportRequested_r13 = null;  // optional
   public boolean mV2ExtPresent;
   public WLAN_SuspendConfig_r14 wlan_SuspendConfig_r14;  // optional
   public Asn1OpenExt extElem1;

   public WLAN_MobilityConfig_r13 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public WLAN_MobilityConfig_r13 (
      WLAN_Id_List_r13 wlan_ToReleaseList_r13_,
      WLAN_Id_List_r13 wlan_ToAddList_r13_,
      WLAN_MobilityConfig_r13_associationTimer_r13 associationTimer_r13_,
      WLAN_MobilityConfig_r13_successReportRequested_r13 successReportRequested_r13_,
      WLAN_SuspendConfig_r14 wlan_SuspendConfig_r14_
   ) {
      super();
      wlan_ToReleaseList_r13 = wlan_ToReleaseList_r13_;
      wlan_ToAddList_r13 = wlan_ToAddList_r13_;
      associationTimer_r13 = associationTimer_r13_;
      successReportRequested_r13 = successReportRequested_r13_;
      wlan_SuspendConfig_r14 = wlan_SuspendConfig_r14_;
   }

   public void init () {
      wlan_ToReleaseList_r13 = null;
      wlan_ToAddList_r13 = null;
      associationTimer_r13 = null;
      successReportRequested_r13 = null;
      wlan_SuspendConfig_r14 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return wlan_ToReleaseList_r13;
         case 1: return wlan_ToAddList_r13;
         case 2: return associationTimer_r13;
         case 3: return successReportRequested_r13;
         case 4: return wlan_SuspendConfig_r14;
         case 5: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "wlan-ToReleaseList-r13";
         case 1: return "wlan-ToAddList-r13";
         case 2: return "associationTimer-r13";
         case 3: return "successReportRequested-r13";
         case 4: return "wlan-SuspendConfig-r14";
         case 5: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean wlan_ToReleaseList_r13Present = buffer.decodeBit ("wlan_ToReleaseList_r13Present");
      boolean wlan_ToAddList_r13Present = buffer.decodeBit ("wlan_ToAddList_r13Present");
      boolean associationTimer_r13Present = buffer.decodeBit ("associationTimer_r13Present");
      boolean successReportRequested_r13Present = buffer.decodeBit ("successReportRequested_r13Present");

      // decode wlan_ToReleaseList_r13

      if (wlan_ToReleaseList_r13Present) {
         buffer.getContext().eventDispatcher.startElement("wlan_ToReleaseList_r13", -1);

         wlan_ToReleaseList_r13 = new WLAN_Id_List_r13();
         wlan_ToReleaseList_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("wlan_ToReleaseList_r13", -1);
      }
      else {
         wlan_ToReleaseList_r13 = null;
      }

      // decode wlan_ToAddList_r13

      if (wlan_ToAddList_r13Present) {
         buffer.getContext().eventDispatcher.startElement("wlan_ToAddList_r13", -1);

         wlan_ToAddList_r13 = new WLAN_Id_List_r13();
         wlan_ToAddList_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("wlan_ToAddList_r13", -1);
      }
      else {
         wlan_ToAddList_r13 = null;
      }

      // decode associationTimer_r13

      if (associationTimer_r13Present) {
         buffer.getContext().eventDispatcher.startElement("associationTimer_r13", -1);

         int tval = WLAN_MobilityConfig_r13_associationTimer_r13.decodeEnumValue (buffer);
         associationTimer_r13 = WLAN_MobilityConfig_r13_associationTimer_r13.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("associationTimer_r13", -1);
      }
      else {
         associationTimer_r13 = null;
      }

      // decode successReportRequested_r13

      if (successReportRequested_r13Present) {
         buffer.getContext().eventDispatcher.startElement("successReportRequested_r13", -1);

         int tval = WLAN_MobilityConfig_r13_successReportRequested_r13.decodeEnumValue (buffer);
         successReportRequested_r13 = WLAN_MobilityConfig_r13_successReportRequested_r13.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("successReportRequested_r13", -1);
      }
      else {
         successReportRequested_r13 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean wlan_SuspendConfig_r14Present = buffer.decodeBit ("wlan_SuspendConfig_r14Present");

            // decode wlan_SuspendConfig_r14

            if (wlan_SuspendConfig_r14Present) {
               buffer.getContext().eventDispatcher.startElement("wlan_SuspendConfig_r14", -1);

               wlan_SuspendConfig_r14 = new WLAN_SuspendConfig_r14();
               wlan_SuspendConfig_r14.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("wlan_SuspendConfig_r14", -1);
            }
            else {
               wlan_SuspendConfig_r14 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (wlan_ToReleaseList_r13 != null) wlan_ToReleaseList_r13.print (_sb, "wlan_ToReleaseList_r13", _level+1);
      if (wlan_ToAddList_r13 != null) wlan_ToAddList_r13.print (_sb, "wlan_ToAddList_r13", _level+1);
      if (associationTimer_r13 != null) associationTimer_r13.print (_sb, "associationTimer_r13", _level+1);
      if (successReportRequested_r13 != null) successReportRequested_r13.print (_sb, "successReportRequested_r13", _level+1);
      if (wlan_SuspendConfig_r14 != null) wlan_SuspendConfig_r14.print (_sb, "wlan_SuspendConfig_r14", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
