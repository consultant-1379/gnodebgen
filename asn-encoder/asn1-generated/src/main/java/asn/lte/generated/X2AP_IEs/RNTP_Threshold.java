/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.X2AP_IEs;

import com.objsys.asn1j.runtime.*;

public class RNTP_Threshold extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_X2AP_IEsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "RNTP-Threshold";
   }

   // Integer constants for switch-case
   public static final int _MINUSINFINITY = 0;
   public static final int _MINUSELEVEN = 1;
   public static final int _MINUSTEN = 2;
   public static final int _MINUSNINE = 3;
   public static final int _MINUSEIGHT = 4;
   public static final int _MINUSSEVEN = 5;
   public static final int _MINUSSIX = 6;
   public static final int _MINUSFIVE = 7;
   public static final int _MINUSFOUR = 8;
   public static final int _MINUSTHREE = 9;
   public static final int _MINUSTWO = 10;
   public static final int _MINUSONE = 11;
   public static final int _ZERO = 12;
   public static final int _ONE = 13;
   public static final int _TWO = 14;
   public static final int _THREE = 15;

   // Singleton instances of RNTP_Threshold
   protected static final RNTP_Threshold _minusInfinity = new RNTP_Threshold(0);
   protected static final RNTP_Threshold _minusEleven = new RNTP_Threshold(1);
   protected static final RNTP_Threshold _minusTen = new RNTP_Threshold(2);
   protected static final RNTP_Threshold _minusNine = new RNTP_Threshold(3);
   protected static final RNTP_Threshold _minusEight = new RNTP_Threshold(4);
   protected static final RNTP_Threshold _minusSeven = new RNTP_Threshold(5);
   protected static final RNTP_Threshold _minusSix = new RNTP_Threshold(6);
   protected static final RNTP_Threshold _minusFive = new RNTP_Threshold(7);
   protected static final RNTP_Threshold _minusFour = new RNTP_Threshold(8);
   protected static final RNTP_Threshold _minusThree = new RNTP_Threshold(9);
   protected static final RNTP_Threshold _minusTwo = new RNTP_Threshold(10);
   protected static final RNTP_Threshold _minusOne = new RNTP_Threshold(11);
   protected static final RNTP_Threshold _zero = new RNTP_Threshold(12);
   protected static final RNTP_Threshold _one = new RNTP_Threshold(13);
   protected static final RNTP_Threshold _two = new RNTP_Threshold(14);
   protected static final RNTP_Threshold _three = new RNTP_Threshold(15);
   private static RNTP_Threshold __undefined = new RNTP_Threshold(-999);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    *   7
    *   8
    *   9
    *   10
    *   11
    *   12
    *   13
    *   14
    *   15
    */
   protected RNTP_Threshold (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for minusInfinity.
    */
   public static RNTP_Threshold minusInfinity() {
      return _minusInfinity;
   }

   /**
    * Singleton accessor method for minusEleven.
    */
   public static RNTP_Threshold minusEleven() {
      return _minusEleven;
   }

   /**
    * Singleton accessor method for minusTen.
    */
   public static RNTP_Threshold minusTen() {
      return _minusTen;
   }

   /**
    * Singleton accessor method for minusNine.
    */
   public static RNTP_Threshold minusNine() {
      return _minusNine;
   }

   /**
    * Singleton accessor method for minusEight.
    */
   public static RNTP_Threshold minusEight() {
      return _minusEight;
   }

   /**
    * Singleton accessor method for minusSeven.
    */
   public static RNTP_Threshold minusSeven() {
      return _minusSeven;
   }

   /**
    * Singleton accessor method for minusSix.
    */
   public static RNTP_Threshold minusSix() {
      return _minusSix;
   }

   /**
    * Singleton accessor method for minusFive.
    */
   public static RNTP_Threshold minusFive() {
      return _minusFive;
   }

   /**
    * Singleton accessor method for minusFour.
    */
   public static RNTP_Threshold minusFour() {
      return _minusFour;
   }

   /**
    * Singleton accessor method for minusThree.
    */
   public static RNTP_Threshold minusThree() {
      return _minusThree;
   }

   /**
    * Singleton accessor method for minusTwo.
    */
   public static RNTP_Threshold minusTwo() {
      return _minusTwo;
   }

   /**
    * Singleton accessor method for minusOne.
    */
   public static RNTP_Threshold minusOne() {
      return _minusOne;
   }

   /**
    * Singleton accessor method for zero.
    */
   public static RNTP_Threshold zero() {
      return _zero;
   }

   /**
    * Singleton accessor method for one.
    */
   public static RNTP_Threshold one() {
      return _one;
   }

   /**
    * Singleton accessor method for two.
    */
   public static RNTP_Threshold two() {
      return _two;
   }

   /**
    * Singleton accessor method for three.
    */
   public static RNTP_Threshold three() {
      return _three;
   }

   /** Undefined value. */
   protected static RNTP_Threshold __undefined_() { return __undefined; }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return RNTP_Threshold.valueOf( RNTP_Threshold.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static RNTP_Threshold valueOf (int _value)
   {
      switch ((int)_value) {
         case 0: return minusInfinity();
         case 1: return minusEleven();
         case 2: return minusTen();
         case 3: return minusNine();
         case 4: return minusEight();
         case 5: return minusSeven();
         case 6: return minusSix();
         case 7: return minusFive();
         case 8: return minusFour();
         case 9: return minusThree();
         case 10: return minusTwo();
         case 11: return minusOne();
         case 12: return zero();
         case 13: return one();
         case 14: return two();
         case 15: return three();
         default: return __undefined_();
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      boolean extbit = buffer.decodeBit ("extbit");

      if (extbit) {
         ui = buffer.decodeSmallNonNegWholeNumber ();

         return 0x7fffffff;
      }
      else {
         ui = (int) buffer.decodeConsWholeNumber (16);

         switch (ui) {
            case 0: ret =  0; break;
            case 1: ret =  1; break;
            case 2: ret =  2; break;
            case 3: ret =  3; break;
            case 4: ret =  4; break;
            case 5: ret =  5; break;
            case 6: ret =  6; break;
            case 7: ret =  7; break;
            case 8: ret =  8; break;
            case 9: ret =  9; break;
            case 10: ret =  10; break;
            case 11: ret =  11; break;
            case 12: ret =  12; break;
            case 13: ret =  13; break;
            case 14: ret =  14; break;
            case 15: ret =  15; break;
            default: throw new Asn1InvalidEnumException (ui);
         }
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (RNTP_Threshold.valueOf(ret).toString());

      return ret;
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("minusInfinity");
         case 1: return ("minusEleven");
         case 2: return ("minusTen");
         case 3: return ("minusNine");
         case 4: return ("minusEight");
         case 5: return ("minusSeven");
         case 6: return ("minusSix");
         case 7: return ("minusFive");
         case 8: return ("minusFour");
         case 9: return ("minusThree");
         case 10: return ("minusTwo");
         case 11: return ("minusOne");
         case 12: return ("zero");
         case 13: return ("one");
         case 14: return ("two");
         case 15: return ("three");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
