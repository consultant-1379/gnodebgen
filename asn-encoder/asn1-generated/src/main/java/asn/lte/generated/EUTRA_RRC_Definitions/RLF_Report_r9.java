/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class RLF_Report_r9 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "RLF-Report-r9";
   }

   public RLF_Report_r9_measResultLastServCell_r9 measResultLastServCell_r9;
   public RLF_Report_r9_measResultNeighCells_r9 measResultNeighCells_r9;  // optional
   public boolean mV2ExtPresent;
   public LocationInfo_r10 locationInfo_r10;  // optional
   public RLF_Report_r9_failedPCellId_r10 failedPCellId_r10;  // optional
   public CellGlobalIdEUTRA reestablishmentCellId_r10;  // optional
   public Asn1Integer timeConnFailure_r10;  // optional
   public RLF_Report_r9_connectionFailureType_r10 connectionFailureType_r10 = null;  // optional
   public CellGlobalIdEUTRA previousPCellId_r10;  // optional
   public boolean mV3ExtPresent;
   public RLF_Report_r9_failedPCellId_v1090 failedPCellId_v1090;  // optional
   public boolean mV4ExtPresent;
   public RLF_Report_r9_basicFields_r11 basicFields_r11;  // optional
   public RLF_Report_r9_previousUTRA_CellId_r11 previousUTRA_CellId_r11;  // optional
   public RLF_Report_r9_selectedUTRA_CellId_r11 selectedUTRA_CellId_r11;  // optional
   public boolean mV5ExtPresent;
   public RLF_Report_r9_failedPCellId_v1250 failedPCellId_v1250;  // optional
   public RSRQ_Range_v1250 measResultLastServCell_v1250;  // optional
   public RSRQ_Type_r12 lastServCellRSRQ_Type_r12;  // optional
   public MeasResultList2EUTRA_v1250 measResultListEUTRA_v1250;  // optional
   public boolean mV6ExtPresent;
   public RLF_Report_r9_drb_EstablishedWithQCI_1_r13 drb_EstablishedWithQCI_1_r13 = null;  // optional
   public boolean mV7ExtPresent;
   public RSRP_Range_v1360 measResultLastServCell_v1360;  // optional
   public boolean mV8ExtPresent;
   public LogMeasResultListBT_r15 logMeasResultListBT_r15;  // optional
   public LogMeasResultListWLAN_r15 logMeasResultListWLAN_r15;  // optional
   public Asn1OpenExt extElem1;

   public RLF_Report_r9 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public RLF_Report_r9 (
      RLF_Report_r9_measResultLastServCell_r9 measResultLastServCell_r9_,
      RLF_Report_r9_measResultNeighCells_r9 measResultNeighCells_r9_,
      LocationInfo_r10 locationInfo_r10_,
      RLF_Report_r9_failedPCellId_r10 failedPCellId_r10_,
      CellGlobalIdEUTRA reestablishmentCellId_r10_,
      Asn1Integer timeConnFailure_r10_,
      RLF_Report_r9_connectionFailureType_r10 connectionFailureType_r10_,
      CellGlobalIdEUTRA previousPCellId_r10_,
      RLF_Report_r9_failedPCellId_v1090 failedPCellId_v1090_,
      RLF_Report_r9_basicFields_r11 basicFields_r11_,
      RLF_Report_r9_previousUTRA_CellId_r11 previousUTRA_CellId_r11_,
      RLF_Report_r9_selectedUTRA_CellId_r11 selectedUTRA_CellId_r11_,
      RLF_Report_r9_failedPCellId_v1250 failedPCellId_v1250_,
      RSRQ_Range_v1250 measResultLastServCell_v1250_,
      RSRQ_Type_r12 lastServCellRSRQ_Type_r12_,
      MeasResultList2EUTRA_v1250 measResultListEUTRA_v1250_,
      RLF_Report_r9_drb_EstablishedWithQCI_1_r13 drb_EstablishedWithQCI_1_r13_,
      RSRP_Range_v1360 measResultLastServCell_v1360_,
      LogMeasResultListBT_r15 logMeasResultListBT_r15_,
      LogMeasResultListWLAN_r15 logMeasResultListWLAN_r15_
   ) {
      super();
      measResultLastServCell_r9 = measResultLastServCell_r9_;
      measResultNeighCells_r9 = measResultNeighCells_r9_;
      locationInfo_r10 = locationInfo_r10_;
      failedPCellId_r10 = failedPCellId_r10_;
      reestablishmentCellId_r10 = reestablishmentCellId_r10_;
      timeConnFailure_r10 = timeConnFailure_r10_;
      connectionFailureType_r10 = connectionFailureType_r10_;
      previousPCellId_r10 = previousPCellId_r10_;
      failedPCellId_v1090 = failedPCellId_v1090_;
      basicFields_r11 = basicFields_r11_;
      previousUTRA_CellId_r11 = previousUTRA_CellId_r11_;
      selectedUTRA_CellId_r11 = selectedUTRA_CellId_r11_;
      failedPCellId_v1250 = failedPCellId_v1250_;
      measResultLastServCell_v1250 = measResultLastServCell_v1250_;
      lastServCellRSRQ_Type_r12 = lastServCellRSRQ_Type_r12_;
      measResultListEUTRA_v1250 = measResultListEUTRA_v1250_;
      drb_EstablishedWithQCI_1_r13 = drb_EstablishedWithQCI_1_r13_;
      measResultLastServCell_v1360 = measResultLastServCell_v1360_;
      logMeasResultListBT_r15 = logMeasResultListBT_r15_;
      logMeasResultListWLAN_r15 = logMeasResultListWLAN_r15_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public RLF_Report_r9 (
      RLF_Report_r9_measResultLastServCell_r9 measResultLastServCell_r9_
   ) {
      super();
      measResultLastServCell_r9 = measResultLastServCell_r9_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public RLF_Report_r9 (RLF_Report_r9_measResultLastServCell_r9 measResultLastServCell_r9_,
      RLF_Report_r9_measResultNeighCells_r9 measResultNeighCells_r9_,
      LocationInfo_r10 locationInfo_r10_,
      RLF_Report_r9_failedPCellId_r10 failedPCellId_r10_,
      CellGlobalIdEUTRA reestablishmentCellId_r10_,
      long timeConnFailure_r10_,
      RLF_Report_r9_connectionFailureType_r10 connectionFailureType_r10_,
      CellGlobalIdEUTRA previousPCellId_r10_,
      RLF_Report_r9_failedPCellId_v1090 failedPCellId_v1090_,
      RLF_Report_r9_basicFields_r11 basicFields_r11_,
      RLF_Report_r9_previousUTRA_CellId_r11 previousUTRA_CellId_r11_,
      RLF_Report_r9_selectedUTRA_CellId_r11 selectedUTRA_CellId_r11_,
      RLF_Report_r9_failedPCellId_v1250 failedPCellId_v1250_,
      long measResultLastServCell_v1250_,
      RSRQ_Type_r12 lastServCellRSRQ_Type_r12_,
      MeasResultList2EUTRA_v1250 measResultListEUTRA_v1250_,
      RLF_Report_r9_drb_EstablishedWithQCI_1_r13 drb_EstablishedWithQCI_1_r13_,
      long measResultLastServCell_v1360_,
      LogMeasResultListBT_r15 logMeasResultListBT_r15_,
      LogMeasResultListWLAN_r15 logMeasResultListWLAN_r15_
   ) {
      super();
      measResultLastServCell_r9 = measResultLastServCell_r9_;
      measResultNeighCells_r9 = measResultNeighCells_r9_;
      locationInfo_r10 = locationInfo_r10_;
      failedPCellId_r10 = failedPCellId_r10_;
      reestablishmentCellId_r10 = reestablishmentCellId_r10_;
      timeConnFailure_r10 = new Asn1Integer (timeConnFailure_r10_);
      connectionFailureType_r10 = connectionFailureType_r10_;
      previousPCellId_r10 = previousPCellId_r10_;
      failedPCellId_v1090 = failedPCellId_v1090_;
      basicFields_r11 = basicFields_r11_;
      previousUTRA_CellId_r11 = previousUTRA_CellId_r11_;
      selectedUTRA_CellId_r11 = selectedUTRA_CellId_r11_;
      failedPCellId_v1250 = failedPCellId_v1250_;
      measResultLastServCell_v1250 = new RSRQ_Range_v1250 (measResultLastServCell_v1250_);
      lastServCellRSRQ_Type_r12 = lastServCellRSRQ_Type_r12_;
      measResultListEUTRA_v1250 = measResultListEUTRA_v1250_;
      drb_EstablishedWithQCI_1_r13 = drb_EstablishedWithQCI_1_r13_;
      measResultLastServCell_v1360 = new RSRP_Range_v1360 (measResultLastServCell_v1360_);
      logMeasResultListBT_r15 = logMeasResultListBT_r15_;
      logMeasResultListWLAN_r15 = logMeasResultListWLAN_r15_;
   }

   public void init () {
      measResultLastServCell_r9 = null;
      measResultNeighCells_r9 = null;
      locationInfo_r10 = null;
      failedPCellId_r10 = null;
      reestablishmentCellId_r10 = null;
      timeConnFailure_r10 = null;
      connectionFailureType_r10 = null;
      previousPCellId_r10 = null;
      failedPCellId_v1090 = null;
      basicFields_r11 = null;
      previousUTRA_CellId_r11 = null;
      selectedUTRA_CellId_r11 = null;
      failedPCellId_v1250 = null;
      measResultLastServCell_v1250 = null;
      lastServCellRSRQ_Type_r12 = null;
      measResultListEUTRA_v1250 = null;
      drb_EstablishedWithQCI_1_r13 = null;
      measResultLastServCell_v1360 = null;
      logMeasResultListBT_r15 = null;
      logMeasResultListWLAN_r15 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 21; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return measResultLastServCell_r9;
         case 1: return measResultNeighCells_r9;
         case 2: return locationInfo_r10;
         case 3: return failedPCellId_r10;
         case 4: return reestablishmentCellId_r10;
         case 5: return timeConnFailure_r10;
         case 6: return connectionFailureType_r10;
         case 7: return previousPCellId_r10;
         case 8: return failedPCellId_v1090;
         case 9: return basicFields_r11;
         case 10: return previousUTRA_CellId_r11;
         case 11: return selectedUTRA_CellId_r11;
         case 12: return failedPCellId_v1250;
         case 13: return measResultLastServCell_v1250;
         case 14: return lastServCellRSRQ_Type_r12;
         case 15: return measResultListEUTRA_v1250;
         case 16: return drb_EstablishedWithQCI_1_r13;
         case 17: return measResultLastServCell_v1360;
         case 18: return logMeasResultListBT_r15;
         case 19: return logMeasResultListWLAN_r15;
         case 20: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "measResultLastServCell-r9";
         case 1: return "measResultNeighCells-r9";
         case 2: return "locationInfo-r10";
         case 3: return "failedPCellId-r10";
         case 4: return "reestablishmentCellId-r10";
         case 5: return "timeConnFailure-r10";
         case 6: return "connectionFailureType-r10";
         case 7: return "previousPCellId-r10";
         case 8: return "failedPCellId-v1090";
         case 9: return "basicFields-r11";
         case 10: return "previousUTRA-CellId-r11";
         case 11: return "selectedUTRA-CellId-r11";
         case 12: return "failedPCellId-v1250";
         case 13: return "measResultLastServCell-v1250";
         case 14: return "lastServCellRSRQ-Type-r12";
         case 15: return "measResultListEUTRA-v1250";
         case 16: return "drb-EstablishedWithQCI-1-r13";
         case 17: return "measResultLastServCell-v1360";
         case 18: return "logMeasResultListBT-r15";
         case 19: return "logMeasResultListWLAN-r15";
         case 20: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean measResultNeighCells_r9Present = buffer.decodeBit ("measResultNeighCells_r9Present");

      // decode measResultLastServCell_r9

      buffer.getContext().eventDispatcher.startElement("measResultLastServCell_r9", -1);

      measResultLastServCell_r9 = new RLF_Report_r9_measResultLastServCell_r9();
      measResultLastServCell_r9.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("measResultLastServCell_r9", -1);

      // decode measResultNeighCells_r9

      if (measResultNeighCells_r9Present) {
         buffer.getContext().eventDispatcher.startElement("measResultNeighCells_r9", -1);

         measResultNeighCells_r9 = new RLF_Report_r9_measResultNeighCells_r9();
         measResultNeighCells_r9.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("measResultNeighCells_r9", -1);
      }
      else {
         measResultNeighCells_r9 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV4ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV5ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV6ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV7ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV8ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean locationInfo_r10Present = buffer.decodeBit ("locationInfo_r10Present");

            boolean failedPCellId_r10Present = buffer.decodeBit ("failedPCellId_r10Present");

            boolean reestablishmentCellId_r10Present = buffer.decodeBit ("reestablishmentCellId_r10Present");

            boolean timeConnFailure_r10Present = buffer.decodeBit ("timeConnFailure_r10Present");

            boolean connectionFailureType_r10Present = buffer.decodeBit ("connectionFailureType_r10Present");

            boolean previousPCellId_r10Present = buffer.decodeBit ("previousPCellId_r10Present");

            // decode locationInfo_r10

            if (locationInfo_r10Present) {
               buffer.getContext().eventDispatcher.startElement("locationInfo_r10", -1);

               locationInfo_r10 = new LocationInfo_r10();
               locationInfo_r10.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("locationInfo_r10", -1);
            }
            else {
               locationInfo_r10 = null;
            }

            // decode failedPCellId_r10

            if (failedPCellId_r10Present) {
               buffer.getContext().eventDispatcher.startElement("failedPCellId_r10", -1);

               failedPCellId_r10 = new RLF_Report_r9_failedPCellId_r10();
               failedPCellId_r10.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("failedPCellId_r10", -1);
            }
            else {
               failedPCellId_r10 = null;
            }

            // decode reestablishmentCellId_r10

            if (reestablishmentCellId_r10Present) {
               buffer.getContext().eventDispatcher.startElement("reestablishmentCellId_r10", -1);

               reestablishmentCellId_r10 = new CellGlobalIdEUTRA();
               reestablishmentCellId_r10.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("reestablishmentCellId_r10", -1);
            }
            else {
               reestablishmentCellId_r10 = null;
            }

            // decode timeConnFailure_r10

            if (timeConnFailure_r10Present) {
               buffer.getContext().eventDispatcher.startElement("timeConnFailure_r10", -1);

               timeConnFailure_r10 = new Asn1Integer();
               timeConnFailure_r10.decode (buffer, 0, 1023);

               buffer.invokeCharacters(timeConnFailure_r10.toString());
               buffer.getContext().eventDispatcher.endElement("timeConnFailure_r10", -1);
            }
            else {
               timeConnFailure_r10 = null;
            }

            // decode connectionFailureType_r10

            if (connectionFailureType_r10Present) {
               buffer.getContext().eventDispatcher.startElement("connectionFailureType_r10", -1);

               int tval = RLF_Report_r9_connectionFailureType_r10.decodeEnumValue (buffer);
               connectionFailureType_r10 = RLF_Report_r9_connectionFailureType_r10.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("connectionFailureType_r10", -1);
            }
            else {
               connectionFailureType_r10 = null;
            }

            // decode previousPCellId_r10

            if (previousPCellId_r10Present) {
               buffer.getContext().eventDispatcher.startElement("previousPCellId_r10", -1);

               previousPCellId_r10 = new CellGlobalIdEUTRA();
               previousPCellId_r10.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("previousPCellId_r10", -1);
            }
            else {
               previousPCellId_r10 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean failedPCellId_v1090Present = buffer.decodeBit ("failedPCellId_v1090Present");

            // decode failedPCellId_v1090

            if (failedPCellId_v1090Present) {
               buffer.getContext().eventDispatcher.startElement("failedPCellId_v1090", -1);

               failedPCellId_v1090 = new RLF_Report_r9_failedPCellId_v1090();
               failedPCellId_v1090.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("failedPCellId_v1090", -1);
            }
            else {
               failedPCellId_v1090 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV4ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean basicFields_r11Present = buffer.decodeBit ("basicFields_r11Present");

            boolean previousUTRA_CellId_r11Present = buffer.decodeBit ("previousUTRA_CellId_r11Present");

            boolean selectedUTRA_CellId_r11Present = buffer.decodeBit ("selectedUTRA_CellId_r11Present");

            // decode basicFields_r11

            if (basicFields_r11Present) {
               buffer.getContext().eventDispatcher.startElement("basicFields_r11", -1);

               basicFields_r11 = new RLF_Report_r9_basicFields_r11();
               basicFields_r11.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("basicFields_r11", -1);
            }
            else {
               basicFields_r11 = null;
            }

            // decode previousUTRA_CellId_r11

            if (previousUTRA_CellId_r11Present) {
               buffer.getContext().eventDispatcher.startElement("previousUTRA_CellId_r11", -1);

               previousUTRA_CellId_r11 = new RLF_Report_r9_previousUTRA_CellId_r11();
               previousUTRA_CellId_r11.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("previousUTRA_CellId_r11", -1);
            }
            else {
               previousUTRA_CellId_r11 = null;
            }

            // decode selectedUTRA_CellId_r11

            if (selectedUTRA_CellId_r11Present) {
               buffer.getContext().eventDispatcher.startElement("selectedUTRA_CellId_r11", -1);

               selectedUTRA_CellId_r11 = new RLF_Report_r9_selectedUTRA_CellId_r11();
               selectedUTRA_CellId_r11.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("selectedUTRA_CellId_r11", -1);
            }
            else {
               selectedUTRA_CellId_r11 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV5ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean failedPCellId_v1250Present = buffer.decodeBit ("failedPCellId_v1250Present");

            boolean measResultLastServCell_v1250Present = buffer.decodeBit ("measResultLastServCell_v1250Present");

            boolean lastServCellRSRQ_Type_r12Present = buffer.decodeBit ("lastServCellRSRQ_Type_r12Present");

            boolean measResultListEUTRA_v1250Present = buffer.decodeBit ("measResultListEUTRA_v1250Present");

            // decode failedPCellId_v1250

            if (failedPCellId_v1250Present) {
               buffer.getContext().eventDispatcher.startElement("failedPCellId_v1250", -1);

               failedPCellId_v1250 = new RLF_Report_r9_failedPCellId_v1250();
               failedPCellId_v1250.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("failedPCellId_v1250", -1);
            }
            else {
               failedPCellId_v1250 = null;
            }

            // decode measResultLastServCell_v1250

            if (measResultLastServCell_v1250Present) {
               buffer.getContext().eventDispatcher.startElement("measResultLastServCell_v1250", -1);

               measResultLastServCell_v1250 = new RSRQ_Range_v1250();
               measResultLastServCell_v1250.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("measResultLastServCell_v1250", -1);
            }
            else {
               measResultLastServCell_v1250 = null;
            }

            // decode lastServCellRSRQ_Type_r12

            if (lastServCellRSRQ_Type_r12Present) {
               buffer.getContext().eventDispatcher.startElement("lastServCellRSRQ_Type_r12", -1);

               lastServCellRSRQ_Type_r12 = new RSRQ_Type_r12();
               lastServCellRSRQ_Type_r12.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("lastServCellRSRQ_Type_r12", -1);
            }
            else {
               lastServCellRSRQ_Type_r12 = null;
            }

            // decode measResultListEUTRA_v1250

            if (measResultListEUTRA_v1250Present) {
               buffer.getContext().eventDispatcher.startElement("measResultListEUTRA_v1250", -1);

               measResultListEUTRA_v1250 = new MeasResultList2EUTRA_v1250();
               measResultListEUTRA_v1250.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("measResultListEUTRA_v1250", -1);
            }
            else {
               measResultListEUTRA_v1250 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV6ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean drb_EstablishedWithQCI_1_r13Present = buffer.decodeBit ("drb_EstablishedWithQCI_1_r13Present");

            // decode drb_EstablishedWithQCI_1_r13

            if (drb_EstablishedWithQCI_1_r13Present) {
               buffer.getContext().eventDispatcher.startElement("drb_EstablishedWithQCI_1_r13", -1);

               int tval = RLF_Report_r9_drb_EstablishedWithQCI_1_r13.decodeEnumValue (buffer);
               drb_EstablishedWithQCI_1_r13 = RLF_Report_r9_drb_EstablishedWithQCI_1_r13.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("drb_EstablishedWithQCI_1_r13", -1);
            }
            else {
               drb_EstablishedWithQCI_1_r13 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV7ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean measResultLastServCell_v1360Present = buffer.decodeBit ("measResultLastServCell_v1360Present");

            // decode measResultLastServCell_v1360

            if (measResultLastServCell_v1360Present) {
               buffer.getContext().eventDispatcher.startElement("measResultLastServCell_v1360", -1);

               measResultLastServCell_v1360 = new RSRP_Range_v1360();
               measResultLastServCell_v1360.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("measResultLastServCell_v1360", -1);
            }
            else {
               measResultLastServCell_v1360 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV8ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean logMeasResultListBT_r15Present = buffer.decodeBit ("logMeasResultListBT_r15Present");

            boolean logMeasResultListWLAN_r15Present = buffer.decodeBit ("logMeasResultListWLAN_r15Present");

            // decode logMeasResultListBT_r15

            if (logMeasResultListBT_r15Present) {
               buffer.getContext().eventDispatcher.startElement("logMeasResultListBT_r15", -1);

               logMeasResultListBT_r15 = new LogMeasResultListBT_r15();
               logMeasResultListBT_r15.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("logMeasResultListBT_r15", -1);
            }
            else {
               logMeasResultListBT_r15 = null;
            }

            // decode logMeasResultListWLAN_r15

            if (logMeasResultListWLAN_r15Present) {
               buffer.getContext().eventDispatcher.startElement("logMeasResultListWLAN_r15", -1);

               logMeasResultListWLAN_r15 = new LogMeasResultListWLAN_r15();
               logMeasResultListWLAN_r15.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("logMeasResultListWLAN_r15", -1);
            }
            else {
               logMeasResultListWLAN_r15 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (measResultLastServCell_r9 != null) measResultLastServCell_r9.print (_sb, "measResultLastServCell_r9", _level+1);
      if (measResultNeighCells_r9 != null) measResultNeighCells_r9.print (_sb, "measResultNeighCells_r9", _level+1);
      if (locationInfo_r10 != null) locationInfo_r10.print (_sb, "locationInfo_r10", _level+1);
      if (failedPCellId_r10 != null) failedPCellId_r10.print (_sb, "failedPCellId_r10", _level+1);
      if (reestablishmentCellId_r10 != null) reestablishmentCellId_r10.print (_sb, "reestablishmentCellId_r10", _level+1);
      if (timeConnFailure_r10 != null) timeConnFailure_r10.print (_sb, "timeConnFailure_r10", _level+1);
      if (connectionFailureType_r10 != null) connectionFailureType_r10.print (_sb, "connectionFailureType_r10", _level+1);
      if (previousPCellId_r10 != null) previousPCellId_r10.print (_sb, "previousPCellId_r10", _level+1);
      if (failedPCellId_v1090 != null) failedPCellId_v1090.print (_sb, "failedPCellId_v1090", _level+1);
      if (basicFields_r11 != null) basicFields_r11.print (_sb, "basicFields_r11", _level+1);
      if (previousUTRA_CellId_r11 != null) previousUTRA_CellId_r11.print (_sb, "previousUTRA_CellId_r11", _level+1);
      if (selectedUTRA_CellId_r11 != null) selectedUTRA_CellId_r11.print (_sb, "selectedUTRA_CellId_r11", _level+1);
      if (failedPCellId_v1250 != null) failedPCellId_v1250.print (_sb, "failedPCellId_v1250", _level+1);
      if (measResultLastServCell_v1250 != null) measResultLastServCell_v1250.print (_sb, "measResultLastServCell_v1250", _level+1);
      if (lastServCellRSRQ_Type_r12 != null) lastServCellRSRQ_Type_r12.print (_sb, "lastServCellRSRQ_Type_r12", _level+1);
      if (measResultListEUTRA_v1250 != null) measResultListEUTRA_v1250.print (_sb, "measResultListEUTRA_v1250", _level+1);
      if (drb_EstablishedWithQCI_1_r13 != null) drb_EstablishedWithQCI_1_r13.print (_sb, "drb_EstablishedWithQCI_1_r13", _level+1);
      if (measResultLastServCell_v1360 != null) measResultLastServCell_v1360.print (_sb, "measResultLastServCell_v1360", _level+1);
      if (logMeasResultListBT_r15 != null) logMeasResultListBT_r15.print (_sb, "logMeasResultListBT_r15", _level+1);
      if (logMeasResultListWLAN_r15 != null) logMeasResultListWLAN_r15.print (_sb, "logMeasResultListWLAN_r15", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
