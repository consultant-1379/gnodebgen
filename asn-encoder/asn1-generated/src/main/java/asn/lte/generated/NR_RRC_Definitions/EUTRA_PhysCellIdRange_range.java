/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class EUTRA_PhysCellIdRange_range extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ENUMERATED";
   }

   // Integer constants for switch-case
   public static final int _N4 = 0;
   public static final int _N8 = 1;
   public static final int _N12 = 2;
   public static final int _N16 = 3;
   public static final int _N24 = 4;
   public static final int _N32 = 5;
   public static final int _N48 = 6;
   public static final int _N64 = 7;
   public static final int _N84 = 8;
   public static final int _N96 = 9;
   public static final int _N128 = 10;
   public static final int _N168 = 11;
   public static final int _N252 = 12;
   public static final int _N504 = 13;
   public static final int _SPARE2 = 14;
   public static final int _SPARE1 = 15;

   // Singleton instances of EUTRA_PhysCellIdRange_range
   protected static final EUTRA_PhysCellIdRange_range _n4 = new EUTRA_PhysCellIdRange_range(0);
   protected static final EUTRA_PhysCellIdRange_range _n8 = new EUTRA_PhysCellIdRange_range(1);
   protected static final EUTRA_PhysCellIdRange_range _n12 = new EUTRA_PhysCellIdRange_range(2);
   protected static final EUTRA_PhysCellIdRange_range _n16 = new EUTRA_PhysCellIdRange_range(3);
   protected static final EUTRA_PhysCellIdRange_range _n24 = new EUTRA_PhysCellIdRange_range(4);
   protected static final EUTRA_PhysCellIdRange_range _n32 = new EUTRA_PhysCellIdRange_range(5);
   protected static final EUTRA_PhysCellIdRange_range _n48 = new EUTRA_PhysCellIdRange_range(6);
   protected static final EUTRA_PhysCellIdRange_range _n64 = new EUTRA_PhysCellIdRange_range(7);
   protected static final EUTRA_PhysCellIdRange_range _n84 = new EUTRA_PhysCellIdRange_range(8);
   protected static final EUTRA_PhysCellIdRange_range _n96 = new EUTRA_PhysCellIdRange_range(9);
   protected static final EUTRA_PhysCellIdRange_range _n128 = new EUTRA_PhysCellIdRange_range(10);
   protected static final EUTRA_PhysCellIdRange_range _n168 = new EUTRA_PhysCellIdRange_range(11);
   protected static final EUTRA_PhysCellIdRange_range _n252 = new EUTRA_PhysCellIdRange_range(12);
   protected static final EUTRA_PhysCellIdRange_range _n504 = new EUTRA_PhysCellIdRange_range(13);
   protected static final EUTRA_PhysCellIdRange_range _spare2 = new EUTRA_PhysCellIdRange_range(14);
   protected static final EUTRA_PhysCellIdRange_range _spare1 = new EUTRA_PhysCellIdRange_range(15);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    *   7
    *   8
    *   9
    *   10
    *   11
    *   12
    *   13
    *   14
    *   15
    */
   protected EUTRA_PhysCellIdRange_range (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for n4.
    */
   public static EUTRA_PhysCellIdRange_range n4() {
      return _n4;
   }

   /**
    * Singleton accessor method for n8.
    */
   public static EUTRA_PhysCellIdRange_range n8() {
      return _n8;
   }

   /**
    * Singleton accessor method for n12.
    */
   public static EUTRA_PhysCellIdRange_range n12() {
      return _n12;
   }

   /**
    * Singleton accessor method for n16.
    */
   public static EUTRA_PhysCellIdRange_range n16() {
      return _n16;
   }

   /**
    * Singleton accessor method for n24.
    */
   public static EUTRA_PhysCellIdRange_range n24() {
      return _n24;
   }

   /**
    * Singleton accessor method for n32.
    */
   public static EUTRA_PhysCellIdRange_range n32() {
      return _n32;
   }

   /**
    * Singleton accessor method for n48.
    */
   public static EUTRA_PhysCellIdRange_range n48() {
      return _n48;
   }

   /**
    * Singleton accessor method for n64.
    */
   public static EUTRA_PhysCellIdRange_range n64() {
      return _n64;
   }

   /**
    * Singleton accessor method for n84.
    */
   public static EUTRA_PhysCellIdRange_range n84() {
      return _n84;
   }

   /**
    * Singleton accessor method for n96.
    */
   public static EUTRA_PhysCellIdRange_range n96() {
      return _n96;
   }

   /**
    * Singleton accessor method for n128.
    */
   public static EUTRA_PhysCellIdRange_range n128() {
      return _n128;
   }

   /**
    * Singleton accessor method for n168.
    */
   public static EUTRA_PhysCellIdRange_range n168() {
      return _n168;
   }

   /**
    * Singleton accessor method for n252.
    */
   public static EUTRA_PhysCellIdRange_range n252() {
      return _n252;
   }

   /**
    * Singleton accessor method for n504.
    */
   public static EUTRA_PhysCellIdRange_range n504() {
      return _n504;
   }

   /**
    * Singleton accessor method for spare2.
    */
   public static EUTRA_PhysCellIdRange_range spare2() {
      return _spare2;
   }

   /**
    * Singleton accessor method for spare1.
    */
   public static EUTRA_PhysCellIdRange_range spare1() {
      return _spare1;
   }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return EUTRA_PhysCellIdRange_range.valueOf( EUTRA_PhysCellIdRange_range.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static EUTRA_PhysCellIdRange_range valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 0: return n4();
         case 1: return n8();
         case 2: return n12();
         case 3: return n16();
         case 4: return n24();
         case 5: return n32();
         case 6: return n48();
         case 7: return n64();
         case 8: return n84();
         case 9: return n96();
         case 10: return n128();
         case 11: return n168();
         case 12: return n252();
         case 13: return n504();
         case 14: return spare2();
         case 15: return spare1();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      ui = (int) buffer.decodeConsWholeNumber (16);

      switch (ui) {
         case 0: ret =  0; break;
         case 1: ret =  1; break;
         case 2: ret =  2; break;
         case 3: ret =  3; break;
         case 4: ret =  4; break;
         case 5: ret =  5; break;
         case 6: ret =  6; break;
         case 7: ret =  7; break;
         case 8: ret =  8; break;
         case 9: ret =  9; break;
         case 10: ret =  10; break;
         case 11: ret =  11; break;
         case 12: ret =  12; break;
         case 13: ret =  13; break;
         case 14: ret =  14; break;
         case 15: ret =  15; break;
         default: throw new Asn1InvalidEnumException (ui);
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (EUTRA_PhysCellIdRange_range.valueOf(ret).toString());

      return ret;
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("n4");
         case 1: return ("n8");
         case 2: return ("n12");
         case 3: return ("n16");
         case 4: return ("n24");
         case 5: return ("n32");
         case 6: return ("n48");
         case 7: return ("n64");
         case 8: return ("n84");
         case 9: return ("n96");
         case 10: return ("n128");
         case 11: return ("n168");
         case 12: return ("n252");
         case 13: return ("n504");
         case 14: return ("spare2");
         case 15: return ("spare1");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
