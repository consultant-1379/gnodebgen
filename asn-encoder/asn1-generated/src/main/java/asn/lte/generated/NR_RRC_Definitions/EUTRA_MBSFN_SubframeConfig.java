/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class EUTRA_MBSFN_SubframeConfig extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "EUTRA-MBSFN-SubframeConfig";
   }

   public EUTRA_MBSFN_SubframeConfig_radioframeAllocationPeriod radioframeAllocationPeriod = null;
   public Asn1Integer radioframeAllocationOffset;
   public EUTRA_MBSFN_SubframeConfig_subframeAllocation1 subframeAllocation1;
   public EUTRA_MBSFN_SubframeConfig_subframeAllocation2 subframeAllocation2;  // optional
   public Asn1OpenExt extElem1;

   public EUTRA_MBSFN_SubframeConfig () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public EUTRA_MBSFN_SubframeConfig (
      EUTRA_MBSFN_SubframeConfig_radioframeAllocationPeriod radioframeAllocationPeriod_,
      Asn1Integer radioframeAllocationOffset_,
      EUTRA_MBSFN_SubframeConfig_subframeAllocation1 subframeAllocation1_,
      EUTRA_MBSFN_SubframeConfig_subframeAllocation2 subframeAllocation2_
   ) {
      super();
      radioframeAllocationPeriod = radioframeAllocationPeriod_;
      radioframeAllocationOffset = radioframeAllocationOffset_;
      subframeAllocation1 = subframeAllocation1_;
      subframeAllocation2 = subframeAllocation2_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public EUTRA_MBSFN_SubframeConfig (
      EUTRA_MBSFN_SubframeConfig_radioframeAllocationPeriod radioframeAllocationPeriod_,
      Asn1Integer radioframeAllocationOffset_,
      EUTRA_MBSFN_SubframeConfig_subframeAllocation1 subframeAllocation1_
   ) {
      super();
      radioframeAllocationPeriod = radioframeAllocationPeriod_;
      radioframeAllocationOffset = radioframeAllocationOffset_;
      subframeAllocation1 = subframeAllocation1_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public EUTRA_MBSFN_SubframeConfig (EUTRA_MBSFN_SubframeConfig_radioframeAllocationPeriod radioframeAllocationPeriod_,
      long radioframeAllocationOffset_,
      EUTRA_MBSFN_SubframeConfig_subframeAllocation1 subframeAllocation1_,
      EUTRA_MBSFN_SubframeConfig_subframeAllocation2 subframeAllocation2_
   ) {
      super();
      radioframeAllocationPeriod = radioframeAllocationPeriod_;
      radioframeAllocationOffset = new Asn1Integer (radioframeAllocationOffset_);
      subframeAllocation1 = subframeAllocation1_;
      subframeAllocation2 = subframeAllocation2_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public EUTRA_MBSFN_SubframeConfig (
      EUTRA_MBSFN_SubframeConfig_radioframeAllocationPeriod radioframeAllocationPeriod_,
      long radioframeAllocationOffset_,
      EUTRA_MBSFN_SubframeConfig_subframeAllocation1 subframeAllocation1_
   ) {
      super();
      radioframeAllocationPeriod = radioframeAllocationPeriod_;
      radioframeAllocationOffset = new Asn1Integer (radioframeAllocationOffset_);
      subframeAllocation1 = subframeAllocation1_;
   }

   public void init () {
      radioframeAllocationPeriod = null;
      radioframeAllocationOffset = null;
      subframeAllocation1 = null;
      subframeAllocation2 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return radioframeAllocationPeriod;
         case 1: return radioframeAllocationOffset;
         case 2: return subframeAllocation1;
         case 3: return subframeAllocation2;
         case 4: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "radioframeAllocationPeriod";
         case 1: return "radioframeAllocationOffset";
         case 2: return "subframeAllocation1";
         case 3: return "subframeAllocation2";
         case 4: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean subframeAllocation2Present = buffer.decodeBit ("subframeAllocation2Present");

      // decode radioframeAllocationPeriod

      buffer.getContext().eventDispatcher.startElement("radioframeAllocationPeriod", -1);

      {
         int tval = EUTRA_MBSFN_SubframeConfig_radioframeAllocationPeriod.decodeEnumValue (buffer);
         radioframeAllocationPeriod = EUTRA_MBSFN_SubframeConfig_radioframeAllocationPeriod.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("radioframeAllocationPeriod", -1);

      // decode radioframeAllocationOffset

      buffer.getContext().eventDispatcher.startElement("radioframeAllocationOffset", -1);

      radioframeAllocationOffset = new Asn1Integer();
      radioframeAllocationOffset.decode (buffer, 0, 7);

      buffer.invokeCharacters(radioframeAllocationOffset.toString());
      buffer.getContext().eventDispatcher.endElement("radioframeAllocationOffset", -1);

      // decode subframeAllocation1

      buffer.getContext().eventDispatcher.startElement("subframeAllocation1", -1);

      subframeAllocation1 = new EUTRA_MBSFN_SubframeConfig_subframeAllocation1();
      subframeAllocation1.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("subframeAllocation1", -1);

      // decode subframeAllocation2

      if (subframeAllocation2Present) {
         buffer.getContext().eventDispatcher.startElement("subframeAllocation2", -1);

         subframeAllocation2 = new EUTRA_MBSFN_SubframeConfig_subframeAllocation2();
         subframeAllocation2.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("subframeAllocation2", -1);
      }
      else {
         subframeAllocation2 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (radioframeAllocationPeriod != null) radioframeAllocationPeriod.print (_sb, "radioframeAllocationPeriod", _level+1);
      if (radioframeAllocationOffset != null) radioframeAllocationOffset.print (_sb, "radioframeAllocationOffset", _level+1);
      if (subframeAllocation1 != null) subframeAllocation1.print (_sb, "subframeAllocation1", _level+1);
      if (subframeAllocation2 != null) subframeAllocation2.print (_sb, "subframeAllocation2", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
