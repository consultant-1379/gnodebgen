/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class LWA_Config_r13 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "LWA-Config-r13";
   }

   public WLAN_MobilityConfig_r13 lwa_MobilityConfig_r13;  // optional
   public Asn1Integer lwa_WT_Counter_r13;  // optional
   public boolean mV2ExtPresent;
   public Asn1OctetString wt_MAC_Address_r14;  // optional
   public Asn1OpenExt extElem1;

   public LWA_Config_r13 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public LWA_Config_r13 (
      WLAN_MobilityConfig_r13 lwa_MobilityConfig_r13_,
      Asn1Integer lwa_WT_Counter_r13_,
      Asn1OctetString wt_MAC_Address_r14_
   ) {
      super();
      lwa_MobilityConfig_r13 = lwa_MobilityConfig_r13_;
      lwa_WT_Counter_r13 = lwa_WT_Counter_r13_;
      wt_MAC_Address_r14 = wt_MAC_Address_r14_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public LWA_Config_r13 (WLAN_MobilityConfig_r13 lwa_MobilityConfig_r13_,
      long lwa_WT_Counter_r13_,
      byte[] wt_MAC_Address_r14_
   ) {
      super();
      lwa_MobilityConfig_r13 = lwa_MobilityConfig_r13_;
      lwa_WT_Counter_r13 = new Asn1Integer (lwa_WT_Counter_r13_);
      wt_MAC_Address_r14 = new Asn1OctetString (wt_MAC_Address_r14_);
   }

   public void init () {
      lwa_MobilityConfig_r13 = null;
      lwa_WT_Counter_r13 = null;
      wt_MAC_Address_r14 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return lwa_MobilityConfig_r13;
         case 1: return lwa_WT_Counter_r13;
         case 2: return wt_MAC_Address_r14;
         case 3: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "lwa-MobilityConfig-r13";
         case 1: return "lwa-WT-Counter-r13";
         case 2: return "wt-MAC-Address-r14";
         case 3: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean lwa_MobilityConfig_r13Present = buffer.decodeBit ("lwa_MobilityConfig_r13Present");
      boolean lwa_WT_Counter_r13Present = buffer.decodeBit ("lwa_WT_Counter_r13Present");

      // decode lwa_MobilityConfig_r13

      if (lwa_MobilityConfig_r13Present) {
         buffer.getContext().eventDispatcher.startElement("lwa_MobilityConfig_r13", -1);

         lwa_MobilityConfig_r13 = new WLAN_MobilityConfig_r13();
         lwa_MobilityConfig_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("lwa_MobilityConfig_r13", -1);
      }
      else {
         lwa_MobilityConfig_r13 = null;
      }

      // decode lwa_WT_Counter_r13

      if (lwa_WT_Counter_r13Present) {
         buffer.getContext().eventDispatcher.startElement("lwa_WT_Counter_r13", -1);

         lwa_WT_Counter_r13 = new Asn1Integer();
         lwa_WT_Counter_r13.decode (buffer, 0, 65535);

         buffer.invokeCharacters(lwa_WT_Counter_r13.toString());
         buffer.getContext().eventDispatcher.endElement("lwa_WT_Counter_r13", -1);
      }
      else {
         lwa_WT_Counter_r13 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean wt_MAC_Address_r14Present = buffer.decodeBit ("wt_MAC_Address_r14Present");

            // decode wt_MAC_Address_r14

            if (wt_MAC_Address_r14Present) {
               buffer.getContext().eventDispatcher.startElement("wt_MAC_Address_r14", -1);

               wt_MAC_Address_r14 = new Asn1OctetString();
               wt_MAC_Address_r14.decode (buffer, 6, 6);

               buffer.invokeCharacters(wt_MAC_Address_r14.toString());
               buffer.getContext().eventDispatcher.endElement("wt_MAC_Address_r14", -1);
            }
            else {
               wt_MAC_Address_r14 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (lwa_MobilityConfig_r13 != null) lwa_MobilityConfig_r13.print (_sb, "lwa_MobilityConfig_r13", _level+1);
      if (lwa_WT_Counter_r13 != null) lwa_WT_Counter_r13.print (_sb, "lwa_WT_Counter_r13", _level+1);
      if (wt_MAC_Address_r14 != null) wt_MAC_Address_r14.print (_sb, "wt_MAC_Address_r14", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
