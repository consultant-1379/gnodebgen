/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SCS_SpecificCarrier extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SCS-SpecificCarrier";
   }

   public Asn1Integer offsetToCarrier;
   public SubcarrierSpacing subcarrierSpacing = null;
   public Asn1Integer carrierBandwidth;
   public boolean mV2ExtPresent;
   public Asn1Integer txDirectCurrentLocation;  // optional
   public Asn1OpenExt extElem1;

   public SCS_SpecificCarrier () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SCS_SpecificCarrier (
      Asn1Integer offsetToCarrier_,
      SubcarrierSpacing subcarrierSpacing_,
      Asn1Integer carrierBandwidth_,
      Asn1Integer txDirectCurrentLocation_
   ) {
      super();
      offsetToCarrier = offsetToCarrier_;
      subcarrierSpacing = subcarrierSpacing_;
      carrierBandwidth = carrierBandwidth_;
      txDirectCurrentLocation = txDirectCurrentLocation_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SCS_SpecificCarrier (
      Asn1Integer offsetToCarrier_,
      SubcarrierSpacing subcarrierSpacing_,
      Asn1Integer carrierBandwidth_
   ) {
      super();
      offsetToCarrier = offsetToCarrier_;
      subcarrierSpacing = subcarrierSpacing_;
      carrierBandwidth = carrierBandwidth_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SCS_SpecificCarrier (long offsetToCarrier_,
      SubcarrierSpacing subcarrierSpacing_,
      long carrierBandwidth_,
      long txDirectCurrentLocation_
   ) {
      super();
      offsetToCarrier = new Asn1Integer (offsetToCarrier_);
      subcarrierSpacing = subcarrierSpacing_;
      carrierBandwidth = new Asn1Integer (carrierBandwidth_);
      txDirectCurrentLocation = new Asn1Integer (txDirectCurrentLocation_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public SCS_SpecificCarrier (
      long offsetToCarrier_,
      SubcarrierSpacing subcarrierSpacing_,
      long carrierBandwidth_
   ) {
      super();
      offsetToCarrier = new Asn1Integer (offsetToCarrier_);
      subcarrierSpacing = subcarrierSpacing_;
      carrierBandwidth = new Asn1Integer (carrierBandwidth_);
   }

   public void init () {
      offsetToCarrier = null;
      subcarrierSpacing = null;
      carrierBandwidth = null;
      txDirectCurrentLocation = null;
      extElem1 = null;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return offsetToCarrier;
         case 1: return subcarrierSpacing;
         case 2: return carrierBandwidth;
         case 3: return txDirectCurrentLocation;
         case 4: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "offsetToCarrier";
         case 1: return "subcarrierSpacing";
         case 2: return "carrierBandwidth";
         case 3: return "txDirectCurrentLocation";
         case 4: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      // decode offsetToCarrier

      buffer.getContext().eventDispatcher.startElement("offsetToCarrier", -1);

      offsetToCarrier = new Asn1Integer();
      offsetToCarrier.decode (buffer, 0, 2199);

      buffer.invokeCharacters(offsetToCarrier.toString());
      buffer.getContext().eventDispatcher.endElement("offsetToCarrier", -1);

      // decode subcarrierSpacing

      buffer.getContext().eventDispatcher.startElement("subcarrierSpacing", -1);

      {
         int tval = SubcarrierSpacing.decodeEnumValue (buffer);
         subcarrierSpacing = SubcarrierSpacing.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("subcarrierSpacing", -1);

      // decode carrierBandwidth

      buffer.getContext().eventDispatcher.startElement("carrierBandwidth", -1);

      carrierBandwidth = new Asn1Integer();
      carrierBandwidth.decode (buffer, 1, 275);

      buffer.invokeCharacters(carrierBandwidth.toString());
      buffer.getContext().eventDispatcher.endElement("carrierBandwidth", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean txDirectCurrentLocationPresent = buffer.decodeBit ("txDirectCurrentLocationPresent");

            // decode txDirectCurrentLocation

            if (txDirectCurrentLocationPresent) {
               buffer.getContext().eventDispatcher.startElement("txDirectCurrentLocation", -1);

               txDirectCurrentLocation = new Asn1Integer();
               txDirectCurrentLocation.decode (buffer, 0, 4095);

               buffer.invokeCharacters(txDirectCurrentLocation.toString());
               buffer.getContext().eventDispatcher.endElement("txDirectCurrentLocation", -1);
            }
            else {
               txDirectCurrentLocation = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (offsetToCarrier != null) offsetToCarrier.print (_sb, "offsetToCarrier", _level+1);
      if (subcarrierSpacing != null) subcarrierSpacing.print (_sb, "subcarrierSpacing", _level+1);
      if (carrierBandwidth != null) carrierBandwidth.print (_sb, "carrierBandwidth", _level+1);
      if (txDirectCurrentLocation != null) txDirectCurrentLocation.print (_sb, "txDirectCurrentLocation", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
