/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class BandCombinationParameters_v1470 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "BandCombinationParameters-v1470";
   }

   public BandCombinationParameters_v1470_bandParameterList_v1470 bandParameterList_v1470;  // optional
   public Asn1Integer srs_MaxSimultaneousCCs_r14;  // optional

   public BandCombinationParameters_v1470 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public BandCombinationParameters_v1470 (
      BandCombinationParameters_v1470_bandParameterList_v1470 bandParameterList_v1470_,
      Asn1Integer srs_MaxSimultaneousCCs_r14_
   ) {
      super();
      bandParameterList_v1470 = bandParameterList_v1470_;
      srs_MaxSimultaneousCCs_r14 = srs_MaxSimultaneousCCs_r14_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public BandCombinationParameters_v1470 (BandCombinationParameters_v1470_bandParameterList_v1470 bandParameterList_v1470_,
      long srs_MaxSimultaneousCCs_r14_
   ) {
      super();
      bandParameterList_v1470 = bandParameterList_v1470_;
      srs_MaxSimultaneousCCs_r14 = new Asn1Integer (srs_MaxSimultaneousCCs_r14_);
   }

   public void init () {
      bandParameterList_v1470 = null;
      srs_MaxSimultaneousCCs_r14 = null;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return bandParameterList_v1470;
         case 1: return srs_MaxSimultaneousCCs_r14;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "bandParameterList-v1470";
         case 1: return "srs-MaxSimultaneousCCs-r14";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean bandParameterList_v1470Present = buffer.decodeBit ("bandParameterList_v1470Present");
      boolean srs_MaxSimultaneousCCs_r14Present = buffer.decodeBit ("srs_MaxSimultaneousCCs_r14Present");

      // decode bandParameterList_v1470

      if (bandParameterList_v1470Present) {
         buffer.getContext().eventDispatcher.startElement("bandParameterList_v1470", -1);

         bandParameterList_v1470 = new BandCombinationParameters_v1470_bandParameterList_v1470();
         bandParameterList_v1470.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("bandParameterList_v1470", -1);
      }
      else {
         bandParameterList_v1470 = null;
      }

      // decode srs_MaxSimultaneousCCs_r14

      if (srs_MaxSimultaneousCCs_r14Present) {
         buffer.getContext().eventDispatcher.startElement("srs_MaxSimultaneousCCs_r14", -1);

         srs_MaxSimultaneousCCs_r14 = new Asn1Integer();
         srs_MaxSimultaneousCCs_r14.decode (buffer, 1, 31);

         buffer.invokeCharacters(srs_MaxSimultaneousCCs_r14.toString());
         buffer.getContext().eventDispatcher.endElement("srs_MaxSimultaneousCCs_r14", -1);
      }
      else {
         srs_MaxSimultaneousCCs_r14 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (bandParameterList_v1470 != null) bandParameterList_v1470.print (_sb, "bandParameterList_v1470", _level+1);
      if (srs_MaxSimultaneousCCs_r14 != null) srs_MaxSimultaneousCCs_r14.print (_sb, "srs_MaxSimultaneousCCs_r14", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
