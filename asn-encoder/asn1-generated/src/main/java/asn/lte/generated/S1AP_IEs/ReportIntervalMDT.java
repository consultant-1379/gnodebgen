/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.S1AP_IEs;

import com.objsys.asn1j.runtime.*;

public class ReportIntervalMDT extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_S1AP_IEsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ReportIntervalMDT";
   }

   // Integer constants for switch-case
   public static final int _MS120 = 0;
   public static final int _MS240 = 1;
   public static final int _MS480 = 2;
   public static final int _MS640 = 3;
   public static final int _MS1024 = 4;
   public static final int _MS2048 = 5;
   public static final int _MS5120 = 6;
   public static final int _MS10240 = 7;
   public static final int _MIN1 = 8;
   public static final int _MIN6 = 9;
   public static final int _MIN12 = 10;
   public static final int _MIN30 = 11;
   public static final int _MIN60 = 12;

   // Singleton instances of ReportIntervalMDT
   protected static final ReportIntervalMDT _ms120 = new ReportIntervalMDT(0);
   protected static final ReportIntervalMDT _ms240 = new ReportIntervalMDT(1);
   protected static final ReportIntervalMDT _ms480 = new ReportIntervalMDT(2);
   protected static final ReportIntervalMDT _ms640 = new ReportIntervalMDT(3);
   protected static final ReportIntervalMDT _ms1024 = new ReportIntervalMDT(4);
   protected static final ReportIntervalMDT _ms2048 = new ReportIntervalMDT(5);
   protected static final ReportIntervalMDT _ms5120 = new ReportIntervalMDT(6);
   protected static final ReportIntervalMDT _ms10240 = new ReportIntervalMDT(7);
   protected static final ReportIntervalMDT _min1 = new ReportIntervalMDT(8);
   protected static final ReportIntervalMDT _min6 = new ReportIntervalMDT(9);
   protected static final ReportIntervalMDT _min12 = new ReportIntervalMDT(10);
   protected static final ReportIntervalMDT _min30 = new ReportIntervalMDT(11);
   protected static final ReportIntervalMDT _min60 = new ReportIntervalMDT(12);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    *   7
    *   8
    *   9
    *   10
    *   11
    *   12
    */
   protected ReportIntervalMDT (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for ms120.
    */
   public static ReportIntervalMDT ms120() {
      return _ms120;
   }

   /**
    * Singleton accessor method for ms240.
    */
   public static ReportIntervalMDT ms240() {
      return _ms240;
   }

   /**
    * Singleton accessor method for ms480.
    */
   public static ReportIntervalMDT ms480() {
      return _ms480;
   }

   /**
    * Singleton accessor method for ms640.
    */
   public static ReportIntervalMDT ms640() {
      return _ms640;
   }

   /**
    * Singleton accessor method for ms1024.
    */
   public static ReportIntervalMDT ms1024() {
      return _ms1024;
   }

   /**
    * Singleton accessor method for ms2048.
    */
   public static ReportIntervalMDT ms2048() {
      return _ms2048;
   }

   /**
    * Singleton accessor method for ms5120.
    */
   public static ReportIntervalMDT ms5120() {
      return _ms5120;
   }

   /**
    * Singleton accessor method for ms10240.
    */
   public static ReportIntervalMDT ms10240() {
      return _ms10240;
   }

   /**
    * Singleton accessor method for min1.
    */
   public static ReportIntervalMDT min1() {
      return _min1;
   }

   /**
    * Singleton accessor method for min6.
    */
   public static ReportIntervalMDT min6() {
      return _min6;
   }

   /**
    * Singleton accessor method for min12.
    */
   public static ReportIntervalMDT min12() {
      return _min12;
   }

   /**
    * Singleton accessor method for min30.
    */
   public static ReportIntervalMDT min30() {
      return _min30;
   }

   /**
    * Singleton accessor method for min60.
    */
   public static ReportIntervalMDT min60() {
      return _min60;
   }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return ReportIntervalMDT.valueOf( ReportIntervalMDT.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static ReportIntervalMDT valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 0: return ms120();
         case 1: return ms240();
         case 2: return ms480();
         case 3: return ms640();
         case 4: return ms1024();
         case 5: return ms2048();
         case 6: return ms5120();
         case 7: return ms10240();
         case 8: return min1();
         case 9: return min6();
         case 10: return min12();
         case 11: return min30();
         case 12: return min60();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      ui = (int) buffer.decodeConsWholeNumber (13);

      switch (ui) {
         case 0: ret =  0; break;
         case 1: ret =  1; break;
         case 2: ret =  2; break;
         case 3: ret =  3; break;
         case 4: ret =  4; break;
         case 5: ret =  5; break;
         case 6: ret =  6; break;
         case 7: ret =  7; break;
         case 8: ret =  8; break;
         case 9: ret =  9; break;
         case 10: ret =  10; break;
         case 11: ret =  11; break;
         case 12: ret =  12; break;
         default: throw new Asn1InvalidEnumException (ui);
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (ReportIntervalMDT.valueOf(ret).toString());

      return ret;
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("ms120");
         case 1: return ("ms240");
         case 2: return ("ms480");
         case 3: return ("ms640");
         case 4: return ("ms1024");
         case 5: return ("ms2048");
         case 6: return ("ms5120");
         case 7: return ("ms10240");
         case 8: return ("min1");
         case 9: return ("min6");
         case 10: return ("min12");
         case 11: return ("min30");
         case 12: return ("min60");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
