/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SL_PPPP_TxConfigIndex_r15 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SL-PPPP-TxConfigIndex-r15";
   }

   public SL_Priority_r13 priorityThreshold_r15;
   public Asn1Integer defaultTxConfigIndex_r15;
   public Asn1Integer cbr_ConfigIndex_r15;
   public SL_PPPP_TxConfigIndex_r15_tx_ConfigIndexList_r15 tx_ConfigIndexList_r15;
   public SL_PPPP_TxConfigIndex_r15_mcs_PSSCH_RangeList_r15 mcs_PSSCH_RangeList_r15;

   public SL_PPPP_TxConfigIndex_r15 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SL_PPPP_TxConfigIndex_r15 (
      SL_Priority_r13 priorityThreshold_r15_,
      Asn1Integer defaultTxConfigIndex_r15_,
      Asn1Integer cbr_ConfigIndex_r15_,
      SL_PPPP_TxConfigIndex_r15_tx_ConfigIndexList_r15 tx_ConfigIndexList_r15_,
      SL_PPPP_TxConfigIndex_r15_mcs_PSSCH_RangeList_r15 mcs_PSSCH_RangeList_r15_
   ) {
      super();
      priorityThreshold_r15 = priorityThreshold_r15_;
      defaultTxConfigIndex_r15 = defaultTxConfigIndex_r15_;
      cbr_ConfigIndex_r15 = cbr_ConfigIndex_r15_;
      tx_ConfigIndexList_r15 = tx_ConfigIndexList_r15_;
      mcs_PSSCH_RangeList_r15 = mcs_PSSCH_RangeList_r15_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SL_PPPP_TxConfigIndex_r15 (long priorityThreshold_r15_,
      long defaultTxConfigIndex_r15_,
      long cbr_ConfigIndex_r15_,
      SL_PPPP_TxConfigIndex_r15_tx_ConfigIndexList_r15 tx_ConfigIndexList_r15_,
      SL_PPPP_TxConfigIndex_r15_mcs_PSSCH_RangeList_r15 mcs_PSSCH_RangeList_r15_
   ) {
      super();
      priorityThreshold_r15 = new SL_Priority_r13 (priorityThreshold_r15_);
      defaultTxConfigIndex_r15 = new Asn1Integer (defaultTxConfigIndex_r15_);
      cbr_ConfigIndex_r15 = new Asn1Integer (cbr_ConfigIndex_r15_);
      tx_ConfigIndexList_r15 = tx_ConfigIndexList_r15_;
      mcs_PSSCH_RangeList_r15 = mcs_PSSCH_RangeList_r15_;
   }

   public void init () {
      priorityThreshold_r15 = null;
      defaultTxConfigIndex_r15 = null;
      cbr_ConfigIndex_r15 = null;
      tx_ConfigIndexList_r15 = null;
      mcs_PSSCH_RangeList_r15 = null;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return priorityThreshold_r15;
         case 1: return defaultTxConfigIndex_r15;
         case 2: return cbr_ConfigIndex_r15;
         case 3: return tx_ConfigIndexList_r15;
         case 4: return mcs_PSSCH_RangeList_r15;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "priorityThreshold-r15";
         case 1: return "defaultTxConfigIndex-r15";
         case 2: return "cbr-ConfigIndex-r15";
         case 3: return "tx-ConfigIndexList-r15";
         case 4: return "mcs-PSSCH-RangeList-r15";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode priorityThreshold_r15

      buffer.getContext().eventDispatcher.startElement("priorityThreshold_r15", -1);

      priorityThreshold_r15 = new SL_Priority_r13();
      priorityThreshold_r15.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("priorityThreshold_r15", -1);

      // decode defaultTxConfigIndex_r15

      buffer.getContext().eventDispatcher.startElement("defaultTxConfigIndex_r15", -1);

      defaultTxConfigIndex_r15 = new Asn1Integer();
      defaultTxConfigIndex_r15.decode (buffer, 0, 15);

      buffer.invokeCharacters(defaultTxConfigIndex_r15.toString());
      buffer.getContext().eventDispatcher.endElement("defaultTxConfigIndex_r15", -1);

      // decode cbr_ConfigIndex_r15

      buffer.getContext().eventDispatcher.startElement("cbr_ConfigIndex_r15", -1);

      cbr_ConfigIndex_r15 = new Asn1Integer();
      cbr_ConfigIndex_r15.decode (buffer, 0, 3);

      buffer.invokeCharacters(cbr_ConfigIndex_r15.toString());
      buffer.getContext().eventDispatcher.endElement("cbr_ConfigIndex_r15", -1);

      // decode tx_ConfigIndexList_r15

      buffer.getContext().eventDispatcher.startElement("tx_ConfigIndexList_r15", -1);

      tx_ConfigIndexList_r15 = new SL_PPPP_TxConfigIndex_r15_tx_ConfigIndexList_r15();
      tx_ConfigIndexList_r15.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("tx_ConfigIndexList_r15", -1);

      // decode mcs_PSSCH_RangeList_r15

      buffer.getContext().eventDispatcher.startElement("mcs_PSSCH_RangeList_r15", -1);

      mcs_PSSCH_RangeList_r15 = new SL_PPPP_TxConfigIndex_r15_mcs_PSSCH_RangeList_r15();
      mcs_PSSCH_RangeList_r15.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("mcs_PSSCH_RangeList_r15", -1);

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (priorityThreshold_r15 != null) priorityThreshold_r15.print (_sb, "priorityThreshold_r15", _level+1);
      if (defaultTxConfigIndex_r15 != null) defaultTxConfigIndex_r15.print (_sb, "defaultTxConfigIndex_r15", _level+1);
      if (cbr_ConfigIndex_r15 != null) cbr_ConfigIndex_r15.print (_sb, "cbr_ConfigIndex_r15", _level+1);
      if (tx_ConfigIndexList_r15 != null) tx_ConfigIndexList_r15.print (_sb, "tx_ConfigIndexList_r15", _level+1);
      if (mcs_PSSCH_RangeList_r15 != null) mcs_PSSCH_RangeList_r15.print (_sb, "mcs_PSSCH_RangeList_r15", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
