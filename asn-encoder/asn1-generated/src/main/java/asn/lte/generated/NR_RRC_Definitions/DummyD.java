/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class DummyD extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "DummyD";
   }

   public DummyD_maxNumberTxPortsPerResource maxNumberTxPortsPerResource = null;
   public Asn1Integer maxNumberResources;
   public Asn1Integer totalNumberTxPorts;
   public Asn1Integer parameterLx;
   public DummyD_amplitudeScalingType amplitudeScalingType = null;
   public DummyD_amplitudeSubsetRestriction amplitudeSubsetRestriction = null;  // optional
   public Asn1Integer maxNumberCSI_RS_PerResourceSet;

   public DummyD () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public DummyD (
      DummyD_maxNumberTxPortsPerResource maxNumberTxPortsPerResource_,
      Asn1Integer maxNumberResources_,
      Asn1Integer totalNumberTxPorts_,
      Asn1Integer parameterLx_,
      DummyD_amplitudeScalingType amplitudeScalingType_,
      DummyD_amplitudeSubsetRestriction amplitudeSubsetRestriction_,
      Asn1Integer maxNumberCSI_RS_PerResourceSet_
   ) {
      super();
      maxNumberTxPortsPerResource = maxNumberTxPortsPerResource_;
      maxNumberResources = maxNumberResources_;
      totalNumberTxPorts = totalNumberTxPorts_;
      parameterLx = parameterLx_;
      amplitudeScalingType = amplitudeScalingType_;
      amplitudeSubsetRestriction = amplitudeSubsetRestriction_;
      maxNumberCSI_RS_PerResourceSet = maxNumberCSI_RS_PerResourceSet_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public DummyD (
      DummyD_maxNumberTxPortsPerResource maxNumberTxPortsPerResource_,
      Asn1Integer maxNumberResources_,
      Asn1Integer totalNumberTxPorts_,
      Asn1Integer parameterLx_,
      DummyD_amplitudeScalingType amplitudeScalingType_,
      Asn1Integer maxNumberCSI_RS_PerResourceSet_
   ) {
      super();
      maxNumberTxPortsPerResource = maxNumberTxPortsPerResource_;
      maxNumberResources = maxNumberResources_;
      totalNumberTxPorts = totalNumberTxPorts_;
      parameterLx = parameterLx_;
      amplitudeScalingType = amplitudeScalingType_;
      maxNumberCSI_RS_PerResourceSet = maxNumberCSI_RS_PerResourceSet_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public DummyD (DummyD_maxNumberTxPortsPerResource maxNumberTxPortsPerResource_,
      long maxNumberResources_,
      long totalNumberTxPorts_,
      long parameterLx_,
      DummyD_amplitudeScalingType amplitudeScalingType_,
      DummyD_amplitudeSubsetRestriction amplitudeSubsetRestriction_,
      long maxNumberCSI_RS_PerResourceSet_
   ) {
      super();
      maxNumberTxPortsPerResource = maxNumberTxPortsPerResource_;
      maxNumberResources = new Asn1Integer (maxNumberResources_);
      totalNumberTxPorts = new Asn1Integer (totalNumberTxPorts_);
      parameterLx = new Asn1Integer (parameterLx_);
      amplitudeScalingType = amplitudeScalingType_;
      amplitudeSubsetRestriction = amplitudeSubsetRestriction_;
      maxNumberCSI_RS_PerResourceSet = new Asn1Integer (maxNumberCSI_RS_PerResourceSet_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public DummyD (
      DummyD_maxNumberTxPortsPerResource maxNumberTxPortsPerResource_,
      long maxNumberResources_,
      long totalNumberTxPorts_,
      long parameterLx_,
      DummyD_amplitudeScalingType amplitudeScalingType_,
      long maxNumberCSI_RS_PerResourceSet_
   ) {
      super();
      maxNumberTxPortsPerResource = maxNumberTxPortsPerResource_;
      maxNumberResources = new Asn1Integer (maxNumberResources_);
      totalNumberTxPorts = new Asn1Integer (totalNumberTxPorts_);
      parameterLx = new Asn1Integer (parameterLx_);
      amplitudeScalingType = amplitudeScalingType_;
      maxNumberCSI_RS_PerResourceSet = new Asn1Integer (maxNumberCSI_RS_PerResourceSet_);
   }

   public void init () {
      maxNumberTxPortsPerResource = null;
      maxNumberResources = null;
      totalNumberTxPorts = null;
      parameterLx = null;
      amplitudeScalingType = null;
      amplitudeSubsetRestriction = null;
      maxNumberCSI_RS_PerResourceSet = null;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return maxNumberTxPortsPerResource;
         case 1: return maxNumberResources;
         case 2: return totalNumberTxPorts;
         case 3: return parameterLx;
         case 4: return amplitudeScalingType;
         case 5: return amplitudeSubsetRestriction;
         case 6: return maxNumberCSI_RS_PerResourceSet;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "maxNumberTxPortsPerResource";
         case 1: return "maxNumberResources";
         case 2: return "totalNumberTxPorts";
         case 3: return "parameterLx";
         case 4: return "amplitudeScalingType";
         case 5: return "amplitudeSubsetRestriction";
         case 6: return "maxNumberCSI-RS-PerResourceSet";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean amplitudeSubsetRestrictionPresent = buffer.decodeBit ("amplitudeSubsetRestrictionPresent");

      // decode maxNumberTxPortsPerResource

      buffer.getContext().eventDispatcher.startElement("maxNumberTxPortsPerResource", -1);

      {
         int tval = DummyD_maxNumberTxPortsPerResource.decodeEnumValue (buffer);
         maxNumberTxPortsPerResource = DummyD_maxNumberTxPortsPerResource.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("maxNumberTxPortsPerResource", -1);

      // decode maxNumberResources

      buffer.getContext().eventDispatcher.startElement("maxNumberResources", -1);

      maxNumberResources = new Asn1Integer();
      maxNumberResources.decode (buffer, 1, 64);

      buffer.invokeCharacters(maxNumberResources.toString());
      buffer.getContext().eventDispatcher.endElement("maxNumberResources", -1);

      // decode totalNumberTxPorts

      buffer.getContext().eventDispatcher.startElement("totalNumberTxPorts", -1);

      totalNumberTxPorts = new Asn1Integer();
      totalNumberTxPorts.decode (buffer, 2, 256);

      buffer.invokeCharacters(totalNumberTxPorts.toString());
      buffer.getContext().eventDispatcher.endElement("totalNumberTxPorts", -1);

      // decode parameterLx

      buffer.getContext().eventDispatcher.startElement("parameterLx", -1);

      parameterLx = new Asn1Integer();
      parameterLx.decode (buffer, 2, 4);

      buffer.invokeCharacters(parameterLx.toString());
      buffer.getContext().eventDispatcher.endElement("parameterLx", -1);

      // decode amplitudeScalingType

      buffer.getContext().eventDispatcher.startElement("amplitudeScalingType", -1);

      {
         int tval = DummyD_amplitudeScalingType.decodeEnumValue (buffer);
         amplitudeScalingType = DummyD_amplitudeScalingType.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("amplitudeScalingType", -1);

      // decode amplitudeSubsetRestriction

      if (amplitudeSubsetRestrictionPresent) {
         buffer.getContext().eventDispatcher.startElement("amplitudeSubsetRestriction", -1);

         int tval = DummyD_amplitudeSubsetRestriction.decodeEnumValue (buffer);
         amplitudeSubsetRestriction = DummyD_amplitudeSubsetRestriction.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("amplitudeSubsetRestriction", -1);
      }
      else {
         amplitudeSubsetRestriction = null;
      }

      // decode maxNumberCSI_RS_PerResourceSet

      buffer.getContext().eventDispatcher.startElement("maxNumberCSI_RS_PerResourceSet", -1);

      maxNumberCSI_RS_PerResourceSet = new Asn1Integer();
      maxNumberCSI_RS_PerResourceSet.decode (buffer, 1, 8);

      buffer.invokeCharacters(maxNumberCSI_RS_PerResourceSet.toString());
      buffer.getContext().eventDispatcher.endElement("maxNumberCSI_RS_PerResourceSet", -1);

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (maxNumberTxPortsPerResource != null) maxNumberTxPortsPerResource.print (_sb, "maxNumberTxPortsPerResource", _level+1);
      if (maxNumberResources != null) maxNumberResources.print (_sb, "maxNumberResources", _level+1);
      if (totalNumberTxPorts != null) totalNumberTxPorts.print (_sb, "totalNumberTxPorts", _level+1);
      if (parameterLx != null) parameterLx.print (_sb, "parameterLx", _level+1);
      if (amplitudeScalingType != null) amplitudeScalingType.print (_sb, "amplitudeScalingType", _level+1);
      if (amplitudeSubsetRestriction != null) amplitudeSubsetRestriction.print (_sb, "amplitudeSubsetRestriction", _level+1);
      if (maxNumberCSI_RS_PerResourceSet != null) maxNumberCSI_RS_PerResourceSet.print (_sb, "maxNumberCSI_RS_PerResourceSet", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
