/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SL_TF_IndexPair_r12 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SL-TF-IndexPair-r12";
   }

   public Asn1Integer discSF_Index_r12;  // optional
   public Asn1Integer discPRB_Index_r12;  // optional

   public SL_TF_IndexPair_r12 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SL_TF_IndexPair_r12 (
      Asn1Integer discSF_Index_r12_,
      Asn1Integer discPRB_Index_r12_
   ) {
      super();
      discSF_Index_r12 = discSF_Index_r12_;
      discPRB_Index_r12 = discPRB_Index_r12_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SL_TF_IndexPair_r12 (long discSF_Index_r12_,
      long discPRB_Index_r12_
   ) {
      super();
      discSF_Index_r12 = new Asn1Integer (discSF_Index_r12_);
      discPRB_Index_r12 = new Asn1Integer (discPRB_Index_r12_);
   }

   public void init () {
      discSF_Index_r12 = null;
      discPRB_Index_r12 = null;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return discSF_Index_r12;
         case 1: return discPRB_Index_r12;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "discSF-Index-r12";
         case 1: return "discPRB-Index-r12";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean discSF_Index_r12Present = buffer.decodeBit ("discSF_Index_r12Present");
      boolean discPRB_Index_r12Present = buffer.decodeBit ("discPRB_Index_r12Present");

      // decode discSF_Index_r12

      if (discSF_Index_r12Present) {
         buffer.getContext().eventDispatcher.startElement("discSF_Index_r12", -1);

         discSF_Index_r12 = new Asn1Integer();
         discSF_Index_r12.decode (buffer, 1, 200);

         buffer.invokeCharacters(discSF_Index_r12.toString());
         buffer.getContext().eventDispatcher.endElement("discSF_Index_r12", -1);
      }
      else {
         discSF_Index_r12 = null;
      }

      // decode discPRB_Index_r12

      if (discPRB_Index_r12Present) {
         buffer.getContext().eventDispatcher.startElement("discPRB_Index_r12", -1);

         discPRB_Index_r12 = new Asn1Integer();
         discPRB_Index_r12.decode (buffer, 1, 50);

         buffer.invokeCharacters(discPRB_Index_r12.toString());
         buffer.getContext().eventDispatcher.endElement("discPRB_Index_r12", -1);
      }
      else {
         discPRB_Index_r12 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (discSF_Index_r12 != null) discSF_Index_r12.print (_sb, "discSF_Index_r12", _level+1);
      if (discPRB_Index_r12 != null) discPRB_Index_r12.print (_sb, "discPRB_Index_r12", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
