/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SystemInformationBlockType8 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SystemInformationBlockType8";
   }

   public SystemTimeInfoCDMA2000 systemTimeInfo;  // optional
   public Asn1Integer searchWindowSize;  // optional
   public SystemInformationBlockType8_parametersHRPD parametersHRPD;  // optional
   public SystemInformationBlockType8_parameters1XRTT parameters1XRTT;  // optional
   public Asn1OctetString lateNonCriticalExtension;  // optional
   public boolean mV3ExtPresent;
   public Asn1Boolean csfb_SupportForDualRxUEs_r9;  // optional
   public CellReselectionParametersCDMA2000_v920 cellReselectionParametersHRPD_v920;  // optional
   public CellReselectionParametersCDMA2000_v920 cellReselectionParameters1XRTT_v920;  // optional
   public CSFB_RegistrationParam1XRTT_v920 csfb_RegistrationParam1XRTT_v920;  // optional
   public AC_BarringConfig1XRTT_r9 ac_BarringConfig1XRTT_r9;  // optional
   public boolean mV4ExtPresent;
   public SystemInformationBlockType8_csfb_DualRxTxSupport_r10 csfb_DualRxTxSupport_r10 = null;  // optional
   public boolean mV5ExtPresent;
   public SIB8_PerPLMN_List_r11 sib8_PerPLMN_List_r11;  // optional
   public Asn1OpenExt extElem1;

   public SystemInformationBlockType8 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SystemInformationBlockType8 (
      SystemTimeInfoCDMA2000 systemTimeInfo_,
      Asn1Integer searchWindowSize_,
      SystemInformationBlockType8_parametersHRPD parametersHRPD_,
      SystemInformationBlockType8_parameters1XRTT parameters1XRTT_,
      Asn1OctetString lateNonCriticalExtension_,
      Asn1Boolean csfb_SupportForDualRxUEs_r9_,
      CellReselectionParametersCDMA2000_v920 cellReselectionParametersHRPD_v920_,
      CellReselectionParametersCDMA2000_v920 cellReselectionParameters1XRTT_v920_,
      CSFB_RegistrationParam1XRTT_v920 csfb_RegistrationParam1XRTT_v920_,
      AC_BarringConfig1XRTT_r9 ac_BarringConfig1XRTT_r9_,
      SystemInformationBlockType8_csfb_DualRxTxSupport_r10 csfb_DualRxTxSupport_r10_,
      SIB8_PerPLMN_List_r11 sib8_PerPLMN_List_r11_
   ) {
      super();
      systemTimeInfo = systemTimeInfo_;
      searchWindowSize = searchWindowSize_;
      parametersHRPD = parametersHRPD_;
      parameters1XRTT = parameters1XRTT_;
      lateNonCriticalExtension = lateNonCriticalExtension_;
      csfb_SupportForDualRxUEs_r9 = csfb_SupportForDualRxUEs_r9_;
      cellReselectionParametersHRPD_v920 = cellReselectionParametersHRPD_v920_;
      cellReselectionParameters1XRTT_v920 = cellReselectionParameters1XRTT_v920_;
      csfb_RegistrationParam1XRTT_v920 = csfb_RegistrationParam1XRTT_v920_;
      ac_BarringConfig1XRTT_r9 = ac_BarringConfig1XRTT_r9_;
      csfb_DualRxTxSupport_r10 = csfb_DualRxTxSupport_r10_;
      sib8_PerPLMN_List_r11 = sib8_PerPLMN_List_r11_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SystemInformationBlockType8 (SystemTimeInfoCDMA2000 systemTimeInfo_,
      long searchWindowSize_,
      SystemInformationBlockType8_parametersHRPD parametersHRPD_,
      SystemInformationBlockType8_parameters1XRTT parameters1XRTT_,
      byte[] lateNonCriticalExtension_,
      boolean csfb_SupportForDualRxUEs_r9_,
      CellReselectionParametersCDMA2000_v920 cellReselectionParametersHRPD_v920_,
      CellReselectionParametersCDMA2000_v920 cellReselectionParameters1XRTT_v920_,
      CSFB_RegistrationParam1XRTT_v920 csfb_RegistrationParam1XRTT_v920_,
      AC_BarringConfig1XRTT_r9 ac_BarringConfig1XRTT_r9_,
      SystemInformationBlockType8_csfb_DualRxTxSupport_r10 csfb_DualRxTxSupport_r10_,
      SIB8_PerPLMN_List_r11 sib8_PerPLMN_List_r11_
   ) {
      super();
      systemTimeInfo = systemTimeInfo_;
      searchWindowSize = new Asn1Integer (searchWindowSize_);
      parametersHRPD = parametersHRPD_;
      parameters1XRTT = parameters1XRTT_;
      lateNonCriticalExtension = new Asn1OctetString (lateNonCriticalExtension_);
      csfb_SupportForDualRxUEs_r9 = new Asn1Boolean (csfb_SupportForDualRxUEs_r9_);
      cellReselectionParametersHRPD_v920 = cellReselectionParametersHRPD_v920_;
      cellReselectionParameters1XRTT_v920 = cellReselectionParameters1XRTT_v920_;
      csfb_RegistrationParam1XRTT_v920 = csfb_RegistrationParam1XRTT_v920_;
      ac_BarringConfig1XRTT_r9 = ac_BarringConfig1XRTT_r9_;
      csfb_DualRxTxSupport_r10 = csfb_DualRxTxSupport_r10_;
      sib8_PerPLMN_List_r11 = sib8_PerPLMN_List_r11_;
   }

   public void init () {
      systemTimeInfo = null;
      searchWindowSize = null;
      parametersHRPD = null;
      parameters1XRTT = null;
      lateNonCriticalExtension = null;
      csfb_SupportForDualRxUEs_r9 = null;
      cellReselectionParametersHRPD_v920 = null;
      cellReselectionParameters1XRTT_v920 = null;
      csfb_RegistrationParam1XRTT_v920 = null;
      ac_BarringConfig1XRTT_r9 = null;
      csfb_DualRxTxSupport_r10 = null;
      sib8_PerPLMN_List_r11 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 13; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return systemTimeInfo;
         case 1: return searchWindowSize;
         case 2: return parametersHRPD;
         case 3: return parameters1XRTT;
         case 4: return lateNonCriticalExtension;
         case 5: return csfb_SupportForDualRxUEs_r9;
         case 6: return cellReselectionParametersHRPD_v920;
         case 7: return cellReselectionParameters1XRTT_v920;
         case 8: return csfb_RegistrationParam1XRTT_v920;
         case 9: return ac_BarringConfig1XRTT_r9;
         case 10: return csfb_DualRxTxSupport_r10;
         case 11: return sib8_PerPLMN_List_r11;
         case 12: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "systemTimeInfo";
         case 1: return "searchWindowSize";
         case 2: return "parametersHRPD";
         case 3: return "parameters1XRTT";
         case 4: return "lateNonCriticalExtension";
         case 5: return "csfb-SupportForDualRxUEs-r9";
         case 6: return "cellReselectionParametersHRPD-v920";
         case 7: return "cellReselectionParameters1XRTT-v920";
         case 8: return "csfb-RegistrationParam1XRTT-v920";
         case 9: return "ac-BarringConfig1XRTT-r9";
         case 10: return "csfb-DualRxTxSupport-r10";
         case 11: return "sib8-PerPLMN-List-r11";
         case 12: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean systemTimeInfoPresent = buffer.decodeBit ("systemTimeInfoPresent");
      boolean searchWindowSizePresent = buffer.decodeBit ("searchWindowSizePresent");
      boolean parametersHRPDPresent = buffer.decodeBit ("parametersHRPDPresent");
      boolean parameters1XRTTPresent = buffer.decodeBit ("parameters1XRTTPresent");

      // decode systemTimeInfo

      if (systemTimeInfoPresent) {
         buffer.getContext().eventDispatcher.startElement("systemTimeInfo", -1);

         systemTimeInfo = new SystemTimeInfoCDMA2000();
         systemTimeInfo.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("systemTimeInfo", -1);
      }
      else {
         systemTimeInfo = null;
      }

      // decode searchWindowSize

      if (searchWindowSizePresent) {
         buffer.getContext().eventDispatcher.startElement("searchWindowSize", -1);

         searchWindowSize = new Asn1Integer();
         searchWindowSize.decode (buffer, 0, 15);

         buffer.invokeCharacters(searchWindowSize.toString());
         buffer.getContext().eventDispatcher.endElement("searchWindowSize", -1);
      }
      else {
         searchWindowSize = null;
      }

      // decode parametersHRPD

      if (parametersHRPDPresent) {
         buffer.getContext().eventDispatcher.startElement("parametersHRPD", -1);

         parametersHRPD = new SystemInformationBlockType8_parametersHRPD();
         parametersHRPD.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("parametersHRPD", -1);
      }
      else {
         parametersHRPD = null;
      }

      // decode parameters1XRTT

      if (parameters1XRTTPresent) {
         buffer.getContext().eventDispatcher.startElement("parameters1XRTT", -1);

         parameters1XRTT = new SystemInformationBlockType8_parameters1XRTT();
         parameters1XRTT.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("parameters1XRTT", -1);
      }
      else {
         parameters1XRTT = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("lateNonCriticalExtensionPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV4ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV5ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode lateNonCriticalExtension

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("lateNonCriticalExtension", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            lateNonCriticalExtension = new Asn1OctetString();
            lateNonCriticalExtension.decode (buffer);

            buffer.moveBitCursor (bitidx);

            buffer.invokeCharacters (lateNonCriticalExtension.toString());
            buffer.getContext().eventDispatcher.endElement("lateNonCriticalExtension", -1);

         }
         else {
            lateNonCriticalExtension = null;
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean csfb_SupportForDualRxUEs_r9Present = buffer.decodeBit ("csfb_SupportForDualRxUEs_r9Present");

            boolean cellReselectionParametersHRPD_v920Present = buffer.decodeBit ("cellReselectionParametersHRPD_v920Present");

            boolean cellReselectionParameters1XRTT_v920Present = buffer.decodeBit ("cellReselectionParameters1XRTT_v920Present");

            boolean csfb_RegistrationParam1XRTT_v920Present = buffer.decodeBit ("csfb_RegistrationParam1XRTT_v920Present");

            boolean ac_BarringConfig1XRTT_r9Present = buffer.decodeBit ("ac_BarringConfig1XRTT_r9Present");

            // decode csfb_SupportForDualRxUEs_r9

            if (csfb_SupportForDualRxUEs_r9Present) {
               buffer.getContext().eventDispatcher.startElement("csfb_SupportForDualRxUEs_r9", -1);

               csfb_SupportForDualRxUEs_r9 = new Asn1Boolean();
               csfb_SupportForDualRxUEs_r9.decode (buffer);

               buffer.invokeCharacters(csfb_SupportForDualRxUEs_r9.toString());
               buffer.getContext().eventDispatcher.endElement("csfb_SupportForDualRxUEs_r9", -1);
            }
            else {
               csfb_SupportForDualRxUEs_r9 = null;
            }

            // decode cellReselectionParametersHRPD_v920

            if (cellReselectionParametersHRPD_v920Present) {
               buffer.getContext().eventDispatcher.startElement("cellReselectionParametersHRPD_v920", -1);

               cellReselectionParametersHRPD_v920 = new CellReselectionParametersCDMA2000_v920();
               cellReselectionParametersHRPD_v920.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("cellReselectionParametersHRPD_v920", -1);
            }
            else {
               cellReselectionParametersHRPD_v920 = null;
            }

            // decode cellReselectionParameters1XRTT_v920

            if (cellReselectionParameters1XRTT_v920Present) {
               buffer.getContext().eventDispatcher.startElement("cellReselectionParameters1XRTT_v920", -1);

               cellReselectionParameters1XRTT_v920 = new CellReselectionParametersCDMA2000_v920();
               cellReselectionParameters1XRTT_v920.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("cellReselectionParameters1XRTT_v920", -1);
            }
            else {
               cellReselectionParameters1XRTT_v920 = null;
            }

            // decode csfb_RegistrationParam1XRTT_v920

            if (csfb_RegistrationParam1XRTT_v920Present) {
               buffer.getContext().eventDispatcher.startElement("csfb_RegistrationParam1XRTT_v920", -1);

               csfb_RegistrationParam1XRTT_v920 = new CSFB_RegistrationParam1XRTT_v920();
               csfb_RegistrationParam1XRTT_v920.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("csfb_RegistrationParam1XRTT_v920", -1);
            }
            else {
               csfb_RegistrationParam1XRTT_v920 = null;
            }

            // decode ac_BarringConfig1XRTT_r9

            if (ac_BarringConfig1XRTT_r9Present) {
               buffer.getContext().eventDispatcher.startElement("ac_BarringConfig1XRTT_r9", -1);

               ac_BarringConfig1XRTT_r9 = new AC_BarringConfig1XRTT_r9();
               ac_BarringConfig1XRTT_r9.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("ac_BarringConfig1XRTT_r9", -1);
            }
            else {
               ac_BarringConfig1XRTT_r9 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV4ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean csfb_DualRxTxSupport_r10Present = buffer.decodeBit ("csfb_DualRxTxSupport_r10Present");

            // decode csfb_DualRxTxSupport_r10

            if (csfb_DualRxTxSupport_r10Present) {
               buffer.getContext().eventDispatcher.startElement("csfb_DualRxTxSupport_r10", -1);

               int tval = SystemInformationBlockType8_csfb_DualRxTxSupport_r10.decodeEnumValue (buffer);
               csfb_DualRxTxSupport_r10 = SystemInformationBlockType8_csfb_DualRxTxSupport_r10.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("csfb_DualRxTxSupport_r10", -1);
            }
            else {
               csfb_DualRxTxSupport_r10 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV5ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean sib8_PerPLMN_List_r11Present = buffer.decodeBit ("sib8_PerPLMN_List_r11Present");

            // decode sib8_PerPLMN_List_r11

            if (sib8_PerPLMN_List_r11Present) {
               buffer.getContext().eventDispatcher.startElement("sib8_PerPLMN_List_r11", -1);

               sib8_PerPLMN_List_r11 = new SIB8_PerPLMN_List_r11();
               sib8_PerPLMN_List_r11.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("sib8_PerPLMN_List_r11", -1);
            }
            else {
               sib8_PerPLMN_List_r11 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (systemTimeInfo != null) systemTimeInfo.print (_sb, "systemTimeInfo", _level+1);
      if (searchWindowSize != null) searchWindowSize.print (_sb, "searchWindowSize", _level+1);
      if (parametersHRPD != null) parametersHRPD.print (_sb, "parametersHRPD", _level+1);
      if (parameters1XRTT != null) parameters1XRTT.print (_sb, "parameters1XRTT", _level+1);
      if (lateNonCriticalExtension != null) lateNonCriticalExtension.print (_sb, "lateNonCriticalExtension", _level+1);
      if (csfb_SupportForDualRxUEs_r9 != null) csfb_SupportForDualRxUEs_r9.print (_sb, "csfb_SupportForDualRxUEs_r9", _level+1);
      if (cellReselectionParametersHRPD_v920 != null) cellReselectionParametersHRPD_v920.print (_sb, "cellReselectionParametersHRPD_v920", _level+1);
      if (cellReselectionParameters1XRTT_v920 != null) cellReselectionParameters1XRTT_v920.print (_sb, "cellReselectionParameters1XRTT_v920", _level+1);
      if (csfb_RegistrationParam1XRTT_v920 != null) csfb_RegistrationParam1XRTT_v920.print (_sb, "csfb_RegistrationParam1XRTT_v920", _level+1);
      if (ac_BarringConfig1XRTT_r9 != null) ac_BarringConfig1XRTT_r9.print (_sb, "ac_BarringConfig1XRTT_r9", _level+1);
      if (csfb_DualRxTxSupport_r10 != null) csfb_DualRxTxSupport_r10.print (_sb, "csfb_DualRxTxSupport_r10", _level+1);
      if (sib8_PerPLMN_List_r11 != null) sib8_PerPLMN_List_r11.print (_sb, "sib8_PerPLMN_List_r11", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
