/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SL_Parameters_v1430 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SL-Parameters-v1430";
   }

   public SL_Parameters_v1430_zoneBasedPoolSelection_r14 zoneBasedPoolSelection_r14 = null;  // optional
   public SL_Parameters_v1430_ue_AutonomousWithFullSensing_r14 ue_AutonomousWithFullSensing_r14 = null;  // optional
   public SL_Parameters_v1430_ue_AutonomousWithPartialSensing_r14 ue_AutonomousWithPartialSensing_r14 = null;  // optional
   public SL_Parameters_v1430_sl_CongestionControl_r14 sl_CongestionControl_r14 = null;  // optional
   public SL_Parameters_v1430_v2x_TxWithShortResvInterval_r14 v2x_TxWithShortResvInterval_r14 = null;  // optional
   public Asn1Integer v2x_numberTxRxTiming_r14;  // optional
   public SL_Parameters_v1430_v2x_nonAdjacentPSCCH_PSSCH_r14 v2x_nonAdjacentPSCCH_PSSCH_r14 = null;  // optional
   public SL_Parameters_v1430_slss_TxRx_r14 slss_TxRx_r14 = null;  // optional
   public V2X_SupportedBandCombination_r14 v2x_SupportedBandCombinationList_r14;  // optional

   public SL_Parameters_v1430 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SL_Parameters_v1430 (
      SL_Parameters_v1430_zoneBasedPoolSelection_r14 zoneBasedPoolSelection_r14_,
      SL_Parameters_v1430_ue_AutonomousWithFullSensing_r14 ue_AutonomousWithFullSensing_r14_,
      SL_Parameters_v1430_ue_AutonomousWithPartialSensing_r14 ue_AutonomousWithPartialSensing_r14_,
      SL_Parameters_v1430_sl_CongestionControl_r14 sl_CongestionControl_r14_,
      SL_Parameters_v1430_v2x_TxWithShortResvInterval_r14 v2x_TxWithShortResvInterval_r14_,
      Asn1Integer v2x_numberTxRxTiming_r14_,
      SL_Parameters_v1430_v2x_nonAdjacentPSCCH_PSSCH_r14 v2x_nonAdjacentPSCCH_PSSCH_r14_,
      SL_Parameters_v1430_slss_TxRx_r14 slss_TxRx_r14_,
      V2X_SupportedBandCombination_r14 v2x_SupportedBandCombinationList_r14_
   ) {
      super();
      zoneBasedPoolSelection_r14 = zoneBasedPoolSelection_r14_;
      ue_AutonomousWithFullSensing_r14 = ue_AutonomousWithFullSensing_r14_;
      ue_AutonomousWithPartialSensing_r14 = ue_AutonomousWithPartialSensing_r14_;
      sl_CongestionControl_r14 = sl_CongestionControl_r14_;
      v2x_TxWithShortResvInterval_r14 = v2x_TxWithShortResvInterval_r14_;
      v2x_numberTxRxTiming_r14 = v2x_numberTxRxTiming_r14_;
      v2x_nonAdjacentPSCCH_PSSCH_r14 = v2x_nonAdjacentPSCCH_PSSCH_r14_;
      slss_TxRx_r14 = slss_TxRx_r14_;
      v2x_SupportedBandCombinationList_r14 = v2x_SupportedBandCombinationList_r14_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SL_Parameters_v1430 (SL_Parameters_v1430_zoneBasedPoolSelection_r14 zoneBasedPoolSelection_r14_,
      SL_Parameters_v1430_ue_AutonomousWithFullSensing_r14 ue_AutonomousWithFullSensing_r14_,
      SL_Parameters_v1430_ue_AutonomousWithPartialSensing_r14 ue_AutonomousWithPartialSensing_r14_,
      SL_Parameters_v1430_sl_CongestionControl_r14 sl_CongestionControl_r14_,
      SL_Parameters_v1430_v2x_TxWithShortResvInterval_r14 v2x_TxWithShortResvInterval_r14_,
      long v2x_numberTxRxTiming_r14_,
      SL_Parameters_v1430_v2x_nonAdjacentPSCCH_PSSCH_r14 v2x_nonAdjacentPSCCH_PSSCH_r14_,
      SL_Parameters_v1430_slss_TxRx_r14 slss_TxRx_r14_,
      V2X_SupportedBandCombination_r14 v2x_SupportedBandCombinationList_r14_
   ) {
      super();
      zoneBasedPoolSelection_r14 = zoneBasedPoolSelection_r14_;
      ue_AutonomousWithFullSensing_r14 = ue_AutonomousWithFullSensing_r14_;
      ue_AutonomousWithPartialSensing_r14 = ue_AutonomousWithPartialSensing_r14_;
      sl_CongestionControl_r14 = sl_CongestionControl_r14_;
      v2x_TxWithShortResvInterval_r14 = v2x_TxWithShortResvInterval_r14_;
      v2x_numberTxRxTiming_r14 = new Asn1Integer (v2x_numberTxRxTiming_r14_);
      v2x_nonAdjacentPSCCH_PSSCH_r14 = v2x_nonAdjacentPSCCH_PSSCH_r14_;
      slss_TxRx_r14 = slss_TxRx_r14_;
      v2x_SupportedBandCombinationList_r14 = v2x_SupportedBandCombinationList_r14_;
   }

   public void init () {
      zoneBasedPoolSelection_r14 = null;
      ue_AutonomousWithFullSensing_r14 = null;
      ue_AutonomousWithPartialSensing_r14 = null;
      sl_CongestionControl_r14 = null;
      v2x_TxWithShortResvInterval_r14 = null;
      v2x_numberTxRxTiming_r14 = null;
      v2x_nonAdjacentPSCCH_PSSCH_r14 = null;
      slss_TxRx_r14 = null;
      v2x_SupportedBandCombinationList_r14 = null;
   }

   public int getElementCount() { return 9; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return zoneBasedPoolSelection_r14;
         case 1: return ue_AutonomousWithFullSensing_r14;
         case 2: return ue_AutonomousWithPartialSensing_r14;
         case 3: return sl_CongestionControl_r14;
         case 4: return v2x_TxWithShortResvInterval_r14;
         case 5: return v2x_numberTxRxTiming_r14;
         case 6: return v2x_nonAdjacentPSCCH_PSSCH_r14;
         case 7: return slss_TxRx_r14;
         case 8: return v2x_SupportedBandCombinationList_r14;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "zoneBasedPoolSelection-r14";
         case 1: return "ue-AutonomousWithFullSensing-r14";
         case 2: return "ue-AutonomousWithPartialSensing-r14";
         case 3: return "sl-CongestionControl-r14";
         case 4: return "v2x-TxWithShortResvInterval-r14";
         case 5: return "v2x-numberTxRxTiming-r14";
         case 6: return "v2x-nonAdjacentPSCCH-PSSCH-r14";
         case 7: return "slss-TxRx-r14";
         case 8: return "v2x-SupportedBandCombinationList-r14";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean zoneBasedPoolSelection_r14Present = buffer.decodeBit ("zoneBasedPoolSelection_r14Present");
      boolean ue_AutonomousWithFullSensing_r14Present = buffer.decodeBit ("ue_AutonomousWithFullSensing_r14Present");
      boolean ue_AutonomousWithPartialSensing_r14Present = buffer.decodeBit ("ue_AutonomousWithPartialSensing_r14Present");
      boolean sl_CongestionControl_r14Present = buffer.decodeBit ("sl_CongestionControl_r14Present");
      boolean v2x_TxWithShortResvInterval_r14Present = buffer.decodeBit ("v2x_TxWithShortResvInterval_r14Present");
      boolean v2x_numberTxRxTiming_r14Present = buffer.decodeBit ("v2x_numberTxRxTiming_r14Present");
      boolean v2x_nonAdjacentPSCCH_PSSCH_r14Present = buffer.decodeBit ("v2x_nonAdjacentPSCCH_PSSCH_r14Present");
      boolean slss_TxRx_r14Present = buffer.decodeBit ("slss_TxRx_r14Present");
      boolean v2x_SupportedBandCombinationList_r14Present = buffer.decodeBit ("v2x_SupportedBandCombinationList_r14Present");

      // decode zoneBasedPoolSelection_r14

      if (zoneBasedPoolSelection_r14Present) {
         buffer.getContext().eventDispatcher.startElement("zoneBasedPoolSelection_r14", -1);

         int tval = SL_Parameters_v1430_zoneBasedPoolSelection_r14.decodeEnumValue (buffer);
         zoneBasedPoolSelection_r14 = SL_Parameters_v1430_zoneBasedPoolSelection_r14.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("zoneBasedPoolSelection_r14", -1);
      }
      else {
         zoneBasedPoolSelection_r14 = null;
      }

      // decode ue_AutonomousWithFullSensing_r14

      if (ue_AutonomousWithFullSensing_r14Present) {
         buffer.getContext().eventDispatcher.startElement("ue_AutonomousWithFullSensing_r14", -1);

         int tval = SL_Parameters_v1430_ue_AutonomousWithFullSensing_r14.decodeEnumValue (buffer);
         ue_AutonomousWithFullSensing_r14 = SL_Parameters_v1430_ue_AutonomousWithFullSensing_r14.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("ue_AutonomousWithFullSensing_r14", -1);
      }
      else {
         ue_AutonomousWithFullSensing_r14 = null;
      }

      // decode ue_AutonomousWithPartialSensing_r14

      if (ue_AutonomousWithPartialSensing_r14Present) {
         buffer.getContext().eventDispatcher.startElement("ue_AutonomousWithPartialSensing_r14", -1);

         int tval = SL_Parameters_v1430_ue_AutonomousWithPartialSensing_r14.decodeEnumValue (buffer);
         ue_AutonomousWithPartialSensing_r14 = SL_Parameters_v1430_ue_AutonomousWithPartialSensing_r14.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("ue_AutonomousWithPartialSensing_r14", -1);
      }
      else {
         ue_AutonomousWithPartialSensing_r14 = null;
      }

      // decode sl_CongestionControl_r14

      if (sl_CongestionControl_r14Present) {
         buffer.getContext().eventDispatcher.startElement("sl_CongestionControl_r14", -1);

         int tval = SL_Parameters_v1430_sl_CongestionControl_r14.decodeEnumValue (buffer);
         sl_CongestionControl_r14 = SL_Parameters_v1430_sl_CongestionControl_r14.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("sl_CongestionControl_r14", -1);
      }
      else {
         sl_CongestionControl_r14 = null;
      }

      // decode v2x_TxWithShortResvInterval_r14

      if (v2x_TxWithShortResvInterval_r14Present) {
         buffer.getContext().eventDispatcher.startElement("v2x_TxWithShortResvInterval_r14", -1);

         int tval = SL_Parameters_v1430_v2x_TxWithShortResvInterval_r14.decodeEnumValue (buffer);
         v2x_TxWithShortResvInterval_r14 = SL_Parameters_v1430_v2x_TxWithShortResvInterval_r14.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("v2x_TxWithShortResvInterval_r14", -1);
      }
      else {
         v2x_TxWithShortResvInterval_r14 = null;
      }

      // decode v2x_numberTxRxTiming_r14

      if (v2x_numberTxRxTiming_r14Present) {
         buffer.getContext().eventDispatcher.startElement("v2x_numberTxRxTiming_r14", -1);

         v2x_numberTxRxTiming_r14 = new Asn1Integer();
         v2x_numberTxRxTiming_r14.decode (buffer, 1, 16);

         buffer.invokeCharacters(v2x_numberTxRxTiming_r14.toString());
         buffer.getContext().eventDispatcher.endElement("v2x_numberTxRxTiming_r14", -1);
      }
      else {
         v2x_numberTxRxTiming_r14 = null;
      }

      // decode v2x_nonAdjacentPSCCH_PSSCH_r14

      if (v2x_nonAdjacentPSCCH_PSSCH_r14Present) {
         buffer.getContext().eventDispatcher.startElement("v2x_nonAdjacentPSCCH_PSSCH_r14", -1);

         int tval = SL_Parameters_v1430_v2x_nonAdjacentPSCCH_PSSCH_r14.decodeEnumValue (buffer);
         v2x_nonAdjacentPSCCH_PSSCH_r14 = SL_Parameters_v1430_v2x_nonAdjacentPSCCH_PSSCH_r14.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("v2x_nonAdjacentPSCCH_PSSCH_r14", -1);
      }
      else {
         v2x_nonAdjacentPSCCH_PSSCH_r14 = null;
      }

      // decode slss_TxRx_r14

      if (slss_TxRx_r14Present) {
         buffer.getContext().eventDispatcher.startElement("slss_TxRx_r14", -1);

         int tval = SL_Parameters_v1430_slss_TxRx_r14.decodeEnumValue (buffer);
         slss_TxRx_r14 = SL_Parameters_v1430_slss_TxRx_r14.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("slss_TxRx_r14", -1);
      }
      else {
         slss_TxRx_r14 = null;
      }

      // decode v2x_SupportedBandCombinationList_r14

      if (v2x_SupportedBandCombinationList_r14Present) {
         buffer.getContext().eventDispatcher.startElement("v2x_SupportedBandCombinationList_r14", -1);

         v2x_SupportedBandCombinationList_r14 = new V2X_SupportedBandCombination_r14();
         v2x_SupportedBandCombinationList_r14.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("v2x_SupportedBandCombinationList_r14", -1);
      }
      else {
         v2x_SupportedBandCombinationList_r14 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (zoneBasedPoolSelection_r14 != null) zoneBasedPoolSelection_r14.print (_sb, "zoneBasedPoolSelection_r14", _level+1);
      if (ue_AutonomousWithFullSensing_r14 != null) ue_AutonomousWithFullSensing_r14.print (_sb, "ue_AutonomousWithFullSensing_r14", _level+1);
      if (ue_AutonomousWithPartialSensing_r14 != null) ue_AutonomousWithPartialSensing_r14.print (_sb, "ue_AutonomousWithPartialSensing_r14", _level+1);
      if (sl_CongestionControl_r14 != null) sl_CongestionControl_r14.print (_sb, "sl_CongestionControl_r14", _level+1);
      if (v2x_TxWithShortResvInterval_r14 != null) v2x_TxWithShortResvInterval_r14.print (_sb, "v2x_TxWithShortResvInterval_r14", _level+1);
      if (v2x_numberTxRxTiming_r14 != null) v2x_numberTxRxTiming_r14.print (_sb, "v2x_numberTxRxTiming_r14", _level+1);
      if (v2x_nonAdjacentPSCCH_PSSCH_r14 != null) v2x_nonAdjacentPSCCH_PSSCH_r14.print (_sb, "v2x_nonAdjacentPSCCH_PSSCH_r14", _level+1);
      if (slss_TxRx_r14 != null) slss_TxRx_r14.print (_sb, "slss_TxRx_r14", _level+1);
      if (v2x_SupportedBandCombinationList_r14 != null) v2x_SupportedBandCombinationList_r14.print (_sb, "v2x_SupportedBandCombinationList_r14", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
