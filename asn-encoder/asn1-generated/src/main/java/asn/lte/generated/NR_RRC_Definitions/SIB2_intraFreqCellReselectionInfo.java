/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SIB2_intraFreqCellReselectionInfo extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public Q_RxLevMin q_RxLevMin;
   public Q_RxLevMin q_RxLevMinSUL;  // optional
   public Q_QualMin q_QualMin;  // optional
   public ReselectionThreshold s_IntraSearchP;
   public ReselectionThresholdQ s_IntraSearchQ;  // optional
   public T_Reselection t_ReselectionNR;
   public MultiFrequencyBandListNR_SIB frequencyBandList;  // optional
   public MultiFrequencyBandListNR_SIB frequencyBandListSUL;  // optional
   public P_Max p_Max;  // optional
   public SSB_MTC smtc;  // optional
   public SS_RSSI_Measurement ss_RSSI_Measurement;  // optional
   public SSB_ToMeasure ssb_ToMeasure;  // optional
   public Asn1Boolean deriveSSB_IndexFromCell;
   public boolean mV2ExtPresent;
   public SpeedStateScaleFactors t_ReselectionNR_SF;  // optional
   public boolean mV3ExtPresent;
   public SSB_MTC2_LP_r16 smtc2_LP_r16;  // optional
   public SSB_PositionQCL_Relation_r16 ssb_PositionQCL_Common_r16 = null;  // optional
   public Asn1OpenExt extElem1;

   public SIB2_intraFreqCellReselectionInfo () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SIB2_intraFreqCellReselectionInfo (
      Q_RxLevMin q_RxLevMin_,
      Q_RxLevMin q_RxLevMinSUL_,
      Q_QualMin q_QualMin_,
      ReselectionThreshold s_IntraSearchP_,
      ReselectionThresholdQ s_IntraSearchQ_,
      T_Reselection t_ReselectionNR_,
      MultiFrequencyBandListNR_SIB frequencyBandList_,
      MultiFrequencyBandListNR_SIB frequencyBandListSUL_,
      P_Max p_Max_,
      SSB_MTC smtc_,
      SS_RSSI_Measurement ss_RSSI_Measurement_,
      SSB_ToMeasure ssb_ToMeasure_,
      Asn1Boolean deriveSSB_IndexFromCell_,
      SpeedStateScaleFactors t_ReselectionNR_SF_,
      SSB_MTC2_LP_r16 smtc2_LP_r16_,
      SSB_PositionQCL_Relation_r16 ssb_PositionQCL_Common_r16_
   ) {
      super();
      q_RxLevMin = q_RxLevMin_;
      q_RxLevMinSUL = q_RxLevMinSUL_;
      q_QualMin = q_QualMin_;
      s_IntraSearchP = s_IntraSearchP_;
      s_IntraSearchQ = s_IntraSearchQ_;
      t_ReselectionNR = t_ReselectionNR_;
      frequencyBandList = frequencyBandList_;
      frequencyBandListSUL = frequencyBandListSUL_;
      p_Max = p_Max_;
      smtc = smtc_;
      ss_RSSI_Measurement = ss_RSSI_Measurement_;
      ssb_ToMeasure = ssb_ToMeasure_;
      deriveSSB_IndexFromCell = deriveSSB_IndexFromCell_;
      t_ReselectionNR_SF = t_ReselectionNR_SF_;
      smtc2_LP_r16 = smtc2_LP_r16_;
      ssb_PositionQCL_Common_r16 = ssb_PositionQCL_Common_r16_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SIB2_intraFreqCellReselectionInfo (
      Q_RxLevMin q_RxLevMin_,
      ReselectionThreshold s_IntraSearchP_,
      T_Reselection t_ReselectionNR_,
      Asn1Boolean deriveSSB_IndexFromCell_
   ) {
      super();
      q_RxLevMin = q_RxLevMin_;
      s_IntraSearchP = s_IntraSearchP_;
      t_ReselectionNR = t_ReselectionNR_;
      deriveSSB_IndexFromCell = deriveSSB_IndexFromCell_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SIB2_intraFreqCellReselectionInfo (long q_RxLevMin_,
      long q_RxLevMinSUL_,
      long q_QualMin_,
      long s_IntraSearchP_,
      long s_IntraSearchQ_,
      long t_ReselectionNR_,
      MultiFrequencyBandListNR_SIB frequencyBandList_,
      MultiFrequencyBandListNR_SIB frequencyBandListSUL_,
      long p_Max_,
      SSB_MTC smtc_,
      SS_RSSI_Measurement ss_RSSI_Measurement_,
      SSB_ToMeasure ssb_ToMeasure_,
      boolean deriveSSB_IndexFromCell_,
      SpeedStateScaleFactors t_ReselectionNR_SF_,
      SSB_MTC2_LP_r16 smtc2_LP_r16_,
      SSB_PositionQCL_Relation_r16 ssb_PositionQCL_Common_r16_
   ) {
      super();
      q_RxLevMin = new Q_RxLevMin (q_RxLevMin_);
      q_RxLevMinSUL = new Q_RxLevMin (q_RxLevMinSUL_);
      q_QualMin = new Q_QualMin (q_QualMin_);
      s_IntraSearchP = new ReselectionThreshold (s_IntraSearchP_);
      s_IntraSearchQ = new ReselectionThresholdQ (s_IntraSearchQ_);
      t_ReselectionNR = new T_Reselection (t_ReselectionNR_);
      frequencyBandList = frequencyBandList_;
      frequencyBandListSUL = frequencyBandListSUL_;
      p_Max = new P_Max (p_Max_);
      smtc = smtc_;
      ss_RSSI_Measurement = ss_RSSI_Measurement_;
      ssb_ToMeasure = ssb_ToMeasure_;
      deriveSSB_IndexFromCell = new Asn1Boolean (deriveSSB_IndexFromCell_);
      t_ReselectionNR_SF = t_ReselectionNR_SF_;
      smtc2_LP_r16 = smtc2_LP_r16_;
      ssb_PositionQCL_Common_r16 = ssb_PositionQCL_Common_r16_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public SIB2_intraFreqCellReselectionInfo (
      long q_RxLevMin_,
      long s_IntraSearchP_,
      long t_ReselectionNR_,
      boolean deriveSSB_IndexFromCell_
   ) {
      super();
      q_RxLevMin = new Q_RxLevMin (q_RxLevMin_);
      s_IntraSearchP = new ReselectionThreshold (s_IntraSearchP_);
      t_ReselectionNR = new T_Reselection (t_ReselectionNR_);
      deriveSSB_IndexFromCell = new Asn1Boolean (deriveSSB_IndexFromCell_);
   }

   public void init () {
      q_RxLevMin = null;
      q_RxLevMinSUL = null;
      q_QualMin = null;
      s_IntraSearchP = null;
      s_IntraSearchQ = null;
      t_ReselectionNR = null;
      frequencyBandList = null;
      frequencyBandListSUL = null;
      p_Max = null;
      smtc = null;
      ss_RSSI_Measurement = null;
      ssb_ToMeasure = null;
      deriveSSB_IndexFromCell = null;
      t_ReselectionNR_SF = null;
      smtc2_LP_r16 = null;
      ssb_PositionQCL_Common_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 17; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return q_RxLevMin;
         case 1: return q_RxLevMinSUL;
         case 2: return q_QualMin;
         case 3: return s_IntraSearchP;
         case 4: return s_IntraSearchQ;
         case 5: return t_ReselectionNR;
         case 6: return frequencyBandList;
         case 7: return frequencyBandListSUL;
         case 8: return p_Max;
         case 9: return smtc;
         case 10: return ss_RSSI_Measurement;
         case 11: return ssb_ToMeasure;
         case 12: return deriveSSB_IndexFromCell;
         case 13: return t_ReselectionNR_SF;
         case 14: return smtc2_LP_r16;
         case 15: return ssb_PositionQCL_Common_r16;
         case 16: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "q-RxLevMin";
         case 1: return "q-RxLevMinSUL";
         case 2: return "q-QualMin";
         case 3: return "s-IntraSearchP";
         case 4: return "s-IntraSearchQ";
         case 5: return "t-ReselectionNR";
         case 6: return "frequencyBandList";
         case 7: return "frequencyBandListSUL";
         case 8: return "p-Max";
         case 9: return "smtc";
         case 10: return "ss-RSSI-Measurement";
         case 11: return "ssb-ToMeasure";
         case 12: return "deriveSSB-IndexFromCell";
         case 13: return "t-ReselectionNR-SF";
         case 14: return "smtc2-LP-r16";
         case 15: return "ssb-PositionQCL-Common-r16";
         case 16: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean q_RxLevMinSULPresent = buffer.decodeBit ("q_RxLevMinSULPresent");
      boolean q_QualMinPresent = buffer.decodeBit ("q_QualMinPresent");
      boolean s_IntraSearchQPresent = buffer.decodeBit ("s_IntraSearchQPresent");
      boolean frequencyBandListPresent = buffer.decodeBit ("frequencyBandListPresent");
      boolean frequencyBandListSULPresent = buffer.decodeBit ("frequencyBandListSULPresent");
      boolean p_MaxPresent = buffer.decodeBit ("p_MaxPresent");
      boolean smtcPresent = buffer.decodeBit ("smtcPresent");
      boolean ss_RSSI_MeasurementPresent = buffer.decodeBit ("ss_RSSI_MeasurementPresent");
      boolean ssb_ToMeasurePresent = buffer.decodeBit ("ssb_ToMeasurePresent");

      // decode q_RxLevMin

      buffer.getContext().eventDispatcher.startElement("q_RxLevMin", -1);

      q_RxLevMin = new Q_RxLevMin();
      q_RxLevMin.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("q_RxLevMin", -1);

      // decode q_RxLevMinSUL

      if (q_RxLevMinSULPresent) {
         buffer.getContext().eventDispatcher.startElement("q_RxLevMinSUL", -1);

         q_RxLevMinSUL = new Q_RxLevMin();
         q_RxLevMinSUL.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("q_RxLevMinSUL", -1);
      }
      else {
         q_RxLevMinSUL = null;
      }

      // decode q_QualMin

      if (q_QualMinPresent) {
         buffer.getContext().eventDispatcher.startElement("q_QualMin", -1);

         q_QualMin = new Q_QualMin();
         q_QualMin.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("q_QualMin", -1);
      }
      else {
         q_QualMin = null;
      }

      // decode s_IntraSearchP

      buffer.getContext().eventDispatcher.startElement("s_IntraSearchP", -1);

      s_IntraSearchP = new ReselectionThreshold();
      s_IntraSearchP.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("s_IntraSearchP", -1);

      // decode s_IntraSearchQ

      if (s_IntraSearchQPresent) {
         buffer.getContext().eventDispatcher.startElement("s_IntraSearchQ", -1);

         s_IntraSearchQ = new ReselectionThresholdQ();
         s_IntraSearchQ.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("s_IntraSearchQ", -1);
      }
      else {
         s_IntraSearchQ = null;
      }

      // decode t_ReselectionNR

      buffer.getContext().eventDispatcher.startElement("t_ReselectionNR", -1);

      t_ReselectionNR = new T_Reselection();
      t_ReselectionNR.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("t_ReselectionNR", -1);

      // decode frequencyBandList

      if (frequencyBandListPresent) {
         buffer.getContext().eventDispatcher.startElement("frequencyBandList", -1);

         frequencyBandList = new MultiFrequencyBandListNR_SIB();
         frequencyBandList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("frequencyBandList", -1);
      }
      else {
         frequencyBandList = null;
      }

      // decode frequencyBandListSUL

      if (frequencyBandListSULPresent) {
         buffer.getContext().eventDispatcher.startElement("frequencyBandListSUL", -1);

         frequencyBandListSUL = new MultiFrequencyBandListNR_SIB();
         frequencyBandListSUL.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("frequencyBandListSUL", -1);
      }
      else {
         frequencyBandListSUL = null;
      }

      // decode p_Max

      if (p_MaxPresent) {
         buffer.getContext().eventDispatcher.startElement("p_Max", -1);

         p_Max = new P_Max();
         p_Max.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("p_Max", -1);
      }
      else {
         p_Max = null;
      }

      // decode smtc

      if (smtcPresent) {
         buffer.getContext().eventDispatcher.startElement("smtc", -1);

         smtc = new SSB_MTC();
         smtc.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("smtc", -1);
      }
      else {
         smtc = null;
      }

      // decode ss_RSSI_Measurement

      if (ss_RSSI_MeasurementPresent) {
         buffer.getContext().eventDispatcher.startElement("ss_RSSI_Measurement", -1);

         ss_RSSI_Measurement = new SS_RSSI_Measurement();
         ss_RSSI_Measurement.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ss_RSSI_Measurement", -1);
      }
      else {
         ss_RSSI_Measurement = null;
      }

      // decode ssb_ToMeasure

      if (ssb_ToMeasurePresent) {
         buffer.getContext().eventDispatcher.startElement("ssb_ToMeasure", -1);

         ssb_ToMeasure = new SSB_ToMeasure();
         ssb_ToMeasure.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ssb_ToMeasure", -1);
      }
      else {
         ssb_ToMeasure = null;
      }

      // decode deriveSSB_IndexFromCell

      buffer.getContext().eventDispatcher.startElement("deriveSSB_IndexFromCell", -1);

      deriveSSB_IndexFromCell = new Asn1Boolean();
      deriveSSB_IndexFromCell.decode (buffer);

      buffer.invokeCharacters(deriveSSB_IndexFromCell.toString());
      buffer.getContext().eventDispatcher.endElement("deriveSSB_IndexFromCell", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean t_ReselectionNR_SFPresent = buffer.decodeBit ("t_ReselectionNR_SFPresent");

            // decode t_ReselectionNR_SF

            if (t_ReselectionNR_SFPresent) {
               buffer.getContext().eventDispatcher.startElement("t_ReselectionNR_SF", -1);

               t_ReselectionNR_SF = new SpeedStateScaleFactors();
               t_ReselectionNR_SF.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("t_ReselectionNR_SF", -1);
            }
            else {
               t_ReselectionNR_SF = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean smtc2_LP_r16Present = buffer.decodeBit ("smtc2_LP_r16Present");

            boolean ssb_PositionQCL_Common_r16Present = buffer.decodeBit ("ssb_PositionQCL_Common_r16Present");

            // decode smtc2_LP_r16

            if (smtc2_LP_r16Present) {
               buffer.getContext().eventDispatcher.startElement("smtc2_LP_r16", -1);

               smtc2_LP_r16 = new SSB_MTC2_LP_r16();
               smtc2_LP_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("smtc2_LP_r16", -1);
            }
            else {
               smtc2_LP_r16 = null;
            }

            // decode ssb_PositionQCL_Common_r16

            if (ssb_PositionQCL_Common_r16Present) {
               buffer.getContext().eventDispatcher.startElement("ssb_PositionQCL_Common_r16", -1);

               int tval = SSB_PositionQCL_Relation_r16.decodeEnumValue (buffer);
               ssb_PositionQCL_Common_r16 = SSB_PositionQCL_Relation_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("ssb_PositionQCL_Common_r16", -1);
            }
            else {
               ssb_PositionQCL_Common_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (q_RxLevMin != null) q_RxLevMin.print (_sb, "q_RxLevMin", _level+1);
      if (q_RxLevMinSUL != null) q_RxLevMinSUL.print (_sb, "q_RxLevMinSUL", _level+1);
      if (q_QualMin != null) q_QualMin.print (_sb, "q_QualMin", _level+1);
      if (s_IntraSearchP != null) s_IntraSearchP.print (_sb, "s_IntraSearchP", _level+1);
      if (s_IntraSearchQ != null) s_IntraSearchQ.print (_sb, "s_IntraSearchQ", _level+1);
      if (t_ReselectionNR != null) t_ReselectionNR.print (_sb, "t_ReselectionNR", _level+1);
      if (frequencyBandList != null) frequencyBandList.print (_sb, "frequencyBandList", _level+1);
      if (frequencyBandListSUL != null) frequencyBandListSUL.print (_sb, "frequencyBandListSUL", _level+1);
      if (p_Max != null) p_Max.print (_sb, "p_Max", _level+1);
      if (smtc != null) smtc.print (_sb, "smtc", _level+1);
      if (ss_RSSI_Measurement != null) ss_RSSI_Measurement.print (_sb, "ss_RSSI_Measurement", _level+1);
      if (ssb_ToMeasure != null) ssb_ToMeasure.print (_sb, "ssb_ToMeasure", _level+1);
      if (deriveSSB_IndexFromCell != null) deriveSSB_IndexFromCell.print (_sb, "deriveSSB_IndexFromCell", _level+1);
      if (t_ReselectionNR_SF != null) t_ReselectionNR_SF.print (_sb, "t_ReselectionNR_SF", _level+1);
      if (smtc2_LP_r16 != null) smtc2_LP_r16.print (_sb, "smtc2_LP_r16", _level+1);
      if (ssb_PositionQCL_Common_r16 != null) ssb_PositionQCL_Common_r16.print (_sb, "ssb_PositionQCL_Common_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
