/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class RadioResourceConfigCommon extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "RadioResourceConfigCommon";
   }

   public RACH_ConfigCommon rach_ConfigCommon;  // optional
   public PRACH_Config prach_Config;
   public PDSCH_ConfigCommon pdsch_ConfigCommon;  // optional
   public PUSCH_ConfigCommon pusch_ConfigCommon;
   public PHICH_Config phich_Config;  // optional
   public PUCCH_ConfigCommon pucch_ConfigCommon;  // optional
   public SoundingRS_UL_ConfigCommon soundingRS_UL_ConfigCommon;  // optional
   public UplinkPowerControlCommon uplinkPowerControlCommon;  // optional
   public AntennaInfoCommon antennaInfoCommon;  // optional
   public P_Max p_Max;  // optional
   public TDD_Config tdd_Config;  // optional
   public UL_CyclicPrefixLength ul_CyclicPrefixLength = null;
   public boolean mV2ExtPresent;
   public UplinkPowerControlCommon_v1020 uplinkPowerControlCommon_v1020;  // optional
   public boolean mV3ExtPresent;
   public TDD_Config_v1130 tdd_Config_v1130;  // optional
   public boolean mV4ExtPresent;
   public PUSCH_ConfigCommon_v1270 pusch_ConfigCommon_v1270;  // optional
   public boolean mV5ExtPresent;
   public PRACH_Config_v1310 prach_Config_v1310;  // optional
   public FreqHoppingParameters_r13 freqHoppingParameters_r13;  // optional
   public PDSCH_ConfigCommon_v1310 pdsch_ConfigCommon_v1310;  // optional
   public PUCCH_ConfigCommon_v1310 pucch_ConfigCommon_v1310;  // optional
   public PUSCH_ConfigCommon_v1310 pusch_ConfigCommon_v1310;  // optional
   public UplinkPowerControlCommon_v1310 uplinkPowerControlCommon_v1310;  // optional
   public boolean mV6ExtPresent;
   public HighSpeedConfig_r14 highSpeedConfig_r14;  // optional
   public PRACH_Config_v1430 prach_Config_v1430;  // optional
   public PUCCH_ConfigCommon_v1430 pucch_ConfigCommon_v1430;  // optional
   public TDD_Config_v1430 tdd_Config_v1430;  // optional
   public boolean mV7ExtPresent;
   public TDD_Config_v1450 tdd_Config_v1450;  // optional
   public boolean mV8ExtPresent;
   public UplinkPowerControlCommon_v1530 uplinkPowerControlCommon_v1530;  // optional
   public HighSpeedConfig_v1530 highSpeedConfig_v1530;  // optional
   public Asn1OpenExt extElem1;

   public RadioResourceConfigCommon () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public RadioResourceConfigCommon (
      RACH_ConfigCommon rach_ConfigCommon_,
      PRACH_Config prach_Config_,
      PDSCH_ConfigCommon pdsch_ConfigCommon_,
      PUSCH_ConfigCommon pusch_ConfigCommon_,
      PHICH_Config phich_Config_,
      PUCCH_ConfigCommon pucch_ConfigCommon_,
      SoundingRS_UL_ConfigCommon soundingRS_UL_ConfigCommon_,
      UplinkPowerControlCommon uplinkPowerControlCommon_,
      AntennaInfoCommon antennaInfoCommon_,
      P_Max p_Max_,
      TDD_Config tdd_Config_,
      UL_CyclicPrefixLength ul_CyclicPrefixLength_,
      UplinkPowerControlCommon_v1020 uplinkPowerControlCommon_v1020_,
      TDD_Config_v1130 tdd_Config_v1130_,
      PUSCH_ConfigCommon_v1270 pusch_ConfigCommon_v1270_,
      PRACH_Config_v1310 prach_Config_v1310_,
      FreqHoppingParameters_r13 freqHoppingParameters_r13_,
      PDSCH_ConfigCommon_v1310 pdsch_ConfigCommon_v1310_,
      PUCCH_ConfigCommon_v1310 pucch_ConfigCommon_v1310_,
      PUSCH_ConfigCommon_v1310 pusch_ConfigCommon_v1310_,
      UplinkPowerControlCommon_v1310 uplinkPowerControlCommon_v1310_,
      HighSpeedConfig_r14 highSpeedConfig_r14_,
      PRACH_Config_v1430 prach_Config_v1430_,
      PUCCH_ConfigCommon_v1430 pucch_ConfigCommon_v1430_,
      TDD_Config_v1430 tdd_Config_v1430_,
      TDD_Config_v1450 tdd_Config_v1450_,
      UplinkPowerControlCommon_v1530 uplinkPowerControlCommon_v1530_,
      HighSpeedConfig_v1530 highSpeedConfig_v1530_
   ) {
      super();
      rach_ConfigCommon = rach_ConfigCommon_;
      prach_Config = prach_Config_;
      pdsch_ConfigCommon = pdsch_ConfigCommon_;
      pusch_ConfigCommon = pusch_ConfigCommon_;
      phich_Config = phich_Config_;
      pucch_ConfigCommon = pucch_ConfigCommon_;
      soundingRS_UL_ConfigCommon = soundingRS_UL_ConfigCommon_;
      uplinkPowerControlCommon = uplinkPowerControlCommon_;
      antennaInfoCommon = antennaInfoCommon_;
      p_Max = p_Max_;
      tdd_Config = tdd_Config_;
      ul_CyclicPrefixLength = ul_CyclicPrefixLength_;
      uplinkPowerControlCommon_v1020 = uplinkPowerControlCommon_v1020_;
      tdd_Config_v1130 = tdd_Config_v1130_;
      pusch_ConfigCommon_v1270 = pusch_ConfigCommon_v1270_;
      prach_Config_v1310 = prach_Config_v1310_;
      freqHoppingParameters_r13 = freqHoppingParameters_r13_;
      pdsch_ConfigCommon_v1310 = pdsch_ConfigCommon_v1310_;
      pucch_ConfigCommon_v1310 = pucch_ConfigCommon_v1310_;
      pusch_ConfigCommon_v1310 = pusch_ConfigCommon_v1310_;
      uplinkPowerControlCommon_v1310 = uplinkPowerControlCommon_v1310_;
      highSpeedConfig_r14 = highSpeedConfig_r14_;
      prach_Config_v1430 = prach_Config_v1430_;
      pucch_ConfigCommon_v1430 = pucch_ConfigCommon_v1430_;
      tdd_Config_v1430 = tdd_Config_v1430_;
      tdd_Config_v1450 = tdd_Config_v1450_;
      uplinkPowerControlCommon_v1530 = uplinkPowerControlCommon_v1530_;
      highSpeedConfig_v1530 = highSpeedConfig_v1530_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public RadioResourceConfigCommon (
      PRACH_Config prach_Config_,
      PUSCH_ConfigCommon pusch_ConfigCommon_,
      UL_CyclicPrefixLength ul_CyclicPrefixLength_
   ) {
      super();
      prach_Config = prach_Config_;
      pusch_ConfigCommon = pusch_ConfigCommon_;
      ul_CyclicPrefixLength = ul_CyclicPrefixLength_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public RadioResourceConfigCommon (RACH_ConfigCommon rach_ConfigCommon_,
      PRACH_Config prach_Config_,
      PDSCH_ConfigCommon pdsch_ConfigCommon_,
      PUSCH_ConfigCommon pusch_ConfigCommon_,
      PHICH_Config phich_Config_,
      PUCCH_ConfigCommon pucch_ConfigCommon_,
      SoundingRS_UL_ConfigCommon soundingRS_UL_ConfigCommon_,
      UplinkPowerControlCommon uplinkPowerControlCommon_,
      AntennaInfoCommon antennaInfoCommon_,
      long p_Max_,
      TDD_Config tdd_Config_,
      UL_CyclicPrefixLength ul_CyclicPrefixLength_,
      UplinkPowerControlCommon_v1020 uplinkPowerControlCommon_v1020_,
      TDD_Config_v1130 tdd_Config_v1130_,
      PUSCH_ConfigCommon_v1270 pusch_ConfigCommon_v1270_,
      PRACH_Config_v1310 prach_Config_v1310_,
      FreqHoppingParameters_r13 freqHoppingParameters_r13_,
      PDSCH_ConfigCommon_v1310 pdsch_ConfigCommon_v1310_,
      PUCCH_ConfigCommon_v1310 pucch_ConfigCommon_v1310_,
      PUSCH_ConfigCommon_v1310 pusch_ConfigCommon_v1310_,
      UplinkPowerControlCommon_v1310 uplinkPowerControlCommon_v1310_,
      HighSpeedConfig_r14 highSpeedConfig_r14_,
      PRACH_Config_v1430 prach_Config_v1430_,
      PUCCH_ConfigCommon_v1430 pucch_ConfigCommon_v1430_,
      TDD_Config_v1430 tdd_Config_v1430_,
      TDD_Config_v1450 tdd_Config_v1450_,
      UplinkPowerControlCommon_v1530 uplinkPowerControlCommon_v1530_,
      HighSpeedConfig_v1530 highSpeedConfig_v1530_
   ) {
      super();
      rach_ConfigCommon = rach_ConfigCommon_;
      prach_Config = prach_Config_;
      pdsch_ConfigCommon = pdsch_ConfigCommon_;
      pusch_ConfigCommon = pusch_ConfigCommon_;
      phich_Config = phich_Config_;
      pucch_ConfigCommon = pucch_ConfigCommon_;
      soundingRS_UL_ConfigCommon = soundingRS_UL_ConfigCommon_;
      uplinkPowerControlCommon = uplinkPowerControlCommon_;
      antennaInfoCommon = antennaInfoCommon_;
      p_Max = new P_Max (p_Max_);
      tdd_Config = tdd_Config_;
      ul_CyclicPrefixLength = ul_CyclicPrefixLength_;
      uplinkPowerControlCommon_v1020 = uplinkPowerControlCommon_v1020_;
      tdd_Config_v1130 = tdd_Config_v1130_;
      pusch_ConfigCommon_v1270 = pusch_ConfigCommon_v1270_;
      prach_Config_v1310 = prach_Config_v1310_;
      freqHoppingParameters_r13 = freqHoppingParameters_r13_;
      pdsch_ConfigCommon_v1310 = pdsch_ConfigCommon_v1310_;
      pucch_ConfigCommon_v1310 = pucch_ConfigCommon_v1310_;
      pusch_ConfigCommon_v1310 = pusch_ConfigCommon_v1310_;
      uplinkPowerControlCommon_v1310 = uplinkPowerControlCommon_v1310_;
      highSpeedConfig_r14 = highSpeedConfig_r14_;
      prach_Config_v1430 = prach_Config_v1430_;
      pucch_ConfigCommon_v1430 = pucch_ConfigCommon_v1430_;
      tdd_Config_v1430 = tdd_Config_v1430_;
      tdd_Config_v1450 = tdd_Config_v1450_;
      uplinkPowerControlCommon_v1530 = uplinkPowerControlCommon_v1530_;
      highSpeedConfig_v1530 = highSpeedConfig_v1530_;
   }

   public void init () {
      rach_ConfigCommon = null;
      prach_Config = null;
      pdsch_ConfigCommon = null;
      pusch_ConfigCommon = null;
      phich_Config = null;
      pucch_ConfigCommon = null;
      soundingRS_UL_ConfigCommon = null;
      uplinkPowerControlCommon = null;
      antennaInfoCommon = null;
      p_Max = null;
      tdd_Config = null;
      ul_CyclicPrefixLength = null;
      uplinkPowerControlCommon_v1020 = null;
      tdd_Config_v1130 = null;
      pusch_ConfigCommon_v1270 = null;
      prach_Config_v1310 = null;
      freqHoppingParameters_r13 = null;
      pdsch_ConfigCommon_v1310 = null;
      pucch_ConfigCommon_v1310 = null;
      pusch_ConfigCommon_v1310 = null;
      uplinkPowerControlCommon_v1310 = null;
      highSpeedConfig_r14 = null;
      prach_Config_v1430 = null;
      pucch_ConfigCommon_v1430 = null;
      tdd_Config_v1430 = null;
      tdd_Config_v1450 = null;
      uplinkPowerControlCommon_v1530 = null;
      highSpeedConfig_v1530 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 29; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return rach_ConfigCommon;
         case 1: return prach_Config;
         case 2: return pdsch_ConfigCommon;
         case 3: return pusch_ConfigCommon;
         case 4: return phich_Config;
         case 5: return pucch_ConfigCommon;
         case 6: return soundingRS_UL_ConfigCommon;
         case 7: return uplinkPowerControlCommon;
         case 8: return antennaInfoCommon;
         case 9: return p_Max;
         case 10: return tdd_Config;
         case 11: return ul_CyclicPrefixLength;
         case 12: return uplinkPowerControlCommon_v1020;
         case 13: return tdd_Config_v1130;
         case 14: return pusch_ConfigCommon_v1270;
         case 15: return prach_Config_v1310;
         case 16: return freqHoppingParameters_r13;
         case 17: return pdsch_ConfigCommon_v1310;
         case 18: return pucch_ConfigCommon_v1310;
         case 19: return pusch_ConfigCommon_v1310;
         case 20: return uplinkPowerControlCommon_v1310;
         case 21: return highSpeedConfig_r14;
         case 22: return prach_Config_v1430;
         case 23: return pucch_ConfigCommon_v1430;
         case 24: return tdd_Config_v1430;
         case 25: return tdd_Config_v1450;
         case 26: return uplinkPowerControlCommon_v1530;
         case 27: return highSpeedConfig_v1530;
         case 28: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "rach-ConfigCommon";
         case 1: return "prach-Config";
         case 2: return "pdsch-ConfigCommon";
         case 3: return "pusch-ConfigCommon";
         case 4: return "phich-Config";
         case 5: return "pucch-ConfigCommon";
         case 6: return "soundingRS-UL-ConfigCommon";
         case 7: return "uplinkPowerControlCommon";
         case 8: return "antennaInfoCommon";
         case 9: return "p-Max";
         case 10: return "tdd-Config";
         case 11: return "ul-CyclicPrefixLength";
         case 12: return "uplinkPowerControlCommon-v1020";
         case 13: return "tdd-Config-v1130";
         case 14: return "pusch-ConfigCommon-v1270";
         case 15: return "prach-Config-v1310";
         case 16: return "freqHoppingParameters-r13";
         case 17: return "pdsch-ConfigCommon-v1310";
         case 18: return "pucch-ConfigCommon-v1310";
         case 19: return "pusch-ConfigCommon-v1310";
         case 20: return "uplinkPowerControlCommon-v1310";
         case 21: return "highSpeedConfig-r14";
         case 22: return "prach-Config-v1430";
         case 23: return "pucch-ConfigCommon-v1430";
         case 24: return "tdd-Config-v1430";
         case 25: return "tdd-Config-v1450";
         case 26: return "uplinkPowerControlCommon-v1530";
         case 27: return "highSpeedConfig-v1530";
         case 28: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean rach_ConfigCommonPresent = buffer.decodeBit ("rach_ConfigCommonPresent");
      boolean pdsch_ConfigCommonPresent = buffer.decodeBit ("pdsch_ConfigCommonPresent");
      boolean phich_ConfigPresent = buffer.decodeBit ("phich_ConfigPresent");
      boolean pucch_ConfigCommonPresent = buffer.decodeBit ("pucch_ConfigCommonPresent");
      boolean soundingRS_UL_ConfigCommonPresent = buffer.decodeBit ("soundingRS_UL_ConfigCommonPresent");
      boolean uplinkPowerControlCommonPresent = buffer.decodeBit ("uplinkPowerControlCommonPresent");
      boolean antennaInfoCommonPresent = buffer.decodeBit ("antennaInfoCommonPresent");
      boolean p_MaxPresent = buffer.decodeBit ("p_MaxPresent");
      boolean tdd_ConfigPresent = buffer.decodeBit ("tdd_ConfigPresent");

      // decode rach_ConfigCommon

      if (rach_ConfigCommonPresent) {
         buffer.getContext().eventDispatcher.startElement("rach_ConfigCommon", -1);

         rach_ConfigCommon = new RACH_ConfigCommon();
         rach_ConfigCommon.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("rach_ConfigCommon", -1);
      }
      else {
         rach_ConfigCommon = null;
      }

      // decode prach_Config

      buffer.getContext().eventDispatcher.startElement("prach_Config", -1);

      prach_Config = new PRACH_Config();
      prach_Config.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("prach_Config", -1);

      // decode pdsch_ConfigCommon

      if (pdsch_ConfigCommonPresent) {
         buffer.getContext().eventDispatcher.startElement("pdsch_ConfigCommon", -1);

         pdsch_ConfigCommon = new PDSCH_ConfigCommon();
         pdsch_ConfigCommon.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("pdsch_ConfigCommon", -1);
      }
      else {
         pdsch_ConfigCommon = null;
      }

      // decode pusch_ConfigCommon

      buffer.getContext().eventDispatcher.startElement("pusch_ConfigCommon", -1);

      pusch_ConfigCommon = new PUSCH_ConfigCommon();
      pusch_ConfigCommon.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("pusch_ConfigCommon", -1);

      // decode phich_Config

      if (phich_ConfigPresent) {
         buffer.getContext().eventDispatcher.startElement("phich_Config", -1);

         phich_Config = new PHICH_Config();
         phich_Config.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("phich_Config", -1);
      }
      else {
         phich_Config = null;
      }

      // decode pucch_ConfigCommon

      if (pucch_ConfigCommonPresent) {
         buffer.getContext().eventDispatcher.startElement("pucch_ConfigCommon", -1);

         pucch_ConfigCommon = new PUCCH_ConfigCommon();
         pucch_ConfigCommon.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("pucch_ConfigCommon", -1);
      }
      else {
         pucch_ConfigCommon = null;
      }

      // decode soundingRS_UL_ConfigCommon

      if (soundingRS_UL_ConfigCommonPresent) {
         buffer.getContext().eventDispatcher.startElement("soundingRS_UL_ConfigCommon", -1);

         soundingRS_UL_ConfigCommon = new SoundingRS_UL_ConfigCommon();
         soundingRS_UL_ConfigCommon.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("soundingRS_UL_ConfigCommon", -1);
      }
      else {
         soundingRS_UL_ConfigCommon = null;
      }

      // decode uplinkPowerControlCommon

      if (uplinkPowerControlCommonPresent) {
         buffer.getContext().eventDispatcher.startElement("uplinkPowerControlCommon", -1);

         uplinkPowerControlCommon = new UplinkPowerControlCommon();
         uplinkPowerControlCommon.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("uplinkPowerControlCommon", -1);
      }
      else {
         uplinkPowerControlCommon = null;
      }

      // decode antennaInfoCommon

      if (antennaInfoCommonPresent) {
         buffer.getContext().eventDispatcher.startElement("antennaInfoCommon", -1);

         antennaInfoCommon = new AntennaInfoCommon();
         antennaInfoCommon.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("antennaInfoCommon", -1);
      }
      else {
         antennaInfoCommon = null;
      }

      // decode p_Max

      if (p_MaxPresent) {
         buffer.getContext().eventDispatcher.startElement("p_Max", -1);

         p_Max = new P_Max();
         p_Max.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("p_Max", -1);
      }
      else {
         p_Max = null;
      }

      // decode tdd_Config

      if (tdd_ConfigPresent) {
         buffer.getContext().eventDispatcher.startElement("tdd_Config", -1);

         tdd_Config = new TDD_Config();
         tdd_Config.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("tdd_Config", -1);
      }
      else {
         tdd_Config = null;
      }

      // decode ul_CyclicPrefixLength

      buffer.getContext().eventDispatcher.startElement("ul_CyclicPrefixLength", -1);

      {
         int tval = UL_CyclicPrefixLength.decodeEnumValue (buffer);
         ul_CyclicPrefixLength = UL_CyclicPrefixLength.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("ul_CyclicPrefixLength", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV4ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV5ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV6ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV7ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV8ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean uplinkPowerControlCommon_v1020Present = buffer.decodeBit ("uplinkPowerControlCommon_v1020Present");

            // decode uplinkPowerControlCommon_v1020

            if (uplinkPowerControlCommon_v1020Present) {
               buffer.getContext().eventDispatcher.startElement("uplinkPowerControlCommon_v1020", -1);

               uplinkPowerControlCommon_v1020 = new UplinkPowerControlCommon_v1020();
               uplinkPowerControlCommon_v1020.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("uplinkPowerControlCommon_v1020", -1);
            }
            else {
               uplinkPowerControlCommon_v1020 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean tdd_Config_v1130Present = buffer.decodeBit ("tdd_Config_v1130Present");

            // decode tdd_Config_v1130

            if (tdd_Config_v1130Present) {
               buffer.getContext().eventDispatcher.startElement("tdd_Config_v1130", -1);

               tdd_Config_v1130 = new TDD_Config_v1130();
               tdd_Config_v1130.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("tdd_Config_v1130", -1);
            }
            else {
               tdd_Config_v1130 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV4ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean pusch_ConfigCommon_v1270Present = buffer.decodeBit ("pusch_ConfigCommon_v1270Present");

            // decode pusch_ConfigCommon_v1270

            if (pusch_ConfigCommon_v1270Present) {
               buffer.getContext().eventDispatcher.startElement("pusch_ConfigCommon_v1270", -1);

               pusch_ConfigCommon_v1270 = new PUSCH_ConfigCommon_v1270();
               pusch_ConfigCommon_v1270.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("pusch_ConfigCommon_v1270", -1);
            }
            else {
               pusch_ConfigCommon_v1270 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV5ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean prach_Config_v1310Present = buffer.decodeBit ("prach_Config_v1310Present");

            boolean freqHoppingParameters_r13Present = buffer.decodeBit ("freqHoppingParameters_r13Present");

            boolean pdsch_ConfigCommon_v1310Present = buffer.decodeBit ("pdsch_ConfigCommon_v1310Present");

            boolean pucch_ConfigCommon_v1310Present = buffer.decodeBit ("pucch_ConfigCommon_v1310Present");

            boolean pusch_ConfigCommon_v1310Present = buffer.decodeBit ("pusch_ConfigCommon_v1310Present");

            boolean uplinkPowerControlCommon_v1310Present = buffer.decodeBit ("uplinkPowerControlCommon_v1310Present");

            // decode prach_Config_v1310

            if (prach_Config_v1310Present) {
               buffer.getContext().eventDispatcher.startElement("prach_Config_v1310", -1);

               prach_Config_v1310 = new PRACH_Config_v1310();
               prach_Config_v1310.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("prach_Config_v1310", -1);
            }
            else {
               prach_Config_v1310 = null;
            }

            // decode freqHoppingParameters_r13

            if (freqHoppingParameters_r13Present) {
               buffer.getContext().eventDispatcher.startElement("freqHoppingParameters_r13", -1);

               freqHoppingParameters_r13 = new FreqHoppingParameters_r13();
               freqHoppingParameters_r13.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("freqHoppingParameters_r13", -1);
            }
            else {
               freqHoppingParameters_r13 = null;
            }

            // decode pdsch_ConfigCommon_v1310

            if (pdsch_ConfigCommon_v1310Present) {
               buffer.getContext().eventDispatcher.startElement("pdsch_ConfigCommon_v1310", -1);

               pdsch_ConfigCommon_v1310 = new PDSCH_ConfigCommon_v1310();
               pdsch_ConfigCommon_v1310.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("pdsch_ConfigCommon_v1310", -1);
            }
            else {
               pdsch_ConfigCommon_v1310 = null;
            }

            // decode pucch_ConfigCommon_v1310

            if (pucch_ConfigCommon_v1310Present) {
               buffer.getContext().eventDispatcher.startElement("pucch_ConfigCommon_v1310", -1);

               pucch_ConfigCommon_v1310 = new PUCCH_ConfigCommon_v1310();
               pucch_ConfigCommon_v1310.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("pucch_ConfigCommon_v1310", -1);
            }
            else {
               pucch_ConfigCommon_v1310 = null;
            }

            // decode pusch_ConfigCommon_v1310

            if (pusch_ConfigCommon_v1310Present) {
               buffer.getContext().eventDispatcher.startElement("pusch_ConfigCommon_v1310", -1);

               pusch_ConfigCommon_v1310 = new PUSCH_ConfigCommon_v1310();
               pusch_ConfigCommon_v1310.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("pusch_ConfigCommon_v1310", -1);
            }
            else {
               pusch_ConfigCommon_v1310 = null;
            }

            // decode uplinkPowerControlCommon_v1310

            if (uplinkPowerControlCommon_v1310Present) {
               buffer.getContext().eventDispatcher.startElement("uplinkPowerControlCommon_v1310", -1);

               uplinkPowerControlCommon_v1310 = new UplinkPowerControlCommon_v1310();
               uplinkPowerControlCommon_v1310.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("uplinkPowerControlCommon_v1310", -1);
            }
            else {
               uplinkPowerControlCommon_v1310 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV6ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean highSpeedConfig_r14Present = buffer.decodeBit ("highSpeedConfig_r14Present");

            boolean prach_Config_v1430Present = buffer.decodeBit ("prach_Config_v1430Present");

            boolean pucch_ConfigCommon_v1430Present = buffer.decodeBit ("pucch_ConfigCommon_v1430Present");

            boolean tdd_Config_v1430Present = buffer.decodeBit ("tdd_Config_v1430Present");

            // decode highSpeedConfig_r14

            if (highSpeedConfig_r14Present) {
               buffer.getContext().eventDispatcher.startElement("highSpeedConfig_r14", -1);

               highSpeedConfig_r14 = new HighSpeedConfig_r14();
               highSpeedConfig_r14.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("highSpeedConfig_r14", -1);
            }
            else {
               highSpeedConfig_r14 = null;
            }

            // decode prach_Config_v1430

            if (prach_Config_v1430Present) {
               buffer.getContext().eventDispatcher.startElement("prach_Config_v1430", -1);

               prach_Config_v1430 = new PRACH_Config_v1430();
               prach_Config_v1430.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("prach_Config_v1430", -1);
            }
            else {
               prach_Config_v1430 = null;
            }

            // decode pucch_ConfigCommon_v1430

            if (pucch_ConfigCommon_v1430Present) {
               buffer.getContext().eventDispatcher.startElement("pucch_ConfigCommon_v1430", -1);

               pucch_ConfigCommon_v1430 = new PUCCH_ConfigCommon_v1430();
               pucch_ConfigCommon_v1430.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("pucch_ConfigCommon_v1430", -1);
            }
            else {
               pucch_ConfigCommon_v1430 = null;
            }

            // decode tdd_Config_v1430

            if (tdd_Config_v1430Present) {
               buffer.getContext().eventDispatcher.startElement("tdd_Config_v1430", -1);

               tdd_Config_v1430 = new TDD_Config_v1430();
               tdd_Config_v1430.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("tdd_Config_v1430", -1);
            }
            else {
               tdd_Config_v1430 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV7ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean tdd_Config_v1450Present = buffer.decodeBit ("tdd_Config_v1450Present");

            // decode tdd_Config_v1450

            if (tdd_Config_v1450Present) {
               buffer.getContext().eventDispatcher.startElement("tdd_Config_v1450", -1);

               tdd_Config_v1450 = new TDD_Config_v1450();
               tdd_Config_v1450.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("tdd_Config_v1450", -1);
            }
            else {
               tdd_Config_v1450 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV8ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean uplinkPowerControlCommon_v1530Present = buffer.decodeBit ("uplinkPowerControlCommon_v1530Present");

            boolean highSpeedConfig_v1530Present = buffer.decodeBit ("highSpeedConfig_v1530Present");

            // decode uplinkPowerControlCommon_v1530

            if (uplinkPowerControlCommon_v1530Present) {
               buffer.getContext().eventDispatcher.startElement("uplinkPowerControlCommon_v1530", -1);

               uplinkPowerControlCommon_v1530 = new UplinkPowerControlCommon_v1530();
               uplinkPowerControlCommon_v1530.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("uplinkPowerControlCommon_v1530", -1);
            }
            else {
               uplinkPowerControlCommon_v1530 = null;
            }

            // decode highSpeedConfig_v1530

            if (highSpeedConfig_v1530Present) {
               buffer.getContext().eventDispatcher.startElement("highSpeedConfig_v1530", -1);

               highSpeedConfig_v1530 = new HighSpeedConfig_v1530();
               highSpeedConfig_v1530.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("highSpeedConfig_v1530", -1);
            }
            else {
               highSpeedConfig_v1530 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (rach_ConfigCommon != null) rach_ConfigCommon.print (_sb, "rach_ConfigCommon", _level+1);
      if (prach_Config != null) prach_Config.print (_sb, "prach_Config", _level+1);
      if (pdsch_ConfigCommon != null) pdsch_ConfigCommon.print (_sb, "pdsch_ConfigCommon", _level+1);
      if (pusch_ConfigCommon != null) pusch_ConfigCommon.print (_sb, "pusch_ConfigCommon", _level+1);
      if (phich_Config != null) phich_Config.print (_sb, "phich_Config", _level+1);
      if (pucch_ConfigCommon != null) pucch_ConfigCommon.print (_sb, "pucch_ConfigCommon", _level+1);
      if (soundingRS_UL_ConfigCommon != null) soundingRS_UL_ConfigCommon.print (_sb, "soundingRS_UL_ConfigCommon", _level+1);
      if (uplinkPowerControlCommon != null) uplinkPowerControlCommon.print (_sb, "uplinkPowerControlCommon", _level+1);
      if (antennaInfoCommon != null) antennaInfoCommon.print (_sb, "antennaInfoCommon", _level+1);
      if (p_Max != null) p_Max.print (_sb, "p_Max", _level+1);
      if (tdd_Config != null) tdd_Config.print (_sb, "tdd_Config", _level+1);
      if (ul_CyclicPrefixLength != null) ul_CyclicPrefixLength.print (_sb, "ul_CyclicPrefixLength", _level+1);
      if (uplinkPowerControlCommon_v1020 != null) uplinkPowerControlCommon_v1020.print (_sb, "uplinkPowerControlCommon_v1020", _level+1);
      if (tdd_Config_v1130 != null) tdd_Config_v1130.print (_sb, "tdd_Config_v1130", _level+1);
      if (pusch_ConfigCommon_v1270 != null) pusch_ConfigCommon_v1270.print (_sb, "pusch_ConfigCommon_v1270", _level+1);
      if (prach_Config_v1310 != null) prach_Config_v1310.print (_sb, "prach_Config_v1310", _level+1);
      if (freqHoppingParameters_r13 != null) freqHoppingParameters_r13.print (_sb, "freqHoppingParameters_r13", _level+1);
      if (pdsch_ConfigCommon_v1310 != null) pdsch_ConfigCommon_v1310.print (_sb, "pdsch_ConfigCommon_v1310", _level+1);
      if (pucch_ConfigCommon_v1310 != null) pucch_ConfigCommon_v1310.print (_sb, "pucch_ConfigCommon_v1310", _level+1);
      if (pusch_ConfigCommon_v1310 != null) pusch_ConfigCommon_v1310.print (_sb, "pusch_ConfigCommon_v1310", _level+1);
      if (uplinkPowerControlCommon_v1310 != null) uplinkPowerControlCommon_v1310.print (_sb, "uplinkPowerControlCommon_v1310", _level+1);
      if (highSpeedConfig_r14 != null) highSpeedConfig_r14.print (_sb, "highSpeedConfig_r14", _level+1);
      if (prach_Config_v1430 != null) prach_Config_v1430.print (_sb, "prach_Config_v1430", _level+1);
      if (pucch_ConfigCommon_v1430 != null) pucch_ConfigCommon_v1430.print (_sb, "pucch_ConfigCommon_v1430", _level+1);
      if (tdd_Config_v1430 != null) tdd_Config_v1430.print (_sb, "tdd_Config_v1430", _level+1);
      if (tdd_Config_v1450 != null) tdd_Config_v1450.print (_sb, "tdd_Config_v1450", _level+1);
      if (uplinkPowerControlCommon_v1530 != null) uplinkPowerControlCommon_v1530.print (_sb, "uplinkPowerControlCommon_v1530", _level+1);
      if (highSpeedConfig_v1530 != null) highSpeedConfig_v1530.print (_sb, "highSpeedConfig_v1530", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
