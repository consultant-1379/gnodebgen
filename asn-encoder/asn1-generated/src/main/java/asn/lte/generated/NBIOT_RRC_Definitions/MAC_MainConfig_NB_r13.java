/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NBIOT_RRC_Definitions;

import com.objsys.asn1j.runtime.*;
import asn.lte.generated.EUTRA_RRC_Definitions.TimeAlignmentTimer;

public class MAC_MainConfig_NB_r13 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NBIOT_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "MAC-MainConfig-NB-r13";
   }

   public MAC_MainConfig_NB_r13_ul_SCH_Config_r13 ul_SCH_Config_r13;  // optional
   public DRX_Config_NB_r13 drx_Config_r13;  // optional
   public TimeAlignmentTimer timeAlignmentTimerDedicated_r13 = null;
   public MAC_MainConfig_NB_r13_logicalChannelSR_Config_r13 logicalChannelSR_Config_r13;  // optional
   public boolean mV2ExtPresent;
   public MAC_MainConfig_NB_r13_rai_Activation_r14 rai_Activation_r14 = null;  // optional
   public MAC_MainConfig_NB_r13_dataInactivityTimerConfig_r14 dataInactivityTimerConfig_r14;  // optional
   public boolean mV3ExtPresent;
   public MAC_MainConfig_NB_r13_drx_Cycle_v1430 drx_Cycle_v1430 = null;  // optional
   public boolean mV4ExtPresent;
   public MAC_MainConfig_NB_r13_ra_CFRA_Config_r14 ra_CFRA_Config_r14 = null;  // optional
   public Asn1OpenExt extElem1;

   public MAC_MainConfig_NB_r13 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MAC_MainConfig_NB_r13 (
      MAC_MainConfig_NB_r13_ul_SCH_Config_r13 ul_SCH_Config_r13_,
      DRX_Config_NB_r13 drx_Config_r13_,
      TimeAlignmentTimer timeAlignmentTimerDedicated_r13_,
      MAC_MainConfig_NB_r13_logicalChannelSR_Config_r13 logicalChannelSR_Config_r13_,
      MAC_MainConfig_NB_r13_rai_Activation_r14 rai_Activation_r14_,
      MAC_MainConfig_NB_r13_dataInactivityTimerConfig_r14 dataInactivityTimerConfig_r14_,
      MAC_MainConfig_NB_r13_drx_Cycle_v1430 drx_Cycle_v1430_,
      MAC_MainConfig_NB_r13_ra_CFRA_Config_r14 ra_CFRA_Config_r14_
   ) {
      super();
      ul_SCH_Config_r13 = ul_SCH_Config_r13_;
      drx_Config_r13 = drx_Config_r13_;
      timeAlignmentTimerDedicated_r13 = timeAlignmentTimerDedicated_r13_;
      logicalChannelSR_Config_r13 = logicalChannelSR_Config_r13_;
      rai_Activation_r14 = rai_Activation_r14_;
      dataInactivityTimerConfig_r14 = dataInactivityTimerConfig_r14_;
      drx_Cycle_v1430 = drx_Cycle_v1430_;
      ra_CFRA_Config_r14 = ra_CFRA_Config_r14_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public MAC_MainConfig_NB_r13 (
      TimeAlignmentTimer timeAlignmentTimerDedicated_r13_
   ) {
      super();
      timeAlignmentTimerDedicated_r13 = timeAlignmentTimerDedicated_r13_;
   }

   public void init () {
      ul_SCH_Config_r13 = null;
      drx_Config_r13 = null;
      timeAlignmentTimerDedicated_r13 = null;
      logicalChannelSR_Config_r13 = null;
      rai_Activation_r14 = null;
      dataInactivityTimerConfig_r14 = null;
      drx_Cycle_v1430 = null;
      ra_CFRA_Config_r14 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 9; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return ul_SCH_Config_r13;
         case 1: return drx_Config_r13;
         case 2: return timeAlignmentTimerDedicated_r13;
         case 3: return logicalChannelSR_Config_r13;
         case 4: return rai_Activation_r14;
         case 5: return dataInactivityTimerConfig_r14;
         case 6: return drx_Cycle_v1430;
         case 7: return ra_CFRA_Config_r14;
         case 8: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "ul-SCH-Config-r13";
         case 1: return "drx-Config-r13";
         case 2: return "timeAlignmentTimerDedicated-r13";
         case 3: return "logicalChannelSR-Config-r13";
         case 4: return "rai-Activation-r14";
         case 5: return "dataInactivityTimerConfig-r14";
         case 6: return "drx-Cycle-v1430";
         case 7: return "ra-CFRA-Config-r14";
         case 8: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean ul_SCH_Config_r13Present = buffer.decodeBit ("ul_SCH_Config_r13Present");
      boolean drx_Config_r13Present = buffer.decodeBit ("drx_Config_r13Present");
      boolean logicalChannelSR_Config_r13Present = buffer.decodeBit ("logicalChannelSR_Config_r13Present");

      // decode ul_SCH_Config_r13

      if (ul_SCH_Config_r13Present) {
         buffer.getContext().eventDispatcher.startElement("ul_SCH_Config_r13", -1);

         ul_SCH_Config_r13 = new MAC_MainConfig_NB_r13_ul_SCH_Config_r13();
         ul_SCH_Config_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ul_SCH_Config_r13", -1);
      }
      else {
         ul_SCH_Config_r13 = null;
      }

      // decode drx_Config_r13

      if (drx_Config_r13Present) {
         buffer.getContext().eventDispatcher.startElement("drx_Config_r13", -1);

         drx_Config_r13 = new DRX_Config_NB_r13();
         drx_Config_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("drx_Config_r13", -1);
      }
      else {
         drx_Config_r13 = null;
      }

      // decode timeAlignmentTimerDedicated_r13

      buffer.getContext().eventDispatcher.startElement("timeAlignmentTimerDedicated_r13", -1);

      {
         int tval = TimeAlignmentTimer.decodeEnumValue (buffer);
         timeAlignmentTimerDedicated_r13 = TimeAlignmentTimer.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("timeAlignmentTimerDedicated_r13", -1);

      // decode logicalChannelSR_Config_r13

      if (logicalChannelSR_Config_r13Present) {
         buffer.getContext().eventDispatcher.startElement("logicalChannelSR_Config_r13", -1);

         logicalChannelSR_Config_r13 = new MAC_MainConfig_NB_r13_logicalChannelSR_Config_r13();
         logicalChannelSR_Config_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("logicalChannelSR_Config_r13", -1);
      }
      else {
         logicalChannelSR_Config_r13 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV4ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean rai_Activation_r14Present = buffer.decodeBit ("rai_Activation_r14Present");

            boolean dataInactivityTimerConfig_r14Present = buffer.decodeBit ("dataInactivityTimerConfig_r14Present");

            // decode rai_Activation_r14

            if (rai_Activation_r14Present) {
               buffer.getContext().eventDispatcher.startElement("rai_Activation_r14", -1);

               int tval = MAC_MainConfig_NB_r13_rai_Activation_r14.decodeEnumValue (buffer);
               rai_Activation_r14 = MAC_MainConfig_NB_r13_rai_Activation_r14.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("rai_Activation_r14", -1);
            }
            else {
               rai_Activation_r14 = null;
            }

            // decode dataInactivityTimerConfig_r14

            if (dataInactivityTimerConfig_r14Present) {
               buffer.getContext().eventDispatcher.startElement("dataInactivityTimerConfig_r14", -1);

               dataInactivityTimerConfig_r14 = new MAC_MainConfig_NB_r13_dataInactivityTimerConfig_r14();
               dataInactivityTimerConfig_r14.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("dataInactivityTimerConfig_r14", -1);
            }
            else {
               dataInactivityTimerConfig_r14 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean drx_Cycle_v1430Present = buffer.decodeBit ("drx_Cycle_v1430Present");

            // decode drx_Cycle_v1430

            if (drx_Cycle_v1430Present) {
               buffer.getContext().eventDispatcher.startElement("drx_Cycle_v1430", -1);

               int tval = MAC_MainConfig_NB_r13_drx_Cycle_v1430.decodeEnumValue (buffer);
               drx_Cycle_v1430 = MAC_MainConfig_NB_r13_drx_Cycle_v1430.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("drx_Cycle_v1430", -1);
            }
            else {
               drx_Cycle_v1430 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV4ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean ra_CFRA_Config_r14Present = buffer.decodeBit ("ra_CFRA_Config_r14Present");

            // decode ra_CFRA_Config_r14

            if (ra_CFRA_Config_r14Present) {
               buffer.getContext().eventDispatcher.startElement("ra_CFRA_Config_r14", -1);

               int tval = MAC_MainConfig_NB_r13_ra_CFRA_Config_r14.decodeEnumValue (buffer);
               ra_CFRA_Config_r14 = MAC_MainConfig_NB_r13_ra_CFRA_Config_r14.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("ra_CFRA_Config_r14", -1);
            }
            else {
               ra_CFRA_Config_r14 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (ul_SCH_Config_r13 != null) ul_SCH_Config_r13.print (_sb, "ul_SCH_Config_r13", _level+1);
      if (drx_Config_r13 != null) drx_Config_r13.print (_sb, "drx_Config_r13", _level+1);
      if (timeAlignmentTimerDedicated_r13 != null) timeAlignmentTimerDedicated_r13.print (_sb, "timeAlignmentTimerDedicated_r13", _level+1);
      if (logicalChannelSR_Config_r13 != null) logicalChannelSR_Config_r13.print (_sb, "logicalChannelSR_Config_r13", _level+1);
      if (rai_Activation_r14 != null) rai_Activation_r14.print (_sb, "rai_Activation_r14", _level+1);
      if (dataInactivityTimerConfig_r14 != null) dataInactivityTimerConfig_r14.print (_sb, "dataInactivityTimerConfig_r14", _level+1);
      if (drx_Cycle_v1430 != null) drx_Cycle_v1430.print (_sb, "drx_Cycle_v1430", _level+1);
      if (ra_CFRA_Config_r14 != null) ra_CFRA_Config_r14.print (_sb, "ra_CFRA_Config_r14", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
