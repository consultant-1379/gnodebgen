/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class CGI_InfoEUTRA extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CGI-InfoEUTRA";
   }

   public CGI_InfoEUTRA_cgi_info_EPC cgi_info_EPC;  // optional
   public CGI_InfoEUTRA_cgi_info_5GC cgi_info_5GC;  // optional
   public FreqBandIndicatorEUTRA freqBandIndicator;
   public MultiBandInfoListEUTRA multiBandInfoList;  // optional
   public CGI_InfoEUTRA_freqBandIndicatorPriority freqBandIndicatorPriority = null;  // optional

   public CGI_InfoEUTRA () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CGI_InfoEUTRA (
      CGI_InfoEUTRA_cgi_info_EPC cgi_info_EPC_,
      CGI_InfoEUTRA_cgi_info_5GC cgi_info_5GC_,
      FreqBandIndicatorEUTRA freqBandIndicator_,
      MultiBandInfoListEUTRA multiBandInfoList_,
      CGI_InfoEUTRA_freqBandIndicatorPriority freqBandIndicatorPriority_
   ) {
      super();
      cgi_info_EPC = cgi_info_EPC_;
      cgi_info_5GC = cgi_info_5GC_;
      freqBandIndicator = freqBandIndicator_;
      multiBandInfoList = multiBandInfoList_;
      freqBandIndicatorPriority = freqBandIndicatorPriority_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public CGI_InfoEUTRA (
      FreqBandIndicatorEUTRA freqBandIndicator_
   ) {
      super();
      freqBandIndicator = freqBandIndicator_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public CGI_InfoEUTRA (CGI_InfoEUTRA_cgi_info_EPC cgi_info_EPC_,
      CGI_InfoEUTRA_cgi_info_5GC cgi_info_5GC_,
      long freqBandIndicator_,
      MultiBandInfoListEUTRA multiBandInfoList_,
      CGI_InfoEUTRA_freqBandIndicatorPriority freqBandIndicatorPriority_
   ) {
      super();
      cgi_info_EPC = cgi_info_EPC_;
      cgi_info_5GC = cgi_info_5GC_;
      freqBandIndicator = new FreqBandIndicatorEUTRA (freqBandIndicator_);
      multiBandInfoList = multiBandInfoList_;
      freqBandIndicatorPriority = freqBandIndicatorPriority_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public CGI_InfoEUTRA (
      long freqBandIndicator_
   ) {
      super();
      freqBandIndicator = new FreqBandIndicatorEUTRA (freqBandIndicator_);
   }

   public void init () {
      cgi_info_EPC = null;
      cgi_info_5GC = null;
      freqBandIndicator = null;
      multiBandInfoList = null;
      freqBandIndicatorPriority = null;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return cgi_info_EPC;
         case 1: return cgi_info_5GC;
         case 2: return freqBandIndicator;
         case 3: return multiBandInfoList;
         case 4: return freqBandIndicatorPriority;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "cgi-info-EPC";
         case 1: return "cgi-info-5GC";
         case 2: return "freqBandIndicator";
         case 3: return "multiBandInfoList";
         case 4: return "freqBandIndicatorPriority";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean cgi_info_EPCPresent = buffer.decodeBit ("cgi_info_EPCPresent");
      boolean cgi_info_5GCPresent = buffer.decodeBit ("cgi_info_5GCPresent");
      boolean multiBandInfoListPresent = buffer.decodeBit ("multiBandInfoListPresent");
      boolean freqBandIndicatorPriorityPresent = buffer.decodeBit ("freqBandIndicatorPriorityPresent");

      // decode cgi_info_EPC

      if (cgi_info_EPCPresent) {
         buffer.getContext().eventDispatcher.startElement("cgi_info_EPC", -1);

         cgi_info_EPC = new CGI_InfoEUTRA_cgi_info_EPC();
         cgi_info_EPC.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("cgi_info_EPC", -1);
      }
      else {
         cgi_info_EPC = null;
      }

      // decode cgi_info_5GC

      if (cgi_info_5GCPresent) {
         buffer.getContext().eventDispatcher.startElement("cgi_info_5GC", -1);

         cgi_info_5GC = new CGI_InfoEUTRA_cgi_info_5GC();
         cgi_info_5GC.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("cgi_info_5GC", -1);
      }
      else {
         cgi_info_5GC = null;
      }

      // decode freqBandIndicator

      buffer.getContext().eventDispatcher.startElement("freqBandIndicator", -1);

      freqBandIndicator = new FreqBandIndicatorEUTRA();
      freqBandIndicator.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("freqBandIndicator", -1);

      // decode multiBandInfoList

      if (multiBandInfoListPresent) {
         buffer.getContext().eventDispatcher.startElement("multiBandInfoList", -1);

         multiBandInfoList = new MultiBandInfoListEUTRA();
         multiBandInfoList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("multiBandInfoList", -1);
      }
      else {
         multiBandInfoList = null;
      }

      // decode freqBandIndicatorPriority

      if (freqBandIndicatorPriorityPresent) {
         buffer.getContext().eventDispatcher.startElement("freqBandIndicatorPriority", -1);

         int tval = CGI_InfoEUTRA_freqBandIndicatorPriority.decodeEnumValue (buffer);
         freqBandIndicatorPriority = CGI_InfoEUTRA_freqBandIndicatorPriority.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("freqBandIndicatorPriority", -1);
      }
      else {
         freqBandIndicatorPriority = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (cgi_info_EPC != null) cgi_info_EPC.print (_sb, "cgi_info_EPC", _level+1);
      if (cgi_info_5GC != null) cgi_info_5GC.print (_sb, "cgi_info_5GC", _level+1);
      if (freqBandIndicator != null) freqBandIndicator.print (_sb, "freqBandIndicator", _level+1);
      if (multiBandInfoList != null) multiBandInfoList.print (_sb, "multiBandInfoList", _level+1);
      if (freqBandIndicatorPriority != null) freqBandIndicatorPriority.print (_sb, "freqBandIndicatorPriority", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
