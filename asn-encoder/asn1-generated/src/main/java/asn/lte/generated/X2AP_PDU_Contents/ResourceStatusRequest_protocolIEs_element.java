/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.X2AP_PDU_Contents;

import com.objsys.asn1j.runtime.*;
import asn.lte.generated.X2AP_CommonDataTypes.ProtocolIE_ID;
import asn.lte.generated.X2AP_CommonDataTypes.Criticality;

public class ResourceStatusRequest_protocolIEs_element extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_X2AP_PDU_ContentsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public ProtocolIE_ID id;
   public Criticality criticality = null;

   /**
    * id: id-ENB1-Measurement-ID
    * criticality: Criticality.reject
    * presence: Presence.mandatory
    * ASN.1 type: Measurement-ID
    * Java type: Measurement_ID
    *
    * id: id-ENB2-Measurement-ID
    * criticality: Criticality.ignore
    * presence: Presence.conditional
    * ASN.1 type: Measurement-ID
    * Java type: Measurement_ID
    *
    * id: id-Registration-Request
    * criticality: Criticality.reject
    * presence: Presence.mandatory
    * ASN.1 type: Registration-Request
    * Java type: Registration_Request
    *
    * id: id-ReportCharacteristics
    * criticality: Criticality.reject
    * presence: Presence.optional
    * ASN.1 type: ReportCharacteristics
    * Java type: ReportCharacteristics
    *
    * id: id-CellToReport
    * criticality: Criticality.ignore
    * presence: Presence.mandatory
    * ASN.1 type: CellToReport-List
    * Java type: CellToReport_List
    *
    * id: id-ReportingPeriodicity
    * criticality: Criticality.ignore
    * presence: Presence.optional
    * ASN.1 type: ReportingPeriodicity
    * Java type: ReportingPeriodicity
    *
    * id: id-PartialSuccessIndicator
    * criticality: Criticality.ignore
    * presence: Presence.optional
    * ASN.1 type: PartialSuccessIndicator
    * Java type: PartialSuccessIndicator
    *
    * id: id-ReportingPeriodicityRSRPMR
    * criticality: Criticality.ignore
    * presence: Presence.optional
    * ASN.1 type: ReportingPeriodicityRSRPMR
    * Java type: ReportingPeriodicityRSRPMR
    *
    * id: id-ReportingPeriodicityCSIR
    * criticality: Criticality.ignore
    * presence: Presence.optional
    * ASN.1 type: ReportingPeriodicityCSIR
    * Java type: ReportingPeriodicityCSIR
    */
   public Asn1Type value;

   public ResourceStatusRequest_protocolIEs_element () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ResourceStatusRequest_protocolIEs_element (
      ProtocolIE_ID id_,
      Criticality criticality_,
      Asn1Type value_
   ) {
      super();
      id = id_;
      criticality = criticality_;
      value = value_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public ResourceStatusRequest_protocolIEs_element (long id_,
      Criticality criticality_,
      Asn1Type value_
   ) {
      super();
      id = new ProtocolIE_ID (id_);
      criticality = criticality_;
      value = value_;
   }

   public void init () {
      id = null;
      criticality = null;
      value = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return id;
         case 1: return criticality;
         case 2: return value;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "id";
         case 1: return "criticality";
         case 2: return "value";
         default: return null;
      }
   }


   /**
    * Assign fields according to information object having key id-ENB1-Measurement-ID
    */
   public void setUsing_id_ENB1_Measurement_ID(asn.lte.generated.X2AP_IEs.Measurement_ID value) {
      this.id = new asn.lte.generated.X2AP_CommonDataTypes.ProtocolIE_ID(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_ENB1_Measurement_ID);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key id-ENB2-Measurement-ID
    */
   public void setUsing_id_ENB2_Measurement_ID(asn.lte.generated.X2AP_IEs.Measurement_ID value) {
      this.id = new asn.lte.generated.X2AP_CommonDataTypes.ProtocolIE_ID(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_ENB2_Measurement_ID);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key id-Registration-Request
    */
   public void setUsing_id_Registration_Request(asn.lte.generated.X2AP_IEs.Registration_Request value) {
      this.id = new asn.lte.generated.X2AP_CommonDataTypes.ProtocolIE_ID(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_Registration_Request);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key id-ReportCharacteristics
    */
   public void setUsing_id_ReportCharacteristics(asn.lte.generated.X2AP_IEs.ReportCharacteristics value) {
      this.id = new asn.lte.generated.X2AP_CommonDataTypes.ProtocolIE_ID(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_ReportCharacteristics);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key id-CellToReport
    */
   public void setUsing_id_CellToReport(CellToReport_List value) {
      this.id = new asn.lte.generated.X2AP_CommonDataTypes.ProtocolIE_ID(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_CellToReport);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key id-ReportingPeriodicity
    */
   public void setUsing_id_ReportingPeriodicity(ReportingPeriodicity value) {
      this.id = new asn.lte.generated.X2AP_CommonDataTypes.ProtocolIE_ID(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_ReportingPeriodicity);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key id-PartialSuccessIndicator
    */
   public void setUsing_id_PartialSuccessIndicator(PartialSuccessIndicator value) {
      this.id = new asn.lte.generated.X2AP_CommonDataTypes.ProtocolIE_ID(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_PartialSuccessIndicator);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key id-ReportingPeriodicityRSRPMR
    */
   public void setUsing_id_ReportingPeriodicityRSRPMR(asn.lte.generated.X2AP_IEs.ReportingPeriodicityRSRPMR value) {
      this.id = new asn.lte.generated.X2AP_CommonDataTypes.ProtocolIE_ID(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_ReportingPeriodicityRSRPMR);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key id-ReportingPeriodicityCSIR
    */
   public void setUsing_id_ReportingPeriodicityCSIR(asn.lte.generated.X2AP_IEs.ReportingPeriodicityCSIR value) {
      this.id = new asn.lte.generated.X2AP_CommonDataTypes.ProtocolIE_ID(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_ReportingPeriodicityCSIR);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Get value of value with type set according to information object having key id-ENB1-Measurement-ID
    */
   public asn.lte.generated.X2AP_IEs.Measurement_ID getValueFor_id_ENB1_Measurement_ID() {
      return (asn.lte.generated.X2AP_IEs.Measurement_ID) this.value;
   }

   /**
    * Get value of value with type set according to information object having key id-ENB2-Measurement-ID
    */
   public asn.lte.generated.X2AP_IEs.Measurement_ID getValueFor_id_ENB2_Measurement_ID() {
      return (asn.lte.generated.X2AP_IEs.Measurement_ID) this.value;
   }

   /**
    * Get value of value with type set according to information object having key id-Registration-Request
    */
   public asn.lte.generated.X2AP_IEs.Registration_Request getValueFor_id_Registration_Request() {
      return (asn.lte.generated.X2AP_IEs.Registration_Request) this.value;
   }

   /**
    * Get value of value with type set according to information object having key id-ReportCharacteristics
    */
   public asn.lte.generated.X2AP_IEs.ReportCharacteristics getValueFor_id_ReportCharacteristics() {
      return (asn.lte.generated.X2AP_IEs.ReportCharacteristics) this.value;
   }

   /**
    * Get value of value with type set according to information object having key id-CellToReport
    */
   public CellToReport_List getValueFor_id_CellToReport() {
      return (CellToReport_List) this.value;
   }

   /**
    * Get value of value with type set according to information object having key id-ReportingPeriodicity
    */
   public ReportingPeriodicity getValueFor_id_ReportingPeriodicity() {
      return (ReportingPeriodicity) this.value;
   }

   /**
    * Get value of value with type set according to information object having key id-PartialSuccessIndicator
    */
   public PartialSuccessIndicator getValueFor_id_PartialSuccessIndicator() {
      return (PartialSuccessIndicator) this.value;
   }

   /**
    * Get value of value with type set according to information object having key id-ReportingPeriodicityRSRPMR
    */
   public asn.lte.generated.X2AP_IEs.ReportingPeriodicityRSRPMR getValueFor_id_ReportingPeriodicityRSRPMR() {
      return (asn.lte.generated.X2AP_IEs.ReportingPeriodicityRSRPMR) this.value;
   }

   /**
    * Get value of value with type set according to information object having key id-ReportingPeriodicityCSIR
    */
   public asn.lte.generated.X2AP_IEs.ReportingPeriodicityCSIR getValueFor_id_ReportingPeriodicityCSIR() {
      return (asn.lte.generated.X2AP_IEs.ReportingPeriodicityCSIR) this.value;
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode id

      buffer.getContext().eventDispatcher.startElement("id", -1);

      id = new ProtocolIE_ID();
      id.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("id", -1);

      // decode criticality

      buffer.getContext().eventDispatcher.startElement("criticality", -1);

      {
         int tval = Criticality.decodeEnumValue (buffer);
         criticality = Criticality.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("criticality", -1);

      // decode value

      buffer.getContext().eventDispatcher.startElement("value", -1);

      value = new Asn1OpenType();
      value.decode (buffer);

      buffer.invokeCharacters(value.toString());
      buffer.getContext().eventDispatcher.endElement("value", -1);

      checkTC (true, buffer.getLazyOpenTypeDecode() ? 0 : 2, buffer.isAligned(), buffer.getContext().eventDispatcher);
   }

   public void checkTC(boolean decode, int decodeOpenTypeFlag, boolean aligned, Asn1NamedEventDispatcher eventDispatcher)
      throws Asn1Exception
   {
      /* check id */
      asn.lte.generated.X2AP_Containers.X2AP_PROTOCOL_IES _index = null;
      for(int i=0; i < _X2AP_PDU_ContentsValues.ResourceStatusRequest_IEs.length; i++) {
         if(_X2AP_PDU_ContentsValues.ResourceStatusRequest_IEs[i].id.equals(id)) {
            _index = _X2AP_PDU_ContentsValues.ResourceStatusRequest_IEs[i];
            break;
         }
      }
      if (null == _index) {
         return;
      }

      /* check value */
      if( decode && decodeOpenTypeFlag >=1 ) {
         try {
            Asn1PerDecodeBuffer buffer = new Asn1PerDecodeBuffer(((Asn1OpenType)value).value, aligned);
            buffer.setLazyOpenTypeDecode(decodeOpenTypeFlag == 1);
            if (eventDispatcher != null)buffer.getContext().eventDispatcher = eventDispatcher;
            buffer.getContext().eventDispatcher.startElement("value", -1);

            String className = _index.Value.actualType.getName();
            if (className.lastIndexOf('.') > 0) {
               className = className.substring (className.lastIndexOf (".")+1);
            }
            buffer.getContext().eventDispatcher.startElement(className, -1);

            value = Asn1Type.decode(buffer, _index.Value);

            buffer.getContext().eventDispatcher.endElement(className, -1);

            buffer.getContext().eventDispatcher.endElement("value", -1);
         }
         catch (java.io.IOException e) {
            throw new Asn1Exception(e.toString());
         }
      }

      /* use -strict option to validate the "criticality" element */
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (id.value == 39) {
         indent (_sb, _level+1);
         _sb.append("id = id-ENB1-Measurement-ID\n");
      }
      else if (id.value == 40) {
         indent (_sb, _level+1);
         _sb.append("id = id-ENB2-Measurement-ID\n");
      }
      else if (id.value == 28) {
         indent (_sb, _level+1);
         _sb.append("id = id-Registration-Request\n");
      }
      else if (id.value == 38) {
         indent (_sb, _level+1);
         _sb.append("id = id-ReportCharacteristics\n");
      }
      else if (id.value == 29) {
         indent (_sb, _level+1);
         _sb.append("id = id-CellToReport\n");
      }
      else if (id.value == 30) {
         indent (_sb, _level+1);
         _sb.append("id = id-ReportingPeriodicity\n");
      }
      else if (id.value == 64) {
         indent (_sb, _level+1);
         _sb.append("id = id-PartialSuccessIndicator\n");
      }
      else if (id.value == 109) {
         indent (_sb, _level+1);
         _sb.append("id = id-ReportingPeriodicityRSRPMR\n");
      }
      else if (id.value == 145) {
         indent (_sb, _level+1);
         _sb.append("id = id-ReportingPeriodicityCSIR\n");
      }

      if (criticality != null) {
         criticality.print (_sb, "criticality", _level+1);
      }
      if (value != null) {
         String tmpName = value.getAsn1TypeName();
         if (tmpName != null && tmpName != "")  {
            tmpName = "value" + " (" + tmpName + ")";
         }
         else  {
            tmpName = "value";
         }
         value.print (_sb, tmpName, _level+1);
      }
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
