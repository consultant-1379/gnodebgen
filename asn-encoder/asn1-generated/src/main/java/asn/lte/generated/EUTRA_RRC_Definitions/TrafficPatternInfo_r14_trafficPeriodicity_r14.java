/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class TrafficPatternInfo_r14_trafficPeriodicity_r14 extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ENUMERATED";
   }

   // Integer constants for switch-case
   public static final int _SF20 = 0;
   public static final int _SF50 = 1;
   public static final int _SF100 = 2;
   public static final int _SF200 = 3;
   public static final int _SF300 = 4;
   public static final int _SF400 = 5;
   public static final int _SF500 = 6;
   public static final int _SF600 = 7;
   public static final int _SF700 = 8;
   public static final int _SF800 = 9;
   public static final int _SF900 = 10;
   public static final int _SF1000 = 11;

   // Singleton instances of TrafficPatternInfo_r14_trafficPeriodicity_r14
   protected static final TrafficPatternInfo_r14_trafficPeriodicity_r14 _sf20 = new TrafficPatternInfo_r14_trafficPeriodicity_r14(0);
   protected static final TrafficPatternInfo_r14_trafficPeriodicity_r14 _sf50 = new TrafficPatternInfo_r14_trafficPeriodicity_r14(1);
   protected static final TrafficPatternInfo_r14_trafficPeriodicity_r14 _sf100 = new TrafficPatternInfo_r14_trafficPeriodicity_r14(2);
   protected static final TrafficPatternInfo_r14_trafficPeriodicity_r14 _sf200 = new TrafficPatternInfo_r14_trafficPeriodicity_r14(3);
   protected static final TrafficPatternInfo_r14_trafficPeriodicity_r14 _sf300 = new TrafficPatternInfo_r14_trafficPeriodicity_r14(4);
   protected static final TrafficPatternInfo_r14_trafficPeriodicity_r14 _sf400 = new TrafficPatternInfo_r14_trafficPeriodicity_r14(5);
   protected static final TrafficPatternInfo_r14_trafficPeriodicity_r14 _sf500 = new TrafficPatternInfo_r14_trafficPeriodicity_r14(6);
   protected static final TrafficPatternInfo_r14_trafficPeriodicity_r14 _sf600 = new TrafficPatternInfo_r14_trafficPeriodicity_r14(7);
   protected static final TrafficPatternInfo_r14_trafficPeriodicity_r14 _sf700 = new TrafficPatternInfo_r14_trafficPeriodicity_r14(8);
   protected static final TrafficPatternInfo_r14_trafficPeriodicity_r14 _sf800 = new TrafficPatternInfo_r14_trafficPeriodicity_r14(9);
   protected static final TrafficPatternInfo_r14_trafficPeriodicity_r14 _sf900 = new TrafficPatternInfo_r14_trafficPeriodicity_r14(10);
   protected static final TrafficPatternInfo_r14_trafficPeriodicity_r14 _sf1000 = new TrafficPatternInfo_r14_trafficPeriodicity_r14(11);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    *   7
    *   8
    *   9
    *   10
    *   11
    */
   protected TrafficPatternInfo_r14_trafficPeriodicity_r14 (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for sf20.
    */
   public static TrafficPatternInfo_r14_trafficPeriodicity_r14 sf20() {
      return _sf20;
   }

   /**
    * Singleton accessor method for sf50.
    */
   public static TrafficPatternInfo_r14_trafficPeriodicity_r14 sf50() {
      return _sf50;
   }

   /**
    * Singleton accessor method for sf100.
    */
   public static TrafficPatternInfo_r14_trafficPeriodicity_r14 sf100() {
      return _sf100;
   }

   /**
    * Singleton accessor method for sf200.
    */
   public static TrafficPatternInfo_r14_trafficPeriodicity_r14 sf200() {
      return _sf200;
   }

   /**
    * Singleton accessor method for sf300.
    */
   public static TrafficPatternInfo_r14_trafficPeriodicity_r14 sf300() {
      return _sf300;
   }

   /**
    * Singleton accessor method for sf400.
    */
   public static TrafficPatternInfo_r14_trafficPeriodicity_r14 sf400() {
      return _sf400;
   }

   /**
    * Singleton accessor method for sf500.
    */
   public static TrafficPatternInfo_r14_trafficPeriodicity_r14 sf500() {
      return _sf500;
   }

   /**
    * Singleton accessor method for sf600.
    */
   public static TrafficPatternInfo_r14_trafficPeriodicity_r14 sf600() {
      return _sf600;
   }

   /**
    * Singleton accessor method for sf700.
    */
   public static TrafficPatternInfo_r14_trafficPeriodicity_r14 sf700() {
      return _sf700;
   }

   /**
    * Singleton accessor method for sf800.
    */
   public static TrafficPatternInfo_r14_trafficPeriodicity_r14 sf800() {
      return _sf800;
   }

   /**
    * Singleton accessor method for sf900.
    */
   public static TrafficPatternInfo_r14_trafficPeriodicity_r14 sf900() {
      return _sf900;
   }

   /**
    * Singleton accessor method for sf1000.
    */
   public static TrafficPatternInfo_r14_trafficPeriodicity_r14 sf1000() {
      return _sf1000;
   }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return TrafficPatternInfo_r14_trafficPeriodicity_r14.valueOf( TrafficPatternInfo_r14_trafficPeriodicity_r14.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static TrafficPatternInfo_r14_trafficPeriodicity_r14 valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 0: return sf20();
         case 1: return sf50();
         case 2: return sf100();
         case 3: return sf200();
         case 4: return sf300();
         case 5: return sf400();
         case 6: return sf500();
         case 7: return sf600();
         case 8: return sf700();
         case 9: return sf800();
         case 10: return sf900();
         case 11: return sf1000();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      ui = (int) buffer.decodeConsWholeNumber (12);

      switch (ui) {
         case 0: ret =  0; break;
         case 1: ret =  1; break;
         case 2: ret =  2; break;
         case 3: ret =  3; break;
         case 4: ret =  4; break;
         case 5: ret =  5; break;
         case 6: ret =  6; break;
         case 7: ret =  7; break;
         case 8: ret =  8; break;
         case 9: ret =  9; break;
         case 10: ret =  10; break;
         case 11: ret =  11; break;
         default: throw new Asn1InvalidEnumException (ui);
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (TrafficPatternInfo_r14_trafficPeriodicity_r14.valueOf(ret).toString());

      return ret;
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("sf20");
         case 1: return ("sf50");
         case 2: return ("sf100");
         case 3: return ("sf200");
         case 4: return ("sf300");
         case 5: return ("sf400");
         case 6: return ("sf500");
         case 7: return ("sf600");
         case 8: return ("sf700");
         case 9: return ("sf800");
         case 10: return ("sf900");
         case 11: return ("sf1000");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
