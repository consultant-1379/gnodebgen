/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class PUSCH_ServingCellConfig extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "PUSCH-ServingCellConfig";
   }

   public PUSCH_ServingCellConfig_codeBlockGroupTransmission codeBlockGroupTransmission;  // optional
   public PUSCH_ServingCellConfig_rateMatching rateMatching = null;  // optional
   public PUSCH_ServingCellConfig_xOverhead xOverhead = null;  // optional
   public boolean mV2ExtPresent;
   public Asn1Integer maxMIMO_Layers;  // optional
   public Asn1Boolean processingType2Enabled;  // optional
   public boolean mV3ExtPresent;
   public PUSCH_ServingCellConfig_maxMIMO_LayersDCI_0_2_r16 maxMIMO_LayersDCI_0_2_r16;  // optional
   public Asn1OpenExt extElem1;

   public PUSCH_ServingCellConfig () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public PUSCH_ServingCellConfig (
      PUSCH_ServingCellConfig_codeBlockGroupTransmission codeBlockGroupTransmission_,
      PUSCH_ServingCellConfig_rateMatching rateMatching_,
      PUSCH_ServingCellConfig_xOverhead xOverhead_,
      Asn1Integer maxMIMO_Layers_,
      Asn1Boolean processingType2Enabled_,
      PUSCH_ServingCellConfig_maxMIMO_LayersDCI_0_2_r16 maxMIMO_LayersDCI_0_2_r16_
   ) {
      super();
      codeBlockGroupTransmission = codeBlockGroupTransmission_;
      rateMatching = rateMatching_;
      xOverhead = xOverhead_;
      maxMIMO_Layers = maxMIMO_Layers_;
      processingType2Enabled = processingType2Enabled_;
      maxMIMO_LayersDCI_0_2_r16 = maxMIMO_LayersDCI_0_2_r16_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public PUSCH_ServingCellConfig (PUSCH_ServingCellConfig_codeBlockGroupTransmission codeBlockGroupTransmission_,
      PUSCH_ServingCellConfig_rateMatching rateMatching_,
      PUSCH_ServingCellConfig_xOverhead xOverhead_,
      long maxMIMO_Layers_,
      boolean processingType2Enabled_,
      PUSCH_ServingCellConfig_maxMIMO_LayersDCI_0_2_r16 maxMIMO_LayersDCI_0_2_r16_
   ) {
      super();
      codeBlockGroupTransmission = codeBlockGroupTransmission_;
      rateMatching = rateMatching_;
      xOverhead = xOverhead_;
      maxMIMO_Layers = new Asn1Integer (maxMIMO_Layers_);
      processingType2Enabled = new Asn1Boolean (processingType2Enabled_);
      maxMIMO_LayersDCI_0_2_r16 = maxMIMO_LayersDCI_0_2_r16_;
   }

   public void init () {
      codeBlockGroupTransmission = null;
      rateMatching = null;
      xOverhead = null;
      maxMIMO_Layers = null;
      processingType2Enabled = null;
      maxMIMO_LayersDCI_0_2_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return codeBlockGroupTransmission;
         case 1: return rateMatching;
         case 2: return xOverhead;
         case 3: return maxMIMO_Layers;
         case 4: return processingType2Enabled;
         case 5: return maxMIMO_LayersDCI_0_2_r16;
         case 6: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "codeBlockGroupTransmission";
         case 1: return "rateMatching";
         case 2: return "xOverhead";
         case 3: return "maxMIMO-Layers";
         case 4: return "processingType2Enabled";
         case 5: return "maxMIMO-LayersDCI-0-2-r16";
         case 6: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean codeBlockGroupTransmissionPresent = buffer.decodeBit ("codeBlockGroupTransmissionPresent");
      boolean rateMatchingPresent = buffer.decodeBit ("rateMatchingPresent");
      boolean xOverheadPresent = buffer.decodeBit ("xOverheadPresent");

      // decode codeBlockGroupTransmission

      if (codeBlockGroupTransmissionPresent) {
         buffer.getContext().eventDispatcher.startElement("codeBlockGroupTransmission", -1);

         codeBlockGroupTransmission = new PUSCH_ServingCellConfig_codeBlockGroupTransmission();
         codeBlockGroupTransmission.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("codeBlockGroupTransmission", -1);
      }
      else {
         codeBlockGroupTransmission = null;
      }

      // decode rateMatching

      if (rateMatchingPresent) {
         buffer.getContext().eventDispatcher.startElement("rateMatching", -1);

         int tval = PUSCH_ServingCellConfig_rateMatching.decodeEnumValue (buffer);
         rateMatching = PUSCH_ServingCellConfig_rateMatching.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("rateMatching", -1);
      }
      else {
         rateMatching = null;
      }

      // decode xOverhead

      if (xOverheadPresent) {
         buffer.getContext().eventDispatcher.startElement("xOverhead", -1);

         int tval = PUSCH_ServingCellConfig_xOverhead.decodeEnumValue (buffer);
         xOverhead = PUSCH_ServingCellConfig_xOverhead.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("xOverhead", -1);
      }
      else {
         xOverhead = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean maxMIMO_LayersPresent = buffer.decodeBit ("maxMIMO_LayersPresent");

            boolean processingType2EnabledPresent = buffer.decodeBit ("processingType2EnabledPresent");

            // decode maxMIMO_Layers

            if (maxMIMO_LayersPresent) {
               buffer.getContext().eventDispatcher.startElement("maxMIMO_Layers", -1);

               maxMIMO_Layers = new Asn1Integer();
               maxMIMO_Layers.decode (buffer, 1, 4);

               buffer.invokeCharacters(maxMIMO_Layers.toString());
               buffer.getContext().eventDispatcher.endElement("maxMIMO_Layers", -1);
            }
            else {
               maxMIMO_Layers = null;
            }

            // decode processingType2Enabled

            if (processingType2EnabledPresent) {
               buffer.getContext().eventDispatcher.startElement("processingType2Enabled", -1);

               processingType2Enabled = new Asn1Boolean();
               processingType2Enabled.decode (buffer);

               buffer.invokeCharacters(processingType2Enabled.toString());
               buffer.getContext().eventDispatcher.endElement("processingType2Enabled", -1);
            }
            else {
               processingType2Enabled = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean maxMIMO_LayersDCI_0_2_r16Present = buffer.decodeBit ("maxMIMO_LayersDCI_0_2_r16Present");

            // decode maxMIMO_LayersDCI_0_2_r16

            if (maxMIMO_LayersDCI_0_2_r16Present) {
               buffer.getContext().eventDispatcher.startElement("maxMIMO_LayersDCI_0_2_r16", -1);

               maxMIMO_LayersDCI_0_2_r16 = new PUSCH_ServingCellConfig_maxMIMO_LayersDCI_0_2_r16();
               maxMIMO_LayersDCI_0_2_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("maxMIMO_LayersDCI_0_2_r16", -1);
            }
            else {
               maxMIMO_LayersDCI_0_2_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (codeBlockGroupTransmission != null) codeBlockGroupTransmission.print (_sb, "codeBlockGroupTransmission", _level+1);
      if (rateMatching != null) rateMatching.print (_sb, "rateMatching", _level+1);
      if (xOverhead != null) xOverhead.print (_sb, "xOverhead", _level+1);
      if (maxMIMO_Layers != null) maxMIMO_Layers.print (_sb, "maxMIMO_Layers", _level+1);
      if (processingType2Enabled != null) processingType2Enabled.print (_sb, "processingType2Enabled", _level+1);
      if (maxMIMO_LayersDCI_0_2_r16 != null) maxMIMO_LayersDCI_0_2_r16.print (_sb, "maxMIMO_LayersDCI_0_2_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
