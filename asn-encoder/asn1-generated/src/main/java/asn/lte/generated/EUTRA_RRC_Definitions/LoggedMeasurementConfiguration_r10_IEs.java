/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class LoggedMeasurementConfiguration_r10_IEs extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "LoggedMeasurementConfiguration-r10-IEs";
   }

   public TraceReference_r10 traceReference_r10;
   public Asn1OctetString traceRecordingSessionRef_r10;
   public Asn1OctetString tce_Id_r10;
   public AbsoluteTimeInfo_r10 absoluteTimeInfo_r10;
   public AreaConfiguration_r10 areaConfiguration_r10;  // optional
   public LoggingDuration_r10 loggingDuration_r10 = null;
   public LoggingInterval_r10 loggingInterval_r10 = null;
   public LoggedMeasurementConfiguration_v1080_IEs nonCriticalExtension;  // optional

   public LoggedMeasurementConfiguration_r10_IEs () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public LoggedMeasurementConfiguration_r10_IEs (
      TraceReference_r10 traceReference_r10_,
      Asn1OctetString traceRecordingSessionRef_r10_,
      Asn1OctetString tce_Id_r10_,
      AbsoluteTimeInfo_r10 absoluteTimeInfo_r10_,
      AreaConfiguration_r10 areaConfiguration_r10_,
      LoggingDuration_r10 loggingDuration_r10_,
      LoggingInterval_r10 loggingInterval_r10_,
      LoggedMeasurementConfiguration_v1080_IEs nonCriticalExtension_
   ) {
      super();
      traceReference_r10 = traceReference_r10_;
      traceRecordingSessionRef_r10 = traceRecordingSessionRef_r10_;
      tce_Id_r10 = tce_Id_r10_;
      absoluteTimeInfo_r10 = absoluteTimeInfo_r10_;
      areaConfiguration_r10 = areaConfiguration_r10_;
      loggingDuration_r10 = loggingDuration_r10_;
      loggingInterval_r10 = loggingInterval_r10_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public LoggedMeasurementConfiguration_r10_IEs (
      TraceReference_r10 traceReference_r10_,
      Asn1OctetString traceRecordingSessionRef_r10_,
      Asn1OctetString tce_Id_r10_,
      AbsoluteTimeInfo_r10 absoluteTimeInfo_r10_,
      LoggingDuration_r10 loggingDuration_r10_,
      LoggingInterval_r10 loggingInterval_r10_
   ) {
      super();
      traceReference_r10 = traceReference_r10_;
      traceRecordingSessionRef_r10 = traceRecordingSessionRef_r10_;
      tce_Id_r10 = tce_Id_r10_;
      absoluteTimeInfo_r10 = absoluteTimeInfo_r10_;
      loggingDuration_r10 = loggingDuration_r10_;
      loggingInterval_r10 = loggingInterval_r10_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public LoggedMeasurementConfiguration_r10_IEs (TraceReference_r10 traceReference_r10_,
      byte[] traceRecordingSessionRef_r10_,
      byte[] tce_Id_r10_,
      AbsoluteTimeInfo_r10 absoluteTimeInfo_r10_,
      AreaConfiguration_r10 areaConfiguration_r10_,
      LoggingDuration_r10 loggingDuration_r10_,
      LoggingInterval_r10 loggingInterval_r10_,
      LoggedMeasurementConfiguration_v1080_IEs nonCriticalExtension_
   ) {
      super();
      traceReference_r10 = traceReference_r10_;
      traceRecordingSessionRef_r10 = new Asn1OctetString (traceRecordingSessionRef_r10_);
      tce_Id_r10 = new Asn1OctetString (tce_Id_r10_);
      absoluteTimeInfo_r10 = absoluteTimeInfo_r10_;
      areaConfiguration_r10 = areaConfiguration_r10_;
      loggingDuration_r10 = loggingDuration_r10_;
      loggingInterval_r10 = loggingInterval_r10_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public LoggedMeasurementConfiguration_r10_IEs (
      TraceReference_r10 traceReference_r10_,
      byte[] traceRecordingSessionRef_r10_,
      byte[] tce_Id_r10_,
      AbsoluteTimeInfo_r10 absoluteTimeInfo_r10_,
      LoggingDuration_r10 loggingDuration_r10_,
      LoggingInterval_r10 loggingInterval_r10_
   ) {
      super();
      traceReference_r10 = traceReference_r10_;
      traceRecordingSessionRef_r10 = new Asn1OctetString (traceRecordingSessionRef_r10_);
      tce_Id_r10 = new Asn1OctetString (tce_Id_r10_);
      absoluteTimeInfo_r10 = absoluteTimeInfo_r10_;
      loggingDuration_r10 = loggingDuration_r10_;
      loggingInterval_r10 = loggingInterval_r10_;
   }

   public void init () {
      traceReference_r10 = null;
      traceRecordingSessionRef_r10 = null;
      tce_Id_r10 = null;
      absoluteTimeInfo_r10 = null;
      areaConfiguration_r10 = null;
      loggingDuration_r10 = null;
      loggingInterval_r10 = null;
      nonCriticalExtension = null;
   }

   public int getElementCount() { return 8; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return traceReference_r10;
         case 1: return traceRecordingSessionRef_r10;
         case 2: return tce_Id_r10;
         case 3: return absoluteTimeInfo_r10;
         case 4: return areaConfiguration_r10;
         case 5: return loggingDuration_r10;
         case 6: return loggingInterval_r10;
         case 7: return nonCriticalExtension;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "traceReference-r10";
         case 1: return "traceRecordingSessionRef-r10";
         case 2: return "tce-Id-r10";
         case 3: return "absoluteTimeInfo-r10";
         case 4: return "areaConfiguration-r10";
         case 5: return "loggingDuration-r10";
         case 6: return "loggingInterval-r10";
         case 7: return "nonCriticalExtension";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean areaConfiguration_r10Present = buffer.decodeBit ("areaConfiguration_r10Present");
      boolean nonCriticalExtensionPresent = buffer.decodeBit ("nonCriticalExtensionPresent");

      // decode traceReference_r10

      buffer.getContext().eventDispatcher.startElement("traceReference_r10", -1);

      traceReference_r10 = new TraceReference_r10();
      traceReference_r10.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("traceReference_r10", -1);

      // decode traceRecordingSessionRef_r10

      buffer.getContext().eventDispatcher.startElement("traceRecordingSessionRef_r10", -1);

      traceRecordingSessionRef_r10 = new Asn1OctetString();
      traceRecordingSessionRef_r10.decode (buffer, 2, 2);

      buffer.invokeCharacters(traceRecordingSessionRef_r10.toString());
      buffer.getContext().eventDispatcher.endElement("traceRecordingSessionRef_r10", -1);

      // decode tce_Id_r10

      buffer.getContext().eventDispatcher.startElement("tce_Id_r10", -1);

      tce_Id_r10 = new Asn1OctetString();
      tce_Id_r10.decode (buffer, 1, 1);

      buffer.invokeCharacters(tce_Id_r10.toString());
      buffer.getContext().eventDispatcher.endElement("tce_Id_r10", -1);

      // decode absoluteTimeInfo_r10

      buffer.getContext().eventDispatcher.startElement("absoluteTimeInfo_r10", -1);

      absoluteTimeInfo_r10 = new AbsoluteTimeInfo_r10();
      absoluteTimeInfo_r10.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("absoluteTimeInfo_r10", -1);

      // decode areaConfiguration_r10

      if (areaConfiguration_r10Present) {
         buffer.getContext().eventDispatcher.startElement("areaConfiguration_r10", -1);

         areaConfiguration_r10 = new AreaConfiguration_r10();
         areaConfiguration_r10.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("areaConfiguration_r10", -1);
      }
      else {
         areaConfiguration_r10 = null;
      }

      // decode loggingDuration_r10

      buffer.getContext().eventDispatcher.startElement("loggingDuration_r10", -1);

      {
         int tval = LoggingDuration_r10.decodeEnumValue (buffer);
         loggingDuration_r10 = LoggingDuration_r10.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("loggingDuration_r10", -1);

      // decode loggingInterval_r10

      buffer.getContext().eventDispatcher.startElement("loggingInterval_r10", -1);

      {
         int tval = LoggingInterval_r10.decodeEnumValue (buffer);
         loggingInterval_r10 = LoggingInterval_r10.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("loggingInterval_r10", -1);

      // decode nonCriticalExtension

      if (nonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension = new LoggedMeasurementConfiguration_v1080_IEs();
         nonCriticalExtension.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }
      else {
         nonCriticalExtension = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (traceReference_r10 != null) traceReference_r10.print (_sb, "traceReference_r10", _level+1);
      if (traceRecordingSessionRef_r10 != null) traceRecordingSessionRef_r10.print (_sb, "traceRecordingSessionRef_r10", _level+1);
      if (tce_Id_r10 != null) tce_Id_r10.print (_sb, "tce_Id_r10", _level+1);
      if (absoluteTimeInfo_r10 != null) absoluteTimeInfo_r10.print (_sb, "absoluteTimeInfo_r10", _level+1);
      if (areaConfiguration_r10 != null) areaConfiguration_r10.print (_sb, "areaConfiguration_r10", _level+1);
      if (loggingDuration_r10 != null) loggingDuration_r10.print (_sb, "loggingDuration_r10", _level+1);
      if (loggingInterval_r10 != null) loggingInterval_r10.print (_sb, "loggingInterval_r10", _level+1);
      if (nonCriticalExtension != null) nonCriticalExtension.print (_sb, "nonCriticalExtension", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
