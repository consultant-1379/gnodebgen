/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SL_ConfigCommonNR_r16 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SL-ConfigCommonNR-r16";
   }

   public SL_ConfigCommonNR_r16_sl_FreqInfoList_r16 sl_FreqInfoList_r16;  // optional
   public SL_UE_SelectedConfig_r16 sl_UE_SelectedConfig_r16;  // optional
   public SL_NR_AnchorCarrierFreqList_r16 sl_NR_AnchorCarrierFreqList_r16;  // optional
   public SL_EUTRA_AnchorCarrierFreqList_r16 sl_EUTRA_AnchorCarrierFreqList_r16;  // optional
   public SL_ConfigCommonNR_r16_sl_RadioBearerConfigList_r16 sl_RadioBearerConfigList_r16;  // optional
   public SL_ConfigCommonNR_r16_sl_RLC_BearerConfigList_r16 sl_RLC_BearerConfigList_r16;  // optional
   public SL_MeasConfigCommon_r16 sl_MeasConfigCommon_r16;  // optional
   public SL_ConfigCommonNR_r16_sl_CSI_Acquisition_r16 sl_CSI_Acquisition_r16 = null;  // optional
   public Asn1Integer sl_OffsetDFN_r16;  // optional
   public SL_ConfigCommonNR_r16_t400_r16 t400_r16 = null;  // optional
   public SL_ConfigCommonNR_r16_sl_MaxNumConsecutiveDTX_r16 sl_MaxNumConsecutiveDTX_r16 = null;  // optional
   public Asn1Integer sl_SSB_PriorityNR_r16;  // optional

   public SL_ConfigCommonNR_r16 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SL_ConfigCommonNR_r16 (
      SL_ConfigCommonNR_r16_sl_FreqInfoList_r16 sl_FreqInfoList_r16_,
      SL_UE_SelectedConfig_r16 sl_UE_SelectedConfig_r16_,
      SL_NR_AnchorCarrierFreqList_r16 sl_NR_AnchorCarrierFreqList_r16_,
      SL_EUTRA_AnchorCarrierFreqList_r16 sl_EUTRA_AnchorCarrierFreqList_r16_,
      SL_ConfigCommonNR_r16_sl_RadioBearerConfigList_r16 sl_RadioBearerConfigList_r16_,
      SL_ConfigCommonNR_r16_sl_RLC_BearerConfigList_r16 sl_RLC_BearerConfigList_r16_,
      SL_MeasConfigCommon_r16 sl_MeasConfigCommon_r16_,
      SL_ConfigCommonNR_r16_sl_CSI_Acquisition_r16 sl_CSI_Acquisition_r16_,
      Asn1Integer sl_OffsetDFN_r16_,
      SL_ConfigCommonNR_r16_t400_r16 t400_r16_,
      SL_ConfigCommonNR_r16_sl_MaxNumConsecutiveDTX_r16 sl_MaxNumConsecutiveDTX_r16_,
      Asn1Integer sl_SSB_PriorityNR_r16_
   ) {
      super();
      sl_FreqInfoList_r16 = sl_FreqInfoList_r16_;
      sl_UE_SelectedConfig_r16 = sl_UE_SelectedConfig_r16_;
      sl_NR_AnchorCarrierFreqList_r16 = sl_NR_AnchorCarrierFreqList_r16_;
      sl_EUTRA_AnchorCarrierFreqList_r16 = sl_EUTRA_AnchorCarrierFreqList_r16_;
      sl_RadioBearerConfigList_r16 = sl_RadioBearerConfigList_r16_;
      sl_RLC_BearerConfigList_r16 = sl_RLC_BearerConfigList_r16_;
      sl_MeasConfigCommon_r16 = sl_MeasConfigCommon_r16_;
      sl_CSI_Acquisition_r16 = sl_CSI_Acquisition_r16_;
      sl_OffsetDFN_r16 = sl_OffsetDFN_r16_;
      t400_r16 = t400_r16_;
      sl_MaxNumConsecutiveDTX_r16 = sl_MaxNumConsecutiveDTX_r16_;
      sl_SSB_PriorityNR_r16 = sl_SSB_PriorityNR_r16_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SL_ConfigCommonNR_r16 (SL_ConfigCommonNR_r16_sl_FreqInfoList_r16 sl_FreqInfoList_r16_,
      SL_UE_SelectedConfig_r16 sl_UE_SelectedConfig_r16_,
      SL_NR_AnchorCarrierFreqList_r16 sl_NR_AnchorCarrierFreqList_r16_,
      SL_EUTRA_AnchorCarrierFreqList_r16 sl_EUTRA_AnchorCarrierFreqList_r16_,
      SL_ConfigCommonNR_r16_sl_RadioBearerConfigList_r16 sl_RadioBearerConfigList_r16_,
      SL_ConfigCommonNR_r16_sl_RLC_BearerConfigList_r16 sl_RLC_BearerConfigList_r16_,
      SL_MeasConfigCommon_r16 sl_MeasConfigCommon_r16_,
      SL_ConfigCommonNR_r16_sl_CSI_Acquisition_r16 sl_CSI_Acquisition_r16_,
      long sl_OffsetDFN_r16_,
      SL_ConfigCommonNR_r16_t400_r16 t400_r16_,
      SL_ConfigCommonNR_r16_sl_MaxNumConsecutiveDTX_r16 sl_MaxNumConsecutiveDTX_r16_,
      long sl_SSB_PriorityNR_r16_
   ) {
      super();
      sl_FreqInfoList_r16 = sl_FreqInfoList_r16_;
      sl_UE_SelectedConfig_r16 = sl_UE_SelectedConfig_r16_;
      sl_NR_AnchorCarrierFreqList_r16 = sl_NR_AnchorCarrierFreqList_r16_;
      sl_EUTRA_AnchorCarrierFreqList_r16 = sl_EUTRA_AnchorCarrierFreqList_r16_;
      sl_RadioBearerConfigList_r16 = sl_RadioBearerConfigList_r16_;
      sl_RLC_BearerConfigList_r16 = sl_RLC_BearerConfigList_r16_;
      sl_MeasConfigCommon_r16 = sl_MeasConfigCommon_r16_;
      sl_CSI_Acquisition_r16 = sl_CSI_Acquisition_r16_;
      sl_OffsetDFN_r16 = new Asn1Integer (sl_OffsetDFN_r16_);
      t400_r16 = t400_r16_;
      sl_MaxNumConsecutiveDTX_r16 = sl_MaxNumConsecutiveDTX_r16_;
      sl_SSB_PriorityNR_r16 = new Asn1Integer (sl_SSB_PriorityNR_r16_);
   }

   public void init () {
      sl_FreqInfoList_r16 = null;
      sl_UE_SelectedConfig_r16 = null;
      sl_NR_AnchorCarrierFreqList_r16 = null;
      sl_EUTRA_AnchorCarrierFreqList_r16 = null;
      sl_RadioBearerConfigList_r16 = null;
      sl_RLC_BearerConfigList_r16 = null;
      sl_MeasConfigCommon_r16 = null;
      sl_CSI_Acquisition_r16 = null;
      sl_OffsetDFN_r16 = null;
      t400_r16 = null;
      sl_MaxNumConsecutiveDTX_r16 = null;
      sl_SSB_PriorityNR_r16 = null;
   }

   public int getElementCount() { return 12; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return sl_FreqInfoList_r16;
         case 1: return sl_UE_SelectedConfig_r16;
         case 2: return sl_NR_AnchorCarrierFreqList_r16;
         case 3: return sl_EUTRA_AnchorCarrierFreqList_r16;
         case 4: return sl_RadioBearerConfigList_r16;
         case 5: return sl_RLC_BearerConfigList_r16;
         case 6: return sl_MeasConfigCommon_r16;
         case 7: return sl_CSI_Acquisition_r16;
         case 8: return sl_OffsetDFN_r16;
         case 9: return t400_r16;
         case 10: return sl_MaxNumConsecutiveDTX_r16;
         case 11: return sl_SSB_PriorityNR_r16;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "sl-FreqInfoList-r16";
         case 1: return "sl-UE-SelectedConfig-r16";
         case 2: return "sl-NR-AnchorCarrierFreqList-r16";
         case 3: return "sl-EUTRA-AnchorCarrierFreqList-r16";
         case 4: return "sl-RadioBearerConfigList-r16";
         case 5: return "sl-RLC-BearerConfigList-r16";
         case 6: return "sl-MeasConfigCommon-r16";
         case 7: return "sl-CSI-Acquisition-r16";
         case 8: return "sl-OffsetDFN-r16";
         case 9: return "t400-r16";
         case 10: return "sl-MaxNumConsecutiveDTX-r16";
         case 11: return "sl-SSB-PriorityNR-r16";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean sl_FreqInfoList_r16Present = buffer.decodeBit ("sl_FreqInfoList_r16Present");
      boolean sl_UE_SelectedConfig_r16Present = buffer.decodeBit ("sl_UE_SelectedConfig_r16Present");
      boolean sl_NR_AnchorCarrierFreqList_r16Present = buffer.decodeBit ("sl_NR_AnchorCarrierFreqList_r16Present");
      boolean sl_EUTRA_AnchorCarrierFreqList_r16Present = buffer.decodeBit ("sl_EUTRA_AnchorCarrierFreqList_r16Present");
      boolean sl_RadioBearerConfigList_r16Present = buffer.decodeBit ("sl_RadioBearerConfigList_r16Present");
      boolean sl_RLC_BearerConfigList_r16Present = buffer.decodeBit ("sl_RLC_BearerConfigList_r16Present");
      boolean sl_MeasConfigCommon_r16Present = buffer.decodeBit ("sl_MeasConfigCommon_r16Present");
      boolean sl_CSI_Acquisition_r16Present = buffer.decodeBit ("sl_CSI_Acquisition_r16Present");
      boolean sl_OffsetDFN_r16Present = buffer.decodeBit ("sl_OffsetDFN_r16Present");
      boolean t400_r16Present = buffer.decodeBit ("t400_r16Present");
      boolean sl_MaxNumConsecutiveDTX_r16Present = buffer.decodeBit ("sl_MaxNumConsecutiveDTX_r16Present");
      boolean sl_SSB_PriorityNR_r16Present = buffer.decodeBit ("sl_SSB_PriorityNR_r16Present");

      // decode sl_FreqInfoList_r16

      if (sl_FreqInfoList_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_FreqInfoList_r16", -1);

         sl_FreqInfoList_r16 = new SL_ConfigCommonNR_r16_sl_FreqInfoList_r16();
         sl_FreqInfoList_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sl_FreqInfoList_r16", -1);
      }
      else {
         sl_FreqInfoList_r16 = null;
      }

      // decode sl_UE_SelectedConfig_r16

      if (sl_UE_SelectedConfig_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_UE_SelectedConfig_r16", -1);

         sl_UE_SelectedConfig_r16 = new SL_UE_SelectedConfig_r16();
         sl_UE_SelectedConfig_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sl_UE_SelectedConfig_r16", -1);
      }
      else {
         sl_UE_SelectedConfig_r16 = null;
      }

      // decode sl_NR_AnchorCarrierFreqList_r16

      if (sl_NR_AnchorCarrierFreqList_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_NR_AnchorCarrierFreqList_r16", -1);

         sl_NR_AnchorCarrierFreqList_r16 = new SL_NR_AnchorCarrierFreqList_r16();
         sl_NR_AnchorCarrierFreqList_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sl_NR_AnchorCarrierFreqList_r16", -1);
      }
      else {
         sl_NR_AnchorCarrierFreqList_r16 = null;
      }

      // decode sl_EUTRA_AnchorCarrierFreqList_r16

      if (sl_EUTRA_AnchorCarrierFreqList_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_EUTRA_AnchorCarrierFreqList_r16", -1);

         sl_EUTRA_AnchorCarrierFreqList_r16 = new SL_EUTRA_AnchorCarrierFreqList_r16();
         sl_EUTRA_AnchorCarrierFreqList_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sl_EUTRA_AnchorCarrierFreqList_r16", -1);
      }
      else {
         sl_EUTRA_AnchorCarrierFreqList_r16 = null;
      }

      // decode sl_RadioBearerConfigList_r16

      if (sl_RadioBearerConfigList_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_RadioBearerConfigList_r16", -1);

         sl_RadioBearerConfigList_r16 = new SL_ConfigCommonNR_r16_sl_RadioBearerConfigList_r16();
         sl_RadioBearerConfigList_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sl_RadioBearerConfigList_r16", -1);
      }
      else {
         sl_RadioBearerConfigList_r16 = null;
      }

      // decode sl_RLC_BearerConfigList_r16

      if (sl_RLC_BearerConfigList_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_RLC_BearerConfigList_r16", -1);

         sl_RLC_BearerConfigList_r16 = new SL_ConfigCommonNR_r16_sl_RLC_BearerConfigList_r16();
         sl_RLC_BearerConfigList_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sl_RLC_BearerConfigList_r16", -1);
      }
      else {
         sl_RLC_BearerConfigList_r16 = null;
      }

      // decode sl_MeasConfigCommon_r16

      if (sl_MeasConfigCommon_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_MeasConfigCommon_r16", -1);

         sl_MeasConfigCommon_r16 = new SL_MeasConfigCommon_r16();
         sl_MeasConfigCommon_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sl_MeasConfigCommon_r16", -1);
      }
      else {
         sl_MeasConfigCommon_r16 = null;
      }

      // decode sl_CSI_Acquisition_r16

      if (sl_CSI_Acquisition_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_CSI_Acquisition_r16", -1);

         int tval = SL_ConfigCommonNR_r16_sl_CSI_Acquisition_r16.decodeEnumValue (buffer);
         sl_CSI_Acquisition_r16 = SL_ConfigCommonNR_r16_sl_CSI_Acquisition_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("sl_CSI_Acquisition_r16", -1);
      }
      else {
         sl_CSI_Acquisition_r16 = null;
      }

      // decode sl_OffsetDFN_r16

      if (sl_OffsetDFN_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_OffsetDFN_r16", -1);

         sl_OffsetDFN_r16 = new Asn1Integer();
         sl_OffsetDFN_r16.decode (buffer, 1, 1000);

         buffer.invokeCharacters(sl_OffsetDFN_r16.toString());
         buffer.getContext().eventDispatcher.endElement("sl_OffsetDFN_r16", -1);
      }
      else {
         sl_OffsetDFN_r16 = null;
      }

      // decode t400_r16

      if (t400_r16Present) {
         buffer.getContext().eventDispatcher.startElement("t400_r16", -1);

         int tval = SL_ConfigCommonNR_r16_t400_r16.decodeEnumValue (buffer);
         t400_r16 = SL_ConfigCommonNR_r16_t400_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("t400_r16", -1);
      }
      else {
         t400_r16 = null;
      }

      // decode sl_MaxNumConsecutiveDTX_r16

      if (sl_MaxNumConsecutiveDTX_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_MaxNumConsecutiveDTX_r16", -1);

         int tval = SL_ConfigCommonNR_r16_sl_MaxNumConsecutiveDTX_r16.decodeEnumValue (buffer);
         sl_MaxNumConsecutiveDTX_r16 = SL_ConfigCommonNR_r16_sl_MaxNumConsecutiveDTX_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("sl_MaxNumConsecutiveDTX_r16", -1);
      }
      else {
         sl_MaxNumConsecutiveDTX_r16 = null;
      }

      // decode sl_SSB_PriorityNR_r16

      if (sl_SSB_PriorityNR_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_SSB_PriorityNR_r16", -1);

         sl_SSB_PriorityNR_r16 = new Asn1Integer();
         sl_SSB_PriorityNR_r16.decode (buffer, 1, 8);

         buffer.invokeCharacters(sl_SSB_PriorityNR_r16.toString());
         buffer.getContext().eventDispatcher.endElement("sl_SSB_PriorityNR_r16", -1);
      }
      else {
         sl_SSB_PriorityNR_r16 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (sl_FreqInfoList_r16 != null) sl_FreqInfoList_r16.print (_sb, "sl_FreqInfoList_r16", _level+1);
      if (sl_UE_SelectedConfig_r16 != null) sl_UE_SelectedConfig_r16.print (_sb, "sl_UE_SelectedConfig_r16", _level+1);
      if (sl_NR_AnchorCarrierFreqList_r16 != null) sl_NR_AnchorCarrierFreqList_r16.print (_sb, "sl_NR_AnchorCarrierFreqList_r16", _level+1);
      if (sl_EUTRA_AnchorCarrierFreqList_r16 != null) sl_EUTRA_AnchorCarrierFreqList_r16.print (_sb, "sl_EUTRA_AnchorCarrierFreqList_r16", _level+1);
      if (sl_RadioBearerConfigList_r16 != null) sl_RadioBearerConfigList_r16.print (_sb, "sl_RadioBearerConfigList_r16", _level+1);
      if (sl_RLC_BearerConfigList_r16 != null) sl_RLC_BearerConfigList_r16.print (_sb, "sl_RLC_BearerConfigList_r16", _level+1);
      if (sl_MeasConfigCommon_r16 != null) sl_MeasConfigCommon_r16.print (_sb, "sl_MeasConfigCommon_r16", _level+1);
      if (sl_CSI_Acquisition_r16 != null) sl_CSI_Acquisition_r16.print (_sb, "sl_CSI_Acquisition_r16", _level+1);
      if (sl_OffsetDFN_r16 != null) sl_OffsetDFN_r16.print (_sb, "sl_OffsetDFN_r16", _level+1);
      if (t400_r16 != null) t400_r16.print (_sb, "t400_r16", _level+1);
      if (sl_MaxNumConsecutiveDTX_r16 != null) sl_MaxNumConsecutiveDTX_r16.print (_sb, "sl_MaxNumConsecutiveDTX_r16", _level+1);
      if (sl_SSB_PriorityNR_r16 != null) sl_SSB_PriorityNR_r16.print (_sb, "sl_SSB_PriorityNR_r16", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
