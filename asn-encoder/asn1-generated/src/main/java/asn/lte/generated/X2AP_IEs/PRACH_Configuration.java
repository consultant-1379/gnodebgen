/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.X2AP_IEs;

import com.objsys.asn1j.runtime.*;

public class PRACH_Configuration extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_X2AP_IEsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "PRACH-Configuration";
   }

   public Asn1Integer rootSequenceIndex;
   public Asn1Integer zeroCorrelationIndex;
   public Asn1Boolean highSpeedFlag;
   public Asn1Integer prach_FreqOffset;
   public Asn1Integer prach_ConfigIndex;  // optional
   public PRACH_Configuration_iE_Extensions iE_Extensions;  // optional
   public Asn1OpenExt extElem1;

   public PRACH_Configuration () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public PRACH_Configuration (
      Asn1Integer rootSequenceIndex_,
      Asn1Integer zeroCorrelationIndex_,
      Asn1Boolean highSpeedFlag_,
      Asn1Integer prach_FreqOffset_,
      Asn1Integer prach_ConfigIndex_,
      PRACH_Configuration_iE_Extensions iE_Extensions_
   ) {
      super();
      rootSequenceIndex = rootSequenceIndex_;
      zeroCorrelationIndex = zeroCorrelationIndex_;
      highSpeedFlag = highSpeedFlag_;
      prach_FreqOffset = prach_FreqOffset_;
      prach_ConfigIndex = prach_ConfigIndex_;
      iE_Extensions = iE_Extensions_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public PRACH_Configuration (
      Asn1Integer rootSequenceIndex_,
      Asn1Integer zeroCorrelationIndex_,
      Asn1Boolean highSpeedFlag_,
      Asn1Integer prach_FreqOffset_
   ) {
      super();
      rootSequenceIndex = rootSequenceIndex_;
      zeroCorrelationIndex = zeroCorrelationIndex_;
      highSpeedFlag = highSpeedFlag_;
      prach_FreqOffset = prach_FreqOffset_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public PRACH_Configuration (long rootSequenceIndex_,
      long zeroCorrelationIndex_,
      boolean highSpeedFlag_,
      long prach_FreqOffset_,
      long prach_ConfigIndex_,
      PRACH_Configuration_iE_Extensions iE_Extensions_
   ) {
      super();
      rootSequenceIndex = new Asn1Integer (rootSequenceIndex_);
      zeroCorrelationIndex = new Asn1Integer (zeroCorrelationIndex_);
      highSpeedFlag = new Asn1Boolean (highSpeedFlag_);
      prach_FreqOffset = new Asn1Integer (prach_FreqOffset_);
      prach_ConfigIndex = new Asn1Integer (prach_ConfigIndex_);
      iE_Extensions = iE_Extensions_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public PRACH_Configuration (
      long rootSequenceIndex_,
      long zeroCorrelationIndex_,
      boolean highSpeedFlag_,
      long prach_FreqOffset_
   ) {
      super();
      rootSequenceIndex = new Asn1Integer (rootSequenceIndex_);
      zeroCorrelationIndex = new Asn1Integer (zeroCorrelationIndex_);
      highSpeedFlag = new Asn1Boolean (highSpeedFlag_);
      prach_FreqOffset = new Asn1Integer (prach_FreqOffset_);
   }

   public void init () {
      rootSequenceIndex = null;
      zeroCorrelationIndex = null;
      highSpeedFlag = null;
      prach_FreqOffset = null;
      prach_ConfigIndex = null;
      iE_Extensions = null;
      extElem1 = null;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return rootSequenceIndex;
         case 1: return zeroCorrelationIndex;
         case 2: return highSpeedFlag;
         case 3: return prach_FreqOffset;
         case 4: return prach_ConfigIndex;
         case 5: return iE_Extensions;
         case 6: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "rootSequenceIndex";
         case 1: return "zeroCorrelationIndex";
         case 2: return "highSpeedFlag";
         case 3: return "prach-FreqOffset";
         case 4: return "prach-ConfigIndex";
         case 5: return "iE-Extensions";
         case 6: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean prach_ConfigIndexPresent = buffer.decodeBit ("prach_ConfigIndexPresent");
      boolean iE_ExtensionsPresent = buffer.decodeBit ("iE_ExtensionsPresent");

      // decode rootSequenceIndex

      buffer.getContext().eventDispatcher.startElement("rootSequenceIndex", -1);

      rootSequenceIndex = new Asn1Integer();
      rootSequenceIndex.decode (buffer, 0, 837);

      buffer.invokeCharacters(rootSequenceIndex.toString());
      buffer.getContext().eventDispatcher.endElement("rootSequenceIndex", -1);

      // decode zeroCorrelationIndex

      buffer.getContext().eventDispatcher.startElement("zeroCorrelationIndex", -1);

      zeroCorrelationIndex = new Asn1Integer();
      zeroCorrelationIndex.decode (buffer, 0, 15);

      buffer.invokeCharacters(zeroCorrelationIndex.toString());
      buffer.getContext().eventDispatcher.endElement("zeroCorrelationIndex", -1);

      // decode highSpeedFlag

      buffer.getContext().eventDispatcher.startElement("highSpeedFlag", -1);

      highSpeedFlag = new Asn1Boolean();
      highSpeedFlag.decode (buffer);

      buffer.invokeCharacters(highSpeedFlag.toString());
      buffer.getContext().eventDispatcher.endElement("highSpeedFlag", -1);

      // decode prach_FreqOffset

      buffer.getContext().eventDispatcher.startElement("prach_FreqOffset", -1);

      prach_FreqOffset = new Asn1Integer();
      prach_FreqOffset.decode (buffer, 0, 94);

      buffer.invokeCharacters(prach_FreqOffset.toString());
      buffer.getContext().eventDispatcher.endElement("prach_FreqOffset", -1);

      // decode prach_ConfigIndex

      if (prach_ConfigIndexPresent) {
         buffer.getContext().eventDispatcher.startElement("prach_ConfigIndex", -1);

         prach_ConfigIndex = new Asn1Integer();
         prach_ConfigIndex.decode (buffer, 0, 63);

         buffer.invokeCharacters(prach_ConfigIndex.toString());
         buffer.getContext().eventDispatcher.endElement("prach_ConfigIndex", -1);
      }
      else {
         prach_ConfigIndex = null;
      }

      // decode iE_Extensions

      if (iE_ExtensionsPresent) {
         buffer.getContext().eventDispatcher.startElement("iE_Extensions", -1);

         iE_Extensions = new PRACH_Configuration_iE_Extensions();
         iE_Extensions.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("iE_Extensions", -1);
      }
      else {
         iE_Extensions = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (rootSequenceIndex != null) rootSequenceIndex.print (_sb, "rootSequenceIndex", _level+1);
      if (zeroCorrelationIndex != null) zeroCorrelationIndex.print (_sb, "zeroCorrelationIndex", _level+1);
      if (highSpeedFlag != null) highSpeedFlag.print (_sb, "highSpeedFlag", _level+1);
      if (prach_FreqOffset != null) prach_FreqOffset.print (_sb, "prach_FreqOffset", _level+1);
      if (prach_ConfigIndex != null) prach_ConfigIndex.print (_sb, "prach_ConfigIndex", _level+1);
      if (iE_Extensions != null) iE_Extensions.print (_sb, "iE_Extensions", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
