/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SystemInformationBlockType19_r12_discConfig_v1310 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public SL_CarrierFreqInfoList_v1310 discInterFreqList_v1310;  // optional
   public SystemInformationBlockType19_r12_discConfig_v1310_gapRequestsAllowedCommon gapRequestsAllowedCommon = null;  // optional

   public SystemInformationBlockType19_r12_discConfig_v1310 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SystemInformationBlockType19_r12_discConfig_v1310 (
      SL_CarrierFreqInfoList_v1310 discInterFreqList_v1310_,
      SystemInformationBlockType19_r12_discConfig_v1310_gapRequestsAllowedCommon gapRequestsAllowedCommon_
   ) {
      super();
      discInterFreqList_v1310 = discInterFreqList_v1310_;
      gapRequestsAllowedCommon = gapRequestsAllowedCommon_;
   }

   public void init () {
      discInterFreqList_v1310 = null;
      gapRequestsAllowedCommon = null;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return discInterFreqList_v1310;
         case 1: return gapRequestsAllowedCommon;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "discInterFreqList-v1310";
         case 1: return "gapRequestsAllowedCommon";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean discInterFreqList_v1310Present = buffer.decodeBit ("discInterFreqList_v1310Present");
      boolean gapRequestsAllowedCommonPresent = buffer.decodeBit ("gapRequestsAllowedCommonPresent");

      // decode discInterFreqList_v1310

      if (discInterFreqList_v1310Present) {
         buffer.getContext().eventDispatcher.startElement("discInterFreqList_v1310", -1);

         discInterFreqList_v1310 = new SL_CarrierFreqInfoList_v1310();
         discInterFreqList_v1310.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("discInterFreqList_v1310", -1);
      }
      else {
         discInterFreqList_v1310 = null;
      }

      // decode gapRequestsAllowedCommon

      if (gapRequestsAllowedCommonPresent) {
         buffer.getContext().eventDispatcher.startElement("gapRequestsAllowedCommon", -1);

         int tval = SystemInformationBlockType19_r12_discConfig_v1310_gapRequestsAllowedCommon.decodeEnumValue (buffer);
         gapRequestsAllowedCommon = SystemInformationBlockType19_r12_discConfig_v1310_gapRequestsAllowedCommon.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("gapRequestsAllowedCommon", -1);
      }
      else {
         gapRequestsAllowedCommon = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (discInterFreqList_v1310 != null) discInterFreqList_v1310.print (_sb, "discInterFreqList_v1310", _level+1);
      if (gapRequestsAllowedCommon != null) gapRequestsAllowedCommon.print (_sb, "gapRequestsAllowedCommon", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
