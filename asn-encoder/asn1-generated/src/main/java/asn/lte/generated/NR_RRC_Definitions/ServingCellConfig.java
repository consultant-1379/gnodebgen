/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class ServingCellConfig extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ServingCellConfig";
   }

   public TDD_UL_DL_ConfigDedicated tdd_UL_DL_ConfigurationDedicated;  // optional
   public BWP_DownlinkDedicated initialDownlinkBWP;  // optional
   public ServingCellConfig_downlinkBWP_ToReleaseList downlinkBWP_ToReleaseList;  // optional
   public ServingCellConfig_downlinkBWP_ToAddModList downlinkBWP_ToAddModList;  // optional
   public BWP_Id firstActiveDownlinkBWP_Id;  // optional
   public ServingCellConfig_bwp_InactivityTimer bwp_InactivityTimer = null;  // optional
   public BWP_Id defaultDownlinkBWP_Id;  // optional
   public UplinkConfig uplinkConfig;  // optional
   public UplinkConfig supplementaryUplink;  // optional
   public ServingCellConfig_pdcch_ServingCellConfig pdcch_ServingCellConfig;  // optional
   public ServingCellConfig_pdsch_ServingCellConfig pdsch_ServingCellConfig;  // optional
   public ServingCellConfig_csi_MeasConfig csi_MeasConfig;  // optional
   public ServingCellConfig_sCellDeactivationTimer sCellDeactivationTimer = null;  // optional
   public CrossCarrierSchedulingConfig crossCarrierSchedulingConfig;  // optional
   public TAG_Id tag_Id;
   public ServingCellConfig_dummy1 dummy1 = null;  // optional
   public ServingCellConfig_pathlossReferenceLinking pathlossReferenceLinking = null;  // optional
   public MeasObjectId servingCellMO;  // optional
   public boolean mV2ExtPresent;
   public ServingCellConfig_lte_CRS_ToMatchAround lte_CRS_ToMatchAround;  // optional
   public ServingCellConfig_rateMatchPatternToAddModList rateMatchPatternToAddModList;  // optional
   public ServingCellConfig_rateMatchPatternToReleaseList rateMatchPatternToReleaseList;  // optional
   public ServingCellConfig_downlinkChannelBW_PerSCS_List downlinkChannelBW_PerSCS_List;  // optional
   public boolean mV3ExtPresent;
   public ServingCellConfig_supplementaryUplinkRelease_r16 supplementaryUplinkRelease_r16 = null;  // optional
   public TDD_UL_DL_ConfigDedicated_IAB_MT_r16 tdd_UL_DL_ConfigurationDedicated_IAB_MT_r16;  // optional
   public ServingCellConfig_dormantBWP_Config_r16 dormantBWP_Config_r16;  // optional
   public ServingCellConfig_ca_SlotOffset_r16 ca_SlotOffset_r16;  // optional
   public ServingCellConfig_dummy2 dummy2;  // optional
   public ServingCellConfig_intraCellGuardBandsDL_List_r16 intraCellGuardBandsDL_List_r16;  // optional
   public ServingCellConfig_intraCellGuardBandsUL_List_r16 intraCellGuardBandsUL_List_r16;  // optional
   public ServingCellConfig_csi_RS_ValidationWithDCI_r16 csi_RS_ValidationWithDCI_r16 = null;  // optional
   public ServingCellConfig_lte_CRS_PatternList1_r16 lte_CRS_PatternList1_r16;  // optional
   public ServingCellConfig_lte_CRS_PatternList2_r16 lte_CRS_PatternList2_r16;  // optional
   public ServingCellConfig_crs_RateMatch_PerCORESETPoolIndex_r16 crs_RateMatch_PerCORESETPoolIndex_r16 = null;  // optional
   public ServingCellConfig_enableTwoDefaultTCI_States_r16 enableTwoDefaultTCI_States_r16 = null;  // optional
   public ServingCellConfig_enableDefaultTCI_StatePerCoresetPoolIndex_r16 enableDefaultTCI_StatePerCoresetPoolIndex_r16 = null;  // optional
   public ServingCellConfig_enableBeamSwitchTiming_r16 enableBeamSwitchTiming_r16 = null;  // optional
   public ServingCellConfig_cbg_TxDiffTBsProcessingType1_r16 cbg_TxDiffTBsProcessingType1_r16 = null;  // optional
   public ServingCellConfig_cbg_TxDiffTBsProcessingType2_r16 cbg_TxDiffTBsProcessingType2_r16 = null;  // optional
   public boolean mV4ExtPresent;
   public ServingCellConfig_directionalCollisionHandling_r16 directionalCollisionHandling_r16 = null;  // optional
   public ServingCellConfig_channelAccessConfig_r16 channelAccessConfig_r16;  // optional
   public Asn1OpenExt extElem1;

   public ServingCellConfig () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ServingCellConfig (
      TDD_UL_DL_ConfigDedicated tdd_UL_DL_ConfigurationDedicated_,
      BWP_DownlinkDedicated initialDownlinkBWP_,
      ServingCellConfig_downlinkBWP_ToReleaseList downlinkBWP_ToReleaseList_,
      ServingCellConfig_downlinkBWP_ToAddModList downlinkBWP_ToAddModList_,
      BWP_Id firstActiveDownlinkBWP_Id_,
      ServingCellConfig_bwp_InactivityTimer bwp_InactivityTimer_,
      BWP_Id defaultDownlinkBWP_Id_,
      UplinkConfig uplinkConfig_,
      UplinkConfig supplementaryUplink_,
      ServingCellConfig_pdcch_ServingCellConfig pdcch_ServingCellConfig_,
      ServingCellConfig_pdsch_ServingCellConfig pdsch_ServingCellConfig_,
      ServingCellConfig_csi_MeasConfig csi_MeasConfig_,
      ServingCellConfig_sCellDeactivationTimer sCellDeactivationTimer_,
      CrossCarrierSchedulingConfig crossCarrierSchedulingConfig_,
      TAG_Id tag_Id_,
      ServingCellConfig_dummy1 dummy1_,
      ServingCellConfig_pathlossReferenceLinking pathlossReferenceLinking_,
      MeasObjectId servingCellMO_,
      ServingCellConfig_lte_CRS_ToMatchAround lte_CRS_ToMatchAround_,
      ServingCellConfig_rateMatchPatternToAddModList rateMatchPatternToAddModList_,
      ServingCellConfig_rateMatchPatternToReleaseList rateMatchPatternToReleaseList_,
      ServingCellConfig_downlinkChannelBW_PerSCS_List downlinkChannelBW_PerSCS_List_,
      ServingCellConfig_supplementaryUplinkRelease_r16 supplementaryUplinkRelease_r16_,
      TDD_UL_DL_ConfigDedicated_IAB_MT_r16 tdd_UL_DL_ConfigurationDedicated_IAB_MT_r16_,
      ServingCellConfig_dormantBWP_Config_r16 dormantBWP_Config_r16_,
      ServingCellConfig_ca_SlotOffset_r16 ca_SlotOffset_r16_,
      ServingCellConfig_dummy2 dummy2_,
      ServingCellConfig_intraCellGuardBandsDL_List_r16 intraCellGuardBandsDL_List_r16_,
      ServingCellConfig_intraCellGuardBandsUL_List_r16 intraCellGuardBandsUL_List_r16_,
      ServingCellConfig_csi_RS_ValidationWithDCI_r16 csi_RS_ValidationWithDCI_r16_,
      ServingCellConfig_lte_CRS_PatternList1_r16 lte_CRS_PatternList1_r16_,
      ServingCellConfig_lte_CRS_PatternList2_r16 lte_CRS_PatternList2_r16_,
      ServingCellConfig_crs_RateMatch_PerCORESETPoolIndex_r16 crs_RateMatch_PerCORESETPoolIndex_r16_,
      ServingCellConfig_enableTwoDefaultTCI_States_r16 enableTwoDefaultTCI_States_r16_,
      ServingCellConfig_enableDefaultTCI_StatePerCoresetPoolIndex_r16 enableDefaultTCI_StatePerCoresetPoolIndex_r16_,
      ServingCellConfig_enableBeamSwitchTiming_r16 enableBeamSwitchTiming_r16_,
      ServingCellConfig_cbg_TxDiffTBsProcessingType1_r16 cbg_TxDiffTBsProcessingType1_r16_,
      ServingCellConfig_cbg_TxDiffTBsProcessingType2_r16 cbg_TxDiffTBsProcessingType2_r16_,
      ServingCellConfig_directionalCollisionHandling_r16 directionalCollisionHandling_r16_,
      ServingCellConfig_channelAccessConfig_r16 channelAccessConfig_r16_
   ) {
      super();
      tdd_UL_DL_ConfigurationDedicated = tdd_UL_DL_ConfigurationDedicated_;
      initialDownlinkBWP = initialDownlinkBWP_;
      downlinkBWP_ToReleaseList = downlinkBWP_ToReleaseList_;
      downlinkBWP_ToAddModList = downlinkBWP_ToAddModList_;
      firstActiveDownlinkBWP_Id = firstActiveDownlinkBWP_Id_;
      bwp_InactivityTimer = bwp_InactivityTimer_;
      defaultDownlinkBWP_Id = defaultDownlinkBWP_Id_;
      uplinkConfig = uplinkConfig_;
      supplementaryUplink = supplementaryUplink_;
      pdcch_ServingCellConfig = pdcch_ServingCellConfig_;
      pdsch_ServingCellConfig = pdsch_ServingCellConfig_;
      csi_MeasConfig = csi_MeasConfig_;
      sCellDeactivationTimer = sCellDeactivationTimer_;
      crossCarrierSchedulingConfig = crossCarrierSchedulingConfig_;
      tag_Id = tag_Id_;
      dummy1 = dummy1_;
      pathlossReferenceLinking = pathlossReferenceLinking_;
      servingCellMO = servingCellMO_;
      lte_CRS_ToMatchAround = lte_CRS_ToMatchAround_;
      rateMatchPatternToAddModList = rateMatchPatternToAddModList_;
      rateMatchPatternToReleaseList = rateMatchPatternToReleaseList_;
      downlinkChannelBW_PerSCS_List = downlinkChannelBW_PerSCS_List_;
      supplementaryUplinkRelease_r16 = supplementaryUplinkRelease_r16_;
      tdd_UL_DL_ConfigurationDedicated_IAB_MT_r16 = tdd_UL_DL_ConfigurationDedicated_IAB_MT_r16_;
      dormantBWP_Config_r16 = dormantBWP_Config_r16_;
      ca_SlotOffset_r16 = ca_SlotOffset_r16_;
      dummy2 = dummy2_;
      intraCellGuardBandsDL_List_r16 = intraCellGuardBandsDL_List_r16_;
      intraCellGuardBandsUL_List_r16 = intraCellGuardBandsUL_List_r16_;
      csi_RS_ValidationWithDCI_r16 = csi_RS_ValidationWithDCI_r16_;
      lte_CRS_PatternList1_r16 = lte_CRS_PatternList1_r16_;
      lte_CRS_PatternList2_r16 = lte_CRS_PatternList2_r16_;
      crs_RateMatch_PerCORESETPoolIndex_r16 = crs_RateMatch_PerCORESETPoolIndex_r16_;
      enableTwoDefaultTCI_States_r16 = enableTwoDefaultTCI_States_r16_;
      enableDefaultTCI_StatePerCoresetPoolIndex_r16 = enableDefaultTCI_StatePerCoresetPoolIndex_r16_;
      enableBeamSwitchTiming_r16 = enableBeamSwitchTiming_r16_;
      cbg_TxDiffTBsProcessingType1_r16 = cbg_TxDiffTBsProcessingType1_r16_;
      cbg_TxDiffTBsProcessingType2_r16 = cbg_TxDiffTBsProcessingType2_r16_;
      directionalCollisionHandling_r16 = directionalCollisionHandling_r16_;
      channelAccessConfig_r16 = channelAccessConfig_r16_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public ServingCellConfig (
      TAG_Id tag_Id_
   ) {
      super();
      tag_Id = tag_Id_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public ServingCellConfig (TDD_UL_DL_ConfigDedicated tdd_UL_DL_ConfigurationDedicated_,
      BWP_DownlinkDedicated initialDownlinkBWP_,
      ServingCellConfig_downlinkBWP_ToReleaseList downlinkBWP_ToReleaseList_,
      ServingCellConfig_downlinkBWP_ToAddModList downlinkBWP_ToAddModList_,
      long firstActiveDownlinkBWP_Id_,
      ServingCellConfig_bwp_InactivityTimer bwp_InactivityTimer_,
      long defaultDownlinkBWP_Id_,
      UplinkConfig uplinkConfig_,
      UplinkConfig supplementaryUplink_,
      ServingCellConfig_pdcch_ServingCellConfig pdcch_ServingCellConfig_,
      ServingCellConfig_pdsch_ServingCellConfig pdsch_ServingCellConfig_,
      ServingCellConfig_csi_MeasConfig csi_MeasConfig_,
      ServingCellConfig_sCellDeactivationTimer sCellDeactivationTimer_,
      CrossCarrierSchedulingConfig crossCarrierSchedulingConfig_,
      long tag_Id_,
      ServingCellConfig_dummy1 dummy1_,
      ServingCellConfig_pathlossReferenceLinking pathlossReferenceLinking_,
      long servingCellMO_,
      ServingCellConfig_lte_CRS_ToMatchAround lte_CRS_ToMatchAround_,
      ServingCellConfig_rateMatchPatternToAddModList rateMatchPatternToAddModList_,
      ServingCellConfig_rateMatchPatternToReleaseList rateMatchPatternToReleaseList_,
      ServingCellConfig_downlinkChannelBW_PerSCS_List downlinkChannelBW_PerSCS_List_,
      ServingCellConfig_supplementaryUplinkRelease_r16 supplementaryUplinkRelease_r16_,
      TDD_UL_DL_ConfigDedicated_IAB_MT_r16 tdd_UL_DL_ConfigurationDedicated_IAB_MT_r16_,
      ServingCellConfig_dormantBWP_Config_r16 dormantBWP_Config_r16_,
      ServingCellConfig_ca_SlotOffset_r16 ca_SlotOffset_r16_,
      ServingCellConfig_dummy2 dummy2_,
      ServingCellConfig_intraCellGuardBandsDL_List_r16 intraCellGuardBandsDL_List_r16_,
      ServingCellConfig_intraCellGuardBandsUL_List_r16 intraCellGuardBandsUL_List_r16_,
      ServingCellConfig_csi_RS_ValidationWithDCI_r16 csi_RS_ValidationWithDCI_r16_,
      ServingCellConfig_lte_CRS_PatternList1_r16 lte_CRS_PatternList1_r16_,
      ServingCellConfig_lte_CRS_PatternList2_r16 lte_CRS_PatternList2_r16_,
      ServingCellConfig_crs_RateMatch_PerCORESETPoolIndex_r16 crs_RateMatch_PerCORESETPoolIndex_r16_,
      ServingCellConfig_enableTwoDefaultTCI_States_r16 enableTwoDefaultTCI_States_r16_,
      ServingCellConfig_enableDefaultTCI_StatePerCoresetPoolIndex_r16 enableDefaultTCI_StatePerCoresetPoolIndex_r16_,
      ServingCellConfig_enableBeamSwitchTiming_r16 enableBeamSwitchTiming_r16_,
      ServingCellConfig_cbg_TxDiffTBsProcessingType1_r16 cbg_TxDiffTBsProcessingType1_r16_,
      ServingCellConfig_cbg_TxDiffTBsProcessingType2_r16 cbg_TxDiffTBsProcessingType2_r16_,
      ServingCellConfig_directionalCollisionHandling_r16 directionalCollisionHandling_r16_,
      ServingCellConfig_channelAccessConfig_r16 channelAccessConfig_r16_
   ) {
      super();
      tdd_UL_DL_ConfigurationDedicated = tdd_UL_DL_ConfigurationDedicated_;
      initialDownlinkBWP = initialDownlinkBWP_;
      downlinkBWP_ToReleaseList = downlinkBWP_ToReleaseList_;
      downlinkBWP_ToAddModList = downlinkBWP_ToAddModList_;
      firstActiveDownlinkBWP_Id = new BWP_Id (firstActiveDownlinkBWP_Id_);
      bwp_InactivityTimer = bwp_InactivityTimer_;
      defaultDownlinkBWP_Id = new BWP_Id (defaultDownlinkBWP_Id_);
      uplinkConfig = uplinkConfig_;
      supplementaryUplink = supplementaryUplink_;
      pdcch_ServingCellConfig = pdcch_ServingCellConfig_;
      pdsch_ServingCellConfig = pdsch_ServingCellConfig_;
      csi_MeasConfig = csi_MeasConfig_;
      sCellDeactivationTimer = sCellDeactivationTimer_;
      crossCarrierSchedulingConfig = crossCarrierSchedulingConfig_;
      tag_Id = new TAG_Id (tag_Id_);
      dummy1 = dummy1_;
      pathlossReferenceLinking = pathlossReferenceLinking_;
      servingCellMO = new MeasObjectId (servingCellMO_);
      lte_CRS_ToMatchAround = lte_CRS_ToMatchAround_;
      rateMatchPatternToAddModList = rateMatchPatternToAddModList_;
      rateMatchPatternToReleaseList = rateMatchPatternToReleaseList_;
      downlinkChannelBW_PerSCS_List = downlinkChannelBW_PerSCS_List_;
      supplementaryUplinkRelease_r16 = supplementaryUplinkRelease_r16_;
      tdd_UL_DL_ConfigurationDedicated_IAB_MT_r16 = tdd_UL_DL_ConfigurationDedicated_IAB_MT_r16_;
      dormantBWP_Config_r16 = dormantBWP_Config_r16_;
      ca_SlotOffset_r16 = ca_SlotOffset_r16_;
      dummy2 = dummy2_;
      intraCellGuardBandsDL_List_r16 = intraCellGuardBandsDL_List_r16_;
      intraCellGuardBandsUL_List_r16 = intraCellGuardBandsUL_List_r16_;
      csi_RS_ValidationWithDCI_r16 = csi_RS_ValidationWithDCI_r16_;
      lte_CRS_PatternList1_r16 = lte_CRS_PatternList1_r16_;
      lte_CRS_PatternList2_r16 = lte_CRS_PatternList2_r16_;
      crs_RateMatch_PerCORESETPoolIndex_r16 = crs_RateMatch_PerCORESETPoolIndex_r16_;
      enableTwoDefaultTCI_States_r16 = enableTwoDefaultTCI_States_r16_;
      enableDefaultTCI_StatePerCoresetPoolIndex_r16 = enableDefaultTCI_StatePerCoresetPoolIndex_r16_;
      enableBeamSwitchTiming_r16 = enableBeamSwitchTiming_r16_;
      cbg_TxDiffTBsProcessingType1_r16 = cbg_TxDiffTBsProcessingType1_r16_;
      cbg_TxDiffTBsProcessingType2_r16 = cbg_TxDiffTBsProcessingType2_r16_;
      directionalCollisionHandling_r16 = directionalCollisionHandling_r16_;
      channelAccessConfig_r16 = channelAccessConfig_r16_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public ServingCellConfig (
      long tag_Id_
   ) {
      super();
      tag_Id = new TAG_Id (tag_Id_);
   }

   public void init () {
      tdd_UL_DL_ConfigurationDedicated = null;
      initialDownlinkBWP = null;
      downlinkBWP_ToReleaseList = null;
      downlinkBWP_ToAddModList = null;
      firstActiveDownlinkBWP_Id = null;
      bwp_InactivityTimer = null;
      defaultDownlinkBWP_Id = null;
      uplinkConfig = null;
      supplementaryUplink = null;
      pdcch_ServingCellConfig = null;
      pdsch_ServingCellConfig = null;
      csi_MeasConfig = null;
      sCellDeactivationTimer = null;
      crossCarrierSchedulingConfig = null;
      tag_Id = null;
      dummy1 = null;
      pathlossReferenceLinking = null;
      servingCellMO = null;
      lte_CRS_ToMatchAround = null;
      rateMatchPatternToAddModList = null;
      rateMatchPatternToReleaseList = null;
      downlinkChannelBW_PerSCS_List = null;
      supplementaryUplinkRelease_r16 = null;
      tdd_UL_DL_ConfigurationDedicated_IAB_MT_r16 = null;
      dormantBWP_Config_r16 = null;
      ca_SlotOffset_r16 = null;
      dummy2 = null;
      intraCellGuardBandsDL_List_r16 = null;
      intraCellGuardBandsUL_List_r16 = null;
      csi_RS_ValidationWithDCI_r16 = null;
      lte_CRS_PatternList1_r16 = null;
      lte_CRS_PatternList2_r16 = null;
      crs_RateMatch_PerCORESETPoolIndex_r16 = null;
      enableTwoDefaultTCI_States_r16 = null;
      enableDefaultTCI_StatePerCoresetPoolIndex_r16 = null;
      enableBeamSwitchTiming_r16 = null;
      cbg_TxDiffTBsProcessingType1_r16 = null;
      cbg_TxDiffTBsProcessingType2_r16 = null;
      directionalCollisionHandling_r16 = null;
      channelAccessConfig_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 41; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return tdd_UL_DL_ConfigurationDedicated;
         case 1: return initialDownlinkBWP;
         case 2: return downlinkBWP_ToReleaseList;
         case 3: return downlinkBWP_ToAddModList;
         case 4: return firstActiveDownlinkBWP_Id;
         case 5: return bwp_InactivityTimer;
         case 6: return defaultDownlinkBWP_Id;
         case 7: return uplinkConfig;
         case 8: return supplementaryUplink;
         case 9: return pdcch_ServingCellConfig;
         case 10: return pdsch_ServingCellConfig;
         case 11: return csi_MeasConfig;
         case 12: return sCellDeactivationTimer;
         case 13: return crossCarrierSchedulingConfig;
         case 14: return tag_Id;
         case 15: return dummy1;
         case 16: return pathlossReferenceLinking;
         case 17: return servingCellMO;
         case 18: return lte_CRS_ToMatchAround;
         case 19: return rateMatchPatternToAddModList;
         case 20: return rateMatchPatternToReleaseList;
         case 21: return downlinkChannelBW_PerSCS_List;
         case 22: return supplementaryUplinkRelease_r16;
         case 23: return tdd_UL_DL_ConfigurationDedicated_IAB_MT_r16;
         case 24: return dormantBWP_Config_r16;
         case 25: return ca_SlotOffset_r16;
         case 26: return dummy2;
         case 27: return intraCellGuardBandsDL_List_r16;
         case 28: return intraCellGuardBandsUL_List_r16;
         case 29: return csi_RS_ValidationWithDCI_r16;
         case 30: return lte_CRS_PatternList1_r16;
         case 31: return lte_CRS_PatternList2_r16;
         case 32: return crs_RateMatch_PerCORESETPoolIndex_r16;
         case 33: return enableTwoDefaultTCI_States_r16;
         case 34: return enableDefaultTCI_StatePerCoresetPoolIndex_r16;
         case 35: return enableBeamSwitchTiming_r16;
         case 36: return cbg_TxDiffTBsProcessingType1_r16;
         case 37: return cbg_TxDiffTBsProcessingType2_r16;
         case 38: return directionalCollisionHandling_r16;
         case 39: return channelAccessConfig_r16;
         case 40: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "tdd-UL-DL-ConfigurationDedicated";
         case 1: return "initialDownlinkBWP";
         case 2: return "downlinkBWP-ToReleaseList";
         case 3: return "downlinkBWP-ToAddModList";
         case 4: return "firstActiveDownlinkBWP-Id";
         case 5: return "bwp-InactivityTimer";
         case 6: return "defaultDownlinkBWP-Id";
         case 7: return "uplinkConfig";
         case 8: return "supplementaryUplink";
         case 9: return "pdcch-ServingCellConfig";
         case 10: return "pdsch-ServingCellConfig";
         case 11: return "csi-MeasConfig";
         case 12: return "sCellDeactivationTimer";
         case 13: return "crossCarrierSchedulingConfig";
         case 14: return "tag-Id";
         case 15: return "dummy1";
         case 16: return "pathlossReferenceLinking";
         case 17: return "servingCellMO";
         case 18: return "lte-CRS-ToMatchAround";
         case 19: return "rateMatchPatternToAddModList";
         case 20: return "rateMatchPatternToReleaseList";
         case 21: return "downlinkChannelBW-PerSCS-List";
         case 22: return "supplementaryUplinkRelease-r16";
         case 23: return "tdd-UL-DL-ConfigurationDedicated-IAB-MT-r16";
         case 24: return "dormantBWP-Config-r16";
         case 25: return "ca-SlotOffset-r16";
         case 26: return "dummy2";
         case 27: return "intraCellGuardBandsDL-List-r16";
         case 28: return "intraCellGuardBandsUL-List-r16";
         case 29: return "csi-RS-ValidationWithDCI-r16";
         case 30: return "lte-CRS-PatternList1-r16";
         case 31: return "lte-CRS-PatternList2-r16";
         case 32: return "crs-RateMatch-PerCORESETPoolIndex-r16";
         case 33: return "enableTwoDefaultTCI-States-r16";
         case 34: return "enableDefaultTCI-StatePerCoresetPoolIndex-r16";
         case 35: return "enableBeamSwitchTiming-r16";
         case 36: return "cbg-TxDiffTBsProcessingType1-r16";
         case 37: return "cbg-TxDiffTBsProcessingType2-r16";
         case 38: return "directionalCollisionHandling-r16";
         case 39: return "channelAccessConfig-r16";
         case 40: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean tdd_UL_DL_ConfigurationDedicatedPresent = buffer.decodeBit ("tdd_UL_DL_ConfigurationDedicatedPresent");
      boolean initialDownlinkBWPPresent = buffer.decodeBit ("initialDownlinkBWPPresent");
      boolean downlinkBWP_ToReleaseListPresent = buffer.decodeBit ("downlinkBWP_ToReleaseListPresent");
      boolean downlinkBWP_ToAddModListPresent = buffer.decodeBit ("downlinkBWP_ToAddModListPresent");
      boolean firstActiveDownlinkBWP_IdPresent = buffer.decodeBit ("firstActiveDownlinkBWP_IdPresent");
      boolean bwp_InactivityTimerPresent = buffer.decodeBit ("bwp_InactivityTimerPresent");
      boolean defaultDownlinkBWP_IdPresent = buffer.decodeBit ("defaultDownlinkBWP_IdPresent");
      boolean uplinkConfigPresent = buffer.decodeBit ("uplinkConfigPresent");
      boolean supplementaryUplinkPresent = buffer.decodeBit ("supplementaryUplinkPresent");
      boolean pdcch_ServingCellConfigPresent = buffer.decodeBit ("pdcch_ServingCellConfigPresent");
      boolean pdsch_ServingCellConfigPresent = buffer.decodeBit ("pdsch_ServingCellConfigPresent");
      boolean csi_MeasConfigPresent = buffer.decodeBit ("csi_MeasConfigPresent");
      boolean sCellDeactivationTimerPresent = buffer.decodeBit ("sCellDeactivationTimerPresent");
      boolean crossCarrierSchedulingConfigPresent = buffer.decodeBit ("crossCarrierSchedulingConfigPresent");
      boolean dummy1Present = buffer.decodeBit ("dummy1Present");
      boolean pathlossReferenceLinkingPresent = buffer.decodeBit ("pathlossReferenceLinkingPresent");
      boolean servingCellMOPresent = buffer.decodeBit ("servingCellMOPresent");

      // decode tdd_UL_DL_ConfigurationDedicated

      if (tdd_UL_DL_ConfigurationDedicatedPresent) {
         buffer.getContext().eventDispatcher.startElement("tdd_UL_DL_ConfigurationDedicated", -1);

         tdd_UL_DL_ConfigurationDedicated = new TDD_UL_DL_ConfigDedicated();
         tdd_UL_DL_ConfigurationDedicated.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("tdd_UL_DL_ConfigurationDedicated", -1);
      }
      else {
         tdd_UL_DL_ConfigurationDedicated = null;
      }

      // decode initialDownlinkBWP

      if (initialDownlinkBWPPresent) {
         buffer.getContext().eventDispatcher.startElement("initialDownlinkBWP", -1);

         initialDownlinkBWP = new BWP_DownlinkDedicated();
         initialDownlinkBWP.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("initialDownlinkBWP", -1);
      }
      else {
         initialDownlinkBWP = null;
      }

      // decode downlinkBWP_ToReleaseList

      if (downlinkBWP_ToReleaseListPresent) {
         buffer.getContext().eventDispatcher.startElement("downlinkBWP_ToReleaseList", -1);

         downlinkBWP_ToReleaseList = new ServingCellConfig_downlinkBWP_ToReleaseList();
         downlinkBWP_ToReleaseList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("downlinkBWP_ToReleaseList", -1);
      }
      else {
         downlinkBWP_ToReleaseList = null;
      }

      // decode downlinkBWP_ToAddModList

      if (downlinkBWP_ToAddModListPresent) {
         buffer.getContext().eventDispatcher.startElement("downlinkBWP_ToAddModList", -1);

         downlinkBWP_ToAddModList = new ServingCellConfig_downlinkBWP_ToAddModList();
         downlinkBWP_ToAddModList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("downlinkBWP_ToAddModList", -1);
      }
      else {
         downlinkBWP_ToAddModList = null;
      }

      // decode firstActiveDownlinkBWP_Id

      if (firstActiveDownlinkBWP_IdPresent) {
         buffer.getContext().eventDispatcher.startElement("firstActiveDownlinkBWP_Id", -1);

         firstActiveDownlinkBWP_Id = new BWP_Id();
         firstActiveDownlinkBWP_Id.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("firstActiveDownlinkBWP_Id", -1);
      }
      else {
         firstActiveDownlinkBWP_Id = null;
      }

      // decode bwp_InactivityTimer

      if (bwp_InactivityTimerPresent) {
         buffer.getContext().eventDispatcher.startElement("bwp_InactivityTimer", -1);

         int tval = ServingCellConfig_bwp_InactivityTimer.decodeEnumValue (buffer);
         bwp_InactivityTimer = ServingCellConfig_bwp_InactivityTimer.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("bwp_InactivityTimer", -1);
      }
      else {
         bwp_InactivityTimer = null;
      }

      // decode defaultDownlinkBWP_Id

      if (defaultDownlinkBWP_IdPresent) {
         buffer.getContext().eventDispatcher.startElement("defaultDownlinkBWP_Id", -1);

         defaultDownlinkBWP_Id = new BWP_Id();
         defaultDownlinkBWP_Id.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("defaultDownlinkBWP_Id", -1);
      }
      else {
         defaultDownlinkBWP_Id = null;
      }

      // decode uplinkConfig

      if (uplinkConfigPresent) {
         buffer.getContext().eventDispatcher.startElement("uplinkConfig", -1);

         uplinkConfig = new UplinkConfig();
         uplinkConfig.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("uplinkConfig", -1);
      }
      else {
         uplinkConfig = null;
      }

      // decode supplementaryUplink

      if (supplementaryUplinkPresent) {
         buffer.getContext().eventDispatcher.startElement("supplementaryUplink", -1);

         supplementaryUplink = new UplinkConfig();
         supplementaryUplink.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("supplementaryUplink", -1);
      }
      else {
         supplementaryUplink = null;
      }

      // decode pdcch_ServingCellConfig

      if (pdcch_ServingCellConfigPresent) {
         buffer.getContext().eventDispatcher.startElement("pdcch_ServingCellConfig", -1);

         pdcch_ServingCellConfig = new ServingCellConfig_pdcch_ServingCellConfig();
         pdcch_ServingCellConfig.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("pdcch_ServingCellConfig", -1);
      }
      else {
         pdcch_ServingCellConfig = null;
      }

      // decode pdsch_ServingCellConfig

      if (pdsch_ServingCellConfigPresent) {
         buffer.getContext().eventDispatcher.startElement("pdsch_ServingCellConfig", -1);

         pdsch_ServingCellConfig = new ServingCellConfig_pdsch_ServingCellConfig();
         pdsch_ServingCellConfig.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("pdsch_ServingCellConfig", -1);
      }
      else {
         pdsch_ServingCellConfig = null;
      }

      // decode csi_MeasConfig

      if (csi_MeasConfigPresent) {
         buffer.getContext().eventDispatcher.startElement("csi_MeasConfig", -1);

         csi_MeasConfig = new ServingCellConfig_csi_MeasConfig();
         csi_MeasConfig.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("csi_MeasConfig", -1);
      }
      else {
         csi_MeasConfig = null;
      }

      // decode sCellDeactivationTimer

      if (sCellDeactivationTimerPresent) {
         buffer.getContext().eventDispatcher.startElement("sCellDeactivationTimer", -1);

         int tval = ServingCellConfig_sCellDeactivationTimer.decodeEnumValue (buffer);
         sCellDeactivationTimer = ServingCellConfig_sCellDeactivationTimer.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("sCellDeactivationTimer", -1);
      }
      else {
         sCellDeactivationTimer = null;
      }

      // decode crossCarrierSchedulingConfig

      if (crossCarrierSchedulingConfigPresent) {
         buffer.getContext().eventDispatcher.startElement("crossCarrierSchedulingConfig", -1);

         crossCarrierSchedulingConfig = new CrossCarrierSchedulingConfig();
         crossCarrierSchedulingConfig.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("crossCarrierSchedulingConfig", -1);
      }
      else {
         crossCarrierSchedulingConfig = null;
      }

      // decode tag_Id

      buffer.getContext().eventDispatcher.startElement("tag_Id", -1);

      tag_Id = new TAG_Id();
      tag_Id.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("tag_Id", -1);

      // decode dummy1

      if (dummy1Present) {
         buffer.getContext().eventDispatcher.startElement("dummy1", -1);

         int tval = ServingCellConfig_dummy1.decodeEnumValue (buffer);
         dummy1 = ServingCellConfig_dummy1.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("dummy1", -1);
      }
      else {
         dummy1 = null;
      }

      // decode pathlossReferenceLinking

      if (pathlossReferenceLinkingPresent) {
         buffer.getContext().eventDispatcher.startElement("pathlossReferenceLinking", -1);

         int tval = ServingCellConfig_pathlossReferenceLinking.decodeEnumValue (buffer);
         pathlossReferenceLinking = ServingCellConfig_pathlossReferenceLinking.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("pathlossReferenceLinking", -1);
      }
      else {
         pathlossReferenceLinking = null;
      }

      // decode servingCellMO

      if (servingCellMOPresent) {
         buffer.getContext().eventDispatcher.startElement("servingCellMO", -1);

         servingCellMO = new MeasObjectId();
         servingCellMO.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("servingCellMO", -1);
      }
      else {
         servingCellMO = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV4ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean lte_CRS_ToMatchAroundPresent = buffer.decodeBit ("lte_CRS_ToMatchAroundPresent");

            boolean rateMatchPatternToAddModListPresent = buffer.decodeBit ("rateMatchPatternToAddModListPresent");

            boolean rateMatchPatternToReleaseListPresent = buffer.decodeBit ("rateMatchPatternToReleaseListPresent");

            boolean downlinkChannelBW_PerSCS_ListPresent = buffer.decodeBit ("downlinkChannelBW_PerSCS_ListPresent");

            // decode lte_CRS_ToMatchAround

            if (lte_CRS_ToMatchAroundPresent) {
               buffer.getContext().eventDispatcher.startElement("lte_CRS_ToMatchAround", -1);

               lte_CRS_ToMatchAround = new ServingCellConfig_lte_CRS_ToMatchAround();
               lte_CRS_ToMatchAround.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("lte_CRS_ToMatchAround", -1);
            }
            else {
               lte_CRS_ToMatchAround = null;
            }

            // decode rateMatchPatternToAddModList

            if (rateMatchPatternToAddModListPresent) {
               buffer.getContext().eventDispatcher.startElement("rateMatchPatternToAddModList", -1);

               rateMatchPatternToAddModList = new ServingCellConfig_rateMatchPatternToAddModList();
               rateMatchPatternToAddModList.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("rateMatchPatternToAddModList", -1);
            }
            else {
               rateMatchPatternToAddModList = null;
            }

            // decode rateMatchPatternToReleaseList

            if (rateMatchPatternToReleaseListPresent) {
               buffer.getContext().eventDispatcher.startElement("rateMatchPatternToReleaseList", -1);

               rateMatchPatternToReleaseList = new ServingCellConfig_rateMatchPatternToReleaseList();
               rateMatchPatternToReleaseList.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("rateMatchPatternToReleaseList", -1);
            }
            else {
               rateMatchPatternToReleaseList = null;
            }

            // decode downlinkChannelBW_PerSCS_List

            if (downlinkChannelBW_PerSCS_ListPresent) {
               buffer.getContext().eventDispatcher.startElement("downlinkChannelBW_PerSCS_List", -1);

               downlinkChannelBW_PerSCS_List = new ServingCellConfig_downlinkChannelBW_PerSCS_List();
               downlinkChannelBW_PerSCS_List.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("downlinkChannelBW_PerSCS_List", -1);
            }
            else {
               downlinkChannelBW_PerSCS_List = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean supplementaryUplinkRelease_r16Present = buffer.decodeBit ("supplementaryUplinkRelease_r16Present");

            boolean tdd_UL_DL_ConfigurationDedicated_IAB_MT_r16Present = buffer.decodeBit ("tdd_UL_DL_ConfigurationDedicated_IAB_MT_r16Present");

            boolean dormantBWP_Config_r16Present = buffer.decodeBit ("dormantBWP_Config_r16Present");

            boolean ca_SlotOffset_r16Present = buffer.decodeBit ("ca_SlotOffset_r16Present");

            boolean dummy2Present = buffer.decodeBit ("dummy2Present");

            boolean intraCellGuardBandsDL_List_r16Present = buffer.decodeBit ("intraCellGuardBandsDL_List_r16Present");

            boolean intraCellGuardBandsUL_List_r16Present = buffer.decodeBit ("intraCellGuardBandsUL_List_r16Present");

            boolean csi_RS_ValidationWithDCI_r16Present = buffer.decodeBit ("csi_RS_ValidationWithDCI_r16Present");

            boolean lte_CRS_PatternList1_r16Present = buffer.decodeBit ("lte_CRS_PatternList1_r16Present");

            boolean lte_CRS_PatternList2_r16Present = buffer.decodeBit ("lte_CRS_PatternList2_r16Present");

            boolean crs_RateMatch_PerCORESETPoolIndex_r16Present = buffer.decodeBit ("crs_RateMatch_PerCORESETPoolIndex_r16Present");

            boolean enableTwoDefaultTCI_States_r16Present = buffer.decodeBit ("enableTwoDefaultTCI_States_r16Present");

            boolean enableDefaultTCI_StatePerCoresetPoolIndex_r16Present = buffer.decodeBit ("enableDefaultTCI_StatePerCoresetPoolIndex_r16Present");

            boolean enableBeamSwitchTiming_r16Present = buffer.decodeBit ("enableBeamSwitchTiming_r16Present");

            boolean cbg_TxDiffTBsProcessingType1_r16Present = buffer.decodeBit ("cbg_TxDiffTBsProcessingType1_r16Present");

            boolean cbg_TxDiffTBsProcessingType2_r16Present = buffer.decodeBit ("cbg_TxDiffTBsProcessingType2_r16Present");

            // decode supplementaryUplinkRelease_r16

            if (supplementaryUplinkRelease_r16Present) {
               buffer.getContext().eventDispatcher.startElement("supplementaryUplinkRelease_r16", -1);

               int tval = ServingCellConfig_supplementaryUplinkRelease_r16.decodeEnumValue (buffer);
               supplementaryUplinkRelease_r16 = ServingCellConfig_supplementaryUplinkRelease_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("supplementaryUplinkRelease_r16", -1);
            }
            else {
               supplementaryUplinkRelease_r16 = null;
            }

            // decode tdd_UL_DL_ConfigurationDedicated_IAB_MT_r16

            if (tdd_UL_DL_ConfigurationDedicated_IAB_MT_r16Present) {
               buffer.getContext().eventDispatcher.startElement("tdd_UL_DL_ConfigurationDedicated_IAB_MT_r16", -1);

               tdd_UL_DL_ConfigurationDedicated_IAB_MT_r16 = new TDD_UL_DL_ConfigDedicated_IAB_MT_r16();
               tdd_UL_DL_ConfigurationDedicated_IAB_MT_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("tdd_UL_DL_ConfigurationDedicated_IAB_MT_r16", -1);
            }
            else {
               tdd_UL_DL_ConfigurationDedicated_IAB_MT_r16 = null;
            }

            // decode dormantBWP_Config_r16

            if (dormantBWP_Config_r16Present) {
               buffer.getContext().eventDispatcher.startElement("dormantBWP_Config_r16", -1);

               dormantBWP_Config_r16 = new ServingCellConfig_dormantBWP_Config_r16();
               dormantBWP_Config_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("dormantBWP_Config_r16", -1);
            }
            else {
               dormantBWP_Config_r16 = null;
            }

            // decode ca_SlotOffset_r16

            if (ca_SlotOffset_r16Present) {
               buffer.getContext().eventDispatcher.startElement("ca_SlotOffset_r16", -1);

               ca_SlotOffset_r16 = new ServingCellConfig_ca_SlotOffset_r16();
               ca_SlotOffset_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("ca_SlotOffset_r16", -1);
            }
            else {
               ca_SlotOffset_r16 = null;
            }

            // decode dummy2

            if (dummy2Present) {
               buffer.getContext().eventDispatcher.startElement("dummy2", -1);

               dummy2 = new ServingCellConfig_dummy2();
               dummy2.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("dummy2", -1);
            }
            else {
               dummy2 = null;
            }

            // decode intraCellGuardBandsDL_List_r16

            if (intraCellGuardBandsDL_List_r16Present) {
               buffer.getContext().eventDispatcher.startElement("intraCellGuardBandsDL_List_r16", -1);

               intraCellGuardBandsDL_List_r16 = new ServingCellConfig_intraCellGuardBandsDL_List_r16();
               intraCellGuardBandsDL_List_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("intraCellGuardBandsDL_List_r16", -1);
            }
            else {
               intraCellGuardBandsDL_List_r16 = null;
            }

            // decode intraCellGuardBandsUL_List_r16

            if (intraCellGuardBandsUL_List_r16Present) {
               buffer.getContext().eventDispatcher.startElement("intraCellGuardBandsUL_List_r16", -1);

               intraCellGuardBandsUL_List_r16 = new ServingCellConfig_intraCellGuardBandsUL_List_r16();
               intraCellGuardBandsUL_List_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("intraCellGuardBandsUL_List_r16", -1);
            }
            else {
               intraCellGuardBandsUL_List_r16 = null;
            }

            // decode csi_RS_ValidationWithDCI_r16

            if (csi_RS_ValidationWithDCI_r16Present) {
               buffer.getContext().eventDispatcher.startElement("csi_RS_ValidationWithDCI_r16", -1);

               int tval = ServingCellConfig_csi_RS_ValidationWithDCI_r16.decodeEnumValue (buffer);
               csi_RS_ValidationWithDCI_r16 = ServingCellConfig_csi_RS_ValidationWithDCI_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("csi_RS_ValidationWithDCI_r16", -1);
            }
            else {
               csi_RS_ValidationWithDCI_r16 = null;
            }

            // decode lte_CRS_PatternList1_r16

            if (lte_CRS_PatternList1_r16Present) {
               buffer.getContext().eventDispatcher.startElement("lte_CRS_PatternList1_r16", -1);

               lte_CRS_PatternList1_r16 = new ServingCellConfig_lte_CRS_PatternList1_r16();
               lte_CRS_PatternList1_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("lte_CRS_PatternList1_r16", -1);
            }
            else {
               lte_CRS_PatternList1_r16 = null;
            }

            // decode lte_CRS_PatternList2_r16

            if (lte_CRS_PatternList2_r16Present) {
               buffer.getContext().eventDispatcher.startElement("lte_CRS_PatternList2_r16", -1);

               lte_CRS_PatternList2_r16 = new ServingCellConfig_lte_CRS_PatternList2_r16();
               lte_CRS_PatternList2_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("lte_CRS_PatternList2_r16", -1);
            }
            else {
               lte_CRS_PatternList2_r16 = null;
            }

            // decode crs_RateMatch_PerCORESETPoolIndex_r16

            if (crs_RateMatch_PerCORESETPoolIndex_r16Present) {
               buffer.getContext().eventDispatcher.startElement("crs_RateMatch_PerCORESETPoolIndex_r16", -1);

               int tval = ServingCellConfig_crs_RateMatch_PerCORESETPoolIndex_r16.decodeEnumValue (buffer);
               crs_RateMatch_PerCORESETPoolIndex_r16 = ServingCellConfig_crs_RateMatch_PerCORESETPoolIndex_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("crs_RateMatch_PerCORESETPoolIndex_r16", -1);
            }
            else {
               crs_RateMatch_PerCORESETPoolIndex_r16 = null;
            }

            // decode enableTwoDefaultTCI_States_r16

            if (enableTwoDefaultTCI_States_r16Present) {
               buffer.getContext().eventDispatcher.startElement("enableTwoDefaultTCI_States_r16", -1);

               int tval = ServingCellConfig_enableTwoDefaultTCI_States_r16.decodeEnumValue (buffer);
               enableTwoDefaultTCI_States_r16 = ServingCellConfig_enableTwoDefaultTCI_States_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("enableTwoDefaultTCI_States_r16", -1);
            }
            else {
               enableTwoDefaultTCI_States_r16 = null;
            }

            // decode enableDefaultTCI_StatePerCoresetPoolIndex_r16

            if (enableDefaultTCI_StatePerCoresetPoolIndex_r16Present) {
               buffer.getContext().eventDispatcher.startElement("enableDefaultTCI_StatePerCoresetPoolIndex_r16", -1);

               int tval = ServingCellConfig_enableDefaultTCI_StatePerCoresetPoolIndex_r16.decodeEnumValue (buffer);
               enableDefaultTCI_StatePerCoresetPoolIndex_r16 = ServingCellConfig_enableDefaultTCI_StatePerCoresetPoolIndex_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("enableDefaultTCI_StatePerCoresetPoolIndex_r16", -1);
            }
            else {
               enableDefaultTCI_StatePerCoresetPoolIndex_r16 = null;
            }

            // decode enableBeamSwitchTiming_r16

            if (enableBeamSwitchTiming_r16Present) {
               buffer.getContext().eventDispatcher.startElement("enableBeamSwitchTiming_r16", -1);

               int tval = ServingCellConfig_enableBeamSwitchTiming_r16.decodeEnumValue (buffer);
               enableBeamSwitchTiming_r16 = ServingCellConfig_enableBeamSwitchTiming_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("enableBeamSwitchTiming_r16", -1);
            }
            else {
               enableBeamSwitchTiming_r16 = null;
            }

            // decode cbg_TxDiffTBsProcessingType1_r16

            if (cbg_TxDiffTBsProcessingType1_r16Present) {
               buffer.getContext().eventDispatcher.startElement("cbg_TxDiffTBsProcessingType1_r16", -1);

               int tval = ServingCellConfig_cbg_TxDiffTBsProcessingType1_r16.decodeEnumValue (buffer);
               cbg_TxDiffTBsProcessingType1_r16 = ServingCellConfig_cbg_TxDiffTBsProcessingType1_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("cbg_TxDiffTBsProcessingType1_r16", -1);
            }
            else {
               cbg_TxDiffTBsProcessingType1_r16 = null;
            }

            // decode cbg_TxDiffTBsProcessingType2_r16

            if (cbg_TxDiffTBsProcessingType2_r16Present) {
               buffer.getContext().eventDispatcher.startElement("cbg_TxDiffTBsProcessingType2_r16", -1);

               int tval = ServingCellConfig_cbg_TxDiffTBsProcessingType2_r16.decodeEnumValue (buffer);
               cbg_TxDiffTBsProcessingType2_r16 = ServingCellConfig_cbg_TxDiffTBsProcessingType2_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("cbg_TxDiffTBsProcessingType2_r16", -1);
            }
            else {
               cbg_TxDiffTBsProcessingType2_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV4ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean directionalCollisionHandling_r16Present = buffer.decodeBit ("directionalCollisionHandling_r16Present");

            boolean channelAccessConfig_r16Present = buffer.decodeBit ("channelAccessConfig_r16Present");

            // decode directionalCollisionHandling_r16

            if (directionalCollisionHandling_r16Present) {
               buffer.getContext().eventDispatcher.startElement("directionalCollisionHandling_r16", -1);

               int tval = ServingCellConfig_directionalCollisionHandling_r16.decodeEnumValue (buffer);
               directionalCollisionHandling_r16 = ServingCellConfig_directionalCollisionHandling_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("directionalCollisionHandling_r16", -1);
            }
            else {
               directionalCollisionHandling_r16 = null;
            }

            // decode channelAccessConfig_r16

            if (channelAccessConfig_r16Present) {
               buffer.getContext().eventDispatcher.startElement("channelAccessConfig_r16", -1);

               channelAccessConfig_r16 = new ServingCellConfig_channelAccessConfig_r16();
               channelAccessConfig_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("channelAccessConfig_r16", -1);
            }
            else {
               channelAccessConfig_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (tdd_UL_DL_ConfigurationDedicated != null) tdd_UL_DL_ConfigurationDedicated.print (_sb, "tdd_UL_DL_ConfigurationDedicated", _level+1);
      if (initialDownlinkBWP != null) initialDownlinkBWP.print (_sb, "initialDownlinkBWP", _level+1);
      if (downlinkBWP_ToReleaseList != null) downlinkBWP_ToReleaseList.print (_sb, "downlinkBWP_ToReleaseList", _level+1);
      if (downlinkBWP_ToAddModList != null) downlinkBWP_ToAddModList.print (_sb, "downlinkBWP_ToAddModList", _level+1);
      if (firstActiveDownlinkBWP_Id != null) firstActiveDownlinkBWP_Id.print (_sb, "firstActiveDownlinkBWP_Id", _level+1);
      if (bwp_InactivityTimer != null) bwp_InactivityTimer.print (_sb, "bwp_InactivityTimer", _level+1);
      if (defaultDownlinkBWP_Id != null) defaultDownlinkBWP_Id.print (_sb, "defaultDownlinkBWP_Id", _level+1);
      if (uplinkConfig != null) uplinkConfig.print (_sb, "uplinkConfig", _level+1);
      if (supplementaryUplink != null) supplementaryUplink.print (_sb, "supplementaryUplink", _level+1);
      if (pdcch_ServingCellConfig != null) pdcch_ServingCellConfig.print (_sb, "pdcch_ServingCellConfig", _level+1);
      if (pdsch_ServingCellConfig != null) pdsch_ServingCellConfig.print (_sb, "pdsch_ServingCellConfig", _level+1);
      if (csi_MeasConfig != null) csi_MeasConfig.print (_sb, "csi_MeasConfig", _level+1);
      if (sCellDeactivationTimer != null) sCellDeactivationTimer.print (_sb, "sCellDeactivationTimer", _level+1);
      if (crossCarrierSchedulingConfig != null) crossCarrierSchedulingConfig.print (_sb, "crossCarrierSchedulingConfig", _level+1);
      if (tag_Id != null) tag_Id.print (_sb, "tag_Id", _level+1);
      if (dummy1 != null) dummy1.print (_sb, "dummy1", _level+1);
      if (pathlossReferenceLinking != null) pathlossReferenceLinking.print (_sb, "pathlossReferenceLinking", _level+1);
      if (servingCellMO != null) servingCellMO.print (_sb, "servingCellMO", _level+1);
      if (lte_CRS_ToMatchAround != null) lte_CRS_ToMatchAround.print (_sb, "lte_CRS_ToMatchAround", _level+1);
      if (rateMatchPatternToAddModList != null) rateMatchPatternToAddModList.print (_sb, "rateMatchPatternToAddModList", _level+1);
      if (rateMatchPatternToReleaseList != null) rateMatchPatternToReleaseList.print (_sb, "rateMatchPatternToReleaseList", _level+1);
      if (downlinkChannelBW_PerSCS_List != null) downlinkChannelBW_PerSCS_List.print (_sb, "downlinkChannelBW_PerSCS_List", _level+1);
      if (supplementaryUplinkRelease_r16 != null) supplementaryUplinkRelease_r16.print (_sb, "supplementaryUplinkRelease_r16", _level+1);
      if (tdd_UL_DL_ConfigurationDedicated_IAB_MT_r16 != null) tdd_UL_DL_ConfigurationDedicated_IAB_MT_r16.print (_sb, "tdd_UL_DL_ConfigurationDedicated_IAB_MT_r16", _level+1);
      if (dormantBWP_Config_r16 != null) dormantBWP_Config_r16.print (_sb, "dormantBWP_Config_r16", _level+1);
      if (ca_SlotOffset_r16 != null) ca_SlotOffset_r16.print (_sb, "ca_SlotOffset_r16", _level+1);
      if (dummy2 != null) dummy2.print (_sb, "dummy2", _level+1);
      if (intraCellGuardBandsDL_List_r16 != null) intraCellGuardBandsDL_List_r16.print (_sb, "intraCellGuardBandsDL_List_r16", _level+1);
      if (intraCellGuardBandsUL_List_r16 != null) intraCellGuardBandsUL_List_r16.print (_sb, "intraCellGuardBandsUL_List_r16", _level+1);
      if (csi_RS_ValidationWithDCI_r16 != null) csi_RS_ValidationWithDCI_r16.print (_sb, "csi_RS_ValidationWithDCI_r16", _level+1);
      if (lte_CRS_PatternList1_r16 != null) lte_CRS_PatternList1_r16.print (_sb, "lte_CRS_PatternList1_r16", _level+1);
      if (lte_CRS_PatternList2_r16 != null) lte_CRS_PatternList2_r16.print (_sb, "lte_CRS_PatternList2_r16", _level+1);
      if (crs_RateMatch_PerCORESETPoolIndex_r16 != null) crs_RateMatch_PerCORESETPoolIndex_r16.print (_sb, "crs_RateMatch_PerCORESETPoolIndex_r16", _level+1);
      if (enableTwoDefaultTCI_States_r16 != null) enableTwoDefaultTCI_States_r16.print (_sb, "enableTwoDefaultTCI_States_r16", _level+1);
      if (enableDefaultTCI_StatePerCoresetPoolIndex_r16 != null) enableDefaultTCI_StatePerCoresetPoolIndex_r16.print (_sb, "enableDefaultTCI_StatePerCoresetPoolIndex_r16", _level+1);
      if (enableBeamSwitchTiming_r16 != null) enableBeamSwitchTiming_r16.print (_sb, "enableBeamSwitchTiming_r16", _level+1);
      if (cbg_TxDiffTBsProcessingType1_r16 != null) cbg_TxDiffTBsProcessingType1_r16.print (_sb, "cbg_TxDiffTBsProcessingType1_r16", _level+1);
      if (cbg_TxDiffTBsProcessingType2_r16 != null) cbg_TxDiffTBsProcessingType2_r16.print (_sb, "cbg_TxDiffTBsProcessingType2_r16", _level+1);
      if (directionalCollisionHandling_r16 != null) directionalCollisionHandling_r16.print (_sb, "directionalCollisionHandling_r16", _level+1);
      if (channelAccessConfig_r16 != null) channelAccessConfig_r16.print (_sb, "channelAccessConfig_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
