/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class Phy_Parameters extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "Phy-Parameters";
   }

   public Phy_ParametersCommon phy_ParametersCommon;  // optional
   public Phy_ParametersXDD_Diff phy_ParametersXDD_Diff;  // optional
   public Phy_ParametersFRX_Diff phy_ParametersFRX_Diff;  // optional
   public Phy_ParametersFR1 phy_ParametersFR1;  // optional
   public Phy_ParametersFR2 phy_ParametersFR2;  // optional

   public Phy_Parameters () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public Phy_Parameters (
      Phy_ParametersCommon phy_ParametersCommon_,
      Phy_ParametersXDD_Diff phy_ParametersXDD_Diff_,
      Phy_ParametersFRX_Diff phy_ParametersFRX_Diff_,
      Phy_ParametersFR1 phy_ParametersFR1_,
      Phy_ParametersFR2 phy_ParametersFR2_
   ) {
      super();
      phy_ParametersCommon = phy_ParametersCommon_;
      phy_ParametersXDD_Diff = phy_ParametersXDD_Diff_;
      phy_ParametersFRX_Diff = phy_ParametersFRX_Diff_;
      phy_ParametersFR1 = phy_ParametersFR1_;
      phy_ParametersFR2 = phy_ParametersFR2_;
   }

   public void init () {
      phy_ParametersCommon = null;
      phy_ParametersXDD_Diff = null;
      phy_ParametersFRX_Diff = null;
      phy_ParametersFR1 = null;
      phy_ParametersFR2 = null;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return phy_ParametersCommon;
         case 1: return phy_ParametersXDD_Diff;
         case 2: return phy_ParametersFRX_Diff;
         case 3: return phy_ParametersFR1;
         case 4: return phy_ParametersFR2;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "phy-ParametersCommon";
         case 1: return "phy-ParametersXDD-Diff";
         case 2: return "phy-ParametersFRX-Diff";
         case 3: return "phy-ParametersFR1";
         case 4: return "phy-ParametersFR2";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean phy_ParametersCommonPresent = buffer.decodeBit ("phy_ParametersCommonPresent");
      boolean phy_ParametersXDD_DiffPresent = buffer.decodeBit ("phy_ParametersXDD_DiffPresent");
      boolean phy_ParametersFRX_DiffPresent = buffer.decodeBit ("phy_ParametersFRX_DiffPresent");
      boolean phy_ParametersFR1Present = buffer.decodeBit ("phy_ParametersFR1Present");
      boolean phy_ParametersFR2Present = buffer.decodeBit ("phy_ParametersFR2Present");

      // decode phy_ParametersCommon

      if (phy_ParametersCommonPresent) {
         buffer.getContext().eventDispatcher.startElement("phy_ParametersCommon", -1);

         phy_ParametersCommon = new Phy_ParametersCommon();
         phy_ParametersCommon.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("phy_ParametersCommon", -1);
      }
      else {
         phy_ParametersCommon = null;
      }

      // decode phy_ParametersXDD_Diff

      if (phy_ParametersXDD_DiffPresent) {
         buffer.getContext().eventDispatcher.startElement("phy_ParametersXDD_Diff", -1);

         phy_ParametersXDD_Diff = new Phy_ParametersXDD_Diff();
         phy_ParametersXDD_Diff.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("phy_ParametersXDD_Diff", -1);
      }
      else {
         phy_ParametersXDD_Diff = null;
      }

      // decode phy_ParametersFRX_Diff

      if (phy_ParametersFRX_DiffPresent) {
         buffer.getContext().eventDispatcher.startElement("phy_ParametersFRX_Diff", -1);

         phy_ParametersFRX_Diff = new Phy_ParametersFRX_Diff();
         phy_ParametersFRX_Diff.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("phy_ParametersFRX_Diff", -1);
      }
      else {
         phy_ParametersFRX_Diff = null;
      }

      // decode phy_ParametersFR1

      if (phy_ParametersFR1Present) {
         buffer.getContext().eventDispatcher.startElement("phy_ParametersFR1", -1);

         phy_ParametersFR1 = new Phy_ParametersFR1();
         phy_ParametersFR1.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("phy_ParametersFR1", -1);
      }
      else {
         phy_ParametersFR1 = null;
      }

      // decode phy_ParametersFR2

      if (phy_ParametersFR2Present) {
         buffer.getContext().eventDispatcher.startElement("phy_ParametersFR2", -1);

         phy_ParametersFR2 = new Phy_ParametersFR2();
         phy_ParametersFR2.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("phy_ParametersFR2", -1);
      }
      else {
         phy_ParametersFR2 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (phy_ParametersCommon != null) phy_ParametersCommon.print (_sb, "phy_ParametersCommon", _level+1);
      if (phy_ParametersXDD_Diff != null) phy_ParametersXDD_Diff.print (_sb, "phy_ParametersXDD_Diff", _level+1);
      if (phy_ParametersFRX_Diff != null) phy_ParametersFRX_Diff.print (_sb, "phy_ParametersFRX_Diff", _level+1);
      if (phy_ParametersFR1 != null) phy_ParametersFR1.print (_sb, "phy_ParametersFR1", _level+1);
      if (phy_ParametersFR2 != null) phy_ParametersFR2.print (_sb, "phy_ParametersFR2", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
