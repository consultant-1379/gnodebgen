/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SchedulingRequestToAddMod_sr_ProhibitTimer extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ENUMERATED";
   }

   // Integer constants for switch-case
   public static final int _MS1 = 0;
   public static final int _MS2 = 1;
   public static final int _MS4 = 2;
   public static final int _MS8 = 3;
   public static final int _MS16 = 4;
   public static final int _MS32 = 5;
   public static final int _MS64 = 6;
   public static final int _MS128 = 7;

   // Singleton instances of SchedulingRequestToAddMod_sr_ProhibitTimer
   protected static final SchedulingRequestToAddMod_sr_ProhibitTimer _ms1 = new SchedulingRequestToAddMod_sr_ProhibitTimer(0);
   protected static final SchedulingRequestToAddMod_sr_ProhibitTimer _ms2 = new SchedulingRequestToAddMod_sr_ProhibitTimer(1);
   protected static final SchedulingRequestToAddMod_sr_ProhibitTimer _ms4 = new SchedulingRequestToAddMod_sr_ProhibitTimer(2);
   protected static final SchedulingRequestToAddMod_sr_ProhibitTimer _ms8 = new SchedulingRequestToAddMod_sr_ProhibitTimer(3);
   protected static final SchedulingRequestToAddMod_sr_ProhibitTimer _ms16 = new SchedulingRequestToAddMod_sr_ProhibitTimer(4);
   protected static final SchedulingRequestToAddMod_sr_ProhibitTimer _ms32 = new SchedulingRequestToAddMod_sr_ProhibitTimer(5);
   protected static final SchedulingRequestToAddMod_sr_ProhibitTimer _ms64 = new SchedulingRequestToAddMod_sr_ProhibitTimer(6);
   protected static final SchedulingRequestToAddMod_sr_ProhibitTimer _ms128 = new SchedulingRequestToAddMod_sr_ProhibitTimer(7);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    *   7
    */
   protected SchedulingRequestToAddMod_sr_ProhibitTimer (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for ms1.
    */
   public static SchedulingRequestToAddMod_sr_ProhibitTimer ms1() {
      return _ms1;
   }

   /**
    * Singleton accessor method for ms2.
    */
   public static SchedulingRequestToAddMod_sr_ProhibitTimer ms2() {
      return _ms2;
   }

   /**
    * Singleton accessor method for ms4.
    */
   public static SchedulingRequestToAddMod_sr_ProhibitTimer ms4() {
      return _ms4;
   }

   /**
    * Singleton accessor method for ms8.
    */
   public static SchedulingRequestToAddMod_sr_ProhibitTimer ms8() {
      return _ms8;
   }

   /**
    * Singleton accessor method for ms16.
    */
   public static SchedulingRequestToAddMod_sr_ProhibitTimer ms16() {
      return _ms16;
   }

   /**
    * Singleton accessor method for ms32.
    */
   public static SchedulingRequestToAddMod_sr_ProhibitTimer ms32() {
      return _ms32;
   }

   /**
    * Singleton accessor method for ms64.
    */
   public static SchedulingRequestToAddMod_sr_ProhibitTimer ms64() {
      return _ms64;
   }

   /**
    * Singleton accessor method for ms128.
    */
   public static SchedulingRequestToAddMod_sr_ProhibitTimer ms128() {
      return _ms128;
   }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return SchedulingRequestToAddMod_sr_ProhibitTimer.valueOf( SchedulingRequestToAddMod_sr_ProhibitTimer.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static SchedulingRequestToAddMod_sr_ProhibitTimer valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 0: return ms1();
         case 1: return ms2();
         case 2: return ms4();
         case 3: return ms8();
         case 4: return ms16();
         case 5: return ms32();
         case 6: return ms64();
         case 7: return ms128();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      ui = (int) buffer.decodeConsWholeNumber (8);

      switch (ui) {
         case 0: ret =  0; break;
         case 1: ret =  1; break;
         case 2: ret =  2; break;
         case 3: ret =  3; break;
         case 4: ret =  4; break;
         case 5: ret =  5; break;
         case 6: ret =  6; break;
         case 7: ret =  7; break;
         default: throw new Asn1InvalidEnumException (ui);
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (SchedulingRequestToAddMod_sr_ProhibitTimer.valueOf(ret).toString());

      return ret;
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("ms1");
         case 1: return ("ms2");
         case 2: return ("ms4");
         case 3: return ("ms8");
         case 4: return ("ms16");
         case 5: return ("ms32");
         case 6: return ("ms64");
         case 7: return ("ms128");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
