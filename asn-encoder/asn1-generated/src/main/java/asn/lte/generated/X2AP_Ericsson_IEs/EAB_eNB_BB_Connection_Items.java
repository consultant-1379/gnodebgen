/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.X2AP_Ericsson_IEs;

import com.objsys.asn1j.runtime.*;

public class EAB_eNB_BB_Connection_Items extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_X2AP_Ericsson_IEsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "EAB-eNB-BB-Connection-Items";
   }

   public Asn1Integer connectionType;
   public Asn1Integer sessionIdentity;
   public Asn1Integer xcepId;
   public Asn1Integer xqueueId;
   public Asn1OctetString eMCA_MAC_Address;
   public EAB_eNB_BB_Connection_Items_iE_Extensions iE_Extensions;  // optional
   public Asn1OpenExt extElem1;

   public EAB_eNB_BB_Connection_Items () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public EAB_eNB_BB_Connection_Items (
      Asn1Integer connectionType_,
      Asn1Integer sessionIdentity_,
      Asn1Integer xcepId_,
      Asn1Integer xqueueId_,
      Asn1OctetString eMCA_MAC_Address_,
      EAB_eNB_BB_Connection_Items_iE_Extensions iE_Extensions_
   ) {
      super();
      connectionType = connectionType_;
      sessionIdentity = sessionIdentity_;
      xcepId = xcepId_;
      xqueueId = xqueueId_;
      eMCA_MAC_Address = eMCA_MAC_Address_;
      iE_Extensions = iE_Extensions_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public EAB_eNB_BB_Connection_Items (
      Asn1Integer connectionType_,
      Asn1Integer sessionIdentity_,
      Asn1Integer xcepId_,
      Asn1Integer xqueueId_,
      Asn1OctetString eMCA_MAC_Address_
   ) {
      super();
      connectionType = connectionType_;
      sessionIdentity = sessionIdentity_;
      xcepId = xcepId_;
      xqueueId = xqueueId_;
      eMCA_MAC_Address = eMCA_MAC_Address_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public EAB_eNB_BB_Connection_Items (long connectionType_,
      long sessionIdentity_,
      long xcepId_,
      long xqueueId_,
      byte[] eMCA_MAC_Address_,
      EAB_eNB_BB_Connection_Items_iE_Extensions iE_Extensions_
   ) {
      super();
      connectionType = new Asn1Integer (connectionType_);
      sessionIdentity = new Asn1Integer (sessionIdentity_);
      xcepId = new Asn1Integer (xcepId_);
      xqueueId = new Asn1Integer (xqueueId_);
      eMCA_MAC_Address = new Asn1OctetString (eMCA_MAC_Address_);
      iE_Extensions = iE_Extensions_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public EAB_eNB_BB_Connection_Items (
      long connectionType_,
      long sessionIdentity_,
      long xcepId_,
      long xqueueId_,
      byte[] eMCA_MAC_Address_
   ) {
      super();
      connectionType = new Asn1Integer (connectionType_);
      sessionIdentity = new Asn1Integer (sessionIdentity_);
      xcepId = new Asn1Integer (xcepId_);
      xqueueId = new Asn1Integer (xqueueId_);
      eMCA_MAC_Address = new Asn1OctetString (eMCA_MAC_Address_);
   }

   public void init () {
      connectionType = null;
      sessionIdentity = null;
      xcepId = null;
      xqueueId = null;
      eMCA_MAC_Address = null;
      iE_Extensions = null;
      extElem1 = null;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return connectionType;
         case 1: return sessionIdentity;
         case 2: return xcepId;
         case 3: return xqueueId;
         case 4: return eMCA_MAC_Address;
         case 5: return iE_Extensions;
         case 6: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "connectionType";
         case 1: return "sessionIdentity";
         case 2: return "xcepId";
         case 3: return "xqueueId";
         case 4: return "eMCA-MAC-Address";
         case 5: return "iE-Extensions";
         case 6: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean iE_ExtensionsPresent = buffer.decodeBit ("iE_ExtensionsPresent");

      // decode connectionType

      buffer.getContext().eventDispatcher.startElement("connectionType", -1);

      connectionType = new Asn1Integer();
      connectionType.decode (buffer, 0, 65535);

      buffer.invokeCharacters(connectionType.toString());
      buffer.getContext().eventDispatcher.endElement("connectionType", -1);

      // decode sessionIdentity

      buffer.getContext().eventDispatcher.startElement("sessionIdentity", -1);

      sessionIdentity = new Asn1Integer();
      sessionIdentity.decode (buffer, 0, 65535);

      buffer.invokeCharacters(sessionIdentity.toString());
      buffer.getContext().eventDispatcher.endElement("sessionIdentity", -1);

      // decode xcepId

      buffer.getContext().eventDispatcher.startElement("xcepId", -1);

      xcepId = new Asn1Integer();
      xcepId.decode (buffer, 0, 65535);

      buffer.invokeCharacters(xcepId.toString());
      buffer.getContext().eventDispatcher.endElement("xcepId", -1);

      // decode xqueueId

      buffer.getContext().eventDispatcher.startElement("xqueueId", -1);

      xqueueId = new Asn1Integer();
      xqueueId.decode (buffer, 0, 65535);

      buffer.invokeCharacters(xqueueId.toString());
      buffer.getContext().eventDispatcher.endElement("xqueueId", -1);

      // decode eMCA_MAC_Address

      buffer.getContext().eventDispatcher.startElement("eMCA_MAC_Address", -1);

      eMCA_MAC_Address = new Asn1OctetString();
      eMCA_MAC_Address.decode (buffer, 6, 6);

      buffer.invokeCharacters(eMCA_MAC_Address.toString());
      buffer.getContext().eventDispatcher.endElement("eMCA_MAC_Address", -1);

      // decode iE_Extensions

      if (iE_ExtensionsPresent) {
         buffer.getContext().eventDispatcher.startElement("iE_Extensions", -1);

         iE_Extensions = new EAB_eNB_BB_Connection_Items_iE_Extensions();
         iE_Extensions.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("iE_Extensions", -1);
      }
      else {
         iE_Extensions = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (connectionType != null) connectionType.print (_sb, "connectionType", _level+1);
      if (sessionIdentity != null) sessionIdentity.print (_sb, "sessionIdentity", _level+1);
      if (xcepId != null) xcepId.print (_sb, "xcepId", _level+1);
      if (xqueueId != null) xqueueId.print (_sb, "xqueueId", _level+1);
      if (eMCA_MAC_Address != null) eMCA_MAC_Address.print (_sb, "eMCA_MAC_Address", _level+1);
      if (iE_Extensions != null) iE_Extensions.print (_sb, "iE_Extensions", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
