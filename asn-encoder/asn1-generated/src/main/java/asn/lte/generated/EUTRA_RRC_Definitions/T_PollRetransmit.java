/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class T_PollRetransmit extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "T-PollRetransmit";
   }

   // Integer constants for switch-case
   public static final int _MS5 = 0;
   public static final int _MS10 = 1;
   public static final int _MS15 = 2;
   public static final int _MS20 = 3;
   public static final int _MS25 = 4;
   public static final int _MS30 = 5;
   public static final int _MS35 = 6;
   public static final int _MS40 = 7;
   public static final int _MS45 = 8;
   public static final int _MS50 = 9;
   public static final int _MS55 = 10;
   public static final int _MS60 = 11;
   public static final int _MS65 = 12;
   public static final int _MS70 = 13;
   public static final int _MS75 = 14;
   public static final int _MS80 = 15;
   public static final int _MS85 = 16;
   public static final int _MS90 = 17;
   public static final int _MS95 = 18;
   public static final int _MS100 = 19;
   public static final int _MS105 = 20;
   public static final int _MS110 = 21;
   public static final int _MS115 = 22;
   public static final int _MS120 = 23;
   public static final int _MS125 = 24;
   public static final int _MS130 = 25;
   public static final int _MS135 = 26;
   public static final int _MS140 = 27;
   public static final int _MS145 = 28;
   public static final int _MS150 = 29;
   public static final int _MS155 = 30;
   public static final int _MS160 = 31;
   public static final int _MS165 = 32;
   public static final int _MS170 = 33;
   public static final int _MS175 = 34;
   public static final int _MS180 = 35;
   public static final int _MS185 = 36;
   public static final int _MS190 = 37;
   public static final int _MS195 = 38;
   public static final int _MS200 = 39;
   public static final int _MS205 = 40;
   public static final int _MS210 = 41;
   public static final int _MS215 = 42;
   public static final int _MS220 = 43;
   public static final int _MS225 = 44;
   public static final int _MS230 = 45;
   public static final int _MS235 = 46;
   public static final int _MS240 = 47;
   public static final int _MS245 = 48;
   public static final int _MS250 = 49;
   public static final int _MS300 = 50;
   public static final int _MS350 = 51;
   public static final int _MS400 = 52;
   public static final int _MS450 = 53;
   public static final int _MS500 = 54;
   public static final int _MS800_V1310 = 55;
   public static final int _MS1000_V1310 = 56;
   public static final int _MS2000_V1310 = 57;
   public static final int _MS4000_V1310 = 58;
   public static final int _SPARE5 = 59;
   public static final int _SPARE4 = 60;
   public static final int _SPARE3 = 61;
   public static final int _SPARE2 = 62;
   public static final int _SPARE1 = 63;

   // Singleton instances of T_PollRetransmit
   protected static final T_PollRetransmit _ms5 = new T_PollRetransmit(0);
   protected static final T_PollRetransmit _ms10 = new T_PollRetransmit(1);
   protected static final T_PollRetransmit _ms15 = new T_PollRetransmit(2);
   protected static final T_PollRetransmit _ms20 = new T_PollRetransmit(3);
   protected static final T_PollRetransmit _ms25 = new T_PollRetransmit(4);
   protected static final T_PollRetransmit _ms30 = new T_PollRetransmit(5);
   protected static final T_PollRetransmit _ms35 = new T_PollRetransmit(6);
   protected static final T_PollRetransmit _ms40 = new T_PollRetransmit(7);
   protected static final T_PollRetransmit _ms45 = new T_PollRetransmit(8);
   protected static final T_PollRetransmit _ms50 = new T_PollRetransmit(9);
   protected static final T_PollRetransmit _ms55 = new T_PollRetransmit(10);
   protected static final T_PollRetransmit _ms60 = new T_PollRetransmit(11);
   protected static final T_PollRetransmit _ms65 = new T_PollRetransmit(12);
   protected static final T_PollRetransmit _ms70 = new T_PollRetransmit(13);
   protected static final T_PollRetransmit _ms75 = new T_PollRetransmit(14);
   protected static final T_PollRetransmit _ms80 = new T_PollRetransmit(15);
   protected static final T_PollRetransmit _ms85 = new T_PollRetransmit(16);
   protected static final T_PollRetransmit _ms90 = new T_PollRetransmit(17);
   protected static final T_PollRetransmit _ms95 = new T_PollRetransmit(18);
   protected static final T_PollRetransmit _ms100 = new T_PollRetransmit(19);
   protected static final T_PollRetransmit _ms105 = new T_PollRetransmit(20);
   protected static final T_PollRetransmit _ms110 = new T_PollRetransmit(21);
   protected static final T_PollRetransmit _ms115 = new T_PollRetransmit(22);
   protected static final T_PollRetransmit _ms120 = new T_PollRetransmit(23);
   protected static final T_PollRetransmit _ms125 = new T_PollRetransmit(24);
   protected static final T_PollRetransmit _ms130 = new T_PollRetransmit(25);
   protected static final T_PollRetransmit _ms135 = new T_PollRetransmit(26);
   protected static final T_PollRetransmit _ms140 = new T_PollRetransmit(27);
   protected static final T_PollRetransmit _ms145 = new T_PollRetransmit(28);
   protected static final T_PollRetransmit _ms150 = new T_PollRetransmit(29);
   protected static final T_PollRetransmit _ms155 = new T_PollRetransmit(30);
   protected static final T_PollRetransmit _ms160 = new T_PollRetransmit(31);
   protected static final T_PollRetransmit _ms165 = new T_PollRetransmit(32);
   protected static final T_PollRetransmit _ms170 = new T_PollRetransmit(33);
   protected static final T_PollRetransmit _ms175 = new T_PollRetransmit(34);
   protected static final T_PollRetransmit _ms180 = new T_PollRetransmit(35);
   protected static final T_PollRetransmit _ms185 = new T_PollRetransmit(36);
   protected static final T_PollRetransmit _ms190 = new T_PollRetransmit(37);
   protected static final T_PollRetransmit _ms195 = new T_PollRetransmit(38);
   protected static final T_PollRetransmit _ms200 = new T_PollRetransmit(39);
   protected static final T_PollRetransmit _ms205 = new T_PollRetransmit(40);
   protected static final T_PollRetransmit _ms210 = new T_PollRetransmit(41);
   protected static final T_PollRetransmit _ms215 = new T_PollRetransmit(42);
   protected static final T_PollRetransmit _ms220 = new T_PollRetransmit(43);
   protected static final T_PollRetransmit _ms225 = new T_PollRetransmit(44);
   protected static final T_PollRetransmit _ms230 = new T_PollRetransmit(45);
   protected static final T_PollRetransmit _ms235 = new T_PollRetransmit(46);
   protected static final T_PollRetransmit _ms240 = new T_PollRetransmit(47);
   protected static final T_PollRetransmit _ms245 = new T_PollRetransmit(48);
   protected static final T_PollRetransmit _ms250 = new T_PollRetransmit(49);
   protected static final T_PollRetransmit _ms300 = new T_PollRetransmit(50);
   protected static final T_PollRetransmit _ms350 = new T_PollRetransmit(51);
   protected static final T_PollRetransmit _ms400 = new T_PollRetransmit(52);
   protected static final T_PollRetransmit _ms450 = new T_PollRetransmit(53);
   protected static final T_PollRetransmit _ms500 = new T_PollRetransmit(54);
   protected static final T_PollRetransmit _ms800_v1310 = new T_PollRetransmit(55);
   protected static final T_PollRetransmit _ms1000_v1310 = new T_PollRetransmit(56);
   protected static final T_PollRetransmit _ms2000_v1310 = new T_PollRetransmit(57);
   protected static final T_PollRetransmit _ms4000_v1310 = new T_PollRetransmit(58);
   protected static final T_PollRetransmit _spare5 = new T_PollRetransmit(59);
   protected static final T_PollRetransmit _spare4 = new T_PollRetransmit(60);
   protected static final T_PollRetransmit _spare3 = new T_PollRetransmit(61);
   protected static final T_PollRetransmit _spare2 = new T_PollRetransmit(62);
   protected static final T_PollRetransmit _spare1 = new T_PollRetransmit(63);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    *   7
    *   8
    *   9
    *   10
    *   11
    *   12
    *   13
    *   14
    *   15
    *   16
    *   17
    *   18
    *   19
    *   20
    *   21
    *   22
    *   23
    *   24
    *   25
    *   26
    *   27
    *   28
    *   29
    *   30
    *   31
    *   32
    *   33
    *   34
    *   35
    *   36
    *   37
    *   38
    *   39
    *   40
    *   41
    *   42
    *   43
    *   44
    *   45
    *   46
    *   47
    *   48
    *   49
    *   50
    *   51
    *   52
    *   53
    *   54
    *   55
    *   56
    *   57
    *   58
    *   59
    *   60
    *   61
    *   62
    *   63
    */
   protected T_PollRetransmit (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for ms5.
    */
   public static T_PollRetransmit ms5() {
      return _ms5;
   }

   /**
    * Singleton accessor method for ms10.
    */
   public static T_PollRetransmit ms10() {
      return _ms10;
   }

   /**
    * Singleton accessor method for ms15.
    */
   public static T_PollRetransmit ms15() {
      return _ms15;
   }

   /**
    * Singleton accessor method for ms20.
    */
   public static T_PollRetransmit ms20() {
      return _ms20;
   }

   /**
    * Singleton accessor method for ms25.
    */
   public static T_PollRetransmit ms25() {
      return _ms25;
   }

   /**
    * Singleton accessor method for ms30.
    */
   public static T_PollRetransmit ms30() {
      return _ms30;
   }

   /**
    * Singleton accessor method for ms35.
    */
   public static T_PollRetransmit ms35() {
      return _ms35;
   }

   /**
    * Singleton accessor method for ms40.
    */
   public static T_PollRetransmit ms40() {
      return _ms40;
   }

   /**
    * Singleton accessor method for ms45.
    */
   public static T_PollRetransmit ms45() {
      return _ms45;
   }

   /**
    * Singleton accessor method for ms50.
    */
   public static T_PollRetransmit ms50() {
      return _ms50;
   }

   /**
    * Singleton accessor method for ms55.
    */
   public static T_PollRetransmit ms55() {
      return _ms55;
   }

   /**
    * Singleton accessor method for ms60.
    */
   public static T_PollRetransmit ms60() {
      return _ms60;
   }

   /**
    * Singleton accessor method for ms65.
    */
   public static T_PollRetransmit ms65() {
      return _ms65;
   }

   /**
    * Singleton accessor method for ms70.
    */
   public static T_PollRetransmit ms70() {
      return _ms70;
   }

   /**
    * Singleton accessor method for ms75.
    */
   public static T_PollRetransmit ms75() {
      return _ms75;
   }

   /**
    * Singleton accessor method for ms80.
    */
   public static T_PollRetransmit ms80() {
      return _ms80;
   }

   /**
    * Singleton accessor method for ms85.
    */
   public static T_PollRetransmit ms85() {
      return _ms85;
   }

   /**
    * Singleton accessor method for ms90.
    */
   public static T_PollRetransmit ms90() {
      return _ms90;
   }

   /**
    * Singleton accessor method for ms95.
    */
   public static T_PollRetransmit ms95() {
      return _ms95;
   }

   /**
    * Singleton accessor method for ms100.
    */
   public static T_PollRetransmit ms100() {
      return _ms100;
   }

   /**
    * Singleton accessor method for ms105.
    */
   public static T_PollRetransmit ms105() {
      return _ms105;
   }

   /**
    * Singleton accessor method for ms110.
    */
   public static T_PollRetransmit ms110() {
      return _ms110;
   }

   /**
    * Singleton accessor method for ms115.
    */
   public static T_PollRetransmit ms115() {
      return _ms115;
   }

   /**
    * Singleton accessor method for ms120.
    */
   public static T_PollRetransmit ms120() {
      return _ms120;
   }

   /**
    * Singleton accessor method for ms125.
    */
   public static T_PollRetransmit ms125() {
      return _ms125;
   }

   /**
    * Singleton accessor method for ms130.
    */
   public static T_PollRetransmit ms130() {
      return _ms130;
   }

   /**
    * Singleton accessor method for ms135.
    */
   public static T_PollRetransmit ms135() {
      return _ms135;
   }

   /**
    * Singleton accessor method for ms140.
    */
   public static T_PollRetransmit ms140() {
      return _ms140;
   }

   /**
    * Singleton accessor method for ms145.
    */
   public static T_PollRetransmit ms145() {
      return _ms145;
   }

   /**
    * Singleton accessor method for ms150.
    */
   public static T_PollRetransmit ms150() {
      return _ms150;
   }

   /**
    * Singleton accessor method for ms155.
    */
   public static T_PollRetransmit ms155() {
      return _ms155;
   }

   /**
    * Singleton accessor method for ms160.
    */
   public static T_PollRetransmit ms160() {
      return _ms160;
   }

   /**
    * Singleton accessor method for ms165.
    */
   public static T_PollRetransmit ms165() {
      return _ms165;
   }

   /**
    * Singleton accessor method for ms170.
    */
   public static T_PollRetransmit ms170() {
      return _ms170;
   }

   /**
    * Singleton accessor method for ms175.
    */
   public static T_PollRetransmit ms175() {
      return _ms175;
   }

   /**
    * Singleton accessor method for ms180.
    */
   public static T_PollRetransmit ms180() {
      return _ms180;
   }

   /**
    * Singleton accessor method for ms185.
    */
   public static T_PollRetransmit ms185() {
      return _ms185;
   }

   /**
    * Singleton accessor method for ms190.
    */
   public static T_PollRetransmit ms190() {
      return _ms190;
   }

   /**
    * Singleton accessor method for ms195.
    */
   public static T_PollRetransmit ms195() {
      return _ms195;
   }

   /**
    * Singleton accessor method for ms200.
    */
   public static T_PollRetransmit ms200() {
      return _ms200;
   }

   /**
    * Singleton accessor method for ms205.
    */
   public static T_PollRetransmit ms205() {
      return _ms205;
   }

   /**
    * Singleton accessor method for ms210.
    */
   public static T_PollRetransmit ms210() {
      return _ms210;
   }

   /**
    * Singleton accessor method for ms215.
    */
   public static T_PollRetransmit ms215() {
      return _ms215;
   }

   /**
    * Singleton accessor method for ms220.
    */
   public static T_PollRetransmit ms220() {
      return _ms220;
   }

   /**
    * Singleton accessor method for ms225.
    */
   public static T_PollRetransmit ms225() {
      return _ms225;
   }

   /**
    * Singleton accessor method for ms230.
    */
   public static T_PollRetransmit ms230() {
      return _ms230;
   }

   /**
    * Singleton accessor method for ms235.
    */
   public static T_PollRetransmit ms235() {
      return _ms235;
   }

   /**
    * Singleton accessor method for ms240.
    */
   public static T_PollRetransmit ms240() {
      return _ms240;
   }

   /**
    * Singleton accessor method for ms245.
    */
   public static T_PollRetransmit ms245() {
      return _ms245;
   }

   /**
    * Singleton accessor method for ms250.
    */
   public static T_PollRetransmit ms250() {
      return _ms250;
   }

   /**
    * Singleton accessor method for ms300.
    */
   public static T_PollRetransmit ms300() {
      return _ms300;
   }

   /**
    * Singleton accessor method for ms350.
    */
   public static T_PollRetransmit ms350() {
      return _ms350;
   }

   /**
    * Singleton accessor method for ms400.
    */
   public static T_PollRetransmit ms400() {
      return _ms400;
   }

   /**
    * Singleton accessor method for ms450.
    */
   public static T_PollRetransmit ms450() {
      return _ms450;
   }

   /**
    * Singleton accessor method for ms500.
    */
   public static T_PollRetransmit ms500() {
      return _ms500;
   }

   /**
    * Singleton accessor method for ms800_v1310.
    */
   public static T_PollRetransmit ms800_v1310() {
      return _ms800_v1310;
   }

   /**
    * Singleton accessor method for ms1000_v1310.
    */
   public static T_PollRetransmit ms1000_v1310() {
      return _ms1000_v1310;
   }

   /**
    * Singleton accessor method for ms2000_v1310.
    */
   public static T_PollRetransmit ms2000_v1310() {
      return _ms2000_v1310;
   }

   /**
    * Singleton accessor method for ms4000_v1310.
    */
   public static T_PollRetransmit ms4000_v1310() {
      return _ms4000_v1310;
   }

   /**
    * Singleton accessor method for spare5.
    */
   public static T_PollRetransmit spare5() {
      return _spare5;
   }

   /**
    * Singleton accessor method for spare4.
    */
   public static T_PollRetransmit spare4() {
      return _spare4;
   }

   /**
    * Singleton accessor method for spare3.
    */
   public static T_PollRetransmit spare3() {
      return _spare3;
   }

   /**
    * Singleton accessor method for spare2.
    */
   public static T_PollRetransmit spare2() {
      return _spare2;
   }

   /**
    * Singleton accessor method for spare1.
    */
   public static T_PollRetransmit spare1() {
      return _spare1;
   }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return T_PollRetransmit.valueOf( T_PollRetransmit.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static T_PollRetransmit valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 0: return ms5();
         case 1: return ms10();
         case 2: return ms15();
         case 3: return ms20();
         case 4: return ms25();
         case 5: return ms30();
         case 6: return ms35();
         case 7: return ms40();
         case 8: return ms45();
         case 9: return ms50();
         case 10: return ms55();
         case 11: return ms60();
         case 12: return ms65();
         case 13: return ms70();
         case 14: return ms75();
         case 15: return ms80();
         case 16: return ms85();
         case 17: return ms90();
         case 18: return ms95();
         case 19: return ms100();
         case 20: return ms105();
         case 21: return ms110();
         case 22: return ms115();
         case 23: return ms120();
         case 24: return ms125();
         case 25: return ms130();
         case 26: return ms135();
         case 27: return ms140();
         case 28: return ms145();
         case 29: return ms150();
         case 30: return ms155();
         case 31: return ms160();
         case 32: return ms165();
         case 33: return ms170();
         case 34: return ms175();
         case 35: return ms180();
         case 36: return ms185();
         case 37: return ms190();
         case 38: return ms195();
         case 39: return ms200();
         case 40: return ms205();
         case 41: return ms210();
         case 42: return ms215();
         case 43: return ms220();
         case 44: return ms225();
         case 45: return ms230();
         case 46: return ms235();
         case 47: return ms240();
         case 48: return ms245();
         case 49: return ms250();
         case 50: return ms300();
         case 51: return ms350();
         case 52: return ms400();
         case 53: return ms450();
         case 54: return ms500();
         case 55: return ms800_v1310();
         case 56: return ms1000_v1310();
         case 57: return ms2000_v1310();
         case 58: return ms4000_v1310();
         case 59: return spare5();
         case 60: return spare4();
         case 61: return spare3();
         case 62: return spare2();
         case 63: return spare1();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      ui = (int) buffer.decodeConsWholeNumber (64);

      switch (ui) {
         case 0: ret =  0; break;
         case 1: ret =  1; break;
         case 2: ret =  2; break;
         case 3: ret =  3; break;
         case 4: ret =  4; break;
         case 5: ret =  5; break;
         case 6: ret =  6; break;
         case 7: ret =  7; break;
         case 8: ret =  8; break;
         case 9: ret =  9; break;
         case 10: ret =  10; break;
         case 11: ret =  11; break;
         case 12: ret =  12; break;
         case 13: ret =  13; break;
         case 14: ret =  14; break;
         case 15: ret =  15; break;
         case 16: ret =  16; break;
         case 17: ret =  17; break;
         case 18: ret =  18; break;
         case 19: ret =  19; break;
         case 20: ret =  20; break;
         case 21: ret =  21; break;
         case 22: ret =  22; break;
         case 23: ret =  23; break;
         case 24: ret =  24; break;
         case 25: ret =  25; break;
         case 26: ret =  26; break;
         case 27: ret =  27; break;
         case 28: ret =  28; break;
         case 29: ret =  29; break;
         case 30: ret =  30; break;
         case 31: ret =  31; break;
         case 32: ret =  32; break;
         case 33: ret =  33; break;
         case 34: ret =  34; break;
         case 35: ret =  35; break;
         case 36: ret =  36; break;
         case 37: ret =  37; break;
         case 38: ret =  38; break;
         case 39: ret =  39; break;
         case 40: ret =  40; break;
         case 41: ret =  41; break;
         case 42: ret =  42; break;
         case 43: ret =  43; break;
         case 44: ret =  44; break;
         case 45: ret =  45; break;
         case 46: ret =  46; break;
         case 47: ret =  47; break;
         case 48: ret =  48; break;
         case 49: ret =  49; break;
         case 50: ret =  50; break;
         case 51: ret =  51; break;
         case 52: ret =  52; break;
         case 53: ret =  53; break;
         case 54: ret =  54; break;
         case 55: ret =  55; break;
         case 56: ret =  56; break;
         case 57: ret =  57; break;
         case 58: ret =  58; break;
         case 59: ret =  59; break;
         case 60: ret =  60; break;
         case 61: ret =  61; break;
         case 62: ret =  62; break;
         case 63: ret =  63; break;
         default: throw new Asn1InvalidEnumException (ui);
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (T_PollRetransmit.valueOf(ret).toString());

      return ret;
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("ms5");
         case 1: return ("ms10");
         case 2: return ("ms15");
         case 3: return ("ms20");
         case 4: return ("ms25");
         case 5: return ("ms30");
         case 6: return ("ms35");
         case 7: return ("ms40");
         case 8: return ("ms45");
         case 9: return ("ms50");
         case 10: return ("ms55");
         case 11: return ("ms60");
         case 12: return ("ms65");
         case 13: return ("ms70");
         case 14: return ("ms75");
         case 15: return ("ms80");
         case 16: return ("ms85");
         case 17: return ("ms90");
         case 18: return ("ms95");
         case 19: return ("ms100");
         case 20: return ("ms105");
         case 21: return ("ms110");
         case 22: return ("ms115");
         case 23: return ("ms120");
         case 24: return ("ms125");
         case 25: return ("ms130");
         case 26: return ("ms135");
         case 27: return ("ms140");
         case 28: return ("ms145");
         case 29: return ("ms150");
         case 30: return ("ms155");
         case 31: return ("ms160");
         case 32: return ("ms165");
         case 33: return ("ms170");
         case 34: return ("ms175");
         case 35: return ("ms180");
         case 36: return ("ms185");
         case 37: return ("ms190");
         case 38: return ("ms195");
         case 39: return ("ms200");
         case 40: return ("ms205");
         case 41: return ("ms210");
         case 42: return ("ms215");
         case 43: return ("ms220");
         case 44: return ("ms225");
         case 45: return ("ms230");
         case 46: return ("ms235");
         case 47: return ("ms240");
         case 48: return ("ms245");
         case 49: return ("ms250");
         case 50: return ("ms300");
         case 51: return ("ms350");
         case 52: return ("ms400");
         case 53: return ("ms450");
         case 54: return ("ms500");
         case 55: return ("ms800-v1310");
         case 56: return ("ms1000-v1310");
         case 57: return ("ms2000-v1310");
         case 58: return ("ms4000-v1310");
         case 59: return ("spare5");
         case 60: return ("spare4");
         case 61: return ("spare3");
         case 62: return ("spare2");
         case 63: return ("spare1");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
