/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MAC_Parameters_v1430 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "MAC-Parameters-v1430";
   }

   public MAC_Parameters_v1430_shortSPS_IntervalFDD_r14 shortSPS_IntervalFDD_r14 = null;  // optional
   public MAC_Parameters_v1430_shortSPS_IntervalTDD_r14 shortSPS_IntervalTDD_r14 = null;  // optional
   public MAC_Parameters_v1430_skipUplinkDynamic_r14 skipUplinkDynamic_r14 = null;  // optional
   public MAC_Parameters_v1430_skipUplinkSPS_r14 skipUplinkSPS_r14 = null;  // optional
   public MAC_Parameters_v1430_multipleUplinkSPS_r14 multipleUplinkSPS_r14 = null;  // optional
   public MAC_Parameters_v1430_dataInactMon_r14 dataInactMon_r14 = null;  // optional

   public MAC_Parameters_v1430 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MAC_Parameters_v1430 (
      MAC_Parameters_v1430_shortSPS_IntervalFDD_r14 shortSPS_IntervalFDD_r14_,
      MAC_Parameters_v1430_shortSPS_IntervalTDD_r14 shortSPS_IntervalTDD_r14_,
      MAC_Parameters_v1430_skipUplinkDynamic_r14 skipUplinkDynamic_r14_,
      MAC_Parameters_v1430_skipUplinkSPS_r14 skipUplinkSPS_r14_,
      MAC_Parameters_v1430_multipleUplinkSPS_r14 multipleUplinkSPS_r14_,
      MAC_Parameters_v1430_dataInactMon_r14 dataInactMon_r14_
   ) {
      super();
      shortSPS_IntervalFDD_r14 = shortSPS_IntervalFDD_r14_;
      shortSPS_IntervalTDD_r14 = shortSPS_IntervalTDD_r14_;
      skipUplinkDynamic_r14 = skipUplinkDynamic_r14_;
      skipUplinkSPS_r14 = skipUplinkSPS_r14_;
      multipleUplinkSPS_r14 = multipleUplinkSPS_r14_;
      dataInactMon_r14 = dataInactMon_r14_;
   }

   public void init () {
      shortSPS_IntervalFDD_r14 = null;
      shortSPS_IntervalTDD_r14 = null;
      skipUplinkDynamic_r14 = null;
      skipUplinkSPS_r14 = null;
      multipleUplinkSPS_r14 = null;
      dataInactMon_r14 = null;
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return shortSPS_IntervalFDD_r14;
         case 1: return shortSPS_IntervalTDD_r14;
         case 2: return skipUplinkDynamic_r14;
         case 3: return skipUplinkSPS_r14;
         case 4: return multipleUplinkSPS_r14;
         case 5: return dataInactMon_r14;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "shortSPS-IntervalFDD-r14";
         case 1: return "shortSPS-IntervalTDD-r14";
         case 2: return "skipUplinkDynamic-r14";
         case 3: return "skipUplinkSPS-r14";
         case 4: return "multipleUplinkSPS-r14";
         case 5: return "dataInactMon-r14";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean shortSPS_IntervalFDD_r14Present = buffer.decodeBit ("shortSPS_IntervalFDD_r14Present");
      boolean shortSPS_IntervalTDD_r14Present = buffer.decodeBit ("shortSPS_IntervalTDD_r14Present");
      boolean skipUplinkDynamic_r14Present = buffer.decodeBit ("skipUplinkDynamic_r14Present");
      boolean skipUplinkSPS_r14Present = buffer.decodeBit ("skipUplinkSPS_r14Present");
      boolean multipleUplinkSPS_r14Present = buffer.decodeBit ("multipleUplinkSPS_r14Present");
      boolean dataInactMon_r14Present = buffer.decodeBit ("dataInactMon_r14Present");

      // decode shortSPS_IntervalFDD_r14

      if (shortSPS_IntervalFDD_r14Present) {
         buffer.getContext().eventDispatcher.startElement("shortSPS_IntervalFDD_r14", -1);

         int tval = MAC_Parameters_v1430_shortSPS_IntervalFDD_r14.decodeEnumValue (buffer);
         shortSPS_IntervalFDD_r14 = MAC_Parameters_v1430_shortSPS_IntervalFDD_r14.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("shortSPS_IntervalFDD_r14", -1);
      }
      else {
         shortSPS_IntervalFDD_r14 = null;
      }

      // decode shortSPS_IntervalTDD_r14

      if (shortSPS_IntervalTDD_r14Present) {
         buffer.getContext().eventDispatcher.startElement("shortSPS_IntervalTDD_r14", -1);

         int tval = MAC_Parameters_v1430_shortSPS_IntervalTDD_r14.decodeEnumValue (buffer);
         shortSPS_IntervalTDD_r14 = MAC_Parameters_v1430_shortSPS_IntervalTDD_r14.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("shortSPS_IntervalTDD_r14", -1);
      }
      else {
         shortSPS_IntervalTDD_r14 = null;
      }

      // decode skipUplinkDynamic_r14

      if (skipUplinkDynamic_r14Present) {
         buffer.getContext().eventDispatcher.startElement("skipUplinkDynamic_r14", -1);

         int tval = MAC_Parameters_v1430_skipUplinkDynamic_r14.decodeEnumValue (buffer);
         skipUplinkDynamic_r14 = MAC_Parameters_v1430_skipUplinkDynamic_r14.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("skipUplinkDynamic_r14", -1);
      }
      else {
         skipUplinkDynamic_r14 = null;
      }

      // decode skipUplinkSPS_r14

      if (skipUplinkSPS_r14Present) {
         buffer.getContext().eventDispatcher.startElement("skipUplinkSPS_r14", -1);

         int tval = MAC_Parameters_v1430_skipUplinkSPS_r14.decodeEnumValue (buffer);
         skipUplinkSPS_r14 = MAC_Parameters_v1430_skipUplinkSPS_r14.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("skipUplinkSPS_r14", -1);
      }
      else {
         skipUplinkSPS_r14 = null;
      }

      // decode multipleUplinkSPS_r14

      if (multipleUplinkSPS_r14Present) {
         buffer.getContext().eventDispatcher.startElement("multipleUplinkSPS_r14", -1);

         int tval = MAC_Parameters_v1430_multipleUplinkSPS_r14.decodeEnumValue (buffer);
         multipleUplinkSPS_r14 = MAC_Parameters_v1430_multipleUplinkSPS_r14.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("multipleUplinkSPS_r14", -1);
      }
      else {
         multipleUplinkSPS_r14 = null;
      }

      // decode dataInactMon_r14

      if (dataInactMon_r14Present) {
         buffer.getContext().eventDispatcher.startElement("dataInactMon_r14", -1);

         int tval = MAC_Parameters_v1430_dataInactMon_r14.decodeEnumValue (buffer);
         dataInactMon_r14 = MAC_Parameters_v1430_dataInactMon_r14.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("dataInactMon_r14", -1);
      }
      else {
         dataInactMon_r14 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (shortSPS_IntervalFDD_r14 != null) shortSPS_IntervalFDD_r14.print (_sb, "shortSPS_IntervalFDD_r14", _level+1);
      if (shortSPS_IntervalTDD_r14 != null) shortSPS_IntervalTDD_r14.print (_sb, "shortSPS_IntervalTDD_r14", _level+1);
      if (skipUplinkDynamic_r14 != null) skipUplinkDynamic_r14.print (_sb, "skipUplinkDynamic_r14", _level+1);
      if (skipUplinkSPS_r14 != null) skipUplinkSPS_r14.print (_sb, "skipUplinkSPS_r14", _level+1);
      if (multipleUplinkSPS_r14 != null) multipleUplinkSPS_r14.print (_sb, "multipleUplinkSPS_r14", _level+1);
      if (dataInactMon_r14 != null) dataInactMon_r14.print (_sb, "dataInactMon_r14", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
