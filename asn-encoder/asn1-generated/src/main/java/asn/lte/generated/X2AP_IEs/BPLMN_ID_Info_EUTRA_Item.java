/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.X2AP_IEs;

import com.objsys.asn1j.runtime.*;

public class BPLMN_ID_Info_EUTRA_Item extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_X2AP_IEsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "BPLMN-ID-Info-EUTRA-Item";
   }

   public BroadcastPLMNs_Item broadcastPLMNs;
   public TAC tac;
   public EUTRANCellIdentifier e_utraCI;
   public BPLMN_ID_Info_EUTRA_Item_iE_Extension iE_Extension;  // optional
   public Asn1OpenExt extElem1;

   public BPLMN_ID_Info_EUTRA_Item () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public BPLMN_ID_Info_EUTRA_Item (
      BroadcastPLMNs_Item broadcastPLMNs_,
      TAC tac_,
      EUTRANCellIdentifier e_utraCI_,
      BPLMN_ID_Info_EUTRA_Item_iE_Extension iE_Extension_
   ) {
      super();
      broadcastPLMNs = broadcastPLMNs_;
      tac = tac_;
      e_utraCI = e_utraCI_;
      iE_Extension = iE_Extension_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public BPLMN_ID_Info_EUTRA_Item (
      BroadcastPLMNs_Item broadcastPLMNs_,
      TAC tac_,
      EUTRANCellIdentifier e_utraCI_
   ) {
      super();
      broadcastPLMNs = broadcastPLMNs_;
      tac = tac_;
      e_utraCI = e_utraCI_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public BPLMN_ID_Info_EUTRA_Item (BroadcastPLMNs_Item broadcastPLMNs_,
      byte[] tac_,
      EUTRANCellIdentifier e_utraCI_,
      BPLMN_ID_Info_EUTRA_Item_iE_Extension iE_Extension_
   ) {
      super();
      broadcastPLMNs = broadcastPLMNs_;
      tac = new TAC (tac_);
      e_utraCI = e_utraCI_;
      iE_Extension = iE_Extension_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public BPLMN_ID_Info_EUTRA_Item (
      BroadcastPLMNs_Item broadcastPLMNs_,
      byte[] tac_,
      EUTRANCellIdentifier e_utraCI_
   ) {
      super();
      broadcastPLMNs = broadcastPLMNs_;
      tac = new TAC (tac_);
      e_utraCI = e_utraCI_;
   }

   public void init () {
      broadcastPLMNs = null;
      tac = null;
      e_utraCI = null;
      iE_Extension = null;
      extElem1 = null;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return broadcastPLMNs;
         case 1: return tac;
         case 2: return e_utraCI;
         case 3: return iE_Extension;
         case 4: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "broadcastPLMNs";
         case 1: return "tac";
         case 2: return "e-utraCI";
         case 3: return "iE-Extension";
         case 4: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean iE_ExtensionPresent = buffer.decodeBit ("iE_ExtensionPresent");

      // decode broadcastPLMNs

      buffer.getContext().eventDispatcher.startElement("broadcastPLMNs", -1);

      broadcastPLMNs = new BroadcastPLMNs_Item();
      broadcastPLMNs.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("broadcastPLMNs", -1);

      // decode tac

      buffer.getContext().eventDispatcher.startElement("tac", -1);

      tac = new TAC();
      tac.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("tac", -1);

      // decode e_utraCI

      buffer.getContext().eventDispatcher.startElement("e_utraCI", -1);

      e_utraCI = new EUTRANCellIdentifier();
      e_utraCI.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("e_utraCI", -1);

      // decode iE_Extension

      if (iE_ExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("iE_Extension", -1);

         iE_Extension = new BPLMN_ID_Info_EUTRA_Item_iE_Extension();
         iE_Extension.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("iE_Extension", -1);
      }
      else {
         iE_Extension = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (broadcastPLMNs != null) broadcastPLMNs.print (_sb, "broadcastPLMNs", _level+1);
      if (tac != null) tac.print (_sb, "tac", _level+1);
      if (e_utraCI != null) e_utraCI.print (_sb, "e_utraCI", _level+1);
      if (iE_Extension != null) iE_Extension.print (_sb, "iE_Extension", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
