/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class LWA_Parameters_r13 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "LWA-Parameters-r13";
   }

   public LWA_Parameters_r13_lwa_r13 lwa_r13 = null;  // optional
   public LWA_Parameters_r13_lwa_SplitBearer_r13 lwa_SplitBearer_r13 = null;  // optional
   public Asn1OctetString wlan_MAC_Address_r13;  // optional
   public LWA_Parameters_r13_lwa_BufferSize_r13 lwa_BufferSize_r13 = null;  // optional

   public LWA_Parameters_r13 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public LWA_Parameters_r13 (
      LWA_Parameters_r13_lwa_r13 lwa_r13_,
      LWA_Parameters_r13_lwa_SplitBearer_r13 lwa_SplitBearer_r13_,
      Asn1OctetString wlan_MAC_Address_r13_,
      LWA_Parameters_r13_lwa_BufferSize_r13 lwa_BufferSize_r13_
   ) {
      super();
      lwa_r13 = lwa_r13_;
      lwa_SplitBearer_r13 = lwa_SplitBearer_r13_;
      wlan_MAC_Address_r13 = wlan_MAC_Address_r13_;
      lwa_BufferSize_r13 = lwa_BufferSize_r13_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public LWA_Parameters_r13 (LWA_Parameters_r13_lwa_r13 lwa_r13_,
      LWA_Parameters_r13_lwa_SplitBearer_r13 lwa_SplitBearer_r13_,
      byte[] wlan_MAC_Address_r13_,
      LWA_Parameters_r13_lwa_BufferSize_r13 lwa_BufferSize_r13_
   ) {
      super();
      lwa_r13 = lwa_r13_;
      lwa_SplitBearer_r13 = lwa_SplitBearer_r13_;
      wlan_MAC_Address_r13 = new Asn1OctetString (wlan_MAC_Address_r13_);
      lwa_BufferSize_r13 = lwa_BufferSize_r13_;
   }

   public void init () {
      lwa_r13 = null;
      lwa_SplitBearer_r13 = null;
      wlan_MAC_Address_r13 = null;
      lwa_BufferSize_r13 = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return lwa_r13;
         case 1: return lwa_SplitBearer_r13;
         case 2: return wlan_MAC_Address_r13;
         case 3: return lwa_BufferSize_r13;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "lwa-r13";
         case 1: return "lwa-SplitBearer-r13";
         case 2: return "wlan-MAC-Address-r13";
         case 3: return "lwa-BufferSize-r13";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean lwa_r13Present = buffer.decodeBit ("lwa_r13Present");
      boolean lwa_SplitBearer_r13Present = buffer.decodeBit ("lwa_SplitBearer_r13Present");
      boolean wlan_MAC_Address_r13Present = buffer.decodeBit ("wlan_MAC_Address_r13Present");
      boolean lwa_BufferSize_r13Present = buffer.decodeBit ("lwa_BufferSize_r13Present");

      // decode lwa_r13

      if (lwa_r13Present) {
         buffer.getContext().eventDispatcher.startElement("lwa_r13", -1);

         int tval = LWA_Parameters_r13_lwa_r13.decodeEnumValue (buffer);
         lwa_r13 = LWA_Parameters_r13_lwa_r13.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("lwa_r13", -1);
      }
      else {
         lwa_r13 = null;
      }

      // decode lwa_SplitBearer_r13

      if (lwa_SplitBearer_r13Present) {
         buffer.getContext().eventDispatcher.startElement("lwa_SplitBearer_r13", -1);

         int tval = LWA_Parameters_r13_lwa_SplitBearer_r13.decodeEnumValue (buffer);
         lwa_SplitBearer_r13 = LWA_Parameters_r13_lwa_SplitBearer_r13.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("lwa_SplitBearer_r13", -1);
      }
      else {
         lwa_SplitBearer_r13 = null;
      }

      // decode wlan_MAC_Address_r13

      if (wlan_MAC_Address_r13Present) {
         buffer.getContext().eventDispatcher.startElement("wlan_MAC_Address_r13", -1);

         wlan_MAC_Address_r13 = new Asn1OctetString();
         wlan_MAC_Address_r13.decode (buffer, 6, 6);

         buffer.invokeCharacters(wlan_MAC_Address_r13.toString());
         buffer.getContext().eventDispatcher.endElement("wlan_MAC_Address_r13", -1);
      }
      else {
         wlan_MAC_Address_r13 = null;
      }

      // decode lwa_BufferSize_r13

      if (lwa_BufferSize_r13Present) {
         buffer.getContext().eventDispatcher.startElement("lwa_BufferSize_r13", -1);

         int tval = LWA_Parameters_r13_lwa_BufferSize_r13.decodeEnumValue (buffer);
         lwa_BufferSize_r13 = LWA_Parameters_r13_lwa_BufferSize_r13.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("lwa_BufferSize_r13", -1);
      }
      else {
         lwa_BufferSize_r13 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (lwa_r13 != null) lwa_r13.print (_sb, "lwa_r13", _level+1);
      if (lwa_SplitBearer_r13 != null) lwa_SplitBearer_r13.print (_sb, "lwa_SplitBearer_r13", _level+1);
      if (wlan_MAC_Address_r13 != null) wlan_MAC_Address_r13.print (_sb, "wlan_MAC_Address_r13", _level+1);
      if (lwa_BufferSize_r13 != null) lwa_BufferSize_r13.print (_sb, "lwa_BufferSize_r13", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
