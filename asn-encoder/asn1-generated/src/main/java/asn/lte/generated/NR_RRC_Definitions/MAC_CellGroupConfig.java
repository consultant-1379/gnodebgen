/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MAC_CellGroupConfig extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "MAC-CellGroupConfig";
   }

   public MAC_CellGroupConfig_drx_Config drx_Config;  // optional
   public SchedulingRequestConfig schedulingRequestConfig;  // optional
   public BSR_Config bsr_Config;  // optional
   public TAG_Config tag_Config;  // optional
   public MAC_CellGroupConfig_phr_Config phr_Config;  // optional
   public Asn1Boolean skipUplinkTxDynamic;
   public boolean mV2ExtPresent;
   public Asn1Boolean csi_Mask;  // optional
   public MAC_CellGroupConfig_dataInactivityTimer dataInactivityTimer;  // optional
   public boolean mV3ExtPresent;
   public MAC_CellGroupConfig_usePreBSR_r16 usePreBSR_r16 = null;  // optional
   public SchedulingRequestId schedulingRequestID_LBT_SCell_r16;  // optional
   public MAC_CellGroupConfig_lch_BasedPrioritization_r16 lch_BasedPrioritization_r16 = null;  // optional
   public SchedulingRequestId schedulingRequestID_BFR_SCell_r16;  // optional
   public MAC_CellGroupConfig_drx_ConfigSecondaryGroup_r16 drx_ConfigSecondaryGroup_r16;  // optional
   public Asn1OpenExt extElem1;

   public MAC_CellGroupConfig () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MAC_CellGroupConfig (
      MAC_CellGroupConfig_drx_Config drx_Config_,
      SchedulingRequestConfig schedulingRequestConfig_,
      BSR_Config bsr_Config_,
      TAG_Config tag_Config_,
      MAC_CellGroupConfig_phr_Config phr_Config_,
      Asn1Boolean skipUplinkTxDynamic_,
      Asn1Boolean csi_Mask_,
      MAC_CellGroupConfig_dataInactivityTimer dataInactivityTimer_,
      MAC_CellGroupConfig_usePreBSR_r16 usePreBSR_r16_,
      SchedulingRequestId schedulingRequestID_LBT_SCell_r16_,
      MAC_CellGroupConfig_lch_BasedPrioritization_r16 lch_BasedPrioritization_r16_,
      SchedulingRequestId schedulingRequestID_BFR_SCell_r16_,
      MAC_CellGroupConfig_drx_ConfigSecondaryGroup_r16 drx_ConfigSecondaryGroup_r16_
   ) {
      super();
      drx_Config = drx_Config_;
      schedulingRequestConfig = schedulingRequestConfig_;
      bsr_Config = bsr_Config_;
      tag_Config = tag_Config_;
      phr_Config = phr_Config_;
      skipUplinkTxDynamic = skipUplinkTxDynamic_;
      csi_Mask = csi_Mask_;
      dataInactivityTimer = dataInactivityTimer_;
      usePreBSR_r16 = usePreBSR_r16_;
      schedulingRequestID_LBT_SCell_r16 = schedulingRequestID_LBT_SCell_r16_;
      lch_BasedPrioritization_r16 = lch_BasedPrioritization_r16_;
      schedulingRequestID_BFR_SCell_r16 = schedulingRequestID_BFR_SCell_r16_;
      drx_ConfigSecondaryGroup_r16 = drx_ConfigSecondaryGroup_r16_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public MAC_CellGroupConfig (
      Asn1Boolean skipUplinkTxDynamic_
   ) {
      super();
      skipUplinkTxDynamic = skipUplinkTxDynamic_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public MAC_CellGroupConfig (MAC_CellGroupConfig_drx_Config drx_Config_,
      SchedulingRequestConfig schedulingRequestConfig_,
      BSR_Config bsr_Config_,
      TAG_Config tag_Config_,
      MAC_CellGroupConfig_phr_Config phr_Config_,
      boolean skipUplinkTxDynamic_,
      boolean csi_Mask_,
      MAC_CellGroupConfig_dataInactivityTimer dataInactivityTimer_,
      MAC_CellGroupConfig_usePreBSR_r16 usePreBSR_r16_,
      long schedulingRequestID_LBT_SCell_r16_,
      MAC_CellGroupConfig_lch_BasedPrioritization_r16 lch_BasedPrioritization_r16_,
      long schedulingRequestID_BFR_SCell_r16_,
      MAC_CellGroupConfig_drx_ConfigSecondaryGroup_r16 drx_ConfigSecondaryGroup_r16_
   ) {
      super();
      drx_Config = drx_Config_;
      schedulingRequestConfig = schedulingRequestConfig_;
      bsr_Config = bsr_Config_;
      tag_Config = tag_Config_;
      phr_Config = phr_Config_;
      skipUplinkTxDynamic = new Asn1Boolean (skipUplinkTxDynamic_);
      csi_Mask = new Asn1Boolean (csi_Mask_);
      dataInactivityTimer = dataInactivityTimer_;
      usePreBSR_r16 = usePreBSR_r16_;
      schedulingRequestID_LBT_SCell_r16 = new SchedulingRequestId (schedulingRequestID_LBT_SCell_r16_);
      lch_BasedPrioritization_r16 = lch_BasedPrioritization_r16_;
      schedulingRequestID_BFR_SCell_r16 = new SchedulingRequestId (schedulingRequestID_BFR_SCell_r16_);
      drx_ConfigSecondaryGroup_r16 = drx_ConfigSecondaryGroup_r16_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public MAC_CellGroupConfig (
      boolean skipUplinkTxDynamic_
   ) {
      super();
      skipUplinkTxDynamic = new Asn1Boolean (skipUplinkTxDynamic_);
   }

   public void init () {
      drx_Config = null;
      schedulingRequestConfig = null;
      bsr_Config = null;
      tag_Config = null;
      phr_Config = null;
      skipUplinkTxDynamic = null;
      csi_Mask = null;
      dataInactivityTimer = null;
      usePreBSR_r16 = null;
      schedulingRequestID_LBT_SCell_r16 = null;
      lch_BasedPrioritization_r16 = null;
      schedulingRequestID_BFR_SCell_r16 = null;
      drx_ConfigSecondaryGroup_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 14; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return drx_Config;
         case 1: return schedulingRequestConfig;
         case 2: return bsr_Config;
         case 3: return tag_Config;
         case 4: return phr_Config;
         case 5: return skipUplinkTxDynamic;
         case 6: return csi_Mask;
         case 7: return dataInactivityTimer;
         case 8: return usePreBSR_r16;
         case 9: return schedulingRequestID_LBT_SCell_r16;
         case 10: return lch_BasedPrioritization_r16;
         case 11: return schedulingRequestID_BFR_SCell_r16;
         case 12: return drx_ConfigSecondaryGroup_r16;
         case 13: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "drx-Config";
         case 1: return "schedulingRequestConfig";
         case 2: return "bsr-Config";
         case 3: return "tag-Config";
         case 4: return "phr-Config";
         case 5: return "skipUplinkTxDynamic";
         case 6: return "csi-Mask";
         case 7: return "dataInactivityTimer";
         case 8: return "usePreBSR-r16";
         case 9: return "schedulingRequestID-LBT-SCell-r16";
         case 10: return "lch-BasedPrioritization-r16";
         case 11: return "schedulingRequestID-BFR-SCell-r16";
         case 12: return "drx-ConfigSecondaryGroup-r16";
         case 13: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean drx_ConfigPresent = buffer.decodeBit ("drx_ConfigPresent");
      boolean schedulingRequestConfigPresent = buffer.decodeBit ("schedulingRequestConfigPresent");
      boolean bsr_ConfigPresent = buffer.decodeBit ("bsr_ConfigPresent");
      boolean tag_ConfigPresent = buffer.decodeBit ("tag_ConfigPresent");
      boolean phr_ConfigPresent = buffer.decodeBit ("phr_ConfigPresent");

      // decode drx_Config

      if (drx_ConfigPresent) {
         buffer.getContext().eventDispatcher.startElement("drx_Config", -1);

         drx_Config = new MAC_CellGroupConfig_drx_Config();
         drx_Config.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("drx_Config", -1);
      }
      else {
         drx_Config = null;
      }

      // decode schedulingRequestConfig

      if (schedulingRequestConfigPresent) {
         buffer.getContext().eventDispatcher.startElement("schedulingRequestConfig", -1);

         schedulingRequestConfig = new SchedulingRequestConfig();
         schedulingRequestConfig.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("schedulingRequestConfig", -1);
      }
      else {
         schedulingRequestConfig = null;
      }

      // decode bsr_Config

      if (bsr_ConfigPresent) {
         buffer.getContext().eventDispatcher.startElement("bsr_Config", -1);

         bsr_Config = new BSR_Config();
         bsr_Config.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("bsr_Config", -1);
      }
      else {
         bsr_Config = null;
      }

      // decode tag_Config

      if (tag_ConfigPresent) {
         buffer.getContext().eventDispatcher.startElement("tag_Config", -1);

         tag_Config = new TAG_Config();
         tag_Config.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("tag_Config", -1);
      }
      else {
         tag_Config = null;
      }

      // decode phr_Config

      if (phr_ConfigPresent) {
         buffer.getContext().eventDispatcher.startElement("phr_Config", -1);

         phr_Config = new MAC_CellGroupConfig_phr_Config();
         phr_Config.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("phr_Config", -1);
      }
      else {
         phr_Config = null;
      }

      // decode skipUplinkTxDynamic

      buffer.getContext().eventDispatcher.startElement("skipUplinkTxDynamic", -1);

      skipUplinkTxDynamic = new Asn1Boolean();
      skipUplinkTxDynamic.decode (buffer);

      buffer.invokeCharacters(skipUplinkTxDynamic.toString());
      buffer.getContext().eventDispatcher.endElement("skipUplinkTxDynamic", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean csi_MaskPresent = buffer.decodeBit ("csi_MaskPresent");

            boolean dataInactivityTimerPresent = buffer.decodeBit ("dataInactivityTimerPresent");

            // decode csi_Mask

            if (csi_MaskPresent) {
               buffer.getContext().eventDispatcher.startElement("csi_Mask", -1);

               csi_Mask = new Asn1Boolean();
               csi_Mask.decode (buffer);

               buffer.invokeCharacters(csi_Mask.toString());
               buffer.getContext().eventDispatcher.endElement("csi_Mask", -1);
            }
            else {
               csi_Mask = null;
            }

            // decode dataInactivityTimer

            if (dataInactivityTimerPresent) {
               buffer.getContext().eventDispatcher.startElement("dataInactivityTimer", -1);

               dataInactivityTimer = new MAC_CellGroupConfig_dataInactivityTimer();
               dataInactivityTimer.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("dataInactivityTimer", -1);
            }
            else {
               dataInactivityTimer = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean usePreBSR_r16Present = buffer.decodeBit ("usePreBSR_r16Present");

            boolean schedulingRequestID_LBT_SCell_r16Present = buffer.decodeBit ("schedulingRequestID_LBT_SCell_r16Present");

            boolean lch_BasedPrioritization_r16Present = buffer.decodeBit ("lch_BasedPrioritization_r16Present");

            boolean schedulingRequestID_BFR_SCell_r16Present = buffer.decodeBit ("schedulingRequestID_BFR_SCell_r16Present");

            boolean drx_ConfigSecondaryGroup_r16Present = buffer.decodeBit ("drx_ConfigSecondaryGroup_r16Present");

            // decode usePreBSR_r16

            if (usePreBSR_r16Present) {
               buffer.getContext().eventDispatcher.startElement("usePreBSR_r16", -1);

               int tval = MAC_CellGroupConfig_usePreBSR_r16.decodeEnumValue (buffer);
               usePreBSR_r16 = MAC_CellGroupConfig_usePreBSR_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("usePreBSR_r16", -1);
            }
            else {
               usePreBSR_r16 = null;
            }

            // decode schedulingRequestID_LBT_SCell_r16

            if (schedulingRequestID_LBT_SCell_r16Present) {
               buffer.getContext().eventDispatcher.startElement("schedulingRequestID_LBT_SCell_r16", -1);

               schedulingRequestID_LBT_SCell_r16 = new SchedulingRequestId();
               schedulingRequestID_LBT_SCell_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("schedulingRequestID_LBT_SCell_r16", -1);
            }
            else {
               schedulingRequestID_LBT_SCell_r16 = null;
            }

            // decode lch_BasedPrioritization_r16

            if (lch_BasedPrioritization_r16Present) {
               buffer.getContext().eventDispatcher.startElement("lch_BasedPrioritization_r16", -1);

               int tval = MAC_CellGroupConfig_lch_BasedPrioritization_r16.decodeEnumValue (buffer);
               lch_BasedPrioritization_r16 = MAC_CellGroupConfig_lch_BasedPrioritization_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("lch_BasedPrioritization_r16", -1);
            }
            else {
               lch_BasedPrioritization_r16 = null;
            }

            // decode schedulingRequestID_BFR_SCell_r16

            if (schedulingRequestID_BFR_SCell_r16Present) {
               buffer.getContext().eventDispatcher.startElement("schedulingRequestID_BFR_SCell_r16", -1);

               schedulingRequestID_BFR_SCell_r16 = new SchedulingRequestId();
               schedulingRequestID_BFR_SCell_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("schedulingRequestID_BFR_SCell_r16", -1);
            }
            else {
               schedulingRequestID_BFR_SCell_r16 = null;
            }

            // decode drx_ConfigSecondaryGroup_r16

            if (drx_ConfigSecondaryGroup_r16Present) {
               buffer.getContext().eventDispatcher.startElement("drx_ConfigSecondaryGroup_r16", -1);

               drx_ConfigSecondaryGroup_r16 = new MAC_CellGroupConfig_drx_ConfigSecondaryGroup_r16();
               drx_ConfigSecondaryGroup_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("drx_ConfigSecondaryGroup_r16", -1);
            }
            else {
               drx_ConfigSecondaryGroup_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (drx_Config != null) drx_Config.print (_sb, "drx_Config", _level+1);
      if (schedulingRequestConfig != null) schedulingRequestConfig.print (_sb, "schedulingRequestConfig", _level+1);
      if (bsr_Config != null) bsr_Config.print (_sb, "bsr_Config", _level+1);
      if (tag_Config != null) tag_Config.print (_sb, "tag_Config", _level+1);
      if (phr_Config != null) phr_Config.print (_sb, "phr_Config", _level+1);
      if (skipUplinkTxDynamic != null) skipUplinkTxDynamic.print (_sb, "skipUplinkTxDynamic", _level+1);
      if (csi_Mask != null) csi_Mask.print (_sb, "csi_Mask", _level+1);
      if (dataInactivityTimer != null) dataInactivityTimer.print (_sb, "dataInactivityTimer", _level+1);
      if (usePreBSR_r16 != null) usePreBSR_r16.print (_sb, "usePreBSR_r16", _level+1);
      if (schedulingRequestID_LBT_SCell_r16 != null) schedulingRequestID_LBT_SCell_r16.print (_sb, "schedulingRequestID_LBT_SCell_r16", _level+1);
      if (lch_BasedPrioritization_r16 != null) lch_BasedPrioritization_r16.print (_sb, "lch_BasedPrioritization_r16", _level+1);
      if (schedulingRequestID_BFR_SCell_r16 != null) schedulingRequestID_BFR_SCell_r16.print (_sb, "schedulingRequestID_BFR_SCell_r16", _level+1);
      if (drx_ConfigSecondaryGroup_r16 != null) drx_ConfigSecondaryGroup_r16.print (_sb, "drx_ConfigSecondaryGroup_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
