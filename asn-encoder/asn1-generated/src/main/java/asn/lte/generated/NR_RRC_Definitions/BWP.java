/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class BWP extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "BWP";
   }

   public Asn1Integer locationAndBandwidth;
   public SubcarrierSpacing subcarrierSpacing = null;
   public BWP_cyclicPrefix cyclicPrefix = null;  // optional

   public BWP () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public BWP (
      Asn1Integer locationAndBandwidth_,
      SubcarrierSpacing subcarrierSpacing_,
      BWP_cyclicPrefix cyclicPrefix_
   ) {
      super();
      locationAndBandwidth = locationAndBandwidth_;
      subcarrierSpacing = subcarrierSpacing_;
      cyclicPrefix = cyclicPrefix_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public BWP (
      Asn1Integer locationAndBandwidth_,
      SubcarrierSpacing subcarrierSpacing_
   ) {
      super();
      locationAndBandwidth = locationAndBandwidth_;
      subcarrierSpacing = subcarrierSpacing_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public BWP (long locationAndBandwidth_,
      SubcarrierSpacing subcarrierSpacing_,
      BWP_cyclicPrefix cyclicPrefix_
   ) {
      super();
      locationAndBandwidth = new Asn1Integer (locationAndBandwidth_);
      subcarrierSpacing = subcarrierSpacing_;
      cyclicPrefix = cyclicPrefix_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public BWP (
      long locationAndBandwidth_,
      SubcarrierSpacing subcarrierSpacing_
   ) {
      super();
      locationAndBandwidth = new Asn1Integer (locationAndBandwidth_);
      subcarrierSpacing = subcarrierSpacing_;
   }

   public void init () {
      locationAndBandwidth = null;
      subcarrierSpacing = null;
      cyclicPrefix = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return locationAndBandwidth;
         case 1: return subcarrierSpacing;
         case 2: return cyclicPrefix;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "locationAndBandwidth";
         case 1: return "subcarrierSpacing";
         case 2: return "cyclicPrefix";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean cyclicPrefixPresent = buffer.decodeBit ("cyclicPrefixPresent");

      // decode locationAndBandwidth

      buffer.getContext().eventDispatcher.startElement("locationAndBandwidth", -1);

      locationAndBandwidth = new Asn1Integer();
      locationAndBandwidth.decode (buffer, 0, 37949);

      buffer.invokeCharacters(locationAndBandwidth.toString());
      buffer.getContext().eventDispatcher.endElement("locationAndBandwidth", -1);

      // decode subcarrierSpacing

      buffer.getContext().eventDispatcher.startElement("subcarrierSpacing", -1);

      {
         int tval = SubcarrierSpacing.decodeEnumValue (buffer);
         subcarrierSpacing = SubcarrierSpacing.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("subcarrierSpacing", -1);

      // decode cyclicPrefix

      if (cyclicPrefixPresent) {
         buffer.getContext().eventDispatcher.startElement("cyclicPrefix", -1);

         int tval = BWP_cyclicPrefix.decodeEnumValue (buffer);
         cyclicPrefix = BWP_cyclicPrefix.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("cyclicPrefix", -1);
      }
      else {
         cyclicPrefix = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (locationAndBandwidth != null) locationAndBandwidth.print (_sb, "locationAndBandwidth", _level+1);
      if (subcarrierSpacing != null) subcarrierSpacing.print (_sb, "subcarrierSpacing", _level+1);
      if (cyclicPrefix != null) cyclicPrefix.print (_sb, "cyclicPrefix", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
