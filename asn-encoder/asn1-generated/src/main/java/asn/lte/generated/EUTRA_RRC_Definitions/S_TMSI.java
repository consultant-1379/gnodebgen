/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class S_TMSI extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "S-TMSI";
   }

   public MMEC mmec;
   public Asn1BitString m_TMSI;

   public S_TMSI () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public S_TMSI (
      MMEC mmec_,
      Asn1BitString m_TMSI_
   ) {
      super();
      mmec = mmec_;
      m_TMSI = m_TMSI_;
   }

   public void init () {
      mmec = null;
      m_TMSI = null;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return mmec;
         case 1: return m_TMSI;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "mmec";
         case 1: return "m-TMSI";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode mmec

      buffer.getContext().eventDispatcher.startElement("mmec", -1);

      mmec = new MMEC();
      mmec.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("mmec", -1);

      // decode m_TMSI

      buffer.getContext().eventDispatcher.startElement("m_TMSI", -1);

      m_TMSI = new Asn1BitString();
      m_TMSI.decode (buffer, 32, 32);

      buffer.invokeCharacters(m_TMSI.toString());
      buffer.getContext().eventDispatcher.endElement("m_TMSI", -1);

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (mmec != null) mmec.print (_sb, "mmec", _level+1);
      if (m_TMSI != null) m_TMSI.print (_sb, "m_TMSI", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
