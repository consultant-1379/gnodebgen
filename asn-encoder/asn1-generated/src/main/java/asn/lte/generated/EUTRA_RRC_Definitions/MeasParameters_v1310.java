/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MeasParameters_v1310 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "MeasParameters-v1310";
   }

   public MeasParameters_v1310_rs_SINR_Meas_r13 rs_SINR_Meas_r13 = null;  // optional
   public MeasParameters_v1310_whiteCellList_r13 whiteCellList_r13 = null;  // optional
   public MeasParameters_v1310_extendedMaxObjectId_r13 extendedMaxObjectId_r13 = null;  // optional
   public MeasParameters_v1310_ul_PDCP_Delay_r13 ul_PDCP_Delay_r13 = null;  // optional
   public MeasParameters_v1310_extendedFreqPriorities_r13 extendedFreqPriorities_r13 = null;  // optional
   public MeasParameters_v1310_multiBandInfoReport_r13 multiBandInfoReport_r13 = null;  // optional
   public MeasParameters_v1310_rssi_AndChannelOccupancyReporting_r13 rssi_AndChannelOccupancyReporting_r13 = null;  // optional

   public MeasParameters_v1310 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MeasParameters_v1310 (
      MeasParameters_v1310_rs_SINR_Meas_r13 rs_SINR_Meas_r13_,
      MeasParameters_v1310_whiteCellList_r13 whiteCellList_r13_,
      MeasParameters_v1310_extendedMaxObjectId_r13 extendedMaxObjectId_r13_,
      MeasParameters_v1310_ul_PDCP_Delay_r13 ul_PDCP_Delay_r13_,
      MeasParameters_v1310_extendedFreqPriorities_r13 extendedFreqPriorities_r13_,
      MeasParameters_v1310_multiBandInfoReport_r13 multiBandInfoReport_r13_,
      MeasParameters_v1310_rssi_AndChannelOccupancyReporting_r13 rssi_AndChannelOccupancyReporting_r13_
   ) {
      super();
      rs_SINR_Meas_r13 = rs_SINR_Meas_r13_;
      whiteCellList_r13 = whiteCellList_r13_;
      extendedMaxObjectId_r13 = extendedMaxObjectId_r13_;
      ul_PDCP_Delay_r13 = ul_PDCP_Delay_r13_;
      extendedFreqPriorities_r13 = extendedFreqPriorities_r13_;
      multiBandInfoReport_r13 = multiBandInfoReport_r13_;
      rssi_AndChannelOccupancyReporting_r13 = rssi_AndChannelOccupancyReporting_r13_;
   }

   public void init () {
      rs_SINR_Meas_r13 = null;
      whiteCellList_r13 = null;
      extendedMaxObjectId_r13 = null;
      ul_PDCP_Delay_r13 = null;
      extendedFreqPriorities_r13 = null;
      multiBandInfoReport_r13 = null;
      rssi_AndChannelOccupancyReporting_r13 = null;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return rs_SINR_Meas_r13;
         case 1: return whiteCellList_r13;
         case 2: return extendedMaxObjectId_r13;
         case 3: return ul_PDCP_Delay_r13;
         case 4: return extendedFreqPriorities_r13;
         case 5: return multiBandInfoReport_r13;
         case 6: return rssi_AndChannelOccupancyReporting_r13;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "rs-SINR-Meas-r13";
         case 1: return "whiteCellList-r13";
         case 2: return "extendedMaxObjectId-r13";
         case 3: return "ul-PDCP-Delay-r13";
         case 4: return "extendedFreqPriorities-r13";
         case 5: return "multiBandInfoReport-r13";
         case 6: return "rssi-AndChannelOccupancyReporting-r13";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean rs_SINR_Meas_r13Present = buffer.decodeBit ("rs_SINR_Meas_r13Present");
      boolean whiteCellList_r13Present = buffer.decodeBit ("whiteCellList_r13Present");
      boolean extendedMaxObjectId_r13Present = buffer.decodeBit ("extendedMaxObjectId_r13Present");
      boolean ul_PDCP_Delay_r13Present = buffer.decodeBit ("ul_PDCP_Delay_r13Present");
      boolean extendedFreqPriorities_r13Present = buffer.decodeBit ("extendedFreqPriorities_r13Present");
      boolean multiBandInfoReport_r13Present = buffer.decodeBit ("multiBandInfoReport_r13Present");
      boolean rssi_AndChannelOccupancyReporting_r13Present = buffer.decodeBit ("rssi_AndChannelOccupancyReporting_r13Present");

      // decode rs_SINR_Meas_r13

      if (rs_SINR_Meas_r13Present) {
         buffer.getContext().eventDispatcher.startElement("rs_SINR_Meas_r13", -1);

         int tval = MeasParameters_v1310_rs_SINR_Meas_r13.decodeEnumValue (buffer);
         rs_SINR_Meas_r13 = MeasParameters_v1310_rs_SINR_Meas_r13.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("rs_SINR_Meas_r13", -1);
      }
      else {
         rs_SINR_Meas_r13 = null;
      }

      // decode whiteCellList_r13

      if (whiteCellList_r13Present) {
         buffer.getContext().eventDispatcher.startElement("whiteCellList_r13", -1);

         int tval = MeasParameters_v1310_whiteCellList_r13.decodeEnumValue (buffer);
         whiteCellList_r13 = MeasParameters_v1310_whiteCellList_r13.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("whiteCellList_r13", -1);
      }
      else {
         whiteCellList_r13 = null;
      }

      // decode extendedMaxObjectId_r13

      if (extendedMaxObjectId_r13Present) {
         buffer.getContext().eventDispatcher.startElement("extendedMaxObjectId_r13", -1);

         int tval = MeasParameters_v1310_extendedMaxObjectId_r13.decodeEnumValue (buffer);
         extendedMaxObjectId_r13 = MeasParameters_v1310_extendedMaxObjectId_r13.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("extendedMaxObjectId_r13", -1);
      }
      else {
         extendedMaxObjectId_r13 = null;
      }

      // decode ul_PDCP_Delay_r13

      if (ul_PDCP_Delay_r13Present) {
         buffer.getContext().eventDispatcher.startElement("ul_PDCP_Delay_r13", -1);

         int tval = MeasParameters_v1310_ul_PDCP_Delay_r13.decodeEnumValue (buffer);
         ul_PDCP_Delay_r13 = MeasParameters_v1310_ul_PDCP_Delay_r13.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("ul_PDCP_Delay_r13", -1);
      }
      else {
         ul_PDCP_Delay_r13 = null;
      }

      // decode extendedFreqPriorities_r13

      if (extendedFreqPriorities_r13Present) {
         buffer.getContext().eventDispatcher.startElement("extendedFreqPriorities_r13", -1);

         int tval = MeasParameters_v1310_extendedFreqPriorities_r13.decodeEnumValue (buffer);
         extendedFreqPriorities_r13 = MeasParameters_v1310_extendedFreqPriorities_r13.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("extendedFreqPriorities_r13", -1);
      }
      else {
         extendedFreqPriorities_r13 = null;
      }

      // decode multiBandInfoReport_r13

      if (multiBandInfoReport_r13Present) {
         buffer.getContext().eventDispatcher.startElement("multiBandInfoReport_r13", -1);

         int tval = MeasParameters_v1310_multiBandInfoReport_r13.decodeEnumValue (buffer);
         multiBandInfoReport_r13 = MeasParameters_v1310_multiBandInfoReport_r13.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("multiBandInfoReport_r13", -1);
      }
      else {
         multiBandInfoReport_r13 = null;
      }

      // decode rssi_AndChannelOccupancyReporting_r13

      if (rssi_AndChannelOccupancyReporting_r13Present) {
         buffer.getContext().eventDispatcher.startElement("rssi_AndChannelOccupancyReporting_r13", -1);

         int tval = MeasParameters_v1310_rssi_AndChannelOccupancyReporting_r13.decodeEnumValue (buffer);
         rssi_AndChannelOccupancyReporting_r13 = MeasParameters_v1310_rssi_AndChannelOccupancyReporting_r13.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("rssi_AndChannelOccupancyReporting_r13", -1);
      }
      else {
         rssi_AndChannelOccupancyReporting_r13 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (rs_SINR_Meas_r13 != null) rs_SINR_Meas_r13.print (_sb, "rs_SINR_Meas_r13", _level+1);
      if (whiteCellList_r13 != null) whiteCellList_r13.print (_sb, "whiteCellList_r13", _level+1);
      if (extendedMaxObjectId_r13 != null) extendedMaxObjectId_r13.print (_sb, "extendedMaxObjectId_r13", _level+1);
      if (ul_PDCP_Delay_r13 != null) ul_PDCP_Delay_r13.print (_sb, "ul_PDCP_Delay_r13", _level+1);
      if (extendedFreqPriorities_r13 != null) extendedFreqPriorities_r13.print (_sb, "extendedFreqPriorities_r13", _level+1);
      if (multiBandInfoReport_r13 != null) multiBandInfoReport_r13.print (_sb, "multiBandInfoReport_r13", _level+1);
      if (rssi_AndChannelOccupancyReporting_r13 != null) rssi_AndChannelOccupancyReporting_r13.print (_sb, "rssi_AndChannelOccupancyReporting_r13", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
