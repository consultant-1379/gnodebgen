/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.X2AP_PDU_Contents;

import com.objsys.asn1j.runtime.*;
import asn.lte.generated.X2AP_IEs.E_RAB_Level_QoS_Parameters;
import asn.lte.generated.X2AP_IEs.GBR_QosInformation;
import asn.lte.generated.X2AP_IEs.DL_Forwarding;
import asn.lte.generated.X2AP_IEs.GTPtunnelEndpoint;

public class E_RABs_ToBeAdded_SgNBModReq_Item_SgNBPDCPpresent extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_X2AP_PDU_ContentsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "E-RABs-ToBeAdded-SgNBModReq-Item-SgNBPDCPpresent";
   }

   public E_RAB_Level_QoS_Parameters full_E_RAB_Level_QoS_Parameters;
   public GBR_QosInformation max_MN_admit_E_RAB_Level_QoS_Parameters;  // optional
   public DL_Forwarding dL_Forwarding = null;  // optional
   public GTPtunnelEndpoint meNB_DL_GTP_TEIDatMCG;  // optional
   public GTPtunnelEndpoint s1_UL_GTPtunnelEndpoint;
   public E_RABs_ToBeAdded_SgNBModReq_Item_SgNBPDCPpresent_iE_Extensions iE_Extensions;  // optional
   public Asn1OpenExt extElem1;

   public E_RABs_ToBeAdded_SgNBModReq_Item_SgNBPDCPpresent () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public E_RABs_ToBeAdded_SgNBModReq_Item_SgNBPDCPpresent (
      E_RAB_Level_QoS_Parameters full_E_RAB_Level_QoS_Parameters_,
      GBR_QosInformation max_MN_admit_E_RAB_Level_QoS_Parameters_,
      DL_Forwarding dL_Forwarding_,
      GTPtunnelEndpoint meNB_DL_GTP_TEIDatMCG_,
      GTPtunnelEndpoint s1_UL_GTPtunnelEndpoint_,
      E_RABs_ToBeAdded_SgNBModReq_Item_SgNBPDCPpresent_iE_Extensions iE_Extensions_
   ) {
      super();
      full_E_RAB_Level_QoS_Parameters = full_E_RAB_Level_QoS_Parameters_;
      max_MN_admit_E_RAB_Level_QoS_Parameters = max_MN_admit_E_RAB_Level_QoS_Parameters_;
      dL_Forwarding = dL_Forwarding_;
      meNB_DL_GTP_TEIDatMCG = meNB_DL_GTP_TEIDatMCG_;
      s1_UL_GTPtunnelEndpoint = s1_UL_GTPtunnelEndpoint_;
      iE_Extensions = iE_Extensions_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public E_RABs_ToBeAdded_SgNBModReq_Item_SgNBPDCPpresent (
      E_RAB_Level_QoS_Parameters full_E_RAB_Level_QoS_Parameters_,
      GTPtunnelEndpoint s1_UL_GTPtunnelEndpoint_
   ) {
      super();
      full_E_RAB_Level_QoS_Parameters = full_E_RAB_Level_QoS_Parameters_;
      s1_UL_GTPtunnelEndpoint = s1_UL_GTPtunnelEndpoint_;
   }

   public void init () {
      full_E_RAB_Level_QoS_Parameters = null;
      max_MN_admit_E_RAB_Level_QoS_Parameters = null;
      dL_Forwarding = null;
      meNB_DL_GTP_TEIDatMCG = null;
      s1_UL_GTPtunnelEndpoint = null;
      iE_Extensions = null;
      extElem1 = null;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return full_E_RAB_Level_QoS_Parameters;
         case 1: return max_MN_admit_E_RAB_Level_QoS_Parameters;
         case 2: return dL_Forwarding;
         case 3: return meNB_DL_GTP_TEIDatMCG;
         case 4: return s1_UL_GTPtunnelEndpoint;
         case 5: return iE_Extensions;
         case 6: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "full-E-RAB-Level-QoS-Parameters";
         case 1: return "max-MN-admit-E-RAB-Level-QoS-Parameters";
         case 2: return "dL-Forwarding";
         case 3: return "meNB-DL-GTP-TEIDatMCG";
         case 4: return "s1-UL-GTPtunnelEndpoint";
         case 5: return "iE-Extensions";
         case 6: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean max_MN_admit_E_RAB_Level_QoS_ParametersPresent = buffer.decodeBit ("max_MN_admit_E_RAB_Level_QoS_ParametersPresent");
      boolean dL_ForwardingPresent = buffer.decodeBit ("dL_ForwardingPresent");
      boolean meNB_DL_GTP_TEIDatMCGPresent = buffer.decodeBit ("meNB_DL_GTP_TEIDatMCGPresent");
      boolean iE_ExtensionsPresent = buffer.decodeBit ("iE_ExtensionsPresent");

      // decode full_E_RAB_Level_QoS_Parameters

      buffer.getContext().eventDispatcher.startElement("full_E_RAB_Level_QoS_Parameters", -1);

      full_E_RAB_Level_QoS_Parameters = new E_RAB_Level_QoS_Parameters();
      full_E_RAB_Level_QoS_Parameters.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("full_E_RAB_Level_QoS_Parameters", -1);

      // decode max_MN_admit_E_RAB_Level_QoS_Parameters

      if (max_MN_admit_E_RAB_Level_QoS_ParametersPresent) {
         buffer.getContext().eventDispatcher.startElement("max_MN_admit_E_RAB_Level_QoS_Parameters", -1);

         max_MN_admit_E_RAB_Level_QoS_Parameters = new GBR_QosInformation();
         max_MN_admit_E_RAB_Level_QoS_Parameters.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("max_MN_admit_E_RAB_Level_QoS_Parameters", -1);
      }
      else {
         max_MN_admit_E_RAB_Level_QoS_Parameters = null;
      }

      // decode dL_Forwarding

      if (dL_ForwardingPresent) {
         buffer.getContext().eventDispatcher.startElement("dL_Forwarding", -1);

         int tval = DL_Forwarding.decodeEnumValue (buffer);
         dL_Forwarding = DL_Forwarding.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("dL_Forwarding", -1);
      }
      else {
         dL_Forwarding = null;
      }

      // decode meNB_DL_GTP_TEIDatMCG

      if (meNB_DL_GTP_TEIDatMCGPresent) {
         buffer.getContext().eventDispatcher.startElement("meNB_DL_GTP_TEIDatMCG", -1);

         meNB_DL_GTP_TEIDatMCG = new GTPtunnelEndpoint();
         meNB_DL_GTP_TEIDatMCG.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("meNB_DL_GTP_TEIDatMCG", -1);
      }
      else {
         meNB_DL_GTP_TEIDatMCG = null;
      }

      // decode s1_UL_GTPtunnelEndpoint

      buffer.getContext().eventDispatcher.startElement("s1_UL_GTPtunnelEndpoint", -1);

      s1_UL_GTPtunnelEndpoint = new GTPtunnelEndpoint();
      s1_UL_GTPtunnelEndpoint.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("s1_UL_GTPtunnelEndpoint", -1);

      // decode iE_Extensions

      if (iE_ExtensionsPresent) {
         buffer.getContext().eventDispatcher.startElement("iE_Extensions", -1);

         iE_Extensions = new E_RABs_ToBeAdded_SgNBModReq_Item_SgNBPDCPpresent_iE_Extensions();
         iE_Extensions.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("iE_Extensions", -1);
      }
      else {
         iE_Extensions = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (full_E_RAB_Level_QoS_Parameters != null) full_E_RAB_Level_QoS_Parameters.print (_sb, "full_E_RAB_Level_QoS_Parameters", _level+1);
      if (max_MN_admit_E_RAB_Level_QoS_Parameters != null) max_MN_admit_E_RAB_Level_QoS_Parameters.print (_sb, "max_MN_admit_E_RAB_Level_QoS_Parameters", _level+1);
      if (dL_Forwarding != null) dL_Forwarding.print (_sb, "dL_Forwarding", _level+1);
      if (meNB_DL_GTP_TEIDatMCG != null) meNB_DL_GTP_TEIDatMCG.print (_sb, "meNB_DL_GTP_TEIDatMCG", _level+1);
      if (s1_UL_GTPtunnelEndpoint != null) s1_UL_GTPtunnelEndpoint.print (_sb, "s1_UL_GTPtunnelEndpoint", _level+1);
      if (iE_Extensions != null) iE_Extensions.print (_sb, "iE_Extensions", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
