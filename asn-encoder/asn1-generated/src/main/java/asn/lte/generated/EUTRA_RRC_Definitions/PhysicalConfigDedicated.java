/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class PhysicalConfigDedicated extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "PhysicalConfigDedicated";
   }

   public PDSCH_ConfigDedicated pdsch_ConfigDedicated;  // optional
   public PUCCH_ConfigDedicated pucch_ConfigDedicated;  // optional
   public PUSCH_ConfigDedicated pusch_ConfigDedicated;  // optional
   public UplinkPowerControlDedicated uplinkPowerControlDedicated;  // optional
   public TPC_PDCCH_Config tpc_PDCCH_ConfigPUCCH;  // optional
   public TPC_PDCCH_Config tpc_PDCCH_ConfigPUSCH;  // optional
   public CQI_ReportConfig cqi_ReportConfig;  // optional
   public SoundingRS_UL_ConfigDedicated soundingRS_UL_ConfigDedicated;  // optional
   public PhysicalConfigDedicated_antennaInfo antennaInfo;  // optional
   public SchedulingRequestConfig schedulingRequestConfig;  // optional
   public boolean mV2ExtPresent;
   public CQI_ReportConfig_v920 cqi_ReportConfig_v920;  // optional
   public AntennaInfoDedicated_v920 antennaInfo_v920;  // optional
   public boolean mV3ExtPresent;
   public PhysicalConfigDedicated_antennaInfo_r10 antennaInfo_r10;  // optional
   public AntennaInfoUL_r10 antennaInfoUL_r10;  // optional
   public Asn1Boolean cif_Presence_r10;  // optional
   public CQI_ReportConfig_r10 cqi_ReportConfig_r10;  // optional
   public CSI_RS_Config_r10 csi_RS_Config_r10;  // optional
   public PUCCH_ConfigDedicated_v1020 pucch_ConfigDedicated_v1020;  // optional
   public PUSCH_ConfigDedicated_v1020 pusch_ConfigDedicated_v1020;  // optional
   public SchedulingRequestConfig_v1020 schedulingRequestConfig_v1020;  // optional
   public SoundingRS_UL_ConfigDedicated_v1020 soundingRS_UL_ConfigDedicated_v1020;  // optional
   public SoundingRS_UL_ConfigDedicatedAperiodic_r10 soundingRS_UL_ConfigDedicatedAperiodic_r10;  // optional
   public UplinkPowerControlDedicated_v1020 uplinkPowerControlDedicated_v1020;  // optional
   public boolean mV4ExtPresent;
   public PhysicalConfigDedicated_additionalSpectrumEmissionCA_r10 additionalSpectrumEmissionCA_r10;  // optional
   public boolean mV5ExtPresent;
   public CSI_RS_ConfigNZPToReleaseList_r11 csi_RS_ConfigNZPToReleaseList_r11;  // optional
   public CSI_RS_ConfigNZPToAddModList_r11 csi_RS_ConfigNZPToAddModList_r11;  // optional
   public CSI_RS_ConfigZPToReleaseList_r11 csi_RS_ConfigZPToReleaseList_r11;  // optional
   public CSI_RS_ConfigZPToAddModList_r11 csi_RS_ConfigZPToAddModList_r11;  // optional
   public EPDCCH_Config_r11 epdcch_Config_r11;  // optional
   public PDSCH_ConfigDedicated_v1130 pdsch_ConfigDedicated_v1130;  // optional
   public CQI_ReportConfig_v1130 cqi_ReportConfig_v1130;  // optional
   public PUCCH_ConfigDedicated_v1130 pucch_ConfigDedicated_v1130;  // optional
   public PUSCH_ConfigDedicated_v1130 pusch_ConfigDedicated_v1130;  // optional
   public UplinkPowerControlDedicated_v1130 uplinkPowerControlDedicated_v1130;  // optional
   public boolean mV6ExtPresent;
   public AntennaInfoDedicated_v1250 antennaInfo_v1250;  // optional
   public EIMTA_MainConfig_r12 eimta_MainConfig_r12;  // optional
   public EIMTA_MainConfigServCell_r12 eimta_MainConfigPCell_r12;  // optional
   public PUCCH_ConfigDedicated_v1250 pucch_ConfigDedicated_v1250;  // optional
   public CQI_ReportConfig_v1250 cqi_ReportConfigPCell_v1250;  // optional
   public UplinkPowerControlDedicated_v1250 uplinkPowerControlDedicated_v1250;  // optional
   public PUSCH_ConfigDedicated_v1250 pusch_ConfigDedicated_v1250;  // optional
   public CSI_RS_Config_v1250 csi_RS_Config_v1250;  // optional
   public boolean mV7ExtPresent;
   public PDSCH_ConfigDedicated_v1280 pdsch_ConfigDedicated_v1280;  // optional
   public boolean mV8ExtPresent;
   public PDSCH_ConfigDedicated_v1310 pdsch_ConfigDedicated_v1310;  // optional
   public PUCCH_ConfigDedicated_r13 pucch_ConfigDedicated_r13;  // optional
   public PUSCH_ConfigDedicated_r13 pusch_ConfigDedicated_r13;  // optional
   public PDCCH_CandidateReductions_r13 pdcch_CandidateReductions_r13;  // optional
   public CQI_ReportConfig_v1310 cqi_ReportConfig_v1310;  // optional
   public SoundingRS_UL_ConfigDedicated_v1310 soundingRS_UL_ConfigDedicated_v1310;  // optional
   public SoundingRS_UL_ConfigDedicatedUpPTsExt_r13 soundingRS_UL_ConfigDedicatedUpPTsExt_r13;  // optional
   public SoundingRS_UL_ConfigDedicatedAperiodic_v1310 soundingRS_UL_ConfigDedicatedAperiodic_v1310;  // optional
   public SoundingRS_UL_ConfigDedicatedAperiodicUpPTsExt_r13 soundingRS_UL_ConfigDedicatedAperiodicUpPTsExt_r13;  // optional
   public CSI_RS_Config_v1310 csi_RS_Config_v1310;  // optional
   public PhysicalConfigDedicated_ce_Mode_r13 ce_Mode_r13;  // optional
   public CSI_RS_ConfigNZPToAddModListExt_r13 csi_RS_ConfigNZPToAddModListExt_r13;  // optional
   public CSI_RS_ConfigNZPToReleaseListExt_r13 csi_RS_ConfigNZPToReleaseListExt_r13;  // optional
   public boolean mV9ExtPresent;
   public CQI_ReportConfig_v1320 cqi_ReportConfig_v1320;  // optional
   public boolean mV10ExtPresent;
   public PhysicalConfigDedicated_typeA_SRS_TPC_PDCCH_Group_r14 typeA_SRS_TPC_PDCCH_Group_r14;  // optional
   public PhysicalConfigDedicated_must_Config_r14 must_Config_r14;  // optional
   public PUSCH_EnhancementsConfig_r14 pusch_EnhancementsConfig_r14;  // optional
   public PhysicalConfigDedicated_ce_pdsch_pusch_EnhancementConfig_r14 ce_pdsch_pusch_EnhancementConfig_r14 = null;  // optional
   public AntennaInfoDedicated_v1430 antennaInfo_v1430;  // optional
   public PUCCH_ConfigDedicated_v1430 pucch_ConfigDedicated_v1430;  // optional
   public PDSCH_ConfigDedicated_v1430 pdsch_ConfigDedicated_v1430;  // optional
   public PUSCH_ConfigDedicated_v1430 pusch_ConfigDedicated_v1430;  // optional
   public PhysicalConfigDedicated_soundingRS_UL_PeriodicConfigDedicatedList_r14 soundingRS_UL_PeriodicConfigDedicatedList_r14;  // optional
   public PhysicalConfigDedicated_soundingRS_UL_PeriodicConfigDedicatedUpPTsExtList_r14 soundingRS_UL_PeriodicConfigDedicatedUpPTsExtList_r14;  // optional
   public PhysicalConfigDedicated_soundingRS_UL_AperiodicConfigDedicatedList_r14 soundingRS_UL_AperiodicConfigDedicatedList_r14;  // optional
   public PhysicalConfigDedicated_soundingRS_UL_ConfigDedicatedApUpPTsExtList_r14 soundingRS_UL_ConfigDedicatedApUpPTsExtList_r14;  // optional
   public CSI_RS_Config_v1430 csi_RS_Config_v1430;  // optional
   public CSI_RS_ConfigZP_ApList_r14 csi_RS_ConfigZP_ApList_r14;  // optional
   public CQI_ReportConfig_v1430 cqi_ReportConfig_v1430;  // optional
   public Asn1Boolean semiOpenLoop_r14;  // optional
   public boolean mV11ExtPresent;
   public CSI_RS_Config_v1480 csi_RS_Config_v1480;  // optional
   public boolean mV12ExtPresent;
   public PhysicalConfigDedicatedSTTI_r15 physicalConfigDedicatedSTTI_r15;  // optional
   public PDSCH_ConfigDedicated_v1530 pdsch_ConfigDedicated_v1530;  // optional
   public PUSCH_ConfigDedicated_v1530 pusch_ConfigDedicated_v1530;  // optional
   public CQI_ReportConfig_v1530 cqi_ReportConfig_v1530;  // optional
   public AntennaInfoDedicated_v1530 antennaInfo_v1530;  // optional
   public CSI_RS_Config_v1530 csi_RS_Config_v1530;  // optional
   public UplinkPowerControlDedicated_v1530 uplinkPowerControlDedicated_v1530;  // optional
   public PhysicalConfigDedicated_semiStaticCFI_Config_r15 semiStaticCFI_Config_r15;  // optional
   public PhysicalConfigDedicated_blindPDSCH_Repetition_Config_r15 blindPDSCH_Repetition_Config_r15;  // optional
   public Asn1OpenExt extElem1;

   public PhysicalConfigDedicated () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public PhysicalConfigDedicated (
      PDSCH_ConfigDedicated pdsch_ConfigDedicated_,
      PUCCH_ConfigDedicated pucch_ConfigDedicated_,
      PUSCH_ConfigDedicated pusch_ConfigDedicated_,
      UplinkPowerControlDedicated uplinkPowerControlDedicated_,
      TPC_PDCCH_Config tpc_PDCCH_ConfigPUCCH_,
      TPC_PDCCH_Config tpc_PDCCH_ConfigPUSCH_,
      CQI_ReportConfig cqi_ReportConfig_,
      SoundingRS_UL_ConfigDedicated soundingRS_UL_ConfigDedicated_,
      PhysicalConfigDedicated_antennaInfo antennaInfo_,
      SchedulingRequestConfig schedulingRequestConfig_,
      CQI_ReportConfig_v920 cqi_ReportConfig_v920_,
      AntennaInfoDedicated_v920 antennaInfo_v920_,
      PhysicalConfigDedicated_antennaInfo_r10 antennaInfo_r10_,
      AntennaInfoUL_r10 antennaInfoUL_r10_,
      Asn1Boolean cif_Presence_r10_,
      CQI_ReportConfig_r10 cqi_ReportConfig_r10_,
      CSI_RS_Config_r10 csi_RS_Config_r10_,
      PUCCH_ConfigDedicated_v1020 pucch_ConfigDedicated_v1020_,
      PUSCH_ConfigDedicated_v1020 pusch_ConfigDedicated_v1020_,
      SchedulingRequestConfig_v1020 schedulingRequestConfig_v1020_,
      SoundingRS_UL_ConfigDedicated_v1020 soundingRS_UL_ConfigDedicated_v1020_,
      SoundingRS_UL_ConfigDedicatedAperiodic_r10 soundingRS_UL_ConfigDedicatedAperiodic_r10_,
      UplinkPowerControlDedicated_v1020 uplinkPowerControlDedicated_v1020_,
      PhysicalConfigDedicated_additionalSpectrumEmissionCA_r10 additionalSpectrumEmissionCA_r10_,
      CSI_RS_ConfigNZPToReleaseList_r11 csi_RS_ConfigNZPToReleaseList_r11_,
      CSI_RS_ConfigNZPToAddModList_r11 csi_RS_ConfigNZPToAddModList_r11_,
      CSI_RS_ConfigZPToReleaseList_r11 csi_RS_ConfigZPToReleaseList_r11_,
      CSI_RS_ConfigZPToAddModList_r11 csi_RS_ConfigZPToAddModList_r11_,
      EPDCCH_Config_r11 epdcch_Config_r11_,
      PDSCH_ConfigDedicated_v1130 pdsch_ConfigDedicated_v1130_,
      CQI_ReportConfig_v1130 cqi_ReportConfig_v1130_,
      PUCCH_ConfigDedicated_v1130 pucch_ConfigDedicated_v1130_,
      PUSCH_ConfigDedicated_v1130 pusch_ConfigDedicated_v1130_,
      UplinkPowerControlDedicated_v1130 uplinkPowerControlDedicated_v1130_,
      AntennaInfoDedicated_v1250 antennaInfo_v1250_,
      EIMTA_MainConfig_r12 eimta_MainConfig_r12_,
      EIMTA_MainConfigServCell_r12 eimta_MainConfigPCell_r12_,
      PUCCH_ConfigDedicated_v1250 pucch_ConfigDedicated_v1250_,
      CQI_ReportConfig_v1250 cqi_ReportConfigPCell_v1250_,
      UplinkPowerControlDedicated_v1250 uplinkPowerControlDedicated_v1250_,
      PUSCH_ConfigDedicated_v1250 pusch_ConfigDedicated_v1250_,
      CSI_RS_Config_v1250 csi_RS_Config_v1250_,
      PDSCH_ConfigDedicated_v1280 pdsch_ConfigDedicated_v1280_,
      PDSCH_ConfigDedicated_v1310 pdsch_ConfigDedicated_v1310_,
      PUCCH_ConfigDedicated_r13 pucch_ConfigDedicated_r13_,
      PUSCH_ConfigDedicated_r13 pusch_ConfigDedicated_r13_,
      PDCCH_CandidateReductions_r13 pdcch_CandidateReductions_r13_,
      CQI_ReportConfig_v1310 cqi_ReportConfig_v1310_,
      SoundingRS_UL_ConfigDedicated_v1310 soundingRS_UL_ConfigDedicated_v1310_,
      SoundingRS_UL_ConfigDedicatedUpPTsExt_r13 soundingRS_UL_ConfigDedicatedUpPTsExt_r13_,
      SoundingRS_UL_ConfigDedicatedAperiodic_v1310 soundingRS_UL_ConfigDedicatedAperiodic_v1310_,
      SoundingRS_UL_ConfigDedicatedAperiodicUpPTsExt_r13 soundingRS_UL_ConfigDedicatedAperiodicUpPTsExt_r13_,
      CSI_RS_Config_v1310 csi_RS_Config_v1310_,
      PhysicalConfigDedicated_ce_Mode_r13 ce_Mode_r13_,
      CSI_RS_ConfigNZPToAddModListExt_r13 csi_RS_ConfigNZPToAddModListExt_r13_,
      CSI_RS_ConfigNZPToReleaseListExt_r13 csi_RS_ConfigNZPToReleaseListExt_r13_,
      CQI_ReportConfig_v1320 cqi_ReportConfig_v1320_,
      PhysicalConfigDedicated_typeA_SRS_TPC_PDCCH_Group_r14 typeA_SRS_TPC_PDCCH_Group_r14_,
      PhysicalConfigDedicated_must_Config_r14 must_Config_r14_,
      PUSCH_EnhancementsConfig_r14 pusch_EnhancementsConfig_r14_,
      PhysicalConfigDedicated_ce_pdsch_pusch_EnhancementConfig_r14 ce_pdsch_pusch_EnhancementConfig_r14_,
      AntennaInfoDedicated_v1430 antennaInfo_v1430_,
      PUCCH_ConfigDedicated_v1430 pucch_ConfigDedicated_v1430_,
      PDSCH_ConfigDedicated_v1430 pdsch_ConfigDedicated_v1430_,
      PUSCH_ConfigDedicated_v1430 pusch_ConfigDedicated_v1430_,
      PhysicalConfigDedicated_soundingRS_UL_PeriodicConfigDedicatedList_r14 soundingRS_UL_PeriodicConfigDedicatedList_r14_,
      PhysicalConfigDedicated_soundingRS_UL_PeriodicConfigDedicatedUpPTsExtList_r14 soundingRS_UL_PeriodicConfigDedicatedUpPTsExtList_r14_,
      PhysicalConfigDedicated_soundingRS_UL_AperiodicConfigDedicatedList_r14 soundingRS_UL_AperiodicConfigDedicatedList_r14_,
      PhysicalConfigDedicated_soundingRS_UL_ConfigDedicatedApUpPTsExtList_r14 soundingRS_UL_ConfigDedicatedApUpPTsExtList_r14_,
      CSI_RS_Config_v1430 csi_RS_Config_v1430_,
      CSI_RS_ConfigZP_ApList_r14 csi_RS_ConfigZP_ApList_r14_,
      CQI_ReportConfig_v1430 cqi_ReportConfig_v1430_,
      Asn1Boolean semiOpenLoop_r14_,
      CSI_RS_Config_v1480 csi_RS_Config_v1480_,
      PhysicalConfigDedicatedSTTI_r15 physicalConfigDedicatedSTTI_r15_,
      PDSCH_ConfigDedicated_v1530 pdsch_ConfigDedicated_v1530_,
      PUSCH_ConfigDedicated_v1530 pusch_ConfigDedicated_v1530_,
      CQI_ReportConfig_v1530 cqi_ReportConfig_v1530_,
      AntennaInfoDedicated_v1530 antennaInfo_v1530_,
      CSI_RS_Config_v1530 csi_RS_Config_v1530_,
      UplinkPowerControlDedicated_v1530 uplinkPowerControlDedicated_v1530_,
      PhysicalConfigDedicated_semiStaticCFI_Config_r15 semiStaticCFI_Config_r15_,
      PhysicalConfigDedicated_blindPDSCH_Repetition_Config_r15 blindPDSCH_Repetition_Config_r15_
   ) {
      super();
      pdsch_ConfigDedicated = pdsch_ConfigDedicated_;
      pucch_ConfigDedicated = pucch_ConfigDedicated_;
      pusch_ConfigDedicated = pusch_ConfigDedicated_;
      uplinkPowerControlDedicated = uplinkPowerControlDedicated_;
      tpc_PDCCH_ConfigPUCCH = tpc_PDCCH_ConfigPUCCH_;
      tpc_PDCCH_ConfigPUSCH = tpc_PDCCH_ConfigPUSCH_;
      cqi_ReportConfig = cqi_ReportConfig_;
      soundingRS_UL_ConfigDedicated = soundingRS_UL_ConfigDedicated_;
      antennaInfo = antennaInfo_;
      schedulingRequestConfig = schedulingRequestConfig_;
      cqi_ReportConfig_v920 = cqi_ReportConfig_v920_;
      antennaInfo_v920 = antennaInfo_v920_;
      antennaInfo_r10 = antennaInfo_r10_;
      antennaInfoUL_r10 = antennaInfoUL_r10_;
      cif_Presence_r10 = cif_Presence_r10_;
      cqi_ReportConfig_r10 = cqi_ReportConfig_r10_;
      csi_RS_Config_r10 = csi_RS_Config_r10_;
      pucch_ConfigDedicated_v1020 = pucch_ConfigDedicated_v1020_;
      pusch_ConfigDedicated_v1020 = pusch_ConfigDedicated_v1020_;
      schedulingRequestConfig_v1020 = schedulingRequestConfig_v1020_;
      soundingRS_UL_ConfigDedicated_v1020 = soundingRS_UL_ConfigDedicated_v1020_;
      soundingRS_UL_ConfigDedicatedAperiodic_r10 = soundingRS_UL_ConfigDedicatedAperiodic_r10_;
      uplinkPowerControlDedicated_v1020 = uplinkPowerControlDedicated_v1020_;
      additionalSpectrumEmissionCA_r10 = additionalSpectrumEmissionCA_r10_;
      csi_RS_ConfigNZPToReleaseList_r11 = csi_RS_ConfigNZPToReleaseList_r11_;
      csi_RS_ConfigNZPToAddModList_r11 = csi_RS_ConfigNZPToAddModList_r11_;
      csi_RS_ConfigZPToReleaseList_r11 = csi_RS_ConfigZPToReleaseList_r11_;
      csi_RS_ConfigZPToAddModList_r11 = csi_RS_ConfigZPToAddModList_r11_;
      epdcch_Config_r11 = epdcch_Config_r11_;
      pdsch_ConfigDedicated_v1130 = pdsch_ConfigDedicated_v1130_;
      cqi_ReportConfig_v1130 = cqi_ReportConfig_v1130_;
      pucch_ConfigDedicated_v1130 = pucch_ConfigDedicated_v1130_;
      pusch_ConfigDedicated_v1130 = pusch_ConfigDedicated_v1130_;
      uplinkPowerControlDedicated_v1130 = uplinkPowerControlDedicated_v1130_;
      antennaInfo_v1250 = antennaInfo_v1250_;
      eimta_MainConfig_r12 = eimta_MainConfig_r12_;
      eimta_MainConfigPCell_r12 = eimta_MainConfigPCell_r12_;
      pucch_ConfigDedicated_v1250 = pucch_ConfigDedicated_v1250_;
      cqi_ReportConfigPCell_v1250 = cqi_ReportConfigPCell_v1250_;
      uplinkPowerControlDedicated_v1250 = uplinkPowerControlDedicated_v1250_;
      pusch_ConfigDedicated_v1250 = pusch_ConfigDedicated_v1250_;
      csi_RS_Config_v1250 = csi_RS_Config_v1250_;
      pdsch_ConfigDedicated_v1280 = pdsch_ConfigDedicated_v1280_;
      pdsch_ConfigDedicated_v1310 = pdsch_ConfigDedicated_v1310_;
      pucch_ConfigDedicated_r13 = pucch_ConfigDedicated_r13_;
      pusch_ConfigDedicated_r13 = pusch_ConfigDedicated_r13_;
      pdcch_CandidateReductions_r13 = pdcch_CandidateReductions_r13_;
      cqi_ReportConfig_v1310 = cqi_ReportConfig_v1310_;
      soundingRS_UL_ConfigDedicated_v1310 = soundingRS_UL_ConfigDedicated_v1310_;
      soundingRS_UL_ConfigDedicatedUpPTsExt_r13 = soundingRS_UL_ConfigDedicatedUpPTsExt_r13_;
      soundingRS_UL_ConfigDedicatedAperiodic_v1310 = soundingRS_UL_ConfigDedicatedAperiodic_v1310_;
      soundingRS_UL_ConfigDedicatedAperiodicUpPTsExt_r13 = soundingRS_UL_ConfigDedicatedAperiodicUpPTsExt_r13_;
      csi_RS_Config_v1310 = csi_RS_Config_v1310_;
      ce_Mode_r13 = ce_Mode_r13_;
      csi_RS_ConfigNZPToAddModListExt_r13 = csi_RS_ConfigNZPToAddModListExt_r13_;
      csi_RS_ConfigNZPToReleaseListExt_r13 = csi_RS_ConfigNZPToReleaseListExt_r13_;
      cqi_ReportConfig_v1320 = cqi_ReportConfig_v1320_;
      typeA_SRS_TPC_PDCCH_Group_r14 = typeA_SRS_TPC_PDCCH_Group_r14_;
      must_Config_r14 = must_Config_r14_;
      pusch_EnhancementsConfig_r14 = pusch_EnhancementsConfig_r14_;
      ce_pdsch_pusch_EnhancementConfig_r14 = ce_pdsch_pusch_EnhancementConfig_r14_;
      antennaInfo_v1430 = antennaInfo_v1430_;
      pucch_ConfigDedicated_v1430 = pucch_ConfigDedicated_v1430_;
      pdsch_ConfigDedicated_v1430 = pdsch_ConfigDedicated_v1430_;
      pusch_ConfigDedicated_v1430 = pusch_ConfigDedicated_v1430_;
      soundingRS_UL_PeriodicConfigDedicatedList_r14 = soundingRS_UL_PeriodicConfigDedicatedList_r14_;
      soundingRS_UL_PeriodicConfigDedicatedUpPTsExtList_r14 = soundingRS_UL_PeriodicConfigDedicatedUpPTsExtList_r14_;
      soundingRS_UL_AperiodicConfigDedicatedList_r14 = soundingRS_UL_AperiodicConfigDedicatedList_r14_;
      soundingRS_UL_ConfigDedicatedApUpPTsExtList_r14 = soundingRS_UL_ConfigDedicatedApUpPTsExtList_r14_;
      csi_RS_Config_v1430 = csi_RS_Config_v1430_;
      csi_RS_ConfigZP_ApList_r14 = csi_RS_ConfigZP_ApList_r14_;
      cqi_ReportConfig_v1430 = cqi_ReportConfig_v1430_;
      semiOpenLoop_r14 = semiOpenLoop_r14_;
      csi_RS_Config_v1480 = csi_RS_Config_v1480_;
      physicalConfigDedicatedSTTI_r15 = physicalConfigDedicatedSTTI_r15_;
      pdsch_ConfigDedicated_v1530 = pdsch_ConfigDedicated_v1530_;
      pusch_ConfigDedicated_v1530 = pusch_ConfigDedicated_v1530_;
      cqi_ReportConfig_v1530 = cqi_ReportConfig_v1530_;
      antennaInfo_v1530 = antennaInfo_v1530_;
      csi_RS_Config_v1530 = csi_RS_Config_v1530_;
      uplinkPowerControlDedicated_v1530 = uplinkPowerControlDedicated_v1530_;
      semiStaticCFI_Config_r15 = semiStaticCFI_Config_r15_;
      blindPDSCH_Repetition_Config_r15 = blindPDSCH_Repetition_Config_r15_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public PhysicalConfigDedicated (PDSCH_ConfigDedicated pdsch_ConfigDedicated_,
      PUCCH_ConfigDedicated pucch_ConfigDedicated_,
      PUSCH_ConfigDedicated pusch_ConfigDedicated_,
      UplinkPowerControlDedicated uplinkPowerControlDedicated_,
      TPC_PDCCH_Config tpc_PDCCH_ConfigPUCCH_,
      TPC_PDCCH_Config tpc_PDCCH_ConfigPUSCH_,
      CQI_ReportConfig cqi_ReportConfig_,
      SoundingRS_UL_ConfigDedicated soundingRS_UL_ConfigDedicated_,
      PhysicalConfigDedicated_antennaInfo antennaInfo_,
      SchedulingRequestConfig schedulingRequestConfig_,
      CQI_ReportConfig_v920 cqi_ReportConfig_v920_,
      AntennaInfoDedicated_v920 antennaInfo_v920_,
      PhysicalConfigDedicated_antennaInfo_r10 antennaInfo_r10_,
      AntennaInfoUL_r10 antennaInfoUL_r10_,
      boolean cif_Presence_r10_,
      CQI_ReportConfig_r10 cqi_ReportConfig_r10_,
      CSI_RS_Config_r10 csi_RS_Config_r10_,
      PUCCH_ConfigDedicated_v1020 pucch_ConfigDedicated_v1020_,
      PUSCH_ConfigDedicated_v1020 pusch_ConfigDedicated_v1020_,
      SchedulingRequestConfig_v1020 schedulingRequestConfig_v1020_,
      SoundingRS_UL_ConfigDedicated_v1020 soundingRS_UL_ConfigDedicated_v1020_,
      SoundingRS_UL_ConfigDedicatedAperiodic_r10 soundingRS_UL_ConfigDedicatedAperiodic_r10_,
      UplinkPowerControlDedicated_v1020 uplinkPowerControlDedicated_v1020_,
      PhysicalConfigDedicated_additionalSpectrumEmissionCA_r10 additionalSpectrumEmissionCA_r10_,
      CSI_RS_ConfigNZPToReleaseList_r11 csi_RS_ConfigNZPToReleaseList_r11_,
      CSI_RS_ConfigNZPToAddModList_r11 csi_RS_ConfigNZPToAddModList_r11_,
      CSI_RS_ConfigZPToReleaseList_r11 csi_RS_ConfigZPToReleaseList_r11_,
      CSI_RS_ConfigZPToAddModList_r11 csi_RS_ConfigZPToAddModList_r11_,
      EPDCCH_Config_r11 epdcch_Config_r11_,
      PDSCH_ConfigDedicated_v1130 pdsch_ConfigDedicated_v1130_,
      CQI_ReportConfig_v1130 cqi_ReportConfig_v1130_,
      PUCCH_ConfigDedicated_v1130 pucch_ConfigDedicated_v1130_,
      PUSCH_ConfigDedicated_v1130 pusch_ConfigDedicated_v1130_,
      UplinkPowerControlDedicated_v1130 uplinkPowerControlDedicated_v1130_,
      AntennaInfoDedicated_v1250 antennaInfo_v1250_,
      EIMTA_MainConfig_r12 eimta_MainConfig_r12_,
      EIMTA_MainConfigServCell_r12 eimta_MainConfigPCell_r12_,
      PUCCH_ConfigDedicated_v1250 pucch_ConfigDedicated_v1250_,
      CQI_ReportConfig_v1250 cqi_ReportConfigPCell_v1250_,
      UplinkPowerControlDedicated_v1250 uplinkPowerControlDedicated_v1250_,
      PUSCH_ConfigDedicated_v1250 pusch_ConfigDedicated_v1250_,
      CSI_RS_Config_v1250 csi_RS_Config_v1250_,
      PDSCH_ConfigDedicated_v1280 pdsch_ConfigDedicated_v1280_,
      PDSCH_ConfigDedicated_v1310 pdsch_ConfigDedicated_v1310_,
      PUCCH_ConfigDedicated_r13 pucch_ConfigDedicated_r13_,
      PUSCH_ConfigDedicated_r13 pusch_ConfigDedicated_r13_,
      PDCCH_CandidateReductions_r13 pdcch_CandidateReductions_r13_,
      CQI_ReportConfig_v1310 cqi_ReportConfig_v1310_,
      SoundingRS_UL_ConfigDedicated_v1310 soundingRS_UL_ConfigDedicated_v1310_,
      SoundingRS_UL_ConfigDedicatedUpPTsExt_r13 soundingRS_UL_ConfigDedicatedUpPTsExt_r13_,
      SoundingRS_UL_ConfigDedicatedAperiodic_v1310 soundingRS_UL_ConfigDedicatedAperiodic_v1310_,
      SoundingRS_UL_ConfigDedicatedAperiodicUpPTsExt_r13 soundingRS_UL_ConfigDedicatedAperiodicUpPTsExt_r13_,
      CSI_RS_Config_v1310 csi_RS_Config_v1310_,
      PhysicalConfigDedicated_ce_Mode_r13 ce_Mode_r13_,
      CSI_RS_ConfigNZPToAddModListExt_r13 csi_RS_ConfigNZPToAddModListExt_r13_,
      CSI_RS_ConfigNZPToReleaseListExt_r13 csi_RS_ConfigNZPToReleaseListExt_r13_,
      CQI_ReportConfig_v1320 cqi_ReportConfig_v1320_,
      PhysicalConfigDedicated_typeA_SRS_TPC_PDCCH_Group_r14 typeA_SRS_TPC_PDCCH_Group_r14_,
      PhysicalConfigDedicated_must_Config_r14 must_Config_r14_,
      PUSCH_EnhancementsConfig_r14 pusch_EnhancementsConfig_r14_,
      PhysicalConfigDedicated_ce_pdsch_pusch_EnhancementConfig_r14 ce_pdsch_pusch_EnhancementConfig_r14_,
      AntennaInfoDedicated_v1430 antennaInfo_v1430_,
      PUCCH_ConfigDedicated_v1430 pucch_ConfigDedicated_v1430_,
      PDSCH_ConfigDedicated_v1430 pdsch_ConfigDedicated_v1430_,
      PUSCH_ConfigDedicated_v1430 pusch_ConfigDedicated_v1430_,
      PhysicalConfigDedicated_soundingRS_UL_PeriodicConfigDedicatedList_r14 soundingRS_UL_PeriodicConfigDedicatedList_r14_,
      PhysicalConfigDedicated_soundingRS_UL_PeriodicConfigDedicatedUpPTsExtList_r14 soundingRS_UL_PeriodicConfigDedicatedUpPTsExtList_r14_,
      PhysicalConfigDedicated_soundingRS_UL_AperiodicConfigDedicatedList_r14 soundingRS_UL_AperiodicConfigDedicatedList_r14_,
      PhysicalConfigDedicated_soundingRS_UL_ConfigDedicatedApUpPTsExtList_r14 soundingRS_UL_ConfigDedicatedApUpPTsExtList_r14_,
      CSI_RS_Config_v1430 csi_RS_Config_v1430_,
      CSI_RS_ConfigZP_ApList_r14 csi_RS_ConfigZP_ApList_r14_,
      CQI_ReportConfig_v1430 cqi_ReportConfig_v1430_,
      boolean semiOpenLoop_r14_,
      CSI_RS_Config_v1480 csi_RS_Config_v1480_,
      PhysicalConfigDedicatedSTTI_r15 physicalConfigDedicatedSTTI_r15_,
      PDSCH_ConfigDedicated_v1530 pdsch_ConfigDedicated_v1530_,
      PUSCH_ConfigDedicated_v1530 pusch_ConfigDedicated_v1530_,
      CQI_ReportConfig_v1530 cqi_ReportConfig_v1530_,
      AntennaInfoDedicated_v1530 antennaInfo_v1530_,
      CSI_RS_Config_v1530 csi_RS_Config_v1530_,
      UplinkPowerControlDedicated_v1530 uplinkPowerControlDedicated_v1530_,
      PhysicalConfigDedicated_semiStaticCFI_Config_r15 semiStaticCFI_Config_r15_,
      PhysicalConfigDedicated_blindPDSCH_Repetition_Config_r15 blindPDSCH_Repetition_Config_r15_
   ) {
      super();
      pdsch_ConfigDedicated = pdsch_ConfigDedicated_;
      pucch_ConfigDedicated = pucch_ConfigDedicated_;
      pusch_ConfigDedicated = pusch_ConfigDedicated_;
      uplinkPowerControlDedicated = uplinkPowerControlDedicated_;
      tpc_PDCCH_ConfigPUCCH = tpc_PDCCH_ConfigPUCCH_;
      tpc_PDCCH_ConfigPUSCH = tpc_PDCCH_ConfigPUSCH_;
      cqi_ReportConfig = cqi_ReportConfig_;
      soundingRS_UL_ConfigDedicated = soundingRS_UL_ConfigDedicated_;
      antennaInfo = antennaInfo_;
      schedulingRequestConfig = schedulingRequestConfig_;
      cqi_ReportConfig_v920 = cqi_ReportConfig_v920_;
      antennaInfo_v920 = antennaInfo_v920_;
      antennaInfo_r10 = antennaInfo_r10_;
      antennaInfoUL_r10 = antennaInfoUL_r10_;
      cif_Presence_r10 = new Asn1Boolean (cif_Presence_r10_);
      cqi_ReportConfig_r10 = cqi_ReportConfig_r10_;
      csi_RS_Config_r10 = csi_RS_Config_r10_;
      pucch_ConfigDedicated_v1020 = pucch_ConfigDedicated_v1020_;
      pusch_ConfigDedicated_v1020 = pusch_ConfigDedicated_v1020_;
      schedulingRequestConfig_v1020 = schedulingRequestConfig_v1020_;
      soundingRS_UL_ConfigDedicated_v1020 = soundingRS_UL_ConfigDedicated_v1020_;
      soundingRS_UL_ConfigDedicatedAperiodic_r10 = soundingRS_UL_ConfigDedicatedAperiodic_r10_;
      uplinkPowerControlDedicated_v1020 = uplinkPowerControlDedicated_v1020_;
      additionalSpectrumEmissionCA_r10 = additionalSpectrumEmissionCA_r10_;
      csi_RS_ConfigNZPToReleaseList_r11 = csi_RS_ConfigNZPToReleaseList_r11_;
      csi_RS_ConfigNZPToAddModList_r11 = csi_RS_ConfigNZPToAddModList_r11_;
      csi_RS_ConfigZPToReleaseList_r11 = csi_RS_ConfigZPToReleaseList_r11_;
      csi_RS_ConfigZPToAddModList_r11 = csi_RS_ConfigZPToAddModList_r11_;
      epdcch_Config_r11 = epdcch_Config_r11_;
      pdsch_ConfigDedicated_v1130 = pdsch_ConfigDedicated_v1130_;
      cqi_ReportConfig_v1130 = cqi_ReportConfig_v1130_;
      pucch_ConfigDedicated_v1130 = pucch_ConfigDedicated_v1130_;
      pusch_ConfigDedicated_v1130 = pusch_ConfigDedicated_v1130_;
      uplinkPowerControlDedicated_v1130 = uplinkPowerControlDedicated_v1130_;
      antennaInfo_v1250 = antennaInfo_v1250_;
      eimta_MainConfig_r12 = eimta_MainConfig_r12_;
      eimta_MainConfigPCell_r12 = eimta_MainConfigPCell_r12_;
      pucch_ConfigDedicated_v1250 = pucch_ConfigDedicated_v1250_;
      cqi_ReportConfigPCell_v1250 = cqi_ReportConfigPCell_v1250_;
      uplinkPowerControlDedicated_v1250 = uplinkPowerControlDedicated_v1250_;
      pusch_ConfigDedicated_v1250 = pusch_ConfigDedicated_v1250_;
      csi_RS_Config_v1250 = csi_RS_Config_v1250_;
      pdsch_ConfigDedicated_v1280 = pdsch_ConfigDedicated_v1280_;
      pdsch_ConfigDedicated_v1310 = pdsch_ConfigDedicated_v1310_;
      pucch_ConfigDedicated_r13 = pucch_ConfigDedicated_r13_;
      pusch_ConfigDedicated_r13 = pusch_ConfigDedicated_r13_;
      pdcch_CandidateReductions_r13 = pdcch_CandidateReductions_r13_;
      cqi_ReportConfig_v1310 = cqi_ReportConfig_v1310_;
      soundingRS_UL_ConfigDedicated_v1310 = soundingRS_UL_ConfigDedicated_v1310_;
      soundingRS_UL_ConfigDedicatedUpPTsExt_r13 = soundingRS_UL_ConfigDedicatedUpPTsExt_r13_;
      soundingRS_UL_ConfigDedicatedAperiodic_v1310 = soundingRS_UL_ConfigDedicatedAperiodic_v1310_;
      soundingRS_UL_ConfigDedicatedAperiodicUpPTsExt_r13 = soundingRS_UL_ConfigDedicatedAperiodicUpPTsExt_r13_;
      csi_RS_Config_v1310 = csi_RS_Config_v1310_;
      ce_Mode_r13 = ce_Mode_r13_;
      csi_RS_ConfigNZPToAddModListExt_r13 = csi_RS_ConfigNZPToAddModListExt_r13_;
      csi_RS_ConfigNZPToReleaseListExt_r13 = csi_RS_ConfigNZPToReleaseListExt_r13_;
      cqi_ReportConfig_v1320 = cqi_ReportConfig_v1320_;
      typeA_SRS_TPC_PDCCH_Group_r14 = typeA_SRS_TPC_PDCCH_Group_r14_;
      must_Config_r14 = must_Config_r14_;
      pusch_EnhancementsConfig_r14 = pusch_EnhancementsConfig_r14_;
      ce_pdsch_pusch_EnhancementConfig_r14 = ce_pdsch_pusch_EnhancementConfig_r14_;
      antennaInfo_v1430 = antennaInfo_v1430_;
      pucch_ConfigDedicated_v1430 = pucch_ConfigDedicated_v1430_;
      pdsch_ConfigDedicated_v1430 = pdsch_ConfigDedicated_v1430_;
      pusch_ConfigDedicated_v1430 = pusch_ConfigDedicated_v1430_;
      soundingRS_UL_PeriodicConfigDedicatedList_r14 = soundingRS_UL_PeriodicConfigDedicatedList_r14_;
      soundingRS_UL_PeriodicConfigDedicatedUpPTsExtList_r14 = soundingRS_UL_PeriodicConfigDedicatedUpPTsExtList_r14_;
      soundingRS_UL_AperiodicConfigDedicatedList_r14 = soundingRS_UL_AperiodicConfigDedicatedList_r14_;
      soundingRS_UL_ConfigDedicatedApUpPTsExtList_r14 = soundingRS_UL_ConfigDedicatedApUpPTsExtList_r14_;
      csi_RS_Config_v1430 = csi_RS_Config_v1430_;
      csi_RS_ConfigZP_ApList_r14 = csi_RS_ConfigZP_ApList_r14_;
      cqi_ReportConfig_v1430 = cqi_ReportConfig_v1430_;
      semiOpenLoop_r14 = new Asn1Boolean (semiOpenLoop_r14_);
      csi_RS_Config_v1480 = csi_RS_Config_v1480_;
      physicalConfigDedicatedSTTI_r15 = physicalConfigDedicatedSTTI_r15_;
      pdsch_ConfigDedicated_v1530 = pdsch_ConfigDedicated_v1530_;
      pusch_ConfigDedicated_v1530 = pusch_ConfigDedicated_v1530_;
      cqi_ReportConfig_v1530 = cqi_ReportConfig_v1530_;
      antennaInfo_v1530 = antennaInfo_v1530_;
      csi_RS_Config_v1530 = csi_RS_Config_v1530_;
      uplinkPowerControlDedicated_v1530 = uplinkPowerControlDedicated_v1530_;
      semiStaticCFI_Config_r15 = semiStaticCFI_Config_r15_;
      blindPDSCH_Repetition_Config_r15 = blindPDSCH_Repetition_Config_r15_;
   }

   public void init () {
      pdsch_ConfigDedicated = null;
      pucch_ConfigDedicated = null;
      pusch_ConfigDedicated = null;
      uplinkPowerControlDedicated = null;
      tpc_PDCCH_ConfigPUCCH = null;
      tpc_PDCCH_ConfigPUSCH = null;
      cqi_ReportConfig = null;
      soundingRS_UL_ConfigDedicated = null;
      antennaInfo = null;
      schedulingRequestConfig = null;
      cqi_ReportConfig_v920 = null;
      antennaInfo_v920 = null;
      antennaInfo_r10 = null;
      antennaInfoUL_r10 = null;
      cif_Presence_r10 = null;
      cqi_ReportConfig_r10 = null;
      csi_RS_Config_r10 = null;
      pucch_ConfigDedicated_v1020 = null;
      pusch_ConfigDedicated_v1020 = null;
      schedulingRequestConfig_v1020 = null;
      soundingRS_UL_ConfigDedicated_v1020 = null;
      soundingRS_UL_ConfigDedicatedAperiodic_r10 = null;
      uplinkPowerControlDedicated_v1020 = null;
      additionalSpectrumEmissionCA_r10 = null;
      csi_RS_ConfigNZPToReleaseList_r11 = null;
      csi_RS_ConfigNZPToAddModList_r11 = null;
      csi_RS_ConfigZPToReleaseList_r11 = null;
      csi_RS_ConfigZPToAddModList_r11 = null;
      epdcch_Config_r11 = null;
      pdsch_ConfigDedicated_v1130 = null;
      cqi_ReportConfig_v1130 = null;
      pucch_ConfigDedicated_v1130 = null;
      pusch_ConfigDedicated_v1130 = null;
      uplinkPowerControlDedicated_v1130 = null;
      antennaInfo_v1250 = null;
      eimta_MainConfig_r12 = null;
      eimta_MainConfigPCell_r12 = null;
      pucch_ConfigDedicated_v1250 = null;
      cqi_ReportConfigPCell_v1250 = null;
      uplinkPowerControlDedicated_v1250 = null;
      pusch_ConfigDedicated_v1250 = null;
      csi_RS_Config_v1250 = null;
      pdsch_ConfigDedicated_v1280 = null;
      pdsch_ConfigDedicated_v1310 = null;
      pucch_ConfigDedicated_r13 = null;
      pusch_ConfigDedicated_r13 = null;
      pdcch_CandidateReductions_r13 = null;
      cqi_ReportConfig_v1310 = null;
      soundingRS_UL_ConfigDedicated_v1310 = null;
      soundingRS_UL_ConfigDedicatedUpPTsExt_r13 = null;
      soundingRS_UL_ConfigDedicatedAperiodic_v1310 = null;
      soundingRS_UL_ConfigDedicatedAperiodicUpPTsExt_r13 = null;
      csi_RS_Config_v1310 = null;
      ce_Mode_r13 = null;
      csi_RS_ConfigNZPToAddModListExt_r13 = null;
      csi_RS_ConfigNZPToReleaseListExt_r13 = null;
      cqi_ReportConfig_v1320 = null;
      typeA_SRS_TPC_PDCCH_Group_r14 = null;
      must_Config_r14 = null;
      pusch_EnhancementsConfig_r14 = null;
      ce_pdsch_pusch_EnhancementConfig_r14 = null;
      antennaInfo_v1430 = null;
      pucch_ConfigDedicated_v1430 = null;
      pdsch_ConfigDedicated_v1430 = null;
      pusch_ConfigDedicated_v1430 = null;
      soundingRS_UL_PeriodicConfigDedicatedList_r14 = null;
      soundingRS_UL_PeriodicConfigDedicatedUpPTsExtList_r14 = null;
      soundingRS_UL_AperiodicConfigDedicatedList_r14 = null;
      soundingRS_UL_ConfigDedicatedApUpPTsExtList_r14 = null;
      csi_RS_Config_v1430 = null;
      csi_RS_ConfigZP_ApList_r14 = null;
      cqi_ReportConfig_v1430 = null;
      semiOpenLoop_r14 = null;
      csi_RS_Config_v1480 = null;
      physicalConfigDedicatedSTTI_r15 = null;
      pdsch_ConfigDedicated_v1530 = null;
      pusch_ConfigDedicated_v1530 = null;
      cqi_ReportConfig_v1530 = null;
      antennaInfo_v1530 = null;
      csi_RS_Config_v1530 = null;
      uplinkPowerControlDedicated_v1530 = null;
      semiStaticCFI_Config_r15 = null;
      blindPDSCH_Repetition_Config_r15 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 84; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return pdsch_ConfigDedicated;
         case 1: return pucch_ConfigDedicated;
         case 2: return pusch_ConfigDedicated;
         case 3: return uplinkPowerControlDedicated;
         case 4: return tpc_PDCCH_ConfigPUCCH;
         case 5: return tpc_PDCCH_ConfigPUSCH;
         case 6: return cqi_ReportConfig;
         case 7: return soundingRS_UL_ConfigDedicated;
         case 8: return antennaInfo;
         case 9: return schedulingRequestConfig;
         case 10: return cqi_ReportConfig_v920;
         case 11: return antennaInfo_v920;
         case 12: return antennaInfo_r10;
         case 13: return antennaInfoUL_r10;
         case 14: return cif_Presence_r10;
         case 15: return cqi_ReportConfig_r10;
         case 16: return csi_RS_Config_r10;
         case 17: return pucch_ConfigDedicated_v1020;
         case 18: return pusch_ConfigDedicated_v1020;
         case 19: return schedulingRequestConfig_v1020;
         case 20: return soundingRS_UL_ConfigDedicated_v1020;
         case 21: return soundingRS_UL_ConfigDedicatedAperiodic_r10;
         case 22: return uplinkPowerControlDedicated_v1020;
         case 23: return additionalSpectrumEmissionCA_r10;
         case 24: return csi_RS_ConfigNZPToReleaseList_r11;
         case 25: return csi_RS_ConfigNZPToAddModList_r11;
         case 26: return csi_RS_ConfigZPToReleaseList_r11;
         case 27: return csi_RS_ConfigZPToAddModList_r11;
         case 28: return epdcch_Config_r11;
         case 29: return pdsch_ConfigDedicated_v1130;
         case 30: return cqi_ReportConfig_v1130;
         case 31: return pucch_ConfigDedicated_v1130;
         case 32: return pusch_ConfigDedicated_v1130;
         case 33: return uplinkPowerControlDedicated_v1130;
         case 34: return antennaInfo_v1250;
         case 35: return eimta_MainConfig_r12;
         case 36: return eimta_MainConfigPCell_r12;
         case 37: return pucch_ConfigDedicated_v1250;
         case 38: return cqi_ReportConfigPCell_v1250;
         case 39: return uplinkPowerControlDedicated_v1250;
         case 40: return pusch_ConfigDedicated_v1250;
         case 41: return csi_RS_Config_v1250;
         case 42: return pdsch_ConfigDedicated_v1280;
         case 43: return pdsch_ConfigDedicated_v1310;
         case 44: return pucch_ConfigDedicated_r13;
         case 45: return pusch_ConfigDedicated_r13;
         case 46: return pdcch_CandidateReductions_r13;
         case 47: return cqi_ReportConfig_v1310;
         case 48: return soundingRS_UL_ConfigDedicated_v1310;
         case 49: return soundingRS_UL_ConfigDedicatedUpPTsExt_r13;
         case 50: return soundingRS_UL_ConfigDedicatedAperiodic_v1310;
         case 51: return soundingRS_UL_ConfigDedicatedAperiodicUpPTsExt_r13;
         case 52: return csi_RS_Config_v1310;
         case 53: return ce_Mode_r13;
         case 54: return csi_RS_ConfigNZPToAddModListExt_r13;
         case 55: return csi_RS_ConfigNZPToReleaseListExt_r13;
         case 56: return cqi_ReportConfig_v1320;
         case 57: return typeA_SRS_TPC_PDCCH_Group_r14;
         case 58: return must_Config_r14;
         case 59: return pusch_EnhancementsConfig_r14;
         case 60: return ce_pdsch_pusch_EnhancementConfig_r14;
         case 61: return antennaInfo_v1430;
         case 62: return pucch_ConfigDedicated_v1430;
         case 63: return pdsch_ConfigDedicated_v1430;
         case 64: return pusch_ConfigDedicated_v1430;
         case 65: return soundingRS_UL_PeriodicConfigDedicatedList_r14;
         case 66: return soundingRS_UL_PeriodicConfigDedicatedUpPTsExtList_r14;
         case 67: return soundingRS_UL_AperiodicConfigDedicatedList_r14;
         case 68: return soundingRS_UL_ConfigDedicatedApUpPTsExtList_r14;
         case 69: return csi_RS_Config_v1430;
         case 70: return csi_RS_ConfigZP_ApList_r14;
         case 71: return cqi_ReportConfig_v1430;
         case 72: return semiOpenLoop_r14;
         case 73: return csi_RS_Config_v1480;
         case 74: return physicalConfigDedicatedSTTI_r15;
         case 75: return pdsch_ConfigDedicated_v1530;
         case 76: return pusch_ConfigDedicated_v1530;
         case 77: return cqi_ReportConfig_v1530;
         case 78: return antennaInfo_v1530;
         case 79: return csi_RS_Config_v1530;
         case 80: return uplinkPowerControlDedicated_v1530;
         case 81: return semiStaticCFI_Config_r15;
         case 82: return blindPDSCH_Repetition_Config_r15;
         case 83: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "pdsch-ConfigDedicated";
         case 1: return "pucch-ConfigDedicated";
         case 2: return "pusch-ConfigDedicated";
         case 3: return "uplinkPowerControlDedicated";
         case 4: return "tpc-PDCCH-ConfigPUCCH";
         case 5: return "tpc-PDCCH-ConfigPUSCH";
         case 6: return "cqi-ReportConfig";
         case 7: return "soundingRS-UL-ConfigDedicated";
         case 8: return "antennaInfo";
         case 9: return "schedulingRequestConfig";
         case 10: return "cqi-ReportConfig-v920";
         case 11: return "antennaInfo-v920";
         case 12: return "antennaInfo-r10";
         case 13: return "antennaInfoUL-r10";
         case 14: return "cif-Presence-r10";
         case 15: return "cqi-ReportConfig-r10";
         case 16: return "csi-RS-Config-r10";
         case 17: return "pucch-ConfigDedicated-v1020";
         case 18: return "pusch-ConfigDedicated-v1020";
         case 19: return "schedulingRequestConfig-v1020";
         case 20: return "soundingRS-UL-ConfigDedicated-v1020";
         case 21: return "soundingRS-UL-ConfigDedicatedAperiodic-r10";
         case 22: return "uplinkPowerControlDedicated-v1020";
         case 23: return "additionalSpectrumEmissionCA-r10";
         case 24: return "csi-RS-ConfigNZPToReleaseList-r11";
         case 25: return "csi-RS-ConfigNZPToAddModList-r11";
         case 26: return "csi-RS-ConfigZPToReleaseList-r11";
         case 27: return "csi-RS-ConfigZPToAddModList-r11";
         case 28: return "epdcch-Config-r11";
         case 29: return "pdsch-ConfigDedicated-v1130";
         case 30: return "cqi-ReportConfig-v1130";
         case 31: return "pucch-ConfigDedicated-v1130";
         case 32: return "pusch-ConfigDedicated-v1130";
         case 33: return "uplinkPowerControlDedicated-v1130";
         case 34: return "antennaInfo-v1250";
         case 35: return "eimta-MainConfig-r12";
         case 36: return "eimta-MainConfigPCell-r12";
         case 37: return "pucch-ConfigDedicated-v1250";
         case 38: return "cqi-ReportConfigPCell-v1250";
         case 39: return "uplinkPowerControlDedicated-v1250";
         case 40: return "pusch-ConfigDedicated-v1250";
         case 41: return "csi-RS-Config-v1250";
         case 42: return "pdsch-ConfigDedicated-v1280";
         case 43: return "pdsch-ConfigDedicated-v1310";
         case 44: return "pucch-ConfigDedicated-r13";
         case 45: return "pusch-ConfigDedicated-r13";
         case 46: return "pdcch-CandidateReductions-r13";
         case 47: return "cqi-ReportConfig-v1310";
         case 48: return "soundingRS-UL-ConfigDedicated-v1310";
         case 49: return "soundingRS-UL-ConfigDedicatedUpPTsExt-r13";
         case 50: return "soundingRS-UL-ConfigDedicatedAperiodic-v1310";
         case 51: return "soundingRS-UL-ConfigDedicatedAperiodicUpPTsExt-r13";
         case 52: return "csi-RS-Config-v1310";
         case 53: return "ce-Mode-r13";
         case 54: return "csi-RS-ConfigNZPToAddModListExt-r13";
         case 55: return "csi-RS-ConfigNZPToReleaseListExt-r13";
         case 56: return "cqi-ReportConfig-v1320";
         case 57: return "typeA-SRS-TPC-PDCCH-Group-r14";
         case 58: return "must-Config-r14";
         case 59: return "pusch-EnhancementsConfig-r14";
         case 60: return "ce-pdsch-pusch-EnhancementConfig-r14";
         case 61: return "antennaInfo-v1430";
         case 62: return "pucch-ConfigDedicated-v1430";
         case 63: return "pdsch-ConfigDedicated-v1430";
         case 64: return "pusch-ConfigDedicated-v1430";
         case 65: return "soundingRS-UL-PeriodicConfigDedicatedList-r14";
         case 66: return "soundingRS-UL-PeriodicConfigDedicatedUpPTsExtList-r14";
         case 67: return "soundingRS-UL-AperiodicConfigDedicatedList-r14";
         case 68: return "soundingRS-UL-ConfigDedicatedApUpPTsExtList-r14";
         case 69: return "csi-RS-Config-v1430";
         case 70: return "csi-RS-ConfigZP-ApList-r14";
         case 71: return "cqi-ReportConfig-v1430";
         case 72: return "semiOpenLoop-r14";
         case 73: return "csi-RS-Config-v1480";
         case 74: return "physicalConfigDedicatedSTTI-r15";
         case 75: return "pdsch-ConfigDedicated-v1530";
         case 76: return "pusch-ConfigDedicated-v1530";
         case 77: return "cqi-ReportConfig-v1530";
         case 78: return "antennaInfo-v1530";
         case 79: return "csi-RS-Config-v1530";
         case 80: return "uplinkPowerControlDedicated-v1530";
         case 81: return "semiStaticCFI-Config-r15";
         case 82: return "blindPDSCH-Repetition-Config-r15";
         case 83: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean pdsch_ConfigDedicatedPresent = buffer.decodeBit ("pdsch_ConfigDedicatedPresent");
      boolean pucch_ConfigDedicatedPresent = buffer.decodeBit ("pucch_ConfigDedicatedPresent");
      boolean pusch_ConfigDedicatedPresent = buffer.decodeBit ("pusch_ConfigDedicatedPresent");
      boolean uplinkPowerControlDedicatedPresent = buffer.decodeBit ("uplinkPowerControlDedicatedPresent");
      boolean tpc_PDCCH_ConfigPUCCHPresent = buffer.decodeBit ("tpc_PDCCH_ConfigPUCCHPresent");
      boolean tpc_PDCCH_ConfigPUSCHPresent = buffer.decodeBit ("tpc_PDCCH_ConfigPUSCHPresent");
      boolean cqi_ReportConfigPresent = buffer.decodeBit ("cqi_ReportConfigPresent");
      boolean soundingRS_UL_ConfigDedicatedPresent = buffer.decodeBit ("soundingRS_UL_ConfigDedicatedPresent");
      boolean antennaInfoPresent = buffer.decodeBit ("antennaInfoPresent");
      boolean schedulingRequestConfigPresent = buffer.decodeBit ("schedulingRequestConfigPresent");

      // decode pdsch_ConfigDedicated

      if (pdsch_ConfigDedicatedPresent) {
         buffer.getContext().eventDispatcher.startElement("pdsch_ConfigDedicated", -1);

         pdsch_ConfigDedicated = new PDSCH_ConfigDedicated();
         pdsch_ConfigDedicated.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("pdsch_ConfigDedicated", -1);
      }
      else {
         pdsch_ConfigDedicated = null;
      }

      // decode pucch_ConfigDedicated

      if (pucch_ConfigDedicatedPresent) {
         buffer.getContext().eventDispatcher.startElement("pucch_ConfigDedicated", -1);

         pucch_ConfigDedicated = new PUCCH_ConfigDedicated();
         pucch_ConfigDedicated.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("pucch_ConfigDedicated", -1);
      }
      else {
         pucch_ConfigDedicated = null;
      }

      // decode pusch_ConfigDedicated

      if (pusch_ConfigDedicatedPresent) {
         buffer.getContext().eventDispatcher.startElement("pusch_ConfigDedicated", -1);

         pusch_ConfigDedicated = new PUSCH_ConfigDedicated();
         pusch_ConfigDedicated.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("pusch_ConfigDedicated", -1);
      }
      else {
         pusch_ConfigDedicated = null;
      }

      // decode uplinkPowerControlDedicated

      if (uplinkPowerControlDedicatedPresent) {
         buffer.getContext().eventDispatcher.startElement("uplinkPowerControlDedicated", -1);

         uplinkPowerControlDedicated = new UplinkPowerControlDedicated();
         uplinkPowerControlDedicated.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("uplinkPowerControlDedicated", -1);
      }
      else {
         uplinkPowerControlDedicated = null;
      }

      // decode tpc_PDCCH_ConfigPUCCH

      if (tpc_PDCCH_ConfigPUCCHPresent) {
         buffer.getContext().eventDispatcher.startElement("tpc_PDCCH_ConfigPUCCH", -1);

         tpc_PDCCH_ConfigPUCCH = new TPC_PDCCH_Config();
         tpc_PDCCH_ConfigPUCCH.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("tpc_PDCCH_ConfigPUCCH", -1);
      }
      else {
         tpc_PDCCH_ConfigPUCCH = null;
      }

      // decode tpc_PDCCH_ConfigPUSCH

      if (tpc_PDCCH_ConfigPUSCHPresent) {
         buffer.getContext().eventDispatcher.startElement("tpc_PDCCH_ConfigPUSCH", -1);

         tpc_PDCCH_ConfigPUSCH = new TPC_PDCCH_Config();
         tpc_PDCCH_ConfigPUSCH.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("tpc_PDCCH_ConfigPUSCH", -1);
      }
      else {
         tpc_PDCCH_ConfigPUSCH = null;
      }

      // decode cqi_ReportConfig

      if (cqi_ReportConfigPresent) {
         buffer.getContext().eventDispatcher.startElement("cqi_ReportConfig", -1);

         cqi_ReportConfig = new CQI_ReportConfig();
         cqi_ReportConfig.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("cqi_ReportConfig", -1);
      }
      else {
         cqi_ReportConfig = null;
      }

      // decode soundingRS_UL_ConfigDedicated

      if (soundingRS_UL_ConfigDedicatedPresent) {
         buffer.getContext().eventDispatcher.startElement("soundingRS_UL_ConfigDedicated", -1);

         soundingRS_UL_ConfigDedicated = new SoundingRS_UL_ConfigDedicated();
         soundingRS_UL_ConfigDedicated.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("soundingRS_UL_ConfigDedicated", -1);
      }
      else {
         soundingRS_UL_ConfigDedicated = null;
      }

      // decode antennaInfo

      if (antennaInfoPresent) {
         buffer.getContext().eventDispatcher.startElement("antennaInfo", -1);

         antennaInfo = new PhysicalConfigDedicated_antennaInfo();
         antennaInfo.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("antennaInfo", -1);
      }
      else {
         antennaInfo = null;
      }

      // decode schedulingRequestConfig

      if (schedulingRequestConfigPresent) {
         buffer.getContext().eventDispatcher.startElement("schedulingRequestConfig", -1);

         schedulingRequestConfig = new SchedulingRequestConfig();
         schedulingRequestConfig.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("schedulingRequestConfig", -1);
      }
      else {
         schedulingRequestConfig = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV4ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV5ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV6ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV7ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV8ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV9ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV10ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV11ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV12ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean cqi_ReportConfig_v920Present = buffer.decodeBit ("cqi_ReportConfig_v920Present");

            boolean antennaInfo_v920Present = buffer.decodeBit ("antennaInfo_v920Present");

            // decode cqi_ReportConfig_v920

            if (cqi_ReportConfig_v920Present) {
               buffer.getContext().eventDispatcher.startElement("cqi_ReportConfig_v920", -1);

               cqi_ReportConfig_v920 = new CQI_ReportConfig_v920();
               cqi_ReportConfig_v920.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("cqi_ReportConfig_v920", -1);
            }
            else {
               cqi_ReportConfig_v920 = null;
            }

            // decode antennaInfo_v920

            if (antennaInfo_v920Present) {
               buffer.getContext().eventDispatcher.startElement("antennaInfo_v920", -1);

               antennaInfo_v920 = new AntennaInfoDedicated_v920();
               antennaInfo_v920.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("antennaInfo_v920", -1);
            }
            else {
               antennaInfo_v920 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean antennaInfo_r10Present = buffer.decodeBit ("antennaInfo_r10Present");

            boolean antennaInfoUL_r10Present = buffer.decodeBit ("antennaInfoUL_r10Present");

            boolean cif_Presence_r10Present = buffer.decodeBit ("cif_Presence_r10Present");

            boolean cqi_ReportConfig_r10Present = buffer.decodeBit ("cqi_ReportConfig_r10Present");

            boolean csi_RS_Config_r10Present = buffer.decodeBit ("csi_RS_Config_r10Present");

            boolean pucch_ConfigDedicated_v1020Present = buffer.decodeBit ("pucch_ConfigDedicated_v1020Present");

            boolean pusch_ConfigDedicated_v1020Present = buffer.decodeBit ("pusch_ConfigDedicated_v1020Present");

            boolean schedulingRequestConfig_v1020Present = buffer.decodeBit ("schedulingRequestConfig_v1020Present");

            boolean soundingRS_UL_ConfigDedicated_v1020Present = buffer.decodeBit ("soundingRS_UL_ConfigDedicated_v1020Present");

            boolean soundingRS_UL_ConfigDedicatedAperiodic_r10Present = buffer.decodeBit ("soundingRS_UL_ConfigDedicatedAperiodic_r10Present");

            boolean uplinkPowerControlDedicated_v1020Present = buffer.decodeBit ("uplinkPowerControlDedicated_v1020Present");

            // decode antennaInfo_r10

            if (antennaInfo_r10Present) {
               buffer.getContext().eventDispatcher.startElement("antennaInfo_r10", -1);

               antennaInfo_r10 = new PhysicalConfigDedicated_antennaInfo_r10();
               antennaInfo_r10.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("antennaInfo_r10", -1);
            }
            else {
               antennaInfo_r10 = null;
            }

            // decode antennaInfoUL_r10

            if (antennaInfoUL_r10Present) {
               buffer.getContext().eventDispatcher.startElement("antennaInfoUL_r10", -1);

               antennaInfoUL_r10 = new AntennaInfoUL_r10();
               antennaInfoUL_r10.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("antennaInfoUL_r10", -1);
            }
            else {
               antennaInfoUL_r10 = null;
            }

            // decode cif_Presence_r10

            if (cif_Presence_r10Present) {
               buffer.getContext().eventDispatcher.startElement("cif_Presence_r10", -1);

               cif_Presence_r10 = new Asn1Boolean();
               cif_Presence_r10.decode (buffer);

               buffer.invokeCharacters(cif_Presence_r10.toString());
               buffer.getContext().eventDispatcher.endElement("cif_Presence_r10", -1);
            }
            else {
               cif_Presence_r10 = null;
            }

            // decode cqi_ReportConfig_r10

            if (cqi_ReportConfig_r10Present) {
               buffer.getContext().eventDispatcher.startElement("cqi_ReportConfig_r10", -1);

               cqi_ReportConfig_r10 = new CQI_ReportConfig_r10();
               cqi_ReportConfig_r10.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("cqi_ReportConfig_r10", -1);
            }
            else {
               cqi_ReportConfig_r10 = null;
            }

            // decode csi_RS_Config_r10

            if (csi_RS_Config_r10Present) {
               buffer.getContext().eventDispatcher.startElement("csi_RS_Config_r10", -1);

               csi_RS_Config_r10 = new CSI_RS_Config_r10();
               csi_RS_Config_r10.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("csi_RS_Config_r10", -1);
            }
            else {
               csi_RS_Config_r10 = null;
            }

            // decode pucch_ConfigDedicated_v1020

            if (pucch_ConfigDedicated_v1020Present) {
               buffer.getContext().eventDispatcher.startElement("pucch_ConfigDedicated_v1020", -1);

               pucch_ConfigDedicated_v1020 = new PUCCH_ConfigDedicated_v1020();
               pucch_ConfigDedicated_v1020.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("pucch_ConfigDedicated_v1020", -1);
            }
            else {
               pucch_ConfigDedicated_v1020 = null;
            }

            // decode pusch_ConfigDedicated_v1020

            if (pusch_ConfigDedicated_v1020Present) {
               buffer.getContext().eventDispatcher.startElement("pusch_ConfigDedicated_v1020", -1);

               pusch_ConfigDedicated_v1020 = new PUSCH_ConfigDedicated_v1020();
               pusch_ConfigDedicated_v1020.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("pusch_ConfigDedicated_v1020", -1);
            }
            else {
               pusch_ConfigDedicated_v1020 = null;
            }

            // decode schedulingRequestConfig_v1020

            if (schedulingRequestConfig_v1020Present) {
               buffer.getContext().eventDispatcher.startElement("schedulingRequestConfig_v1020", -1);

               schedulingRequestConfig_v1020 = new SchedulingRequestConfig_v1020();
               schedulingRequestConfig_v1020.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("schedulingRequestConfig_v1020", -1);
            }
            else {
               schedulingRequestConfig_v1020 = null;
            }

            // decode soundingRS_UL_ConfigDedicated_v1020

            if (soundingRS_UL_ConfigDedicated_v1020Present) {
               buffer.getContext().eventDispatcher.startElement("soundingRS_UL_ConfigDedicated_v1020", -1);

               soundingRS_UL_ConfigDedicated_v1020 = new SoundingRS_UL_ConfigDedicated_v1020();
               soundingRS_UL_ConfigDedicated_v1020.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("soundingRS_UL_ConfigDedicated_v1020", -1);
            }
            else {
               soundingRS_UL_ConfigDedicated_v1020 = null;
            }

            // decode soundingRS_UL_ConfigDedicatedAperiodic_r10

            if (soundingRS_UL_ConfigDedicatedAperiodic_r10Present) {
               buffer.getContext().eventDispatcher.startElement("soundingRS_UL_ConfigDedicatedAperiodic_r10", -1);

               soundingRS_UL_ConfigDedicatedAperiodic_r10 = new SoundingRS_UL_ConfigDedicatedAperiodic_r10();
               soundingRS_UL_ConfigDedicatedAperiodic_r10.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("soundingRS_UL_ConfigDedicatedAperiodic_r10", -1);
            }
            else {
               soundingRS_UL_ConfigDedicatedAperiodic_r10 = null;
            }

            // decode uplinkPowerControlDedicated_v1020

            if (uplinkPowerControlDedicated_v1020Present) {
               buffer.getContext().eventDispatcher.startElement("uplinkPowerControlDedicated_v1020", -1);

               uplinkPowerControlDedicated_v1020 = new UplinkPowerControlDedicated_v1020();
               uplinkPowerControlDedicated_v1020.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("uplinkPowerControlDedicated_v1020", -1);
            }
            else {
               uplinkPowerControlDedicated_v1020 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV4ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean additionalSpectrumEmissionCA_r10Present = buffer.decodeBit ("additionalSpectrumEmissionCA_r10Present");

            // decode additionalSpectrumEmissionCA_r10

            if (additionalSpectrumEmissionCA_r10Present) {
               buffer.getContext().eventDispatcher.startElement("additionalSpectrumEmissionCA_r10", -1);

               additionalSpectrumEmissionCA_r10 = new PhysicalConfigDedicated_additionalSpectrumEmissionCA_r10();
               additionalSpectrumEmissionCA_r10.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("additionalSpectrumEmissionCA_r10", -1);
            }
            else {
               additionalSpectrumEmissionCA_r10 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV5ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean csi_RS_ConfigNZPToReleaseList_r11Present = buffer.decodeBit ("csi_RS_ConfigNZPToReleaseList_r11Present");

            boolean csi_RS_ConfigNZPToAddModList_r11Present = buffer.decodeBit ("csi_RS_ConfigNZPToAddModList_r11Present");

            boolean csi_RS_ConfigZPToReleaseList_r11Present = buffer.decodeBit ("csi_RS_ConfigZPToReleaseList_r11Present");

            boolean csi_RS_ConfigZPToAddModList_r11Present = buffer.decodeBit ("csi_RS_ConfigZPToAddModList_r11Present");

            boolean epdcch_Config_r11Present = buffer.decodeBit ("epdcch_Config_r11Present");

            boolean pdsch_ConfigDedicated_v1130Present = buffer.decodeBit ("pdsch_ConfigDedicated_v1130Present");

            boolean cqi_ReportConfig_v1130Present = buffer.decodeBit ("cqi_ReportConfig_v1130Present");

            boolean pucch_ConfigDedicated_v1130Present = buffer.decodeBit ("pucch_ConfigDedicated_v1130Present");

            boolean pusch_ConfigDedicated_v1130Present = buffer.decodeBit ("pusch_ConfigDedicated_v1130Present");

            boolean uplinkPowerControlDedicated_v1130Present = buffer.decodeBit ("uplinkPowerControlDedicated_v1130Present");

            // decode csi_RS_ConfigNZPToReleaseList_r11

            if (csi_RS_ConfigNZPToReleaseList_r11Present) {
               buffer.getContext().eventDispatcher.startElement("csi_RS_ConfigNZPToReleaseList_r11", -1);

               csi_RS_ConfigNZPToReleaseList_r11 = new CSI_RS_ConfigNZPToReleaseList_r11();
               csi_RS_ConfigNZPToReleaseList_r11.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("csi_RS_ConfigNZPToReleaseList_r11", -1);
            }
            else {
               csi_RS_ConfigNZPToReleaseList_r11 = null;
            }

            // decode csi_RS_ConfigNZPToAddModList_r11

            if (csi_RS_ConfigNZPToAddModList_r11Present) {
               buffer.getContext().eventDispatcher.startElement("csi_RS_ConfigNZPToAddModList_r11", -1);

               csi_RS_ConfigNZPToAddModList_r11 = new CSI_RS_ConfigNZPToAddModList_r11();
               csi_RS_ConfigNZPToAddModList_r11.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("csi_RS_ConfigNZPToAddModList_r11", -1);
            }
            else {
               csi_RS_ConfigNZPToAddModList_r11 = null;
            }

            // decode csi_RS_ConfigZPToReleaseList_r11

            if (csi_RS_ConfigZPToReleaseList_r11Present) {
               buffer.getContext().eventDispatcher.startElement("csi_RS_ConfigZPToReleaseList_r11", -1);

               csi_RS_ConfigZPToReleaseList_r11 = new CSI_RS_ConfigZPToReleaseList_r11();
               csi_RS_ConfigZPToReleaseList_r11.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("csi_RS_ConfigZPToReleaseList_r11", -1);
            }
            else {
               csi_RS_ConfigZPToReleaseList_r11 = null;
            }

            // decode csi_RS_ConfigZPToAddModList_r11

            if (csi_RS_ConfigZPToAddModList_r11Present) {
               buffer.getContext().eventDispatcher.startElement("csi_RS_ConfigZPToAddModList_r11", -1);

               csi_RS_ConfigZPToAddModList_r11 = new CSI_RS_ConfigZPToAddModList_r11();
               csi_RS_ConfigZPToAddModList_r11.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("csi_RS_ConfigZPToAddModList_r11", -1);
            }
            else {
               csi_RS_ConfigZPToAddModList_r11 = null;
            }

            // decode epdcch_Config_r11

            if (epdcch_Config_r11Present) {
               buffer.getContext().eventDispatcher.startElement("epdcch_Config_r11", -1);

               epdcch_Config_r11 = new EPDCCH_Config_r11();
               epdcch_Config_r11.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("epdcch_Config_r11", -1);
            }
            else {
               epdcch_Config_r11 = null;
            }

            // decode pdsch_ConfigDedicated_v1130

            if (pdsch_ConfigDedicated_v1130Present) {
               buffer.getContext().eventDispatcher.startElement("pdsch_ConfigDedicated_v1130", -1);

               pdsch_ConfigDedicated_v1130 = new PDSCH_ConfigDedicated_v1130();
               pdsch_ConfigDedicated_v1130.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("pdsch_ConfigDedicated_v1130", -1);
            }
            else {
               pdsch_ConfigDedicated_v1130 = null;
            }

            // decode cqi_ReportConfig_v1130

            if (cqi_ReportConfig_v1130Present) {
               buffer.getContext().eventDispatcher.startElement("cqi_ReportConfig_v1130", -1);

               cqi_ReportConfig_v1130 = new CQI_ReportConfig_v1130();
               cqi_ReportConfig_v1130.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("cqi_ReportConfig_v1130", -1);
            }
            else {
               cqi_ReportConfig_v1130 = null;
            }

            // decode pucch_ConfigDedicated_v1130

            if (pucch_ConfigDedicated_v1130Present) {
               buffer.getContext().eventDispatcher.startElement("pucch_ConfigDedicated_v1130", -1);

               pucch_ConfigDedicated_v1130 = new PUCCH_ConfigDedicated_v1130();
               pucch_ConfigDedicated_v1130.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("pucch_ConfigDedicated_v1130", -1);
            }
            else {
               pucch_ConfigDedicated_v1130 = null;
            }

            // decode pusch_ConfigDedicated_v1130

            if (pusch_ConfigDedicated_v1130Present) {
               buffer.getContext().eventDispatcher.startElement("pusch_ConfigDedicated_v1130", -1);

               pusch_ConfigDedicated_v1130 = new PUSCH_ConfigDedicated_v1130();
               pusch_ConfigDedicated_v1130.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("pusch_ConfigDedicated_v1130", -1);
            }
            else {
               pusch_ConfigDedicated_v1130 = null;
            }

            // decode uplinkPowerControlDedicated_v1130

            if (uplinkPowerControlDedicated_v1130Present) {
               buffer.getContext().eventDispatcher.startElement("uplinkPowerControlDedicated_v1130", -1);

               uplinkPowerControlDedicated_v1130 = new UplinkPowerControlDedicated_v1130();
               uplinkPowerControlDedicated_v1130.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("uplinkPowerControlDedicated_v1130", -1);
            }
            else {
               uplinkPowerControlDedicated_v1130 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV6ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean antennaInfo_v1250Present = buffer.decodeBit ("antennaInfo_v1250Present");

            boolean eimta_MainConfig_r12Present = buffer.decodeBit ("eimta_MainConfig_r12Present");

            boolean eimta_MainConfigPCell_r12Present = buffer.decodeBit ("eimta_MainConfigPCell_r12Present");

            boolean pucch_ConfigDedicated_v1250Present = buffer.decodeBit ("pucch_ConfigDedicated_v1250Present");

            boolean cqi_ReportConfigPCell_v1250Present = buffer.decodeBit ("cqi_ReportConfigPCell_v1250Present");

            boolean uplinkPowerControlDedicated_v1250Present = buffer.decodeBit ("uplinkPowerControlDedicated_v1250Present");

            boolean pusch_ConfigDedicated_v1250Present = buffer.decodeBit ("pusch_ConfigDedicated_v1250Present");

            boolean csi_RS_Config_v1250Present = buffer.decodeBit ("csi_RS_Config_v1250Present");

            // decode antennaInfo_v1250

            if (antennaInfo_v1250Present) {
               buffer.getContext().eventDispatcher.startElement("antennaInfo_v1250", -1);

               antennaInfo_v1250 = new AntennaInfoDedicated_v1250();
               antennaInfo_v1250.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("antennaInfo_v1250", -1);
            }
            else {
               antennaInfo_v1250 = null;
            }

            // decode eimta_MainConfig_r12

            if (eimta_MainConfig_r12Present) {
               buffer.getContext().eventDispatcher.startElement("eimta_MainConfig_r12", -1);

               eimta_MainConfig_r12 = new EIMTA_MainConfig_r12();
               eimta_MainConfig_r12.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("eimta_MainConfig_r12", -1);
            }
            else {
               eimta_MainConfig_r12 = null;
            }

            // decode eimta_MainConfigPCell_r12

            if (eimta_MainConfigPCell_r12Present) {
               buffer.getContext().eventDispatcher.startElement("eimta_MainConfigPCell_r12", -1);

               eimta_MainConfigPCell_r12 = new EIMTA_MainConfigServCell_r12();
               eimta_MainConfigPCell_r12.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("eimta_MainConfigPCell_r12", -1);
            }
            else {
               eimta_MainConfigPCell_r12 = null;
            }

            // decode pucch_ConfigDedicated_v1250

            if (pucch_ConfigDedicated_v1250Present) {
               buffer.getContext().eventDispatcher.startElement("pucch_ConfigDedicated_v1250", -1);

               pucch_ConfigDedicated_v1250 = new PUCCH_ConfigDedicated_v1250();
               pucch_ConfigDedicated_v1250.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("pucch_ConfigDedicated_v1250", -1);
            }
            else {
               pucch_ConfigDedicated_v1250 = null;
            }

            // decode cqi_ReportConfigPCell_v1250

            if (cqi_ReportConfigPCell_v1250Present) {
               buffer.getContext().eventDispatcher.startElement("cqi_ReportConfigPCell_v1250", -1);

               cqi_ReportConfigPCell_v1250 = new CQI_ReportConfig_v1250();
               cqi_ReportConfigPCell_v1250.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("cqi_ReportConfigPCell_v1250", -1);
            }
            else {
               cqi_ReportConfigPCell_v1250 = null;
            }

            // decode uplinkPowerControlDedicated_v1250

            if (uplinkPowerControlDedicated_v1250Present) {
               buffer.getContext().eventDispatcher.startElement("uplinkPowerControlDedicated_v1250", -1);

               uplinkPowerControlDedicated_v1250 = new UplinkPowerControlDedicated_v1250();
               uplinkPowerControlDedicated_v1250.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("uplinkPowerControlDedicated_v1250", -1);
            }
            else {
               uplinkPowerControlDedicated_v1250 = null;
            }

            // decode pusch_ConfigDedicated_v1250

            if (pusch_ConfigDedicated_v1250Present) {
               buffer.getContext().eventDispatcher.startElement("pusch_ConfigDedicated_v1250", -1);

               pusch_ConfigDedicated_v1250 = new PUSCH_ConfigDedicated_v1250();
               pusch_ConfigDedicated_v1250.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("pusch_ConfigDedicated_v1250", -1);
            }
            else {
               pusch_ConfigDedicated_v1250 = null;
            }

            // decode csi_RS_Config_v1250

            if (csi_RS_Config_v1250Present) {
               buffer.getContext().eventDispatcher.startElement("csi_RS_Config_v1250", -1);

               csi_RS_Config_v1250 = new CSI_RS_Config_v1250();
               csi_RS_Config_v1250.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("csi_RS_Config_v1250", -1);
            }
            else {
               csi_RS_Config_v1250 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV7ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean pdsch_ConfigDedicated_v1280Present = buffer.decodeBit ("pdsch_ConfigDedicated_v1280Present");

            // decode pdsch_ConfigDedicated_v1280

            if (pdsch_ConfigDedicated_v1280Present) {
               buffer.getContext().eventDispatcher.startElement("pdsch_ConfigDedicated_v1280", -1);

               pdsch_ConfigDedicated_v1280 = new PDSCH_ConfigDedicated_v1280();
               pdsch_ConfigDedicated_v1280.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("pdsch_ConfigDedicated_v1280", -1);
            }
            else {
               pdsch_ConfigDedicated_v1280 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV8ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean pdsch_ConfigDedicated_v1310Present = buffer.decodeBit ("pdsch_ConfigDedicated_v1310Present");

            boolean pucch_ConfigDedicated_r13Present = buffer.decodeBit ("pucch_ConfigDedicated_r13Present");

            boolean pusch_ConfigDedicated_r13Present = buffer.decodeBit ("pusch_ConfigDedicated_r13Present");

            boolean pdcch_CandidateReductions_r13Present = buffer.decodeBit ("pdcch_CandidateReductions_r13Present");

            boolean cqi_ReportConfig_v1310Present = buffer.decodeBit ("cqi_ReportConfig_v1310Present");

            boolean soundingRS_UL_ConfigDedicated_v1310Present = buffer.decodeBit ("soundingRS_UL_ConfigDedicated_v1310Present");

            boolean soundingRS_UL_ConfigDedicatedUpPTsExt_r13Present = buffer.decodeBit ("soundingRS_UL_ConfigDedicatedUpPTsExt_r13Present");

            boolean soundingRS_UL_ConfigDedicatedAperiodic_v1310Present = buffer.decodeBit ("soundingRS_UL_ConfigDedicatedAperiodic_v1310Present");

            boolean soundingRS_UL_ConfigDedicatedAperiodicUpPTsExt_r13Present = buffer.decodeBit ("soundingRS_UL_ConfigDedicatedAperiodicUpPTsExt_r13Present");

            boolean csi_RS_Config_v1310Present = buffer.decodeBit ("csi_RS_Config_v1310Present");

            boolean ce_Mode_r13Present = buffer.decodeBit ("ce_Mode_r13Present");

            boolean csi_RS_ConfigNZPToAddModListExt_r13Present = buffer.decodeBit ("csi_RS_ConfigNZPToAddModListExt_r13Present");

            boolean csi_RS_ConfigNZPToReleaseListExt_r13Present = buffer.decodeBit ("csi_RS_ConfigNZPToReleaseListExt_r13Present");

            // decode pdsch_ConfigDedicated_v1310

            if (pdsch_ConfigDedicated_v1310Present) {
               buffer.getContext().eventDispatcher.startElement("pdsch_ConfigDedicated_v1310", -1);

               pdsch_ConfigDedicated_v1310 = new PDSCH_ConfigDedicated_v1310();
               pdsch_ConfigDedicated_v1310.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("pdsch_ConfigDedicated_v1310", -1);
            }
            else {
               pdsch_ConfigDedicated_v1310 = null;
            }

            // decode pucch_ConfigDedicated_r13

            if (pucch_ConfigDedicated_r13Present) {
               buffer.getContext().eventDispatcher.startElement("pucch_ConfigDedicated_r13", -1);

               pucch_ConfigDedicated_r13 = new PUCCH_ConfigDedicated_r13();
               pucch_ConfigDedicated_r13.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("pucch_ConfigDedicated_r13", -1);
            }
            else {
               pucch_ConfigDedicated_r13 = null;
            }

            // decode pusch_ConfigDedicated_r13

            if (pusch_ConfigDedicated_r13Present) {
               buffer.getContext().eventDispatcher.startElement("pusch_ConfigDedicated_r13", -1);

               pusch_ConfigDedicated_r13 = new PUSCH_ConfigDedicated_r13();
               pusch_ConfigDedicated_r13.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("pusch_ConfigDedicated_r13", -1);
            }
            else {
               pusch_ConfigDedicated_r13 = null;
            }

            // decode pdcch_CandidateReductions_r13

            if (pdcch_CandidateReductions_r13Present) {
               buffer.getContext().eventDispatcher.startElement("pdcch_CandidateReductions_r13", -1);

               pdcch_CandidateReductions_r13 = new PDCCH_CandidateReductions_r13();
               pdcch_CandidateReductions_r13.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("pdcch_CandidateReductions_r13", -1);
            }
            else {
               pdcch_CandidateReductions_r13 = null;
            }

            // decode cqi_ReportConfig_v1310

            if (cqi_ReportConfig_v1310Present) {
               buffer.getContext().eventDispatcher.startElement("cqi_ReportConfig_v1310", -1);

               cqi_ReportConfig_v1310 = new CQI_ReportConfig_v1310();
               cqi_ReportConfig_v1310.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("cqi_ReportConfig_v1310", -1);
            }
            else {
               cqi_ReportConfig_v1310 = null;
            }

            // decode soundingRS_UL_ConfigDedicated_v1310

            if (soundingRS_UL_ConfigDedicated_v1310Present) {
               buffer.getContext().eventDispatcher.startElement("soundingRS_UL_ConfigDedicated_v1310", -1);

               soundingRS_UL_ConfigDedicated_v1310 = new SoundingRS_UL_ConfigDedicated_v1310();
               soundingRS_UL_ConfigDedicated_v1310.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("soundingRS_UL_ConfigDedicated_v1310", -1);
            }
            else {
               soundingRS_UL_ConfigDedicated_v1310 = null;
            }

            // decode soundingRS_UL_ConfigDedicatedUpPTsExt_r13

            if (soundingRS_UL_ConfigDedicatedUpPTsExt_r13Present) {
               buffer.getContext().eventDispatcher.startElement("soundingRS_UL_ConfigDedicatedUpPTsExt_r13", -1);

               soundingRS_UL_ConfigDedicatedUpPTsExt_r13 = new SoundingRS_UL_ConfigDedicatedUpPTsExt_r13();
               soundingRS_UL_ConfigDedicatedUpPTsExt_r13.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("soundingRS_UL_ConfigDedicatedUpPTsExt_r13", -1);
            }
            else {
               soundingRS_UL_ConfigDedicatedUpPTsExt_r13 = null;
            }

            // decode soundingRS_UL_ConfigDedicatedAperiodic_v1310

            if (soundingRS_UL_ConfigDedicatedAperiodic_v1310Present) {
               buffer.getContext().eventDispatcher.startElement("soundingRS_UL_ConfigDedicatedAperiodic_v1310", -1);

               soundingRS_UL_ConfigDedicatedAperiodic_v1310 = new SoundingRS_UL_ConfigDedicatedAperiodic_v1310();
               soundingRS_UL_ConfigDedicatedAperiodic_v1310.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("soundingRS_UL_ConfigDedicatedAperiodic_v1310", -1);
            }
            else {
               soundingRS_UL_ConfigDedicatedAperiodic_v1310 = null;
            }

            // decode soundingRS_UL_ConfigDedicatedAperiodicUpPTsExt_r13

            if (soundingRS_UL_ConfigDedicatedAperiodicUpPTsExt_r13Present) {
               buffer.getContext().eventDispatcher.startElement("soundingRS_UL_ConfigDedicatedAperiodicUpPTsExt_r13", -1);

               soundingRS_UL_ConfigDedicatedAperiodicUpPTsExt_r13 = new SoundingRS_UL_ConfigDedicatedAperiodicUpPTsExt_r13();
               soundingRS_UL_ConfigDedicatedAperiodicUpPTsExt_r13.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("soundingRS_UL_ConfigDedicatedAperiodicUpPTsExt_r13", -1);
            }
            else {
               soundingRS_UL_ConfigDedicatedAperiodicUpPTsExt_r13 = null;
            }

            // decode csi_RS_Config_v1310

            if (csi_RS_Config_v1310Present) {
               buffer.getContext().eventDispatcher.startElement("csi_RS_Config_v1310", -1);

               csi_RS_Config_v1310 = new CSI_RS_Config_v1310();
               csi_RS_Config_v1310.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("csi_RS_Config_v1310", -1);
            }
            else {
               csi_RS_Config_v1310 = null;
            }

            // decode ce_Mode_r13

            if (ce_Mode_r13Present) {
               buffer.getContext().eventDispatcher.startElement("ce_Mode_r13", -1);

               ce_Mode_r13 = new PhysicalConfigDedicated_ce_Mode_r13();
               ce_Mode_r13.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("ce_Mode_r13", -1);
            }
            else {
               ce_Mode_r13 = null;
            }

            // decode csi_RS_ConfigNZPToAddModListExt_r13

            if (csi_RS_ConfigNZPToAddModListExt_r13Present) {
               buffer.getContext().eventDispatcher.startElement("csi_RS_ConfigNZPToAddModListExt_r13", -1);

               csi_RS_ConfigNZPToAddModListExt_r13 = new CSI_RS_ConfigNZPToAddModListExt_r13();
               csi_RS_ConfigNZPToAddModListExt_r13.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("csi_RS_ConfigNZPToAddModListExt_r13", -1);
            }
            else {
               csi_RS_ConfigNZPToAddModListExt_r13 = null;
            }

            // decode csi_RS_ConfigNZPToReleaseListExt_r13

            if (csi_RS_ConfigNZPToReleaseListExt_r13Present) {
               buffer.getContext().eventDispatcher.startElement("csi_RS_ConfigNZPToReleaseListExt_r13", -1);

               csi_RS_ConfigNZPToReleaseListExt_r13 = new CSI_RS_ConfigNZPToReleaseListExt_r13();
               csi_RS_ConfigNZPToReleaseListExt_r13.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("csi_RS_ConfigNZPToReleaseListExt_r13", -1);
            }
            else {
               csi_RS_ConfigNZPToReleaseListExt_r13 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV9ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean cqi_ReportConfig_v1320Present = buffer.decodeBit ("cqi_ReportConfig_v1320Present");

            // decode cqi_ReportConfig_v1320

            if (cqi_ReportConfig_v1320Present) {
               buffer.getContext().eventDispatcher.startElement("cqi_ReportConfig_v1320", -1);

               cqi_ReportConfig_v1320 = new CQI_ReportConfig_v1320();
               cqi_ReportConfig_v1320.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("cqi_ReportConfig_v1320", -1);
            }
            else {
               cqi_ReportConfig_v1320 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV10ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean typeA_SRS_TPC_PDCCH_Group_r14Present = buffer.decodeBit ("typeA_SRS_TPC_PDCCH_Group_r14Present");

            boolean must_Config_r14Present = buffer.decodeBit ("must_Config_r14Present");

            boolean pusch_EnhancementsConfig_r14Present = buffer.decodeBit ("pusch_EnhancementsConfig_r14Present");

            boolean ce_pdsch_pusch_EnhancementConfig_r14Present = buffer.decodeBit ("ce_pdsch_pusch_EnhancementConfig_r14Present");

            boolean antennaInfo_v1430Present = buffer.decodeBit ("antennaInfo_v1430Present");

            boolean pucch_ConfigDedicated_v1430Present = buffer.decodeBit ("pucch_ConfigDedicated_v1430Present");

            boolean pdsch_ConfigDedicated_v1430Present = buffer.decodeBit ("pdsch_ConfigDedicated_v1430Present");

            boolean pusch_ConfigDedicated_v1430Present = buffer.decodeBit ("pusch_ConfigDedicated_v1430Present");

            boolean soundingRS_UL_PeriodicConfigDedicatedList_r14Present = buffer.decodeBit ("soundingRS_UL_PeriodicConfigDedicatedList_r14Present");

            boolean soundingRS_UL_PeriodicConfigDedicatedUpPTsExtList_r14Present = buffer.decodeBit ("soundingRS_UL_PeriodicConfigDedicatedUpPTsExtList_r14Present");

            boolean soundingRS_UL_AperiodicConfigDedicatedList_r14Present = buffer.decodeBit ("soundingRS_UL_AperiodicConfigDedicatedList_r14Present");

            boolean soundingRS_UL_ConfigDedicatedApUpPTsExtList_r14Present = buffer.decodeBit ("soundingRS_UL_ConfigDedicatedApUpPTsExtList_r14Present");

            boolean csi_RS_Config_v1430Present = buffer.decodeBit ("csi_RS_Config_v1430Present");

            boolean csi_RS_ConfigZP_ApList_r14Present = buffer.decodeBit ("csi_RS_ConfigZP_ApList_r14Present");

            boolean cqi_ReportConfig_v1430Present = buffer.decodeBit ("cqi_ReportConfig_v1430Present");

            boolean semiOpenLoop_r14Present = buffer.decodeBit ("semiOpenLoop_r14Present");

            // decode typeA_SRS_TPC_PDCCH_Group_r14

            if (typeA_SRS_TPC_PDCCH_Group_r14Present) {
               buffer.getContext().eventDispatcher.startElement("typeA_SRS_TPC_PDCCH_Group_r14", -1);

               typeA_SRS_TPC_PDCCH_Group_r14 = new PhysicalConfigDedicated_typeA_SRS_TPC_PDCCH_Group_r14();
               typeA_SRS_TPC_PDCCH_Group_r14.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("typeA_SRS_TPC_PDCCH_Group_r14", -1);
            }
            else {
               typeA_SRS_TPC_PDCCH_Group_r14 = null;
            }

            // decode must_Config_r14

            if (must_Config_r14Present) {
               buffer.getContext().eventDispatcher.startElement("must_Config_r14", -1);

               must_Config_r14 = new PhysicalConfigDedicated_must_Config_r14();
               must_Config_r14.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("must_Config_r14", -1);
            }
            else {
               must_Config_r14 = null;
            }

            // decode pusch_EnhancementsConfig_r14

            if (pusch_EnhancementsConfig_r14Present) {
               buffer.getContext().eventDispatcher.startElement("pusch_EnhancementsConfig_r14", -1);

               pusch_EnhancementsConfig_r14 = new PUSCH_EnhancementsConfig_r14();
               pusch_EnhancementsConfig_r14.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("pusch_EnhancementsConfig_r14", -1);
            }
            else {
               pusch_EnhancementsConfig_r14 = null;
            }

            // decode ce_pdsch_pusch_EnhancementConfig_r14

            if (ce_pdsch_pusch_EnhancementConfig_r14Present) {
               buffer.getContext().eventDispatcher.startElement("ce_pdsch_pusch_EnhancementConfig_r14", -1);

               int tval = PhysicalConfigDedicated_ce_pdsch_pusch_EnhancementConfig_r14.decodeEnumValue (buffer);
               ce_pdsch_pusch_EnhancementConfig_r14 = PhysicalConfigDedicated_ce_pdsch_pusch_EnhancementConfig_r14.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("ce_pdsch_pusch_EnhancementConfig_r14", -1);
            }
            else {
               ce_pdsch_pusch_EnhancementConfig_r14 = null;
            }

            // decode antennaInfo_v1430

            if (antennaInfo_v1430Present) {
               buffer.getContext().eventDispatcher.startElement("antennaInfo_v1430", -1);

               antennaInfo_v1430 = new AntennaInfoDedicated_v1430();
               antennaInfo_v1430.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("antennaInfo_v1430", -1);
            }
            else {
               antennaInfo_v1430 = null;
            }

            // decode pucch_ConfigDedicated_v1430

            if (pucch_ConfigDedicated_v1430Present) {
               buffer.getContext().eventDispatcher.startElement("pucch_ConfigDedicated_v1430", -1);

               pucch_ConfigDedicated_v1430 = new PUCCH_ConfigDedicated_v1430();
               pucch_ConfigDedicated_v1430.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("pucch_ConfigDedicated_v1430", -1);
            }
            else {
               pucch_ConfigDedicated_v1430 = null;
            }

            // decode pdsch_ConfigDedicated_v1430

            if (pdsch_ConfigDedicated_v1430Present) {
               buffer.getContext().eventDispatcher.startElement("pdsch_ConfigDedicated_v1430", -1);

               pdsch_ConfigDedicated_v1430 = new PDSCH_ConfigDedicated_v1430();
               pdsch_ConfigDedicated_v1430.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("pdsch_ConfigDedicated_v1430", -1);
            }
            else {
               pdsch_ConfigDedicated_v1430 = null;
            }

            // decode pusch_ConfigDedicated_v1430

            if (pusch_ConfigDedicated_v1430Present) {
               buffer.getContext().eventDispatcher.startElement("pusch_ConfigDedicated_v1430", -1);

               pusch_ConfigDedicated_v1430 = new PUSCH_ConfigDedicated_v1430();
               pusch_ConfigDedicated_v1430.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("pusch_ConfigDedicated_v1430", -1);
            }
            else {
               pusch_ConfigDedicated_v1430 = null;
            }

            // decode soundingRS_UL_PeriodicConfigDedicatedList_r14

            if (soundingRS_UL_PeriodicConfigDedicatedList_r14Present) {
               buffer.getContext().eventDispatcher.startElement("soundingRS_UL_PeriodicConfigDedicatedList_r14", -1);

               soundingRS_UL_PeriodicConfigDedicatedList_r14 = new PhysicalConfigDedicated_soundingRS_UL_PeriodicConfigDedicatedList_r14();
               soundingRS_UL_PeriodicConfigDedicatedList_r14.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("soundingRS_UL_PeriodicConfigDedicatedList_r14", -1);
            }
            else {
               soundingRS_UL_PeriodicConfigDedicatedList_r14 = null;
            }

            // decode soundingRS_UL_PeriodicConfigDedicatedUpPTsExtList_r14

            if (soundingRS_UL_PeriodicConfigDedicatedUpPTsExtList_r14Present) {
               buffer.getContext().eventDispatcher.startElement("soundingRS_UL_PeriodicConfigDedicatedUpPTsExtList_r14", -1);

               soundingRS_UL_PeriodicConfigDedicatedUpPTsExtList_r14 = new PhysicalConfigDedicated_soundingRS_UL_PeriodicConfigDedicatedUpPTsExtList_r14();
               soundingRS_UL_PeriodicConfigDedicatedUpPTsExtList_r14.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("soundingRS_UL_PeriodicConfigDedicatedUpPTsExtList_r14", -1);
            }
            else {
               soundingRS_UL_PeriodicConfigDedicatedUpPTsExtList_r14 = null;
            }

            // decode soundingRS_UL_AperiodicConfigDedicatedList_r14

            if (soundingRS_UL_AperiodicConfigDedicatedList_r14Present) {
               buffer.getContext().eventDispatcher.startElement("soundingRS_UL_AperiodicConfigDedicatedList_r14", -1);

               soundingRS_UL_AperiodicConfigDedicatedList_r14 = new PhysicalConfigDedicated_soundingRS_UL_AperiodicConfigDedicatedList_r14();
               soundingRS_UL_AperiodicConfigDedicatedList_r14.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("soundingRS_UL_AperiodicConfigDedicatedList_r14", -1);
            }
            else {
               soundingRS_UL_AperiodicConfigDedicatedList_r14 = null;
            }

            // decode soundingRS_UL_ConfigDedicatedApUpPTsExtList_r14

            if (soundingRS_UL_ConfigDedicatedApUpPTsExtList_r14Present) {
               buffer.getContext().eventDispatcher.startElement("soundingRS_UL_ConfigDedicatedApUpPTsExtList_r14", -1);

               soundingRS_UL_ConfigDedicatedApUpPTsExtList_r14 = new PhysicalConfigDedicated_soundingRS_UL_ConfigDedicatedApUpPTsExtList_r14();
               soundingRS_UL_ConfigDedicatedApUpPTsExtList_r14.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("soundingRS_UL_ConfigDedicatedApUpPTsExtList_r14", -1);
            }
            else {
               soundingRS_UL_ConfigDedicatedApUpPTsExtList_r14 = null;
            }

            // decode csi_RS_Config_v1430

            if (csi_RS_Config_v1430Present) {
               buffer.getContext().eventDispatcher.startElement("csi_RS_Config_v1430", -1);

               csi_RS_Config_v1430 = new CSI_RS_Config_v1430();
               csi_RS_Config_v1430.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("csi_RS_Config_v1430", -1);
            }
            else {
               csi_RS_Config_v1430 = null;
            }

            // decode csi_RS_ConfigZP_ApList_r14

            if (csi_RS_ConfigZP_ApList_r14Present) {
               buffer.getContext().eventDispatcher.startElement("csi_RS_ConfigZP_ApList_r14", -1);

               csi_RS_ConfigZP_ApList_r14 = new CSI_RS_ConfigZP_ApList_r14();
               csi_RS_ConfigZP_ApList_r14.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("csi_RS_ConfigZP_ApList_r14", -1);
            }
            else {
               csi_RS_ConfigZP_ApList_r14 = null;
            }

            // decode cqi_ReportConfig_v1430

            if (cqi_ReportConfig_v1430Present) {
               buffer.getContext().eventDispatcher.startElement("cqi_ReportConfig_v1430", -1);

               cqi_ReportConfig_v1430 = new CQI_ReportConfig_v1430();
               cqi_ReportConfig_v1430.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("cqi_ReportConfig_v1430", -1);
            }
            else {
               cqi_ReportConfig_v1430 = null;
            }

            // decode semiOpenLoop_r14

            if (semiOpenLoop_r14Present) {
               buffer.getContext().eventDispatcher.startElement("semiOpenLoop_r14", -1);

               semiOpenLoop_r14 = new Asn1Boolean();
               semiOpenLoop_r14.decode (buffer);

               buffer.invokeCharacters(semiOpenLoop_r14.toString());
               buffer.getContext().eventDispatcher.endElement("semiOpenLoop_r14", -1);
            }
            else {
               semiOpenLoop_r14 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV11ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean csi_RS_Config_v1480Present = buffer.decodeBit ("csi_RS_Config_v1480Present");

            // decode csi_RS_Config_v1480

            if (csi_RS_Config_v1480Present) {
               buffer.getContext().eventDispatcher.startElement("csi_RS_Config_v1480", -1);

               csi_RS_Config_v1480 = new CSI_RS_Config_v1480();
               csi_RS_Config_v1480.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("csi_RS_Config_v1480", -1);
            }
            else {
               csi_RS_Config_v1480 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV12ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean physicalConfigDedicatedSTTI_r15Present = buffer.decodeBit ("physicalConfigDedicatedSTTI_r15Present");

            boolean pdsch_ConfigDedicated_v1530Present = buffer.decodeBit ("pdsch_ConfigDedicated_v1530Present");

            boolean pusch_ConfigDedicated_v1530Present = buffer.decodeBit ("pusch_ConfigDedicated_v1530Present");

            boolean cqi_ReportConfig_v1530Present = buffer.decodeBit ("cqi_ReportConfig_v1530Present");

            boolean antennaInfo_v1530Present = buffer.decodeBit ("antennaInfo_v1530Present");

            boolean csi_RS_Config_v1530Present = buffer.decodeBit ("csi_RS_Config_v1530Present");

            boolean uplinkPowerControlDedicated_v1530Present = buffer.decodeBit ("uplinkPowerControlDedicated_v1530Present");

            boolean semiStaticCFI_Config_r15Present = buffer.decodeBit ("semiStaticCFI_Config_r15Present");

            boolean blindPDSCH_Repetition_Config_r15Present = buffer.decodeBit ("blindPDSCH_Repetition_Config_r15Present");

            // decode physicalConfigDedicatedSTTI_r15

            if (physicalConfigDedicatedSTTI_r15Present) {
               buffer.getContext().eventDispatcher.startElement("physicalConfigDedicatedSTTI_r15", -1);

               physicalConfigDedicatedSTTI_r15 = new PhysicalConfigDedicatedSTTI_r15();
               physicalConfigDedicatedSTTI_r15.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("physicalConfigDedicatedSTTI_r15", -1);
            }
            else {
               physicalConfigDedicatedSTTI_r15 = null;
            }

            // decode pdsch_ConfigDedicated_v1530

            if (pdsch_ConfigDedicated_v1530Present) {
               buffer.getContext().eventDispatcher.startElement("pdsch_ConfigDedicated_v1530", -1);

               pdsch_ConfigDedicated_v1530 = new PDSCH_ConfigDedicated_v1530();
               pdsch_ConfigDedicated_v1530.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("pdsch_ConfigDedicated_v1530", -1);
            }
            else {
               pdsch_ConfigDedicated_v1530 = null;
            }

            // decode pusch_ConfigDedicated_v1530

            if (pusch_ConfigDedicated_v1530Present) {
               buffer.getContext().eventDispatcher.startElement("pusch_ConfigDedicated_v1530", -1);

               pusch_ConfigDedicated_v1530 = new PUSCH_ConfigDedicated_v1530();
               pusch_ConfigDedicated_v1530.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("pusch_ConfigDedicated_v1530", -1);
            }
            else {
               pusch_ConfigDedicated_v1530 = null;
            }

            // decode cqi_ReportConfig_v1530

            if (cqi_ReportConfig_v1530Present) {
               buffer.getContext().eventDispatcher.startElement("cqi_ReportConfig_v1530", -1);

               cqi_ReportConfig_v1530 = new CQI_ReportConfig_v1530();
               cqi_ReportConfig_v1530.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("cqi_ReportConfig_v1530", -1);
            }
            else {
               cqi_ReportConfig_v1530 = null;
            }

            // decode antennaInfo_v1530

            if (antennaInfo_v1530Present) {
               buffer.getContext().eventDispatcher.startElement("antennaInfo_v1530", -1);

               antennaInfo_v1530 = new AntennaInfoDedicated_v1530();
               antennaInfo_v1530.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("antennaInfo_v1530", -1);
            }
            else {
               antennaInfo_v1530 = null;
            }

            // decode csi_RS_Config_v1530

            if (csi_RS_Config_v1530Present) {
               buffer.getContext().eventDispatcher.startElement("csi_RS_Config_v1530", -1);

               csi_RS_Config_v1530 = new CSI_RS_Config_v1530();
               csi_RS_Config_v1530.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("csi_RS_Config_v1530", -1);
            }
            else {
               csi_RS_Config_v1530 = null;
            }

            // decode uplinkPowerControlDedicated_v1530

            if (uplinkPowerControlDedicated_v1530Present) {
               buffer.getContext().eventDispatcher.startElement("uplinkPowerControlDedicated_v1530", -1);

               uplinkPowerControlDedicated_v1530 = new UplinkPowerControlDedicated_v1530();
               uplinkPowerControlDedicated_v1530.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("uplinkPowerControlDedicated_v1530", -1);
            }
            else {
               uplinkPowerControlDedicated_v1530 = null;
            }

            // decode semiStaticCFI_Config_r15

            if (semiStaticCFI_Config_r15Present) {
               buffer.getContext().eventDispatcher.startElement("semiStaticCFI_Config_r15", -1);

               semiStaticCFI_Config_r15 = new PhysicalConfigDedicated_semiStaticCFI_Config_r15();
               semiStaticCFI_Config_r15.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("semiStaticCFI_Config_r15", -1);
            }
            else {
               semiStaticCFI_Config_r15 = null;
            }

            // decode blindPDSCH_Repetition_Config_r15

            if (blindPDSCH_Repetition_Config_r15Present) {
               buffer.getContext().eventDispatcher.startElement("blindPDSCH_Repetition_Config_r15", -1);

               blindPDSCH_Repetition_Config_r15 = new PhysicalConfigDedicated_blindPDSCH_Repetition_Config_r15();
               blindPDSCH_Repetition_Config_r15.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("blindPDSCH_Repetition_Config_r15", -1);
            }
            else {
               blindPDSCH_Repetition_Config_r15 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (pdsch_ConfigDedicated != null) pdsch_ConfigDedicated.print (_sb, "pdsch_ConfigDedicated", _level+1);
      if (pucch_ConfigDedicated != null) pucch_ConfigDedicated.print (_sb, "pucch_ConfigDedicated", _level+1);
      if (pusch_ConfigDedicated != null) pusch_ConfigDedicated.print (_sb, "pusch_ConfigDedicated", _level+1);
      if (uplinkPowerControlDedicated != null) uplinkPowerControlDedicated.print (_sb, "uplinkPowerControlDedicated", _level+1);
      if (tpc_PDCCH_ConfigPUCCH != null) tpc_PDCCH_ConfigPUCCH.print (_sb, "tpc_PDCCH_ConfigPUCCH", _level+1);
      if (tpc_PDCCH_ConfigPUSCH != null) tpc_PDCCH_ConfigPUSCH.print (_sb, "tpc_PDCCH_ConfigPUSCH", _level+1);
      if (cqi_ReportConfig != null) cqi_ReportConfig.print (_sb, "cqi_ReportConfig", _level+1);
      if (soundingRS_UL_ConfigDedicated != null) soundingRS_UL_ConfigDedicated.print (_sb, "soundingRS_UL_ConfigDedicated", _level+1);
      if (antennaInfo != null) antennaInfo.print (_sb, "antennaInfo", _level+1);
      if (schedulingRequestConfig != null) schedulingRequestConfig.print (_sb, "schedulingRequestConfig", _level+1);
      if (cqi_ReportConfig_v920 != null) cqi_ReportConfig_v920.print (_sb, "cqi_ReportConfig_v920", _level+1);
      if (antennaInfo_v920 != null) antennaInfo_v920.print (_sb, "antennaInfo_v920", _level+1);
      if (antennaInfo_r10 != null) antennaInfo_r10.print (_sb, "antennaInfo_r10", _level+1);
      if (antennaInfoUL_r10 != null) antennaInfoUL_r10.print (_sb, "antennaInfoUL_r10", _level+1);
      if (cif_Presence_r10 != null) cif_Presence_r10.print (_sb, "cif_Presence_r10", _level+1);
      if (cqi_ReportConfig_r10 != null) cqi_ReportConfig_r10.print (_sb, "cqi_ReportConfig_r10", _level+1);
      if (csi_RS_Config_r10 != null) csi_RS_Config_r10.print (_sb, "csi_RS_Config_r10", _level+1);
      if (pucch_ConfigDedicated_v1020 != null) pucch_ConfigDedicated_v1020.print (_sb, "pucch_ConfigDedicated_v1020", _level+1);
      if (pusch_ConfigDedicated_v1020 != null) pusch_ConfigDedicated_v1020.print (_sb, "pusch_ConfigDedicated_v1020", _level+1);
      if (schedulingRequestConfig_v1020 != null) schedulingRequestConfig_v1020.print (_sb, "schedulingRequestConfig_v1020", _level+1);
      if (soundingRS_UL_ConfigDedicated_v1020 != null) soundingRS_UL_ConfigDedicated_v1020.print (_sb, "soundingRS_UL_ConfigDedicated_v1020", _level+1);
      if (soundingRS_UL_ConfigDedicatedAperiodic_r10 != null) soundingRS_UL_ConfigDedicatedAperiodic_r10.print (_sb, "soundingRS_UL_ConfigDedicatedAperiodic_r10", _level+1);
      if (uplinkPowerControlDedicated_v1020 != null) uplinkPowerControlDedicated_v1020.print (_sb, "uplinkPowerControlDedicated_v1020", _level+1);
      if (additionalSpectrumEmissionCA_r10 != null) additionalSpectrumEmissionCA_r10.print (_sb, "additionalSpectrumEmissionCA_r10", _level+1);
      if (csi_RS_ConfigNZPToReleaseList_r11 != null) csi_RS_ConfigNZPToReleaseList_r11.print (_sb, "csi_RS_ConfigNZPToReleaseList_r11", _level+1);
      if (csi_RS_ConfigNZPToAddModList_r11 != null) csi_RS_ConfigNZPToAddModList_r11.print (_sb, "csi_RS_ConfigNZPToAddModList_r11", _level+1);
      if (csi_RS_ConfigZPToReleaseList_r11 != null) csi_RS_ConfigZPToReleaseList_r11.print (_sb, "csi_RS_ConfigZPToReleaseList_r11", _level+1);
      if (csi_RS_ConfigZPToAddModList_r11 != null) csi_RS_ConfigZPToAddModList_r11.print (_sb, "csi_RS_ConfigZPToAddModList_r11", _level+1);
      if (epdcch_Config_r11 != null) epdcch_Config_r11.print (_sb, "epdcch_Config_r11", _level+1);
      if (pdsch_ConfigDedicated_v1130 != null) pdsch_ConfigDedicated_v1130.print (_sb, "pdsch_ConfigDedicated_v1130", _level+1);
      if (cqi_ReportConfig_v1130 != null) cqi_ReportConfig_v1130.print (_sb, "cqi_ReportConfig_v1130", _level+1);
      if (pucch_ConfigDedicated_v1130 != null) pucch_ConfigDedicated_v1130.print (_sb, "pucch_ConfigDedicated_v1130", _level+1);
      if (pusch_ConfigDedicated_v1130 != null) pusch_ConfigDedicated_v1130.print (_sb, "pusch_ConfigDedicated_v1130", _level+1);
      if (uplinkPowerControlDedicated_v1130 != null) uplinkPowerControlDedicated_v1130.print (_sb, "uplinkPowerControlDedicated_v1130", _level+1);
      if (antennaInfo_v1250 != null) antennaInfo_v1250.print (_sb, "antennaInfo_v1250", _level+1);
      if (eimta_MainConfig_r12 != null) eimta_MainConfig_r12.print (_sb, "eimta_MainConfig_r12", _level+1);
      if (eimta_MainConfigPCell_r12 != null) eimta_MainConfigPCell_r12.print (_sb, "eimta_MainConfigPCell_r12", _level+1);
      if (pucch_ConfigDedicated_v1250 != null) pucch_ConfigDedicated_v1250.print (_sb, "pucch_ConfigDedicated_v1250", _level+1);
      if (cqi_ReportConfigPCell_v1250 != null) cqi_ReportConfigPCell_v1250.print (_sb, "cqi_ReportConfigPCell_v1250", _level+1);
      if (uplinkPowerControlDedicated_v1250 != null) uplinkPowerControlDedicated_v1250.print (_sb, "uplinkPowerControlDedicated_v1250", _level+1);
      if (pusch_ConfigDedicated_v1250 != null) pusch_ConfigDedicated_v1250.print (_sb, "pusch_ConfigDedicated_v1250", _level+1);
      if (csi_RS_Config_v1250 != null) csi_RS_Config_v1250.print (_sb, "csi_RS_Config_v1250", _level+1);
      if (pdsch_ConfigDedicated_v1280 != null) pdsch_ConfigDedicated_v1280.print (_sb, "pdsch_ConfigDedicated_v1280", _level+1);
      if (pdsch_ConfigDedicated_v1310 != null) pdsch_ConfigDedicated_v1310.print (_sb, "pdsch_ConfigDedicated_v1310", _level+1);
      if (pucch_ConfigDedicated_r13 != null) pucch_ConfigDedicated_r13.print (_sb, "pucch_ConfigDedicated_r13", _level+1);
      if (pusch_ConfigDedicated_r13 != null) pusch_ConfigDedicated_r13.print (_sb, "pusch_ConfigDedicated_r13", _level+1);
      if (pdcch_CandidateReductions_r13 != null) pdcch_CandidateReductions_r13.print (_sb, "pdcch_CandidateReductions_r13", _level+1);
      if (cqi_ReportConfig_v1310 != null) cqi_ReportConfig_v1310.print (_sb, "cqi_ReportConfig_v1310", _level+1);
      if (soundingRS_UL_ConfigDedicated_v1310 != null) soundingRS_UL_ConfigDedicated_v1310.print (_sb, "soundingRS_UL_ConfigDedicated_v1310", _level+1);
      if (soundingRS_UL_ConfigDedicatedUpPTsExt_r13 != null) soundingRS_UL_ConfigDedicatedUpPTsExt_r13.print (_sb, "soundingRS_UL_ConfigDedicatedUpPTsExt_r13", _level+1);
      if (soundingRS_UL_ConfigDedicatedAperiodic_v1310 != null) soundingRS_UL_ConfigDedicatedAperiodic_v1310.print (_sb, "soundingRS_UL_ConfigDedicatedAperiodic_v1310", _level+1);
      if (soundingRS_UL_ConfigDedicatedAperiodicUpPTsExt_r13 != null) soundingRS_UL_ConfigDedicatedAperiodicUpPTsExt_r13.print (_sb, "soundingRS_UL_ConfigDedicatedAperiodicUpPTsExt_r13", _level+1);
      if (csi_RS_Config_v1310 != null) csi_RS_Config_v1310.print (_sb, "csi_RS_Config_v1310", _level+1);
      if (ce_Mode_r13 != null) ce_Mode_r13.print (_sb, "ce_Mode_r13", _level+1);
      if (csi_RS_ConfigNZPToAddModListExt_r13 != null) csi_RS_ConfigNZPToAddModListExt_r13.print (_sb, "csi_RS_ConfigNZPToAddModListExt_r13", _level+1);
      if (csi_RS_ConfigNZPToReleaseListExt_r13 != null) csi_RS_ConfigNZPToReleaseListExt_r13.print (_sb, "csi_RS_ConfigNZPToReleaseListExt_r13", _level+1);
      if (cqi_ReportConfig_v1320 != null) cqi_ReportConfig_v1320.print (_sb, "cqi_ReportConfig_v1320", _level+1);
      if (typeA_SRS_TPC_PDCCH_Group_r14 != null) typeA_SRS_TPC_PDCCH_Group_r14.print (_sb, "typeA_SRS_TPC_PDCCH_Group_r14", _level+1);
      if (must_Config_r14 != null) must_Config_r14.print (_sb, "must_Config_r14", _level+1);
      if (pusch_EnhancementsConfig_r14 != null) pusch_EnhancementsConfig_r14.print (_sb, "pusch_EnhancementsConfig_r14", _level+1);
      if (ce_pdsch_pusch_EnhancementConfig_r14 != null) ce_pdsch_pusch_EnhancementConfig_r14.print (_sb, "ce_pdsch_pusch_EnhancementConfig_r14", _level+1);
      if (antennaInfo_v1430 != null) antennaInfo_v1430.print (_sb, "antennaInfo_v1430", _level+1);
      if (pucch_ConfigDedicated_v1430 != null) pucch_ConfigDedicated_v1430.print (_sb, "pucch_ConfigDedicated_v1430", _level+1);
      if (pdsch_ConfigDedicated_v1430 != null) pdsch_ConfigDedicated_v1430.print (_sb, "pdsch_ConfigDedicated_v1430", _level+1);
      if (pusch_ConfigDedicated_v1430 != null) pusch_ConfigDedicated_v1430.print (_sb, "pusch_ConfigDedicated_v1430", _level+1);
      if (soundingRS_UL_PeriodicConfigDedicatedList_r14 != null) soundingRS_UL_PeriodicConfigDedicatedList_r14.print (_sb, "soundingRS_UL_PeriodicConfigDedicatedList_r14", _level+1);
      if (soundingRS_UL_PeriodicConfigDedicatedUpPTsExtList_r14 != null) soundingRS_UL_PeriodicConfigDedicatedUpPTsExtList_r14.print (_sb, "soundingRS_UL_PeriodicConfigDedicatedUpPTsExtList_r14", _level+1);
      if (soundingRS_UL_AperiodicConfigDedicatedList_r14 != null) soundingRS_UL_AperiodicConfigDedicatedList_r14.print (_sb, "soundingRS_UL_AperiodicConfigDedicatedList_r14", _level+1);
      if (soundingRS_UL_ConfigDedicatedApUpPTsExtList_r14 != null) soundingRS_UL_ConfigDedicatedApUpPTsExtList_r14.print (_sb, "soundingRS_UL_ConfigDedicatedApUpPTsExtList_r14", _level+1);
      if (csi_RS_Config_v1430 != null) csi_RS_Config_v1430.print (_sb, "csi_RS_Config_v1430", _level+1);
      if (csi_RS_ConfigZP_ApList_r14 != null) csi_RS_ConfigZP_ApList_r14.print (_sb, "csi_RS_ConfigZP_ApList_r14", _level+1);
      if (cqi_ReportConfig_v1430 != null) cqi_ReportConfig_v1430.print (_sb, "cqi_ReportConfig_v1430", _level+1);
      if (semiOpenLoop_r14 != null) semiOpenLoop_r14.print (_sb, "semiOpenLoop_r14", _level+1);
      if (csi_RS_Config_v1480 != null) csi_RS_Config_v1480.print (_sb, "csi_RS_Config_v1480", _level+1);
      if (physicalConfigDedicatedSTTI_r15 != null) physicalConfigDedicatedSTTI_r15.print (_sb, "physicalConfigDedicatedSTTI_r15", _level+1);
      if (pdsch_ConfigDedicated_v1530 != null) pdsch_ConfigDedicated_v1530.print (_sb, "pdsch_ConfigDedicated_v1530", _level+1);
      if (pusch_ConfigDedicated_v1530 != null) pusch_ConfigDedicated_v1530.print (_sb, "pusch_ConfigDedicated_v1530", _level+1);
      if (cqi_ReportConfig_v1530 != null) cqi_ReportConfig_v1530.print (_sb, "cqi_ReportConfig_v1530", _level+1);
      if (antennaInfo_v1530 != null) antennaInfo_v1530.print (_sb, "antennaInfo_v1530", _level+1);
      if (csi_RS_Config_v1530 != null) csi_RS_Config_v1530.print (_sb, "csi_RS_Config_v1530", _level+1);
      if (uplinkPowerControlDedicated_v1530 != null) uplinkPowerControlDedicated_v1530.print (_sb, "uplinkPowerControlDedicated_v1530", _level+1);
      if (semiStaticCFI_Config_r15 != null) semiStaticCFI_Config_r15.print (_sb, "semiStaticCFI_Config_r15", _level+1);
      if (blindPDSCH_Repetition_Config_r15 != null) blindPDSCH_Repetition_Config_r15.print (_sb, "blindPDSCH_Repetition_Config_r15", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
