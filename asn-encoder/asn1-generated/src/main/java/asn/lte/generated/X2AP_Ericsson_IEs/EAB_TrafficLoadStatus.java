/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.X2AP_Ericsson_IEs;

import com.objsys.asn1j.runtime.*;

public class EAB_TrafficLoadStatus extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_X2AP_Ericsson_IEsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "EAB-TrafficLoadStatus";
   }

   public Asn1Integer gbrSubscriptionRatio;
   public Asn1Integer ngbrSubscriptionRatio;
   public Asn1Integer cellSubscriptionCapacity;
   public Asn1Integer cellPeakRateCapacity;  // optional
   public Asn1Integer cellPopulation;  // optional
   public EAB_TrafficLoadStatus_iE_Extensions iE_Extensions;  // optional
   public Asn1OpenExt extElem1;

   public EAB_TrafficLoadStatus () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public EAB_TrafficLoadStatus (
      Asn1Integer gbrSubscriptionRatio_,
      Asn1Integer ngbrSubscriptionRatio_,
      Asn1Integer cellSubscriptionCapacity_,
      Asn1Integer cellPeakRateCapacity_,
      Asn1Integer cellPopulation_,
      EAB_TrafficLoadStatus_iE_Extensions iE_Extensions_
   ) {
      super();
      gbrSubscriptionRatio = gbrSubscriptionRatio_;
      ngbrSubscriptionRatio = ngbrSubscriptionRatio_;
      cellSubscriptionCapacity = cellSubscriptionCapacity_;
      cellPeakRateCapacity = cellPeakRateCapacity_;
      cellPopulation = cellPopulation_;
      iE_Extensions = iE_Extensions_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public EAB_TrafficLoadStatus (
      Asn1Integer gbrSubscriptionRatio_,
      Asn1Integer ngbrSubscriptionRatio_,
      Asn1Integer cellSubscriptionCapacity_
   ) {
      super();
      gbrSubscriptionRatio = gbrSubscriptionRatio_;
      ngbrSubscriptionRatio = ngbrSubscriptionRatio_;
      cellSubscriptionCapacity = cellSubscriptionCapacity_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public EAB_TrafficLoadStatus (long gbrSubscriptionRatio_,
      long ngbrSubscriptionRatio_,
      long cellSubscriptionCapacity_,
      long cellPeakRateCapacity_,
      long cellPopulation_,
      EAB_TrafficLoadStatus_iE_Extensions iE_Extensions_
   ) {
      super();
      gbrSubscriptionRatio = new Asn1Integer (gbrSubscriptionRatio_);
      ngbrSubscriptionRatio = new Asn1Integer (ngbrSubscriptionRatio_);
      cellSubscriptionCapacity = new Asn1Integer (cellSubscriptionCapacity_);
      cellPeakRateCapacity = new Asn1Integer (cellPeakRateCapacity_);
      cellPopulation = new Asn1Integer (cellPopulation_);
      iE_Extensions = iE_Extensions_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public EAB_TrafficLoadStatus (
      long gbrSubscriptionRatio_,
      long ngbrSubscriptionRatio_,
      long cellSubscriptionCapacity_
   ) {
      super();
      gbrSubscriptionRatio = new Asn1Integer (gbrSubscriptionRatio_);
      ngbrSubscriptionRatio = new Asn1Integer (ngbrSubscriptionRatio_);
      cellSubscriptionCapacity = new Asn1Integer (cellSubscriptionCapacity_);
   }

   public void init () {
      gbrSubscriptionRatio = null;
      ngbrSubscriptionRatio = null;
      cellSubscriptionCapacity = null;
      cellPeakRateCapacity = null;
      cellPopulation = null;
      iE_Extensions = null;
      extElem1 = null;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return gbrSubscriptionRatio;
         case 1: return ngbrSubscriptionRatio;
         case 2: return cellSubscriptionCapacity;
         case 3: return cellPeakRateCapacity;
         case 4: return cellPopulation;
         case 5: return iE_Extensions;
         case 6: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "gbrSubscriptionRatio";
         case 1: return "ngbrSubscriptionRatio";
         case 2: return "cellSubscriptionCapacity";
         case 3: return "cellPeakRateCapacity";
         case 4: return "cellPopulation";
         case 5: return "iE-Extensions";
         case 6: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean cellPeakRateCapacityPresent = buffer.decodeBit ("cellPeakRateCapacityPresent");
      boolean cellPopulationPresent = buffer.decodeBit ("cellPopulationPresent");
      boolean iE_ExtensionsPresent = buffer.decodeBit ("iE_ExtensionsPresent");

      // decode gbrSubscriptionRatio

      buffer.getContext().eventDispatcher.startElement("gbrSubscriptionRatio", -1);

      gbrSubscriptionRatio = new Asn1Integer();
      boolean extbit_1 = buffer.decodeBit ("extbit_1");
      if (!extbit_1) {
         gbrSubscriptionRatio.decode (buffer, 0, 65535);
      }
      else {
         gbrSubscriptionRatio.decode (buffer);
      }

      buffer.invokeCharacters(gbrSubscriptionRatio.toString());
      buffer.getContext().eventDispatcher.endElement("gbrSubscriptionRatio", -1);

      // decode ngbrSubscriptionRatio

      buffer.getContext().eventDispatcher.startElement("ngbrSubscriptionRatio", -1);

      ngbrSubscriptionRatio = new Asn1Integer();
      boolean extbit_2 = buffer.decodeBit ("extbit_2");
      if (!extbit_2) {
         ngbrSubscriptionRatio.decode (buffer, 0, 65535);
      }
      else {
         ngbrSubscriptionRatio.decode (buffer);
      }

      buffer.invokeCharacters(ngbrSubscriptionRatio.toString());
      buffer.getContext().eventDispatcher.endElement("ngbrSubscriptionRatio", -1);

      // decode cellSubscriptionCapacity

      buffer.getContext().eventDispatcher.startElement("cellSubscriptionCapacity", -1);

      cellSubscriptionCapacity = new Asn1Integer();
      boolean extbit_3 = buffer.decodeBit ("extbit_3");
      if (!extbit_3) {
         cellSubscriptionCapacity.decode (buffer, 1, 50000);
      }
      else {
         cellSubscriptionCapacity.decode (buffer);
      }

      buffer.invokeCharacters(cellSubscriptionCapacity.toString());
      buffer.getContext().eventDispatcher.endElement("cellSubscriptionCapacity", -1);

      // decode cellPeakRateCapacity

      if (cellPeakRateCapacityPresent) {
         buffer.getContext().eventDispatcher.startElement("cellPeakRateCapacity", -1);

         cellPeakRateCapacity = new Asn1Integer();
         boolean extbit_4 = buffer.decodeBit ("extbit_4");
         if (!extbit_4) {
            cellPeakRateCapacity.decode (buffer, 1, 50000);
         }
         else {
            cellPeakRateCapacity.decode (buffer);
         }

         buffer.invokeCharacters(cellPeakRateCapacity.toString());
         buffer.getContext().eventDispatcher.endElement("cellPeakRateCapacity", -1);
      }
      else {
         cellPeakRateCapacity = null;
      }

      // decode cellPopulation

      if (cellPopulationPresent) {
         buffer.getContext().eventDispatcher.startElement("cellPopulation", -1);

         cellPopulation = new Asn1Integer();
         boolean extbit_5 = buffer.decodeBit ("extbit_5");
         if (!extbit_5) {
            cellPopulation.decode (buffer, 0, 65365);
         }
         else {
            cellPopulation.decode (buffer);
         }

         buffer.invokeCharacters(cellPopulation.toString());
         buffer.getContext().eventDispatcher.endElement("cellPopulation", -1);
      }
      else {
         cellPopulation = null;
      }

      // decode iE_Extensions

      if (iE_ExtensionsPresent) {
         buffer.getContext().eventDispatcher.startElement("iE_Extensions", -1);

         iE_Extensions = new EAB_TrafficLoadStatus_iE_Extensions();
         iE_Extensions.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("iE_Extensions", -1);
      }
      else {
         iE_Extensions = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (gbrSubscriptionRatio != null) gbrSubscriptionRatio.print (_sb, "gbrSubscriptionRatio", _level+1);
      if (ngbrSubscriptionRatio != null) ngbrSubscriptionRatio.print (_sb, "ngbrSubscriptionRatio", _level+1);
      if (cellSubscriptionCapacity != null) cellSubscriptionCapacity.print (_sb, "cellSubscriptionCapacity", _level+1);
      if (cellPeakRateCapacity != null) cellPeakRateCapacity.print (_sb, "cellPeakRateCapacity", _level+1);
      if (cellPopulation != null) cellPopulation.print (_sb, "cellPopulation", _level+1);
      if (iE_Extensions != null) iE_Extensions.print (_sb, "iE_Extensions", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
