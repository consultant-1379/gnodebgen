/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class TimeToTrigger extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "TimeToTrigger";
   }

   // Integer constants for switch-case
   public static final int _MS0 = 0;
   public static final int _MS40 = 1;
   public static final int _MS64 = 2;
   public static final int _MS80 = 3;
   public static final int _MS100 = 4;
   public static final int _MS128 = 5;
   public static final int _MS160 = 6;
   public static final int _MS256 = 7;
   public static final int _MS320 = 8;
   public static final int _MS480 = 9;
   public static final int _MS512 = 10;
   public static final int _MS640 = 11;
   public static final int _MS1024 = 12;
   public static final int _MS1280 = 13;
   public static final int _MS2560 = 14;
   public static final int _MS5120 = 15;

   // Singleton instances of TimeToTrigger
   protected static final TimeToTrigger _ms0 = new TimeToTrigger(0);
   protected static final TimeToTrigger _ms40 = new TimeToTrigger(1);
   protected static final TimeToTrigger _ms64 = new TimeToTrigger(2);
   protected static final TimeToTrigger _ms80 = new TimeToTrigger(3);
   protected static final TimeToTrigger _ms100 = new TimeToTrigger(4);
   protected static final TimeToTrigger _ms128 = new TimeToTrigger(5);
   protected static final TimeToTrigger _ms160 = new TimeToTrigger(6);
   protected static final TimeToTrigger _ms256 = new TimeToTrigger(7);
   protected static final TimeToTrigger _ms320 = new TimeToTrigger(8);
   protected static final TimeToTrigger _ms480 = new TimeToTrigger(9);
   protected static final TimeToTrigger _ms512 = new TimeToTrigger(10);
   protected static final TimeToTrigger _ms640 = new TimeToTrigger(11);
   protected static final TimeToTrigger _ms1024 = new TimeToTrigger(12);
   protected static final TimeToTrigger _ms1280 = new TimeToTrigger(13);
   protected static final TimeToTrigger _ms2560 = new TimeToTrigger(14);
   protected static final TimeToTrigger _ms5120 = new TimeToTrigger(15);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    *   7
    *   8
    *   9
    *   10
    *   11
    *   12
    *   13
    *   14
    *   15
    */
   protected TimeToTrigger (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for ms0.
    */
   public static TimeToTrigger ms0() {
      return _ms0;
   }

   /**
    * Singleton accessor method for ms40.
    */
   public static TimeToTrigger ms40() {
      return _ms40;
   }

   /**
    * Singleton accessor method for ms64.
    */
   public static TimeToTrigger ms64() {
      return _ms64;
   }

   /**
    * Singleton accessor method for ms80.
    */
   public static TimeToTrigger ms80() {
      return _ms80;
   }

   /**
    * Singleton accessor method for ms100.
    */
   public static TimeToTrigger ms100() {
      return _ms100;
   }

   /**
    * Singleton accessor method for ms128.
    */
   public static TimeToTrigger ms128() {
      return _ms128;
   }

   /**
    * Singleton accessor method for ms160.
    */
   public static TimeToTrigger ms160() {
      return _ms160;
   }

   /**
    * Singleton accessor method for ms256.
    */
   public static TimeToTrigger ms256() {
      return _ms256;
   }

   /**
    * Singleton accessor method for ms320.
    */
   public static TimeToTrigger ms320() {
      return _ms320;
   }

   /**
    * Singleton accessor method for ms480.
    */
   public static TimeToTrigger ms480() {
      return _ms480;
   }

   /**
    * Singleton accessor method for ms512.
    */
   public static TimeToTrigger ms512() {
      return _ms512;
   }

   /**
    * Singleton accessor method for ms640.
    */
   public static TimeToTrigger ms640() {
      return _ms640;
   }

   /**
    * Singleton accessor method for ms1024.
    */
   public static TimeToTrigger ms1024() {
      return _ms1024;
   }

   /**
    * Singleton accessor method for ms1280.
    */
   public static TimeToTrigger ms1280() {
      return _ms1280;
   }

   /**
    * Singleton accessor method for ms2560.
    */
   public static TimeToTrigger ms2560() {
      return _ms2560;
   }

   /**
    * Singleton accessor method for ms5120.
    */
   public static TimeToTrigger ms5120() {
      return _ms5120;
   }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return TimeToTrigger.valueOf( TimeToTrigger.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static TimeToTrigger valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 0: return ms0();
         case 1: return ms40();
         case 2: return ms64();
         case 3: return ms80();
         case 4: return ms100();
         case 5: return ms128();
         case 6: return ms160();
         case 7: return ms256();
         case 8: return ms320();
         case 9: return ms480();
         case 10: return ms512();
         case 11: return ms640();
         case 12: return ms1024();
         case 13: return ms1280();
         case 14: return ms2560();
         case 15: return ms5120();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      ui = (int) buffer.decodeConsWholeNumber (16);

      switch (ui) {
         case 0: ret =  0; break;
         case 1: ret =  1; break;
         case 2: ret =  2; break;
         case 3: ret =  3; break;
         case 4: ret =  4; break;
         case 5: ret =  5; break;
         case 6: ret =  6; break;
         case 7: ret =  7; break;
         case 8: ret =  8; break;
         case 9: ret =  9; break;
         case 10: ret =  10; break;
         case 11: ret =  11; break;
         case 12: ret =  12; break;
         case 13: ret =  13; break;
         case 14: ret =  14; break;
         case 15: ret =  15; break;
         default: throw new Asn1InvalidEnumException (ui);
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (TimeToTrigger.valueOf(ret).toString());

      return ret;
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("ms0");
         case 1: return ("ms40");
         case 2: return ("ms64");
         case 3: return ("ms80");
         case 4: return ("ms100");
         case 5: return ("ms128");
         case 6: return ("ms160");
         case 7: return ("ms256");
         case 8: return ("ms320");
         case 9: return ("ms480");
         case 10: return ("ms512");
         case 11: return ("ms640");
         case 12: return ("ms1024");
         case 13: return ("ms1280");
         case 14: return ("ms2560");
         case 15: return ("ms5120");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
