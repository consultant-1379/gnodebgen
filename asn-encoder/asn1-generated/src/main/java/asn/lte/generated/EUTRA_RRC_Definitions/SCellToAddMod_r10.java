/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SCellToAddMod_r10 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SCellToAddMod-r10";
   }

   public SCellIndex_r10 sCellIndex_r10;
   public SCellToAddMod_r10_cellIdentification_r10 cellIdentification_r10;  // optional
   public RadioResourceConfigCommonSCell_r10 radioResourceConfigCommonSCell_r10;  // optional
   public RadioResourceConfigDedicatedSCell_r10 radioResourceConfigDedicatedSCell_r10;  // optional
   public boolean mV2ExtPresent;
   public ARFCN_ValueEUTRA_v9e0 dl_CarrierFreq_v1090;  // optional
   public boolean mV3ExtPresent;
   public AntennaInfoDedicated_v10i0 antennaInfoDedicatedSCell_v10i0;  // optional
   public boolean mV4ExtPresent;
   public Asn1Integer srs_SwitchFromServCellIndex_r14;  // optional
   public boolean mV5ExtPresent;
   public SCellToAddMod_r10_sCellState_r15 sCellState_r15 = null;  // optional
   public Asn1OpenExt extElem1;

   public SCellToAddMod_r10 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SCellToAddMod_r10 (
      SCellIndex_r10 sCellIndex_r10_,
      SCellToAddMod_r10_cellIdentification_r10 cellIdentification_r10_,
      RadioResourceConfigCommonSCell_r10 radioResourceConfigCommonSCell_r10_,
      RadioResourceConfigDedicatedSCell_r10 radioResourceConfigDedicatedSCell_r10_,
      ARFCN_ValueEUTRA_v9e0 dl_CarrierFreq_v1090_,
      AntennaInfoDedicated_v10i0 antennaInfoDedicatedSCell_v10i0_,
      Asn1Integer srs_SwitchFromServCellIndex_r14_,
      SCellToAddMod_r10_sCellState_r15 sCellState_r15_
   ) {
      super();
      sCellIndex_r10 = sCellIndex_r10_;
      cellIdentification_r10 = cellIdentification_r10_;
      radioResourceConfigCommonSCell_r10 = radioResourceConfigCommonSCell_r10_;
      radioResourceConfigDedicatedSCell_r10 = radioResourceConfigDedicatedSCell_r10_;
      dl_CarrierFreq_v1090 = dl_CarrierFreq_v1090_;
      antennaInfoDedicatedSCell_v10i0 = antennaInfoDedicatedSCell_v10i0_;
      srs_SwitchFromServCellIndex_r14 = srs_SwitchFromServCellIndex_r14_;
      sCellState_r15 = sCellState_r15_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SCellToAddMod_r10 (
      SCellIndex_r10 sCellIndex_r10_
   ) {
      super();
      sCellIndex_r10 = sCellIndex_r10_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SCellToAddMod_r10 (long sCellIndex_r10_,
      SCellToAddMod_r10_cellIdentification_r10 cellIdentification_r10_,
      RadioResourceConfigCommonSCell_r10 radioResourceConfigCommonSCell_r10_,
      RadioResourceConfigDedicatedSCell_r10 radioResourceConfigDedicatedSCell_r10_,
      long dl_CarrierFreq_v1090_,
      AntennaInfoDedicated_v10i0 antennaInfoDedicatedSCell_v10i0_,
      long srs_SwitchFromServCellIndex_r14_,
      SCellToAddMod_r10_sCellState_r15 sCellState_r15_
   ) {
      super();
      sCellIndex_r10 = new SCellIndex_r10 (sCellIndex_r10_);
      cellIdentification_r10 = cellIdentification_r10_;
      radioResourceConfigCommonSCell_r10 = radioResourceConfigCommonSCell_r10_;
      radioResourceConfigDedicatedSCell_r10 = radioResourceConfigDedicatedSCell_r10_;
      dl_CarrierFreq_v1090 = new ARFCN_ValueEUTRA_v9e0 (dl_CarrierFreq_v1090_);
      antennaInfoDedicatedSCell_v10i0 = antennaInfoDedicatedSCell_v10i0_;
      srs_SwitchFromServCellIndex_r14 = new Asn1Integer (srs_SwitchFromServCellIndex_r14_);
      sCellState_r15 = sCellState_r15_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public SCellToAddMod_r10 (
      long sCellIndex_r10_
   ) {
      super();
      sCellIndex_r10 = new SCellIndex_r10 (sCellIndex_r10_);
   }

   public void init () {
      sCellIndex_r10 = null;
      cellIdentification_r10 = null;
      radioResourceConfigCommonSCell_r10 = null;
      radioResourceConfigDedicatedSCell_r10 = null;
      dl_CarrierFreq_v1090 = null;
      antennaInfoDedicatedSCell_v10i0 = null;
      srs_SwitchFromServCellIndex_r14 = null;
      sCellState_r15 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 9; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return sCellIndex_r10;
         case 1: return cellIdentification_r10;
         case 2: return radioResourceConfigCommonSCell_r10;
         case 3: return radioResourceConfigDedicatedSCell_r10;
         case 4: return dl_CarrierFreq_v1090;
         case 5: return antennaInfoDedicatedSCell_v10i0;
         case 6: return srs_SwitchFromServCellIndex_r14;
         case 7: return sCellState_r15;
         case 8: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "sCellIndex-r10";
         case 1: return "cellIdentification-r10";
         case 2: return "radioResourceConfigCommonSCell-r10";
         case 3: return "radioResourceConfigDedicatedSCell-r10";
         case 4: return "dl-CarrierFreq-v1090";
         case 5: return "antennaInfoDedicatedSCell-v10i0";
         case 6: return "srs-SwitchFromServCellIndex-r14";
         case 7: return "sCellState-r15";
         case 8: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean cellIdentification_r10Present = buffer.decodeBit ("cellIdentification_r10Present");
      boolean radioResourceConfigCommonSCell_r10Present = buffer.decodeBit ("radioResourceConfigCommonSCell_r10Present");
      boolean radioResourceConfigDedicatedSCell_r10Present = buffer.decodeBit ("radioResourceConfigDedicatedSCell_r10Present");

      // decode sCellIndex_r10

      buffer.getContext().eventDispatcher.startElement("sCellIndex_r10", -1);

      sCellIndex_r10 = new SCellIndex_r10();
      sCellIndex_r10.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("sCellIndex_r10", -1);

      // decode cellIdentification_r10

      if (cellIdentification_r10Present) {
         buffer.getContext().eventDispatcher.startElement("cellIdentification_r10", -1);

         cellIdentification_r10 = new SCellToAddMod_r10_cellIdentification_r10();
         cellIdentification_r10.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("cellIdentification_r10", -1);
      }
      else {
         cellIdentification_r10 = null;
      }

      // decode radioResourceConfigCommonSCell_r10

      if (radioResourceConfigCommonSCell_r10Present) {
         buffer.getContext().eventDispatcher.startElement("radioResourceConfigCommonSCell_r10", -1);

         radioResourceConfigCommonSCell_r10 = new RadioResourceConfigCommonSCell_r10();
         radioResourceConfigCommonSCell_r10.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("radioResourceConfigCommonSCell_r10", -1);
      }
      else {
         radioResourceConfigCommonSCell_r10 = null;
      }

      // decode radioResourceConfigDedicatedSCell_r10

      if (radioResourceConfigDedicatedSCell_r10Present) {
         buffer.getContext().eventDispatcher.startElement("radioResourceConfigDedicatedSCell_r10", -1);

         radioResourceConfigDedicatedSCell_r10 = new RadioResourceConfigDedicatedSCell_r10();
         radioResourceConfigDedicatedSCell_r10.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("radioResourceConfigDedicatedSCell_r10", -1);
      }
      else {
         radioResourceConfigDedicatedSCell_r10 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV4ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV5ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean dl_CarrierFreq_v1090Present = buffer.decodeBit ("dl_CarrierFreq_v1090Present");

            // decode dl_CarrierFreq_v1090

            if (dl_CarrierFreq_v1090Present) {
               buffer.getContext().eventDispatcher.startElement("dl_CarrierFreq_v1090", -1);

               dl_CarrierFreq_v1090 = new ARFCN_ValueEUTRA_v9e0();
               dl_CarrierFreq_v1090.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("dl_CarrierFreq_v1090", -1);
            }
            else {
               dl_CarrierFreq_v1090 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean antennaInfoDedicatedSCell_v10i0Present = buffer.decodeBit ("antennaInfoDedicatedSCell_v10i0Present");

            // decode antennaInfoDedicatedSCell_v10i0

            if (antennaInfoDedicatedSCell_v10i0Present) {
               buffer.getContext().eventDispatcher.startElement("antennaInfoDedicatedSCell_v10i0", -1);

               antennaInfoDedicatedSCell_v10i0 = new AntennaInfoDedicated_v10i0();
               antennaInfoDedicatedSCell_v10i0.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("antennaInfoDedicatedSCell_v10i0", -1);
            }
            else {
               antennaInfoDedicatedSCell_v10i0 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV4ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean srs_SwitchFromServCellIndex_r14Present = buffer.decodeBit ("srs_SwitchFromServCellIndex_r14Present");

            // decode srs_SwitchFromServCellIndex_r14

            if (srs_SwitchFromServCellIndex_r14Present) {
               buffer.getContext().eventDispatcher.startElement("srs_SwitchFromServCellIndex_r14", -1);

               srs_SwitchFromServCellIndex_r14 = new Asn1Integer();
               srs_SwitchFromServCellIndex_r14.decode (buffer, 0, 31);

               buffer.invokeCharacters(srs_SwitchFromServCellIndex_r14.toString());
               buffer.getContext().eventDispatcher.endElement("srs_SwitchFromServCellIndex_r14", -1);
            }
            else {
               srs_SwitchFromServCellIndex_r14 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV5ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean sCellState_r15Present = buffer.decodeBit ("sCellState_r15Present");

            // decode sCellState_r15

            if (sCellState_r15Present) {
               buffer.getContext().eventDispatcher.startElement("sCellState_r15", -1);

               int tval = SCellToAddMod_r10_sCellState_r15.decodeEnumValue (buffer);
               sCellState_r15 = SCellToAddMod_r10_sCellState_r15.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("sCellState_r15", -1);
            }
            else {
               sCellState_r15 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (sCellIndex_r10 != null) sCellIndex_r10.print (_sb, "sCellIndex_r10", _level+1);
      if (cellIdentification_r10 != null) cellIdentification_r10.print (_sb, "cellIdentification_r10", _level+1);
      if (radioResourceConfigCommonSCell_r10 != null) radioResourceConfigCommonSCell_r10.print (_sb, "radioResourceConfigCommonSCell_r10", _level+1);
      if (radioResourceConfigDedicatedSCell_r10 != null) radioResourceConfigDedicatedSCell_r10.print (_sb, "radioResourceConfigDedicatedSCell_r10", _level+1);
      if (dl_CarrierFreq_v1090 != null) dl_CarrierFreq_v1090.print (_sb, "dl_CarrierFreq_v1090", _level+1);
      if (antennaInfoDedicatedSCell_v10i0 != null) antennaInfoDedicatedSCell_v10i0.print (_sb, "antennaInfoDedicatedSCell_v10i0", _level+1);
      if (srs_SwitchFromServCellIndex_r14 != null) srs_SwitchFromServCellIndex_r14.print (_sb, "srs_SwitchFromServCellIndex_r14", _level+1);
      if (sCellState_r15 != null) sCellState_r15.print (_sb, "sCellState_r15", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
