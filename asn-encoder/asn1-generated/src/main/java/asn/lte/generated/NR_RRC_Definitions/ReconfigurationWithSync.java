/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class ReconfigurationWithSync extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ReconfigurationWithSync";
   }

   public ServingCellConfigCommon spCellConfigCommon;  // optional
   public RNTI_Value newUE_Identity;
   public ReconfigurationWithSync_t304 t304 = null;
   public ReconfigurationWithSync_rach_ConfigDedicated rach_ConfigDedicated;  // optional
   public boolean mV2ExtPresent;
   public SSB_MTC smtc;  // optional
   public boolean mV3ExtPresent;
   public DAPS_UplinkPowerConfig_r16 daps_UplinkPowerConfig_r16;  // optional
   public Asn1OpenExt extElem1;

   public ReconfigurationWithSync () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ReconfigurationWithSync (
      ServingCellConfigCommon spCellConfigCommon_,
      RNTI_Value newUE_Identity_,
      ReconfigurationWithSync_t304 t304_,
      ReconfigurationWithSync_rach_ConfigDedicated rach_ConfigDedicated_,
      SSB_MTC smtc_,
      DAPS_UplinkPowerConfig_r16 daps_UplinkPowerConfig_r16_
   ) {
      super();
      spCellConfigCommon = spCellConfigCommon_;
      newUE_Identity = newUE_Identity_;
      t304 = t304_;
      rach_ConfigDedicated = rach_ConfigDedicated_;
      smtc = smtc_;
      daps_UplinkPowerConfig_r16 = daps_UplinkPowerConfig_r16_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public ReconfigurationWithSync (
      RNTI_Value newUE_Identity_,
      ReconfigurationWithSync_t304 t304_
   ) {
      super();
      newUE_Identity = newUE_Identity_;
      t304 = t304_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public ReconfigurationWithSync (ServingCellConfigCommon spCellConfigCommon_,
      long newUE_Identity_,
      ReconfigurationWithSync_t304 t304_,
      ReconfigurationWithSync_rach_ConfigDedicated rach_ConfigDedicated_,
      SSB_MTC smtc_,
      DAPS_UplinkPowerConfig_r16 daps_UplinkPowerConfig_r16_
   ) {
      super();
      spCellConfigCommon = spCellConfigCommon_;
      newUE_Identity = new RNTI_Value (newUE_Identity_);
      t304 = t304_;
      rach_ConfigDedicated = rach_ConfigDedicated_;
      smtc = smtc_;
      daps_UplinkPowerConfig_r16 = daps_UplinkPowerConfig_r16_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public ReconfigurationWithSync (
      long newUE_Identity_,
      ReconfigurationWithSync_t304 t304_
   ) {
      super();
      newUE_Identity = new RNTI_Value (newUE_Identity_);
      t304 = t304_;
   }

   public void init () {
      spCellConfigCommon = null;
      newUE_Identity = null;
      t304 = null;
      rach_ConfigDedicated = null;
      smtc = null;
      daps_UplinkPowerConfig_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return spCellConfigCommon;
         case 1: return newUE_Identity;
         case 2: return t304;
         case 3: return rach_ConfigDedicated;
         case 4: return smtc;
         case 5: return daps_UplinkPowerConfig_r16;
         case 6: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "spCellConfigCommon";
         case 1: return "newUE-Identity";
         case 2: return "t304";
         case 3: return "rach-ConfigDedicated";
         case 4: return "smtc";
         case 5: return "daps-UplinkPowerConfig-r16";
         case 6: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean spCellConfigCommonPresent = buffer.decodeBit ("spCellConfigCommonPresent");
      boolean rach_ConfigDedicatedPresent = buffer.decodeBit ("rach_ConfigDedicatedPresent");

      // decode spCellConfigCommon

      if (spCellConfigCommonPresent) {
         buffer.getContext().eventDispatcher.startElement("spCellConfigCommon", -1);

         spCellConfigCommon = new ServingCellConfigCommon();
         spCellConfigCommon.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("spCellConfigCommon", -1);
      }
      else {
         spCellConfigCommon = null;
      }

      // decode newUE_Identity

      buffer.getContext().eventDispatcher.startElement("newUE_Identity", -1);

      newUE_Identity = new RNTI_Value();
      newUE_Identity.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("newUE_Identity", -1);

      // decode t304

      buffer.getContext().eventDispatcher.startElement("t304", -1);

      {
         int tval = ReconfigurationWithSync_t304.decodeEnumValue (buffer);
         t304 = ReconfigurationWithSync_t304.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("t304", -1);

      // decode rach_ConfigDedicated

      if (rach_ConfigDedicatedPresent) {
         buffer.getContext().eventDispatcher.startElement("rach_ConfigDedicated", -1);

         rach_ConfigDedicated = new ReconfigurationWithSync_rach_ConfigDedicated();
         rach_ConfigDedicated.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("rach_ConfigDedicated", -1);
      }
      else {
         rach_ConfigDedicated = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean smtcPresent = buffer.decodeBit ("smtcPresent");

            // decode smtc

            if (smtcPresent) {
               buffer.getContext().eventDispatcher.startElement("smtc", -1);

               smtc = new SSB_MTC();
               smtc.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("smtc", -1);
            }
            else {
               smtc = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean daps_UplinkPowerConfig_r16Present = buffer.decodeBit ("daps_UplinkPowerConfig_r16Present");

            // decode daps_UplinkPowerConfig_r16

            if (daps_UplinkPowerConfig_r16Present) {
               buffer.getContext().eventDispatcher.startElement("daps_UplinkPowerConfig_r16", -1);

               daps_UplinkPowerConfig_r16 = new DAPS_UplinkPowerConfig_r16();
               daps_UplinkPowerConfig_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("daps_UplinkPowerConfig_r16", -1);
            }
            else {
               daps_UplinkPowerConfig_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (spCellConfigCommon != null) spCellConfigCommon.print (_sb, "spCellConfigCommon", _level+1);
      if (newUE_Identity != null) newUE_Identity.print (_sb, "newUE_Identity", _level+1);
      if (t304 != null) t304.print (_sb, "t304", _level+1);
      if (rach_ConfigDedicated != null) rach_ConfigDedicated.print (_sb, "rach_ConfigDedicated", _level+1);
      if (smtc != null) smtc.print (_sb, "smtc", _level+1);
      if (daps_UplinkPowerConfig_r16 != null) daps_UplinkPowerConfig_r16.print (_sb, "daps_UplinkPowerConfig_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
