/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class LocationInfo_r10_locationCoordinates_r10 extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CHOICE";
   }

   // Choice element identifier constants
   public final static byte _ELLIPSOID_POINT_R10 = 1;
   public final static byte _ELLIPSOIDPOINTWITHALTITUDE_R10 = 2;
   public final static byte _ELLIPSOIDPOINTWITHUNCERTAINTYCIRCLE_R11 = 3;
   public final static byte _ELLIPSOIDPOINTWITHUNCERTAINTYELLIPSE_R11 = 4;
   public final static byte _ELLIPSOIDPOINTWITHALTITUDEANDUNCERTAINTYELLIPSOID_R11 = 5;
   public final static byte _ELLIPSOIDARC_R11 = 6;
   public final static byte _POLYGON_R11 = 7;
   public final static byte _EXTELEM1 = 8;

   public LocationInfo_r10_locationCoordinates_r10 () {
      super();
   }

   public LocationInfo_r10_locationCoordinates_r10 (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _ELLIPSOID_POINT_R10: return "ellipsoid_Point_r10";
      case _ELLIPSOIDPOINTWITHALTITUDE_R10: return "ellipsoidPointWithAltitude_r10";
      case _ELLIPSOIDPOINTWITHUNCERTAINTYCIRCLE_R11: return "ellipsoidPointWithUncertaintyCircle_r11";
      case _ELLIPSOIDPOINTWITHUNCERTAINTYELLIPSE_R11: return "ellipsoidPointWithUncertaintyEllipse_r11";
      case _ELLIPSOIDPOINTWITHALTITUDEANDUNCERTAINTYELLIPSOID_R11: return "ellipsoidPointWithAltitudeAndUncertaintyEllipsoid_r11";
      case _ELLIPSOIDARC_R11: return "ellipsoidArc_r11";
      case _POLYGON_R11: return "polygon_r11";
      case _EXTELEM1: return "...";
      default: return "UNDEFINED";
      }
   }

   public void set_ellipsoid_Point_r10 (Asn1OctetString value) {
      setElement (_ELLIPSOID_POINT_R10, value);
   }

   public void set_ellipsoidPointWithAltitude_r10 (Asn1OctetString value) {
      setElement (_ELLIPSOIDPOINTWITHALTITUDE_R10, value);
   }

   public void set_ellipsoidPointWithUncertaintyCircle_r11 (Asn1OctetString value) {
      setElement (_ELLIPSOIDPOINTWITHUNCERTAINTYCIRCLE_R11, value);
   }

   public void set_ellipsoidPointWithUncertaintyEllipse_r11 (Asn1OctetString value) {
      setElement (_ELLIPSOIDPOINTWITHUNCERTAINTYELLIPSE_R11, value);
   }

   public void set_ellipsoidPointWithAltitudeAndUncertaintyEllipsoid_r11 (Asn1OctetString value) {
      setElement (_ELLIPSOIDPOINTWITHALTITUDEANDUNCERTAINTYELLIPSOID_R11, value);
   }

   public void set_ellipsoidArc_r11 (Asn1OctetString value) {
      setElement (_ELLIPSOIDARC_R11, value);
   }

   public void set_polygon_r11 (Asn1OctetString value) {
      setElement (_POLYGON_R11, value);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      Asn1PerDecodeBuffer savedBuffer = null;
      boolean extbit = buffer.decodeBit ("extbit");

      if (!extbit) {
         int idx = (int) buffer.decodeConsWholeNumber (2, "index");
         choiceID = idx + 1;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         switch (idx) {
            // ellipsoid_Point_r10
            case 0: { 
               Asn1OctetString ellipsoid_Point_r10;
               element = ellipsoid_Point_r10 = new Asn1OctetString();
               ellipsoid_Point_r10.decode (buffer);

               buffer.invokeCharacters(ellipsoid_Point_r10.toString());
               break;
            }

            // ellipsoidPointWithAltitude_r10
            case 1: { 
               Asn1OctetString ellipsoidPointWithAltitude_r10;
               element = ellipsoidPointWithAltitude_r10 = new Asn1OctetString();
               ellipsoidPointWithAltitude_r10.decode (buffer);

               buffer.invokeCharacters(ellipsoidPointWithAltitude_r10.toString());
               break;
            }

            default:
            throw new Asn1InvalidChoiceOptionException (buffer, idx);
         }
      }
      else {
         int idx = (int) buffer.decodeSmallNonNegWholeNumber ();
         choiceID = idx + 3;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         buffer.byteAlign();

         Asn1OpenType openType = new Asn1OpenType ();
         openType.decode (buffer);

         savedBuffer = buffer;
         buffer = new Asn1PerDecodeBuffer (openType.value, savedBuffer.isAligned());
         buffer.setEventHandlerList (savedBuffer);

         switch (idx) {
            // ellipsoidPointWithUncertaintyCircle_r11
            case 0: { 
               Asn1OctetString ellipsoidPointWithUncertaintyCircle_r11;
               element = ellipsoidPointWithUncertaintyCircle_r11 = new Asn1OctetString();
               ellipsoidPointWithUncertaintyCircle_r11.decode (buffer);

               buffer.invokeCharacters(ellipsoidPointWithUncertaintyCircle_r11.toString());
               break;
            }

            // ellipsoidPointWithUncertaintyEllipse_r11
            case 1: { 
               Asn1OctetString ellipsoidPointWithUncertaintyEllipse_r11;
               element = ellipsoidPointWithUncertaintyEllipse_r11 = new Asn1OctetString();
               ellipsoidPointWithUncertaintyEllipse_r11.decode (buffer);

               buffer.invokeCharacters(ellipsoidPointWithUncertaintyEllipse_r11.toString());
               break;
            }

            // ellipsoidPointWithAltitudeAndUncertaintyEllipsoid_r11
            case 2: { 
               Asn1OctetString ellipsoidPointWithAltitudeAndUncertaintyEllipsoid_r11;
               element = ellipsoidPointWithAltitudeAndUncertaintyEllipsoid_r11 = new Asn1OctetString();
               ellipsoidPointWithAltitudeAndUncertaintyEllipsoid_r11.decode (buffer);

               buffer.invokeCharacters(ellipsoidPointWithAltitudeAndUncertaintyEllipsoid_r11.toString());
               break;
            }

            // ellipsoidArc_r11
            case 3: { 
               Asn1OctetString ellipsoidArc_r11;
               element = ellipsoidArc_r11 = new Asn1OctetString();
               ellipsoidArc_r11.decode (buffer);

               buffer.invokeCharacters(ellipsoidArc_r11.toString());
               break;
            }

            // polygon_r11
            case 4: { 
               Asn1OctetString polygon_r11;
               element = polygon_r11 = new Asn1OctetString();
               polygon_r11.decode (buffer);

               buffer.invokeCharacters(polygon_r11.toString());
               break;
            }

            // extElem1
            case 5: { 
               Asn1OpenType extElem1;
               element = extElem1 = new Asn1OpenType();
               extElem1.decode (buffer);

               buffer.invokeCharacters(extElem1.toString());
               break;
            }

            default:
               setElement (_EXTELEM1, openType);
               buffer.invokeCharacters (openType.toString());
         }

      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);

      if (savedBuffer != null) {
         buffer = savedBuffer;
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (element != null) {
         element.print (_sb, getElemName(), _level+1);
      }
      indent (_sb, _level);
      _sb.append("}\n");
   }

}
