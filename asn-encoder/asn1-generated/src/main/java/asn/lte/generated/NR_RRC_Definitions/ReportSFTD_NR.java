/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class ReportSFTD_NR extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ReportSFTD-NR";
   }

   public Asn1Boolean reportSFTD_Meas;
   public Asn1Boolean reportRSRP;
   public boolean mV2ExtPresent;
   public ReportSFTD_NR_reportSFTD_NeighMeas reportSFTD_NeighMeas = null;  // optional
   public ReportSFTD_NR_drx_SFTD_NeighMeas drx_SFTD_NeighMeas = null;  // optional
   public ReportSFTD_NR_cellsForWhichToReportSFTD cellsForWhichToReportSFTD;  // optional
   public Asn1OpenExt extElem1;

   public ReportSFTD_NR () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ReportSFTD_NR (
      Asn1Boolean reportSFTD_Meas_,
      Asn1Boolean reportRSRP_,
      ReportSFTD_NR_reportSFTD_NeighMeas reportSFTD_NeighMeas_,
      ReportSFTD_NR_drx_SFTD_NeighMeas drx_SFTD_NeighMeas_,
      ReportSFTD_NR_cellsForWhichToReportSFTD cellsForWhichToReportSFTD_
   ) {
      super();
      reportSFTD_Meas = reportSFTD_Meas_;
      reportRSRP = reportRSRP_;
      reportSFTD_NeighMeas = reportSFTD_NeighMeas_;
      drx_SFTD_NeighMeas = drx_SFTD_NeighMeas_;
      cellsForWhichToReportSFTD = cellsForWhichToReportSFTD_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public ReportSFTD_NR (
      Asn1Boolean reportSFTD_Meas_,
      Asn1Boolean reportRSRP_
   ) {
      super();
      reportSFTD_Meas = reportSFTD_Meas_;
      reportRSRP = reportRSRP_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public ReportSFTD_NR (boolean reportSFTD_Meas_,
      boolean reportRSRP_,
      ReportSFTD_NR_reportSFTD_NeighMeas reportSFTD_NeighMeas_,
      ReportSFTD_NR_drx_SFTD_NeighMeas drx_SFTD_NeighMeas_,
      ReportSFTD_NR_cellsForWhichToReportSFTD cellsForWhichToReportSFTD_
   ) {
      super();
      reportSFTD_Meas = new Asn1Boolean (reportSFTD_Meas_);
      reportRSRP = new Asn1Boolean (reportRSRP_);
      reportSFTD_NeighMeas = reportSFTD_NeighMeas_;
      drx_SFTD_NeighMeas = drx_SFTD_NeighMeas_;
      cellsForWhichToReportSFTD = cellsForWhichToReportSFTD_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public ReportSFTD_NR (
      boolean reportSFTD_Meas_,
      boolean reportRSRP_
   ) {
      super();
      reportSFTD_Meas = new Asn1Boolean (reportSFTD_Meas_);
      reportRSRP = new Asn1Boolean (reportRSRP_);
   }

   public void init () {
      reportSFTD_Meas = null;
      reportRSRP = null;
      reportSFTD_NeighMeas = null;
      drx_SFTD_NeighMeas = null;
      cellsForWhichToReportSFTD = null;
      extElem1 = null;
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return reportSFTD_Meas;
         case 1: return reportRSRP;
         case 2: return reportSFTD_NeighMeas;
         case 3: return drx_SFTD_NeighMeas;
         case 4: return cellsForWhichToReportSFTD;
         case 5: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "reportSFTD-Meas";
         case 1: return "reportRSRP";
         case 2: return "reportSFTD-NeighMeas";
         case 3: return "drx-SFTD-NeighMeas";
         case 4: return "cellsForWhichToReportSFTD";
         case 5: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      // decode reportSFTD_Meas

      buffer.getContext().eventDispatcher.startElement("reportSFTD_Meas", -1);

      reportSFTD_Meas = new Asn1Boolean();
      reportSFTD_Meas.decode (buffer);

      buffer.invokeCharacters(reportSFTD_Meas.toString());
      buffer.getContext().eventDispatcher.endElement("reportSFTD_Meas", -1);

      // decode reportRSRP

      buffer.getContext().eventDispatcher.startElement("reportRSRP", -1);

      reportRSRP = new Asn1Boolean();
      reportRSRP.decode (buffer);

      buffer.invokeCharacters(reportRSRP.toString());
      buffer.getContext().eventDispatcher.endElement("reportRSRP", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean reportSFTD_NeighMeasPresent = buffer.decodeBit ("reportSFTD_NeighMeasPresent");

            boolean drx_SFTD_NeighMeasPresent = buffer.decodeBit ("drx_SFTD_NeighMeasPresent");

            boolean cellsForWhichToReportSFTDPresent = buffer.decodeBit ("cellsForWhichToReportSFTDPresent");

            // decode reportSFTD_NeighMeas

            if (reportSFTD_NeighMeasPresent) {
               buffer.getContext().eventDispatcher.startElement("reportSFTD_NeighMeas", -1);

               int tval = ReportSFTD_NR_reportSFTD_NeighMeas.decodeEnumValue (buffer);
               reportSFTD_NeighMeas = ReportSFTD_NR_reportSFTD_NeighMeas.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("reportSFTD_NeighMeas", -1);
            }
            else {
               reportSFTD_NeighMeas = null;
            }

            // decode drx_SFTD_NeighMeas

            if (drx_SFTD_NeighMeasPresent) {
               buffer.getContext().eventDispatcher.startElement("drx_SFTD_NeighMeas", -1);

               int tval = ReportSFTD_NR_drx_SFTD_NeighMeas.decodeEnumValue (buffer);
               drx_SFTD_NeighMeas = ReportSFTD_NR_drx_SFTD_NeighMeas.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("drx_SFTD_NeighMeas", -1);
            }
            else {
               drx_SFTD_NeighMeas = null;
            }

            // decode cellsForWhichToReportSFTD

            if (cellsForWhichToReportSFTDPresent) {
               buffer.getContext().eventDispatcher.startElement("cellsForWhichToReportSFTD", -1);

               cellsForWhichToReportSFTD = new ReportSFTD_NR_cellsForWhichToReportSFTD();
               cellsForWhichToReportSFTD.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("cellsForWhichToReportSFTD", -1);
            }
            else {
               cellsForWhichToReportSFTD = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (reportSFTD_Meas != null) reportSFTD_Meas.print (_sb, "reportSFTD_Meas", _level+1);
      if (reportRSRP != null) reportRSRP.print (_sb, "reportRSRP", _level+1);
      if (reportSFTD_NeighMeas != null) reportSFTD_NeighMeas.print (_sb, "reportSFTD_NeighMeas", _level+1);
      if (drx_SFTD_NeighMeas != null) drx_SFTD_NeighMeas.print (_sb, "drx_SFTD_NeighMeas", _level+1);
      if (cellsForWhichToReportSFTD != null) cellsForWhichToReportSFTD.print (_sb, "cellsForWhichToReportSFTD", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
