/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class CodebookParameters_type1 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public CodebookParameters_type1_singlePanel singlePanel;
   public CodebookParameters_type1_multiPanel multiPanel;  // optional

   public CodebookParameters_type1 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CodebookParameters_type1 (
      CodebookParameters_type1_singlePanel singlePanel_,
      CodebookParameters_type1_multiPanel multiPanel_
   ) {
      super();
      singlePanel = singlePanel_;
      multiPanel = multiPanel_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public CodebookParameters_type1 (
      CodebookParameters_type1_singlePanel singlePanel_
   ) {
      super();
      singlePanel = singlePanel_;
   }

   public void init () {
      singlePanel = null;
      multiPanel = null;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return singlePanel;
         case 1: return multiPanel;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "singlePanel";
         case 1: return "multiPanel";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean multiPanelPresent = buffer.decodeBit ("multiPanelPresent");

      // decode singlePanel

      buffer.getContext().eventDispatcher.startElement("singlePanel", -1);

      singlePanel = new CodebookParameters_type1_singlePanel();
      singlePanel.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("singlePanel", -1);

      // decode multiPanel

      if (multiPanelPresent) {
         buffer.getContext().eventDispatcher.startElement("multiPanel", -1);

         multiPanel = new CodebookParameters_type1_multiPanel();
         multiPanel.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("multiPanel", -1);
      }
      else {
         multiPanel = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (singlePanel != null) singlePanel.print (_sb, "singlePanel", _level+1);
      if (multiPanel != null) multiPanel.print (_sb, "multiPanel", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
