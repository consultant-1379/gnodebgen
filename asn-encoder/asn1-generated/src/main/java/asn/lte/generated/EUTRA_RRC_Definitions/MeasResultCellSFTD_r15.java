/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MeasResultCellSFTD_r15 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "MeasResultCellSFTD-r15";
   }

   public PhysCellIdNR_r15 physCellId_r15;
   public Asn1Integer sfn_OffsetResult_r15;
   public Asn1Integer frameBoundaryOffsetResult_r15;
   public RSRP_RangeNR_r15 rsrpResult_r15;  // optional

   public MeasResultCellSFTD_r15 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MeasResultCellSFTD_r15 (
      PhysCellIdNR_r15 physCellId_r15_,
      Asn1Integer sfn_OffsetResult_r15_,
      Asn1Integer frameBoundaryOffsetResult_r15_,
      RSRP_RangeNR_r15 rsrpResult_r15_
   ) {
      super();
      physCellId_r15 = physCellId_r15_;
      sfn_OffsetResult_r15 = sfn_OffsetResult_r15_;
      frameBoundaryOffsetResult_r15 = frameBoundaryOffsetResult_r15_;
      rsrpResult_r15 = rsrpResult_r15_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public MeasResultCellSFTD_r15 (
      PhysCellIdNR_r15 physCellId_r15_,
      Asn1Integer sfn_OffsetResult_r15_,
      Asn1Integer frameBoundaryOffsetResult_r15_
   ) {
      super();
      physCellId_r15 = physCellId_r15_;
      sfn_OffsetResult_r15 = sfn_OffsetResult_r15_;
      frameBoundaryOffsetResult_r15 = frameBoundaryOffsetResult_r15_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public MeasResultCellSFTD_r15 (long physCellId_r15_,
      long sfn_OffsetResult_r15_,
      long frameBoundaryOffsetResult_r15_,
      long rsrpResult_r15_
   ) {
      super();
      physCellId_r15 = new PhysCellIdNR_r15 (physCellId_r15_);
      sfn_OffsetResult_r15 = new Asn1Integer (sfn_OffsetResult_r15_);
      frameBoundaryOffsetResult_r15 = new Asn1Integer (frameBoundaryOffsetResult_r15_);
      rsrpResult_r15 = new RSRP_RangeNR_r15 (rsrpResult_r15_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public MeasResultCellSFTD_r15 (
      long physCellId_r15_,
      long sfn_OffsetResult_r15_,
      long frameBoundaryOffsetResult_r15_
   ) {
      super();
      physCellId_r15 = new PhysCellIdNR_r15 (physCellId_r15_);
      sfn_OffsetResult_r15 = new Asn1Integer (sfn_OffsetResult_r15_);
      frameBoundaryOffsetResult_r15 = new Asn1Integer (frameBoundaryOffsetResult_r15_);
   }

   public void init () {
      physCellId_r15 = null;
      sfn_OffsetResult_r15 = null;
      frameBoundaryOffsetResult_r15 = null;
      rsrpResult_r15 = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return physCellId_r15;
         case 1: return sfn_OffsetResult_r15;
         case 2: return frameBoundaryOffsetResult_r15;
         case 3: return rsrpResult_r15;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "physCellId-r15";
         case 1: return "sfn-OffsetResult-r15";
         case 2: return "frameBoundaryOffsetResult-r15";
         case 3: return "rsrpResult-r15";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean rsrpResult_r15Present = buffer.decodeBit ("rsrpResult_r15Present");

      // decode physCellId_r15

      buffer.getContext().eventDispatcher.startElement("physCellId_r15", -1);

      physCellId_r15 = new PhysCellIdNR_r15();
      physCellId_r15.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("physCellId_r15", -1);

      // decode sfn_OffsetResult_r15

      buffer.getContext().eventDispatcher.startElement("sfn_OffsetResult_r15", -1);

      sfn_OffsetResult_r15 = new Asn1Integer();
      sfn_OffsetResult_r15.decode (buffer, 0, 1023);

      buffer.invokeCharacters(sfn_OffsetResult_r15.toString());
      buffer.getContext().eventDispatcher.endElement("sfn_OffsetResult_r15", -1);

      // decode frameBoundaryOffsetResult_r15

      buffer.getContext().eventDispatcher.startElement("frameBoundaryOffsetResult_r15", -1);

      frameBoundaryOffsetResult_r15 = new Asn1Integer();
      frameBoundaryOffsetResult_r15.decode (buffer, -30720, 30719);

      buffer.invokeCharacters(frameBoundaryOffsetResult_r15.toString());
      buffer.getContext().eventDispatcher.endElement("frameBoundaryOffsetResult_r15", -1);

      // decode rsrpResult_r15

      if (rsrpResult_r15Present) {
         buffer.getContext().eventDispatcher.startElement("rsrpResult_r15", -1);

         rsrpResult_r15 = new RSRP_RangeNR_r15();
         rsrpResult_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("rsrpResult_r15", -1);
      }
      else {
         rsrpResult_r15 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (physCellId_r15 != null) physCellId_r15.print (_sb, "physCellId_r15", _level+1);
      if (sfn_OffsetResult_r15 != null) sfn_OffsetResult_r15.print (_sb, "sfn_OffsetResult_r15", _level+1);
      if (frameBoundaryOffsetResult_r15 != null) frameBoundaryOffsetResult_r15.print (_sb, "frameBoundaryOffsetResult_r15", _level+1);
      if (rsrpResult_r15 != null) rsrpResult_r15.print (_sb, "rsrpResult_r15", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
