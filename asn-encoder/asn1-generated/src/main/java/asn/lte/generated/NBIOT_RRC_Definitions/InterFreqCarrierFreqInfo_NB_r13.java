/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NBIOT_RRC_Definitions;

import com.objsys.asn1j.runtime.*;
import asn.lte.generated.EUTRA_RRC_Definitions.Q_RxLevMin;
import asn.lte.generated.EUTRA_RRC_Definitions.Q_QualMin_r9;
import asn.lte.generated.EUTRA_RRC_Definitions.P_Max;
import asn.lte.generated.EUTRA_RRC_Definitions.Q_OffsetRange;

public class InterFreqCarrierFreqInfo_NB_r13 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NBIOT_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "InterFreqCarrierFreqInfo-NB-r13";
   }

   public CarrierFreq_NB_r13 dl_CarrierFreq_r13;
   public Q_RxLevMin q_RxLevMin_r13;
   public Q_QualMin_r9 q_QualMin_r13;  // optional
   public P_Max p_Max_r13;  // optional
   public Q_OffsetRange q_OffsetFreq_r13 = null;  // default = Q_OffsetRange.dB0()
   public InterFreqNeighCellList_NB_r13 interFreqNeighCellList_r13;  // optional
   public InterFreqBlackCellList_NB_r13 interFreqBlackCellList_r13;  // optional
   public MultiBandInfoList_NB_r13 multiBandInfoList_r13;  // optional
   public boolean mV2ExtPresent;
   public Asn1Integer delta_RxLevMin_v1350;  // optional
   public boolean mV3ExtPresent;
   public InterFreqCarrierFreqInfo_NB_r13_powerClass14dBm_Offset_r14 powerClass14dBm_Offset_r14 = null;  // optional
   public InterFreqCarrierFreqInfo_NB_r13_ce_AuthorisationOffset_r14 ce_AuthorisationOffset_r14 = null;  // optional
   public boolean mV4ExtPresent;
   public NSSS_RRM_Config_NB_r15 nsss_RRM_Config_r15;  // optional
   public InterFreqNeighCellList_NB_v1530 interFreqNeighCellList_v1530;  // optional
   public Asn1OpenExt extElem1;

   public InterFreqCarrierFreqInfo_NB_r13 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public InterFreqCarrierFreqInfo_NB_r13 (
      CarrierFreq_NB_r13 dl_CarrierFreq_r13_,
      Q_RxLevMin q_RxLevMin_r13_,
      Q_QualMin_r9 q_QualMin_r13_,
      P_Max p_Max_r13_,
      Q_OffsetRange q_OffsetFreq_r13_,
      InterFreqNeighCellList_NB_r13 interFreqNeighCellList_r13_,
      InterFreqBlackCellList_NB_r13 interFreqBlackCellList_r13_,
      MultiBandInfoList_NB_r13 multiBandInfoList_r13_,
      Asn1Integer delta_RxLevMin_v1350_,
      InterFreqCarrierFreqInfo_NB_r13_powerClass14dBm_Offset_r14 powerClass14dBm_Offset_r14_,
      InterFreqCarrierFreqInfo_NB_r13_ce_AuthorisationOffset_r14 ce_AuthorisationOffset_r14_,
      NSSS_RRM_Config_NB_r15 nsss_RRM_Config_r15_,
      InterFreqNeighCellList_NB_v1530 interFreqNeighCellList_v1530_
   ) {
      super();
      dl_CarrierFreq_r13 = dl_CarrierFreq_r13_;
      q_RxLevMin_r13 = q_RxLevMin_r13_;
      q_QualMin_r13 = q_QualMin_r13_;
      p_Max_r13 = p_Max_r13_;
      q_OffsetFreq_r13 = q_OffsetFreq_r13_;
      interFreqNeighCellList_r13 = interFreqNeighCellList_r13_;
      interFreqBlackCellList_r13 = interFreqBlackCellList_r13_;
      multiBandInfoList_r13 = multiBandInfoList_r13_;
      delta_RxLevMin_v1350 = delta_RxLevMin_v1350_;
      powerClass14dBm_Offset_r14 = powerClass14dBm_Offset_r14_;
      ce_AuthorisationOffset_r14 = ce_AuthorisationOffset_r14_;
      nsss_RRM_Config_r15 = nsss_RRM_Config_r15_;
      interFreqNeighCellList_v1530 = interFreqNeighCellList_v1530_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public InterFreqCarrierFreqInfo_NB_r13 (
      CarrierFreq_NB_r13 dl_CarrierFreq_r13_,
      Q_RxLevMin q_RxLevMin_r13_
   ) {
      super();
      dl_CarrierFreq_r13 = dl_CarrierFreq_r13_;
      q_RxLevMin_r13 = q_RxLevMin_r13_;
      q_OffsetFreq_r13 = Q_OffsetRange.dB0();
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public InterFreqCarrierFreqInfo_NB_r13 (CarrierFreq_NB_r13 dl_CarrierFreq_r13_,
      long q_RxLevMin_r13_,
      long q_QualMin_r13_,
      long p_Max_r13_,
      Q_OffsetRange q_OffsetFreq_r13_,
      InterFreqNeighCellList_NB_r13 interFreqNeighCellList_r13_,
      InterFreqBlackCellList_NB_r13 interFreqBlackCellList_r13_,
      MultiBandInfoList_NB_r13 multiBandInfoList_r13_,
      long delta_RxLevMin_v1350_,
      InterFreqCarrierFreqInfo_NB_r13_powerClass14dBm_Offset_r14 powerClass14dBm_Offset_r14_,
      InterFreqCarrierFreqInfo_NB_r13_ce_AuthorisationOffset_r14 ce_AuthorisationOffset_r14_,
      NSSS_RRM_Config_NB_r15 nsss_RRM_Config_r15_,
      InterFreqNeighCellList_NB_v1530 interFreqNeighCellList_v1530_
   ) {
      super();
      dl_CarrierFreq_r13 = dl_CarrierFreq_r13_;
      q_RxLevMin_r13 = new Q_RxLevMin (q_RxLevMin_r13_);
      q_QualMin_r13 = new Q_QualMin_r9 (q_QualMin_r13_);
      p_Max_r13 = new P_Max (p_Max_r13_);
      q_OffsetFreq_r13 = q_OffsetFreq_r13_;
      interFreqNeighCellList_r13 = interFreqNeighCellList_r13_;
      interFreqBlackCellList_r13 = interFreqBlackCellList_r13_;
      multiBandInfoList_r13 = multiBandInfoList_r13_;
      delta_RxLevMin_v1350 = new Asn1Integer (delta_RxLevMin_v1350_);
      powerClass14dBm_Offset_r14 = powerClass14dBm_Offset_r14_;
      ce_AuthorisationOffset_r14 = ce_AuthorisationOffset_r14_;
      nsss_RRM_Config_r15 = nsss_RRM_Config_r15_;
      interFreqNeighCellList_v1530 = interFreqNeighCellList_v1530_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public InterFreqCarrierFreqInfo_NB_r13 (
      CarrierFreq_NB_r13 dl_CarrierFreq_r13_,
      long q_RxLevMin_r13_
   ) {
      super();
      dl_CarrierFreq_r13 = dl_CarrierFreq_r13_;
      q_RxLevMin_r13 = new Q_RxLevMin (q_RxLevMin_r13_);
      q_OffsetFreq_r13 = Q_OffsetRange.dB0();
   }

   public void init () {
      dl_CarrierFreq_r13 = null;
      q_RxLevMin_r13 = null;
      q_QualMin_r13 = null;
      p_Max_r13 = null;
      q_OffsetFreq_r13 = Q_OffsetRange.dB0();
      interFreqNeighCellList_r13 = null;
      interFreqBlackCellList_r13 = null;
      multiBandInfoList_r13 = null;
      delta_RxLevMin_v1350 = null;
      powerClass14dBm_Offset_r14 = null;
      ce_AuthorisationOffset_r14 = null;
      nsss_RRM_Config_r15 = null;
      interFreqNeighCellList_v1530 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 14; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return dl_CarrierFreq_r13;
         case 1: return q_RxLevMin_r13;
         case 2: return q_QualMin_r13;
         case 3: return p_Max_r13;
         case 4: return q_OffsetFreq_r13;
         case 5: return interFreqNeighCellList_r13;
         case 6: return interFreqBlackCellList_r13;
         case 7: return multiBandInfoList_r13;
         case 8: return delta_RxLevMin_v1350;
         case 9: return powerClass14dBm_Offset_r14;
         case 10: return ce_AuthorisationOffset_r14;
         case 11: return nsss_RRM_Config_r15;
         case 12: return interFreqNeighCellList_v1530;
         case 13: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "dl-CarrierFreq-r13";
         case 1: return "q-RxLevMin-r13";
         case 2: return "q-QualMin-r13";
         case 3: return "p-Max-r13";
         case 4: return "q-OffsetFreq-r13";
         case 5: return "interFreqNeighCellList-r13";
         case 6: return "interFreqBlackCellList-r13";
         case 7: return "multiBandInfoList-r13";
         case 8: return "delta-RxLevMin-v1350";
         case 9: return "powerClass14dBm-Offset-r14";
         case 10: return "ce-AuthorisationOffset-r14";
         case 11: return "nsss-RRM-Config-r15";
         case 12: return "interFreqNeighCellList-v1530";
         case 13: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean q_QualMin_r13Present = buffer.decodeBit ("q_QualMin_r13Present");
      boolean p_Max_r13Present = buffer.decodeBit ("p_Max_r13Present");
      boolean q_OffsetFreq_r13Present = buffer.decodeBit ("q_OffsetFreq_r13Present");
      boolean interFreqNeighCellList_r13Present = buffer.decodeBit ("interFreqNeighCellList_r13Present");
      boolean interFreqBlackCellList_r13Present = buffer.decodeBit ("interFreqBlackCellList_r13Present");
      boolean multiBandInfoList_r13Present = buffer.decodeBit ("multiBandInfoList_r13Present");

      // decode dl_CarrierFreq_r13

      buffer.getContext().eventDispatcher.startElement("dl_CarrierFreq_r13", -1);

      dl_CarrierFreq_r13 = new CarrierFreq_NB_r13();
      dl_CarrierFreq_r13.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("dl_CarrierFreq_r13", -1);

      // decode q_RxLevMin_r13

      buffer.getContext().eventDispatcher.startElement("q_RxLevMin_r13", -1);

      q_RxLevMin_r13 = new Q_RxLevMin();
      q_RxLevMin_r13.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("q_RxLevMin_r13", -1);

      // decode q_QualMin_r13

      if (q_QualMin_r13Present) {
         buffer.getContext().eventDispatcher.startElement("q_QualMin_r13", -1);

         q_QualMin_r13 = new Q_QualMin_r9();
         q_QualMin_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("q_QualMin_r13", -1);
      }
      else {
         q_QualMin_r13 = null;
      }

      // decode p_Max_r13

      if (p_Max_r13Present) {
         buffer.getContext().eventDispatcher.startElement("p_Max_r13", -1);

         p_Max_r13 = new P_Max();
         p_Max_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("p_Max_r13", -1);
      }
      else {
         p_Max_r13 = null;
      }

      // decode q_OffsetFreq_r13

      if (q_OffsetFreq_r13Present) {
         buffer.getContext().eventDispatcher.startElement("q_OffsetFreq_r13", -1);

         int tval = Q_OffsetRange.decodeEnumValue (buffer);
         q_OffsetFreq_r13 = Q_OffsetRange.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("q_OffsetFreq_r13", -1);
      }
      else {
         q_OffsetFreq_r13 = Q_OffsetRange.dB0();
      }

      // decode interFreqNeighCellList_r13

      if (interFreqNeighCellList_r13Present) {
         buffer.getContext().eventDispatcher.startElement("interFreqNeighCellList_r13", -1);

         interFreqNeighCellList_r13 = new InterFreqNeighCellList_NB_r13();
         interFreqNeighCellList_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("interFreqNeighCellList_r13", -1);
      }
      else {
         interFreqNeighCellList_r13 = null;
      }

      // decode interFreqBlackCellList_r13

      if (interFreqBlackCellList_r13Present) {
         buffer.getContext().eventDispatcher.startElement("interFreqBlackCellList_r13", -1);

         interFreqBlackCellList_r13 = new InterFreqBlackCellList_NB_r13();
         interFreqBlackCellList_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("interFreqBlackCellList_r13", -1);
      }
      else {
         interFreqBlackCellList_r13 = null;
      }

      // decode multiBandInfoList_r13

      if (multiBandInfoList_r13Present) {
         buffer.getContext().eventDispatcher.startElement("multiBandInfoList_r13", -1);

         multiBandInfoList_r13 = new MultiBandInfoList_NB_r13();
         multiBandInfoList_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("multiBandInfoList_r13", -1);
      }
      else {
         multiBandInfoList_r13 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV4ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean delta_RxLevMin_v1350Present = buffer.decodeBit ("delta_RxLevMin_v1350Present");

            // decode delta_RxLevMin_v1350

            if (delta_RxLevMin_v1350Present) {
               buffer.getContext().eventDispatcher.startElement("delta_RxLevMin_v1350", -1);

               delta_RxLevMin_v1350 = new Asn1Integer();
               delta_RxLevMin_v1350.decode (buffer, -8, -1);

               buffer.invokeCharacters(delta_RxLevMin_v1350.toString());
               buffer.getContext().eventDispatcher.endElement("delta_RxLevMin_v1350", -1);
            }
            else {
               delta_RxLevMin_v1350 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean powerClass14dBm_Offset_r14Present = buffer.decodeBit ("powerClass14dBm_Offset_r14Present");

            boolean ce_AuthorisationOffset_r14Present = buffer.decodeBit ("ce_AuthorisationOffset_r14Present");

            // decode powerClass14dBm_Offset_r14

            if (powerClass14dBm_Offset_r14Present) {
               buffer.getContext().eventDispatcher.startElement("powerClass14dBm_Offset_r14", -1);

               int tval = InterFreqCarrierFreqInfo_NB_r13_powerClass14dBm_Offset_r14.decodeEnumValue (buffer);
               powerClass14dBm_Offset_r14 = InterFreqCarrierFreqInfo_NB_r13_powerClass14dBm_Offset_r14.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("powerClass14dBm_Offset_r14", -1);
            }
            else {
               powerClass14dBm_Offset_r14 = null;
            }

            // decode ce_AuthorisationOffset_r14

            if (ce_AuthorisationOffset_r14Present) {
               buffer.getContext().eventDispatcher.startElement("ce_AuthorisationOffset_r14", -1);

               int tval = InterFreqCarrierFreqInfo_NB_r13_ce_AuthorisationOffset_r14.decodeEnumValue (buffer);
               ce_AuthorisationOffset_r14 = InterFreqCarrierFreqInfo_NB_r13_ce_AuthorisationOffset_r14.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("ce_AuthorisationOffset_r14", -1);
            }
            else {
               ce_AuthorisationOffset_r14 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV4ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean nsss_RRM_Config_r15Present = buffer.decodeBit ("nsss_RRM_Config_r15Present");

            boolean interFreqNeighCellList_v1530Present = buffer.decodeBit ("interFreqNeighCellList_v1530Present");

            // decode nsss_RRM_Config_r15

            if (nsss_RRM_Config_r15Present) {
               buffer.getContext().eventDispatcher.startElement("nsss_RRM_Config_r15", -1);

               nsss_RRM_Config_r15 = new NSSS_RRM_Config_NB_r15();
               nsss_RRM_Config_r15.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("nsss_RRM_Config_r15", -1);
            }
            else {
               nsss_RRM_Config_r15 = null;
            }

            // decode interFreqNeighCellList_v1530

            if (interFreqNeighCellList_v1530Present) {
               buffer.getContext().eventDispatcher.startElement("interFreqNeighCellList_v1530", -1);

               interFreqNeighCellList_v1530 = new InterFreqNeighCellList_NB_v1530();
               interFreqNeighCellList_v1530.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("interFreqNeighCellList_v1530", -1);
            }
            else {
               interFreqNeighCellList_v1530 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (dl_CarrierFreq_r13 != null) dl_CarrierFreq_r13.print (_sb, "dl_CarrierFreq_r13", _level+1);
      if (q_RxLevMin_r13 != null) q_RxLevMin_r13.print (_sb, "q_RxLevMin_r13", _level+1);
      if (q_QualMin_r13 != null) q_QualMin_r13.print (_sb, "q_QualMin_r13", _level+1);
      if (p_Max_r13 != null) p_Max_r13.print (_sb, "p_Max_r13", _level+1);
      if (q_OffsetFreq_r13 != null) q_OffsetFreq_r13.print (_sb, "q_OffsetFreq_r13", _level+1);
      if (interFreqNeighCellList_r13 != null) interFreqNeighCellList_r13.print (_sb, "interFreqNeighCellList_r13", _level+1);
      if (interFreqBlackCellList_r13 != null) interFreqBlackCellList_r13.print (_sb, "interFreqBlackCellList_r13", _level+1);
      if (multiBandInfoList_r13 != null) multiBandInfoList_r13.print (_sb, "multiBandInfoList_r13", _level+1);
      if (delta_RxLevMin_v1350 != null) delta_RxLevMin_v1350.print (_sb, "delta_RxLevMin_v1350", _level+1);
      if (powerClass14dBm_Offset_r14 != null) powerClass14dBm_Offset_r14.print (_sb, "powerClass14dBm_Offset_r14", _level+1);
      if (ce_AuthorisationOffset_r14 != null) ce_AuthorisationOffset_r14.print (_sb, "ce_AuthorisationOffset_r14", _level+1);
      if (nsss_RRM_Config_r15 != null) nsss_RRM_Config_r15.print (_sb, "nsss_RRM_Config_r15", _level+1);
      if (interFreqNeighCellList_v1530 != null) interFreqNeighCellList_v1530.print (_sb, "interFreqNeighCellList_v1530", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
