/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class RadioResourceConfigCommonSIB extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "RadioResourceConfigCommonSIB";
   }

   public RACH_ConfigCommon rach_ConfigCommon;
   public BCCH_Config bcch_Config;
   public PCCH_Config pcch_Config;
   public PRACH_ConfigSIB prach_Config;
   public PDSCH_ConfigCommon pdsch_ConfigCommon;
   public PUSCH_ConfigCommon pusch_ConfigCommon;
   public PUCCH_ConfigCommon pucch_ConfigCommon;
   public SoundingRS_UL_ConfigCommon soundingRS_UL_ConfigCommon;
   public UplinkPowerControlCommon uplinkPowerControlCommon;
   public UL_CyclicPrefixLength ul_CyclicPrefixLength = null;
   public boolean mV2ExtPresent;
   public UplinkPowerControlCommon_v1020 uplinkPowerControlCommon_v1020;  // optional
   public boolean mV3ExtPresent;
   public RACH_ConfigCommon_v1250 rach_ConfigCommon_v1250;  // optional
   public boolean mV4ExtPresent;
   public PUSCH_ConfigCommon_v1270 pusch_ConfigCommon_v1270;  // optional
   public boolean mV5ExtPresent;
   public BCCH_Config_v1310 bcch_Config_v1310;  // optional
   public PCCH_Config_v1310 pcch_Config_v1310;  // optional
   public FreqHoppingParameters_r13 freqHoppingParameters_r13;  // optional
   public PDSCH_ConfigCommon_v1310 pdsch_ConfigCommon_v1310;  // optional
   public PUSCH_ConfigCommon_v1310 pusch_ConfigCommon_v1310;  // optional
   public PRACH_ConfigSIB_v1310 prach_ConfigCommon_v1310;  // optional
   public PUCCH_ConfigCommon_v1310 pucch_ConfigCommon_v1310;  // optional
   public boolean mV6ExtPresent;
   public HighSpeedConfig_r14 highSpeedConfig_r14;  // optional
   public PRACH_Config_v1430 prach_Config_v1430;  // optional
   public PUCCH_ConfigCommon_v1430 pucch_ConfigCommon_v1430;  // optional
   public boolean mV7ExtPresent;
   public PRACH_ConfigSIB_v1530 prach_Config_v1530;  // optional
   public RSS_Config_r15 ce_RSS_Config_r15;  // optional
   public WUS_Config_r15 wus_Config_r15;  // optional
   public HighSpeedConfig_v1530 highSpeedConfig_v1530;  // optional
   public boolean mV8ExtPresent;
   public UplinkPowerControlCommon_v1530 uplinkPowerControlCommon_v1540;  // optional
   public Asn1OpenExt extElem1;

   public RadioResourceConfigCommonSIB () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public RadioResourceConfigCommonSIB (
      RACH_ConfigCommon rach_ConfigCommon_,
      BCCH_Config bcch_Config_,
      PCCH_Config pcch_Config_,
      PRACH_ConfigSIB prach_Config_,
      PDSCH_ConfigCommon pdsch_ConfigCommon_,
      PUSCH_ConfigCommon pusch_ConfigCommon_,
      PUCCH_ConfigCommon pucch_ConfigCommon_,
      SoundingRS_UL_ConfigCommon soundingRS_UL_ConfigCommon_,
      UplinkPowerControlCommon uplinkPowerControlCommon_,
      UL_CyclicPrefixLength ul_CyclicPrefixLength_,
      UplinkPowerControlCommon_v1020 uplinkPowerControlCommon_v1020_,
      RACH_ConfigCommon_v1250 rach_ConfigCommon_v1250_,
      PUSCH_ConfigCommon_v1270 pusch_ConfigCommon_v1270_,
      BCCH_Config_v1310 bcch_Config_v1310_,
      PCCH_Config_v1310 pcch_Config_v1310_,
      FreqHoppingParameters_r13 freqHoppingParameters_r13_,
      PDSCH_ConfigCommon_v1310 pdsch_ConfigCommon_v1310_,
      PUSCH_ConfigCommon_v1310 pusch_ConfigCommon_v1310_,
      PRACH_ConfigSIB_v1310 prach_ConfigCommon_v1310_,
      PUCCH_ConfigCommon_v1310 pucch_ConfigCommon_v1310_,
      HighSpeedConfig_r14 highSpeedConfig_r14_,
      PRACH_Config_v1430 prach_Config_v1430_,
      PUCCH_ConfigCommon_v1430 pucch_ConfigCommon_v1430_,
      PRACH_ConfigSIB_v1530 prach_Config_v1530_,
      RSS_Config_r15 ce_RSS_Config_r15_,
      WUS_Config_r15 wus_Config_r15_,
      HighSpeedConfig_v1530 highSpeedConfig_v1530_,
      UplinkPowerControlCommon_v1530 uplinkPowerControlCommon_v1540_
   ) {
      super();
      rach_ConfigCommon = rach_ConfigCommon_;
      bcch_Config = bcch_Config_;
      pcch_Config = pcch_Config_;
      prach_Config = prach_Config_;
      pdsch_ConfigCommon = pdsch_ConfigCommon_;
      pusch_ConfigCommon = pusch_ConfigCommon_;
      pucch_ConfigCommon = pucch_ConfigCommon_;
      soundingRS_UL_ConfigCommon = soundingRS_UL_ConfigCommon_;
      uplinkPowerControlCommon = uplinkPowerControlCommon_;
      ul_CyclicPrefixLength = ul_CyclicPrefixLength_;
      uplinkPowerControlCommon_v1020 = uplinkPowerControlCommon_v1020_;
      rach_ConfigCommon_v1250 = rach_ConfigCommon_v1250_;
      pusch_ConfigCommon_v1270 = pusch_ConfigCommon_v1270_;
      bcch_Config_v1310 = bcch_Config_v1310_;
      pcch_Config_v1310 = pcch_Config_v1310_;
      freqHoppingParameters_r13 = freqHoppingParameters_r13_;
      pdsch_ConfigCommon_v1310 = pdsch_ConfigCommon_v1310_;
      pusch_ConfigCommon_v1310 = pusch_ConfigCommon_v1310_;
      prach_ConfigCommon_v1310 = prach_ConfigCommon_v1310_;
      pucch_ConfigCommon_v1310 = pucch_ConfigCommon_v1310_;
      highSpeedConfig_r14 = highSpeedConfig_r14_;
      prach_Config_v1430 = prach_Config_v1430_;
      pucch_ConfigCommon_v1430 = pucch_ConfigCommon_v1430_;
      prach_Config_v1530 = prach_Config_v1530_;
      ce_RSS_Config_r15 = ce_RSS_Config_r15_;
      wus_Config_r15 = wus_Config_r15_;
      highSpeedConfig_v1530 = highSpeedConfig_v1530_;
      uplinkPowerControlCommon_v1540 = uplinkPowerControlCommon_v1540_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public RadioResourceConfigCommonSIB (
      RACH_ConfigCommon rach_ConfigCommon_,
      BCCH_Config bcch_Config_,
      PCCH_Config pcch_Config_,
      PRACH_ConfigSIB prach_Config_,
      PDSCH_ConfigCommon pdsch_ConfigCommon_,
      PUSCH_ConfigCommon pusch_ConfigCommon_,
      PUCCH_ConfigCommon pucch_ConfigCommon_,
      SoundingRS_UL_ConfigCommon soundingRS_UL_ConfigCommon_,
      UplinkPowerControlCommon uplinkPowerControlCommon_,
      UL_CyclicPrefixLength ul_CyclicPrefixLength_
   ) {
      super();
      rach_ConfigCommon = rach_ConfigCommon_;
      bcch_Config = bcch_Config_;
      pcch_Config = pcch_Config_;
      prach_Config = prach_Config_;
      pdsch_ConfigCommon = pdsch_ConfigCommon_;
      pusch_ConfigCommon = pusch_ConfigCommon_;
      pucch_ConfigCommon = pucch_ConfigCommon_;
      soundingRS_UL_ConfigCommon = soundingRS_UL_ConfigCommon_;
      uplinkPowerControlCommon = uplinkPowerControlCommon_;
      ul_CyclicPrefixLength = ul_CyclicPrefixLength_;
   }

   public void init () {
      rach_ConfigCommon = null;
      bcch_Config = null;
      pcch_Config = null;
      prach_Config = null;
      pdsch_ConfigCommon = null;
      pusch_ConfigCommon = null;
      pucch_ConfigCommon = null;
      soundingRS_UL_ConfigCommon = null;
      uplinkPowerControlCommon = null;
      ul_CyclicPrefixLength = null;
      uplinkPowerControlCommon_v1020 = null;
      rach_ConfigCommon_v1250 = null;
      pusch_ConfigCommon_v1270 = null;
      bcch_Config_v1310 = null;
      pcch_Config_v1310 = null;
      freqHoppingParameters_r13 = null;
      pdsch_ConfigCommon_v1310 = null;
      pusch_ConfigCommon_v1310 = null;
      prach_ConfigCommon_v1310 = null;
      pucch_ConfigCommon_v1310 = null;
      highSpeedConfig_r14 = null;
      prach_Config_v1430 = null;
      pucch_ConfigCommon_v1430 = null;
      prach_Config_v1530 = null;
      ce_RSS_Config_r15 = null;
      wus_Config_r15 = null;
      highSpeedConfig_v1530 = null;
      uplinkPowerControlCommon_v1540 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 29; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return rach_ConfigCommon;
         case 1: return bcch_Config;
         case 2: return pcch_Config;
         case 3: return prach_Config;
         case 4: return pdsch_ConfigCommon;
         case 5: return pusch_ConfigCommon;
         case 6: return pucch_ConfigCommon;
         case 7: return soundingRS_UL_ConfigCommon;
         case 8: return uplinkPowerControlCommon;
         case 9: return ul_CyclicPrefixLength;
         case 10: return uplinkPowerControlCommon_v1020;
         case 11: return rach_ConfigCommon_v1250;
         case 12: return pusch_ConfigCommon_v1270;
         case 13: return bcch_Config_v1310;
         case 14: return pcch_Config_v1310;
         case 15: return freqHoppingParameters_r13;
         case 16: return pdsch_ConfigCommon_v1310;
         case 17: return pusch_ConfigCommon_v1310;
         case 18: return prach_ConfigCommon_v1310;
         case 19: return pucch_ConfigCommon_v1310;
         case 20: return highSpeedConfig_r14;
         case 21: return prach_Config_v1430;
         case 22: return pucch_ConfigCommon_v1430;
         case 23: return prach_Config_v1530;
         case 24: return ce_RSS_Config_r15;
         case 25: return wus_Config_r15;
         case 26: return highSpeedConfig_v1530;
         case 27: return uplinkPowerControlCommon_v1540;
         case 28: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "rach-ConfigCommon";
         case 1: return "bcch-Config";
         case 2: return "pcch-Config";
         case 3: return "prach-Config";
         case 4: return "pdsch-ConfigCommon";
         case 5: return "pusch-ConfigCommon";
         case 6: return "pucch-ConfigCommon";
         case 7: return "soundingRS-UL-ConfigCommon";
         case 8: return "uplinkPowerControlCommon";
         case 9: return "ul-CyclicPrefixLength";
         case 10: return "uplinkPowerControlCommon-v1020";
         case 11: return "rach-ConfigCommon-v1250";
         case 12: return "pusch-ConfigCommon-v1270";
         case 13: return "bcch-Config-v1310";
         case 14: return "pcch-Config-v1310";
         case 15: return "freqHoppingParameters-r13";
         case 16: return "pdsch-ConfigCommon-v1310";
         case 17: return "pusch-ConfigCommon-v1310";
         case 18: return "prach-ConfigCommon-v1310";
         case 19: return "pucch-ConfigCommon-v1310";
         case 20: return "highSpeedConfig-r14";
         case 21: return "prach-Config-v1430";
         case 22: return "pucch-ConfigCommon-v1430";
         case 23: return "prach-Config-v1530";
         case 24: return "ce-RSS-Config-r15";
         case 25: return "wus-Config-r15";
         case 26: return "highSpeedConfig-v1530";
         case 27: return "uplinkPowerControlCommon-v1540";
         case 28: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      // decode rach_ConfigCommon

      buffer.getContext().eventDispatcher.startElement("rach_ConfigCommon", -1);

      rach_ConfigCommon = new RACH_ConfigCommon();
      rach_ConfigCommon.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("rach_ConfigCommon", -1);

      // decode bcch_Config

      buffer.getContext().eventDispatcher.startElement("bcch_Config", -1);

      bcch_Config = new BCCH_Config();
      bcch_Config.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("bcch_Config", -1);

      // decode pcch_Config

      buffer.getContext().eventDispatcher.startElement("pcch_Config", -1);

      pcch_Config = new PCCH_Config();
      pcch_Config.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("pcch_Config", -1);

      // decode prach_Config

      buffer.getContext().eventDispatcher.startElement("prach_Config", -1);

      prach_Config = new PRACH_ConfigSIB();
      prach_Config.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("prach_Config", -1);

      // decode pdsch_ConfigCommon

      buffer.getContext().eventDispatcher.startElement("pdsch_ConfigCommon", -1);

      pdsch_ConfigCommon = new PDSCH_ConfigCommon();
      pdsch_ConfigCommon.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("pdsch_ConfigCommon", -1);

      // decode pusch_ConfigCommon

      buffer.getContext().eventDispatcher.startElement("pusch_ConfigCommon", -1);

      pusch_ConfigCommon = new PUSCH_ConfigCommon();
      pusch_ConfigCommon.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("pusch_ConfigCommon", -1);

      // decode pucch_ConfigCommon

      buffer.getContext().eventDispatcher.startElement("pucch_ConfigCommon", -1);

      pucch_ConfigCommon = new PUCCH_ConfigCommon();
      pucch_ConfigCommon.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("pucch_ConfigCommon", -1);

      // decode soundingRS_UL_ConfigCommon

      buffer.getContext().eventDispatcher.startElement("soundingRS_UL_ConfigCommon", -1);

      soundingRS_UL_ConfigCommon = new SoundingRS_UL_ConfigCommon();
      soundingRS_UL_ConfigCommon.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("soundingRS_UL_ConfigCommon", -1);

      // decode uplinkPowerControlCommon

      buffer.getContext().eventDispatcher.startElement("uplinkPowerControlCommon", -1);

      uplinkPowerControlCommon = new UplinkPowerControlCommon();
      uplinkPowerControlCommon.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("uplinkPowerControlCommon", -1);

      // decode ul_CyclicPrefixLength

      buffer.getContext().eventDispatcher.startElement("ul_CyclicPrefixLength", -1);

      {
         int tval = UL_CyclicPrefixLength.decodeEnumValue (buffer);
         ul_CyclicPrefixLength = UL_CyclicPrefixLength.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("ul_CyclicPrefixLength", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV4ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV5ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV6ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV7ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV8ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean uplinkPowerControlCommon_v1020Present = buffer.decodeBit ("uplinkPowerControlCommon_v1020Present");

            // decode uplinkPowerControlCommon_v1020

            if (uplinkPowerControlCommon_v1020Present) {
               buffer.getContext().eventDispatcher.startElement("uplinkPowerControlCommon_v1020", -1);

               uplinkPowerControlCommon_v1020 = new UplinkPowerControlCommon_v1020();
               uplinkPowerControlCommon_v1020.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("uplinkPowerControlCommon_v1020", -1);
            }
            else {
               uplinkPowerControlCommon_v1020 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean rach_ConfigCommon_v1250Present = buffer.decodeBit ("rach_ConfigCommon_v1250Present");

            // decode rach_ConfigCommon_v1250

            if (rach_ConfigCommon_v1250Present) {
               buffer.getContext().eventDispatcher.startElement("rach_ConfigCommon_v1250", -1);

               rach_ConfigCommon_v1250 = new RACH_ConfigCommon_v1250();
               rach_ConfigCommon_v1250.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("rach_ConfigCommon_v1250", -1);
            }
            else {
               rach_ConfigCommon_v1250 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV4ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean pusch_ConfigCommon_v1270Present = buffer.decodeBit ("pusch_ConfigCommon_v1270Present");

            // decode pusch_ConfigCommon_v1270

            if (pusch_ConfigCommon_v1270Present) {
               buffer.getContext().eventDispatcher.startElement("pusch_ConfigCommon_v1270", -1);

               pusch_ConfigCommon_v1270 = new PUSCH_ConfigCommon_v1270();
               pusch_ConfigCommon_v1270.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("pusch_ConfigCommon_v1270", -1);
            }
            else {
               pusch_ConfigCommon_v1270 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV5ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean bcch_Config_v1310Present = buffer.decodeBit ("bcch_Config_v1310Present");

            boolean pcch_Config_v1310Present = buffer.decodeBit ("pcch_Config_v1310Present");

            boolean freqHoppingParameters_r13Present = buffer.decodeBit ("freqHoppingParameters_r13Present");

            boolean pdsch_ConfigCommon_v1310Present = buffer.decodeBit ("pdsch_ConfigCommon_v1310Present");

            boolean pusch_ConfigCommon_v1310Present = buffer.decodeBit ("pusch_ConfigCommon_v1310Present");

            boolean prach_ConfigCommon_v1310Present = buffer.decodeBit ("prach_ConfigCommon_v1310Present");

            boolean pucch_ConfigCommon_v1310Present = buffer.decodeBit ("pucch_ConfigCommon_v1310Present");

            // decode bcch_Config_v1310

            if (bcch_Config_v1310Present) {
               buffer.getContext().eventDispatcher.startElement("bcch_Config_v1310", -1);

               bcch_Config_v1310 = new BCCH_Config_v1310();
               bcch_Config_v1310.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("bcch_Config_v1310", -1);
            }
            else {
               bcch_Config_v1310 = null;
            }

            // decode pcch_Config_v1310

            if (pcch_Config_v1310Present) {
               buffer.getContext().eventDispatcher.startElement("pcch_Config_v1310", -1);

               pcch_Config_v1310 = new PCCH_Config_v1310();
               pcch_Config_v1310.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("pcch_Config_v1310", -1);
            }
            else {
               pcch_Config_v1310 = null;
            }

            // decode freqHoppingParameters_r13

            if (freqHoppingParameters_r13Present) {
               buffer.getContext().eventDispatcher.startElement("freqHoppingParameters_r13", -1);

               freqHoppingParameters_r13 = new FreqHoppingParameters_r13();
               freqHoppingParameters_r13.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("freqHoppingParameters_r13", -1);
            }
            else {
               freqHoppingParameters_r13 = null;
            }

            // decode pdsch_ConfigCommon_v1310

            if (pdsch_ConfigCommon_v1310Present) {
               buffer.getContext().eventDispatcher.startElement("pdsch_ConfigCommon_v1310", -1);

               pdsch_ConfigCommon_v1310 = new PDSCH_ConfigCommon_v1310();
               pdsch_ConfigCommon_v1310.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("pdsch_ConfigCommon_v1310", -1);
            }
            else {
               pdsch_ConfigCommon_v1310 = null;
            }

            // decode pusch_ConfigCommon_v1310

            if (pusch_ConfigCommon_v1310Present) {
               buffer.getContext().eventDispatcher.startElement("pusch_ConfigCommon_v1310", -1);

               pusch_ConfigCommon_v1310 = new PUSCH_ConfigCommon_v1310();
               pusch_ConfigCommon_v1310.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("pusch_ConfigCommon_v1310", -1);
            }
            else {
               pusch_ConfigCommon_v1310 = null;
            }

            // decode prach_ConfigCommon_v1310

            if (prach_ConfigCommon_v1310Present) {
               buffer.getContext().eventDispatcher.startElement("prach_ConfigCommon_v1310", -1);

               prach_ConfigCommon_v1310 = new PRACH_ConfigSIB_v1310();
               prach_ConfigCommon_v1310.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("prach_ConfigCommon_v1310", -1);
            }
            else {
               prach_ConfigCommon_v1310 = null;
            }

            // decode pucch_ConfigCommon_v1310

            if (pucch_ConfigCommon_v1310Present) {
               buffer.getContext().eventDispatcher.startElement("pucch_ConfigCommon_v1310", -1);

               pucch_ConfigCommon_v1310 = new PUCCH_ConfigCommon_v1310();
               pucch_ConfigCommon_v1310.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("pucch_ConfigCommon_v1310", -1);
            }
            else {
               pucch_ConfigCommon_v1310 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV6ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean highSpeedConfig_r14Present = buffer.decodeBit ("highSpeedConfig_r14Present");

            boolean prach_Config_v1430Present = buffer.decodeBit ("prach_Config_v1430Present");

            boolean pucch_ConfigCommon_v1430Present = buffer.decodeBit ("pucch_ConfigCommon_v1430Present");

            // decode highSpeedConfig_r14

            if (highSpeedConfig_r14Present) {
               buffer.getContext().eventDispatcher.startElement("highSpeedConfig_r14", -1);

               highSpeedConfig_r14 = new HighSpeedConfig_r14();
               highSpeedConfig_r14.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("highSpeedConfig_r14", -1);
            }
            else {
               highSpeedConfig_r14 = null;
            }

            // decode prach_Config_v1430

            if (prach_Config_v1430Present) {
               buffer.getContext().eventDispatcher.startElement("prach_Config_v1430", -1);

               prach_Config_v1430 = new PRACH_Config_v1430();
               prach_Config_v1430.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("prach_Config_v1430", -1);
            }
            else {
               prach_Config_v1430 = null;
            }

            // decode pucch_ConfigCommon_v1430

            if (pucch_ConfigCommon_v1430Present) {
               buffer.getContext().eventDispatcher.startElement("pucch_ConfigCommon_v1430", -1);

               pucch_ConfigCommon_v1430 = new PUCCH_ConfigCommon_v1430();
               pucch_ConfigCommon_v1430.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("pucch_ConfigCommon_v1430", -1);
            }
            else {
               pucch_ConfigCommon_v1430 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV7ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean prach_Config_v1530Present = buffer.decodeBit ("prach_Config_v1530Present");

            boolean ce_RSS_Config_r15Present = buffer.decodeBit ("ce_RSS_Config_r15Present");

            boolean wus_Config_r15Present = buffer.decodeBit ("wus_Config_r15Present");

            boolean highSpeedConfig_v1530Present = buffer.decodeBit ("highSpeedConfig_v1530Present");

            // decode prach_Config_v1530

            if (prach_Config_v1530Present) {
               buffer.getContext().eventDispatcher.startElement("prach_Config_v1530", -1);

               prach_Config_v1530 = new PRACH_ConfigSIB_v1530();
               prach_Config_v1530.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("prach_Config_v1530", -1);
            }
            else {
               prach_Config_v1530 = null;
            }

            // decode ce_RSS_Config_r15

            if (ce_RSS_Config_r15Present) {
               buffer.getContext().eventDispatcher.startElement("ce_RSS_Config_r15", -1);

               ce_RSS_Config_r15 = new RSS_Config_r15();
               ce_RSS_Config_r15.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("ce_RSS_Config_r15", -1);
            }
            else {
               ce_RSS_Config_r15 = null;
            }

            // decode wus_Config_r15

            if (wus_Config_r15Present) {
               buffer.getContext().eventDispatcher.startElement("wus_Config_r15", -1);

               wus_Config_r15 = new WUS_Config_r15();
               wus_Config_r15.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("wus_Config_r15", -1);
            }
            else {
               wus_Config_r15 = null;
            }

            // decode highSpeedConfig_v1530

            if (highSpeedConfig_v1530Present) {
               buffer.getContext().eventDispatcher.startElement("highSpeedConfig_v1530", -1);

               highSpeedConfig_v1530 = new HighSpeedConfig_v1530();
               highSpeedConfig_v1530.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("highSpeedConfig_v1530", -1);
            }
            else {
               highSpeedConfig_v1530 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV8ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean uplinkPowerControlCommon_v1540Present = buffer.decodeBit ("uplinkPowerControlCommon_v1540Present");

            // decode uplinkPowerControlCommon_v1540

            if (uplinkPowerControlCommon_v1540Present) {
               buffer.getContext().eventDispatcher.startElement("uplinkPowerControlCommon_v1540", -1);

               uplinkPowerControlCommon_v1540 = new UplinkPowerControlCommon_v1530();
               uplinkPowerControlCommon_v1540.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("uplinkPowerControlCommon_v1540", -1);
            }
            else {
               uplinkPowerControlCommon_v1540 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (rach_ConfigCommon != null) rach_ConfigCommon.print (_sb, "rach_ConfigCommon", _level+1);
      if (bcch_Config != null) bcch_Config.print (_sb, "bcch_Config", _level+1);
      if (pcch_Config != null) pcch_Config.print (_sb, "pcch_Config", _level+1);
      if (prach_Config != null) prach_Config.print (_sb, "prach_Config", _level+1);
      if (pdsch_ConfigCommon != null) pdsch_ConfigCommon.print (_sb, "pdsch_ConfigCommon", _level+1);
      if (pusch_ConfigCommon != null) pusch_ConfigCommon.print (_sb, "pusch_ConfigCommon", _level+1);
      if (pucch_ConfigCommon != null) pucch_ConfigCommon.print (_sb, "pucch_ConfigCommon", _level+1);
      if (soundingRS_UL_ConfigCommon != null) soundingRS_UL_ConfigCommon.print (_sb, "soundingRS_UL_ConfigCommon", _level+1);
      if (uplinkPowerControlCommon != null) uplinkPowerControlCommon.print (_sb, "uplinkPowerControlCommon", _level+1);
      if (ul_CyclicPrefixLength != null) ul_CyclicPrefixLength.print (_sb, "ul_CyclicPrefixLength", _level+1);
      if (uplinkPowerControlCommon_v1020 != null) uplinkPowerControlCommon_v1020.print (_sb, "uplinkPowerControlCommon_v1020", _level+1);
      if (rach_ConfigCommon_v1250 != null) rach_ConfigCommon_v1250.print (_sb, "rach_ConfigCommon_v1250", _level+1);
      if (pusch_ConfigCommon_v1270 != null) pusch_ConfigCommon_v1270.print (_sb, "pusch_ConfigCommon_v1270", _level+1);
      if (bcch_Config_v1310 != null) bcch_Config_v1310.print (_sb, "bcch_Config_v1310", _level+1);
      if (pcch_Config_v1310 != null) pcch_Config_v1310.print (_sb, "pcch_Config_v1310", _level+1);
      if (freqHoppingParameters_r13 != null) freqHoppingParameters_r13.print (_sb, "freqHoppingParameters_r13", _level+1);
      if (pdsch_ConfigCommon_v1310 != null) pdsch_ConfigCommon_v1310.print (_sb, "pdsch_ConfigCommon_v1310", _level+1);
      if (pusch_ConfigCommon_v1310 != null) pusch_ConfigCommon_v1310.print (_sb, "pusch_ConfigCommon_v1310", _level+1);
      if (prach_ConfigCommon_v1310 != null) prach_ConfigCommon_v1310.print (_sb, "prach_ConfigCommon_v1310", _level+1);
      if (pucch_ConfigCommon_v1310 != null) pucch_ConfigCommon_v1310.print (_sb, "pucch_ConfigCommon_v1310", _level+1);
      if (highSpeedConfig_r14 != null) highSpeedConfig_r14.print (_sb, "highSpeedConfig_r14", _level+1);
      if (prach_Config_v1430 != null) prach_Config_v1430.print (_sb, "prach_Config_v1430", _level+1);
      if (pucch_ConfigCommon_v1430 != null) pucch_ConfigCommon_v1430.print (_sb, "pucch_ConfigCommon_v1430", _level+1);
      if (prach_Config_v1530 != null) prach_Config_v1530.print (_sb, "prach_Config_v1530", _level+1);
      if (ce_RSS_Config_r15 != null) ce_RSS_Config_r15.print (_sb, "ce_RSS_Config_r15", _level+1);
      if (wus_Config_r15 != null) wus_Config_r15.print (_sb, "wus_Config_r15", _level+1);
      if (highSpeedConfig_v1530 != null) highSpeedConfig_v1530.print (_sb, "highSpeedConfig_v1530", _level+1);
      if (uplinkPowerControlCommon_v1540 != null) uplinkPowerControlCommon_v1540.print (_sb, "uplinkPowerControlCommon_v1540", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
