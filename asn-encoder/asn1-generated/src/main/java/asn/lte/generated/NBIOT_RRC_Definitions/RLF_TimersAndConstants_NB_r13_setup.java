/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NBIOT_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class RLF_TimersAndConstants_NB_r13_setup extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NBIOT_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public RLF_TimersAndConstants_NB_r13_setup_t301_r13 t301_r13 = null;
   public RLF_TimersAndConstants_NB_r13_setup_t310_r13 t310_r13 = null;
   public RLF_TimersAndConstants_NB_r13_setup_n310_r13 n310_r13 = null;
   public RLF_TimersAndConstants_NB_r13_setup_t311_r13 t311_r13 = null;
   public RLF_TimersAndConstants_NB_r13_setup_n311_r13 n311_r13 = null;
   public boolean mV2ExtPresent;
   public RLF_TimersAndConstants_NB_r13_setup_t311_v1350 t311_v1350 = null;  // optional
   public boolean mV3ExtPresent;
   public RLF_TimersAndConstants_NB_r13_setup_t301_v1530 t301_v1530 = null;  // optional
   public RLF_TimersAndConstants_NB_r13_setup_t311_v1530 t311_v1530 = null;  // optional
   public Asn1OpenExt extElem1;

   public RLF_TimersAndConstants_NB_r13_setup () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public RLF_TimersAndConstants_NB_r13_setup (
      RLF_TimersAndConstants_NB_r13_setup_t301_r13 t301_r13_,
      RLF_TimersAndConstants_NB_r13_setup_t310_r13 t310_r13_,
      RLF_TimersAndConstants_NB_r13_setup_n310_r13 n310_r13_,
      RLF_TimersAndConstants_NB_r13_setup_t311_r13 t311_r13_,
      RLF_TimersAndConstants_NB_r13_setup_n311_r13 n311_r13_,
      RLF_TimersAndConstants_NB_r13_setup_t311_v1350 t311_v1350_,
      RLF_TimersAndConstants_NB_r13_setup_t301_v1530 t301_v1530_,
      RLF_TimersAndConstants_NB_r13_setup_t311_v1530 t311_v1530_
   ) {
      super();
      t301_r13 = t301_r13_;
      t310_r13 = t310_r13_;
      n310_r13 = n310_r13_;
      t311_r13 = t311_r13_;
      n311_r13 = n311_r13_;
      t311_v1350 = t311_v1350_;
      t301_v1530 = t301_v1530_;
      t311_v1530 = t311_v1530_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public RLF_TimersAndConstants_NB_r13_setup (
      RLF_TimersAndConstants_NB_r13_setup_t301_r13 t301_r13_,
      RLF_TimersAndConstants_NB_r13_setup_t310_r13 t310_r13_,
      RLF_TimersAndConstants_NB_r13_setup_n310_r13 n310_r13_,
      RLF_TimersAndConstants_NB_r13_setup_t311_r13 t311_r13_,
      RLF_TimersAndConstants_NB_r13_setup_n311_r13 n311_r13_
   ) {
      super();
      t301_r13 = t301_r13_;
      t310_r13 = t310_r13_;
      n310_r13 = n310_r13_;
      t311_r13 = t311_r13_;
      n311_r13 = n311_r13_;
   }

   public void init () {
      t301_r13 = null;
      t310_r13 = null;
      n310_r13 = null;
      t311_r13 = null;
      n311_r13 = null;
      t311_v1350 = null;
      t301_v1530 = null;
      t311_v1530 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 9; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return t301_r13;
         case 1: return t310_r13;
         case 2: return n310_r13;
         case 3: return t311_r13;
         case 4: return n311_r13;
         case 5: return t311_v1350;
         case 6: return t301_v1530;
         case 7: return t311_v1530;
         case 8: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "t301-r13";
         case 1: return "t310-r13";
         case 2: return "n310-r13";
         case 3: return "t311-r13";
         case 4: return "n311-r13";
         case 5: return "t311-v1350";
         case 6: return "t301-v1530";
         case 7: return "t311-v1530";
         case 8: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      // decode t301_r13

      buffer.getContext().eventDispatcher.startElement("t301_r13", -1);

      {
         int tval = RLF_TimersAndConstants_NB_r13_setup_t301_r13.decodeEnumValue (buffer);
         t301_r13 = RLF_TimersAndConstants_NB_r13_setup_t301_r13.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("t301_r13", -1);

      // decode t310_r13

      buffer.getContext().eventDispatcher.startElement("t310_r13", -1);

      {
         int tval = RLF_TimersAndConstants_NB_r13_setup_t310_r13.decodeEnumValue (buffer);
         t310_r13 = RLF_TimersAndConstants_NB_r13_setup_t310_r13.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("t310_r13", -1);

      // decode n310_r13

      buffer.getContext().eventDispatcher.startElement("n310_r13", -1);

      {
         int tval = RLF_TimersAndConstants_NB_r13_setup_n310_r13.decodeEnumValue (buffer);
         n310_r13 = RLF_TimersAndConstants_NB_r13_setup_n310_r13.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("n310_r13", -1);

      // decode t311_r13

      buffer.getContext().eventDispatcher.startElement("t311_r13", -1);

      {
         int tval = RLF_TimersAndConstants_NB_r13_setup_t311_r13.decodeEnumValue (buffer);
         t311_r13 = RLF_TimersAndConstants_NB_r13_setup_t311_r13.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("t311_r13", -1);

      // decode n311_r13

      buffer.getContext().eventDispatcher.startElement("n311_r13", -1);

      {
         int tval = RLF_TimersAndConstants_NB_r13_setup_n311_r13.decodeEnumValue (buffer);
         n311_r13 = RLF_TimersAndConstants_NB_r13_setup_n311_r13.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("n311_r13", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean t311_v1350Present = buffer.decodeBit ("t311_v1350Present");

            // decode t311_v1350

            if (t311_v1350Present) {
               buffer.getContext().eventDispatcher.startElement("t311_v1350", -1);

               int tval = RLF_TimersAndConstants_NB_r13_setup_t311_v1350.decodeEnumValue (buffer);
               t311_v1350 = RLF_TimersAndConstants_NB_r13_setup_t311_v1350.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("t311_v1350", -1);
            }
            else {
               t311_v1350 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean t301_v1530Present = buffer.decodeBit ("t301_v1530Present");

            boolean t311_v1530Present = buffer.decodeBit ("t311_v1530Present");

            // decode t301_v1530

            if (t301_v1530Present) {
               buffer.getContext().eventDispatcher.startElement("t301_v1530", -1);

               int tval = RLF_TimersAndConstants_NB_r13_setup_t301_v1530.decodeEnumValue (buffer);
               t301_v1530 = RLF_TimersAndConstants_NB_r13_setup_t301_v1530.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("t301_v1530", -1);
            }
            else {
               t301_v1530 = null;
            }

            // decode t311_v1530

            if (t311_v1530Present) {
               buffer.getContext().eventDispatcher.startElement("t311_v1530", -1);

               int tval = RLF_TimersAndConstants_NB_r13_setup_t311_v1530.decodeEnumValue (buffer);
               t311_v1530 = RLF_TimersAndConstants_NB_r13_setup_t311_v1530.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("t311_v1530", -1);
            }
            else {
               t311_v1530 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (t301_r13 != null) t301_r13.print (_sb, "t301_r13", _level+1);
      if (t310_r13 != null) t310_r13.print (_sb, "t310_r13", _level+1);
      if (n310_r13 != null) n310_r13.print (_sb, "n310_r13", _level+1);
      if (t311_r13 != null) t311_r13.print (_sb, "t311_r13", _level+1);
      if (n311_r13 != null) n311_r13.print (_sb, "n311_r13", _level+1);
      if (t311_v1350 != null) t311_v1350.print (_sb, "t311_v1350", _level+1);
      if (t301_v1530 != null) t301_v1530.print (_sb, "t301_v1530", _level+1);
      if (t311_v1530 != null) t311_v1530.print (_sb, "t311_v1530", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
