/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SL_GapPattern_r13 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SL-GapPattern-r13";
   }

   public SL_GapPattern_r13_gapPeriod_r13 gapPeriod_r13 = null;
   public SL_OffsetIndicator_r12 gapOffset_r12;
   public Asn1BitString gapSubframeBitmap_r13;
   public Asn1OpenExt extElem1;

   public SL_GapPattern_r13 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SL_GapPattern_r13 (
      SL_GapPattern_r13_gapPeriod_r13 gapPeriod_r13_,
      SL_OffsetIndicator_r12 gapOffset_r12_,
      Asn1BitString gapSubframeBitmap_r13_
   ) {
      super();
      gapPeriod_r13 = gapPeriod_r13_;
      gapOffset_r12 = gapOffset_r12_;
      gapSubframeBitmap_r13 = gapSubframeBitmap_r13_;
   }

   public void init () {
      gapPeriod_r13 = null;
      gapOffset_r12 = null;
      gapSubframeBitmap_r13 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return gapPeriod_r13;
         case 1: return gapOffset_r12;
         case 2: return gapSubframeBitmap_r13;
         case 3: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "gapPeriod-r13";
         case 1: return "gapOffset-r12";
         case 2: return "gapSubframeBitmap-r13";
         case 3: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // decode gapPeriod_r13

      buffer.getContext().eventDispatcher.startElement("gapPeriod_r13", -1);

      {
         int tval = SL_GapPattern_r13_gapPeriod_r13.decodeEnumValue (buffer);
         gapPeriod_r13 = SL_GapPattern_r13_gapPeriod_r13.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("gapPeriod_r13", -1);

      // decode gapOffset_r12

      buffer.getContext().eventDispatcher.startElement("gapOffset_r12", -1);

      gapOffset_r12 = new SL_OffsetIndicator_r12();
      gapOffset_r12.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("gapOffset_r12", -1);

      // decode gapSubframeBitmap_r13

      buffer.getContext().eventDispatcher.startElement("gapSubframeBitmap_r13", -1);

      gapSubframeBitmap_r13 = new Asn1BitString();
      gapSubframeBitmap_r13.decode (buffer, 1, 10240);

      buffer.invokeCharacters(gapSubframeBitmap_r13.toString());
      buffer.getContext().eventDispatcher.endElement("gapSubframeBitmap_r13", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (gapPeriod_r13 != null) gapPeriod_r13.print (_sb, "gapPeriod_r13", _level+1);
      if (gapOffset_r12 != null) gapOffset_r12.print (_sb, "gapOffset_r12", _level+1);
      if (gapSubframeBitmap_r13 != null) gapSubframeBitmap_r13.print (_sb, "gapSubframeBitmap_r13", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
