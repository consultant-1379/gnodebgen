/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.LPPA_PDU_Descriptions;

import com.objsys.asn1j.runtime.*;
import asn.lte.generated.LPPA_CommonDataTypes.ProcedureCode;
import asn.lte.generated.LPPA_CommonDataTypes.Criticality;
import asn.lte.generated.LPPA_CommonDataTypes.LPPATransactionID;

public class UnsuccessfulOutcome extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPPA_PDU_DescriptionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "UnsuccessfulOutcome";
   }

   public ProcedureCode procedureCode;
   public Criticality criticality = null;
   public LPPATransactionID lppatransactionID;

   /**
    * procedureCode: id-e-CIDMeasurementInitiation
    * criticality: Criticality.reject
    * ASN.1 type: E-CIDMeasurementInitiationFailure
    * Java type: E_CIDMeasurementInitiationFailure
    *
    * procedureCode: id-oTDOAInformationExchange
    * criticality: Criticality.reject
    * ASN.1 type: OTDOAInformationFailure
    * Java type: OTDOAInformationFailure
    *
    * procedureCode: id-uTDOAInformationExchange
    * criticality: Criticality.reject
    * ASN.1 type: UTDOAInformationFailure
    * Java type: UTDOAInformationFailure
    *
    * procedureCode: id-e-CIDMeasurementFailureIndication
    * criticality: Criticality.ignore
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-e-CIDMeasurementReport
    * criticality: Criticality.ignore
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-e-CIDMeasurementTermination
    * criticality: Criticality.reject
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-errorIndication
    * criticality: Criticality.ignore
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-privateMessage
    * criticality: Criticality.ignore
    * ASN.1 type: 
    * Java type: 
    *
    * procedureCode: id-uTDOAInformationUpdate
    * criticality: Criticality.ignore
    * ASN.1 type: 
    * Java type: 
    */
   public Asn1Type value;

   public UnsuccessfulOutcome () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public UnsuccessfulOutcome (
      ProcedureCode procedureCode_,
      Criticality criticality_,
      LPPATransactionID lppatransactionID_,
      Asn1Type value_
   ) {
      super();
      procedureCode = procedureCode_;
      criticality = criticality_;
      lppatransactionID = lppatransactionID_;
      value = value_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public UnsuccessfulOutcome (long procedureCode_,
      Criticality criticality_,
      long lppatransactionID_,
      Asn1Type value_
   ) {
      super();
      procedureCode = new ProcedureCode (procedureCode_);
      criticality = criticality_;
      lppatransactionID = new LPPATransactionID (lppatransactionID_);
      value = value_;
   }

   public void init () {
      procedureCode = null;
      criticality = null;
      lppatransactionID = null;
      value = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return procedureCode;
         case 1: return criticality;
         case 2: return lppatransactionID;
         case 3: return value;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "procedureCode";
         case 1: return "criticality";
         case 2: return "lppatransactionID";
         case 3: return "value";
         default: return null;
      }
   }


   /**
    * Assign fields according to information object e-CIDMeasurementInitiation
    */
   public void setUsing_e_CIDMeasurementInitiation(asn.lte.generated.LPPA_PDU_Contents.E_CIDMeasurementInitiationFailure value) {
      this.procedureCode = new asn.lte.generated.LPPA_CommonDataTypes.ProcedureCode(asn.lte.generated.LPPA_Constants._LPPA_ConstantsValues.id_e_CIDMeasurementInitiation);
      this.criticality = asn.lte.generated.LPPA_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object oTDOAInformationExchange
    */
   public void setUsing_oTDOAInformationExchange(asn.lte.generated.LPPA_PDU_Contents.OTDOAInformationFailure value) {
      this.procedureCode = new asn.lte.generated.LPPA_CommonDataTypes.ProcedureCode(asn.lte.generated.LPPA_Constants._LPPA_ConstantsValues.id_oTDOAInformationExchange);
      this.criticality = asn.lte.generated.LPPA_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object uTDOAInformationExchange
    */
   public void setUsing_uTDOAInformationExchange(asn.lte.generated.LPPA_PDU_Contents.UTDOAInformationFailure value) {
      this.procedureCode = new asn.lte.generated.LPPA_CommonDataTypes.ProcedureCode(asn.lte.generated.LPPA_Constants._LPPA_ConstantsValues.id_uTDOAInformationExchange);
      this.criticality = asn.lte.generated.LPPA_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object e-CIDMeasurementFailureIndication
    */
   public void setUsing_e_CIDMeasurementFailureIndication() {
      this.procedureCode = new asn.lte.generated.LPPA_CommonDataTypes.ProcedureCode(asn.lte.generated.LPPA_Constants._LPPA_ConstantsValues.id_e_CIDMeasurementFailureIndication);
      this.criticality = asn.lte.generated.LPPA_CommonDataTypes.Criticality.ignore();
   }

   /**
    * Assign fields according to information object e-CIDMeasurementReport
    */
   public void setUsing_e_CIDMeasurementReport() {
      this.procedureCode = new asn.lte.generated.LPPA_CommonDataTypes.ProcedureCode(asn.lte.generated.LPPA_Constants._LPPA_ConstantsValues.id_e_CIDMeasurementReport);
      this.criticality = asn.lte.generated.LPPA_CommonDataTypes.Criticality.ignore();
   }

   /**
    * Assign fields according to information object e-CIDMeasurementTermination
    */
   public void setUsing_e_CIDMeasurementTermination() {
      this.procedureCode = new asn.lte.generated.LPPA_CommonDataTypes.ProcedureCode(asn.lte.generated.LPPA_Constants._LPPA_ConstantsValues.id_e_CIDMeasurementTermination);
      this.criticality = asn.lte.generated.LPPA_CommonDataTypes.Criticality.reject();
   }

   /**
    * Assign fields according to information object errorIndication
    */
   public void setUsing_errorIndication() {
      this.procedureCode = new asn.lte.generated.LPPA_CommonDataTypes.ProcedureCode(asn.lte.generated.LPPA_Constants._LPPA_ConstantsValues.id_errorIndication);
      this.criticality = asn.lte.generated.LPPA_CommonDataTypes.Criticality.ignore();
   }

   /**
    * Assign fields according to information object privateMessage
    */
   public void setUsing_privateMessage() {
      this.procedureCode = new asn.lte.generated.LPPA_CommonDataTypes.ProcedureCode(asn.lte.generated.LPPA_Constants._LPPA_ConstantsValues.id_privateMessage);
      this.criticality = asn.lte.generated.LPPA_CommonDataTypes.Criticality.ignore();
   }

   /**
    * Assign fields according to information object uTDOAInformationUpdate
    */
   public void setUsing_uTDOAInformationUpdate() {
      this.procedureCode = new asn.lte.generated.LPPA_CommonDataTypes.ProcedureCode(asn.lte.generated.LPPA_Constants._LPPA_ConstantsValues.id_uTDOAInformationUpdate);
      this.criticality = asn.lte.generated.LPPA_CommonDataTypes.Criticality.ignore();
   }

   /**
    * Get value of value with type set according to information object e-CIDMeasurementInitiation
    */
   public asn.lte.generated.LPPA_PDU_Contents.E_CIDMeasurementInitiationFailure getValueFor_e_CIDMeasurementInitiation() {
      return (asn.lte.generated.LPPA_PDU_Contents.E_CIDMeasurementInitiationFailure) this.value;
   }

   /**
    * Get value of value with type set according to information object oTDOAInformationExchange
    */
   public asn.lte.generated.LPPA_PDU_Contents.OTDOAInformationFailure getValueFor_oTDOAInformationExchange() {
      return (asn.lte.generated.LPPA_PDU_Contents.OTDOAInformationFailure) this.value;
   }

   /**
    * Get value of value with type set according to information object uTDOAInformationExchange
    */
   public asn.lte.generated.LPPA_PDU_Contents.UTDOAInformationFailure getValueFor_uTDOAInformationExchange() {
      return (asn.lte.generated.LPPA_PDU_Contents.UTDOAInformationFailure) this.value;
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode procedureCode

      buffer.getContext().eventDispatcher.startElement("procedureCode", -1);

      procedureCode = new ProcedureCode();
      procedureCode.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("procedureCode", -1);

      // decode criticality

      buffer.getContext().eventDispatcher.startElement("criticality", -1);

      {
         int tval = Criticality.decodeEnumValue (buffer);
         criticality = Criticality.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("criticality", -1);

      // decode lppatransactionID

      buffer.getContext().eventDispatcher.startElement("lppatransactionID", -1);

      lppatransactionID = new LPPATransactionID();
      lppatransactionID.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("lppatransactionID", -1);

      // decode value

      buffer.getContext().eventDispatcher.startElement("value", -1);

      value = new Asn1OpenType();
      value.decode (buffer);

      buffer.invokeCharacters(value.toString());
      buffer.getContext().eventDispatcher.endElement("value", -1);

      checkTC (true, buffer.getLazyOpenTypeDecode() ? 0 : 2, buffer.isAligned(), buffer.getContext().eventDispatcher);
   }

   public void checkTC(boolean decode, int decodeOpenTypeFlag, boolean aligned, Asn1NamedEventDispatcher eventDispatcher)
      throws Asn1Exception
   {
      /* check procedureCode */
      LPPA_ELEMENTARY_PROCEDURE _index = null;
      for(int i=0; i < _LPPA_PDU_DescriptionsValues.LPPA_ELEMENTARY_PROCEDURES.length; i++) {
         if(_LPPA_PDU_DescriptionsValues.LPPA_ELEMENTARY_PROCEDURES[i].procedureCode.equals(procedureCode)) {
            _index = _LPPA_PDU_DescriptionsValues.LPPA_ELEMENTARY_PROCEDURES[i];
            break;
         }
      }
      if (null == _index) {
         return;
      }

      /* check value */
      if( decode && decodeOpenTypeFlag >=1 ) {
         if(_index.UnsuccessfulOutcome != null)
         {
            try {
               Asn1PerDecodeBuffer buffer = new Asn1PerDecodeBuffer(((Asn1OpenType)value).value, aligned);
               buffer.setLazyOpenTypeDecode(decodeOpenTypeFlag == 1);
               if (eventDispatcher != null)buffer.getContext().eventDispatcher = eventDispatcher;
               buffer.getContext().eventDispatcher.startElement("value", -1);

               String className = _index.UnsuccessfulOutcome.actualType.getName();
               if (className.lastIndexOf('.') > 0) {
                  className = className.substring (className.lastIndexOf (".")+1);
               }
               buffer.getContext().eventDispatcher.startElement(className, -1);

               value = Asn1Type.decode(buffer, _index.UnsuccessfulOutcome);

               buffer.getContext().eventDispatcher.endElement(className, -1);

               buffer.getContext().eventDispatcher.endElement("value", -1);
            }
            catch (java.io.IOException e) {
               throw new Asn1Exception(e.toString());
            }
         }
      }

      /* use -strict option to validate the "criticality" element */
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (procedureCode.value == 2) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-e-CIDMeasurementInitiation\n");
      }
      else if (procedureCode.value == 6) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-oTDOAInformationExchange\n");
      }
      else if (procedureCode.value == 7) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-uTDOAInformationExchange\n");
      }
      else if (procedureCode.value == 3) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-e-CIDMeasurementFailureIndication\n");
      }
      else if (procedureCode.value == 4) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-e-CIDMeasurementReport\n");
      }
      else if (procedureCode.value == 5) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-e-CIDMeasurementTermination\n");
      }
      else if (procedureCode.value == 0) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-errorIndication\n");
      }
      else if (procedureCode.value == 1) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-privateMessage\n");
      }
      else if (procedureCode.value == 8) {
         indent (_sb, _level+1);
         _sb.append("procedureCode = id-uTDOAInformationUpdate\n");
      }

      if (criticality != null) {
         criticality.print (_sb, "criticality", _level+1);
      }
      if (lppatransactionID != null) {
         lppatransactionID.print (_sb, "lppatransactionID", _level+1);
      }
      if (value != null) {
         String tmpName = value.getAsn1TypeName();
         if (tmpName != null && tmpName != "")  {
            tmpName = "value" + " (" + tmpName + ")";
         }
         else  {
            tmpName = "value";
         }
         value.print (_sb, tmpName, _level+1);
      }
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
