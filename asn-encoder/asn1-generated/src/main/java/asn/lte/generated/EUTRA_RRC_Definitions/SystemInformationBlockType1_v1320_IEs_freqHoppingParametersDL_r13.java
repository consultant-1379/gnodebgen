/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SystemInformationBlockType1_v1320_IEs_freqHoppingParametersDL_r13 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public SystemInformationBlockType1_v1320_IEs_freqHoppingParametersDL_r13_mpdcch_pdsch_HoppingNB_r13 mpdcch_pdsch_HoppingNB_r13 = null;  // optional
   public SystemInformationBlockType1_v1320_IEs_freqHoppingParametersDL_r13_interval_DLHoppingConfigCommonModeA_r13 interval_DLHoppingConfigCommonModeA_r13;  // optional
   public SystemInformationBlockType1_v1320_IEs_freqHoppingParametersDL_r13_interval_DLHoppingConfigCommonModeB_r13 interval_DLHoppingConfigCommonModeB_r13;  // optional
   public Asn1Integer mpdcch_pdsch_HoppingOffset_r13;  // optional

   public SystemInformationBlockType1_v1320_IEs_freqHoppingParametersDL_r13 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SystemInformationBlockType1_v1320_IEs_freqHoppingParametersDL_r13 (
      SystemInformationBlockType1_v1320_IEs_freqHoppingParametersDL_r13_mpdcch_pdsch_HoppingNB_r13 mpdcch_pdsch_HoppingNB_r13_,
      SystemInformationBlockType1_v1320_IEs_freqHoppingParametersDL_r13_interval_DLHoppingConfigCommonModeA_r13 interval_DLHoppingConfigCommonModeA_r13_,
      SystemInformationBlockType1_v1320_IEs_freqHoppingParametersDL_r13_interval_DLHoppingConfigCommonModeB_r13 interval_DLHoppingConfigCommonModeB_r13_,
      Asn1Integer mpdcch_pdsch_HoppingOffset_r13_
   ) {
      super();
      mpdcch_pdsch_HoppingNB_r13 = mpdcch_pdsch_HoppingNB_r13_;
      interval_DLHoppingConfigCommonModeA_r13 = interval_DLHoppingConfigCommonModeA_r13_;
      interval_DLHoppingConfigCommonModeB_r13 = interval_DLHoppingConfigCommonModeB_r13_;
      mpdcch_pdsch_HoppingOffset_r13 = mpdcch_pdsch_HoppingOffset_r13_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SystemInformationBlockType1_v1320_IEs_freqHoppingParametersDL_r13 (SystemInformationBlockType1_v1320_IEs_freqHoppingParametersDL_r13_mpdcch_pdsch_HoppingNB_r13 mpdcch_pdsch_HoppingNB_r13_,
      SystemInformationBlockType1_v1320_IEs_freqHoppingParametersDL_r13_interval_DLHoppingConfigCommonModeA_r13 interval_DLHoppingConfigCommonModeA_r13_,
      SystemInformationBlockType1_v1320_IEs_freqHoppingParametersDL_r13_interval_DLHoppingConfigCommonModeB_r13 interval_DLHoppingConfigCommonModeB_r13_,
      long mpdcch_pdsch_HoppingOffset_r13_
   ) {
      super();
      mpdcch_pdsch_HoppingNB_r13 = mpdcch_pdsch_HoppingNB_r13_;
      interval_DLHoppingConfigCommonModeA_r13 = interval_DLHoppingConfigCommonModeA_r13_;
      interval_DLHoppingConfigCommonModeB_r13 = interval_DLHoppingConfigCommonModeB_r13_;
      mpdcch_pdsch_HoppingOffset_r13 = new Asn1Integer (mpdcch_pdsch_HoppingOffset_r13_);
   }

   public void init () {
      mpdcch_pdsch_HoppingNB_r13 = null;
      interval_DLHoppingConfigCommonModeA_r13 = null;
      interval_DLHoppingConfigCommonModeB_r13 = null;
      mpdcch_pdsch_HoppingOffset_r13 = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return mpdcch_pdsch_HoppingNB_r13;
         case 1: return interval_DLHoppingConfigCommonModeA_r13;
         case 2: return interval_DLHoppingConfigCommonModeB_r13;
         case 3: return mpdcch_pdsch_HoppingOffset_r13;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "mpdcch-pdsch-HoppingNB-r13";
         case 1: return "interval-DLHoppingConfigCommonModeA-r13";
         case 2: return "interval-DLHoppingConfigCommonModeB-r13";
         case 3: return "mpdcch-pdsch-HoppingOffset-r13";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean mpdcch_pdsch_HoppingNB_r13Present = buffer.decodeBit ("mpdcch_pdsch_HoppingNB_r13Present");
      boolean interval_DLHoppingConfigCommonModeA_r13Present = buffer.decodeBit ("interval_DLHoppingConfigCommonModeA_r13Present");
      boolean interval_DLHoppingConfigCommonModeB_r13Present = buffer.decodeBit ("interval_DLHoppingConfigCommonModeB_r13Present");
      boolean mpdcch_pdsch_HoppingOffset_r13Present = buffer.decodeBit ("mpdcch_pdsch_HoppingOffset_r13Present");

      // decode mpdcch_pdsch_HoppingNB_r13

      if (mpdcch_pdsch_HoppingNB_r13Present) {
         buffer.getContext().eventDispatcher.startElement("mpdcch_pdsch_HoppingNB_r13", -1);

         int tval = SystemInformationBlockType1_v1320_IEs_freqHoppingParametersDL_r13_mpdcch_pdsch_HoppingNB_r13.decodeEnumValue (buffer);
         mpdcch_pdsch_HoppingNB_r13 = SystemInformationBlockType1_v1320_IEs_freqHoppingParametersDL_r13_mpdcch_pdsch_HoppingNB_r13.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("mpdcch_pdsch_HoppingNB_r13", -1);
      }
      else {
         mpdcch_pdsch_HoppingNB_r13 = null;
      }

      // decode interval_DLHoppingConfigCommonModeA_r13

      if (interval_DLHoppingConfigCommonModeA_r13Present) {
         buffer.getContext().eventDispatcher.startElement("interval_DLHoppingConfigCommonModeA_r13", -1);

         interval_DLHoppingConfigCommonModeA_r13 = new SystemInformationBlockType1_v1320_IEs_freqHoppingParametersDL_r13_interval_DLHoppingConfigCommonModeA_r13();
         interval_DLHoppingConfigCommonModeA_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("interval_DLHoppingConfigCommonModeA_r13", -1);
      }
      else {
         interval_DLHoppingConfigCommonModeA_r13 = null;
      }

      // decode interval_DLHoppingConfigCommonModeB_r13

      if (interval_DLHoppingConfigCommonModeB_r13Present) {
         buffer.getContext().eventDispatcher.startElement("interval_DLHoppingConfigCommonModeB_r13", -1);

         interval_DLHoppingConfigCommonModeB_r13 = new SystemInformationBlockType1_v1320_IEs_freqHoppingParametersDL_r13_interval_DLHoppingConfigCommonModeB_r13();
         interval_DLHoppingConfigCommonModeB_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("interval_DLHoppingConfigCommonModeB_r13", -1);
      }
      else {
         interval_DLHoppingConfigCommonModeB_r13 = null;
      }

      // decode mpdcch_pdsch_HoppingOffset_r13

      if (mpdcch_pdsch_HoppingOffset_r13Present) {
         buffer.getContext().eventDispatcher.startElement("mpdcch_pdsch_HoppingOffset_r13", -1);

         mpdcch_pdsch_HoppingOffset_r13 = new Asn1Integer();
         mpdcch_pdsch_HoppingOffset_r13.decode (buffer, 1, 16);

         buffer.invokeCharacters(mpdcch_pdsch_HoppingOffset_r13.toString());
         buffer.getContext().eventDispatcher.endElement("mpdcch_pdsch_HoppingOffset_r13", -1);
      }
      else {
         mpdcch_pdsch_HoppingOffset_r13 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (mpdcch_pdsch_HoppingNB_r13 != null) mpdcch_pdsch_HoppingNB_r13.print (_sb, "mpdcch_pdsch_HoppingNB_r13", _level+1);
      if (interval_DLHoppingConfigCommonModeA_r13 != null) interval_DLHoppingConfigCommonModeA_r13.print (_sb, "interval_DLHoppingConfigCommonModeA_r13", _level+1);
      if (interval_DLHoppingConfigCommonModeB_r13 != null) interval_DLHoppingConfigCommonModeB_r13.print (_sb, "interval_DLHoppingConfigCommonModeB_r13", _level+1);
      if (mpdcch_pdsch_HoppingOffset_r13 != null) mpdcch_pdsch_HoppingOffset_r13.print (_sb, "mpdcch_pdsch_HoppingOffset_r13", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
