/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.X2AP_IEs;

import com.objsys.asn1j.runtime.*;

public class AreaScopeOfQMC extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_X2AP_IEsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "AreaScopeOfQMC";
   }

   // Choice element identifier constants
   public final static byte _CELLBASED = 1;
   public final static byte _TABASED = 2;
   public final static byte _TAIBASED = 3;
   public final static byte _PLMNAREABASED = 4;
   public final static byte _EXTELEM1 = 5;

   public AreaScopeOfQMC () {
      super();
   }

   public AreaScopeOfQMC (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _CELLBASED: return "cellBased";
      case _TABASED: return "tABased";
      case _TAIBASED: return "tAIBased";
      case _PLMNAREABASED: return "pLMNAreaBased";
      case _EXTELEM1: return "...";
      default: return "UNDEFINED";
      }
   }

   public void set_cellBased (CellBasedQMC value) {
      setElement (_CELLBASED, value);
   }

   public void set_tABased (TABasedQMC value) {
      setElement (_TABASED, value);
   }

   public void set_tAIBased (TAIBasedQMC value) {
      setElement (_TAIBASED, value);
   }

   public void set_pLMNAreaBased (PLMNAreaBasedQMC value) {
      setElement (_PLMNAREABASED, value);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      Asn1PerDecodeBuffer savedBuffer = null;
      boolean extbit = buffer.decodeBit ("extbit");

      if (!extbit) {
         int idx = (int) buffer.decodeConsWholeNumber (4, "index");
         choiceID = idx + 1;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         switch (idx) {
            // cellBased
            case 0: { 
               CellBasedQMC cellBased;
               element = cellBased = new CellBasedQMC();
               cellBased.decode (buffer);
               break;
            }

            // tABased
            case 1: { 
               TABasedQMC tABased;
               element = tABased = new TABasedQMC();
               tABased.decode (buffer);
               break;
            }

            // tAIBased
            case 2: { 
               TAIBasedQMC tAIBased;
               element = tAIBased = new TAIBasedQMC();
               tAIBased.decode (buffer);
               break;
            }

            // pLMNAreaBased
            case 3: { 
               PLMNAreaBasedQMC pLMNAreaBased;
               element = pLMNAreaBased = new PLMNAreaBasedQMC();
               pLMNAreaBased.decode (buffer);
               break;
            }

            default:
            throw new Asn1InvalidChoiceOptionException (buffer, idx);
         }
      }
      else {
         int idx = (int) buffer.decodeSmallNonNegWholeNumber ();
         choiceID = idx + 5;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         buffer.byteAlign();

         Asn1OpenType openType = new Asn1OpenType ();
         openType.decode (buffer);

         setElement (_EXTELEM1, openType);
         buffer.invokeCharacters (openType.toString());
      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);

      if (savedBuffer != null) {
         buffer = savedBuffer;
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (element != null) {
         element.print (_sb, getElemName(), _level+1);
      }
      indent (_sb, _level);
      _sb.append("}\n");
   }

}
