/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SSB_InfoNcell_r16 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SSB-InfoNcell-r16";
   }

   public PhysCellId physicalCellId_r16;
   public SSB_Index ssb_IndexNcell_r16;  // optional
   public SSB_Configuration_r16 ssb_Configuration_r16;  // optional

   public SSB_InfoNcell_r16 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SSB_InfoNcell_r16 (
      PhysCellId physicalCellId_r16_,
      SSB_Index ssb_IndexNcell_r16_,
      SSB_Configuration_r16 ssb_Configuration_r16_
   ) {
      super();
      physicalCellId_r16 = physicalCellId_r16_;
      ssb_IndexNcell_r16 = ssb_IndexNcell_r16_;
      ssb_Configuration_r16 = ssb_Configuration_r16_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SSB_InfoNcell_r16 (
      PhysCellId physicalCellId_r16_
   ) {
      super();
      physicalCellId_r16 = physicalCellId_r16_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SSB_InfoNcell_r16 (long physicalCellId_r16_,
      long ssb_IndexNcell_r16_,
      SSB_Configuration_r16 ssb_Configuration_r16_
   ) {
      super();
      physicalCellId_r16 = new PhysCellId (physicalCellId_r16_);
      ssb_IndexNcell_r16 = new SSB_Index (ssb_IndexNcell_r16_);
      ssb_Configuration_r16 = ssb_Configuration_r16_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public SSB_InfoNcell_r16 (
      long physicalCellId_r16_
   ) {
      super();
      physicalCellId_r16 = new PhysCellId (physicalCellId_r16_);
   }

   public void init () {
      physicalCellId_r16 = null;
      ssb_IndexNcell_r16 = null;
      ssb_Configuration_r16 = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return physicalCellId_r16;
         case 1: return ssb_IndexNcell_r16;
         case 2: return ssb_Configuration_r16;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "physicalCellId-r16";
         case 1: return "ssb-IndexNcell-r16";
         case 2: return "ssb-Configuration-r16";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean ssb_IndexNcell_r16Present = buffer.decodeBit ("ssb_IndexNcell_r16Present");
      boolean ssb_Configuration_r16Present = buffer.decodeBit ("ssb_Configuration_r16Present");

      // decode physicalCellId_r16

      buffer.getContext().eventDispatcher.startElement("physicalCellId_r16", -1);

      physicalCellId_r16 = new PhysCellId();
      physicalCellId_r16.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("physicalCellId_r16", -1);

      // decode ssb_IndexNcell_r16

      if (ssb_IndexNcell_r16Present) {
         buffer.getContext().eventDispatcher.startElement("ssb_IndexNcell_r16", -1);

         ssb_IndexNcell_r16 = new SSB_Index();
         ssb_IndexNcell_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ssb_IndexNcell_r16", -1);
      }
      else {
         ssb_IndexNcell_r16 = null;
      }

      // decode ssb_Configuration_r16

      if (ssb_Configuration_r16Present) {
         buffer.getContext().eventDispatcher.startElement("ssb_Configuration_r16", -1);

         ssb_Configuration_r16 = new SSB_Configuration_r16();
         ssb_Configuration_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ssb_Configuration_r16", -1);
      }
      else {
         ssb_Configuration_r16 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (physicalCellId_r16 != null) physicalCellId_r16.print (_sb, "physicalCellId_r16", _level+1);
      if (ssb_IndexNcell_r16 != null) ssb_IndexNcell_r16.print (_sb, "ssb_IndexNcell_r16", _level+1);
      if (ssb_Configuration_r16 != null) ssb_Configuration_r16.print (_sb, "ssb_Configuration_r16", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
