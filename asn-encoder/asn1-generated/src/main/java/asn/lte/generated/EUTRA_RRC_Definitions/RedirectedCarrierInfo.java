/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class RedirectedCarrierInfo extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "RedirectedCarrierInfo";
   }

   // Choice element identifier constants
   public final static byte _EUTRA = 1;
   public final static byte _GERAN = 2;
   public final static byte _UTRA_FDD = 3;
   public final static byte _UTRA_TDD = 4;
   public final static byte _CDMA2000_HRPD = 5;
   public final static byte _CDMA2000_1XRTT = 6;
   public final static byte _UTRA_TDD_R10 = 7;
   public final static byte _NR_R15 = 8;
   public final static byte _EXTELEM1 = 9;

   public RedirectedCarrierInfo () {
      super();
   }

   public RedirectedCarrierInfo (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _EUTRA: return "eutra";
      case _GERAN: return "geran";
      case _UTRA_FDD: return "utra_FDD";
      case _UTRA_TDD: return "utra_TDD";
      case _CDMA2000_HRPD: return "cdma2000_HRPD";
      case _CDMA2000_1XRTT: return "cdma2000_1xRTT";
      case _UTRA_TDD_R10: return "utra_TDD_r10";
      case _NR_R15: return "nr_r15";
      case _EXTELEM1: return "...";
      default: return "UNDEFINED";
      }
   }

   public void set_eutra (ARFCN_ValueEUTRA value) {
      setElement (_EUTRA, value);
   }

   public void set_geran (CarrierFreqsGERAN value) {
      setElement (_GERAN, value);
   }

   public void set_utra_FDD (ARFCN_ValueUTRA value) {
      setElement (_UTRA_FDD, value);
   }

   public void set_utra_TDD (ARFCN_ValueUTRA value) {
      setElement (_UTRA_TDD, value);
   }

   public void set_cdma2000_HRPD (CarrierFreqCDMA2000 value) {
      setElement (_CDMA2000_HRPD, value);
   }

   public void set_cdma2000_1xRTT (CarrierFreqCDMA2000 value) {
      setElement (_CDMA2000_1XRTT, value);
   }

   public void set_utra_TDD_r10 (CarrierFreqListUTRA_TDD_r10 value) {
      setElement (_UTRA_TDD_R10, value);
   }

   public void set_nr_r15 (CarrierInfoNR_r15 value) {
      setElement (_NR_R15, value);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      Asn1PerDecodeBuffer savedBuffer = null;
      boolean extbit = buffer.decodeBit ("extbit");

      if (!extbit) {
         int idx = (int) buffer.decodeConsWholeNumber (6, "index");
         choiceID = idx + 1;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         switch (idx) {
            // eutra
            case 0: { 
               ARFCN_ValueEUTRA eutra;
               element = eutra = new ARFCN_ValueEUTRA();
               eutra.decode (buffer);
               break;
            }

            // geran
            case 1: { 
               CarrierFreqsGERAN geran;
               element = geran = new CarrierFreqsGERAN();
               geran.decode (buffer);
               break;
            }

            // utra_FDD
            case 2: { 
               ARFCN_ValueUTRA utra_FDD;
               element = utra_FDD = new ARFCN_ValueUTRA();
               utra_FDD.decode (buffer);
               break;
            }

            // utra_TDD
            case 3: { 
               ARFCN_ValueUTRA utra_TDD;
               element = utra_TDD = new ARFCN_ValueUTRA();
               utra_TDD.decode (buffer);
               break;
            }

            // cdma2000_HRPD
            case 4: { 
               CarrierFreqCDMA2000 cdma2000_HRPD;
               element = cdma2000_HRPD = new CarrierFreqCDMA2000();
               cdma2000_HRPD.decode (buffer);
               break;
            }

            // cdma2000_1xRTT
            case 5: { 
               CarrierFreqCDMA2000 cdma2000_1xRTT;
               element = cdma2000_1xRTT = new CarrierFreqCDMA2000();
               cdma2000_1xRTT.decode (buffer);
               break;
            }

            default:
            throw new Asn1InvalidChoiceOptionException (buffer, idx);
         }
      }
      else {
         int idx = (int) buffer.decodeSmallNonNegWholeNumber ();
         choiceID = idx + 7;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         buffer.byteAlign();

         Asn1OpenType openType = new Asn1OpenType ();
         openType.decode (buffer);

         savedBuffer = buffer;
         buffer = new Asn1PerDecodeBuffer (openType.value, savedBuffer.isAligned());
         buffer.setEventHandlerList (savedBuffer);

         switch (idx) {
            // utra_TDD_r10
            case 0: { 
               CarrierFreqListUTRA_TDD_r10 utra_TDD_r10;
               element = utra_TDD_r10 = new CarrierFreqListUTRA_TDD_r10();
               utra_TDD_r10.decode (buffer);
               break;
            }

            // nr_r15
            case 1: { 
               CarrierInfoNR_r15 nr_r15;
               element = nr_r15 = new CarrierInfoNR_r15();
               nr_r15.decode (buffer);
               break;
            }

            // extElem1
            case 2: { 
               Asn1OpenType extElem1;
               element = extElem1 = new Asn1OpenType();
               extElem1.decode (buffer);

               buffer.invokeCharacters(extElem1.toString());
               break;
            }

            default:
               setElement (_EXTELEM1, openType);
               buffer.invokeCharacters (openType.toString());
         }

      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);

      if (savedBuffer != null) {
         buffer = savedBuffer;
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (element != null) {
         element.print (_sb, getElemName(), _level+1);
      }
      indent (_sb, _level);
      _sb.append("}\n");
   }

}
