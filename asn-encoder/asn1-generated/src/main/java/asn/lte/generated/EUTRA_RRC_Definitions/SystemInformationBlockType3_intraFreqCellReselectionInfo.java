/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SystemInformationBlockType3_intraFreqCellReselectionInfo extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public Q_RxLevMin q_RxLevMin;
   public P_Max p_Max;  // optional
   public ReselectionThreshold s_IntraSearch;  // optional
   public AllowedMeasBandwidth allowedMeasBandwidth = null;  // optional
   public PresenceAntennaPort1 presenceAntennaPort1;
   public NeighCellConfig neighCellConfig;
   public T_Reselection t_ReselectionEUTRA;
   public SpeedStateScaleFactors t_ReselectionEUTRA_SF;  // optional

   public SystemInformationBlockType3_intraFreqCellReselectionInfo () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SystemInformationBlockType3_intraFreqCellReselectionInfo (
      Q_RxLevMin q_RxLevMin_,
      P_Max p_Max_,
      ReselectionThreshold s_IntraSearch_,
      AllowedMeasBandwidth allowedMeasBandwidth_,
      PresenceAntennaPort1 presenceAntennaPort1_,
      NeighCellConfig neighCellConfig_,
      T_Reselection t_ReselectionEUTRA_,
      SpeedStateScaleFactors t_ReselectionEUTRA_SF_
   ) {
      super();
      q_RxLevMin = q_RxLevMin_;
      p_Max = p_Max_;
      s_IntraSearch = s_IntraSearch_;
      allowedMeasBandwidth = allowedMeasBandwidth_;
      presenceAntennaPort1 = presenceAntennaPort1_;
      neighCellConfig = neighCellConfig_;
      t_ReselectionEUTRA = t_ReselectionEUTRA_;
      t_ReselectionEUTRA_SF = t_ReselectionEUTRA_SF_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SystemInformationBlockType3_intraFreqCellReselectionInfo (
      Q_RxLevMin q_RxLevMin_,
      PresenceAntennaPort1 presenceAntennaPort1_,
      NeighCellConfig neighCellConfig_,
      T_Reselection t_ReselectionEUTRA_
   ) {
      super();
      q_RxLevMin = q_RxLevMin_;
      presenceAntennaPort1 = presenceAntennaPort1_;
      neighCellConfig = neighCellConfig_;
      t_ReselectionEUTRA = t_ReselectionEUTRA_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SystemInformationBlockType3_intraFreqCellReselectionInfo (long q_RxLevMin_,
      long p_Max_,
      long s_IntraSearch_,
      AllowedMeasBandwidth allowedMeasBandwidth_,
      boolean presenceAntennaPort1_,
      NeighCellConfig neighCellConfig_,
      long t_ReselectionEUTRA_,
      SpeedStateScaleFactors t_ReselectionEUTRA_SF_
   ) {
      super();
      q_RxLevMin = new Q_RxLevMin (q_RxLevMin_);
      p_Max = new P_Max (p_Max_);
      s_IntraSearch = new ReselectionThreshold (s_IntraSearch_);
      allowedMeasBandwidth = allowedMeasBandwidth_;
      presenceAntennaPort1 = new PresenceAntennaPort1 (presenceAntennaPort1_);
      neighCellConfig = neighCellConfig_;
      t_ReselectionEUTRA = new T_Reselection (t_ReselectionEUTRA_);
      t_ReselectionEUTRA_SF = t_ReselectionEUTRA_SF_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public SystemInformationBlockType3_intraFreqCellReselectionInfo (
      long q_RxLevMin_,
      boolean presenceAntennaPort1_,
      NeighCellConfig neighCellConfig_,
      long t_ReselectionEUTRA_
   ) {
      super();
      q_RxLevMin = new Q_RxLevMin (q_RxLevMin_);
      presenceAntennaPort1 = new PresenceAntennaPort1 (presenceAntennaPort1_);
      neighCellConfig = neighCellConfig_;
      t_ReselectionEUTRA = new T_Reselection (t_ReselectionEUTRA_);
   }

   public void init () {
      q_RxLevMin = null;
      p_Max = null;
      s_IntraSearch = null;
      allowedMeasBandwidth = null;
      presenceAntennaPort1 = null;
      neighCellConfig = null;
      t_ReselectionEUTRA = null;
      t_ReselectionEUTRA_SF = null;
   }

   public int getElementCount() { return 8; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return q_RxLevMin;
         case 1: return p_Max;
         case 2: return s_IntraSearch;
         case 3: return allowedMeasBandwidth;
         case 4: return presenceAntennaPort1;
         case 5: return neighCellConfig;
         case 6: return t_ReselectionEUTRA;
         case 7: return t_ReselectionEUTRA_SF;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "q-RxLevMin";
         case 1: return "p-Max";
         case 2: return "s-IntraSearch";
         case 3: return "allowedMeasBandwidth";
         case 4: return "presenceAntennaPort1";
         case 5: return "neighCellConfig";
         case 6: return "t-ReselectionEUTRA";
         case 7: return "t-ReselectionEUTRA-SF";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean p_MaxPresent = buffer.decodeBit ("p_MaxPresent");
      boolean s_IntraSearchPresent = buffer.decodeBit ("s_IntraSearchPresent");
      boolean allowedMeasBandwidthPresent = buffer.decodeBit ("allowedMeasBandwidthPresent");
      boolean t_ReselectionEUTRA_SFPresent = buffer.decodeBit ("t_ReselectionEUTRA_SFPresent");

      // decode q_RxLevMin

      buffer.getContext().eventDispatcher.startElement("q_RxLevMin", -1);

      q_RxLevMin = new Q_RxLevMin();
      q_RxLevMin.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("q_RxLevMin", -1);

      // decode p_Max

      if (p_MaxPresent) {
         buffer.getContext().eventDispatcher.startElement("p_Max", -1);

         p_Max = new P_Max();
         p_Max.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("p_Max", -1);
      }
      else {
         p_Max = null;
      }

      // decode s_IntraSearch

      if (s_IntraSearchPresent) {
         buffer.getContext().eventDispatcher.startElement("s_IntraSearch", -1);

         s_IntraSearch = new ReselectionThreshold();
         s_IntraSearch.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("s_IntraSearch", -1);
      }
      else {
         s_IntraSearch = null;
      }

      // decode allowedMeasBandwidth

      if (allowedMeasBandwidthPresent) {
         buffer.getContext().eventDispatcher.startElement("allowedMeasBandwidth", -1);

         int tval = AllowedMeasBandwidth.decodeEnumValue (buffer);
         allowedMeasBandwidth = AllowedMeasBandwidth.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("allowedMeasBandwidth", -1);
      }
      else {
         allowedMeasBandwidth = null;
      }

      // decode presenceAntennaPort1

      buffer.getContext().eventDispatcher.startElement("presenceAntennaPort1", -1);

      presenceAntennaPort1 = new PresenceAntennaPort1();
      presenceAntennaPort1.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("presenceAntennaPort1", -1);

      // decode neighCellConfig

      buffer.getContext().eventDispatcher.startElement("neighCellConfig", -1);

      neighCellConfig = new NeighCellConfig();
      neighCellConfig.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("neighCellConfig", -1);

      // decode t_ReselectionEUTRA

      buffer.getContext().eventDispatcher.startElement("t_ReselectionEUTRA", -1);

      t_ReselectionEUTRA = new T_Reselection();
      t_ReselectionEUTRA.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("t_ReselectionEUTRA", -1);

      // decode t_ReselectionEUTRA_SF

      if (t_ReselectionEUTRA_SFPresent) {
         buffer.getContext().eventDispatcher.startElement("t_ReselectionEUTRA_SF", -1);

         t_ReselectionEUTRA_SF = new SpeedStateScaleFactors();
         t_ReselectionEUTRA_SF.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("t_ReselectionEUTRA_SF", -1);
      }
      else {
         t_ReselectionEUTRA_SF = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (q_RxLevMin != null) q_RxLevMin.print (_sb, "q_RxLevMin", _level+1);
      if (p_Max != null) p_Max.print (_sb, "p_Max", _level+1);
      if (s_IntraSearch != null) s_IntraSearch.print (_sb, "s_IntraSearch", _level+1);
      if (allowedMeasBandwidth != null) allowedMeasBandwidth.print (_sb, "allowedMeasBandwidth", _level+1);
      if (presenceAntennaPort1 != null) presenceAntennaPort1.print (_sb, "presenceAntennaPort1", _level+1);
      if (neighCellConfig != null) neighCellConfig.print (_sb, "neighCellConfig", _level+1);
      if (t_ReselectionEUTRA != null) t_ReselectionEUTRA.print (_sb, "t_ReselectionEUTRA", _level+1);
      if (t_ReselectionEUTRA_SF != null) t_ReselectionEUTRA_SF.print (_sb, "t_ReselectionEUTRA_SF", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
