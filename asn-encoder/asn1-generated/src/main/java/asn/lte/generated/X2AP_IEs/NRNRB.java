/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.X2AP_IEs;

import com.objsys.asn1j.runtime.*;

public class NRNRB extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_X2AP_IEsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "NRNRB";
   }

   // Integer constants for switch-case
   public static final int _NRB11 = 0;
   public static final int _NRB18 = 1;
   public static final int _NRB24 = 2;
   public static final int _NRB25 = 3;
   public static final int _NRB31 = 4;
   public static final int _NRB32 = 5;
   public static final int _NRB38 = 6;
   public static final int _NRB51 = 7;
   public static final int _NRB52 = 8;
   public static final int _NRB65 = 9;
   public static final int _NRB66 = 10;
   public static final int _NRB78 = 11;
   public static final int _NRB79 = 12;
   public static final int _NRB93 = 13;
   public static final int _NRB106 = 14;
   public static final int _NRB107 = 15;
   public static final int _NRB121 = 16;
   public static final int _NRB132 = 17;
   public static final int _NRB133 = 18;
   public static final int _NRB135 = 19;
   public static final int _NRB160 = 20;
   public static final int _NRB162 = 21;
   public static final int _NRB189 = 22;
   public static final int _NRB216 = 23;
   public static final int _NRB217 = 24;
   public static final int _NRB245 = 25;
   public static final int _NRB264 = 26;
   public static final int _NRB270 = 27;
   public static final int _NRB273 = 28;

   // Singleton instances of NRNRB
   protected static final NRNRB _nrb11 = new NRNRB(0);
   protected static final NRNRB _nrb18 = new NRNRB(1);
   protected static final NRNRB _nrb24 = new NRNRB(2);
   protected static final NRNRB _nrb25 = new NRNRB(3);
   protected static final NRNRB _nrb31 = new NRNRB(4);
   protected static final NRNRB _nrb32 = new NRNRB(5);
   protected static final NRNRB _nrb38 = new NRNRB(6);
   protected static final NRNRB _nrb51 = new NRNRB(7);
   protected static final NRNRB _nrb52 = new NRNRB(8);
   protected static final NRNRB _nrb65 = new NRNRB(9);
   protected static final NRNRB _nrb66 = new NRNRB(10);
   protected static final NRNRB _nrb78 = new NRNRB(11);
   protected static final NRNRB _nrb79 = new NRNRB(12);
   protected static final NRNRB _nrb93 = new NRNRB(13);
   protected static final NRNRB _nrb106 = new NRNRB(14);
   protected static final NRNRB _nrb107 = new NRNRB(15);
   protected static final NRNRB _nrb121 = new NRNRB(16);
   protected static final NRNRB _nrb132 = new NRNRB(17);
   protected static final NRNRB _nrb133 = new NRNRB(18);
   protected static final NRNRB _nrb135 = new NRNRB(19);
   protected static final NRNRB _nrb160 = new NRNRB(20);
   protected static final NRNRB _nrb162 = new NRNRB(21);
   protected static final NRNRB _nrb189 = new NRNRB(22);
   protected static final NRNRB _nrb216 = new NRNRB(23);
   protected static final NRNRB _nrb217 = new NRNRB(24);
   protected static final NRNRB _nrb245 = new NRNRB(25);
   protected static final NRNRB _nrb264 = new NRNRB(26);
   protected static final NRNRB _nrb270 = new NRNRB(27);
   protected static final NRNRB _nrb273 = new NRNRB(28);
   private static NRNRB __undefined = new NRNRB(-999);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    *   7
    *   8
    *   9
    *   10
    *   11
    *   12
    *   13
    *   14
    *   15
    *   16
    *   17
    *   18
    *   19
    *   20
    *   21
    *   22
    *   23
    *   24
    *   25
    *   26
    *   27
    *   28
    */
   protected NRNRB (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for nrb11.
    */
   public static NRNRB nrb11() {
      return _nrb11;
   }

   /**
    * Singleton accessor method for nrb18.
    */
   public static NRNRB nrb18() {
      return _nrb18;
   }

   /**
    * Singleton accessor method for nrb24.
    */
   public static NRNRB nrb24() {
      return _nrb24;
   }

   /**
    * Singleton accessor method for nrb25.
    */
   public static NRNRB nrb25() {
      return _nrb25;
   }

   /**
    * Singleton accessor method for nrb31.
    */
   public static NRNRB nrb31() {
      return _nrb31;
   }

   /**
    * Singleton accessor method for nrb32.
    */
   public static NRNRB nrb32() {
      return _nrb32;
   }

   /**
    * Singleton accessor method for nrb38.
    */
   public static NRNRB nrb38() {
      return _nrb38;
   }

   /**
    * Singleton accessor method for nrb51.
    */
   public static NRNRB nrb51() {
      return _nrb51;
   }

   /**
    * Singleton accessor method for nrb52.
    */
   public static NRNRB nrb52() {
      return _nrb52;
   }

   /**
    * Singleton accessor method for nrb65.
    */
   public static NRNRB nrb65() {
      return _nrb65;
   }

   /**
    * Singleton accessor method for nrb66.
    */
   public static NRNRB nrb66() {
      return _nrb66;
   }

   /**
    * Singleton accessor method for nrb78.
    */
   public static NRNRB nrb78() {
      return _nrb78;
   }

   /**
    * Singleton accessor method for nrb79.
    */
   public static NRNRB nrb79() {
      return _nrb79;
   }

   /**
    * Singleton accessor method for nrb93.
    */
   public static NRNRB nrb93() {
      return _nrb93;
   }

   /**
    * Singleton accessor method for nrb106.
    */
   public static NRNRB nrb106() {
      return _nrb106;
   }

   /**
    * Singleton accessor method for nrb107.
    */
   public static NRNRB nrb107() {
      return _nrb107;
   }

   /**
    * Singleton accessor method for nrb121.
    */
   public static NRNRB nrb121() {
      return _nrb121;
   }

   /**
    * Singleton accessor method for nrb132.
    */
   public static NRNRB nrb132() {
      return _nrb132;
   }

   /**
    * Singleton accessor method for nrb133.
    */
   public static NRNRB nrb133() {
      return _nrb133;
   }

   /**
    * Singleton accessor method for nrb135.
    */
   public static NRNRB nrb135() {
      return _nrb135;
   }

   /**
    * Singleton accessor method for nrb160.
    */
   public static NRNRB nrb160() {
      return _nrb160;
   }

   /**
    * Singleton accessor method for nrb162.
    */
   public static NRNRB nrb162() {
      return _nrb162;
   }

   /**
    * Singleton accessor method for nrb189.
    */
   public static NRNRB nrb189() {
      return _nrb189;
   }

   /**
    * Singleton accessor method for nrb216.
    */
   public static NRNRB nrb216() {
      return _nrb216;
   }

   /**
    * Singleton accessor method for nrb217.
    */
   public static NRNRB nrb217() {
      return _nrb217;
   }

   /**
    * Singleton accessor method for nrb245.
    */
   public static NRNRB nrb245() {
      return _nrb245;
   }

   /**
    * Singleton accessor method for nrb264.
    */
   public static NRNRB nrb264() {
      return _nrb264;
   }

   /**
    * Singleton accessor method for nrb270.
    */
   public static NRNRB nrb270() {
      return _nrb270;
   }

   /**
    * Singleton accessor method for nrb273.
    */
   public static NRNRB nrb273() {
      return _nrb273;
   }

   /** Undefined value. */
   protected static NRNRB __undefined_() { return __undefined; }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return NRNRB.valueOf( NRNRB.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static NRNRB valueOf (int _value)
   {
      switch ((int)_value) {
         case 0: return nrb11();
         case 1: return nrb18();
         case 2: return nrb24();
         case 3: return nrb25();
         case 4: return nrb31();
         case 5: return nrb32();
         case 6: return nrb38();
         case 7: return nrb51();
         case 8: return nrb52();
         case 9: return nrb65();
         case 10: return nrb66();
         case 11: return nrb78();
         case 12: return nrb79();
         case 13: return nrb93();
         case 14: return nrb106();
         case 15: return nrb107();
         case 16: return nrb121();
         case 17: return nrb132();
         case 18: return nrb133();
         case 19: return nrb135();
         case 20: return nrb160();
         case 21: return nrb162();
         case 22: return nrb189();
         case 23: return nrb216();
         case 24: return nrb217();
         case 25: return nrb245();
         case 26: return nrb264();
         case 27: return nrb270();
         case 28: return nrb273();
         default: return __undefined_();
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      boolean extbit = buffer.decodeBit ("extbit");

      if (extbit) {
         ui = buffer.decodeSmallNonNegWholeNumber ();

         return 0x7fffffff;
      }
      else {
         ui = (int) buffer.decodeConsWholeNumber (29);

         switch (ui) {
            case 0: ret =  0; break;
            case 1: ret =  1; break;
            case 2: ret =  2; break;
            case 3: ret =  3; break;
            case 4: ret =  4; break;
            case 5: ret =  5; break;
            case 6: ret =  6; break;
            case 7: ret =  7; break;
            case 8: ret =  8; break;
            case 9: ret =  9; break;
            case 10: ret =  10; break;
            case 11: ret =  11; break;
            case 12: ret =  12; break;
            case 13: ret =  13; break;
            case 14: ret =  14; break;
            case 15: ret =  15; break;
            case 16: ret =  16; break;
            case 17: ret =  17; break;
            case 18: ret =  18; break;
            case 19: ret =  19; break;
            case 20: ret =  20; break;
            case 21: ret =  21; break;
            case 22: ret =  22; break;
            case 23: ret =  23; break;
            case 24: ret =  24; break;
            case 25: ret =  25; break;
            case 26: ret =  26; break;
            case 27: ret =  27; break;
            case 28: ret =  28; break;
            default: throw new Asn1InvalidEnumException (ui);
         }
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (NRNRB.valueOf(ret).toString());

      return ret;
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("nrb11");
         case 1: return ("nrb18");
         case 2: return ("nrb24");
         case 3: return ("nrb25");
         case 4: return ("nrb31");
         case 5: return ("nrb32");
         case 6: return ("nrb38");
         case 7: return ("nrb51");
         case 8: return ("nrb52");
         case 9: return ("nrb65");
         case 10: return ("nrb66");
         case 11: return ("nrb78");
         case 12: return ("nrb79");
         case 13: return ("nrb93");
         case 14: return ("nrb106");
         case 15: return ("nrb107");
         case 16: return ("nrb121");
         case 17: return ("nrb132");
         case 18: return ("nrb133");
         case 19: return ("nrb135");
         case 20: return ("nrb160");
         case 21: return ("nrb162");
         case 22: return ("nrb189");
         case 23: return ("nrb216");
         case 24: return ("nrb217");
         case 25: return ("nrb245");
         case 26: return ("nrb264");
         case 27: return ("nrb270");
         case 28: return ("nrb273");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
