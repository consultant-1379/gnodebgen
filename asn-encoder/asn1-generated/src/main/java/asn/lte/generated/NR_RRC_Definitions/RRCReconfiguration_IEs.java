/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class RRCReconfiguration_IEs extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "RRCReconfiguration-IEs";
   }

   public RadioBearerConfig radioBearerConfig;  // optional
   public CellGroupConfig secondaryCellGroup;  // optional
   public MeasConfig measConfig;  // optional
   public Asn1OctetString lateNonCriticalExtension;  // optional
   public RRCReconfiguration_v1530_IEs nonCriticalExtension;  // optional

   public RRCReconfiguration_IEs () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public RRCReconfiguration_IEs (
      RadioBearerConfig radioBearerConfig_,
      CellGroupConfig secondaryCellGroup_,
      MeasConfig measConfig_,
      Asn1OctetString lateNonCriticalExtension_,
      RRCReconfiguration_v1530_IEs nonCriticalExtension_
   ) {
      super();
      radioBearerConfig = radioBearerConfig_;
      secondaryCellGroup = secondaryCellGroup_;
      measConfig = measConfig_;
      lateNonCriticalExtension = lateNonCriticalExtension_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public RRCReconfiguration_IEs (RadioBearerConfig radioBearerConfig_,
      CellGroupConfig secondaryCellGroup_,
      MeasConfig measConfig_,
      byte[] lateNonCriticalExtension_,
      RRCReconfiguration_v1530_IEs nonCriticalExtension_
   ) {
      super();
      radioBearerConfig = radioBearerConfig_;
      secondaryCellGroup = secondaryCellGroup_;
      measConfig = measConfig_;
      lateNonCriticalExtension = new Asn1OctetString (lateNonCriticalExtension_);
      nonCriticalExtension = nonCriticalExtension_;
   }

   public void init () {
      radioBearerConfig = null;
      secondaryCellGroup = null;
      measConfig = null;
      lateNonCriticalExtension = null;
      nonCriticalExtension = null;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return radioBearerConfig;
         case 1: return secondaryCellGroup;
         case 2: return measConfig;
         case 3: return lateNonCriticalExtension;
         case 4: return nonCriticalExtension;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "radioBearerConfig";
         case 1: return "secondaryCellGroup";
         case 2: return "measConfig";
         case 3: return "lateNonCriticalExtension";
         case 4: return "nonCriticalExtension";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean radioBearerConfigPresent = buffer.decodeBit ("radioBearerConfigPresent");
      boolean secondaryCellGroupPresent = buffer.decodeBit ("secondaryCellGroupPresent");
      boolean measConfigPresent = buffer.decodeBit ("measConfigPresent");
      boolean lateNonCriticalExtensionPresent = buffer.decodeBit ("lateNonCriticalExtensionPresent");
      boolean nonCriticalExtensionPresent = buffer.decodeBit ("nonCriticalExtensionPresent");

      // decode radioBearerConfig

      if (radioBearerConfigPresent) {
         buffer.getContext().eventDispatcher.startElement("radioBearerConfig", -1);

         radioBearerConfig = new RadioBearerConfig();
         radioBearerConfig.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("radioBearerConfig", -1);
      }
      else {
         radioBearerConfig = null;
      }

      // decode secondaryCellGroup

      if (secondaryCellGroupPresent) {
         buffer.getContext().eventDispatcher.startElement("secondaryCellGroup", -1);

         Asn1OctetString secondaryCellGroup_outer = new Asn1OctetString();
         secondaryCellGroup_outer.decode (buffer);
         if (secondaryCellGroup_outer.value == null) throw new Asn1Exception("contained type's complete encoding is empty");
         Asn1PerDecodeBuffer savedBuffer = buffer;
         buffer = new Asn1PerDecodeBuffer( secondaryCellGroup_outer.value, buffer.isAligned());
         buffer.setEventHandlerList( savedBuffer );
         secondaryCellGroup = new CellGroupConfig();
         secondaryCellGroup.decode (buffer);
         buffer = savedBuffer;
         buffer.getContext().eventDispatcher.endElement("secondaryCellGroup", -1);
      }
      else {
         secondaryCellGroup = null;
      }

      // decode measConfig

      if (measConfigPresent) {
         buffer.getContext().eventDispatcher.startElement("measConfig", -1);

         measConfig = new MeasConfig();
         measConfig.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("measConfig", -1);
      }
      else {
         measConfig = null;
      }

      // decode lateNonCriticalExtension

      if (lateNonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("lateNonCriticalExtension", -1);

         lateNonCriticalExtension = new Asn1OctetString();
         lateNonCriticalExtension.decode (buffer);

         buffer.invokeCharacters(lateNonCriticalExtension.toString());
         buffer.getContext().eventDispatcher.endElement("lateNonCriticalExtension", -1);
      }
      else {
         lateNonCriticalExtension = null;
      }

      // decode nonCriticalExtension

      if (nonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension = new RRCReconfiguration_v1530_IEs();
         nonCriticalExtension.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }
      else {
         nonCriticalExtension = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (radioBearerConfig != null) radioBearerConfig.print (_sb, "radioBearerConfig", _level+1);
      if (secondaryCellGroup != null) secondaryCellGroup.print (_sb, "secondaryCellGroup", _level+1);
      if (measConfig != null) measConfig.print (_sb, "measConfig", _level+1);
      if (lateNonCriticalExtension != null) lateNonCriticalExtension.print (_sb, "lateNonCriticalExtension", _level+1);
      if (nonCriticalExtension != null) nonCriticalExtension.print (_sb, "nonCriticalExtension", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
