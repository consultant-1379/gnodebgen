/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SystemInformationBlockType16_r11 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SystemInformationBlockType16-r11";
   }

   public SystemInformationBlockType16_r11_timeInfo_r11 timeInfo_r11;  // optional
   public Asn1OctetString lateNonCriticalExtension;  // optional
   public boolean mV2ExtPresent;
   public TimeReferenceInfo_r15 timeReferenceInfo_r15;  // optional
   public Asn1OpenExt extElem1;

   public SystemInformationBlockType16_r11 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SystemInformationBlockType16_r11 (
      SystemInformationBlockType16_r11_timeInfo_r11 timeInfo_r11_,
      Asn1OctetString lateNonCriticalExtension_,
      TimeReferenceInfo_r15 timeReferenceInfo_r15_
   ) {
      super();
      timeInfo_r11 = timeInfo_r11_;
      lateNonCriticalExtension = lateNonCriticalExtension_;
      timeReferenceInfo_r15 = timeReferenceInfo_r15_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SystemInformationBlockType16_r11 (SystemInformationBlockType16_r11_timeInfo_r11 timeInfo_r11_,
      byte[] lateNonCriticalExtension_,
      TimeReferenceInfo_r15 timeReferenceInfo_r15_
   ) {
      super();
      timeInfo_r11 = timeInfo_r11_;
      lateNonCriticalExtension = new Asn1OctetString (lateNonCriticalExtension_);
      timeReferenceInfo_r15 = timeReferenceInfo_r15_;
   }

   public void init () {
      timeInfo_r11 = null;
      lateNonCriticalExtension = null;
      timeReferenceInfo_r15 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return timeInfo_r11;
         case 1: return lateNonCriticalExtension;
         case 2: return timeReferenceInfo_r15;
         case 3: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "timeInfo-r11";
         case 1: return "lateNonCriticalExtension";
         case 2: return "timeReferenceInfo-r15";
         case 3: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean timeInfo_r11Present = buffer.decodeBit ("timeInfo_r11Present");
      boolean lateNonCriticalExtensionPresent = buffer.decodeBit ("lateNonCriticalExtensionPresent");

      // decode timeInfo_r11

      if (timeInfo_r11Present) {
         buffer.getContext().eventDispatcher.startElement("timeInfo_r11", -1);

         timeInfo_r11 = new SystemInformationBlockType16_r11_timeInfo_r11();
         timeInfo_r11.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("timeInfo_r11", -1);
      }
      else {
         timeInfo_r11 = null;
      }

      // decode lateNonCriticalExtension

      if (lateNonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("lateNonCriticalExtension", -1);

         lateNonCriticalExtension = new Asn1OctetString();
         lateNonCriticalExtension.decode (buffer);

         buffer.invokeCharacters(lateNonCriticalExtension.toString());
         buffer.getContext().eventDispatcher.endElement("lateNonCriticalExtension", -1);
      }
      else {
         lateNonCriticalExtension = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean timeReferenceInfo_r15Present = buffer.decodeBit ("timeReferenceInfo_r15Present");

            // decode timeReferenceInfo_r15

            if (timeReferenceInfo_r15Present) {
               buffer.getContext().eventDispatcher.startElement("timeReferenceInfo_r15", -1);

               timeReferenceInfo_r15 = new TimeReferenceInfo_r15();
               timeReferenceInfo_r15.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("timeReferenceInfo_r15", -1);
            }
            else {
               timeReferenceInfo_r15 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (timeInfo_r11 != null) timeInfo_r11.print (_sb, "timeInfo_r11", _level+1);
      if (lateNonCriticalExtension != null) lateNonCriticalExtension.print (_sb, "lateNonCriticalExtension", _level+1);
      if (timeReferenceInfo_r15 != null) timeReferenceInfo_r15.print (_sb, "timeReferenceInfo_r15", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
