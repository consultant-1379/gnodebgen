/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SL_V2X_ConfigDedicated_r14 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SL-V2X-ConfigDedicated-r14";
   }

   public SL_V2X_ConfigDedicated_r14_commTxResources_r14 commTxResources_r14;  // optional
   public SL_InterFreqInfoListV2X_r14 v2x_InterFreqInfoList_r14;  // optional
   public SL_Priority_r13 thresSL_TxPrioritization_r14;  // optional
   public SL_TypeTxSync_r14 typeTxSync_r14 = null;  // optional
   public SL_CBR_CommonTxConfigList_r14 cbr_DedicatedTxConfigList_r14;  // optional
   public boolean mV2ExtPresent;
   public SL_V2X_ConfigDedicated_r14_commTxResources_v1530 commTxResources_v1530;  // optional
   public SL_V2X_PacketDuplicationConfig_r15 v2x_PacketDuplicationConfig_r15;  // optional
   public SL_V2X_SyncFreqList_r15 syncFreqList_r15;  // optional
   public SL_V2X_ConfigDedicated_r14_slss_TxMultiFreq_r15 slss_TxMultiFreq_r15 = null;  // optional
   public boolean mV3ExtPresent;
   public SL_V2X_ConfigDedicated_r14_slss_TxDisabled_r15 slss_TxDisabled_r15 = null;  // optional
   public Asn1OpenExt extElem1;

   public SL_V2X_ConfigDedicated_r14 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SL_V2X_ConfigDedicated_r14 (
      SL_V2X_ConfigDedicated_r14_commTxResources_r14 commTxResources_r14_,
      SL_InterFreqInfoListV2X_r14 v2x_InterFreqInfoList_r14_,
      SL_Priority_r13 thresSL_TxPrioritization_r14_,
      SL_TypeTxSync_r14 typeTxSync_r14_,
      SL_CBR_CommonTxConfigList_r14 cbr_DedicatedTxConfigList_r14_,
      SL_V2X_ConfigDedicated_r14_commTxResources_v1530 commTxResources_v1530_,
      SL_V2X_PacketDuplicationConfig_r15 v2x_PacketDuplicationConfig_r15_,
      SL_V2X_SyncFreqList_r15 syncFreqList_r15_,
      SL_V2X_ConfigDedicated_r14_slss_TxMultiFreq_r15 slss_TxMultiFreq_r15_,
      SL_V2X_ConfigDedicated_r14_slss_TxDisabled_r15 slss_TxDisabled_r15_
   ) {
      super();
      commTxResources_r14 = commTxResources_r14_;
      v2x_InterFreqInfoList_r14 = v2x_InterFreqInfoList_r14_;
      thresSL_TxPrioritization_r14 = thresSL_TxPrioritization_r14_;
      typeTxSync_r14 = typeTxSync_r14_;
      cbr_DedicatedTxConfigList_r14 = cbr_DedicatedTxConfigList_r14_;
      commTxResources_v1530 = commTxResources_v1530_;
      v2x_PacketDuplicationConfig_r15 = v2x_PacketDuplicationConfig_r15_;
      syncFreqList_r15 = syncFreqList_r15_;
      slss_TxMultiFreq_r15 = slss_TxMultiFreq_r15_;
      slss_TxDisabled_r15 = slss_TxDisabled_r15_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SL_V2X_ConfigDedicated_r14 (SL_V2X_ConfigDedicated_r14_commTxResources_r14 commTxResources_r14_,
      SL_InterFreqInfoListV2X_r14 v2x_InterFreqInfoList_r14_,
      long thresSL_TxPrioritization_r14_,
      SL_TypeTxSync_r14 typeTxSync_r14_,
      SL_CBR_CommonTxConfigList_r14 cbr_DedicatedTxConfigList_r14_,
      SL_V2X_ConfigDedicated_r14_commTxResources_v1530 commTxResources_v1530_,
      SL_V2X_PacketDuplicationConfig_r15 v2x_PacketDuplicationConfig_r15_,
      SL_V2X_SyncFreqList_r15 syncFreqList_r15_,
      SL_V2X_ConfigDedicated_r14_slss_TxMultiFreq_r15 slss_TxMultiFreq_r15_,
      SL_V2X_ConfigDedicated_r14_slss_TxDisabled_r15 slss_TxDisabled_r15_
   ) {
      super();
      commTxResources_r14 = commTxResources_r14_;
      v2x_InterFreqInfoList_r14 = v2x_InterFreqInfoList_r14_;
      thresSL_TxPrioritization_r14 = new SL_Priority_r13 (thresSL_TxPrioritization_r14_);
      typeTxSync_r14 = typeTxSync_r14_;
      cbr_DedicatedTxConfigList_r14 = cbr_DedicatedTxConfigList_r14_;
      commTxResources_v1530 = commTxResources_v1530_;
      v2x_PacketDuplicationConfig_r15 = v2x_PacketDuplicationConfig_r15_;
      syncFreqList_r15 = syncFreqList_r15_;
      slss_TxMultiFreq_r15 = slss_TxMultiFreq_r15_;
      slss_TxDisabled_r15 = slss_TxDisabled_r15_;
   }

   public void init () {
      commTxResources_r14 = null;
      v2x_InterFreqInfoList_r14 = null;
      thresSL_TxPrioritization_r14 = null;
      typeTxSync_r14 = null;
      cbr_DedicatedTxConfigList_r14 = null;
      commTxResources_v1530 = null;
      v2x_PacketDuplicationConfig_r15 = null;
      syncFreqList_r15 = null;
      slss_TxMultiFreq_r15 = null;
      slss_TxDisabled_r15 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 11; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return commTxResources_r14;
         case 1: return v2x_InterFreqInfoList_r14;
         case 2: return thresSL_TxPrioritization_r14;
         case 3: return typeTxSync_r14;
         case 4: return cbr_DedicatedTxConfigList_r14;
         case 5: return commTxResources_v1530;
         case 6: return v2x_PacketDuplicationConfig_r15;
         case 7: return syncFreqList_r15;
         case 8: return slss_TxMultiFreq_r15;
         case 9: return slss_TxDisabled_r15;
         case 10: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "commTxResources-r14";
         case 1: return "v2x-InterFreqInfoList-r14";
         case 2: return "thresSL-TxPrioritization-r14";
         case 3: return "typeTxSync-r14";
         case 4: return "cbr-DedicatedTxConfigList-r14";
         case 5: return "commTxResources-v1530";
         case 6: return "v2x-PacketDuplicationConfig-r15";
         case 7: return "syncFreqList-r15";
         case 8: return "slss-TxMultiFreq-r15";
         case 9: return "slss-TxDisabled-r15";
         case 10: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean commTxResources_r14Present = buffer.decodeBit ("commTxResources_r14Present");
      boolean v2x_InterFreqInfoList_r14Present = buffer.decodeBit ("v2x_InterFreqInfoList_r14Present");
      boolean thresSL_TxPrioritization_r14Present = buffer.decodeBit ("thresSL_TxPrioritization_r14Present");
      boolean typeTxSync_r14Present = buffer.decodeBit ("typeTxSync_r14Present");
      boolean cbr_DedicatedTxConfigList_r14Present = buffer.decodeBit ("cbr_DedicatedTxConfigList_r14Present");

      // decode commTxResources_r14

      if (commTxResources_r14Present) {
         buffer.getContext().eventDispatcher.startElement("commTxResources_r14", -1);

         commTxResources_r14 = new SL_V2X_ConfigDedicated_r14_commTxResources_r14();
         commTxResources_r14.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("commTxResources_r14", -1);
      }
      else {
         commTxResources_r14 = null;
      }

      // decode v2x_InterFreqInfoList_r14

      if (v2x_InterFreqInfoList_r14Present) {
         buffer.getContext().eventDispatcher.startElement("v2x_InterFreqInfoList_r14", -1);

         v2x_InterFreqInfoList_r14 = new SL_InterFreqInfoListV2X_r14();
         v2x_InterFreqInfoList_r14.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("v2x_InterFreqInfoList_r14", -1);
      }
      else {
         v2x_InterFreqInfoList_r14 = null;
      }

      // decode thresSL_TxPrioritization_r14

      if (thresSL_TxPrioritization_r14Present) {
         buffer.getContext().eventDispatcher.startElement("thresSL_TxPrioritization_r14", -1);

         thresSL_TxPrioritization_r14 = new SL_Priority_r13();
         thresSL_TxPrioritization_r14.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("thresSL_TxPrioritization_r14", -1);
      }
      else {
         thresSL_TxPrioritization_r14 = null;
      }

      // decode typeTxSync_r14

      if (typeTxSync_r14Present) {
         buffer.getContext().eventDispatcher.startElement("typeTxSync_r14", -1);

         int tval = SL_TypeTxSync_r14.decodeEnumValue (buffer);
         typeTxSync_r14 = SL_TypeTxSync_r14.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("typeTxSync_r14", -1);
      }
      else {
         typeTxSync_r14 = null;
      }

      // decode cbr_DedicatedTxConfigList_r14

      if (cbr_DedicatedTxConfigList_r14Present) {
         buffer.getContext().eventDispatcher.startElement("cbr_DedicatedTxConfigList_r14", -1);

         cbr_DedicatedTxConfigList_r14 = new SL_CBR_CommonTxConfigList_r14();
         cbr_DedicatedTxConfigList_r14.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("cbr_DedicatedTxConfigList_r14", -1);
      }
      else {
         cbr_DedicatedTxConfigList_r14 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean commTxResources_v1530Present = buffer.decodeBit ("commTxResources_v1530Present");

            boolean v2x_PacketDuplicationConfig_r15Present = buffer.decodeBit ("v2x_PacketDuplicationConfig_r15Present");

            boolean syncFreqList_r15Present = buffer.decodeBit ("syncFreqList_r15Present");

            boolean slss_TxMultiFreq_r15Present = buffer.decodeBit ("slss_TxMultiFreq_r15Present");

            // decode commTxResources_v1530

            if (commTxResources_v1530Present) {
               buffer.getContext().eventDispatcher.startElement("commTxResources_v1530", -1);

               commTxResources_v1530 = new SL_V2X_ConfigDedicated_r14_commTxResources_v1530();
               commTxResources_v1530.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("commTxResources_v1530", -1);
            }
            else {
               commTxResources_v1530 = null;
            }

            // decode v2x_PacketDuplicationConfig_r15

            if (v2x_PacketDuplicationConfig_r15Present) {
               buffer.getContext().eventDispatcher.startElement("v2x_PacketDuplicationConfig_r15", -1);

               v2x_PacketDuplicationConfig_r15 = new SL_V2X_PacketDuplicationConfig_r15();
               v2x_PacketDuplicationConfig_r15.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("v2x_PacketDuplicationConfig_r15", -1);
            }
            else {
               v2x_PacketDuplicationConfig_r15 = null;
            }

            // decode syncFreqList_r15

            if (syncFreqList_r15Present) {
               buffer.getContext().eventDispatcher.startElement("syncFreqList_r15", -1);

               syncFreqList_r15 = new SL_V2X_SyncFreqList_r15();
               syncFreqList_r15.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("syncFreqList_r15", -1);
            }
            else {
               syncFreqList_r15 = null;
            }

            // decode slss_TxMultiFreq_r15

            if (slss_TxMultiFreq_r15Present) {
               buffer.getContext().eventDispatcher.startElement("slss_TxMultiFreq_r15", -1);

               int tval = SL_V2X_ConfigDedicated_r14_slss_TxMultiFreq_r15.decodeEnumValue (buffer);
               slss_TxMultiFreq_r15 = SL_V2X_ConfigDedicated_r14_slss_TxMultiFreq_r15.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("slss_TxMultiFreq_r15", -1);
            }
            else {
               slss_TxMultiFreq_r15 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean slss_TxDisabled_r15Present = buffer.decodeBit ("slss_TxDisabled_r15Present");

            // decode slss_TxDisabled_r15

            if (slss_TxDisabled_r15Present) {
               buffer.getContext().eventDispatcher.startElement("slss_TxDisabled_r15", -1);

               int tval = SL_V2X_ConfigDedicated_r14_slss_TxDisabled_r15.decodeEnumValue (buffer);
               slss_TxDisabled_r15 = SL_V2X_ConfigDedicated_r14_slss_TxDisabled_r15.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("slss_TxDisabled_r15", -1);
            }
            else {
               slss_TxDisabled_r15 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (commTxResources_r14 != null) commTxResources_r14.print (_sb, "commTxResources_r14", _level+1);
      if (v2x_InterFreqInfoList_r14 != null) v2x_InterFreqInfoList_r14.print (_sb, "v2x_InterFreqInfoList_r14", _level+1);
      if (thresSL_TxPrioritization_r14 != null) thresSL_TxPrioritization_r14.print (_sb, "thresSL_TxPrioritization_r14", _level+1);
      if (typeTxSync_r14 != null) typeTxSync_r14.print (_sb, "typeTxSync_r14", _level+1);
      if (cbr_DedicatedTxConfigList_r14 != null) cbr_DedicatedTxConfigList_r14.print (_sb, "cbr_DedicatedTxConfigList_r14", _level+1);
      if (commTxResources_v1530 != null) commTxResources_v1530.print (_sb, "commTxResources_v1530", _level+1);
      if (v2x_PacketDuplicationConfig_r15 != null) v2x_PacketDuplicationConfig_r15.print (_sb, "v2x_PacketDuplicationConfig_r15", _level+1);
      if (syncFreqList_r15 != null) syncFreqList_r15.print (_sb, "syncFreqList_r15", _level+1);
      if (slss_TxMultiFreq_r15 != null) slss_TxMultiFreq_r15.print (_sb, "slss_TxMultiFreq_r15", _level+1);
      if (slss_TxDisabled_r15 != null) slss_TxDisabled_r15.print (_sb, "slss_TxDisabled_r15", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
