/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class CSI_AssociatedReportConfigInfo extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CSI-AssociatedReportConfigInfo";
   }

   public CSI_ReportConfigId reportConfigId;
   public CSI_AssociatedReportConfigInfo_resourcesForChannel resourcesForChannel;
   public Asn1Integer csi_IM_ResourcesForInterference;  // optional
   public Asn1Integer nzp_CSI_RS_ResourcesForInterference;  // optional
   public Asn1OpenExt extElem1;

   public CSI_AssociatedReportConfigInfo () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CSI_AssociatedReportConfigInfo (
      CSI_ReportConfigId reportConfigId_,
      CSI_AssociatedReportConfigInfo_resourcesForChannel resourcesForChannel_,
      Asn1Integer csi_IM_ResourcesForInterference_,
      Asn1Integer nzp_CSI_RS_ResourcesForInterference_
   ) {
      super();
      reportConfigId = reportConfigId_;
      resourcesForChannel = resourcesForChannel_;
      csi_IM_ResourcesForInterference = csi_IM_ResourcesForInterference_;
      nzp_CSI_RS_ResourcesForInterference = nzp_CSI_RS_ResourcesForInterference_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public CSI_AssociatedReportConfigInfo (
      CSI_ReportConfigId reportConfigId_,
      CSI_AssociatedReportConfigInfo_resourcesForChannel resourcesForChannel_
   ) {
      super();
      reportConfigId = reportConfigId_;
      resourcesForChannel = resourcesForChannel_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public CSI_AssociatedReportConfigInfo (long reportConfigId_,
      CSI_AssociatedReportConfigInfo_resourcesForChannel resourcesForChannel_,
      long csi_IM_ResourcesForInterference_,
      long nzp_CSI_RS_ResourcesForInterference_
   ) {
      super();
      reportConfigId = new CSI_ReportConfigId (reportConfigId_);
      resourcesForChannel = resourcesForChannel_;
      csi_IM_ResourcesForInterference = new Asn1Integer (csi_IM_ResourcesForInterference_);
      nzp_CSI_RS_ResourcesForInterference = new Asn1Integer (nzp_CSI_RS_ResourcesForInterference_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public CSI_AssociatedReportConfigInfo (
      long reportConfigId_,
      CSI_AssociatedReportConfigInfo_resourcesForChannel resourcesForChannel_
   ) {
      super();
      reportConfigId = new CSI_ReportConfigId (reportConfigId_);
      resourcesForChannel = resourcesForChannel_;
   }

   public void init () {
      reportConfigId = null;
      resourcesForChannel = null;
      csi_IM_ResourcesForInterference = null;
      nzp_CSI_RS_ResourcesForInterference = null;
      extElem1 = null;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return reportConfigId;
         case 1: return resourcesForChannel;
         case 2: return csi_IM_ResourcesForInterference;
         case 3: return nzp_CSI_RS_ResourcesForInterference;
         case 4: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "reportConfigId";
         case 1: return "resourcesForChannel";
         case 2: return "csi-IM-ResourcesForInterference";
         case 3: return "nzp-CSI-RS-ResourcesForInterference";
         case 4: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean csi_IM_ResourcesForInterferencePresent = buffer.decodeBit ("csi_IM_ResourcesForInterferencePresent");
      boolean nzp_CSI_RS_ResourcesForInterferencePresent = buffer.decodeBit ("nzp_CSI_RS_ResourcesForInterferencePresent");

      // decode reportConfigId

      buffer.getContext().eventDispatcher.startElement("reportConfigId", -1);

      reportConfigId = new CSI_ReportConfigId();
      reportConfigId.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("reportConfigId", -1);

      // decode resourcesForChannel

      buffer.getContext().eventDispatcher.startElement("resourcesForChannel", -1);

      resourcesForChannel = new CSI_AssociatedReportConfigInfo_resourcesForChannel();
      resourcesForChannel.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("resourcesForChannel", -1);

      // decode csi_IM_ResourcesForInterference

      if (csi_IM_ResourcesForInterferencePresent) {
         buffer.getContext().eventDispatcher.startElement("csi_IM_ResourcesForInterference", -1);

         csi_IM_ResourcesForInterference = new Asn1Integer();
         csi_IM_ResourcesForInterference.decode (buffer, 1, 16);

         buffer.invokeCharacters(csi_IM_ResourcesForInterference.toString());
         buffer.getContext().eventDispatcher.endElement("csi_IM_ResourcesForInterference", -1);
      }
      else {
         csi_IM_ResourcesForInterference = null;
      }

      // decode nzp_CSI_RS_ResourcesForInterference

      if (nzp_CSI_RS_ResourcesForInterferencePresent) {
         buffer.getContext().eventDispatcher.startElement("nzp_CSI_RS_ResourcesForInterference", -1);

         nzp_CSI_RS_ResourcesForInterference = new Asn1Integer();
         nzp_CSI_RS_ResourcesForInterference.decode (buffer, 1, 16);

         buffer.invokeCharacters(nzp_CSI_RS_ResourcesForInterference.toString());
         buffer.getContext().eventDispatcher.endElement("nzp_CSI_RS_ResourcesForInterference", -1);
      }
      else {
         nzp_CSI_RS_ResourcesForInterference = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (reportConfigId != null) reportConfigId.print (_sb, "reportConfigId", _level+1);
      if (resourcesForChannel != null) resourcesForChannel.print (_sb, "resourcesForChannel", _level+1);
      if (csi_IM_ResourcesForInterference != null) csi_IM_ResourcesForInterference.print (_sb, "csi_IM_ResourcesForInterference", _level+1);
      if (nzp_CSI_RS_ResourcesForInterference != null) nzp_CSI_RS_ResourcesForInterference.print (_sb, "nzp_CSI_RS_ResourcesForInterference", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
