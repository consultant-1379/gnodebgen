/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class BarringPerACDC_Category_r13 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "BarringPerACDC-Category-r13";
   }

   public Asn1Integer acdc_Category_r13;
   public BarringPerACDC_Category_r13_acdc_BarringConfig_r13 acdc_BarringConfig_r13;  // optional

   public BarringPerACDC_Category_r13 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public BarringPerACDC_Category_r13 (
      Asn1Integer acdc_Category_r13_,
      BarringPerACDC_Category_r13_acdc_BarringConfig_r13 acdc_BarringConfig_r13_
   ) {
      super();
      acdc_Category_r13 = acdc_Category_r13_;
      acdc_BarringConfig_r13 = acdc_BarringConfig_r13_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public BarringPerACDC_Category_r13 (
      Asn1Integer acdc_Category_r13_
   ) {
      super();
      acdc_Category_r13 = acdc_Category_r13_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public BarringPerACDC_Category_r13 (long acdc_Category_r13_,
      BarringPerACDC_Category_r13_acdc_BarringConfig_r13 acdc_BarringConfig_r13_
   ) {
      super();
      acdc_Category_r13 = new Asn1Integer (acdc_Category_r13_);
      acdc_BarringConfig_r13 = acdc_BarringConfig_r13_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public BarringPerACDC_Category_r13 (
      long acdc_Category_r13_
   ) {
      super();
      acdc_Category_r13 = new Asn1Integer (acdc_Category_r13_);
   }

   public void init () {
      acdc_Category_r13 = null;
      acdc_BarringConfig_r13 = null;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return acdc_Category_r13;
         case 1: return acdc_BarringConfig_r13;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "acdc-Category-r13";
         case 1: return "acdc-BarringConfig-r13";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean acdc_BarringConfig_r13Present = buffer.decodeBit ("acdc_BarringConfig_r13Present");

      // decode acdc_Category_r13

      buffer.getContext().eventDispatcher.startElement("acdc_Category_r13", -1);

      acdc_Category_r13 = new Asn1Integer();
      acdc_Category_r13.decode (buffer, 1, 16);

      buffer.invokeCharacters(acdc_Category_r13.toString());
      buffer.getContext().eventDispatcher.endElement("acdc_Category_r13", -1);

      // decode acdc_BarringConfig_r13

      if (acdc_BarringConfig_r13Present) {
         buffer.getContext().eventDispatcher.startElement("acdc_BarringConfig_r13", -1);

         acdc_BarringConfig_r13 = new BarringPerACDC_Category_r13_acdc_BarringConfig_r13();
         acdc_BarringConfig_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("acdc_BarringConfig_r13", -1);
      }
      else {
         acdc_BarringConfig_r13 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (acdc_Category_r13 != null) acdc_Category_r13.print (_sb, "acdc_Category_r13", _level+1);
      if (acdc_BarringConfig_r13 != null) acdc_BarringConfig_r13.print (_sb, "acdc_BarringConfig_r13", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
