/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SI_SchedulingInfo_si_WindowLength extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ENUMERATED";
   }

   // Integer constants for switch-case
   public static final int _S5 = 0;
   public static final int _S10 = 1;
   public static final int _S20 = 2;
   public static final int _S40 = 3;
   public static final int _S80 = 4;
   public static final int _S160 = 5;
   public static final int _S320 = 6;
   public static final int _S640 = 7;
   public static final int _S1280 = 8;

   // Singleton instances of SI_SchedulingInfo_si_WindowLength
   protected static final SI_SchedulingInfo_si_WindowLength _s5 = new SI_SchedulingInfo_si_WindowLength(0);
   protected static final SI_SchedulingInfo_si_WindowLength _s10 = new SI_SchedulingInfo_si_WindowLength(1);
   protected static final SI_SchedulingInfo_si_WindowLength _s20 = new SI_SchedulingInfo_si_WindowLength(2);
   protected static final SI_SchedulingInfo_si_WindowLength _s40 = new SI_SchedulingInfo_si_WindowLength(3);
   protected static final SI_SchedulingInfo_si_WindowLength _s80 = new SI_SchedulingInfo_si_WindowLength(4);
   protected static final SI_SchedulingInfo_si_WindowLength _s160 = new SI_SchedulingInfo_si_WindowLength(5);
   protected static final SI_SchedulingInfo_si_WindowLength _s320 = new SI_SchedulingInfo_si_WindowLength(6);
   protected static final SI_SchedulingInfo_si_WindowLength _s640 = new SI_SchedulingInfo_si_WindowLength(7);
   protected static final SI_SchedulingInfo_si_WindowLength _s1280 = new SI_SchedulingInfo_si_WindowLength(8);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    *   7
    *   8
    */
   protected SI_SchedulingInfo_si_WindowLength (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for s5.
    */
   public static SI_SchedulingInfo_si_WindowLength s5() {
      return _s5;
   }

   /**
    * Singleton accessor method for s10.
    */
   public static SI_SchedulingInfo_si_WindowLength s10() {
      return _s10;
   }

   /**
    * Singleton accessor method for s20.
    */
   public static SI_SchedulingInfo_si_WindowLength s20() {
      return _s20;
   }

   /**
    * Singleton accessor method for s40.
    */
   public static SI_SchedulingInfo_si_WindowLength s40() {
      return _s40;
   }

   /**
    * Singleton accessor method for s80.
    */
   public static SI_SchedulingInfo_si_WindowLength s80() {
      return _s80;
   }

   /**
    * Singleton accessor method for s160.
    */
   public static SI_SchedulingInfo_si_WindowLength s160() {
      return _s160;
   }

   /**
    * Singleton accessor method for s320.
    */
   public static SI_SchedulingInfo_si_WindowLength s320() {
      return _s320;
   }

   /**
    * Singleton accessor method for s640.
    */
   public static SI_SchedulingInfo_si_WindowLength s640() {
      return _s640;
   }

   /**
    * Singleton accessor method for s1280.
    */
   public static SI_SchedulingInfo_si_WindowLength s1280() {
      return _s1280;
   }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return SI_SchedulingInfo_si_WindowLength.valueOf( SI_SchedulingInfo_si_WindowLength.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static SI_SchedulingInfo_si_WindowLength valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 0: return s5();
         case 1: return s10();
         case 2: return s20();
         case 3: return s40();
         case 4: return s80();
         case 5: return s160();
         case 6: return s320();
         case 7: return s640();
         case 8: return s1280();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      ui = (int) buffer.decodeConsWholeNumber (9);

      switch (ui) {
         case 0: ret =  0; break;
         case 1: ret =  1; break;
         case 2: ret =  2; break;
         case 3: ret =  3; break;
         case 4: ret =  4; break;
         case 5: ret =  5; break;
         case 6: ret =  6; break;
         case 7: ret =  7; break;
         case 8: ret =  8; break;
         default: throw new Asn1InvalidEnumException (ui);
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (SI_SchedulingInfo_si_WindowLength.valueOf(ret).toString());

      return ret;
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("s5");
         case 1: return ("s10");
         case 2: return ("s20");
         case 3: return ("s40");
         case 4: return ("s80");
         case 5: return ("s160");
         case 6: return ("s320");
         case 7: return ("s640");
         case 8: return ("s1280");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
