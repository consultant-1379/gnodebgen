/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SL_PSSCH_TxParameters_r14 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SL-PSSCH-TxParameters-r14";
   }

   public Asn1Integer minMCS_PSSCH_r14;
   public Asn1Integer maxMCS_PSSCH_r14;
   public Asn1Integer minSubChannel_NumberPSSCH_r14;
   public Asn1Integer maxSubchannel_NumberPSSCH_r14;
   public SL_PSSCH_TxParameters_r14_allowedRetxNumberPSSCH_r14 allowedRetxNumberPSSCH_r14 = null;
   public SL_TxPower_r14 maxTxPower_r14;  // optional

   public SL_PSSCH_TxParameters_r14 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SL_PSSCH_TxParameters_r14 (
      Asn1Integer minMCS_PSSCH_r14_,
      Asn1Integer maxMCS_PSSCH_r14_,
      Asn1Integer minSubChannel_NumberPSSCH_r14_,
      Asn1Integer maxSubchannel_NumberPSSCH_r14_,
      SL_PSSCH_TxParameters_r14_allowedRetxNumberPSSCH_r14 allowedRetxNumberPSSCH_r14_,
      SL_TxPower_r14 maxTxPower_r14_
   ) {
      super();
      minMCS_PSSCH_r14 = minMCS_PSSCH_r14_;
      maxMCS_PSSCH_r14 = maxMCS_PSSCH_r14_;
      minSubChannel_NumberPSSCH_r14 = minSubChannel_NumberPSSCH_r14_;
      maxSubchannel_NumberPSSCH_r14 = maxSubchannel_NumberPSSCH_r14_;
      allowedRetxNumberPSSCH_r14 = allowedRetxNumberPSSCH_r14_;
      maxTxPower_r14 = maxTxPower_r14_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SL_PSSCH_TxParameters_r14 (
      Asn1Integer minMCS_PSSCH_r14_,
      Asn1Integer maxMCS_PSSCH_r14_,
      Asn1Integer minSubChannel_NumberPSSCH_r14_,
      Asn1Integer maxSubchannel_NumberPSSCH_r14_,
      SL_PSSCH_TxParameters_r14_allowedRetxNumberPSSCH_r14 allowedRetxNumberPSSCH_r14_
   ) {
      super();
      minMCS_PSSCH_r14 = minMCS_PSSCH_r14_;
      maxMCS_PSSCH_r14 = maxMCS_PSSCH_r14_;
      minSubChannel_NumberPSSCH_r14 = minSubChannel_NumberPSSCH_r14_;
      maxSubchannel_NumberPSSCH_r14 = maxSubchannel_NumberPSSCH_r14_;
      allowedRetxNumberPSSCH_r14 = allowedRetxNumberPSSCH_r14_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SL_PSSCH_TxParameters_r14 (long minMCS_PSSCH_r14_,
      long maxMCS_PSSCH_r14_,
      long minSubChannel_NumberPSSCH_r14_,
      long maxSubchannel_NumberPSSCH_r14_,
      SL_PSSCH_TxParameters_r14_allowedRetxNumberPSSCH_r14 allowedRetxNumberPSSCH_r14_,
      SL_TxPower_r14 maxTxPower_r14_
   ) {
      super();
      minMCS_PSSCH_r14 = new Asn1Integer (minMCS_PSSCH_r14_);
      maxMCS_PSSCH_r14 = new Asn1Integer (maxMCS_PSSCH_r14_);
      minSubChannel_NumberPSSCH_r14 = new Asn1Integer (minSubChannel_NumberPSSCH_r14_);
      maxSubchannel_NumberPSSCH_r14 = new Asn1Integer (maxSubchannel_NumberPSSCH_r14_);
      allowedRetxNumberPSSCH_r14 = allowedRetxNumberPSSCH_r14_;
      maxTxPower_r14 = maxTxPower_r14_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public SL_PSSCH_TxParameters_r14 (
      long minMCS_PSSCH_r14_,
      long maxMCS_PSSCH_r14_,
      long minSubChannel_NumberPSSCH_r14_,
      long maxSubchannel_NumberPSSCH_r14_,
      SL_PSSCH_TxParameters_r14_allowedRetxNumberPSSCH_r14 allowedRetxNumberPSSCH_r14_
   ) {
      super();
      minMCS_PSSCH_r14 = new Asn1Integer (minMCS_PSSCH_r14_);
      maxMCS_PSSCH_r14 = new Asn1Integer (maxMCS_PSSCH_r14_);
      minSubChannel_NumberPSSCH_r14 = new Asn1Integer (minSubChannel_NumberPSSCH_r14_);
      maxSubchannel_NumberPSSCH_r14 = new Asn1Integer (maxSubchannel_NumberPSSCH_r14_);
      allowedRetxNumberPSSCH_r14 = allowedRetxNumberPSSCH_r14_;
   }

   public void init () {
      minMCS_PSSCH_r14 = null;
      maxMCS_PSSCH_r14 = null;
      minSubChannel_NumberPSSCH_r14 = null;
      maxSubchannel_NumberPSSCH_r14 = null;
      allowedRetxNumberPSSCH_r14 = null;
      maxTxPower_r14 = null;
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return minMCS_PSSCH_r14;
         case 1: return maxMCS_PSSCH_r14;
         case 2: return minSubChannel_NumberPSSCH_r14;
         case 3: return maxSubchannel_NumberPSSCH_r14;
         case 4: return allowedRetxNumberPSSCH_r14;
         case 5: return maxTxPower_r14;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "minMCS-PSSCH-r14";
         case 1: return "maxMCS-PSSCH-r14";
         case 2: return "minSubChannel-NumberPSSCH-r14";
         case 3: return "maxSubchannel-NumberPSSCH-r14";
         case 4: return "allowedRetxNumberPSSCH-r14";
         case 5: return "maxTxPower-r14";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean maxTxPower_r14Present = buffer.decodeBit ("maxTxPower_r14Present");

      // decode minMCS_PSSCH_r14

      buffer.getContext().eventDispatcher.startElement("minMCS_PSSCH_r14", -1);

      minMCS_PSSCH_r14 = new Asn1Integer();
      minMCS_PSSCH_r14.decode (buffer, 0, 31);

      buffer.invokeCharacters(minMCS_PSSCH_r14.toString());
      buffer.getContext().eventDispatcher.endElement("minMCS_PSSCH_r14", -1);

      // decode maxMCS_PSSCH_r14

      buffer.getContext().eventDispatcher.startElement("maxMCS_PSSCH_r14", -1);

      maxMCS_PSSCH_r14 = new Asn1Integer();
      maxMCS_PSSCH_r14.decode (buffer, 0, 31);

      buffer.invokeCharacters(maxMCS_PSSCH_r14.toString());
      buffer.getContext().eventDispatcher.endElement("maxMCS_PSSCH_r14", -1);

      // decode minSubChannel_NumberPSSCH_r14

      buffer.getContext().eventDispatcher.startElement("minSubChannel_NumberPSSCH_r14", -1);

      minSubChannel_NumberPSSCH_r14 = new Asn1Integer();
      minSubChannel_NumberPSSCH_r14.decode (buffer, 1, 20);

      buffer.invokeCharacters(minSubChannel_NumberPSSCH_r14.toString());
      buffer.getContext().eventDispatcher.endElement("minSubChannel_NumberPSSCH_r14", -1);

      // decode maxSubchannel_NumberPSSCH_r14

      buffer.getContext().eventDispatcher.startElement("maxSubchannel_NumberPSSCH_r14", -1);

      maxSubchannel_NumberPSSCH_r14 = new Asn1Integer();
      maxSubchannel_NumberPSSCH_r14.decode (buffer, 1, 20);

      buffer.invokeCharacters(maxSubchannel_NumberPSSCH_r14.toString());
      buffer.getContext().eventDispatcher.endElement("maxSubchannel_NumberPSSCH_r14", -1);

      // decode allowedRetxNumberPSSCH_r14

      buffer.getContext().eventDispatcher.startElement("allowedRetxNumberPSSCH_r14", -1);

      {
         int tval = SL_PSSCH_TxParameters_r14_allowedRetxNumberPSSCH_r14.decodeEnumValue (buffer);
         allowedRetxNumberPSSCH_r14 = SL_PSSCH_TxParameters_r14_allowedRetxNumberPSSCH_r14.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("allowedRetxNumberPSSCH_r14", -1);

      // decode maxTxPower_r14

      if (maxTxPower_r14Present) {
         buffer.getContext().eventDispatcher.startElement("maxTxPower_r14", -1);

         maxTxPower_r14 = new SL_TxPower_r14();
         maxTxPower_r14.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("maxTxPower_r14", -1);
      }
      else {
         maxTxPower_r14 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (minMCS_PSSCH_r14 != null) minMCS_PSSCH_r14.print (_sb, "minMCS_PSSCH_r14", _level+1);
      if (maxMCS_PSSCH_r14 != null) maxMCS_PSSCH_r14.print (_sb, "maxMCS_PSSCH_r14", _level+1);
      if (minSubChannel_NumberPSSCH_r14 != null) minSubChannel_NumberPSSCH_r14.print (_sb, "minSubChannel_NumberPSSCH_r14", _level+1);
      if (maxSubchannel_NumberPSSCH_r14 != null) maxSubchannel_NumberPSSCH_r14.print (_sb, "maxSubchannel_NumberPSSCH_r14", _level+1);
      if (allowedRetxNumberPSSCH_r14 != null) allowedRetxNumberPSSCH_r14.print (_sb, "allowedRetxNumberPSSCH_r14", _level+1);
      if (maxTxPower_r14 != null) maxTxPower_r14.print (_sb, "maxTxPower_r14", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
