/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class UplinkConfig extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "UplinkConfig";
   }

   public BWP_UplinkDedicated initialUplinkBWP;  // optional
   public UplinkConfig_uplinkBWP_ToReleaseList uplinkBWP_ToReleaseList;  // optional
   public UplinkConfig_uplinkBWP_ToAddModList uplinkBWP_ToAddModList;  // optional
   public BWP_Id firstActiveUplinkBWP_Id;  // optional
   public UplinkConfig_pusch_ServingCellConfig pusch_ServingCellConfig;  // optional
   public UplinkConfig_carrierSwitching carrierSwitching;  // optional
   public boolean mV2ExtPresent;
   public Asn1Boolean powerBoostPi2BPSK;  // optional
   public UplinkConfig_uplinkChannelBW_PerSCS_List uplinkChannelBW_PerSCS_List;  // optional
   public boolean mV3ExtPresent;
   public UplinkConfig_enablePL_RS_UpdateForPUSCH_SRS_r16 enablePL_RS_UpdateForPUSCH_SRS_r16 = null;  // optional
   public UplinkConfig_enableDefaultBeamPL_ForPUSCH0_0_r16 enableDefaultBeamPL_ForPUSCH0_0_r16 = null;  // optional
   public UplinkConfig_enableDefaultBeamPL_ForPUCCH_r16 enableDefaultBeamPL_ForPUCCH_r16 = null;  // optional
   public UplinkConfig_enableDefaultBeamPL_ForSRS_r16 enableDefaultBeamPL_ForSRS_r16 = null;  // optional
   public UplinkConfig_uplinkTxSwitching_r16 uplinkTxSwitching_r16;  // optional
   public UplinkConfig_mpr_PowerBoost_FR2_r16 mpr_PowerBoost_FR2_r16 = null;  // optional
   public Asn1OpenExt extElem1;

   public UplinkConfig () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public UplinkConfig (
      BWP_UplinkDedicated initialUplinkBWP_,
      UplinkConfig_uplinkBWP_ToReleaseList uplinkBWP_ToReleaseList_,
      UplinkConfig_uplinkBWP_ToAddModList uplinkBWP_ToAddModList_,
      BWP_Id firstActiveUplinkBWP_Id_,
      UplinkConfig_pusch_ServingCellConfig pusch_ServingCellConfig_,
      UplinkConfig_carrierSwitching carrierSwitching_,
      Asn1Boolean powerBoostPi2BPSK_,
      UplinkConfig_uplinkChannelBW_PerSCS_List uplinkChannelBW_PerSCS_List_,
      UplinkConfig_enablePL_RS_UpdateForPUSCH_SRS_r16 enablePL_RS_UpdateForPUSCH_SRS_r16_,
      UplinkConfig_enableDefaultBeamPL_ForPUSCH0_0_r16 enableDefaultBeamPL_ForPUSCH0_0_r16_,
      UplinkConfig_enableDefaultBeamPL_ForPUCCH_r16 enableDefaultBeamPL_ForPUCCH_r16_,
      UplinkConfig_enableDefaultBeamPL_ForSRS_r16 enableDefaultBeamPL_ForSRS_r16_,
      UplinkConfig_uplinkTxSwitching_r16 uplinkTxSwitching_r16_,
      UplinkConfig_mpr_PowerBoost_FR2_r16 mpr_PowerBoost_FR2_r16_
   ) {
      super();
      initialUplinkBWP = initialUplinkBWP_;
      uplinkBWP_ToReleaseList = uplinkBWP_ToReleaseList_;
      uplinkBWP_ToAddModList = uplinkBWP_ToAddModList_;
      firstActiveUplinkBWP_Id = firstActiveUplinkBWP_Id_;
      pusch_ServingCellConfig = pusch_ServingCellConfig_;
      carrierSwitching = carrierSwitching_;
      powerBoostPi2BPSK = powerBoostPi2BPSK_;
      uplinkChannelBW_PerSCS_List = uplinkChannelBW_PerSCS_List_;
      enablePL_RS_UpdateForPUSCH_SRS_r16 = enablePL_RS_UpdateForPUSCH_SRS_r16_;
      enableDefaultBeamPL_ForPUSCH0_0_r16 = enableDefaultBeamPL_ForPUSCH0_0_r16_;
      enableDefaultBeamPL_ForPUCCH_r16 = enableDefaultBeamPL_ForPUCCH_r16_;
      enableDefaultBeamPL_ForSRS_r16 = enableDefaultBeamPL_ForSRS_r16_;
      uplinkTxSwitching_r16 = uplinkTxSwitching_r16_;
      mpr_PowerBoost_FR2_r16 = mpr_PowerBoost_FR2_r16_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public UplinkConfig (BWP_UplinkDedicated initialUplinkBWP_,
      UplinkConfig_uplinkBWP_ToReleaseList uplinkBWP_ToReleaseList_,
      UplinkConfig_uplinkBWP_ToAddModList uplinkBWP_ToAddModList_,
      long firstActiveUplinkBWP_Id_,
      UplinkConfig_pusch_ServingCellConfig pusch_ServingCellConfig_,
      UplinkConfig_carrierSwitching carrierSwitching_,
      boolean powerBoostPi2BPSK_,
      UplinkConfig_uplinkChannelBW_PerSCS_List uplinkChannelBW_PerSCS_List_,
      UplinkConfig_enablePL_RS_UpdateForPUSCH_SRS_r16 enablePL_RS_UpdateForPUSCH_SRS_r16_,
      UplinkConfig_enableDefaultBeamPL_ForPUSCH0_0_r16 enableDefaultBeamPL_ForPUSCH0_0_r16_,
      UplinkConfig_enableDefaultBeamPL_ForPUCCH_r16 enableDefaultBeamPL_ForPUCCH_r16_,
      UplinkConfig_enableDefaultBeamPL_ForSRS_r16 enableDefaultBeamPL_ForSRS_r16_,
      UplinkConfig_uplinkTxSwitching_r16 uplinkTxSwitching_r16_,
      UplinkConfig_mpr_PowerBoost_FR2_r16 mpr_PowerBoost_FR2_r16_
   ) {
      super();
      initialUplinkBWP = initialUplinkBWP_;
      uplinkBWP_ToReleaseList = uplinkBWP_ToReleaseList_;
      uplinkBWP_ToAddModList = uplinkBWP_ToAddModList_;
      firstActiveUplinkBWP_Id = new BWP_Id (firstActiveUplinkBWP_Id_);
      pusch_ServingCellConfig = pusch_ServingCellConfig_;
      carrierSwitching = carrierSwitching_;
      powerBoostPi2BPSK = new Asn1Boolean (powerBoostPi2BPSK_);
      uplinkChannelBW_PerSCS_List = uplinkChannelBW_PerSCS_List_;
      enablePL_RS_UpdateForPUSCH_SRS_r16 = enablePL_RS_UpdateForPUSCH_SRS_r16_;
      enableDefaultBeamPL_ForPUSCH0_0_r16 = enableDefaultBeamPL_ForPUSCH0_0_r16_;
      enableDefaultBeamPL_ForPUCCH_r16 = enableDefaultBeamPL_ForPUCCH_r16_;
      enableDefaultBeamPL_ForSRS_r16 = enableDefaultBeamPL_ForSRS_r16_;
      uplinkTxSwitching_r16 = uplinkTxSwitching_r16_;
      mpr_PowerBoost_FR2_r16 = mpr_PowerBoost_FR2_r16_;
   }

   public void init () {
      initialUplinkBWP = null;
      uplinkBWP_ToReleaseList = null;
      uplinkBWP_ToAddModList = null;
      firstActiveUplinkBWP_Id = null;
      pusch_ServingCellConfig = null;
      carrierSwitching = null;
      powerBoostPi2BPSK = null;
      uplinkChannelBW_PerSCS_List = null;
      enablePL_RS_UpdateForPUSCH_SRS_r16 = null;
      enableDefaultBeamPL_ForPUSCH0_0_r16 = null;
      enableDefaultBeamPL_ForPUCCH_r16 = null;
      enableDefaultBeamPL_ForSRS_r16 = null;
      uplinkTxSwitching_r16 = null;
      mpr_PowerBoost_FR2_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 15; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return initialUplinkBWP;
         case 1: return uplinkBWP_ToReleaseList;
         case 2: return uplinkBWP_ToAddModList;
         case 3: return firstActiveUplinkBWP_Id;
         case 4: return pusch_ServingCellConfig;
         case 5: return carrierSwitching;
         case 6: return powerBoostPi2BPSK;
         case 7: return uplinkChannelBW_PerSCS_List;
         case 8: return enablePL_RS_UpdateForPUSCH_SRS_r16;
         case 9: return enableDefaultBeamPL_ForPUSCH0_0_r16;
         case 10: return enableDefaultBeamPL_ForPUCCH_r16;
         case 11: return enableDefaultBeamPL_ForSRS_r16;
         case 12: return uplinkTxSwitching_r16;
         case 13: return mpr_PowerBoost_FR2_r16;
         case 14: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "initialUplinkBWP";
         case 1: return "uplinkBWP-ToReleaseList";
         case 2: return "uplinkBWP-ToAddModList";
         case 3: return "firstActiveUplinkBWP-Id";
         case 4: return "pusch-ServingCellConfig";
         case 5: return "carrierSwitching";
         case 6: return "powerBoostPi2BPSK";
         case 7: return "uplinkChannelBW-PerSCS-List";
         case 8: return "enablePL-RS-UpdateForPUSCH-SRS-r16";
         case 9: return "enableDefaultBeamPL-ForPUSCH0-0-r16";
         case 10: return "enableDefaultBeamPL-ForPUCCH-r16";
         case 11: return "enableDefaultBeamPL-ForSRS-r16";
         case 12: return "uplinkTxSwitching-r16";
         case 13: return "mpr-PowerBoost-FR2-r16";
         case 14: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean initialUplinkBWPPresent = buffer.decodeBit ("initialUplinkBWPPresent");
      boolean uplinkBWP_ToReleaseListPresent = buffer.decodeBit ("uplinkBWP_ToReleaseListPresent");
      boolean uplinkBWP_ToAddModListPresent = buffer.decodeBit ("uplinkBWP_ToAddModListPresent");
      boolean firstActiveUplinkBWP_IdPresent = buffer.decodeBit ("firstActiveUplinkBWP_IdPresent");
      boolean pusch_ServingCellConfigPresent = buffer.decodeBit ("pusch_ServingCellConfigPresent");
      boolean carrierSwitchingPresent = buffer.decodeBit ("carrierSwitchingPresent");

      // decode initialUplinkBWP

      if (initialUplinkBWPPresent) {
         buffer.getContext().eventDispatcher.startElement("initialUplinkBWP", -1);

         initialUplinkBWP = new BWP_UplinkDedicated();
         initialUplinkBWP.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("initialUplinkBWP", -1);
      }
      else {
         initialUplinkBWP = null;
      }

      // decode uplinkBWP_ToReleaseList

      if (uplinkBWP_ToReleaseListPresent) {
         buffer.getContext().eventDispatcher.startElement("uplinkBWP_ToReleaseList", -1);

         uplinkBWP_ToReleaseList = new UplinkConfig_uplinkBWP_ToReleaseList();
         uplinkBWP_ToReleaseList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("uplinkBWP_ToReleaseList", -1);
      }
      else {
         uplinkBWP_ToReleaseList = null;
      }

      // decode uplinkBWP_ToAddModList

      if (uplinkBWP_ToAddModListPresent) {
         buffer.getContext().eventDispatcher.startElement("uplinkBWP_ToAddModList", -1);

         uplinkBWP_ToAddModList = new UplinkConfig_uplinkBWP_ToAddModList();
         uplinkBWP_ToAddModList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("uplinkBWP_ToAddModList", -1);
      }
      else {
         uplinkBWP_ToAddModList = null;
      }

      // decode firstActiveUplinkBWP_Id

      if (firstActiveUplinkBWP_IdPresent) {
         buffer.getContext().eventDispatcher.startElement("firstActiveUplinkBWP_Id", -1);

         firstActiveUplinkBWP_Id = new BWP_Id();
         firstActiveUplinkBWP_Id.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("firstActiveUplinkBWP_Id", -1);
      }
      else {
         firstActiveUplinkBWP_Id = null;
      }

      // decode pusch_ServingCellConfig

      if (pusch_ServingCellConfigPresent) {
         buffer.getContext().eventDispatcher.startElement("pusch_ServingCellConfig", -1);

         pusch_ServingCellConfig = new UplinkConfig_pusch_ServingCellConfig();
         pusch_ServingCellConfig.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("pusch_ServingCellConfig", -1);
      }
      else {
         pusch_ServingCellConfig = null;
      }

      // decode carrierSwitching

      if (carrierSwitchingPresent) {
         buffer.getContext().eventDispatcher.startElement("carrierSwitching", -1);

         carrierSwitching = new UplinkConfig_carrierSwitching();
         carrierSwitching.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("carrierSwitching", -1);
      }
      else {
         carrierSwitching = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean powerBoostPi2BPSKPresent = buffer.decodeBit ("powerBoostPi2BPSKPresent");

            boolean uplinkChannelBW_PerSCS_ListPresent = buffer.decodeBit ("uplinkChannelBW_PerSCS_ListPresent");

            // decode powerBoostPi2BPSK

            if (powerBoostPi2BPSKPresent) {
               buffer.getContext().eventDispatcher.startElement("powerBoostPi2BPSK", -1);

               powerBoostPi2BPSK = new Asn1Boolean();
               powerBoostPi2BPSK.decode (buffer);

               buffer.invokeCharacters(powerBoostPi2BPSK.toString());
               buffer.getContext().eventDispatcher.endElement("powerBoostPi2BPSK", -1);
            }
            else {
               powerBoostPi2BPSK = null;
            }

            // decode uplinkChannelBW_PerSCS_List

            if (uplinkChannelBW_PerSCS_ListPresent) {
               buffer.getContext().eventDispatcher.startElement("uplinkChannelBW_PerSCS_List", -1);

               uplinkChannelBW_PerSCS_List = new UplinkConfig_uplinkChannelBW_PerSCS_List();
               uplinkChannelBW_PerSCS_List.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("uplinkChannelBW_PerSCS_List", -1);
            }
            else {
               uplinkChannelBW_PerSCS_List = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean enablePL_RS_UpdateForPUSCH_SRS_r16Present = buffer.decodeBit ("enablePL_RS_UpdateForPUSCH_SRS_r16Present");

            boolean enableDefaultBeamPL_ForPUSCH0_0_r16Present = buffer.decodeBit ("enableDefaultBeamPL_ForPUSCH0_0_r16Present");

            boolean enableDefaultBeamPL_ForPUCCH_r16Present = buffer.decodeBit ("enableDefaultBeamPL_ForPUCCH_r16Present");

            boolean enableDefaultBeamPL_ForSRS_r16Present = buffer.decodeBit ("enableDefaultBeamPL_ForSRS_r16Present");

            boolean uplinkTxSwitching_r16Present = buffer.decodeBit ("uplinkTxSwitching_r16Present");

            boolean mpr_PowerBoost_FR2_r16Present = buffer.decodeBit ("mpr_PowerBoost_FR2_r16Present");

            // decode enablePL_RS_UpdateForPUSCH_SRS_r16

            if (enablePL_RS_UpdateForPUSCH_SRS_r16Present) {
               buffer.getContext().eventDispatcher.startElement("enablePL_RS_UpdateForPUSCH_SRS_r16", -1);

               int tval = UplinkConfig_enablePL_RS_UpdateForPUSCH_SRS_r16.decodeEnumValue (buffer);
               enablePL_RS_UpdateForPUSCH_SRS_r16 = UplinkConfig_enablePL_RS_UpdateForPUSCH_SRS_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("enablePL_RS_UpdateForPUSCH_SRS_r16", -1);
            }
            else {
               enablePL_RS_UpdateForPUSCH_SRS_r16 = null;
            }

            // decode enableDefaultBeamPL_ForPUSCH0_0_r16

            if (enableDefaultBeamPL_ForPUSCH0_0_r16Present) {
               buffer.getContext().eventDispatcher.startElement("enableDefaultBeamPL_ForPUSCH0_0_r16", -1);

               int tval = UplinkConfig_enableDefaultBeamPL_ForPUSCH0_0_r16.decodeEnumValue (buffer);
               enableDefaultBeamPL_ForPUSCH0_0_r16 = UplinkConfig_enableDefaultBeamPL_ForPUSCH0_0_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("enableDefaultBeamPL_ForPUSCH0_0_r16", -1);
            }
            else {
               enableDefaultBeamPL_ForPUSCH0_0_r16 = null;
            }

            // decode enableDefaultBeamPL_ForPUCCH_r16

            if (enableDefaultBeamPL_ForPUCCH_r16Present) {
               buffer.getContext().eventDispatcher.startElement("enableDefaultBeamPL_ForPUCCH_r16", -1);

               int tval = UplinkConfig_enableDefaultBeamPL_ForPUCCH_r16.decodeEnumValue (buffer);
               enableDefaultBeamPL_ForPUCCH_r16 = UplinkConfig_enableDefaultBeamPL_ForPUCCH_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("enableDefaultBeamPL_ForPUCCH_r16", -1);
            }
            else {
               enableDefaultBeamPL_ForPUCCH_r16 = null;
            }

            // decode enableDefaultBeamPL_ForSRS_r16

            if (enableDefaultBeamPL_ForSRS_r16Present) {
               buffer.getContext().eventDispatcher.startElement("enableDefaultBeamPL_ForSRS_r16", -1);

               int tval = UplinkConfig_enableDefaultBeamPL_ForSRS_r16.decodeEnumValue (buffer);
               enableDefaultBeamPL_ForSRS_r16 = UplinkConfig_enableDefaultBeamPL_ForSRS_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("enableDefaultBeamPL_ForSRS_r16", -1);
            }
            else {
               enableDefaultBeamPL_ForSRS_r16 = null;
            }

            // decode uplinkTxSwitching_r16

            if (uplinkTxSwitching_r16Present) {
               buffer.getContext().eventDispatcher.startElement("uplinkTxSwitching_r16", -1);

               uplinkTxSwitching_r16 = new UplinkConfig_uplinkTxSwitching_r16();
               uplinkTxSwitching_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("uplinkTxSwitching_r16", -1);
            }
            else {
               uplinkTxSwitching_r16 = null;
            }

            // decode mpr_PowerBoost_FR2_r16

            if (mpr_PowerBoost_FR2_r16Present) {
               buffer.getContext().eventDispatcher.startElement("mpr_PowerBoost_FR2_r16", -1);

               int tval = UplinkConfig_mpr_PowerBoost_FR2_r16.decodeEnumValue (buffer);
               mpr_PowerBoost_FR2_r16 = UplinkConfig_mpr_PowerBoost_FR2_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("mpr_PowerBoost_FR2_r16", -1);
            }
            else {
               mpr_PowerBoost_FR2_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (initialUplinkBWP != null) initialUplinkBWP.print (_sb, "initialUplinkBWP", _level+1);
      if (uplinkBWP_ToReleaseList != null) uplinkBWP_ToReleaseList.print (_sb, "uplinkBWP_ToReleaseList", _level+1);
      if (uplinkBWP_ToAddModList != null) uplinkBWP_ToAddModList.print (_sb, "uplinkBWP_ToAddModList", _level+1);
      if (firstActiveUplinkBWP_Id != null) firstActiveUplinkBWP_Id.print (_sb, "firstActiveUplinkBWP_Id", _level+1);
      if (pusch_ServingCellConfig != null) pusch_ServingCellConfig.print (_sb, "pusch_ServingCellConfig", _level+1);
      if (carrierSwitching != null) carrierSwitching.print (_sb, "carrierSwitching", _level+1);
      if (powerBoostPi2BPSK != null) powerBoostPi2BPSK.print (_sb, "powerBoostPi2BPSK", _level+1);
      if (uplinkChannelBW_PerSCS_List != null) uplinkChannelBW_PerSCS_List.print (_sb, "uplinkChannelBW_PerSCS_List", _level+1);
      if (enablePL_RS_UpdateForPUSCH_SRS_r16 != null) enablePL_RS_UpdateForPUSCH_SRS_r16.print (_sb, "enablePL_RS_UpdateForPUSCH_SRS_r16", _level+1);
      if (enableDefaultBeamPL_ForPUSCH0_0_r16 != null) enableDefaultBeamPL_ForPUSCH0_0_r16.print (_sb, "enableDefaultBeamPL_ForPUSCH0_0_r16", _level+1);
      if (enableDefaultBeamPL_ForPUCCH_r16 != null) enableDefaultBeamPL_ForPUCCH_r16.print (_sb, "enableDefaultBeamPL_ForPUCCH_r16", _level+1);
      if (enableDefaultBeamPL_ForSRS_r16 != null) enableDefaultBeamPL_ForSRS_r16.print (_sb, "enableDefaultBeamPL_ForSRS_r16", _level+1);
      if (uplinkTxSwitching_r16 != null) uplinkTxSwitching_r16.print (_sb, "uplinkTxSwitching_r16", _level+1);
      if (mpr_PowerBoost_FR2_r16 != null) mpr_PowerBoost_FR2_r16.print (_sb, "mpr_PowerBoost_FR2_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
