/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_InterNodeDefinitions;

import com.objsys.asn1j.runtime.*;
import asn.lte.generated.EUTRA_RRC_Definitions.MeasConfig;
import asn.lte.generated.EUTRA_RRC_Definitions.RadioResourceConfigDedicated;
import asn.lte.generated.EUTRA_RRC_Definitions.SecurityAlgorithmConfig;
import asn.lte.generated.EUTRA_RRC_Definitions.C_RNTI;
import asn.lte.generated.EUTRA_RRC_Definitions.MasterInformationBlock;
import asn.lte.generated.EUTRA_RRC_Definitions.SystemInformationBlockType1;
import asn.lte.generated.EUTRA_RRC_Definitions.SystemInformationBlockType2;
import asn.lte.generated.EUTRA_RRC_Definitions.AntennaInfoCommon;
import asn.lte.generated.EUTRA_RRC_Definitions.ARFCN_ValueEUTRA;
import asn.lte.generated.EUTRA_RRC_Definitions.SystemInformationBlockType1_v890_IEs;
import asn.lte.generated.EUTRA_RRC_Definitions.OtherConfig_r9;
import asn.lte.generated.EUTRA_RRC_Definitions.SCellToAddModList_r10;

public class AS_Config extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_InterNodeDefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "AS-Config";
   }

   public MeasConfig sourceMeasConfig;
   public RadioResourceConfigDedicated sourceRadioResourceConfig;
   public SecurityAlgorithmConfig sourceSecurityAlgorithmConfig;
   public C_RNTI sourceUE_Identity;
   public MasterInformationBlock sourceMasterInformationBlock;
   public SystemInformationBlockType1 sourceSystemInformationBlockType1;
   public SystemInformationBlockType2 sourceSystemInformationBlockType2;
   public AntennaInfoCommon antennaInfoCommon;
   public ARFCN_ValueEUTRA sourceDl_CarrierFreq;
   public boolean mV2ExtPresent;
   public SystemInformationBlockType1_v890_IEs sourceSystemInformationBlockType1Ext;  // optional
   public OtherConfig_r9 sourceOtherConfig_r9;
   public boolean mV3ExtPresent;
   public SCellToAddModList_r10 sourceSCellConfigList_r10;  // optional
   public boolean mV4ExtPresent;
   public SCG_Config_r12 sourceConfigSCG_r12;  // optional
   public boolean mV5ExtPresent;
   public AS_ConfigNR_r15 as_ConfigNR_r15;  // optional
   public boolean mV6ExtPresent;
   public AS_Config_v1550 as_Config_v1550;  // optional
   public boolean mV7ExtPresent;
   public AS_ConfigNR_v1570 as_ConfigNR_v1570;  // optional
   public Asn1OpenExt extElem1;

   public AS_Config () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public AS_Config (
      MeasConfig sourceMeasConfig_,
      RadioResourceConfigDedicated sourceRadioResourceConfig_,
      SecurityAlgorithmConfig sourceSecurityAlgorithmConfig_,
      C_RNTI sourceUE_Identity_,
      MasterInformationBlock sourceMasterInformationBlock_,
      SystemInformationBlockType1 sourceSystemInformationBlockType1_,
      SystemInformationBlockType2 sourceSystemInformationBlockType2_,
      AntennaInfoCommon antennaInfoCommon_,
      ARFCN_ValueEUTRA sourceDl_CarrierFreq_,
      SystemInformationBlockType1_v890_IEs sourceSystemInformationBlockType1Ext_,
      OtherConfig_r9 sourceOtherConfig_r9_,
      SCellToAddModList_r10 sourceSCellConfigList_r10_,
      SCG_Config_r12 sourceConfigSCG_r12_,
      AS_ConfigNR_r15 as_ConfigNR_r15_,
      AS_Config_v1550 as_Config_v1550_,
      AS_ConfigNR_v1570 as_ConfigNR_v1570_
   ) {
      super();
      sourceMeasConfig = sourceMeasConfig_;
      sourceRadioResourceConfig = sourceRadioResourceConfig_;
      sourceSecurityAlgorithmConfig = sourceSecurityAlgorithmConfig_;
      sourceUE_Identity = sourceUE_Identity_;
      sourceMasterInformationBlock = sourceMasterInformationBlock_;
      sourceSystemInformationBlockType1 = sourceSystemInformationBlockType1_;
      sourceSystemInformationBlockType2 = sourceSystemInformationBlockType2_;
      antennaInfoCommon = antennaInfoCommon_;
      sourceDl_CarrierFreq = sourceDl_CarrierFreq_;
      sourceSystemInformationBlockType1Ext = sourceSystemInformationBlockType1Ext_;
      sourceOtherConfig_r9 = sourceOtherConfig_r9_;
      sourceSCellConfigList_r10 = sourceSCellConfigList_r10_;
      sourceConfigSCG_r12 = sourceConfigSCG_r12_;
      as_ConfigNR_r15 = as_ConfigNR_r15_;
      as_Config_v1550 = as_Config_v1550_;
      as_ConfigNR_v1570 = as_ConfigNR_v1570_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public AS_Config (
      MeasConfig sourceMeasConfig_,
      RadioResourceConfigDedicated sourceRadioResourceConfig_,
      SecurityAlgorithmConfig sourceSecurityAlgorithmConfig_,
      C_RNTI sourceUE_Identity_,
      MasterInformationBlock sourceMasterInformationBlock_,
      SystemInformationBlockType1 sourceSystemInformationBlockType1_,
      SystemInformationBlockType2 sourceSystemInformationBlockType2_,
      AntennaInfoCommon antennaInfoCommon_,
      ARFCN_ValueEUTRA sourceDl_CarrierFreq_,
      OtherConfig_r9 sourceOtherConfig_r9_
   ) {
      super();
      sourceMeasConfig = sourceMeasConfig_;
      sourceRadioResourceConfig = sourceRadioResourceConfig_;
      sourceSecurityAlgorithmConfig = sourceSecurityAlgorithmConfig_;
      sourceUE_Identity = sourceUE_Identity_;
      sourceMasterInformationBlock = sourceMasterInformationBlock_;
      sourceSystemInformationBlockType1 = sourceSystemInformationBlockType1_;
      sourceSystemInformationBlockType2 = sourceSystemInformationBlockType2_;
      antennaInfoCommon = antennaInfoCommon_;
      sourceDl_CarrierFreq = sourceDl_CarrierFreq_;
      sourceOtherConfig_r9 = sourceOtherConfig_r9_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public AS_Config (MeasConfig sourceMeasConfig_,
      RadioResourceConfigDedicated sourceRadioResourceConfig_,
      SecurityAlgorithmConfig sourceSecurityAlgorithmConfig_,
      C_RNTI sourceUE_Identity_,
      MasterInformationBlock sourceMasterInformationBlock_,
      SystemInformationBlockType1 sourceSystemInformationBlockType1_,
      SystemInformationBlockType2 sourceSystemInformationBlockType2_,
      AntennaInfoCommon antennaInfoCommon_,
      long sourceDl_CarrierFreq_,
      SystemInformationBlockType1_v890_IEs sourceSystemInformationBlockType1Ext_,
      OtherConfig_r9 sourceOtherConfig_r9_,
      SCellToAddModList_r10 sourceSCellConfigList_r10_,
      SCG_Config_r12 sourceConfigSCG_r12_,
      AS_ConfigNR_r15 as_ConfigNR_r15_,
      AS_Config_v1550 as_Config_v1550_,
      AS_ConfigNR_v1570 as_ConfigNR_v1570_
   ) {
      super();
      sourceMeasConfig = sourceMeasConfig_;
      sourceRadioResourceConfig = sourceRadioResourceConfig_;
      sourceSecurityAlgorithmConfig = sourceSecurityAlgorithmConfig_;
      sourceUE_Identity = sourceUE_Identity_;
      sourceMasterInformationBlock = sourceMasterInformationBlock_;
      sourceSystemInformationBlockType1 = sourceSystemInformationBlockType1_;
      sourceSystemInformationBlockType2 = sourceSystemInformationBlockType2_;
      antennaInfoCommon = antennaInfoCommon_;
      sourceDl_CarrierFreq = new ARFCN_ValueEUTRA (sourceDl_CarrierFreq_);
      sourceSystemInformationBlockType1Ext = sourceSystemInformationBlockType1Ext_;
      sourceOtherConfig_r9 = sourceOtherConfig_r9_;
      sourceSCellConfigList_r10 = sourceSCellConfigList_r10_;
      sourceConfigSCG_r12 = sourceConfigSCG_r12_;
      as_ConfigNR_r15 = as_ConfigNR_r15_;
      as_Config_v1550 = as_Config_v1550_;
      as_ConfigNR_v1570 = as_ConfigNR_v1570_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public AS_Config (
      MeasConfig sourceMeasConfig_,
      RadioResourceConfigDedicated sourceRadioResourceConfig_,
      SecurityAlgorithmConfig sourceSecurityAlgorithmConfig_,
      C_RNTI sourceUE_Identity_,
      MasterInformationBlock sourceMasterInformationBlock_,
      SystemInformationBlockType1 sourceSystemInformationBlockType1_,
      SystemInformationBlockType2 sourceSystemInformationBlockType2_,
      AntennaInfoCommon antennaInfoCommon_,
      long sourceDl_CarrierFreq_,
      OtherConfig_r9 sourceOtherConfig_r9_
   ) {
      super();
      sourceMeasConfig = sourceMeasConfig_;
      sourceRadioResourceConfig = sourceRadioResourceConfig_;
      sourceSecurityAlgorithmConfig = sourceSecurityAlgorithmConfig_;
      sourceUE_Identity = sourceUE_Identity_;
      sourceMasterInformationBlock = sourceMasterInformationBlock_;
      sourceSystemInformationBlockType1 = sourceSystemInformationBlockType1_;
      sourceSystemInformationBlockType2 = sourceSystemInformationBlockType2_;
      antennaInfoCommon = antennaInfoCommon_;
      sourceDl_CarrierFreq = new ARFCN_ValueEUTRA (sourceDl_CarrierFreq_);
      sourceOtherConfig_r9 = sourceOtherConfig_r9_;
   }

   public void init () {
      sourceMeasConfig = null;
      sourceRadioResourceConfig = null;
      sourceSecurityAlgorithmConfig = null;
      sourceUE_Identity = null;
      sourceMasterInformationBlock = null;
      sourceSystemInformationBlockType1 = null;
      sourceSystemInformationBlockType2 = null;
      antennaInfoCommon = null;
      sourceDl_CarrierFreq = null;
      sourceSystemInformationBlockType1Ext = null;
      sourceOtherConfig_r9 = null;
      sourceSCellConfigList_r10 = null;
      sourceConfigSCG_r12 = null;
      as_ConfigNR_r15 = null;
      as_Config_v1550 = null;
      as_ConfigNR_v1570 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 17; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return sourceMeasConfig;
         case 1: return sourceRadioResourceConfig;
         case 2: return sourceSecurityAlgorithmConfig;
         case 3: return sourceUE_Identity;
         case 4: return sourceMasterInformationBlock;
         case 5: return sourceSystemInformationBlockType1;
         case 6: return sourceSystemInformationBlockType2;
         case 7: return antennaInfoCommon;
         case 8: return sourceDl_CarrierFreq;
         case 9: return sourceSystemInformationBlockType1Ext;
         case 10: return sourceOtherConfig_r9;
         case 11: return sourceSCellConfigList_r10;
         case 12: return sourceConfigSCG_r12;
         case 13: return as_ConfigNR_r15;
         case 14: return as_Config_v1550;
         case 15: return as_ConfigNR_v1570;
         case 16: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "sourceMeasConfig";
         case 1: return "sourceRadioResourceConfig";
         case 2: return "sourceSecurityAlgorithmConfig";
         case 3: return "sourceUE-Identity";
         case 4: return "sourceMasterInformationBlock";
         case 5: return "sourceSystemInformationBlockType1";
         case 6: return "sourceSystemInformationBlockType2";
         case 7: return "antennaInfoCommon";
         case 8: return "sourceDl-CarrierFreq";
         case 9: return "sourceSystemInformationBlockType1Ext";
         case 10: return "sourceOtherConfig-r9";
         case 11: return "sourceSCellConfigList-r10";
         case 12: return "sourceConfigSCG-r12";
         case 13: return "as-ConfigNR-r15";
         case 14: return "as-Config-v1550";
         case 15: return "as-ConfigNR-v1570";
         case 16: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      // decode sourceMeasConfig

      buffer.getContext().eventDispatcher.startElement("sourceMeasConfig", -1);

      sourceMeasConfig = new MeasConfig();
      sourceMeasConfig.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("sourceMeasConfig", -1);

      // decode sourceRadioResourceConfig

      buffer.getContext().eventDispatcher.startElement("sourceRadioResourceConfig", -1);

      sourceRadioResourceConfig = new RadioResourceConfigDedicated();
      sourceRadioResourceConfig.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("sourceRadioResourceConfig", -1);

      // decode sourceSecurityAlgorithmConfig

      buffer.getContext().eventDispatcher.startElement("sourceSecurityAlgorithmConfig", -1);

      sourceSecurityAlgorithmConfig = new SecurityAlgorithmConfig();
      sourceSecurityAlgorithmConfig.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("sourceSecurityAlgorithmConfig", -1);

      // decode sourceUE_Identity

      buffer.getContext().eventDispatcher.startElement("sourceUE_Identity", -1);

      sourceUE_Identity = new C_RNTI();
      sourceUE_Identity.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("sourceUE_Identity", -1);

      // decode sourceMasterInformationBlock

      buffer.getContext().eventDispatcher.startElement("sourceMasterInformationBlock", -1);

      sourceMasterInformationBlock = new MasterInformationBlock();
      sourceMasterInformationBlock.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("sourceMasterInformationBlock", -1);

      // decode sourceSystemInformationBlockType1

      buffer.getContext().eventDispatcher.startElement("sourceSystemInformationBlockType1", -1);

      sourceSystemInformationBlockType1 = new SystemInformationBlockType1();
      sourceSystemInformationBlockType1.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("sourceSystemInformationBlockType1", -1);

      // decode sourceSystemInformationBlockType2

      buffer.getContext().eventDispatcher.startElement("sourceSystemInformationBlockType2", -1);

      sourceSystemInformationBlockType2 = new SystemInformationBlockType2();
      sourceSystemInformationBlockType2.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("sourceSystemInformationBlockType2", -1);

      // decode antennaInfoCommon

      buffer.getContext().eventDispatcher.startElement("antennaInfoCommon", -1);

      antennaInfoCommon = new AntennaInfoCommon();
      antennaInfoCommon.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("antennaInfoCommon", -1);

      // decode sourceDl_CarrierFreq

      buffer.getContext().eventDispatcher.startElement("sourceDl_CarrierFreq", -1);

      sourceDl_CarrierFreq = new ARFCN_ValueEUTRA();
      sourceDl_CarrierFreq.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("sourceDl_CarrierFreq", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV4ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV5ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV6ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV7ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean sourceSystemInformationBlockType1ExtPresent = buffer.decodeBit ("sourceSystemInformationBlockType1ExtPresent");

            // decode sourceSystemInformationBlockType1Ext

            if (sourceSystemInformationBlockType1ExtPresent) {
               buffer.getContext().eventDispatcher.startElement("sourceSystemInformationBlockType1Ext", -1);

               Asn1OctetString sourceSystemInformationBlockType1Ext_outer = new Asn1OctetString();
               sourceSystemInformationBlockType1Ext_outer.decode (buffer);
               if (sourceSystemInformationBlockType1Ext_outer.value == null) throw new Asn1Exception("contained type's complete encoding is empty");
               Asn1PerDecodeBuffer savedBuffer = buffer;
               buffer = new Asn1PerDecodeBuffer( sourceSystemInformationBlockType1Ext_outer.value, buffer.isAligned());
               buffer.setEventHandlerList( savedBuffer );
               sourceSystemInformationBlockType1Ext = new SystemInformationBlockType1_v890_IEs();
               sourceSystemInformationBlockType1Ext.decode (buffer);
               buffer = savedBuffer;
               buffer.getContext().eventDispatcher.endElement("sourceSystemInformationBlockType1Ext", -1);
            }
            else {
               sourceSystemInformationBlockType1Ext = null;
            }

            // decode sourceOtherConfig_r9

            buffer.getContext().eventDispatcher.startElement("sourceOtherConfig_r9", -1);

            sourceOtherConfig_r9 = new OtherConfig_r9();
            sourceOtherConfig_r9.decode (buffer);
            buffer.getContext().eventDispatcher.endElement("sourceOtherConfig_r9", -1);

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean sourceSCellConfigList_r10Present = buffer.decodeBit ("sourceSCellConfigList_r10Present");

            // decode sourceSCellConfigList_r10

            if (sourceSCellConfigList_r10Present) {
               buffer.getContext().eventDispatcher.startElement("sourceSCellConfigList_r10", -1);

               sourceSCellConfigList_r10 = new SCellToAddModList_r10();
               sourceSCellConfigList_r10.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("sourceSCellConfigList_r10", -1);
            }
            else {
               sourceSCellConfigList_r10 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV4ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean sourceConfigSCG_r12Present = buffer.decodeBit ("sourceConfigSCG_r12Present");

            // decode sourceConfigSCG_r12

            if (sourceConfigSCG_r12Present) {
               buffer.getContext().eventDispatcher.startElement("sourceConfigSCG_r12", -1);

               sourceConfigSCG_r12 = new SCG_Config_r12();
               sourceConfigSCG_r12.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("sourceConfigSCG_r12", -1);
            }
            else {
               sourceConfigSCG_r12 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV5ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean as_ConfigNR_r15Present = buffer.decodeBit ("as_ConfigNR_r15Present");

            // decode as_ConfigNR_r15

            if (as_ConfigNR_r15Present) {
               buffer.getContext().eventDispatcher.startElement("as_ConfigNR_r15", -1);

               as_ConfigNR_r15 = new AS_ConfigNR_r15();
               as_ConfigNR_r15.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("as_ConfigNR_r15", -1);
            }
            else {
               as_ConfigNR_r15 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV6ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean as_Config_v1550Present = buffer.decodeBit ("as_Config_v1550Present");

            // decode as_Config_v1550

            if (as_Config_v1550Present) {
               buffer.getContext().eventDispatcher.startElement("as_Config_v1550", -1);

               as_Config_v1550 = new AS_Config_v1550();
               as_Config_v1550.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("as_Config_v1550", -1);
            }
            else {
               as_Config_v1550 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV7ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean as_ConfigNR_v1570Present = buffer.decodeBit ("as_ConfigNR_v1570Present");

            // decode as_ConfigNR_v1570

            if (as_ConfigNR_v1570Present) {
               buffer.getContext().eventDispatcher.startElement("as_ConfigNR_v1570", -1);

               as_ConfigNR_v1570 = new AS_ConfigNR_v1570();
               as_ConfigNR_v1570.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("as_ConfigNR_v1570", -1);
            }
            else {
               as_ConfigNR_v1570 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (sourceMeasConfig != null) sourceMeasConfig.print (_sb, "sourceMeasConfig", _level+1);
      if (sourceRadioResourceConfig != null) sourceRadioResourceConfig.print (_sb, "sourceRadioResourceConfig", _level+1);
      if (sourceSecurityAlgorithmConfig != null) sourceSecurityAlgorithmConfig.print (_sb, "sourceSecurityAlgorithmConfig", _level+1);
      if (sourceUE_Identity != null) sourceUE_Identity.print (_sb, "sourceUE_Identity", _level+1);
      if (sourceMasterInformationBlock != null) sourceMasterInformationBlock.print (_sb, "sourceMasterInformationBlock", _level+1);
      if (sourceSystemInformationBlockType1 != null) sourceSystemInformationBlockType1.print (_sb, "sourceSystemInformationBlockType1", _level+1);
      if (sourceSystemInformationBlockType2 != null) sourceSystemInformationBlockType2.print (_sb, "sourceSystemInformationBlockType2", _level+1);
      if (antennaInfoCommon != null) antennaInfoCommon.print (_sb, "antennaInfoCommon", _level+1);
      if (sourceDl_CarrierFreq != null) sourceDl_CarrierFreq.print (_sb, "sourceDl_CarrierFreq", _level+1);
      if (sourceSystemInformationBlockType1Ext != null) sourceSystemInformationBlockType1Ext.print (_sb, "sourceSystemInformationBlockType1Ext", _level+1);
      if (sourceOtherConfig_r9 != null) sourceOtherConfig_r9.print (_sb, "sourceOtherConfig_r9", _level+1);
      if (sourceSCellConfigList_r10 != null) sourceSCellConfigList_r10.print (_sb, "sourceSCellConfigList_r10", _level+1);
      if (sourceConfigSCG_r12 != null) sourceConfigSCG_r12.print (_sb, "sourceConfigSCG_r12", _level+1);
      if (as_ConfigNR_r15 != null) as_ConfigNR_r15.print (_sb, "as_ConfigNR_r15", _level+1);
      if (as_Config_v1550 != null) as_Config_v1550.print (_sb, "as_Config_v1550", _level+1);
      if (as_ConfigNR_v1570 != null) as_ConfigNR_v1570.print (_sb, "as_ConfigNR_v1570", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
