/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class InterFreqCarrierFreqInfo_v1530 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "InterFreqCarrierFreqInfo-v1530";
   }

   public Asn1Boolean hsdn_Indication_r15;
   public InterFreqNeighHSDN_CellList_r15 interFreqNeighHSDN_CellList_r15;  // optional
   public CellSelectionInfoCE_v1530 cellSelectionInfoCE_v1530;  // optional

   public InterFreqCarrierFreqInfo_v1530 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public InterFreqCarrierFreqInfo_v1530 (
      Asn1Boolean hsdn_Indication_r15_,
      InterFreqNeighHSDN_CellList_r15 interFreqNeighHSDN_CellList_r15_,
      CellSelectionInfoCE_v1530 cellSelectionInfoCE_v1530_
   ) {
      super();
      hsdn_Indication_r15 = hsdn_Indication_r15_;
      interFreqNeighHSDN_CellList_r15 = interFreqNeighHSDN_CellList_r15_;
      cellSelectionInfoCE_v1530 = cellSelectionInfoCE_v1530_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public InterFreqCarrierFreqInfo_v1530 (
      Asn1Boolean hsdn_Indication_r15_
   ) {
      super();
      hsdn_Indication_r15 = hsdn_Indication_r15_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public InterFreqCarrierFreqInfo_v1530 (boolean hsdn_Indication_r15_,
      InterFreqNeighHSDN_CellList_r15 interFreqNeighHSDN_CellList_r15_,
      CellSelectionInfoCE_v1530 cellSelectionInfoCE_v1530_
   ) {
      super();
      hsdn_Indication_r15 = new Asn1Boolean (hsdn_Indication_r15_);
      interFreqNeighHSDN_CellList_r15 = interFreqNeighHSDN_CellList_r15_;
      cellSelectionInfoCE_v1530 = cellSelectionInfoCE_v1530_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public InterFreqCarrierFreqInfo_v1530 (
      boolean hsdn_Indication_r15_
   ) {
      super();
      hsdn_Indication_r15 = new Asn1Boolean (hsdn_Indication_r15_);
   }

   public void init () {
      hsdn_Indication_r15 = null;
      interFreqNeighHSDN_CellList_r15 = null;
      cellSelectionInfoCE_v1530 = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return hsdn_Indication_r15;
         case 1: return interFreqNeighHSDN_CellList_r15;
         case 2: return cellSelectionInfoCE_v1530;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "hsdn-Indication-r15";
         case 1: return "interFreqNeighHSDN-CellList-r15";
         case 2: return "cellSelectionInfoCE-v1530";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean interFreqNeighHSDN_CellList_r15Present = buffer.decodeBit ("interFreqNeighHSDN_CellList_r15Present");
      boolean cellSelectionInfoCE_v1530Present = buffer.decodeBit ("cellSelectionInfoCE_v1530Present");

      // decode hsdn_Indication_r15

      buffer.getContext().eventDispatcher.startElement("hsdn_Indication_r15", -1);

      hsdn_Indication_r15 = new Asn1Boolean();
      hsdn_Indication_r15.decode (buffer);

      buffer.invokeCharacters(hsdn_Indication_r15.toString());
      buffer.getContext().eventDispatcher.endElement("hsdn_Indication_r15", -1);

      // decode interFreqNeighHSDN_CellList_r15

      if (interFreqNeighHSDN_CellList_r15Present) {
         buffer.getContext().eventDispatcher.startElement("interFreqNeighHSDN_CellList_r15", -1);

         interFreqNeighHSDN_CellList_r15 = new InterFreqNeighHSDN_CellList_r15();
         interFreqNeighHSDN_CellList_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("interFreqNeighHSDN_CellList_r15", -1);
      }
      else {
         interFreqNeighHSDN_CellList_r15 = null;
      }

      // decode cellSelectionInfoCE_v1530

      if (cellSelectionInfoCE_v1530Present) {
         buffer.getContext().eventDispatcher.startElement("cellSelectionInfoCE_v1530", -1);

         cellSelectionInfoCE_v1530 = new CellSelectionInfoCE_v1530();
         cellSelectionInfoCE_v1530.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("cellSelectionInfoCE_v1530", -1);
      }
      else {
         cellSelectionInfoCE_v1530 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (hsdn_Indication_r15 != null) hsdn_Indication_r15.print (_sb, "hsdn_Indication_r15", _level+1);
      if (interFreqNeighHSDN_CellList_r15 != null) interFreqNeighHSDN_CellList_r15.print (_sb, "interFreqNeighHSDN_CellList_r15", _level+1);
      if (cellSelectionInfoCE_v1530 != null) cellSelectionInfoCE_v1530.print (_sb, "cellSelectionInfoCE_v1530", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
