/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class RACH_CE_LevelInfo_r13 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "RACH-CE-LevelInfo-r13";
   }

   public RACH_CE_LevelInfo_r13_preambleMappingInfo_r13 preambleMappingInfo_r13;
   public RACH_CE_LevelInfo_r13_ra_ResponseWindowSize_r13 ra_ResponseWindowSize_r13 = null;
   public RACH_CE_LevelInfo_r13_mac_ContentionResolutionTimer_r13 mac_ContentionResolutionTimer_r13 = null;
   public RACH_CE_LevelInfo_r13_rar_HoppingConfig_r13 rar_HoppingConfig_r13 = null;
   public boolean mV2ExtPresent;
   public RACH_CE_LevelInfo_r13_edt_Parameters_r15 edt_Parameters_r15;  // optional
   public Asn1OpenExt extElem1;

   public RACH_CE_LevelInfo_r13 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public RACH_CE_LevelInfo_r13 (
      RACH_CE_LevelInfo_r13_preambleMappingInfo_r13 preambleMappingInfo_r13_,
      RACH_CE_LevelInfo_r13_ra_ResponseWindowSize_r13 ra_ResponseWindowSize_r13_,
      RACH_CE_LevelInfo_r13_mac_ContentionResolutionTimer_r13 mac_ContentionResolutionTimer_r13_,
      RACH_CE_LevelInfo_r13_rar_HoppingConfig_r13 rar_HoppingConfig_r13_,
      RACH_CE_LevelInfo_r13_edt_Parameters_r15 edt_Parameters_r15_
   ) {
      super();
      preambleMappingInfo_r13 = preambleMappingInfo_r13_;
      ra_ResponseWindowSize_r13 = ra_ResponseWindowSize_r13_;
      mac_ContentionResolutionTimer_r13 = mac_ContentionResolutionTimer_r13_;
      rar_HoppingConfig_r13 = rar_HoppingConfig_r13_;
      edt_Parameters_r15 = edt_Parameters_r15_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public RACH_CE_LevelInfo_r13 (
      RACH_CE_LevelInfo_r13_preambleMappingInfo_r13 preambleMappingInfo_r13_,
      RACH_CE_LevelInfo_r13_ra_ResponseWindowSize_r13 ra_ResponseWindowSize_r13_,
      RACH_CE_LevelInfo_r13_mac_ContentionResolutionTimer_r13 mac_ContentionResolutionTimer_r13_,
      RACH_CE_LevelInfo_r13_rar_HoppingConfig_r13 rar_HoppingConfig_r13_
   ) {
      super();
      preambleMappingInfo_r13 = preambleMappingInfo_r13_;
      ra_ResponseWindowSize_r13 = ra_ResponseWindowSize_r13_;
      mac_ContentionResolutionTimer_r13 = mac_ContentionResolutionTimer_r13_;
      rar_HoppingConfig_r13 = rar_HoppingConfig_r13_;
   }

   public void init () {
      preambleMappingInfo_r13 = null;
      ra_ResponseWindowSize_r13 = null;
      mac_ContentionResolutionTimer_r13 = null;
      rar_HoppingConfig_r13 = null;
      edt_Parameters_r15 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return preambleMappingInfo_r13;
         case 1: return ra_ResponseWindowSize_r13;
         case 2: return mac_ContentionResolutionTimer_r13;
         case 3: return rar_HoppingConfig_r13;
         case 4: return edt_Parameters_r15;
         case 5: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "preambleMappingInfo-r13";
         case 1: return "ra-ResponseWindowSize-r13";
         case 2: return "mac-ContentionResolutionTimer-r13";
         case 3: return "rar-HoppingConfig-r13";
         case 4: return "edt-Parameters-r15";
         case 5: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      // decode preambleMappingInfo_r13

      buffer.getContext().eventDispatcher.startElement("preambleMappingInfo_r13", -1);

      preambleMappingInfo_r13 = new RACH_CE_LevelInfo_r13_preambleMappingInfo_r13();
      preambleMappingInfo_r13.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("preambleMappingInfo_r13", -1);

      // decode ra_ResponseWindowSize_r13

      buffer.getContext().eventDispatcher.startElement("ra_ResponseWindowSize_r13", -1);

      {
         int tval = RACH_CE_LevelInfo_r13_ra_ResponseWindowSize_r13.decodeEnumValue (buffer);
         ra_ResponseWindowSize_r13 = RACH_CE_LevelInfo_r13_ra_ResponseWindowSize_r13.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("ra_ResponseWindowSize_r13", -1);

      // decode mac_ContentionResolutionTimer_r13

      buffer.getContext().eventDispatcher.startElement("mac_ContentionResolutionTimer_r13", -1);

      {
         int tval = RACH_CE_LevelInfo_r13_mac_ContentionResolutionTimer_r13.decodeEnumValue (buffer);
         mac_ContentionResolutionTimer_r13 = RACH_CE_LevelInfo_r13_mac_ContentionResolutionTimer_r13.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("mac_ContentionResolutionTimer_r13", -1);

      // decode rar_HoppingConfig_r13

      buffer.getContext().eventDispatcher.startElement("rar_HoppingConfig_r13", -1);

      {
         int tval = RACH_CE_LevelInfo_r13_rar_HoppingConfig_r13.decodeEnumValue (buffer);
         rar_HoppingConfig_r13 = RACH_CE_LevelInfo_r13_rar_HoppingConfig_r13.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("rar_HoppingConfig_r13", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean edt_Parameters_r15Present = buffer.decodeBit ("edt_Parameters_r15Present");

            // decode edt_Parameters_r15

            if (edt_Parameters_r15Present) {
               buffer.getContext().eventDispatcher.startElement("edt_Parameters_r15", -1);

               edt_Parameters_r15 = new RACH_CE_LevelInfo_r13_edt_Parameters_r15();
               edt_Parameters_r15.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("edt_Parameters_r15", -1);
            }
            else {
               edt_Parameters_r15 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (preambleMappingInfo_r13 != null) preambleMappingInfo_r13.print (_sb, "preambleMappingInfo_r13", _level+1);
      if (ra_ResponseWindowSize_r13 != null) ra_ResponseWindowSize_r13.print (_sb, "ra_ResponseWindowSize_r13", _level+1);
      if (mac_ContentionResolutionTimer_r13 != null) mac_ContentionResolutionTimer_r13.print (_sb, "mac_ContentionResolutionTimer_r13", _level+1);
      if (rar_HoppingConfig_r13 != null) rar_HoppingConfig_r13.print (_sb, "rar_HoppingConfig_r13", _level+1);
      if (edt_Parameters_r15 != null) edt_Parameters_r15.print (_sb, "edt_Parameters_r15", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
