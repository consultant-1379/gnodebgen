/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NBIOT_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MasterInformationBlock_TDD_NB_r15 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NBIOT_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "MasterInformationBlock-TDD-NB-r15";
   }

   public Asn1BitString systemFrameNumber_MSB_r15;
   public Asn1BitString hyperSFN_LSB_r15;
   public Asn1Integer schedulingInfoSIB1_r15;
   public Asn1Integer systemInfoValueTag_r15;
   public Asn1Boolean ab_Enabled_r15;
   public MasterInformationBlock_TDD_NB_r15_operationModeInfo_r15 operationModeInfo_r15;
   public MasterInformationBlock_TDD_NB_r15_sib1_CarrierInfo_r15 sib1_CarrierInfo_r15 = null;
   public Asn1BitString spare;

   public MasterInformationBlock_TDD_NB_r15 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MasterInformationBlock_TDD_NB_r15 (
      Asn1BitString systemFrameNumber_MSB_r15_,
      Asn1BitString hyperSFN_LSB_r15_,
      Asn1Integer schedulingInfoSIB1_r15_,
      Asn1Integer systemInfoValueTag_r15_,
      Asn1Boolean ab_Enabled_r15_,
      MasterInformationBlock_TDD_NB_r15_operationModeInfo_r15 operationModeInfo_r15_,
      MasterInformationBlock_TDD_NB_r15_sib1_CarrierInfo_r15 sib1_CarrierInfo_r15_,
      Asn1BitString spare_
   ) {
      super();
      systemFrameNumber_MSB_r15 = systemFrameNumber_MSB_r15_;
      hyperSFN_LSB_r15 = hyperSFN_LSB_r15_;
      schedulingInfoSIB1_r15 = schedulingInfoSIB1_r15_;
      systemInfoValueTag_r15 = systemInfoValueTag_r15_;
      ab_Enabled_r15 = ab_Enabled_r15_;
      operationModeInfo_r15 = operationModeInfo_r15_;
      sib1_CarrierInfo_r15 = sib1_CarrierInfo_r15_;
      spare = spare_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public MasterInformationBlock_TDD_NB_r15 (Asn1BitString systemFrameNumber_MSB_r15_,
      Asn1BitString hyperSFN_LSB_r15_,
      long schedulingInfoSIB1_r15_,
      long systemInfoValueTag_r15_,
      boolean ab_Enabled_r15_,
      MasterInformationBlock_TDD_NB_r15_operationModeInfo_r15 operationModeInfo_r15_,
      MasterInformationBlock_TDD_NB_r15_sib1_CarrierInfo_r15 sib1_CarrierInfo_r15_,
      Asn1BitString spare_
   ) {
      super();
      systemFrameNumber_MSB_r15 = systemFrameNumber_MSB_r15_;
      hyperSFN_LSB_r15 = hyperSFN_LSB_r15_;
      schedulingInfoSIB1_r15 = new Asn1Integer (schedulingInfoSIB1_r15_);
      systemInfoValueTag_r15 = new Asn1Integer (systemInfoValueTag_r15_);
      ab_Enabled_r15 = new Asn1Boolean (ab_Enabled_r15_);
      operationModeInfo_r15 = operationModeInfo_r15_;
      sib1_CarrierInfo_r15 = sib1_CarrierInfo_r15_;
      spare = spare_;
   }

   public void init () {
      systemFrameNumber_MSB_r15 = null;
      hyperSFN_LSB_r15 = null;
      schedulingInfoSIB1_r15 = null;
      systemInfoValueTag_r15 = null;
      ab_Enabled_r15 = null;
      operationModeInfo_r15 = null;
      sib1_CarrierInfo_r15 = null;
      spare = null;
   }

   public int getElementCount() { return 8; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return systemFrameNumber_MSB_r15;
         case 1: return hyperSFN_LSB_r15;
         case 2: return schedulingInfoSIB1_r15;
         case 3: return systemInfoValueTag_r15;
         case 4: return ab_Enabled_r15;
         case 5: return operationModeInfo_r15;
         case 6: return sib1_CarrierInfo_r15;
         case 7: return spare;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "systemFrameNumber-MSB-r15";
         case 1: return "hyperSFN-LSB-r15";
         case 2: return "schedulingInfoSIB1-r15";
         case 3: return "systemInfoValueTag-r15";
         case 4: return "ab-Enabled-r15";
         case 5: return "operationModeInfo-r15";
         case 6: return "sib1-CarrierInfo-r15";
         case 7: return "spare";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode systemFrameNumber_MSB_r15

      buffer.getContext().eventDispatcher.startElement("systemFrameNumber_MSB_r15", -1);

      systemFrameNumber_MSB_r15 = new Asn1BitString();
      systemFrameNumber_MSB_r15.decode (buffer, 4, 4);

      buffer.invokeCharacters(systemFrameNumber_MSB_r15.toString());
      buffer.getContext().eventDispatcher.endElement("systemFrameNumber_MSB_r15", -1);

      // decode hyperSFN_LSB_r15

      buffer.getContext().eventDispatcher.startElement("hyperSFN_LSB_r15", -1);

      hyperSFN_LSB_r15 = new Asn1BitString();
      hyperSFN_LSB_r15.decode (buffer, 2, 2);

      buffer.invokeCharacters(hyperSFN_LSB_r15.toString());
      buffer.getContext().eventDispatcher.endElement("hyperSFN_LSB_r15", -1);

      // decode schedulingInfoSIB1_r15

      buffer.getContext().eventDispatcher.startElement("schedulingInfoSIB1_r15", -1);

      schedulingInfoSIB1_r15 = new Asn1Integer();
      schedulingInfoSIB1_r15.decode (buffer, 0, 15);

      buffer.invokeCharacters(schedulingInfoSIB1_r15.toString());
      buffer.getContext().eventDispatcher.endElement("schedulingInfoSIB1_r15", -1);

      // decode systemInfoValueTag_r15

      buffer.getContext().eventDispatcher.startElement("systemInfoValueTag_r15", -1);

      systemInfoValueTag_r15 = new Asn1Integer();
      systemInfoValueTag_r15.decode (buffer, 0, 31);

      buffer.invokeCharacters(systemInfoValueTag_r15.toString());
      buffer.getContext().eventDispatcher.endElement("systemInfoValueTag_r15", -1);

      // decode ab_Enabled_r15

      buffer.getContext().eventDispatcher.startElement("ab_Enabled_r15", -1);

      ab_Enabled_r15 = new Asn1Boolean();
      ab_Enabled_r15.decode (buffer);

      buffer.invokeCharacters(ab_Enabled_r15.toString());
      buffer.getContext().eventDispatcher.endElement("ab_Enabled_r15", -1);

      // decode operationModeInfo_r15

      buffer.getContext().eventDispatcher.startElement("operationModeInfo_r15", -1);

      operationModeInfo_r15 = new MasterInformationBlock_TDD_NB_r15_operationModeInfo_r15();
      operationModeInfo_r15.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("operationModeInfo_r15", -1);

      // decode sib1_CarrierInfo_r15

      buffer.getContext().eventDispatcher.startElement("sib1_CarrierInfo_r15", -1);

      {
         int tval = MasterInformationBlock_TDD_NB_r15_sib1_CarrierInfo_r15.decodeEnumValue (buffer);
         sib1_CarrierInfo_r15 = MasterInformationBlock_TDD_NB_r15_sib1_CarrierInfo_r15.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("sib1_CarrierInfo_r15", -1);

      // decode spare

      buffer.getContext().eventDispatcher.startElement("spare", -1);

      spare = new Asn1BitString();
      spare.decode (buffer, 9, 9);

      buffer.invokeCharacters(spare.toString());
      buffer.getContext().eventDispatcher.endElement("spare", -1);

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (systemFrameNumber_MSB_r15 != null) systemFrameNumber_MSB_r15.print (_sb, "systemFrameNumber_MSB_r15", _level+1);
      if (hyperSFN_LSB_r15 != null) hyperSFN_LSB_r15.print (_sb, "hyperSFN_LSB_r15", _level+1);
      if (schedulingInfoSIB1_r15 != null) schedulingInfoSIB1_r15.print (_sb, "schedulingInfoSIB1_r15", _level+1);
      if (systemInfoValueTag_r15 != null) systemInfoValueTag_r15.print (_sb, "systemInfoValueTag_r15", _level+1);
      if (ab_Enabled_r15 != null) ab_Enabled_r15.print (_sb, "ab_Enabled_r15", _level+1);
      if (operationModeInfo_r15 != null) operationModeInfo_r15.print (_sb, "operationModeInfo_r15", _level+1);
      if (sib1_CarrierInfo_r15 != null) sib1_CarrierInfo_r15.print (_sb, "sib1_CarrierInfo_r15", _level+1);
      if (spare != null) spare.print (_sb, "spare", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
