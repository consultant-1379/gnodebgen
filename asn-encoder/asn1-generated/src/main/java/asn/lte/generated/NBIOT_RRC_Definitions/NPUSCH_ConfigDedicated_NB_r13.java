/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NBIOT_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class NPUSCH_ConfigDedicated_NB_r13 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NBIOT_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "NPUSCH-ConfigDedicated-NB-r13";
   }

   public ACK_NACK_NumRepetitions_NB_r13 ack_NACK_NumRepetitions_r13 = null;  // optional
   public Asn1Boolean npusch_AllSymbols_r13;  // optional
   public NPUSCH_ConfigDedicated_NB_r13_groupHoppingDisabled_r13 groupHoppingDisabled_r13 = null;  // optional

   public NPUSCH_ConfigDedicated_NB_r13 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public NPUSCH_ConfigDedicated_NB_r13 (
      ACK_NACK_NumRepetitions_NB_r13 ack_NACK_NumRepetitions_r13_,
      Asn1Boolean npusch_AllSymbols_r13_,
      NPUSCH_ConfigDedicated_NB_r13_groupHoppingDisabled_r13 groupHoppingDisabled_r13_
   ) {
      super();
      ack_NACK_NumRepetitions_r13 = ack_NACK_NumRepetitions_r13_;
      npusch_AllSymbols_r13 = npusch_AllSymbols_r13_;
      groupHoppingDisabled_r13 = groupHoppingDisabled_r13_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public NPUSCH_ConfigDedicated_NB_r13 (ACK_NACK_NumRepetitions_NB_r13 ack_NACK_NumRepetitions_r13_,
      boolean npusch_AllSymbols_r13_,
      NPUSCH_ConfigDedicated_NB_r13_groupHoppingDisabled_r13 groupHoppingDisabled_r13_
   ) {
      super();
      ack_NACK_NumRepetitions_r13 = ack_NACK_NumRepetitions_r13_;
      npusch_AllSymbols_r13 = new Asn1Boolean (npusch_AllSymbols_r13_);
      groupHoppingDisabled_r13 = groupHoppingDisabled_r13_;
   }

   public void init () {
      ack_NACK_NumRepetitions_r13 = null;
      npusch_AllSymbols_r13 = null;
      groupHoppingDisabled_r13 = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return ack_NACK_NumRepetitions_r13;
         case 1: return npusch_AllSymbols_r13;
         case 2: return groupHoppingDisabled_r13;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "ack-NACK-NumRepetitions-r13";
         case 1: return "npusch-AllSymbols-r13";
         case 2: return "groupHoppingDisabled-r13";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean ack_NACK_NumRepetitions_r13Present = buffer.decodeBit ("ack_NACK_NumRepetitions_r13Present");
      boolean npusch_AllSymbols_r13Present = buffer.decodeBit ("npusch_AllSymbols_r13Present");
      boolean groupHoppingDisabled_r13Present = buffer.decodeBit ("groupHoppingDisabled_r13Present");

      // decode ack_NACK_NumRepetitions_r13

      if (ack_NACK_NumRepetitions_r13Present) {
         buffer.getContext().eventDispatcher.startElement("ack_NACK_NumRepetitions_r13", -1);

         int tval = ACK_NACK_NumRepetitions_NB_r13.decodeEnumValue (buffer);
         ack_NACK_NumRepetitions_r13 = ACK_NACK_NumRepetitions_NB_r13.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("ack_NACK_NumRepetitions_r13", -1);
      }
      else {
         ack_NACK_NumRepetitions_r13 = null;
      }

      // decode npusch_AllSymbols_r13

      if (npusch_AllSymbols_r13Present) {
         buffer.getContext().eventDispatcher.startElement("npusch_AllSymbols_r13", -1);

         npusch_AllSymbols_r13 = new Asn1Boolean();
         npusch_AllSymbols_r13.decode (buffer);

         buffer.invokeCharacters(npusch_AllSymbols_r13.toString());
         buffer.getContext().eventDispatcher.endElement("npusch_AllSymbols_r13", -1);
      }
      else {
         npusch_AllSymbols_r13 = null;
      }

      // decode groupHoppingDisabled_r13

      if (groupHoppingDisabled_r13Present) {
         buffer.getContext().eventDispatcher.startElement("groupHoppingDisabled_r13", -1);

         int tval = NPUSCH_ConfigDedicated_NB_r13_groupHoppingDisabled_r13.decodeEnumValue (buffer);
         groupHoppingDisabled_r13 = NPUSCH_ConfigDedicated_NB_r13_groupHoppingDisabled_r13.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("groupHoppingDisabled_r13", -1);
      }
      else {
         groupHoppingDisabled_r13 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (ack_NACK_NumRepetitions_r13 != null) ack_NACK_NumRepetitions_r13.print (_sb, "ack_NACK_NumRepetitions_r13", _level+1);
      if (npusch_AllSymbols_r13 != null) npusch_AllSymbols_r13.print (_sb, "npusch_AllSymbols_r13", _level+1);
      if (groupHoppingDisabled_r13 != null) groupHoppingDisabled_r13.print (_sb, "groupHoppingDisabled_r13", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
