/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class ConnEstFailReport_r11 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ConnEstFailReport-r11";
   }

   public CellGlobalIdEUTRA failedCellId_r11;
   public LocationInfo_r10 locationInfo_r11;  // optional
   public ConnEstFailReport_r11_measResultFailedCell_r11 measResultFailedCell_r11;
   public ConnEstFailReport_r11_measResultNeighCells_r11 measResultNeighCells_r11;  // optional
   public NumberOfPreamblesSent_r11 numberOfPreamblesSent_r11;
   public Asn1Boolean contentionDetected_r11;
   public Asn1Boolean maxTxPowerReached_r11;
   public TimeSinceFailure_r11 timeSinceFailure_r11;
   public MeasResultList2EUTRA_v9e0 measResultListEUTRA_v1130;  // optional
   public boolean mV2ExtPresent;
   public RSRQ_Range_v1250 measResultFailedCell_v1250;  // optional
   public RSRQ_Type_r12 failedCellRSRQ_Type_r12;  // optional
   public MeasResultList2EUTRA_v1250 measResultListEUTRA_v1250;  // optional
   public boolean mV3ExtPresent;
   public RSRP_Range_v1360 measResultFailedCell_v1360;  // optional
   public boolean mV4ExtPresent;
   public LogMeasResultListBT_r15 logMeasResultListBT_r15;  // optional
   public LogMeasResultListWLAN_r15 logMeasResultListWLAN_r15;  // optional
   public Asn1OpenExt extElem1;

   public ConnEstFailReport_r11 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ConnEstFailReport_r11 (
      CellGlobalIdEUTRA failedCellId_r11_,
      LocationInfo_r10 locationInfo_r11_,
      ConnEstFailReport_r11_measResultFailedCell_r11 measResultFailedCell_r11_,
      ConnEstFailReport_r11_measResultNeighCells_r11 measResultNeighCells_r11_,
      NumberOfPreamblesSent_r11 numberOfPreamblesSent_r11_,
      Asn1Boolean contentionDetected_r11_,
      Asn1Boolean maxTxPowerReached_r11_,
      TimeSinceFailure_r11 timeSinceFailure_r11_,
      MeasResultList2EUTRA_v9e0 measResultListEUTRA_v1130_,
      RSRQ_Range_v1250 measResultFailedCell_v1250_,
      RSRQ_Type_r12 failedCellRSRQ_Type_r12_,
      MeasResultList2EUTRA_v1250 measResultListEUTRA_v1250_,
      RSRP_Range_v1360 measResultFailedCell_v1360_,
      LogMeasResultListBT_r15 logMeasResultListBT_r15_,
      LogMeasResultListWLAN_r15 logMeasResultListWLAN_r15_
   ) {
      super();
      failedCellId_r11 = failedCellId_r11_;
      locationInfo_r11 = locationInfo_r11_;
      measResultFailedCell_r11 = measResultFailedCell_r11_;
      measResultNeighCells_r11 = measResultNeighCells_r11_;
      numberOfPreamblesSent_r11 = numberOfPreamblesSent_r11_;
      contentionDetected_r11 = contentionDetected_r11_;
      maxTxPowerReached_r11 = maxTxPowerReached_r11_;
      timeSinceFailure_r11 = timeSinceFailure_r11_;
      measResultListEUTRA_v1130 = measResultListEUTRA_v1130_;
      measResultFailedCell_v1250 = measResultFailedCell_v1250_;
      failedCellRSRQ_Type_r12 = failedCellRSRQ_Type_r12_;
      measResultListEUTRA_v1250 = measResultListEUTRA_v1250_;
      measResultFailedCell_v1360 = measResultFailedCell_v1360_;
      logMeasResultListBT_r15 = logMeasResultListBT_r15_;
      logMeasResultListWLAN_r15 = logMeasResultListWLAN_r15_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public ConnEstFailReport_r11 (
      CellGlobalIdEUTRA failedCellId_r11_,
      ConnEstFailReport_r11_measResultFailedCell_r11 measResultFailedCell_r11_,
      NumberOfPreamblesSent_r11 numberOfPreamblesSent_r11_,
      Asn1Boolean contentionDetected_r11_,
      Asn1Boolean maxTxPowerReached_r11_,
      TimeSinceFailure_r11 timeSinceFailure_r11_
   ) {
      super();
      failedCellId_r11 = failedCellId_r11_;
      measResultFailedCell_r11 = measResultFailedCell_r11_;
      numberOfPreamblesSent_r11 = numberOfPreamblesSent_r11_;
      contentionDetected_r11 = contentionDetected_r11_;
      maxTxPowerReached_r11 = maxTxPowerReached_r11_;
      timeSinceFailure_r11 = timeSinceFailure_r11_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public ConnEstFailReport_r11 (CellGlobalIdEUTRA failedCellId_r11_,
      LocationInfo_r10 locationInfo_r11_,
      ConnEstFailReport_r11_measResultFailedCell_r11 measResultFailedCell_r11_,
      ConnEstFailReport_r11_measResultNeighCells_r11 measResultNeighCells_r11_,
      long numberOfPreamblesSent_r11_,
      boolean contentionDetected_r11_,
      boolean maxTxPowerReached_r11_,
      long timeSinceFailure_r11_,
      MeasResultList2EUTRA_v9e0 measResultListEUTRA_v1130_,
      long measResultFailedCell_v1250_,
      RSRQ_Type_r12 failedCellRSRQ_Type_r12_,
      MeasResultList2EUTRA_v1250 measResultListEUTRA_v1250_,
      long measResultFailedCell_v1360_,
      LogMeasResultListBT_r15 logMeasResultListBT_r15_,
      LogMeasResultListWLAN_r15 logMeasResultListWLAN_r15_
   ) {
      super();
      failedCellId_r11 = failedCellId_r11_;
      locationInfo_r11 = locationInfo_r11_;
      measResultFailedCell_r11 = measResultFailedCell_r11_;
      measResultNeighCells_r11 = measResultNeighCells_r11_;
      numberOfPreamblesSent_r11 = new NumberOfPreamblesSent_r11 (numberOfPreamblesSent_r11_);
      contentionDetected_r11 = new Asn1Boolean (contentionDetected_r11_);
      maxTxPowerReached_r11 = new Asn1Boolean (maxTxPowerReached_r11_);
      timeSinceFailure_r11 = new TimeSinceFailure_r11 (timeSinceFailure_r11_);
      measResultListEUTRA_v1130 = measResultListEUTRA_v1130_;
      measResultFailedCell_v1250 = new RSRQ_Range_v1250 (measResultFailedCell_v1250_);
      failedCellRSRQ_Type_r12 = failedCellRSRQ_Type_r12_;
      measResultListEUTRA_v1250 = measResultListEUTRA_v1250_;
      measResultFailedCell_v1360 = new RSRP_Range_v1360 (measResultFailedCell_v1360_);
      logMeasResultListBT_r15 = logMeasResultListBT_r15_;
      logMeasResultListWLAN_r15 = logMeasResultListWLAN_r15_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public ConnEstFailReport_r11 (
      CellGlobalIdEUTRA failedCellId_r11_,
      ConnEstFailReport_r11_measResultFailedCell_r11 measResultFailedCell_r11_,
      long numberOfPreamblesSent_r11_,
      boolean contentionDetected_r11_,
      boolean maxTxPowerReached_r11_,
      long timeSinceFailure_r11_
   ) {
      super();
      failedCellId_r11 = failedCellId_r11_;
      measResultFailedCell_r11 = measResultFailedCell_r11_;
      numberOfPreamblesSent_r11 = new NumberOfPreamblesSent_r11 (numberOfPreamblesSent_r11_);
      contentionDetected_r11 = new Asn1Boolean (contentionDetected_r11_);
      maxTxPowerReached_r11 = new Asn1Boolean (maxTxPowerReached_r11_);
      timeSinceFailure_r11 = new TimeSinceFailure_r11 (timeSinceFailure_r11_);
   }

   public void init () {
      failedCellId_r11 = null;
      locationInfo_r11 = null;
      measResultFailedCell_r11 = null;
      measResultNeighCells_r11 = null;
      numberOfPreamblesSent_r11 = null;
      contentionDetected_r11 = null;
      maxTxPowerReached_r11 = null;
      timeSinceFailure_r11 = null;
      measResultListEUTRA_v1130 = null;
      measResultFailedCell_v1250 = null;
      failedCellRSRQ_Type_r12 = null;
      measResultListEUTRA_v1250 = null;
      measResultFailedCell_v1360 = null;
      logMeasResultListBT_r15 = null;
      logMeasResultListWLAN_r15 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 16; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return failedCellId_r11;
         case 1: return locationInfo_r11;
         case 2: return measResultFailedCell_r11;
         case 3: return measResultNeighCells_r11;
         case 4: return numberOfPreamblesSent_r11;
         case 5: return contentionDetected_r11;
         case 6: return maxTxPowerReached_r11;
         case 7: return timeSinceFailure_r11;
         case 8: return measResultListEUTRA_v1130;
         case 9: return measResultFailedCell_v1250;
         case 10: return failedCellRSRQ_Type_r12;
         case 11: return measResultListEUTRA_v1250;
         case 12: return measResultFailedCell_v1360;
         case 13: return logMeasResultListBT_r15;
         case 14: return logMeasResultListWLAN_r15;
         case 15: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "failedCellId-r11";
         case 1: return "locationInfo-r11";
         case 2: return "measResultFailedCell-r11";
         case 3: return "measResultNeighCells-r11";
         case 4: return "numberOfPreamblesSent-r11";
         case 5: return "contentionDetected-r11";
         case 6: return "maxTxPowerReached-r11";
         case 7: return "timeSinceFailure-r11";
         case 8: return "measResultListEUTRA-v1130";
         case 9: return "measResultFailedCell-v1250";
         case 10: return "failedCellRSRQ-Type-r12";
         case 11: return "measResultListEUTRA-v1250";
         case 12: return "measResultFailedCell-v1360";
         case 13: return "logMeasResultListBT-r15";
         case 14: return "logMeasResultListWLAN-r15";
         case 15: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean locationInfo_r11Present = buffer.decodeBit ("locationInfo_r11Present");
      boolean measResultNeighCells_r11Present = buffer.decodeBit ("measResultNeighCells_r11Present");
      boolean measResultListEUTRA_v1130Present = buffer.decodeBit ("measResultListEUTRA_v1130Present");

      // decode failedCellId_r11

      buffer.getContext().eventDispatcher.startElement("failedCellId_r11", -1);

      failedCellId_r11 = new CellGlobalIdEUTRA();
      failedCellId_r11.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("failedCellId_r11", -1);

      // decode locationInfo_r11

      if (locationInfo_r11Present) {
         buffer.getContext().eventDispatcher.startElement("locationInfo_r11", -1);

         locationInfo_r11 = new LocationInfo_r10();
         locationInfo_r11.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("locationInfo_r11", -1);
      }
      else {
         locationInfo_r11 = null;
      }

      // decode measResultFailedCell_r11

      buffer.getContext().eventDispatcher.startElement("measResultFailedCell_r11", -1);

      measResultFailedCell_r11 = new ConnEstFailReport_r11_measResultFailedCell_r11();
      measResultFailedCell_r11.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("measResultFailedCell_r11", -1);

      // decode measResultNeighCells_r11

      if (measResultNeighCells_r11Present) {
         buffer.getContext().eventDispatcher.startElement("measResultNeighCells_r11", -1);

         measResultNeighCells_r11 = new ConnEstFailReport_r11_measResultNeighCells_r11();
         measResultNeighCells_r11.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("measResultNeighCells_r11", -1);
      }
      else {
         measResultNeighCells_r11 = null;
      }

      // decode numberOfPreamblesSent_r11

      buffer.getContext().eventDispatcher.startElement("numberOfPreamblesSent_r11", -1);

      numberOfPreamblesSent_r11 = new NumberOfPreamblesSent_r11();
      numberOfPreamblesSent_r11.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("numberOfPreamblesSent_r11", -1);

      // decode contentionDetected_r11

      buffer.getContext().eventDispatcher.startElement("contentionDetected_r11", -1);

      contentionDetected_r11 = new Asn1Boolean();
      contentionDetected_r11.decode (buffer);

      buffer.invokeCharacters(contentionDetected_r11.toString());
      buffer.getContext().eventDispatcher.endElement("contentionDetected_r11", -1);

      // decode maxTxPowerReached_r11

      buffer.getContext().eventDispatcher.startElement("maxTxPowerReached_r11", -1);

      maxTxPowerReached_r11 = new Asn1Boolean();
      maxTxPowerReached_r11.decode (buffer);

      buffer.invokeCharacters(maxTxPowerReached_r11.toString());
      buffer.getContext().eventDispatcher.endElement("maxTxPowerReached_r11", -1);

      // decode timeSinceFailure_r11

      buffer.getContext().eventDispatcher.startElement("timeSinceFailure_r11", -1);

      timeSinceFailure_r11 = new TimeSinceFailure_r11();
      timeSinceFailure_r11.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("timeSinceFailure_r11", -1);

      // decode measResultListEUTRA_v1130

      if (measResultListEUTRA_v1130Present) {
         buffer.getContext().eventDispatcher.startElement("measResultListEUTRA_v1130", -1);

         measResultListEUTRA_v1130 = new MeasResultList2EUTRA_v9e0();
         measResultListEUTRA_v1130.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("measResultListEUTRA_v1130", -1);
      }
      else {
         measResultListEUTRA_v1130 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV4ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean measResultFailedCell_v1250Present = buffer.decodeBit ("measResultFailedCell_v1250Present");

            boolean failedCellRSRQ_Type_r12Present = buffer.decodeBit ("failedCellRSRQ_Type_r12Present");

            boolean measResultListEUTRA_v1250Present = buffer.decodeBit ("measResultListEUTRA_v1250Present");

            // decode measResultFailedCell_v1250

            if (measResultFailedCell_v1250Present) {
               buffer.getContext().eventDispatcher.startElement("measResultFailedCell_v1250", -1);

               measResultFailedCell_v1250 = new RSRQ_Range_v1250();
               measResultFailedCell_v1250.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("measResultFailedCell_v1250", -1);
            }
            else {
               measResultFailedCell_v1250 = null;
            }

            // decode failedCellRSRQ_Type_r12

            if (failedCellRSRQ_Type_r12Present) {
               buffer.getContext().eventDispatcher.startElement("failedCellRSRQ_Type_r12", -1);

               failedCellRSRQ_Type_r12 = new RSRQ_Type_r12();
               failedCellRSRQ_Type_r12.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("failedCellRSRQ_Type_r12", -1);
            }
            else {
               failedCellRSRQ_Type_r12 = null;
            }

            // decode measResultListEUTRA_v1250

            if (measResultListEUTRA_v1250Present) {
               buffer.getContext().eventDispatcher.startElement("measResultListEUTRA_v1250", -1);

               measResultListEUTRA_v1250 = new MeasResultList2EUTRA_v1250();
               measResultListEUTRA_v1250.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("measResultListEUTRA_v1250", -1);
            }
            else {
               measResultListEUTRA_v1250 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean measResultFailedCell_v1360Present = buffer.decodeBit ("measResultFailedCell_v1360Present");

            // decode measResultFailedCell_v1360

            if (measResultFailedCell_v1360Present) {
               buffer.getContext().eventDispatcher.startElement("measResultFailedCell_v1360", -1);

               measResultFailedCell_v1360 = new RSRP_Range_v1360();
               measResultFailedCell_v1360.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("measResultFailedCell_v1360", -1);
            }
            else {
               measResultFailedCell_v1360 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV4ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean logMeasResultListBT_r15Present = buffer.decodeBit ("logMeasResultListBT_r15Present");

            boolean logMeasResultListWLAN_r15Present = buffer.decodeBit ("logMeasResultListWLAN_r15Present");

            // decode logMeasResultListBT_r15

            if (logMeasResultListBT_r15Present) {
               buffer.getContext().eventDispatcher.startElement("logMeasResultListBT_r15", -1);

               logMeasResultListBT_r15 = new LogMeasResultListBT_r15();
               logMeasResultListBT_r15.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("logMeasResultListBT_r15", -1);
            }
            else {
               logMeasResultListBT_r15 = null;
            }

            // decode logMeasResultListWLAN_r15

            if (logMeasResultListWLAN_r15Present) {
               buffer.getContext().eventDispatcher.startElement("logMeasResultListWLAN_r15", -1);

               logMeasResultListWLAN_r15 = new LogMeasResultListWLAN_r15();
               logMeasResultListWLAN_r15.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("logMeasResultListWLAN_r15", -1);
            }
            else {
               logMeasResultListWLAN_r15 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (failedCellId_r11 != null) failedCellId_r11.print (_sb, "failedCellId_r11", _level+1);
      if (locationInfo_r11 != null) locationInfo_r11.print (_sb, "locationInfo_r11", _level+1);
      if (measResultFailedCell_r11 != null) measResultFailedCell_r11.print (_sb, "measResultFailedCell_r11", _level+1);
      if (measResultNeighCells_r11 != null) measResultNeighCells_r11.print (_sb, "measResultNeighCells_r11", _level+1);
      if (numberOfPreamblesSent_r11 != null) numberOfPreamblesSent_r11.print (_sb, "numberOfPreamblesSent_r11", _level+1);
      if (contentionDetected_r11 != null) contentionDetected_r11.print (_sb, "contentionDetected_r11", _level+1);
      if (maxTxPowerReached_r11 != null) maxTxPowerReached_r11.print (_sb, "maxTxPowerReached_r11", _level+1);
      if (timeSinceFailure_r11 != null) timeSinceFailure_r11.print (_sb, "timeSinceFailure_r11", _level+1);
      if (measResultListEUTRA_v1130 != null) measResultListEUTRA_v1130.print (_sb, "measResultListEUTRA_v1130", _level+1);
      if (measResultFailedCell_v1250 != null) measResultFailedCell_v1250.print (_sb, "measResultFailedCell_v1250", _level+1);
      if (failedCellRSRQ_Type_r12 != null) failedCellRSRQ_Type_r12.print (_sb, "failedCellRSRQ_Type_r12", _level+1);
      if (measResultListEUTRA_v1250 != null) measResultListEUTRA_v1250.print (_sb, "measResultListEUTRA_v1250", _level+1);
      if (measResultFailedCell_v1360 != null) measResultFailedCell_v1360.print (_sb, "measResultFailedCell_v1360", _level+1);
      if (logMeasResultListBT_r15 != null) logMeasResultListBT_r15.print (_sb, "logMeasResultListBT_r15", _level+1);
      if (logMeasResultListWLAN_r15 != null) logMeasResultListWLAN_r15.print (_sb, "logMeasResultListWLAN_r15", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
