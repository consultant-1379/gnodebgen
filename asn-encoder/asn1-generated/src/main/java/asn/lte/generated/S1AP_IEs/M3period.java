/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.S1AP_IEs;

import com.objsys.asn1j.runtime.*;

public class M3period extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_S1AP_IEsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "M3period";
   }

   // Integer constants for switch-case
   public static final int _MS100 = 0;
   public static final int _MS1000 = 1;
   public static final int _MS10000 = 2;
   public static final int _MS1024 = 3;
   public static final int _MS1280 = 4;
   public static final int _MS2048 = 5;
   public static final int _MS2560 = 6;
   public static final int _MS5120 = 7;
   public static final int _MS10240 = 8;
   public static final int _MIN1 = 9;

   // Singleton instances of M3period
   protected static final M3period _ms100 = new M3period(0);
   protected static final M3period _ms1000 = new M3period(1);
   protected static final M3period _ms10000 = new M3period(2);
   protected static final M3period _ms1024 = new M3period(3);
   protected static final M3period _ms1280 = new M3period(4);
   protected static final M3period _ms2048 = new M3period(5);
   protected static final M3period _ms2560 = new M3period(6);
   protected static final M3period _ms5120 = new M3period(7);
   protected static final M3period _ms10240 = new M3period(8);
   protected static final M3period _min1 = new M3period(9);
   private static M3period __undefined = new M3period(-999);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    *   7
    *   8
    *   9
    */
   protected M3period (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for ms100.
    */
   public static M3period ms100() {
      return _ms100;
   }

   /**
    * Singleton accessor method for ms1000.
    */
   public static M3period ms1000() {
      return _ms1000;
   }

   /**
    * Singleton accessor method for ms10000.
    */
   public static M3period ms10000() {
      return _ms10000;
   }

   /**
    * Singleton accessor method for ms1024.
    */
   public static M3period ms1024() {
      return _ms1024;
   }

   /**
    * Singleton accessor method for ms1280.
    */
   public static M3period ms1280() {
      return _ms1280;
   }

   /**
    * Singleton accessor method for ms2048.
    */
   public static M3period ms2048() {
      return _ms2048;
   }

   /**
    * Singleton accessor method for ms2560.
    */
   public static M3period ms2560() {
      return _ms2560;
   }

   /**
    * Singleton accessor method for ms5120.
    */
   public static M3period ms5120() {
      return _ms5120;
   }

   /**
    * Singleton accessor method for ms10240.
    */
   public static M3period ms10240() {
      return _ms10240;
   }

   /**
    * Singleton accessor method for min1.
    */
   public static M3period min1() {
      return _min1;
   }

   /** Undefined value. */
   protected static M3period __undefined_() { return __undefined; }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return M3period.valueOf( M3period.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static M3period valueOf (int _value)
   {
      switch ((int)_value) {
         case 0: return ms100();
         case 1: return ms1000();
         case 2: return ms10000();
         case 3: return ms1024();
         case 4: return ms1280();
         case 5: return ms2048();
         case 6: return ms2560();
         case 7: return ms5120();
         case 8: return ms10240();
         case 9: return min1();
         default: return __undefined_();
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      boolean extbit = buffer.decodeBit ("extbit");

      if (extbit) {
         ui = buffer.decodeSmallNonNegWholeNumber ();

         switch (ui) {
            case 0: ret = 3; break;
            case 1: ret = 4; break;
            case 2: ret = 5; break;
            case 3: ret = 6; break;
            case 4: ret = 7; break;
            case 5: ret = 8; break;
            case 6: ret = 9; break;
            default: ret = 0x7fffffff; break;
         }
      }
      else {
         ui = (int) buffer.decodeConsWholeNumber (3);

         switch (ui) {
            case 0: ret =  0; break;
            case 1: ret =  1; break;
            case 2: ret =  2; break;
            default: throw new Asn1InvalidEnumException (ui);
         }
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (M3period.valueOf(ret).toString());

      return ret;
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("ms100");
         case 1: return ("ms1000");
         case 2: return ("ms10000");
         case 3: return ("ms1024");
         case 4: return ("ms1280");
         case 5: return ("ms2048");
         case 6: return ("ms2560");
         case 7: return ("ms5120");
         case 8: return ("ms10240");
         case 9: return ("min1");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
