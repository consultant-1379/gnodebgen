/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SIB2_cellReselectionInfoCommon extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public Asn1Integer nrofSS_BlocksToAverage;  // optional
   public ThresholdNR absThreshSS_BlocksConsolidation;  // optional
   public RangeToBestCell rangeToBestCell = null;  // optional
   public SIB2_cellReselectionInfoCommon_q_Hyst q_Hyst = null;
   public SIB2_cellReselectionInfoCommon_speedStateReselectionPars speedStateReselectionPars;  // optional
   public Asn1OpenExt extElem1;

   public SIB2_cellReselectionInfoCommon () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SIB2_cellReselectionInfoCommon (
      Asn1Integer nrofSS_BlocksToAverage_,
      ThresholdNR absThreshSS_BlocksConsolidation_,
      RangeToBestCell rangeToBestCell_,
      SIB2_cellReselectionInfoCommon_q_Hyst q_Hyst_,
      SIB2_cellReselectionInfoCommon_speedStateReselectionPars speedStateReselectionPars_
   ) {
      super();
      nrofSS_BlocksToAverage = nrofSS_BlocksToAverage_;
      absThreshSS_BlocksConsolidation = absThreshSS_BlocksConsolidation_;
      rangeToBestCell = rangeToBestCell_;
      q_Hyst = q_Hyst_;
      speedStateReselectionPars = speedStateReselectionPars_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SIB2_cellReselectionInfoCommon (
      SIB2_cellReselectionInfoCommon_q_Hyst q_Hyst_
   ) {
      super();
      q_Hyst = q_Hyst_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SIB2_cellReselectionInfoCommon (long nrofSS_BlocksToAverage_,
      ThresholdNR absThreshSS_BlocksConsolidation_,
      RangeToBestCell rangeToBestCell_,
      SIB2_cellReselectionInfoCommon_q_Hyst q_Hyst_,
      SIB2_cellReselectionInfoCommon_speedStateReselectionPars speedStateReselectionPars_
   ) {
      super();
      nrofSS_BlocksToAverage = new Asn1Integer (nrofSS_BlocksToAverage_);
      absThreshSS_BlocksConsolidation = absThreshSS_BlocksConsolidation_;
      rangeToBestCell = rangeToBestCell_;
      q_Hyst = q_Hyst_;
      speedStateReselectionPars = speedStateReselectionPars_;
   }

   public void init () {
      nrofSS_BlocksToAverage = null;
      absThreshSS_BlocksConsolidation = null;
      rangeToBestCell = null;
      q_Hyst = null;
      speedStateReselectionPars = null;
      extElem1 = null;
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return nrofSS_BlocksToAverage;
         case 1: return absThreshSS_BlocksConsolidation;
         case 2: return rangeToBestCell;
         case 3: return q_Hyst;
         case 4: return speedStateReselectionPars;
         case 5: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "nrofSS-BlocksToAverage";
         case 1: return "absThreshSS-BlocksConsolidation";
         case 2: return "rangeToBestCell";
         case 3: return "q-Hyst";
         case 4: return "speedStateReselectionPars";
         case 5: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean nrofSS_BlocksToAveragePresent = buffer.decodeBit ("nrofSS_BlocksToAveragePresent");
      boolean absThreshSS_BlocksConsolidationPresent = buffer.decodeBit ("absThreshSS_BlocksConsolidationPresent");
      boolean rangeToBestCellPresent = buffer.decodeBit ("rangeToBestCellPresent");
      boolean speedStateReselectionParsPresent = buffer.decodeBit ("speedStateReselectionParsPresent");

      // decode nrofSS_BlocksToAverage

      if (nrofSS_BlocksToAveragePresent) {
         buffer.getContext().eventDispatcher.startElement("nrofSS_BlocksToAverage", -1);

         nrofSS_BlocksToAverage = new Asn1Integer();
         nrofSS_BlocksToAverage.decode (buffer, 2, 16);

         buffer.invokeCharacters(nrofSS_BlocksToAverage.toString());
         buffer.getContext().eventDispatcher.endElement("nrofSS_BlocksToAverage", -1);
      }
      else {
         nrofSS_BlocksToAverage = null;
      }

      // decode absThreshSS_BlocksConsolidation

      if (absThreshSS_BlocksConsolidationPresent) {
         buffer.getContext().eventDispatcher.startElement("absThreshSS_BlocksConsolidation", -1);

         absThreshSS_BlocksConsolidation = new ThresholdNR();
         absThreshSS_BlocksConsolidation.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("absThreshSS_BlocksConsolidation", -1);
      }
      else {
         absThreshSS_BlocksConsolidation = null;
      }

      // decode rangeToBestCell

      if (rangeToBestCellPresent) {
         buffer.getContext().eventDispatcher.startElement("rangeToBestCell", -1);

         int tval = RangeToBestCell.decodeEnumValue (buffer);
         rangeToBestCell = RangeToBestCell.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("rangeToBestCell", -1);
      }
      else {
         rangeToBestCell = null;
      }

      // decode q_Hyst

      buffer.getContext().eventDispatcher.startElement("q_Hyst", -1);

      {
         int tval = SIB2_cellReselectionInfoCommon_q_Hyst.decodeEnumValue (buffer);
         q_Hyst = SIB2_cellReselectionInfoCommon_q_Hyst.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("q_Hyst", -1);

      // decode speedStateReselectionPars

      if (speedStateReselectionParsPresent) {
         buffer.getContext().eventDispatcher.startElement("speedStateReselectionPars", -1);

         speedStateReselectionPars = new SIB2_cellReselectionInfoCommon_speedStateReselectionPars();
         speedStateReselectionPars.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("speedStateReselectionPars", -1);
      }
      else {
         speedStateReselectionPars = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (nrofSS_BlocksToAverage != null) nrofSS_BlocksToAverage.print (_sb, "nrofSS_BlocksToAverage", _level+1);
      if (absThreshSS_BlocksConsolidation != null) absThreshSS_BlocksConsolidation.print (_sb, "absThreshSS_BlocksConsolidation", _level+1);
      if (rangeToBestCell != null) rangeToBestCell.print (_sb, "rangeToBestCell", _level+1);
      if (q_Hyst != null) q_Hyst.print (_sb, "q_Hyst", _level+1);
      if (speedStateReselectionPars != null) speedStateReselectionPars.print (_sb, "speedStateReselectionPars", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
