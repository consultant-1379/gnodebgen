/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_Sidelink_Preconf;

import com.objsys.asn1j.runtime.*;
import asn.lte.generated.EUTRA_RRC_Definitions.SL_CP_Len_r12;
import asn.lte.generated.EUTRA_RRC_Definitions.SL_TF_ResourceConfig_r12;

public class SL_PreconfigDiscPool_r13 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_Sidelink_PreconfRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SL-PreconfigDiscPool-r13";
   }

   public SL_CP_Len_r12 cp_Len_r13 = null;
   public SL_PreconfigDiscPool_r13_discPeriod_r13 discPeriod_r13 = null;
   public Asn1Integer numRetx_r13;
   public Asn1Integer numRepetition_r13;
   public SL_TF_ResourceConfig_r12 tf_ResourceConfig_r13;
   public SL_PreconfigDiscPool_r13_txParameters_r13 txParameters_r13;  // optional
   public Asn1OpenExt extElem1;

   public SL_PreconfigDiscPool_r13 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SL_PreconfigDiscPool_r13 (
      SL_CP_Len_r12 cp_Len_r13_,
      SL_PreconfigDiscPool_r13_discPeriod_r13 discPeriod_r13_,
      Asn1Integer numRetx_r13_,
      Asn1Integer numRepetition_r13_,
      SL_TF_ResourceConfig_r12 tf_ResourceConfig_r13_,
      SL_PreconfigDiscPool_r13_txParameters_r13 txParameters_r13_
   ) {
      super();
      cp_Len_r13 = cp_Len_r13_;
      discPeriod_r13 = discPeriod_r13_;
      numRetx_r13 = numRetx_r13_;
      numRepetition_r13 = numRepetition_r13_;
      tf_ResourceConfig_r13 = tf_ResourceConfig_r13_;
      txParameters_r13 = txParameters_r13_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SL_PreconfigDiscPool_r13 (
      SL_CP_Len_r12 cp_Len_r13_,
      SL_PreconfigDiscPool_r13_discPeriod_r13 discPeriod_r13_,
      Asn1Integer numRetx_r13_,
      Asn1Integer numRepetition_r13_,
      SL_TF_ResourceConfig_r12 tf_ResourceConfig_r13_
   ) {
      super();
      cp_Len_r13 = cp_Len_r13_;
      discPeriod_r13 = discPeriod_r13_;
      numRetx_r13 = numRetx_r13_;
      numRepetition_r13 = numRepetition_r13_;
      tf_ResourceConfig_r13 = tf_ResourceConfig_r13_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SL_PreconfigDiscPool_r13 (SL_CP_Len_r12 cp_Len_r13_,
      SL_PreconfigDiscPool_r13_discPeriod_r13 discPeriod_r13_,
      long numRetx_r13_,
      long numRepetition_r13_,
      SL_TF_ResourceConfig_r12 tf_ResourceConfig_r13_,
      SL_PreconfigDiscPool_r13_txParameters_r13 txParameters_r13_
   ) {
      super();
      cp_Len_r13 = cp_Len_r13_;
      discPeriod_r13 = discPeriod_r13_;
      numRetx_r13 = new Asn1Integer (numRetx_r13_);
      numRepetition_r13 = new Asn1Integer (numRepetition_r13_);
      tf_ResourceConfig_r13 = tf_ResourceConfig_r13_;
      txParameters_r13 = txParameters_r13_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public SL_PreconfigDiscPool_r13 (
      SL_CP_Len_r12 cp_Len_r13_,
      SL_PreconfigDiscPool_r13_discPeriod_r13 discPeriod_r13_,
      long numRetx_r13_,
      long numRepetition_r13_,
      SL_TF_ResourceConfig_r12 tf_ResourceConfig_r13_
   ) {
      super();
      cp_Len_r13 = cp_Len_r13_;
      discPeriod_r13 = discPeriod_r13_;
      numRetx_r13 = new Asn1Integer (numRetx_r13_);
      numRepetition_r13 = new Asn1Integer (numRepetition_r13_);
      tf_ResourceConfig_r13 = tf_ResourceConfig_r13_;
   }

   public void init () {
      cp_Len_r13 = null;
      discPeriod_r13 = null;
      numRetx_r13 = null;
      numRepetition_r13 = null;
      tf_ResourceConfig_r13 = null;
      txParameters_r13 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return cp_Len_r13;
         case 1: return discPeriod_r13;
         case 2: return numRetx_r13;
         case 3: return numRepetition_r13;
         case 4: return tf_ResourceConfig_r13;
         case 5: return txParameters_r13;
         case 6: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "cp-Len-r13";
         case 1: return "discPeriod-r13";
         case 2: return "numRetx-r13";
         case 3: return "numRepetition-r13";
         case 4: return "tf-ResourceConfig-r13";
         case 5: return "txParameters-r13";
         case 6: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean txParameters_r13Present = buffer.decodeBit ("txParameters_r13Present");

      // decode cp_Len_r13

      buffer.getContext().eventDispatcher.startElement("cp_Len_r13", -1);

      {
         int tval = SL_CP_Len_r12.decodeEnumValue (buffer);
         cp_Len_r13 = SL_CP_Len_r12.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("cp_Len_r13", -1);

      // decode discPeriod_r13

      buffer.getContext().eventDispatcher.startElement("discPeriod_r13", -1);

      {
         int tval = SL_PreconfigDiscPool_r13_discPeriod_r13.decodeEnumValue (buffer);
         discPeriod_r13 = SL_PreconfigDiscPool_r13_discPeriod_r13.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("discPeriod_r13", -1);

      // decode numRetx_r13

      buffer.getContext().eventDispatcher.startElement("numRetx_r13", -1);

      numRetx_r13 = new Asn1Integer();
      numRetx_r13.decode (buffer, 0, 3);

      buffer.invokeCharacters(numRetx_r13.toString());
      buffer.getContext().eventDispatcher.endElement("numRetx_r13", -1);

      // decode numRepetition_r13

      buffer.getContext().eventDispatcher.startElement("numRepetition_r13", -1);

      numRepetition_r13 = new Asn1Integer();
      numRepetition_r13.decode (buffer, 1, 50);

      buffer.invokeCharacters(numRepetition_r13.toString());
      buffer.getContext().eventDispatcher.endElement("numRepetition_r13", -1);

      // decode tf_ResourceConfig_r13

      buffer.getContext().eventDispatcher.startElement("tf_ResourceConfig_r13", -1);

      tf_ResourceConfig_r13 = new SL_TF_ResourceConfig_r12();
      tf_ResourceConfig_r13.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("tf_ResourceConfig_r13", -1);

      // decode txParameters_r13

      if (txParameters_r13Present) {
         buffer.getContext().eventDispatcher.startElement("txParameters_r13", -1);

         txParameters_r13 = new SL_PreconfigDiscPool_r13_txParameters_r13();
         txParameters_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("txParameters_r13", -1);
      }
      else {
         txParameters_r13 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (cp_Len_r13 != null) cp_Len_r13.print (_sb, "cp_Len_r13", _level+1);
      if (discPeriod_r13 != null) discPeriod_r13.print (_sb, "discPeriod_r13", _level+1);
      if (numRetx_r13 != null) numRetx_r13.print (_sb, "numRetx_r13", _level+1);
      if (numRepetition_r13 != null) numRepetition_r13.print (_sb, "numRepetition_r13", _level+1);
      if (tf_ResourceConfig_r13 != null) tf_ResourceConfig_r13.print (_sb, "tf_ResourceConfig_r13", _level+1);
      if (txParameters_r13 != null) txParameters_r13.print (_sb, "txParameters_r13", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
