/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class RACH_ConfigCommon_v1250_txFailParams_r12_connEstFailOffsetValidity_r12 extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ENUMERATED";
   }

   // Integer constants for switch-case
   public static final int _S30 = 0;
   public static final int _S60 = 1;
   public static final int _S120 = 2;
   public static final int _S240 = 3;
   public static final int _S300 = 4;
   public static final int _S420 = 5;
   public static final int _S600 = 6;
   public static final int _S900 = 7;

   // Singleton instances of RACH_ConfigCommon_v1250_txFailParams_r12_connEstFailOffsetValidity_r12
   protected static final RACH_ConfigCommon_v1250_txFailParams_r12_connEstFailOffsetValidity_r12 _s30 = new RACH_ConfigCommon_v1250_txFailParams_r12_connEstFailOffsetValidity_r12(0);
   protected static final RACH_ConfigCommon_v1250_txFailParams_r12_connEstFailOffsetValidity_r12 _s60 = new RACH_ConfigCommon_v1250_txFailParams_r12_connEstFailOffsetValidity_r12(1);
   protected static final RACH_ConfigCommon_v1250_txFailParams_r12_connEstFailOffsetValidity_r12 _s120 = new RACH_ConfigCommon_v1250_txFailParams_r12_connEstFailOffsetValidity_r12(2);
   protected static final RACH_ConfigCommon_v1250_txFailParams_r12_connEstFailOffsetValidity_r12 _s240 = new RACH_ConfigCommon_v1250_txFailParams_r12_connEstFailOffsetValidity_r12(3);
   protected static final RACH_ConfigCommon_v1250_txFailParams_r12_connEstFailOffsetValidity_r12 _s300 = new RACH_ConfigCommon_v1250_txFailParams_r12_connEstFailOffsetValidity_r12(4);
   protected static final RACH_ConfigCommon_v1250_txFailParams_r12_connEstFailOffsetValidity_r12 _s420 = new RACH_ConfigCommon_v1250_txFailParams_r12_connEstFailOffsetValidity_r12(5);
   protected static final RACH_ConfigCommon_v1250_txFailParams_r12_connEstFailOffsetValidity_r12 _s600 = new RACH_ConfigCommon_v1250_txFailParams_r12_connEstFailOffsetValidity_r12(6);
   protected static final RACH_ConfigCommon_v1250_txFailParams_r12_connEstFailOffsetValidity_r12 _s900 = new RACH_ConfigCommon_v1250_txFailParams_r12_connEstFailOffsetValidity_r12(7);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    *   7
    */
   protected RACH_ConfigCommon_v1250_txFailParams_r12_connEstFailOffsetValidity_r12 (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for s30.
    */
   public static RACH_ConfigCommon_v1250_txFailParams_r12_connEstFailOffsetValidity_r12 s30() {
      return _s30;
   }

   /**
    * Singleton accessor method for s60.
    */
   public static RACH_ConfigCommon_v1250_txFailParams_r12_connEstFailOffsetValidity_r12 s60() {
      return _s60;
   }

   /**
    * Singleton accessor method for s120.
    */
   public static RACH_ConfigCommon_v1250_txFailParams_r12_connEstFailOffsetValidity_r12 s120() {
      return _s120;
   }

   /**
    * Singleton accessor method for s240.
    */
   public static RACH_ConfigCommon_v1250_txFailParams_r12_connEstFailOffsetValidity_r12 s240() {
      return _s240;
   }

   /**
    * Singleton accessor method for s300.
    */
   public static RACH_ConfigCommon_v1250_txFailParams_r12_connEstFailOffsetValidity_r12 s300() {
      return _s300;
   }

   /**
    * Singleton accessor method for s420.
    */
   public static RACH_ConfigCommon_v1250_txFailParams_r12_connEstFailOffsetValidity_r12 s420() {
      return _s420;
   }

   /**
    * Singleton accessor method for s600.
    */
   public static RACH_ConfigCommon_v1250_txFailParams_r12_connEstFailOffsetValidity_r12 s600() {
      return _s600;
   }

   /**
    * Singleton accessor method for s900.
    */
   public static RACH_ConfigCommon_v1250_txFailParams_r12_connEstFailOffsetValidity_r12 s900() {
      return _s900;
   }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return RACH_ConfigCommon_v1250_txFailParams_r12_connEstFailOffsetValidity_r12.valueOf( RACH_ConfigCommon_v1250_txFailParams_r12_connEstFailOffsetValidity_r12.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static RACH_ConfigCommon_v1250_txFailParams_r12_connEstFailOffsetValidity_r12 valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 0: return s30();
         case 1: return s60();
         case 2: return s120();
         case 3: return s240();
         case 4: return s300();
         case 5: return s420();
         case 6: return s600();
         case 7: return s900();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      ui = (int) buffer.decodeConsWholeNumber (8);

      switch (ui) {
         case 0: ret =  0; break;
         case 1: ret =  1; break;
         case 2: ret =  2; break;
         case 3: ret =  3; break;
         case 4: ret =  4; break;
         case 5: ret =  5; break;
         case 6: ret =  6; break;
         case 7: ret =  7; break;
         default: throw new Asn1InvalidEnumException (ui);
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (RACH_ConfigCommon_v1250_txFailParams_r12_connEstFailOffsetValidity_r12.valueOf(ret).toString());

      return ret;
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("s30");
         case 1: return ("s60");
         case 2: return ("s120");
         case 3: return ("s240");
         case 4: return ("s300");
         case 5: return ("s420");
         case 6: return ("s600");
         case 7: return ("s900");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
