/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class PollByte extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "PollByte";
   }

   // Integer constants for switch-case
   public static final int _KB25 = 0;
   public static final int _KB50 = 1;
   public static final int _KB75 = 2;
   public static final int _KB100 = 3;
   public static final int _KB125 = 4;
   public static final int _KB250 = 5;
   public static final int _KB375 = 6;
   public static final int _KB500 = 7;
   public static final int _KB750 = 8;
   public static final int _KB1000 = 9;
   public static final int _KB1250 = 10;
   public static final int _KB1500 = 11;
   public static final int _KB2000 = 12;
   public static final int _KB3000 = 13;
   public static final int _KBINFINITY = 14;
   public static final int _SPARE1 = 15;

   // Singleton instances of PollByte
   protected static final PollByte _kB25 = new PollByte(0);
   protected static final PollByte _kB50 = new PollByte(1);
   protected static final PollByte _kB75 = new PollByte(2);
   protected static final PollByte _kB100 = new PollByte(3);
   protected static final PollByte _kB125 = new PollByte(4);
   protected static final PollByte _kB250 = new PollByte(5);
   protected static final PollByte _kB375 = new PollByte(6);
   protected static final PollByte _kB500 = new PollByte(7);
   protected static final PollByte _kB750 = new PollByte(8);
   protected static final PollByte _kB1000 = new PollByte(9);
   protected static final PollByte _kB1250 = new PollByte(10);
   protected static final PollByte _kB1500 = new PollByte(11);
   protected static final PollByte _kB2000 = new PollByte(12);
   protected static final PollByte _kB3000 = new PollByte(13);
   protected static final PollByte _kBinfinity = new PollByte(14);
   protected static final PollByte _spare1 = new PollByte(15);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    *   7
    *   8
    *   9
    *   10
    *   11
    *   12
    *   13
    *   14
    *   15
    */
   protected PollByte (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for kB25.
    */
   public static PollByte kB25() {
      return _kB25;
   }

   /**
    * Singleton accessor method for kB50.
    */
   public static PollByte kB50() {
      return _kB50;
   }

   /**
    * Singleton accessor method for kB75.
    */
   public static PollByte kB75() {
      return _kB75;
   }

   /**
    * Singleton accessor method for kB100.
    */
   public static PollByte kB100() {
      return _kB100;
   }

   /**
    * Singleton accessor method for kB125.
    */
   public static PollByte kB125() {
      return _kB125;
   }

   /**
    * Singleton accessor method for kB250.
    */
   public static PollByte kB250() {
      return _kB250;
   }

   /**
    * Singleton accessor method for kB375.
    */
   public static PollByte kB375() {
      return _kB375;
   }

   /**
    * Singleton accessor method for kB500.
    */
   public static PollByte kB500() {
      return _kB500;
   }

   /**
    * Singleton accessor method for kB750.
    */
   public static PollByte kB750() {
      return _kB750;
   }

   /**
    * Singleton accessor method for kB1000.
    */
   public static PollByte kB1000() {
      return _kB1000;
   }

   /**
    * Singleton accessor method for kB1250.
    */
   public static PollByte kB1250() {
      return _kB1250;
   }

   /**
    * Singleton accessor method for kB1500.
    */
   public static PollByte kB1500() {
      return _kB1500;
   }

   /**
    * Singleton accessor method for kB2000.
    */
   public static PollByte kB2000() {
      return _kB2000;
   }

   /**
    * Singleton accessor method for kB3000.
    */
   public static PollByte kB3000() {
      return _kB3000;
   }

   /**
    * Singleton accessor method for kBinfinity.
    */
   public static PollByte kBinfinity() {
      return _kBinfinity;
   }

   /**
    * Singleton accessor method for spare1.
    */
   public static PollByte spare1() {
      return _spare1;
   }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return PollByte.valueOf( PollByte.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static PollByte valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 0: return kB25();
         case 1: return kB50();
         case 2: return kB75();
         case 3: return kB100();
         case 4: return kB125();
         case 5: return kB250();
         case 6: return kB375();
         case 7: return kB500();
         case 8: return kB750();
         case 9: return kB1000();
         case 10: return kB1250();
         case 11: return kB1500();
         case 12: return kB2000();
         case 13: return kB3000();
         case 14: return kBinfinity();
         case 15: return spare1();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      ui = (int) buffer.decodeConsWholeNumber (16);

      switch (ui) {
         case 0: ret =  0; break;
         case 1: ret =  1; break;
         case 2: ret =  2; break;
         case 3: ret =  3; break;
         case 4: ret =  4; break;
         case 5: ret =  5; break;
         case 6: ret =  6; break;
         case 7: ret =  7; break;
         case 8: ret =  8; break;
         case 9: ret =  9; break;
         case 10: ret =  10; break;
         case 11: ret =  11; break;
         case 12: ret =  12; break;
         case 13: ret =  13; break;
         case 14: ret =  14; break;
         case 15: ret =  15; break;
         default: throw new Asn1InvalidEnumException (ui);
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (PollByte.valueOf(ret).toString());

      return ret;
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("kB25");
         case 1: return ("kB50");
         case 2: return ("kB75");
         case 3: return ("kB100");
         case 4: return ("kB125");
         case 5: return ("kB250");
         case 6: return ("kB375");
         case 7: return ("kB500");
         case 8: return ("kB750");
         case 9: return ("kB1000");
         case 10: return ("kB1250");
         case 11: return ("kB1500");
         case 12: return ("kB2000");
         case 13: return ("kB3000");
         case 14: return ("kBinfinity");
         case 15: return ("spare1");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
