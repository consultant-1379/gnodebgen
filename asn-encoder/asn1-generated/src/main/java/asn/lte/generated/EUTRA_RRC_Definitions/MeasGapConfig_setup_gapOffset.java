/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MeasGapConfig_setup_gapOffset extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CHOICE";
   }

   // Choice element identifier constants
   public final static byte _GP0 = 1;
   public final static byte _GP1 = 2;
   public final static byte _GP2_R14 = 3;
   public final static byte _GP3_R14 = 4;
   public final static byte _GP_NCSG0_R14 = 5;
   public final static byte _GP_NCSG1_R14 = 6;
   public final static byte _GP_NCSG2_R14 = 7;
   public final static byte _GP_NCSG3_R14 = 8;
   public final static byte _GP_NONUNIFORM1_R14 = 9;
   public final static byte _GP_NONUNIFORM2_R14 = 10;
   public final static byte _GP_NONUNIFORM3_R14 = 11;
   public final static byte _GP_NONUNIFORM4_R14 = 12;
   public final static byte _GP4_R15 = 13;
   public final static byte _GP5_R15 = 14;
   public final static byte _GP6_R15 = 15;
   public final static byte _GP7_R15 = 16;
   public final static byte _GP8_R15 = 17;
   public final static byte _GP9_R15 = 18;
   public final static byte _GP10_R15 = 19;
   public final static byte _GP11_R15 = 20;
   public final static byte _EXTELEM1 = 21;

   public MeasGapConfig_setup_gapOffset () {
      super();
   }

   public MeasGapConfig_setup_gapOffset (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _GP0: return "gp0";
      case _GP1: return "gp1";
      case _GP2_R14: return "gp2_r14";
      case _GP3_R14: return "gp3_r14";
      case _GP_NCSG0_R14: return "gp_ncsg0_r14";
      case _GP_NCSG1_R14: return "gp_ncsg1_r14";
      case _GP_NCSG2_R14: return "gp_ncsg2_r14";
      case _GP_NCSG3_R14: return "gp_ncsg3_r14";
      case _GP_NONUNIFORM1_R14: return "gp_nonUniform1_r14";
      case _GP_NONUNIFORM2_R14: return "gp_nonUniform2_r14";
      case _GP_NONUNIFORM3_R14: return "gp_nonUniform3_r14";
      case _GP_NONUNIFORM4_R14: return "gp_nonUniform4_r14";
      case _GP4_R15: return "gp4_r15";
      case _GP5_R15: return "gp5_r15";
      case _GP6_R15: return "gp6_r15";
      case _GP7_R15: return "gp7_r15";
      case _GP8_R15: return "gp8_r15";
      case _GP9_R15: return "gp9_r15";
      case _GP10_R15: return "gp10_r15";
      case _GP11_R15: return "gp11_r15";
      case _EXTELEM1: return "...";
      default: return "UNDEFINED";
      }
   }

   public void set_gp0 (Asn1Integer value) {
      setElement (_GP0, value);
   }

   public void set_gp1 (Asn1Integer value) {
      setElement (_GP1, value);
   }

   public void set_gp2_r14 (Asn1Integer value) {
      setElement (_GP2_R14, value);
   }

   public void set_gp3_r14 (Asn1Integer value) {
      setElement (_GP3_R14, value);
   }

   public void set_gp_ncsg0_r14 (Asn1Integer value) {
      setElement (_GP_NCSG0_R14, value);
   }

   public void set_gp_ncsg1_r14 (Asn1Integer value) {
      setElement (_GP_NCSG1_R14, value);
   }

   public void set_gp_ncsg2_r14 (Asn1Integer value) {
      setElement (_GP_NCSG2_R14, value);
   }

   public void set_gp_ncsg3_r14 (Asn1Integer value) {
      setElement (_GP_NCSG3_R14, value);
   }

   public void set_gp_nonUniform1_r14 (Asn1Integer value) {
      setElement (_GP_NONUNIFORM1_R14, value);
   }

   public void set_gp_nonUniform2_r14 (Asn1Integer value) {
      setElement (_GP_NONUNIFORM2_R14, value);
   }

   public void set_gp_nonUniform3_r14 (Asn1Integer value) {
      setElement (_GP_NONUNIFORM3_R14, value);
   }

   public void set_gp_nonUniform4_r14 (Asn1Integer value) {
      setElement (_GP_NONUNIFORM4_R14, value);
   }

   public void set_gp4_r15 (Asn1Integer value) {
      setElement (_GP4_R15, value);
   }

   public void set_gp5_r15 (Asn1Integer value) {
      setElement (_GP5_R15, value);
   }

   public void set_gp6_r15 (Asn1Integer value) {
      setElement (_GP6_R15, value);
   }

   public void set_gp7_r15 (Asn1Integer value) {
      setElement (_GP7_R15, value);
   }

   public void set_gp8_r15 (Asn1Integer value) {
      setElement (_GP8_R15, value);
   }

   public void set_gp9_r15 (Asn1Integer value) {
      setElement (_GP9_R15, value);
   }

   public void set_gp10_r15 (Asn1Integer value) {
      setElement (_GP10_R15, value);
   }

   public void set_gp11_r15 (Asn1Integer value) {
      setElement (_GP11_R15, value);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      Asn1PerDecodeBuffer savedBuffer = null;
      boolean extbit = buffer.decodeBit ("extbit");

      if (!extbit) {
         int idx = (int) buffer.decodeConsWholeNumber (2, "index");
         choiceID = idx + 1;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         switch (idx) {
            // gp0
            case 0: { 
               Asn1Integer gp0;
               element = gp0 = new Asn1Integer();
               gp0.decode (buffer, 0, 39);

               buffer.invokeCharacters(gp0.toString());
               break;
            }

            // gp1
            case 1: { 
               Asn1Integer gp1;
               element = gp1 = new Asn1Integer();
               gp1.decode (buffer, 0, 79);

               buffer.invokeCharacters(gp1.toString());
               break;
            }

            default:
            throw new Asn1InvalidChoiceOptionException (buffer, idx);
         }
      }
      else {
         int idx = (int) buffer.decodeSmallNonNegWholeNumber ();
         choiceID = idx + 3;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         buffer.byteAlign();

         Asn1OpenType openType = new Asn1OpenType ();
         openType.decode (buffer);

         savedBuffer = buffer;
         buffer = new Asn1PerDecodeBuffer (openType.value, savedBuffer.isAligned());
         buffer.setEventHandlerList (savedBuffer);

         switch (idx) {
            // gp2_r14
            case 0: { 
               Asn1Integer gp2_r14;
               element = gp2_r14 = new Asn1Integer();
               gp2_r14.decode (buffer, 0, 39);

               buffer.invokeCharacters(gp2_r14.toString());
               break;
            }

            // gp3_r14
            case 1: { 
               Asn1Integer gp3_r14;
               element = gp3_r14 = new Asn1Integer();
               gp3_r14.decode (buffer, 0, 79);

               buffer.invokeCharacters(gp3_r14.toString());
               break;
            }

            // gp_ncsg0_r14
            case 2: { 
               Asn1Integer gp_ncsg0_r14;
               element = gp_ncsg0_r14 = new Asn1Integer();
               gp_ncsg0_r14.decode (buffer, 0, 39);

               buffer.invokeCharacters(gp_ncsg0_r14.toString());
               break;
            }

            // gp_ncsg1_r14
            case 3: { 
               Asn1Integer gp_ncsg1_r14;
               element = gp_ncsg1_r14 = new Asn1Integer();
               gp_ncsg1_r14.decode (buffer, 0, 79);

               buffer.invokeCharacters(gp_ncsg1_r14.toString());
               break;
            }

            // gp_ncsg2_r14
            case 4: { 
               Asn1Integer gp_ncsg2_r14;
               element = gp_ncsg2_r14 = new Asn1Integer();
               gp_ncsg2_r14.decode (buffer, 0, 39);

               buffer.invokeCharacters(gp_ncsg2_r14.toString());
               break;
            }

            // gp_ncsg3_r14
            case 5: { 
               Asn1Integer gp_ncsg3_r14;
               element = gp_ncsg3_r14 = new Asn1Integer();
               gp_ncsg3_r14.decode (buffer, 0, 79);

               buffer.invokeCharacters(gp_ncsg3_r14.toString());
               break;
            }

            // gp_nonUniform1_r14
            case 6: { 
               Asn1Integer gp_nonUniform1_r14;
               element = gp_nonUniform1_r14 = new Asn1Integer();
               gp_nonUniform1_r14.decode (buffer, 0, 1279);

               buffer.invokeCharacters(gp_nonUniform1_r14.toString());
               break;
            }

            // gp_nonUniform2_r14
            case 7: { 
               Asn1Integer gp_nonUniform2_r14;
               element = gp_nonUniform2_r14 = new Asn1Integer();
               gp_nonUniform2_r14.decode (buffer, 0, 2559);

               buffer.invokeCharacters(gp_nonUniform2_r14.toString());
               break;
            }

            // gp_nonUniform3_r14
            case 8: { 
               Asn1Integer gp_nonUniform3_r14;
               element = gp_nonUniform3_r14 = new Asn1Integer();
               gp_nonUniform3_r14.decode (buffer, 0, 5119);

               buffer.invokeCharacters(gp_nonUniform3_r14.toString());
               break;
            }

            // gp_nonUniform4_r14
            case 9: { 
               Asn1Integer gp_nonUniform4_r14;
               element = gp_nonUniform4_r14 = new Asn1Integer();
               gp_nonUniform4_r14.decode (buffer, 0, 10239);

               buffer.invokeCharacters(gp_nonUniform4_r14.toString());
               break;
            }

            // gp4_r15
            case 10: { 
               Asn1Integer gp4_r15;
               element = gp4_r15 = new Asn1Integer();
               gp4_r15.decode (buffer, 0, 19);

               buffer.invokeCharacters(gp4_r15.toString());
               break;
            }

            // gp5_r15
            case 11: { 
               Asn1Integer gp5_r15;
               element = gp5_r15 = new Asn1Integer();
               gp5_r15.decode (buffer, 0, 159);

               buffer.invokeCharacters(gp5_r15.toString());
               break;
            }

            // gp6_r15
            case 12: { 
               Asn1Integer gp6_r15;
               element = gp6_r15 = new Asn1Integer();
               gp6_r15.decode (buffer, 0, 19);

               buffer.invokeCharacters(gp6_r15.toString());
               break;
            }

            // gp7_r15
            case 13: { 
               Asn1Integer gp7_r15;
               element = gp7_r15 = new Asn1Integer();
               gp7_r15.decode (buffer, 0, 39);

               buffer.invokeCharacters(gp7_r15.toString());
               break;
            }

            // gp8_r15
            case 14: { 
               Asn1Integer gp8_r15;
               element = gp8_r15 = new Asn1Integer();
               gp8_r15.decode (buffer, 0, 79);

               buffer.invokeCharacters(gp8_r15.toString());
               break;
            }

            // gp9_r15
            case 15: { 
               Asn1Integer gp9_r15;
               element = gp9_r15 = new Asn1Integer();
               gp9_r15.decode (buffer, 0, 159);

               buffer.invokeCharacters(gp9_r15.toString());
               break;
            }

            // gp10_r15
            case 16: { 
               Asn1Integer gp10_r15;
               element = gp10_r15 = new Asn1Integer();
               gp10_r15.decode (buffer, 0, 19);

               buffer.invokeCharacters(gp10_r15.toString());
               break;
            }

            // gp11_r15
            case 17: { 
               Asn1Integer gp11_r15;
               element = gp11_r15 = new Asn1Integer();
               gp11_r15.decode (buffer, 0, 159);

               buffer.invokeCharacters(gp11_r15.toString());
               break;
            }

            // extElem1
            case 18: { 
               Asn1OpenType extElem1;
               element = extElem1 = new Asn1OpenType();
               extElem1.decode (buffer);

               buffer.invokeCharacters(extElem1.toString());
               break;
            }

            default:
               setElement (_EXTELEM1, openType);
               buffer.invokeCharacters (openType.toString());
         }

      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);

      if (savedBuffer != null) {
         buffer = savedBuffer;
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (element != null) {
         element.print (_sb, getElemName(), _level+1);
      }
      indent (_sb, _level);
      _sb.append("}\n");
   }

}
