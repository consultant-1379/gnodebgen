/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SL_DiscConfig_r12_discTxResources_r12_setup_scheduled_r12 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public SL_DiscResourcePool_r12 discTxConfig_r12;  // optional
   public SL_TF_IndexPairList_r12 discTF_IndexList_r12;  // optional
   public SL_HoppingConfigDisc_r12 discHoppingConfig_r12;  // optional

   public SL_DiscConfig_r12_discTxResources_r12_setup_scheduled_r12 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SL_DiscConfig_r12_discTxResources_r12_setup_scheduled_r12 (
      SL_DiscResourcePool_r12 discTxConfig_r12_,
      SL_TF_IndexPairList_r12 discTF_IndexList_r12_,
      SL_HoppingConfigDisc_r12 discHoppingConfig_r12_
   ) {
      super();
      discTxConfig_r12 = discTxConfig_r12_;
      discTF_IndexList_r12 = discTF_IndexList_r12_;
      discHoppingConfig_r12 = discHoppingConfig_r12_;
   }

   public void init () {
      discTxConfig_r12 = null;
      discTF_IndexList_r12 = null;
      discHoppingConfig_r12 = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return discTxConfig_r12;
         case 1: return discTF_IndexList_r12;
         case 2: return discHoppingConfig_r12;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "discTxConfig-r12";
         case 1: return "discTF-IndexList-r12";
         case 2: return "discHoppingConfig-r12";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean discTxConfig_r12Present = buffer.decodeBit ("discTxConfig_r12Present");
      boolean discTF_IndexList_r12Present = buffer.decodeBit ("discTF_IndexList_r12Present");
      boolean discHoppingConfig_r12Present = buffer.decodeBit ("discHoppingConfig_r12Present");

      // decode discTxConfig_r12

      if (discTxConfig_r12Present) {
         buffer.getContext().eventDispatcher.startElement("discTxConfig_r12", -1);

         discTxConfig_r12 = new SL_DiscResourcePool_r12();
         discTxConfig_r12.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("discTxConfig_r12", -1);
      }
      else {
         discTxConfig_r12 = null;
      }

      // decode discTF_IndexList_r12

      if (discTF_IndexList_r12Present) {
         buffer.getContext().eventDispatcher.startElement("discTF_IndexList_r12", -1);

         discTF_IndexList_r12 = new SL_TF_IndexPairList_r12();
         discTF_IndexList_r12.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("discTF_IndexList_r12", -1);
      }
      else {
         discTF_IndexList_r12 = null;
      }

      // decode discHoppingConfig_r12

      if (discHoppingConfig_r12Present) {
         buffer.getContext().eventDispatcher.startElement("discHoppingConfig_r12", -1);

         discHoppingConfig_r12 = new SL_HoppingConfigDisc_r12();
         discHoppingConfig_r12.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("discHoppingConfig_r12", -1);
      }
      else {
         discHoppingConfig_r12 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (discTxConfig_r12 != null) discTxConfig_r12.print (_sb, "discTxConfig_r12", _level+1);
      if (discTF_IndexList_r12 != null) discTF_IndexList_r12.print (_sb, "discTF_IndexList_r12", _level+1);
      if (discHoppingConfig_r12 != null) discHoppingConfig_r12.print (_sb, "discHoppingConfig_r12", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
