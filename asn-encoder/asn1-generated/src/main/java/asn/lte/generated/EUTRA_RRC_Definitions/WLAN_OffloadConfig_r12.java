/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class WLAN_OffloadConfig_r12 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "WLAN-OffloadConfig-r12";
   }

   public WLAN_OffloadConfig_r12_thresholdRSRP_r12 thresholdRSRP_r12;  // optional
   public WLAN_OffloadConfig_r12_thresholdRSRQ_r12 thresholdRSRQ_r12;  // optional
   public WLAN_OffloadConfig_r12_thresholdRSRQ_OnAllSymbolsWithWB_r12 thresholdRSRQ_OnAllSymbolsWithWB_r12;  // optional
   public WLAN_OffloadConfig_r12_thresholdRSRQ_OnAllSymbols_r12 thresholdRSRQ_OnAllSymbols_r12;  // optional
   public WLAN_OffloadConfig_r12_thresholdRSRQ_WB_r12 thresholdRSRQ_WB_r12;  // optional
   public WLAN_OffloadConfig_r12_thresholdChannelUtilization_r12 thresholdChannelUtilization_r12;  // optional
   public WLAN_OffloadConfig_r12_thresholdBackhaul_Bandwidth_r12 thresholdBackhaul_Bandwidth_r12;  // optional
   public WLAN_OffloadConfig_r12_thresholdWLAN_RSSI_r12 thresholdWLAN_RSSI_r12;  // optional
   public Asn1BitString offloadPreferenceIndicator_r12;  // optional
   public T_Reselection t_SteeringWLAN_r12;  // optional
   public Asn1OpenExt extElem1;

   public WLAN_OffloadConfig_r12 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public WLAN_OffloadConfig_r12 (
      WLAN_OffloadConfig_r12_thresholdRSRP_r12 thresholdRSRP_r12_,
      WLAN_OffloadConfig_r12_thresholdRSRQ_r12 thresholdRSRQ_r12_,
      WLAN_OffloadConfig_r12_thresholdRSRQ_OnAllSymbolsWithWB_r12 thresholdRSRQ_OnAllSymbolsWithWB_r12_,
      WLAN_OffloadConfig_r12_thresholdRSRQ_OnAllSymbols_r12 thresholdRSRQ_OnAllSymbols_r12_,
      WLAN_OffloadConfig_r12_thresholdRSRQ_WB_r12 thresholdRSRQ_WB_r12_,
      WLAN_OffloadConfig_r12_thresholdChannelUtilization_r12 thresholdChannelUtilization_r12_,
      WLAN_OffloadConfig_r12_thresholdBackhaul_Bandwidth_r12 thresholdBackhaul_Bandwidth_r12_,
      WLAN_OffloadConfig_r12_thresholdWLAN_RSSI_r12 thresholdWLAN_RSSI_r12_,
      Asn1BitString offloadPreferenceIndicator_r12_,
      T_Reselection t_SteeringWLAN_r12_
   ) {
      super();
      thresholdRSRP_r12 = thresholdRSRP_r12_;
      thresholdRSRQ_r12 = thresholdRSRQ_r12_;
      thresholdRSRQ_OnAllSymbolsWithWB_r12 = thresholdRSRQ_OnAllSymbolsWithWB_r12_;
      thresholdRSRQ_OnAllSymbols_r12 = thresholdRSRQ_OnAllSymbols_r12_;
      thresholdRSRQ_WB_r12 = thresholdRSRQ_WB_r12_;
      thresholdChannelUtilization_r12 = thresholdChannelUtilization_r12_;
      thresholdBackhaul_Bandwidth_r12 = thresholdBackhaul_Bandwidth_r12_;
      thresholdWLAN_RSSI_r12 = thresholdWLAN_RSSI_r12_;
      offloadPreferenceIndicator_r12 = offloadPreferenceIndicator_r12_;
      t_SteeringWLAN_r12 = t_SteeringWLAN_r12_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public WLAN_OffloadConfig_r12 (WLAN_OffloadConfig_r12_thresholdRSRP_r12 thresholdRSRP_r12_,
      WLAN_OffloadConfig_r12_thresholdRSRQ_r12 thresholdRSRQ_r12_,
      WLAN_OffloadConfig_r12_thresholdRSRQ_OnAllSymbolsWithWB_r12 thresholdRSRQ_OnAllSymbolsWithWB_r12_,
      WLAN_OffloadConfig_r12_thresholdRSRQ_OnAllSymbols_r12 thresholdRSRQ_OnAllSymbols_r12_,
      WLAN_OffloadConfig_r12_thresholdRSRQ_WB_r12 thresholdRSRQ_WB_r12_,
      WLAN_OffloadConfig_r12_thresholdChannelUtilization_r12 thresholdChannelUtilization_r12_,
      WLAN_OffloadConfig_r12_thresholdBackhaul_Bandwidth_r12 thresholdBackhaul_Bandwidth_r12_,
      WLAN_OffloadConfig_r12_thresholdWLAN_RSSI_r12 thresholdWLAN_RSSI_r12_,
      Asn1BitString offloadPreferenceIndicator_r12_,
      long t_SteeringWLAN_r12_
   ) {
      super();
      thresholdRSRP_r12 = thresholdRSRP_r12_;
      thresholdRSRQ_r12 = thresholdRSRQ_r12_;
      thresholdRSRQ_OnAllSymbolsWithWB_r12 = thresholdRSRQ_OnAllSymbolsWithWB_r12_;
      thresholdRSRQ_OnAllSymbols_r12 = thresholdRSRQ_OnAllSymbols_r12_;
      thresholdRSRQ_WB_r12 = thresholdRSRQ_WB_r12_;
      thresholdChannelUtilization_r12 = thresholdChannelUtilization_r12_;
      thresholdBackhaul_Bandwidth_r12 = thresholdBackhaul_Bandwidth_r12_;
      thresholdWLAN_RSSI_r12 = thresholdWLAN_RSSI_r12_;
      offloadPreferenceIndicator_r12 = offloadPreferenceIndicator_r12_;
      t_SteeringWLAN_r12 = new T_Reselection (t_SteeringWLAN_r12_);
   }

   public void init () {
      thresholdRSRP_r12 = null;
      thresholdRSRQ_r12 = null;
      thresholdRSRQ_OnAllSymbolsWithWB_r12 = null;
      thresholdRSRQ_OnAllSymbols_r12 = null;
      thresholdRSRQ_WB_r12 = null;
      thresholdChannelUtilization_r12 = null;
      thresholdBackhaul_Bandwidth_r12 = null;
      thresholdWLAN_RSSI_r12 = null;
      offloadPreferenceIndicator_r12 = null;
      t_SteeringWLAN_r12 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 11; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return thresholdRSRP_r12;
         case 1: return thresholdRSRQ_r12;
         case 2: return thresholdRSRQ_OnAllSymbolsWithWB_r12;
         case 3: return thresholdRSRQ_OnAllSymbols_r12;
         case 4: return thresholdRSRQ_WB_r12;
         case 5: return thresholdChannelUtilization_r12;
         case 6: return thresholdBackhaul_Bandwidth_r12;
         case 7: return thresholdWLAN_RSSI_r12;
         case 8: return offloadPreferenceIndicator_r12;
         case 9: return t_SteeringWLAN_r12;
         case 10: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "thresholdRSRP-r12";
         case 1: return "thresholdRSRQ-r12";
         case 2: return "thresholdRSRQ-OnAllSymbolsWithWB-r12";
         case 3: return "thresholdRSRQ-OnAllSymbols-r12";
         case 4: return "thresholdRSRQ-WB-r12";
         case 5: return "thresholdChannelUtilization-r12";
         case 6: return "thresholdBackhaul-Bandwidth-r12";
         case 7: return "thresholdWLAN-RSSI-r12";
         case 8: return "offloadPreferenceIndicator-r12";
         case 9: return "t-SteeringWLAN-r12";
         case 10: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean thresholdRSRP_r12Present = buffer.decodeBit ("thresholdRSRP_r12Present");
      boolean thresholdRSRQ_r12Present = buffer.decodeBit ("thresholdRSRQ_r12Present");
      boolean thresholdRSRQ_OnAllSymbolsWithWB_r12Present = buffer.decodeBit ("thresholdRSRQ_OnAllSymbolsWithWB_r12Present");
      boolean thresholdRSRQ_OnAllSymbols_r12Present = buffer.decodeBit ("thresholdRSRQ_OnAllSymbols_r12Present");
      boolean thresholdRSRQ_WB_r12Present = buffer.decodeBit ("thresholdRSRQ_WB_r12Present");
      boolean thresholdChannelUtilization_r12Present = buffer.decodeBit ("thresholdChannelUtilization_r12Present");
      boolean thresholdBackhaul_Bandwidth_r12Present = buffer.decodeBit ("thresholdBackhaul_Bandwidth_r12Present");
      boolean thresholdWLAN_RSSI_r12Present = buffer.decodeBit ("thresholdWLAN_RSSI_r12Present");
      boolean offloadPreferenceIndicator_r12Present = buffer.decodeBit ("offloadPreferenceIndicator_r12Present");
      boolean t_SteeringWLAN_r12Present = buffer.decodeBit ("t_SteeringWLAN_r12Present");

      // decode thresholdRSRP_r12

      if (thresholdRSRP_r12Present) {
         buffer.getContext().eventDispatcher.startElement("thresholdRSRP_r12", -1);

         thresholdRSRP_r12 = new WLAN_OffloadConfig_r12_thresholdRSRP_r12();
         thresholdRSRP_r12.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("thresholdRSRP_r12", -1);
      }
      else {
         thresholdRSRP_r12 = null;
      }

      // decode thresholdRSRQ_r12

      if (thresholdRSRQ_r12Present) {
         buffer.getContext().eventDispatcher.startElement("thresholdRSRQ_r12", -1);

         thresholdRSRQ_r12 = new WLAN_OffloadConfig_r12_thresholdRSRQ_r12();
         thresholdRSRQ_r12.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("thresholdRSRQ_r12", -1);
      }
      else {
         thresholdRSRQ_r12 = null;
      }

      // decode thresholdRSRQ_OnAllSymbolsWithWB_r12

      if (thresholdRSRQ_OnAllSymbolsWithWB_r12Present) {
         buffer.getContext().eventDispatcher.startElement("thresholdRSRQ_OnAllSymbolsWithWB_r12", -1);

         thresholdRSRQ_OnAllSymbolsWithWB_r12 = new WLAN_OffloadConfig_r12_thresholdRSRQ_OnAllSymbolsWithWB_r12();
         thresholdRSRQ_OnAllSymbolsWithWB_r12.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("thresholdRSRQ_OnAllSymbolsWithWB_r12", -1);
      }
      else {
         thresholdRSRQ_OnAllSymbolsWithWB_r12 = null;
      }

      // decode thresholdRSRQ_OnAllSymbols_r12

      if (thresholdRSRQ_OnAllSymbols_r12Present) {
         buffer.getContext().eventDispatcher.startElement("thresholdRSRQ_OnAllSymbols_r12", -1);

         thresholdRSRQ_OnAllSymbols_r12 = new WLAN_OffloadConfig_r12_thresholdRSRQ_OnAllSymbols_r12();
         thresholdRSRQ_OnAllSymbols_r12.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("thresholdRSRQ_OnAllSymbols_r12", -1);
      }
      else {
         thresholdRSRQ_OnAllSymbols_r12 = null;
      }

      // decode thresholdRSRQ_WB_r12

      if (thresholdRSRQ_WB_r12Present) {
         buffer.getContext().eventDispatcher.startElement("thresholdRSRQ_WB_r12", -1);

         thresholdRSRQ_WB_r12 = new WLAN_OffloadConfig_r12_thresholdRSRQ_WB_r12();
         thresholdRSRQ_WB_r12.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("thresholdRSRQ_WB_r12", -1);
      }
      else {
         thresholdRSRQ_WB_r12 = null;
      }

      // decode thresholdChannelUtilization_r12

      if (thresholdChannelUtilization_r12Present) {
         buffer.getContext().eventDispatcher.startElement("thresholdChannelUtilization_r12", -1);

         thresholdChannelUtilization_r12 = new WLAN_OffloadConfig_r12_thresholdChannelUtilization_r12();
         thresholdChannelUtilization_r12.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("thresholdChannelUtilization_r12", -1);
      }
      else {
         thresholdChannelUtilization_r12 = null;
      }

      // decode thresholdBackhaul_Bandwidth_r12

      if (thresholdBackhaul_Bandwidth_r12Present) {
         buffer.getContext().eventDispatcher.startElement("thresholdBackhaul_Bandwidth_r12", -1);

         thresholdBackhaul_Bandwidth_r12 = new WLAN_OffloadConfig_r12_thresholdBackhaul_Bandwidth_r12();
         thresholdBackhaul_Bandwidth_r12.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("thresholdBackhaul_Bandwidth_r12", -1);
      }
      else {
         thresholdBackhaul_Bandwidth_r12 = null;
      }

      // decode thresholdWLAN_RSSI_r12

      if (thresholdWLAN_RSSI_r12Present) {
         buffer.getContext().eventDispatcher.startElement("thresholdWLAN_RSSI_r12", -1);

         thresholdWLAN_RSSI_r12 = new WLAN_OffloadConfig_r12_thresholdWLAN_RSSI_r12();
         thresholdWLAN_RSSI_r12.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("thresholdWLAN_RSSI_r12", -1);
      }
      else {
         thresholdWLAN_RSSI_r12 = null;
      }

      // decode offloadPreferenceIndicator_r12

      if (offloadPreferenceIndicator_r12Present) {
         buffer.getContext().eventDispatcher.startElement("offloadPreferenceIndicator_r12", -1);

         offloadPreferenceIndicator_r12 = new Asn1BitString();
         offloadPreferenceIndicator_r12.decode (buffer, 16, 16);

         buffer.invokeCharacters(offloadPreferenceIndicator_r12.toString());
         buffer.getContext().eventDispatcher.endElement("offloadPreferenceIndicator_r12", -1);
      }
      else {
         offloadPreferenceIndicator_r12 = null;
      }

      // decode t_SteeringWLAN_r12

      if (t_SteeringWLAN_r12Present) {
         buffer.getContext().eventDispatcher.startElement("t_SteeringWLAN_r12", -1);

         t_SteeringWLAN_r12 = new T_Reselection();
         t_SteeringWLAN_r12.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("t_SteeringWLAN_r12", -1);
      }
      else {
         t_SteeringWLAN_r12 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (thresholdRSRP_r12 != null) thresholdRSRP_r12.print (_sb, "thresholdRSRP_r12", _level+1);
      if (thresholdRSRQ_r12 != null) thresholdRSRQ_r12.print (_sb, "thresholdRSRQ_r12", _level+1);
      if (thresholdRSRQ_OnAllSymbolsWithWB_r12 != null) thresholdRSRQ_OnAllSymbolsWithWB_r12.print (_sb, "thresholdRSRQ_OnAllSymbolsWithWB_r12", _level+1);
      if (thresholdRSRQ_OnAllSymbols_r12 != null) thresholdRSRQ_OnAllSymbols_r12.print (_sb, "thresholdRSRQ_OnAllSymbols_r12", _level+1);
      if (thresholdRSRQ_WB_r12 != null) thresholdRSRQ_WB_r12.print (_sb, "thresholdRSRQ_WB_r12", _level+1);
      if (thresholdChannelUtilization_r12 != null) thresholdChannelUtilization_r12.print (_sb, "thresholdChannelUtilization_r12", _level+1);
      if (thresholdBackhaul_Bandwidth_r12 != null) thresholdBackhaul_Bandwidth_r12.print (_sb, "thresholdBackhaul_Bandwidth_r12", _level+1);
      if (thresholdWLAN_RSSI_r12 != null) thresholdWLAN_RSSI_r12.print (_sb, "thresholdWLAN_RSSI_r12", _level+1);
      if (offloadPreferenceIndicator_r12 != null) offloadPreferenceIndicator_r12.print (_sb, "offloadPreferenceIndicator_r12", _level+1);
      if (t_SteeringWLAN_r12 != null) t_SteeringWLAN_r12.print (_sb, "t_SteeringWLAN_r12", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
