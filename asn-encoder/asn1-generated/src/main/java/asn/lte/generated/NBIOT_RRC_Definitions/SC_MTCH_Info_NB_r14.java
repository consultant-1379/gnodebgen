/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NBIOT_RRC_Definitions;

import com.objsys.asn1j.runtime.*;
import asn.lte.generated.EUTRA_RRC_Definitions.MBMSSessionInfo_r13;

public class SC_MTCH_Info_NB_r14 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NBIOT_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SC-MTCH-Info-NB-r14";
   }

   public SC_MTCH_Info_NB_r14_sc_mtch_CarrierConfig_r14 sc_mtch_CarrierConfig_r14;
   public MBMSSessionInfo_r13 mbmsSessionInfo_r14;
   public Asn1BitString g_RNTI_r14;
   public SC_MTCH_SchedulingInfo_NB_r14 sc_mtch_SchedulingInfo_r14;  // optional
   public Asn1BitString sc_mtch_NeighbourCell_r14;  // optional
   public SC_MTCH_Info_NB_r14_npdcch_NPDSCH_MaxTBS_SC_MTCH_r14 npdcch_NPDSCH_MaxTBS_SC_MTCH_r14 = null;
   public SC_MTCH_Info_NB_r14_npdcch_NumRepetitions_SC_MTCH_r14 npdcch_NumRepetitions_SC_MTCH_r14 = null;
   public SC_MTCH_Info_NB_r14_npdcch_StartSF_SC_MTCH_r14 npdcch_StartSF_SC_MTCH_r14 = null;
   public SC_MTCH_Info_NB_r14_npdcch_Offset_SC_MTCH_r14 npdcch_Offset_SC_MTCH_r14 = null;
   public Asn1OpenExt extElem1;

   public SC_MTCH_Info_NB_r14 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SC_MTCH_Info_NB_r14 (
      SC_MTCH_Info_NB_r14_sc_mtch_CarrierConfig_r14 sc_mtch_CarrierConfig_r14_,
      MBMSSessionInfo_r13 mbmsSessionInfo_r14_,
      Asn1BitString g_RNTI_r14_,
      SC_MTCH_SchedulingInfo_NB_r14 sc_mtch_SchedulingInfo_r14_,
      Asn1BitString sc_mtch_NeighbourCell_r14_,
      SC_MTCH_Info_NB_r14_npdcch_NPDSCH_MaxTBS_SC_MTCH_r14 npdcch_NPDSCH_MaxTBS_SC_MTCH_r14_,
      SC_MTCH_Info_NB_r14_npdcch_NumRepetitions_SC_MTCH_r14 npdcch_NumRepetitions_SC_MTCH_r14_,
      SC_MTCH_Info_NB_r14_npdcch_StartSF_SC_MTCH_r14 npdcch_StartSF_SC_MTCH_r14_,
      SC_MTCH_Info_NB_r14_npdcch_Offset_SC_MTCH_r14 npdcch_Offset_SC_MTCH_r14_
   ) {
      super();
      sc_mtch_CarrierConfig_r14 = sc_mtch_CarrierConfig_r14_;
      mbmsSessionInfo_r14 = mbmsSessionInfo_r14_;
      g_RNTI_r14 = g_RNTI_r14_;
      sc_mtch_SchedulingInfo_r14 = sc_mtch_SchedulingInfo_r14_;
      sc_mtch_NeighbourCell_r14 = sc_mtch_NeighbourCell_r14_;
      npdcch_NPDSCH_MaxTBS_SC_MTCH_r14 = npdcch_NPDSCH_MaxTBS_SC_MTCH_r14_;
      npdcch_NumRepetitions_SC_MTCH_r14 = npdcch_NumRepetitions_SC_MTCH_r14_;
      npdcch_StartSF_SC_MTCH_r14 = npdcch_StartSF_SC_MTCH_r14_;
      npdcch_Offset_SC_MTCH_r14 = npdcch_Offset_SC_MTCH_r14_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SC_MTCH_Info_NB_r14 (
      SC_MTCH_Info_NB_r14_sc_mtch_CarrierConfig_r14 sc_mtch_CarrierConfig_r14_,
      MBMSSessionInfo_r13 mbmsSessionInfo_r14_,
      Asn1BitString g_RNTI_r14_,
      SC_MTCH_Info_NB_r14_npdcch_NPDSCH_MaxTBS_SC_MTCH_r14 npdcch_NPDSCH_MaxTBS_SC_MTCH_r14_,
      SC_MTCH_Info_NB_r14_npdcch_NumRepetitions_SC_MTCH_r14 npdcch_NumRepetitions_SC_MTCH_r14_,
      SC_MTCH_Info_NB_r14_npdcch_StartSF_SC_MTCH_r14 npdcch_StartSF_SC_MTCH_r14_,
      SC_MTCH_Info_NB_r14_npdcch_Offset_SC_MTCH_r14 npdcch_Offset_SC_MTCH_r14_
   ) {
      super();
      sc_mtch_CarrierConfig_r14 = sc_mtch_CarrierConfig_r14_;
      mbmsSessionInfo_r14 = mbmsSessionInfo_r14_;
      g_RNTI_r14 = g_RNTI_r14_;
      npdcch_NPDSCH_MaxTBS_SC_MTCH_r14 = npdcch_NPDSCH_MaxTBS_SC_MTCH_r14_;
      npdcch_NumRepetitions_SC_MTCH_r14 = npdcch_NumRepetitions_SC_MTCH_r14_;
      npdcch_StartSF_SC_MTCH_r14 = npdcch_StartSF_SC_MTCH_r14_;
      npdcch_Offset_SC_MTCH_r14 = npdcch_Offset_SC_MTCH_r14_;
   }

   public void init () {
      sc_mtch_CarrierConfig_r14 = null;
      mbmsSessionInfo_r14 = null;
      g_RNTI_r14 = null;
      sc_mtch_SchedulingInfo_r14 = null;
      sc_mtch_NeighbourCell_r14 = null;
      npdcch_NPDSCH_MaxTBS_SC_MTCH_r14 = null;
      npdcch_NumRepetitions_SC_MTCH_r14 = null;
      npdcch_StartSF_SC_MTCH_r14 = null;
      npdcch_Offset_SC_MTCH_r14 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 10; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return sc_mtch_CarrierConfig_r14;
         case 1: return mbmsSessionInfo_r14;
         case 2: return g_RNTI_r14;
         case 3: return sc_mtch_SchedulingInfo_r14;
         case 4: return sc_mtch_NeighbourCell_r14;
         case 5: return npdcch_NPDSCH_MaxTBS_SC_MTCH_r14;
         case 6: return npdcch_NumRepetitions_SC_MTCH_r14;
         case 7: return npdcch_StartSF_SC_MTCH_r14;
         case 8: return npdcch_Offset_SC_MTCH_r14;
         case 9: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "sc-mtch-CarrierConfig-r14";
         case 1: return "mbmsSessionInfo-r14";
         case 2: return "g-RNTI-r14";
         case 3: return "sc-mtch-SchedulingInfo-r14";
         case 4: return "sc-mtch-NeighbourCell-r14";
         case 5: return "npdcch-NPDSCH-MaxTBS-SC-MTCH-r14";
         case 6: return "npdcch-NumRepetitions-SC-MTCH-r14";
         case 7: return "npdcch-StartSF-SC-MTCH-r14";
         case 8: return "npdcch-Offset-SC-MTCH-r14";
         case 9: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean sc_mtch_SchedulingInfo_r14Present = buffer.decodeBit ("sc_mtch_SchedulingInfo_r14Present");
      boolean sc_mtch_NeighbourCell_r14Present = buffer.decodeBit ("sc_mtch_NeighbourCell_r14Present");

      // decode sc_mtch_CarrierConfig_r14

      buffer.getContext().eventDispatcher.startElement("sc_mtch_CarrierConfig_r14", -1);

      sc_mtch_CarrierConfig_r14 = new SC_MTCH_Info_NB_r14_sc_mtch_CarrierConfig_r14();
      sc_mtch_CarrierConfig_r14.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("sc_mtch_CarrierConfig_r14", -1);

      // decode mbmsSessionInfo_r14

      buffer.getContext().eventDispatcher.startElement("mbmsSessionInfo_r14", -1);

      mbmsSessionInfo_r14 = new MBMSSessionInfo_r13();
      mbmsSessionInfo_r14.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("mbmsSessionInfo_r14", -1);

      // decode g_RNTI_r14

      buffer.getContext().eventDispatcher.startElement("g_RNTI_r14", -1);

      g_RNTI_r14 = new Asn1BitString();
      g_RNTI_r14.decode (buffer, 16, 16);

      buffer.invokeCharacters(g_RNTI_r14.toString());
      buffer.getContext().eventDispatcher.endElement("g_RNTI_r14", -1);

      // decode sc_mtch_SchedulingInfo_r14

      if (sc_mtch_SchedulingInfo_r14Present) {
         buffer.getContext().eventDispatcher.startElement("sc_mtch_SchedulingInfo_r14", -1);

         sc_mtch_SchedulingInfo_r14 = new SC_MTCH_SchedulingInfo_NB_r14();
         sc_mtch_SchedulingInfo_r14.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sc_mtch_SchedulingInfo_r14", -1);
      }
      else {
         sc_mtch_SchedulingInfo_r14 = null;
      }

      // decode sc_mtch_NeighbourCell_r14

      if (sc_mtch_NeighbourCell_r14Present) {
         buffer.getContext().eventDispatcher.startElement("sc_mtch_NeighbourCell_r14", -1);

         sc_mtch_NeighbourCell_r14 = new Asn1BitString();
         sc_mtch_NeighbourCell_r14.decode (buffer, 8, 8);

         buffer.invokeCharacters(sc_mtch_NeighbourCell_r14.toString());
         buffer.getContext().eventDispatcher.endElement("sc_mtch_NeighbourCell_r14", -1);
      }
      else {
         sc_mtch_NeighbourCell_r14 = null;
      }

      // decode npdcch_NPDSCH_MaxTBS_SC_MTCH_r14

      buffer.getContext().eventDispatcher.startElement("npdcch_NPDSCH_MaxTBS_SC_MTCH_r14", -1);

      {
         int tval = SC_MTCH_Info_NB_r14_npdcch_NPDSCH_MaxTBS_SC_MTCH_r14.decodeEnumValue (buffer);
         npdcch_NPDSCH_MaxTBS_SC_MTCH_r14 = SC_MTCH_Info_NB_r14_npdcch_NPDSCH_MaxTBS_SC_MTCH_r14.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("npdcch_NPDSCH_MaxTBS_SC_MTCH_r14", -1);

      // decode npdcch_NumRepetitions_SC_MTCH_r14

      buffer.getContext().eventDispatcher.startElement("npdcch_NumRepetitions_SC_MTCH_r14", -1);

      {
         int tval = SC_MTCH_Info_NB_r14_npdcch_NumRepetitions_SC_MTCH_r14.decodeEnumValue (buffer);
         npdcch_NumRepetitions_SC_MTCH_r14 = SC_MTCH_Info_NB_r14_npdcch_NumRepetitions_SC_MTCH_r14.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("npdcch_NumRepetitions_SC_MTCH_r14", -1);

      // decode npdcch_StartSF_SC_MTCH_r14

      buffer.getContext().eventDispatcher.startElement("npdcch_StartSF_SC_MTCH_r14", -1);

      {
         int tval = SC_MTCH_Info_NB_r14_npdcch_StartSF_SC_MTCH_r14.decodeEnumValue (buffer);
         npdcch_StartSF_SC_MTCH_r14 = SC_MTCH_Info_NB_r14_npdcch_StartSF_SC_MTCH_r14.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("npdcch_StartSF_SC_MTCH_r14", -1);

      // decode npdcch_Offset_SC_MTCH_r14

      buffer.getContext().eventDispatcher.startElement("npdcch_Offset_SC_MTCH_r14", -1);

      {
         int tval = SC_MTCH_Info_NB_r14_npdcch_Offset_SC_MTCH_r14.decodeEnumValue (buffer);
         npdcch_Offset_SC_MTCH_r14 = SC_MTCH_Info_NB_r14_npdcch_Offset_SC_MTCH_r14.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("npdcch_Offset_SC_MTCH_r14", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (sc_mtch_CarrierConfig_r14 != null) sc_mtch_CarrierConfig_r14.print (_sb, "sc_mtch_CarrierConfig_r14", _level+1);
      if (mbmsSessionInfo_r14 != null) mbmsSessionInfo_r14.print (_sb, "mbmsSessionInfo_r14", _level+1);
      if (g_RNTI_r14 != null) g_RNTI_r14.print (_sb, "g_RNTI_r14", _level+1);
      if (sc_mtch_SchedulingInfo_r14 != null) sc_mtch_SchedulingInfo_r14.print (_sb, "sc_mtch_SchedulingInfo_r14", _level+1);
      if (sc_mtch_NeighbourCell_r14 != null) sc_mtch_NeighbourCell_r14.print (_sb, "sc_mtch_NeighbourCell_r14", _level+1);
      if (npdcch_NPDSCH_MaxTBS_SC_MTCH_r14 != null) npdcch_NPDSCH_MaxTBS_SC_MTCH_r14.print (_sb, "npdcch_NPDSCH_MaxTBS_SC_MTCH_r14", _level+1);
      if (npdcch_NumRepetitions_SC_MTCH_r14 != null) npdcch_NumRepetitions_SC_MTCH_r14.print (_sb, "npdcch_NumRepetitions_SC_MTCH_r14", _level+1);
      if (npdcch_StartSF_SC_MTCH_r14 != null) npdcch_StartSF_SC_MTCH_r14.print (_sb, "npdcch_StartSF_SC_MTCH_r14", _level+1);
      if (npdcch_Offset_SC_MTCH_r14 != null) npdcch_Offset_SC_MTCH_r14.print (_sb, "npdcch_Offset_SC_MTCH_r14", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
