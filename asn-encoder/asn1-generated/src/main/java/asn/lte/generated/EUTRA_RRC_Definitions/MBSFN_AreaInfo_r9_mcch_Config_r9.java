/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MBSFN_AreaInfo_r9_mcch_Config_r9 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public MBSFN_AreaInfo_r9_mcch_Config_r9_mcch_RepetitionPeriod_r9 mcch_RepetitionPeriod_r9 = null;
   public Asn1Integer mcch_Offset_r9;
   public MBSFN_AreaInfo_r9_mcch_Config_r9_mcch_ModificationPeriod_r9 mcch_ModificationPeriod_r9 = null;
   public Asn1BitString sf_AllocInfo_r9;
   public MBSFN_AreaInfo_r9_mcch_Config_r9_signallingMCS_r9 signallingMCS_r9 = null;

   public MBSFN_AreaInfo_r9_mcch_Config_r9 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MBSFN_AreaInfo_r9_mcch_Config_r9 (
      MBSFN_AreaInfo_r9_mcch_Config_r9_mcch_RepetitionPeriod_r9 mcch_RepetitionPeriod_r9_,
      Asn1Integer mcch_Offset_r9_,
      MBSFN_AreaInfo_r9_mcch_Config_r9_mcch_ModificationPeriod_r9 mcch_ModificationPeriod_r9_,
      Asn1BitString sf_AllocInfo_r9_,
      MBSFN_AreaInfo_r9_mcch_Config_r9_signallingMCS_r9 signallingMCS_r9_
   ) {
      super();
      mcch_RepetitionPeriod_r9 = mcch_RepetitionPeriod_r9_;
      mcch_Offset_r9 = mcch_Offset_r9_;
      mcch_ModificationPeriod_r9 = mcch_ModificationPeriod_r9_;
      sf_AllocInfo_r9 = sf_AllocInfo_r9_;
      signallingMCS_r9 = signallingMCS_r9_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public MBSFN_AreaInfo_r9_mcch_Config_r9 (MBSFN_AreaInfo_r9_mcch_Config_r9_mcch_RepetitionPeriod_r9 mcch_RepetitionPeriod_r9_,
      long mcch_Offset_r9_,
      MBSFN_AreaInfo_r9_mcch_Config_r9_mcch_ModificationPeriod_r9 mcch_ModificationPeriod_r9_,
      Asn1BitString sf_AllocInfo_r9_,
      MBSFN_AreaInfo_r9_mcch_Config_r9_signallingMCS_r9 signallingMCS_r9_
   ) {
      super();
      mcch_RepetitionPeriod_r9 = mcch_RepetitionPeriod_r9_;
      mcch_Offset_r9 = new Asn1Integer (mcch_Offset_r9_);
      mcch_ModificationPeriod_r9 = mcch_ModificationPeriod_r9_;
      sf_AllocInfo_r9 = sf_AllocInfo_r9_;
      signallingMCS_r9 = signallingMCS_r9_;
   }

   public void init () {
      mcch_RepetitionPeriod_r9 = null;
      mcch_Offset_r9 = null;
      mcch_ModificationPeriod_r9 = null;
      sf_AllocInfo_r9 = null;
      signallingMCS_r9 = null;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return mcch_RepetitionPeriod_r9;
         case 1: return mcch_Offset_r9;
         case 2: return mcch_ModificationPeriod_r9;
         case 3: return sf_AllocInfo_r9;
         case 4: return signallingMCS_r9;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "mcch-RepetitionPeriod-r9";
         case 1: return "mcch-Offset-r9";
         case 2: return "mcch-ModificationPeriod-r9";
         case 3: return "sf-AllocInfo-r9";
         case 4: return "signallingMCS-r9";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode mcch_RepetitionPeriod_r9

      buffer.getContext().eventDispatcher.startElement("mcch_RepetitionPeriod_r9", -1);

      {
         int tval = MBSFN_AreaInfo_r9_mcch_Config_r9_mcch_RepetitionPeriod_r9.decodeEnumValue (buffer);
         mcch_RepetitionPeriod_r9 = MBSFN_AreaInfo_r9_mcch_Config_r9_mcch_RepetitionPeriod_r9.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("mcch_RepetitionPeriod_r9", -1);

      // decode mcch_Offset_r9

      buffer.getContext().eventDispatcher.startElement("mcch_Offset_r9", -1);

      mcch_Offset_r9 = new Asn1Integer();
      mcch_Offset_r9.decode (buffer, 0, 10);

      buffer.invokeCharacters(mcch_Offset_r9.toString());
      buffer.getContext().eventDispatcher.endElement("mcch_Offset_r9", -1);

      // decode mcch_ModificationPeriod_r9

      buffer.getContext().eventDispatcher.startElement("mcch_ModificationPeriod_r9", -1);

      {
         int tval = MBSFN_AreaInfo_r9_mcch_Config_r9_mcch_ModificationPeriod_r9.decodeEnumValue (buffer);
         mcch_ModificationPeriod_r9 = MBSFN_AreaInfo_r9_mcch_Config_r9_mcch_ModificationPeriod_r9.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("mcch_ModificationPeriod_r9", -1);

      // decode sf_AllocInfo_r9

      buffer.getContext().eventDispatcher.startElement("sf_AllocInfo_r9", -1);

      sf_AllocInfo_r9 = new Asn1BitString();
      sf_AllocInfo_r9.decode (buffer, 6, 6);

      buffer.invokeCharacters(sf_AllocInfo_r9.toString());
      buffer.getContext().eventDispatcher.endElement("sf_AllocInfo_r9", -1);

      // decode signallingMCS_r9

      buffer.getContext().eventDispatcher.startElement("signallingMCS_r9", -1);

      {
         int tval = MBSFN_AreaInfo_r9_mcch_Config_r9_signallingMCS_r9.decodeEnumValue (buffer);
         signallingMCS_r9 = MBSFN_AreaInfo_r9_mcch_Config_r9_signallingMCS_r9.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("signallingMCS_r9", -1);

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (mcch_RepetitionPeriod_r9 != null) mcch_RepetitionPeriod_r9.print (_sb, "mcch_RepetitionPeriod_r9", _level+1);
      if (mcch_Offset_r9 != null) mcch_Offset_r9.print (_sb, "mcch_Offset_r9", _level+1);
      if (mcch_ModificationPeriod_r9 != null) mcch_ModificationPeriod_r9.print (_sb, "mcch_ModificationPeriod_r9", _level+1);
      if (sf_AllocInfo_r9 != null) sf_AllocInfo_r9.print (_sb, "sf_AllocInfo_r9", _level+1);
      if (signallingMCS_r9 != null) signallingMCS_r9.print (_sb, "signallingMCS_r9", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
