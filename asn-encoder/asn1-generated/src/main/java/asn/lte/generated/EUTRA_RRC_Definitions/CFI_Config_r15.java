/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class CFI_Config_r15 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CFI-Config-r15";
   }

   public Asn1Integer cfi_SubframeNonMBSFN_r15;  // optional
   public Asn1Integer cfi_SlotSubslotNonMBSFN_r15;  // optional
   public Asn1Integer cfi_SubframeMBSFN_r15;  // optional
   public Asn1Integer cfi_SlotSubslotMBSFN_r15;  // optional

   public CFI_Config_r15 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CFI_Config_r15 (
      Asn1Integer cfi_SubframeNonMBSFN_r15_,
      Asn1Integer cfi_SlotSubslotNonMBSFN_r15_,
      Asn1Integer cfi_SubframeMBSFN_r15_,
      Asn1Integer cfi_SlotSubslotMBSFN_r15_
   ) {
      super();
      cfi_SubframeNonMBSFN_r15 = cfi_SubframeNonMBSFN_r15_;
      cfi_SlotSubslotNonMBSFN_r15 = cfi_SlotSubslotNonMBSFN_r15_;
      cfi_SubframeMBSFN_r15 = cfi_SubframeMBSFN_r15_;
      cfi_SlotSubslotMBSFN_r15 = cfi_SlotSubslotMBSFN_r15_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public CFI_Config_r15 (long cfi_SubframeNonMBSFN_r15_,
      long cfi_SlotSubslotNonMBSFN_r15_,
      long cfi_SubframeMBSFN_r15_,
      long cfi_SlotSubslotMBSFN_r15_
   ) {
      super();
      cfi_SubframeNonMBSFN_r15 = new Asn1Integer (cfi_SubframeNonMBSFN_r15_);
      cfi_SlotSubslotNonMBSFN_r15 = new Asn1Integer (cfi_SlotSubslotNonMBSFN_r15_);
      cfi_SubframeMBSFN_r15 = new Asn1Integer (cfi_SubframeMBSFN_r15_);
      cfi_SlotSubslotMBSFN_r15 = new Asn1Integer (cfi_SlotSubslotMBSFN_r15_);
   }

   public void init () {
      cfi_SubframeNonMBSFN_r15 = null;
      cfi_SlotSubslotNonMBSFN_r15 = null;
      cfi_SubframeMBSFN_r15 = null;
      cfi_SlotSubslotMBSFN_r15 = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return cfi_SubframeNonMBSFN_r15;
         case 1: return cfi_SlotSubslotNonMBSFN_r15;
         case 2: return cfi_SubframeMBSFN_r15;
         case 3: return cfi_SlotSubslotMBSFN_r15;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "cfi-SubframeNonMBSFN-r15";
         case 1: return "cfi-SlotSubslotNonMBSFN-r15";
         case 2: return "cfi-SubframeMBSFN-r15";
         case 3: return "cfi-SlotSubslotMBSFN-r15";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean cfi_SubframeNonMBSFN_r15Present = buffer.decodeBit ("cfi_SubframeNonMBSFN_r15Present");
      boolean cfi_SlotSubslotNonMBSFN_r15Present = buffer.decodeBit ("cfi_SlotSubslotNonMBSFN_r15Present");
      boolean cfi_SubframeMBSFN_r15Present = buffer.decodeBit ("cfi_SubframeMBSFN_r15Present");
      boolean cfi_SlotSubslotMBSFN_r15Present = buffer.decodeBit ("cfi_SlotSubslotMBSFN_r15Present");

      // decode cfi_SubframeNonMBSFN_r15

      if (cfi_SubframeNonMBSFN_r15Present) {
         buffer.getContext().eventDispatcher.startElement("cfi_SubframeNonMBSFN_r15", -1);

         cfi_SubframeNonMBSFN_r15 = new Asn1Integer();
         cfi_SubframeNonMBSFN_r15.decode (buffer, 1, 4);

         buffer.invokeCharacters(cfi_SubframeNonMBSFN_r15.toString());
         buffer.getContext().eventDispatcher.endElement("cfi_SubframeNonMBSFN_r15", -1);
      }
      else {
         cfi_SubframeNonMBSFN_r15 = null;
      }

      // decode cfi_SlotSubslotNonMBSFN_r15

      if (cfi_SlotSubslotNonMBSFN_r15Present) {
         buffer.getContext().eventDispatcher.startElement("cfi_SlotSubslotNonMBSFN_r15", -1);

         cfi_SlotSubslotNonMBSFN_r15 = new Asn1Integer();
         cfi_SlotSubslotNonMBSFN_r15.decode (buffer, 1, 3);

         buffer.invokeCharacters(cfi_SlotSubslotNonMBSFN_r15.toString());
         buffer.getContext().eventDispatcher.endElement("cfi_SlotSubslotNonMBSFN_r15", -1);
      }
      else {
         cfi_SlotSubslotNonMBSFN_r15 = null;
      }

      // decode cfi_SubframeMBSFN_r15

      if (cfi_SubframeMBSFN_r15Present) {
         buffer.getContext().eventDispatcher.startElement("cfi_SubframeMBSFN_r15", -1);

         cfi_SubframeMBSFN_r15 = new Asn1Integer();
         cfi_SubframeMBSFN_r15.decode (buffer, 1, 2);

         buffer.invokeCharacters(cfi_SubframeMBSFN_r15.toString());
         buffer.getContext().eventDispatcher.endElement("cfi_SubframeMBSFN_r15", -1);
      }
      else {
         cfi_SubframeMBSFN_r15 = null;
      }

      // decode cfi_SlotSubslotMBSFN_r15

      if (cfi_SlotSubslotMBSFN_r15Present) {
         buffer.getContext().eventDispatcher.startElement("cfi_SlotSubslotMBSFN_r15", -1);

         cfi_SlotSubslotMBSFN_r15 = new Asn1Integer();
         cfi_SlotSubslotMBSFN_r15.decode (buffer, 1, 2);

         buffer.invokeCharacters(cfi_SlotSubslotMBSFN_r15.toString());
         buffer.getContext().eventDispatcher.endElement("cfi_SlotSubslotMBSFN_r15", -1);
      }
      else {
         cfi_SlotSubslotMBSFN_r15 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (cfi_SubframeNonMBSFN_r15 != null) cfi_SubframeNonMBSFN_r15.print (_sb, "cfi_SubframeNonMBSFN_r15", _level+1);
      if (cfi_SlotSubslotNonMBSFN_r15 != null) cfi_SlotSubslotNonMBSFN_r15.print (_sb, "cfi_SlotSubslotNonMBSFN_r15", _level+1);
      if (cfi_SubframeMBSFN_r15 != null) cfi_SubframeMBSFN_r15.print (_sb, "cfi_SubframeMBSFN_r15", _level+1);
      if (cfi_SlotSubslotMBSFN_r15 != null) cfi_SlotSubslotMBSFN_r15.print (_sb, "cfi_SlotSubslotMBSFN_r15", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
