/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MeasResultSSTD_r13 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "MeasResultSSTD-r13";
   }

   public Asn1Integer sfn_OffsetResult_r13;
   public Asn1Integer frameBoundaryOffsetResult_r13;
   public Asn1Integer subframeBoundaryOffsetResult_r13;

   public MeasResultSSTD_r13 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MeasResultSSTD_r13 (
      Asn1Integer sfn_OffsetResult_r13_,
      Asn1Integer frameBoundaryOffsetResult_r13_,
      Asn1Integer subframeBoundaryOffsetResult_r13_
   ) {
      super();
      sfn_OffsetResult_r13 = sfn_OffsetResult_r13_;
      frameBoundaryOffsetResult_r13 = frameBoundaryOffsetResult_r13_;
      subframeBoundaryOffsetResult_r13 = subframeBoundaryOffsetResult_r13_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public MeasResultSSTD_r13 (long sfn_OffsetResult_r13_,
      long frameBoundaryOffsetResult_r13_,
      long subframeBoundaryOffsetResult_r13_
   ) {
      super();
      sfn_OffsetResult_r13 = new Asn1Integer (sfn_OffsetResult_r13_);
      frameBoundaryOffsetResult_r13 = new Asn1Integer (frameBoundaryOffsetResult_r13_);
      subframeBoundaryOffsetResult_r13 = new Asn1Integer (subframeBoundaryOffsetResult_r13_);
   }

   public void init () {
      sfn_OffsetResult_r13 = null;
      frameBoundaryOffsetResult_r13 = null;
      subframeBoundaryOffsetResult_r13 = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return sfn_OffsetResult_r13;
         case 1: return frameBoundaryOffsetResult_r13;
         case 2: return subframeBoundaryOffsetResult_r13;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "sfn-OffsetResult-r13";
         case 1: return "frameBoundaryOffsetResult-r13";
         case 2: return "subframeBoundaryOffsetResult-r13";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode sfn_OffsetResult_r13

      buffer.getContext().eventDispatcher.startElement("sfn_OffsetResult_r13", -1);

      sfn_OffsetResult_r13 = new Asn1Integer();
      sfn_OffsetResult_r13.decode (buffer, 0, 1023);

      buffer.invokeCharacters(sfn_OffsetResult_r13.toString());
      buffer.getContext().eventDispatcher.endElement("sfn_OffsetResult_r13", -1);

      // decode frameBoundaryOffsetResult_r13

      buffer.getContext().eventDispatcher.startElement("frameBoundaryOffsetResult_r13", -1);

      frameBoundaryOffsetResult_r13 = new Asn1Integer();
      frameBoundaryOffsetResult_r13.decode (buffer, -5, 4);

      buffer.invokeCharacters(frameBoundaryOffsetResult_r13.toString());
      buffer.getContext().eventDispatcher.endElement("frameBoundaryOffsetResult_r13", -1);

      // decode subframeBoundaryOffsetResult_r13

      buffer.getContext().eventDispatcher.startElement("subframeBoundaryOffsetResult_r13", -1);

      subframeBoundaryOffsetResult_r13 = new Asn1Integer();
      subframeBoundaryOffsetResult_r13.decode (buffer, 0, 127);

      buffer.invokeCharacters(subframeBoundaryOffsetResult_r13.toString());
      buffer.getContext().eventDispatcher.endElement("subframeBoundaryOffsetResult_r13", -1);

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (sfn_OffsetResult_r13 != null) sfn_OffsetResult_r13.print (_sb, "sfn_OffsetResult_r13", _level+1);
      if (frameBoundaryOffsetResult_r13 != null) frameBoundaryOffsetResult_r13.print (_sb, "frameBoundaryOffsetResult_r13", _level+1);
      if (subframeBoundaryOffsetResult_r13 != null) subframeBoundaryOffsetResult_r13.print (_sb, "subframeBoundaryOffsetResult_r13", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
