/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MAC_Parameters_v1530 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "MAC-Parameters-v1530";
   }

   public MAC_Parameters_v1530_min_Proc_TimelineSubslot_r15 min_Proc_TimelineSubslot_r15;  // optional
   public SkipSubframeProcessing_r15 skipSubframeProcessing_r15;  // optional
   public MAC_Parameters_v1530_earlyData_UP_r15 earlyData_UP_r15 = null;  // optional
   public MAC_Parameters_v1530_dormantSCellState_r15 dormantSCellState_r15 = null;  // optional
   public MAC_Parameters_v1530_directSCellActivation_r15 directSCellActivation_r15 = null;  // optional
   public MAC_Parameters_v1530_directSCellHibernation_r15 directSCellHibernation_r15 = null;  // optional
   public MAC_Parameters_v1530_extendedLCID_Duplication_r15 extendedLCID_Duplication_r15 = null;  // optional
   public MAC_Parameters_v1530_sps_ServingCell_r15 sps_ServingCell_r15 = null;  // optional

   public MAC_Parameters_v1530 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MAC_Parameters_v1530 (
      MAC_Parameters_v1530_min_Proc_TimelineSubslot_r15 min_Proc_TimelineSubslot_r15_,
      SkipSubframeProcessing_r15 skipSubframeProcessing_r15_,
      MAC_Parameters_v1530_earlyData_UP_r15 earlyData_UP_r15_,
      MAC_Parameters_v1530_dormantSCellState_r15 dormantSCellState_r15_,
      MAC_Parameters_v1530_directSCellActivation_r15 directSCellActivation_r15_,
      MAC_Parameters_v1530_directSCellHibernation_r15 directSCellHibernation_r15_,
      MAC_Parameters_v1530_extendedLCID_Duplication_r15 extendedLCID_Duplication_r15_,
      MAC_Parameters_v1530_sps_ServingCell_r15 sps_ServingCell_r15_
   ) {
      super();
      min_Proc_TimelineSubslot_r15 = min_Proc_TimelineSubslot_r15_;
      skipSubframeProcessing_r15 = skipSubframeProcessing_r15_;
      earlyData_UP_r15 = earlyData_UP_r15_;
      dormantSCellState_r15 = dormantSCellState_r15_;
      directSCellActivation_r15 = directSCellActivation_r15_;
      directSCellHibernation_r15 = directSCellHibernation_r15_;
      extendedLCID_Duplication_r15 = extendedLCID_Duplication_r15_;
      sps_ServingCell_r15 = sps_ServingCell_r15_;
   }

   public void init () {
      min_Proc_TimelineSubslot_r15 = null;
      skipSubframeProcessing_r15 = null;
      earlyData_UP_r15 = null;
      dormantSCellState_r15 = null;
      directSCellActivation_r15 = null;
      directSCellHibernation_r15 = null;
      extendedLCID_Duplication_r15 = null;
      sps_ServingCell_r15 = null;
   }

   public int getElementCount() { return 8; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return min_Proc_TimelineSubslot_r15;
         case 1: return skipSubframeProcessing_r15;
         case 2: return earlyData_UP_r15;
         case 3: return dormantSCellState_r15;
         case 4: return directSCellActivation_r15;
         case 5: return directSCellHibernation_r15;
         case 6: return extendedLCID_Duplication_r15;
         case 7: return sps_ServingCell_r15;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "min-Proc-TimelineSubslot-r15";
         case 1: return "skipSubframeProcessing-r15";
         case 2: return "earlyData-UP-r15";
         case 3: return "dormantSCellState-r15";
         case 4: return "directSCellActivation-r15";
         case 5: return "directSCellHibernation-r15";
         case 6: return "extendedLCID-Duplication-r15";
         case 7: return "sps-ServingCell-r15";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean min_Proc_TimelineSubslot_r15Present = buffer.decodeBit ("min_Proc_TimelineSubslot_r15Present");
      boolean skipSubframeProcessing_r15Present = buffer.decodeBit ("skipSubframeProcessing_r15Present");
      boolean earlyData_UP_r15Present = buffer.decodeBit ("earlyData_UP_r15Present");
      boolean dormantSCellState_r15Present = buffer.decodeBit ("dormantSCellState_r15Present");
      boolean directSCellActivation_r15Present = buffer.decodeBit ("directSCellActivation_r15Present");
      boolean directSCellHibernation_r15Present = buffer.decodeBit ("directSCellHibernation_r15Present");
      boolean extendedLCID_Duplication_r15Present = buffer.decodeBit ("extendedLCID_Duplication_r15Present");
      boolean sps_ServingCell_r15Present = buffer.decodeBit ("sps_ServingCell_r15Present");

      // decode min_Proc_TimelineSubslot_r15

      if (min_Proc_TimelineSubslot_r15Present) {
         buffer.getContext().eventDispatcher.startElement("min_Proc_TimelineSubslot_r15", -1);

         min_Proc_TimelineSubslot_r15 = new MAC_Parameters_v1530_min_Proc_TimelineSubslot_r15();
         min_Proc_TimelineSubslot_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("min_Proc_TimelineSubslot_r15", -1);
      }
      else {
         min_Proc_TimelineSubslot_r15 = null;
      }

      // decode skipSubframeProcessing_r15

      if (skipSubframeProcessing_r15Present) {
         buffer.getContext().eventDispatcher.startElement("skipSubframeProcessing_r15", -1);

         skipSubframeProcessing_r15 = new SkipSubframeProcessing_r15();
         skipSubframeProcessing_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("skipSubframeProcessing_r15", -1);
      }
      else {
         skipSubframeProcessing_r15 = null;
      }

      // decode earlyData_UP_r15

      if (earlyData_UP_r15Present) {
         buffer.getContext().eventDispatcher.startElement("earlyData_UP_r15", -1);

         int tval = MAC_Parameters_v1530_earlyData_UP_r15.decodeEnumValue (buffer);
         earlyData_UP_r15 = MAC_Parameters_v1530_earlyData_UP_r15.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("earlyData_UP_r15", -1);
      }
      else {
         earlyData_UP_r15 = null;
      }

      // decode dormantSCellState_r15

      if (dormantSCellState_r15Present) {
         buffer.getContext().eventDispatcher.startElement("dormantSCellState_r15", -1);

         int tval = MAC_Parameters_v1530_dormantSCellState_r15.decodeEnumValue (buffer);
         dormantSCellState_r15 = MAC_Parameters_v1530_dormantSCellState_r15.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("dormantSCellState_r15", -1);
      }
      else {
         dormantSCellState_r15 = null;
      }

      // decode directSCellActivation_r15

      if (directSCellActivation_r15Present) {
         buffer.getContext().eventDispatcher.startElement("directSCellActivation_r15", -1);

         int tval = MAC_Parameters_v1530_directSCellActivation_r15.decodeEnumValue (buffer);
         directSCellActivation_r15 = MAC_Parameters_v1530_directSCellActivation_r15.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("directSCellActivation_r15", -1);
      }
      else {
         directSCellActivation_r15 = null;
      }

      // decode directSCellHibernation_r15

      if (directSCellHibernation_r15Present) {
         buffer.getContext().eventDispatcher.startElement("directSCellHibernation_r15", -1);

         int tval = MAC_Parameters_v1530_directSCellHibernation_r15.decodeEnumValue (buffer);
         directSCellHibernation_r15 = MAC_Parameters_v1530_directSCellHibernation_r15.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("directSCellHibernation_r15", -1);
      }
      else {
         directSCellHibernation_r15 = null;
      }

      // decode extendedLCID_Duplication_r15

      if (extendedLCID_Duplication_r15Present) {
         buffer.getContext().eventDispatcher.startElement("extendedLCID_Duplication_r15", -1);

         int tval = MAC_Parameters_v1530_extendedLCID_Duplication_r15.decodeEnumValue (buffer);
         extendedLCID_Duplication_r15 = MAC_Parameters_v1530_extendedLCID_Duplication_r15.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("extendedLCID_Duplication_r15", -1);
      }
      else {
         extendedLCID_Duplication_r15 = null;
      }

      // decode sps_ServingCell_r15

      if (sps_ServingCell_r15Present) {
         buffer.getContext().eventDispatcher.startElement("sps_ServingCell_r15", -1);

         int tval = MAC_Parameters_v1530_sps_ServingCell_r15.decodeEnumValue (buffer);
         sps_ServingCell_r15 = MAC_Parameters_v1530_sps_ServingCell_r15.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("sps_ServingCell_r15", -1);
      }
      else {
         sps_ServingCell_r15 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (min_Proc_TimelineSubslot_r15 != null) min_Proc_TimelineSubslot_r15.print (_sb, "min_Proc_TimelineSubslot_r15", _level+1);
      if (skipSubframeProcessing_r15 != null) skipSubframeProcessing_r15.print (_sb, "skipSubframeProcessing_r15", _level+1);
      if (earlyData_UP_r15 != null) earlyData_UP_r15.print (_sb, "earlyData_UP_r15", _level+1);
      if (dormantSCellState_r15 != null) dormantSCellState_r15.print (_sb, "dormantSCellState_r15", _level+1);
      if (directSCellActivation_r15 != null) directSCellActivation_r15.print (_sb, "directSCellActivation_r15", _level+1);
      if (directSCellHibernation_r15 != null) directSCellHibernation_r15.print (_sb, "directSCellHibernation_r15", _level+1);
      if (extendedLCID_Duplication_r15 != null) extendedLCID_Duplication_r15.print (_sb, "extendedLCID_Duplication_r15", _level+1);
      if (sps_ServingCell_r15 != null) sps_ServingCell_r15.print (_sb, "sps_ServingCell_r15", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
