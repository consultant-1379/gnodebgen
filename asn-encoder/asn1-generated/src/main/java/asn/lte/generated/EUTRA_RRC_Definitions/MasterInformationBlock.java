/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MasterInformationBlock extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "MasterInformationBlock";
   }

   public MasterInformationBlock_dl_Bandwidth dl_Bandwidth = null;
   public PHICH_Config phich_Config;
   public Asn1BitString systemFrameNumber;
   public Asn1Integer schedulingInfoSIB1_BR_r13;
   public Asn1Boolean systemInfoUnchanged_BR_r15;
   public Asn1BitString spare;

   public MasterInformationBlock () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MasterInformationBlock (
      MasterInformationBlock_dl_Bandwidth dl_Bandwidth_,
      PHICH_Config phich_Config_,
      Asn1BitString systemFrameNumber_,
      Asn1Integer schedulingInfoSIB1_BR_r13_,
      Asn1Boolean systemInfoUnchanged_BR_r15_,
      Asn1BitString spare_
   ) {
      super();
      dl_Bandwidth = dl_Bandwidth_;
      phich_Config = phich_Config_;
      systemFrameNumber = systemFrameNumber_;
      schedulingInfoSIB1_BR_r13 = schedulingInfoSIB1_BR_r13_;
      systemInfoUnchanged_BR_r15 = systemInfoUnchanged_BR_r15_;
      spare = spare_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public MasterInformationBlock (MasterInformationBlock_dl_Bandwidth dl_Bandwidth_,
      PHICH_Config phich_Config_,
      Asn1BitString systemFrameNumber_,
      long schedulingInfoSIB1_BR_r13_,
      boolean systemInfoUnchanged_BR_r15_,
      Asn1BitString spare_
   ) {
      super();
      dl_Bandwidth = dl_Bandwidth_;
      phich_Config = phich_Config_;
      systemFrameNumber = systemFrameNumber_;
      schedulingInfoSIB1_BR_r13 = new Asn1Integer (schedulingInfoSIB1_BR_r13_);
      systemInfoUnchanged_BR_r15 = new Asn1Boolean (systemInfoUnchanged_BR_r15_);
      spare = spare_;
   }

   public void init () {
      dl_Bandwidth = null;
      phich_Config = null;
      systemFrameNumber = null;
      schedulingInfoSIB1_BR_r13 = null;
      systemInfoUnchanged_BR_r15 = null;
      spare = null;
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return dl_Bandwidth;
         case 1: return phich_Config;
         case 2: return systemFrameNumber;
         case 3: return schedulingInfoSIB1_BR_r13;
         case 4: return systemInfoUnchanged_BR_r15;
         case 5: return spare;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "dl-Bandwidth";
         case 1: return "phich-Config";
         case 2: return "systemFrameNumber";
         case 3: return "schedulingInfoSIB1-BR-r13";
         case 4: return "systemInfoUnchanged-BR-r15";
         case 5: return "spare";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode dl_Bandwidth

      buffer.getContext().eventDispatcher.startElement("dl_Bandwidth", -1);

      {
         int tval = MasterInformationBlock_dl_Bandwidth.decodeEnumValue (buffer);
         dl_Bandwidth = MasterInformationBlock_dl_Bandwidth.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("dl_Bandwidth", -1);

      // decode phich_Config

      buffer.getContext().eventDispatcher.startElement("phich_Config", -1);

      phich_Config = new PHICH_Config();
      phich_Config.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("phich_Config", -1);

      // decode systemFrameNumber

      buffer.getContext().eventDispatcher.startElement("systemFrameNumber", -1);

      systemFrameNumber = new Asn1BitString();
      systemFrameNumber.decode (buffer, 8, 8);

      buffer.invokeCharacters(systemFrameNumber.toString());
      buffer.getContext().eventDispatcher.endElement("systemFrameNumber", -1);

      // decode schedulingInfoSIB1_BR_r13

      buffer.getContext().eventDispatcher.startElement("schedulingInfoSIB1_BR_r13", -1);

      schedulingInfoSIB1_BR_r13 = new Asn1Integer();
      schedulingInfoSIB1_BR_r13.decode (buffer, 0, 31);

      buffer.invokeCharacters(schedulingInfoSIB1_BR_r13.toString());
      buffer.getContext().eventDispatcher.endElement("schedulingInfoSIB1_BR_r13", -1);

      // decode systemInfoUnchanged_BR_r15

      buffer.getContext().eventDispatcher.startElement("systemInfoUnchanged_BR_r15", -1);

      systemInfoUnchanged_BR_r15 = new Asn1Boolean();
      systemInfoUnchanged_BR_r15.decode (buffer);

      buffer.invokeCharacters(systemInfoUnchanged_BR_r15.toString());
      buffer.getContext().eventDispatcher.endElement("systemInfoUnchanged_BR_r15", -1);

      // decode spare

      buffer.getContext().eventDispatcher.startElement("spare", -1);

      spare = new Asn1BitString();
      spare.decode (buffer, 4, 4);

      buffer.invokeCharacters(spare.toString());
      buffer.getContext().eventDispatcher.endElement("spare", -1);

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (dl_Bandwidth != null) dl_Bandwidth.print (_sb, "dl_Bandwidth", _level+1);
      if (phich_Config != null) phich_Config.print (_sb, "phich_Config", _level+1);
      if (systemFrameNumber != null) systemFrameNumber.print (_sb, "systemFrameNumber", _level+1);
      if (schedulingInfoSIB1_BR_r13 != null) schedulingInfoSIB1_BR_r13.print (_sb, "schedulingInfoSIB1_BR_r13", _level+1);
      if (systemInfoUnchanged_BR_r15 != null) systemInfoUnchanged_BR_r15.print (_sb, "systemInfoUnchanged_BR_r15", _level+1);
      if (spare != null) spare.print (_sb, "spare", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
