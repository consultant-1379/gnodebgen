/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_InterNodeDefinitions;

import com.objsys.asn1j.runtime.*;
import asn.lte.generated.NR_RRC_Definitions.ARFCN_ValueEUTRA;
import asn.lte.generated.NR_RRC_Definitions.DRX_Config;

public class CG_Config_v1560_IEs extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_InterNodeDefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CG-Config-v1560-IEs";
   }

   public ARFCN_ValueEUTRA pSCellFrequencyEUTRA;  // optional
   public Asn1OctetString scg_CellGroupConfigEUTRA;  // optional
   public Asn1OctetString candidateCellInfoListSN_EUTRA;  // optional
   public CandidateServingFreqListEUTRA candidateServingFreqListEUTRA;  // optional
   public CG_Config_v1560_IEs_needForGaps needForGaps = null;  // optional
   public DRX_Config drx_ConfigSCG;  // optional
   public CG_Config_v1560_IEs_reportCGI_RequestEUTRA reportCGI_RequestEUTRA;  // optional
   public CG_Config_v1590_IEs nonCriticalExtension;  // optional

   public CG_Config_v1560_IEs () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CG_Config_v1560_IEs (
      ARFCN_ValueEUTRA pSCellFrequencyEUTRA_,
      Asn1OctetString scg_CellGroupConfigEUTRA_,
      Asn1OctetString candidateCellInfoListSN_EUTRA_,
      CandidateServingFreqListEUTRA candidateServingFreqListEUTRA_,
      CG_Config_v1560_IEs_needForGaps needForGaps_,
      DRX_Config drx_ConfigSCG_,
      CG_Config_v1560_IEs_reportCGI_RequestEUTRA reportCGI_RequestEUTRA_,
      CG_Config_v1590_IEs nonCriticalExtension_
   ) {
      super();
      pSCellFrequencyEUTRA = pSCellFrequencyEUTRA_;
      scg_CellGroupConfigEUTRA = scg_CellGroupConfigEUTRA_;
      candidateCellInfoListSN_EUTRA = candidateCellInfoListSN_EUTRA_;
      candidateServingFreqListEUTRA = candidateServingFreqListEUTRA_;
      needForGaps = needForGaps_;
      drx_ConfigSCG = drx_ConfigSCG_;
      reportCGI_RequestEUTRA = reportCGI_RequestEUTRA_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public CG_Config_v1560_IEs (long pSCellFrequencyEUTRA_,
      byte[] scg_CellGroupConfigEUTRA_,
      byte[] candidateCellInfoListSN_EUTRA_,
      CandidateServingFreqListEUTRA candidateServingFreqListEUTRA_,
      CG_Config_v1560_IEs_needForGaps needForGaps_,
      DRX_Config drx_ConfigSCG_,
      CG_Config_v1560_IEs_reportCGI_RequestEUTRA reportCGI_RequestEUTRA_,
      CG_Config_v1590_IEs nonCriticalExtension_
   ) {
      super();
      pSCellFrequencyEUTRA = new ARFCN_ValueEUTRA (pSCellFrequencyEUTRA_);
      scg_CellGroupConfigEUTRA = new Asn1OctetString (scg_CellGroupConfigEUTRA_);
      candidateCellInfoListSN_EUTRA = new Asn1OctetString (candidateCellInfoListSN_EUTRA_);
      candidateServingFreqListEUTRA = candidateServingFreqListEUTRA_;
      needForGaps = needForGaps_;
      drx_ConfigSCG = drx_ConfigSCG_;
      reportCGI_RequestEUTRA = reportCGI_RequestEUTRA_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   public void init () {
      pSCellFrequencyEUTRA = null;
      scg_CellGroupConfigEUTRA = null;
      candidateCellInfoListSN_EUTRA = null;
      candidateServingFreqListEUTRA = null;
      needForGaps = null;
      drx_ConfigSCG = null;
      reportCGI_RequestEUTRA = null;
      nonCriticalExtension = null;
   }

   public int getElementCount() { return 8; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return pSCellFrequencyEUTRA;
         case 1: return scg_CellGroupConfigEUTRA;
         case 2: return candidateCellInfoListSN_EUTRA;
         case 3: return candidateServingFreqListEUTRA;
         case 4: return needForGaps;
         case 5: return drx_ConfigSCG;
         case 6: return reportCGI_RequestEUTRA;
         case 7: return nonCriticalExtension;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "pSCellFrequencyEUTRA";
         case 1: return "scg-CellGroupConfigEUTRA";
         case 2: return "candidateCellInfoListSN-EUTRA";
         case 3: return "candidateServingFreqListEUTRA";
         case 4: return "needForGaps";
         case 5: return "drx-ConfigSCG";
         case 6: return "reportCGI-RequestEUTRA";
         case 7: return "nonCriticalExtension";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean pSCellFrequencyEUTRAPresent = buffer.decodeBit ("pSCellFrequencyEUTRAPresent");
      boolean scg_CellGroupConfigEUTRAPresent = buffer.decodeBit ("scg_CellGroupConfigEUTRAPresent");
      boolean candidateCellInfoListSN_EUTRAPresent = buffer.decodeBit ("candidateCellInfoListSN_EUTRAPresent");
      boolean candidateServingFreqListEUTRAPresent = buffer.decodeBit ("candidateServingFreqListEUTRAPresent");
      boolean needForGapsPresent = buffer.decodeBit ("needForGapsPresent");
      boolean drx_ConfigSCGPresent = buffer.decodeBit ("drx_ConfigSCGPresent");
      boolean reportCGI_RequestEUTRAPresent = buffer.decodeBit ("reportCGI_RequestEUTRAPresent");
      boolean nonCriticalExtensionPresent = buffer.decodeBit ("nonCriticalExtensionPresent");

      // decode pSCellFrequencyEUTRA

      if (pSCellFrequencyEUTRAPresent) {
         buffer.getContext().eventDispatcher.startElement("pSCellFrequencyEUTRA", -1);

         pSCellFrequencyEUTRA = new ARFCN_ValueEUTRA();
         pSCellFrequencyEUTRA.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("pSCellFrequencyEUTRA", -1);
      }
      else {
         pSCellFrequencyEUTRA = null;
      }

      // decode scg_CellGroupConfigEUTRA

      if (scg_CellGroupConfigEUTRAPresent) {
         buffer.getContext().eventDispatcher.startElement("scg_CellGroupConfigEUTRA", -1);

         scg_CellGroupConfigEUTRA = new Asn1OctetString();
         scg_CellGroupConfigEUTRA.decode (buffer);

         buffer.invokeCharacters(scg_CellGroupConfigEUTRA.toString());
         buffer.getContext().eventDispatcher.endElement("scg_CellGroupConfigEUTRA", -1);
      }
      else {
         scg_CellGroupConfigEUTRA = null;
      }

      // decode candidateCellInfoListSN_EUTRA

      if (candidateCellInfoListSN_EUTRAPresent) {
         buffer.getContext().eventDispatcher.startElement("candidateCellInfoListSN_EUTRA", -1);

         candidateCellInfoListSN_EUTRA = new Asn1OctetString();
         candidateCellInfoListSN_EUTRA.decode (buffer);

         buffer.invokeCharacters(candidateCellInfoListSN_EUTRA.toString());
         buffer.getContext().eventDispatcher.endElement("candidateCellInfoListSN_EUTRA", -1);
      }
      else {
         candidateCellInfoListSN_EUTRA = null;
      }

      // decode candidateServingFreqListEUTRA

      if (candidateServingFreqListEUTRAPresent) {
         buffer.getContext().eventDispatcher.startElement("candidateServingFreqListEUTRA", -1);

         candidateServingFreqListEUTRA = new CandidateServingFreqListEUTRA();
         candidateServingFreqListEUTRA.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("candidateServingFreqListEUTRA", -1);
      }
      else {
         candidateServingFreqListEUTRA = null;
      }

      // decode needForGaps

      if (needForGapsPresent) {
         buffer.getContext().eventDispatcher.startElement("needForGaps", -1);

         int tval = CG_Config_v1560_IEs_needForGaps.decodeEnumValue (buffer);
         needForGaps = CG_Config_v1560_IEs_needForGaps.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("needForGaps", -1);
      }
      else {
         needForGaps = null;
      }

      // decode drx_ConfigSCG

      if (drx_ConfigSCGPresent) {
         buffer.getContext().eventDispatcher.startElement("drx_ConfigSCG", -1);

         drx_ConfigSCG = new DRX_Config();
         drx_ConfigSCG.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("drx_ConfigSCG", -1);
      }
      else {
         drx_ConfigSCG = null;
      }

      // decode reportCGI_RequestEUTRA

      if (reportCGI_RequestEUTRAPresent) {
         buffer.getContext().eventDispatcher.startElement("reportCGI_RequestEUTRA", -1);

         reportCGI_RequestEUTRA = new CG_Config_v1560_IEs_reportCGI_RequestEUTRA();
         reportCGI_RequestEUTRA.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("reportCGI_RequestEUTRA", -1);
      }
      else {
         reportCGI_RequestEUTRA = null;
      }

      // decode nonCriticalExtension

      if (nonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension = new CG_Config_v1590_IEs();
         nonCriticalExtension.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }
      else {
         nonCriticalExtension = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (pSCellFrequencyEUTRA != null) pSCellFrequencyEUTRA.print (_sb, "pSCellFrequencyEUTRA", _level+1);
      if (scg_CellGroupConfigEUTRA != null) scg_CellGroupConfigEUTRA.print (_sb, "scg_CellGroupConfigEUTRA", _level+1);
      if (candidateCellInfoListSN_EUTRA != null) candidateCellInfoListSN_EUTRA.print (_sb, "candidateCellInfoListSN_EUTRA", _level+1);
      if (candidateServingFreqListEUTRA != null) candidateServingFreqListEUTRA.print (_sb, "candidateServingFreqListEUTRA", _level+1);
      if (needForGaps != null) needForGaps.print (_sb, "needForGaps", _level+1);
      if (drx_ConfigSCG != null) drx_ConfigSCG.print (_sb, "drx_ConfigSCG", _level+1);
      if (reportCGI_RequestEUTRA != null) reportCGI_RequestEUTRA.print (_sb, "reportCGI_RequestEUTRA", _level+1);
      if (nonCriticalExtension != null) nonCriticalExtension.print (_sb, "nonCriticalExtension", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
