/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MobilityFromEUTRACommand_r8_IEs extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "MobilityFromEUTRACommand-r8-IEs";
   }

   public Asn1Boolean cs_FallbackIndicator;
   public MobilityFromEUTRACommand_r8_IEs_purpose purpose;
   public MobilityFromEUTRACommand_v8a0_IEs nonCriticalExtension;  // optional

   public MobilityFromEUTRACommand_r8_IEs () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MobilityFromEUTRACommand_r8_IEs (
      Asn1Boolean cs_FallbackIndicator_,
      MobilityFromEUTRACommand_r8_IEs_purpose purpose_,
      MobilityFromEUTRACommand_v8a0_IEs nonCriticalExtension_
   ) {
      super();
      cs_FallbackIndicator = cs_FallbackIndicator_;
      purpose = purpose_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public MobilityFromEUTRACommand_r8_IEs (
      Asn1Boolean cs_FallbackIndicator_,
      MobilityFromEUTRACommand_r8_IEs_purpose purpose_
   ) {
      super();
      cs_FallbackIndicator = cs_FallbackIndicator_;
      purpose = purpose_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public MobilityFromEUTRACommand_r8_IEs (boolean cs_FallbackIndicator_,
      MobilityFromEUTRACommand_r8_IEs_purpose purpose_,
      MobilityFromEUTRACommand_v8a0_IEs nonCriticalExtension_
   ) {
      super();
      cs_FallbackIndicator = new Asn1Boolean (cs_FallbackIndicator_);
      purpose = purpose_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public MobilityFromEUTRACommand_r8_IEs (
      boolean cs_FallbackIndicator_,
      MobilityFromEUTRACommand_r8_IEs_purpose purpose_
   ) {
      super();
      cs_FallbackIndicator = new Asn1Boolean (cs_FallbackIndicator_);
      purpose = purpose_;
   }

   public void init () {
      cs_FallbackIndicator = null;
      purpose = null;
      nonCriticalExtension = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return cs_FallbackIndicator;
         case 1: return purpose;
         case 2: return nonCriticalExtension;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "cs-FallbackIndicator";
         case 1: return "purpose";
         case 2: return "nonCriticalExtension";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean nonCriticalExtensionPresent = buffer.decodeBit ("nonCriticalExtensionPresent");

      // decode cs_FallbackIndicator

      buffer.getContext().eventDispatcher.startElement("cs_FallbackIndicator", -1);

      cs_FallbackIndicator = new Asn1Boolean();
      cs_FallbackIndicator.decode (buffer);

      buffer.invokeCharacters(cs_FallbackIndicator.toString());
      buffer.getContext().eventDispatcher.endElement("cs_FallbackIndicator", -1);

      // decode purpose

      buffer.getContext().eventDispatcher.startElement("purpose", -1);

      purpose = new MobilityFromEUTRACommand_r8_IEs_purpose();
      purpose.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("purpose", -1);

      // decode nonCriticalExtension

      if (nonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension = new MobilityFromEUTRACommand_v8a0_IEs();
         nonCriticalExtension.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }
      else {
         nonCriticalExtension = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (cs_FallbackIndicator != null) cs_FallbackIndicator.print (_sb, "cs_FallbackIndicator", _level+1);
      if (purpose != null) purpose.print (_sb, "purpose", _level+1);
      if (nonCriticalExtension != null) nonCriticalExtension.print (_sb, "nonCriticalExtension", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
