/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SCPTM_Parameters_r13 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SCPTM-Parameters-r13";
   }

   public SCPTM_Parameters_r13_scptm_ParallelReception_r13 scptm_ParallelReception_r13 = null;  // optional
   public SCPTM_Parameters_r13_scptm_SCell_r13 scptm_SCell_r13 = null;  // optional
   public SCPTM_Parameters_r13_scptm_NonServingCell_r13 scptm_NonServingCell_r13 = null;  // optional
   public SCPTM_Parameters_r13_scptm_AsyncDC_r13 scptm_AsyncDC_r13 = null;  // optional

   public SCPTM_Parameters_r13 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SCPTM_Parameters_r13 (
      SCPTM_Parameters_r13_scptm_ParallelReception_r13 scptm_ParallelReception_r13_,
      SCPTM_Parameters_r13_scptm_SCell_r13 scptm_SCell_r13_,
      SCPTM_Parameters_r13_scptm_NonServingCell_r13 scptm_NonServingCell_r13_,
      SCPTM_Parameters_r13_scptm_AsyncDC_r13 scptm_AsyncDC_r13_
   ) {
      super();
      scptm_ParallelReception_r13 = scptm_ParallelReception_r13_;
      scptm_SCell_r13 = scptm_SCell_r13_;
      scptm_NonServingCell_r13 = scptm_NonServingCell_r13_;
      scptm_AsyncDC_r13 = scptm_AsyncDC_r13_;
   }

   public void init () {
      scptm_ParallelReception_r13 = null;
      scptm_SCell_r13 = null;
      scptm_NonServingCell_r13 = null;
      scptm_AsyncDC_r13 = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return scptm_ParallelReception_r13;
         case 1: return scptm_SCell_r13;
         case 2: return scptm_NonServingCell_r13;
         case 3: return scptm_AsyncDC_r13;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "scptm-ParallelReception-r13";
         case 1: return "scptm-SCell-r13";
         case 2: return "scptm-NonServingCell-r13";
         case 3: return "scptm-AsyncDC-r13";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean scptm_ParallelReception_r13Present = buffer.decodeBit ("scptm_ParallelReception_r13Present");
      boolean scptm_SCell_r13Present = buffer.decodeBit ("scptm_SCell_r13Present");
      boolean scptm_NonServingCell_r13Present = buffer.decodeBit ("scptm_NonServingCell_r13Present");
      boolean scptm_AsyncDC_r13Present = buffer.decodeBit ("scptm_AsyncDC_r13Present");

      // decode scptm_ParallelReception_r13

      if (scptm_ParallelReception_r13Present) {
         buffer.getContext().eventDispatcher.startElement("scptm_ParallelReception_r13", -1);

         int tval = SCPTM_Parameters_r13_scptm_ParallelReception_r13.decodeEnumValue (buffer);
         scptm_ParallelReception_r13 = SCPTM_Parameters_r13_scptm_ParallelReception_r13.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("scptm_ParallelReception_r13", -1);
      }
      else {
         scptm_ParallelReception_r13 = null;
      }

      // decode scptm_SCell_r13

      if (scptm_SCell_r13Present) {
         buffer.getContext().eventDispatcher.startElement("scptm_SCell_r13", -1);

         int tval = SCPTM_Parameters_r13_scptm_SCell_r13.decodeEnumValue (buffer);
         scptm_SCell_r13 = SCPTM_Parameters_r13_scptm_SCell_r13.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("scptm_SCell_r13", -1);
      }
      else {
         scptm_SCell_r13 = null;
      }

      // decode scptm_NonServingCell_r13

      if (scptm_NonServingCell_r13Present) {
         buffer.getContext().eventDispatcher.startElement("scptm_NonServingCell_r13", -1);

         int tval = SCPTM_Parameters_r13_scptm_NonServingCell_r13.decodeEnumValue (buffer);
         scptm_NonServingCell_r13 = SCPTM_Parameters_r13_scptm_NonServingCell_r13.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("scptm_NonServingCell_r13", -1);
      }
      else {
         scptm_NonServingCell_r13 = null;
      }

      // decode scptm_AsyncDC_r13

      if (scptm_AsyncDC_r13Present) {
         buffer.getContext().eventDispatcher.startElement("scptm_AsyncDC_r13", -1);

         int tval = SCPTM_Parameters_r13_scptm_AsyncDC_r13.decodeEnumValue (buffer);
         scptm_AsyncDC_r13 = SCPTM_Parameters_r13_scptm_AsyncDC_r13.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("scptm_AsyncDC_r13", -1);
      }
      else {
         scptm_AsyncDC_r13 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (scptm_ParallelReception_r13 != null) scptm_ParallelReception_r13.print (_sb, "scptm_ParallelReception_r13", _level+1);
      if (scptm_SCell_r13 != null) scptm_SCell_r13.print (_sb, "scptm_SCell_r13", _level+1);
      if (scptm_NonServingCell_r13 != null) scptm_NonServingCell_r13.print (_sb, "scptm_NonServingCell_r13", _level+1);
      if (scptm_AsyncDC_r13 != null) scptm_AsyncDC_r13.print (_sb, "scptm_AsyncDC_r13", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
