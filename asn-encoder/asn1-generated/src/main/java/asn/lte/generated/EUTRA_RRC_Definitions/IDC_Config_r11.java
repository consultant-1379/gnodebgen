/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class IDC_Config_r11 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "IDC-Config-r11";
   }

   public IDC_Config_r11_idc_Indication_r11 idc_Indication_r11 = null;  // optional
   public IDC_Config_r11_autonomousDenialParameters_r11 autonomousDenialParameters_r11;  // optional
   public boolean mV2ExtPresent;
   public IDC_Config_r11_idc_Indication_UL_CA_r11 idc_Indication_UL_CA_r11 = null;  // optional
   public boolean mV3ExtPresent;
   public IDC_Config_r11_idc_HardwareSharingIndication_r13 idc_HardwareSharingIndication_r13 = null;  // optional
   public boolean mV4ExtPresent;
   public IDC_Config_r11_idc_Indication_MRDC_r15 idc_Indication_MRDC_r15;  // optional
   public Asn1OpenExt extElem1;

   public IDC_Config_r11 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public IDC_Config_r11 (
      IDC_Config_r11_idc_Indication_r11 idc_Indication_r11_,
      IDC_Config_r11_autonomousDenialParameters_r11 autonomousDenialParameters_r11_,
      IDC_Config_r11_idc_Indication_UL_CA_r11 idc_Indication_UL_CA_r11_,
      IDC_Config_r11_idc_HardwareSharingIndication_r13 idc_HardwareSharingIndication_r13_,
      IDC_Config_r11_idc_Indication_MRDC_r15 idc_Indication_MRDC_r15_
   ) {
      super();
      idc_Indication_r11 = idc_Indication_r11_;
      autonomousDenialParameters_r11 = autonomousDenialParameters_r11_;
      idc_Indication_UL_CA_r11 = idc_Indication_UL_CA_r11_;
      idc_HardwareSharingIndication_r13 = idc_HardwareSharingIndication_r13_;
      idc_Indication_MRDC_r15 = idc_Indication_MRDC_r15_;
   }

   public void init () {
      idc_Indication_r11 = null;
      autonomousDenialParameters_r11 = null;
      idc_Indication_UL_CA_r11 = null;
      idc_HardwareSharingIndication_r13 = null;
      idc_Indication_MRDC_r15 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return idc_Indication_r11;
         case 1: return autonomousDenialParameters_r11;
         case 2: return idc_Indication_UL_CA_r11;
         case 3: return idc_HardwareSharingIndication_r13;
         case 4: return idc_Indication_MRDC_r15;
         case 5: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "idc-Indication-r11";
         case 1: return "autonomousDenialParameters-r11";
         case 2: return "idc-Indication-UL-CA-r11";
         case 3: return "idc-HardwareSharingIndication-r13";
         case 4: return "idc-Indication-MRDC-r15";
         case 5: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean idc_Indication_r11Present = buffer.decodeBit ("idc_Indication_r11Present");
      boolean autonomousDenialParameters_r11Present = buffer.decodeBit ("autonomousDenialParameters_r11Present");

      // decode idc_Indication_r11

      if (idc_Indication_r11Present) {
         buffer.getContext().eventDispatcher.startElement("idc_Indication_r11", -1);

         int tval = IDC_Config_r11_idc_Indication_r11.decodeEnumValue (buffer);
         idc_Indication_r11 = IDC_Config_r11_idc_Indication_r11.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("idc_Indication_r11", -1);
      }
      else {
         idc_Indication_r11 = null;
      }

      // decode autonomousDenialParameters_r11

      if (autonomousDenialParameters_r11Present) {
         buffer.getContext().eventDispatcher.startElement("autonomousDenialParameters_r11", -1);

         autonomousDenialParameters_r11 = new IDC_Config_r11_autonomousDenialParameters_r11();
         autonomousDenialParameters_r11.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("autonomousDenialParameters_r11", -1);
      }
      else {
         autonomousDenialParameters_r11 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV4ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean idc_Indication_UL_CA_r11Present = buffer.decodeBit ("idc_Indication_UL_CA_r11Present");

            // decode idc_Indication_UL_CA_r11

            if (idc_Indication_UL_CA_r11Present) {
               buffer.getContext().eventDispatcher.startElement("idc_Indication_UL_CA_r11", -1);

               int tval = IDC_Config_r11_idc_Indication_UL_CA_r11.decodeEnumValue (buffer);
               idc_Indication_UL_CA_r11 = IDC_Config_r11_idc_Indication_UL_CA_r11.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("idc_Indication_UL_CA_r11", -1);
            }
            else {
               idc_Indication_UL_CA_r11 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean idc_HardwareSharingIndication_r13Present = buffer.decodeBit ("idc_HardwareSharingIndication_r13Present");

            // decode idc_HardwareSharingIndication_r13

            if (idc_HardwareSharingIndication_r13Present) {
               buffer.getContext().eventDispatcher.startElement("idc_HardwareSharingIndication_r13", -1);

               int tval = IDC_Config_r11_idc_HardwareSharingIndication_r13.decodeEnumValue (buffer);
               idc_HardwareSharingIndication_r13 = IDC_Config_r11_idc_HardwareSharingIndication_r13.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("idc_HardwareSharingIndication_r13", -1);
            }
            else {
               idc_HardwareSharingIndication_r13 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV4ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean idc_Indication_MRDC_r15Present = buffer.decodeBit ("idc_Indication_MRDC_r15Present");

            // decode idc_Indication_MRDC_r15

            if (idc_Indication_MRDC_r15Present) {
               buffer.getContext().eventDispatcher.startElement("idc_Indication_MRDC_r15", -1);

               idc_Indication_MRDC_r15 = new IDC_Config_r11_idc_Indication_MRDC_r15();
               idc_Indication_MRDC_r15.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("idc_Indication_MRDC_r15", -1);
            }
            else {
               idc_Indication_MRDC_r15 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (idc_Indication_r11 != null) idc_Indication_r11.print (_sb, "idc_Indication_r11", _level+1);
      if (autonomousDenialParameters_r11 != null) autonomousDenialParameters_r11.print (_sb, "autonomousDenialParameters_r11", _level+1);
      if (idc_Indication_UL_CA_r11 != null) idc_Indication_UL_CA_r11.print (_sb, "idc_Indication_UL_CA_r11", _level+1);
      if (idc_HardwareSharingIndication_r13 != null) idc_HardwareSharingIndication_r13.print (_sb, "idc_HardwareSharingIndication_r13", _level+1);
      if (idc_Indication_MRDC_r15 != null) idc_Indication_MRDC_r15.print (_sb, "idc_Indication_MRDC_r15", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
