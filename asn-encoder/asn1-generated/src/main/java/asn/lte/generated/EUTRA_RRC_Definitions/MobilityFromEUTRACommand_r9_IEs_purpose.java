/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MobilityFromEUTRACommand_r9_IEs_purpose extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CHOICE";
   }

   // Choice element identifier constants
   public final static byte _HANDOVER = 1;
   public final static byte _CELLCHANGEORDER = 2;
   public final static byte _E_CSFB_R9 = 3;
   public final static byte _EXTELEM1 = 4;

   public MobilityFromEUTRACommand_r9_IEs_purpose () {
      super();
   }

   public MobilityFromEUTRACommand_r9_IEs_purpose (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _HANDOVER: return "handover";
      case _CELLCHANGEORDER: return "cellChangeOrder";
      case _E_CSFB_R9: return "e_CSFB_r9";
      case _EXTELEM1: return "...";
      default: return "UNDEFINED";
      }
   }

   public void set_handover (Handover value) {
      setElement (_HANDOVER, value);
   }

   public void set_cellChangeOrder (CellChangeOrder value) {
      setElement (_CELLCHANGEORDER, value);
   }

   public void set_e_CSFB_r9 (E_CSFB_r9 value) {
      setElement (_E_CSFB_R9, value);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      Asn1PerDecodeBuffer savedBuffer = null;
      boolean extbit = buffer.decodeBit ("extbit");

      if (!extbit) {
         int idx = (int) buffer.decodeConsWholeNumber (3, "index");
         choiceID = idx + 1;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         switch (idx) {
            // handover
            case 0: { 
               Handover handover;
               element = handover = new Handover();
               handover.decode (buffer);
               break;
            }

            // cellChangeOrder
            case 1: { 
               CellChangeOrder cellChangeOrder;
               element = cellChangeOrder = new CellChangeOrder();
               cellChangeOrder.decode (buffer);
               break;
            }

            // e_CSFB_r9
            case 2: { 
               E_CSFB_r9 e_CSFB_r9;
               element = e_CSFB_r9 = new E_CSFB_r9();
               e_CSFB_r9.decode (buffer);
               break;
            }

            default:
            throw new Asn1InvalidChoiceOptionException (buffer, idx);
         }
      }
      else {
         int idx = (int) buffer.decodeSmallNonNegWholeNumber ();
         choiceID = idx + 4;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         buffer.byteAlign();

         Asn1OpenType openType = new Asn1OpenType ();
         openType.decode (buffer);

         setElement (_EXTELEM1, openType);
         buffer.invokeCharacters (openType.toString());
      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);

      if (savedBuffer != null) {
         buffer = savedBuffer;
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (element != null) {
         element.print (_sb, getElemName(), _level+1);
      }
      indent (_sb, _level);
      _sb.append("}\n");
   }

}
