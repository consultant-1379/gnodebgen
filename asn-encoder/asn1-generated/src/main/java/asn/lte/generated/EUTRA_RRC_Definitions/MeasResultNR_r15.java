/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MeasResultNR_r15 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "MeasResultNR-r15";
   }

   public RSRP_RangeNR_r15 rsrpResult_r15;  // optional
   public RSRQ_RangeNR_r15 rsrqResult_r15;  // optional
   public RS_SINR_RangeNR_r15 rs_sinr_Result_r15;  // optional
   public Asn1OpenExt extElem1;

   public MeasResultNR_r15 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MeasResultNR_r15 (
      RSRP_RangeNR_r15 rsrpResult_r15_,
      RSRQ_RangeNR_r15 rsrqResult_r15_,
      RS_SINR_RangeNR_r15 rs_sinr_Result_r15_
   ) {
      super();
      rsrpResult_r15 = rsrpResult_r15_;
      rsrqResult_r15 = rsrqResult_r15_;
      rs_sinr_Result_r15 = rs_sinr_Result_r15_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public MeasResultNR_r15 (long rsrpResult_r15_,
      long rsrqResult_r15_,
      long rs_sinr_Result_r15_
   ) {
      super();
      rsrpResult_r15 = new RSRP_RangeNR_r15 (rsrpResult_r15_);
      rsrqResult_r15 = new RSRQ_RangeNR_r15 (rsrqResult_r15_);
      rs_sinr_Result_r15 = new RS_SINR_RangeNR_r15 (rs_sinr_Result_r15_);
   }

   public void init () {
      rsrpResult_r15 = null;
      rsrqResult_r15 = null;
      rs_sinr_Result_r15 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return rsrpResult_r15;
         case 1: return rsrqResult_r15;
         case 2: return rs_sinr_Result_r15;
         case 3: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "rsrpResult-r15";
         case 1: return "rsrqResult-r15";
         case 2: return "rs-sinr-Result-r15";
         case 3: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean rsrpResult_r15Present = buffer.decodeBit ("rsrpResult_r15Present");
      boolean rsrqResult_r15Present = buffer.decodeBit ("rsrqResult_r15Present");
      boolean rs_sinr_Result_r15Present = buffer.decodeBit ("rs_sinr_Result_r15Present");

      // decode rsrpResult_r15

      if (rsrpResult_r15Present) {
         buffer.getContext().eventDispatcher.startElement("rsrpResult_r15", -1);

         rsrpResult_r15 = new RSRP_RangeNR_r15();
         rsrpResult_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("rsrpResult_r15", -1);
      }
      else {
         rsrpResult_r15 = null;
      }

      // decode rsrqResult_r15

      if (rsrqResult_r15Present) {
         buffer.getContext().eventDispatcher.startElement("rsrqResult_r15", -1);

         rsrqResult_r15 = new RSRQ_RangeNR_r15();
         rsrqResult_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("rsrqResult_r15", -1);
      }
      else {
         rsrqResult_r15 = null;
      }

      // decode rs_sinr_Result_r15

      if (rs_sinr_Result_r15Present) {
         buffer.getContext().eventDispatcher.startElement("rs_sinr_Result_r15", -1);

         rs_sinr_Result_r15 = new RS_SINR_RangeNR_r15();
         rs_sinr_Result_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("rs_sinr_Result_r15", -1);
      }
      else {
         rs_sinr_Result_r15 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (rsrpResult_r15 != null) rsrpResult_r15.print (_sb, "rsrpResult_r15", _level+1);
      if (rsrqResult_r15 != null) rsrqResult_r15.print (_sb, "rsrqResult_r15", _level+1);
      if (rs_sinr_Result_r15 != null) rs_sinr_Result_r15.print (_sb, "rs_sinr_Result_r15", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
