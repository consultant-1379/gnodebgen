/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SL_DiscTxResourceInfoPerFreq_r13 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SL-DiscTxResourceInfoPerFreq-r13";
   }

   public ARFCN_ValueEUTRA_r9 discTxCarrierFreq_r13;
   public SL_DiscTxResource_r13 discTxResources_r13;  // optional
   public SL_DiscTxResource_r13 discTxResourcesPS_r13;  // optional
   public SL_DiscTxRefCarrierDedicated_r13 discTxRefCarrierDedicated_r13;  // optional
   public CellSelectionInfoNFreq_r13 discCellSelectionInfo_r13;  // optional
   public Asn1OpenExt extElem1;

   public SL_DiscTxResourceInfoPerFreq_r13 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SL_DiscTxResourceInfoPerFreq_r13 (
      ARFCN_ValueEUTRA_r9 discTxCarrierFreq_r13_,
      SL_DiscTxResource_r13 discTxResources_r13_,
      SL_DiscTxResource_r13 discTxResourcesPS_r13_,
      SL_DiscTxRefCarrierDedicated_r13 discTxRefCarrierDedicated_r13_,
      CellSelectionInfoNFreq_r13 discCellSelectionInfo_r13_
   ) {
      super();
      discTxCarrierFreq_r13 = discTxCarrierFreq_r13_;
      discTxResources_r13 = discTxResources_r13_;
      discTxResourcesPS_r13 = discTxResourcesPS_r13_;
      discTxRefCarrierDedicated_r13 = discTxRefCarrierDedicated_r13_;
      discCellSelectionInfo_r13 = discCellSelectionInfo_r13_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SL_DiscTxResourceInfoPerFreq_r13 (
      ARFCN_ValueEUTRA_r9 discTxCarrierFreq_r13_
   ) {
      super();
      discTxCarrierFreq_r13 = discTxCarrierFreq_r13_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SL_DiscTxResourceInfoPerFreq_r13 (long discTxCarrierFreq_r13_,
      SL_DiscTxResource_r13 discTxResources_r13_,
      SL_DiscTxResource_r13 discTxResourcesPS_r13_,
      SL_DiscTxRefCarrierDedicated_r13 discTxRefCarrierDedicated_r13_,
      CellSelectionInfoNFreq_r13 discCellSelectionInfo_r13_
   ) {
      super();
      discTxCarrierFreq_r13 = new ARFCN_ValueEUTRA_r9 (discTxCarrierFreq_r13_);
      discTxResources_r13 = discTxResources_r13_;
      discTxResourcesPS_r13 = discTxResourcesPS_r13_;
      discTxRefCarrierDedicated_r13 = discTxRefCarrierDedicated_r13_;
      discCellSelectionInfo_r13 = discCellSelectionInfo_r13_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public SL_DiscTxResourceInfoPerFreq_r13 (
      long discTxCarrierFreq_r13_
   ) {
      super();
      discTxCarrierFreq_r13 = new ARFCN_ValueEUTRA_r9 (discTxCarrierFreq_r13_);
   }

   public void init () {
      discTxCarrierFreq_r13 = null;
      discTxResources_r13 = null;
      discTxResourcesPS_r13 = null;
      discTxRefCarrierDedicated_r13 = null;
      discCellSelectionInfo_r13 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return discTxCarrierFreq_r13;
         case 1: return discTxResources_r13;
         case 2: return discTxResourcesPS_r13;
         case 3: return discTxRefCarrierDedicated_r13;
         case 4: return discCellSelectionInfo_r13;
         case 5: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "discTxCarrierFreq-r13";
         case 1: return "discTxResources-r13";
         case 2: return "discTxResourcesPS-r13";
         case 3: return "discTxRefCarrierDedicated-r13";
         case 4: return "discCellSelectionInfo-r13";
         case 5: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean discTxResources_r13Present = buffer.decodeBit ("discTxResources_r13Present");
      boolean discTxResourcesPS_r13Present = buffer.decodeBit ("discTxResourcesPS_r13Present");
      boolean discTxRefCarrierDedicated_r13Present = buffer.decodeBit ("discTxRefCarrierDedicated_r13Present");
      boolean discCellSelectionInfo_r13Present = buffer.decodeBit ("discCellSelectionInfo_r13Present");

      // decode discTxCarrierFreq_r13

      buffer.getContext().eventDispatcher.startElement("discTxCarrierFreq_r13", -1);

      discTxCarrierFreq_r13 = new ARFCN_ValueEUTRA_r9();
      discTxCarrierFreq_r13.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("discTxCarrierFreq_r13", -1);

      // decode discTxResources_r13

      if (discTxResources_r13Present) {
         buffer.getContext().eventDispatcher.startElement("discTxResources_r13", -1);

         discTxResources_r13 = new SL_DiscTxResource_r13();
         discTxResources_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("discTxResources_r13", -1);
      }
      else {
         discTxResources_r13 = null;
      }

      // decode discTxResourcesPS_r13

      if (discTxResourcesPS_r13Present) {
         buffer.getContext().eventDispatcher.startElement("discTxResourcesPS_r13", -1);

         discTxResourcesPS_r13 = new SL_DiscTxResource_r13();
         discTxResourcesPS_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("discTxResourcesPS_r13", -1);
      }
      else {
         discTxResourcesPS_r13 = null;
      }

      // decode discTxRefCarrierDedicated_r13

      if (discTxRefCarrierDedicated_r13Present) {
         buffer.getContext().eventDispatcher.startElement("discTxRefCarrierDedicated_r13", -1);

         discTxRefCarrierDedicated_r13 = new SL_DiscTxRefCarrierDedicated_r13();
         discTxRefCarrierDedicated_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("discTxRefCarrierDedicated_r13", -1);
      }
      else {
         discTxRefCarrierDedicated_r13 = null;
      }

      // decode discCellSelectionInfo_r13

      if (discCellSelectionInfo_r13Present) {
         buffer.getContext().eventDispatcher.startElement("discCellSelectionInfo_r13", -1);

         discCellSelectionInfo_r13 = new CellSelectionInfoNFreq_r13();
         discCellSelectionInfo_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("discCellSelectionInfo_r13", -1);
      }
      else {
         discCellSelectionInfo_r13 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (discTxCarrierFreq_r13 != null) discTxCarrierFreq_r13.print (_sb, "discTxCarrierFreq_r13", _level+1);
      if (discTxResources_r13 != null) discTxResources_r13.print (_sb, "discTxResources_r13", _level+1);
      if (discTxResourcesPS_r13 != null) discTxResourcesPS_r13.print (_sb, "discTxResourcesPS_r13", _level+1);
      if (discTxRefCarrierDedicated_r13 != null) discTxRefCarrierDedicated_r13.print (_sb, "discTxRefCarrierDedicated_r13", _level+1);
      if (discCellSelectionInfo_r13 != null) discCellSelectionInfo_r13.print (_sb, "discCellSelectionInfo_r13", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
