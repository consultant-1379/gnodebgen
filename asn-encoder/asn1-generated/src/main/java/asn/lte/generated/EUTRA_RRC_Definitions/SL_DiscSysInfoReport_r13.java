/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SL_DiscSysInfoReport_r13 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SL-DiscSysInfoReport-r13";
   }

   public PLMN_IdentityList plmn_IdentityList_r13;  // optional
   public CellIdentity cellIdentity_13;  // optional
   public ARFCN_ValueEUTRA_r9 carrierFreqInfo_13;  // optional
   public SL_DiscRxPoolList_r12 discRxResources_r13;  // optional
   public SL_DiscTxPoolList_r12 discTxPoolCommon_r13;  // optional
   public SL_DiscTxPowerInfoList_r12 discTxPowerInfo_r13;  // optional
   public SL_SyncConfigNFreq_r13 discSyncConfig_r13;  // optional
   public SL_DiscSysInfoReport_r13_discCellSelectionInfo_r13 discCellSelectionInfo_r13;  // optional
   public SL_DiscSysInfoReport_r13_cellReselectionInfo_r13 cellReselectionInfo_r13;  // optional
   public TDD_Config tdd_Config_r13;  // optional
   public SL_DiscSysInfoReport_r13_freqInfo_r13 freqInfo_r13;  // optional
   public P_Max p_Max_r13;  // optional
   public Asn1Integer referenceSignalPower_r13;  // optional
   public boolean mV2ExtPresent;
   public SL_DiscSysInfoReport_r13_freqInfo_v1370 freqInfo_v1370;  // optional
   public Asn1OpenExt extElem1;

   public SL_DiscSysInfoReport_r13 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SL_DiscSysInfoReport_r13 (
      PLMN_IdentityList plmn_IdentityList_r13_,
      CellIdentity cellIdentity_13_,
      ARFCN_ValueEUTRA_r9 carrierFreqInfo_13_,
      SL_DiscRxPoolList_r12 discRxResources_r13_,
      SL_DiscTxPoolList_r12 discTxPoolCommon_r13_,
      SL_DiscTxPowerInfoList_r12 discTxPowerInfo_r13_,
      SL_SyncConfigNFreq_r13 discSyncConfig_r13_,
      SL_DiscSysInfoReport_r13_discCellSelectionInfo_r13 discCellSelectionInfo_r13_,
      SL_DiscSysInfoReport_r13_cellReselectionInfo_r13 cellReselectionInfo_r13_,
      TDD_Config tdd_Config_r13_,
      SL_DiscSysInfoReport_r13_freqInfo_r13 freqInfo_r13_,
      P_Max p_Max_r13_,
      Asn1Integer referenceSignalPower_r13_,
      SL_DiscSysInfoReport_r13_freqInfo_v1370 freqInfo_v1370_
   ) {
      super();
      plmn_IdentityList_r13 = plmn_IdentityList_r13_;
      cellIdentity_13 = cellIdentity_13_;
      carrierFreqInfo_13 = carrierFreqInfo_13_;
      discRxResources_r13 = discRxResources_r13_;
      discTxPoolCommon_r13 = discTxPoolCommon_r13_;
      discTxPowerInfo_r13 = discTxPowerInfo_r13_;
      discSyncConfig_r13 = discSyncConfig_r13_;
      discCellSelectionInfo_r13 = discCellSelectionInfo_r13_;
      cellReselectionInfo_r13 = cellReselectionInfo_r13_;
      tdd_Config_r13 = tdd_Config_r13_;
      freqInfo_r13 = freqInfo_r13_;
      p_Max_r13 = p_Max_r13_;
      referenceSignalPower_r13 = referenceSignalPower_r13_;
      freqInfo_v1370 = freqInfo_v1370_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SL_DiscSysInfoReport_r13 (PLMN_IdentityList plmn_IdentityList_r13_,
      CellIdentity cellIdentity_13_,
      long carrierFreqInfo_13_,
      SL_DiscRxPoolList_r12 discRxResources_r13_,
      SL_DiscTxPoolList_r12 discTxPoolCommon_r13_,
      SL_DiscTxPowerInfoList_r12 discTxPowerInfo_r13_,
      SL_SyncConfigNFreq_r13 discSyncConfig_r13_,
      SL_DiscSysInfoReport_r13_discCellSelectionInfo_r13 discCellSelectionInfo_r13_,
      SL_DiscSysInfoReport_r13_cellReselectionInfo_r13 cellReselectionInfo_r13_,
      TDD_Config tdd_Config_r13_,
      SL_DiscSysInfoReport_r13_freqInfo_r13 freqInfo_r13_,
      long p_Max_r13_,
      long referenceSignalPower_r13_,
      SL_DiscSysInfoReport_r13_freqInfo_v1370 freqInfo_v1370_
   ) {
      super();
      plmn_IdentityList_r13 = plmn_IdentityList_r13_;
      cellIdentity_13 = cellIdentity_13_;
      carrierFreqInfo_13 = new ARFCN_ValueEUTRA_r9 (carrierFreqInfo_13_);
      discRxResources_r13 = discRxResources_r13_;
      discTxPoolCommon_r13 = discTxPoolCommon_r13_;
      discTxPowerInfo_r13 = discTxPowerInfo_r13_;
      discSyncConfig_r13 = discSyncConfig_r13_;
      discCellSelectionInfo_r13 = discCellSelectionInfo_r13_;
      cellReselectionInfo_r13 = cellReselectionInfo_r13_;
      tdd_Config_r13 = tdd_Config_r13_;
      freqInfo_r13 = freqInfo_r13_;
      p_Max_r13 = new P_Max (p_Max_r13_);
      referenceSignalPower_r13 = new Asn1Integer (referenceSignalPower_r13_);
      freqInfo_v1370 = freqInfo_v1370_;
   }

   public void init () {
      plmn_IdentityList_r13 = null;
      cellIdentity_13 = null;
      carrierFreqInfo_13 = null;
      discRxResources_r13 = null;
      discTxPoolCommon_r13 = null;
      discTxPowerInfo_r13 = null;
      discSyncConfig_r13 = null;
      discCellSelectionInfo_r13 = null;
      cellReselectionInfo_r13 = null;
      tdd_Config_r13 = null;
      freqInfo_r13 = null;
      p_Max_r13 = null;
      referenceSignalPower_r13 = null;
      freqInfo_v1370 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 15; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return plmn_IdentityList_r13;
         case 1: return cellIdentity_13;
         case 2: return carrierFreqInfo_13;
         case 3: return discRxResources_r13;
         case 4: return discTxPoolCommon_r13;
         case 5: return discTxPowerInfo_r13;
         case 6: return discSyncConfig_r13;
         case 7: return discCellSelectionInfo_r13;
         case 8: return cellReselectionInfo_r13;
         case 9: return tdd_Config_r13;
         case 10: return freqInfo_r13;
         case 11: return p_Max_r13;
         case 12: return referenceSignalPower_r13;
         case 13: return freqInfo_v1370;
         case 14: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "plmn-IdentityList-r13";
         case 1: return "cellIdentity-13";
         case 2: return "carrierFreqInfo-13";
         case 3: return "discRxResources-r13";
         case 4: return "discTxPoolCommon-r13";
         case 5: return "discTxPowerInfo-r13";
         case 6: return "discSyncConfig-r13";
         case 7: return "discCellSelectionInfo-r13";
         case 8: return "cellReselectionInfo-r13";
         case 9: return "tdd-Config-r13";
         case 10: return "freqInfo-r13";
         case 11: return "p-Max-r13";
         case 12: return "referenceSignalPower-r13";
         case 13: return "freqInfo-v1370";
         case 14: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean plmn_IdentityList_r13Present = buffer.decodeBit ("plmn_IdentityList_r13Present");
      boolean cellIdentity_13Present = buffer.decodeBit ("cellIdentity_13Present");
      boolean carrierFreqInfo_13Present = buffer.decodeBit ("carrierFreqInfo_13Present");
      boolean discRxResources_r13Present = buffer.decodeBit ("discRxResources_r13Present");
      boolean discTxPoolCommon_r13Present = buffer.decodeBit ("discTxPoolCommon_r13Present");
      boolean discTxPowerInfo_r13Present = buffer.decodeBit ("discTxPowerInfo_r13Present");
      boolean discSyncConfig_r13Present = buffer.decodeBit ("discSyncConfig_r13Present");
      boolean discCellSelectionInfo_r13Present = buffer.decodeBit ("discCellSelectionInfo_r13Present");
      boolean cellReselectionInfo_r13Present = buffer.decodeBit ("cellReselectionInfo_r13Present");
      boolean tdd_Config_r13Present = buffer.decodeBit ("tdd_Config_r13Present");
      boolean freqInfo_r13Present = buffer.decodeBit ("freqInfo_r13Present");
      boolean p_Max_r13Present = buffer.decodeBit ("p_Max_r13Present");
      boolean referenceSignalPower_r13Present = buffer.decodeBit ("referenceSignalPower_r13Present");

      // decode plmn_IdentityList_r13

      if (plmn_IdentityList_r13Present) {
         buffer.getContext().eventDispatcher.startElement("plmn_IdentityList_r13", -1);

         plmn_IdentityList_r13 = new PLMN_IdentityList();
         plmn_IdentityList_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("plmn_IdentityList_r13", -1);
      }
      else {
         plmn_IdentityList_r13 = null;
      }

      // decode cellIdentity_13

      if (cellIdentity_13Present) {
         buffer.getContext().eventDispatcher.startElement("cellIdentity_13", -1);

         cellIdentity_13 = new CellIdentity();
         cellIdentity_13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("cellIdentity_13", -1);
      }
      else {
         cellIdentity_13 = null;
      }

      // decode carrierFreqInfo_13

      if (carrierFreqInfo_13Present) {
         buffer.getContext().eventDispatcher.startElement("carrierFreqInfo_13", -1);

         carrierFreqInfo_13 = new ARFCN_ValueEUTRA_r9();
         carrierFreqInfo_13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("carrierFreqInfo_13", -1);
      }
      else {
         carrierFreqInfo_13 = null;
      }

      // decode discRxResources_r13

      if (discRxResources_r13Present) {
         buffer.getContext().eventDispatcher.startElement("discRxResources_r13", -1);

         discRxResources_r13 = new SL_DiscRxPoolList_r12();
         discRxResources_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("discRxResources_r13", -1);
      }
      else {
         discRxResources_r13 = null;
      }

      // decode discTxPoolCommon_r13

      if (discTxPoolCommon_r13Present) {
         buffer.getContext().eventDispatcher.startElement("discTxPoolCommon_r13", -1);

         discTxPoolCommon_r13 = new SL_DiscTxPoolList_r12();
         discTxPoolCommon_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("discTxPoolCommon_r13", -1);
      }
      else {
         discTxPoolCommon_r13 = null;
      }

      // decode discTxPowerInfo_r13

      if (discTxPowerInfo_r13Present) {
         buffer.getContext().eventDispatcher.startElement("discTxPowerInfo_r13", -1);

         discTxPowerInfo_r13 = new SL_DiscTxPowerInfoList_r12();
         discTxPowerInfo_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("discTxPowerInfo_r13", -1);
      }
      else {
         discTxPowerInfo_r13 = null;
      }

      // decode discSyncConfig_r13

      if (discSyncConfig_r13Present) {
         buffer.getContext().eventDispatcher.startElement("discSyncConfig_r13", -1);

         discSyncConfig_r13 = new SL_SyncConfigNFreq_r13();
         discSyncConfig_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("discSyncConfig_r13", -1);
      }
      else {
         discSyncConfig_r13 = null;
      }

      // decode discCellSelectionInfo_r13

      if (discCellSelectionInfo_r13Present) {
         buffer.getContext().eventDispatcher.startElement("discCellSelectionInfo_r13", -1);

         discCellSelectionInfo_r13 = new SL_DiscSysInfoReport_r13_discCellSelectionInfo_r13();
         discCellSelectionInfo_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("discCellSelectionInfo_r13", -1);
      }
      else {
         discCellSelectionInfo_r13 = null;
      }

      // decode cellReselectionInfo_r13

      if (cellReselectionInfo_r13Present) {
         buffer.getContext().eventDispatcher.startElement("cellReselectionInfo_r13", -1);

         cellReselectionInfo_r13 = new SL_DiscSysInfoReport_r13_cellReselectionInfo_r13();
         cellReselectionInfo_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("cellReselectionInfo_r13", -1);
      }
      else {
         cellReselectionInfo_r13 = null;
      }

      // decode tdd_Config_r13

      if (tdd_Config_r13Present) {
         buffer.getContext().eventDispatcher.startElement("tdd_Config_r13", -1);

         tdd_Config_r13 = new TDD_Config();
         tdd_Config_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("tdd_Config_r13", -1);
      }
      else {
         tdd_Config_r13 = null;
      }

      // decode freqInfo_r13

      if (freqInfo_r13Present) {
         buffer.getContext().eventDispatcher.startElement("freqInfo_r13", -1);

         freqInfo_r13 = new SL_DiscSysInfoReport_r13_freqInfo_r13();
         freqInfo_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("freqInfo_r13", -1);
      }
      else {
         freqInfo_r13 = null;
      }

      // decode p_Max_r13

      if (p_Max_r13Present) {
         buffer.getContext().eventDispatcher.startElement("p_Max_r13", -1);

         p_Max_r13 = new P_Max();
         p_Max_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("p_Max_r13", -1);
      }
      else {
         p_Max_r13 = null;
      }

      // decode referenceSignalPower_r13

      if (referenceSignalPower_r13Present) {
         buffer.getContext().eventDispatcher.startElement("referenceSignalPower_r13", -1);

         referenceSignalPower_r13 = new Asn1Integer();
         referenceSignalPower_r13.decode (buffer, -60, 50);

         buffer.invokeCharacters(referenceSignalPower_r13.toString());
         buffer.getContext().eventDispatcher.endElement("referenceSignalPower_r13", -1);
      }
      else {
         referenceSignalPower_r13 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean freqInfo_v1370Present = buffer.decodeBit ("freqInfo_v1370Present");

            // decode freqInfo_v1370

            if (freqInfo_v1370Present) {
               buffer.getContext().eventDispatcher.startElement("freqInfo_v1370", -1);

               freqInfo_v1370 = new SL_DiscSysInfoReport_r13_freqInfo_v1370();
               freqInfo_v1370.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("freqInfo_v1370", -1);
            }
            else {
               freqInfo_v1370 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (plmn_IdentityList_r13 != null) plmn_IdentityList_r13.print (_sb, "plmn_IdentityList_r13", _level+1);
      if (cellIdentity_13 != null) cellIdentity_13.print (_sb, "cellIdentity_13", _level+1);
      if (carrierFreqInfo_13 != null) carrierFreqInfo_13.print (_sb, "carrierFreqInfo_13", _level+1);
      if (discRxResources_r13 != null) discRxResources_r13.print (_sb, "discRxResources_r13", _level+1);
      if (discTxPoolCommon_r13 != null) discTxPoolCommon_r13.print (_sb, "discTxPoolCommon_r13", _level+1);
      if (discTxPowerInfo_r13 != null) discTxPowerInfo_r13.print (_sb, "discTxPowerInfo_r13", _level+1);
      if (discSyncConfig_r13 != null) discSyncConfig_r13.print (_sb, "discSyncConfig_r13", _level+1);
      if (discCellSelectionInfo_r13 != null) discCellSelectionInfo_r13.print (_sb, "discCellSelectionInfo_r13", _level+1);
      if (cellReselectionInfo_r13 != null) cellReselectionInfo_r13.print (_sb, "cellReselectionInfo_r13", _level+1);
      if (tdd_Config_r13 != null) tdd_Config_r13.print (_sb, "tdd_Config_r13", _level+1);
      if (freqInfo_r13 != null) freqInfo_r13.print (_sb, "freqInfo_r13", _level+1);
      if (p_Max_r13 != null) p_Max_r13.print (_sb, "p_Max_r13", _level+1);
      if (referenceSignalPower_r13 != null) referenceSignalPower_r13.print (_sb, "referenceSignalPower_r13", _level+1);
      if (freqInfo_v1370 != null) freqInfo_v1370.print (_sb, "freqInfo_v1370", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
