/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class PollPDU extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "PollPDU";
   }

   // Integer constants for switch-case
   public static final int _P4 = 0;
   public static final int _P8 = 1;
   public static final int _P16 = 2;
   public static final int _P32 = 3;
   public static final int _P64 = 4;
   public static final int _P128 = 5;
   public static final int _P256 = 6;
   public static final int _PINFINITY = 7;

   // Singleton instances of PollPDU
   protected static final PollPDU _p4 = new PollPDU(0);
   protected static final PollPDU _p8 = new PollPDU(1);
   protected static final PollPDU _p16 = new PollPDU(2);
   protected static final PollPDU _p32 = new PollPDU(3);
   protected static final PollPDU _p64 = new PollPDU(4);
   protected static final PollPDU _p128 = new PollPDU(5);
   protected static final PollPDU _p256 = new PollPDU(6);
   protected static final PollPDU _pInfinity = new PollPDU(7);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    *   7
    */
   protected PollPDU (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for p4.
    */
   public static PollPDU p4() {
      return _p4;
   }

   /**
    * Singleton accessor method for p8.
    */
   public static PollPDU p8() {
      return _p8;
   }

   /**
    * Singleton accessor method for p16.
    */
   public static PollPDU p16() {
      return _p16;
   }

   /**
    * Singleton accessor method for p32.
    */
   public static PollPDU p32() {
      return _p32;
   }

   /**
    * Singleton accessor method for p64.
    */
   public static PollPDU p64() {
      return _p64;
   }

   /**
    * Singleton accessor method for p128.
    */
   public static PollPDU p128() {
      return _p128;
   }

   /**
    * Singleton accessor method for p256.
    */
   public static PollPDU p256() {
      return _p256;
   }

   /**
    * Singleton accessor method for pInfinity.
    */
   public static PollPDU pInfinity() {
      return _pInfinity;
   }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return PollPDU.valueOf( PollPDU.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static PollPDU valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 0: return p4();
         case 1: return p8();
         case 2: return p16();
         case 3: return p32();
         case 4: return p64();
         case 5: return p128();
         case 6: return p256();
         case 7: return pInfinity();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      ui = (int) buffer.decodeConsWholeNumber (8);

      switch (ui) {
         case 0: ret =  0; break;
         case 1: ret =  1; break;
         case 2: ret =  2; break;
         case 3: ret =  3; break;
         case 4: ret =  4; break;
         case 5: ret =  5; break;
         case 6: ret =  6; break;
         case 7: ret =  7; break;
         default: throw new Asn1InvalidEnumException (ui);
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (PollPDU.valueOf(ret).toString());

      return ret;
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("p4");
         case 1: return ("p8");
         case 2: return ("p16");
         case 3: return ("p32");
         case 4: return ("p64");
         case 5: return ("p128");
         case 6: return ("p256");
         case 7: return ("pInfinity");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
