/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SidelinkUEInformation_v1310_IEs extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SidelinkUEInformation-v1310-IEs";
   }

   public SL_CommTxResourceReq_r12 commTxResourceReqUC_r13;  // optional
   public SidelinkUEInformation_v1310_IEs_commTxResourceInfoReqRelay_r13 commTxResourceInfoReqRelay_r13;  // optional
   public SidelinkUEInformation_v1310_IEs_discTxResourceReq_v1310 discTxResourceReq_v1310;  // optional
   public SL_DiscTxResourceReq_r13 discTxResourceReqPS_r13;  // optional
   public SL_GapRequest_r13 discRxGapReq_r13;  // optional
   public SL_GapRequest_r13 discTxGapReq_r13;  // optional
   public SL_DiscSysInfoReportFreqList_r13 discSysInfoReportFreqList_r13;  // optional
   public SidelinkUEInformation_v1430_IEs nonCriticalExtension;  // optional

   public SidelinkUEInformation_v1310_IEs () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SidelinkUEInformation_v1310_IEs (
      SL_CommTxResourceReq_r12 commTxResourceReqUC_r13_,
      SidelinkUEInformation_v1310_IEs_commTxResourceInfoReqRelay_r13 commTxResourceInfoReqRelay_r13_,
      SidelinkUEInformation_v1310_IEs_discTxResourceReq_v1310 discTxResourceReq_v1310_,
      SL_DiscTxResourceReq_r13 discTxResourceReqPS_r13_,
      SL_GapRequest_r13 discRxGapReq_r13_,
      SL_GapRequest_r13 discTxGapReq_r13_,
      SL_DiscSysInfoReportFreqList_r13 discSysInfoReportFreqList_r13_,
      SidelinkUEInformation_v1430_IEs nonCriticalExtension_
   ) {
      super();
      commTxResourceReqUC_r13 = commTxResourceReqUC_r13_;
      commTxResourceInfoReqRelay_r13 = commTxResourceInfoReqRelay_r13_;
      discTxResourceReq_v1310 = discTxResourceReq_v1310_;
      discTxResourceReqPS_r13 = discTxResourceReqPS_r13_;
      discRxGapReq_r13 = discRxGapReq_r13_;
      discTxGapReq_r13 = discTxGapReq_r13_;
      discSysInfoReportFreqList_r13 = discSysInfoReportFreqList_r13_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   public void init () {
      commTxResourceReqUC_r13 = null;
      commTxResourceInfoReqRelay_r13 = null;
      discTxResourceReq_v1310 = null;
      discTxResourceReqPS_r13 = null;
      discRxGapReq_r13 = null;
      discTxGapReq_r13 = null;
      discSysInfoReportFreqList_r13 = null;
      nonCriticalExtension = null;
   }

   public int getElementCount() { return 8; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return commTxResourceReqUC_r13;
         case 1: return commTxResourceInfoReqRelay_r13;
         case 2: return discTxResourceReq_v1310;
         case 3: return discTxResourceReqPS_r13;
         case 4: return discRxGapReq_r13;
         case 5: return discTxGapReq_r13;
         case 6: return discSysInfoReportFreqList_r13;
         case 7: return nonCriticalExtension;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "commTxResourceReqUC-r13";
         case 1: return "commTxResourceInfoReqRelay-r13";
         case 2: return "discTxResourceReq-v1310";
         case 3: return "discTxResourceReqPS-r13";
         case 4: return "discRxGapReq-r13";
         case 5: return "discTxGapReq-r13";
         case 6: return "discSysInfoReportFreqList-r13";
         case 7: return "nonCriticalExtension";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean commTxResourceReqUC_r13Present = buffer.decodeBit ("commTxResourceReqUC_r13Present");
      boolean commTxResourceInfoReqRelay_r13Present = buffer.decodeBit ("commTxResourceInfoReqRelay_r13Present");
      boolean discTxResourceReq_v1310Present = buffer.decodeBit ("discTxResourceReq_v1310Present");
      boolean discTxResourceReqPS_r13Present = buffer.decodeBit ("discTxResourceReqPS_r13Present");
      boolean discRxGapReq_r13Present = buffer.decodeBit ("discRxGapReq_r13Present");
      boolean discTxGapReq_r13Present = buffer.decodeBit ("discTxGapReq_r13Present");
      boolean discSysInfoReportFreqList_r13Present = buffer.decodeBit ("discSysInfoReportFreqList_r13Present");
      boolean nonCriticalExtensionPresent = buffer.decodeBit ("nonCriticalExtensionPresent");

      // decode commTxResourceReqUC_r13

      if (commTxResourceReqUC_r13Present) {
         buffer.getContext().eventDispatcher.startElement("commTxResourceReqUC_r13", -1);

         commTxResourceReqUC_r13 = new SL_CommTxResourceReq_r12();
         commTxResourceReqUC_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("commTxResourceReqUC_r13", -1);
      }
      else {
         commTxResourceReqUC_r13 = null;
      }

      // decode commTxResourceInfoReqRelay_r13

      if (commTxResourceInfoReqRelay_r13Present) {
         buffer.getContext().eventDispatcher.startElement("commTxResourceInfoReqRelay_r13", -1);

         commTxResourceInfoReqRelay_r13 = new SidelinkUEInformation_v1310_IEs_commTxResourceInfoReqRelay_r13();
         commTxResourceInfoReqRelay_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("commTxResourceInfoReqRelay_r13", -1);
      }
      else {
         commTxResourceInfoReqRelay_r13 = null;
      }

      // decode discTxResourceReq_v1310

      if (discTxResourceReq_v1310Present) {
         buffer.getContext().eventDispatcher.startElement("discTxResourceReq_v1310", -1);

         discTxResourceReq_v1310 = new SidelinkUEInformation_v1310_IEs_discTxResourceReq_v1310();
         discTxResourceReq_v1310.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("discTxResourceReq_v1310", -1);
      }
      else {
         discTxResourceReq_v1310 = null;
      }

      // decode discTxResourceReqPS_r13

      if (discTxResourceReqPS_r13Present) {
         buffer.getContext().eventDispatcher.startElement("discTxResourceReqPS_r13", -1);

         discTxResourceReqPS_r13 = new SL_DiscTxResourceReq_r13();
         discTxResourceReqPS_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("discTxResourceReqPS_r13", -1);
      }
      else {
         discTxResourceReqPS_r13 = null;
      }

      // decode discRxGapReq_r13

      if (discRxGapReq_r13Present) {
         buffer.getContext().eventDispatcher.startElement("discRxGapReq_r13", -1);

         discRxGapReq_r13 = new SL_GapRequest_r13();
         discRxGapReq_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("discRxGapReq_r13", -1);
      }
      else {
         discRxGapReq_r13 = null;
      }

      // decode discTxGapReq_r13

      if (discTxGapReq_r13Present) {
         buffer.getContext().eventDispatcher.startElement("discTxGapReq_r13", -1);

         discTxGapReq_r13 = new SL_GapRequest_r13();
         discTxGapReq_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("discTxGapReq_r13", -1);
      }
      else {
         discTxGapReq_r13 = null;
      }

      // decode discSysInfoReportFreqList_r13

      if (discSysInfoReportFreqList_r13Present) {
         buffer.getContext().eventDispatcher.startElement("discSysInfoReportFreqList_r13", -1);

         discSysInfoReportFreqList_r13 = new SL_DiscSysInfoReportFreqList_r13();
         discSysInfoReportFreqList_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("discSysInfoReportFreqList_r13", -1);
      }
      else {
         discSysInfoReportFreqList_r13 = null;
      }

      // decode nonCriticalExtension

      if (nonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension = new SidelinkUEInformation_v1430_IEs();
         nonCriticalExtension.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }
      else {
         nonCriticalExtension = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (commTxResourceReqUC_r13 != null) commTxResourceReqUC_r13.print (_sb, "commTxResourceReqUC_r13", _level+1);
      if (commTxResourceInfoReqRelay_r13 != null) commTxResourceInfoReqRelay_r13.print (_sb, "commTxResourceInfoReqRelay_r13", _level+1);
      if (discTxResourceReq_v1310 != null) discTxResourceReq_v1310.print (_sb, "discTxResourceReq_v1310", _level+1);
      if (discTxResourceReqPS_r13 != null) discTxResourceReqPS_r13.print (_sb, "discTxResourceReqPS_r13", _level+1);
      if (discRxGapReq_r13 != null) discRxGapReq_r13.print (_sb, "discRxGapReq_r13", _level+1);
      if (discTxGapReq_r13 != null) discTxGapReq_r13.print (_sb, "discTxGapReq_r13", _level+1);
      if (discSysInfoReportFreqList_r13 != null) discSysInfoReportFreqList_r13.print (_sb, "discSysInfoReportFreqList_r13", _level+1);
      if (nonCriticalExtension != null) nonCriticalExtension.print (_sb, "nonCriticalExtension", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
