/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class CA_ParametersNR_v1540 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CA-ParametersNR-v1540";
   }

   public Asn1Integer simultaneousSRS_AssocCSI_RS_AllCC;  // optional
   public CA_ParametersNR_v1540_csi_RS_IM_ReceptionForFeedbackPerBandComb csi_RS_IM_ReceptionForFeedbackPerBandComb;  // optional
   public Asn1Integer simultaneousCSI_ReportsAllCC;  // optional
   public CA_ParametersNR_v1540_dualPA_Architecture dualPA_Architecture = null;  // optional

   public CA_ParametersNR_v1540 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CA_ParametersNR_v1540 (
      Asn1Integer simultaneousSRS_AssocCSI_RS_AllCC_,
      CA_ParametersNR_v1540_csi_RS_IM_ReceptionForFeedbackPerBandComb csi_RS_IM_ReceptionForFeedbackPerBandComb_,
      Asn1Integer simultaneousCSI_ReportsAllCC_,
      CA_ParametersNR_v1540_dualPA_Architecture dualPA_Architecture_
   ) {
      super();
      simultaneousSRS_AssocCSI_RS_AllCC = simultaneousSRS_AssocCSI_RS_AllCC_;
      csi_RS_IM_ReceptionForFeedbackPerBandComb = csi_RS_IM_ReceptionForFeedbackPerBandComb_;
      simultaneousCSI_ReportsAllCC = simultaneousCSI_ReportsAllCC_;
      dualPA_Architecture = dualPA_Architecture_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public CA_ParametersNR_v1540 (long simultaneousSRS_AssocCSI_RS_AllCC_,
      CA_ParametersNR_v1540_csi_RS_IM_ReceptionForFeedbackPerBandComb csi_RS_IM_ReceptionForFeedbackPerBandComb_,
      long simultaneousCSI_ReportsAllCC_,
      CA_ParametersNR_v1540_dualPA_Architecture dualPA_Architecture_
   ) {
      super();
      simultaneousSRS_AssocCSI_RS_AllCC = new Asn1Integer (simultaneousSRS_AssocCSI_RS_AllCC_);
      csi_RS_IM_ReceptionForFeedbackPerBandComb = csi_RS_IM_ReceptionForFeedbackPerBandComb_;
      simultaneousCSI_ReportsAllCC = new Asn1Integer (simultaneousCSI_ReportsAllCC_);
      dualPA_Architecture = dualPA_Architecture_;
   }

   public void init () {
      simultaneousSRS_AssocCSI_RS_AllCC = null;
      csi_RS_IM_ReceptionForFeedbackPerBandComb = null;
      simultaneousCSI_ReportsAllCC = null;
      dualPA_Architecture = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return simultaneousSRS_AssocCSI_RS_AllCC;
         case 1: return csi_RS_IM_ReceptionForFeedbackPerBandComb;
         case 2: return simultaneousCSI_ReportsAllCC;
         case 3: return dualPA_Architecture;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "simultaneousSRS-AssocCSI-RS-AllCC";
         case 1: return "csi-RS-IM-ReceptionForFeedbackPerBandComb";
         case 2: return "simultaneousCSI-ReportsAllCC";
         case 3: return "dualPA-Architecture";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean simultaneousSRS_AssocCSI_RS_AllCCPresent = buffer.decodeBit ("simultaneousSRS_AssocCSI_RS_AllCCPresent");
      boolean csi_RS_IM_ReceptionForFeedbackPerBandCombPresent = buffer.decodeBit ("csi_RS_IM_ReceptionForFeedbackPerBandCombPresent");
      boolean simultaneousCSI_ReportsAllCCPresent = buffer.decodeBit ("simultaneousCSI_ReportsAllCCPresent");
      boolean dualPA_ArchitecturePresent = buffer.decodeBit ("dualPA_ArchitecturePresent");

      // decode simultaneousSRS_AssocCSI_RS_AllCC

      if (simultaneousSRS_AssocCSI_RS_AllCCPresent) {
         buffer.getContext().eventDispatcher.startElement("simultaneousSRS_AssocCSI_RS_AllCC", -1);

         simultaneousSRS_AssocCSI_RS_AllCC = new Asn1Integer();
         simultaneousSRS_AssocCSI_RS_AllCC.decode (buffer, 5, 32);

         buffer.invokeCharacters(simultaneousSRS_AssocCSI_RS_AllCC.toString());
         buffer.getContext().eventDispatcher.endElement("simultaneousSRS_AssocCSI_RS_AllCC", -1);
      }
      else {
         simultaneousSRS_AssocCSI_RS_AllCC = null;
      }

      // decode csi_RS_IM_ReceptionForFeedbackPerBandComb

      if (csi_RS_IM_ReceptionForFeedbackPerBandCombPresent) {
         buffer.getContext().eventDispatcher.startElement("csi_RS_IM_ReceptionForFeedbackPerBandComb", -1);

         csi_RS_IM_ReceptionForFeedbackPerBandComb = new CA_ParametersNR_v1540_csi_RS_IM_ReceptionForFeedbackPerBandComb();
         csi_RS_IM_ReceptionForFeedbackPerBandComb.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("csi_RS_IM_ReceptionForFeedbackPerBandComb", -1);
      }
      else {
         csi_RS_IM_ReceptionForFeedbackPerBandComb = null;
      }

      // decode simultaneousCSI_ReportsAllCC

      if (simultaneousCSI_ReportsAllCCPresent) {
         buffer.getContext().eventDispatcher.startElement("simultaneousCSI_ReportsAllCC", -1);

         simultaneousCSI_ReportsAllCC = new Asn1Integer();
         simultaneousCSI_ReportsAllCC.decode (buffer, 5, 32);

         buffer.invokeCharacters(simultaneousCSI_ReportsAllCC.toString());
         buffer.getContext().eventDispatcher.endElement("simultaneousCSI_ReportsAllCC", -1);
      }
      else {
         simultaneousCSI_ReportsAllCC = null;
      }

      // decode dualPA_Architecture

      if (dualPA_ArchitecturePresent) {
         buffer.getContext().eventDispatcher.startElement("dualPA_Architecture", -1);

         int tval = CA_ParametersNR_v1540_dualPA_Architecture.decodeEnumValue (buffer);
         dualPA_Architecture = CA_ParametersNR_v1540_dualPA_Architecture.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("dualPA_Architecture", -1);
      }
      else {
         dualPA_Architecture = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (simultaneousSRS_AssocCSI_RS_AllCC != null) simultaneousSRS_AssocCSI_RS_AllCC.print (_sb, "simultaneousSRS_AssocCSI_RS_AllCC", _level+1);
      if (csi_RS_IM_ReceptionForFeedbackPerBandComb != null) csi_RS_IM_ReceptionForFeedbackPerBandComb.print (_sb, "csi_RS_IM_ReceptionForFeedbackPerBandComb", _level+1);
      if (simultaneousCSI_ReportsAllCC != null) simultaneousCSI_ReportsAllCC.print (_sb, "simultaneousCSI_ReportsAllCC", _level+1);
      if (dualPA_Architecture != null) dualPA_Architecture.print (_sb, "dualPA_Architecture", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
