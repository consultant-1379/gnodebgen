/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SL_V2X_ConfigDedicated_r14_commTxResources_r14_setup_scheduled_r14 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public C_RNTI sl_V_RNTI_r14;
   public MAC_MainConfigSL_r12 mac_MainConfig_r14;
   public SL_CommResourcePoolV2X_r14 v2x_SchedulingPool_r14;  // optional
   public Asn1Integer mcs_r14;  // optional
   public LogicalChGroupInfoList_r13 logicalChGroupInfoList_r14;

   public SL_V2X_ConfigDedicated_r14_commTxResources_r14_setup_scheduled_r14 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SL_V2X_ConfigDedicated_r14_commTxResources_r14_setup_scheduled_r14 (
      C_RNTI sl_V_RNTI_r14_,
      MAC_MainConfigSL_r12 mac_MainConfig_r14_,
      SL_CommResourcePoolV2X_r14 v2x_SchedulingPool_r14_,
      Asn1Integer mcs_r14_,
      LogicalChGroupInfoList_r13 logicalChGroupInfoList_r14_
   ) {
      super();
      sl_V_RNTI_r14 = sl_V_RNTI_r14_;
      mac_MainConfig_r14 = mac_MainConfig_r14_;
      v2x_SchedulingPool_r14 = v2x_SchedulingPool_r14_;
      mcs_r14 = mcs_r14_;
      logicalChGroupInfoList_r14 = logicalChGroupInfoList_r14_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SL_V2X_ConfigDedicated_r14_commTxResources_r14_setup_scheduled_r14 (
      C_RNTI sl_V_RNTI_r14_,
      MAC_MainConfigSL_r12 mac_MainConfig_r14_,
      LogicalChGroupInfoList_r13 logicalChGroupInfoList_r14_
   ) {
      super();
      sl_V_RNTI_r14 = sl_V_RNTI_r14_;
      mac_MainConfig_r14 = mac_MainConfig_r14_;
      logicalChGroupInfoList_r14 = logicalChGroupInfoList_r14_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SL_V2X_ConfigDedicated_r14_commTxResources_r14_setup_scheduled_r14 (C_RNTI sl_V_RNTI_r14_,
      MAC_MainConfigSL_r12 mac_MainConfig_r14_,
      SL_CommResourcePoolV2X_r14 v2x_SchedulingPool_r14_,
      long mcs_r14_,
      LogicalChGroupInfoList_r13 logicalChGroupInfoList_r14_
   ) {
      super();
      sl_V_RNTI_r14 = sl_V_RNTI_r14_;
      mac_MainConfig_r14 = mac_MainConfig_r14_;
      v2x_SchedulingPool_r14 = v2x_SchedulingPool_r14_;
      mcs_r14 = new Asn1Integer (mcs_r14_);
      logicalChGroupInfoList_r14 = logicalChGroupInfoList_r14_;
   }

   public void init () {
      sl_V_RNTI_r14 = null;
      mac_MainConfig_r14 = null;
      v2x_SchedulingPool_r14 = null;
      mcs_r14 = null;
      logicalChGroupInfoList_r14 = null;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return sl_V_RNTI_r14;
         case 1: return mac_MainConfig_r14;
         case 2: return v2x_SchedulingPool_r14;
         case 3: return mcs_r14;
         case 4: return logicalChGroupInfoList_r14;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "sl-V-RNTI-r14";
         case 1: return "mac-MainConfig-r14";
         case 2: return "v2x-SchedulingPool-r14";
         case 3: return "mcs-r14";
         case 4: return "logicalChGroupInfoList-r14";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean v2x_SchedulingPool_r14Present = buffer.decodeBit ("v2x_SchedulingPool_r14Present");
      boolean mcs_r14Present = buffer.decodeBit ("mcs_r14Present");

      // decode sl_V_RNTI_r14

      buffer.getContext().eventDispatcher.startElement("sl_V_RNTI_r14", -1);

      sl_V_RNTI_r14 = new C_RNTI();
      sl_V_RNTI_r14.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("sl_V_RNTI_r14", -1);

      // decode mac_MainConfig_r14

      buffer.getContext().eventDispatcher.startElement("mac_MainConfig_r14", -1);

      mac_MainConfig_r14 = new MAC_MainConfigSL_r12();
      mac_MainConfig_r14.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("mac_MainConfig_r14", -1);

      // decode v2x_SchedulingPool_r14

      if (v2x_SchedulingPool_r14Present) {
         buffer.getContext().eventDispatcher.startElement("v2x_SchedulingPool_r14", -1);

         v2x_SchedulingPool_r14 = new SL_CommResourcePoolV2X_r14();
         v2x_SchedulingPool_r14.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("v2x_SchedulingPool_r14", -1);
      }
      else {
         v2x_SchedulingPool_r14 = null;
      }

      // decode mcs_r14

      if (mcs_r14Present) {
         buffer.getContext().eventDispatcher.startElement("mcs_r14", -1);

         mcs_r14 = new Asn1Integer();
         mcs_r14.decode (buffer, 0, 31);

         buffer.invokeCharacters(mcs_r14.toString());
         buffer.getContext().eventDispatcher.endElement("mcs_r14", -1);
      }
      else {
         mcs_r14 = null;
      }

      // decode logicalChGroupInfoList_r14

      buffer.getContext().eventDispatcher.startElement("logicalChGroupInfoList_r14", -1);

      logicalChGroupInfoList_r14 = new LogicalChGroupInfoList_r13();
      logicalChGroupInfoList_r14.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("logicalChGroupInfoList_r14", -1);

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (sl_V_RNTI_r14 != null) sl_V_RNTI_r14.print (_sb, "sl_V_RNTI_r14", _level+1);
      if (mac_MainConfig_r14 != null) mac_MainConfig_r14.print (_sb, "mac_MainConfig_r14", _level+1);
      if (v2x_SchedulingPool_r14 != null) v2x_SchedulingPool_r14.print (_sb, "v2x_SchedulingPool_r14", _level+1);
      if (mcs_r14 != null) mcs_r14.print (_sb, "mcs_r14", _level+1);
      if (logicalChGroupInfoList_r14 != null) logicalChGroupInfoList_r14.print (_sb, "logicalChGroupInfoList_r14", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
