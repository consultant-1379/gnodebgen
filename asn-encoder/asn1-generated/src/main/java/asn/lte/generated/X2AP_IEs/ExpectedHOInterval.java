/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.X2AP_IEs;

import com.objsys.asn1j.runtime.*;

public class ExpectedHOInterval extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_X2AP_IEsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ExpectedHOInterval";
   }

   // Integer constants for switch-case
   public static final int _SEC15 = 0;
   public static final int _SEC30 = 1;
   public static final int _SEC60 = 2;
   public static final int _SEC90 = 3;
   public static final int _SEC120 = 4;
   public static final int _SEC180 = 5;
   public static final int _LONG_TIME = 6;

   // Singleton instances of ExpectedHOInterval
   protected static final ExpectedHOInterval _sec15 = new ExpectedHOInterval(0);
   protected static final ExpectedHOInterval _sec30 = new ExpectedHOInterval(1);
   protected static final ExpectedHOInterval _sec60 = new ExpectedHOInterval(2);
   protected static final ExpectedHOInterval _sec90 = new ExpectedHOInterval(3);
   protected static final ExpectedHOInterval _sec120 = new ExpectedHOInterval(4);
   protected static final ExpectedHOInterval _sec180 = new ExpectedHOInterval(5);
   protected static final ExpectedHOInterval _long_time = new ExpectedHOInterval(6);
   private static ExpectedHOInterval __undefined = new ExpectedHOInterval(-999);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    */
   protected ExpectedHOInterval (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for sec15.
    */
   public static ExpectedHOInterval sec15() {
      return _sec15;
   }

   /**
    * Singleton accessor method for sec30.
    */
   public static ExpectedHOInterval sec30() {
      return _sec30;
   }

   /**
    * Singleton accessor method for sec60.
    */
   public static ExpectedHOInterval sec60() {
      return _sec60;
   }

   /**
    * Singleton accessor method for sec90.
    */
   public static ExpectedHOInterval sec90() {
      return _sec90;
   }

   /**
    * Singleton accessor method for sec120.
    */
   public static ExpectedHOInterval sec120() {
      return _sec120;
   }

   /**
    * Singleton accessor method for sec180.
    */
   public static ExpectedHOInterval sec180() {
      return _sec180;
   }

   /**
    * Singleton accessor method for long_time.
    */
   public static ExpectedHOInterval long_time() {
      return _long_time;
   }

   /** Undefined value. */
   protected static ExpectedHOInterval __undefined_() { return __undefined; }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return ExpectedHOInterval.valueOf( ExpectedHOInterval.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static ExpectedHOInterval valueOf (int _value)
   {
      switch ((int)_value) {
         case 0: return sec15();
         case 1: return sec30();
         case 2: return sec60();
         case 3: return sec90();
         case 4: return sec120();
         case 5: return sec180();
         case 6: return long_time();
         default: return __undefined_();
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      boolean extbit = buffer.decodeBit ("extbit");

      if (extbit) {
         ui = buffer.decodeSmallNonNegWholeNumber ();

         return 0x7fffffff;
      }
      else {
         ui = (int) buffer.decodeConsWholeNumber (7);

         switch (ui) {
            case 0: ret =  0; break;
            case 1: ret =  1; break;
            case 2: ret =  2; break;
            case 3: ret =  3; break;
            case 4: ret =  4; break;
            case 5: ret =  5; break;
            case 6: ret =  6; break;
            default: throw new Asn1InvalidEnumException (ui);
         }
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (ExpectedHOInterval.valueOf(ret).toString());

      return ret;
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("sec15");
         case 1: return ("sec30");
         case 2: return ("sec60");
         case 3: return ("sec90");
         case 4: return ("sec120");
         case 5: return ("sec180");
         case 6: return ("long-time");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
