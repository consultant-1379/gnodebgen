/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.S1AP_IEs;

import com.objsys.asn1j.runtime.*;

public class TraceDepth extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_S1AP_IEsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "TraceDepth";
   }

   // Integer constants for switch-case
   public static final int _MINIMUM = 0;
   public static final int _MEDIUM = 1;
   public static final int _MAXIMUM = 2;
   public static final int _MINIMUMWITHOUTVENDORSPECIFICEXTENSION = 3;
   public static final int _MEDIUMWITHOUTVENDORSPECIFICEXTENSION = 4;
   public static final int _MAXIMUMWITHOUTVENDORSPECIFICEXTENSION = 5;

   // Singleton instances of TraceDepth
   protected static final TraceDepth _minimum = new TraceDepth(0);
   protected static final TraceDepth _medium = new TraceDepth(1);
   protected static final TraceDepth _maximum = new TraceDepth(2);
   protected static final TraceDepth _minimumWithoutVendorSpecificExtension = new TraceDepth(3);
   protected static final TraceDepth _mediumWithoutVendorSpecificExtension = new TraceDepth(4);
   protected static final TraceDepth _maximumWithoutVendorSpecificExtension = new TraceDepth(5);
   private static TraceDepth __undefined = new TraceDepth(-999);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    */
   protected TraceDepth (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for minimum.
    */
   public static TraceDepth minimum() {
      return _minimum;
   }

   /**
    * Singleton accessor method for medium.
    */
   public static TraceDepth medium() {
      return _medium;
   }

   /**
    * Singleton accessor method for maximum.
    */
   public static TraceDepth maximum() {
      return _maximum;
   }

   /**
    * Singleton accessor method for minimumWithoutVendorSpecificExtension.
    */
   public static TraceDepth minimumWithoutVendorSpecificExtension() {
      return _minimumWithoutVendorSpecificExtension;
   }

   /**
    * Singleton accessor method for mediumWithoutVendorSpecificExtension.
    */
   public static TraceDepth mediumWithoutVendorSpecificExtension() {
      return _mediumWithoutVendorSpecificExtension;
   }

   /**
    * Singleton accessor method for maximumWithoutVendorSpecificExtension.
    */
   public static TraceDepth maximumWithoutVendorSpecificExtension() {
      return _maximumWithoutVendorSpecificExtension;
   }

   /** Undefined value. */
   protected static TraceDepth __undefined_() { return __undefined; }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return TraceDepth.valueOf( TraceDepth.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static TraceDepth valueOf (int _value)
   {
      switch ((int)_value) {
         case 0: return minimum();
         case 1: return medium();
         case 2: return maximum();
         case 3: return minimumWithoutVendorSpecificExtension();
         case 4: return mediumWithoutVendorSpecificExtension();
         case 5: return maximumWithoutVendorSpecificExtension();
         default: return __undefined_();
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      boolean extbit = buffer.decodeBit ("extbit");

      if (extbit) {
         ui = buffer.decodeSmallNonNegWholeNumber ();

         return 0x7fffffff;
      }
      else {
         ui = (int) buffer.decodeConsWholeNumber (6);

         switch (ui) {
            case 0: ret =  0; break;
            case 1: ret =  1; break;
            case 2: ret =  2; break;
            case 3: ret =  3; break;
            case 4: ret =  4; break;
            case 5: ret =  5; break;
            default: throw new Asn1InvalidEnumException (ui);
         }
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (TraceDepth.valueOf(ret).toString());

      return ret;
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("minimum");
         case 1: return ("medium");
         case 2: return ("maximum");
         case 3: return ("minimumWithoutVendorSpecificExtension");
         case 4: return ("mediumWithoutVendorSpecificExtension");
         case 5: return ("maximumWithoutVendorSpecificExtension");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
