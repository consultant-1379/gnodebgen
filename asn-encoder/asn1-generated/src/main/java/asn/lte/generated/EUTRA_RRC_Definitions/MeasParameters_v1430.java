/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MeasParameters_v1430 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "MeasParameters-v1430";
   }

   public MeasParameters_v1430_ceMeasurements_r14 ceMeasurements_r14 = null;  // optional
   public MeasParameters_v1430_ncsg_r14 ncsg_r14 = null;  // optional
   public MeasParameters_v1430_shortMeasurementGap_r14 shortMeasurementGap_r14 = null;  // optional
   public MeasParameters_v1430_perServingCellMeasurementGap_r14 perServingCellMeasurementGap_r14 = null;  // optional
   public MeasParameters_v1430_nonUniformGap_r14 nonUniformGap_r14 = null;  // optional

   public MeasParameters_v1430 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MeasParameters_v1430 (
      MeasParameters_v1430_ceMeasurements_r14 ceMeasurements_r14_,
      MeasParameters_v1430_ncsg_r14 ncsg_r14_,
      MeasParameters_v1430_shortMeasurementGap_r14 shortMeasurementGap_r14_,
      MeasParameters_v1430_perServingCellMeasurementGap_r14 perServingCellMeasurementGap_r14_,
      MeasParameters_v1430_nonUniformGap_r14 nonUniformGap_r14_
   ) {
      super();
      ceMeasurements_r14 = ceMeasurements_r14_;
      ncsg_r14 = ncsg_r14_;
      shortMeasurementGap_r14 = shortMeasurementGap_r14_;
      perServingCellMeasurementGap_r14 = perServingCellMeasurementGap_r14_;
      nonUniformGap_r14 = nonUniformGap_r14_;
   }

   public void init () {
      ceMeasurements_r14 = null;
      ncsg_r14 = null;
      shortMeasurementGap_r14 = null;
      perServingCellMeasurementGap_r14 = null;
      nonUniformGap_r14 = null;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return ceMeasurements_r14;
         case 1: return ncsg_r14;
         case 2: return shortMeasurementGap_r14;
         case 3: return perServingCellMeasurementGap_r14;
         case 4: return nonUniformGap_r14;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "ceMeasurements-r14";
         case 1: return "ncsg-r14";
         case 2: return "shortMeasurementGap-r14";
         case 3: return "perServingCellMeasurementGap-r14";
         case 4: return "nonUniformGap-r14";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean ceMeasurements_r14Present = buffer.decodeBit ("ceMeasurements_r14Present");
      boolean ncsg_r14Present = buffer.decodeBit ("ncsg_r14Present");
      boolean shortMeasurementGap_r14Present = buffer.decodeBit ("shortMeasurementGap_r14Present");
      boolean perServingCellMeasurementGap_r14Present = buffer.decodeBit ("perServingCellMeasurementGap_r14Present");
      boolean nonUniformGap_r14Present = buffer.decodeBit ("nonUniformGap_r14Present");

      // decode ceMeasurements_r14

      if (ceMeasurements_r14Present) {
         buffer.getContext().eventDispatcher.startElement("ceMeasurements_r14", -1);

         int tval = MeasParameters_v1430_ceMeasurements_r14.decodeEnumValue (buffer);
         ceMeasurements_r14 = MeasParameters_v1430_ceMeasurements_r14.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("ceMeasurements_r14", -1);
      }
      else {
         ceMeasurements_r14 = null;
      }

      // decode ncsg_r14

      if (ncsg_r14Present) {
         buffer.getContext().eventDispatcher.startElement("ncsg_r14", -1);

         int tval = MeasParameters_v1430_ncsg_r14.decodeEnumValue (buffer);
         ncsg_r14 = MeasParameters_v1430_ncsg_r14.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("ncsg_r14", -1);
      }
      else {
         ncsg_r14 = null;
      }

      // decode shortMeasurementGap_r14

      if (shortMeasurementGap_r14Present) {
         buffer.getContext().eventDispatcher.startElement("shortMeasurementGap_r14", -1);

         int tval = MeasParameters_v1430_shortMeasurementGap_r14.decodeEnumValue (buffer);
         shortMeasurementGap_r14 = MeasParameters_v1430_shortMeasurementGap_r14.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("shortMeasurementGap_r14", -1);
      }
      else {
         shortMeasurementGap_r14 = null;
      }

      // decode perServingCellMeasurementGap_r14

      if (perServingCellMeasurementGap_r14Present) {
         buffer.getContext().eventDispatcher.startElement("perServingCellMeasurementGap_r14", -1);

         int tval = MeasParameters_v1430_perServingCellMeasurementGap_r14.decodeEnumValue (buffer);
         perServingCellMeasurementGap_r14 = MeasParameters_v1430_perServingCellMeasurementGap_r14.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("perServingCellMeasurementGap_r14", -1);
      }
      else {
         perServingCellMeasurementGap_r14 = null;
      }

      // decode nonUniformGap_r14

      if (nonUniformGap_r14Present) {
         buffer.getContext().eventDispatcher.startElement("nonUniformGap_r14", -1);

         int tval = MeasParameters_v1430_nonUniformGap_r14.decodeEnumValue (buffer);
         nonUniformGap_r14 = MeasParameters_v1430_nonUniformGap_r14.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("nonUniformGap_r14", -1);
      }
      else {
         nonUniformGap_r14 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (ceMeasurements_r14 != null) ceMeasurements_r14.print (_sb, "ceMeasurements_r14", _level+1);
      if (ncsg_r14 != null) ncsg_r14.print (_sb, "ncsg_r14", _level+1);
      if (shortMeasurementGap_r14 != null) shortMeasurementGap_r14.print (_sb, "shortMeasurementGap_r14", _level+1);
      if (perServingCellMeasurementGap_r14 != null) perServingCellMeasurementGap_r14.print (_sb, "perServingCellMeasurementGap_r14", _level+1);
      if (nonUniformGap_r14 != null) nonUniformGap_r14.print (_sb, "nonUniformGap_r14", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
