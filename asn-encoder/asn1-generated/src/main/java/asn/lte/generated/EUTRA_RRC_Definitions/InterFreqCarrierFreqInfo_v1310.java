/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class InterFreqCarrierFreqInfo_v1310 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "InterFreqCarrierFreqInfo-v1310";
   }

   public CellReselectionSubPriority_r13 cellReselectionSubPriority_r13 = null;  // optional
   public RedistributionInterFreqInfo_r13 redistributionInterFreqInfo_r13;  // optional
   public CellSelectionInfoCE_r13 cellSelectionInfoCE_r13;  // optional
   public T_ReselectionEUTRA_CE_r13 t_ReselectionEUTRA_CE_r13;  // optional

   public InterFreqCarrierFreqInfo_v1310 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public InterFreqCarrierFreqInfo_v1310 (
      CellReselectionSubPriority_r13 cellReselectionSubPriority_r13_,
      RedistributionInterFreqInfo_r13 redistributionInterFreqInfo_r13_,
      CellSelectionInfoCE_r13 cellSelectionInfoCE_r13_,
      T_ReselectionEUTRA_CE_r13 t_ReselectionEUTRA_CE_r13_
   ) {
      super();
      cellReselectionSubPriority_r13 = cellReselectionSubPriority_r13_;
      redistributionInterFreqInfo_r13 = redistributionInterFreqInfo_r13_;
      cellSelectionInfoCE_r13 = cellSelectionInfoCE_r13_;
      t_ReselectionEUTRA_CE_r13 = t_ReselectionEUTRA_CE_r13_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public InterFreqCarrierFreqInfo_v1310 (CellReselectionSubPriority_r13 cellReselectionSubPriority_r13_,
      RedistributionInterFreqInfo_r13 redistributionInterFreqInfo_r13_,
      CellSelectionInfoCE_r13 cellSelectionInfoCE_r13_,
      long t_ReselectionEUTRA_CE_r13_
   ) {
      super();
      cellReselectionSubPriority_r13 = cellReselectionSubPriority_r13_;
      redistributionInterFreqInfo_r13 = redistributionInterFreqInfo_r13_;
      cellSelectionInfoCE_r13 = cellSelectionInfoCE_r13_;
      t_ReselectionEUTRA_CE_r13 = new T_ReselectionEUTRA_CE_r13 (t_ReselectionEUTRA_CE_r13_);
   }

   public void init () {
      cellReselectionSubPriority_r13 = null;
      redistributionInterFreqInfo_r13 = null;
      cellSelectionInfoCE_r13 = null;
      t_ReselectionEUTRA_CE_r13 = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return cellReselectionSubPriority_r13;
         case 1: return redistributionInterFreqInfo_r13;
         case 2: return cellSelectionInfoCE_r13;
         case 3: return t_ReselectionEUTRA_CE_r13;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "cellReselectionSubPriority-r13";
         case 1: return "redistributionInterFreqInfo-r13";
         case 2: return "cellSelectionInfoCE-r13";
         case 3: return "t-ReselectionEUTRA-CE-r13";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean cellReselectionSubPriority_r13Present = buffer.decodeBit ("cellReselectionSubPriority_r13Present");
      boolean redistributionInterFreqInfo_r13Present = buffer.decodeBit ("redistributionInterFreqInfo_r13Present");
      boolean cellSelectionInfoCE_r13Present = buffer.decodeBit ("cellSelectionInfoCE_r13Present");
      boolean t_ReselectionEUTRA_CE_r13Present = buffer.decodeBit ("t_ReselectionEUTRA_CE_r13Present");

      // decode cellReselectionSubPriority_r13

      if (cellReselectionSubPriority_r13Present) {
         buffer.getContext().eventDispatcher.startElement("cellReselectionSubPriority_r13", -1);

         int tval = CellReselectionSubPriority_r13.decodeEnumValue (buffer);
         cellReselectionSubPriority_r13 = CellReselectionSubPriority_r13.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("cellReselectionSubPriority_r13", -1);
      }
      else {
         cellReselectionSubPriority_r13 = null;
      }

      // decode redistributionInterFreqInfo_r13

      if (redistributionInterFreqInfo_r13Present) {
         buffer.getContext().eventDispatcher.startElement("redistributionInterFreqInfo_r13", -1);

         redistributionInterFreqInfo_r13 = new RedistributionInterFreqInfo_r13();
         redistributionInterFreqInfo_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("redistributionInterFreqInfo_r13", -1);
      }
      else {
         redistributionInterFreqInfo_r13 = null;
      }

      // decode cellSelectionInfoCE_r13

      if (cellSelectionInfoCE_r13Present) {
         buffer.getContext().eventDispatcher.startElement("cellSelectionInfoCE_r13", -1);

         cellSelectionInfoCE_r13 = new CellSelectionInfoCE_r13();
         cellSelectionInfoCE_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("cellSelectionInfoCE_r13", -1);
      }
      else {
         cellSelectionInfoCE_r13 = null;
      }

      // decode t_ReselectionEUTRA_CE_r13

      if (t_ReselectionEUTRA_CE_r13Present) {
         buffer.getContext().eventDispatcher.startElement("t_ReselectionEUTRA_CE_r13", -1);

         t_ReselectionEUTRA_CE_r13 = new T_ReselectionEUTRA_CE_r13();
         t_ReselectionEUTRA_CE_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("t_ReselectionEUTRA_CE_r13", -1);
      }
      else {
         t_ReselectionEUTRA_CE_r13 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (cellReselectionSubPriority_r13 != null) cellReselectionSubPriority_r13.print (_sb, "cellReselectionSubPriority_r13", _level+1);
      if (redistributionInterFreqInfo_r13 != null) redistributionInterFreqInfo_r13.print (_sb, "redistributionInterFreqInfo_r13", _level+1);
      if (cellSelectionInfoCE_r13 != null) cellSelectionInfoCE_r13.print (_sb, "cellSelectionInfoCE_r13", _level+1);
      if (t_ReselectionEUTRA_CE_r13 != null) t_ReselectionEUTRA_CE_r13.print (_sb, "t_ReselectionEUTRA_CE_r13", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
