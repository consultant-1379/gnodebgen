/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.X2AP_IEs;

import com.objsys.asn1j.runtime.*;

public class UEsToBeResetList_Item extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_X2AP_IEsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "UEsToBeResetList-Item";
   }

   public UE_X2AP_ID meNB_ID;
   public UE_X2AP_ID_Extension meNB_ID_ext;  // optional
   public SgNB_UE_X2AP_ID sgNB_ID;  // optional
   public UEsToBeResetList_Item_iE_Extensions iE_Extensions;  // optional
   public Asn1OpenExt extElem1;

   public UEsToBeResetList_Item () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public UEsToBeResetList_Item (
      UE_X2AP_ID meNB_ID_,
      UE_X2AP_ID_Extension meNB_ID_ext_,
      SgNB_UE_X2AP_ID sgNB_ID_,
      UEsToBeResetList_Item_iE_Extensions iE_Extensions_
   ) {
      super();
      meNB_ID = meNB_ID_;
      meNB_ID_ext = meNB_ID_ext_;
      sgNB_ID = sgNB_ID_;
      iE_Extensions = iE_Extensions_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public UEsToBeResetList_Item (
      UE_X2AP_ID meNB_ID_
   ) {
      super();
      meNB_ID = meNB_ID_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public UEsToBeResetList_Item (long meNB_ID_,
      long meNB_ID_ext_,
      long sgNB_ID_,
      UEsToBeResetList_Item_iE_Extensions iE_Extensions_
   ) {
      super();
      meNB_ID = new UE_X2AP_ID (meNB_ID_);
      meNB_ID_ext = new UE_X2AP_ID_Extension (meNB_ID_ext_);
      sgNB_ID = new SgNB_UE_X2AP_ID (sgNB_ID_);
      iE_Extensions = iE_Extensions_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public UEsToBeResetList_Item (
      long meNB_ID_
   ) {
      super();
      meNB_ID = new UE_X2AP_ID (meNB_ID_);
   }

   public void init () {
      meNB_ID = null;
      meNB_ID_ext = null;
      sgNB_ID = null;
      iE_Extensions = null;
      extElem1 = null;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return meNB_ID;
         case 1: return meNB_ID_ext;
         case 2: return sgNB_ID;
         case 3: return iE_Extensions;
         case 4: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "meNB-ID";
         case 1: return "meNB-ID-ext";
         case 2: return "sgNB-ID";
         case 3: return "iE-Extensions";
         case 4: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean meNB_ID_extPresent = buffer.decodeBit ("meNB_ID_extPresent");
      boolean sgNB_IDPresent = buffer.decodeBit ("sgNB_IDPresent");
      boolean iE_ExtensionsPresent = buffer.decodeBit ("iE_ExtensionsPresent");

      // decode meNB_ID

      buffer.getContext().eventDispatcher.startElement("meNB_ID", -1);

      meNB_ID = new UE_X2AP_ID();
      meNB_ID.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("meNB_ID", -1);

      // decode meNB_ID_ext

      if (meNB_ID_extPresent) {
         buffer.getContext().eventDispatcher.startElement("meNB_ID_ext", -1);

         meNB_ID_ext = new UE_X2AP_ID_Extension();
         meNB_ID_ext.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("meNB_ID_ext", -1);
      }
      else {
         meNB_ID_ext = null;
      }

      // decode sgNB_ID

      if (sgNB_IDPresent) {
         buffer.getContext().eventDispatcher.startElement("sgNB_ID", -1);

         sgNB_ID = new SgNB_UE_X2AP_ID();
         sgNB_ID.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sgNB_ID", -1);
      }
      else {
         sgNB_ID = null;
      }

      // decode iE_Extensions

      if (iE_ExtensionsPresent) {
         buffer.getContext().eventDispatcher.startElement("iE_Extensions", -1);

         iE_Extensions = new UEsToBeResetList_Item_iE_Extensions();
         iE_Extensions.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("iE_Extensions", -1);
      }
      else {
         iE_Extensions = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (meNB_ID != null) meNB_ID.print (_sb, "meNB_ID", _level+1);
      if (meNB_ID_ext != null) meNB_ID_ext.print (_sb, "meNB_ID_ext", _level+1);
      if (sgNB_ID != null) sgNB_ID.print (_sb, "sgNB_ID", _level+1);
      if (iE_Extensions != null) iE_Extensions.print (_sb, "iE_Extensions", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
