/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_Sidelink_Preconf;

import com.objsys.asn1j.runtime.*;
import asn.lte.generated.EUTRA_RRC_Definitions.SL_AnchorCarrierFreqList_V2X_r14;
import asn.lte.generated.EUTRA_RRC_Definitions.SL_V2X_PacketDuplicationConfig_r15;
import asn.lte.generated.EUTRA_RRC_Definitions.SL_V2X_SyncFreqList_r15;

public class SL_V2X_Preconfiguration_r14 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_Sidelink_PreconfRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SL-V2X-Preconfiguration-r14";
   }

   public SL_V2X_PreconfigFreqList_r14 v2x_PreconfigFreqList_r14;
   public SL_AnchorCarrierFreqList_V2X_r14 anchorCarrierFreqList_r14;  // optional
   public SL_CBR_PreconfigTxConfigList_r14 cbr_PreconfigList_r14;  // optional
   public boolean mV2ExtPresent;
   public SL_V2X_PacketDuplicationConfig_r15 v2x_PacketDuplicationConfig_r15;  // optional
   public SL_V2X_SyncFreqList_r15 syncFreqList_r15;  // optional
   public SL_V2X_Preconfiguration_r14_slss_TxMultiFreq_r15 slss_TxMultiFreq_r15 = null;  // optional
   public SL_V2X_TxProfileList_r15 v2x_TxProfileList_r15;  // optional
   public Asn1OpenExt extElem1;

   public SL_V2X_Preconfiguration_r14 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SL_V2X_Preconfiguration_r14 (
      SL_V2X_PreconfigFreqList_r14 v2x_PreconfigFreqList_r14_,
      SL_AnchorCarrierFreqList_V2X_r14 anchorCarrierFreqList_r14_,
      SL_CBR_PreconfigTxConfigList_r14 cbr_PreconfigList_r14_,
      SL_V2X_PacketDuplicationConfig_r15 v2x_PacketDuplicationConfig_r15_,
      SL_V2X_SyncFreqList_r15 syncFreqList_r15_,
      SL_V2X_Preconfiguration_r14_slss_TxMultiFreq_r15 slss_TxMultiFreq_r15_,
      SL_V2X_TxProfileList_r15 v2x_TxProfileList_r15_
   ) {
      super();
      v2x_PreconfigFreqList_r14 = v2x_PreconfigFreqList_r14_;
      anchorCarrierFreqList_r14 = anchorCarrierFreqList_r14_;
      cbr_PreconfigList_r14 = cbr_PreconfigList_r14_;
      v2x_PacketDuplicationConfig_r15 = v2x_PacketDuplicationConfig_r15_;
      syncFreqList_r15 = syncFreqList_r15_;
      slss_TxMultiFreq_r15 = slss_TxMultiFreq_r15_;
      v2x_TxProfileList_r15 = v2x_TxProfileList_r15_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SL_V2X_Preconfiguration_r14 (
      SL_V2X_PreconfigFreqList_r14 v2x_PreconfigFreqList_r14_
   ) {
      super();
      v2x_PreconfigFreqList_r14 = v2x_PreconfigFreqList_r14_;
   }

   public void init () {
      v2x_PreconfigFreqList_r14 = null;
      anchorCarrierFreqList_r14 = null;
      cbr_PreconfigList_r14 = null;
      v2x_PacketDuplicationConfig_r15 = null;
      syncFreqList_r15 = null;
      slss_TxMultiFreq_r15 = null;
      v2x_TxProfileList_r15 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 8; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return v2x_PreconfigFreqList_r14;
         case 1: return anchorCarrierFreqList_r14;
         case 2: return cbr_PreconfigList_r14;
         case 3: return v2x_PacketDuplicationConfig_r15;
         case 4: return syncFreqList_r15;
         case 5: return slss_TxMultiFreq_r15;
         case 6: return v2x_TxProfileList_r15;
         case 7: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "v2x-PreconfigFreqList-r14";
         case 1: return "anchorCarrierFreqList-r14";
         case 2: return "cbr-PreconfigList-r14";
         case 3: return "v2x-PacketDuplicationConfig-r15";
         case 4: return "syncFreqList-r15";
         case 5: return "slss-TxMultiFreq-r15";
         case 6: return "v2x-TxProfileList-r15";
         case 7: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean anchorCarrierFreqList_r14Present = buffer.decodeBit ("anchorCarrierFreqList_r14Present");
      boolean cbr_PreconfigList_r14Present = buffer.decodeBit ("cbr_PreconfigList_r14Present");

      // decode v2x_PreconfigFreqList_r14

      buffer.getContext().eventDispatcher.startElement("v2x_PreconfigFreqList_r14", -1);

      v2x_PreconfigFreqList_r14 = new SL_V2X_PreconfigFreqList_r14();
      v2x_PreconfigFreqList_r14.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("v2x_PreconfigFreqList_r14", -1);

      // decode anchorCarrierFreqList_r14

      if (anchorCarrierFreqList_r14Present) {
         buffer.getContext().eventDispatcher.startElement("anchorCarrierFreqList_r14", -1);

         anchorCarrierFreqList_r14 = new SL_AnchorCarrierFreqList_V2X_r14();
         anchorCarrierFreqList_r14.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("anchorCarrierFreqList_r14", -1);
      }
      else {
         anchorCarrierFreqList_r14 = null;
      }

      // decode cbr_PreconfigList_r14

      if (cbr_PreconfigList_r14Present) {
         buffer.getContext().eventDispatcher.startElement("cbr_PreconfigList_r14", -1);

         cbr_PreconfigList_r14 = new SL_CBR_PreconfigTxConfigList_r14();
         cbr_PreconfigList_r14.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("cbr_PreconfigList_r14", -1);
      }
      else {
         cbr_PreconfigList_r14 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean v2x_PacketDuplicationConfig_r15Present = buffer.decodeBit ("v2x_PacketDuplicationConfig_r15Present");

            boolean syncFreqList_r15Present = buffer.decodeBit ("syncFreqList_r15Present");

            boolean slss_TxMultiFreq_r15Present = buffer.decodeBit ("slss_TxMultiFreq_r15Present");

            boolean v2x_TxProfileList_r15Present = buffer.decodeBit ("v2x_TxProfileList_r15Present");

            // decode v2x_PacketDuplicationConfig_r15

            if (v2x_PacketDuplicationConfig_r15Present) {
               buffer.getContext().eventDispatcher.startElement("v2x_PacketDuplicationConfig_r15", -1);

               v2x_PacketDuplicationConfig_r15 = new SL_V2X_PacketDuplicationConfig_r15();
               v2x_PacketDuplicationConfig_r15.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("v2x_PacketDuplicationConfig_r15", -1);
            }
            else {
               v2x_PacketDuplicationConfig_r15 = null;
            }

            // decode syncFreqList_r15

            if (syncFreqList_r15Present) {
               buffer.getContext().eventDispatcher.startElement("syncFreqList_r15", -1);

               syncFreqList_r15 = new SL_V2X_SyncFreqList_r15();
               syncFreqList_r15.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("syncFreqList_r15", -1);
            }
            else {
               syncFreqList_r15 = null;
            }

            // decode slss_TxMultiFreq_r15

            if (slss_TxMultiFreq_r15Present) {
               buffer.getContext().eventDispatcher.startElement("slss_TxMultiFreq_r15", -1);

               int tval = SL_V2X_Preconfiguration_r14_slss_TxMultiFreq_r15.decodeEnumValue (buffer);
               slss_TxMultiFreq_r15 = SL_V2X_Preconfiguration_r14_slss_TxMultiFreq_r15.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("slss_TxMultiFreq_r15", -1);
            }
            else {
               slss_TxMultiFreq_r15 = null;
            }

            // decode v2x_TxProfileList_r15

            if (v2x_TxProfileList_r15Present) {
               buffer.getContext().eventDispatcher.startElement("v2x_TxProfileList_r15", -1);

               v2x_TxProfileList_r15 = new SL_V2X_TxProfileList_r15();
               v2x_TxProfileList_r15.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("v2x_TxProfileList_r15", -1);
            }
            else {
               v2x_TxProfileList_r15 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (v2x_PreconfigFreqList_r14 != null) v2x_PreconfigFreqList_r14.print (_sb, "v2x_PreconfigFreqList_r14", _level+1);
      if (anchorCarrierFreqList_r14 != null) anchorCarrierFreqList_r14.print (_sb, "anchorCarrierFreqList_r14", _level+1);
      if (cbr_PreconfigList_r14 != null) cbr_PreconfigList_r14.print (_sb, "cbr_PreconfigList_r14", _level+1);
      if (v2x_PacketDuplicationConfig_r15 != null) v2x_PacketDuplicationConfig_r15.print (_sb, "v2x_PacketDuplicationConfig_r15", _level+1);
      if (syncFreqList_r15 != null) syncFreqList_r15.print (_sb, "syncFreqList_r15", _level+1);
      if (slss_TxMultiFreq_r15 != null) slss_TxMultiFreq_r15.print (_sb, "slss_TxMultiFreq_r15", _level+1);
      if (v2x_TxProfileList_r15 != null) v2x_TxProfileList_r15.print (_sb, "v2x_TxProfileList_r15", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
