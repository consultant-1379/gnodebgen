/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MeasObjectNR extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "MeasObjectNR";
   }

   public ARFCN_ValueNR ssbFrequency;  // optional
   public SubcarrierSpacing ssbSubcarrierSpacing = null;  // optional
   public SSB_MTC smtc1;  // optional
   public SSB_MTC2 smtc2;  // optional
   public ARFCN_ValueNR refFreqCSI_RS;  // optional
   public ReferenceSignalConfig referenceSignalConfig;
   public ThresholdNR absThreshSS_BlocksConsolidation;  // optional
   public ThresholdNR absThreshCSI_RS_Consolidation;  // optional
   public Asn1Integer nrofSS_BlocksToAverage;  // optional
   public Asn1Integer nrofCSI_RS_ResourcesToAverage;  // optional
   public Asn1Integer quantityConfigIndex;
   public Q_OffsetRangeList offsetMO;
   public PCI_List cellsToRemoveList;  // optional
   public CellsToAddModList cellsToAddModList;  // optional
   public PCI_RangeIndexList blackCellsToRemoveList;  // optional
   public MeasObjectNR_blackCellsToAddModList blackCellsToAddModList;  // optional
   public PCI_RangeIndexList whiteCellsToRemoveList;  // optional
   public MeasObjectNR_whiteCellsToAddModList whiteCellsToAddModList;  // optional
   public boolean mV2ExtPresent;
   public FreqBandIndicatorNR freqBandIndicatorNR;  // optional
   public MeasObjectNR_measCycleSCell measCycleSCell = null;  // optional
   public boolean mV3ExtPresent;
   public SSB_MTC3List_r16 smtc3list_r16;  // optional
   public MeasObjectNR_rmtc_Config_r16 rmtc_Config_r16;  // optional
   public MeasObjectNR_t312_r16 t312_r16;  // optional
   public Asn1OpenExt extElem1;

   public MeasObjectNR () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MeasObjectNR (
      ARFCN_ValueNR ssbFrequency_,
      SubcarrierSpacing ssbSubcarrierSpacing_,
      SSB_MTC smtc1_,
      SSB_MTC2 smtc2_,
      ARFCN_ValueNR refFreqCSI_RS_,
      ReferenceSignalConfig referenceSignalConfig_,
      ThresholdNR absThreshSS_BlocksConsolidation_,
      ThresholdNR absThreshCSI_RS_Consolidation_,
      Asn1Integer nrofSS_BlocksToAverage_,
      Asn1Integer nrofCSI_RS_ResourcesToAverage_,
      Asn1Integer quantityConfigIndex_,
      Q_OffsetRangeList offsetMO_,
      PCI_List cellsToRemoveList_,
      CellsToAddModList cellsToAddModList_,
      PCI_RangeIndexList blackCellsToRemoveList_,
      MeasObjectNR_blackCellsToAddModList blackCellsToAddModList_,
      PCI_RangeIndexList whiteCellsToRemoveList_,
      MeasObjectNR_whiteCellsToAddModList whiteCellsToAddModList_,
      FreqBandIndicatorNR freqBandIndicatorNR_,
      MeasObjectNR_measCycleSCell measCycleSCell_,
      SSB_MTC3List_r16 smtc3list_r16_,
      MeasObjectNR_rmtc_Config_r16 rmtc_Config_r16_,
      MeasObjectNR_t312_r16 t312_r16_
   ) {
      super();
      ssbFrequency = ssbFrequency_;
      ssbSubcarrierSpacing = ssbSubcarrierSpacing_;
      smtc1 = smtc1_;
      smtc2 = smtc2_;
      refFreqCSI_RS = refFreqCSI_RS_;
      referenceSignalConfig = referenceSignalConfig_;
      absThreshSS_BlocksConsolidation = absThreshSS_BlocksConsolidation_;
      absThreshCSI_RS_Consolidation = absThreshCSI_RS_Consolidation_;
      nrofSS_BlocksToAverage = nrofSS_BlocksToAverage_;
      nrofCSI_RS_ResourcesToAverage = nrofCSI_RS_ResourcesToAverage_;
      quantityConfigIndex = quantityConfigIndex_;
      offsetMO = offsetMO_;
      cellsToRemoveList = cellsToRemoveList_;
      cellsToAddModList = cellsToAddModList_;
      blackCellsToRemoveList = blackCellsToRemoveList_;
      blackCellsToAddModList = blackCellsToAddModList_;
      whiteCellsToRemoveList = whiteCellsToRemoveList_;
      whiteCellsToAddModList = whiteCellsToAddModList_;
      freqBandIndicatorNR = freqBandIndicatorNR_;
      measCycleSCell = measCycleSCell_;
      smtc3list_r16 = smtc3list_r16_;
      rmtc_Config_r16 = rmtc_Config_r16_;
      t312_r16 = t312_r16_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public MeasObjectNR (
      ReferenceSignalConfig referenceSignalConfig_,
      Asn1Integer quantityConfigIndex_,
      Q_OffsetRangeList offsetMO_
   ) {
      super();
      referenceSignalConfig = referenceSignalConfig_;
      quantityConfigIndex = quantityConfigIndex_;
      offsetMO = offsetMO_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public MeasObjectNR (long ssbFrequency_,
      SubcarrierSpacing ssbSubcarrierSpacing_,
      SSB_MTC smtc1_,
      SSB_MTC2 smtc2_,
      long refFreqCSI_RS_,
      ReferenceSignalConfig referenceSignalConfig_,
      ThresholdNR absThreshSS_BlocksConsolidation_,
      ThresholdNR absThreshCSI_RS_Consolidation_,
      long nrofSS_BlocksToAverage_,
      long nrofCSI_RS_ResourcesToAverage_,
      long quantityConfigIndex_,
      Q_OffsetRangeList offsetMO_,
      PCI_List cellsToRemoveList_,
      CellsToAddModList cellsToAddModList_,
      PCI_RangeIndexList blackCellsToRemoveList_,
      MeasObjectNR_blackCellsToAddModList blackCellsToAddModList_,
      PCI_RangeIndexList whiteCellsToRemoveList_,
      MeasObjectNR_whiteCellsToAddModList whiteCellsToAddModList_,
      long freqBandIndicatorNR_,
      MeasObjectNR_measCycleSCell measCycleSCell_,
      SSB_MTC3List_r16 smtc3list_r16_,
      MeasObjectNR_rmtc_Config_r16 rmtc_Config_r16_,
      MeasObjectNR_t312_r16 t312_r16_
   ) {
      super();
      ssbFrequency = new ARFCN_ValueNR (ssbFrequency_);
      ssbSubcarrierSpacing = ssbSubcarrierSpacing_;
      smtc1 = smtc1_;
      smtc2 = smtc2_;
      refFreqCSI_RS = new ARFCN_ValueNR (refFreqCSI_RS_);
      referenceSignalConfig = referenceSignalConfig_;
      absThreshSS_BlocksConsolidation = absThreshSS_BlocksConsolidation_;
      absThreshCSI_RS_Consolidation = absThreshCSI_RS_Consolidation_;
      nrofSS_BlocksToAverage = new Asn1Integer (nrofSS_BlocksToAverage_);
      nrofCSI_RS_ResourcesToAverage = new Asn1Integer (nrofCSI_RS_ResourcesToAverage_);
      quantityConfigIndex = new Asn1Integer (quantityConfigIndex_);
      offsetMO = offsetMO_;
      cellsToRemoveList = cellsToRemoveList_;
      cellsToAddModList = cellsToAddModList_;
      blackCellsToRemoveList = blackCellsToRemoveList_;
      blackCellsToAddModList = blackCellsToAddModList_;
      whiteCellsToRemoveList = whiteCellsToRemoveList_;
      whiteCellsToAddModList = whiteCellsToAddModList_;
      freqBandIndicatorNR = new FreqBandIndicatorNR (freqBandIndicatorNR_);
      measCycleSCell = measCycleSCell_;
      smtc3list_r16 = smtc3list_r16_;
      rmtc_Config_r16 = rmtc_Config_r16_;
      t312_r16 = t312_r16_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public MeasObjectNR (
      ReferenceSignalConfig referenceSignalConfig_,
      long quantityConfigIndex_,
      Q_OffsetRangeList offsetMO_
   ) {
      super();
      referenceSignalConfig = referenceSignalConfig_;
      quantityConfigIndex = new Asn1Integer (quantityConfigIndex_);
      offsetMO = offsetMO_;
   }

   public void init () {
      ssbFrequency = null;
      ssbSubcarrierSpacing = null;
      smtc1 = null;
      smtc2 = null;
      refFreqCSI_RS = null;
      referenceSignalConfig = null;
      absThreshSS_BlocksConsolidation = null;
      absThreshCSI_RS_Consolidation = null;
      nrofSS_BlocksToAverage = null;
      nrofCSI_RS_ResourcesToAverage = null;
      quantityConfigIndex = null;
      offsetMO = null;
      cellsToRemoveList = null;
      cellsToAddModList = null;
      blackCellsToRemoveList = null;
      blackCellsToAddModList = null;
      whiteCellsToRemoveList = null;
      whiteCellsToAddModList = null;
      freqBandIndicatorNR = null;
      measCycleSCell = null;
      smtc3list_r16 = null;
      rmtc_Config_r16 = null;
      t312_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 24; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return ssbFrequency;
         case 1: return ssbSubcarrierSpacing;
         case 2: return smtc1;
         case 3: return smtc2;
         case 4: return refFreqCSI_RS;
         case 5: return referenceSignalConfig;
         case 6: return absThreshSS_BlocksConsolidation;
         case 7: return absThreshCSI_RS_Consolidation;
         case 8: return nrofSS_BlocksToAverage;
         case 9: return nrofCSI_RS_ResourcesToAverage;
         case 10: return quantityConfigIndex;
         case 11: return offsetMO;
         case 12: return cellsToRemoveList;
         case 13: return cellsToAddModList;
         case 14: return blackCellsToRemoveList;
         case 15: return blackCellsToAddModList;
         case 16: return whiteCellsToRemoveList;
         case 17: return whiteCellsToAddModList;
         case 18: return freqBandIndicatorNR;
         case 19: return measCycleSCell;
         case 20: return smtc3list_r16;
         case 21: return rmtc_Config_r16;
         case 22: return t312_r16;
         case 23: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "ssbFrequency";
         case 1: return "ssbSubcarrierSpacing";
         case 2: return "smtc1";
         case 3: return "smtc2";
         case 4: return "refFreqCSI-RS";
         case 5: return "referenceSignalConfig";
         case 6: return "absThreshSS-BlocksConsolidation";
         case 7: return "absThreshCSI-RS-Consolidation";
         case 8: return "nrofSS-BlocksToAverage";
         case 9: return "nrofCSI-RS-ResourcesToAverage";
         case 10: return "quantityConfigIndex";
         case 11: return "offsetMO";
         case 12: return "cellsToRemoveList";
         case 13: return "cellsToAddModList";
         case 14: return "blackCellsToRemoveList";
         case 15: return "blackCellsToAddModList";
         case 16: return "whiteCellsToRemoveList";
         case 17: return "whiteCellsToAddModList";
         case 18: return "freqBandIndicatorNR";
         case 19: return "measCycleSCell";
         case 20: return "smtc3list-r16";
         case 21: return "rmtc-Config-r16";
         case 22: return "t312-r16";
         case 23: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean ssbFrequencyPresent = buffer.decodeBit ("ssbFrequencyPresent");
      boolean ssbSubcarrierSpacingPresent = buffer.decodeBit ("ssbSubcarrierSpacingPresent");
      boolean smtc1Present = buffer.decodeBit ("smtc1Present");
      boolean smtc2Present = buffer.decodeBit ("smtc2Present");
      boolean refFreqCSI_RSPresent = buffer.decodeBit ("refFreqCSI_RSPresent");
      boolean absThreshSS_BlocksConsolidationPresent = buffer.decodeBit ("absThreshSS_BlocksConsolidationPresent");
      boolean absThreshCSI_RS_ConsolidationPresent = buffer.decodeBit ("absThreshCSI_RS_ConsolidationPresent");
      boolean nrofSS_BlocksToAveragePresent = buffer.decodeBit ("nrofSS_BlocksToAveragePresent");
      boolean nrofCSI_RS_ResourcesToAveragePresent = buffer.decodeBit ("nrofCSI_RS_ResourcesToAveragePresent");
      boolean cellsToRemoveListPresent = buffer.decodeBit ("cellsToRemoveListPresent");
      boolean cellsToAddModListPresent = buffer.decodeBit ("cellsToAddModListPresent");
      boolean blackCellsToRemoveListPresent = buffer.decodeBit ("blackCellsToRemoveListPresent");
      boolean blackCellsToAddModListPresent = buffer.decodeBit ("blackCellsToAddModListPresent");
      boolean whiteCellsToRemoveListPresent = buffer.decodeBit ("whiteCellsToRemoveListPresent");
      boolean whiteCellsToAddModListPresent = buffer.decodeBit ("whiteCellsToAddModListPresent");

      // decode ssbFrequency

      if (ssbFrequencyPresent) {
         buffer.getContext().eventDispatcher.startElement("ssbFrequency", -1);

         ssbFrequency = new ARFCN_ValueNR();
         ssbFrequency.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ssbFrequency", -1);
      }
      else {
         ssbFrequency = null;
      }

      // decode ssbSubcarrierSpacing

      if (ssbSubcarrierSpacingPresent) {
         buffer.getContext().eventDispatcher.startElement("ssbSubcarrierSpacing", -1);

         int tval = SubcarrierSpacing.decodeEnumValue (buffer);
         ssbSubcarrierSpacing = SubcarrierSpacing.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("ssbSubcarrierSpacing", -1);
      }
      else {
         ssbSubcarrierSpacing = null;
      }

      // decode smtc1

      if (smtc1Present) {
         buffer.getContext().eventDispatcher.startElement("smtc1", -1);

         smtc1 = new SSB_MTC();
         smtc1.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("smtc1", -1);
      }
      else {
         smtc1 = null;
      }

      // decode smtc2

      if (smtc2Present) {
         buffer.getContext().eventDispatcher.startElement("smtc2", -1);

         smtc2 = new SSB_MTC2();
         smtc2.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("smtc2", -1);
      }
      else {
         smtc2 = null;
      }

      // decode refFreqCSI_RS

      if (refFreqCSI_RSPresent) {
         buffer.getContext().eventDispatcher.startElement("refFreqCSI_RS", -1);

         refFreqCSI_RS = new ARFCN_ValueNR();
         refFreqCSI_RS.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("refFreqCSI_RS", -1);
      }
      else {
         refFreqCSI_RS = null;
      }

      // decode referenceSignalConfig

      buffer.getContext().eventDispatcher.startElement("referenceSignalConfig", -1);

      referenceSignalConfig = new ReferenceSignalConfig();
      referenceSignalConfig.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("referenceSignalConfig", -1);

      // decode absThreshSS_BlocksConsolidation

      if (absThreshSS_BlocksConsolidationPresent) {
         buffer.getContext().eventDispatcher.startElement("absThreshSS_BlocksConsolidation", -1);

         absThreshSS_BlocksConsolidation = new ThresholdNR();
         absThreshSS_BlocksConsolidation.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("absThreshSS_BlocksConsolidation", -1);
      }
      else {
         absThreshSS_BlocksConsolidation = null;
      }

      // decode absThreshCSI_RS_Consolidation

      if (absThreshCSI_RS_ConsolidationPresent) {
         buffer.getContext().eventDispatcher.startElement("absThreshCSI_RS_Consolidation", -1);

         absThreshCSI_RS_Consolidation = new ThresholdNR();
         absThreshCSI_RS_Consolidation.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("absThreshCSI_RS_Consolidation", -1);
      }
      else {
         absThreshCSI_RS_Consolidation = null;
      }

      // decode nrofSS_BlocksToAverage

      if (nrofSS_BlocksToAveragePresent) {
         buffer.getContext().eventDispatcher.startElement("nrofSS_BlocksToAverage", -1);

         nrofSS_BlocksToAverage = new Asn1Integer();
         nrofSS_BlocksToAverage.decode (buffer, 2, 16);

         buffer.invokeCharacters(nrofSS_BlocksToAverage.toString());
         buffer.getContext().eventDispatcher.endElement("nrofSS_BlocksToAverage", -1);
      }
      else {
         nrofSS_BlocksToAverage = null;
      }

      // decode nrofCSI_RS_ResourcesToAverage

      if (nrofCSI_RS_ResourcesToAveragePresent) {
         buffer.getContext().eventDispatcher.startElement("nrofCSI_RS_ResourcesToAverage", -1);

         nrofCSI_RS_ResourcesToAverage = new Asn1Integer();
         nrofCSI_RS_ResourcesToAverage.decode (buffer, 2, 16);

         buffer.invokeCharacters(nrofCSI_RS_ResourcesToAverage.toString());
         buffer.getContext().eventDispatcher.endElement("nrofCSI_RS_ResourcesToAverage", -1);
      }
      else {
         nrofCSI_RS_ResourcesToAverage = null;
      }

      // decode quantityConfigIndex

      buffer.getContext().eventDispatcher.startElement("quantityConfigIndex", -1);

      quantityConfigIndex = new Asn1Integer();
      quantityConfigIndex.decode (buffer, 1, 2);

      buffer.invokeCharacters(quantityConfigIndex.toString());
      buffer.getContext().eventDispatcher.endElement("quantityConfigIndex", -1);

      // decode offsetMO

      buffer.getContext().eventDispatcher.startElement("offsetMO", -1);

      offsetMO = new Q_OffsetRangeList();
      offsetMO.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("offsetMO", -1);

      // decode cellsToRemoveList

      if (cellsToRemoveListPresent) {
         buffer.getContext().eventDispatcher.startElement("cellsToRemoveList", -1);

         cellsToRemoveList = new PCI_List();
         cellsToRemoveList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("cellsToRemoveList", -1);
      }
      else {
         cellsToRemoveList = null;
      }

      // decode cellsToAddModList

      if (cellsToAddModListPresent) {
         buffer.getContext().eventDispatcher.startElement("cellsToAddModList", -1);

         cellsToAddModList = new CellsToAddModList();
         cellsToAddModList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("cellsToAddModList", -1);
      }
      else {
         cellsToAddModList = null;
      }

      // decode blackCellsToRemoveList

      if (blackCellsToRemoveListPresent) {
         buffer.getContext().eventDispatcher.startElement("blackCellsToRemoveList", -1);

         blackCellsToRemoveList = new PCI_RangeIndexList();
         blackCellsToRemoveList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("blackCellsToRemoveList", -1);
      }
      else {
         blackCellsToRemoveList = null;
      }

      // decode blackCellsToAddModList

      if (blackCellsToAddModListPresent) {
         buffer.getContext().eventDispatcher.startElement("blackCellsToAddModList", -1);

         blackCellsToAddModList = new MeasObjectNR_blackCellsToAddModList();
         blackCellsToAddModList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("blackCellsToAddModList", -1);
      }
      else {
         blackCellsToAddModList = null;
      }

      // decode whiteCellsToRemoveList

      if (whiteCellsToRemoveListPresent) {
         buffer.getContext().eventDispatcher.startElement("whiteCellsToRemoveList", -1);

         whiteCellsToRemoveList = new PCI_RangeIndexList();
         whiteCellsToRemoveList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("whiteCellsToRemoveList", -1);
      }
      else {
         whiteCellsToRemoveList = null;
      }

      // decode whiteCellsToAddModList

      if (whiteCellsToAddModListPresent) {
         buffer.getContext().eventDispatcher.startElement("whiteCellsToAddModList", -1);

         whiteCellsToAddModList = new MeasObjectNR_whiteCellsToAddModList();
         whiteCellsToAddModList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("whiteCellsToAddModList", -1);
      }
      else {
         whiteCellsToAddModList = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean freqBandIndicatorNRPresent = buffer.decodeBit ("freqBandIndicatorNRPresent");

            boolean measCycleSCellPresent = buffer.decodeBit ("measCycleSCellPresent");

            // decode freqBandIndicatorNR

            if (freqBandIndicatorNRPresent) {
               buffer.getContext().eventDispatcher.startElement("freqBandIndicatorNR", -1);

               freqBandIndicatorNR = new FreqBandIndicatorNR();
               freqBandIndicatorNR.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("freqBandIndicatorNR", -1);
            }
            else {
               freqBandIndicatorNR = null;
            }

            // decode measCycleSCell

            if (measCycleSCellPresent) {
               buffer.getContext().eventDispatcher.startElement("measCycleSCell", -1);

               int tval = MeasObjectNR_measCycleSCell.decodeEnumValue (buffer);
               measCycleSCell = MeasObjectNR_measCycleSCell.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("measCycleSCell", -1);
            }
            else {
               measCycleSCell = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean smtc3list_r16Present = buffer.decodeBit ("smtc3list_r16Present");

            boolean rmtc_Config_r16Present = buffer.decodeBit ("rmtc_Config_r16Present");

            boolean t312_r16Present = buffer.decodeBit ("t312_r16Present");

            // decode smtc3list_r16

            if (smtc3list_r16Present) {
               buffer.getContext().eventDispatcher.startElement("smtc3list_r16", -1);

               smtc3list_r16 = new SSB_MTC3List_r16();
               smtc3list_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("smtc3list_r16", -1);
            }
            else {
               smtc3list_r16 = null;
            }

            // decode rmtc_Config_r16

            if (rmtc_Config_r16Present) {
               buffer.getContext().eventDispatcher.startElement("rmtc_Config_r16", -1);

               rmtc_Config_r16 = new MeasObjectNR_rmtc_Config_r16();
               rmtc_Config_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("rmtc_Config_r16", -1);
            }
            else {
               rmtc_Config_r16 = null;
            }

            // decode t312_r16

            if (t312_r16Present) {
               buffer.getContext().eventDispatcher.startElement("t312_r16", -1);

               t312_r16 = new MeasObjectNR_t312_r16();
               t312_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("t312_r16", -1);
            }
            else {
               t312_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (ssbFrequency != null) ssbFrequency.print (_sb, "ssbFrequency", _level+1);
      if (ssbSubcarrierSpacing != null) ssbSubcarrierSpacing.print (_sb, "ssbSubcarrierSpacing", _level+1);
      if (smtc1 != null) smtc1.print (_sb, "smtc1", _level+1);
      if (smtc2 != null) smtc2.print (_sb, "smtc2", _level+1);
      if (refFreqCSI_RS != null) refFreqCSI_RS.print (_sb, "refFreqCSI_RS", _level+1);
      if (referenceSignalConfig != null) referenceSignalConfig.print (_sb, "referenceSignalConfig", _level+1);
      if (absThreshSS_BlocksConsolidation != null) absThreshSS_BlocksConsolidation.print (_sb, "absThreshSS_BlocksConsolidation", _level+1);
      if (absThreshCSI_RS_Consolidation != null) absThreshCSI_RS_Consolidation.print (_sb, "absThreshCSI_RS_Consolidation", _level+1);
      if (nrofSS_BlocksToAverage != null) nrofSS_BlocksToAverage.print (_sb, "nrofSS_BlocksToAverage", _level+1);
      if (nrofCSI_RS_ResourcesToAverage != null) nrofCSI_RS_ResourcesToAverage.print (_sb, "nrofCSI_RS_ResourcesToAverage", _level+1);
      if (quantityConfigIndex != null) quantityConfigIndex.print (_sb, "quantityConfigIndex", _level+1);
      if (offsetMO != null) offsetMO.print (_sb, "offsetMO", _level+1);
      if (cellsToRemoveList != null) cellsToRemoveList.print (_sb, "cellsToRemoveList", _level+1);
      if (cellsToAddModList != null) cellsToAddModList.print (_sb, "cellsToAddModList", _level+1);
      if (blackCellsToRemoveList != null) blackCellsToRemoveList.print (_sb, "blackCellsToRemoveList", _level+1);
      if (blackCellsToAddModList != null) blackCellsToAddModList.print (_sb, "blackCellsToAddModList", _level+1);
      if (whiteCellsToRemoveList != null) whiteCellsToRemoveList.print (_sb, "whiteCellsToRemoveList", _level+1);
      if (whiteCellsToAddModList != null) whiteCellsToAddModList.print (_sb, "whiteCellsToAddModList", _level+1);
      if (freqBandIndicatorNR != null) freqBandIndicatorNR.print (_sb, "freqBandIndicatorNR", _level+1);
      if (measCycleSCell != null) measCycleSCell.print (_sb, "measCycleSCell", _level+1);
      if (smtc3list_r16 != null) smtc3list_r16.print (_sb, "smtc3list_r16", _level+1);
      if (rmtc_Config_r16 != null) rmtc_Config_r16.print (_sb, "rmtc_Config_r16", _level+1);
      if (t312_r16 != null) t312_r16.print (_sb, "t312_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
