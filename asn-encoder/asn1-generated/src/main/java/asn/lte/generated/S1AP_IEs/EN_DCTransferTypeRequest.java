/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.S1AP_IEs;

import com.objsys.asn1j.runtime.*;

public class EN_DCTransferTypeRequest extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_S1AP_IEsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "EN-DCTransferTypeRequest";
   }

   public EN_DCSONeNBIdentification sourceeNB;
   public EN_DCSONengNBIdentification targetengNB;
   public EN_DCSONeNBIdentification targeteNB;  // optional
   public TAI associatedTAI;  // optional
   public FiveGSTAI broadcast5GSTAI;  // optional
   public EN_DCTransferTypeRequest_iE_Extensions iE_Extensions;  // optional
   public Asn1OpenExt extElem1;

   public EN_DCTransferTypeRequest () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public EN_DCTransferTypeRequest (
      EN_DCSONeNBIdentification sourceeNB_,
      EN_DCSONengNBIdentification targetengNB_,
      EN_DCSONeNBIdentification targeteNB_,
      TAI associatedTAI_,
      FiveGSTAI broadcast5GSTAI_,
      EN_DCTransferTypeRequest_iE_Extensions iE_Extensions_
   ) {
      super();
      sourceeNB = sourceeNB_;
      targetengNB = targetengNB_;
      targeteNB = targeteNB_;
      associatedTAI = associatedTAI_;
      broadcast5GSTAI = broadcast5GSTAI_;
      iE_Extensions = iE_Extensions_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public EN_DCTransferTypeRequest (
      EN_DCSONeNBIdentification sourceeNB_,
      EN_DCSONengNBIdentification targetengNB_
   ) {
      super();
      sourceeNB = sourceeNB_;
      targetengNB = targetengNB_;
   }

   public void init () {
      sourceeNB = null;
      targetengNB = null;
      targeteNB = null;
      associatedTAI = null;
      broadcast5GSTAI = null;
      iE_Extensions = null;
      extElem1 = null;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return sourceeNB;
         case 1: return targetengNB;
         case 2: return targeteNB;
         case 3: return associatedTAI;
         case 4: return broadcast5GSTAI;
         case 5: return iE_Extensions;
         case 6: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "sourceeNB";
         case 1: return "targetengNB";
         case 2: return "targeteNB";
         case 3: return "associatedTAI";
         case 4: return "broadcast5GSTAI";
         case 5: return "iE-Extensions";
         case 6: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean targeteNBPresent = buffer.decodeBit ("targeteNBPresent");
      boolean associatedTAIPresent = buffer.decodeBit ("associatedTAIPresent");
      boolean broadcast5GSTAIPresent = buffer.decodeBit ("broadcast5GSTAIPresent");
      boolean iE_ExtensionsPresent = buffer.decodeBit ("iE_ExtensionsPresent");

      // decode sourceeNB

      buffer.getContext().eventDispatcher.startElement("sourceeNB", -1);

      sourceeNB = new EN_DCSONeNBIdentification();
      sourceeNB.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("sourceeNB", -1);

      // decode targetengNB

      buffer.getContext().eventDispatcher.startElement("targetengNB", -1);

      targetengNB = new EN_DCSONengNBIdentification();
      targetengNB.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("targetengNB", -1);

      // decode targeteNB

      if (targeteNBPresent) {
         buffer.getContext().eventDispatcher.startElement("targeteNB", -1);

         targeteNB = new EN_DCSONeNBIdentification();
         targeteNB.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("targeteNB", -1);
      }
      else {
         targeteNB = null;
      }

      // decode associatedTAI

      if (associatedTAIPresent) {
         buffer.getContext().eventDispatcher.startElement("associatedTAI", -1);

         associatedTAI = new TAI();
         associatedTAI.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("associatedTAI", -1);
      }
      else {
         associatedTAI = null;
      }

      // decode broadcast5GSTAI

      if (broadcast5GSTAIPresent) {
         buffer.getContext().eventDispatcher.startElement("broadcast5GSTAI", -1);

         broadcast5GSTAI = new FiveGSTAI();
         broadcast5GSTAI.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("broadcast5GSTAI", -1);
      }
      else {
         broadcast5GSTAI = null;
      }

      // decode iE_Extensions

      if (iE_ExtensionsPresent) {
         buffer.getContext().eventDispatcher.startElement("iE_Extensions", -1);

         iE_Extensions = new EN_DCTransferTypeRequest_iE_Extensions();
         iE_Extensions.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("iE_Extensions", -1);
      }
      else {
         iE_Extensions = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (sourceeNB != null) sourceeNB.print (_sb, "sourceeNB", _level+1);
      if (targetengNB != null) targetengNB.print (_sb, "targetengNB", _level+1);
      if (targeteNB != null) targeteNB.print (_sb, "targeteNB", _level+1);
      if (associatedTAI != null) associatedTAI.print (_sb, "associatedTAI", _level+1);
      if (broadcast5GSTAI != null) broadcast5GSTAI.print (_sb, "broadcast5GSTAI", _level+1);
      if (iE_Extensions != null) iE_Extensions.print (_sb, "iE_Extensions", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
