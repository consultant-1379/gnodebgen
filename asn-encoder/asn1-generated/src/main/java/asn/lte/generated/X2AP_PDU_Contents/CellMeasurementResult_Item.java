/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.X2AP_PDU_Contents;

import com.objsys.asn1j.runtime.*;
import asn.lte.generated.X2AP_IEs.ECGI;
import asn.lte.generated.X2AP_IEs.HWLoadIndicator;
import asn.lte.generated.X2AP_IEs.S1TNLLoadIndicator;
import asn.lte.generated.X2AP_IEs.RadioResourceStatus;

public class CellMeasurementResult_Item extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_X2AP_PDU_ContentsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CellMeasurementResult-Item";
   }

   public ECGI cell_ID;
   public HWLoadIndicator hWLoadIndicator;  // optional
   public S1TNLLoadIndicator s1TNLLoadIndicator;  // optional
   public RadioResourceStatus radioResourceStatus;  // optional
   public CellMeasurementResult_Item_iE_Extensions iE_Extensions;  // optional
   public Asn1OpenExt extElem1;

   public CellMeasurementResult_Item () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CellMeasurementResult_Item (
      ECGI cell_ID_,
      HWLoadIndicator hWLoadIndicator_,
      S1TNLLoadIndicator s1TNLLoadIndicator_,
      RadioResourceStatus radioResourceStatus_,
      CellMeasurementResult_Item_iE_Extensions iE_Extensions_
   ) {
      super();
      cell_ID = cell_ID_;
      hWLoadIndicator = hWLoadIndicator_;
      s1TNLLoadIndicator = s1TNLLoadIndicator_;
      radioResourceStatus = radioResourceStatus_;
      iE_Extensions = iE_Extensions_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public CellMeasurementResult_Item (
      ECGI cell_ID_
   ) {
      super();
      cell_ID = cell_ID_;
   }

   public void init () {
      cell_ID = null;
      hWLoadIndicator = null;
      s1TNLLoadIndicator = null;
      radioResourceStatus = null;
      iE_Extensions = null;
      extElem1 = null;
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return cell_ID;
         case 1: return hWLoadIndicator;
         case 2: return s1TNLLoadIndicator;
         case 3: return radioResourceStatus;
         case 4: return iE_Extensions;
         case 5: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "cell-ID";
         case 1: return "hWLoadIndicator";
         case 2: return "s1TNLLoadIndicator";
         case 3: return "radioResourceStatus";
         case 4: return "iE-Extensions";
         case 5: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean hWLoadIndicatorPresent = buffer.decodeBit ("hWLoadIndicatorPresent");
      boolean s1TNLLoadIndicatorPresent = buffer.decodeBit ("s1TNLLoadIndicatorPresent");
      boolean radioResourceStatusPresent = buffer.decodeBit ("radioResourceStatusPresent");
      boolean iE_ExtensionsPresent = buffer.decodeBit ("iE_ExtensionsPresent");

      // decode cell_ID

      buffer.getContext().eventDispatcher.startElement("cell_ID", -1);

      cell_ID = new ECGI();
      cell_ID.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("cell_ID", -1);

      // decode hWLoadIndicator

      if (hWLoadIndicatorPresent) {
         buffer.getContext().eventDispatcher.startElement("hWLoadIndicator", -1);

         hWLoadIndicator = new HWLoadIndicator();
         hWLoadIndicator.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("hWLoadIndicator", -1);
      }
      else {
         hWLoadIndicator = null;
      }

      // decode s1TNLLoadIndicator

      if (s1TNLLoadIndicatorPresent) {
         buffer.getContext().eventDispatcher.startElement("s1TNLLoadIndicator", -1);

         s1TNLLoadIndicator = new S1TNLLoadIndicator();
         s1TNLLoadIndicator.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("s1TNLLoadIndicator", -1);
      }
      else {
         s1TNLLoadIndicator = null;
      }

      // decode radioResourceStatus

      if (radioResourceStatusPresent) {
         buffer.getContext().eventDispatcher.startElement("radioResourceStatus", -1);

         radioResourceStatus = new RadioResourceStatus();
         radioResourceStatus.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("radioResourceStatus", -1);
      }
      else {
         radioResourceStatus = null;
      }

      // decode iE_Extensions

      if (iE_ExtensionsPresent) {
         buffer.getContext().eventDispatcher.startElement("iE_Extensions", -1);

         iE_Extensions = new CellMeasurementResult_Item_iE_Extensions();
         iE_Extensions.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("iE_Extensions", -1);
      }
      else {
         iE_Extensions = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (cell_ID != null) cell_ID.print (_sb, "cell_ID", _level+1);
      if (hWLoadIndicator != null) hWLoadIndicator.print (_sb, "hWLoadIndicator", _level+1);
      if (s1TNLLoadIndicator != null) s1TNLLoadIndicator.print (_sb, "s1TNLLoadIndicator", _level+1);
      if (radioResourceStatus != null) radioResourceStatus.print (_sb, "radioResourceStatus", _level+1);
      if (iE_Extensions != null) iE_Extensions.print (_sb, "iE_Extensions", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
