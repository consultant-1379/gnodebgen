/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NBIOT_RRC_Definitions;

import com.objsys.asn1j.runtime.*;
import asn.lte.generated.EUTRA_RRC_Definitions.PreambleTransMax;
import asn.lte.generated.EUTRA_RRC_Definitions.PowerRampingParameters;

public class RACH_ConfigCommon_NB_r13 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NBIOT_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "RACH-ConfigCommon-NB-r13";
   }

   public PreambleTransMax preambleTransMax_CE_r13 = null;
   public PowerRampingParameters powerRampingParameters_r13;
   public RACH_InfoList_NB_r13 rach_InfoList_r13;
   public Asn1Integer connEstFailOffset_r13;  // optional
   public boolean mV2ExtPresent;
   public PowerRampingParameters_NB_v1450 powerRampingParameters_v1450;  // optional
   public boolean mV3ExtPresent;
   public RACH_InfoList_NB_v1530 rach_InfoList_v1530;  // optional
   public Asn1OpenExt extElem1;

   public RACH_ConfigCommon_NB_r13 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public RACH_ConfigCommon_NB_r13 (
      PreambleTransMax preambleTransMax_CE_r13_,
      PowerRampingParameters powerRampingParameters_r13_,
      RACH_InfoList_NB_r13 rach_InfoList_r13_,
      Asn1Integer connEstFailOffset_r13_,
      PowerRampingParameters_NB_v1450 powerRampingParameters_v1450_,
      RACH_InfoList_NB_v1530 rach_InfoList_v1530_
   ) {
      super();
      preambleTransMax_CE_r13 = preambleTransMax_CE_r13_;
      powerRampingParameters_r13 = powerRampingParameters_r13_;
      rach_InfoList_r13 = rach_InfoList_r13_;
      connEstFailOffset_r13 = connEstFailOffset_r13_;
      powerRampingParameters_v1450 = powerRampingParameters_v1450_;
      rach_InfoList_v1530 = rach_InfoList_v1530_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public RACH_ConfigCommon_NB_r13 (
      PreambleTransMax preambleTransMax_CE_r13_,
      PowerRampingParameters powerRampingParameters_r13_,
      RACH_InfoList_NB_r13 rach_InfoList_r13_
   ) {
      super();
      preambleTransMax_CE_r13 = preambleTransMax_CE_r13_;
      powerRampingParameters_r13 = powerRampingParameters_r13_;
      rach_InfoList_r13 = rach_InfoList_r13_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public RACH_ConfigCommon_NB_r13 (PreambleTransMax preambleTransMax_CE_r13_,
      PowerRampingParameters powerRampingParameters_r13_,
      RACH_InfoList_NB_r13 rach_InfoList_r13_,
      long connEstFailOffset_r13_,
      PowerRampingParameters_NB_v1450 powerRampingParameters_v1450_,
      RACH_InfoList_NB_v1530 rach_InfoList_v1530_
   ) {
      super();
      preambleTransMax_CE_r13 = preambleTransMax_CE_r13_;
      powerRampingParameters_r13 = powerRampingParameters_r13_;
      rach_InfoList_r13 = rach_InfoList_r13_;
      connEstFailOffset_r13 = new Asn1Integer (connEstFailOffset_r13_);
      powerRampingParameters_v1450 = powerRampingParameters_v1450_;
      rach_InfoList_v1530 = rach_InfoList_v1530_;
   }

   public void init () {
      preambleTransMax_CE_r13 = null;
      powerRampingParameters_r13 = null;
      rach_InfoList_r13 = null;
      connEstFailOffset_r13 = null;
      powerRampingParameters_v1450 = null;
      rach_InfoList_v1530 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return preambleTransMax_CE_r13;
         case 1: return powerRampingParameters_r13;
         case 2: return rach_InfoList_r13;
         case 3: return connEstFailOffset_r13;
         case 4: return powerRampingParameters_v1450;
         case 5: return rach_InfoList_v1530;
         case 6: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "preambleTransMax-CE-r13";
         case 1: return "powerRampingParameters-r13";
         case 2: return "rach-InfoList-r13";
         case 3: return "connEstFailOffset-r13";
         case 4: return "powerRampingParameters-v1450";
         case 5: return "rach-InfoList-v1530";
         case 6: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean connEstFailOffset_r13Present = buffer.decodeBit ("connEstFailOffset_r13Present");

      // decode preambleTransMax_CE_r13

      buffer.getContext().eventDispatcher.startElement("preambleTransMax_CE_r13", -1);

      {
         int tval = PreambleTransMax.decodeEnumValue (buffer);
         preambleTransMax_CE_r13 = PreambleTransMax.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("preambleTransMax_CE_r13", -1);

      // decode powerRampingParameters_r13

      buffer.getContext().eventDispatcher.startElement("powerRampingParameters_r13", -1);

      powerRampingParameters_r13 = new PowerRampingParameters();
      powerRampingParameters_r13.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("powerRampingParameters_r13", -1);

      // decode rach_InfoList_r13

      buffer.getContext().eventDispatcher.startElement("rach_InfoList_r13", -1);

      rach_InfoList_r13 = new RACH_InfoList_NB_r13();
      rach_InfoList_r13.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("rach_InfoList_r13", -1);

      // decode connEstFailOffset_r13

      if (connEstFailOffset_r13Present) {
         buffer.getContext().eventDispatcher.startElement("connEstFailOffset_r13", -1);

         connEstFailOffset_r13 = new Asn1Integer();
         connEstFailOffset_r13.decode (buffer, 0, 15);

         buffer.invokeCharacters(connEstFailOffset_r13.toString());
         buffer.getContext().eventDispatcher.endElement("connEstFailOffset_r13", -1);
      }
      else {
         connEstFailOffset_r13 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean powerRampingParameters_v1450Present = buffer.decodeBit ("powerRampingParameters_v1450Present");

            // decode powerRampingParameters_v1450

            if (powerRampingParameters_v1450Present) {
               buffer.getContext().eventDispatcher.startElement("powerRampingParameters_v1450", -1);

               powerRampingParameters_v1450 = new PowerRampingParameters_NB_v1450();
               powerRampingParameters_v1450.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("powerRampingParameters_v1450", -1);
            }
            else {
               powerRampingParameters_v1450 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean rach_InfoList_v1530Present = buffer.decodeBit ("rach_InfoList_v1530Present");

            // decode rach_InfoList_v1530

            if (rach_InfoList_v1530Present) {
               buffer.getContext().eventDispatcher.startElement("rach_InfoList_v1530", -1);

               rach_InfoList_v1530 = new RACH_InfoList_NB_v1530();
               rach_InfoList_v1530.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("rach_InfoList_v1530", -1);
            }
            else {
               rach_InfoList_v1530 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (preambleTransMax_CE_r13 != null) preambleTransMax_CE_r13.print (_sb, "preambleTransMax_CE_r13", _level+1);
      if (powerRampingParameters_r13 != null) powerRampingParameters_r13.print (_sb, "powerRampingParameters_r13", _level+1);
      if (rach_InfoList_r13 != null) rach_InfoList_r13.print (_sb, "rach_InfoList_r13", _level+1);
      if (connEstFailOffset_r13 != null) connEstFailOffset_r13.print (_sb, "connEstFailOffset_r13", _level+1);
      if (powerRampingParameters_v1450 != null) powerRampingParameters_v1450.print (_sb, "powerRampingParameters_v1450", _level+1);
      if (rach_InfoList_v1530 != null) rach_InfoList_v1530.print (_sb, "rach_InfoList_v1530", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
