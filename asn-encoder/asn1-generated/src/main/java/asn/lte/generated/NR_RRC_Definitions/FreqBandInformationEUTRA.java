/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class FreqBandInformationEUTRA extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "FreqBandInformationEUTRA";
   }

   public FreqBandIndicatorEUTRA bandEUTRA;
   public CA_BandwidthClassEUTRA ca_BandwidthClassDL_EUTRA = null;  // optional
   public CA_BandwidthClassEUTRA ca_BandwidthClassUL_EUTRA = null;  // optional

   public FreqBandInformationEUTRA () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public FreqBandInformationEUTRA (
      FreqBandIndicatorEUTRA bandEUTRA_,
      CA_BandwidthClassEUTRA ca_BandwidthClassDL_EUTRA_,
      CA_BandwidthClassEUTRA ca_BandwidthClassUL_EUTRA_
   ) {
      super();
      bandEUTRA = bandEUTRA_;
      ca_BandwidthClassDL_EUTRA = ca_BandwidthClassDL_EUTRA_;
      ca_BandwidthClassUL_EUTRA = ca_BandwidthClassUL_EUTRA_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public FreqBandInformationEUTRA (
      FreqBandIndicatorEUTRA bandEUTRA_
   ) {
      super();
      bandEUTRA = bandEUTRA_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public FreqBandInformationEUTRA (long bandEUTRA_,
      CA_BandwidthClassEUTRA ca_BandwidthClassDL_EUTRA_,
      CA_BandwidthClassEUTRA ca_BandwidthClassUL_EUTRA_
   ) {
      super();
      bandEUTRA = new FreqBandIndicatorEUTRA (bandEUTRA_);
      ca_BandwidthClassDL_EUTRA = ca_BandwidthClassDL_EUTRA_;
      ca_BandwidthClassUL_EUTRA = ca_BandwidthClassUL_EUTRA_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public FreqBandInformationEUTRA (
      long bandEUTRA_
   ) {
      super();
      bandEUTRA = new FreqBandIndicatorEUTRA (bandEUTRA_);
   }

   public void init () {
      bandEUTRA = null;
      ca_BandwidthClassDL_EUTRA = null;
      ca_BandwidthClassUL_EUTRA = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return bandEUTRA;
         case 1: return ca_BandwidthClassDL_EUTRA;
         case 2: return ca_BandwidthClassUL_EUTRA;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "bandEUTRA";
         case 1: return "ca-BandwidthClassDL-EUTRA";
         case 2: return "ca-BandwidthClassUL-EUTRA";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean ca_BandwidthClassDL_EUTRAPresent = buffer.decodeBit ("ca_BandwidthClassDL_EUTRAPresent");
      boolean ca_BandwidthClassUL_EUTRAPresent = buffer.decodeBit ("ca_BandwidthClassUL_EUTRAPresent");

      // decode bandEUTRA

      buffer.getContext().eventDispatcher.startElement("bandEUTRA", -1);

      bandEUTRA = new FreqBandIndicatorEUTRA();
      bandEUTRA.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("bandEUTRA", -1);

      // decode ca_BandwidthClassDL_EUTRA

      if (ca_BandwidthClassDL_EUTRAPresent) {
         buffer.getContext().eventDispatcher.startElement("ca_BandwidthClassDL_EUTRA", -1);

         int tval = CA_BandwidthClassEUTRA.decodeEnumValue (buffer);
         ca_BandwidthClassDL_EUTRA = CA_BandwidthClassEUTRA.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("ca_BandwidthClassDL_EUTRA", -1);
      }
      else {
         ca_BandwidthClassDL_EUTRA = null;
      }

      // decode ca_BandwidthClassUL_EUTRA

      if (ca_BandwidthClassUL_EUTRAPresent) {
         buffer.getContext().eventDispatcher.startElement("ca_BandwidthClassUL_EUTRA", -1);

         int tval = CA_BandwidthClassEUTRA.decodeEnumValue (buffer);
         ca_BandwidthClassUL_EUTRA = CA_BandwidthClassEUTRA.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("ca_BandwidthClassUL_EUTRA", -1);
      }
      else {
         ca_BandwidthClassUL_EUTRA = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (bandEUTRA != null) bandEUTRA.print (_sb, "bandEUTRA", _level+1);
      if (ca_BandwidthClassDL_EUTRA != null) ca_BandwidthClassDL_EUTRA.print (_sb, "ca_BandwidthClassDL_EUTRA", _level+1);
      if (ca_BandwidthClassUL_EUTRA != null) ca_BandwidthClassUL_EUTRA.print (_sb, "ca_BandwidthClassUL_EUTRA", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
