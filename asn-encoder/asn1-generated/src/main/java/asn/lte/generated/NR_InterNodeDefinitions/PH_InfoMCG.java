/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_InterNodeDefinitions;

import com.objsys.asn1j.runtime.*;
import asn.lte.generated.NR_RRC_Definitions.ServCellIndex;

public class PH_InfoMCG extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_InterNodeDefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "PH-InfoMCG";
   }

   public ServCellIndex servCellIndex;
   public PH_UplinkCarrierMCG ph_Uplink;
   public PH_UplinkCarrierMCG ph_SupplementaryUplink;  // optional
   public Asn1OpenExt extElem1;

   public PH_InfoMCG () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public PH_InfoMCG (
      ServCellIndex servCellIndex_,
      PH_UplinkCarrierMCG ph_Uplink_,
      PH_UplinkCarrierMCG ph_SupplementaryUplink_
   ) {
      super();
      servCellIndex = servCellIndex_;
      ph_Uplink = ph_Uplink_;
      ph_SupplementaryUplink = ph_SupplementaryUplink_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public PH_InfoMCG (
      ServCellIndex servCellIndex_,
      PH_UplinkCarrierMCG ph_Uplink_
   ) {
      super();
      servCellIndex = servCellIndex_;
      ph_Uplink = ph_Uplink_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public PH_InfoMCG (long servCellIndex_,
      PH_UplinkCarrierMCG ph_Uplink_,
      PH_UplinkCarrierMCG ph_SupplementaryUplink_
   ) {
      super();
      servCellIndex = new ServCellIndex (servCellIndex_);
      ph_Uplink = ph_Uplink_;
      ph_SupplementaryUplink = ph_SupplementaryUplink_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public PH_InfoMCG (
      long servCellIndex_,
      PH_UplinkCarrierMCG ph_Uplink_
   ) {
      super();
      servCellIndex = new ServCellIndex (servCellIndex_);
      ph_Uplink = ph_Uplink_;
   }

   public void init () {
      servCellIndex = null;
      ph_Uplink = null;
      ph_SupplementaryUplink = null;
      extElem1 = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return servCellIndex;
         case 1: return ph_Uplink;
         case 2: return ph_SupplementaryUplink;
         case 3: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "servCellIndex";
         case 1: return "ph-Uplink";
         case 2: return "ph-SupplementaryUplink";
         case 3: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean ph_SupplementaryUplinkPresent = buffer.decodeBit ("ph_SupplementaryUplinkPresent");

      // decode servCellIndex

      buffer.getContext().eventDispatcher.startElement("servCellIndex", -1);

      servCellIndex = new ServCellIndex();
      servCellIndex.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("servCellIndex", -1);

      // decode ph_Uplink

      buffer.getContext().eventDispatcher.startElement("ph_Uplink", -1);

      ph_Uplink = new PH_UplinkCarrierMCG();
      ph_Uplink.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("ph_Uplink", -1);

      // decode ph_SupplementaryUplink

      if (ph_SupplementaryUplinkPresent) {
         buffer.getContext().eventDispatcher.startElement("ph_SupplementaryUplink", -1);

         ph_SupplementaryUplink = new PH_UplinkCarrierMCG();
         ph_SupplementaryUplink.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ph_SupplementaryUplink", -1);
      }
      else {
         ph_SupplementaryUplink = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (servCellIndex != null) servCellIndex.print (_sb, "servCellIndex", _level+1);
      if (ph_Uplink != null) ph_Uplink.print (_sb, "ph_Uplink", _level+1);
      if (ph_SupplementaryUplink != null) ph_SupplementaryUplink.print (_sb, "ph_SupplementaryUplink", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
