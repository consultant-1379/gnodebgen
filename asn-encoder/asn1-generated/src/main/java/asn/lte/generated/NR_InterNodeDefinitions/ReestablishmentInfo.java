/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_InterNodeDefinitions;

import com.objsys.asn1j.runtime.*;
import asn.lte.generated.NR_RRC_Definitions.PhysCellId;
import asn.lte.generated.NR_RRC_Definitions.ShortMAC_I;

public class ReestablishmentInfo extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_InterNodeDefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ReestablishmentInfo";
   }

   public PhysCellId sourcePhysCellId;
   public ShortMAC_I targetCellShortMAC_I;
   public ReestabNCellInfoList additionalReestabInfoList;  // optional

   public ReestablishmentInfo () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ReestablishmentInfo (
      PhysCellId sourcePhysCellId_,
      ShortMAC_I targetCellShortMAC_I_,
      ReestabNCellInfoList additionalReestabInfoList_
   ) {
      super();
      sourcePhysCellId = sourcePhysCellId_;
      targetCellShortMAC_I = targetCellShortMAC_I_;
      additionalReestabInfoList = additionalReestabInfoList_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public ReestablishmentInfo (
      PhysCellId sourcePhysCellId_,
      ShortMAC_I targetCellShortMAC_I_
   ) {
      super();
      sourcePhysCellId = sourcePhysCellId_;
      targetCellShortMAC_I = targetCellShortMAC_I_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public ReestablishmentInfo (long sourcePhysCellId_,
      ShortMAC_I targetCellShortMAC_I_,
      ReestabNCellInfoList additionalReestabInfoList_
   ) {
      super();
      sourcePhysCellId = new PhysCellId (sourcePhysCellId_);
      targetCellShortMAC_I = targetCellShortMAC_I_;
      additionalReestabInfoList = additionalReestabInfoList_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public ReestablishmentInfo (
      long sourcePhysCellId_,
      ShortMAC_I targetCellShortMAC_I_
   ) {
      super();
      sourcePhysCellId = new PhysCellId (sourcePhysCellId_);
      targetCellShortMAC_I = targetCellShortMAC_I_;
   }

   public void init () {
      sourcePhysCellId = null;
      targetCellShortMAC_I = null;
      additionalReestabInfoList = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return sourcePhysCellId;
         case 1: return targetCellShortMAC_I;
         case 2: return additionalReestabInfoList;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "sourcePhysCellId";
         case 1: return "targetCellShortMAC-I";
         case 2: return "additionalReestabInfoList";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean additionalReestabInfoListPresent = buffer.decodeBit ("additionalReestabInfoListPresent");

      // decode sourcePhysCellId

      buffer.getContext().eventDispatcher.startElement("sourcePhysCellId", -1);

      sourcePhysCellId = new PhysCellId();
      sourcePhysCellId.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("sourcePhysCellId", -1);

      // decode targetCellShortMAC_I

      buffer.getContext().eventDispatcher.startElement("targetCellShortMAC_I", -1);

      targetCellShortMAC_I = new ShortMAC_I();
      targetCellShortMAC_I.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("targetCellShortMAC_I", -1);

      // decode additionalReestabInfoList

      if (additionalReestabInfoListPresent) {
         buffer.getContext().eventDispatcher.startElement("additionalReestabInfoList", -1);

         additionalReestabInfoList = new ReestabNCellInfoList();
         additionalReestabInfoList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("additionalReestabInfoList", -1);
      }
      else {
         additionalReestabInfoList = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (sourcePhysCellId != null) sourcePhysCellId.print (_sb, "sourcePhysCellId", _level+1);
      if (targetCellShortMAC_I != null) targetCellShortMAC_I.print (_sb, "targetCellShortMAC_I", _level+1);
      if (additionalReestabInfoList != null) additionalReestabInfoList.print (_sb, "additionalReestabInfoList", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
