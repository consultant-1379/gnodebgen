/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.X2AP_PDU_Contents;

import com.objsys.asn1j.runtime.*;
import asn.lte.generated.X2AP_IEs.E_RAB_Level_QoS_Parameters;
import asn.lte.generated.X2AP_IEs.ULConfiguration;
import asn.lte.generated.X2AP_IEs.GTPtunnelEndpoint;

public class E_RABs_ToBeModified_SgNBModReqd_Item_SgNBPDCPpresent extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_X2AP_PDU_ContentsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "E-RABs-ToBeModified-SgNBModReqd-Item-SgNBPDCPpresent";
   }

   public E_RAB_Level_QoS_Parameters requested_MCG_E_RAB_Level_QoS_Parameters;  // optional
   public ULConfiguration uL_Configuration;  // optional
   public GTPtunnelEndpoint sgNB_UL_GTP_TEIDatPDCP;  // optional
   public GTPtunnelEndpoint s1_DL_GTP_TEIDatSgNB;  // optional
   public E_RABs_ToBeModified_SgNBModReqd_Item_SgNBPDCPpresent_iE_Extensions iE_Extensions;  // optional
   public Asn1OpenExt extElem1;

   public E_RABs_ToBeModified_SgNBModReqd_Item_SgNBPDCPpresent () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public E_RABs_ToBeModified_SgNBModReqd_Item_SgNBPDCPpresent (
      E_RAB_Level_QoS_Parameters requested_MCG_E_RAB_Level_QoS_Parameters_,
      ULConfiguration uL_Configuration_,
      GTPtunnelEndpoint sgNB_UL_GTP_TEIDatPDCP_,
      GTPtunnelEndpoint s1_DL_GTP_TEIDatSgNB_,
      E_RABs_ToBeModified_SgNBModReqd_Item_SgNBPDCPpresent_iE_Extensions iE_Extensions_
   ) {
      super();
      requested_MCG_E_RAB_Level_QoS_Parameters = requested_MCG_E_RAB_Level_QoS_Parameters_;
      uL_Configuration = uL_Configuration_;
      sgNB_UL_GTP_TEIDatPDCP = sgNB_UL_GTP_TEIDatPDCP_;
      s1_DL_GTP_TEIDatSgNB = s1_DL_GTP_TEIDatSgNB_;
      iE_Extensions = iE_Extensions_;
   }

   public void init () {
      requested_MCG_E_RAB_Level_QoS_Parameters = null;
      uL_Configuration = null;
      sgNB_UL_GTP_TEIDatPDCP = null;
      s1_DL_GTP_TEIDatSgNB = null;
      iE_Extensions = null;
      extElem1 = null;
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return requested_MCG_E_RAB_Level_QoS_Parameters;
         case 1: return uL_Configuration;
         case 2: return sgNB_UL_GTP_TEIDatPDCP;
         case 3: return s1_DL_GTP_TEIDatSgNB;
         case 4: return iE_Extensions;
         case 5: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "requested-MCG-E-RAB-Level-QoS-Parameters";
         case 1: return "uL-Configuration";
         case 2: return "sgNB-UL-GTP-TEIDatPDCP";
         case 3: return "s1-DL-GTP-TEIDatSgNB";
         case 4: return "iE-Extensions";
         case 5: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean requested_MCG_E_RAB_Level_QoS_ParametersPresent = buffer.decodeBit ("requested_MCG_E_RAB_Level_QoS_ParametersPresent");
      boolean uL_ConfigurationPresent = buffer.decodeBit ("uL_ConfigurationPresent");
      boolean sgNB_UL_GTP_TEIDatPDCPPresent = buffer.decodeBit ("sgNB_UL_GTP_TEIDatPDCPPresent");
      boolean s1_DL_GTP_TEIDatSgNBPresent = buffer.decodeBit ("s1_DL_GTP_TEIDatSgNBPresent");
      boolean iE_ExtensionsPresent = buffer.decodeBit ("iE_ExtensionsPresent");

      // decode requested_MCG_E_RAB_Level_QoS_Parameters

      if (requested_MCG_E_RAB_Level_QoS_ParametersPresent) {
         buffer.getContext().eventDispatcher.startElement("requested_MCG_E_RAB_Level_QoS_Parameters", -1);

         requested_MCG_E_RAB_Level_QoS_Parameters = new E_RAB_Level_QoS_Parameters();
         requested_MCG_E_RAB_Level_QoS_Parameters.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("requested_MCG_E_RAB_Level_QoS_Parameters", -1);
      }
      else {
         requested_MCG_E_RAB_Level_QoS_Parameters = null;
      }

      // decode uL_Configuration

      if (uL_ConfigurationPresent) {
         buffer.getContext().eventDispatcher.startElement("uL_Configuration", -1);

         uL_Configuration = new ULConfiguration();
         uL_Configuration.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("uL_Configuration", -1);
      }
      else {
         uL_Configuration = null;
      }

      // decode sgNB_UL_GTP_TEIDatPDCP

      if (sgNB_UL_GTP_TEIDatPDCPPresent) {
         buffer.getContext().eventDispatcher.startElement("sgNB_UL_GTP_TEIDatPDCP", -1);

         sgNB_UL_GTP_TEIDatPDCP = new GTPtunnelEndpoint();
         sgNB_UL_GTP_TEIDatPDCP.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sgNB_UL_GTP_TEIDatPDCP", -1);
      }
      else {
         sgNB_UL_GTP_TEIDatPDCP = null;
      }

      // decode s1_DL_GTP_TEIDatSgNB

      if (s1_DL_GTP_TEIDatSgNBPresent) {
         buffer.getContext().eventDispatcher.startElement("s1_DL_GTP_TEIDatSgNB", -1);

         s1_DL_GTP_TEIDatSgNB = new GTPtunnelEndpoint();
         s1_DL_GTP_TEIDatSgNB.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("s1_DL_GTP_TEIDatSgNB", -1);
      }
      else {
         s1_DL_GTP_TEIDatSgNB = null;
      }

      // decode iE_Extensions

      if (iE_ExtensionsPresent) {
         buffer.getContext().eventDispatcher.startElement("iE_Extensions", -1);

         iE_Extensions = new E_RABs_ToBeModified_SgNBModReqd_Item_SgNBPDCPpresent_iE_Extensions();
         iE_Extensions.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("iE_Extensions", -1);
      }
      else {
         iE_Extensions = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (requested_MCG_E_RAB_Level_QoS_Parameters != null) requested_MCG_E_RAB_Level_QoS_Parameters.print (_sb, "requested_MCG_E_RAB_Level_QoS_Parameters", _level+1);
      if (uL_Configuration != null) uL_Configuration.print (_sb, "uL_Configuration", _level+1);
      if (sgNB_UL_GTP_TEIDatPDCP != null) sgNB_UL_GTP_TEIDatPDCP.print (_sb, "sgNB_UL_GTP_TEIDatPDCP", _level+1);
      if (s1_DL_GTP_TEIDatSgNB != null) s1_DL_GTP_TEIDatSgNB.print (_sb, "s1_DL_GTP_TEIDatSgNB", _level+1);
      if (iE_Extensions != null) iE_Extensions.print (_sb, "iE_Extensions", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
