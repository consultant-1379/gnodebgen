/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SystemInformationBlockType5 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SystemInformationBlockType5";
   }

   public InterFreqCarrierFreqList interFreqCarrierFreqList;
   public SystemInformationBlockType5_v8h0_IEs lateNonCriticalExtension;  // optional
   public boolean mV3ExtPresent;
   public InterFreqCarrierFreqList_v1250 interFreqCarrierFreqList_v1250;  // optional
   public InterFreqCarrierFreqListExt_r12 interFreqCarrierFreqListExt_r12;  // optional
   public boolean mV4ExtPresent;
   public InterFreqCarrierFreqListExt_v1280 interFreqCarrierFreqListExt_v1280;  // optional
   public boolean mV5ExtPresent;
   public InterFreqCarrierFreqList_v1310 interFreqCarrierFreqList_v1310;  // optional
   public InterFreqCarrierFreqListExt_v1310 interFreqCarrierFreqListExt_v1310;  // optional
   public boolean mV6ExtPresent;
   public InterFreqCarrierFreqList_v1350 interFreqCarrierFreqList_v1350;  // optional
   public InterFreqCarrierFreqListExt_v1350 interFreqCarrierFreqListExt_v1350;  // optional
   public boolean mV7ExtPresent;
   public InterFreqCarrierFreqListExt_v1360 interFreqCarrierFreqListExt_v1360;  // optional
   public boolean mV8ExtPresent;
   public Asn1Integer scptm_FreqOffset_r14;  // optional
   public boolean mV9ExtPresent;
   public InterFreqCarrierFreqList_v1530 interFreqCarrierFreqList_v1530;  // optional
   public InterFreqCarrierFreqListExt_v1530 interFreqCarrierFreqListExt_v1530;  // optional
   public MeasIdleConfigSIB_r15 measIdleConfigSIB_r15;  // optional
   public Asn1OpenExt extElem1;

   public SystemInformationBlockType5 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SystemInformationBlockType5 (
      InterFreqCarrierFreqList interFreqCarrierFreqList_,
      SystemInformationBlockType5_v8h0_IEs lateNonCriticalExtension_,
      InterFreqCarrierFreqList_v1250 interFreqCarrierFreqList_v1250_,
      InterFreqCarrierFreqListExt_r12 interFreqCarrierFreqListExt_r12_,
      InterFreqCarrierFreqListExt_v1280 interFreqCarrierFreqListExt_v1280_,
      InterFreqCarrierFreqList_v1310 interFreqCarrierFreqList_v1310_,
      InterFreqCarrierFreqListExt_v1310 interFreqCarrierFreqListExt_v1310_,
      InterFreqCarrierFreqList_v1350 interFreqCarrierFreqList_v1350_,
      InterFreqCarrierFreqListExt_v1350 interFreqCarrierFreqListExt_v1350_,
      InterFreqCarrierFreqListExt_v1360 interFreqCarrierFreqListExt_v1360_,
      Asn1Integer scptm_FreqOffset_r14_,
      InterFreqCarrierFreqList_v1530 interFreqCarrierFreqList_v1530_,
      InterFreqCarrierFreqListExt_v1530 interFreqCarrierFreqListExt_v1530_,
      MeasIdleConfigSIB_r15 measIdleConfigSIB_r15_
   ) {
      super();
      interFreqCarrierFreqList = interFreqCarrierFreqList_;
      lateNonCriticalExtension = lateNonCriticalExtension_;
      interFreqCarrierFreqList_v1250 = interFreqCarrierFreqList_v1250_;
      interFreqCarrierFreqListExt_r12 = interFreqCarrierFreqListExt_r12_;
      interFreqCarrierFreqListExt_v1280 = interFreqCarrierFreqListExt_v1280_;
      interFreqCarrierFreqList_v1310 = interFreqCarrierFreqList_v1310_;
      interFreqCarrierFreqListExt_v1310 = interFreqCarrierFreqListExt_v1310_;
      interFreqCarrierFreqList_v1350 = interFreqCarrierFreqList_v1350_;
      interFreqCarrierFreqListExt_v1350 = interFreqCarrierFreqListExt_v1350_;
      interFreqCarrierFreqListExt_v1360 = interFreqCarrierFreqListExt_v1360_;
      scptm_FreqOffset_r14 = scptm_FreqOffset_r14_;
      interFreqCarrierFreqList_v1530 = interFreqCarrierFreqList_v1530_;
      interFreqCarrierFreqListExt_v1530 = interFreqCarrierFreqListExt_v1530_;
      measIdleConfigSIB_r15 = measIdleConfigSIB_r15_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SystemInformationBlockType5 (
      InterFreqCarrierFreqList interFreqCarrierFreqList_
   ) {
      super();
      interFreqCarrierFreqList = interFreqCarrierFreqList_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SystemInformationBlockType5 (InterFreqCarrierFreqList interFreqCarrierFreqList_,
      SystemInformationBlockType5_v8h0_IEs lateNonCriticalExtension_,
      InterFreqCarrierFreqList_v1250 interFreqCarrierFreqList_v1250_,
      InterFreqCarrierFreqListExt_r12 interFreqCarrierFreqListExt_r12_,
      InterFreqCarrierFreqListExt_v1280 interFreqCarrierFreqListExt_v1280_,
      InterFreqCarrierFreqList_v1310 interFreqCarrierFreqList_v1310_,
      InterFreqCarrierFreqListExt_v1310 interFreqCarrierFreqListExt_v1310_,
      InterFreqCarrierFreqList_v1350 interFreqCarrierFreqList_v1350_,
      InterFreqCarrierFreqListExt_v1350 interFreqCarrierFreqListExt_v1350_,
      InterFreqCarrierFreqListExt_v1360 interFreqCarrierFreqListExt_v1360_,
      long scptm_FreqOffset_r14_,
      InterFreqCarrierFreqList_v1530 interFreqCarrierFreqList_v1530_,
      InterFreqCarrierFreqListExt_v1530 interFreqCarrierFreqListExt_v1530_,
      MeasIdleConfigSIB_r15 measIdleConfigSIB_r15_
   ) {
      super();
      interFreqCarrierFreqList = interFreqCarrierFreqList_;
      lateNonCriticalExtension = lateNonCriticalExtension_;
      interFreqCarrierFreqList_v1250 = interFreqCarrierFreqList_v1250_;
      interFreqCarrierFreqListExt_r12 = interFreqCarrierFreqListExt_r12_;
      interFreqCarrierFreqListExt_v1280 = interFreqCarrierFreqListExt_v1280_;
      interFreqCarrierFreqList_v1310 = interFreqCarrierFreqList_v1310_;
      interFreqCarrierFreqListExt_v1310 = interFreqCarrierFreqListExt_v1310_;
      interFreqCarrierFreqList_v1350 = interFreqCarrierFreqList_v1350_;
      interFreqCarrierFreqListExt_v1350 = interFreqCarrierFreqListExt_v1350_;
      interFreqCarrierFreqListExt_v1360 = interFreqCarrierFreqListExt_v1360_;
      scptm_FreqOffset_r14 = new Asn1Integer (scptm_FreqOffset_r14_);
      interFreqCarrierFreqList_v1530 = interFreqCarrierFreqList_v1530_;
      interFreqCarrierFreqListExt_v1530 = interFreqCarrierFreqListExt_v1530_;
      measIdleConfigSIB_r15 = measIdleConfigSIB_r15_;
   }

   public void init () {
      interFreqCarrierFreqList = null;
      lateNonCriticalExtension = null;
      interFreqCarrierFreqList_v1250 = null;
      interFreqCarrierFreqListExt_r12 = null;
      interFreqCarrierFreqListExt_v1280 = null;
      interFreqCarrierFreqList_v1310 = null;
      interFreqCarrierFreqListExt_v1310 = null;
      interFreqCarrierFreqList_v1350 = null;
      interFreqCarrierFreqListExt_v1350 = null;
      interFreqCarrierFreqListExt_v1360 = null;
      scptm_FreqOffset_r14 = null;
      interFreqCarrierFreqList_v1530 = null;
      interFreqCarrierFreqListExt_v1530 = null;
      measIdleConfigSIB_r15 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 15; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return interFreqCarrierFreqList;
         case 1: return lateNonCriticalExtension;
         case 2: return interFreqCarrierFreqList_v1250;
         case 3: return interFreqCarrierFreqListExt_r12;
         case 4: return interFreqCarrierFreqListExt_v1280;
         case 5: return interFreqCarrierFreqList_v1310;
         case 6: return interFreqCarrierFreqListExt_v1310;
         case 7: return interFreqCarrierFreqList_v1350;
         case 8: return interFreqCarrierFreqListExt_v1350;
         case 9: return interFreqCarrierFreqListExt_v1360;
         case 10: return scptm_FreqOffset_r14;
         case 11: return interFreqCarrierFreqList_v1530;
         case 12: return interFreqCarrierFreqListExt_v1530;
         case 13: return measIdleConfigSIB_r15;
         case 14: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "interFreqCarrierFreqList";
         case 1: return "lateNonCriticalExtension";
         case 2: return "interFreqCarrierFreqList-v1250";
         case 3: return "interFreqCarrierFreqListExt-r12";
         case 4: return "interFreqCarrierFreqListExt-v1280";
         case 5: return "interFreqCarrierFreqList-v1310";
         case 6: return "interFreqCarrierFreqListExt-v1310";
         case 7: return "interFreqCarrierFreqList-v1350";
         case 8: return "interFreqCarrierFreqListExt-v1350";
         case 9: return "interFreqCarrierFreqListExt-v1360";
         case 10: return "scptm-FreqOffset-r14";
         case 11: return "interFreqCarrierFreqList-v1530";
         case 12: return "interFreqCarrierFreqListExt-v1530";
         case 13: return "measIdleConfigSIB-r15";
         case 14: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      // decode interFreqCarrierFreqList

      buffer.getContext().eventDispatcher.startElement("interFreqCarrierFreqList", -1);

      interFreqCarrierFreqList = new InterFreqCarrierFreqList();
      interFreqCarrierFreqList.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("interFreqCarrierFreqList", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("lateNonCriticalExtensionPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV4ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV5ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV6ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV7ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV8ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV9ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode lateNonCriticalExtension

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("lateNonCriticalExtension", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            /* decode contained type */
            Asn1OctetString lateNonCriticalExtension_outer = new Asn1OctetString();
            lateNonCriticalExtension_outer.decode (buffer);

            if (lateNonCriticalExtension_outer.value == null) {
               throw new Asn1Exception("contained type's complete encoding is empty");
            }

            Asn1PerDecodeBuffer savedBuffer = buffer;
            buffer = new Asn1PerDecodeBuffer (lateNonCriticalExtension_outer.value, buffer.isAligned());
            buffer.setEventHandlerList( savedBuffer );

            lateNonCriticalExtension = new SystemInformationBlockType5_v8h0_IEs();
            lateNonCriticalExtension.decode (buffer);

            buffer = savedBuffer;
            buffer.moveBitCursor (bitidx);

            buffer.getContext().eventDispatcher.endElement("lateNonCriticalExtension", -1);

         }
         else {
            lateNonCriticalExtension = null;
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean interFreqCarrierFreqList_v1250Present = buffer.decodeBit ("interFreqCarrierFreqList_v1250Present");

            boolean interFreqCarrierFreqListExt_r12Present = buffer.decodeBit ("interFreqCarrierFreqListExt_r12Present");

            // decode interFreqCarrierFreqList_v1250

            if (interFreqCarrierFreqList_v1250Present) {
               buffer.getContext().eventDispatcher.startElement("interFreqCarrierFreqList_v1250", -1);

               interFreqCarrierFreqList_v1250 = new InterFreqCarrierFreqList_v1250();
               interFreqCarrierFreqList_v1250.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("interFreqCarrierFreqList_v1250", -1);
            }
            else {
               interFreqCarrierFreqList_v1250 = null;
            }

            // decode interFreqCarrierFreqListExt_r12

            if (interFreqCarrierFreqListExt_r12Present) {
               buffer.getContext().eventDispatcher.startElement("interFreqCarrierFreqListExt_r12", -1);

               interFreqCarrierFreqListExt_r12 = new InterFreqCarrierFreqListExt_r12();
               interFreqCarrierFreqListExt_r12.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("interFreqCarrierFreqListExt_r12", -1);
            }
            else {
               interFreqCarrierFreqListExt_r12 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV4ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean interFreqCarrierFreqListExt_v1280Present = buffer.decodeBit ("interFreqCarrierFreqListExt_v1280Present");

            // decode interFreqCarrierFreqListExt_v1280

            if (interFreqCarrierFreqListExt_v1280Present) {
               buffer.getContext().eventDispatcher.startElement("interFreqCarrierFreqListExt_v1280", -1);

               interFreqCarrierFreqListExt_v1280 = new InterFreqCarrierFreqListExt_v1280();
               interFreqCarrierFreqListExt_v1280.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("interFreqCarrierFreqListExt_v1280", -1);
            }
            else {
               interFreqCarrierFreqListExt_v1280 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV5ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean interFreqCarrierFreqList_v1310Present = buffer.decodeBit ("interFreqCarrierFreqList_v1310Present");

            boolean interFreqCarrierFreqListExt_v1310Present = buffer.decodeBit ("interFreqCarrierFreqListExt_v1310Present");

            // decode interFreqCarrierFreqList_v1310

            if (interFreqCarrierFreqList_v1310Present) {
               buffer.getContext().eventDispatcher.startElement("interFreqCarrierFreqList_v1310", -1);

               interFreqCarrierFreqList_v1310 = new InterFreqCarrierFreqList_v1310();
               interFreqCarrierFreqList_v1310.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("interFreqCarrierFreqList_v1310", -1);
            }
            else {
               interFreqCarrierFreqList_v1310 = null;
            }

            // decode interFreqCarrierFreqListExt_v1310

            if (interFreqCarrierFreqListExt_v1310Present) {
               buffer.getContext().eventDispatcher.startElement("interFreqCarrierFreqListExt_v1310", -1);

               interFreqCarrierFreqListExt_v1310 = new InterFreqCarrierFreqListExt_v1310();
               interFreqCarrierFreqListExt_v1310.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("interFreqCarrierFreqListExt_v1310", -1);
            }
            else {
               interFreqCarrierFreqListExt_v1310 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV6ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean interFreqCarrierFreqList_v1350Present = buffer.decodeBit ("interFreqCarrierFreqList_v1350Present");

            boolean interFreqCarrierFreqListExt_v1350Present = buffer.decodeBit ("interFreqCarrierFreqListExt_v1350Present");

            // decode interFreqCarrierFreqList_v1350

            if (interFreqCarrierFreqList_v1350Present) {
               buffer.getContext().eventDispatcher.startElement("interFreqCarrierFreqList_v1350", -1);

               interFreqCarrierFreqList_v1350 = new InterFreqCarrierFreqList_v1350();
               interFreqCarrierFreqList_v1350.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("interFreqCarrierFreqList_v1350", -1);
            }
            else {
               interFreqCarrierFreqList_v1350 = null;
            }

            // decode interFreqCarrierFreqListExt_v1350

            if (interFreqCarrierFreqListExt_v1350Present) {
               buffer.getContext().eventDispatcher.startElement("interFreqCarrierFreqListExt_v1350", -1);

               interFreqCarrierFreqListExt_v1350 = new InterFreqCarrierFreqListExt_v1350();
               interFreqCarrierFreqListExt_v1350.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("interFreqCarrierFreqListExt_v1350", -1);
            }
            else {
               interFreqCarrierFreqListExt_v1350 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV7ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean interFreqCarrierFreqListExt_v1360Present = buffer.decodeBit ("interFreqCarrierFreqListExt_v1360Present");

            // decode interFreqCarrierFreqListExt_v1360

            if (interFreqCarrierFreqListExt_v1360Present) {
               buffer.getContext().eventDispatcher.startElement("interFreqCarrierFreqListExt_v1360", -1);

               interFreqCarrierFreqListExt_v1360 = new InterFreqCarrierFreqListExt_v1360();
               interFreqCarrierFreqListExt_v1360.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("interFreqCarrierFreqListExt_v1360", -1);
            }
            else {
               interFreqCarrierFreqListExt_v1360 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV8ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean scptm_FreqOffset_r14Present = buffer.decodeBit ("scptm_FreqOffset_r14Present");

            // decode scptm_FreqOffset_r14

            if (scptm_FreqOffset_r14Present) {
               buffer.getContext().eventDispatcher.startElement("scptm_FreqOffset_r14", -1);

               scptm_FreqOffset_r14 = new Asn1Integer();
               scptm_FreqOffset_r14.decode (buffer, 1, 8);

               buffer.invokeCharacters(scptm_FreqOffset_r14.toString());
               buffer.getContext().eventDispatcher.endElement("scptm_FreqOffset_r14", -1);
            }
            else {
               scptm_FreqOffset_r14 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV9ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean interFreqCarrierFreqList_v1530Present = buffer.decodeBit ("interFreqCarrierFreqList_v1530Present");

            boolean interFreqCarrierFreqListExt_v1530Present = buffer.decodeBit ("interFreqCarrierFreqListExt_v1530Present");

            boolean measIdleConfigSIB_r15Present = buffer.decodeBit ("measIdleConfigSIB_r15Present");

            // decode interFreqCarrierFreqList_v1530

            if (interFreqCarrierFreqList_v1530Present) {
               buffer.getContext().eventDispatcher.startElement("interFreqCarrierFreqList_v1530", -1);

               interFreqCarrierFreqList_v1530 = new InterFreqCarrierFreqList_v1530();
               interFreqCarrierFreqList_v1530.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("interFreqCarrierFreqList_v1530", -1);
            }
            else {
               interFreqCarrierFreqList_v1530 = null;
            }

            // decode interFreqCarrierFreqListExt_v1530

            if (interFreqCarrierFreqListExt_v1530Present) {
               buffer.getContext().eventDispatcher.startElement("interFreqCarrierFreqListExt_v1530", -1);

               interFreqCarrierFreqListExt_v1530 = new InterFreqCarrierFreqListExt_v1530();
               interFreqCarrierFreqListExt_v1530.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("interFreqCarrierFreqListExt_v1530", -1);
            }
            else {
               interFreqCarrierFreqListExt_v1530 = null;
            }

            // decode measIdleConfigSIB_r15

            if (measIdleConfigSIB_r15Present) {
               buffer.getContext().eventDispatcher.startElement("measIdleConfigSIB_r15", -1);

               measIdleConfigSIB_r15 = new MeasIdleConfigSIB_r15();
               measIdleConfigSIB_r15.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("measIdleConfigSIB_r15", -1);
            }
            else {
               measIdleConfigSIB_r15 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (interFreqCarrierFreqList != null) interFreqCarrierFreqList.print (_sb, "interFreqCarrierFreqList", _level+1);
      if (lateNonCriticalExtension != null) lateNonCriticalExtension.print (_sb, "lateNonCriticalExtension", _level+1);
      if (interFreqCarrierFreqList_v1250 != null) interFreqCarrierFreqList_v1250.print (_sb, "interFreqCarrierFreqList_v1250", _level+1);
      if (interFreqCarrierFreqListExt_r12 != null) interFreqCarrierFreqListExt_r12.print (_sb, "interFreqCarrierFreqListExt_r12", _level+1);
      if (interFreqCarrierFreqListExt_v1280 != null) interFreqCarrierFreqListExt_v1280.print (_sb, "interFreqCarrierFreqListExt_v1280", _level+1);
      if (interFreqCarrierFreqList_v1310 != null) interFreqCarrierFreqList_v1310.print (_sb, "interFreqCarrierFreqList_v1310", _level+1);
      if (interFreqCarrierFreqListExt_v1310 != null) interFreqCarrierFreqListExt_v1310.print (_sb, "interFreqCarrierFreqListExt_v1310", _level+1);
      if (interFreqCarrierFreqList_v1350 != null) interFreqCarrierFreqList_v1350.print (_sb, "interFreqCarrierFreqList_v1350", _level+1);
      if (interFreqCarrierFreqListExt_v1350 != null) interFreqCarrierFreqListExt_v1350.print (_sb, "interFreqCarrierFreqListExt_v1350", _level+1);
      if (interFreqCarrierFreqListExt_v1360 != null) interFreqCarrierFreqListExt_v1360.print (_sb, "interFreqCarrierFreqListExt_v1360", _level+1);
      if (scptm_FreqOffset_r14 != null) scptm_FreqOffset_r14.print (_sb, "scptm_FreqOffset_r14", _level+1);
      if (interFreqCarrierFreqList_v1530 != null) interFreqCarrierFreqList_v1530.print (_sb, "interFreqCarrierFreqList_v1530", _level+1);
      if (interFreqCarrierFreqListExt_v1530 != null) interFreqCarrierFreqListExt_v1530.print (_sb, "interFreqCarrierFreqListExt_v1530", _level+1);
      if (measIdleConfigSIB_r15 != null) measIdleConfigSIB_r15.print (_sb, "measIdleConfigSIB_r15", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
