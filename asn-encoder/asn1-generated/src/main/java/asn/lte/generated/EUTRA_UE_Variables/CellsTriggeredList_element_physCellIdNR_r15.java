/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_UE_Variables;

import com.objsys.asn1j.runtime.*;
import asn.lte.generated.EUTRA_RRC_Definitions.ARFCN_ValueNR_r15;
import asn.lte.generated.EUTRA_RRC_Definitions.PhysCellIdNR_r15;

public class CellsTriggeredList_element_physCellIdNR_r15 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_UE_VariablesRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public ARFCN_ValueNR_r15 carrierFreq;
   public PhysCellIdNR_r15 physCellId;
   public SSB_IndexList_r15 rs_IndexList_r15;  // optional

   public CellsTriggeredList_element_physCellIdNR_r15 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CellsTriggeredList_element_physCellIdNR_r15 (
      ARFCN_ValueNR_r15 carrierFreq_,
      PhysCellIdNR_r15 physCellId_,
      SSB_IndexList_r15 rs_IndexList_r15_
   ) {
      super();
      carrierFreq = carrierFreq_;
      physCellId = physCellId_;
      rs_IndexList_r15 = rs_IndexList_r15_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public CellsTriggeredList_element_physCellIdNR_r15 (
      ARFCN_ValueNR_r15 carrierFreq_,
      PhysCellIdNR_r15 physCellId_
   ) {
      super();
      carrierFreq = carrierFreq_;
      physCellId = physCellId_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public CellsTriggeredList_element_physCellIdNR_r15 (long carrierFreq_,
      long physCellId_,
      SSB_IndexList_r15 rs_IndexList_r15_
   ) {
      super();
      carrierFreq = new ARFCN_ValueNR_r15 (carrierFreq_);
      physCellId = new PhysCellIdNR_r15 (physCellId_);
      rs_IndexList_r15 = rs_IndexList_r15_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public CellsTriggeredList_element_physCellIdNR_r15 (
      long carrierFreq_,
      long physCellId_
   ) {
      super();
      carrierFreq = new ARFCN_ValueNR_r15 (carrierFreq_);
      physCellId = new PhysCellIdNR_r15 (physCellId_);
   }

   public void init () {
      carrierFreq = null;
      physCellId = null;
      rs_IndexList_r15 = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return carrierFreq;
         case 1: return physCellId;
         case 2: return rs_IndexList_r15;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "carrierFreq";
         case 1: return "physCellId";
         case 2: return "rs-IndexList-r15";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean rs_IndexList_r15Present = buffer.decodeBit ("rs_IndexList_r15Present");

      // decode carrierFreq

      buffer.getContext().eventDispatcher.startElement("carrierFreq", -1);

      carrierFreq = new ARFCN_ValueNR_r15();
      carrierFreq.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("carrierFreq", -1);

      // decode physCellId

      buffer.getContext().eventDispatcher.startElement("physCellId", -1);

      physCellId = new PhysCellIdNR_r15();
      physCellId.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("physCellId", -1);

      // decode rs_IndexList_r15

      if (rs_IndexList_r15Present) {
         buffer.getContext().eventDispatcher.startElement("rs_IndexList_r15", -1);

         rs_IndexList_r15 = new SSB_IndexList_r15();
         rs_IndexList_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("rs_IndexList_r15", -1);
      }
      else {
         rs_IndexList_r15 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (carrierFreq != null) carrierFreq.print (_sb, "carrierFreq", _level+1);
      if (physCellId != null) physCellId.print (_sb, "physCellId", _level+1);
      if (rs_IndexList_r15 != null) rs_IndexList_r15.print (_sb, "rs_IndexList_r15", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
