/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class AC_BarringPerPLMN_r12 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "AC-BarringPerPLMN-r12";
   }

   public Asn1Integer plmn_IdentityIndex_r12;
   public AC_BarringPerPLMN_r12_ac_BarringInfo_r12 ac_BarringInfo_r12;  // optional
   public AC_BarringPerPLMN_r12_ac_BarringSkipForMMTELVoice_r12 ac_BarringSkipForMMTELVoice_r12 = null;  // optional
   public AC_BarringPerPLMN_r12_ac_BarringSkipForMMTELVideo_r12 ac_BarringSkipForMMTELVideo_r12 = null;  // optional
   public AC_BarringPerPLMN_r12_ac_BarringSkipForSMS_r12 ac_BarringSkipForSMS_r12 = null;  // optional
   public AC_BarringConfig ac_BarringForCSFB_r12;  // optional
   public AC_BarringConfig ssac_BarringForMMTEL_Voice_r12;  // optional
   public AC_BarringConfig ssac_BarringForMMTEL_Video_r12;  // optional

   public AC_BarringPerPLMN_r12 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public AC_BarringPerPLMN_r12 (
      Asn1Integer plmn_IdentityIndex_r12_,
      AC_BarringPerPLMN_r12_ac_BarringInfo_r12 ac_BarringInfo_r12_,
      AC_BarringPerPLMN_r12_ac_BarringSkipForMMTELVoice_r12 ac_BarringSkipForMMTELVoice_r12_,
      AC_BarringPerPLMN_r12_ac_BarringSkipForMMTELVideo_r12 ac_BarringSkipForMMTELVideo_r12_,
      AC_BarringPerPLMN_r12_ac_BarringSkipForSMS_r12 ac_BarringSkipForSMS_r12_,
      AC_BarringConfig ac_BarringForCSFB_r12_,
      AC_BarringConfig ssac_BarringForMMTEL_Voice_r12_,
      AC_BarringConfig ssac_BarringForMMTEL_Video_r12_
   ) {
      super();
      plmn_IdentityIndex_r12 = plmn_IdentityIndex_r12_;
      ac_BarringInfo_r12 = ac_BarringInfo_r12_;
      ac_BarringSkipForMMTELVoice_r12 = ac_BarringSkipForMMTELVoice_r12_;
      ac_BarringSkipForMMTELVideo_r12 = ac_BarringSkipForMMTELVideo_r12_;
      ac_BarringSkipForSMS_r12 = ac_BarringSkipForSMS_r12_;
      ac_BarringForCSFB_r12 = ac_BarringForCSFB_r12_;
      ssac_BarringForMMTEL_Voice_r12 = ssac_BarringForMMTEL_Voice_r12_;
      ssac_BarringForMMTEL_Video_r12 = ssac_BarringForMMTEL_Video_r12_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public AC_BarringPerPLMN_r12 (
      Asn1Integer plmn_IdentityIndex_r12_
   ) {
      super();
      plmn_IdentityIndex_r12 = plmn_IdentityIndex_r12_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public AC_BarringPerPLMN_r12 (long plmn_IdentityIndex_r12_,
      AC_BarringPerPLMN_r12_ac_BarringInfo_r12 ac_BarringInfo_r12_,
      AC_BarringPerPLMN_r12_ac_BarringSkipForMMTELVoice_r12 ac_BarringSkipForMMTELVoice_r12_,
      AC_BarringPerPLMN_r12_ac_BarringSkipForMMTELVideo_r12 ac_BarringSkipForMMTELVideo_r12_,
      AC_BarringPerPLMN_r12_ac_BarringSkipForSMS_r12 ac_BarringSkipForSMS_r12_,
      AC_BarringConfig ac_BarringForCSFB_r12_,
      AC_BarringConfig ssac_BarringForMMTEL_Voice_r12_,
      AC_BarringConfig ssac_BarringForMMTEL_Video_r12_
   ) {
      super();
      plmn_IdentityIndex_r12 = new Asn1Integer (plmn_IdentityIndex_r12_);
      ac_BarringInfo_r12 = ac_BarringInfo_r12_;
      ac_BarringSkipForMMTELVoice_r12 = ac_BarringSkipForMMTELVoice_r12_;
      ac_BarringSkipForMMTELVideo_r12 = ac_BarringSkipForMMTELVideo_r12_;
      ac_BarringSkipForSMS_r12 = ac_BarringSkipForSMS_r12_;
      ac_BarringForCSFB_r12 = ac_BarringForCSFB_r12_;
      ssac_BarringForMMTEL_Voice_r12 = ssac_BarringForMMTEL_Voice_r12_;
      ssac_BarringForMMTEL_Video_r12 = ssac_BarringForMMTEL_Video_r12_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public AC_BarringPerPLMN_r12 (
      long plmn_IdentityIndex_r12_
   ) {
      super();
      plmn_IdentityIndex_r12 = new Asn1Integer (plmn_IdentityIndex_r12_);
   }

   public void init () {
      plmn_IdentityIndex_r12 = null;
      ac_BarringInfo_r12 = null;
      ac_BarringSkipForMMTELVoice_r12 = null;
      ac_BarringSkipForMMTELVideo_r12 = null;
      ac_BarringSkipForSMS_r12 = null;
      ac_BarringForCSFB_r12 = null;
      ssac_BarringForMMTEL_Voice_r12 = null;
      ssac_BarringForMMTEL_Video_r12 = null;
   }

   public int getElementCount() { return 8; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return plmn_IdentityIndex_r12;
         case 1: return ac_BarringInfo_r12;
         case 2: return ac_BarringSkipForMMTELVoice_r12;
         case 3: return ac_BarringSkipForMMTELVideo_r12;
         case 4: return ac_BarringSkipForSMS_r12;
         case 5: return ac_BarringForCSFB_r12;
         case 6: return ssac_BarringForMMTEL_Voice_r12;
         case 7: return ssac_BarringForMMTEL_Video_r12;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "plmn-IdentityIndex-r12";
         case 1: return "ac-BarringInfo-r12";
         case 2: return "ac-BarringSkipForMMTELVoice-r12";
         case 3: return "ac-BarringSkipForMMTELVideo-r12";
         case 4: return "ac-BarringSkipForSMS-r12";
         case 5: return "ac-BarringForCSFB-r12";
         case 6: return "ssac-BarringForMMTEL-Voice-r12";
         case 7: return "ssac-BarringForMMTEL-Video-r12";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean ac_BarringInfo_r12Present = buffer.decodeBit ("ac_BarringInfo_r12Present");
      boolean ac_BarringSkipForMMTELVoice_r12Present = buffer.decodeBit ("ac_BarringSkipForMMTELVoice_r12Present");
      boolean ac_BarringSkipForMMTELVideo_r12Present = buffer.decodeBit ("ac_BarringSkipForMMTELVideo_r12Present");
      boolean ac_BarringSkipForSMS_r12Present = buffer.decodeBit ("ac_BarringSkipForSMS_r12Present");
      boolean ac_BarringForCSFB_r12Present = buffer.decodeBit ("ac_BarringForCSFB_r12Present");
      boolean ssac_BarringForMMTEL_Voice_r12Present = buffer.decodeBit ("ssac_BarringForMMTEL_Voice_r12Present");
      boolean ssac_BarringForMMTEL_Video_r12Present = buffer.decodeBit ("ssac_BarringForMMTEL_Video_r12Present");

      // decode plmn_IdentityIndex_r12

      buffer.getContext().eventDispatcher.startElement("plmn_IdentityIndex_r12", -1);

      plmn_IdentityIndex_r12 = new Asn1Integer();
      plmn_IdentityIndex_r12.decode (buffer, 1, 6);

      buffer.invokeCharacters(plmn_IdentityIndex_r12.toString());
      buffer.getContext().eventDispatcher.endElement("plmn_IdentityIndex_r12", -1);

      // decode ac_BarringInfo_r12

      if (ac_BarringInfo_r12Present) {
         buffer.getContext().eventDispatcher.startElement("ac_BarringInfo_r12", -1);

         ac_BarringInfo_r12 = new AC_BarringPerPLMN_r12_ac_BarringInfo_r12();
         ac_BarringInfo_r12.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ac_BarringInfo_r12", -1);
      }
      else {
         ac_BarringInfo_r12 = null;
      }

      // decode ac_BarringSkipForMMTELVoice_r12

      if (ac_BarringSkipForMMTELVoice_r12Present) {
         buffer.getContext().eventDispatcher.startElement("ac_BarringSkipForMMTELVoice_r12", -1);

         int tval = AC_BarringPerPLMN_r12_ac_BarringSkipForMMTELVoice_r12.decodeEnumValue (buffer);
         ac_BarringSkipForMMTELVoice_r12 = AC_BarringPerPLMN_r12_ac_BarringSkipForMMTELVoice_r12.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("ac_BarringSkipForMMTELVoice_r12", -1);
      }
      else {
         ac_BarringSkipForMMTELVoice_r12 = null;
      }

      // decode ac_BarringSkipForMMTELVideo_r12

      if (ac_BarringSkipForMMTELVideo_r12Present) {
         buffer.getContext().eventDispatcher.startElement("ac_BarringSkipForMMTELVideo_r12", -1);

         int tval = AC_BarringPerPLMN_r12_ac_BarringSkipForMMTELVideo_r12.decodeEnumValue (buffer);
         ac_BarringSkipForMMTELVideo_r12 = AC_BarringPerPLMN_r12_ac_BarringSkipForMMTELVideo_r12.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("ac_BarringSkipForMMTELVideo_r12", -1);
      }
      else {
         ac_BarringSkipForMMTELVideo_r12 = null;
      }

      // decode ac_BarringSkipForSMS_r12

      if (ac_BarringSkipForSMS_r12Present) {
         buffer.getContext().eventDispatcher.startElement("ac_BarringSkipForSMS_r12", -1);

         int tval = AC_BarringPerPLMN_r12_ac_BarringSkipForSMS_r12.decodeEnumValue (buffer);
         ac_BarringSkipForSMS_r12 = AC_BarringPerPLMN_r12_ac_BarringSkipForSMS_r12.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("ac_BarringSkipForSMS_r12", -1);
      }
      else {
         ac_BarringSkipForSMS_r12 = null;
      }

      // decode ac_BarringForCSFB_r12

      if (ac_BarringForCSFB_r12Present) {
         buffer.getContext().eventDispatcher.startElement("ac_BarringForCSFB_r12", -1);

         ac_BarringForCSFB_r12 = new AC_BarringConfig();
         ac_BarringForCSFB_r12.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ac_BarringForCSFB_r12", -1);
      }
      else {
         ac_BarringForCSFB_r12 = null;
      }

      // decode ssac_BarringForMMTEL_Voice_r12

      if (ssac_BarringForMMTEL_Voice_r12Present) {
         buffer.getContext().eventDispatcher.startElement("ssac_BarringForMMTEL_Voice_r12", -1);

         ssac_BarringForMMTEL_Voice_r12 = new AC_BarringConfig();
         ssac_BarringForMMTEL_Voice_r12.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ssac_BarringForMMTEL_Voice_r12", -1);
      }
      else {
         ssac_BarringForMMTEL_Voice_r12 = null;
      }

      // decode ssac_BarringForMMTEL_Video_r12

      if (ssac_BarringForMMTEL_Video_r12Present) {
         buffer.getContext().eventDispatcher.startElement("ssac_BarringForMMTEL_Video_r12", -1);

         ssac_BarringForMMTEL_Video_r12 = new AC_BarringConfig();
         ssac_BarringForMMTEL_Video_r12.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ssac_BarringForMMTEL_Video_r12", -1);
      }
      else {
         ssac_BarringForMMTEL_Video_r12 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (plmn_IdentityIndex_r12 != null) plmn_IdentityIndex_r12.print (_sb, "plmn_IdentityIndex_r12", _level+1);
      if (ac_BarringInfo_r12 != null) ac_BarringInfo_r12.print (_sb, "ac_BarringInfo_r12", _level+1);
      if (ac_BarringSkipForMMTELVoice_r12 != null) ac_BarringSkipForMMTELVoice_r12.print (_sb, "ac_BarringSkipForMMTELVoice_r12", _level+1);
      if (ac_BarringSkipForMMTELVideo_r12 != null) ac_BarringSkipForMMTELVideo_r12.print (_sb, "ac_BarringSkipForMMTELVideo_r12", _level+1);
      if (ac_BarringSkipForSMS_r12 != null) ac_BarringSkipForSMS_r12.print (_sb, "ac_BarringSkipForSMS_r12", _level+1);
      if (ac_BarringForCSFB_r12 != null) ac_BarringForCSFB_r12.print (_sb, "ac_BarringForCSFB_r12", _level+1);
      if (ssac_BarringForMMTEL_Voice_r12 != null) ssac_BarringForMMTEL_Voice_r12.print (_sb, "ssac_BarringForMMTEL_Voice_r12", _level+1);
      if (ssac_BarringForMMTEL_Video_r12 != null) ssac_BarringForMMTEL_Video_r12.print (_sb, "ssac_BarringForMMTEL_Video_r12", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
