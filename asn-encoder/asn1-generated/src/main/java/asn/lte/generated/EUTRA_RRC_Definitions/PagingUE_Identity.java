/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class PagingUE_Identity extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "PagingUE-Identity";
   }

   // Choice element identifier constants
   public final static byte _S_TMSI = 1;
   public final static byte _IMSI = 2;
   public final static byte _NG_5G_S_TMSI_R15 = 3;
   public final static byte _FULLI_RNTI_R15 = 4;
   public final static byte _EXTELEM1 = 5;

   public PagingUE_Identity () {
      super();
   }

   public PagingUE_Identity (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _S_TMSI: return "s_TMSI";
      case _IMSI: return "imsi";
      case _NG_5G_S_TMSI_R15: return "ng_5G_S_TMSI_r15";
      case _FULLI_RNTI_R15: return "fullI_RNTI_r15";
      case _EXTELEM1: return "...";
      default: return "UNDEFINED";
      }
   }

   public void set_s_TMSI (S_TMSI value) {
      setElement (_S_TMSI, value);
   }

   public void set_imsi (IMSI value) {
      setElement (_IMSI, value);
   }

   public void set_ng_5G_S_TMSI_r15 (NG_5G_S_TMSI_r15 value) {
      setElement (_NG_5G_S_TMSI_R15, value);
   }

   public void set_fullI_RNTI_r15 (I_RNTI_r15 value) {
      setElement (_FULLI_RNTI_R15, value);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      Asn1PerDecodeBuffer savedBuffer = null;
      boolean extbit = buffer.decodeBit ("extbit");

      if (!extbit) {
         int idx = (int) buffer.decodeConsWholeNumber (2, "index");
         choiceID = idx + 1;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         switch (idx) {
            // s_TMSI
            case 0: { 
               S_TMSI s_TMSI;
               element = s_TMSI = new S_TMSI();
               s_TMSI.decode (buffer);
               break;
            }

            // imsi
            case 1: { 
               IMSI imsi;
               element = imsi = new IMSI();
               imsi.decode (buffer);
               break;
            }

            default:
            throw new Asn1InvalidChoiceOptionException (buffer, idx);
         }
      }
      else {
         int idx = (int) buffer.decodeSmallNonNegWholeNumber ();
         choiceID = idx + 3;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         buffer.byteAlign();

         Asn1OpenType openType = new Asn1OpenType ();
         openType.decode (buffer);

         savedBuffer = buffer;
         buffer = new Asn1PerDecodeBuffer (openType.value, savedBuffer.isAligned());
         buffer.setEventHandlerList (savedBuffer);

         switch (idx) {
            // ng_5G_S_TMSI_r15
            case 0: { 
               NG_5G_S_TMSI_r15 ng_5G_S_TMSI_r15;
               element = ng_5G_S_TMSI_r15 = new NG_5G_S_TMSI_r15();
               ng_5G_S_TMSI_r15.decode (buffer);
               break;
            }

            // fullI_RNTI_r15
            case 1: { 
               I_RNTI_r15 fullI_RNTI_r15;
               element = fullI_RNTI_r15 = new I_RNTI_r15();
               fullI_RNTI_r15.decode (buffer);
               break;
            }

            // extElem1
            case 2: { 
               Asn1OpenType extElem1;
               element = extElem1 = new Asn1OpenType();
               extElem1.decode (buffer);

               buffer.invokeCharacters(extElem1.toString());
               break;
            }

            default:
               setElement (_EXTELEM1, openType);
               buffer.invokeCharacters (openType.toString());
         }

      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);

      if (savedBuffer != null) {
         buffer = savedBuffer;
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (element != null) {
         element.print (_sb, getElemName(), _level+1);
      }
      indent (_sb, _level);
      _sb.append("}\n");
   }

}
