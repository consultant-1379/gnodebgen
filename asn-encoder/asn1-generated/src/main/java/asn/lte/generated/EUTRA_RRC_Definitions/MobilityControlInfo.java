/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MobilityControlInfo extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "MobilityControlInfo";
   }

   public PhysCellId targetPhysCellId;
   public CarrierFreqEUTRA carrierFreq;  // optional
   public CarrierBandwidthEUTRA carrierBandwidth;  // optional
   public AdditionalSpectrumEmission additionalSpectrumEmission;  // optional
   public MobilityControlInfo_t304 t304 = null;
   public C_RNTI newUE_Identity;
   public RadioResourceConfigCommon radioResourceConfigCommon;
   public RACH_ConfigDedicated rach_ConfigDedicated;  // optional
   public boolean mV2ExtPresent;
   public CarrierFreqEUTRA_v9e0 carrierFreq_v9e0;  // optional
   public boolean mV3ExtPresent;
   public MobilityControlInfo_drb_ContinueROHC_r11 drb_ContinueROHC_r11 = null;  // optional
   public boolean mV4ExtPresent;
   public MobilityControlInfoV2X_r14 mobilityControlInfoV2X_r14;  // optional
   public MobilityControlInfo_handoverWithoutWT_Change_r14 handoverWithoutWT_Change_r14 = null;  // optional
   public MobilityControlInfo_makeBeforeBreak_r14 makeBeforeBreak_r14 = null;  // optional
   public RACH_Skip_r14 rach_Skip_r14;  // optional
   public MobilityControlInfo_sameSFN_Indication_r14 sameSFN_Indication_r14 = null;  // optional
   public boolean mV5ExtPresent;
   public Asn1Boolean mib_RepetitionStatus_r14;  // optional
   public Asn1Integer schedulingInfoSIB1_BR_r14;  // optional
   public Asn1OpenExt extElem1;

   public MobilityControlInfo () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MobilityControlInfo (
      PhysCellId targetPhysCellId_,
      CarrierFreqEUTRA carrierFreq_,
      CarrierBandwidthEUTRA carrierBandwidth_,
      AdditionalSpectrumEmission additionalSpectrumEmission_,
      MobilityControlInfo_t304 t304_,
      C_RNTI newUE_Identity_,
      RadioResourceConfigCommon radioResourceConfigCommon_,
      RACH_ConfigDedicated rach_ConfigDedicated_,
      CarrierFreqEUTRA_v9e0 carrierFreq_v9e0_,
      MobilityControlInfo_drb_ContinueROHC_r11 drb_ContinueROHC_r11_,
      MobilityControlInfoV2X_r14 mobilityControlInfoV2X_r14_,
      MobilityControlInfo_handoverWithoutWT_Change_r14 handoverWithoutWT_Change_r14_,
      MobilityControlInfo_makeBeforeBreak_r14 makeBeforeBreak_r14_,
      RACH_Skip_r14 rach_Skip_r14_,
      MobilityControlInfo_sameSFN_Indication_r14 sameSFN_Indication_r14_,
      Asn1Boolean mib_RepetitionStatus_r14_,
      Asn1Integer schedulingInfoSIB1_BR_r14_
   ) {
      super();
      targetPhysCellId = targetPhysCellId_;
      carrierFreq = carrierFreq_;
      carrierBandwidth = carrierBandwidth_;
      additionalSpectrumEmission = additionalSpectrumEmission_;
      t304 = t304_;
      newUE_Identity = newUE_Identity_;
      radioResourceConfigCommon = radioResourceConfigCommon_;
      rach_ConfigDedicated = rach_ConfigDedicated_;
      carrierFreq_v9e0 = carrierFreq_v9e0_;
      drb_ContinueROHC_r11 = drb_ContinueROHC_r11_;
      mobilityControlInfoV2X_r14 = mobilityControlInfoV2X_r14_;
      handoverWithoutWT_Change_r14 = handoverWithoutWT_Change_r14_;
      makeBeforeBreak_r14 = makeBeforeBreak_r14_;
      rach_Skip_r14 = rach_Skip_r14_;
      sameSFN_Indication_r14 = sameSFN_Indication_r14_;
      mib_RepetitionStatus_r14 = mib_RepetitionStatus_r14_;
      schedulingInfoSIB1_BR_r14 = schedulingInfoSIB1_BR_r14_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public MobilityControlInfo (
      PhysCellId targetPhysCellId_,
      MobilityControlInfo_t304 t304_,
      C_RNTI newUE_Identity_,
      RadioResourceConfigCommon radioResourceConfigCommon_
   ) {
      super();
      targetPhysCellId = targetPhysCellId_;
      t304 = t304_;
      newUE_Identity = newUE_Identity_;
      radioResourceConfigCommon = radioResourceConfigCommon_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public MobilityControlInfo (long targetPhysCellId_,
      CarrierFreqEUTRA carrierFreq_,
      CarrierBandwidthEUTRA carrierBandwidth_,
      long additionalSpectrumEmission_,
      MobilityControlInfo_t304 t304_,
      C_RNTI newUE_Identity_,
      RadioResourceConfigCommon radioResourceConfigCommon_,
      RACH_ConfigDedicated rach_ConfigDedicated_,
      CarrierFreqEUTRA_v9e0 carrierFreq_v9e0_,
      MobilityControlInfo_drb_ContinueROHC_r11 drb_ContinueROHC_r11_,
      MobilityControlInfoV2X_r14 mobilityControlInfoV2X_r14_,
      MobilityControlInfo_handoverWithoutWT_Change_r14 handoverWithoutWT_Change_r14_,
      MobilityControlInfo_makeBeforeBreak_r14 makeBeforeBreak_r14_,
      RACH_Skip_r14 rach_Skip_r14_,
      MobilityControlInfo_sameSFN_Indication_r14 sameSFN_Indication_r14_,
      boolean mib_RepetitionStatus_r14_,
      long schedulingInfoSIB1_BR_r14_
   ) {
      super();
      targetPhysCellId = new PhysCellId (targetPhysCellId_);
      carrierFreq = carrierFreq_;
      carrierBandwidth = carrierBandwidth_;
      additionalSpectrumEmission = new AdditionalSpectrumEmission (additionalSpectrumEmission_);
      t304 = t304_;
      newUE_Identity = newUE_Identity_;
      radioResourceConfigCommon = radioResourceConfigCommon_;
      rach_ConfigDedicated = rach_ConfigDedicated_;
      carrierFreq_v9e0 = carrierFreq_v9e0_;
      drb_ContinueROHC_r11 = drb_ContinueROHC_r11_;
      mobilityControlInfoV2X_r14 = mobilityControlInfoV2X_r14_;
      handoverWithoutWT_Change_r14 = handoverWithoutWT_Change_r14_;
      makeBeforeBreak_r14 = makeBeforeBreak_r14_;
      rach_Skip_r14 = rach_Skip_r14_;
      sameSFN_Indication_r14 = sameSFN_Indication_r14_;
      mib_RepetitionStatus_r14 = new Asn1Boolean (mib_RepetitionStatus_r14_);
      schedulingInfoSIB1_BR_r14 = new Asn1Integer (schedulingInfoSIB1_BR_r14_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public MobilityControlInfo (
      long targetPhysCellId_,
      MobilityControlInfo_t304 t304_,
      C_RNTI newUE_Identity_,
      RadioResourceConfigCommon radioResourceConfigCommon_
   ) {
      super();
      targetPhysCellId = new PhysCellId (targetPhysCellId_);
      t304 = t304_;
      newUE_Identity = newUE_Identity_;
      radioResourceConfigCommon = radioResourceConfigCommon_;
   }

   public void init () {
      targetPhysCellId = null;
      carrierFreq = null;
      carrierBandwidth = null;
      additionalSpectrumEmission = null;
      t304 = null;
      newUE_Identity = null;
      radioResourceConfigCommon = null;
      rach_ConfigDedicated = null;
      carrierFreq_v9e0 = null;
      drb_ContinueROHC_r11 = null;
      mobilityControlInfoV2X_r14 = null;
      handoverWithoutWT_Change_r14 = null;
      makeBeforeBreak_r14 = null;
      rach_Skip_r14 = null;
      sameSFN_Indication_r14 = null;
      mib_RepetitionStatus_r14 = null;
      schedulingInfoSIB1_BR_r14 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 18; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return targetPhysCellId;
         case 1: return carrierFreq;
         case 2: return carrierBandwidth;
         case 3: return additionalSpectrumEmission;
         case 4: return t304;
         case 5: return newUE_Identity;
         case 6: return radioResourceConfigCommon;
         case 7: return rach_ConfigDedicated;
         case 8: return carrierFreq_v9e0;
         case 9: return drb_ContinueROHC_r11;
         case 10: return mobilityControlInfoV2X_r14;
         case 11: return handoverWithoutWT_Change_r14;
         case 12: return makeBeforeBreak_r14;
         case 13: return rach_Skip_r14;
         case 14: return sameSFN_Indication_r14;
         case 15: return mib_RepetitionStatus_r14;
         case 16: return schedulingInfoSIB1_BR_r14;
         case 17: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "targetPhysCellId";
         case 1: return "carrierFreq";
         case 2: return "carrierBandwidth";
         case 3: return "additionalSpectrumEmission";
         case 4: return "t304";
         case 5: return "newUE-Identity";
         case 6: return "radioResourceConfigCommon";
         case 7: return "rach-ConfigDedicated";
         case 8: return "carrierFreq-v9e0";
         case 9: return "drb-ContinueROHC-r11";
         case 10: return "mobilityControlInfoV2X-r14";
         case 11: return "handoverWithoutWT-Change-r14";
         case 12: return "makeBeforeBreak-r14";
         case 13: return "rach-Skip-r14";
         case 14: return "sameSFN-Indication-r14";
         case 15: return "mib-RepetitionStatus-r14";
         case 16: return "schedulingInfoSIB1-BR-r14";
         case 17: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean carrierFreqPresent = buffer.decodeBit ("carrierFreqPresent");
      boolean carrierBandwidthPresent = buffer.decodeBit ("carrierBandwidthPresent");
      boolean additionalSpectrumEmissionPresent = buffer.decodeBit ("additionalSpectrumEmissionPresent");
      boolean rach_ConfigDedicatedPresent = buffer.decodeBit ("rach_ConfigDedicatedPresent");

      // decode targetPhysCellId

      buffer.getContext().eventDispatcher.startElement("targetPhysCellId", -1);

      targetPhysCellId = new PhysCellId();
      targetPhysCellId.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("targetPhysCellId", -1);

      // decode carrierFreq

      if (carrierFreqPresent) {
         buffer.getContext().eventDispatcher.startElement("carrierFreq", -1);

         carrierFreq = new CarrierFreqEUTRA();
         carrierFreq.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("carrierFreq", -1);
      }
      else {
         carrierFreq = null;
      }

      // decode carrierBandwidth

      if (carrierBandwidthPresent) {
         buffer.getContext().eventDispatcher.startElement("carrierBandwidth", -1);

         carrierBandwidth = new CarrierBandwidthEUTRA();
         carrierBandwidth.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("carrierBandwidth", -1);
      }
      else {
         carrierBandwidth = null;
      }

      // decode additionalSpectrumEmission

      if (additionalSpectrumEmissionPresent) {
         buffer.getContext().eventDispatcher.startElement("additionalSpectrumEmission", -1);

         additionalSpectrumEmission = new AdditionalSpectrumEmission();
         additionalSpectrumEmission.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("additionalSpectrumEmission", -1);
      }
      else {
         additionalSpectrumEmission = null;
      }

      // decode t304

      buffer.getContext().eventDispatcher.startElement("t304", -1);

      {
         int tval = MobilityControlInfo_t304.decodeEnumValue (buffer);
         t304 = MobilityControlInfo_t304.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("t304", -1);

      // decode newUE_Identity

      buffer.getContext().eventDispatcher.startElement("newUE_Identity", -1);

      newUE_Identity = new C_RNTI();
      newUE_Identity.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("newUE_Identity", -1);

      // decode radioResourceConfigCommon

      buffer.getContext().eventDispatcher.startElement("radioResourceConfigCommon", -1);

      radioResourceConfigCommon = new RadioResourceConfigCommon();
      radioResourceConfigCommon.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("radioResourceConfigCommon", -1);

      // decode rach_ConfigDedicated

      if (rach_ConfigDedicatedPresent) {
         buffer.getContext().eventDispatcher.startElement("rach_ConfigDedicated", -1);

         rach_ConfigDedicated = new RACH_ConfigDedicated();
         rach_ConfigDedicated.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("rach_ConfigDedicated", -1);
      }
      else {
         rach_ConfigDedicated = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV4ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV5ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean carrierFreq_v9e0Present = buffer.decodeBit ("carrierFreq_v9e0Present");

            // decode carrierFreq_v9e0

            if (carrierFreq_v9e0Present) {
               buffer.getContext().eventDispatcher.startElement("carrierFreq_v9e0", -1);

               carrierFreq_v9e0 = new CarrierFreqEUTRA_v9e0();
               carrierFreq_v9e0.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("carrierFreq_v9e0", -1);
            }
            else {
               carrierFreq_v9e0 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean drb_ContinueROHC_r11Present = buffer.decodeBit ("drb_ContinueROHC_r11Present");

            // decode drb_ContinueROHC_r11

            if (drb_ContinueROHC_r11Present) {
               buffer.getContext().eventDispatcher.startElement("drb_ContinueROHC_r11", -1);

               int tval = MobilityControlInfo_drb_ContinueROHC_r11.decodeEnumValue (buffer);
               drb_ContinueROHC_r11 = MobilityControlInfo_drb_ContinueROHC_r11.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("drb_ContinueROHC_r11", -1);
            }
            else {
               drb_ContinueROHC_r11 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV4ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean mobilityControlInfoV2X_r14Present = buffer.decodeBit ("mobilityControlInfoV2X_r14Present");

            boolean handoverWithoutWT_Change_r14Present = buffer.decodeBit ("handoverWithoutWT_Change_r14Present");

            boolean makeBeforeBreak_r14Present = buffer.decodeBit ("makeBeforeBreak_r14Present");

            boolean rach_Skip_r14Present = buffer.decodeBit ("rach_Skip_r14Present");

            boolean sameSFN_Indication_r14Present = buffer.decodeBit ("sameSFN_Indication_r14Present");

            // decode mobilityControlInfoV2X_r14

            if (mobilityControlInfoV2X_r14Present) {
               buffer.getContext().eventDispatcher.startElement("mobilityControlInfoV2X_r14", -1);

               mobilityControlInfoV2X_r14 = new MobilityControlInfoV2X_r14();
               mobilityControlInfoV2X_r14.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("mobilityControlInfoV2X_r14", -1);
            }
            else {
               mobilityControlInfoV2X_r14 = null;
            }

            // decode handoverWithoutWT_Change_r14

            if (handoverWithoutWT_Change_r14Present) {
               buffer.getContext().eventDispatcher.startElement("handoverWithoutWT_Change_r14", -1);

               int tval = MobilityControlInfo_handoverWithoutWT_Change_r14.decodeEnumValue (buffer);
               handoverWithoutWT_Change_r14 = MobilityControlInfo_handoverWithoutWT_Change_r14.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("handoverWithoutWT_Change_r14", -1);
            }
            else {
               handoverWithoutWT_Change_r14 = null;
            }

            // decode makeBeforeBreak_r14

            if (makeBeforeBreak_r14Present) {
               buffer.getContext().eventDispatcher.startElement("makeBeforeBreak_r14", -1);

               int tval = MobilityControlInfo_makeBeforeBreak_r14.decodeEnumValue (buffer);
               makeBeforeBreak_r14 = MobilityControlInfo_makeBeforeBreak_r14.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("makeBeforeBreak_r14", -1);
            }
            else {
               makeBeforeBreak_r14 = null;
            }

            // decode rach_Skip_r14

            if (rach_Skip_r14Present) {
               buffer.getContext().eventDispatcher.startElement("rach_Skip_r14", -1);

               rach_Skip_r14 = new RACH_Skip_r14();
               rach_Skip_r14.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("rach_Skip_r14", -1);
            }
            else {
               rach_Skip_r14 = null;
            }

            // decode sameSFN_Indication_r14

            if (sameSFN_Indication_r14Present) {
               buffer.getContext().eventDispatcher.startElement("sameSFN_Indication_r14", -1);

               int tval = MobilityControlInfo_sameSFN_Indication_r14.decodeEnumValue (buffer);
               sameSFN_Indication_r14 = MobilityControlInfo_sameSFN_Indication_r14.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("sameSFN_Indication_r14", -1);
            }
            else {
               sameSFN_Indication_r14 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV5ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean mib_RepetitionStatus_r14Present = buffer.decodeBit ("mib_RepetitionStatus_r14Present");

            boolean schedulingInfoSIB1_BR_r14Present = buffer.decodeBit ("schedulingInfoSIB1_BR_r14Present");

            // decode mib_RepetitionStatus_r14

            if (mib_RepetitionStatus_r14Present) {
               buffer.getContext().eventDispatcher.startElement("mib_RepetitionStatus_r14", -1);

               mib_RepetitionStatus_r14 = new Asn1Boolean();
               mib_RepetitionStatus_r14.decode (buffer);

               buffer.invokeCharacters(mib_RepetitionStatus_r14.toString());
               buffer.getContext().eventDispatcher.endElement("mib_RepetitionStatus_r14", -1);
            }
            else {
               mib_RepetitionStatus_r14 = null;
            }

            // decode schedulingInfoSIB1_BR_r14

            if (schedulingInfoSIB1_BR_r14Present) {
               buffer.getContext().eventDispatcher.startElement("schedulingInfoSIB1_BR_r14", -1);

               schedulingInfoSIB1_BR_r14 = new Asn1Integer();
               schedulingInfoSIB1_BR_r14.decode (buffer, 0, 31);

               buffer.invokeCharacters(schedulingInfoSIB1_BR_r14.toString());
               buffer.getContext().eventDispatcher.endElement("schedulingInfoSIB1_BR_r14", -1);
            }
            else {
               schedulingInfoSIB1_BR_r14 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (targetPhysCellId != null) targetPhysCellId.print (_sb, "targetPhysCellId", _level+1);
      if (carrierFreq != null) carrierFreq.print (_sb, "carrierFreq", _level+1);
      if (carrierBandwidth != null) carrierBandwidth.print (_sb, "carrierBandwidth", _level+1);
      if (additionalSpectrumEmission != null) additionalSpectrumEmission.print (_sb, "additionalSpectrumEmission", _level+1);
      if (t304 != null) t304.print (_sb, "t304", _level+1);
      if (newUE_Identity != null) newUE_Identity.print (_sb, "newUE_Identity", _level+1);
      if (radioResourceConfigCommon != null) radioResourceConfigCommon.print (_sb, "radioResourceConfigCommon", _level+1);
      if (rach_ConfigDedicated != null) rach_ConfigDedicated.print (_sb, "rach_ConfigDedicated", _level+1);
      if (carrierFreq_v9e0 != null) carrierFreq_v9e0.print (_sb, "carrierFreq_v9e0", _level+1);
      if (drb_ContinueROHC_r11 != null) drb_ContinueROHC_r11.print (_sb, "drb_ContinueROHC_r11", _level+1);
      if (mobilityControlInfoV2X_r14 != null) mobilityControlInfoV2X_r14.print (_sb, "mobilityControlInfoV2X_r14", _level+1);
      if (handoverWithoutWT_Change_r14 != null) handoverWithoutWT_Change_r14.print (_sb, "handoverWithoutWT_Change_r14", _level+1);
      if (makeBeforeBreak_r14 != null) makeBeforeBreak_r14.print (_sb, "makeBeforeBreak_r14", _level+1);
      if (rach_Skip_r14 != null) rach_Skip_r14.print (_sb, "rach_Skip_r14", _level+1);
      if (sameSFN_Indication_r14 != null) sameSFN_Indication_r14.print (_sb, "sameSFN_Indication_r14", _level+1);
      if (mib_RepetitionStatus_r14 != null) mib_RepetitionStatus_r14.print (_sb, "mib_RepetitionStatus_r14", _level+1);
      if (schedulingInfoSIB1_BR_r14 != null) schedulingInfoSIB1_BR_r14.print (_sb, "schedulingInfoSIB1_BR_r14", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
