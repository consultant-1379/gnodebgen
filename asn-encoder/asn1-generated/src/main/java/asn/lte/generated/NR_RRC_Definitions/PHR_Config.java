/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class PHR_Config extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "PHR-Config";
   }

   public PHR_Config_phr_PeriodicTimer phr_PeriodicTimer = null;
   public PHR_Config_phr_ProhibitTimer phr_ProhibitTimer = null;
   public PHR_Config_phr_Tx_PowerFactorChange phr_Tx_PowerFactorChange = null;
   public Asn1Boolean multiplePHR;
   public Asn1Boolean dummy;
   public Asn1Boolean phr_Type2OtherCell;
   public PHR_Config_phr_ModeOtherCG phr_ModeOtherCG = null;
   public boolean mV2ExtPresent;
   public PHR_Config_mpe_Reporting_FR2_r16 mpe_Reporting_FR2_r16;  // optional
   public Asn1OpenExt extElem1;

   public PHR_Config () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public PHR_Config (
      PHR_Config_phr_PeriodicTimer phr_PeriodicTimer_,
      PHR_Config_phr_ProhibitTimer phr_ProhibitTimer_,
      PHR_Config_phr_Tx_PowerFactorChange phr_Tx_PowerFactorChange_,
      Asn1Boolean multiplePHR_,
      Asn1Boolean dummy_,
      Asn1Boolean phr_Type2OtherCell_,
      PHR_Config_phr_ModeOtherCG phr_ModeOtherCG_,
      PHR_Config_mpe_Reporting_FR2_r16 mpe_Reporting_FR2_r16_
   ) {
      super();
      phr_PeriodicTimer = phr_PeriodicTimer_;
      phr_ProhibitTimer = phr_ProhibitTimer_;
      phr_Tx_PowerFactorChange = phr_Tx_PowerFactorChange_;
      multiplePHR = multiplePHR_;
      dummy = dummy_;
      phr_Type2OtherCell = phr_Type2OtherCell_;
      phr_ModeOtherCG = phr_ModeOtherCG_;
      mpe_Reporting_FR2_r16 = mpe_Reporting_FR2_r16_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public PHR_Config (
      PHR_Config_phr_PeriodicTimer phr_PeriodicTimer_,
      PHR_Config_phr_ProhibitTimer phr_ProhibitTimer_,
      PHR_Config_phr_Tx_PowerFactorChange phr_Tx_PowerFactorChange_,
      Asn1Boolean multiplePHR_,
      Asn1Boolean dummy_,
      Asn1Boolean phr_Type2OtherCell_,
      PHR_Config_phr_ModeOtherCG phr_ModeOtherCG_
   ) {
      super();
      phr_PeriodicTimer = phr_PeriodicTimer_;
      phr_ProhibitTimer = phr_ProhibitTimer_;
      phr_Tx_PowerFactorChange = phr_Tx_PowerFactorChange_;
      multiplePHR = multiplePHR_;
      dummy = dummy_;
      phr_Type2OtherCell = phr_Type2OtherCell_;
      phr_ModeOtherCG = phr_ModeOtherCG_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public PHR_Config (PHR_Config_phr_PeriodicTimer phr_PeriodicTimer_,
      PHR_Config_phr_ProhibitTimer phr_ProhibitTimer_,
      PHR_Config_phr_Tx_PowerFactorChange phr_Tx_PowerFactorChange_,
      boolean multiplePHR_,
      boolean dummy_,
      boolean phr_Type2OtherCell_,
      PHR_Config_phr_ModeOtherCG phr_ModeOtherCG_,
      PHR_Config_mpe_Reporting_FR2_r16 mpe_Reporting_FR2_r16_
   ) {
      super();
      phr_PeriodicTimer = phr_PeriodicTimer_;
      phr_ProhibitTimer = phr_ProhibitTimer_;
      phr_Tx_PowerFactorChange = phr_Tx_PowerFactorChange_;
      multiplePHR = new Asn1Boolean (multiplePHR_);
      dummy = new Asn1Boolean (dummy_);
      phr_Type2OtherCell = new Asn1Boolean (phr_Type2OtherCell_);
      phr_ModeOtherCG = phr_ModeOtherCG_;
      mpe_Reporting_FR2_r16 = mpe_Reporting_FR2_r16_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public PHR_Config (
      PHR_Config_phr_PeriodicTimer phr_PeriodicTimer_,
      PHR_Config_phr_ProhibitTimer phr_ProhibitTimer_,
      PHR_Config_phr_Tx_PowerFactorChange phr_Tx_PowerFactorChange_,
      boolean multiplePHR_,
      boolean dummy_,
      boolean phr_Type2OtherCell_,
      PHR_Config_phr_ModeOtherCG phr_ModeOtherCG_
   ) {
      super();
      phr_PeriodicTimer = phr_PeriodicTimer_;
      phr_ProhibitTimer = phr_ProhibitTimer_;
      phr_Tx_PowerFactorChange = phr_Tx_PowerFactorChange_;
      multiplePHR = new Asn1Boolean (multiplePHR_);
      dummy = new Asn1Boolean (dummy_);
      phr_Type2OtherCell = new Asn1Boolean (phr_Type2OtherCell_);
      phr_ModeOtherCG = phr_ModeOtherCG_;
   }

   public void init () {
      phr_PeriodicTimer = null;
      phr_ProhibitTimer = null;
      phr_Tx_PowerFactorChange = null;
      multiplePHR = null;
      dummy = null;
      phr_Type2OtherCell = null;
      phr_ModeOtherCG = null;
      mpe_Reporting_FR2_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 9; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return phr_PeriodicTimer;
         case 1: return phr_ProhibitTimer;
         case 2: return phr_Tx_PowerFactorChange;
         case 3: return multiplePHR;
         case 4: return dummy;
         case 5: return phr_Type2OtherCell;
         case 6: return phr_ModeOtherCG;
         case 7: return mpe_Reporting_FR2_r16;
         case 8: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "phr-PeriodicTimer";
         case 1: return "phr-ProhibitTimer";
         case 2: return "phr-Tx-PowerFactorChange";
         case 3: return "multiplePHR";
         case 4: return "dummy";
         case 5: return "phr-Type2OtherCell";
         case 6: return "phr-ModeOtherCG";
         case 7: return "mpe-Reporting-FR2-r16";
         case 8: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      // decode phr_PeriodicTimer

      buffer.getContext().eventDispatcher.startElement("phr_PeriodicTimer", -1);

      {
         int tval = PHR_Config_phr_PeriodicTimer.decodeEnumValue (buffer);
         phr_PeriodicTimer = PHR_Config_phr_PeriodicTimer.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("phr_PeriodicTimer", -1);

      // decode phr_ProhibitTimer

      buffer.getContext().eventDispatcher.startElement("phr_ProhibitTimer", -1);

      {
         int tval = PHR_Config_phr_ProhibitTimer.decodeEnumValue (buffer);
         phr_ProhibitTimer = PHR_Config_phr_ProhibitTimer.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("phr_ProhibitTimer", -1);

      // decode phr_Tx_PowerFactorChange

      buffer.getContext().eventDispatcher.startElement("phr_Tx_PowerFactorChange", -1);

      {
         int tval = PHR_Config_phr_Tx_PowerFactorChange.decodeEnumValue (buffer);
         phr_Tx_PowerFactorChange = PHR_Config_phr_Tx_PowerFactorChange.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("phr_Tx_PowerFactorChange", -1);

      // decode multiplePHR

      buffer.getContext().eventDispatcher.startElement("multiplePHR", -1);

      multiplePHR = new Asn1Boolean();
      multiplePHR.decode (buffer);

      buffer.invokeCharacters(multiplePHR.toString());
      buffer.getContext().eventDispatcher.endElement("multiplePHR", -1);

      // decode dummy

      buffer.getContext().eventDispatcher.startElement("dummy", -1);

      dummy = new Asn1Boolean();
      dummy.decode (buffer);

      buffer.invokeCharacters(dummy.toString());
      buffer.getContext().eventDispatcher.endElement("dummy", -1);

      // decode phr_Type2OtherCell

      buffer.getContext().eventDispatcher.startElement("phr_Type2OtherCell", -1);

      phr_Type2OtherCell = new Asn1Boolean();
      phr_Type2OtherCell.decode (buffer);

      buffer.invokeCharacters(phr_Type2OtherCell.toString());
      buffer.getContext().eventDispatcher.endElement("phr_Type2OtherCell", -1);

      // decode phr_ModeOtherCG

      buffer.getContext().eventDispatcher.startElement("phr_ModeOtherCG", -1);

      {
         int tval = PHR_Config_phr_ModeOtherCG.decodeEnumValue (buffer);
         phr_ModeOtherCG = PHR_Config_phr_ModeOtherCG.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("phr_ModeOtherCG", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean mpe_Reporting_FR2_r16Present = buffer.decodeBit ("mpe_Reporting_FR2_r16Present");

            // decode mpe_Reporting_FR2_r16

            if (mpe_Reporting_FR2_r16Present) {
               buffer.getContext().eventDispatcher.startElement("mpe_Reporting_FR2_r16", -1);

               mpe_Reporting_FR2_r16 = new PHR_Config_mpe_Reporting_FR2_r16();
               mpe_Reporting_FR2_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("mpe_Reporting_FR2_r16", -1);
            }
            else {
               mpe_Reporting_FR2_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (phr_PeriodicTimer != null) phr_PeriodicTimer.print (_sb, "phr_PeriodicTimer", _level+1);
      if (phr_ProhibitTimer != null) phr_ProhibitTimer.print (_sb, "phr_ProhibitTimer", _level+1);
      if (phr_Tx_PowerFactorChange != null) phr_Tx_PowerFactorChange.print (_sb, "phr_Tx_PowerFactorChange", _level+1);
      if (multiplePHR != null) multiplePHR.print (_sb, "multiplePHR", _level+1);
      if (dummy != null) dummy.print (_sb, "dummy", _level+1);
      if (phr_Type2OtherCell != null) phr_Type2OtherCell.print (_sb, "phr_Type2OtherCell", _level+1);
      if (phr_ModeOtherCG != null) phr_ModeOtherCG.print (_sb, "phr_ModeOtherCG", _level+1);
      if (mpe_Reporting_FR2_r16 != null) mpe_Reporting_FR2_r16.print (_sb, "mpe_Reporting_FR2_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
