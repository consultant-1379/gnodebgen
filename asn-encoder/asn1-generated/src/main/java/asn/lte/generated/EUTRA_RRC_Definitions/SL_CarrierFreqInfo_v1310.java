/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SL_CarrierFreqInfo_v1310 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SL-CarrierFreqInfo-v1310";
   }

   public SL_ResourcesInterFreq_r13 discResourcesNonPS_r13;  // optional
   public SL_ResourcesInterFreq_r13 discResourcesPS_r13;  // optional
   public SL_DiscConfigOtherInterFreq_r13 discConfigOther_r13;  // optional
   public Asn1OpenExt extElem1;

   public SL_CarrierFreqInfo_v1310 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SL_CarrierFreqInfo_v1310 (
      SL_ResourcesInterFreq_r13 discResourcesNonPS_r13_,
      SL_ResourcesInterFreq_r13 discResourcesPS_r13_,
      SL_DiscConfigOtherInterFreq_r13 discConfigOther_r13_
   ) {
      super();
      discResourcesNonPS_r13 = discResourcesNonPS_r13_;
      discResourcesPS_r13 = discResourcesPS_r13_;
      discConfigOther_r13 = discConfigOther_r13_;
   }

   public void init () {
      discResourcesNonPS_r13 = null;
      discResourcesPS_r13 = null;
      discConfigOther_r13 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return discResourcesNonPS_r13;
         case 1: return discResourcesPS_r13;
         case 2: return discConfigOther_r13;
         case 3: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "discResourcesNonPS-r13";
         case 1: return "discResourcesPS-r13";
         case 2: return "discConfigOther-r13";
         case 3: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean discResourcesNonPS_r13Present = buffer.decodeBit ("discResourcesNonPS_r13Present");
      boolean discResourcesPS_r13Present = buffer.decodeBit ("discResourcesPS_r13Present");
      boolean discConfigOther_r13Present = buffer.decodeBit ("discConfigOther_r13Present");

      // decode discResourcesNonPS_r13

      if (discResourcesNonPS_r13Present) {
         buffer.getContext().eventDispatcher.startElement("discResourcesNonPS_r13", -1);

         discResourcesNonPS_r13 = new SL_ResourcesInterFreq_r13();
         discResourcesNonPS_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("discResourcesNonPS_r13", -1);
      }
      else {
         discResourcesNonPS_r13 = null;
      }

      // decode discResourcesPS_r13

      if (discResourcesPS_r13Present) {
         buffer.getContext().eventDispatcher.startElement("discResourcesPS_r13", -1);

         discResourcesPS_r13 = new SL_ResourcesInterFreq_r13();
         discResourcesPS_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("discResourcesPS_r13", -1);
      }
      else {
         discResourcesPS_r13 = null;
      }

      // decode discConfigOther_r13

      if (discConfigOther_r13Present) {
         buffer.getContext().eventDispatcher.startElement("discConfigOther_r13", -1);

         discConfigOther_r13 = new SL_DiscConfigOtherInterFreq_r13();
         discConfigOther_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("discConfigOther_r13", -1);
      }
      else {
         discConfigOther_r13 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (discResourcesNonPS_r13 != null) discResourcesNonPS_r13.print (_sb, "discResourcesNonPS_r13", _level+1);
      if (discResourcesPS_r13 != null) discResourcesPS_r13.print (_sb, "discResourcesPS_r13", _level+1);
      if (discConfigOther_r13 != null) discConfigOther_r13.print (_sb, "discConfigOther_r13", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
