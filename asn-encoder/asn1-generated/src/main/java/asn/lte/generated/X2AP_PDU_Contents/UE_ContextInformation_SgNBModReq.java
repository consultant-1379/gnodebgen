/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.X2AP_PDU_Contents;

import com.objsys.asn1j.runtime.*;
import asn.lte.generated.X2AP_IEs.NRUESecurityCapabilities;
import asn.lte.generated.X2AP_IEs.SgNBSecurityKey;
import asn.lte.generated.X2AP_IEs.UEAggregateMaximumBitRate;

public class UE_ContextInformation_SgNBModReq extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_X2AP_PDU_ContentsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "UE-ContextInformation-SgNBModReq";
   }

   public NRUESecurityCapabilities nRUE_SecurityCapabilities;  // optional
   public SgNBSecurityKey sgNB_SecurityKey;  // optional
   public UEAggregateMaximumBitRate sgNBUEAggregateMaximumBitRate;  // optional
   public E_RABs_ToBeAdded_SgNBModReq_List e_RABs_ToBeAdded;  // optional
   public E_RABs_ToBeModified_SgNBModReq_List e_RABs_ToBeModified;  // optional
   public E_RABs_ToBeReleased_SgNBModReq_List e_RABs_ToBeReleased;  // optional
   public UE_ContextInformation_SgNBModReq_iE_Extensions iE_Extensions;  // optional
   public Asn1OpenExt extElem1;

   public UE_ContextInformation_SgNBModReq () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public UE_ContextInformation_SgNBModReq (
      NRUESecurityCapabilities nRUE_SecurityCapabilities_,
      SgNBSecurityKey sgNB_SecurityKey_,
      UEAggregateMaximumBitRate sgNBUEAggregateMaximumBitRate_,
      E_RABs_ToBeAdded_SgNBModReq_List e_RABs_ToBeAdded_,
      E_RABs_ToBeModified_SgNBModReq_List e_RABs_ToBeModified_,
      E_RABs_ToBeReleased_SgNBModReq_List e_RABs_ToBeReleased_,
      UE_ContextInformation_SgNBModReq_iE_Extensions iE_Extensions_
   ) {
      super();
      nRUE_SecurityCapabilities = nRUE_SecurityCapabilities_;
      sgNB_SecurityKey = sgNB_SecurityKey_;
      sgNBUEAggregateMaximumBitRate = sgNBUEAggregateMaximumBitRate_;
      e_RABs_ToBeAdded = e_RABs_ToBeAdded_;
      e_RABs_ToBeModified = e_RABs_ToBeModified_;
      e_RABs_ToBeReleased = e_RABs_ToBeReleased_;
      iE_Extensions = iE_Extensions_;
   }

   public void init () {
      nRUE_SecurityCapabilities = null;
      sgNB_SecurityKey = null;
      sgNBUEAggregateMaximumBitRate = null;
      e_RABs_ToBeAdded = null;
      e_RABs_ToBeModified = null;
      e_RABs_ToBeReleased = null;
      iE_Extensions = null;
      extElem1 = null;
   }

   public int getElementCount() { return 8; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return nRUE_SecurityCapabilities;
         case 1: return sgNB_SecurityKey;
         case 2: return sgNBUEAggregateMaximumBitRate;
         case 3: return e_RABs_ToBeAdded;
         case 4: return e_RABs_ToBeModified;
         case 5: return e_RABs_ToBeReleased;
         case 6: return iE_Extensions;
         case 7: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "nRUE-SecurityCapabilities";
         case 1: return "sgNB-SecurityKey";
         case 2: return "sgNBUEAggregateMaximumBitRate";
         case 3: return "e-RABs-ToBeAdded";
         case 4: return "e-RABs-ToBeModified";
         case 5: return "e-RABs-ToBeReleased";
         case 6: return "iE-Extensions";
         case 7: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean nRUE_SecurityCapabilitiesPresent = buffer.decodeBit ("nRUE_SecurityCapabilitiesPresent");
      boolean sgNB_SecurityKeyPresent = buffer.decodeBit ("sgNB_SecurityKeyPresent");
      boolean sgNBUEAggregateMaximumBitRatePresent = buffer.decodeBit ("sgNBUEAggregateMaximumBitRatePresent");
      boolean e_RABs_ToBeAddedPresent = buffer.decodeBit ("e_RABs_ToBeAddedPresent");
      boolean e_RABs_ToBeModifiedPresent = buffer.decodeBit ("e_RABs_ToBeModifiedPresent");
      boolean e_RABs_ToBeReleasedPresent = buffer.decodeBit ("e_RABs_ToBeReleasedPresent");
      boolean iE_ExtensionsPresent = buffer.decodeBit ("iE_ExtensionsPresent");

      // decode nRUE_SecurityCapabilities

      if (nRUE_SecurityCapabilitiesPresent) {
         buffer.getContext().eventDispatcher.startElement("nRUE_SecurityCapabilities", -1);

         nRUE_SecurityCapabilities = new NRUESecurityCapabilities();
         nRUE_SecurityCapabilities.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nRUE_SecurityCapabilities", -1);
      }
      else {
         nRUE_SecurityCapabilities = null;
      }

      // decode sgNB_SecurityKey

      if (sgNB_SecurityKeyPresent) {
         buffer.getContext().eventDispatcher.startElement("sgNB_SecurityKey", -1);

         sgNB_SecurityKey = new SgNBSecurityKey();
         sgNB_SecurityKey.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sgNB_SecurityKey", -1);
      }
      else {
         sgNB_SecurityKey = null;
      }

      // decode sgNBUEAggregateMaximumBitRate

      if (sgNBUEAggregateMaximumBitRatePresent) {
         buffer.getContext().eventDispatcher.startElement("sgNBUEAggregateMaximumBitRate", -1);

         sgNBUEAggregateMaximumBitRate = new UEAggregateMaximumBitRate();
         sgNBUEAggregateMaximumBitRate.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sgNBUEAggregateMaximumBitRate", -1);
      }
      else {
         sgNBUEAggregateMaximumBitRate = null;
      }

      // decode e_RABs_ToBeAdded

      if (e_RABs_ToBeAddedPresent) {
         buffer.getContext().eventDispatcher.startElement("e_RABs_ToBeAdded", -1);

         e_RABs_ToBeAdded = new E_RABs_ToBeAdded_SgNBModReq_List();
         e_RABs_ToBeAdded.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("e_RABs_ToBeAdded", -1);
      }
      else {
         e_RABs_ToBeAdded = null;
      }

      // decode e_RABs_ToBeModified

      if (e_RABs_ToBeModifiedPresent) {
         buffer.getContext().eventDispatcher.startElement("e_RABs_ToBeModified", -1);

         e_RABs_ToBeModified = new E_RABs_ToBeModified_SgNBModReq_List();
         e_RABs_ToBeModified.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("e_RABs_ToBeModified", -1);
      }
      else {
         e_RABs_ToBeModified = null;
      }

      // decode e_RABs_ToBeReleased

      if (e_RABs_ToBeReleasedPresent) {
         buffer.getContext().eventDispatcher.startElement("e_RABs_ToBeReleased", -1);

         e_RABs_ToBeReleased = new E_RABs_ToBeReleased_SgNBModReq_List();
         e_RABs_ToBeReleased.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("e_RABs_ToBeReleased", -1);
      }
      else {
         e_RABs_ToBeReleased = null;
      }

      // decode iE_Extensions

      if (iE_ExtensionsPresent) {
         buffer.getContext().eventDispatcher.startElement("iE_Extensions", -1);

         iE_Extensions = new UE_ContextInformation_SgNBModReq_iE_Extensions();
         iE_Extensions.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("iE_Extensions", -1);
      }
      else {
         iE_Extensions = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (nRUE_SecurityCapabilities != null) nRUE_SecurityCapabilities.print (_sb, "nRUE_SecurityCapabilities", _level+1);
      if (sgNB_SecurityKey != null) sgNB_SecurityKey.print (_sb, "sgNB_SecurityKey", _level+1);
      if (sgNBUEAggregateMaximumBitRate != null) sgNBUEAggregateMaximumBitRate.print (_sb, "sgNBUEAggregateMaximumBitRate", _level+1);
      if (e_RABs_ToBeAdded != null) e_RABs_ToBeAdded.print (_sb, "e_RABs_ToBeAdded", _level+1);
      if (e_RABs_ToBeModified != null) e_RABs_ToBeModified.print (_sb, "e_RABs_ToBeModified", _level+1);
      if (e_RABs_ToBeReleased != null) e_RABs_ToBeReleased.print (_sb, "e_RABs_ToBeReleased", _level+1);
      if (iE_Extensions != null) iE_Extensions.print (_sb, "iE_Extensions", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
