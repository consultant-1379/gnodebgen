/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class FrequencyInfoUL extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "FrequencyInfoUL";
   }

   public MultiFrequencyBandListNR frequencyBandList;  // optional
   public ARFCN_ValueNR absoluteFrequencyPointA;  // optional
   public FrequencyInfoUL_scs_SpecificCarrierList scs_SpecificCarrierList;
   public AdditionalSpectrumEmission additionalSpectrumEmission;  // optional
   public P_Max p_Max;  // optional
   public FrequencyInfoUL_frequencyShift7p5khz frequencyShift7p5khz = null;  // optional
   public Asn1OpenExt extElem1;

   public FrequencyInfoUL () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public FrequencyInfoUL (
      MultiFrequencyBandListNR frequencyBandList_,
      ARFCN_ValueNR absoluteFrequencyPointA_,
      FrequencyInfoUL_scs_SpecificCarrierList scs_SpecificCarrierList_,
      AdditionalSpectrumEmission additionalSpectrumEmission_,
      P_Max p_Max_,
      FrequencyInfoUL_frequencyShift7p5khz frequencyShift7p5khz_
   ) {
      super();
      frequencyBandList = frequencyBandList_;
      absoluteFrequencyPointA = absoluteFrequencyPointA_;
      scs_SpecificCarrierList = scs_SpecificCarrierList_;
      additionalSpectrumEmission = additionalSpectrumEmission_;
      p_Max = p_Max_;
      frequencyShift7p5khz = frequencyShift7p5khz_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public FrequencyInfoUL (
      FrequencyInfoUL_scs_SpecificCarrierList scs_SpecificCarrierList_
   ) {
      super();
      scs_SpecificCarrierList = scs_SpecificCarrierList_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public FrequencyInfoUL (MultiFrequencyBandListNR frequencyBandList_,
      long absoluteFrequencyPointA_,
      FrequencyInfoUL_scs_SpecificCarrierList scs_SpecificCarrierList_,
      long additionalSpectrumEmission_,
      long p_Max_,
      FrequencyInfoUL_frequencyShift7p5khz frequencyShift7p5khz_
   ) {
      super();
      frequencyBandList = frequencyBandList_;
      absoluteFrequencyPointA = new ARFCN_ValueNR (absoluteFrequencyPointA_);
      scs_SpecificCarrierList = scs_SpecificCarrierList_;
      additionalSpectrumEmission = new AdditionalSpectrumEmission (additionalSpectrumEmission_);
      p_Max = new P_Max (p_Max_);
      frequencyShift7p5khz = frequencyShift7p5khz_;
   }

   public void init () {
      frequencyBandList = null;
      absoluteFrequencyPointA = null;
      scs_SpecificCarrierList = null;
      additionalSpectrumEmission = null;
      p_Max = null;
      frequencyShift7p5khz = null;
      extElem1 = null;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return frequencyBandList;
         case 1: return absoluteFrequencyPointA;
         case 2: return scs_SpecificCarrierList;
         case 3: return additionalSpectrumEmission;
         case 4: return p_Max;
         case 5: return frequencyShift7p5khz;
         case 6: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "frequencyBandList";
         case 1: return "absoluteFrequencyPointA";
         case 2: return "scs-SpecificCarrierList";
         case 3: return "additionalSpectrumEmission";
         case 4: return "p-Max";
         case 5: return "frequencyShift7p5khz";
         case 6: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean frequencyBandListPresent = buffer.decodeBit ("frequencyBandListPresent");
      boolean absoluteFrequencyPointAPresent = buffer.decodeBit ("absoluteFrequencyPointAPresent");
      boolean additionalSpectrumEmissionPresent = buffer.decodeBit ("additionalSpectrumEmissionPresent");
      boolean p_MaxPresent = buffer.decodeBit ("p_MaxPresent");
      boolean frequencyShift7p5khzPresent = buffer.decodeBit ("frequencyShift7p5khzPresent");

      // decode frequencyBandList

      if (frequencyBandListPresent) {
         buffer.getContext().eventDispatcher.startElement("frequencyBandList", -1);

         frequencyBandList = new MultiFrequencyBandListNR();
         frequencyBandList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("frequencyBandList", -1);
      }
      else {
         frequencyBandList = null;
      }

      // decode absoluteFrequencyPointA

      if (absoluteFrequencyPointAPresent) {
         buffer.getContext().eventDispatcher.startElement("absoluteFrequencyPointA", -1);

         absoluteFrequencyPointA = new ARFCN_ValueNR();
         absoluteFrequencyPointA.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("absoluteFrequencyPointA", -1);
      }
      else {
         absoluteFrequencyPointA = null;
      }

      // decode scs_SpecificCarrierList

      buffer.getContext().eventDispatcher.startElement("scs_SpecificCarrierList", -1);

      scs_SpecificCarrierList = new FrequencyInfoUL_scs_SpecificCarrierList();
      scs_SpecificCarrierList.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("scs_SpecificCarrierList", -1);

      // decode additionalSpectrumEmission

      if (additionalSpectrumEmissionPresent) {
         buffer.getContext().eventDispatcher.startElement("additionalSpectrumEmission", -1);

         additionalSpectrumEmission = new AdditionalSpectrumEmission();
         additionalSpectrumEmission.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("additionalSpectrumEmission", -1);
      }
      else {
         additionalSpectrumEmission = null;
      }

      // decode p_Max

      if (p_MaxPresent) {
         buffer.getContext().eventDispatcher.startElement("p_Max", -1);

         p_Max = new P_Max();
         p_Max.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("p_Max", -1);
      }
      else {
         p_Max = null;
      }

      // decode frequencyShift7p5khz

      if (frequencyShift7p5khzPresent) {
         buffer.getContext().eventDispatcher.startElement("frequencyShift7p5khz", -1);

         int tval = FrequencyInfoUL_frequencyShift7p5khz.decodeEnumValue (buffer);
         frequencyShift7p5khz = FrequencyInfoUL_frequencyShift7p5khz.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("frequencyShift7p5khz", -1);
      }
      else {
         frequencyShift7p5khz = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (frequencyBandList != null) frequencyBandList.print (_sb, "frequencyBandList", _level+1);
      if (absoluteFrequencyPointA != null) absoluteFrequencyPointA.print (_sb, "absoluteFrequencyPointA", _level+1);
      if (scs_SpecificCarrierList != null) scs_SpecificCarrierList.print (_sb, "scs_SpecificCarrierList", _level+1);
      if (additionalSpectrumEmission != null) additionalSpectrumEmission.print (_sb, "additionalSpectrumEmission", _level+1);
      if (p_Max != null) p_Max.print (_sb, "p_Max", _level+1);
      if (frequencyShift7p5khz != null) frequencyShift7p5khz.print (_sb, "frequencyShift7p5khz", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
