/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MBMSCountingResponse_r10_IEs extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "MBMSCountingResponse-r10-IEs";
   }

   public Asn1Integer mbsfn_AreaIndex_r10;  // optional
   public CountingResponseList_r10 countingResponseList_r10;  // optional
   public Asn1OctetString lateNonCriticalExtension;  // optional
   public MBMSCountingResponse_r10_IEs_nonCriticalExtension nonCriticalExtension;  // optional

   public MBMSCountingResponse_r10_IEs () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MBMSCountingResponse_r10_IEs (
      Asn1Integer mbsfn_AreaIndex_r10_,
      CountingResponseList_r10 countingResponseList_r10_,
      Asn1OctetString lateNonCriticalExtension_,
      MBMSCountingResponse_r10_IEs_nonCriticalExtension nonCriticalExtension_
   ) {
      super();
      mbsfn_AreaIndex_r10 = mbsfn_AreaIndex_r10_;
      countingResponseList_r10 = countingResponseList_r10_;
      lateNonCriticalExtension = lateNonCriticalExtension_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public MBMSCountingResponse_r10_IEs (long mbsfn_AreaIndex_r10_,
      CountingResponseList_r10 countingResponseList_r10_,
      byte[] lateNonCriticalExtension_,
      MBMSCountingResponse_r10_IEs_nonCriticalExtension nonCriticalExtension_
   ) {
      super();
      mbsfn_AreaIndex_r10 = new Asn1Integer (mbsfn_AreaIndex_r10_);
      countingResponseList_r10 = countingResponseList_r10_;
      lateNonCriticalExtension = new Asn1OctetString (lateNonCriticalExtension_);
      nonCriticalExtension = nonCriticalExtension_;
   }

   public void init () {
      mbsfn_AreaIndex_r10 = null;
      countingResponseList_r10 = null;
      lateNonCriticalExtension = null;
      nonCriticalExtension = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return mbsfn_AreaIndex_r10;
         case 1: return countingResponseList_r10;
         case 2: return lateNonCriticalExtension;
         case 3: return nonCriticalExtension;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "mbsfn-AreaIndex-r10";
         case 1: return "countingResponseList-r10";
         case 2: return "lateNonCriticalExtension";
         case 3: return "nonCriticalExtension";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean mbsfn_AreaIndex_r10Present = buffer.decodeBit ("mbsfn_AreaIndex_r10Present");
      boolean countingResponseList_r10Present = buffer.decodeBit ("countingResponseList_r10Present");
      boolean lateNonCriticalExtensionPresent = buffer.decodeBit ("lateNonCriticalExtensionPresent");
      boolean nonCriticalExtensionPresent = buffer.decodeBit ("nonCriticalExtensionPresent");

      // decode mbsfn_AreaIndex_r10

      if (mbsfn_AreaIndex_r10Present) {
         buffer.getContext().eventDispatcher.startElement("mbsfn_AreaIndex_r10", -1);

         mbsfn_AreaIndex_r10 = new Asn1Integer();
         mbsfn_AreaIndex_r10.decode (buffer, 0, 7);

         buffer.invokeCharacters(mbsfn_AreaIndex_r10.toString());
         buffer.getContext().eventDispatcher.endElement("mbsfn_AreaIndex_r10", -1);
      }
      else {
         mbsfn_AreaIndex_r10 = null;
      }

      // decode countingResponseList_r10

      if (countingResponseList_r10Present) {
         buffer.getContext().eventDispatcher.startElement("countingResponseList_r10", -1);

         countingResponseList_r10 = new CountingResponseList_r10();
         countingResponseList_r10.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("countingResponseList_r10", -1);
      }
      else {
         countingResponseList_r10 = null;
      }

      // decode lateNonCriticalExtension

      if (lateNonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("lateNonCriticalExtension", -1);

         lateNonCriticalExtension = new Asn1OctetString();
         lateNonCriticalExtension.decode (buffer);

         buffer.invokeCharacters(lateNonCriticalExtension.toString());
         buffer.getContext().eventDispatcher.endElement("lateNonCriticalExtension", -1);
      }
      else {
         lateNonCriticalExtension = null;
      }

      // decode nonCriticalExtension

      if (nonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension = new MBMSCountingResponse_r10_IEs_nonCriticalExtension();
         nonCriticalExtension.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }
      else {
         nonCriticalExtension = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (mbsfn_AreaIndex_r10 != null) mbsfn_AreaIndex_r10.print (_sb, "mbsfn_AreaIndex_r10", _level+1);
      if (countingResponseList_r10 != null) countingResponseList_r10.print (_sb, "countingResponseList_r10", _level+1);
      if (lateNonCriticalExtension != null) lateNonCriticalExtension.print (_sb, "lateNonCriticalExtension", _level+1);
      if (nonCriticalExtension != null) nonCriticalExtension.print (_sb, "nonCriticalExtension", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
