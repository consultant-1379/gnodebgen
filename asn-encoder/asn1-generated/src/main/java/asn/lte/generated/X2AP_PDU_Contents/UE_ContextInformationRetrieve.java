/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.X2AP_PDU_Contents;

import com.objsys.asn1j.runtime.*;
import asn.lte.generated.X2AP_IEs.UE_S1AP_ID;
import asn.lte.generated.X2AP_IEs.UESecurityCapabilities;
import asn.lte.generated.X2AP_IEs.AS_SecurityInformation;
import asn.lte.generated.X2AP_IEs.UEAggregateMaximumBitRate;
import asn.lte.generated.X2AP_IEs.SubscriberProfileIDforRFP;
import asn.lte.generated.X2AP_IEs.RRC_Context;
import asn.lte.generated.X2AP_IEs.HandoverRestrictionList;
import asn.lte.generated.X2AP_IEs.LocationReportingInformation;
import asn.lte.generated.X2AP_IEs.ManagementBasedMDTallowed;
import asn.lte.generated.X2AP_IEs.MDTPLMNList;

public class UE_ContextInformationRetrieve extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_X2AP_PDU_ContentsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "UE-ContextInformationRetrieve";
   }

   public UE_S1AP_ID mME_UE_S1AP_ID;
   public UESecurityCapabilities uESecurityCapabilities;
   public AS_SecurityInformation aS_SecurityInformation;
   public UEAggregateMaximumBitRate uEaggregateMaximumBitRate;
   public SubscriberProfileIDforRFP subscriberProfileIDforRFP;  // optional
   public E_RABs_ToBeSetup_ListRetrieve e_RABs_ToBeSetup_ListRetrieve;
   public RRC_Context rRC_Context;
   public HandoverRestrictionList handoverRestrictionList;  // optional
   public LocationReportingInformation locationReportingInformation;  // optional
   public ManagementBasedMDTallowed managBasedMDTallowed = null;  // optional
   public MDTPLMNList managBasedMDTPLMNList;  // optional
   public UE_ContextInformationRetrieve_iE_Extensions iE_Extensions;  // optional
   public Asn1OpenExt extElem1;

   public UE_ContextInformationRetrieve () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public UE_ContextInformationRetrieve (
      UE_S1AP_ID mME_UE_S1AP_ID_,
      UESecurityCapabilities uESecurityCapabilities_,
      AS_SecurityInformation aS_SecurityInformation_,
      UEAggregateMaximumBitRate uEaggregateMaximumBitRate_,
      SubscriberProfileIDforRFP subscriberProfileIDforRFP_,
      E_RABs_ToBeSetup_ListRetrieve e_RABs_ToBeSetup_ListRetrieve_,
      RRC_Context rRC_Context_,
      HandoverRestrictionList handoverRestrictionList_,
      LocationReportingInformation locationReportingInformation_,
      ManagementBasedMDTallowed managBasedMDTallowed_,
      MDTPLMNList managBasedMDTPLMNList_,
      UE_ContextInformationRetrieve_iE_Extensions iE_Extensions_
   ) {
      super();
      mME_UE_S1AP_ID = mME_UE_S1AP_ID_;
      uESecurityCapabilities = uESecurityCapabilities_;
      aS_SecurityInformation = aS_SecurityInformation_;
      uEaggregateMaximumBitRate = uEaggregateMaximumBitRate_;
      subscriberProfileIDforRFP = subscriberProfileIDforRFP_;
      e_RABs_ToBeSetup_ListRetrieve = e_RABs_ToBeSetup_ListRetrieve_;
      rRC_Context = rRC_Context_;
      handoverRestrictionList = handoverRestrictionList_;
      locationReportingInformation = locationReportingInformation_;
      managBasedMDTallowed = managBasedMDTallowed_;
      managBasedMDTPLMNList = managBasedMDTPLMNList_;
      iE_Extensions = iE_Extensions_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public UE_ContextInformationRetrieve (
      UE_S1AP_ID mME_UE_S1AP_ID_,
      UESecurityCapabilities uESecurityCapabilities_,
      AS_SecurityInformation aS_SecurityInformation_,
      UEAggregateMaximumBitRate uEaggregateMaximumBitRate_,
      E_RABs_ToBeSetup_ListRetrieve e_RABs_ToBeSetup_ListRetrieve_,
      RRC_Context rRC_Context_
   ) {
      super();
      mME_UE_S1AP_ID = mME_UE_S1AP_ID_;
      uESecurityCapabilities = uESecurityCapabilities_;
      aS_SecurityInformation = aS_SecurityInformation_;
      uEaggregateMaximumBitRate = uEaggregateMaximumBitRate_;
      e_RABs_ToBeSetup_ListRetrieve = e_RABs_ToBeSetup_ListRetrieve_;
      rRC_Context = rRC_Context_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public UE_ContextInformationRetrieve (long mME_UE_S1AP_ID_,
      UESecurityCapabilities uESecurityCapabilities_,
      AS_SecurityInformation aS_SecurityInformation_,
      UEAggregateMaximumBitRate uEaggregateMaximumBitRate_,
      long subscriberProfileIDforRFP_,
      E_RABs_ToBeSetup_ListRetrieve e_RABs_ToBeSetup_ListRetrieve_,
      byte[] rRC_Context_,
      HandoverRestrictionList handoverRestrictionList_,
      LocationReportingInformation locationReportingInformation_,
      ManagementBasedMDTallowed managBasedMDTallowed_,
      MDTPLMNList managBasedMDTPLMNList_,
      UE_ContextInformationRetrieve_iE_Extensions iE_Extensions_
   ) {
      super();
      mME_UE_S1AP_ID = new UE_S1AP_ID (mME_UE_S1AP_ID_);
      uESecurityCapabilities = uESecurityCapabilities_;
      aS_SecurityInformation = aS_SecurityInformation_;
      uEaggregateMaximumBitRate = uEaggregateMaximumBitRate_;
      subscriberProfileIDforRFP = new SubscriberProfileIDforRFP (subscriberProfileIDforRFP_);
      e_RABs_ToBeSetup_ListRetrieve = e_RABs_ToBeSetup_ListRetrieve_;
      rRC_Context = new RRC_Context (rRC_Context_);
      handoverRestrictionList = handoverRestrictionList_;
      locationReportingInformation = locationReportingInformation_;
      managBasedMDTallowed = managBasedMDTallowed_;
      managBasedMDTPLMNList = managBasedMDTPLMNList_;
      iE_Extensions = iE_Extensions_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public UE_ContextInformationRetrieve (
      long mME_UE_S1AP_ID_,
      UESecurityCapabilities uESecurityCapabilities_,
      AS_SecurityInformation aS_SecurityInformation_,
      UEAggregateMaximumBitRate uEaggregateMaximumBitRate_,
      E_RABs_ToBeSetup_ListRetrieve e_RABs_ToBeSetup_ListRetrieve_,
      byte[] rRC_Context_
   ) {
      super();
      mME_UE_S1AP_ID = new UE_S1AP_ID (mME_UE_S1AP_ID_);
      uESecurityCapabilities = uESecurityCapabilities_;
      aS_SecurityInformation = aS_SecurityInformation_;
      uEaggregateMaximumBitRate = uEaggregateMaximumBitRate_;
      e_RABs_ToBeSetup_ListRetrieve = e_RABs_ToBeSetup_ListRetrieve_;
      rRC_Context = new RRC_Context (rRC_Context_);
   }

   public void init () {
      mME_UE_S1AP_ID = null;
      uESecurityCapabilities = null;
      aS_SecurityInformation = null;
      uEaggregateMaximumBitRate = null;
      subscriberProfileIDforRFP = null;
      e_RABs_ToBeSetup_ListRetrieve = null;
      rRC_Context = null;
      handoverRestrictionList = null;
      locationReportingInformation = null;
      managBasedMDTallowed = null;
      managBasedMDTPLMNList = null;
      iE_Extensions = null;
      extElem1 = null;
   }

   public int getElementCount() { return 13; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return mME_UE_S1AP_ID;
         case 1: return uESecurityCapabilities;
         case 2: return aS_SecurityInformation;
         case 3: return uEaggregateMaximumBitRate;
         case 4: return subscriberProfileIDforRFP;
         case 5: return e_RABs_ToBeSetup_ListRetrieve;
         case 6: return rRC_Context;
         case 7: return handoverRestrictionList;
         case 8: return locationReportingInformation;
         case 9: return managBasedMDTallowed;
         case 10: return managBasedMDTPLMNList;
         case 11: return iE_Extensions;
         case 12: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "mME-UE-S1AP-ID";
         case 1: return "uESecurityCapabilities";
         case 2: return "aS-SecurityInformation";
         case 3: return "uEaggregateMaximumBitRate";
         case 4: return "subscriberProfileIDforRFP";
         case 5: return "e-RABs-ToBeSetup-ListRetrieve";
         case 6: return "rRC-Context";
         case 7: return "handoverRestrictionList";
         case 8: return "locationReportingInformation";
         case 9: return "managBasedMDTallowed";
         case 10: return "managBasedMDTPLMNList";
         case 11: return "iE-Extensions";
         case 12: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean subscriberProfileIDforRFPPresent = buffer.decodeBit ("subscriberProfileIDforRFPPresent");
      boolean handoverRestrictionListPresent = buffer.decodeBit ("handoverRestrictionListPresent");
      boolean locationReportingInformationPresent = buffer.decodeBit ("locationReportingInformationPresent");
      boolean managBasedMDTallowedPresent = buffer.decodeBit ("managBasedMDTallowedPresent");
      boolean managBasedMDTPLMNListPresent = buffer.decodeBit ("managBasedMDTPLMNListPresent");
      boolean iE_ExtensionsPresent = buffer.decodeBit ("iE_ExtensionsPresent");

      // decode mME_UE_S1AP_ID

      buffer.getContext().eventDispatcher.startElement("mME_UE_S1AP_ID", -1);

      mME_UE_S1AP_ID = new UE_S1AP_ID();
      mME_UE_S1AP_ID.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("mME_UE_S1AP_ID", -1);

      // decode uESecurityCapabilities

      buffer.getContext().eventDispatcher.startElement("uESecurityCapabilities", -1);

      uESecurityCapabilities = new UESecurityCapabilities();
      uESecurityCapabilities.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("uESecurityCapabilities", -1);

      // decode aS_SecurityInformation

      buffer.getContext().eventDispatcher.startElement("aS_SecurityInformation", -1);

      aS_SecurityInformation = new AS_SecurityInformation();
      aS_SecurityInformation.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("aS_SecurityInformation", -1);

      // decode uEaggregateMaximumBitRate

      buffer.getContext().eventDispatcher.startElement("uEaggregateMaximumBitRate", -1);

      uEaggregateMaximumBitRate = new UEAggregateMaximumBitRate();
      uEaggregateMaximumBitRate.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("uEaggregateMaximumBitRate", -1);

      // decode subscriberProfileIDforRFP

      if (subscriberProfileIDforRFPPresent) {
         buffer.getContext().eventDispatcher.startElement("subscriberProfileIDforRFP", -1);

         subscriberProfileIDforRFP = new SubscriberProfileIDforRFP();
         subscriberProfileIDforRFP.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("subscriberProfileIDforRFP", -1);
      }
      else {
         subscriberProfileIDforRFP = null;
      }

      // decode e_RABs_ToBeSetup_ListRetrieve

      buffer.getContext().eventDispatcher.startElement("e_RABs_ToBeSetup_ListRetrieve", -1);

      e_RABs_ToBeSetup_ListRetrieve = new E_RABs_ToBeSetup_ListRetrieve();
      e_RABs_ToBeSetup_ListRetrieve.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("e_RABs_ToBeSetup_ListRetrieve", -1);

      // decode rRC_Context

      buffer.getContext().eventDispatcher.startElement("rRC_Context", -1);

      rRC_Context = new RRC_Context();
      rRC_Context.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("rRC_Context", -1);

      // decode handoverRestrictionList

      if (handoverRestrictionListPresent) {
         buffer.getContext().eventDispatcher.startElement("handoverRestrictionList", -1);

         handoverRestrictionList = new HandoverRestrictionList();
         handoverRestrictionList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("handoverRestrictionList", -1);
      }
      else {
         handoverRestrictionList = null;
      }

      // decode locationReportingInformation

      if (locationReportingInformationPresent) {
         buffer.getContext().eventDispatcher.startElement("locationReportingInformation", -1);

         locationReportingInformation = new LocationReportingInformation();
         locationReportingInformation.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("locationReportingInformation", -1);
      }
      else {
         locationReportingInformation = null;
      }

      // decode managBasedMDTallowed

      if (managBasedMDTallowedPresent) {
         buffer.getContext().eventDispatcher.startElement("managBasedMDTallowed", -1);

         int tval = ManagementBasedMDTallowed.decodeEnumValue (buffer);
         managBasedMDTallowed = ManagementBasedMDTallowed.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("managBasedMDTallowed", -1);
      }
      else {
         managBasedMDTallowed = null;
      }

      // decode managBasedMDTPLMNList

      if (managBasedMDTPLMNListPresent) {
         buffer.getContext().eventDispatcher.startElement("managBasedMDTPLMNList", -1);

         managBasedMDTPLMNList = new MDTPLMNList();
         managBasedMDTPLMNList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("managBasedMDTPLMNList", -1);
      }
      else {
         managBasedMDTPLMNList = null;
      }

      // decode iE_Extensions

      if (iE_ExtensionsPresent) {
         buffer.getContext().eventDispatcher.startElement("iE_Extensions", -1);

         iE_Extensions = new UE_ContextInformationRetrieve_iE_Extensions();
         iE_Extensions.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("iE_Extensions", -1);
      }
      else {
         iE_Extensions = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (mME_UE_S1AP_ID != null) mME_UE_S1AP_ID.print (_sb, "mME_UE_S1AP_ID", _level+1);
      if (uESecurityCapabilities != null) uESecurityCapabilities.print (_sb, "uESecurityCapabilities", _level+1);
      if (aS_SecurityInformation != null) aS_SecurityInformation.print (_sb, "aS_SecurityInformation", _level+1);
      if (uEaggregateMaximumBitRate != null) uEaggregateMaximumBitRate.print (_sb, "uEaggregateMaximumBitRate", _level+1);
      if (subscriberProfileIDforRFP != null) subscriberProfileIDforRFP.print (_sb, "subscriberProfileIDforRFP", _level+1);
      if (e_RABs_ToBeSetup_ListRetrieve != null) e_RABs_ToBeSetup_ListRetrieve.print (_sb, "e_RABs_ToBeSetup_ListRetrieve", _level+1);
      if (rRC_Context != null) rRC_Context.print (_sb, "rRC_Context", _level+1);
      if (handoverRestrictionList != null) handoverRestrictionList.print (_sb, "handoverRestrictionList", _level+1);
      if (locationReportingInformation != null) locationReportingInformation.print (_sb, "locationReportingInformation", _level+1);
      if (managBasedMDTallowed != null) managBasedMDTallowed.print (_sb, "managBasedMDTallowed", _level+1);
      if (managBasedMDTPLMNList != null) managBasedMDTPLMNList.print (_sb, "managBasedMDTPLMNList", _level+1);
      if (iE_Extensions != null) iE_Extensions.print (_sb, "iE_Extensions", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
