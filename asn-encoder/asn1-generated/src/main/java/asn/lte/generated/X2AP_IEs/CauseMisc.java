/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.X2AP_IEs;

import com.objsys.asn1j.runtime.*;

public class CauseMisc extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_X2AP_IEsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CauseMisc";
   }

   // Integer constants for switch-case
   public static final int _CONTROL_PROCESSING_OVERLOAD = 0;
   public static final int _HARDWARE_FAILURE = 1;
   public static final int _OM_INTERVENTION = 2;
   public static final int _NOT_ENOUGH_USER_PLANE_PROCESSING_RESOURCES = 3;
   public static final int _UNSPECIFIED = 4;

   // Singleton instances of CauseMisc
   protected static final CauseMisc _control_processing_overload = new CauseMisc(0);
   protected static final CauseMisc _hardware_failure = new CauseMisc(1);
   protected static final CauseMisc _om_intervention = new CauseMisc(2);
   protected static final CauseMisc _not_enough_user_plane_processing_resources = new CauseMisc(3);
   protected static final CauseMisc _unspecified = new CauseMisc(4);
   private static CauseMisc __undefined = new CauseMisc(-999);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    */
   protected CauseMisc (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for control_processing_overload.
    */
   public static CauseMisc control_processing_overload() {
      return _control_processing_overload;
   }

   /**
    * Singleton accessor method for hardware_failure.
    */
   public static CauseMisc hardware_failure() {
      return _hardware_failure;
   }

   /**
    * Singleton accessor method for om_intervention.
    */
   public static CauseMisc om_intervention() {
      return _om_intervention;
   }

   /**
    * Singleton accessor method for not_enough_user_plane_processing_resources.
    */
   public static CauseMisc not_enough_user_plane_processing_resources() {
      return _not_enough_user_plane_processing_resources;
   }

   /**
    * Singleton accessor method for unspecified.
    */
   public static CauseMisc unspecified() {
      return _unspecified;
   }

   /** Undefined value. */
   protected static CauseMisc __undefined_() { return __undefined; }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return CauseMisc.valueOf( CauseMisc.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static CauseMisc valueOf (int _value)
   {
      switch ((int)_value) {
         case 0: return control_processing_overload();
         case 1: return hardware_failure();
         case 2: return om_intervention();
         case 3: return not_enough_user_plane_processing_resources();
         case 4: return unspecified();
         default: return __undefined_();
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      boolean extbit = buffer.decodeBit ("extbit");

      if (extbit) {
         ui = buffer.decodeSmallNonNegWholeNumber ();

         return 0x7fffffff;
      }
      else {
         ui = (int) buffer.decodeConsWholeNumber (5);

         switch (ui) {
            case 0: ret =  0; break;
            case 1: ret =  1; break;
            case 2: ret =  2; break;
            case 3: ret =  3; break;
            case 4: ret =  4; break;
            default: throw new Asn1InvalidEnumException (ui);
         }
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (CauseMisc.valueOf(ret).toString());

      return ret;
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("control-processing-overload");
         case 1: return ("hardware-failure");
         case 2: return ("om-intervention");
         case 3: return ("not-enough-user-plane-processing-resources");
         case 4: return ("unspecified");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
