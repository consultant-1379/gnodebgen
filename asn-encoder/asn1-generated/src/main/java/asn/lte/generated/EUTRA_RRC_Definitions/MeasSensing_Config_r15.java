/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MeasSensing_Config_r15 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "MeasSensing-Config-r15";
   }

   public Asn1Integer sensingSubchannelNumber_r15;
   public MeasSensing_Config_r15_sensingPeriodicity_r15 sensingPeriodicity_r15 = null;
   public Asn1Integer sensingReselectionCounter_r15;
   public Asn1Integer sensingPriority_r15;

   public MeasSensing_Config_r15 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MeasSensing_Config_r15 (
      Asn1Integer sensingSubchannelNumber_r15_,
      MeasSensing_Config_r15_sensingPeriodicity_r15 sensingPeriodicity_r15_,
      Asn1Integer sensingReselectionCounter_r15_,
      Asn1Integer sensingPriority_r15_
   ) {
      super();
      sensingSubchannelNumber_r15 = sensingSubchannelNumber_r15_;
      sensingPeriodicity_r15 = sensingPeriodicity_r15_;
      sensingReselectionCounter_r15 = sensingReselectionCounter_r15_;
      sensingPriority_r15 = sensingPriority_r15_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public MeasSensing_Config_r15 (long sensingSubchannelNumber_r15_,
      MeasSensing_Config_r15_sensingPeriodicity_r15 sensingPeriodicity_r15_,
      long sensingReselectionCounter_r15_,
      long sensingPriority_r15_
   ) {
      super();
      sensingSubchannelNumber_r15 = new Asn1Integer (sensingSubchannelNumber_r15_);
      sensingPeriodicity_r15 = sensingPeriodicity_r15_;
      sensingReselectionCounter_r15 = new Asn1Integer (sensingReselectionCounter_r15_);
      sensingPriority_r15 = new Asn1Integer (sensingPriority_r15_);
   }

   public void init () {
      sensingSubchannelNumber_r15 = null;
      sensingPeriodicity_r15 = null;
      sensingReselectionCounter_r15 = null;
      sensingPriority_r15 = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return sensingSubchannelNumber_r15;
         case 1: return sensingPeriodicity_r15;
         case 2: return sensingReselectionCounter_r15;
         case 3: return sensingPriority_r15;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "sensingSubchannelNumber-r15";
         case 1: return "sensingPeriodicity-r15";
         case 2: return "sensingReselectionCounter-r15";
         case 3: return "sensingPriority-r15";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode sensingSubchannelNumber_r15

      buffer.getContext().eventDispatcher.startElement("sensingSubchannelNumber_r15", -1);

      sensingSubchannelNumber_r15 = new Asn1Integer();
      sensingSubchannelNumber_r15.decode (buffer, 1, 20);

      buffer.invokeCharacters(sensingSubchannelNumber_r15.toString());
      buffer.getContext().eventDispatcher.endElement("sensingSubchannelNumber_r15", -1);

      // decode sensingPeriodicity_r15

      buffer.getContext().eventDispatcher.startElement("sensingPeriodicity_r15", -1);

      {
         int tval = MeasSensing_Config_r15_sensingPeriodicity_r15.decodeEnumValue (buffer);
         sensingPeriodicity_r15 = MeasSensing_Config_r15_sensingPeriodicity_r15.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("sensingPeriodicity_r15", -1);

      // decode sensingReselectionCounter_r15

      buffer.getContext().eventDispatcher.startElement("sensingReselectionCounter_r15", -1);

      sensingReselectionCounter_r15 = new Asn1Integer();
      sensingReselectionCounter_r15.decode (buffer, 5, 75);

      buffer.invokeCharacters(sensingReselectionCounter_r15.toString());
      buffer.getContext().eventDispatcher.endElement("sensingReselectionCounter_r15", -1);

      // decode sensingPriority_r15

      buffer.getContext().eventDispatcher.startElement("sensingPriority_r15", -1);

      sensingPriority_r15 = new Asn1Integer();
      sensingPriority_r15.decode (buffer, 1, 8);

      buffer.invokeCharacters(sensingPriority_r15.toString());
      buffer.getContext().eventDispatcher.endElement("sensingPriority_r15", -1);

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (sensingSubchannelNumber_r15 != null) sensingSubchannelNumber_r15.print (_sb, "sensingSubchannelNumber_r15", _level+1);
      if (sensingPeriodicity_r15 != null) sensingPeriodicity_r15.print (_sb, "sensingPeriodicity_r15", _level+1);
      if (sensingReselectionCounter_r15 != null) sensingReselectionCounter_r15.print (_sb, "sensingReselectionCounter_r15", _level+1);
      if (sensingPriority_r15 != null) sensingPriority_r15.print (_sb, "sensingPriority_r15", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
