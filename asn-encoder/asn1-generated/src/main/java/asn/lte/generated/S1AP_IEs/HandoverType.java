/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.S1AP_IEs;

import com.objsys.asn1j.runtime.*;

public class HandoverType extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_S1AP_IEsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "HandoverType";
   }

   // Integer constants for switch-case
   public static final int _INTRALTE = 0;
   public static final int _LTETOUTRAN = 1;
   public static final int _LTETOGERAN = 2;
   public static final int _UTRANTOLTE = 3;
   public static final int _GERANTOLTE = 4;
   public static final int _EPS_TO_5GS = 5;
   public static final int _FIVEGS_TO_EPS = 6;

   // Singleton instances of HandoverType
   protected static final HandoverType _intralte = new HandoverType(0);
   protected static final HandoverType _ltetoutran = new HandoverType(1);
   protected static final HandoverType _ltetogeran = new HandoverType(2);
   protected static final HandoverType _utrantolte = new HandoverType(3);
   protected static final HandoverType _gerantolte = new HandoverType(4);
   protected static final HandoverType _eps_to_5gs = new HandoverType(5);
   protected static final HandoverType _fivegs_to_eps = new HandoverType(6);
   private static HandoverType __undefined = new HandoverType(-999);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    */
   protected HandoverType (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for intralte.
    */
   public static HandoverType intralte() {
      return _intralte;
   }

   /**
    * Singleton accessor method for ltetoutran.
    */
   public static HandoverType ltetoutran() {
      return _ltetoutran;
   }

   /**
    * Singleton accessor method for ltetogeran.
    */
   public static HandoverType ltetogeran() {
      return _ltetogeran;
   }

   /**
    * Singleton accessor method for utrantolte.
    */
   public static HandoverType utrantolte() {
      return _utrantolte;
   }

   /**
    * Singleton accessor method for gerantolte.
    */
   public static HandoverType gerantolte() {
      return _gerantolte;
   }

   /**
    * Singleton accessor method for eps_to_5gs.
    */
   public static HandoverType eps_to_5gs() {
      return _eps_to_5gs;
   }

   /**
    * Singleton accessor method for fivegs_to_eps.
    */
   public static HandoverType fivegs_to_eps() {
      return _fivegs_to_eps;
   }

   /** Undefined value. */
   protected static HandoverType __undefined_() { return __undefined; }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return HandoverType.valueOf( HandoverType.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static HandoverType valueOf (int _value)
   {
      switch ((int)_value) {
         case 0: return intralte();
         case 1: return ltetoutran();
         case 2: return ltetogeran();
         case 3: return utrantolte();
         case 4: return gerantolte();
         case 5: return eps_to_5gs();
         case 6: return fivegs_to_eps();
         default: return __undefined_();
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      boolean extbit = buffer.decodeBit ("extbit");

      if (extbit) {
         ui = buffer.decodeSmallNonNegWholeNumber ();

         switch (ui) {
            case 0: ret = 5; break;
            case 1: ret = 6; break;
            default: ret = 0x7fffffff; break;
         }
      }
      else {
         ui = (int) buffer.decodeConsWholeNumber (5);

         switch (ui) {
            case 0: ret =  0; break;
            case 1: ret =  1; break;
            case 2: ret =  2; break;
            case 3: ret =  3; break;
            case 4: ret =  4; break;
            default: throw new Asn1InvalidEnumException (ui);
         }
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (HandoverType.valueOf(ret).toString());

      return ret;
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("intralte");
         case 1: return ("ltetoutran");
         case 2: return ("ltetogeran");
         case 3: return ("utrantolte");
         case 4: return ("gerantolte");
         case 5: return ("eps-to-5gs");
         case 6: return ("fivegs-to-eps");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
