/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class IMS_Parameters extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "IMS-Parameters";
   }

   public IMS_ParametersCommon ims_ParametersCommon;  // optional
   public IMS_ParametersFRX_Diff ims_ParametersFRX_Diff;  // optional
   public Asn1OpenExt extElem1;

   public IMS_Parameters () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public IMS_Parameters (
      IMS_ParametersCommon ims_ParametersCommon_,
      IMS_ParametersFRX_Diff ims_ParametersFRX_Diff_
   ) {
      super();
      ims_ParametersCommon = ims_ParametersCommon_;
      ims_ParametersFRX_Diff = ims_ParametersFRX_Diff_;
   }

   public void init () {
      ims_ParametersCommon = null;
      ims_ParametersFRX_Diff = null;
      extElem1 = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return ims_ParametersCommon;
         case 1: return ims_ParametersFRX_Diff;
         case 2: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "ims-ParametersCommon";
         case 1: return "ims-ParametersFRX-Diff";
         case 2: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean ims_ParametersCommonPresent = buffer.decodeBit ("ims_ParametersCommonPresent");
      boolean ims_ParametersFRX_DiffPresent = buffer.decodeBit ("ims_ParametersFRX_DiffPresent");

      // decode ims_ParametersCommon

      if (ims_ParametersCommonPresent) {
         buffer.getContext().eventDispatcher.startElement("ims_ParametersCommon", -1);

         ims_ParametersCommon = new IMS_ParametersCommon();
         ims_ParametersCommon.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ims_ParametersCommon", -1);
      }
      else {
         ims_ParametersCommon = null;
      }

      // decode ims_ParametersFRX_Diff

      if (ims_ParametersFRX_DiffPresent) {
         buffer.getContext().eventDispatcher.startElement("ims_ParametersFRX_Diff", -1);

         ims_ParametersFRX_Diff = new IMS_ParametersFRX_Diff();
         ims_ParametersFRX_Diff.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ims_ParametersFRX_Diff", -1);
      }
      else {
         ims_ParametersFRX_Diff = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (ims_ParametersCommon != null) ims_ParametersCommon.print (_sb, "ims_ParametersCommon", _level+1);
      if (ims_ParametersFRX_Diff != null) ims_ParametersFRX_Diff.print (_sb, "ims_ParametersFRX_Diff", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
