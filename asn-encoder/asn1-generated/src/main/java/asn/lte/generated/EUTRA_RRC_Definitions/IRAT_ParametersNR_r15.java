/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class IRAT_ParametersNR_r15 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "IRAT-ParametersNR-r15";
   }

   public IRAT_ParametersNR_r15_en_DC_r15 en_DC_r15 = null;  // optional
   public IRAT_ParametersNR_r15_eventB2_r15 eventB2_r15 = null;  // optional
   public SupportedBandListNR_r15 supportedBandListEN_DC_r15;  // optional

   public IRAT_ParametersNR_r15 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public IRAT_ParametersNR_r15 (
      IRAT_ParametersNR_r15_en_DC_r15 en_DC_r15_,
      IRAT_ParametersNR_r15_eventB2_r15 eventB2_r15_,
      SupportedBandListNR_r15 supportedBandListEN_DC_r15_
   ) {
      super();
      en_DC_r15 = en_DC_r15_;
      eventB2_r15 = eventB2_r15_;
      supportedBandListEN_DC_r15 = supportedBandListEN_DC_r15_;
   }

   public void init () {
      en_DC_r15 = null;
      eventB2_r15 = null;
      supportedBandListEN_DC_r15 = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return en_DC_r15;
         case 1: return eventB2_r15;
         case 2: return supportedBandListEN_DC_r15;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "en-DC-r15";
         case 1: return "eventB2-r15";
         case 2: return "supportedBandListEN-DC-r15";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean en_DC_r15Present = buffer.decodeBit ("en_DC_r15Present");
      boolean eventB2_r15Present = buffer.decodeBit ("eventB2_r15Present");
      boolean supportedBandListEN_DC_r15Present = buffer.decodeBit ("supportedBandListEN_DC_r15Present");

      // decode en_DC_r15

      if (en_DC_r15Present) {
         buffer.getContext().eventDispatcher.startElement("en_DC_r15", -1);

         int tval = IRAT_ParametersNR_r15_en_DC_r15.decodeEnumValue (buffer);
         en_DC_r15 = IRAT_ParametersNR_r15_en_DC_r15.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("en_DC_r15", -1);
      }
      else {
         en_DC_r15 = null;
      }

      // decode eventB2_r15

      if (eventB2_r15Present) {
         buffer.getContext().eventDispatcher.startElement("eventB2_r15", -1);

         int tval = IRAT_ParametersNR_r15_eventB2_r15.decodeEnumValue (buffer);
         eventB2_r15 = IRAT_ParametersNR_r15_eventB2_r15.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("eventB2_r15", -1);
      }
      else {
         eventB2_r15 = null;
      }

      // decode supportedBandListEN_DC_r15

      if (supportedBandListEN_DC_r15Present) {
         buffer.getContext().eventDispatcher.startElement("supportedBandListEN_DC_r15", -1);

         supportedBandListEN_DC_r15 = new SupportedBandListNR_r15();
         supportedBandListEN_DC_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("supportedBandListEN_DC_r15", -1);
      }
      else {
         supportedBandListEN_DC_r15 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (en_DC_r15 != null) en_DC_r15.print (_sb, "en_DC_r15", _level+1);
      if (eventB2_r15 != null) eventB2_r15.print (_sb, "eventB2_r15", _level+1);
      if (supportedBandListEN_DC_r15 != null) supportedBandListEN_DC_r15.print (_sb, "supportedBandListEN_DC_r15", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
