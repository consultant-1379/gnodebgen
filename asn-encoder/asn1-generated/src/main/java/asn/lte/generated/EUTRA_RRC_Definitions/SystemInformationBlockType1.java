/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SystemInformationBlockType1 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SystemInformationBlockType1";
   }

   public SystemInformationBlockType1_cellAccessRelatedInfo cellAccessRelatedInfo;
   public SystemInformationBlockType1_cellSelectionInfo cellSelectionInfo;
   public P_Max p_Max;  // optional
   public FreqBandIndicator freqBandIndicator;
   public SchedulingInfoList schedulingInfoList;
   public TDD_Config tdd_Config;  // optional
   public SystemInformationBlockType1_si_WindowLength si_WindowLength = null;
   public Asn1Integer systemInfoValueTag;
   public SystemInformationBlockType1_v890_IEs nonCriticalExtension;  // optional

   public SystemInformationBlockType1 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SystemInformationBlockType1 (
      SystemInformationBlockType1_cellAccessRelatedInfo cellAccessRelatedInfo_,
      SystemInformationBlockType1_cellSelectionInfo cellSelectionInfo_,
      P_Max p_Max_,
      FreqBandIndicator freqBandIndicator_,
      SchedulingInfoList schedulingInfoList_,
      TDD_Config tdd_Config_,
      SystemInformationBlockType1_si_WindowLength si_WindowLength_,
      Asn1Integer systemInfoValueTag_,
      SystemInformationBlockType1_v890_IEs nonCriticalExtension_
   ) {
      super();
      cellAccessRelatedInfo = cellAccessRelatedInfo_;
      cellSelectionInfo = cellSelectionInfo_;
      p_Max = p_Max_;
      freqBandIndicator = freqBandIndicator_;
      schedulingInfoList = schedulingInfoList_;
      tdd_Config = tdd_Config_;
      si_WindowLength = si_WindowLength_;
      systemInfoValueTag = systemInfoValueTag_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SystemInformationBlockType1 (
      SystemInformationBlockType1_cellAccessRelatedInfo cellAccessRelatedInfo_,
      SystemInformationBlockType1_cellSelectionInfo cellSelectionInfo_,
      FreqBandIndicator freqBandIndicator_,
      SchedulingInfoList schedulingInfoList_,
      SystemInformationBlockType1_si_WindowLength si_WindowLength_,
      Asn1Integer systemInfoValueTag_
   ) {
      super();
      cellAccessRelatedInfo = cellAccessRelatedInfo_;
      cellSelectionInfo = cellSelectionInfo_;
      freqBandIndicator = freqBandIndicator_;
      schedulingInfoList = schedulingInfoList_;
      si_WindowLength = si_WindowLength_;
      systemInfoValueTag = systemInfoValueTag_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SystemInformationBlockType1 (SystemInformationBlockType1_cellAccessRelatedInfo cellAccessRelatedInfo_,
      SystemInformationBlockType1_cellSelectionInfo cellSelectionInfo_,
      long p_Max_,
      long freqBandIndicator_,
      SchedulingInfoList schedulingInfoList_,
      TDD_Config tdd_Config_,
      SystemInformationBlockType1_si_WindowLength si_WindowLength_,
      long systemInfoValueTag_,
      SystemInformationBlockType1_v890_IEs nonCriticalExtension_
   ) {
      super();
      cellAccessRelatedInfo = cellAccessRelatedInfo_;
      cellSelectionInfo = cellSelectionInfo_;
      p_Max = new P_Max (p_Max_);
      freqBandIndicator = new FreqBandIndicator (freqBandIndicator_);
      schedulingInfoList = schedulingInfoList_;
      tdd_Config = tdd_Config_;
      si_WindowLength = si_WindowLength_;
      systemInfoValueTag = new Asn1Integer (systemInfoValueTag_);
      nonCriticalExtension = nonCriticalExtension_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public SystemInformationBlockType1 (
      SystemInformationBlockType1_cellAccessRelatedInfo cellAccessRelatedInfo_,
      SystemInformationBlockType1_cellSelectionInfo cellSelectionInfo_,
      long freqBandIndicator_,
      SchedulingInfoList schedulingInfoList_,
      SystemInformationBlockType1_si_WindowLength si_WindowLength_,
      long systemInfoValueTag_
   ) {
      super();
      cellAccessRelatedInfo = cellAccessRelatedInfo_;
      cellSelectionInfo = cellSelectionInfo_;
      freqBandIndicator = new FreqBandIndicator (freqBandIndicator_);
      schedulingInfoList = schedulingInfoList_;
      si_WindowLength = si_WindowLength_;
      systemInfoValueTag = new Asn1Integer (systemInfoValueTag_);
   }

   public void init () {
      cellAccessRelatedInfo = null;
      cellSelectionInfo = null;
      p_Max = null;
      freqBandIndicator = null;
      schedulingInfoList = null;
      tdd_Config = null;
      si_WindowLength = null;
      systemInfoValueTag = null;
      nonCriticalExtension = null;
   }

   public int getElementCount() { return 9; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return cellAccessRelatedInfo;
         case 1: return cellSelectionInfo;
         case 2: return p_Max;
         case 3: return freqBandIndicator;
         case 4: return schedulingInfoList;
         case 5: return tdd_Config;
         case 6: return si_WindowLength;
         case 7: return systemInfoValueTag;
         case 8: return nonCriticalExtension;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "cellAccessRelatedInfo";
         case 1: return "cellSelectionInfo";
         case 2: return "p-Max";
         case 3: return "freqBandIndicator";
         case 4: return "schedulingInfoList";
         case 5: return "tdd-Config";
         case 6: return "si-WindowLength";
         case 7: return "systemInfoValueTag";
         case 8: return "nonCriticalExtension";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean p_MaxPresent = buffer.decodeBit ("p_MaxPresent");
      boolean tdd_ConfigPresent = buffer.decodeBit ("tdd_ConfigPresent");
      boolean nonCriticalExtensionPresent = buffer.decodeBit ("nonCriticalExtensionPresent");

      // decode cellAccessRelatedInfo

      buffer.getContext().eventDispatcher.startElement("cellAccessRelatedInfo", -1);

      cellAccessRelatedInfo = new SystemInformationBlockType1_cellAccessRelatedInfo();
      cellAccessRelatedInfo.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("cellAccessRelatedInfo", -1);

      // decode cellSelectionInfo

      buffer.getContext().eventDispatcher.startElement("cellSelectionInfo", -1);

      cellSelectionInfo = new SystemInformationBlockType1_cellSelectionInfo();
      cellSelectionInfo.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("cellSelectionInfo", -1);

      // decode p_Max

      if (p_MaxPresent) {
         buffer.getContext().eventDispatcher.startElement("p_Max", -1);

         p_Max = new P_Max();
         p_Max.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("p_Max", -1);
      }
      else {
         p_Max = null;
      }

      // decode freqBandIndicator

      buffer.getContext().eventDispatcher.startElement("freqBandIndicator", -1);

      freqBandIndicator = new FreqBandIndicator();
      freqBandIndicator.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("freqBandIndicator", -1);

      // decode schedulingInfoList

      buffer.getContext().eventDispatcher.startElement("schedulingInfoList", -1);

      schedulingInfoList = new SchedulingInfoList();
      schedulingInfoList.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("schedulingInfoList", -1);

      // decode tdd_Config

      if (tdd_ConfigPresent) {
         buffer.getContext().eventDispatcher.startElement("tdd_Config", -1);

         tdd_Config = new TDD_Config();
         tdd_Config.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("tdd_Config", -1);
      }
      else {
         tdd_Config = null;
      }

      // decode si_WindowLength

      buffer.getContext().eventDispatcher.startElement("si_WindowLength", -1);

      {
         int tval = SystemInformationBlockType1_si_WindowLength.decodeEnumValue (buffer);
         si_WindowLength = SystemInformationBlockType1_si_WindowLength.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("si_WindowLength", -1);

      // decode systemInfoValueTag

      buffer.getContext().eventDispatcher.startElement("systemInfoValueTag", -1);

      systemInfoValueTag = new Asn1Integer();
      systemInfoValueTag.decode (buffer, 0, 31);

      buffer.invokeCharacters(systemInfoValueTag.toString());
      buffer.getContext().eventDispatcher.endElement("systemInfoValueTag", -1);

      // decode nonCriticalExtension

      if (nonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension = new SystemInformationBlockType1_v890_IEs();
         nonCriticalExtension.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }
      else {
         nonCriticalExtension = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (cellAccessRelatedInfo != null) cellAccessRelatedInfo.print (_sb, "cellAccessRelatedInfo", _level+1);
      if (cellSelectionInfo != null) cellSelectionInfo.print (_sb, "cellSelectionInfo", _level+1);
      if (p_Max != null) p_Max.print (_sb, "p_Max", _level+1);
      if (freqBandIndicator != null) freqBandIndicator.print (_sb, "freqBandIndicator", _level+1);
      if (schedulingInfoList != null) schedulingInfoList.print (_sb, "schedulingInfoList", _level+1);
      if (tdd_Config != null) tdd_Config.print (_sb, "tdd_Config", _level+1);
      if (si_WindowLength != null) si_WindowLength.print (_sb, "si_WindowLength", _level+1);
      if (systemInfoValueTag != null) systemInfoValueTag.print (_sb, "systemInfoValueTag", _level+1);
      if (nonCriticalExtension != null) nonCriticalExtension.print (_sb, "nonCriticalExtension", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
