/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class FreqPriorityNR extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "FreqPriorityNR";
   }

   public ARFCN_ValueNR carrierFreq;
   public CellReselectionPriority cellReselectionPriority;
   public CellReselectionSubPriority cellReselectionSubPriority = null;  // optional

   public FreqPriorityNR () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public FreqPriorityNR (
      ARFCN_ValueNR carrierFreq_,
      CellReselectionPriority cellReselectionPriority_,
      CellReselectionSubPriority cellReselectionSubPriority_
   ) {
      super();
      carrierFreq = carrierFreq_;
      cellReselectionPriority = cellReselectionPriority_;
      cellReselectionSubPriority = cellReselectionSubPriority_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public FreqPriorityNR (
      ARFCN_ValueNR carrierFreq_,
      CellReselectionPriority cellReselectionPriority_
   ) {
      super();
      carrierFreq = carrierFreq_;
      cellReselectionPriority = cellReselectionPriority_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public FreqPriorityNR (long carrierFreq_,
      long cellReselectionPriority_,
      CellReselectionSubPriority cellReselectionSubPriority_
   ) {
      super();
      carrierFreq = new ARFCN_ValueNR (carrierFreq_);
      cellReselectionPriority = new CellReselectionPriority (cellReselectionPriority_);
      cellReselectionSubPriority = cellReselectionSubPriority_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public FreqPriorityNR (
      long carrierFreq_,
      long cellReselectionPriority_
   ) {
      super();
      carrierFreq = new ARFCN_ValueNR (carrierFreq_);
      cellReselectionPriority = new CellReselectionPriority (cellReselectionPriority_);
   }

   public void init () {
      carrierFreq = null;
      cellReselectionPriority = null;
      cellReselectionSubPriority = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return carrierFreq;
         case 1: return cellReselectionPriority;
         case 2: return cellReselectionSubPriority;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "carrierFreq";
         case 1: return "cellReselectionPriority";
         case 2: return "cellReselectionSubPriority";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean cellReselectionSubPriorityPresent = buffer.decodeBit ("cellReselectionSubPriorityPresent");

      // decode carrierFreq

      buffer.getContext().eventDispatcher.startElement("carrierFreq", -1);

      carrierFreq = new ARFCN_ValueNR();
      carrierFreq.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("carrierFreq", -1);

      // decode cellReselectionPriority

      buffer.getContext().eventDispatcher.startElement("cellReselectionPriority", -1);

      cellReselectionPriority = new CellReselectionPriority();
      cellReselectionPriority.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("cellReselectionPriority", -1);

      // decode cellReselectionSubPriority

      if (cellReselectionSubPriorityPresent) {
         buffer.getContext().eventDispatcher.startElement("cellReselectionSubPriority", -1);

         int tval = CellReselectionSubPriority.decodeEnumValue (buffer);
         cellReselectionSubPriority = CellReselectionSubPriority.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("cellReselectionSubPriority", -1);
      }
      else {
         cellReselectionSubPriority = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (carrierFreq != null) carrierFreq.print (_sb, "carrierFreq", _level+1);
      if (cellReselectionPriority != null) cellReselectionPriority.print (_sb, "cellReselectionPriority", _level+1);
      if (cellReselectionSubPriority != null) cellReselectionSubPriority.print (_sb, "cellReselectionSubPriority", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
