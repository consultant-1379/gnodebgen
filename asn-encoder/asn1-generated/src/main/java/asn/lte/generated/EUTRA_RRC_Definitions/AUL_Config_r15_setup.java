/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class AUL_Config_r15_setup extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public C_RNTI aul_CRNTI_r15;
   public Asn1BitString aul_Subframes_r15;
   public Asn1Integer aul_HARQ_Processes_r15;
   public AUL_Config_r15_setup_transmissionModeUL_AUL_r15 transmissionModeUL_AUL_r15 = null;
   public Asn1BitString aul_StartingFullBW_InsideMCOT_r15;
   public Asn1BitString aul_StartingFullBW_OutsideMCOT_r15;
   public AUL_Config_r15_setup_aul_StartingPartialBW_InsideMCOT_r15 aul_StartingPartialBW_InsideMCOT_r15 = null;
   public AUL_Config_r15_setup_aul_StartingPartialBW_OutsideMCOT_r15 aul_StartingPartialBW_OutsideMCOT_r15 = null;
   public AUL_Config_r15_setup_aul_RetransmissionTimer_r15 aul_RetransmissionTimer_r15 = null;
   public Asn1Integer endingSymbolAUL_r15;
   public Asn1Integer subframeOffsetCOT_Sharing_r15;
   public AUL_Config_r15_setup_contentionWindowSizeTimer_r15 contentionWindowSizeTimer_r15 = null;

   public AUL_Config_r15_setup () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public AUL_Config_r15_setup (
      C_RNTI aul_CRNTI_r15_,
      Asn1BitString aul_Subframes_r15_,
      Asn1Integer aul_HARQ_Processes_r15_,
      AUL_Config_r15_setup_transmissionModeUL_AUL_r15 transmissionModeUL_AUL_r15_,
      Asn1BitString aul_StartingFullBW_InsideMCOT_r15_,
      Asn1BitString aul_StartingFullBW_OutsideMCOT_r15_,
      AUL_Config_r15_setup_aul_StartingPartialBW_InsideMCOT_r15 aul_StartingPartialBW_InsideMCOT_r15_,
      AUL_Config_r15_setup_aul_StartingPartialBW_OutsideMCOT_r15 aul_StartingPartialBW_OutsideMCOT_r15_,
      AUL_Config_r15_setup_aul_RetransmissionTimer_r15 aul_RetransmissionTimer_r15_,
      Asn1Integer endingSymbolAUL_r15_,
      Asn1Integer subframeOffsetCOT_Sharing_r15_,
      AUL_Config_r15_setup_contentionWindowSizeTimer_r15 contentionWindowSizeTimer_r15_
   ) {
      super();
      aul_CRNTI_r15 = aul_CRNTI_r15_;
      aul_Subframes_r15 = aul_Subframes_r15_;
      aul_HARQ_Processes_r15 = aul_HARQ_Processes_r15_;
      transmissionModeUL_AUL_r15 = transmissionModeUL_AUL_r15_;
      aul_StartingFullBW_InsideMCOT_r15 = aul_StartingFullBW_InsideMCOT_r15_;
      aul_StartingFullBW_OutsideMCOT_r15 = aul_StartingFullBW_OutsideMCOT_r15_;
      aul_StartingPartialBW_InsideMCOT_r15 = aul_StartingPartialBW_InsideMCOT_r15_;
      aul_StartingPartialBW_OutsideMCOT_r15 = aul_StartingPartialBW_OutsideMCOT_r15_;
      aul_RetransmissionTimer_r15 = aul_RetransmissionTimer_r15_;
      endingSymbolAUL_r15 = endingSymbolAUL_r15_;
      subframeOffsetCOT_Sharing_r15 = subframeOffsetCOT_Sharing_r15_;
      contentionWindowSizeTimer_r15 = contentionWindowSizeTimer_r15_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public AUL_Config_r15_setup (C_RNTI aul_CRNTI_r15_,
      Asn1BitString aul_Subframes_r15_,
      long aul_HARQ_Processes_r15_,
      AUL_Config_r15_setup_transmissionModeUL_AUL_r15 transmissionModeUL_AUL_r15_,
      Asn1BitString aul_StartingFullBW_InsideMCOT_r15_,
      Asn1BitString aul_StartingFullBW_OutsideMCOT_r15_,
      AUL_Config_r15_setup_aul_StartingPartialBW_InsideMCOT_r15 aul_StartingPartialBW_InsideMCOT_r15_,
      AUL_Config_r15_setup_aul_StartingPartialBW_OutsideMCOT_r15 aul_StartingPartialBW_OutsideMCOT_r15_,
      AUL_Config_r15_setup_aul_RetransmissionTimer_r15 aul_RetransmissionTimer_r15_,
      long endingSymbolAUL_r15_,
      long subframeOffsetCOT_Sharing_r15_,
      AUL_Config_r15_setup_contentionWindowSizeTimer_r15 contentionWindowSizeTimer_r15_
   ) {
      super();
      aul_CRNTI_r15 = aul_CRNTI_r15_;
      aul_Subframes_r15 = aul_Subframes_r15_;
      aul_HARQ_Processes_r15 = new Asn1Integer (aul_HARQ_Processes_r15_);
      transmissionModeUL_AUL_r15 = transmissionModeUL_AUL_r15_;
      aul_StartingFullBW_InsideMCOT_r15 = aul_StartingFullBW_InsideMCOT_r15_;
      aul_StartingFullBW_OutsideMCOT_r15 = aul_StartingFullBW_OutsideMCOT_r15_;
      aul_StartingPartialBW_InsideMCOT_r15 = aul_StartingPartialBW_InsideMCOT_r15_;
      aul_StartingPartialBW_OutsideMCOT_r15 = aul_StartingPartialBW_OutsideMCOT_r15_;
      aul_RetransmissionTimer_r15 = aul_RetransmissionTimer_r15_;
      endingSymbolAUL_r15 = new Asn1Integer (endingSymbolAUL_r15_);
      subframeOffsetCOT_Sharing_r15 = new Asn1Integer (subframeOffsetCOT_Sharing_r15_);
      contentionWindowSizeTimer_r15 = contentionWindowSizeTimer_r15_;
   }

   public void init () {
      aul_CRNTI_r15 = null;
      aul_Subframes_r15 = null;
      aul_HARQ_Processes_r15 = null;
      transmissionModeUL_AUL_r15 = null;
      aul_StartingFullBW_InsideMCOT_r15 = null;
      aul_StartingFullBW_OutsideMCOT_r15 = null;
      aul_StartingPartialBW_InsideMCOT_r15 = null;
      aul_StartingPartialBW_OutsideMCOT_r15 = null;
      aul_RetransmissionTimer_r15 = null;
      endingSymbolAUL_r15 = null;
      subframeOffsetCOT_Sharing_r15 = null;
      contentionWindowSizeTimer_r15 = null;
   }

   public int getElementCount() { return 12; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return aul_CRNTI_r15;
         case 1: return aul_Subframes_r15;
         case 2: return aul_HARQ_Processes_r15;
         case 3: return transmissionModeUL_AUL_r15;
         case 4: return aul_StartingFullBW_InsideMCOT_r15;
         case 5: return aul_StartingFullBW_OutsideMCOT_r15;
         case 6: return aul_StartingPartialBW_InsideMCOT_r15;
         case 7: return aul_StartingPartialBW_OutsideMCOT_r15;
         case 8: return aul_RetransmissionTimer_r15;
         case 9: return endingSymbolAUL_r15;
         case 10: return subframeOffsetCOT_Sharing_r15;
         case 11: return contentionWindowSizeTimer_r15;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "aul-CRNTI-r15";
         case 1: return "aul-Subframes-r15";
         case 2: return "aul-HARQ-Processes-r15";
         case 3: return "transmissionModeUL-AUL-r15";
         case 4: return "aul-StartingFullBW-InsideMCOT-r15";
         case 5: return "aul-StartingFullBW-OutsideMCOT-r15";
         case 6: return "aul-StartingPartialBW-InsideMCOT-r15";
         case 7: return "aul-StartingPartialBW-OutsideMCOT-r15";
         case 8: return "aul-RetransmissionTimer-r15";
         case 9: return "endingSymbolAUL-r15";
         case 10: return "subframeOffsetCOT-Sharing-r15";
         case 11: return "contentionWindowSizeTimer-r15";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode aul_CRNTI_r15

      buffer.getContext().eventDispatcher.startElement("aul_CRNTI_r15", -1);

      aul_CRNTI_r15 = new C_RNTI();
      aul_CRNTI_r15.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("aul_CRNTI_r15", -1);

      // decode aul_Subframes_r15

      buffer.getContext().eventDispatcher.startElement("aul_Subframes_r15", -1);

      aul_Subframes_r15 = new Asn1BitString();
      aul_Subframes_r15.decode (buffer, 40, 40);

      buffer.invokeCharacters(aul_Subframes_r15.toString());
      buffer.getContext().eventDispatcher.endElement("aul_Subframes_r15", -1);

      // decode aul_HARQ_Processes_r15

      buffer.getContext().eventDispatcher.startElement("aul_HARQ_Processes_r15", -1);

      aul_HARQ_Processes_r15 = new Asn1Integer();
      aul_HARQ_Processes_r15.decode (buffer, 1, 16);

      buffer.invokeCharacters(aul_HARQ_Processes_r15.toString());
      buffer.getContext().eventDispatcher.endElement("aul_HARQ_Processes_r15", -1);

      // decode transmissionModeUL_AUL_r15

      buffer.getContext().eventDispatcher.startElement("transmissionModeUL_AUL_r15", -1);

      {
         int tval = AUL_Config_r15_setup_transmissionModeUL_AUL_r15.decodeEnumValue (buffer);
         transmissionModeUL_AUL_r15 = AUL_Config_r15_setup_transmissionModeUL_AUL_r15.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("transmissionModeUL_AUL_r15", -1);

      // decode aul_StartingFullBW_InsideMCOT_r15

      buffer.getContext().eventDispatcher.startElement("aul_StartingFullBW_InsideMCOT_r15", -1);

      aul_StartingFullBW_InsideMCOT_r15 = new Asn1BitString();
      aul_StartingFullBW_InsideMCOT_r15.decode (buffer, 5, 5);

      buffer.invokeCharacters(aul_StartingFullBW_InsideMCOT_r15.toString());
      buffer.getContext().eventDispatcher.endElement("aul_StartingFullBW_InsideMCOT_r15", -1);

      // decode aul_StartingFullBW_OutsideMCOT_r15

      buffer.getContext().eventDispatcher.startElement("aul_StartingFullBW_OutsideMCOT_r15", -1);

      aul_StartingFullBW_OutsideMCOT_r15 = new Asn1BitString();
      aul_StartingFullBW_OutsideMCOT_r15.decode (buffer, 7, 7);

      buffer.invokeCharacters(aul_StartingFullBW_OutsideMCOT_r15.toString());
      buffer.getContext().eventDispatcher.endElement("aul_StartingFullBW_OutsideMCOT_r15", -1);

      // decode aul_StartingPartialBW_InsideMCOT_r15

      buffer.getContext().eventDispatcher.startElement("aul_StartingPartialBW_InsideMCOT_r15", -1);

      {
         int tval = AUL_Config_r15_setup_aul_StartingPartialBW_InsideMCOT_r15.decodeEnumValue (buffer);
         aul_StartingPartialBW_InsideMCOT_r15 = AUL_Config_r15_setup_aul_StartingPartialBW_InsideMCOT_r15.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("aul_StartingPartialBW_InsideMCOT_r15", -1);

      // decode aul_StartingPartialBW_OutsideMCOT_r15

      buffer.getContext().eventDispatcher.startElement("aul_StartingPartialBW_OutsideMCOT_r15", -1);

      {
         int tval = AUL_Config_r15_setup_aul_StartingPartialBW_OutsideMCOT_r15.decodeEnumValue (buffer);
         aul_StartingPartialBW_OutsideMCOT_r15 = AUL_Config_r15_setup_aul_StartingPartialBW_OutsideMCOT_r15.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("aul_StartingPartialBW_OutsideMCOT_r15", -1);

      // decode aul_RetransmissionTimer_r15

      buffer.getContext().eventDispatcher.startElement("aul_RetransmissionTimer_r15", -1);

      {
         int tval = AUL_Config_r15_setup_aul_RetransmissionTimer_r15.decodeEnumValue (buffer);
         aul_RetransmissionTimer_r15 = AUL_Config_r15_setup_aul_RetransmissionTimer_r15.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("aul_RetransmissionTimer_r15", -1);

      // decode endingSymbolAUL_r15

      buffer.getContext().eventDispatcher.startElement("endingSymbolAUL_r15", -1);

      endingSymbolAUL_r15 = new Asn1Integer();
      endingSymbolAUL_r15.decode (buffer, 12, 13);

      buffer.invokeCharacters(endingSymbolAUL_r15.toString());
      buffer.getContext().eventDispatcher.endElement("endingSymbolAUL_r15", -1);

      // decode subframeOffsetCOT_Sharing_r15

      buffer.getContext().eventDispatcher.startElement("subframeOffsetCOT_Sharing_r15", -1);

      subframeOffsetCOT_Sharing_r15 = new Asn1Integer();
      subframeOffsetCOT_Sharing_r15.decode (buffer, 2, 4);

      buffer.invokeCharacters(subframeOffsetCOT_Sharing_r15.toString());
      buffer.getContext().eventDispatcher.endElement("subframeOffsetCOT_Sharing_r15", -1);

      // decode contentionWindowSizeTimer_r15

      buffer.getContext().eventDispatcher.startElement("contentionWindowSizeTimer_r15", -1);

      {
         int tval = AUL_Config_r15_setup_contentionWindowSizeTimer_r15.decodeEnumValue (buffer);
         contentionWindowSizeTimer_r15 = AUL_Config_r15_setup_contentionWindowSizeTimer_r15.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("contentionWindowSizeTimer_r15", -1);

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (aul_CRNTI_r15 != null) aul_CRNTI_r15.print (_sb, "aul_CRNTI_r15", _level+1);
      if (aul_Subframes_r15 != null) aul_Subframes_r15.print (_sb, "aul_Subframes_r15", _level+1);
      if (aul_HARQ_Processes_r15 != null) aul_HARQ_Processes_r15.print (_sb, "aul_HARQ_Processes_r15", _level+1);
      if (transmissionModeUL_AUL_r15 != null) transmissionModeUL_AUL_r15.print (_sb, "transmissionModeUL_AUL_r15", _level+1);
      if (aul_StartingFullBW_InsideMCOT_r15 != null) aul_StartingFullBW_InsideMCOT_r15.print (_sb, "aul_StartingFullBW_InsideMCOT_r15", _level+1);
      if (aul_StartingFullBW_OutsideMCOT_r15 != null) aul_StartingFullBW_OutsideMCOT_r15.print (_sb, "aul_StartingFullBW_OutsideMCOT_r15", _level+1);
      if (aul_StartingPartialBW_InsideMCOT_r15 != null) aul_StartingPartialBW_InsideMCOT_r15.print (_sb, "aul_StartingPartialBW_InsideMCOT_r15", _level+1);
      if (aul_StartingPartialBW_OutsideMCOT_r15 != null) aul_StartingPartialBW_OutsideMCOT_r15.print (_sb, "aul_StartingPartialBW_OutsideMCOT_r15", _level+1);
      if (aul_RetransmissionTimer_r15 != null) aul_RetransmissionTimer_r15.print (_sb, "aul_RetransmissionTimer_r15", _level+1);
      if (endingSymbolAUL_r15 != null) endingSymbolAUL_r15.print (_sb, "endingSymbolAUL_r15", _level+1);
      if (subframeOffsetCOT_Sharing_r15 != null) subframeOffsetCOT_Sharing_r15.print (_sb, "subframeOffsetCOT_Sharing_r15", _level+1);
      if (contentionWindowSizeTimer_r15 != null) contentionWindowSizeTimer_r15.print (_sb, "contentionWindowSizeTimer_r15", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
