/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class RLC_BearerConfig_servedRadioBearer extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CHOICE";
   }

   // Choice element identifier constants
   public final static byte _SRB_IDENTITY = 1;
   public final static byte _DRB_IDENTITY = 2;

   public RLC_BearerConfig_servedRadioBearer () {
      super();
   }

   public RLC_BearerConfig_servedRadioBearer (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _SRB_IDENTITY: return "srb_Identity";
      case _DRB_IDENTITY: return "drb_Identity";
      default: return "UNDEFINED";
      }
   }

   public void set_srb_Identity (SRB_Identity value) {
      setElement (_SRB_IDENTITY, value);
   }

   public void set_drb_Identity (DRB_Identity value) {
      setElement (_DRB_IDENTITY, value);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int idx = (int) buffer.decodeConsWholeNumber (2, "index");
      choiceID = idx + 1;
      buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

      switch (idx) {
         // srb_Identity
         case 0: { 
            SRB_Identity srb_Identity;
            element = srb_Identity = new SRB_Identity();
            srb_Identity.decode (buffer);
            break;
         }

         // drb_Identity
         case 1: { 
            DRB_Identity drb_Identity;
            element = drb_Identity = new DRB_Identity();
            drb_Identity.decode (buffer);
            break;
         }

         default:
         throw new Asn1InvalidChoiceOptionException (buffer, idx);
      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (element != null) {
         element.print (_sb, getElemName(), _level+1);
      }
      indent (_sb, _level);
      _sb.append("}\n");
   }

}
