/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_InterNodeDefinitions;

import com.objsys.asn1j.runtime.*;
import asn.lte.generated.EUTRA_RRC_Definitions.InDeviceCoexIndication_r11;
import asn.lte.generated.EUTRA_RRC_Definitions.MBMSInterestIndication_r11;
import asn.lte.generated.EUTRA_RRC_Definitions.UEAssistanceInformation_r11;
import asn.lte.generated.EUTRA_RRC_Definitions.SidelinkUEInformation_r12;

public class AS_Context_v1130 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_InterNodeDefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "AS-Context-v1130";
   }

   public InDeviceCoexIndication_r11 idc_Indication_r11;  // optional
   public MBMSInterestIndication_r11 mbmsInterestIndication_r11;  // optional
   public UEAssistanceInformation_r11 powerPrefIndication_r11;  // optional
   public boolean mV2ExtPresent;
   public SidelinkUEInformation_r12 sidelinkUEInformation_r12;  // optional
   public boolean mV3ExtPresent;
   public Asn1OctetString sourceContextEN_DC_r15;  // optional
   public boolean mV4ExtPresent;
   public Asn1OctetString selectedbandCombinationInfoEN_DC_v1540;  // optional
   public Asn1OpenExt extElem1;

   public AS_Context_v1130 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public AS_Context_v1130 (
      InDeviceCoexIndication_r11 idc_Indication_r11_,
      MBMSInterestIndication_r11 mbmsInterestIndication_r11_,
      UEAssistanceInformation_r11 powerPrefIndication_r11_,
      SidelinkUEInformation_r12 sidelinkUEInformation_r12_,
      Asn1OctetString sourceContextEN_DC_r15_,
      Asn1OctetString selectedbandCombinationInfoEN_DC_v1540_
   ) {
      super();
      idc_Indication_r11 = idc_Indication_r11_;
      mbmsInterestIndication_r11 = mbmsInterestIndication_r11_;
      powerPrefIndication_r11 = powerPrefIndication_r11_;
      sidelinkUEInformation_r12 = sidelinkUEInformation_r12_;
      sourceContextEN_DC_r15 = sourceContextEN_DC_r15_;
      selectedbandCombinationInfoEN_DC_v1540 = selectedbandCombinationInfoEN_DC_v1540_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public AS_Context_v1130 (InDeviceCoexIndication_r11 idc_Indication_r11_,
      MBMSInterestIndication_r11 mbmsInterestIndication_r11_,
      UEAssistanceInformation_r11 powerPrefIndication_r11_,
      SidelinkUEInformation_r12 sidelinkUEInformation_r12_,
      byte[] sourceContextEN_DC_r15_,
      byte[] selectedbandCombinationInfoEN_DC_v1540_
   ) {
      super();
      idc_Indication_r11 = idc_Indication_r11_;
      mbmsInterestIndication_r11 = mbmsInterestIndication_r11_;
      powerPrefIndication_r11 = powerPrefIndication_r11_;
      sidelinkUEInformation_r12 = sidelinkUEInformation_r12_;
      sourceContextEN_DC_r15 = new Asn1OctetString (sourceContextEN_DC_r15_);
      selectedbandCombinationInfoEN_DC_v1540 = new Asn1OctetString (selectedbandCombinationInfoEN_DC_v1540_);
   }

   public void init () {
      idc_Indication_r11 = null;
      mbmsInterestIndication_r11 = null;
      powerPrefIndication_r11 = null;
      sidelinkUEInformation_r12 = null;
      sourceContextEN_DC_r15 = null;
      selectedbandCombinationInfoEN_DC_v1540 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return idc_Indication_r11;
         case 1: return mbmsInterestIndication_r11;
         case 2: return powerPrefIndication_r11;
         case 3: return sidelinkUEInformation_r12;
         case 4: return sourceContextEN_DC_r15;
         case 5: return selectedbandCombinationInfoEN_DC_v1540;
         case 6: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "idc-Indication-r11";
         case 1: return "mbmsInterestIndication-r11";
         case 2: return "powerPrefIndication-r11";
         case 3: return "sidelinkUEInformation-r12";
         case 4: return "sourceContextEN-DC-r15";
         case 5: return "selectedbandCombinationInfoEN-DC-v1540";
         case 6: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean idc_Indication_r11Present = buffer.decodeBit ("idc_Indication_r11Present");
      boolean mbmsInterestIndication_r11Present = buffer.decodeBit ("mbmsInterestIndication_r11Present");
      boolean powerPrefIndication_r11Present = buffer.decodeBit ("powerPrefIndication_r11Present");

      // decode idc_Indication_r11

      if (idc_Indication_r11Present) {
         buffer.getContext().eventDispatcher.startElement("idc_Indication_r11", -1);

         Asn1OctetString idc_Indication_r11_outer = new Asn1OctetString();
         idc_Indication_r11_outer.decode (buffer);
         if (idc_Indication_r11_outer.value == null) throw new Asn1Exception("contained type's complete encoding is empty");
         Asn1PerDecodeBuffer savedBuffer = buffer;
         buffer = new Asn1PerDecodeBuffer( idc_Indication_r11_outer.value, buffer.isAligned());
         buffer.setEventHandlerList( savedBuffer );
         idc_Indication_r11 = new InDeviceCoexIndication_r11();
         idc_Indication_r11.decode (buffer);
         buffer = savedBuffer;
         buffer.getContext().eventDispatcher.endElement("idc_Indication_r11", -1);
      }
      else {
         idc_Indication_r11 = null;
      }

      // decode mbmsInterestIndication_r11

      if (mbmsInterestIndication_r11Present) {
         buffer.getContext().eventDispatcher.startElement("mbmsInterestIndication_r11", -1);

         Asn1OctetString mbmsInterestIndication_r11_outer = new Asn1OctetString();
         mbmsInterestIndication_r11_outer.decode (buffer);
         if (mbmsInterestIndication_r11_outer.value == null) throw new Asn1Exception("contained type's complete encoding is empty");
         Asn1PerDecodeBuffer savedBuffer = buffer;
         buffer = new Asn1PerDecodeBuffer( mbmsInterestIndication_r11_outer.value, buffer.isAligned());
         buffer.setEventHandlerList( savedBuffer );
         mbmsInterestIndication_r11 = new MBMSInterestIndication_r11();
         mbmsInterestIndication_r11.decode (buffer);
         buffer = savedBuffer;
         buffer.getContext().eventDispatcher.endElement("mbmsInterestIndication_r11", -1);
      }
      else {
         mbmsInterestIndication_r11 = null;
      }

      // decode powerPrefIndication_r11

      if (powerPrefIndication_r11Present) {
         buffer.getContext().eventDispatcher.startElement("powerPrefIndication_r11", -1);

         Asn1OctetString powerPrefIndication_r11_outer = new Asn1OctetString();
         powerPrefIndication_r11_outer.decode (buffer);
         if (powerPrefIndication_r11_outer.value == null) throw new Asn1Exception("contained type's complete encoding is empty");
         Asn1PerDecodeBuffer savedBuffer = buffer;
         buffer = new Asn1PerDecodeBuffer( powerPrefIndication_r11_outer.value, buffer.isAligned());
         buffer.setEventHandlerList( savedBuffer );
         powerPrefIndication_r11 = new UEAssistanceInformation_r11();
         powerPrefIndication_r11.decode (buffer);
         buffer = savedBuffer;
         buffer.getContext().eventDispatcher.endElement("powerPrefIndication_r11", -1);
      }
      else {
         powerPrefIndication_r11 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV4ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean sidelinkUEInformation_r12Present = buffer.decodeBit ("sidelinkUEInformation_r12Present");

            // decode sidelinkUEInformation_r12

            if (sidelinkUEInformation_r12Present) {
               buffer.getContext().eventDispatcher.startElement("sidelinkUEInformation_r12", -1);

               Asn1OctetString sidelinkUEInformation_r12_outer = new Asn1OctetString();
               sidelinkUEInformation_r12_outer.decode (buffer);
               if (sidelinkUEInformation_r12_outer.value == null) throw new Asn1Exception("contained type's complete encoding is empty");
               Asn1PerDecodeBuffer savedBuffer = buffer;
               buffer = new Asn1PerDecodeBuffer( sidelinkUEInformation_r12_outer.value, buffer.isAligned());
               buffer.setEventHandlerList( savedBuffer );
               sidelinkUEInformation_r12 = new SidelinkUEInformation_r12();
               sidelinkUEInformation_r12.decode (buffer);
               buffer = savedBuffer;
               buffer.getContext().eventDispatcher.endElement("sidelinkUEInformation_r12", -1);
            }
            else {
               sidelinkUEInformation_r12 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean sourceContextEN_DC_r15Present = buffer.decodeBit ("sourceContextEN_DC_r15Present");

            // decode sourceContextEN_DC_r15

            if (sourceContextEN_DC_r15Present) {
               buffer.getContext().eventDispatcher.startElement("sourceContextEN_DC_r15", -1);

               sourceContextEN_DC_r15 = new Asn1OctetString();
               sourceContextEN_DC_r15.decode (buffer);

               buffer.invokeCharacters(sourceContextEN_DC_r15.toString());
               buffer.getContext().eventDispatcher.endElement("sourceContextEN_DC_r15", -1);
            }
            else {
               sourceContextEN_DC_r15 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV4ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean selectedbandCombinationInfoEN_DC_v1540Present = buffer.decodeBit ("selectedbandCombinationInfoEN_DC_v1540Present");

            // decode selectedbandCombinationInfoEN_DC_v1540

            if (selectedbandCombinationInfoEN_DC_v1540Present) {
               buffer.getContext().eventDispatcher.startElement("selectedbandCombinationInfoEN_DC_v1540", -1);

               selectedbandCombinationInfoEN_DC_v1540 = new Asn1OctetString();
               selectedbandCombinationInfoEN_DC_v1540.decode (buffer);

               buffer.invokeCharacters(selectedbandCombinationInfoEN_DC_v1540.toString());
               buffer.getContext().eventDispatcher.endElement("selectedbandCombinationInfoEN_DC_v1540", -1);
            }
            else {
               selectedbandCombinationInfoEN_DC_v1540 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (idc_Indication_r11 != null) idc_Indication_r11.print (_sb, "idc_Indication_r11", _level+1);
      if (mbmsInterestIndication_r11 != null) mbmsInterestIndication_r11.print (_sb, "mbmsInterestIndication_r11", _level+1);
      if (powerPrefIndication_r11 != null) powerPrefIndication_r11.print (_sb, "powerPrefIndication_r11", _level+1);
      if (sidelinkUEInformation_r12 != null) sidelinkUEInformation_r12.print (_sb, "sidelinkUEInformation_r12", _level+1);
      if (sourceContextEN_DC_r15 != null) sourceContextEN_DC_r15.print (_sb, "sourceContextEN_DC_r15", _level+1);
      if (selectedbandCombinationInfoEN_DC_v1540 != null) selectedbandCombinationInfoEN_DC_v1540.print (_sb, "selectedbandCombinationInfoEN_DC_v1540", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
