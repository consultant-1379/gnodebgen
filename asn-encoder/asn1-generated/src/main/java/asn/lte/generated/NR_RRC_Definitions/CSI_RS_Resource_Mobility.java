/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class CSI_RS_Resource_Mobility extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CSI-RS-Resource-Mobility";
   }

   public CSI_RS_Index csi_RS_Index;
   public CSI_RS_Resource_Mobility_slotConfig slotConfig;
   public CSI_RS_Resource_Mobility_associatedSSB associatedSSB;  // optional
   public CSI_RS_Resource_Mobility_frequencyDomainAllocation frequencyDomainAllocation;
   public Asn1Integer firstOFDMSymbolInTimeDomain;
   public Asn1Integer sequenceGenerationConfig;
   public Asn1OpenExt extElem1;

   public CSI_RS_Resource_Mobility () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CSI_RS_Resource_Mobility (
      CSI_RS_Index csi_RS_Index_,
      CSI_RS_Resource_Mobility_slotConfig slotConfig_,
      CSI_RS_Resource_Mobility_associatedSSB associatedSSB_,
      CSI_RS_Resource_Mobility_frequencyDomainAllocation frequencyDomainAllocation_,
      Asn1Integer firstOFDMSymbolInTimeDomain_,
      Asn1Integer sequenceGenerationConfig_
   ) {
      super();
      csi_RS_Index = csi_RS_Index_;
      slotConfig = slotConfig_;
      associatedSSB = associatedSSB_;
      frequencyDomainAllocation = frequencyDomainAllocation_;
      firstOFDMSymbolInTimeDomain = firstOFDMSymbolInTimeDomain_;
      sequenceGenerationConfig = sequenceGenerationConfig_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public CSI_RS_Resource_Mobility (
      CSI_RS_Index csi_RS_Index_,
      CSI_RS_Resource_Mobility_slotConfig slotConfig_,
      CSI_RS_Resource_Mobility_frequencyDomainAllocation frequencyDomainAllocation_,
      Asn1Integer firstOFDMSymbolInTimeDomain_,
      Asn1Integer sequenceGenerationConfig_
   ) {
      super();
      csi_RS_Index = csi_RS_Index_;
      slotConfig = slotConfig_;
      frequencyDomainAllocation = frequencyDomainAllocation_;
      firstOFDMSymbolInTimeDomain = firstOFDMSymbolInTimeDomain_;
      sequenceGenerationConfig = sequenceGenerationConfig_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public CSI_RS_Resource_Mobility (long csi_RS_Index_,
      CSI_RS_Resource_Mobility_slotConfig slotConfig_,
      CSI_RS_Resource_Mobility_associatedSSB associatedSSB_,
      CSI_RS_Resource_Mobility_frequencyDomainAllocation frequencyDomainAllocation_,
      long firstOFDMSymbolInTimeDomain_,
      long sequenceGenerationConfig_
   ) {
      super();
      csi_RS_Index = new CSI_RS_Index (csi_RS_Index_);
      slotConfig = slotConfig_;
      associatedSSB = associatedSSB_;
      frequencyDomainAllocation = frequencyDomainAllocation_;
      firstOFDMSymbolInTimeDomain = new Asn1Integer (firstOFDMSymbolInTimeDomain_);
      sequenceGenerationConfig = new Asn1Integer (sequenceGenerationConfig_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public CSI_RS_Resource_Mobility (
      long csi_RS_Index_,
      CSI_RS_Resource_Mobility_slotConfig slotConfig_,
      CSI_RS_Resource_Mobility_frequencyDomainAllocation frequencyDomainAllocation_,
      long firstOFDMSymbolInTimeDomain_,
      long sequenceGenerationConfig_
   ) {
      super();
      csi_RS_Index = new CSI_RS_Index (csi_RS_Index_);
      slotConfig = slotConfig_;
      frequencyDomainAllocation = frequencyDomainAllocation_;
      firstOFDMSymbolInTimeDomain = new Asn1Integer (firstOFDMSymbolInTimeDomain_);
      sequenceGenerationConfig = new Asn1Integer (sequenceGenerationConfig_);
   }

   public void init () {
      csi_RS_Index = null;
      slotConfig = null;
      associatedSSB = null;
      frequencyDomainAllocation = null;
      firstOFDMSymbolInTimeDomain = null;
      sequenceGenerationConfig = null;
      extElem1 = null;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return csi_RS_Index;
         case 1: return slotConfig;
         case 2: return associatedSSB;
         case 3: return frequencyDomainAllocation;
         case 4: return firstOFDMSymbolInTimeDomain;
         case 5: return sequenceGenerationConfig;
         case 6: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "csi-RS-Index";
         case 1: return "slotConfig";
         case 2: return "associatedSSB";
         case 3: return "frequencyDomainAllocation";
         case 4: return "firstOFDMSymbolInTimeDomain";
         case 5: return "sequenceGenerationConfig";
         case 6: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean associatedSSBPresent = buffer.decodeBit ("associatedSSBPresent");

      // decode csi_RS_Index

      buffer.getContext().eventDispatcher.startElement("csi_RS_Index", -1);

      csi_RS_Index = new CSI_RS_Index();
      csi_RS_Index.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("csi_RS_Index", -1);

      // decode slotConfig

      buffer.getContext().eventDispatcher.startElement("slotConfig", -1);

      slotConfig = new CSI_RS_Resource_Mobility_slotConfig();
      slotConfig.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("slotConfig", -1);

      // decode associatedSSB

      if (associatedSSBPresent) {
         buffer.getContext().eventDispatcher.startElement("associatedSSB", -1);

         associatedSSB = new CSI_RS_Resource_Mobility_associatedSSB();
         associatedSSB.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("associatedSSB", -1);
      }
      else {
         associatedSSB = null;
      }

      // decode frequencyDomainAllocation

      buffer.getContext().eventDispatcher.startElement("frequencyDomainAllocation", -1);

      frequencyDomainAllocation = new CSI_RS_Resource_Mobility_frequencyDomainAllocation();
      frequencyDomainAllocation.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("frequencyDomainAllocation", -1);

      // decode firstOFDMSymbolInTimeDomain

      buffer.getContext().eventDispatcher.startElement("firstOFDMSymbolInTimeDomain", -1);

      firstOFDMSymbolInTimeDomain = new Asn1Integer();
      firstOFDMSymbolInTimeDomain.decode (buffer, 0, 13);

      buffer.invokeCharacters(firstOFDMSymbolInTimeDomain.toString());
      buffer.getContext().eventDispatcher.endElement("firstOFDMSymbolInTimeDomain", -1);

      // decode sequenceGenerationConfig

      buffer.getContext().eventDispatcher.startElement("sequenceGenerationConfig", -1);

      sequenceGenerationConfig = new Asn1Integer();
      sequenceGenerationConfig.decode (buffer, 0, 1023);

      buffer.invokeCharacters(sequenceGenerationConfig.toString());
      buffer.getContext().eventDispatcher.endElement("sequenceGenerationConfig", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (csi_RS_Index != null) csi_RS_Index.print (_sb, "csi_RS_Index", _level+1);
      if (slotConfig != null) slotConfig.print (_sb, "slotConfig", _level+1);
      if (associatedSSB != null) associatedSSB.print (_sb, "associatedSSB", _level+1);
      if (frequencyDomainAllocation != null) frequencyDomainAllocation.print (_sb, "frequencyDomainAllocation", _level+1);
      if (firstOFDMSymbolInTimeDomain != null) firstOFDMSymbolInTimeDomain.print (_sb, "firstOFDMSymbolInTimeDomain", _level+1);
      if (sequenceGenerationConfig != null) sequenceGenerationConfig.print (_sb, "sequenceGenerationConfig", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
