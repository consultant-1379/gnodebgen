/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_InterNodeDefinitions;

import com.objsys.asn1j.runtime.*;
import asn.lte.generated.EUTRA_RRC_Definitions.MeasGapConfigPerCC_List_r14;

public class SCG_ConfigInfo_v1430_IEs extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_InterNodeDefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SCG-ConfigInfo-v1430-IEs";
   }

   public SCG_ConfigInfo_v1430_IEs_makeBeforeBreakSCG_Req_r14 makeBeforeBreakSCG_Req_r14 = null;  // optional
   public MeasGapConfigPerCC_List_r14 measGapConfigPerCC_List;  // optional
   public SCG_ConfigInfo_v1530_IEs nonCriticalExtension;  // optional

   public SCG_ConfigInfo_v1430_IEs () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SCG_ConfigInfo_v1430_IEs (
      SCG_ConfigInfo_v1430_IEs_makeBeforeBreakSCG_Req_r14 makeBeforeBreakSCG_Req_r14_,
      MeasGapConfigPerCC_List_r14 measGapConfigPerCC_List_,
      SCG_ConfigInfo_v1530_IEs nonCriticalExtension_
   ) {
      super();
      makeBeforeBreakSCG_Req_r14 = makeBeforeBreakSCG_Req_r14_;
      measGapConfigPerCC_List = measGapConfigPerCC_List_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   public void init () {
      makeBeforeBreakSCG_Req_r14 = null;
      measGapConfigPerCC_List = null;
      nonCriticalExtension = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return makeBeforeBreakSCG_Req_r14;
         case 1: return measGapConfigPerCC_List;
         case 2: return nonCriticalExtension;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "makeBeforeBreakSCG-Req-r14";
         case 1: return "measGapConfigPerCC-List";
         case 2: return "nonCriticalExtension";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean makeBeforeBreakSCG_Req_r14Present = buffer.decodeBit ("makeBeforeBreakSCG_Req_r14Present");
      boolean measGapConfigPerCC_ListPresent = buffer.decodeBit ("measGapConfigPerCC_ListPresent");
      boolean nonCriticalExtensionPresent = buffer.decodeBit ("nonCriticalExtensionPresent");

      // decode makeBeforeBreakSCG_Req_r14

      if (makeBeforeBreakSCG_Req_r14Present) {
         buffer.getContext().eventDispatcher.startElement("makeBeforeBreakSCG_Req_r14", -1);

         int tval = SCG_ConfigInfo_v1430_IEs_makeBeforeBreakSCG_Req_r14.decodeEnumValue (buffer);
         makeBeforeBreakSCG_Req_r14 = SCG_ConfigInfo_v1430_IEs_makeBeforeBreakSCG_Req_r14.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("makeBeforeBreakSCG_Req_r14", -1);
      }
      else {
         makeBeforeBreakSCG_Req_r14 = null;
      }

      // decode measGapConfigPerCC_List

      if (measGapConfigPerCC_ListPresent) {
         buffer.getContext().eventDispatcher.startElement("measGapConfigPerCC_List", -1);

         measGapConfigPerCC_List = new MeasGapConfigPerCC_List_r14();
         measGapConfigPerCC_List.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("measGapConfigPerCC_List", -1);
      }
      else {
         measGapConfigPerCC_List = null;
      }

      // decode nonCriticalExtension

      if (nonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension = new SCG_ConfigInfo_v1530_IEs();
         nonCriticalExtension.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }
      else {
         nonCriticalExtension = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (makeBeforeBreakSCG_Req_r14 != null) makeBeforeBreakSCG_Req_r14.print (_sb, "makeBeforeBreakSCG_Req_r14", _level+1);
      if (measGapConfigPerCC_List != null) measGapConfigPerCC_List.print (_sb, "measGapConfigPerCC_List", _level+1);
      if (nonCriticalExtension != null) nonCriticalExtension.print (_sb, "nonCriticalExtension", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
