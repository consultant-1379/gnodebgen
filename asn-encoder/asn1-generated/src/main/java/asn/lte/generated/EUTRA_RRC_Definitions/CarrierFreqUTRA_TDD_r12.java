/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class CarrierFreqUTRA_TDD_r12 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CarrierFreqUTRA-TDD-r12";
   }

   public ARFCN_ValueUTRA carrierFreq_r12;
   public CellReselectionPriority cellReselectionPriority_r12;  // optional
   public ReselectionThreshold threshX_High_r12;
   public ReselectionThreshold threshX_Low_r12;
   public Asn1Integer q_RxLevMin_r12;
   public Asn1Integer p_MaxUTRA_r12;
   public CarrierFreqUTRA_TDD_r12_reducedMeasPerformance_r12 reducedMeasPerformance_r12 = null;  // optional
   public Asn1OpenExt extElem1;

   public CarrierFreqUTRA_TDD_r12 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CarrierFreqUTRA_TDD_r12 (
      ARFCN_ValueUTRA carrierFreq_r12_,
      CellReselectionPriority cellReselectionPriority_r12_,
      ReselectionThreshold threshX_High_r12_,
      ReselectionThreshold threshX_Low_r12_,
      Asn1Integer q_RxLevMin_r12_,
      Asn1Integer p_MaxUTRA_r12_,
      CarrierFreqUTRA_TDD_r12_reducedMeasPerformance_r12 reducedMeasPerformance_r12_
   ) {
      super();
      carrierFreq_r12 = carrierFreq_r12_;
      cellReselectionPriority_r12 = cellReselectionPriority_r12_;
      threshX_High_r12 = threshX_High_r12_;
      threshX_Low_r12 = threshX_Low_r12_;
      q_RxLevMin_r12 = q_RxLevMin_r12_;
      p_MaxUTRA_r12 = p_MaxUTRA_r12_;
      reducedMeasPerformance_r12 = reducedMeasPerformance_r12_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public CarrierFreqUTRA_TDD_r12 (
      ARFCN_ValueUTRA carrierFreq_r12_,
      ReselectionThreshold threshX_High_r12_,
      ReselectionThreshold threshX_Low_r12_,
      Asn1Integer q_RxLevMin_r12_,
      Asn1Integer p_MaxUTRA_r12_
   ) {
      super();
      carrierFreq_r12 = carrierFreq_r12_;
      threshX_High_r12 = threshX_High_r12_;
      threshX_Low_r12 = threshX_Low_r12_;
      q_RxLevMin_r12 = q_RxLevMin_r12_;
      p_MaxUTRA_r12 = p_MaxUTRA_r12_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public CarrierFreqUTRA_TDD_r12 (long carrierFreq_r12_,
      long cellReselectionPriority_r12_,
      long threshX_High_r12_,
      long threshX_Low_r12_,
      long q_RxLevMin_r12_,
      long p_MaxUTRA_r12_,
      CarrierFreqUTRA_TDD_r12_reducedMeasPerformance_r12 reducedMeasPerformance_r12_
   ) {
      super();
      carrierFreq_r12 = new ARFCN_ValueUTRA (carrierFreq_r12_);
      cellReselectionPriority_r12 = new CellReselectionPriority (cellReselectionPriority_r12_);
      threshX_High_r12 = new ReselectionThreshold (threshX_High_r12_);
      threshX_Low_r12 = new ReselectionThreshold (threshX_Low_r12_);
      q_RxLevMin_r12 = new Asn1Integer (q_RxLevMin_r12_);
      p_MaxUTRA_r12 = new Asn1Integer (p_MaxUTRA_r12_);
      reducedMeasPerformance_r12 = reducedMeasPerformance_r12_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public CarrierFreqUTRA_TDD_r12 (
      long carrierFreq_r12_,
      long threshX_High_r12_,
      long threshX_Low_r12_,
      long q_RxLevMin_r12_,
      long p_MaxUTRA_r12_
   ) {
      super();
      carrierFreq_r12 = new ARFCN_ValueUTRA (carrierFreq_r12_);
      threshX_High_r12 = new ReselectionThreshold (threshX_High_r12_);
      threshX_Low_r12 = new ReselectionThreshold (threshX_Low_r12_);
      q_RxLevMin_r12 = new Asn1Integer (q_RxLevMin_r12_);
      p_MaxUTRA_r12 = new Asn1Integer (p_MaxUTRA_r12_);
   }

   public void init () {
      carrierFreq_r12 = null;
      cellReselectionPriority_r12 = null;
      threshX_High_r12 = null;
      threshX_Low_r12 = null;
      q_RxLevMin_r12 = null;
      p_MaxUTRA_r12 = null;
      reducedMeasPerformance_r12 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 8; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return carrierFreq_r12;
         case 1: return cellReselectionPriority_r12;
         case 2: return threshX_High_r12;
         case 3: return threshX_Low_r12;
         case 4: return q_RxLevMin_r12;
         case 5: return p_MaxUTRA_r12;
         case 6: return reducedMeasPerformance_r12;
         case 7: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "carrierFreq-r12";
         case 1: return "cellReselectionPriority-r12";
         case 2: return "threshX-High-r12";
         case 3: return "threshX-Low-r12";
         case 4: return "q-RxLevMin-r12";
         case 5: return "p-MaxUTRA-r12";
         case 6: return "reducedMeasPerformance-r12";
         case 7: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean cellReselectionPriority_r12Present = buffer.decodeBit ("cellReselectionPriority_r12Present");
      boolean reducedMeasPerformance_r12Present = buffer.decodeBit ("reducedMeasPerformance_r12Present");

      // decode carrierFreq_r12

      buffer.getContext().eventDispatcher.startElement("carrierFreq_r12", -1);

      carrierFreq_r12 = new ARFCN_ValueUTRA();
      carrierFreq_r12.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("carrierFreq_r12", -1);

      // decode cellReselectionPriority_r12

      if (cellReselectionPriority_r12Present) {
         buffer.getContext().eventDispatcher.startElement("cellReselectionPriority_r12", -1);

         cellReselectionPriority_r12 = new CellReselectionPriority();
         cellReselectionPriority_r12.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("cellReselectionPriority_r12", -1);
      }
      else {
         cellReselectionPriority_r12 = null;
      }

      // decode threshX_High_r12

      buffer.getContext().eventDispatcher.startElement("threshX_High_r12", -1);

      threshX_High_r12 = new ReselectionThreshold();
      threshX_High_r12.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("threshX_High_r12", -1);

      // decode threshX_Low_r12

      buffer.getContext().eventDispatcher.startElement("threshX_Low_r12", -1);

      threshX_Low_r12 = new ReselectionThreshold();
      threshX_Low_r12.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("threshX_Low_r12", -1);

      // decode q_RxLevMin_r12

      buffer.getContext().eventDispatcher.startElement("q_RxLevMin_r12", -1);

      q_RxLevMin_r12 = new Asn1Integer();
      q_RxLevMin_r12.decode (buffer, -60, -13);

      buffer.invokeCharacters(q_RxLevMin_r12.toString());
      buffer.getContext().eventDispatcher.endElement("q_RxLevMin_r12", -1);

      // decode p_MaxUTRA_r12

      buffer.getContext().eventDispatcher.startElement("p_MaxUTRA_r12", -1);

      p_MaxUTRA_r12 = new Asn1Integer();
      p_MaxUTRA_r12.decode (buffer, -50, 33);

      buffer.invokeCharacters(p_MaxUTRA_r12.toString());
      buffer.getContext().eventDispatcher.endElement("p_MaxUTRA_r12", -1);

      // decode reducedMeasPerformance_r12

      if (reducedMeasPerformance_r12Present) {
         buffer.getContext().eventDispatcher.startElement("reducedMeasPerformance_r12", -1);

         int tval = CarrierFreqUTRA_TDD_r12_reducedMeasPerformance_r12.decodeEnumValue (buffer);
         reducedMeasPerformance_r12 = CarrierFreqUTRA_TDD_r12_reducedMeasPerformance_r12.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("reducedMeasPerformance_r12", -1);
      }
      else {
         reducedMeasPerformance_r12 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (carrierFreq_r12 != null) carrierFreq_r12.print (_sb, "carrierFreq_r12", _level+1);
      if (cellReselectionPriority_r12 != null) cellReselectionPriority_r12.print (_sb, "cellReselectionPriority_r12", _level+1);
      if (threshX_High_r12 != null) threshX_High_r12.print (_sb, "threshX_High_r12", _level+1);
      if (threshX_Low_r12 != null) threshX_Low_r12.print (_sb, "threshX_Low_r12", _level+1);
      if (q_RxLevMin_r12 != null) q_RxLevMin_r12.print (_sb, "q_RxLevMin_r12", _level+1);
      if (p_MaxUTRA_r12 != null) p_MaxUTRA_r12.print (_sb, "p_MaxUTRA_r12", _level+1);
      if (reducedMeasPerformance_r12 != null) reducedMeasPerformance_r12.print (_sb, "reducedMeasPerformance_r12", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
