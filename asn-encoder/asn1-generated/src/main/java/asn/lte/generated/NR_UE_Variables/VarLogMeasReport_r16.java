/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_UE_Variables;

import com.objsys.asn1j.runtime.*;
import asn.lte.generated.NR_RRC_Definitions.AbsoluteTimeInfo_r16;
import asn.lte.generated.NR_RRC_Definitions.TraceReference_r16;
import asn.lte.generated.NR_RRC_Definitions.LogMeasInfoList_r16;
import asn.lte.generated.NR_RRC_Definitions.PLMN_IdentityList2_r16;

public class VarLogMeasReport_r16 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_UE_VariablesRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "VarLogMeasReport-r16";
   }

   public AbsoluteTimeInfo_r16 absoluteTimeInfo_r16;
   public TraceReference_r16 traceReference_r16;
   public Asn1OctetString traceRecordingSessionRef_r16;
   public Asn1OctetString tce_Id_r16;
   public LogMeasInfoList_r16 logMeasInfoList_r16;
   public PLMN_IdentityList2_r16 plmn_IdentityList_r16;

   public VarLogMeasReport_r16 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public VarLogMeasReport_r16 (
      AbsoluteTimeInfo_r16 absoluteTimeInfo_r16_,
      TraceReference_r16 traceReference_r16_,
      Asn1OctetString traceRecordingSessionRef_r16_,
      Asn1OctetString tce_Id_r16_,
      LogMeasInfoList_r16 logMeasInfoList_r16_,
      PLMN_IdentityList2_r16 plmn_IdentityList_r16_
   ) {
      super();
      absoluteTimeInfo_r16 = absoluteTimeInfo_r16_;
      traceReference_r16 = traceReference_r16_;
      traceRecordingSessionRef_r16 = traceRecordingSessionRef_r16_;
      tce_Id_r16 = tce_Id_r16_;
      logMeasInfoList_r16 = logMeasInfoList_r16_;
      plmn_IdentityList_r16 = plmn_IdentityList_r16_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public VarLogMeasReport_r16 (AbsoluteTimeInfo_r16 absoluteTimeInfo_r16_,
      TraceReference_r16 traceReference_r16_,
      byte[] traceRecordingSessionRef_r16_,
      byte[] tce_Id_r16_,
      LogMeasInfoList_r16 logMeasInfoList_r16_,
      PLMN_IdentityList2_r16 plmn_IdentityList_r16_
   ) {
      super();
      absoluteTimeInfo_r16 = absoluteTimeInfo_r16_;
      traceReference_r16 = traceReference_r16_;
      traceRecordingSessionRef_r16 = new Asn1OctetString (traceRecordingSessionRef_r16_);
      tce_Id_r16 = new Asn1OctetString (tce_Id_r16_);
      logMeasInfoList_r16 = logMeasInfoList_r16_;
      plmn_IdentityList_r16 = plmn_IdentityList_r16_;
   }

   public void init () {
      absoluteTimeInfo_r16 = null;
      traceReference_r16 = null;
      traceRecordingSessionRef_r16 = null;
      tce_Id_r16 = null;
      logMeasInfoList_r16 = null;
      plmn_IdentityList_r16 = null;
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return absoluteTimeInfo_r16;
         case 1: return traceReference_r16;
         case 2: return traceRecordingSessionRef_r16;
         case 3: return tce_Id_r16;
         case 4: return logMeasInfoList_r16;
         case 5: return plmn_IdentityList_r16;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "absoluteTimeInfo-r16";
         case 1: return "traceReference-r16";
         case 2: return "traceRecordingSessionRef-r16";
         case 3: return "tce-Id-r16";
         case 4: return "logMeasInfoList-r16";
         case 5: return "plmn-IdentityList-r16";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode absoluteTimeInfo_r16

      buffer.getContext().eventDispatcher.startElement("absoluteTimeInfo_r16", -1);

      absoluteTimeInfo_r16 = new AbsoluteTimeInfo_r16();
      absoluteTimeInfo_r16.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("absoluteTimeInfo_r16", -1);

      // decode traceReference_r16

      buffer.getContext().eventDispatcher.startElement("traceReference_r16", -1);

      traceReference_r16 = new TraceReference_r16();
      traceReference_r16.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("traceReference_r16", -1);

      // decode traceRecordingSessionRef_r16

      buffer.getContext().eventDispatcher.startElement("traceRecordingSessionRef_r16", -1);

      traceRecordingSessionRef_r16 = new Asn1OctetString();
      traceRecordingSessionRef_r16.decode (buffer, 2, 2);

      buffer.invokeCharacters(traceRecordingSessionRef_r16.toString());
      buffer.getContext().eventDispatcher.endElement("traceRecordingSessionRef_r16", -1);

      // decode tce_Id_r16

      buffer.getContext().eventDispatcher.startElement("tce_Id_r16", -1);

      tce_Id_r16 = new Asn1OctetString();
      tce_Id_r16.decode (buffer, 1, 1);

      buffer.invokeCharacters(tce_Id_r16.toString());
      buffer.getContext().eventDispatcher.endElement("tce_Id_r16", -1);

      // decode logMeasInfoList_r16

      buffer.getContext().eventDispatcher.startElement("logMeasInfoList_r16", -1);

      logMeasInfoList_r16 = new LogMeasInfoList_r16();
      logMeasInfoList_r16.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("logMeasInfoList_r16", -1);

      // decode plmn_IdentityList_r16

      buffer.getContext().eventDispatcher.startElement("plmn_IdentityList_r16", -1);

      plmn_IdentityList_r16 = new PLMN_IdentityList2_r16();
      plmn_IdentityList_r16.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("plmn_IdentityList_r16", -1);

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (absoluteTimeInfo_r16 != null) absoluteTimeInfo_r16.print (_sb, "absoluteTimeInfo_r16", _level+1);
      if (traceReference_r16 != null) traceReference_r16.print (_sb, "traceReference_r16", _level+1);
      if (traceRecordingSessionRef_r16 != null) traceRecordingSessionRef_r16.print (_sb, "traceRecordingSessionRef_r16", _level+1);
      if (tce_Id_r16 != null) tce_Id_r16.print (_sb, "tce_Id_r16", _level+1);
      if (logMeasInfoList_r16 != null) logMeasInfoList_r16.print (_sb, "logMeasInfoList_r16", _level+1);
      if (plmn_IdentityList_r16 != null) plmn_IdentityList_r16.print (_sb, "plmn_IdentityList_r16", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
