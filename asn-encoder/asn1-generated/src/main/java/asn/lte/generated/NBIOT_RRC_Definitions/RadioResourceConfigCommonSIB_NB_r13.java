/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NBIOT_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class RadioResourceConfigCommonSIB_NB_r13 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NBIOT_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "RadioResourceConfigCommonSIB-NB-r13";
   }

   public RACH_ConfigCommon_NB_r13 rach_ConfigCommon_r13;
   public BCCH_Config_NB_r13 bcch_Config_r13;
   public PCCH_Config_NB_r13 pcch_Config_r13;
   public NPRACH_ConfigSIB_NB_r13 nprach_Config_r13;
   public NPDSCH_ConfigCommon_NB_r13 npdsch_ConfigCommon_r13;
   public NPUSCH_ConfigCommon_NB_r13 npusch_ConfigCommon_r13;
   public DL_GapConfig_NB_r13 dl_Gap_r13;  // optional
   public UplinkPowerControlCommon_NB_r13 uplinkPowerControlCommon_r13;
   public boolean mV2ExtPresent;
   public NPRACH_ConfigSIB_NB_v1330 nprach_Config_v1330;  // optional
   public boolean mV3ExtPresent;
   public NPRACH_ConfigSIB_NB_v1450 nprach_Config_v1450;  // optional
   public boolean mV4ExtPresent;
   public NPRACH_ConfigSIB_NB_v1530 nprach_Config_v1530;  // optional
   public DL_GapConfig_NB_v1530 dl_Gap_v1530;  // optional
   public WUS_Config_NB_r15 wus_Config_r15;  // optional
   public Asn1OpenExt extElem1;

   public RadioResourceConfigCommonSIB_NB_r13 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public RadioResourceConfigCommonSIB_NB_r13 (
      RACH_ConfigCommon_NB_r13 rach_ConfigCommon_r13_,
      BCCH_Config_NB_r13 bcch_Config_r13_,
      PCCH_Config_NB_r13 pcch_Config_r13_,
      NPRACH_ConfigSIB_NB_r13 nprach_Config_r13_,
      NPDSCH_ConfigCommon_NB_r13 npdsch_ConfigCommon_r13_,
      NPUSCH_ConfigCommon_NB_r13 npusch_ConfigCommon_r13_,
      DL_GapConfig_NB_r13 dl_Gap_r13_,
      UplinkPowerControlCommon_NB_r13 uplinkPowerControlCommon_r13_,
      NPRACH_ConfigSIB_NB_v1330 nprach_Config_v1330_,
      NPRACH_ConfigSIB_NB_v1450 nprach_Config_v1450_,
      NPRACH_ConfigSIB_NB_v1530 nprach_Config_v1530_,
      DL_GapConfig_NB_v1530 dl_Gap_v1530_,
      WUS_Config_NB_r15 wus_Config_r15_
   ) {
      super();
      rach_ConfigCommon_r13 = rach_ConfigCommon_r13_;
      bcch_Config_r13 = bcch_Config_r13_;
      pcch_Config_r13 = pcch_Config_r13_;
      nprach_Config_r13 = nprach_Config_r13_;
      npdsch_ConfigCommon_r13 = npdsch_ConfigCommon_r13_;
      npusch_ConfigCommon_r13 = npusch_ConfigCommon_r13_;
      dl_Gap_r13 = dl_Gap_r13_;
      uplinkPowerControlCommon_r13 = uplinkPowerControlCommon_r13_;
      nprach_Config_v1330 = nprach_Config_v1330_;
      nprach_Config_v1450 = nprach_Config_v1450_;
      nprach_Config_v1530 = nprach_Config_v1530_;
      dl_Gap_v1530 = dl_Gap_v1530_;
      wus_Config_r15 = wus_Config_r15_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public RadioResourceConfigCommonSIB_NB_r13 (
      RACH_ConfigCommon_NB_r13 rach_ConfigCommon_r13_,
      BCCH_Config_NB_r13 bcch_Config_r13_,
      PCCH_Config_NB_r13 pcch_Config_r13_,
      NPRACH_ConfigSIB_NB_r13 nprach_Config_r13_,
      NPDSCH_ConfigCommon_NB_r13 npdsch_ConfigCommon_r13_,
      NPUSCH_ConfigCommon_NB_r13 npusch_ConfigCommon_r13_,
      UplinkPowerControlCommon_NB_r13 uplinkPowerControlCommon_r13_
   ) {
      super();
      rach_ConfigCommon_r13 = rach_ConfigCommon_r13_;
      bcch_Config_r13 = bcch_Config_r13_;
      pcch_Config_r13 = pcch_Config_r13_;
      nprach_Config_r13 = nprach_Config_r13_;
      npdsch_ConfigCommon_r13 = npdsch_ConfigCommon_r13_;
      npusch_ConfigCommon_r13 = npusch_ConfigCommon_r13_;
      uplinkPowerControlCommon_r13 = uplinkPowerControlCommon_r13_;
   }

   public void init () {
      rach_ConfigCommon_r13 = null;
      bcch_Config_r13 = null;
      pcch_Config_r13 = null;
      nprach_Config_r13 = null;
      npdsch_ConfigCommon_r13 = null;
      npusch_ConfigCommon_r13 = null;
      dl_Gap_r13 = null;
      uplinkPowerControlCommon_r13 = null;
      nprach_Config_v1330 = null;
      nprach_Config_v1450 = null;
      nprach_Config_v1530 = null;
      dl_Gap_v1530 = null;
      wus_Config_r15 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 14; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return rach_ConfigCommon_r13;
         case 1: return bcch_Config_r13;
         case 2: return pcch_Config_r13;
         case 3: return nprach_Config_r13;
         case 4: return npdsch_ConfigCommon_r13;
         case 5: return npusch_ConfigCommon_r13;
         case 6: return dl_Gap_r13;
         case 7: return uplinkPowerControlCommon_r13;
         case 8: return nprach_Config_v1330;
         case 9: return nprach_Config_v1450;
         case 10: return nprach_Config_v1530;
         case 11: return dl_Gap_v1530;
         case 12: return wus_Config_r15;
         case 13: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "rach-ConfigCommon-r13";
         case 1: return "bcch-Config-r13";
         case 2: return "pcch-Config-r13";
         case 3: return "nprach-Config-r13";
         case 4: return "npdsch-ConfigCommon-r13";
         case 5: return "npusch-ConfigCommon-r13";
         case 6: return "dl-Gap-r13";
         case 7: return "uplinkPowerControlCommon-r13";
         case 8: return "nprach-Config-v1330";
         case 9: return "nprach-Config-v1450";
         case 10: return "nprach-Config-v1530";
         case 11: return "dl-Gap-v1530";
         case 12: return "wus-Config-r15";
         case 13: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean dl_Gap_r13Present = buffer.decodeBit ("dl_Gap_r13Present");

      // decode rach_ConfigCommon_r13

      buffer.getContext().eventDispatcher.startElement("rach_ConfigCommon_r13", -1);

      rach_ConfigCommon_r13 = new RACH_ConfigCommon_NB_r13();
      rach_ConfigCommon_r13.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("rach_ConfigCommon_r13", -1);

      // decode bcch_Config_r13

      buffer.getContext().eventDispatcher.startElement("bcch_Config_r13", -1);

      bcch_Config_r13 = new BCCH_Config_NB_r13();
      bcch_Config_r13.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("bcch_Config_r13", -1);

      // decode pcch_Config_r13

      buffer.getContext().eventDispatcher.startElement("pcch_Config_r13", -1);

      pcch_Config_r13 = new PCCH_Config_NB_r13();
      pcch_Config_r13.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("pcch_Config_r13", -1);

      // decode nprach_Config_r13

      buffer.getContext().eventDispatcher.startElement("nprach_Config_r13", -1);

      nprach_Config_r13 = new NPRACH_ConfigSIB_NB_r13();
      nprach_Config_r13.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("nprach_Config_r13", -1);

      // decode npdsch_ConfigCommon_r13

      buffer.getContext().eventDispatcher.startElement("npdsch_ConfigCommon_r13", -1);

      npdsch_ConfigCommon_r13 = new NPDSCH_ConfigCommon_NB_r13();
      npdsch_ConfigCommon_r13.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("npdsch_ConfigCommon_r13", -1);

      // decode npusch_ConfigCommon_r13

      buffer.getContext().eventDispatcher.startElement("npusch_ConfigCommon_r13", -1);

      npusch_ConfigCommon_r13 = new NPUSCH_ConfigCommon_NB_r13();
      npusch_ConfigCommon_r13.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("npusch_ConfigCommon_r13", -1);

      // decode dl_Gap_r13

      if (dl_Gap_r13Present) {
         buffer.getContext().eventDispatcher.startElement("dl_Gap_r13", -1);

         dl_Gap_r13 = new DL_GapConfig_NB_r13();
         dl_Gap_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("dl_Gap_r13", -1);
      }
      else {
         dl_Gap_r13 = null;
      }

      // decode uplinkPowerControlCommon_r13

      buffer.getContext().eventDispatcher.startElement("uplinkPowerControlCommon_r13", -1);

      uplinkPowerControlCommon_r13 = new UplinkPowerControlCommon_NB_r13();
      uplinkPowerControlCommon_r13.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("uplinkPowerControlCommon_r13", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV4ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean nprach_Config_v1330Present = buffer.decodeBit ("nprach_Config_v1330Present");

            // decode nprach_Config_v1330

            if (nprach_Config_v1330Present) {
               buffer.getContext().eventDispatcher.startElement("nprach_Config_v1330", -1);

               nprach_Config_v1330 = new NPRACH_ConfigSIB_NB_v1330();
               nprach_Config_v1330.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("nprach_Config_v1330", -1);
            }
            else {
               nprach_Config_v1330 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean nprach_Config_v1450Present = buffer.decodeBit ("nprach_Config_v1450Present");

            // decode nprach_Config_v1450

            if (nprach_Config_v1450Present) {
               buffer.getContext().eventDispatcher.startElement("nprach_Config_v1450", -1);

               nprach_Config_v1450 = new NPRACH_ConfigSIB_NB_v1450();
               nprach_Config_v1450.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("nprach_Config_v1450", -1);
            }
            else {
               nprach_Config_v1450 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV4ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean nprach_Config_v1530Present = buffer.decodeBit ("nprach_Config_v1530Present");

            boolean dl_Gap_v1530Present = buffer.decodeBit ("dl_Gap_v1530Present");

            boolean wus_Config_r15Present = buffer.decodeBit ("wus_Config_r15Present");

            // decode nprach_Config_v1530

            if (nprach_Config_v1530Present) {
               buffer.getContext().eventDispatcher.startElement("nprach_Config_v1530", -1);

               nprach_Config_v1530 = new NPRACH_ConfigSIB_NB_v1530();
               nprach_Config_v1530.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("nprach_Config_v1530", -1);
            }
            else {
               nprach_Config_v1530 = null;
            }

            // decode dl_Gap_v1530

            if (dl_Gap_v1530Present) {
               buffer.getContext().eventDispatcher.startElement("dl_Gap_v1530", -1);

               dl_Gap_v1530 = new DL_GapConfig_NB_v1530();
               dl_Gap_v1530.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("dl_Gap_v1530", -1);
            }
            else {
               dl_Gap_v1530 = null;
            }

            // decode wus_Config_r15

            if (wus_Config_r15Present) {
               buffer.getContext().eventDispatcher.startElement("wus_Config_r15", -1);

               wus_Config_r15 = new WUS_Config_NB_r15();
               wus_Config_r15.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("wus_Config_r15", -1);
            }
            else {
               wus_Config_r15 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (rach_ConfigCommon_r13 != null) rach_ConfigCommon_r13.print (_sb, "rach_ConfigCommon_r13", _level+1);
      if (bcch_Config_r13 != null) bcch_Config_r13.print (_sb, "bcch_Config_r13", _level+1);
      if (pcch_Config_r13 != null) pcch_Config_r13.print (_sb, "pcch_Config_r13", _level+1);
      if (nprach_Config_r13 != null) nprach_Config_r13.print (_sb, "nprach_Config_r13", _level+1);
      if (npdsch_ConfigCommon_r13 != null) npdsch_ConfigCommon_r13.print (_sb, "npdsch_ConfigCommon_r13", _level+1);
      if (npusch_ConfigCommon_r13 != null) npusch_ConfigCommon_r13.print (_sb, "npusch_ConfigCommon_r13", _level+1);
      if (dl_Gap_r13 != null) dl_Gap_r13.print (_sb, "dl_Gap_r13", _level+1);
      if (uplinkPowerControlCommon_r13 != null) uplinkPowerControlCommon_r13.print (_sb, "uplinkPowerControlCommon_r13", _level+1);
      if (nprach_Config_v1330 != null) nprach_Config_v1330.print (_sb, "nprach_Config_v1330", _level+1);
      if (nprach_Config_v1450 != null) nprach_Config_v1450.print (_sb, "nprach_Config_v1450", _level+1);
      if (nprach_Config_v1530 != null) nprach_Config_v1530.print (_sb, "nprach_Config_v1530", _level+1);
      if (dl_Gap_v1530 != null) dl_Gap_v1530.print (_sb, "dl_Gap_v1530", _level+1);
      if (wus_Config_r15 != null) wus_Config_r15.print (_sb, "wus_Config_r15", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
