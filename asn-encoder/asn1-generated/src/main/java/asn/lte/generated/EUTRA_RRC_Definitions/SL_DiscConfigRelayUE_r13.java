/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SL_DiscConfigRelayUE_r13 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SL-DiscConfigRelayUE-r13";
   }

   public RSRP_RangeSL4_r13 threshHigh_r13;  // optional
   public RSRP_RangeSL4_r13 threshLow_r13;  // optional
   public SL_DiscConfigRelayUE_r13_hystMax_r13 hystMax_r13 = null;  // optional
   public SL_DiscConfigRelayUE_r13_hystMin_r13 hystMin_r13 = null;  // optional

   public SL_DiscConfigRelayUE_r13 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SL_DiscConfigRelayUE_r13 (
      RSRP_RangeSL4_r13 threshHigh_r13_,
      RSRP_RangeSL4_r13 threshLow_r13_,
      SL_DiscConfigRelayUE_r13_hystMax_r13 hystMax_r13_,
      SL_DiscConfigRelayUE_r13_hystMin_r13 hystMin_r13_
   ) {
      super();
      threshHigh_r13 = threshHigh_r13_;
      threshLow_r13 = threshLow_r13_;
      hystMax_r13 = hystMax_r13_;
      hystMin_r13 = hystMin_r13_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SL_DiscConfigRelayUE_r13 (long threshHigh_r13_,
      long threshLow_r13_,
      SL_DiscConfigRelayUE_r13_hystMax_r13 hystMax_r13_,
      SL_DiscConfigRelayUE_r13_hystMin_r13 hystMin_r13_
   ) {
      super();
      threshHigh_r13 = new RSRP_RangeSL4_r13 (threshHigh_r13_);
      threshLow_r13 = new RSRP_RangeSL4_r13 (threshLow_r13_);
      hystMax_r13 = hystMax_r13_;
      hystMin_r13 = hystMin_r13_;
   }

   public void init () {
      threshHigh_r13 = null;
      threshLow_r13 = null;
      hystMax_r13 = null;
      hystMin_r13 = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return threshHigh_r13;
         case 1: return threshLow_r13;
         case 2: return hystMax_r13;
         case 3: return hystMin_r13;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "threshHigh-r13";
         case 1: return "threshLow-r13";
         case 2: return "hystMax-r13";
         case 3: return "hystMin-r13";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean threshHigh_r13Present = buffer.decodeBit ("threshHigh_r13Present");
      boolean threshLow_r13Present = buffer.decodeBit ("threshLow_r13Present");
      boolean hystMax_r13Present = buffer.decodeBit ("hystMax_r13Present");
      boolean hystMin_r13Present = buffer.decodeBit ("hystMin_r13Present");

      // decode threshHigh_r13

      if (threshHigh_r13Present) {
         buffer.getContext().eventDispatcher.startElement("threshHigh_r13", -1);

         threshHigh_r13 = new RSRP_RangeSL4_r13();
         threshHigh_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("threshHigh_r13", -1);
      }
      else {
         threshHigh_r13 = null;
      }

      // decode threshLow_r13

      if (threshLow_r13Present) {
         buffer.getContext().eventDispatcher.startElement("threshLow_r13", -1);

         threshLow_r13 = new RSRP_RangeSL4_r13();
         threshLow_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("threshLow_r13", -1);
      }
      else {
         threshLow_r13 = null;
      }

      // decode hystMax_r13

      if (hystMax_r13Present) {
         buffer.getContext().eventDispatcher.startElement("hystMax_r13", -1);

         int tval = SL_DiscConfigRelayUE_r13_hystMax_r13.decodeEnumValue (buffer);
         hystMax_r13 = SL_DiscConfigRelayUE_r13_hystMax_r13.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("hystMax_r13", -1);
      }
      else {
         hystMax_r13 = null;
      }

      // decode hystMin_r13

      if (hystMin_r13Present) {
         buffer.getContext().eventDispatcher.startElement("hystMin_r13", -1);

         int tval = SL_DiscConfigRelayUE_r13_hystMin_r13.decodeEnumValue (buffer);
         hystMin_r13 = SL_DiscConfigRelayUE_r13_hystMin_r13.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("hystMin_r13", -1);
      }
      else {
         hystMin_r13 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (threshHigh_r13 != null) threshHigh_r13.print (_sb, "threshHigh_r13", _level+1);
      if (threshLow_r13 != null) threshLow_r13.print (_sb, "threshLow_r13", _level+1);
      if (hystMax_r13 != null) hystMax_r13.print (_sb, "hystMax_r13", _level+1);
      if (hystMin_r13 != null) hystMin_r13.print (_sb, "hystMin_r13", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
