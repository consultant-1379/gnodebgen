/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.X2AP_IEs;

import com.objsys.asn1j.runtime.*;

public class CoverageModification_Item extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_X2AP_IEsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CoverageModification-Item";
   }

   public ECGI eCGI;
   public Asn1Integer coverageState;
   public CellDeploymentStatusIndicator cellDeploymentStatusIndicator = null;  // optional
   public CellReplacingInfo cellReplacingInfo;  // optional
   public Asn1OpenExt extElem1;

   public CoverageModification_Item () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CoverageModification_Item (
      ECGI eCGI_,
      Asn1Integer coverageState_,
      CellDeploymentStatusIndicator cellDeploymentStatusIndicator_,
      CellReplacingInfo cellReplacingInfo_
   ) {
      super();
      eCGI = eCGI_;
      coverageState = coverageState_;
      cellDeploymentStatusIndicator = cellDeploymentStatusIndicator_;
      cellReplacingInfo = cellReplacingInfo_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public CoverageModification_Item (
      ECGI eCGI_,
      Asn1Integer coverageState_
   ) {
      super();
      eCGI = eCGI_;
      coverageState = coverageState_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public CoverageModification_Item (ECGI eCGI_,
      long coverageState_,
      CellDeploymentStatusIndicator cellDeploymentStatusIndicator_,
      CellReplacingInfo cellReplacingInfo_
   ) {
      super();
      eCGI = eCGI_;
      coverageState = new Asn1Integer (coverageState_);
      cellDeploymentStatusIndicator = cellDeploymentStatusIndicator_;
      cellReplacingInfo = cellReplacingInfo_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public CoverageModification_Item (
      ECGI eCGI_,
      long coverageState_
   ) {
      super();
      eCGI = eCGI_;
      coverageState = new Asn1Integer (coverageState_);
   }

   public void init () {
      eCGI = null;
      coverageState = null;
      cellDeploymentStatusIndicator = null;
      cellReplacingInfo = null;
      extElem1 = null;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return eCGI;
         case 1: return coverageState;
         case 2: return cellDeploymentStatusIndicator;
         case 3: return cellReplacingInfo;
         case 4: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "eCGI";
         case 1: return "coverageState";
         case 2: return "cellDeploymentStatusIndicator";
         case 3: return "cellReplacingInfo";
         case 4: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean cellDeploymentStatusIndicatorPresent = buffer.decodeBit ("cellDeploymentStatusIndicatorPresent");
      boolean cellReplacingInfoPresent = buffer.decodeBit ("cellReplacingInfoPresent");

      // decode eCGI

      buffer.getContext().eventDispatcher.startElement("eCGI", -1);

      eCGI = new ECGI();
      eCGI.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("eCGI", -1);

      // decode coverageState

      buffer.getContext().eventDispatcher.startElement("coverageState", -1);

      coverageState = new Asn1Integer();
      boolean extbit_1 = buffer.decodeBit ("extbit_1");
      if (!extbit_1) {
         coverageState.decode (buffer, 0, 15);
      }
      else {
         coverageState.decode (buffer);
      }

      buffer.invokeCharacters(coverageState.toString());
      buffer.getContext().eventDispatcher.endElement("coverageState", -1);

      // decode cellDeploymentStatusIndicator

      if (cellDeploymentStatusIndicatorPresent) {
         buffer.getContext().eventDispatcher.startElement("cellDeploymentStatusIndicator", -1);

         int tval = CellDeploymentStatusIndicator.decodeEnumValue (buffer);
         cellDeploymentStatusIndicator = CellDeploymentStatusIndicator.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("cellDeploymentStatusIndicator", -1);
      }
      else {
         cellDeploymentStatusIndicator = null;
      }

      // decode cellReplacingInfo

      if (cellReplacingInfoPresent) {
         buffer.getContext().eventDispatcher.startElement("cellReplacingInfo", -1);

         cellReplacingInfo = new CellReplacingInfo();
         cellReplacingInfo.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("cellReplacingInfo", -1);
      }
      else {
         cellReplacingInfo = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (eCGI != null) eCGI.print (_sb, "eCGI", _level+1);
      if (coverageState != null) coverageState.print (_sb, "coverageState", _level+1);
      if (cellDeploymentStatusIndicator != null) cellDeploymentStatusIndicator.print (_sb, "cellDeploymentStatusIndicator", _level+1);
      if (cellReplacingInfo != null) cellReplacingInfo.print (_sb, "cellReplacingInfo", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
