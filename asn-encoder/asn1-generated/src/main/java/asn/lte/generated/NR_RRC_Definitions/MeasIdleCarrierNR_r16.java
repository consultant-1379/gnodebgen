/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MeasIdleCarrierNR_r16 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "MeasIdleCarrierNR-r16";
   }

   public ARFCN_ValueNR carrierFreq_r16;
   public SubcarrierSpacing ssbSubcarrierSpacing_r16 = null;
   public MultiFrequencyBandListNR frequencyBandList;  // optional
   public CellListNR_r16 measCellListNR_r16;  // optional
   public MeasIdleCarrierNR_r16_reportQuantities_r16 reportQuantities_r16 = null;
   public MeasIdleCarrierNR_r16_qualityThreshold_r16 qualityThreshold_r16;  // optional
   public MeasIdleCarrierNR_r16_ssb_MeasConfig_r16 ssb_MeasConfig_r16;  // optional
   public BeamMeasConfigIdle_NR_r16 beamMeasConfigIdle_r16;  // optional
   public Asn1OpenExt extElem1;

   public MeasIdleCarrierNR_r16 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MeasIdleCarrierNR_r16 (
      ARFCN_ValueNR carrierFreq_r16_,
      SubcarrierSpacing ssbSubcarrierSpacing_r16_,
      MultiFrequencyBandListNR frequencyBandList_,
      CellListNR_r16 measCellListNR_r16_,
      MeasIdleCarrierNR_r16_reportQuantities_r16 reportQuantities_r16_,
      MeasIdleCarrierNR_r16_qualityThreshold_r16 qualityThreshold_r16_,
      MeasIdleCarrierNR_r16_ssb_MeasConfig_r16 ssb_MeasConfig_r16_,
      BeamMeasConfigIdle_NR_r16 beamMeasConfigIdle_r16_
   ) {
      super();
      carrierFreq_r16 = carrierFreq_r16_;
      ssbSubcarrierSpacing_r16 = ssbSubcarrierSpacing_r16_;
      frequencyBandList = frequencyBandList_;
      measCellListNR_r16 = measCellListNR_r16_;
      reportQuantities_r16 = reportQuantities_r16_;
      qualityThreshold_r16 = qualityThreshold_r16_;
      ssb_MeasConfig_r16 = ssb_MeasConfig_r16_;
      beamMeasConfigIdle_r16 = beamMeasConfigIdle_r16_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public MeasIdleCarrierNR_r16 (
      ARFCN_ValueNR carrierFreq_r16_,
      SubcarrierSpacing ssbSubcarrierSpacing_r16_,
      MeasIdleCarrierNR_r16_reportQuantities_r16 reportQuantities_r16_
   ) {
      super();
      carrierFreq_r16 = carrierFreq_r16_;
      ssbSubcarrierSpacing_r16 = ssbSubcarrierSpacing_r16_;
      reportQuantities_r16 = reportQuantities_r16_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public MeasIdleCarrierNR_r16 (long carrierFreq_r16_,
      SubcarrierSpacing ssbSubcarrierSpacing_r16_,
      MultiFrequencyBandListNR frequencyBandList_,
      CellListNR_r16 measCellListNR_r16_,
      MeasIdleCarrierNR_r16_reportQuantities_r16 reportQuantities_r16_,
      MeasIdleCarrierNR_r16_qualityThreshold_r16 qualityThreshold_r16_,
      MeasIdleCarrierNR_r16_ssb_MeasConfig_r16 ssb_MeasConfig_r16_,
      BeamMeasConfigIdle_NR_r16 beamMeasConfigIdle_r16_
   ) {
      super();
      carrierFreq_r16 = new ARFCN_ValueNR (carrierFreq_r16_);
      ssbSubcarrierSpacing_r16 = ssbSubcarrierSpacing_r16_;
      frequencyBandList = frequencyBandList_;
      measCellListNR_r16 = measCellListNR_r16_;
      reportQuantities_r16 = reportQuantities_r16_;
      qualityThreshold_r16 = qualityThreshold_r16_;
      ssb_MeasConfig_r16 = ssb_MeasConfig_r16_;
      beamMeasConfigIdle_r16 = beamMeasConfigIdle_r16_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public MeasIdleCarrierNR_r16 (
      long carrierFreq_r16_,
      SubcarrierSpacing ssbSubcarrierSpacing_r16_,
      MeasIdleCarrierNR_r16_reportQuantities_r16 reportQuantities_r16_
   ) {
      super();
      carrierFreq_r16 = new ARFCN_ValueNR (carrierFreq_r16_);
      ssbSubcarrierSpacing_r16 = ssbSubcarrierSpacing_r16_;
      reportQuantities_r16 = reportQuantities_r16_;
   }

   public void init () {
      carrierFreq_r16 = null;
      ssbSubcarrierSpacing_r16 = null;
      frequencyBandList = null;
      measCellListNR_r16 = null;
      reportQuantities_r16 = null;
      qualityThreshold_r16 = null;
      ssb_MeasConfig_r16 = null;
      beamMeasConfigIdle_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 9; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return carrierFreq_r16;
         case 1: return ssbSubcarrierSpacing_r16;
         case 2: return frequencyBandList;
         case 3: return measCellListNR_r16;
         case 4: return reportQuantities_r16;
         case 5: return qualityThreshold_r16;
         case 6: return ssb_MeasConfig_r16;
         case 7: return beamMeasConfigIdle_r16;
         case 8: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "carrierFreq-r16";
         case 1: return "ssbSubcarrierSpacing-r16";
         case 2: return "frequencyBandList";
         case 3: return "measCellListNR-r16";
         case 4: return "reportQuantities-r16";
         case 5: return "qualityThreshold-r16";
         case 6: return "ssb-MeasConfig-r16";
         case 7: return "beamMeasConfigIdle-r16";
         case 8: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean frequencyBandListPresent = buffer.decodeBit ("frequencyBandListPresent");
      boolean measCellListNR_r16Present = buffer.decodeBit ("measCellListNR_r16Present");
      boolean qualityThreshold_r16Present = buffer.decodeBit ("qualityThreshold_r16Present");
      boolean ssb_MeasConfig_r16Present = buffer.decodeBit ("ssb_MeasConfig_r16Present");
      boolean beamMeasConfigIdle_r16Present = buffer.decodeBit ("beamMeasConfigIdle_r16Present");

      // decode carrierFreq_r16

      buffer.getContext().eventDispatcher.startElement("carrierFreq_r16", -1);

      carrierFreq_r16 = new ARFCN_ValueNR();
      carrierFreq_r16.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("carrierFreq_r16", -1);

      // decode ssbSubcarrierSpacing_r16

      buffer.getContext().eventDispatcher.startElement("ssbSubcarrierSpacing_r16", -1);

      {
         int tval = SubcarrierSpacing.decodeEnumValue (buffer);
         ssbSubcarrierSpacing_r16 = SubcarrierSpacing.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("ssbSubcarrierSpacing_r16", -1);

      // decode frequencyBandList

      if (frequencyBandListPresent) {
         buffer.getContext().eventDispatcher.startElement("frequencyBandList", -1);

         frequencyBandList = new MultiFrequencyBandListNR();
         frequencyBandList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("frequencyBandList", -1);
      }
      else {
         frequencyBandList = null;
      }

      // decode measCellListNR_r16

      if (measCellListNR_r16Present) {
         buffer.getContext().eventDispatcher.startElement("measCellListNR_r16", -1);

         measCellListNR_r16 = new CellListNR_r16();
         measCellListNR_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("measCellListNR_r16", -1);
      }
      else {
         measCellListNR_r16 = null;
      }

      // decode reportQuantities_r16

      buffer.getContext().eventDispatcher.startElement("reportQuantities_r16", -1);

      {
         int tval = MeasIdleCarrierNR_r16_reportQuantities_r16.decodeEnumValue (buffer);
         reportQuantities_r16 = MeasIdleCarrierNR_r16_reportQuantities_r16.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("reportQuantities_r16", -1);

      // decode qualityThreshold_r16

      if (qualityThreshold_r16Present) {
         buffer.getContext().eventDispatcher.startElement("qualityThreshold_r16", -1);

         qualityThreshold_r16 = new MeasIdleCarrierNR_r16_qualityThreshold_r16();
         qualityThreshold_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("qualityThreshold_r16", -1);
      }
      else {
         qualityThreshold_r16 = null;
      }

      // decode ssb_MeasConfig_r16

      if (ssb_MeasConfig_r16Present) {
         buffer.getContext().eventDispatcher.startElement("ssb_MeasConfig_r16", -1);

         ssb_MeasConfig_r16 = new MeasIdleCarrierNR_r16_ssb_MeasConfig_r16();
         ssb_MeasConfig_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ssb_MeasConfig_r16", -1);
      }
      else {
         ssb_MeasConfig_r16 = null;
      }

      // decode beamMeasConfigIdle_r16

      if (beamMeasConfigIdle_r16Present) {
         buffer.getContext().eventDispatcher.startElement("beamMeasConfigIdle_r16", -1);

         beamMeasConfigIdle_r16 = new BeamMeasConfigIdle_NR_r16();
         beamMeasConfigIdle_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("beamMeasConfigIdle_r16", -1);
      }
      else {
         beamMeasConfigIdle_r16 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (carrierFreq_r16 != null) carrierFreq_r16.print (_sb, "carrierFreq_r16", _level+1);
      if (ssbSubcarrierSpacing_r16 != null) ssbSubcarrierSpacing_r16.print (_sb, "ssbSubcarrierSpacing_r16", _level+1);
      if (frequencyBandList != null) frequencyBandList.print (_sb, "frequencyBandList", _level+1);
      if (measCellListNR_r16 != null) measCellListNR_r16.print (_sb, "measCellListNR_r16", _level+1);
      if (reportQuantities_r16 != null) reportQuantities_r16.print (_sb, "reportQuantities_r16", _level+1);
      if (qualityThreshold_r16 != null) qualityThreshold_r16.print (_sb, "qualityThreshold_r16", _level+1);
      if (ssb_MeasConfig_r16 != null) ssb_MeasConfig_r16.print (_sb, "ssb_MeasConfig_r16", _level+1);
      if (beamMeasConfigIdle_r16 != null) beamMeasConfigIdle_r16.print (_sb, "beamMeasConfigIdle_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
