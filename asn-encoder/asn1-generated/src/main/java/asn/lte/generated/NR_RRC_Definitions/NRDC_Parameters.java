/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class NRDC_Parameters extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "NRDC-Parameters";
   }

   public MeasAndMobParametersMRDC measAndMobParametersNRDC;  // optional
   public GeneralParametersMRDC_XDD_Diff generalParametersNRDC;  // optional
   public UE_MRDC_CapabilityAddXDD_Mode fdd_Add_UE_NRDC_Capabilities;  // optional
   public UE_MRDC_CapabilityAddXDD_Mode tdd_Add_UE_NRDC_Capabilities;  // optional
   public UE_MRDC_CapabilityAddFRX_Mode fr1_Add_UE_NRDC_Capabilities;  // optional
   public UE_MRDC_CapabilityAddFRX_Mode fr2_Add_UE_NRDC_Capabilities;  // optional
   public Asn1OctetString dummy2;  // optional
   public NRDC_Parameters_dummy dummy;  // optional

   public NRDC_Parameters () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public NRDC_Parameters (
      MeasAndMobParametersMRDC measAndMobParametersNRDC_,
      GeneralParametersMRDC_XDD_Diff generalParametersNRDC_,
      UE_MRDC_CapabilityAddXDD_Mode fdd_Add_UE_NRDC_Capabilities_,
      UE_MRDC_CapabilityAddXDD_Mode tdd_Add_UE_NRDC_Capabilities_,
      UE_MRDC_CapabilityAddFRX_Mode fr1_Add_UE_NRDC_Capabilities_,
      UE_MRDC_CapabilityAddFRX_Mode fr2_Add_UE_NRDC_Capabilities_,
      Asn1OctetString dummy2_,
      NRDC_Parameters_dummy dummy_
   ) {
      super();
      measAndMobParametersNRDC = measAndMobParametersNRDC_;
      generalParametersNRDC = generalParametersNRDC_;
      fdd_Add_UE_NRDC_Capabilities = fdd_Add_UE_NRDC_Capabilities_;
      tdd_Add_UE_NRDC_Capabilities = tdd_Add_UE_NRDC_Capabilities_;
      fr1_Add_UE_NRDC_Capabilities = fr1_Add_UE_NRDC_Capabilities_;
      fr2_Add_UE_NRDC_Capabilities = fr2_Add_UE_NRDC_Capabilities_;
      dummy2 = dummy2_;
      dummy = dummy_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public NRDC_Parameters (MeasAndMobParametersMRDC measAndMobParametersNRDC_,
      GeneralParametersMRDC_XDD_Diff generalParametersNRDC_,
      UE_MRDC_CapabilityAddXDD_Mode fdd_Add_UE_NRDC_Capabilities_,
      UE_MRDC_CapabilityAddXDD_Mode tdd_Add_UE_NRDC_Capabilities_,
      UE_MRDC_CapabilityAddFRX_Mode fr1_Add_UE_NRDC_Capabilities_,
      UE_MRDC_CapabilityAddFRX_Mode fr2_Add_UE_NRDC_Capabilities_,
      byte[] dummy2_,
      NRDC_Parameters_dummy dummy_
   ) {
      super();
      measAndMobParametersNRDC = measAndMobParametersNRDC_;
      generalParametersNRDC = generalParametersNRDC_;
      fdd_Add_UE_NRDC_Capabilities = fdd_Add_UE_NRDC_Capabilities_;
      tdd_Add_UE_NRDC_Capabilities = tdd_Add_UE_NRDC_Capabilities_;
      fr1_Add_UE_NRDC_Capabilities = fr1_Add_UE_NRDC_Capabilities_;
      fr2_Add_UE_NRDC_Capabilities = fr2_Add_UE_NRDC_Capabilities_;
      dummy2 = new Asn1OctetString (dummy2_);
      dummy = dummy_;
   }

   public void init () {
      measAndMobParametersNRDC = null;
      generalParametersNRDC = null;
      fdd_Add_UE_NRDC_Capabilities = null;
      tdd_Add_UE_NRDC_Capabilities = null;
      fr1_Add_UE_NRDC_Capabilities = null;
      fr2_Add_UE_NRDC_Capabilities = null;
      dummy2 = null;
      dummy = null;
   }

   public int getElementCount() { return 8; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return measAndMobParametersNRDC;
         case 1: return generalParametersNRDC;
         case 2: return fdd_Add_UE_NRDC_Capabilities;
         case 3: return tdd_Add_UE_NRDC_Capabilities;
         case 4: return fr1_Add_UE_NRDC_Capabilities;
         case 5: return fr2_Add_UE_NRDC_Capabilities;
         case 6: return dummy2;
         case 7: return dummy;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "measAndMobParametersNRDC";
         case 1: return "generalParametersNRDC";
         case 2: return "fdd-Add-UE-NRDC-Capabilities";
         case 3: return "tdd-Add-UE-NRDC-Capabilities";
         case 4: return "fr1-Add-UE-NRDC-Capabilities";
         case 5: return "fr2-Add-UE-NRDC-Capabilities";
         case 6: return "dummy2";
         case 7: return "dummy";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean measAndMobParametersNRDCPresent = buffer.decodeBit ("measAndMobParametersNRDCPresent");
      boolean generalParametersNRDCPresent = buffer.decodeBit ("generalParametersNRDCPresent");
      boolean fdd_Add_UE_NRDC_CapabilitiesPresent = buffer.decodeBit ("fdd_Add_UE_NRDC_CapabilitiesPresent");
      boolean tdd_Add_UE_NRDC_CapabilitiesPresent = buffer.decodeBit ("tdd_Add_UE_NRDC_CapabilitiesPresent");
      boolean fr1_Add_UE_NRDC_CapabilitiesPresent = buffer.decodeBit ("fr1_Add_UE_NRDC_CapabilitiesPresent");
      boolean fr2_Add_UE_NRDC_CapabilitiesPresent = buffer.decodeBit ("fr2_Add_UE_NRDC_CapabilitiesPresent");
      boolean dummy2Present = buffer.decodeBit ("dummy2Present");
      boolean dummyPresent = buffer.decodeBit ("dummyPresent");

      // decode measAndMobParametersNRDC

      if (measAndMobParametersNRDCPresent) {
         buffer.getContext().eventDispatcher.startElement("measAndMobParametersNRDC", -1);

         measAndMobParametersNRDC = new MeasAndMobParametersMRDC();
         measAndMobParametersNRDC.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("measAndMobParametersNRDC", -1);
      }
      else {
         measAndMobParametersNRDC = null;
      }

      // decode generalParametersNRDC

      if (generalParametersNRDCPresent) {
         buffer.getContext().eventDispatcher.startElement("generalParametersNRDC", -1);

         generalParametersNRDC = new GeneralParametersMRDC_XDD_Diff();
         generalParametersNRDC.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("generalParametersNRDC", -1);
      }
      else {
         generalParametersNRDC = null;
      }

      // decode fdd_Add_UE_NRDC_Capabilities

      if (fdd_Add_UE_NRDC_CapabilitiesPresent) {
         buffer.getContext().eventDispatcher.startElement("fdd_Add_UE_NRDC_Capabilities", -1);

         fdd_Add_UE_NRDC_Capabilities = new UE_MRDC_CapabilityAddXDD_Mode();
         fdd_Add_UE_NRDC_Capabilities.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("fdd_Add_UE_NRDC_Capabilities", -1);
      }
      else {
         fdd_Add_UE_NRDC_Capabilities = null;
      }

      // decode tdd_Add_UE_NRDC_Capabilities

      if (tdd_Add_UE_NRDC_CapabilitiesPresent) {
         buffer.getContext().eventDispatcher.startElement("tdd_Add_UE_NRDC_Capabilities", -1);

         tdd_Add_UE_NRDC_Capabilities = new UE_MRDC_CapabilityAddXDD_Mode();
         tdd_Add_UE_NRDC_Capabilities.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("tdd_Add_UE_NRDC_Capabilities", -1);
      }
      else {
         tdd_Add_UE_NRDC_Capabilities = null;
      }

      // decode fr1_Add_UE_NRDC_Capabilities

      if (fr1_Add_UE_NRDC_CapabilitiesPresent) {
         buffer.getContext().eventDispatcher.startElement("fr1_Add_UE_NRDC_Capabilities", -1);

         fr1_Add_UE_NRDC_Capabilities = new UE_MRDC_CapabilityAddFRX_Mode();
         fr1_Add_UE_NRDC_Capabilities.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("fr1_Add_UE_NRDC_Capabilities", -1);
      }
      else {
         fr1_Add_UE_NRDC_Capabilities = null;
      }

      // decode fr2_Add_UE_NRDC_Capabilities

      if (fr2_Add_UE_NRDC_CapabilitiesPresent) {
         buffer.getContext().eventDispatcher.startElement("fr2_Add_UE_NRDC_Capabilities", -1);

         fr2_Add_UE_NRDC_Capabilities = new UE_MRDC_CapabilityAddFRX_Mode();
         fr2_Add_UE_NRDC_Capabilities.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("fr2_Add_UE_NRDC_Capabilities", -1);
      }
      else {
         fr2_Add_UE_NRDC_Capabilities = null;
      }

      // decode dummy2

      if (dummy2Present) {
         buffer.getContext().eventDispatcher.startElement("dummy2", -1);

         dummy2 = new Asn1OctetString();
         dummy2.decode (buffer);

         buffer.invokeCharacters(dummy2.toString());
         buffer.getContext().eventDispatcher.endElement("dummy2", -1);
      }
      else {
         dummy2 = null;
      }

      // decode dummy

      if (dummyPresent) {
         buffer.getContext().eventDispatcher.startElement("dummy", -1);

         dummy = new NRDC_Parameters_dummy();
         dummy.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("dummy", -1);
      }
      else {
         dummy = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (measAndMobParametersNRDC != null) measAndMobParametersNRDC.print (_sb, "measAndMobParametersNRDC", _level+1);
      if (generalParametersNRDC != null) generalParametersNRDC.print (_sb, "generalParametersNRDC", _level+1);
      if (fdd_Add_UE_NRDC_Capabilities != null) fdd_Add_UE_NRDC_Capabilities.print (_sb, "fdd_Add_UE_NRDC_Capabilities", _level+1);
      if (tdd_Add_UE_NRDC_Capabilities != null) tdd_Add_UE_NRDC_Capabilities.print (_sb, "tdd_Add_UE_NRDC_Capabilities", _level+1);
      if (fr1_Add_UE_NRDC_Capabilities != null) fr1_Add_UE_NRDC_Capabilities.print (_sb, "fr1_Add_UE_NRDC_Capabilities", _level+1);
      if (fr2_Add_UE_NRDC_Capabilities != null) fr2_Add_UE_NRDC_Capabilities.print (_sb, "fr2_Add_UE_NRDC_Capabilities", _level+1);
      if (dummy2 != null) dummy2.print (_sb, "dummy2", _level+1);
      if (dummy != null) dummy.print (_sb, "dummy", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
