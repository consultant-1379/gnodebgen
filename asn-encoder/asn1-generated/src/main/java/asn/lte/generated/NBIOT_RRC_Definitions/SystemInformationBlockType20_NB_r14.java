/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NBIOT_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SystemInformationBlockType20_NB_r14 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NBIOT_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SystemInformationBlockType20-NB-r14";
   }

   public NPDCCH_SC_MCCH_Config_NB_r14 npdcch_SC_MCCH_Config_r14;
   public SystemInformationBlockType20_NB_r14_sc_mcch_CarrierConfig_r14 sc_mcch_CarrierConfig_r14;
   public SystemInformationBlockType20_NB_r14_sc_mcch_RepetitionPeriod_r14 sc_mcch_RepetitionPeriod_r14 = null;
   public Asn1Integer sc_mcch_Offset_r14;
   public SystemInformationBlockType20_NB_r14_sc_mcch_ModificationPeriod_r14 sc_mcch_ModificationPeriod_r14 = null;
   public SC_MCCH_SchedulingInfo_NB_r14 sc_mcch_SchedulingInfo_r14;  // optional
   public Asn1OctetString lateNonCriticalExtension;  // optional
   public Asn1OpenExt extElem1;

   public SystemInformationBlockType20_NB_r14 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SystemInformationBlockType20_NB_r14 (
      NPDCCH_SC_MCCH_Config_NB_r14 npdcch_SC_MCCH_Config_r14_,
      SystemInformationBlockType20_NB_r14_sc_mcch_CarrierConfig_r14 sc_mcch_CarrierConfig_r14_,
      SystemInformationBlockType20_NB_r14_sc_mcch_RepetitionPeriod_r14 sc_mcch_RepetitionPeriod_r14_,
      Asn1Integer sc_mcch_Offset_r14_,
      SystemInformationBlockType20_NB_r14_sc_mcch_ModificationPeriod_r14 sc_mcch_ModificationPeriod_r14_,
      SC_MCCH_SchedulingInfo_NB_r14 sc_mcch_SchedulingInfo_r14_,
      Asn1OctetString lateNonCriticalExtension_
   ) {
      super();
      npdcch_SC_MCCH_Config_r14 = npdcch_SC_MCCH_Config_r14_;
      sc_mcch_CarrierConfig_r14 = sc_mcch_CarrierConfig_r14_;
      sc_mcch_RepetitionPeriod_r14 = sc_mcch_RepetitionPeriod_r14_;
      sc_mcch_Offset_r14 = sc_mcch_Offset_r14_;
      sc_mcch_ModificationPeriod_r14 = sc_mcch_ModificationPeriod_r14_;
      sc_mcch_SchedulingInfo_r14 = sc_mcch_SchedulingInfo_r14_;
      lateNonCriticalExtension = lateNonCriticalExtension_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SystemInformationBlockType20_NB_r14 (
      NPDCCH_SC_MCCH_Config_NB_r14 npdcch_SC_MCCH_Config_r14_,
      SystemInformationBlockType20_NB_r14_sc_mcch_CarrierConfig_r14 sc_mcch_CarrierConfig_r14_,
      SystemInformationBlockType20_NB_r14_sc_mcch_RepetitionPeriod_r14 sc_mcch_RepetitionPeriod_r14_,
      Asn1Integer sc_mcch_Offset_r14_,
      SystemInformationBlockType20_NB_r14_sc_mcch_ModificationPeriod_r14 sc_mcch_ModificationPeriod_r14_
   ) {
      super();
      npdcch_SC_MCCH_Config_r14 = npdcch_SC_MCCH_Config_r14_;
      sc_mcch_CarrierConfig_r14 = sc_mcch_CarrierConfig_r14_;
      sc_mcch_RepetitionPeriod_r14 = sc_mcch_RepetitionPeriod_r14_;
      sc_mcch_Offset_r14 = sc_mcch_Offset_r14_;
      sc_mcch_ModificationPeriod_r14 = sc_mcch_ModificationPeriod_r14_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SystemInformationBlockType20_NB_r14 (NPDCCH_SC_MCCH_Config_NB_r14 npdcch_SC_MCCH_Config_r14_,
      SystemInformationBlockType20_NB_r14_sc_mcch_CarrierConfig_r14 sc_mcch_CarrierConfig_r14_,
      SystemInformationBlockType20_NB_r14_sc_mcch_RepetitionPeriod_r14 sc_mcch_RepetitionPeriod_r14_,
      long sc_mcch_Offset_r14_,
      SystemInformationBlockType20_NB_r14_sc_mcch_ModificationPeriod_r14 sc_mcch_ModificationPeriod_r14_,
      SC_MCCH_SchedulingInfo_NB_r14 sc_mcch_SchedulingInfo_r14_,
      byte[] lateNonCriticalExtension_
   ) {
      super();
      npdcch_SC_MCCH_Config_r14 = npdcch_SC_MCCH_Config_r14_;
      sc_mcch_CarrierConfig_r14 = sc_mcch_CarrierConfig_r14_;
      sc_mcch_RepetitionPeriod_r14 = sc_mcch_RepetitionPeriod_r14_;
      sc_mcch_Offset_r14 = new Asn1Integer (sc_mcch_Offset_r14_);
      sc_mcch_ModificationPeriod_r14 = sc_mcch_ModificationPeriod_r14_;
      sc_mcch_SchedulingInfo_r14 = sc_mcch_SchedulingInfo_r14_;
      lateNonCriticalExtension = new Asn1OctetString (lateNonCriticalExtension_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public SystemInformationBlockType20_NB_r14 (
      NPDCCH_SC_MCCH_Config_NB_r14 npdcch_SC_MCCH_Config_r14_,
      SystemInformationBlockType20_NB_r14_sc_mcch_CarrierConfig_r14 sc_mcch_CarrierConfig_r14_,
      SystemInformationBlockType20_NB_r14_sc_mcch_RepetitionPeriod_r14 sc_mcch_RepetitionPeriod_r14_,
      long sc_mcch_Offset_r14_,
      SystemInformationBlockType20_NB_r14_sc_mcch_ModificationPeriod_r14 sc_mcch_ModificationPeriod_r14_
   ) {
      super();
      npdcch_SC_MCCH_Config_r14 = npdcch_SC_MCCH_Config_r14_;
      sc_mcch_CarrierConfig_r14 = sc_mcch_CarrierConfig_r14_;
      sc_mcch_RepetitionPeriod_r14 = sc_mcch_RepetitionPeriod_r14_;
      sc_mcch_Offset_r14 = new Asn1Integer (sc_mcch_Offset_r14_);
      sc_mcch_ModificationPeriod_r14 = sc_mcch_ModificationPeriod_r14_;
   }

   public void init () {
      npdcch_SC_MCCH_Config_r14 = null;
      sc_mcch_CarrierConfig_r14 = null;
      sc_mcch_RepetitionPeriod_r14 = null;
      sc_mcch_Offset_r14 = null;
      sc_mcch_ModificationPeriod_r14 = null;
      sc_mcch_SchedulingInfo_r14 = null;
      lateNonCriticalExtension = null;
      extElem1 = null;
   }

   public int getElementCount() { return 8; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return npdcch_SC_MCCH_Config_r14;
         case 1: return sc_mcch_CarrierConfig_r14;
         case 2: return sc_mcch_RepetitionPeriod_r14;
         case 3: return sc_mcch_Offset_r14;
         case 4: return sc_mcch_ModificationPeriod_r14;
         case 5: return sc_mcch_SchedulingInfo_r14;
         case 6: return lateNonCriticalExtension;
         case 7: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "npdcch-SC-MCCH-Config-r14";
         case 1: return "sc-mcch-CarrierConfig-r14";
         case 2: return "sc-mcch-RepetitionPeriod-r14";
         case 3: return "sc-mcch-Offset-r14";
         case 4: return "sc-mcch-ModificationPeriod-r14";
         case 5: return "sc-mcch-SchedulingInfo-r14";
         case 6: return "lateNonCriticalExtension";
         case 7: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean sc_mcch_SchedulingInfo_r14Present = buffer.decodeBit ("sc_mcch_SchedulingInfo_r14Present");
      boolean lateNonCriticalExtensionPresent = buffer.decodeBit ("lateNonCriticalExtensionPresent");

      // decode npdcch_SC_MCCH_Config_r14

      buffer.getContext().eventDispatcher.startElement("npdcch_SC_MCCH_Config_r14", -1);

      npdcch_SC_MCCH_Config_r14 = new NPDCCH_SC_MCCH_Config_NB_r14();
      npdcch_SC_MCCH_Config_r14.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("npdcch_SC_MCCH_Config_r14", -1);

      // decode sc_mcch_CarrierConfig_r14

      buffer.getContext().eventDispatcher.startElement("sc_mcch_CarrierConfig_r14", -1);

      sc_mcch_CarrierConfig_r14 = new SystemInformationBlockType20_NB_r14_sc_mcch_CarrierConfig_r14();
      sc_mcch_CarrierConfig_r14.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("sc_mcch_CarrierConfig_r14", -1);

      // decode sc_mcch_RepetitionPeriod_r14

      buffer.getContext().eventDispatcher.startElement("sc_mcch_RepetitionPeriod_r14", -1);

      {
         int tval = SystemInformationBlockType20_NB_r14_sc_mcch_RepetitionPeriod_r14.decodeEnumValue (buffer);
         sc_mcch_RepetitionPeriod_r14 = SystemInformationBlockType20_NB_r14_sc_mcch_RepetitionPeriod_r14.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("sc_mcch_RepetitionPeriod_r14", -1);

      // decode sc_mcch_Offset_r14

      buffer.getContext().eventDispatcher.startElement("sc_mcch_Offset_r14", -1);

      sc_mcch_Offset_r14 = new Asn1Integer();
      sc_mcch_Offset_r14.decode (buffer, 0, 10);

      buffer.invokeCharacters(sc_mcch_Offset_r14.toString());
      buffer.getContext().eventDispatcher.endElement("sc_mcch_Offset_r14", -1);

      // decode sc_mcch_ModificationPeriod_r14

      buffer.getContext().eventDispatcher.startElement("sc_mcch_ModificationPeriod_r14", -1);

      {
         int tval = SystemInformationBlockType20_NB_r14_sc_mcch_ModificationPeriod_r14.decodeEnumValue (buffer);
         sc_mcch_ModificationPeriod_r14 = SystemInformationBlockType20_NB_r14_sc_mcch_ModificationPeriod_r14.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("sc_mcch_ModificationPeriod_r14", -1);

      // decode sc_mcch_SchedulingInfo_r14

      if (sc_mcch_SchedulingInfo_r14Present) {
         buffer.getContext().eventDispatcher.startElement("sc_mcch_SchedulingInfo_r14", -1);

         sc_mcch_SchedulingInfo_r14 = new SC_MCCH_SchedulingInfo_NB_r14();
         sc_mcch_SchedulingInfo_r14.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sc_mcch_SchedulingInfo_r14", -1);
      }
      else {
         sc_mcch_SchedulingInfo_r14 = null;
      }

      // decode lateNonCriticalExtension

      if (lateNonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("lateNonCriticalExtension", -1);

         lateNonCriticalExtension = new Asn1OctetString();
         lateNonCriticalExtension.decode (buffer);

         buffer.invokeCharacters(lateNonCriticalExtension.toString());
         buffer.getContext().eventDispatcher.endElement("lateNonCriticalExtension", -1);
      }
      else {
         lateNonCriticalExtension = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (npdcch_SC_MCCH_Config_r14 != null) npdcch_SC_MCCH_Config_r14.print (_sb, "npdcch_SC_MCCH_Config_r14", _level+1);
      if (sc_mcch_CarrierConfig_r14 != null) sc_mcch_CarrierConfig_r14.print (_sb, "sc_mcch_CarrierConfig_r14", _level+1);
      if (sc_mcch_RepetitionPeriod_r14 != null) sc_mcch_RepetitionPeriod_r14.print (_sb, "sc_mcch_RepetitionPeriod_r14", _level+1);
      if (sc_mcch_Offset_r14 != null) sc_mcch_Offset_r14.print (_sb, "sc_mcch_Offset_r14", _level+1);
      if (sc_mcch_ModificationPeriod_r14 != null) sc_mcch_ModificationPeriod_r14.print (_sb, "sc_mcch_ModificationPeriod_r14", _level+1);
      if (sc_mcch_SchedulingInfo_r14 != null) sc_mcch_SchedulingInfo_r14.print (_sb, "sc_mcch_SchedulingInfo_r14", _level+1);
      if (lateNonCriticalExtension != null) lateNonCriticalExtension.print (_sb, "lateNonCriticalExtension", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
