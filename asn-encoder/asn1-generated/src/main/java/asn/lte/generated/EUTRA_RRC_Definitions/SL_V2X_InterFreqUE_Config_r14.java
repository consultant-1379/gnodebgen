/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SL_V2X_InterFreqUE_Config_r14 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SL-V2X-InterFreqUE-Config-r14";
   }

   public PhysCellIdList_r13 physCellIdList_r14;  // optional
   public SL_TypeTxSync_r14 typeTxSync_r14 = null;  // optional
   public SL_SyncConfigListNFreqV2X_r14 v2x_SyncConfig_r14;  // optional
   public SL_CommRxPoolListV2X_r14 v2x_CommRxPool_r14;  // optional
   public SL_CommTxPoolListV2X_r14 v2x_CommTxPoolNormal_r14;  // optional
   public SL_CommTxPoolListV2X_r14 p2x_CommTxPoolNormal_r14;  // optional
   public SL_CommResourcePoolV2X_r14 v2x_CommTxPoolExceptional_r14;  // optional
   public SL_CommTxPoolSensingConfig_r14 v2x_ResourceSelectionConfig_r14;  // optional
   public SL_ZoneConfig_r14 zoneConfig_r14;  // optional
   public Asn1Integer offsetDFN_r14;  // optional
   public Asn1OpenExt extElem1;

   public SL_V2X_InterFreqUE_Config_r14 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SL_V2X_InterFreqUE_Config_r14 (
      PhysCellIdList_r13 physCellIdList_r14_,
      SL_TypeTxSync_r14 typeTxSync_r14_,
      SL_SyncConfigListNFreqV2X_r14 v2x_SyncConfig_r14_,
      SL_CommRxPoolListV2X_r14 v2x_CommRxPool_r14_,
      SL_CommTxPoolListV2X_r14 v2x_CommTxPoolNormal_r14_,
      SL_CommTxPoolListV2X_r14 p2x_CommTxPoolNormal_r14_,
      SL_CommResourcePoolV2X_r14 v2x_CommTxPoolExceptional_r14_,
      SL_CommTxPoolSensingConfig_r14 v2x_ResourceSelectionConfig_r14_,
      SL_ZoneConfig_r14 zoneConfig_r14_,
      Asn1Integer offsetDFN_r14_
   ) {
      super();
      physCellIdList_r14 = physCellIdList_r14_;
      typeTxSync_r14 = typeTxSync_r14_;
      v2x_SyncConfig_r14 = v2x_SyncConfig_r14_;
      v2x_CommRxPool_r14 = v2x_CommRxPool_r14_;
      v2x_CommTxPoolNormal_r14 = v2x_CommTxPoolNormal_r14_;
      p2x_CommTxPoolNormal_r14 = p2x_CommTxPoolNormal_r14_;
      v2x_CommTxPoolExceptional_r14 = v2x_CommTxPoolExceptional_r14_;
      v2x_ResourceSelectionConfig_r14 = v2x_ResourceSelectionConfig_r14_;
      zoneConfig_r14 = zoneConfig_r14_;
      offsetDFN_r14 = offsetDFN_r14_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SL_V2X_InterFreqUE_Config_r14 (PhysCellIdList_r13 physCellIdList_r14_,
      SL_TypeTxSync_r14 typeTxSync_r14_,
      SL_SyncConfigListNFreqV2X_r14 v2x_SyncConfig_r14_,
      SL_CommRxPoolListV2X_r14 v2x_CommRxPool_r14_,
      SL_CommTxPoolListV2X_r14 v2x_CommTxPoolNormal_r14_,
      SL_CommTxPoolListV2X_r14 p2x_CommTxPoolNormal_r14_,
      SL_CommResourcePoolV2X_r14 v2x_CommTxPoolExceptional_r14_,
      SL_CommTxPoolSensingConfig_r14 v2x_ResourceSelectionConfig_r14_,
      SL_ZoneConfig_r14 zoneConfig_r14_,
      long offsetDFN_r14_
   ) {
      super();
      physCellIdList_r14 = physCellIdList_r14_;
      typeTxSync_r14 = typeTxSync_r14_;
      v2x_SyncConfig_r14 = v2x_SyncConfig_r14_;
      v2x_CommRxPool_r14 = v2x_CommRxPool_r14_;
      v2x_CommTxPoolNormal_r14 = v2x_CommTxPoolNormal_r14_;
      p2x_CommTxPoolNormal_r14 = p2x_CommTxPoolNormal_r14_;
      v2x_CommTxPoolExceptional_r14 = v2x_CommTxPoolExceptional_r14_;
      v2x_ResourceSelectionConfig_r14 = v2x_ResourceSelectionConfig_r14_;
      zoneConfig_r14 = zoneConfig_r14_;
      offsetDFN_r14 = new Asn1Integer (offsetDFN_r14_);
   }

   public void init () {
      physCellIdList_r14 = null;
      typeTxSync_r14 = null;
      v2x_SyncConfig_r14 = null;
      v2x_CommRxPool_r14 = null;
      v2x_CommTxPoolNormal_r14 = null;
      p2x_CommTxPoolNormal_r14 = null;
      v2x_CommTxPoolExceptional_r14 = null;
      v2x_ResourceSelectionConfig_r14 = null;
      zoneConfig_r14 = null;
      offsetDFN_r14 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 11; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return physCellIdList_r14;
         case 1: return typeTxSync_r14;
         case 2: return v2x_SyncConfig_r14;
         case 3: return v2x_CommRxPool_r14;
         case 4: return v2x_CommTxPoolNormal_r14;
         case 5: return p2x_CommTxPoolNormal_r14;
         case 6: return v2x_CommTxPoolExceptional_r14;
         case 7: return v2x_ResourceSelectionConfig_r14;
         case 8: return zoneConfig_r14;
         case 9: return offsetDFN_r14;
         case 10: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "physCellIdList-r14";
         case 1: return "typeTxSync-r14";
         case 2: return "v2x-SyncConfig-r14";
         case 3: return "v2x-CommRxPool-r14";
         case 4: return "v2x-CommTxPoolNormal-r14";
         case 5: return "p2x-CommTxPoolNormal-r14";
         case 6: return "v2x-CommTxPoolExceptional-r14";
         case 7: return "v2x-ResourceSelectionConfig-r14";
         case 8: return "zoneConfig-r14";
         case 9: return "offsetDFN-r14";
         case 10: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean physCellIdList_r14Present = buffer.decodeBit ("physCellIdList_r14Present");
      boolean typeTxSync_r14Present = buffer.decodeBit ("typeTxSync_r14Present");
      boolean v2x_SyncConfig_r14Present = buffer.decodeBit ("v2x_SyncConfig_r14Present");
      boolean v2x_CommRxPool_r14Present = buffer.decodeBit ("v2x_CommRxPool_r14Present");
      boolean v2x_CommTxPoolNormal_r14Present = buffer.decodeBit ("v2x_CommTxPoolNormal_r14Present");
      boolean p2x_CommTxPoolNormal_r14Present = buffer.decodeBit ("p2x_CommTxPoolNormal_r14Present");
      boolean v2x_CommTxPoolExceptional_r14Present = buffer.decodeBit ("v2x_CommTxPoolExceptional_r14Present");
      boolean v2x_ResourceSelectionConfig_r14Present = buffer.decodeBit ("v2x_ResourceSelectionConfig_r14Present");
      boolean zoneConfig_r14Present = buffer.decodeBit ("zoneConfig_r14Present");
      boolean offsetDFN_r14Present = buffer.decodeBit ("offsetDFN_r14Present");

      // decode physCellIdList_r14

      if (physCellIdList_r14Present) {
         buffer.getContext().eventDispatcher.startElement("physCellIdList_r14", -1);

         physCellIdList_r14 = new PhysCellIdList_r13();
         physCellIdList_r14.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("physCellIdList_r14", -1);
      }
      else {
         physCellIdList_r14 = null;
      }

      // decode typeTxSync_r14

      if (typeTxSync_r14Present) {
         buffer.getContext().eventDispatcher.startElement("typeTxSync_r14", -1);

         int tval = SL_TypeTxSync_r14.decodeEnumValue (buffer);
         typeTxSync_r14 = SL_TypeTxSync_r14.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("typeTxSync_r14", -1);
      }
      else {
         typeTxSync_r14 = null;
      }

      // decode v2x_SyncConfig_r14

      if (v2x_SyncConfig_r14Present) {
         buffer.getContext().eventDispatcher.startElement("v2x_SyncConfig_r14", -1);

         v2x_SyncConfig_r14 = new SL_SyncConfigListNFreqV2X_r14();
         v2x_SyncConfig_r14.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("v2x_SyncConfig_r14", -1);
      }
      else {
         v2x_SyncConfig_r14 = null;
      }

      // decode v2x_CommRxPool_r14

      if (v2x_CommRxPool_r14Present) {
         buffer.getContext().eventDispatcher.startElement("v2x_CommRxPool_r14", -1);

         v2x_CommRxPool_r14 = new SL_CommRxPoolListV2X_r14();
         v2x_CommRxPool_r14.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("v2x_CommRxPool_r14", -1);
      }
      else {
         v2x_CommRxPool_r14 = null;
      }

      // decode v2x_CommTxPoolNormal_r14

      if (v2x_CommTxPoolNormal_r14Present) {
         buffer.getContext().eventDispatcher.startElement("v2x_CommTxPoolNormal_r14", -1);

         v2x_CommTxPoolNormal_r14 = new SL_CommTxPoolListV2X_r14();
         v2x_CommTxPoolNormal_r14.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("v2x_CommTxPoolNormal_r14", -1);
      }
      else {
         v2x_CommTxPoolNormal_r14 = null;
      }

      // decode p2x_CommTxPoolNormal_r14

      if (p2x_CommTxPoolNormal_r14Present) {
         buffer.getContext().eventDispatcher.startElement("p2x_CommTxPoolNormal_r14", -1);

         p2x_CommTxPoolNormal_r14 = new SL_CommTxPoolListV2X_r14();
         p2x_CommTxPoolNormal_r14.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("p2x_CommTxPoolNormal_r14", -1);
      }
      else {
         p2x_CommTxPoolNormal_r14 = null;
      }

      // decode v2x_CommTxPoolExceptional_r14

      if (v2x_CommTxPoolExceptional_r14Present) {
         buffer.getContext().eventDispatcher.startElement("v2x_CommTxPoolExceptional_r14", -1);

         v2x_CommTxPoolExceptional_r14 = new SL_CommResourcePoolV2X_r14();
         v2x_CommTxPoolExceptional_r14.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("v2x_CommTxPoolExceptional_r14", -1);
      }
      else {
         v2x_CommTxPoolExceptional_r14 = null;
      }

      // decode v2x_ResourceSelectionConfig_r14

      if (v2x_ResourceSelectionConfig_r14Present) {
         buffer.getContext().eventDispatcher.startElement("v2x_ResourceSelectionConfig_r14", -1);

         v2x_ResourceSelectionConfig_r14 = new SL_CommTxPoolSensingConfig_r14();
         v2x_ResourceSelectionConfig_r14.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("v2x_ResourceSelectionConfig_r14", -1);
      }
      else {
         v2x_ResourceSelectionConfig_r14 = null;
      }

      // decode zoneConfig_r14

      if (zoneConfig_r14Present) {
         buffer.getContext().eventDispatcher.startElement("zoneConfig_r14", -1);

         zoneConfig_r14 = new SL_ZoneConfig_r14();
         zoneConfig_r14.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("zoneConfig_r14", -1);
      }
      else {
         zoneConfig_r14 = null;
      }

      // decode offsetDFN_r14

      if (offsetDFN_r14Present) {
         buffer.getContext().eventDispatcher.startElement("offsetDFN_r14", -1);

         offsetDFN_r14 = new Asn1Integer();
         offsetDFN_r14.decode (buffer, 0, 1000);

         buffer.invokeCharacters(offsetDFN_r14.toString());
         buffer.getContext().eventDispatcher.endElement("offsetDFN_r14", -1);
      }
      else {
         offsetDFN_r14 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (physCellIdList_r14 != null) physCellIdList_r14.print (_sb, "physCellIdList_r14", _level+1);
      if (typeTxSync_r14 != null) typeTxSync_r14.print (_sb, "typeTxSync_r14", _level+1);
      if (v2x_SyncConfig_r14 != null) v2x_SyncConfig_r14.print (_sb, "v2x_SyncConfig_r14", _level+1);
      if (v2x_CommRxPool_r14 != null) v2x_CommRxPool_r14.print (_sb, "v2x_CommRxPool_r14", _level+1);
      if (v2x_CommTxPoolNormal_r14 != null) v2x_CommTxPoolNormal_r14.print (_sb, "v2x_CommTxPoolNormal_r14", _level+1);
      if (p2x_CommTxPoolNormal_r14 != null) p2x_CommTxPoolNormal_r14.print (_sb, "p2x_CommTxPoolNormal_r14", _level+1);
      if (v2x_CommTxPoolExceptional_r14 != null) v2x_CommTxPoolExceptional_r14.print (_sb, "v2x_CommTxPoolExceptional_r14", _level+1);
      if (v2x_ResourceSelectionConfig_r14 != null) v2x_ResourceSelectionConfig_r14.print (_sb, "v2x_ResourceSelectionConfig_r14", _level+1);
      if (zoneConfig_r14 != null) zoneConfig_r14.print (_sb, "zoneConfig_r14", _level+1);
      if (offsetDFN_r14 != null) offsetDFN_r14.print (_sb, "offsetDFN_r14", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
