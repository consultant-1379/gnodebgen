/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SlotFormatCombinationsPerCell extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SlotFormatCombinationsPerCell";
   }

   public ServCellIndex servingCellId;
   public SubcarrierSpacing subcarrierSpacing = null;
   public SubcarrierSpacing subcarrierSpacing2 = null;  // optional
   public SlotFormatCombinationsPerCell_slotFormatCombinations slotFormatCombinations;  // optional
   public Asn1Integer positionInDCI;  // optional
   public boolean mV2ExtPresent;
   public SlotFormatCombinationsPerCell_enableConfiguredUL_r16 enableConfiguredUL_r16 = null;  // optional
   public Asn1OpenExt extElem1;

   public SlotFormatCombinationsPerCell () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SlotFormatCombinationsPerCell (
      ServCellIndex servingCellId_,
      SubcarrierSpacing subcarrierSpacing_,
      SubcarrierSpacing subcarrierSpacing2_,
      SlotFormatCombinationsPerCell_slotFormatCombinations slotFormatCombinations_,
      Asn1Integer positionInDCI_,
      SlotFormatCombinationsPerCell_enableConfiguredUL_r16 enableConfiguredUL_r16_
   ) {
      super();
      servingCellId = servingCellId_;
      subcarrierSpacing = subcarrierSpacing_;
      subcarrierSpacing2 = subcarrierSpacing2_;
      slotFormatCombinations = slotFormatCombinations_;
      positionInDCI = positionInDCI_;
      enableConfiguredUL_r16 = enableConfiguredUL_r16_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SlotFormatCombinationsPerCell (
      ServCellIndex servingCellId_,
      SubcarrierSpacing subcarrierSpacing_
   ) {
      super();
      servingCellId = servingCellId_;
      subcarrierSpacing = subcarrierSpacing_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SlotFormatCombinationsPerCell (long servingCellId_,
      SubcarrierSpacing subcarrierSpacing_,
      SubcarrierSpacing subcarrierSpacing2_,
      SlotFormatCombinationsPerCell_slotFormatCombinations slotFormatCombinations_,
      long positionInDCI_,
      SlotFormatCombinationsPerCell_enableConfiguredUL_r16 enableConfiguredUL_r16_
   ) {
      super();
      servingCellId = new ServCellIndex (servingCellId_);
      subcarrierSpacing = subcarrierSpacing_;
      subcarrierSpacing2 = subcarrierSpacing2_;
      slotFormatCombinations = slotFormatCombinations_;
      positionInDCI = new Asn1Integer (positionInDCI_);
      enableConfiguredUL_r16 = enableConfiguredUL_r16_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public SlotFormatCombinationsPerCell (
      long servingCellId_,
      SubcarrierSpacing subcarrierSpacing_
   ) {
      super();
      servingCellId = new ServCellIndex (servingCellId_);
      subcarrierSpacing = subcarrierSpacing_;
   }

   public void init () {
      servingCellId = null;
      subcarrierSpacing = null;
      subcarrierSpacing2 = null;
      slotFormatCombinations = null;
      positionInDCI = null;
      enableConfiguredUL_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return servingCellId;
         case 1: return subcarrierSpacing;
         case 2: return subcarrierSpacing2;
         case 3: return slotFormatCombinations;
         case 4: return positionInDCI;
         case 5: return enableConfiguredUL_r16;
         case 6: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "servingCellId";
         case 1: return "subcarrierSpacing";
         case 2: return "subcarrierSpacing2";
         case 3: return "slotFormatCombinations";
         case 4: return "positionInDCI";
         case 5: return "enableConfiguredUL-r16";
         case 6: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean subcarrierSpacing2Present = buffer.decodeBit ("subcarrierSpacing2Present");
      boolean slotFormatCombinationsPresent = buffer.decodeBit ("slotFormatCombinationsPresent");
      boolean positionInDCIPresent = buffer.decodeBit ("positionInDCIPresent");

      // decode servingCellId

      buffer.getContext().eventDispatcher.startElement("servingCellId", -1);

      servingCellId = new ServCellIndex();
      servingCellId.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("servingCellId", -1);

      // decode subcarrierSpacing

      buffer.getContext().eventDispatcher.startElement("subcarrierSpacing", -1);

      {
         int tval = SubcarrierSpacing.decodeEnumValue (buffer);
         subcarrierSpacing = SubcarrierSpacing.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("subcarrierSpacing", -1);

      // decode subcarrierSpacing2

      if (subcarrierSpacing2Present) {
         buffer.getContext().eventDispatcher.startElement("subcarrierSpacing2", -1);

         int tval = SubcarrierSpacing.decodeEnumValue (buffer);
         subcarrierSpacing2 = SubcarrierSpacing.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("subcarrierSpacing2", -1);
      }
      else {
         subcarrierSpacing2 = null;
      }

      // decode slotFormatCombinations

      if (slotFormatCombinationsPresent) {
         buffer.getContext().eventDispatcher.startElement("slotFormatCombinations", -1);

         slotFormatCombinations = new SlotFormatCombinationsPerCell_slotFormatCombinations();
         slotFormatCombinations.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("slotFormatCombinations", -1);
      }
      else {
         slotFormatCombinations = null;
      }

      // decode positionInDCI

      if (positionInDCIPresent) {
         buffer.getContext().eventDispatcher.startElement("positionInDCI", -1);

         positionInDCI = new Asn1Integer();
         positionInDCI.decode (buffer, 0, 127);

         buffer.invokeCharacters(positionInDCI.toString());
         buffer.getContext().eventDispatcher.endElement("positionInDCI", -1);
      }
      else {
         positionInDCI = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean enableConfiguredUL_r16Present = buffer.decodeBit ("enableConfiguredUL_r16Present");

            // decode enableConfiguredUL_r16

            if (enableConfiguredUL_r16Present) {
               buffer.getContext().eventDispatcher.startElement("enableConfiguredUL_r16", -1);

               int tval = SlotFormatCombinationsPerCell_enableConfiguredUL_r16.decodeEnumValue (buffer);
               enableConfiguredUL_r16 = SlotFormatCombinationsPerCell_enableConfiguredUL_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("enableConfiguredUL_r16", -1);
            }
            else {
               enableConfiguredUL_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (servingCellId != null) servingCellId.print (_sb, "servingCellId", _level+1);
      if (subcarrierSpacing != null) subcarrierSpacing.print (_sb, "subcarrierSpacing", _level+1);
      if (subcarrierSpacing2 != null) subcarrierSpacing2.print (_sb, "subcarrierSpacing2", _level+1);
      if (slotFormatCombinations != null) slotFormatCombinations.print (_sb, "slotFormatCombinations", _level+1);
      if (positionInDCI != null) positionInDCI.print (_sb, "positionInDCI", _level+1);
      if (enableConfiguredUL_r16 != null) enableConfiguredUL_r16.print (_sb, "enableConfiguredUL_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
