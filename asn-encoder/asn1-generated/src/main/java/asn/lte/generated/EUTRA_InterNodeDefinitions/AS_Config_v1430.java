/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_InterNodeDefinitions;

import com.objsys.asn1j.runtime.*;
import asn.lte.generated.EUTRA_RRC_Definitions.SL_V2X_ConfigDedicated_r14;
import asn.lte.generated.EUTRA_RRC_Definitions.LWA_Config_r13;
import asn.lte.generated.EUTRA_RRC_Definitions.MeasResultListWLAN_r13;

public class AS_Config_v1430 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_InterNodeDefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "AS-Config-v1430";
   }

   public SL_V2X_ConfigDedicated_r14 sourceSL_V2X_CommConfig_r14;  // optional
   public LWA_Config_r13 sourceLWA_Config_r14;  // optional
   public MeasResultListWLAN_r13 sourceWLAN_MeasResult_r14;  // optional

   public AS_Config_v1430 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public AS_Config_v1430 (
      SL_V2X_ConfigDedicated_r14 sourceSL_V2X_CommConfig_r14_,
      LWA_Config_r13 sourceLWA_Config_r14_,
      MeasResultListWLAN_r13 sourceWLAN_MeasResult_r14_
   ) {
      super();
      sourceSL_V2X_CommConfig_r14 = sourceSL_V2X_CommConfig_r14_;
      sourceLWA_Config_r14 = sourceLWA_Config_r14_;
      sourceWLAN_MeasResult_r14 = sourceWLAN_MeasResult_r14_;
   }

   public void init () {
      sourceSL_V2X_CommConfig_r14 = null;
      sourceLWA_Config_r14 = null;
      sourceWLAN_MeasResult_r14 = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return sourceSL_V2X_CommConfig_r14;
         case 1: return sourceLWA_Config_r14;
         case 2: return sourceWLAN_MeasResult_r14;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "sourceSL-V2X-CommConfig-r14";
         case 1: return "sourceLWA-Config-r14";
         case 2: return "sourceWLAN-MeasResult-r14";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean sourceSL_V2X_CommConfig_r14Present = buffer.decodeBit ("sourceSL_V2X_CommConfig_r14Present");
      boolean sourceLWA_Config_r14Present = buffer.decodeBit ("sourceLWA_Config_r14Present");
      boolean sourceWLAN_MeasResult_r14Present = buffer.decodeBit ("sourceWLAN_MeasResult_r14Present");

      // decode sourceSL_V2X_CommConfig_r14

      if (sourceSL_V2X_CommConfig_r14Present) {
         buffer.getContext().eventDispatcher.startElement("sourceSL_V2X_CommConfig_r14", -1);

         sourceSL_V2X_CommConfig_r14 = new SL_V2X_ConfigDedicated_r14();
         sourceSL_V2X_CommConfig_r14.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sourceSL_V2X_CommConfig_r14", -1);
      }
      else {
         sourceSL_V2X_CommConfig_r14 = null;
      }

      // decode sourceLWA_Config_r14

      if (sourceLWA_Config_r14Present) {
         buffer.getContext().eventDispatcher.startElement("sourceLWA_Config_r14", -1);

         sourceLWA_Config_r14 = new LWA_Config_r13();
         sourceLWA_Config_r14.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sourceLWA_Config_r14", -1);
      }
      else {
         sourceLWA_Config_r14 = null;
      }

      // decode sourceWLAN_MeasResult_r14

      if (sourceWLAN_MeasResult_r14Present) {
         buffer.getContext().eventDispatcher.startElement("sourceWLAN_MeasResult_r14", -1);

         sourceWLAN_MeasResult_r14 = new MeasResultListWLAN_r13();
         sourceWLAN_MeasResult_r14.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sourceWLAN_MeasResult_r14", -1);
      }
      else {
         sourceWLAN_MeasResult_r14 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (sourceSL_V2X_CommConfig_r14 != null) sourceSL_V2X_CommConfig_r14.print (_sb, "sourceSL_V2X_CommConfig_r14", _level+1);
      if (sourceLWA_Config_r14 != null) sourceLWA_Config_r14.print (_sb, "sourceLWA_Config_r14", _level+1);
      if (sourceWLAN_MeasResult_r14 != null) sourceWLAN_MeasResult_r14.print (_sb, "sourceWLAN_MeasResult_r14", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
