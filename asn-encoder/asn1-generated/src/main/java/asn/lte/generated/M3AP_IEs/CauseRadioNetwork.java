/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.M3AP_IEs;

import com.objsys.asn1j.runtime.*;

public class CauseRadioNetwork extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_M3AP_IEsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CauseRadioNetwork";
   }

   // Integer constants for switch-case
   public static final int _UNKNOWN_OR_ALREADY_ALLOCATED_MME_MBMS_M3AP_ID = 0;
   public static final int _UNKNOWN_OR_ALREADY_ALLOCATED_MCE_MBMS_M3AP_ID = 1;
   public static final int _UNKNOWN_OR_INCONSISTENT_PAIR_OF_MBMS_M3AP_IDS = 2;
   public static final int _RADIO_RESOURCES_NOT_AVAILABLE = 3;
   public static final int _INVALID_QOS_COMBINATION = 4;
   public static final int _INTERACTION_WITH_OTHER_PROCEDURE = 5;
   public static final int _NOT_SUPPORTED_QCI_VALUE = 6;
   public static final int _UNSPECIFIED = 7;

   // Singleton instances of CauseRadioNetwork
   protected static final CauseRadioNetwork _unknown_or_already_allocated_MME_MBMS_M3AP_ID = new CauseRadioNetwork(0);
   protected static final CauseRadioNetwork _unknown_or_already_allocated_MCE_MBMS_M3AP_ID = new CauseRadioNetwork(1);
   protected static final CauseRadioNetwork _unknown_or_inconsistent_pair_of_MBMS_M3AP_IDs = new CauseRadioNetwork(2);
   protected static final CauseRadioNetwork _radio_resources_not_available = new CauseRadioNetwork(3);
   protected static final CauseRadioNetwork _invalid_QoS_combination = new CauseRadioNetwork(4);
   protected static final CauseRadioNetwork _interaction_with_other_procedure = new CauseRadioNetwork(5);
   protected static final CauseRadioNetwork _not_supported_QCI_value = new CauseRadioNetwork(6);
   protected static final CauseRadioNetwork _unspecified = new CauseRadioNetwork(7);
   private static CauseRadioNetwork __undefined = new CauseRadioNetwork(-999);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    *   7
    */
   protected CauseRadioNetwork (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for unknown_or_already_allocated_MME_MBMS_M3AP_ID.
    */
   public static CauseRadioNetwork unknown_or_already_allocated_MME_MBMS_M3AP_ID() {
      return _unknown_or_already_allocated_MME_MBMS_M3AP_ID;
   }

   /**
    * Singleton accessor method for unknown_or_already_allocated_MCE_MBMS_M3AP_ID.
    */
   public static CauseRadioNetwork unknown_or_already_allocated_MCE_MBMS_M3AP_ID() {
      return _unknown_or_already_allocated_MCE_MBMS_M3AP_ID;
   }

   /**
    * Singleton accessor method for unknown_or_inconsistent_pair_of_MBMS_M3AP_IDs.
    */
   public static CauseRadioNetwork unknown_or_inconsistent_pair_of_MBMS_M3AP_IDs() {
      return _unknown_or_inconsistent_pair_of_MBMS_M3AP_IDs;
   }

   /**
    * Singleton accessor method for radio_resources_not_available.
    */
   public static CauseRadioNetwork radio_resources_not_available() {
      return _radio_resources_not_available;
   }

   /**
    * Singleton accessor method for invalid_QoS_combination.
    */
   public static CauseRadioNetwork invalid_QoS_combination() {
      return _invalid_QoS_combination;
   }

   /**
    * Singleton accessor method for interaction_with_other_procedure.
    */
   public static CauseRadioNetwork interaction_with_other_procedure() {
      return _interaction_with_other_procedure;
   }

   /**
    * Singleton accessor method for not_supported_QCI_value.
    */
   public static CauseRadioNetwork not_supported_QCI_value() {
      return _not_supported_QCI_value;
   }

   /**
    * Singleton accessor method for unspecified.
    */
   public static CauseRadioNetwork unspecified() {
      return _unspecified;
   }

   /** Undefined value. */
   protected static CauseRadioNetwork __undefined_() { return __undefined; }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return CauseRadioNetwork.valueOf( CauseRadioNetwork.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static CauseRadioNetwork valueOf (int _value)
   {
      switch ((int)_value) {
         case 0: return unknown_or_already_allocated_MME_MBMS_M3AP_ID();
         case 1: return unknown_or_already_allocated_MCE_MBMS_M3AP_ID();
         case 2: return unknown_or_inconsistent_pair_of_MBMS_M3AP_IDs();
         case 3: return radio_resources_not_available();
         case 4: return invalid_QoS_combination();
         case 5: return interaction_with_other_procedure();
         case 6: return not_supported_QCI_value();
         case 7: return unspecified();
         default: return __undefined_();
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      boolean extbit = buffer.decodeBit ("extbit");

      if (extbit) {
         ui = buffer.decodeSmallNonNegWholeNumber ();

         return 0x7fffffff;
      }
      else {
         ui = (int) buffer.decodeConsWholeNumber (8);

         switch (ui) {
            case 0: ret =  0; break;
            case 1: ret =  1; break;
            case 2: ret =  2; break;
            case 3: ret =  3; break;
            case 4: ret =  4; break;
            case 5: ret =  5; break;
            case 6: ret =  6; break;
            case 7: ret =  7; break;
            default: throw new Asn1InvalidEnumException (ui);
         }
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (CauseRadioNetwork.valueOf(ret).toString());

      return ret;
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("unknown-or-already-allocated-MME-MBMS-M3AP-ID");
         case 1: return ("unknown-or-already-allocated-MCE-MBMS-M3AP-ID");
         case 2: return ("unknown-or-inconsistent-pair-of-MBMS-M3AP-IDs");
         case 3: return ("radio-resources-not-available");
         case 4: return ("invalid-QoS-combination");
         case 5: return ("interaction-with-other-procedure");
         case 6: return ("not-supported-QCI-value");
         case 7: return ("unspecified");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
