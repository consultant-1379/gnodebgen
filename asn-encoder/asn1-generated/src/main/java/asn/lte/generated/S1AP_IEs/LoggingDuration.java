/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.S1AP_IEs;

import com.objsys.asn1j.runtime.*;

public class LoggingDuration extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_S1AP_IEsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "LoggingDuration";
   }

   // Integer constants for switch-case
   public static final int _M10 = 0;
   public static final int _M20 = 1;
   public static final int _M40 = 2;
   public static final int _M60 = 3;
   public static final int _M90 = 4;
   public static final int _M120 = 5;

   // Singleton instances of LoggingDuration
   protected static final LoggingDuration _m10 = new LoggingDuration(0);
   protected static final LoggingDuration _m20 = new LoggingDuration(1);
   protected static final LoggingDuration _m40 = new LoggingDuration(2);
   protected static final LoggingDuration _m60 = new LoggingDuration(3);
   protected static final LoggingDuration _m90 = new LoggingDuration(4);
   protected static final LoggingDuration _m120 = new LoggingDuration(5);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    */
   protected LoggingDuration (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for m10.
    */
   public static LoggingDuration m10() {
      return _m10;
   }

   /**
    * Singleton accessor method for m20.
    */
   public static LoggingDuration m20() {
      return _m20;
   }

   /**
    * Singleton accessor method for m40.
    */
   public static LoggingDuration m40() {
      return _m40;
   }

   /**
    * Singleton accessor method for m60.
    */
   public static LoggingDuration m60() {
      return _m60;
   }

   /**
    * Singleton accessor method for m90.
    */
   public static LoggingDuration m90() {
      return _m90;
   }

   /**
    * Singleton accessor method for m120.
    */
   public static LoggingDuration m120() {
      return _m120;
   }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return LoggingDuration.valueOf( LoggingDuration.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static LoggingDuration valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 0: return m10();
         case 1: return m20();
         case 2: return m40();
         case 3: return m60();
         case 4: return m90();
         case 5: return m120();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      ui = (int) buffer.decodeConsWholeNumber (6);

      switch (ui) {
         case 0: ret =  0; break;
         case 1: ret =  1; break;
         case 2: ret =  2; break;
         case 3: ret =  3; break;
         case 4: ret =  4; break;
         case 5: ret =  5; break;
         default: throw new Asn1InvalidEnumException (ui);
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (LoggingDuration.valueOf(ret).toString());

      return ret;
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("m10");
         case 1: return ("m20");
         case 2: return ("m40");
         case 3: return ("m60");
         case 4: return ("m90");
         case 5: return ("m120");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
