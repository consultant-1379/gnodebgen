/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.X2AP_Ericsson_IEs;

import com.objsys.asn1j.runtime.*;

public class EAB_Inter_eNB_CA_Parameter extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_X2AP_Ericsson_IEsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "EAB-Inter-eNB-CA-Parameter";
   }

   public Asn1Integer basebandVersion;  // optional
   public Asn1Integer configuredTxMode;  // optional
   public Asn1Integer numOfTxAntennas;  // optional
   public Asn1Boolean downlinkOnly;
   public Asn1Boolean cellBarred;
   public Asn1Integer subframeAssignment;  // optional
   public Asn1Integer specialSubframePattern;  // optional
   public Asn1Integer crsGain;  // optional
   public Asn1Integer pdschTypeBGain;  // optional
   public Asn1Boolean downlink256QAM;
   public Asn1OctetString parameterBuffer;  // optional
   public EAB_Inter_eNB_CA_Parameter_iE_Extensions iE_Extensions;  // optional
   public Asn1OpenExt extElem1;

   public EAB_Inter_eNB_CA_Parameter () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public EAB_Inter_eNB_CA_Parameter (
      Asn1Integer basebandVersion_,
      Asn1Integer configuredTxMode_,
      Asn1Integer numOfTxAntennas_,
      Asn1Boolean downlinkOnly_,
      Asn1Boolean cellBarred_,
      Asn1Integer subframeAssignment_,
      Asn1Integer specialSubframePattern_,
      Asn1Integer crsGain_,
      Asn1Integer pdschTypeBGain_,
      Asn1Boolean downlink256QAM_,
      Asn1OctetString parameterBuffer_,
      EAB_Inter_eNB_CA_Parameter_iE_Extensions iE_Extensions_
   ) {
      super();
      basebandVersion = basebandVersion_;
      configuredTxMode = configuredTxMode_;
      numOfTxAntennas = numOfTxAntennas_;
      downlinkOnly = downlinkOnly_;
      cellBarred = cellBarred_;
      subframeAssignment = subframeAssignment_;
      specialSubframePattern = specialSubframePattern_;
      crsGain = crsGain_;
      pdschTypeBGain = pdschTypeBGain_;
      downlink256QAM = downlink256QAM_;
      parameterBuffer = parameterBuffer_;
      iE_Extensions = iE_Extensions_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public EAB_Inter_eNB_CA_Parameter (
      Asn1Boolean downlinkOnly_,
      Asn1Boolean cellBarred_,
      Asn1Boolean downlink256QAM_
   ) {
      super();
      downlinkOnly = downlinkOnly_;
      cellBarred = cellBarred_;
      downlink256QAM = downlink256QAM_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public EAB_Inter_eNB_CA_Parameter (long basebandVersion_,
      long configuredTxMode_,
      long numOfTxAntennas_,
      boolean downlinkOnly_,
      boolean cellBarred_,
      long subframeAssignment_,
      long specialSubframePattern_,
      long crsGain_,
      long pdschTypeBGain_,
      boolean downlink256QAM_,
      byte[] parameterBuffer_,
      EAB_Inter_eNB_CA_Parameter_iE_Extensions iE_Extensions_
   ) {
      super();
      basebandVersion = new Asn1Integer (basebandVersion_);
      configuredTxMode = new Asn1Integer (configuredTxMode_);
      numOfTxAntennas = new Asn1Integer (numOfTxAntennas_);
      downlinkOnly = new Asn1Boolean (downlinkOnly_);
      cellBarred = new Asn1Boolean (cellBarred_);
      subframeAssignment = new Asn1Integer (subframeAssignment_);
      specialSubframePattern = new Asn1Integer (specialSubframePattern_);
      crsGain = new Asn1Integer (crsGain_);
      pdschTypeBGain = new Asn1Integer (pdschTypeBGain_);
      downlink256QAM = new Asn1Boolean (downlink256QAM_);
      parameterBuffer = new Asn1OctetString (parameterBuffer_);
      iE_Extensions = iE_Extensions_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public EAB_Inter_eNB_CA_Parameter (
      boolean downlinkOnly_,
      boolean cellBarred_,
      boolean downlink256QAM_
   ) {
      super();
      downlinkOnly = new Asn1Boolean (downlinkOnly_);
      cellBarred = new Asn1Boolean (cellBarred_);
      downlink256QAM = new Asn1Boolean (downlink256QAM_);
   }

   public void init () {
      basebandVersion = null;
      configuredTxMode = null;
      numOfTxAntennas = null;
      downlinkOnly = null;
      cellBarred = null;
      subframeAssignment = null;
      specialSubframePattern = null;
      crsGain = null;
      pdschTypeBGain = null;
      downlink256QAM = null;
      parameterBuffer = null;
      iE_Extensions = null;
      extElem1 = null;
   }

   public int getElementCount() { return 13; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return basebandVersion;
         case 1: return configuredTxMode;
         case 2: return numOfTxAntennas;
         case 3: return downlinkOnly;
         case 4: return cellBarred;
         case 5: return subframeAssignment;
         case 6: return specialSubframePattern;
         case 7: return crsGain;
         case 8: return pdschTypeBGain;
         case 9: return downlink256QAM;
         case 10: return parameterBuffer;
         case 11: return iE_Extensions;
         case 12: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "basebandVersion";
         case 1: return "configuredTxMode";
         case 2: return "numOfTxAntennas";
         case 3: return "downlinkOnly";
         case 4: return "cellBarred";
         case 5: return "subframeAssignment";
         case 6: return "specialSubframePattern";
         case 7: return "crsGain";
         case 8: return "pdschTypeBGain";
         case 9: return "downlink256QAM";
         case 10: return "parameterBuffer";
         case 11: return "iE-Extensions";
         case 12: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean basebandVersionPresent = buffer.decodeBit ("basebandVersionPresent");
      boolean configuredTxModePresent = buffer.decodeBit ("configuredTxModePresent");
      boolean numOfTxAntennasPresent = buffer.decodeBit ("numOfTxAntennasPresent");
      boolean subframeAssignmentPresent = buffer.decodeBit ("subframeAssignmentPresent");
      boolean specialSubframePatternPresent = buffer.decodeBit ("specialSubframePatternPresent");
      boolean crsGainPresent = buffer.decodeBit ("crsGainPresent");
      boolean pdschTypeBGainPresent = buffer.decodeBit ("pdschTypeBGainPresent");
      boolean parameterBufferPresent = buffer.decodeBit ("parameterBufferPresent");
      boolean iE_ExtensionsPresent = buffer.decodeBit ("iE_ExtensionsPresent");

      // decode basebandVersion

      if (basebandVersionPresent) {
         buffer.getContext().eventDispatcher.startElement("basebandVersion", -1);

         basebandVersion = new Asn1Integer();
         basebandVersion.decode (buffer, 0, 4294967295L);

         buffer.invokeCharacters(basebandVersion.toString());
         buffer.getContext().eventDispatcher.endElement("basebandVersion", -1);
      }
      else {
         basebandVersion = null;
      }

      // decode configuredTxMode

      if (configuredTxModePresent) {
         buffer.getContext().eventDispatcher.startElement("configuredTxMode", -1);

         configuredTxMode = new Asn1Integer();
         configuredTxMode.decode (buffer, 0, 4294967295L);

         buffer.invokeCharacters(configuredTxMode.toString());
         buffer.getContext().eventDispatcher.endElement("configuredTxMode", -1);
      }
      else {
         configuredTxMode = null;
      }

      // decode numOfTxAntennas

      if (numOfTxAntennasPresent) {
         buffer.getContext().eventDispatcher.startElement("numOfTxAntennas", -1);

         numOfTxAntennas = new Asn1Integer();
         numOfTxAntennas.decode (buffer, 0, 65535);

         buffer.invokeCharacters(numOfTxAntennas.toString());
         buffer.getContext().eventDispatcher.endElement("numOfTxAntennas", -1);
      }
      else {
         numOfTxAntennas = null;
      }

      // decode downlinkOnly

      buffer.getContext().eventDispatcher.startElement("downlinkOnly", -1);

      downlinkOnly = new Asn1Boolean();
      downlinkOnly.decode (buffer);

      buffer.invokeCharacters(downlinkOnly.toString());
      buffer.getContext().eventDispatcher.endElement("downlinkOnly", -1);

      // decode cellBarred

      buffer.getContext().eventDispatcher.startElement("cellBarred", -1);

      cellBarred = new Asn1Boolean();
      cellBarred.decode (buffer);

      buffer.invokeCharacters(cellBarred.toString());
      buffer.getContext().eventDispatcher.endElement("cellBarred", -1);

      // decode subframeAssignment

      if (subframeAssignmentPresent) {
         buffer.getContext().eventDispatcher.startElement("subframeAssignment", -1);

         subframeAssignment = new Asn1Integer();
         subframeAssignment.decode (buffer, 0, 4294967295L);

         buffer.invokeCharacters(subframeAssignment.toString());
         buffer.getContext().eventDispatcher.endElement("subframeAssignment", -1);
      }
      else {
         subframeAssignment = null;
      }

      // decode specialSubframePattern

      if (specialSubframePatternPresent) {
         buffer.getContext().eventDispatcher.startElement("specialSubframePattern", -1);

         specialSubframePattern = new Asn1Integer();
         specialSubframePattern.decode (buffer, 0, 4294967295L);

         buffer.invokeCharacters(specialSubframePattern.toString());
         buffer.getContext().eventDispatcher.endElement("specialSubframePattern", -1);
      }
      else {
         specialSubframePattern = null;
      }

      // decode crsGain

      if (crsGainPresent) {
         buffer.getContext().eventDispatcher.startElement("crsGain", -1);

         crsGain = new Asn1Integer();
         crsGain.decode (buffer, 0, 4294967295L);

         buffer.invokeCharacters(crsGain.toString());
         buffer.getContext().eventDispatcher.endElement("crsGain", -1);
      }
      else {
         crsGain = null;
      }

      // decode pdschTypeBGain

      if (pdschTypeBGainPresent) {
         buffer.getContext().eventDispatcher.startElement("pdschTypeBGain", -1);

         pdschTypeBGain = new Asn1Integer();
         pdschTypeBGain.decode (buffer, 0, 4294967295L);

         buffer.invokeCharacters(pdschTypeBGain.toString());
         buffer.getContext().eventDispatcher.endElement("pdschTypeBGain", -1);
      }
      else {
         pdschTypeBGain = null;
      }

      // decode downlink256QAM

      buffer.getContext().eventDispatcher.startElement("downlink256QAM", -1);

      downlink256QAM = new Asn1Boolean();
      downlink256QAM.decode (buffer);

      buffer.invokeCharacters(downlink256QAM.toString());
      buffer.getContext().eventDispatcher.endElement("downlink256QAM", -1);

      // decode parameterBuffer

      if (parameterBufferPresent) {
         buffer.getContext().eventDispatcher.startElement("parameterBuffer", -1);

         parameterBuffer = new Asn1OctetString();
         parameterBuffer.decode (buffer);

         buffer.invokeCharacters(parameterBuffer.toString());
         buffer.getContext().eventDispatcher.endElement("parameterBuffer", -1);
      }
      else {
         parameterBuffer = null;
      }

      // decode iE_Extensions

      if (iE_ExtensionsPresent) {
         buffer.getContext().eventDispatcher.startElement("iE_Extensions", -1);

         iE_Extensions = new EAB_Inter_eNB_CA_Parameter_iE_Extensions();
         iE_Extensions.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("iE_Extensions", -1);
      }
      else {
         iE_Extensions = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (basebandVersion != null) basebandVersion.print (_sb, "basebandVersion", _level+1);
      if (configuredTxMode != null) configuredTxMode.print (_sb, "configuredTxMode", _level+1);
      if (numOfTxAntennas != null) numOfTxAntennas.print (_sb, "numOfTxAntennas", _level+1);
      if (downlinkOnly != null) downlinkOnly.print (_sb, "downlinkOnly", _level+1);
      if (cellBarred != null) cellBarred.print (_sb, "cellBarred", _level+1);
      if (subframeAssignment != null) subframeAssignment.print (_sb, "subframeAssignment", _level+1);
      if (specialSubframePattern != null) specialSubframePattern.print (_sb, "specialSubframePattern", _level+1);
      if (crsGain != null) crsGain.print (_sb, "crsGain", _level+1);
      if (pdschTypeBGain != null) pdschTypeBGain.print (_sb, "pdschTypeBGain", _level+1);
      if (downlink256QAM != null) downlink256QAM.print (_sb, "downlink256QAM", _level+1);
      if (parameterBuffer != null) parameterBuffer.print (_sb, "parameterBuffer", _level+1);
      if (iE_Extensions != null) iE_Extensions.print (_sb, "iE_Extensions", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
