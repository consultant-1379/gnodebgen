/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MeasObjectEUTRA extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "MeasObjectEUTRA";
   }

   public ARFCN_ValueEUTRA carrierFreq;
   public AllowedMeasBandwidth allowedMeasBandwidth = null;
   public PresenceAntennaPort1 presenceAntennaPort1;
   public NeighCellConfig neighCellConfig;
   public Q_OffsetRange offsetFreq = null;  // default = Q_OffsetRange.dB0()
   public CellIndexList cellsToRemoveList;  // optional
   public CellsToAddModList cellsToAddModList;  // optional
   public CellIndexList blackCellsToRemoveList;  // optional
   public BlackCellsToAddModList blackCellsToAddModList;  // optional
   public PhysCellId cellForWhichToReportCGI;  // optional
   public boolean mV2ExtPresent;
   public MeasCycleSCell_r10 measCycleSCell_r10 = null;  // optional
   public MeasSubframePatternConfigNeigh_r10 measSubframePatternConfigNeigh_r10;  // optional
   public boolean mV3ExtPresent;
   public Asn1Boolean widebandRSRQ_Meas_r11;  // optional
   public boolean mV4ExtPresent;
   public CellIndexList altTTT_CellsToRemoveList_r12;  // optional
   public AltTTT_CellsToAddModList_r12 altTTT_CellsToAddModList_r12;  // optional
   public MeasObjectEUTRA_t312_r12 t312_r12;  // optional
   public Asn1Boolean reducedMeasPerformance_r12;  // optional
   public MeasDS_Config_r12 measDS_Config_r12;  // optional
   public boolean mV5ExtPresent;
   public CellIndexList whiteCellsToRemoveList_r13;  // optional
   public WhiteCellsToAddModList_r13 whiteCellsToAddModList_r13;  // optional
   public RMTC_Config_r13 rmtc_Config_r13;  // optional
   public ARFCN_ValueEUTRA_v9e0 carrierFreq_r13;  // optional
   public boolean mV6ExtPresent;
   public Tx_ResourcePoolMeasList_r14 tx_ResourcePoolToRemoveList_r14;  // optional
   public Tx_ResourcePoolMeasList_r14 tx_ResourcePoolToAddList_r14;  // optional
   public Asn1Boolean fembms_MixedCarrier_r14;  // optional
   public boolean mV7ExtPresent;
   public MeasSensing_Config_r15 measSensing_Config_r15;  // optional
   public Asn1OpenExt extElem1;

   public MeasObjectEUTRA () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MeasObjectEUTRA (
      ARFCN_ValueEUTRA carrierFreq_,
      AllowedMeasBandwidth allowedMeasBandwidth_,
      PresenceAntennaPort1 presenceAntennaPort1_,
      NeighCellConfig neighCellConfig_,
      Q_OffsetRange offsetFreq_,
      CellIndexList cellsToRemoveList_,
      CellsToAddModList cellsToAddModList_,
      CellIndexList blackCellsToRemoveList_,
      BlackCellsToAddModList blackCellsToAddModList_,
      PhysCellId cellForWhichToReportCGI_,
      MeasCycleSCell_r10 measCycleSCell_r10_,
      MeasSubframePatternConfigNeigh_r10 measSubframePatternConfigNeigh_r10_,
      Asn1Boolean widebandRSRQ_Meas_r11_,
      CellIndexList altTTT_CellsToRemoveList_r12_,
      AltTTT_CellsToAddModList_r12 altTTT_CellsToAddModList_r12_,
      MeasObjectEUTRA_t312_r12 t312_r12_,
      Asn1Boolean reducedMeasPerformance_r12_,
      MeasDS_Config_r12 measDS_Config_r12_,
      CellIndexList whiteCellsToRemoveList_r13_,
      WhiteCellsToAddModList_r13 whiteCellsToAddModList_r13_,
      RMTC_Config_r13 rmtc_Config_r13_,
      ARFCN_ValueEUTRA_v9e0 carrierFreq_r13_,
      Tx_ResourcePoolMeasList_r14 tx_ResourcePoolToRemoveList_r14_,
      Tx_ResourcePoolMeasList_r14 tx_ResourcePoolToAddList_r14_,
      Asn1Boolean fembms_MixedCarrier_r14_,
      MeasSensing_Config_r15 measSensing_Config_r15_
   ) {
      super();
      carrierFreq = carrierFreq_;
      allowedMeasBandwidth = allowedMeasBandwidth_;
      presenceAntennaPort1 = presenceAntennaPort1_;
      neighCellConfig = neighCellConfig_;
      offsetFreq = offsetFreq_;
      cellsToRemoveList = cellsToRemoveList_;
      cellsToAddModList = cellsToAddModList_;
      blackCellsToRemoveList = blackCellsToRemoveList_;
      blackCellsToAddModList = blackCellsToAddModList_;
      cellForWhichToReportCGI = cellForWhichToReportCGI_;
      measCycleSCell_r10 = measCycleSCell_r10_;
      measSubframePatternConfigNeigh_r10 = measSubframePatternConfigNeigh_r10_;
      widebandRSRQ_Meas_r11 = widebandRSRQ_Meas_r11_;
      altTTT_CellsToRemoveList_r12 = altTTT_CellsToRemoveList_r12_;
      altTTT_CellsToAddModList_r12 = altTTT_CellsToAddModList_r12_;
      t312_r12 = t312_r12_;
      reducedMeasPerformance_r12 = reducedMeasPerformance_r12_;
      measDS_Config_r12 = measDS_Config_r12_;
      whiteCellsToRemoveList_r13 = whiteCellsToRemoveList_r13_;
      whiteCellsToAddModList_r13 = whiteCellsToAddModList_r13_;
      rmtc_Config_r13 = rmtc_Config_r13_;
      carrierFreq_r13 = carrierFreq_r13_;
      tx_ResourcePoolToRemoveList_r14 = tx_ResourcePoolToRemoveList_r14_;
      tx_ResourcePoolToAddList_r14 = tx_ResourcePoolToAddList_r14_;
      fembms_MixedCarrier_r14 = fembms_MixedCarrier_r14_;
      measSensing_Config_r15 = measSensing_Config_r15_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public MeasObjectEUTRA (
      ARFCN_ValueEUTRA carrierFreq_,
      AllowedMeasBandwidth allowedMeasBandwidth_,
      PresenceAntennaPort1 presenceAntennaPort1_,
      NeighCellConfig neighCellConfig_
   ) {
      super();
      carrierFreq = carrierFreq_;
      allowedMeasBandwidth = allowedMeasBandwidth_;
      presenceAntennaPort1 = presenceAntennaPort1_;
      neighCellConfig = neighCellConfig_;
      offsetFreq = Q_OffsetRange.dB0();
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public MeasObjectEUTRA (long carrierFreq_,
      AllowedMeasBandwidth allowedMeasBandwidth_,
      boolean presenceAntennaPort1_,
      NeighCellConfig neighCellConfig_,
      Q_OffsetRange offsetFreq_,
      CellIndexList cellsToRemoveList_,
      CellsToAddModList cellsToAddModList_,
      CellIndexList blackCellsToRemoveList_,
      BlackCellsToAddModList blackCellsToAddModList_,
      long cellForWhichToReportCGI_,
      MeasCycleSCell_r10 measCycleSCell_r10_,
      MeasSubframePatternConfigNeigh_r10 measSubframePatternConfigNeigh_r10_,
      boolean widebandRSRQ_Meas_r11_,
      CellIndexList altTTT_CellsToRemoveList_r12_,
      AltTTT_CellsToAddModList_r12 altTTT_CellsToAddModList_r12_,
      MeasObjectEUTRA_t312_r12 t312_r12_,
      boolean reducedMeasPerformance_r12_,
      MeasDS_Config_r12 measDS_Config_r12_,
      CellIndexList whiteCellsToRemoveList_r13_,
      WhiteCellsToAddModList_r13 whiteCellsToAddModList_r13_,
      RMTC_Config_r13 rmtc_Config_r13_,
      long carrierFreq_r13_,
      Tx_ResourcePoolMeasList_r14 tx_ResourcePoolToRemoveList_r14_,
      Tx_ResourcePoolMeasList_r14 tx_ResourcePoolToAddList_r14_,
      boolean fembms_MixedCarrier_r14_,
      MeasSensing_Config_r15 measSensing_Config_r15_
   ) {
      super();
      carrierFreq = new ARFCN_ValueEUTRA (carrierFreq_);
      allowedMeasBandwidth = allowedMeasBandwidth_;
      presenceAntennaPort1 = new PresenceAntennaPort1 (presenceAntennaPort1_);
      neighCellConfig = neighCellConfig_;
      offsetFreq = offsetFreq_;
      cellsToRemoveList = cellsToRemoveList_;
      cellsToAddModList = cellsToAddModList_;
      blackCellsToRemoveList = blackCellsToRemoveList_;
      blackCellsToAddModList = blackCellsToAddModList_;
      cellForWhichToReportCGI = new PhysCellId (cellForWhichToReportCGI_);
      measCycleSCell_r10 = measCycleSCell_r10_;
      measSubframePatternConfigNeigh_r10 = measSubframePatternConfigNeigh_r10_;
      widebandRSRQ_Meas_r11 = new Asn1Boolean (widebandRSRQ_Meas_r11_);
      altTTT_CellsToRemoveList_r12 = altTTT_CellsToRemoveList_r12_;
      altTTT_CellsToAddModList_r12 = altTTT_CellsToAddModList_r12_;
      t312_r12 = t312_r12_;
      reducedMeasPerformance_r12 = new Asn1Boolean (reducedMeasPerformance_r12_);
      measDS_Config_r12 = measDS_Config_r12_;
      whiteCellsToRemoveList_r13 = whiteCellsToRemoveList_r13_;
      whiteCellsToAddModList_r13 = whiteCellsToAddModList_r13_;
      rmtc_Config_r13 = rmtc_Config_r13_;
      carrierFreq_r13 = new ARFCN_ValueEUTRA_v9e0 (carrierFreq_r13_);
      tx_ResourcePoolToRemoveList_r14 = tx_ResourcePoolToRemoveList_r14_;
      tx_ResourcePoolToAddList_r14 = tx_ResourcePoolToAddList_r14_;
      fembms_MixedCarrier_r14 = new Asn1Boolean (fembms_MixedCarrier_r14_);
      measSensing_Config_r15 = measSensing_Config_r15_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public MeasObjectEUTRA (
      long carrierFreq_,
      AllowedMeasBandwidth allowedMeasBandwidth_,
      boolean presenceAntennaPort1_,
      NeighCellConfig neighCellConfig_
   ) {
      super();
      carrierFreq = new ARFCN_ValueEUTRA (carrierFreq_);
      allowedMeasBandwidth = allowedMeasBandwidth_;
      presenceAntennaPort1 = new PresenceAntennaPort1 (presenceAntennaPort1_);
      neighCellConfig = neighCellConfig_;
      offsetFreq = Q_OffsetRange.dB0();
   }

   public void init () {
      carrierFreq = null;
      allowedMeasBandwidth = null;
      presenceAntennaPort1 = null;
      neighCellConfig = null;
      offsetFreq = Q_OffsetRange.dB0();
      cellsToRemoveList = null;
      cellsToAddModList = null;
      blackCellsToRemoveList = null;
      blackCellsToAddModList = null;
      cellForWhichToReportCGI = null;
      measCycleSCell_r10 = null;
      measSubframePatternConfigNeigh_r10 = null;
      widebandRSRQ_Meas_r11 = null;
      altTTT_CellsToRemoveList_r12 = null;
      altTTT_CellsToAddModList_r12 = null;
      t312_r12 = null;
      reducedMeasPerformance_r12 = null;
      measDS_Config_r12 = null;
      whiteCellsToRemoveList_r13 = null;
      whiteCellsToAddModList_r13 = null;
      rmtc_Config_r13 = null;
      carrierFreq_r13 = null;
      tx_ResourcePoolToRemoveList_r14 = null;
      tx_ResourcePoolToAddList_r14 = null;
      fembms_MixedCarrier_r14 = null;
      measSensing_Config_r15 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 27; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return carrierFreq;
         case 1: return allowedMeasBandwidth;
         case 2: return presenceAntennaPort1;
         case 3: return neighCellConfig;
         case 4: return offsetFreq;
         case 5: return cellsToRemoveList;
         case 6: return cellsToAddModList;
         case 7: return blackCellsToRemoveList;
         case 8: return blackCellsToAddModList;
         case 9: return cellForWhichToReportCGI;
         case 10: return measCycleSCell_r10;
         case 11: return measSubframePatternConfigNeigh_r10;
         case 12: return widebandRSRQ_Meas_r11;
         case 13: return altTTT_CellsToRemoveList_r12;
         case 14: return altTTT_CellsToAddModList_r12;
         case 15: return t312_r12;
         case 16: return reducedMeasPerformance_r12;
         case 17: return measDS_Config_r12;
         case 18: return whiteCellsToRemoveList_r13;
         case 19: return whiteCellsToAddModList_r13;
         case 20: return rmtc_Config_r13;
         case 21: return carrierFreq_r13;
         case 22: return tx_ResourcePoolToRemoveList_r14;
         case 23: return tx_ResourcePoolToAddList_r14;
         case 24: return fembms_MixedCarrier_r14;
         case 25: return measSensing_Config_r15;
         case 26: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "carrierFreq";
         case 1: return "allowedMeasBandwidth";
         case 2: return "presenceAntennaPort1";
         case 3: return "neighCellConfig";
         case 4: return "offsetFreq";
         case 5: return "cellsToRemoveList";
         case 6: return "cellsToAddModList";
         case 7: return "blackCellsToRemoveList";
         case 8: return "blackCellsToAddModList";
         case 9: return "cellForWhichToReportCGI";
         case 10: return "measCycleSCell-r10";
         case 11: return "measSubframePatternConfigNeigh-r10";
         case 12: return "widebandRSRQ-Meas-r11";
         case 13: return "altTTT-CellsToRemoveList-r12";
         case 14: return "altTTT-CellsToAddModList-r12";
         case 15: return "t312-r12";
         case 16: return "reducedMeasPerformance-r12";
         case 17: return "measDS-Config-r12";
         case 18: return "whiteCellsToRemoveList-r13";
         case 19: return "whiteCellsToAddModList-r13";
         case 20: return "rmtc-Config-r13";
         case 21: return "carrierFreq-r13";
         case 22: return "tx-ResourcePoolToRemoveList-r14";
         case 23: return "tx-ResourcePoolToAddList-r14";
         case 24: return "fembms-MixedCarrier-r14";
         case 25: return "measSensing-Config-r15";
         case 26: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean offsetFreqPresent = buffer.decodeBit ("offsetFreqPresent");
      boolean cellsToRemoveListPresent = buffer.decodeBit ("cellsToRemoveListPresent");
      boolean cellsToAddModListPresent = buffer.decodeBit ("cellsToAddModListPresent");
      boolean blackCellsToRemoveListPresent = buffer.decodeBit ("blackCellsToRemoveListPresent");
      boolean blackCellsToAddModListPresent = buffer.decodeBit ("blackCellsToAddModListPresent");
      boolean cellForWhichToReportCGIPresent = buffer.decodeBit ("cellForWhichToReportCGIPresent");

      // decode carrierFreq

      buffer.getContext().eventDispatcher.startElement("carrierFreq", -1);

      carrierFreq = new ARFCN_ValueEUTRA();
      carrierFreq.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("carrierFreq", -1);

      // decode allowedMeasBandwidth

      buffer.getContext().eventDispatcher.startElement("allowedMeasBandwidth", -1);

      {
         int tval = AllowedMeasBandwidth.decodeEnumValue (buffer);
         allowedMeasBandwidth = AllowedMeasBandwidth.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("allowedMeasBandwidth", -1);

      // decode presenceAntennaPort1

      buffer.getContext().eventDispatcher.startElement("presenceAntennaPort1", -1);

      presenceAntennaPort1 = new PresenceAntennaPort1();
      presenceAntennaPort1.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("presenceAntennaPort1", -1);

      // decode neighCellConfig

      buffer.getContext().eventDispatcher.startElement("neighCellConfig", -1);

      neighCellConfig = new NeighCellConfig();
      neighCellConfig.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("neighCellConfig", -1);

      // decode offsetFreq

      if (offsetFreqPresent) {
         buffer.getContext().eventDispatcher.startElement("offsetFreq", -1);

         int tval = Q_OffsetRange.decodeEnumValue (buffer);
         offsetFreq = Q_OffsetRange.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("offsetFreq", -1);
      }
      else {
         offsetFreq = Q_OffsetRange.dB0();
      }

      // decode cellsToRemoveList

      if (cellsToRemoveListPresent) {
         buffer.getContext().eventDispatcher.startElement("cellsToRemoveList", -1);

         cellsToRemoveList = new CellIndexList();
         cellsToRemoveList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("cellsToRemoveList", -1);
      }
      else {
         cellsToRemoveList = null;
      }

      // decode cellsToAddModList

      if (cellsToAddModListPresent) {
         buffer.getContext().eventDispatcher.startElement("cellsToAddModList", -1);

         cellsToAddModList = new CellsToAddModList();
         cellsToAddModList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("cellsToAddModList", -1);
      }
      else {
         cellsToAddModList = null;
      }

      // decode blackCellsToRemoveList

      if (blackCellsToRemoveListPresent) {
         buffer.getContext().eventDispatcher.startElement("blackCellsToRemoveList", -1);

         blackCellsToRemoveList = new CellIndexList();
         blackCellsToRemoveList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("blackCellsToRemoveList", -1);
      }
      else {
         blackCellsToRemoveList = null;
      }

      // decode blackCellsToAddModList

      if (blackCellsToAddModListPresent) {
         buffer.getContext().eventDispatcher.startElement("blackCellsToAddModList", -1);

         blackCellsToAddModList = new BlackCellsToAddModList();
         blackCellsToAddModList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("blackCellsToAddModList", -1);
      }
      else {
         blackCellsToAddModList = null;
      }

      // decode cellForWhichToReportCGI

      if (cellForWhichToReportCGIPresent) {
         buffer.getContext().eventDispatcher.startElement("cellForWhichToReportCGI", -1);

         cellForWhichToReportCGI = new PhysCellId();
         cellForWhichToReportCGI.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("cellForWhichToReportCGI", -1);
      }
      else {
         cellForWhichToReportCGI = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV4ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV5ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV6ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV7ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean measCycleSCell_r10Present = buffer.decodeBit ("measCycleSCell_r10Present");

            boolean measSubframePatternConfigNeigh_r10Present = buffer.decodeBit ("measSubframePatternConfigNeigh_r10Present");

            // decode measCycleSCell_r10

            if (measCycleSCell_r10Present) {
               buffer.getContext().eventDispatcher.startElement("measCycleSCell_r10", -1);

               int tval = MeasCycleSCell_r10.decodeEnumValue (buffer);
               measCycleSCell_r10 = MeasCycleSCell_r10.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("measCycleSCell_r10", -1);
            }
            else {
               measCycleSCell_r10 = null;
            }

            // decode measSubframePatternConfigNeigh_r10

            if (measSubframePatternConfigNeigh_r10Present) {
               buffer.getContext().eventDispatcher.startElement("measSubframePatternConfigNeigh_r10", -1);

               measSubframePatternConfigNeigh_r10 = new MeasSubframePatternConfigNeigh_r10();
               measSubframePatternConfigNeigh_r10.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("measSubframePatternConfigNeigh_r10", -1);
            }
            else {
               measSubframePatternConfigNeigh_r10 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean widebandRSRQ_Meas_r11Present = buffer.decodeBit ("widebandRSRQ_Meas_r11Present");

            // decode widebandRSRQ_Meas_r11

            if (widebandRSRQ_Meas_r11Present) {
               buffer.getContext().eventDispatcher.startElement("widebandRSRQ_Meas_r11", -1);

               widebandRSRQ_Meas_r11 = new Asn1Boolean();
               widebandRSRQ_Meas_r11.decode (buffer);

               buffer.invokeCharacters(widebandRSRQ_Meas_r11.toString());
               buffer.getContext().eventDispatcher.endElement("widebandRSRQ_Meas_r11", -1);
            }
            else {
               widebandRSRQ_Meas_r11 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV4ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean altTTT_CellsToRemoveList_r12Present = buffer.decodeBit ("altTTT_CellsToRemoveList_r12Present");

            boolean altTTT_CellsToAddModList_r12Present = buffer.decodeBit ("altTTT_CellsToAddModList_r12Present");

            boolean t312_r12Present = buffer.decodeBit ("t312_r12Present");

            boolean reducedMeasPerformance_r12Present = buffer.decodeBit ("reducedMeasPerformance_r12Present");

            boolean measDS_Config_r12Present = buffer.decodeBit ("measDS_Config_r12Present");

            // decode altTTT_CellsToRemoveList_r12

            if (altTTT_CellsToRemoveList_r12Present) {
               buffer.getContext().eventDispatcher.startElement("altTTT_CellsToRemoveList_r12", -1);

               altTTT_CellsToRemoveList_r12 = new CellIndexList();
               altTTT_CellsToRemoveList_r12.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("altTTT_CellsToRemoveList_r12", -1);
            }
            else {
               altTTT_CellsToRemoveList_r12 = null;
            }

            // decode altTTT_CellsToAddModList_r12

            if (altTTT_CellsToAddModList_r12Present) {
               buffer.getContext().eventDispatcher.startElement("altTTT_CellsToAddModList_r12", -1);

               altTTT_CellsToAddModList_r12 = new AltTTT_CellsToAddModList_r12();
               altTTT_CellsToAddModList_r12.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("altTTT_CellsToAddModList_r12", -1);
            }
            else {
               altTTT_CellsToAddModList_r12 = null;
            }

            // decode t312_r12

            if (t312_r12Present) {
               buffer.getContext().eventDispatcher.startElement("t312_r12", -1);

               t312_r12 = new MeasObjectEUTRA_t312_r12();
               t312_r12.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("t312_r12", -1);
            }
            else {
               t312_r12 = null;
            }

            // decode reducedMeasPerformance_r12

            if (reducedMeasPerformance_r12Present) {
               buffer.getContext().eventDispatcher.startElement("reducedMeasPerformance_r12", -1);

               reducedMeasPerformance_r12 = new Asn1Boolean();
               reducedMeasPerformance_r12.decode (buffer);

               buffer.invokeCharacters(reducedMeasPerformance_r12.toString());
               buffer.getContext().eventDispatcher.endElement("reducedMeasPerformance_r12", -1);
            }
            else {
               reducedMeasPerformance_r12 = null;
            }

            // decode measDS_Config_r12

            if (measDS_Config_r12Present) {
               buffer.getContext().eventDispatcher.startElement("measDS_Config_r12", -1);

               measDS_Config_r12 = new MeasDS_Config_r12();
               measDS_Config_r12.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("measDS_Config_r12", -1);
            }
            else {
               measDS_Config_r12 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV5ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean whiteCellsToRemoveList_r13Present = buffer.decodeBit ("whiteCellsToRemoveList_r13Present");

            boolean whiteCellsToAddModList_r13Present = buffer.decodeBit ("whiteCellsToAddModList_r13Present");

            boolean rmtc_Config_r13Present = buffer.decodeBit ("rmtc_Config_r13Present");

            boolean carrierFreq_r13Present = buffer.decodeBit ("carrierFreq_r13Present");

            // decode whiteCellsToRemoveList_r13

            if (whiteCellsToRemoveList_r13Present) {
               buffer.getContext().eventDispatcher.startElement("whiteCellsToRemoveList_r13", -1);

               whiteCellsToRemoveList_r13 = new CellIndexList();
               whiteCellsToRemoveList_r13.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("whiteCellsToRemoveList_r13", -1);
            }
            else {
               whiteCellsToRemoveList_r13 = null;
            }

            // decode whiteCellsToAddModList_r13

            if (whiteCellsToAddModList_r13Present) {
               buffer.getContext().eventDispatcher.startElement("whiteCellsToAddModList_r13", -1);

               whiteCellsToAddModList_r13 = new WhiteCellsToAddModList_r13();
               whiteCellsToAddModList_r13.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("whiteCellsToAddModList_r13", -1);
            }
            else {
               whiteCellsToAddModList_r13 = null;
            }

            // decode rmtc_Config_r13

            if (rmtc_Config_r13Present) {
               buffer.getContext().eventDispatcher.startElement("rmtc_Config_r13", -1);

               rmtc_Config_r13 = new RMTC_Config_r13();
               rmtc_Config_r13.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("rmtc_Config_r13", -1);
            }
            else {
               rmtc_Config_r13 = null;
            }

            // decode carrierFreq_r13

            if (carrierFreq_r13Present) {
               buffer.getContext().eventDispatcher.startElement("carrierFreq_r13", -1);

               carrierFreq_r13 = new ARFCN_ValueEUTRA_v9e0();
               carrierFreq_r13.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("carrierFreq_r13", -1);
            }
            else {
               carrierFreq_r13 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV6ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean tx_ResourcePoolToRemoveList_r14Present = buffer.decodeBit ("tx_ResourcePoolToRemoveList_r14Present");

            boolean tx_ResourcePoolToAddList_r14Present = buffer.decodeBit ("tx_ResourcePoolToAddList_r14Present");

            boolean fembms_MixedCarrier_r14Present = buffer.decodeBit ("fembms_MixedCarrier_r14Present");

            // decode tx_ResourcePoolToRemoveList_r14

            if (tx_ResourcePoolToRemoveList_r14Present) {
               buffer.getContext().eventDispatcher.startElement("tx_ResourcePoolToRemoveList_r14", -1);

               tx_ResourcePoolToRemoveList_r14 = new Tx_ResourcePoolMeasList_r14();
               tx_ResourcePoolToRemoveList_r14.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("tx_ResourcePoolToRemoveList_r14", -1);
            }
            else {
               tx_ResourcePoolToRemoveList_r14 = null;
            }

            // decode tx_ResourcePoolToAddList_r14

            if (tx_ResourcePoolToAddList_r14Present) {
               buffer.getContext().eventDispatcher.startElement("tx_ResourcePoolToAddList_r14", -1);

               tx_ResourcePoolToAddList_r14 = new Tx_ResourcePoolMeasList_r14();
               tx_ResourcePoolToAddList_r14.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("tx_ResourcePoolToAddList_r14", -1);
            }
            else {
               tx_ResourcePoolToAddList_r14 = null;
            }

            // decode fembms_MixedCarrier_r14

            if (fembms_MixedCarrier_r14Present) {
               buffer.getContext().eventDispatcher.startElement("fembms_MixedCarrier_r14", -1);

               fembms_MixedCarrier_r14 = new Asn1Boolean();
               fembms_MixedCarrier_r14.decode (buffer);

               buffer.invokeCharacters(fembms_MixedCarrier_r14.toString());
               buffer.getContext().eventDispatcher.endElement("fembms_MixedCarrier_r14", -1);
            }
            else {
               fembms_MixedCarrier_r14 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV7ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean measSensing_Config_r15Present = buffer.decodeBit ("measSensing_Config_r15Present");

            // decode measSensing_Config_r15

            if (measSensing_Config_r15Present) {
               buffer.getContext().eventDispatcher.startElement("measSensing_Config_r15", -1);

               measSensing_Config_r15 = new MeasSensing_Config_r15();
               measSensing_Config_r15.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("measSensing_Config_r15", -1);
            }
            else {
               measSensing_Config_r15 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (carrierFreq != null) carrierFreq.print (_sb, "carrierFreq", _level+1);
      if (allowedMeasBandwidth != null) allowedMeasBandwidth.print (_sb, "allowedMeasBandwidth", _level+1);
      if (presenceAntennaPort1 != null) presenceAntennaPort1.print (_sb, "presenceAntennaPort1", _level+1);
      if (neighCellConfig != null) neighCellConfig.print (_sb, "neighCellConfig", _level+1);
      if (offsetFreq != null) offsetFreq.print (_sb, "offsetFreq", _level+1);
      if (cellsToRemoveList != null) cellsToRemoveList.print (_sb, "cellsToRemoveList", _level+1);
      if (cellsToAddModList != null) cellsToAddModList.print (_sb, "cellsToAddModList", _level+1);
      if (blackCellsToRemoveList != null) blackCellsToRemoveList.print (_sb, "blackCellsToRemoveList", _level+1);
      if (blackCellsToAddModList != null) blackCellsToAddModList.print (_sb, "blackCellsToAddModList", _level+1);
      if (cellForWhichToReportCGI != null) cellForWhichToReportCGI.print (_sb, "cellForWhichToReportCGI", _level+1);
      if (measCycleSCell_r10 != null) measCycleSCell_r10.print (_sb, "measCycleSCell_r10", _level+1);
      if (measSubframePatternConfigNeigh_r10 != null) measSubframePatternConfigNeigh_r10.print (_sb, "measSubframePatternConfigNeigh_r10", _level+1);
      if (widebandRSRQ_Meas_r11 != null) widebandRSRQ_Meas_r11.print (_sb, "widebandRSRQ_Meas_r11", _level+1);
      if (altTTT_CellsToRemoveList_r12 != null) altTTT_CellsToRemoveList_r12.print (_sb, "altTTT_CellsToRemoveList_r12", _level+1);
      if (altTTT_CellsToAddModList_r12 != null) altTTT_CellsToAddModList_r12.print (_sb, "altTTT_CellsToAddModList_r12", _level+1);
      if (t312_r12 != null) t312_r12.print (_sb, "t312_r12", _level+1);
      if (reducedMeasPerformance_r12 != null) reducedMeasPerformance_r12.print (_sb, "reducedMeasPerformance_r12", _level+1);
      if (measDS_Config_r12 != null) measDS_Config_r12.print (_sb, "measDS_Config_r12", _level+1);
      if (whiteCellsToRemoveList_r13 != null) whiteCellsToRemoveList_r13.print (_sb, "whiteCellsToRemoveList_r13", _level+1);
      if (whiteCellsToAddModList_r13 != null) whiteCellsToAddModList_r13.print (_sb, "whiteCellsToAddModList_r13", _level+1);
      if (rmtc_Config_r13 != null) rmtc_Config_r13.print (_sb, "rmtc_Config_r13", _level+1);
      if (carrierFreq_r13 != null) carrierFreq_r13.print (_sb, "carrierFreq_r13", _level+1);
      if (tx_ResourcePoolToRemoveList_r14 != null) tx_ResourcePoolToRemoveList_r14.print (_sb, "tx_ResourcePoolToRemoveList_r14", _level+1);
      if (tx_ResourcePoolToAddList_r14 != null) tx_ResourcePoolToAddList_r14.print (_sb, "tx_ResourcePoolToAddList_r14", _level+1);
      if (fembms_MixedCarrier_r14 != null) fembms_MixedCarrier_r14.print (_sb, "fembms_MixedCarrier_r14", _level+1);
      if (measSensing_Config_r15 != null) measSensing_Config_r15.print (_sb, "measSensing_Config_r15", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
