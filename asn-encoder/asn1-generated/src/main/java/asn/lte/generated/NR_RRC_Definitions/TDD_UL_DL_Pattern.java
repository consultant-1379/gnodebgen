/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class TDD_UL_DL_Pattern extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "TDD-UL-DL-Pattern";
   }

   public TDD_UL_DL_Pattern_dl_UL_TransmissionPeriodicity dl_UL_TransmissionPeriodicity = null;
   public Asn1Integer nrofDownlinkSlots;
   public Asn1Integer nrofDownlinkSymbols;
   public Asn1Integer nrofUplinkSlots;
   public Asn1Integer nrofUplinkSymbols;
   public boolean mV2ExtPresent;
   public TDD_UL_DL_Pattern_dl_UL_TransmissionPeriodicity_v1530 dl_UL_TransmissionPeriodicity_v1530 = null;  // optional
   public Asn1OpenExt extElem1;

   public TDD_UL_DL_Pattern () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public TDD_UL_DL_Pattern (
      TDD_UL_DL_Pattern_dl_UL_TransmissionPeriodicity dl_UL_TransmissionPeriodicity_,
      Asn1Integer nrofDownlinkSlots_,
      Asn1Integer nrofDownlinkSymbols_,
      Asn1Integer nrofUplinkSlots_,
      Asn1Integer nrofUplinkSymbols_,
      TDD_UL_DL_Pattern_dl_UL_TransmissionPeriodicity_v1530 dl_UL_TransmissionPeriodicity_v1530_
   ) {
      super();
      dl_UL_TransmissionPeriodicity = dl_UL_TransmissionPeriodicity_;
      nrofDownlinkSlots = nrofDownlinkSlots_;
      nrofDownlinkSymbols = nrofDownlinkSymbols_;
      nrofUplinkSlots = nrofUplinkSlots_;
      nrofUplinkSymbols = nrofUplinkSymbols_;
      dl_UL_TransmissionPeriodicity_v1530 = dl_UL_TransmissionPeriodicity_v1530_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public TDD_UL_DL_Pattern (
      TDD_UL_DL_Pattern_dl_UL_TransmissionPeriodicity dl_UL_TransmissionPeriodicity_,
      Asn1Integer nrofDownlinkSlots_,
      Asn1Integer nrofDownlinkSymbols_,
      Asn1Integer nrofUplinkSlots_,
      Asn1Integer nrofUplinkSymbols_
   ) {
      super();
      dl_UL_TransmissionPeriodicity = dl_UL_TransmissionPeriodicity_;
      nrofDownlinkSlots = nrofDownlinkSlots_;
      nrofDownlinkSymbols = nrofDownlinkSymbols_;
      nrofUplinkSlots = nrofUplinkSlots_;
      nrofUplinkSymbols = nrofUplinkSymbols_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public TDD_UL_DL_Pattern (TDD_UL_DL_Pattern_dl_UL_TransmissionPeriodicity dl_UL_TransmissionPeriodicity_,
      long nrofDownlinkSlots_,
      long nrofDownlinkSymbols_,
      long nrofUplinkSlots_,
      long nrofUplinkSymbols_,
      TDD_UL_DL_Pattern_dl_UL_TransmissionPeriodicity_v1530 dl_UL_TransmissionPeriodicity_v1530_
   ) {
      super();
      dl_UL_TransmissionPeriodicity = dl_UL_TransmissionPeriodicity_;
      nrofDownlinkSlots = new Asn1Integer (nrofDownlinkSlots_);
      nrofDownlinkSymbols = new Asn1Integer (nrofDownlinkSymbols_);
      nrofUplinkSlots = new Asn1Integer (nrofUplinkSlots_);
      nrofUplinkSymbols = new Asn1Integer (nrofUplinkSymbols_);
      dl_UL_TransmissionPeriodicity_v1530 = dl_UL_TransmissionPeriodicity_v1530_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public TDD_UL_DL_Pattern (
      TDD_UL_DL_Pattern_dl_UL_TransmissionPeriodicity dl_UL_TransmissionPeriodicity_,
      long nrofDownlinkSlots_,
      long nrofDownlinkSymbols_,
      long nrofUplinkSlots_,
      long nrofUplinkSymbols_
   ) {
      super();
      dl_UL_TransmissionPeriodicity = dl_UL_TransmissionPeriodicity_;
      nrofDownlinkSlots = new Asn1Integer (nrofDownlinkSlots_);
      nrofDownlinkSymbols = new Asn1Integer (nrofDownlinkSymbols_);
      nrofUplinkSlots = new Asn1Integer (nrofUplinkSlots_);
      nrofUplinkSymbols = new Asn1Integer (nrofUplinkSymbols_);
   }

   public void init () {
      dl_UL_TransmissionPeriodicity = null;
      nrofDownlinkSlots = null;
      nrofDownlinkSymbols = null;
      nrofUplinkSlots = null;
      nrofUplinkSymbols = null;
      dl_UL_TransmissionPeriodicity_v1530 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return dl_UL_TransmissionPeriodicity;
         case 1: return nrofDownlinkSlots;
         case 2: return nrofDownlinkSymbols;
         case 3: return nrofUplinkSlots;
         case 4: return nrofUplinkSymbols;
         case 5: return dl_UL_TransmissionPeriodicity_v1530;
         case 6: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "dl-UL-TransmissionPeriodicity";
         case 1: return "nrofDownlinkSlots";
         case 2: return "nrofDownlinkSymbols";
         case 3: return "nrofUplinkSlots";
         case 4: return "nrofUplinkSymbols";
         case 5: return "dl-UL-TransmissionPeriodicity-v1530";
         case 6: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      // decode dl_UL_TransmissionPeriodicity

      buffer.getContext().eventDispatcher.startElement("dl_UL_TransmissionPeriodicity", -1);

      {
         int tval = TDD_UL_DL_Pattern_dl_UL_TransmissionPeriodicity.decodeEnumValue (buffer);
         dl_UL_TransmissionPeriodicity = TDD_UL_DL_Pattern_dl_UL_TransmissionPeriodicity.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("dl_UL_TransmissionPeriodicity", -1);

      // decode nrofDownlinkSlots

      buffer.getContext().eventDispatcher.startElement("nrofDownlinkSlots", -1);

      nrofDownlinkSlots = new Asn1Integer();
      nrofDownlinkSlots.decode (buffer, 0, 320);

      buffer.invokeCharacters(nrofDownlinkSlots.toString());
      buffer.getContext().eventDispatcher.endElement("nrofDownlinkSlots", -1);

      // decode nrofDownlinkSymbols

      buffer.getContext().eventDispatcher.startElement("nrofDownlinkSymbols", -1);

      nrofDownlinkSymbols = new Asn1Integer();
      nrofDownlinkSymbols.decode (buffer, 0, 13);

      buffer.invokeCharacters(nrofDownlinkSymbols.toString());
      buffer.getContext().eventDispatcher.endElement("nrofDownlinkSymbols", -1);

      // decode nrofUplinkSlots

      buffer.getContext().eventDispatcher.startElement("nrofUplinkSlots", -1);

      nrofUplinkSlots = new Asn1Integer();
      nrofUplinkSlots.decode (buffer, 0, 320);

      buffer.invokeCharacters(nrofUplinkSlots.toString());
      buffer.getContext().eventDispatcher.endElement("nrofUplinkSlots", -1);

      // decode nrofUplinkSymbols

      buffer.getContext().eventDispatcher.startElement("nrofUplinkSymbols", -1);

      nrofUplinkSymbols = new Asn1Integer();
      nrofUplinkSymbols.decode (buffer, 0, 13);

      buffer.invokeCharacters(nrofUplinkSymbols.toString());
      buffer.getContext().eventDispatcher.endElement("nrofUplinkSymbols", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean dl_UL_TransmissionPeriodicity_v1530Present = buffer.decodeBit ("dl_UL_TransmissionPeriodicity_v1530Present");

            // decode dl_UL_TransmissionPeriodicity_v1530

            if (dl_UL_TransmissionPeriodicity_v1530Present) {
               buffer.getContext().eventDispatcher.startElement("dl_UL_TransmissionPeriodicity_v1530", -1);

               int tval = TDD_UL_DL_Pattern_dl_UL_TransmissionPeriodicity_v1530.decodeEnumValue (buffer);
               dl_UL_TransmissionPeriodicity_v1530 = TDD_UL_DL_Pattern_dl_UL_TransmissionPeriodicity_v1530.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("dl_UL_TransmissionPeriodicity_v1530", -1);
            }
            else {
               dl_UL_TransmissionPeriodicity_v1530 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (dl_UL_TransmissionPeriodicity != null) dl_UL_TransmissionPeriodicity.print (_sb, "dl_UL_TransmissionPeriodicity", _level+1);
      if (nrofDownlinkSlots != null) nrofDownlinkSlots.print (_sb, "nrofDownlinkSlots", _level+1);
      if (nrofDownlinkSymbols != null) nrofDownlinkSymbols.print (_sb, "nrofDownlinkSymbols", _level+1);
      if (nrofUplinkSlots != null) nrofUplinkSlots.print (_sb, "nrofUplinkSlots", _level+1);
      if (nrofUplinkSymbols != null) nrofUplinkSymbols.print (_sb, "nrofUplinkSymbols", _level+1);
      if (dl_UL_TransmissionPeriodicity_v1530 != null) dl_UL_TransmissionPeriodicity_v1530.print (_sb, "dl_UL_TransmissionPeriodicity_v1530", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
