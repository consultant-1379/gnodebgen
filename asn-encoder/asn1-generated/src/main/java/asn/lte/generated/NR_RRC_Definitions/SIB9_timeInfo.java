/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SIB9_timeInfo extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public Asn1Integer timeInfoUTC;
   public Asn1BitString dayLightSavingTime;  // optional
   public Asn1Integer leapSeconds;  // optional
   public Asn1Integer localTimeOffset;  // optional

   public SIB9_timeInfo () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SIB9_timeInfo (
      Asn1Integer timeInfoUTC_,
      Asn1BitString dayLightSavingTime_,
      Asn1Integer leapSeconds_,
      Asn1Integer localTimeOffset_
   ) {
      super();
      timeInfoUTC = timeInfoUTC_;
      dayLightSavingTime = dayLightSavingTime_;
      leapSeconds = leapSeconds_;
      localTimeOffset = localTimeOffset_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SIB9_timeInfo (
      Asn1Integer timeInfoUTC_
   ) {
      super();
      timeInfoUTC = timeInfoUTC_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SIB9_timeInfo (long timeInfoUTC_,
      Asn1BitString dayLightSavingTime_,
      long leapSeconds_,
      long localTimeOffset_
   ) {
      super();
      timeInfoUTC = new Asn1Integer (timeInfoUTC_);
      dayLightSavingTime = dayLightSavingTime_;
      leapSeconds = new Asn1Integer (leapSeconds_);
      localTimeOffset = new Asn1Integer (localTimeOffset_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public SIB9_timeInfo (
      long timeInfoUTC_
   ) {
      super();
      timeInfoUTC = new Asn1Integer (timeInfoUTC_);
   }

   public void init () {
      timeInfoUTC = null;
      dayLightSavingTime = null;
      leapSeconds = null;
      localTimeOffset = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return timeInfoUTC;
         case 1: return dayLightSavingTime;
         case 2: return leapSeconds;
         case 3: return localTimeOffset;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "timeInfoUTC";
         case 1: return "dayLightSavingTime";
         case 2: return "leapSeconds";
         case 3: return "localTimeOffset";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean dayLightSavingTimePresent = buffer.decodeBit ("dayLightSavingTimePresent");
      boolean leapSecondsPresent = buffer.decodeBit ("leapSecondsPresent");
      boolean localTimeOffsetPresent = buffer.decodeBit ("localTimeOffsetPresent");

      // decode timeInfoUTC

      buffer.getContext().eventDispatcher.startElement("timeInfoUTC", -1);

      timeInfoUTC = new Asn1Integer();
      timeInfoUTC.decode (buffer, 0, 549755813887L);

      buffer.invokeCharacters(timeInfoUTC.toString());
      buffer.getContext().eventDispatcher.endElement("timeInfoUTC", -1);

      // decode dayLightSavingTime

      if (dayLightSavingTimePresent) {
         buffer.getContext().eventDispatcher.startElement("dayLightSavingTime", -1);

         dayLightSavingTime = new Asn1BitString();
         dayLightSavingTime.decode (buffer, 2, 2);

         buffer.invokeCharacters(dayLightSavingTime.toString());
         buffer.getContext().eventDispatcher.endElement("dayLightSavingTime", -1);
      }
      else {
         dayLightSavingTime = null;
      }

      // decode leapSeconds

      if (leapSecondsPresent) {
         buffer.getContext().eventDispatcher.startElement("leapSeconds", -1);

         leapSeconds = new Asn1Integer();
         leapSeconds.decode (buffer, -127, 128);

         buffer.invokeCharacters(leapSeconds.toString());
         buffer.getContext().eventDispatcher.endElement("leapSeconds", -1);
      }
      else {
         leapSeconds = null;
      }

      // decode localTimeOffset

      if (localTimeOffsetPresent) {
         buffer.getContext().eventDispatcher.startElement("localTimeOffset", -1);

         localTimeOffset = new Asn1Integer();
         localTimeOffset.decode (buffer, -63, 64);

         buffer.invokeCharacters(localTimeOffset.toString());
         buffer.getContext().eventDispatcher.endElement("localTimeOffset", -1);
      }
      else {
         localTimeOffset = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (timeInfoUTC != null) timeInfoUTC.print (_sb, "timeInfoUTC", _level+1);
      if (dayLightSavingTime != null) dayLightSavingTime.print (_sb, "dayLightSavingTime", _level+1);
      if (leapSeconds != null) leapSeconds.print (_sb, "leapSeconds", _level+1);
      if (localTimeOffset != null) localTimeOffset.print (_sb, "localTimeOffset", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
