/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class CSFB_RegistrationParam1XRTT extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CSFB-RegistrationParam1XRTT";
   }

   public Asn1BitString sid;
   public Asn1BitString nid;
   public Asn1Boolean multipleSID;
   public Asn1Boolean multipleNID;
   public Asn1Boolean homeReg;
   public Asn1Boolean foreignSIDReg;
   public Asn1Boolean foreignNIDReg;
   public Asn1Boolean parameterReg;
   public Asn1Boolean powerUpReg;
   public Asn1BitString registrationPeriod;
   public Asn1BitString registrationZone;
   public Asn1BitString totalZone;
   public Asn1BitString zoneTimer;

   public CSFB_RegistrationParam1XRTT () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CSFB_RegistrationParam1XRTT (
      Asn1BitString sid_,
      Asn1BitString nid_,
      Asn1Boolean multipleSID_,
      Asn1Boolean multipleNID_,
      Asn1Boolean homeReg_,
      Asn1Boolean foreignSIDReg_,
      Asn1Boolean foreignNIDReg_,
      Asn1Boolean parameterReg_,
      Asn1Boolean powerUpReg_,
      Asn1BitString registrationPeriod_,
      Asn1BitString registrationZone_,
      Asn1BitString totalZone_,
      Asn1BitString zoneTimer_
   ) {
      super();
      sid = sid_;
      nid = nid_;
      multipleSID = multipleSID_;
      multipleNID = multipleNID_;
      homeReg = homeReg_;
      foreignSIDReg = foreignSIDReg_;
      foreignNIDReg = foreignNIDReg_;
      parameterReg = parameterReg_;
      powerUpReg = powerUpReg_;
      registrationPeriod = registrationPeriod_;
      registrationZone = registrationZone_;
      totalZone = totalZone_;
      zoneTimer = zoneTimer_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public CSFB_RegistrationParam1XRTT (Asn1BitString sid_,
      Asn1BitString nid_,
      boolean multipleSID_,
      boolean multipleNID_,
      boolean homeReg_,
      boolean foreignSIDReg_,
      boolean foreignNIDReg_,
      boolean parameterReg_,
      boolean powerUpReg_,
      Asn1BitString registrationPeriod_,
      Asn1BitString registrationZone_,
      Asn1BitString totalZone_,
      Asn1BitString zoneTimer_
   ) {
      super();
      sid = sid_;
      nid = nid_;
      multipleSID = new Asn1Boolean (multipleSID_);
      multipleNID = new Asn1Boolean (multipleNID_);
      homeReg = new Asn1Boolean (homeReg_);
      foreignSIDReg = new Asn1Boolean (foreignSIDReg_);
      foreignNIDReg = new Asn1Boolean (foreignNIDReg_);
      parameterReg = new Asn1Boolean (parameterReg_);
      powerUpReg = new Asn1Boolean (powerUpReg_);
      registrationPeriod = registrationPeriod_;
      registrationZone = registrationZone_;
      totalZone = totalZone_;
      zoneTimer = zoneTimer_;
   }

   public void init () {
      sid = null;
      nid = null;
      multipleSID = null;
      multipleNID = null;
      homeReg = null;
      foreignSIDReg = null;
      foreignNIDReg = null;
      parameterReg = null;
      powerUpReg = null;
      registrationPeriod = null;
      registrationZone = null;
      totalZone = null;
      zoneTimer = null;
   }

   public int getElementCount() { return 13; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return sid;
         case 1: return nid;
         case 2: return multipleSID;
         case 3: return multipleNID;
         case 4: return homeReg;
         case 5: return foreignSIDReg;
         case 6: return foreignNIDReg;
         case 7: return parameterReg;
         case 8: return powerUpReg;
         case 9: return registrationPeriod;
         case 10: return registrationZone;
         case 11: return totalZone;
         case 12: return zoneTimer;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "sid";
         case 1: return "nid";
         case 2: return "multipleSID";
         case 3: return "multipleNID";
         case 4: return "homeReg";
         case 5: return "foreignSIDReg";
         case 6: return "foreignNIDReg";
         case 7: return "parameterReg";
         case 8: return "powerUpReg";
         case 9: return "registrationPeriod";
         case 10: return "registrationZone";
         case 11: return "totalZone";
         case 12: return "zoneTimer";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode sid

      buffer.getContext().eventDispatcher.startElement("sid", -1);

      sid = new Asn1BitString();
      sid.decode (buffer, 15, 15);

      buffer.invokeCharacters(sid.toString());
      buffer.getContext().eventDispatcher.endElement("sid", -1);

      // decode nid

      buffer.getContext().eventDispatcher.startElement("nid", -1);

      nid = new Asn1BitString();
      nid.decode (buffer, 16, 16);

      buffer.invokeCharacters(nid.toString());
      buffer.getContext().eventDispatcher.endElement("nid", -1);

      // decode multipleSID

      buffer.getContext().eventDispatcher.startElement("multipleSID", -1);

      multipleSID = new Asn1Boolean();
      multipleSID.decode (buffer);

      buffer.invokeCharacters(multipleSID.toString());
      buffer.getContext().eventDispatcher.endElement("multipleSID", -1);

      // decode multipleNID

      buffer.getContext().eventDispatcher.startElement("multipleNID", -1);

      multipleNID = new Asn1Boolean();
      multipleNID.decode (buffer);

      buffer.invokeCharacters(multipleNID.toString());
      buffer.getContext().eventDispatcher.endElement("multipleNID", -1);

      // decode homeReg

      buffer.getContext().eventDispatcher.startElement("homeReg", -1);

      homeReg = new Asn1Boolean();
      homeReg.decode (buffer);

      buffer.invokeCharacters(homeReg.toString());
      buffer.getContext().eventDispatcher.endElement("homeReg", -1);

      // decode foreignSIDReg

      buffer.getContext().eventDispatcher.startElement("foreignSIDReg", -1);

      foreignSIDReg = new Asn1Boolean();
      foreignSIDReg.decode (buffer);

      buffer.invokeCharacters(foreignSIDReg.toString());
      buffer.getContext().eventDispatcher.endElement("foreignSIDReg", -1);

      // decode foreignNIDReg

      buffer.getContext().eventDispatcher.startElement("foreignNIDReg", -1);

      foreignNIDReg = new Asn1Boolean();
      foreignNIDReg.decode (buffer);

      buffer.invokeCharacters(foreignNIDReg.toString());
      buffer.getContext().eventDispatcher.endElement("foreignNIDReg", -1);

      // decode parameterReg

      buffer.getContext().eventDispatcher.startElement("parameterReg", -1);

      parameterReg = new Asn1Boolean();
      parameterReg.decode (buffer);

      buffer.invokeCharacters(parameterReg.toString());
      buffer.getContext().eventDispatcher.endElement("parameterReg", -1);

      // decode powerUpReg

      buffer.getContext().eventDispatcher.startElement("powerUpReg", -1);

      powerUpReg = new Asn1Boolean();
      powerUpReg.decode (buffer);

      buffer.invokeCharacters(powerUpReg.toString());
      buffer.getContext().eventDispatcher.endElement("powerUpReg", -1);

      // decode registrationPeriod

      buffer.getContext().eventDispatcher.startElement("registrationPeriod", -1);

      registrationPeriod = new Asn1BitString();
      registrationPeriod.decode (buffer, 7, 7);

      buffer.invokeCharacters(registrationPeriod.toString());
      buffer.getContext().eventDispatcher.endElement("registrationPeriod", -1);

      // decode registrationZone

      buffer.getContext().eventDispatcher.startElement("registrationZone", -1);

      registrationZone = new Asn1BitString();
      registrationZone.decode (buffer, 12, 12);

      buffer.invokeCharacters(registrationZone.toString());
      buffer.getContext().eventDispatcher.endElement("registrationZone", -1);

      // decode totalZone

      buffer.getContext().eventDispatcher.startElement("totalZone", -1);

      totalZone = new Asn1BitString();
      totalZone.decode (buffer, 3, 3);

      buffer.invokeCharacters(totalZone.toString());
      buffer.getContext().eventDispatcher.endElement("totalZone", -1);

      // decode zoneTimer

      buffer.getContext().eventDispatcher.startElement("zoneTimer", -1);

      zoneTimer = new Asn1BitString();
      zoneTimer.decode (buffer, 3, 3);

      buffer.invokeCharacters(zoneTimer.toString());
      buffer.getContext().eventDispatcher.endElement("zoneTimer", -1);

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (sid != null) sid.print (_sb, "sid", _level+1);
      if (nid != null) nid.print (_sb, "nid", _level+1);
      if (multipleSID != null) multipleSID.print (_sb, "multipleSID", _level+1);
      if (multipleNID != null) multipleNID.print (_sb, "multipleNID", _level+1);
      if (homeReg != null) homeReg.print (_sb, "homeReg", _level+1);
      if (foreignSIDReg != null) foreignSIDReg.print (_sb, "foreignSIDReg", _level+1);
      if (foreignNIDReg != null) foreignNIDReg.print (_sb, "foreignNIDReg", _level+1);
      if (parameterReg != null) parameterReg.print (_sb, "parameterReg", _level+1);
      if (powerUpReg != null) powerUpReg.print (_sb, "powerUpReg", _level+1);
      if (registrationPeriod != null) registrationPeriod.print (_sb, "registrationPeriod", _level+1);
      if (registrationZone != null) registrationZone.print (_sb, "registrationZone", _level+1);
      if (totalZone != null) totalZone.print (_sb, "totalZone", _level+1);
      if (zoneTimer != null) zoneTimer.print (_sb, "zoneTimer", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
