/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class NeighCellsInfo_r12 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "NeighCellsInfo-r12";
   }

   public PhysCellId physCellId_r12;
   public Asn1Integer p_b_r12;
   public NeighCellsInfo_r12_crs_PortsCount_r12 crs_PortsCount_r12 = null;
   public MBSFN_SubframeConfigList mbsfn_SubframeConfig_r12;  // optional
   public NeighCellsInfo_r12_p_aList_r12 p_aList_r12;
   public Asn1BitString transmissionModeList_r12;
   public Asn1Integer resAllocGranularity_r12;
   public Asn1OpenExt extElem1;

   public NeighCellsInfo_r12 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public NeighCellsInfo_r12 (
      PhysCellId physCellId_r12_,
      Asn1Integer p_b_r12_,
      NeighCellsInfo_r12_crs_PortsCount_r12 crs_PortsCount_r12_,
      MBSFN_SubframeConfigList mbsfn_SubframeConfig_r12_,
      NeighCellsInfo_r12_p_aList_r12 p_aList_r12_,
      Asn1BitString transmissionModeList_r12_,
      Asn1Integer resAllocGranularity_r12_
   ) {
      super();
      physCellId_r12 = physCellId_r12_;
      p_b_r12 = p_b_r12_;
      crs_PortsCount_r12 = crs_PortsCount_r12_;
      mbsfn_SubframeConfig_r12 = mbsfn_SubframeConfig_r12_;
      p_aList_r12 = p_aList_r12_;
      transmissionModeList_r12 = transmissionModeList_r12_;
      resAllocGranularity_r12 = resAllocGranularity_r12_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public NeighCellsInfo_r12 (
      PhysCellId physCellId_r12_,
      Asn1Integer p_b_r12_,
      NeighCellsInfo_r12_crs_PortsCount_r12 crs_PortsCount_r12_,
      NeighCellsInfo_r12_p_aList_r12 p_aList_r12_,
      Asn1BitString transmissionModeList_r12_,
      Asn1Integer resAllocGranularity_r12_
   ) {
      super();
      physCellId_r12 = physCellId_r12_;
      p_b_r12 = p_b_r12_;
      crs_PortsCount_r12 = crs_PortsCount_r12_;
      p_aList_r12 = p_aList_r12_;
      transmissionModeList_r12 = transmissionModeList_r12_;
      resAllocGranularity_r12 = resAllocGranularity_r12_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public NeighCellsInfo_r12 (long physCellId_r12_,
      long p_b_r12_,
      NeighCellsInfo_r12_crs_PortsCount_r12 crs_PortsCount_r12_,
      MBSFN_SubframeConfigList mbsfn_SubframeConfig_r12_,
      NeighCellsInfo_r12_p_aList_r12 p_aList_r12_,
      Asn1BitString transmissionModeList_r12_,
      long resAllocGranularity_r12_
   ) {
      super();
      physCellId_r12 = new PhysCellId (physCellId_r12_);
      p_b_r12 = new Asn1Integer (p_b_r12_);
      crs_PortsCount_r12 = crs_PortsCount_r12_;
      mbsfn_SubframeConfig_r12 = mbsfn_SubframeConfig_r12_;
      p_aList_r12 = p_aList_r12_;
      transmissionModeList_r12 = transmissionModeList_r12_;
      resAllocGranularity_r12 = new Asn1Integer (resAllocGranularity_r12_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public NeighCellsInfo_r12 (
      long physCellId_r12_,
      long p_b_r12_,
      NeighCellsInfo_r12_crs_PortsCount_r12 crs_PortsCount_r12_,
      NeighCellsInfo_r12_p_aList_r12 p_aList_r12_,
      Asn1BitString transmissionModeList_r12_,
      long resAllocGranularity_r12_
   ) {
      super();
      physCellId_r12 = new PhysCellId (physCellId_r12_);
      p_b_r12 = new Asn1Integer (p_b_r12_);
      crs_PortsCount_r12 = crs_PortsCount_r12_;
      p_aList_r12 = p_aList_r12_;
      transmissionModeList_r12 = transmissionModeList_r12_;
      resAllocGranularity_r12 = new Asn1Integer (resAllocGranularity_r12_);
   }

   public void init () {
      physCellId_r12 = null;
      p_b_r12 = null;
      crs_PortsCount_r12 = null;
      mbsfn_SubframeConfig_r12 = null;
      p_aList_r12 = null;
      transmissionModeList_r12 = null;
      resAllocGranularity_r12 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 8; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return physCellId_r12;
         case 1: return p_b_r12;
         case 2: return crs_PortsCount_r12;
         case 3: return mbsfn_SubframeConfig_r12;
         case 4: return p_aList_r12;
         case 5: return transmissionModeList_r12;
         case 6: return resAllocGranularity_r12;
         case 7: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "physCellId-r12";
         case 1: return "p-b-r12";
         case 2: return "crs-PortsCount-r12";
         case 3: return "mbsfn-SubframeConfig-r12";
         case 4: return "p-aList-r12";
         case 5: return "transmissionModeList-r12";
         case 6: return "resAllocGranularity-r12";
         case 7: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean mbsfn_SubframeConfig_r12Present = buffer.decodeBit ("mbsfn_SubframeConfig_r12Present");

      // decode physCellId_r12

      buffer.getContext().eventDispatcher.startElement("physCellId_r12", -1);

      physCellId_r12 = new PhysCellId();
      physCellId_r12.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("physCellId_r12", -1);

      // decode p_b_r12

      buffer.getContext().eventDispatcher.startElement("p_b_r12", -1);

      p_b_r12 = new Asn1Integer();
      p_b_r12.decode (buffer, 0, 3);

      buffer.invokeCharacters(p_b_r12.toString());
      buffer.getContext().eventDispatcher.endElement("p_b_r12", -1);

      // decode crs_PortsCount_r12

      buffer.getContext().eventDispatcher.startElement("crs_PortsCount_r12", -1);

      {
         int tval = NeighCellsInfo_r12_crs_PortsCount_r12.decodeEnumValue (buffer);
         crs_PortsCount_r12 = NeighCellsInfo_r12_crs_PortsCount_r12.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("crs_PortsCount_r12", -1);

      // decode mbsfn_SubframeConfig_r12

      if (mbsfn_SubframeConfig_r12Present) {
         buffer.getContext().eventDispatcher.startElement("mbsfn_SubframeConfig_r12", -1);

         mbsfn_SubframeConfig_r12 = new MBSFN_SubframeConfigList();
         mbsfn_SubframeConfig_r12.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("mbsfn_SubframeConfig_r12", -1);
      }
      else {
         mbsfn_SubframeConfig_r12 = null;
      }

      // decode p_aList_r12

      buffer.getContext().eventDispatcher.startElement("p_aList_r12", -1);

      p_aList_r12 = new NeighCellsInfo_r12_p_aList_r12();
      p_aList_r12.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("p_aList_r12", -1);

      // decode transmissionModeList_r12

      buffer.getContext().eventDispatcher.startElement("transmissionModeList_r12", -1);

      transmissionModeList_r12 = new Asn1BitString();
      transmissionModeList_r12.decode (buffer, 8, 8);

      buffer.invokeCharacters(transmissionModeList_r12.toString());
      buffer.getContext().eventDispatcher.endElement("transmissionModeList_r12", -1);

      // decode resAllocGranularity_r12

      buffer.getContext().eventDispatcher.startElement("resAllocGranularity_r12", -1);

      resAllocGranularity_r12 = new Asn1Integer();
      resAllocGranularity_r12.decode (buffer, 1, 4);

      buffer.invokeCharacters(resAllocGranularity_r12.toString());
      buffer.getContext().eventDispatcher.endElement("resAllocGranularity_r12", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (physCellId_r12 != null) physCellId_r12.print (_sb, "physCellId_r12", _level+1);
      if (p_b_r12 != null) p_b_r12.print (_sb, "p_b_r12", _level+1);
      if (crs_PortsCount_r12 != null) crs_PortsCount_r12.print (_sb, "crs_PortsCount_r12", _level+1);
      if (mbsfn_SubframeConfig_r12 != null) mbsfn_SubframeConfig_r12.print (_sb, "mbsfn_SubframeConfig_r12", _level+1);
      if (p_aList_r12 != null) p_aList_r12.print (_sb, "p_aList_r12", _level+1);
      if (transmissionModeList_r12 != null) transmissionModeList_r12.print (_sb, "transmissionModeList_r12", _level+1);
      if (resAllocGranularity_r12 != null) resAllocGranularity_r12.print (_sb, "resAllocGranularity_r12", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
