/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SL_Parameters_r12 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SL-Parameters-r12";
   }

   public SL_Parameters_r12_commSimultaneousTx_r12 commSimultaneousTx_r12 = null;  // optional
   public FreqBandIndicatorListEUTRA_r12 commSupportedBands_r12;  // optional
   public SupportedBandInfoList_r12 discSupportedBands_r12;  // optional
   public SL_Parameters_r12_discScheduledResourceAlloc_r12 discScheduledResourceAlloc_r12 = null;  // optional
   public SL_Parameters_r12_disc_UE_SelectedResourceAlloc_r12 disc_UE_SelectedResourceAlloc_r12 = null;  // optional
   public SL_Parameters_r12_disc_SLSS_r12 disc_SLSS_r12 = null;  // optional
   public SL_Parameters_r12_discSupportedProc_r12 discSupportedProc_r12 = null;  // optional

   public SL_Parameters_r12 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SL_Parameters_r12 (
      SL_Parameters_r12_commSimultaneousTx_r12 commSimultaneousTx_r12_,
      FreqBandIndicatorListEUTRA_r12 commSupportedBands_r12_,
      SupportedBandInfoList_r12 discSupportedBands_r12_,
      SL_Parameters_r12_discScheduledResourceAlloc_r12 discScheduledResourceAlloc_r12_,
      SL_Parameters_r12_disc_UE_SelectedResourceAlloc_r12 disc_UE_SelectedResourceAlloc_r12_,
      SL_Parameters_r12_disc_SLSS_r12 disc_SLSS_r12_,
      SL_Parameters_r12_discSupportedProc_r12 discSupportedProc_r12_
   ) {
      super();
      commSimultaneousTx_r12 = commSimultaneousTx_r12_;
      commSupportedBands_r12 = commSupportedBands_r12_;
      discSupportedBands_r12 = discSupportedBands_r12_;
      discScheduledResourceAlloc_r12 = discScheduledResourceAlloc_r12_;
      disc_UE_SelectedResourceAlloc_r12 = disc_UE_SelectedResourceAlloc_r12_;
      disc_SLSS_r12 = disc_SLSS_r12_;
      discSupportedProc_r12 = discSupportedProc_r12_;
   }

   public void init () {
      commSimultaneousTx_r12 = null;
      commSupportedBands_r12 = null;
      discSupportedBands_r12 = null;
      discScheduledResourceAlloc_r12 = null;
      disc_UE_SelectedResourceAlloc_r12 = null;
      disc_SLSS_r12 = null;
      discSupportedProc_r12 = null;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return commSimultaneousTx_r12;
         case 1: return commSupportedBands_r12;
         case 2: return discSupportedBands_r12;
         case 3: return discScheduledResourceAlloc_r12;
         case 4: return disc_UE_SelectedResourceAlloc_r12;
         case 5: return disc_SLSS_r12;
         case 6: return discSupportedProc_r12;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "commSimultaneousTx-r12";
         case 1: return "commSupportedBands-r12";
         case 2: return "discSupportedBands-r12";
         case 3: return "discScheduledResourceAlloc-r12";
         case 4: return "disc-UE-SelectedResourceAlloc-r12";
         case 5: return "disc-SLSS-r12";
         case 6: return "discSupportedProc-r12";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean commSimultaneousTx_r12Present = buffer.decodeBit ("commSimultaneousTx_r12Present");
      boolean commSupportedBands_r12Present = buffer.decodeBit ("commSupportedBands_r12Present");
      boolean discSupportedBands_r12Present = buffer.decodeBit ("discSupportedBands_r12Present");
      boolean discScheduledResourceAlloc_r12Present = buffer.decodeBit ("discScheduledResourceAlloc_r12Present");
      boolean disc_UE_SelectedResourceAlloc_r12Present = buffer.decodeBit ("disc_UE_SelectedResourceAlloc_r12Present");
      boolean disc_SLSS_r12Present = buffer.decodeBit ("disc_SLSS_r12Present");
      boolean discSupportedProc_r12Present = buffer.decodeBit ("discSupportedProc_r12Present");

      // decode commSimultaneousTx_r12

      if (commSimultaneousTx_r12Present) {
         buffer.getContext().eventDispatcher.startElement("commSimultaneousTx_r12", -1);

         int tval = SL_Parameters_r12_commSimultaneousTx_r12.decodeEnumValue (buffer);
         commSimultaneousTx_r12 = SL_Parameters_r12_commSimultaneousTx_r12.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("commSimultaneousTx_r12", -1);
      }
      else {
         commSimultaneousTx_r12 = null;
      }

      // decode commSupportedBands_r12

      if (commSupportedBands_r12Present) {
         buffer.getContext().eventDispatcher.startElement("commSupportedBands_r12", -1);

         commSupportedBands_r12 = new FreqBandIndicatorListEUTRA_r12();
         commSupportedBands_r12.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("commSupportedBands_r12", -1);
      }
      else {
         commSupportedBands_r12 = null;
      }

      // decode discSupportedBands_r12

      if (discSupportedBands_r12Present) {
         buffer.getContext().eventDispatcher.startElement("discSupportedBands_r12", -1);

         discSupportedBands_r12 = new SupportedBandInfoList_r12();
         discSupportedBands_r12.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("discSupportedBands_r12", -1);
      }
      else {
         discSupportedBands_r12 = null;
      }

      // decode discScheduledResourceAlloc_r12

      if (discScheduledResourceAlloc_r12Present) {
         buffer.getContext().eventDispatcher.startElement("discScheduledResourceAlloc_r12", -1);

         int tval = SL_Parameters_r12_discScheduledResourceAlloc_r12.decodeEnumValue (buffer);
         discScheduledResourceAlloc_r12 = SL_Parameters_r12_discScheduledResourceAlloc_r12.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("discScheduledResourceAlloc_r12", -1);
      }
      else {
         discScheduledResourceAlloc_r12 = null;
      }

      // decode disc_UE_SelectedResourceAlloc_r12

      if (disc_UE_SelectedResourceAlloc_r12Present) {
         buffer.getContext().eventDispatcher.startElement("disc_UE_SelectedResourceAlloc_r12", -1);

         int tval = SL_Parameters_r12_disc_UE_SelectedResourceAlloc_r12.decodeEnumValue (buffer);
         disc_UE_SelectedResourceAlloc_r12 = SL_Parameters_r12_disc_UE_SelectedResourceAlloc_r12.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("disc_UE_SelectedResourceAlloc_r12", -1);
      }
      else {
         disc_UE_SelectedResourceAlloc_r12 = null;
      }

      // decode disc_SLSS_r12

      if (disc_SLSS_r12Present) {
         buffer.getContext().eventDispatcher.startElement("disc_SLSS_r12", -1);

         int tval = SL_Parameters_r12_disc_SLSS_r12.decodeEnumValue (buffer);
         disc_SLSS_r12 = SL_Parameters_r12_disc_SLSS_r12.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("disc_SLSS_r12", -1);
      }
      else {
         disc_SLSS_r12 = null;
      }

      // decode discSupportedProc_r12

      if (discSupportedProc_r12Present) {
         buffer.getContext().eventDispatcher.startElement("discSupportedProc_r12", -1);

         int tval = SL_Parameters_r12_discSupportedProc_r12.decodeEnumValue (buffer);
         discSupportedProc_r12 = SL_Parameters_r12_discSupportedProc_r12.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("discSupportedProc_r12", -1);
      }
      else {
         discSupportedProc_r12 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (commSimultaneousTx_r12 != null) commSimultaneousTx_r12.print (_sb, "commSimultaneousTx_r12", _level+1);
      if (commSupportedBands_r12 != null) commSupportedBands_r12.print (_sb, "commSupportedBands_r12", _level+1);
      if (discSupportedBands_r12 != null) discSupportedBands_r12.print (_sb, "discSupportedBands_r12", _level+1);
      if (discScheduledResourceAlloc_r12 != null) discScheduledResourceAlloc_r12.print (_sb, "discScheduledResourceAlloc_r12", _level+1);
      if (disc_UE_SelectedResourceAlloc_r12 != null) disc_UE_SelectedResourceAlloc_r12.print (_sb, "disc_UE_SelectedResourceAlloc_r12", _level+1);
      if (disc_SLSS_r12 != null) disc_SLSS_r12.print (_sb, "disc_SLSS_r12", _level+1);
      if (discSupportedProc_r12 != null) discSupportedProc_r12.print (_sb, "discSupportedProc_r12", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
