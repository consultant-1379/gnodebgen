/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class PTRS_DownlinkConfig extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "PTRS-DownlinkConfig";
   }

   public PTRS_DownlinkConfig_frequencyDensity frequencyDensity;  // optional
   public PTRS_DownlinkConfig_timeDensity timeDensity;  // optional
   public Asn1Integer epre_Ratio;  // optional
   public PTRS_DownlinkConfig_resourceElementOffset resourceElementOffset = null;  // optional
   public boolean mV2ExtPresent;
   public PTRS_DownlinkConfig_maxNrofPorts_r16 maxNrofPorts_r16 = null;  // optional
   public Asn1OpenExt extElem1;

   public PTRS_DownlinkConfig () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public PTRS_DownlinkConfig (
      PTRS_DownlinkConfig_frequencyDensity frequencyDensity_,
      PTRS_DownlinkConfig_timeDensity timeDensity_,
      Asn1Integer epre_Ratio_,
      PTRS_DownlinkConfig_resourceElementOffset resourceElementOffset_,
      PTRS_DownlinkConfig_maxNrofPorts_r16 maxNrofPorts_r16_
   ) {
      super();
      frequencyDensity = frequencyDensity_;
      timeDensity = timeDensity_;
      epre_Ratio = epre_Ratio_;
      resourceElementOffset = resourceElementOffset_;
      maxNrofPorts_r16 = maxNrofPorts_r16_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public PTRS_DownlinkConfig (PTRS_DownlinkConfig_frequencyDensity frequencyDensity_,
      PTRS_DownlinkConfig_timeDensity timeDensity_,
      long epre_Ratio_,
      PTRS_DownlinkConfig_resourceElementOffset resourceElementOffset_,
      PTRS_DownlinkConfig_maxNrofPorts_r16 maxNrofPorts_r16_
   ) {
      super();
      frequencyDensity = frequencyDensity_;
      timeDensity = timeDensity_;
      epre_Ratio = new Asn1Integer (epre_Ratio_);
      resourceElementOffset = resourceElementOffset_;
      maxNrofPorts_r16 = maxNrofPorts_r16_;
   }

   public void init () {
      frequencyDensity = null;
      timeDensity = null;
      epre_Ratio = null;
      resourceElementOffset = null;
      maxNrofPorts_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return frequencyDensity;
         case 1: return timeDensity;
         case 2: return epre_Ratio;
         case 3: return resourceElementOffset;
         case 4: return maxNrofPorts_r16;
         case 5: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "frequencyDensity";
         case 1: return "timeDensity";
         case 2: return "epre-Ratio";
         case 3: return "resourceElementOffset";
         case 4: return "maxNrofPorts-r16";
         case 5: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean frequencyDensityPresent = buffer.decodeBit ("frequencyDensityPresent");
      boolean timeDensityPresent = buffer.decodeBit ("timeDensityPresent");
      boolean epre_RatioPresent = buffer.decodeBit ("epre_RatioPresent");
      boolean resourceElementOffsetPresent = buffer.decodeBit ("resourceElementOffsetPresent");

      // decode frequencyDensity

      if (frequencyDensityPresent) {
         buffer.getContext().eventDispatcher.startElement("frequencyDensity", -1);

         frequencyDensity = new PTRS_DownlinkConfig_frequencyDensity();
         frequencyDensity.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("frequencyDensity", -1);
      }
      else {
         frequencyDensity = null;
      }

      // decode timeDensity

      if (timeDensityPresent) {
         buffer.getContext().eventDispatcher.startElement("timeDensity", -1);

         timeDensity = new PTRS_DownlinkConfig_timeDensity();
         timeDensity.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("timeDensity", -1);
      }
      else {
         timeDensity = null;
      }

      // decode epre_Ratio

      if (epre_RatioPresent) {
         buffer.getContext().eventDispatcher.startElement("epre_Ratio", -1);

         epre_Ratio = new Asn1Integer();
         epre_Ratio.decode (buffer, 0, 3);

         buffer.invokeCharacters(epre_Ratio.toString());
         buffer.getContext().eventDispatcher.endElement("epre_Ratio", -1);
      }
      else {
         epre_Ratio = null;
      }

      // decode resourceElementOffset

      if (resourceElementOffsetPresent) {
         buffer.getContext().eventDispatcher.startElement("resourceElementOffset", -1);

         int tval = PTRS_DownlinkConfig_resourceElementOffset.decodeEnumValue (buffer);
         resourceElementOffset = PTRS_DownlinkConfig_resourceElementOffset.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("resourceElementOffset", -1);
      }
      else {
         resourceElementOffset = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean maxNrofPorts_r16Present = buffer.decodeBit ("maxNrofPorts_r16Present");

            // decode maxNrofPorts_r16

            if (maxNrofPorts_r16Present) {
               buffer.getContext().eventDispatcher.startElement("maxNrofPorts_r16", -1);

               int tval = PTRS_DownlinkConfig_maxNrofPorts_r16.decodeEnumValue (buffer);
               maxNrofPorts_r16 = PTRS_DownlinkConfig_maxNrofPorts_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("maxNrofPorts_r16", -1);
            }
            else {
               maxNrofPorts_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (frequencyDensity != null) frequencyDensity.print (_sb, "frequencyDensity", _level+1);
      if (timeDensity != null) timeDensity.print (_sb, "timeDensity", _level+1);
      if (epre_Ratio != null) epre_Ratio.print (_sb, "epre_Ratio", _level+1);
      if (resourceElementOffset != null) resourceElementOffset.print (_sb, "resourceElementOffset", _level+1);
      if (maxNrofPorts_r16 != null) maxNrofPorts_r16.print (_sb, "maxNrofPorts_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
