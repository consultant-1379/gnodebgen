/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MBMS_SessionInfo_r9 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "MBMS-SessionInfo-r9";
   }

   public TMGI_r9 tmgi_r9;
   public Asn1OctetString sessionId_r9;  // optional
   public Asn1Integer logicalChannelIdentity_r9;
   public Asn1OpenExt extElem1;

   public MBMS_SessionInfo_r9 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MBMS_SessionInfo_r9 (
      TMGI_r9 tmgi_r9_,
      Asn1OctetString sessionId_r9_,
      Asn1Integer logicalChannelIdentity_r9_
   ) {
      super();
      tmgi_r9 = tmgi_r9_;
      sessionId_r9 = sessionId_r9_;
      logicalChannelIdentity_r9 = logicalChannelIdentity_r9_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public MBMS_SessionInfo_r9 (
      TMGI_r9 tmgi_r9_,
      Asn1Integer logicalChannelIdentity_r9_
   ) {
      super();
      tmgi_r9 = tmgi_r9_;
      logicalChannelIdentity_r9 = logicalChannelIdentity_r9_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public MBMS_SessionInfo_r9 (TMGI_r9 tmgi_r9_,
      byte[] sessionId_r9_,
      long logicalChannelIdentity_r9_
   ) {
      super();
      tmgi_r9 = tmgi_r9_;
      sessionId_r9 = new Asn1OctetString (sessionId_r9_);
      logicalChannelIdentity_r9 = new Asn1Integer (logicalChannelIdentity_r9_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public MBMS_SessionInfo_r9 (
      TMGI_r9 tmgi_r9_,
      long logicalChannelIdentity_r9_
   ) {
      super();
      tmgi_r9 = tmgi_r9_;
      logicalChannelIdentity_r9 = new Asn1Integer (logicalChannelIdentity_r9_);
   }

   public void init () {
      tmgi_r9 = null;
      sessionId_r9 = null;
      logicalChannelIdentity_r9 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return tmgi_r9;
         case 1: return sessionId_r9;
         case 2: return logicalChannelIdentity_r9;
         case 3: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "tmgi-r9";
         case 1: return "sessionId-r9";
         case 2: return "logicalChannelIdentity-r9";
         case 3: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean sessionId_r9Present = buffer.decodeBit ("sessionId_r9Present");

      // decode tmgi_r9

      buffer.getContext().eventDispatcher.startElement("tmgi_r9", -1);

      tmgi_r9 = new TMGI_r9();
      tmgi_r9.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("tmgi_r9", -1);

      // decode sessionId_r9

      if (sessionId_r9Present) {
         buffer.getContext().eventDispatcher.startElement("sessionId_r9", -1);

         sessionId_r9 = new Asn1OctetString();
         sessionId_r9.decode (buffer, 1, 1);

         buffer.invokeCharacters(sessionId_r9.toString());
         buffer.getContext().eventDispatcher.endElement("sessionId_r9", -1);
      }
      else {
         sessionId_r9 = null;
      }

      // decode logicalChannelIdentity_r9

      buffer.getContext().eventDispatcher.startElement("logicalChannelIdentity_r9", -1);

      logicalChannelIdentity_r9 = new Asn1Integer();
      logicalChannelIdentity_r9.decode (buffer, 0, 28);

      buffer.invokeCharacters(logicalChannelIdentity_r9.toString());
      buffer.getContext().eventDispatcher.endElement("logicalChannelIdentity_r9", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (tmgi_r9 != null) tmgi_r9.print (_sb, "tmgi_r9", _level+1);
      if (sessionId_r9 != null) sessionId_r9.print (_sb, "sessionId_r9", _level+1);
      if (logicalChannelIdentity_r9 != null) logicalChannelIdentity_r9.print (_sb, "logicalChannelIdentity_r9", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
