/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.M3AP_IEs;

import com.objsys.asn1j.runtime.*;

public class TMGI extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_M3AP_IEsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "TMGI";
   }

   public PLMN_Identity pLMNidentity;
   public Asn1OctetString serviceID;
   public TMGI_iE_Extensions iE_Extensions;  // optional

   public TMGI () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public TMGI (
      PLMN_Identity pLMNidentity_,
      Asn1OctetString serviceID_,
      TMGI_iE_Extensions iE_Extensions_
   ) {
      super();
      pLMNidentity = pLMNidentity_;
      serviceID = serviceID_;
      iE_Extensions = iE_Extensions_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public TMGI (
      PLMN_Identity pLMNidentity_,
      Asn1OctetString serviceID_
   ) {
      super();
      pLMNidentity = pLMNidentity_;
      serviceID = serviceID_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public TMGI (byte[] pLMNidentity_,
      byte[] serviceID_,
      TMGI_iE_Extensions iE_Extensions_
   ) {
      super();
      pLMNidentity = new PLMN_Identity (pLMNidentity_);
      serviceID = new Asn1OctetString (serviceID_);
      iE_Extensions = iE_Extensions_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public TMGI (
      byte[] pLMNidentity_,
      byte[] serviceID_
   ) {
      super();
      pLMNidentity = new PLMN_Identity (pLMNidentity_);
      serviceID = new Asn1OctetString (serviceID_);
   }

   public void init () {
      pLMNidentity = null;
      serviceID = null;
      iE_Extensions = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return pLMNidentity;
         case 1: return serviceID;
         case 2: return iE_Extensions;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "pLMNidentity";
         case 1: return "serviceID";
         case 2: return "iE-Extensions";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean iE_ExtensionsPresent = buffer.decodeBit ("iE_ExtensionsPresent");

      // decode pLMNidentity

      buffer.getContext().eventDispatcher.startElement("pLMNidentity", -1);

      pLMNidentity = new PLMN_Identity();
      pLMNidentity.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("pLMNidentity", -1);

      // decode serviceID

      buffer.getContext().eventDispatcher.startElement("serviceID", -1);

      serviceID = new Asn1OctetString();
      serviceID.decode (buffer, 3, 3);

      buffer.invokeCharacters(serviceID.toString());
      buffer.getContext().eventDispatcher.endElement("serviceID", -1);

      // decode iE_Extensions

      if (iE_ExtensionsPresent) {
         buffer.getContext().eventDispatcher.startElement("iE_Extensions", -1);

         iE_Extensions = new TMGI_iE_Extensions();
         iE_Extensions.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("iE_Extensions", -1);
      }
      else {
         iE_Extensions = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (pLMNidentity != null) pLMNidentity.print (_sb, "pLMNidentity", _level+1);
      if (serviceID != null) serviceID.print (_sb, "serviceID", _level+1);
      if (iE_Extensions != null) iE_Extensions.print (_sb, "iE_Extensions", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
