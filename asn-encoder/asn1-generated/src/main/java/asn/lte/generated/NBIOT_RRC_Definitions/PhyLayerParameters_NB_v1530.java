/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NBIOT_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class PhyLayerParameters_NB_v1530 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NBIOT_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "PhyLayerParameters-NB-v1530";
   }

   public PhyLayerParameters_NB_v1530_mixedOperationMode_r15 mixedOperationMode_r15 = null;  // optional
   public PhyLayerParameters_NB_v1530_sr_WithHARQ_ACK_r15 sr_WithHARQ_ACK_r15 = null;  // optional
   public PhyLayerParameters_NB_v1530_sr_WithoutHARQ_ACK_r15 sr_WithoutHARQ_ACK_r15 = null;  // optional
   public PhyLayerParameters_NB_v1530_nprach_Format2_r15 nprach_Format2_r15 = null;  // optional
   public PhyLayerParameters_NB_v1530_additionalTransmissionSIB1_r15 additionalTransmissionSIB1_r15 = null;  // optional
   public PhyLayerParameters_NB_v1530_npusch_3dot75kHz_SCS_TDD_r15 npusch_3dot75kHz_SCS_TDD_r15 = null;  // optional

   public PhyLayerParameters_NB_v1530 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public PhyLayerParameters_NB_v1530 (
      PhyLayerParameters_NB_v1530_mixedOperationMode_r15 mixedOperationMode_r15_,
      PhyLayerParameters_NB_v1530_sr_WithHARQ_ACK_r15 sr_WithHARQ_ACK_r15_,
      PhyLayerParameters_NB_v1530_sr_WithoutHARQ_ACK_r15 sr_WithoutHARQ_ACK_r15_,
      PhyLayerParameters_NB_v1530_nprach_Format2_r15 nprach_Format2_r15_,
      PhyLayerParameters_NB_v1530_additionalTransmissionSIB1_r15 additionalTransmissionSIB1_r15_,
      PhyLayerParameters_NB_v1530_npusch_3dot75kHz_SCS_TDD_r15 npusch_3dot75kHz_SCS_TDD_r15_
   ) {
      super();
      mixedOperationMode_r15 = mixedOperationMode_r15_;
      sr_WithHARQ_ACK_r15 = sr_WithHARQ_ACK_r15_;
      sr_WithoutHARQ_ACK_r15 = sr_WithoutHARQ_ACK_r15_;
      nprach_Format2_r15 = nprach_Format2_r15_;
      additionalTransmissionSIB1_r15 = additionalTransmissionSIB1_r15_;
      npusch_3dot75kHz_SCS_TDD_r15 = npusch_3dot75kHz_SCS_TDD_r15_;
   }

   public void init () {
      mixedOperationMode_r15 = null;
      sr_WithHARQ_ACK_r15 = null;
      sr_WithoutHARQ_ACK_r15 = null;
      nprach_Format2_r15 = null;
      additionalTransmissionSIB1_r15 = null;
      npusch_3dot75kHz_SCS_TDD_r15 = null;
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return mixedOperationMode_r15;
         case 1: return sr_WithHARQ_ACK_r15;
         case 2: return sr_WithoutHARQ_ACK_r15;
         case 3: return nprach_Format2_r15;
         case 4: return additionalTransmissionSIB1_r15;
         case 5: return npusch_3dot75kHz_SCS_TDD_r15;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "mixedOperationMode-r15";
         case 1: return "sr-WithHARQ-ACK-r15";
         case 2: return "sr-WithoutHARQ-ACK-r15";
         case 3: return "nprach-Format2-r15";
         case 4: return "additionalTransmissionSIB1-r15";
         case 5: return "npusch-3dot75kHz-SCS-TDD-r15";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean mixedOperationMode_r15Present = buffer.decodeBit ("mixedOperationMode_r15Present");
      boolean sr_WithHARQ_ACK_r15Present = buffer.decodeBit ("sr_WithHARQ_ACK_r15Present");
      boolean sr_WithoutHARQ_ACK_r15Present = buffer.decodeBit ("sr_WithoutHARQ_ACK_r15Present");
      boolean nprach_Format2_r15Present = buffer.decodeBit ("nprach_Format2_r15Present");
      boolean additionalTransmissionSIB1_r15Present = buffer.decodeBit ("additionalTransmissionSIB1_r15Present");
      boolean npusch_3dot75kHz_SCS_TDD_r15Present = buffer.decodeBit ("npusch_3dot75kHz_SCS_TDD_r15Present");

      // decode mixedOperationMode_r15

      if (mixedOperationMode_r15Present) {
         buffer.getContext().eventDispatcher.startElement("mixedOperationMode_r15", -1);

         int tval = PhyLayerParameters_NB_v1530_mixedOperationMode_r15.decodeEnumValue (buffer);
         mixedOperationMode_r15 = PhyLayerParameters_NB_v1530_mixedOperationMode_r15.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("mixedOperationMode_r15", -1);
      }
      else {
         mixedOperationMode_r15 = null;
      }

      // decode sr_WithHARQ_ACK_r15

      if (sr_WithHARQ_ACK_r15Present) {
         buffer.getContext().eventDispatcher.startElement("sr_WithHARQ_ACK_r15", -1);

         int tval = PhyLayerParameters_NB_v1530_sr_WithHARQ_ACK_r15.decodeEnumValue (buffer);
         sr_WithHARQ_ACK_r15 = PhyLayerParameters_NB_v1530_sr_WithHARQ_ACK_r15.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("sr_WithHARQ_ACK_r15", -1);
      }
      else {
         sr_WithHARQ_ACK_r15 = null;
      }

      // decode sr_WithoutHARQ_ACK_r15

      if (sr_WithoutHARQ_ACK_r15Present) {
         buffer.getContext().eventDispatcher.startElement("sr_WithoutHARQ_ACK_r15", -1);

         int tval = PhyLayerParameters_NB_v1530_sr_WithoutHARQ_ACK_r15.decodeEnumValue (buffer);
         sr_WithoutHARQ_ACK_r15 = PhyLayerParameters_NB_v1530_sr_WithoutHARQ_ACK_r15.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("sr_WithoutHARQ_ACK_r15", -1);
      }
      else {
         sr_WithoutHARQ_ACK_r15 = null;
      }

      // decode nprach_Format2_r15

      if (nprach_Format2_r15Present) {
         buffer.getContext().eventDispatcher.startElement("nprach_Format2_r15", -1);

         int tval = PhyLayerParameters_NB_v1530_nprach_Format2_r15.decodeEnumValue (buffer);
         nprach_Format2_r15 = PhyLayerParameters_NB_v1530_nprach_Format2_r15.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("nprach_Format2_r15", -1);
      }
      else {
         nprach_Format2_r15 = null;
      }

      // decode additionalTransmissionSIB1_r15

      if (additionalTransmissionSIB1_r15Present) {
         buffer.getContext().eventDispatcher.startElement("additionalTransmissionSIB1_r15", -1);

         int tval = PhyLayerParameters_NB_v1530_additionalTransmissionSIB1_r15.decodeEnumValue (buffer);
         additionalTransmissionSIB1_r15 = PhyLayerParameters_NB_v1530_additionalTransmissionSIB1_r15.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("additionalTransmissionSIB1_r15", -1);
      }
      else {
         additionalTransmissionSIB1_r15 = null;
      }

      // decode npusch_3dot75kHz_SCS_TDD_r15

      if (npusch_3dot75kHz_SCS_TDD_r15Present) {
         buffer.getContext().eventDispatcher.startElement("npusch_3dot75kHz_SCS_TDD_r15", -1);

         int tval = PhyLayerParameters_NB_v1530_npusch_3dot75kHz_SCS_TDD_r15.decodeEnumValue (buffer);
         npusch_3dot75kHz_SCS_TDD_r15 = PhyLayerParameters_NB_v1530_npusch_3dot75kHz_SCS_TDD_r15.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("npusch_3dot75kHz_SCS_TDD_r15", -1);
      }
      else {
         npusch_3dot75kHz_SCS_TDD_r15 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (mixedOperationMode_r15 != null) mixedOperationMode_r15.print (_sb, "mixedOperationMode_r15", _level+1);
      if (sr_WithHARQ_ACK_r15 != null) sr_WithHARQ_ACK_r15.print (_sb, "sr_WithHARQ_ACK_r15", _level+1);
      if (sr_WithoutHARQ_ACK_r15 != null) sr_WithoutHARQ_ACK_r15.print (_sb, "sr_WithoutHARQ_ACK_r15", _level+1);
      if (nprach_Format2_r15 != null) nprach_Format2_r15.print (_sb, "nprach_Format2_r15", _level+1);
      if (additionalTransmissionSIB1_r15 != null) additionalTransmissionSIB1_r15.print (_sb, "additionalTransmissionSIB1_r15", _level+1);
      if (npusch_3dot75kHz_SCS_TDD_r15 != null) npusch_3dot75kHz_SCS_TDD_r15.print (_sb, "npusch_3dot75kHz_SCS_TDD_r15", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
