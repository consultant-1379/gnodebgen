/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SPS_Config extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SPS-Config";
   }

   public SPS_Config_periodicity periodicity = null;
   public Asn1Integer nrofHARQ_Processes;
   public PUCCH_ResourceId n1PUCCH_AN;  // optional
   public SPS_Config_mcs_Table mcs_Table = null;  // optional
   public boolean mV2ExtPresent;
   public SPS_ConfigIndex_r16 sps_ConfigIndex_r16;  // optional
   public Asn1Integer harq_ProcID_Offset_r16;  // optional
   public Asn1Integer periodicityExt_r16;  // optional
   public Asn1Integer harq_CodebookID_r16;  // optional
   public SPS_Config_pdsch_AggregationFactor_r16 pdsch_AggregationFactor_r16 = null;  // optional
   public Asn1OpenExt extElem1;

   public SPS_Config () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SPS_Config (
      SPS_Config_periodicity periodicity_,
      Asn1Integer nrofHARQ_Processes_,
      PUCCH_ResourceId n1PUCCH_AN_,
      SPS_Config_mcs_Table mcs_Table_,
      SPS_ConfigIndex_r16 sps_ConfigIndex_r16_,
      Asn1Integer harq_ProcID_Offset_r16_,
      Asn1Integer periodicityExt_r16_,
      Asn1Integer harq_CodebookID_r16_,
      SPS_Config_pdsch_AggregationFactor_r16 pdsch_AggregationFactor_r16_
   ) {
      super();
      periodicity = periodicity_;
      nrofHARQ_Processes = nrofHARQ_Processes_;
      n1PUCCH_AN = n1PUCCH_AN_;
      mcs_Table = mcs_Table_;
      sps_ConfigIndex_r16 = sps_ConfigIndex_r16_;
      harq_ProcID_Offset_r16 = harq_ProcID_Offset_r16_;
      periodicityExt_r16 = periodicityExt_r16_;
      harq_CodebookID_r16 = harq_CodebookID_r16_;
      pdsch_AggregationFactor_r16 = pdsch_AggregationFactor_r16_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SPS_Config (
      SPS_Config_periodicity periodicity_,
      Asn1Integer nrofHARQ_Processes_
   ) {
      super();
      periodicity = periodicity_;
      nrofHARQ_Processes = nrofHARQ_Processes_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SPS_Config (SPS_Config_periodicity periodicity_,
      long nrofHARQ_Processes_,
      long n1PUCCH_AN_,
      SPS_Config_mcs_Table mcs_Table_,
      long sps_ConfigIndex_r16_,
      long harq_ProcID_Offset_r16_,
      long periodicityExt_r16_,
      long harq_CodebookID_r16_,
      SPS_Config_pdsch_AggregationFactor_r16 pdsch_AggregationFactor_r16_
   ) {
      super();
      periodicity = periodicity_;
      nrofHARQ_Processes = new Asn1Integer (nrofHARQ_Processes_);
      n1PUCCH_AN = new PUCCH_ResourceId (n1PUCCH_AN_);
      mcs_Table = mcs_Table_;
      sps_ConfigIndex_r16 = new SPS_ConfigIndex_r16 (sps_ConfigIndex_r16_);
      harq_ProcID_Offset_r16 = new Asn1Integer (harq_ProcID_Offset_r16_);
      periodicityExt_r16 = new Asn1Integer (periodicityExt_r16_);
      harq_CodebookID_r16 = new Asn1Integer (harq_CodebookID_r16_);
      pdsch_AggregationFactor_r16 = pdsch_AggregationFactor_r16_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public SPS_Config (
      SPS_Config_periodicity periodicity_,
      long nrofHARQ_Processes_
   ) {
      super();
      periodicity = periodicity_;
      nrofHARQ_Processes = new Asn1Integer (nrofHARQ_Processes_);
   }

   public void init () {
      periodicity = null;
      nrofHARQ_Processes = null;
      n1PUCCH_AN = null;
      mcs_Table = null;
      sps_ConfigIndex_r16 = null;
      harq_ProcID_Offset_r16 = null;
      periodicityExt_r16 = null;
      harq_CodebookID_r16 = null;
      pdsch_AggregationFactor_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 10; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return periodicity;
         case 1: return nrofHARQ_Processes;
         case 2: return n1PUCCH_AN;
         case 3: return mcs_Table;
         case 4: return sps_ConfigIndex_r16;
         case 5: return harq_ProcID_Offset_r16;
         case 6: return periodicityExt_r16;
         case 7: return harq_CodebookID_r16;
         case 8: return pdsch_AggregationFactor_r16;
         case 9: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "periodicity";
         case 1: return "nrofHARQ-Processes";
         case 2: return "n1PUCCH-AN";
         case 3: return "mcs-Table";
         case 4: return "sps-ConfigIndex-r16";
         case 5: return "harq-ProcID-Offset-r16";
         case 6: return "periodicityExt-r16";
         case 7: return "harq-CodebookID-r16";
         case 8: return "pdsch-AggregationFactor-r16";
         case 9: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean n1PUCCH_ANPresent = buffer.decodeBit ("n1PUCCH_ANPresent");
      boolean mcs_TablePresent = buffer.decodeBit ("mcs_TablePresent");

      // decode periodicity

      buffer.getContext().eventDispatcher.startElement("periodicity", -1);

      {
         int tval = SPS_Config_periodicity.decodeEnumValue (buffer);
         periodicity = SPS_Config_periodicity.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("periodicity", -1);

      // decode nrofHARQ_Processes

      buffer.getContext().eventDispatcher.startElement("nrofHARQ_Processes", -1);

      nrofHARQ_Processes = new Asn1Integer();
      nrofHARQ_Processes.decode (buffer, 1, 8);

      buffer.invokeCharacters(nrofHARQ_Processes.toString());
      buffer.getContext().eventDispatcher.endElement("nrofHARQ_Processes", -1);

      // decode n1PUCCH_AN

      if (n1PUCCH_ANPresent) {
         buffer.getContext().eventDispatcher.startElement("n1PUCCH_AN", -1);

         n1PUCCH_AN = new PUCCH_ResourceId();
         n1PUCCH_AN.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("n1PUCCH_AN", -1);
      }
      else {
         n1PUCCH_AN = null;
      }

      // decode mcs_Table

      if (mcs_TablePresent) {
         buffer.getContext().eventDispatcher.startElement("mcs_Table", -1);

         int tval = SPS_Config_mcs_Table.decodeEnumValue (buffer);
         mcs_Table = SPS_Config_mcs_Table.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("mcs_Table", -1);
      }
      else {
         mcs_Table = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean sps_ConfigIndex_r16Present = buffer.decodeBit ("sps_ConfigIndex_r16Present");

            boolean harq_ProcID_Offset_r16Present = buffer.decodeBit ("harq_ProcID_Offset_r16Present");

            boolean periodicityExt_r16Present = buffer.decodeBit ("periodicityExt_r16Present");

            boolean harq_CodebookID_r16Present = buffer.decodeBit ("harq_CodebookID_r16Present");

            boolean pdsch_AggregationFactor_r16Present = buffer.decodeBit ("pdsch_AggregationFactor_r16Present");

            // decode sps_ConfigIndex_r16

            if (sps_ConfigIndex_r16Present) {
               buffer.getContext().eventDispatcher.startElement("sps_ConfigIndex_r16", -1);

               sps_ConfigIndex_r16 = new SPS_ConfigIndex_r16();
               sps_ConfigIndex_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("sps_ConfigIndex_r16", -1);
            }
            else {
               sps_ConfigIndex_r16 = null;
            }

            // decode harq_ProcID_Offset_r16

            if (harq_ProcID_Offset_r16Present) {
               buffer.getContext().eventDispatcher.startElement("harq_ProcID_Offset_r16", -1);

               harq_ProcID_Offset_r16 = new Asn1Integer();
               harq_ProcID_Offset_r16.decode (buffer, 0, 15);

               buffer.invokeCharacters(harq_ProcID_Offset_r16.toString());
               buffer.getContext().eventDispatcher.endElement("harq_ProcID_Offset_r16", -1);
            }
            else {
               harq_ProcID_Offset_r16 = null;
            }

            // decode periodicityExt_r16

            if (periodicityExt_r16Present) {
               buffer.getContext().eventDispatcher.startElement("periodicityExt_r16", -1);

               periodicityExt_r16 = new Asn1Integer();
               periodicityExt_r16.decode (buffer, 1, 5120);

               buffer.invokeCharacters(periodicityExt_r16.toString());
               buffer.getContext().eventDispatcher.endElement("periodicityExt_r16", -1);
            }
            else {
               periodicityExt_r16 = null;
            }

            // decode harq_CodebookID_r16

            if (harq_CodebookID_r16Present) {
               buffer.getContext().eventDispatcher.startElement("harq_CodebookID_r16", -1);

               harq_CodebookID_r16 = new Asn1Integer();
               harq_CodebookID_r16.decode (buffer, 1, 2);

               buffer.invokeCharacters(harq_CodebookID_r16.toString());
               buffer.getContext().eventDispatcher.endElement("harq_CodebookID_r16", -1);
            }
            else {
               harq_CodebookID_r16 = null;
            }

            // decode pdsch_AggregationFactor_r16

            if (pdsch_AggregationFactor_r16Present) {
               buffer.getContext().eventDispatcher.startElement("pdsch_AggregationFactor_r16", -1);

               int tval = SPS_Config_pdsch_AggregationFactor_r16.decodeEnumValue (buffer);
               pdsch_AggregationFactor_r16 = SPS_Config_pdsch_AggregationFactor_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("pdsch_AggregationFactor_r16", -1);
            }
            else {
               pdsch_AggregationFactor_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (periodicity != null) periodicity.print (_sb, "periodicity", _level+1);
      if (nrofHARQ_Processes != null) nrofHARQ_Processes.print (_sb, "nrofHARQ_Processes", _level+1);
      if (n1PUCCH_AN != null) n1PUCCH_AN.print (_sb, "n1PUCCH_AN", _level+1);
      if (mcs_Table != null) mcs_Table.print (_sb, "mcs_Table", _level+1);
      if (sps_ConfigIndex_r16 != null) sps_ConfigIndex_r16.print (_sb, "sps_ConfigIndex_r16", _level+1);
      if (harq_ProcID_Offset_r16 != null) harq_ProcID_Offset_r16.print (_sb, "harq_ProcID_Offset_r16", _level+1);
      if (periodicityExt_r16 != null) periodicityExt_r16.print (_sb, "periodicityExt_r16", _level+1);
      if (harq_CodebookID_r16 != null) harq_CodebookID_r16.print (_sb, "harq_CodebookID_r16", _level+1);
      if (pdsch_AggregationFactor_r16 != null) pdsch_AggregationFactor_r16.print (_sb, "pdsch_AggregationFactor_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
