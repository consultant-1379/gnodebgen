/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_UE_Variables;

import com.objsys.asn1j.runtime.*;
import asn.lte.generated.NR_RRC_Definitions.PhysCellId;
import asn.lte.generated.NR_RRC_Definitions.CellIdentity;
import asn.lte.generated.NR_RRC_Definitions.RNTI_Value;

public class VarShortMAC_Input extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_UE_VariablesRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "VarShortMAC-Input";
   }

   public PhysCellId sourcePhysCellId;
   public CellIdentity targetCellIdentity;
   public RNTI_Value source_c_RNTI;

   public VarShortMAC_Input () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public VarShortMAC_Input (
      PhysCellId sourcePhysCellId_,
      CellIdentity targetCellIdentity_,
      RNTI_Value source_c_RNTI_
   ) {
      super();
      sourcePhysCellId = sourcePhysCellId_;
      targetCellIdentity = targetCellIdentity_;
      source_c_RNTI = source_c_RNTI_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public VarShortMAC_Input (long sourcePhysCellId_,
      CellIdentity targetCellIdentity_,
      long source_c_RNTI_
   ) {
      super();
      sourcePhysCellId = new PhysCellId (sourcePhysCellId_);
      targetCellIdentity = targetCellIdentity_;
      source_c_RNTI = new RNTI_Value (source_c_RNTI_);
   }

   public void init () {
      sourcePhysCellId = null;
      targetCellIdentity = null;
      source_c_RNTI = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return sourcePhysCellId;
         case 1: return targetCellIdentity;
         case 2: return source_c_RNTI;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "sourcePhysCellId";
         case 1: return "targetCellIdentity";
         case 2: return "source-c-RNTI";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode sourcePhysCellId

      buffer.getContext().eventDispatcher.startElement("sourcePhysCellId", -1);

      sourcePhysCellId = new PhysCellId();
      sourcePhysCellId.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("sourcePhysCellId", -1);

      // decode targetCellIdentity

      buffer.getContext().eventDispatcher.startElement("targetCellIdentity", -1);

      targetCellIdentity = new CellIdentity();
      targetCellIdentity.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("targetCellIdentity", -1);

      // decode source_c_RNTI

      buffer.getContext().eventDispatcher.startElement("source_c_RNTI", -1);

      source_c_RNTI = new RNTI_Value();
      source_c_RNTI.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("source_c_RNTI", -1);

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (sourcePhysCellId != null) sourcePhysCellId.print (_sb, "sourcePhysCellId", _level+1);
      if (targetCellIdentity != null) targetCellIdentity.print (_sb, "targetCellIdentity", _level+1);
      if (source_c_RNTI != null) source_c_RNTI.print (_sb, "source_c_RNTI", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
