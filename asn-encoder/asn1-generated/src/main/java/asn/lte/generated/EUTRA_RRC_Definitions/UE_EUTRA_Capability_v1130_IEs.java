/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class UE_EUTRA_Capability_v1130_IEs extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "UE-EUTRA-Capability-v1130-IEs";
   }

   public PDCP_Parameters_v1130 pdcp_Parameters_v1130;
   public PhyLayerParameters_v1130 phyLayerParameters_v1130;  // optional
   public RF_Parameters_v1130 rf_Parameters_v1130;
   public MeasParameters_v1130 measParameters_v1130;
   public IRAT_ParametersCDMA2000_v1130 interRAT_ParametersCDMA2000_v1130;
   public Other_Parameters_r11 otherParameters_r11;
   public UE_EUTRA_CapabilityAddXDD_Mode_v1130 fdd_Add_UE_EUTRA_Capabilities_v1130;  // optional
   public UE_EUTRA_CapabilityAddXDD_Mode_v1130 tdd_Add_UE_EUTRA_Capabilities_v1130;  // optional
   public UE_EUTRA_Capability_v1170_IEs nonCriticalExtension;  // optional

   public UE_EUTRA_Capability_v1130_IEs () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public UE_EUTRA_Capability_v1130_IEs (
      PDCP_Parameters_v1130 pdcp_Parameters_v1130_,
      PhyLayerParameters_v1130 phyLayerParameters_v1130_,
      RF_Parameters_v1130 rf_Parameters_v1130_,
      MeasParameters_v1130 measParameters_v1130_,
      IRAT_ParametersCDMA2000_v1130 interRAT_ParametersCDMA2000_v1130_,
      Other_Parameters_r11 otherParameters_r11_,
      UE_EUTRA_CapabilityAddXDD_Mode_v1130 fdd_Add_UE_EUTRA_Capabilities_v1130_,
      UE_EUTRA_CapabilityAddXDD_Mode_v1130 tdd_Add_UE_EUTRA_Capabilities_v1130_,
      UE_EUTRA_Capability_v1170_IEs nonCriticalExtension_
   ) {
      super();
      pdcp_Parameters_v1130 = pdcp_Parameters_v1130_;
      phyLayerParameters_v1130 = phyLayerParameters_v1130_;
      rf_Parameters_v1130 = rf_Parameters_v1130_;
      measParameters_v1130 = measParameters_v1130_;
      interRAT_ParametersCDMA2000_v1130 = interRAT_ParametersCDMA2000_v1130_;
      otherParameters_r11 = otherParameters_r11_;
      fdd_Add_UE_EUTRA_Capabilities_v1130 = fdd_Add_UE_EUTRA_Capabilities_v1130_;
      tdd_Add_UE_EUTRA_Capabilities_v1130 = tdd_Add_UE_EUTRA_Capabilities_v1130_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public UE_EUTRA_Capability_v1130_IEs (
      PDCP_Parameters_v1130 pdcp_Parameters_v1130_,
      RF_Parameters_v1130 rf_Parameters_v1130_,
      MeasParameters_v1130 measParameters_v1130_,
      IRAT_ParametersCDMA2000_v1130 interRAT_ParametersCDMA2000_v1130_,
      Other_Parameters_r11 otherParameters_r11_
   ) {
      super();
      pdcp_Parameters_v1130 = pdcp_Parameters_v1130_;
      rf_Parameters_v1130 = rf_Parameters_v1130_;
      measParameters_v1130 = measParameters_v1130_;
      interRAT_ParametersCDMA2000_v1130 = interRAT_ParametersCDMA2000_v1130_;
      otherParameters_r11 = otherParameters_r11_;
   }

   public void init () {
      pdcp_Parameters_v1130 = null;
      phyLayerParameters_v1130 = null;
      rf_Parameters_v1130 = null;
      measParameters_v1130 = null;
      interRAT_ParametersCDMA2000_v1130 = null;
      otherParameters_r11 = null;
      fdd_Add_UE_EUTRA_Capabilities_v1130 = null;
      tdd_Add_UE_EUTRA_Capabilities_v1130 = null;
      nonCriticalExtension = null;
   }

   public int getElementCount() { return 9; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return pdcp_Parameters_v1130;
         case 1: return phyLayerParameters_v1130;
         case 2: return rf_Parameters_v1130;
         case 3: return measParameters_v1130;
         case 4: return interRAT_ParametersCDMA2000_v1130;
         case 5: return otherParameters_r11;
         case 6: return fdd_Add_UE_EUTRA_Capabilities_v1130;
         case 7: return tdd_Add_UE_EUTRA_Capabilities_v1130;
         case 8: return nonCriticalExtension;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "pdcp-Parameters-v1130";
         case 1: return "phyLayerParameters-v1130";
         case 2: return "rf-Parameters-v1130";
         case 3: return "measParameters-v1130";
         case 4: return "interRAT-ParametersCDMA2000-v1130";
         case 5: return "otherParameters-r11";
         case 6: return "fdd-Add-UE-EUTRA-Capabilities-v1130";
         case 7: return "tdd-Add-UE-EUTRA-Capabilities-v1130";
         case 8: return "nonCriticalExtension";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean phyLayerParameters_v1130Present = buffer.decodeBit ("phyLayerParameters_v1130Present");
      boolean fdd_Add_UE_EUTRA_Capabilities_v1130Present = buffer.decodeBit ("fdd_Add_UE_EUTRA_Capabilities_v1130Present");
      boolean tdd_Add_UE_EUTRA_Capabilities_v1130Present = buffer.decodeBit ("tdd_Add_UE_EUTRA_Capabilities_v1130Present");
      boolean nonCriticalExtensionPresent = buffer.decodeBit ("nonCriticalExtensionPresent");

      // decode pdcp_Parameters_v1130

      buffer.getContext().eventDispatcher.startElement("pdcp_Parameters_v1130", -1);

      pdcp_Parameters_v1130 = new PDCP_Parameters_v1130();
      pdcp_Parameters_v1130.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("pdcp_Parameters_v1130", -1);

      // decode phyLayerParameters_v1130

      if (phyLayerParameters_v1130Present) {
         buffer.getContext().eventDispatcher.startElement("phyLayerParameters_v1130", -1);

         phyLayerParameters_v1130 = new PhyLayerParameters_v1130();
         phyLayerParameters_v1130.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("phyLayerParameters_v1130", -1);
      }
      else {
         phyLayerParameters_v1130 = null;
      }

      // decode rf_Parameters_v1130

      buffer.getContext().eventDispatcher.startElement("rf_Parameters_v1130", -1);

      rf_Parameters_v1130 = new RF_Parameters_v1130();
      rf_Parameters_v1130.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("rf_Parameters_v1130", -1);

      // decode measParameters_v1130

      buffer.getContext().eventDispatcher.startElement("measParameters_v1130", -1);

      measParameters_v1130 = new MeasParameters_v1130();
      measParameters_v1130.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("measParameters_v1130", -1);

      // decode interRAT_ParametersCDMA2000_v1130

      buffer.getContext().eventDispatcher.startElement("interRAT_ParametersCDMA2000_v1130", -1);

      interRAT_ParametersCDMA2000_v1130 = new IRAT_ParametersCDMA2000_v1130();
      interRAT_ParametersCDMA2000_v1130.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("interRAT_ParametersCDMA2000_v1130", -1);

      // decode otherParameters_r11

      buffer.getContext().eventDispatcher.startElement("otherParameters_r11", -1);

      otherParameters_r11 = new Other_Parameters_r11();
      otherParameters_r11.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("otherParameters_r11", -1);

      // decode fdd_Add_UE_EUTRA_Capabilities_v1130

      if (fdd_Add_UE_EUTRA_Capabilities_v1130Present) {
         buffer.getContext().eventDispatcher.startElement("fdd_Add_UE_EUTRA_Capabilities_v1130", -1);

         fdd_Add_UE_EUTRA_Capabilities_v1130 = new UE_EUTRA_CapabilityAddXDD_Mode_v1130();
         fdd_Add_UE_EUTRA_Capabilities_v1130.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("fdd_Add_UE_EUTRA_Capabilities_v1130", -1);
      }
      else {
         fdd_Add_UE_EUTRA_Capabilities_v1130 = null;
      }

      // decode tdd_Add_UE_EUTRA_Capabilities_v1130

      if (tdd_Add_UE_EUTRA_Capabilities_v1130Present) {
         buffer.getContext().eventDispatcher.startElement("tdd_Add_UE_EUTRA_Capabilities_v1130", -1);

         tdd_Add_UE_EUTRA_Capabilities_v1130 = new UE_EUTRA_CapabilityAddXDD_Mode_v1130();
         tdd_Add_UE_EUTRA_Capabilities_v1130.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("tdd_Add_UE_EUTRA_Capabilities_v1130", -1);
      }
      else {
         tdd_Add_UE_EUTRA_Capabilities_v1130 = null;
      }

      // decode nonCriticalExtension

      if (nonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension = new UE_EUTRA_Capability_v1170_IEs();
         nonCriticalExtension.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }
      else {
         nonCriticalExtension = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (pdcp_Parameters_v1130 != null) pdcp_Parameters_v1130.print (_sb, "pdcp_Parameters_v1130", _level+1);
      if (phyLayerParameters_v1130 != null) phyLayerParameters_v1130.print (_sb, "phyLayerParameters_v1130", _level+1);
      if (rf_Parameters_v1130 != null) rf_Parameters_v1130.print (_sb, "rf_Parameters_v1130", _level+1);
      if (measParameters_v1130 != null) measParameters_v1130.print (_sb, "measParameters_v1130", _level+1);
      if (interRAT_ParametersCDMA2000_v1130 != null) interRAT_ParametersCDMA2000_v1130.print (_sb, "interRAT_ParametersCDMA2000_v1130", _level+1);
      if (otherParameters_r11 != null) otherParameters_r11.print (_sb, "otherParameters_r11", _level+1);
      if (fdd_Add_UE_EUTRA_Capabilities_v1130 != null) fdd_Add_UE_EUTRA_Capabilities_v1130.print (_sb, "fdd_Add_UE_EUTRA_Capabilities_v1130", _level+1);
      if (tdd_Add_UE_EUTRA_Capabilities_v1130 != null) tdd_Add_UE_EUTRA_Capabilities_v1130.print (_sb, "tdd_Add_UE_EUTRA_Capabilities_v1130", _level+1);
      if (nonCriticalExtension != null) nonCriticalExtension.print (_sb, "nonCriticalExtension", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
