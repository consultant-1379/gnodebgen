/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MBSFN_SubframeConfig extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "MBSFN-SubframeConfig";
   }

   public MBSFN_SubframeConfig_radioframeAllocationPeriod radioframeAllocationPeriod = null;
   public Asn1Integer radioframeAllocationOffset;
   public MBSFN_SubframeConfig_subframeAllocation subframeAllocation;

   public MBSFN_SubframeConfig () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MBSFN_SubframeConfig (
      MBSFN_SubframeConfig_radioframeAllocationPeriod radioframeAllocationPeriod_,
      Asn1Integer radioframeAllocationOffset_,
      MBSFN_SubframeConfig_subframeAllocation subframeAllocation_
   ) {
      super();
      radioframeAllocationPeriod = radioframeAllocationPeriod_;
      radioframeAllocationOffset = radioframeAllocationOffset_;
      subframeAllocation = subframeAllocation_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public MBSFN_SubframeConfig (MBSFN_SubframeConfig_radioframeAllocationPeriod radioframeAllocationPeriod_,
      long radioframeAllocationOffset_,
      MBSFN_SubframeConfig_subframeAllocation subframeAllocation_
   ) {
      super();
      radioframeAllocationPeriod = radioframeAllocationPeriod_;
      radioframeAllocationOffset = new Asn1Integer (radioframeAllocationOffset_);
      subframeAllocation = subframeAllocation_;
   }

   public void init () {
      radioframeAllocationPeriod = null;
      radioframeAllocationOffset = null;
      subframeAllocation = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return radioframeAllocationPeriod;
         case 1: return radioframeAllocationOffset;
         case 2: return subframeAllocation;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "radioframeAllocationPeriod";
         case 1: return "radioframeAllocationOffset";
         case 2: return "subframeAllocation";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode radioframeAllocationPeriod

      buffer.getContext().eventDispatcher.startElement("radioframeAllocationPeriod", -1);

      {
         int tval = MBSFN_SubframeConfig_radioframeAllocationPeriod.decodeEnumValue (buffer);
         radioframeAllocationPeriod = MBSFN_SubframeConfig_radioframeAllocationPeriod.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("radioframeAllocationPeriod", -1);

      // decode radioframeAllocationOffset

      buffer.getContext().eventDispatcher.startElement("radioframeAllocationOffset", -1);

      radioframeAllocationOffset = new Asn1Integer();
      radioframeAllocationOffset.decode (buffer, 0, 7);

      buffer.invokeCharacters(radioframeAllocationOffset.toString());
      buffer.getContext().eventDispatcher.endElement("radioframeAllocationOffset", -1);

      // decode subframeAllocation

      buffer.getContext().eventDispatcher.startElement("subframeAllocation", -1);

      subframeAllocation = new MBSFN_SubframeConfig_subframeAllocation();
      subframeAllocation.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("subframeAllocation", -1);

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (radioframeAllocationPeriod != null) radioframeAllocationPeriod.print (_sb, "radioframeAllocationPeriod", _level+1);
      if (radioframeAllocationOffset != null) radioframeAllocationOffset.print (_sb, "radioframeAllocationOffset", _level+1);
      if (subframeAllocation != null) subframeAllocation.print (_sb, "subframeAllocation", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
