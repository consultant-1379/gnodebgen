/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SystemInformationBlockType18_r12 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SystemInformationBlockType18-r12";
   }

   public SystemInformationBlockType18_r12_commConfig_r12 commConfig_r12;  // optional
   public Asn1OctetString lateNonCriticalExtension;  // optional
   public boolean mV2ExtPresent;
   public SL_CommTxPoolListExt_r13 commTxPoolNormalCommonExt_r13;  // optional
   public SystemInformationBlockType18_r12_commTxResourceUC_ReqAllowed_r13 commTxResourceUC_ReqAllowed_r13 = null;  // optional
   public SystemInformationBlockType18_r12_commTxAllowRelayCommon_r13 commTxAllowRelayCommon_r13 = null;  // optional
   public Asn1OpenExt extElem1;

   public SystemInformationBlockType18_r12 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SystemInformationBlockType18_r12 (
      SystemInformationBlockType18_r12_commConfig_r12 commConfig_r12_,
      Asn1OctetString lateNonCriticalExtension_,
      SL_CommTxPoolListExt_r13 commTxPoolNormalCommonExt_r13_,
      SystemInformationBlockType18_r12_commTxResourceUC_ReqAllowed_r13 commTxResourceUC_ReqAllowed_r13_,
      SystemInformationBlockType18_r12_commTxAllowRelayCommon_r13 commTxAllowRelayCommon_r13_
   ) {
      super();
      commConfig_r12 = commConfig_r12_;
      lateNonCriticalExtension = lateNonCriticalExtension_;
      commTxPoolNormalCommonExt_r13 = commTxPoolNormalCommonExt_r13_;
      commTxResourceUC_ReqAllowed_r13 = commTxResourceUC_ReqAllowed_r13_;
      commTxAllowRelayCommon_r13 = commTxAllowRelayCommon_r13_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SystemInformationBlockType18_r12 (SystemInformationBlockType18_r12_commConfig_r12 commConfig_r12_,
      byte[] lateNonCriticalExtension_,
      SL_CommTxPoolListExt_r13 commTxPoolNormalCommonExt_r13_,
      SystemInformationBlockType18_r12_commTxResourceUC_ReqAllowed_r13 commTxResourceUC_ReqAllowed_r13_,
      SystemInformationBlockType18_r12_commTxAllowRelayCommon_r13 commTxAllowRelayCommon_r13_
   ) {
      super();
      commConfig_r12 = commConfig_r12_;
      lateNonCriticalExtension = new Asn1OctetString (lateNonCriticalExtension_);
      commTxPoolNormalCommonExt_r13 = commTxPoolNormalCommonExt_r13_;
      commTxResourceUC_ReqAllowed_r13 = commTxResourceUC_ReqAllowed_r13_;
      commTxAllowRelayCommon_r13 = commTxAllowRelayCommon_r13_;
   }

   public void init () {
      commConfig_r12 = null;
      lateNonCriticalExtension = null;
      commTxPoolNormalCommonExt_r13 = null;
      commTxResourceUC_ReqAllowed_r13 = null;
      commTxAllowRelayCommon_r13 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return commConfig_r12;
         case 1: return lateNonCriticalExtension;
         case 2: return commTxPoolNormalCommonExt_r13;
         case 3: return commTxResourceUC_ReqAllowed_r13;
         case 4: return commTxAllowRelayCommon_r13;
         case 5: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "commConfig-r12";
         case 1: return "lateNonCriticalExtension";
         case 2: return "commTxPoolNormalCommonExt-r13";
         case 3: return "commTxResourceUC-ReqAllowed-r13";
         case 4: return "commTxAllowRelayCommon-r13";
         case 5: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean commConfig_r12Present = buffer.decodeBit ("commConfig_r12Present");
      boolean lateNonCriticalExtensionPresent = buffer.decodeBit ("lateNonCriticalExtensionPresent");

      // decode commConfig_r12

      if (commConfig_r12Present) {
         buffer.getContext().eventDispatcher.startElement("commConfig_r12", -1);

         commConfig_r12 = new SystemInformationBlockType18_r12_commConfig_r12();
         commConfig_r12.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("commConfig_r12", -1);
      }
      else {
         commConfig_r12 = null;
      }

      // decode lateNonCriticalExtension

      if (lateNonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("lateNonCriticalExtension", -1);

         lateNonCriticalExtension = new Asn1OctetString();
         lateNonCriticalExtension.decode (buffer);

         buffer.invokeCharacters(lateNonCriticalExtension.toString());
         buffer.getContext().eventDispatcher.endElement("lateNonCriticalExtension", -1);
      }
      else {
         lateNonCriticalExtension = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean commTxPoolNormalCommonExt_r13Present = buffer.decodeBit ("commTxPoolNormalCommonExt_r13Present");

            boolean commTxResourceUC_ReqAllowed_r13Present = buffer.decodeBit ("commTxResourceUC_ReqAllowed_r13Present");

            boolean commTxAllowRelayCommon_r13Present = buffer.decodeBit ("commTxAllowRelayCommon_r13Present");

            // decode commTxPoolNormalCommonExt_r13

            if (commTxPoolNormalCommonExt_r13Present) {
               buffer.getContext().eventDispatcher.startElement("commTxPoolNormalCommonExt_r13", -1);

               commTxPoolNormalCommonExt_r13 = new SL_CommTxPoolListExt_r13();
               commTxPoolNormalCommonExt_r13.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("commTxPoolNormalCommonExt_r13", -1);
            }
            else {
               commTxPoolNormalCommonExt_r13 = null;
            }

            // decode commTxResourceUC_ReqAllowed_r13

            if (commTxResourceUC_ReqAllowed_r13Present) {
               buffer.getContext().eventDispatcher.startElement("commTxResourceUC_ReqAllowed_r13", -1);

               int tval = SystemInformationBlockType18_r12_commTxResourceUC_ReqAllowed_r13.decodeEnumValue (buffer);
               commTxResourceUC_ReqAllowed_r13 = SystemInformationBlockType18_r12_commTxResourceUC_ReqAllowed_r13.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("commTxResourceUC_ReqAllowed_r13", -1);
            }
            else {
               commTxResourceUC_ReqAllowed_r13 = null;
            }

            // decode commTxAllowRelayCommon_r13

            if (commTxAllowRelayCommon_r13Present) {
               buffer.getContext().eventDispatcher.startElement("commTxAllowRelayCommon_r13", -1);

               int tval = SystemInformationBlockType18_r12_commTxAllowRelayCommon_r13.decodeEnumValue (buffer);
               commTxAllowRelayCommon_r13 = SystemInformationBlockType18_r12_commTxAllowRelayCommon_r13.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("commTxAllowRelayCommon_r13", -1);
            }
            else {
               commTxAllowRelayCommon_r13 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (commConfig_r12 != null) commConfig_r12.print (_sb, "commConfig_r12", _level+1);
      if (lateNonCriticalExtension != null) lateNonCriticalExtension.print (_sb, "lateNonCriticalExtension", _level+1);
      if (commTxPoolNormalCommonExt_r13 != null) commTxPoolNormalCommonExt_r13.print (_sb, "commTxPoolNormalCommonExt_r13", _level+1);
      if (commTxResourceUC_ReqAllowed_r13 != null) commTxResourceUC_ReqAllowed_r13.print (_sb, "commTxResourceUC_ReqAllowed_r13", _level+1);
      if (commTxAllowRelayCommon_r13 != null) commTxAllowRelayCommon_r13.print (_sb, "commTxAllowRelayCommon_r13", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
