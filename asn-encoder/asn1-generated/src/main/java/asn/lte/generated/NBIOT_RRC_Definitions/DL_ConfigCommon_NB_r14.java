/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NBIOT_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class DL_ConfigCommon_NB_r14 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NBIOT_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "DL-ConfigCommon-NB-r14";
   }

   public DL_CarrierConfigCommon_NB_r14 dl_CarrierConfig_r14;
   public PCCH_Config_NB_r14 pcch_Config_r14;  // optional
   public boolean mV2ExtPresent;
   public WUS_ConfigPerCarrier_NB_r15 wus_Config_r15;  // optional
   public Asn1OpenExt extElem1;

   public DL_ConfigCommon_NB_r14 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public DL_ConfigCommon_NB_r14 (
      DL_CarrierConfigCommon_NB_r14 dl_CarrierConfig_r14_,
      PCCH_Config_NB_r14 pcch_Config_r14_,
      WUS_ConfigPerCarrier_NB_r15 wus_Config_r15_
   ) {
      super();
      dl_CarrierConfig_r14 = dl_CarrierConfig_r14_;
      pcch_Config_r14 = pcch_Config_r14_;
      wus_Config_r15 = wus_Config_r15_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public DL_ConfigCommon_NB_r14 (
      DL_CarrierConfigCommon_NB_r14 dl_CarrierConfig_r14_
   ) {
      super();
      dl_CarrierConfig_r14 = dl_CarrierConfig_r14_;
   }

   public void init () {
      dl_CarrierConfig_r14 = null;
      pcch_Config_r14 = null;
      wus_Config_r15 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return dl_CarrierConfig_r14;
         case 1: return pcch_Config_r14;
         case 2: return wus_Config_r15;
         case 3: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "dl-CarrierConfig-r14";
         case 1: return "pcch-Config-r14";
         case 2: return "wus-Config-r15";
         case 3: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean pcch_Config_r14Present = buffer.decodeBit ("pcch_Config_r14Present");

      // decode dl_CarrierConfig_r14

      buffer.getContext().eventDispatcher.startElement("dl_CarrierConfig_r14", -1);

      dl_CarrierConfig_r14 = new DL_CarrierConfigCommon_NB_r14();
      dl_CarrierConfig_r14.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("dl_CarrierConfig_r14", -1);

      // decode pcch_Config_r14

      if (pcch_Config_r14Present) {
         buffer.getContext().eventDispatcher.startElement("pcch_Config_r14", -1);

         pcch_Config_r14 = new PCCH_Config_NB_r14();
         pcch_Config_r14.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("pcch_Config_r14", -1);
      }
      else {
         pcch_Config_r14 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean wus_Config_r15Present = buffer.decodeBit ("wus_Config_r15Present");

            // decode wus_Config_r15

            if (wus_Config_r15Present) {
               buffer.getContext().eventDispatcher.startElement("wus_Config_r15", -1);

               wus_Config_r15 = new WUS_ConfigPerCarrier_NB_r15();
               wus_Config_r15.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("wus_Config_r15", -1);
            }
            else {
               wus_Config_r15 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (dl_CarrierConfig_r14 != null) dl_CarrierConfig_r14.print (_sb, "dl_CarrierConfig_r14", _level+1);
      if (pcch_Config_r14 != null) pcch_Config_r14.print (_sb, "pcch_Config_r14", _level+1);
      if (wus_Config_r15 != null) wus_Config_r15.print (_sb, "wus_Config_r15", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
