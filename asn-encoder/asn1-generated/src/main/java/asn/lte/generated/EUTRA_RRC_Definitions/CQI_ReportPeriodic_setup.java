/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class CQI_ReportPeriodic_setup extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public Asn1Integer cqi_PUCCH_ResourceIndex;
   public Asn1Integer cqi_pmi_ConfigIndex;
   public CQI_ReportPeriodic_setup_cqi_FormatIndicatorPeriodic cqi_FormatIndicatorPeriodic;
   public Asn1Integer ri_ConfigIndex;  // optional
   public Asn1Boolean simultaneousAckNackAndCQI;

   public CQI_ReportPeriodic_setup () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CQI_ReportPeriodic_setup (
      Asn1Integer cqi_PUCCH_ResourceIndex_,
      Asn1Integer cqi_pmi_ConfigIndex_,
      CQI_ReportPeriodic_setup_cqi_FormatIndicatorPeriodic cqi_FormatIndicatorPeriodic_,
      Asn1Integer ri_ConfigIndex_,
      Asn1Boolean simultaneousAckNackAndCQI_
   ) {
      super();
      cqi_PUCCH_ResourceIndex = cqi_PUCCH_ResourceIndex_;
      cqi_pmi_ConfigIndex = cqi_pmi_ConfigIndex_;
      cqi_FormatIndicatorPeriodic = cqi_FormatIndicatorPeriodic_;
      ri_ConfigIndex = ri_ConfigIndex_;
      simultaneousAckNackAndCQI = simultaneousAckNackAndCQI_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public CQI_ReportPeriodic_setup (
      Asn1Integer cqi_PUCCH_ResourceIndex_,
      Asn1Integer cqi_pmi_ConfigIndex_,
      CQI_ReportPeriodic_setup_cqi_FormatIndicatorPeriodic cqi_FormatIndicatorPeriodic_,
      Asn1Boolean simultaneousAckNackAndCQI_
   ) {
      super();
      cqi_PUCCH_ResourceIndex = cqi_PUCCH_ResourceIndex_;
      cqi_pmi_ConfigIndex = cqi_pmi_ConfigIndex_;
      cqi_FormatIndicatorPeriodic = cqi_FormatIndicatorPeriodic_;
      simultaneousAckNackAndCQI = simultaneousAckNackAndCQI_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public CQI_ReportPeriodic_setup (long cqi_PUCCH_ResourceIndex_,
      long cqi_pmi_ConfigIndex_,
      CQI_ReportPeriodic_setup_cqi_FormatIndicatorPeriodic cqi_FormatIndicatorPeriodic_,
      long ri_ConfigIndex_,
      boolean simultaneousAckNackAndCQI_
   ) {
      super();
      cqi_PUCCH_ResourceIndex = new Asn1Integer (cqi_PUCCH_ResourceIndex_);
      cqi_pmi_ConfigIndex = new Asn1Integer (cqi_pmi_ConfigIndex_);
      cqi_FormatIndicatorPeriodic = cqi_FormatIndicatorPeriodic_;
      ri_ConfigIndex = new Asn1Integer (ri_ConfigIndex_);
      simultaneousAckNackAndCQI = new Asn1Boolean (simultaneousAckNackAndCQI_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public CQI_ReportPeriodic_setup (
      long cqi_PUCCH_ResourceIndex_,
      long cqi_pmi_ConfigIndex_,
      CQI_ReportPeriodic_setup_cqi_FormatIndicatorPeriodic cqi_FormatIndicatorPeriodic_,
      boolean simultaneousAckNackAndCQI_
   ) {
      super();
      cqi_PUCCH_ResourceIndex = new Asn1Integer (cqi_PUCCH_ResourceIndex_);
      cqi_pmi_ConfigIndex = new Asn1Integer (cqi_pmi_ConfigIndex_);
      cqi_FormatIndicatorPeriodic = cqi_FormatIndicatorPeriodic_;
      simultaneousAckNackAndCQI = new Asn1Boolean (simultaneousAckNackAndCQI_);
   }

   public void init () {
      cqi_PUCCH_ResourceIndex = null;
      cqi_pmi_ConfigIndex = null;
      cqi_FormatIndicatorPeriodic = null;
      ri_ConfigIndex = null;
      simultaneousAckNackAndCQI = null;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return cqi_PUCCH_ResourceIndex;
         case 1: return cqi_pmi_ConfigIndex;
         case 2: return cqi_FormatIndicatorPeriodic;
         case 3: return ri_ConfigIndex;
         case 4: return simultaneousAckNackAndCQI;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "cqi-PUCCH-ResourceIndex";
         case 1: return "cqi-pmi-ConfigIndex";
         case 2: return "cqi-FormatIndicatorPeriodic";
         case 3: return "ri-ConfigIndex";
         case 4: return "simultaneousAckNackAndCQI";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean ri_ConfigIndexPresent = buffer.decodeBit ("ri_ConfigIndexPresent");

      // decode cqi_PUCCH_ResourceIndex

      buffer.getContext().eventDispatcher.startElement("cqi_PUCCH_ResourceIndex", -1);

      cqi_PUCCH_ResourceIndex = new Asn1Integer();
      cqi_PUCCH_ResourceIndex.decode (buffer, 0, 1185);

      buffer.invokeCharacters(cqi_PUCCH_ResourceIndex.toString());
      buffer.getContext().eventDispatcher.endElement("cqi_PUCCH_ResourceIndex", -1);

      // decode cqi_pmi_ConfigIndex

      buffer.getContext().eventDispatcher.startElement("cqi_pmi_ConfigIndex", -1);

      cqi_pmi_ConfigIndex = new Asn1Integer();
      cqi_pmi_ConfigIndex.decode (buffer, 0, 1023);

      buffer.invokeCharacters(cqi_pmi_ConfigIndex.toString());
      buffer.getContext().eventDispatcher.endElement("cqi_pmi_ConfigIndex", -1);

      // decode cqi_FormatIndicatorPeriodic

      buffer.getContext().eventDispatcher.startElement("cqi_FormatIndicatorPeriodic", -1);

      cqi_FormatIndicatorPeriodic = new CQI_ReportPeriodic_setup_cqi_FormatIndicatorPeriodic();
      cqi_FormatIndicatorPeriodic.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("cqi_FormatIndicatorPeriodic", -1);

      // decode ri_ConfigIndex

      if (ri_ConfigIndexPresent) {
         buffer.getContext().eventDispatcher.startElement("ri_ConfigIndex", -1);

         ri_ConfigIndex = new Asn1Integer();
         ri_ConfigIndex.decode (buffer, 0, 1023);

         buffer.invokeCharacters(ri_ConfigIndex.toString());
         buffer.getContext().eventDispatcher.endElement("ri_ConfigIndex", -1);
      }
      else {
         ri_ConfigIndex = null;
      }

      // decode simultaneousAckNackAndCQI

      buffer.getContext().eventDispatcher.startElement("simultaneousAckNackAndCQI", -1);

      simultaneousAckNackAndCQI = new Asn1Boolean();
      simultaneousAckNackAndCQI.decode (buffer);

      buffer.invokeCharacters(simultaneousAckNackAndCQI.toString());
      buffer.getContext().eventDispatcher.endElement("simultaneousAckNackAndCQI", -1);

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (cqi_PUCCH_ResourceIndex != null) cqi_PUCCH_ResourceIndex.print (_sb, "cqi_PUCCH_ResourceIndex", _level+1);
      if (cqi_pmi_ConfigIndex != null) cqi_pmi_ConfigIndex.print (_sb, "cqi_pmi_ConfigIndex", _level+1);
      if (cqi_FormatIndicatorPeriodic != null) cqi_FormatIndicatorPeriodic.print (_sb, "cqi_FormatIndicatorPeriodic", _level+1);
      if (ri_ConfigIndex != null) ri_ConfigIndex.print (_sb, "ri_ConfigIndex", _level+1);
      if (simultaneousAckNackAndCQI != null) simultaneousAckNackAndCQI.print (_sb, "simultaneousAckNackAndCQI", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
