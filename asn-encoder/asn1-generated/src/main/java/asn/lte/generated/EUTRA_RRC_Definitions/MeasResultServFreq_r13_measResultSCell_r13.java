/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MeasResultServFreq_r13_measResultSCell_r13 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public RSRP_Range rsrpResultSCell_r13;
   public RSRQ_Range_r13 rsrqResultSCell_r13;
   public RS_SINR_Range_r13 rs_sinr_Result_r13;  // optional

   public MeasResultServFreq_r13_measResultSCell_r13 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MeasResultServFreq_r13_measResultSCell_r13 (
      RSRP_Range rsrpResultSCell_r13_,
      RSRQ_Range_r13 rsrqResultSCell_r13_,
      RS_SINR_Range_r13 rs_sinr_Result_r13_
   ) {
      super();
      rsrpResultSCell_r13 = rsrpResultSCell_r13_;
      rsrqResultSCell_r13 = rsrqResultSCell_r13_;
      rs_sinr_Result_r13 = rs_sinr_Result_r13_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public MeasResultServFreq_r13_measResultSCell_r13 (
      RSRP_Range rsrpResultSCell_r13_,
      RSRQ_Range_r13 rsrqResultSCell_r13_
   ) {
      super();
      rsrpResultSCell_r13 = rsrpResultSCell_r13_;
      rsrqResultSCell_r13 = rsrqResultSCell_r13_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public MeasResultServFreq_r13_measResultSCell_r13 (long rsrpResultSCell_r13_,
      long rsrqResultSCell_r13_,
      long rs_sinr_Result_r13_
   ) {
      super();
      rsrpResultSCell_r13 = new RSRP_Range (rsrpResultSCell_r13_);
      rsrqResultSCell_r13 = new RSRQ_Range_r13 (rsrqResultSCell_r13_);
      rs_sinr_Result_r13 = new RS_SINR_Range_r13 (rs_sinr_Result_r13_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public MeasResultServFreq_r13_measResultSCell_r13 (
      long rsrpResultSCell_r13_,
      long rsrqResultSCell_r13_
   ) {
      super();
      rsrpResultSCell_r13 = new RSRP_Range (rsrpResultSCell_r13_);
      rsrqResultSCell_r13 = new RSRQ_Range_r13 (rsrqResultSCell_r13_);
   }

   public void init () {
      rsrpResultSCell_r13 = null;
      rsrqResultSCell_r13 = null;
      rs_sinr_Result_r13 = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return rsrpResultSCell_r13;
         case 1: return rsrqResultSCell_r13;
         case 2: return rs_sinr_Result_r13;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "rsrpResultSCell-r13";
         case 1: return "rsrqResultSCell-r13";
         case 2: return "rs-sinr-Result-r13";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean rs_sinr_Result_r13Present = buffer.decodeBit ("rs_sinr_Result_r13Present");

      // decode rsrpResultSCell_r13

      buffer.getContext().eventDispatcher.startElement("rsrpResultSCell_r13", -1);

      rsrpResultSCell_r13 = new RSRP_Range();
      rsrpResultSCell_r13.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("rsrpResultSCell_r13", -1);

      // decode rsrqResultSCell_r13

      buffer.getContext().eventDispatcher.startElement("rsrqResultSCell_r13", -1);

      rsrqResultSCell_r13 = new RSRQ_Range_r13();
      rsrqResultSCell_r13.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("rsrqResultSCell_r13", -1);

      // decode rs_sinr_Result_r13

      if (rs_sinr_Result_r13Present) {
         buffer.getContext().eventDispatcher.startElement("rs_sinr_Result_r13", -1);

         rs_sinr_Result_r13 = new RS_SINR_Range_r13();
         rs_sinr_Result_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("rs_sinr_Result_r13", -1);
      }
      else {
         rs_sinr_Result_r13 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (rsrpResultSCell_r13 != null) rsrpResultSCell_r13.print (_sb, "rsrpResultSCell_r13", _level+1);
      if (rsrqResultSCell_r13 != null) rsrqResultSCell_r13.print (_sb, "rsrqResultSCell_r13", _level+1);
      if (rs_sinr_Result_r13 != null) rs_sinr_Result_r13.print (_sb, "rs_sinr_Result_r13", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
