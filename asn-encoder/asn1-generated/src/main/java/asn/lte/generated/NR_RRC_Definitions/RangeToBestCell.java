/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class RangeToBestCell extends Q_OffsetRange {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "RangeToBestCell";
   }

   // Integer constants for switch-case
   public static final int _DB_24 = 0;
   public static final int _DB_22 = 1;
   public static final int _DB_20 = 2;
   public static final int _DB_18 = 3;
   public static final int _DB_16 = 4;
   public static final int _DB_14 = 5;
   public static final int _DB_12 = 6;
   public static final int _DB_10 = 7;
   public static final int _DB_8 = 8;
   public static final int _DB_6 = 9;
   public static final int _DB_5 = 10;
   public static final int _DB_4 = 11;
   public static final int _DB_3 = 12;
   public static final int _DB_2 = 13;
   public static final int _DB_1 = 14;
   public static final int _DB0 = 15;
   public static final int _DB1 = 16;
   public static final int _DB2 = 17;
   public static final int _DB3 = 18;
   public static final int _DB4 = 19;
   public static final int _DB5 = 20;
   public static final int _DB6 = 21;
   public static final int _DB8 = 22;
   public static final int _DB10 = 23;
   public static final int _DB12 = 24;
   public static final int _DB14 = 25;
   public static final int _DB16 = 26;
   public static final int _DB18 = 27;
   public static final int _DB20 = 28;
   public static final int _DB22 = 29;
   public static final int _DB24 = 30;

   // Singleton instances of RangeToBestCell
   protected static final RangeToBestCell _dB_24 = new RangeToBestCell(0);
   protected static final RangeToBestCell _dB_22 = new RangeToBestCell(1);
   protected static final RangeToBestCell _dB_20 = new RangeToBestCell(2);
   protected static final RangeToBestCell _dB_18 = new RangeToBestCell(3);
   protected static final RangeToBestCell _dB_16 = new RangeToBestCell(4);
   protected static final RangeToBestCell _dB_14 = new RangeToBestCell(5);
   protected static final RangeToBestCell _dB_12 = new RangeToBestCell(6);
   protected static final RangeToBestCell _dB_10 = new RangeToBestCell(7);
   protected static final RangeToBestCell _dB_8 = new RangeToBestCell(8);
   protected static final RangeToBestCell _dB_6 = new RangeToBestCell(9);
   protected static final RangeToBestCell _dB_5 = new RangeToBestCell(10);
   protected static final RangeToBestCell _dB_4 = new RangeToBestCell(11);
   protected static final RangeToBestCell _dB_3 = new RangeToBestCell(12);
   protected static final RangeToBestCell _dB_2 = new RangeToBestCell(13);
   protected static final RangeToBestCell _dB_1 = new RangeToBestCell(14);
   protected static final RangeToBestCell _dB0 = new RangeToBestCell(15);
   protected static final RangeToBestCell _dB1 = new RangeToBestCell(16);
   protected static final RangeToBestCell _dB2 = new RangeToBestCell(17);
   protected static final RangeToBestCell _dB3 = new RangeToBestCell(18);
   protected static final RangeToBestCell _dB4 = new RangeToBestCell(19);
   protected static final RangeToBestCell _dB5 = new RangeToBestCell(20);
   protected static final RangeToBestCell _dB6 = new RangeToBestCell(21);
   protected static final RangeToBestCell _dB8 = new RangeToBestCell(22);
   protected static final RangeToBestCell _dB10 = new RangeToBestCell(23);
   protected static final RangeToBestCell _dB12 = new RangeToBestCell(24);
   protected static final RangeToBestCell _dB14 = new RangeToBestCell(25);
   protected static final RangeToBestCell _dB16 = new RangeToBestCell(26);
   protected static final RangeToBestCell _dB18 = new RangeToBestCell(27);
   protected static final RangeToBestCell _dB20 = new RangeToBestCell(28);
   protected static final RangeToBestCell _dB22 = new RangeToBestCell(29);
   protected static final RangeToBestCell _dB24 = new RangeToBestCell(30);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    *   7
    *   8
    *   9
    *   10
    *   11
    *   12
    *   13
    *   14
    *   15
    *   16
    *   17
    *   18
    *   19
    *   20
    *   21
    *   22
    *   23
    *   24
    *   25
    *   26
    *   27
    *   28
    *   29
    *   30
    */
   protected RangeToBestCell (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for dB_24.
    */
   public static RangeToBestCell dB_24() {
      return _dB_24;
   }

   /**
    * Singleton accessor method for dB_22.
    */
   public static RangeToBestCell dB_22() {
      return _dB_22;
   }

   /**
    * Singleton accessor method for dB_20.
    */
   public static RangeToBestCell dB_20() {
      return _dB_20;
   }

   /**
    * Singleton accessor method for dB_18.
    */
   public static RangeToBestCell dB_18() {
      return _dB_18;
   }

   /**
    * Singleton accessor method for dB_16.
    */
   public static RangeToBestCell dB_16() {
      return _dB_16;
   }

   /**
    * Singleton accessor method for dB_14.
    */
   public static RangeToBestCell dB_14() {
      return _dB_14;
   }

   /**
    * Singleton accessor method for dB_12.
    */
   public static RangeToBestCell dB_12() {
      return _dB_12;
   }

   /**
    * Singleton accessor method for dB_10.
    */
   public static RangeToBestCell dB_10() {
      return _dB_10;
   }

   /**
    * Singleton accessor method for dB_8.
    */
   public static RangeToBestCell dB_8() {
      return _dB_8;
   }

   /**
    * Singleton accessor method for dB_6.
    */
   public static RangeToBestCell dB_6() {
      return _dB_6;
   }

   /**
    * Singleton accessor method for dB_5.
    */
   public static RangeToBestCell dB_5() {
      return _dB_5;
   }

   /**
    * Singleton accessor method for dB_4.
    */
   public static RangeToBestCell dB_4() {
      return _dB_4;
   }

   /**
    * Singleton accessor method for dB_3.
    */
   public static RangeToBestCell dB_3() {
      return _dB_3;
   }

   /**
    * Singleton accessor method for dB_2.
    */
   public static RangeToBestCell dB_2() {
      return _dB_2;
   }

   /**
    * Singleton accessor method for dB_1.
    */
   public static RangeToBestCell dB_1() {
      return _dB_1;
   }

   /**
    * Singleton accessor method for dB0.
    */
   public static RangeToBestCell dB0() {
      return _dB0;
   }

   /**
    * Singleton accessor method for dB1.
    */
   public static RangeToBestCell dB1() {
      return _dB1;
   }

   /**
    * Singleton accessor method for dB2.
    */
   public static RangeToBestCell dB2() {
      return _dB2;
   }

   /**
    * Singleton accessor method for dB3.
    */
   public static RangeToBestCell dB3() {
      return _dB3;
   }

   /**
    * Singleton accessor method for dB4.
    */
   public static RangeToBestCell dB4() {
      return _dB4;
   }

   /**
    * Singleton accessor method for dB5.
    */
   public static RangeToBestCell dB5() {
      return _dB5;
   }

   /**
    * Singleton accessor method for dB6.
    */
   public static RangeToBestCell dB6() {
      return _dB6;
   }

   /**
    * Singleton accessor method for dB8.
    */
   public static RangeToBestCell dB8() {
      return _dB8;
   }

   /**
    * Singleton accessor method for dB10.
    */
   public static RangeToBestCell dB10() {
      return _dB10;
   }

   /**
    * Singleton accessor method for dB12.
    */
   public static RangeToBestCell dB12() {
      return _dB12;
   }

   /**
    * Singleton accessor method for dB14.
    */
   public static RangeToBestCell dB14() {
      return _dB14;
   }

   /**
    * Singleton accessor method for dB16.
    */
   public static RangeToBestCell dB16() {
      return _dB16;
   }

   /**
    * Singleton accessor method for dB18.
    */
   public static RangeToBestCell dB18() {
      return _dB18;
   }

   /**
    * Singleton accessor method for dB20.
    */
   public static RangeToBestCell dB20() {
      return _dB20;
   }

   /**
    * Singleton accessor method for dB22.
    */
   public static RangeToBestCell dB22() {
      return _dB22;
   }

   /**
    * Singleton accessor method for dB24.
    */
   public static RangeToBestCell dB24() {
      return _dB24;
   }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return RangeToBestCell.valueOf( RangeToBestCell.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static RangeToBestCell valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 0: return dB_24();
         case 1: return dB_22();
         case 2: return dB_20();
         case 3: return dB_18();
         case 4: return dB_16();
         case 5: return dB_14();
         case 6: return dB_12();
         case 7: return dB_10();
         case 8: return dB_8();
         case 9: return dB_6();
         case 10: return dB_5();
         case 11: return dB_4();
         case 12: return dB_3();
         case 13: return dB_2();
         case 14: return dB_1();
         case 15: return dB0();
         case 16: return dB1();
         case 17: return dB2();
         case 18: return dB3();
         case 19: return dB4();
         case 20: return dB5();
         case 21: return dB6();
         case 22: return dB8();
         case 23: return dB10();
         case 24: return dB12();
         case 25: return dB14();
         case 26: return dB16();
         case 27: return dB18();
         case 28: return dB20();
         case 29: return dB22();
         case 30: return dB24();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }


}
