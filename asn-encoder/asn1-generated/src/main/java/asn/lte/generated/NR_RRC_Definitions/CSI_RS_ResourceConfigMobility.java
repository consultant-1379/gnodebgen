/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class CSI_RS_ResourceConfigMobility extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CSI-RS-ResourceConfigMobility";
   }

   public SubcarrierSpacing subcarrierSpacing = null;
   public CSI_RS_ResourceConfigMobility_csi_RS_CellList_Mobility csi_RS_CellList_Mobility;
   public boolean mV2ExtPresent;
   public ServCellIndex refServCellIndex;  // optional
   public Asn1OpenExt extElem1;

   public CSI_RS_ResourceConfigMobility () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CSI_RS_ResourceConfigMobility (
      SubcarrierSpacing subcarrierSpacing_,
      CSI_RS_ResourceConfigMobility_csi_RS_CellList_Mobility csi_RS_CellList_Mobility_,
      ServCellIndex refServCellIndex_
   ) {
      super();
      subcarrierSpacing = subcarrierSpacing_;
      csi_RS_CellList_Mobility = csi_RS_CellList_Mobility_;
      refServCellIndex = refServCellIndex_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public CSI_RS_ResourceConfigMobility (
      SubcarrierSpacing subcarrierSpacing_,
      CSI_RS_ResourceConfigMobility_csi_RS_CellList_Mobility csi_RS_CellList_Mobility_
   ) {
      super();
      subcarrierSpacing = subcarrierSpacing_;
      csi_RS_CellList_Mobility = csi_RS_CellList_Mobility_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public CSI_RS_ResourceConfigMobility (SubcarrierSpacing subcarrierSpacing_,
      CSI_RS_ResourceConfigMobility_csi_RS_CellList_Mobility csi_RS_CellList_Mobility_,
      long refServCellIndex_
   ) {
      super();
      subcarrierSpacing = subcarrierSpacing_;
      csi_RS_CellList_Mobility = csi_RS_CellList_Mobility_;
      refServCellIndex = new ServCellIndex (refServCellIndex_);
   }

   public void init () {
      subcarrierSpacing = null;
      csi_RS_CellList_Mobility = null;
      refServCellIndex = null;
      extElem1 = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return subcarrierSpacing;
         case 1: return csi_RS_CellList_Mobility;
         case 2: return refServCellIndex;
         case 3: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "subcarrierSpacing";
         case 1: return "csi-RS-CellList-Mobility";
         case 2: return "refServCellIndex";
         case 3: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      // decode subcarrierSpacing

      buffer.getContext().eventDispatcher.startElement("subcarrierSpacing", -1);

      {
         int tval = SubcarrierSpacing.decodeEnumValue (buffer);
         subcarrierSpacing = SubcarrierSpacing.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("subcarrierSpacing", -1);

      // decode csi_RS_CellList_Mobility

      buffer.getContext().eventDispatcher.startElement("csi_RS_CellList_Mobility", -1);

      csi_RS_CellList_Mobility = new CSI_RS_ResourceConfigMobility_csi_RS_CellList_Mobility();
      csi_RS_CellList_Mobility.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("csi_RS_CellList_Mobility", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean refServCellIndexPresent = buffer.decodeBit ("refServCellIndexPresent");

            // decode refServCellIndex

            if (refServCellIndexPresent) {
               buffer.getContext().eventDispatcher.startElement("refServCellIndex", -1);

               refServCellIndex = new ServCellIndex();
               refServCellIndex.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("refServCellIndex", -1);
            }
            else {
               refServCellIndex = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (subcarrierSpacing != null) subcarrierSpacing.print (_sb, "subcarrierSpacing", _level+1);
      if (csi_RS_CellList_Mobility != null) csi_RS_CellList_Mobility.print (_sb, "csi_RS_CellList_Mobility", _level+1);
      if (refServCellIndex != null) refServCellIndex.print (_sb, "refServCellIndex", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
