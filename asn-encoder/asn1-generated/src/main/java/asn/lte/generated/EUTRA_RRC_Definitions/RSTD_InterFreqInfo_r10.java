/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class RSTD_InterFreqInfo_r10 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "RSTD-InterFreqInfo-r10";
   }

   public ARFCN_ValueEUTRA carrierFreq_r10;
   public Asn1Integer measPRS_Offset_r10;
   public boolean mV2ExtPresent;
   public ARFCN_ValueEUTRA_v9e0 carrierFreq_v1090;  // optional
   public boolean mV3ExtPresent;
   public RSTD_InterFreqInfo_r10_measPRS_Offset_r15 measPRS_Offset_r15;  // optional
   public Asn1OpenExt extElem1;

   public RSTD_InterFreqInfo_r10 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public RSTD_InterFreqInfo_r10 (
      ARFCN_ValueEUTRA carrierFreq_r10_,
      Asn1Integer measPRS_Offset_r10_,
      ARFCN_ValueEUTRA_v9e0 carrierFreq_v1090_,
      RSTD_InterFreqInfo_r10_measPRS_Offset_r15 measPRS_Offset_r15_
   ) {
      super();
      carrierFreq_r10 = carrierFreq_r10_;
      measPRS_Offset_r10 = measPRS_Offset_r10_;
      carrierFreq_v1090 = carrierFreq_v1090_;
      measPRS_Offset_r15 = measPRS_Offset_r15_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public RSTD_InterFreqInfo_r10 (
      ARFCN_ValueEUTRA carrierFreq_r10_,
      Asn1Integer measPRS_Offset_r10_
   ) {
      super();
      carrierFreq_r10 = carrierFreq_r10_;
      measPRS_Offset_r10 = measPRS_Offset_r10_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public RSTD_InterFreqInfo_r10 (long carrierFreq_r10_,
      long measPRS_Offset_r10_,
      long carrierFreq_v1090_,
      RSTD_InterFreqInfo_r10_measPRS_Offset_r15 measPRS_Offset_r15_
   ) {
      super();
      carrierFreq_r10 = new ARFCN_ValueEUTRA (carrierFreq_r10_);
      measPRS_Offset_r10 = new Asn1Integer (measPRS_Offset_r10_);
      carrierFreq_v1090 = new ARFCN_ValueEUTRA_v9e0 (carrierFreq_v1090_);
      measPRS_Offset_r15 = measPRS_Offset_r15_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public RSTD_InterFreqInfo_r10 (
      long carrierFreq_r10_,
      long measPRS_Offset_r10_
   ) {
      super();
      carrierFreq_r10 = new ARFCN_ValueEUTRA (carrierFreq_r10_);
      measPRS_Offset_r10 = new Asn1Integer (measPRS_Offset_r10_);
   }

   public void init () {
      carrierFreq_r10 = null;
      measPRS_Offset_r10 = null;
      carrierFreq_v1090 = null;
      measPRS_Offset_r15 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return carrierFreq_r10;
         case 1: return measPRS_Offset_r10;
         case 2: return carrierFreq_v1090;
         case 3: return measPRS_Offset_r15;
         case 4: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "carrierFreq-r10";
         case 1: return "measPRS-Offset-r10";
         case 2: return "carrierFreq-v1090";
         case 3: return "measPRS-Offset-r15";
         case 4: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      // decode carrierFreq_r10

      buffer.getContext().eventDispatcher.startElement("carrierFreq_r10", -1);

      carrierFreq_r10 = new ARFCN_ValueEUTRA();
      carrierFreq_r10.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("carrierFreq_r10", -1);

      // decode measPRS_Offset_r10

      buffer.getContext().eventDispatcher.startElement("measPRS_Offset_r10", -1);

      measPRS_Offset_r10 = new Asn1Integer();
      measPRS_Offset_r10.decode (buffer, 0, 39);

      buffer.invokeCharacters(measPRS_Offset_r10.toString());
      buffer.getContext().eventDispatcher.endElement("measPRS_Offset_r10", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean carrierFreq_v1090Present = buffer.decodeBit ("carrierFreq_v1090Present");

            // decode carrierFreq_v1090

            if (carrierFreq_v1090Present) {
               buffer.getContext().eventDispatcher.startElement("carrierFreq_v1090", -1);

               carrierFreq_v1090 = new ARFCN_ValueEUTRA_v9e0();
               carrierFreq_v1090.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("carrierFreq_v1090", -1);
            }
            else {
               carrierFreq_v1090 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean measPRS_Offset_r15Present = buffer.decodeBit ("measPRS_Offset_r15Present");

            // decode measPRS_Offset_r15

            if (measPRS_Offset_r15Present) {
               buffer.getContext().eventDispatcher.startElement("measPRS_Offset_r15", -1);

               measPRS_Offset_r15 = new RSTD_InterFreqInfo_r10_measPRS_Offset_r15();
               measPRS_Offset_r15.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("measPRS_Offset_r15", -1);
            }
            else {
               measPRS_Offset_r15 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (carrierFreq_r10 != null) carrierFreq_r10.print (_sb, "carrierFreq_r10", _level+1);
      if (measPRS_Offset_r10 != null) measPRS_Offset_r10.print (_sb, "measPRS_Offset_r10", _level+1);
      if (carrierFreq_v1090 != null) carrierFreq_v1090.print (_sb, "carrierFreq_v1090", _level+1);
      if (measPRS_Offset_r15 != null) measPRS_Offset_r15.print (_sb, "measPRS_Offset_r15", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
