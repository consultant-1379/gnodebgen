/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SharedSpectrumChAccessParamsPerBand_r16 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SharedSpectrumChAccessParamsPerBand-r16";
   }

   public SharedSpectrumChAccessParamsPerBand_r16_ul_DynamicChAccess_r16 ul_DynamicChAccess_r16 = null;  // optional
   public SharedSpectrumChAccessParamsPerBand_r16_ul_Semi_StaticChAccess_r16 ul_Semi_StaticChAccess_r16 = null;  // optional
   public SharedSpectrumChAccessParamsPerBand_r16_ssb_RRM_DynamicChAccess_r16 ssb_RRM_DynamicChAccess_r16 = null;  // optional
   public SharedSpectrumChAccessParamsPerBand_r16_ssb_RRM_Semi_StaticChAccess_r16 ssb_RRM_Semi_StaticChAccess_r16 = null;  // optional
   public SharedSpectrumChAccessParamsPerBand_r16_mib_Acquisition_r16 mib_Acquisition_r16 = null;  // optional
   public SharedSpectrumChAccessParamsPerBand_r16_ssb_RLM_DynamicChAccess_r16 ssb_RLM_DynamicChAccess_r16 = null;  // optional
   public SharedSpectrumChAccessParamsPerBand_r16_ssb_RLM_Semi_StaticChAccess_r16 ssb_RLM_Semi_StaticChAccess_r16 = null;  // optional
   public SharedSpectrumChAccessParamsPerBand_r16_sib1_Acquisition_r16 sib1_Acquisition_r16 = null;  // optional
   public SharedSpectrumChAccessParamsPerBand_r16_extRA_ResponseWindow_r16 extRA_ResponseWindow_r16 = null;  // optional
   public SharedSpectrumChAccessParamsPerBand_r16_ssb_BFD_CBD_dynamicChannelAccess_r16 ssb_BFD_CBD_dynamicChannelAccess_r16 = null;  // optional
   public SharedSpectrumChAccessParamsPerBand_r16_ssb_BFD_CBD_semi_staticChannelAccess_r16 ssb_BFD_CBD_semi_staticChannelAccess_r16 = null;  // optional
   public SharedSpectrumChAccessParamsPerBand_r16_csi_RS_BFD_CBD_r16 csi_RS_BFD_CBD_r16 = null;  // optional
   public SharedSpectrumChAccessParamsPerBand_r16_ul_ChannelBW_SCell_10mhz_r16 ul_ChannelBW_SCell_10mhz_r16 = null;  // optional
   public SharedSpectrumChAccessParamsPerBand_r16_rssi_ChannelOccupancyReporting_r16 rssi_ChannelOccupancyReporting_r16 = null;  // optional
   public SharedSpectrumChAccessParamsPerBand_r16_srs_StartAnyOFDM_Symbol_r16 srs_StartAnyOFDM_Symbol_r16 = null;  // optional
   public Asn1Integer searchSpaceFreqMonitorLocation_r16;  // optional
   public SharedSpectrumChAccessParamsPerBand_r16_coreset_RB_Offset_r16 coreset_RB_Offset_r16 = null;  // optional
   public SharedSpectrumChAccessParamsPerBand_r16_cgi_Acquisition_r16 cgi_Acquisition_r16 = null;  // optional
   public SharedSpectrumChAccessParamsPerBand_r16_configuredUL_Tx_r16 configuredUL_Tx_r16 = null;  // optional
   public SharedSpectrumChAccessParamsPerBand_r16_prach_Wideband_r16 prach_Wideband_r16 = null;  // optional
   public SharedSpectrumChAccessParamsPerBand_r16_dci_AvailableRB_Set_r16 dci_AvailableRB_Set_r16 = null;  // optional
   public SharedSpectrumChAccessParamsPerBand_r16_dci_ChOccupancyDuration_r16 dci_ChOccupancyDuration_r16 = null;  // optional
   public SharedSpectrumChAccessParamsPerBand_r16_typeB_PDSCH_length_r16 typeB_PDSCH_length_r16 = null;  // optional
   public SharedSpectrumChAccessParamsPerBand_r16_searchSpaceSetGroupSwitchingwithDCI_r16 searchSpaceSetGroupSwitchingwithDCI_r16 = null;  // optional
   public SharedSpectrumChAccessParamsPerBand_r16_searchSpaceSetGroupSwitchingwithoutDCI_r16 searchSpaceSetGroupSwitchingwithoutDCI_r16 = null;  // optional
   public SharedSpectrumChAccessParamsPerBand_r16_searchSpaceSetGroupSwitchingcapability2_r16 searchSpaceSetGroupSwitchingcapability2_r16 = null;  // optional
   public SharedSpectrumChAccessParamsPerBand_r16_non_numericalPDSCH_HARQ_timing_r16 non_numericalPDSCH_HARQ_timing_r16 = null;  // optional
   public SharedSpectrumChAccessParamsPerBand_r16_enhancedDynamicHARQ_codebook_r16 enhancedDynamicHARQ_codebook_r16 = null;  // optional
   public SharedSpectrumChAccessParamsPerBand_r16_oneShotHARQ_feedback_r16 oneShotHARQ_feedback_r16 = null;  // optional
   public SharedSpectrumChAccessParamsPerBand_r16_multiPUSCH_UL_grant_r16 multiPUSCH_UL_grant_r16 = null;  // optional
   public SharedSpectrumChAccessParamsPerBand_r16_csi_RS_RLM_r16 csi_RS_RLM_r16 = null;  // optional
   public SharedSpectrumChAccessParamsPerBand_r16_csi_RS_RRM_r16 csi_RS_RRM_r16 = null;  // optional
   public SharedSpectrumChAccessParamsPerBand_r16_periodicAndSemi_PersistentCSI_RS_r16 periodicAndSemi_PersistentCSI_RS_r16 = null;  // optional
   public SharedSpectrumChAccessParamsPerBand_r16_pusch_PRB_interlace_r16 pusch_PRB_interlace_r16 = null;  // optional
   public SharedSpectrumChAccessParamsPerBand_r16_pucch_F0_F1_PRB_Interlace_r16 pucch_F0_F1_PRB_Interlace_r16 = null;  // optional
   public SharedSpectrumChAccessParamsPerBand_r16_occ_PRB_PF2_PF3_r16 occ_PRB_PF2_PF3_r16 = null;  // optional
   public SharedSpectrumChAccessParamsPerBand_r16_extCP_rangeCG_PUSCH_r16 extCP_rangeCG_PUSCH_r16 = null;  // optional
   public SharedSpectrumChAccessParamsPerBand_r16_configuredGrantWithReTx_r16 configuredGrantWithReTx_r16 = null;  // optional
   public SharedSpectrumChAccessParamsPerBand_r16_ed_Threshold_r16 ed_Threshold_r16 = null;  // optional
   public SharedSpectrumChAccessParamsPerBand_r16_ul_DL_COT_Sharing_r16 ul_DL_COT_Sharing_r16 = null;  // optional
   public SharedSpectrumChAccessParamsPerBand_r16_mux_CG_UCI_HARQ_ACK_r16 mux_CG_UCI_HARQ_ACK_r16 = null;  // optional
   public SharedSpectrumChAccessParamsPerBand_r16_cg_resourceConfig_r16 cg_resourceConfig_r16 = null;  // optional

   public SharedSpectrumChAccessParamsPerBand_r16 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SharedSpectrumChAccessParamsPerBand_r16 (
      SharedSpectrumChAccessParamsPerBand_r16_ul_DynamicChAccess_r16 ul_DynamicChAccess_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_ul_Semi_StaticChAccess_r16 ul_Semi_StaticChAccess_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_ssb_RRM_DynamicChAccess_r16 ssb_RRM_DynamicChAccess_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_ssb_RRM_Semi_StaticChAccess_r16 ssb_RRM_Semi_StaticChAccess_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_mib_Acquisition_r16 mib_Acquisition_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_ssb_RLM_DynamicChAccess_r16 ssb_RLM_DynamicChAccess_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_ssb_RLM_Semi_StaticChAccess_r16 ssb_RLM_Semi_StaticChAccess_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_sib1_Acquisition_r16 sib1_Acquisition_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_extRA_ResponseWindow_r16 extRA_ResponseWindow_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_ssb_BFD_CBD_dynamicChannelAccess_r16 ssb_BFD_CBD_dynamicChannelAccess_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_ssb_BFD_CBD_semi_staticChannelAccess_r16 ssb_BFD_CBD_semi_staticChannelAccess_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_csi_RS_BFD_CBD_r16 csi_RS_BFD_CBD_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_ul_ChannelBW_SCell_10mhz_r16 ul_ChannelBW_SCell_10mhz_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_rssi_ChannelOccupancyReporting_r16 rssi_ChannelOccupancyReporting_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_srs_StartAnyOFDM_Symbol_r16 srs_StartAnyOFDM_Symbol_r16_,
      Asn1Integer searchSpaceFreqMonitorLocation_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_coreset_RB_Offset_r16 coreset_RB_Offset_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_cgi_Acquisition_r16 cgi_Acquisition_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_configuredUL_Tx_r16 configuredUL_Tx_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_prach_Wideband_r16 prach_Wideband_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_dci_AvailableRB_Set_r16 dci_AvailableRB_Set_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_dci_ChOccupancyDuration_r16 dci_ChOccupancyDuration_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_typeB_PDSCH_length_r16 typeB_PDSCH_length_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_searchSpaceSetGroupSwitchingwithDCI_r16 searchSpaceSetGroupSwitchingwithDCI_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_searchSpaceSetGroupSwitchingwithoutDCI_r16 searchSpaceSetGroupSwitchingwithoutDCI_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_searchSpaceSetGroupSwitchingcapability2_r16 searchSpaceSetGroupSwitchingcapability2_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_non_numericalPDSCH_HARQ_timing_r16 non_numericalPDSCH_HARQ_timing_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_enhancedDynamicHARQ_codebook_r16 enhancedDynamicHARQ_codebook_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_oneShotHARQ_feedback_r16 oneShotHARQ_feedback_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_multiPUSCH_UL_grant_r16 multiPUSCH_UL_grant_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_csi_RS_RLM_r16 csi_RS_RLM_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_csi_RS_RRM_r16 csi_RS_RRM_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_periodicAndSemi_PersistentCSI_RS_r16 periodicAndSemi_PersistentCSI_RS_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_pusch_PRB_interlace_r16 pusch_PRB_interlace_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_pucch_F0_F1_PRB_Interlace_r16 pucch_F0_F1_PRB_Interlace_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_occ_PRB_PF2_PF3_r16 occ_PRB_PF2_PF3_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_extCP_rangeCG_PUSCH_r16 extCP_rangeCG_PUSCH_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_configuredGrantWithReTx_r16 configuredGrantWithReTx_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_ed_Threshold_r16 ed_Threshold_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_ul_DL_COT_Sharing_r16 ul_DL_COT_Sharing_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_mux_CG_UCI_HARQ_ACK_r16 mux_CG_UCI_HARQ_ACK_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_cg_resourceConfig_r16 cg_resourceConfig_r16_
   ) {
      super();
      ul_DynamicChAccess_r16 = ul_DynamicChAccess_r16_;
      ul_Semi_StaticChAccess_r16 = ul_Semi_StaticChAccess_r16_;
      ssb_RRM_DynamicChAccess_r16 = ssb_RRM_DynamicChAccess_r16_;
      ssb_RRM_Semi_StaticChAccess_r16 = ssb_RRM_Semi_StaticChAccess_r16_;
      mib_Acquisition_r16 = mib_Acquisition_r16_;
      ssb_RLM_DynamicChAccess_r16 = ssb_RLM_DynamicChAccess_r16_;
      ssb_RLM_Semi_StaticChAccess_r16 = ssb_RLM_Semi_StaticChAccess_r16_;
      sib1_Acquisition_r16 = sib1_Acquisition_r16_;
      extRA_ResponseWindow_r16 = extRA_ResponseWindow_r16_;
      ssb_BFD_CBD_dynamicChannelAccess_r16 = ssb_BFD_CBD_dynamicChannelAccess_r16_;
      ssb_BFD_CBD_semi_staticChannelAccess_r16 = ssb_BFD_CBD_semi_staticChannelAccess_r16_;
      csi_RS_BFD_CBD_r16 = csi_RS_BFD_CBD_r16_;
      ul_ChannelBW_SCell_10mhz_r16 = ul_ChannelBW_SCell_10mhz_r16_;
      rssi_ChannelOccupancyReporting_r16 = rssi_ChannelOccupancyReporting_r16_;
      srs_StartAnyOFDM_Symbol_r16 = srs_StartAnyOFDM_Symbol_r16_;
      searchSpaceFreqMonitorLocation_r16 = searchSpaceFreqMonitorLocation_r16_;
      coreset_RB_Offset_r16 = coreset_RB_Offset_r16_;
      cgi_Acquisition_r16 = cgi_Acquisition_r16_;
      configuredUL_Tx_r16 = configuredUL_Tx_r16_;
      prach_Wideband_r16 = prach_Wideband_r16_;
      dci_AvailableRB_Set_r16 = dci_AvailableRB_Set_r16_;
      dci_ChOccupancyDuration_r16 = dci_ChOccupancyDuration_r16_;
      typeB_PDSCH_length_r16 = typeB_PDSCH_length_r16_;
      searchSpaceSetGroupSwitchingwithDCI_r16 = searchSpaceSetGroupSwitchingwithDCI_r16_;
      searchSpaceSetGroupSwitchingwithoutDCI_r16 = searchSpaceSetGroupSwitchingwithoutDCI_r16_;
      searchSpaceSetGroupSwitchingcapability2_r16 = searchSpaceSetGroupSwitchingcapability2_r16_;
      non_numericalPDSCH_HARQ_timing_r16 = non_numericalPDSCH_HARQ_timing_r16_;
      enhancedDynamicHARQ_codebook_r16 = enhancedDynamicHARQ_codebook_r16_;
      oneShotHARQ_feedback_r16 = oneShotHARQ_feedback_r16_;
      multiPUSCH_UL_grant_r16 = multiPUSCH_UL_grant_r16_;
      csi_RS_RLM_r16 = csi_RS_RLM_r16_;
      csi_RS_RRM_r16 = csi_RS_RRM_r16_;
      periodicAndSemi_PersistentCSI_RS_r16 = periodicAndSemi_PersistentCSI_RS_r16_;
      pusch_PRB_interlace_r16 = pusch_PRB_interlace_r16_;
      pucch_F0_F1_PRB_Interlace_r16 = pucch_F0_F1_PRB_Interlace_r16_;
      occ_PRB_PF2_PF3_r16 = occ_PRB_PF2_PF3_r16_;
      extCP_rangeCG_PUSCH_r16 = extCP_rangeCG_PUSCH_r16_;
      configuredGrantWithReTx_r16 = configuredGrantWithReTx_r16_;
      ed_Threshold_r16 = ed_Threshold_r16_;
      ul_DL_COT_Sharing_r16 = ul_DL_COT_Sharing_r16_;
      mux_CG_UCI_HARQ_ACK_r16 = mux_CG_UCI_HARQ_ACK_r16_;
      cg_resourceConfig_r16 = cg_resourceConfig_r16_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SharedSpectrumChAccessParamsPerBand_r16 (SharedSpectrumChAccessParamsPerBand_r16_ul_DynamicChAccess_r16 ul_DynamicChAccess_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_ul_Semi_StaticChAccess_r16 ul_Semi_StaticChAccess_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_ssb_RRM_DynamicChAccess_r16 ssb_RRM_DynamicChAccess_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_ssb_RRM_Semi_StaticChAccess_r16 ssb_RRM_Semi_StaticChAccess_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_mib_Acquisition_r16 mib_Acquisition_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_ssb_RLM_DynamicChAccess_r16 ssb_RLM_DynamicChAccess_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_ssb_RLM_Semi_StaticChAccess_r16 ssb_RLM_Semi_StaticChAccess_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_sib1_Acquisition_r16 sib1_Acquisition_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_extRA_ResponseWindow_r16 extRA_ResponseWindow_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_ssb_BFD_CBD_dynamicChannelAccess_r16 ssb_BFD_CBD_dynamicChannelAccess_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_ssb_BFD_CBD_semi_staticChannelAccess_r16 ssb_BFD_CBD_semi_staticChannelAccess_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_csi_RS_BFD_CBD_r16 csi_RS_BFD_CBD_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_ul_ChannelBW_SCell_10mhz_r16 ul_ChannelBW_SCell_10mhz_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_rssi_ChannelOccupancyReporting_r16 rssi_ChannelOccupancyReporting_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_srs_StartAnyOFDM_Symbol_r16 srs_StartAnyOFDM_Symbol_r16_,
      long searchSpaceFreqMonitorLocation_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_coreset_RB_Offset_r16 coreset_RB_Offset_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_cgi_Acquisition_r16 cgi_Acquisition_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_configuredUL_Tx_r16 configuredUL_Tx_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_prach_Wideband_r16 prach_Wideband_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_dci_AvailableRB_Set_r16 dci_AvailableRB_Set_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_dci_ChOccupancyDuration_r16 dci_ChOccupancyDuration_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_typeB_PDSCH_length_r16 typeB_PDSCH_length_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_searchSpaceSetGroupSwitchingwithDCI_r16 searchSpaceSetGroupSwitchingwithDCI_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_searchSpaceSetGroupSwitchingwithoutDCI_r16 searchSpaceSetGroupSwitchingwithoutDCI_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_searchSpaceSetGroupSwitchingcapability2_r16 searchSpaceSetGroupSwitchingcapability2_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_non_numericalPDSCH_HARQ_timing_r16 non_numericalPDSCH_HARQ_timing_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_enhancedDynamicHARQ_codebook_r16 enhancedDynamicHARQ_codebook_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_oneShotHARQ_feedback_r16 oneShotHARQ_feedback_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_multiPUSCH_UL_grant_r16 multiPUSCH_UL_grant_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_csi_RS_RLM_r16 csi_RS_RLM_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_csi_RS_RRM_r16 csi_RS_RRM_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_periodicAndSemi_PersistentCSI_RS_r16 periodicAndSemi_PersistentCSI_RS_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_pusch_PRB_interlace_r16 pusch_PRB_interlace_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_pucch_F0_F1_PRB_Interlace_r16 pucch_F0_F1_PRB_Interlace_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_occ_PRB_PF2_PF3_r16 occ_PRB_PF2_PF3_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_extCP_rangeCG_PUSCH_r16 extCP_rangeCG_PUSCH_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_configuredGrantWithReTx_r16 configuredGrantWithReTx_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_ed_Threshold_r16 ed_Threshold_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_ul_DL_COT_Sharing_r16 ul_DL_COT_Sharing_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_mux_CG_UCI_HARQ_ACK_r16 mux_CG_UCI_HARQ_ACK_r16_,
      SharedSpectrumChAccessParamsPerBand_r16_cg_resourceConfig_r16 cg_resourceConfig_r16_
   ) {
      super();
      ul_DynamicChAccess_r16 = ul_DynamicChAccess_r16_;
      ul_Semi_StaticChAccess_r16 = ul_Semi_StaticChAccess_r16_;
      ssb_RRM_DynamicChAccess_r16 = ssb_RRM_DynamicChAccess_r16_;
      ssb_RRM_Semi_StaticChAccess_r16 = ssb_RRM_Semi_StaticChAccess_r16_;
      mib_Acquisition_r16 = mib_Acquisition_r16_;
      ssb_RLM_DynamicChAccess_r16 = ssb_RLM_DynamicChAccess_r16_;
      ssb_RLM_Semi_StaticChAccess_r16 = ssb_RLM_Semi_StaticChAccess_r16_;
      sib1_Acquisition_r16 = sib1_Acquisition_r16_;
      extRA_ResponseWindow_r16 = extRA_ResponseWindow_r16_;
      ssb_BFD_CBD_dynamicChannelAccess_r16 = ssb_BFD_CBD_dynamicChannelAccess_r16_;
      ssb_BFD_CBD_semi_staticChannelAccess_r16 = ssb_BFD_CBD_semi_staticChannelAccess_r16_;
      csi_RS_BFD_CBD_r16 = csi_RS_BFD_CBD_r16_;
      ul_ChannelBW_SCell_10mhz_r16 = ul_ChannelBW_SCell_10mhz_r16_;
      rssi_ChannelOccupancyReporting_r16 = rssi_ChannelOccupancyReporting_r16_;
      srs_StartAnyOFDM_Symbol_r16 = srs_StartAnyOFDM_Symbol_r16_;
      searchSpaceFreqMonitorLocation_r16 = new Asn1Integer (searchSpaceFreqMonitorLocation_r16_);
      coreset_RB_Offset_r16 = coreset_RB_Offset_r16_;
      cgi_Acquisition_r16 = cgi_Acquisition_r16_;
      configuredUL_Tx_r16 = configuredUL_Tx_r16_;
      prach_Wideband_r16 = prach_Wideband_r16_;
      dci_AvailableRB_Set_r16 = dci_AvailableRB_Set_r16_;
      dci_ChOccupancyDuration_r16 = dci_ChOccupancyDuration_r16_;
      typeB_PDSCH_length_r16 = typeB_PDSCH_length_r16_;
      searchSpaceSetGroupSwitchingwithDCI_r16 = searchSpaceSetGroupSwitchingwithDCI_r16_;
      searchSpaceSetGroupSwitchingwithoutDCI_r16 = searchSpaceSetGroupSwitchingwithoutDCI_r16_;
      searchSpaceSetGroupSwitchingcapability2_r16 = searchSpaceSetGroupSwitchingcapability2_r16_;
      non_numericalPDSCH_HARQ_timing_r16 = non_numericalPDSCH_HARQ_timing_r16_;
      enhancedDynamicHARQ_codebook_r16 = enhancedDynamicHARQ_codebook_r16_;
      oneShotHARQ_feedback_r16 = oneShotHARQ_feedback_r16_;
      multiPUSCH_UL_grant_r16 = multiPUSCH_UL_grant_r16_;
      csi_RS_RLM_r16 = csi_RS_RLM_r16_;
      csi_RS_RRM_r16 = csi_RS_RRM_r16_;
      periodicAndSemi_PersistentCSI_RS_r16 = periodicAndSemi_PersistentCSI_RS_r16_;
      pusch_PRB_interlace_r16 = pusch_PRB_interlace_r16_;
      pucch_F0_F1_PRB_Interlace_r16 = pucch_F0_F1_PRB_Interlace_r16_;
      occ_PRB_PF2_PF3_r16 = occ_PRB_PF2_PF3_r16_;
      extCP_rangeCG_PUSCH_r16 = extCP_rangeCG_PUSCH_r16_;
      configuredGrantWithReTx_r16 = configuredGrantWithReTx_r16_;
      ed_Threshold_r16 = ed_Threshold_r16_;
      ul_DL_COT_Sharing_r16 = ul_DL_COT_Sharing_r16_;
      mux_CG_UCI_HARQ_ACK_r16 = mux_CG_UCI_HARQ_ACK_r16_;
      cg_resourceConfig_r16 = cg_resourceConfig_r16_;
   }

   public void init () {
      ul_DynamicChAccess_r16 = null;
      ul_Semi_StaticChAccess_r16 = null;
      ssb_RRM_DynamicChAccess_r16 = null;
      ssb_RRM_Semi_StaticChAccess_r16 = null;
      mib_Acquisition_r16 = null;
      ssb_RLM_DynamicChAccess_r16 = null;
      ssb_RLM_Semi_StaticChAccess_r16 = null;
      sib1_Acquisition_r16 = null;
      extRA_ResponseWindow_r16 = null;
      ssb_BFD_CBD_dynamicChannelAccess_r16 = null;
      ssb_BFD_CBD_semi_staticChannelAccess_r16 = null;
      csi_RS_BFD_CBD_r16 = null;
      ul_ChannelBW_SCell_10mhz_r16 = null;
      rssi_ChannelOccupancyReporting_r16 = null;
      srs_StartAnyOFDM_Symbol_r16 = null;
      searchSpaceFreqMonitorLocation_r16 = null;
      coreset_RB_Offset_r16 = null;
      cgi_Acquisition_r16 = null;
      configuredUL_Tx_r16 = null;
      prach_Wideband_r16 = null;
      dci_AvailableRB_Set_r16 = null;
      dci_ChOccupancyDuration_r16 = null;
      typeB_PDSCH_length_r16 = null;
      searchSpaceSetGroupSwitchingwithDCI_r16 = null;
      searchSpaceSetGroupSwitchingwithoutDCI_r16 = null;
      searchSpaceSetGroupSwitchingcapability2_r16 = null;
      non_numericalPDSCH_HARQ_timing_r16 = null;
      enhancedDynamicHARQ_codebook_r16 = null;
      oneShotHARQ_feedback_r16 = null;
      multiPUSCH_UL_grant_r16 = null;
      csi_RS_RLM_r16 = null;
      csi_RS_RRM_r16 = null;
      periodicAndSemi_PersistentCSI_RS_r16 = null;
      pusch_PRB_interlace_r16 = null;
      pucch_F0_F1_PRB_Interlace_r16 = null;
      occ_PRB_PF2_PF3_r16 = null;
      extCP_rangeCG_PUSCH_r16 = null;
      configuredGrantWithReTx_r16 = null;
      ed_Threshold_r16 = null;
      ul_DL_COT_Sharing_r16 = null;
      mux_CG_UCI_HARQ_ACK_r16 = null;
      cg_resourceConfig_r16 = null;
   }

   public int getElementCount() { return 42; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return ul_DynamicChAccess_r16;
         case 1: return ul_Semi_StaticChAccess_r16;
         case 2: return ssb_RRM_DynamicChAccess_r16;
         case 3: return ssb_RRM_Semi_StaticChAccess_r16;
         case 4: return mib_Acquisition_r16;
         case 5: return ssb_RLM_DynamicChAccess_r16;
         case 6: return ssb_RLM_Semi_StaticChAccess_r16;
         case 7: return sib1_Acquisition_r16;
         case 8: return extRA_ResponseWindow_r16;
         case 9: return ssb_BFD_CBD_dynamicChannelAccess_r16;
         case 10: return ssb_BFD_CBD_semi_staticChannelAccess_r16;
         case 11: return csi_RS_BFD_CBD_r16;
         case 12: return ul_ChannelBW_SCell_10mhz_r16;
         case 13: return rssi_ChannelOccupancyReporting_r16;
         case 14: return srs_StartAnyOFDM_Symbol_r16;
         case 15: return searchSpaceFreqMonitorLocation_r16;
         case 16: return coreset_RB_Offset_r16;
         case 17: return cgi_Acquisition_r16;
         case 18: return configuredUL_Tx_r16;
         case 19: return prach_Wideband_r16;
         case 20: return dci_AvailableRB_Set_r16;
         case 21: return dci_ChOccupancyDuration_r16;
         case 22: return typeB_PDSCH_length_r16;
         case 23: return searchSpaceSetGroupSwitchingwithDCI_r16;
         case 24: return searchSpaceSetGroupSwitchingwithoutDCI_r16;
         case 25: return searchSpaceSetGroupSwitchingcapability2_r16;
         case 26: return non_numericalPDSCH_HARQ_timing_r16;
         case 27: return enhancedDynamicHARQ_codebook_r16;
         case 28: return oneShotHARQ_feedback_r16;
         case 29: return multiPUSCH_UL_grant_r16;
         case 30: return csi_RS_RLM_r16;
         case 31: return csi_RS_RRM_r16;
         case 32: return periodicAndSemi_PersistentCSI_RS_r16;
         case 33: return pusch_PRB_interlace_r16;
         case 34: return pucch_F0_F1_PRB_Interlace_r16;
         case 35: return occ_PRB_PF2_PF3_r16;
         case 36: return extCP_rangeCG_PUSCH_r16;
         case 37: return configuredGrantWithReTx_r16;
         case 38: return ed_Threshold_r16;
         case 39: return ul_DL_COT_Sharing_r16;
         case 40: return mux_CG_UCI_HARQ_ACK_r16;
         case 41: return cg_resourceConfig_r16;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "ul-DynamicChAccess-r16";
         case 1: return "ul-Semi-StaticChAccess-r16";
         case 2: return "ssb-RRM-DynamicChAccess-r16";
         case 3: return "ssb-RRM-Semi-StaticChAccess-r16";
         case 4: return "mib-Acquisition-r16";
         case 5: return "ssb-RLM-DynamicChAccess-r16";
         case 6: return "ssb-RLM-Semi-StaticChAccess-r16";
         case 7: return "sib1-Acquisition-r16";
         case 8: return "extRA-ResponseWindow-r16";
         case 9: return "ssb-BFD-CBD-dynamicChannelAccess-r16";
         case 10: return "ssb-BFD-CBD-semi-staticChannelAccess-r16";
         case 11: return "csi-RS-BFD-CBD-r16";
         case 12: return "ul-ChannelBW-SCell-10mhz-r16";
         case 13: return "rssi-ChannelOccupancyReporting-r16";
         case 14: return "srs-StartAnyOFDM-Symbol-r16";
         case 15: return "searchSpaceFreqMonitorLocation-r16";
         case 16: return "coreset-RB-Offset-r16";
         case 17: return "cgi-Acquisition-r16";
         case 18: return "configuredUL-Tx-r16";
         case 19: return "prach-Wideband-r16";
         case 20: return "dci-AvailableRB-Set-r16";
         case 21: return "dci-ChOccupancyDuration-r16";
         case 22: return "typeB-PDSCH-length-r16";
         case 23: return "searchSpaceSetGroupSwitchingwithDCI-r16";
         case 24: return "searchSpaceSetGroupSwitchingwithoutDCI-r16";
         case 25: return "searchSpaceSetGroupSwitchingcapability2-r16";
         case 26: return "non-numericalPDSCH-HARQ-timing-r16";
         case 27: return "enhancedDynamicHARQ-codebook-r16";
         case 28: return "oneShotHARQ-feedback-r16";
         case 29: return "multiPUSCH-UL-grant-r16";
         case 30: return "csi-RS-RLM-r16";
         case 31: return "csi-RS-RRM-r16";
         case 32: return "periodicAndSemi-PersistentCSI-RS-r16";
         case 33: return "pusch-PRB-interlace-r16";
         case 34: return "pucch-F0-F1-PRB-Interlace-r16";
         case 35: return "occ-PRB-PF2-PF3-r16";
         case 36: return "extCP-rangeCG-PUSCH-r16";
         case 37: return "configuredGrantWithReTx-r16";
         case 38: return "ed-Threshold-r16";
         case 39: return "ul-DL-COT-Sharing-r16";
         case 40: return "mux-CG-UCI-HARQ-ACK-r16";
         case 41: return "cg-resourceConfig-r16";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean ul_DynamicChAccess_r16Present = buffer.decodeBit ("ul_DynamicChAccess_r16Present");
      boolean ul_Semi_StaticChAccess_r16Present = buffer.decodeBit ("ul_Semi_StaticChAccess_r16Present");
      boolean ssb_RRM_DynamicChAccess_r16Present = buffer.decodeBit ("ssb_RRM_DynamicChAccess_r16Present");
      boolean ssb_RRM_Semi_StaticChAccess_r16Present = buffer.decodeBit ("ssb_RRM_Semi_StaticChAccess_r16Present");
      boolean mib_Acquisition_r16Present = buffer.decodeBit ("mib_Acquisition_r16Present");
      boolean ssb_RLM_DynamicChAccess_r16Present = buffer.decodeBit ("ssb_RLM_DynamicChAccess_r16Present");
      boolean ssb_RLM_Semi_StaticChAccess_r16Present = buffer.decodeBit ("ssb_RLM_Semi_StaticChAccess_r16Present");
      boolean sib1_Acquisition_r16Present = buffer.decodeBit ("sib1_Acquisition_r16Present");
      boolean extRA_ResponseWindow_r16Present = buffer.decodeBit ("extRA_ResponseWindow_r16Present");
      boolean ssb_BFD_CBD_dynamicChannelAccess_r16Present = buffer.decodeBit ("ssb_BFD_CBD_dynamicChannelAccess_r16Present");
      boolean ssb_BFD_CBD_semi_staticChannelAccess_r16Present = buffer.decodeBit ("ssb_BFD_CBD_semi_staticChannelAccess_r16Present");
      boolean csi_RS_BFD_CBD_r16Present = buffer.decodeBit ("csi_RS_BFD_CBD_r16Present");
      boolean ul_ChannelBW_SCell_10mhz_r16Present = buffer.decodeBit ("ul_ChannelBW_SCell_10mhz_r16Present");
      boolean rssi_ChannelOccupancyReporting_r16Present = buffer.decodeBit ("rssi_ChannelOccupancyReporting_r16Present");
      boolean srs_StartAnyOFDM_Symbol_r16Present = buffer.decodeBit ("srs_StartAnyOFDM_Symbol_r16Present");
      boolean searchSpaceFreqMonitorLocation_r16Present = buffer.decodeBit ("searchSpaceFreqMonitorLocation_r16Present");
      boolean coreset_RB_Offset_r16Present = buffer.decodeBit ("coreset_RB_Offset_r16Present");
      boolean cgi_Acquisition_r16Present = buffer.decodeBit ("cgi_Acquisition_r16Present");
      boolean configuredUL_Tx_r16Present = buffer.decodeBit ("configuredUL_Tx_r16Present");
      boolean prach_Wideband_r16Present = buffer.decodeBit ("prach_Wideband_r16Present");
      boolean dci_AvailableRB_Set_r16Present = buffer.decodeBit ("dci_AvailableRB_Set_r16Present");
      boolean dci_ChOccupancyDuration_r16Present = buffer.decodeBit ("dci_ChOccupancyDuration_r16Present");
      boolean typeB_PDSCH_length_r16Present = buffer.decodeBit ("typeB_PDSCH_length_r16Present");
      boolean searchSpaceSetGroupSwitchingwithDCI_r16Present = buffer.decodeBit ("searchSpaceSetGroupSwitchingwithDCI_r16Present");
      boolean searchSpaceSetGroupSwitchingwithoutDCI_r16Present = buffer.decodeBit ("searchSpaceSetGroupSwitchingwithoutDCI_r16Present");
      boolean searchSpaceSetGroupSwitchingcapability2_r16Present = buffer.decodeBit ("searchSpaceSetGroupSwitchingcapability2_r16Present");
      boolean non_numericalPDSCH_HARQ_timing_r16Present = buffer.decodeBit ("non_numericalPDSCH_HARQ_timing_r16Present");
      boolean enhancedDynamicHARQ_codebook_r16Present = buffer.decodeBit ("enhancedDynamicHARQ_codebook_r16Present");
      boolean oneShotHARQ_feedback_r16Present = buffer.decodeBit ("oneShotHARQ_feedback_r16Present");
      boolean multiPUSCH_UL_grant_r16Present = buffer.decodeBit ("multiPUSCH_UL_grant_r16Present");
      boolean csi_RS_RLM_r16Present = buffer.decodeBit ("csi_RS_RLM_r16Present");
      boolean csi_RS_RRM_r16Present = buffer.decodeBit ("csi_RS_RRM_r16Present");
      boolean periodicAndSemi_PersistentCSI_RS_r16Present = buffer.decodeBit ("periodicAndSemi_PersistentCSI_RS_r16Present");
      boolean pusch_PRB_interlace_r16Present = buffer.decodeBit ("pusch_PRB_interlace_r16Present");
      boolean pucch_F0_F1_PRB_Interlace_r16Present = buffer.decodeBit ("pucch_F0_F1_PRB_Interlace_r16Present");
      boolean occ_PRB_PF2_PF3_r16Present = buffer.decodeBit ("occ_PRB_PF2_PF3_r16Present");
      boolean extCP_rangeCG_PUSCH_r16Present = buffer.decodeBit ("extCP_rangeCG_PUSCH_r16Present");
      boolean configuredGrantWithReTx_r16Present = buffer.decodeBit ("configuredGrantWithReTx_r16Present");
      boolean ed_Threshold_r16Present = buffer.decodeBit ("ed_Threshold_r16Present");
      boolean ul_DL_COT_Sharing_r16Present = buffer.decodeBit ("ul_DL_COT_Sharing_r16Present");
      boolean mux_CG_UCI_HARQ_ACK_r16Present = buffer.decodeBit ("mux_CG_UCI_HARQ_ACK_r16Present");
      boolean cg_resourceConfig_r16Present = buffer.decodeBit ("cg_resourceConfig_r16Present");

      // decode ul_DynamicChAccess_r16

      if (ul_DynamicChAccess_r16Present) {
         buffer.getContext().eventDispatcher.startElement("ul_DynamicChAccess_r16", -1);

         int tval = SharedSpectrumChAccessParamsPerBand_r16_ul_DynamicChAccess_r16.decodeEnumValue (buffer);
         ul_DynamicChAccess_r16 = SharedSpectrumChAccessParamsPerBand_r16_ul_DynamicChAccess_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("ul_DynamicChAccess_r16", -1);
      }
      else {
         ul_DynamicChAccess_r16 = null;
      }

      // decode ul_Semi_StaticChAccess_r16

      if (ul_Semi_StaticChAccess_r16Present) {
         buffer.getContext().eventDispatcher.startElement("ul_Semi_StaticChAccess_r16", -1);

         int tval = SharedSpectrumChAccessParamsPerBand_r16_ul_Semi_StaticChAccess_r16.decodeEnumValue (buffer);
         ul_Semi_StaticChAccess_r16 = SharedSpectrumChAccessParamsPerBand_r16_ul_Semi_StaticChAccess_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("ul_Semi_StaticChAccess_r16", -1);
      }
      else {
         ul_Semi_StaticChAccess_r16 = null;
      }

      // decode ssb_RRM_DynamicChAccess_r16

      if (ssb_RRM_DynamicChAccess_r16Present) {
         buffer.getContext().eventDispatcher.startElement("ssb_RRM_DynamicChAccess_r16", -1);

         int tval = SharedSpectrumChAccessParamsPerBand_r16_ssb_RRM_DynamicChAccess_r16.decodeEnumValue (buffer);
         ssb_RRM_DynamicChAccess_r16 = SharedSpectrumChAccessParamsPerBand_r16_ssb_RRM_DynamicChAccess_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("ssb_RRM_DynamicChAccess_r16", -1);
      }
      else {
         ssb_RRM_DynamicChAccess_r16 = null;
      }

      // decode ssb_RRM_Semi_StaticChAccess_r16

      if (ssb_RRM_Semi_StaticChAccess_r16Present) {
         buffer.getContext().eventDispatcher.startElement("ssb_RRM_Semi_StaticChAccess_r16", -1);

         int tval = SharedSpectrumChAccessParamsPerBand_r16_ssb_RRM_Semi_StaticChAccess_r16.decodeEnumValue (buffer);
         ssb_RRM_Semi_StaticChAccess_r16 = SharedSpectrumChAccessParamsPerBand_r16_ssb_RRM_Semi_StaticChAccess_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("ssb_RRM_Semi_StaticChAccess_r16", -1);
      }
      else {
         ssb_RRM_Semi_StaticChAccess_r16 = null;
      }

      // decode mib_Acquisition_r16

      if (mib_Acquisition_r16Present) {
         buffer.getContext().eventDispatcher.startElement("mib_Acquisition_r16", -1);

         int tval = SharedSpectrumChAccessParamsPerBand_r16_mib_Acquisition_r16.decodeEnumValue (buffer);
         mib_Acquisition_r16 = SharedSpectrumChAccessParamsPerBand_r16_mib_Acquisition_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("mib_Acquisition_r16", -1);
      }
      else {
         mib_Acquisition_r16 = null;
      }

      // decode ssb_RLM_DynamicChAccess_r16

      if (ssb_RLM_DynamicChAccess_r16Present) {
         buffer.getContext().eventDispatcher.startElement("ssb_RLM_DynamicChAccess_r16", -1);

         int tval = SharedSpectrumChAccessParamsPerBand_r16_ssb_RLM_DynamicChAccess_r16.decodeEnumValue (buffer);
         ssb_RLM_DynamicChAccess_r16 = SharedSpectrumChAccessParamsPerBand_r16_ssb_RLM_DynamicChAccess_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("ssb_RLM_DynamicChAccess_r16", -1);
      }
      else {
         ssb_RLM_DynamicChAccess_r16 = null;
      }

      // decode ssb_RLM_Semi_StaticChAccess_r16

      if (ssb_RLM_Semi_StaticChAccess_r16Present) {
         buffer.getContext().eventDispatcher.startElement("ssb_RLM_Semi_StaticChAccess_r16", -1);

         int tval = SharedSpectrumChAccessParamsPerBand_r16_ssb_RLM_Semi_StaticChAccess_r16.decodeEnumValue (buffer);
         ssb_RLM_Semi_StaticChAccess_r16 = SharedSpectrumChAccessParamsPerBand_r16_ssb_RLM_Semi_StaticChAccess_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("ssb_RLM_Semi_StaticChAccess_r16", -1);
      }
      else {
         ssb_RLM_Semi_StaticChAccess_r16 = null;
      }

      // decode sib1_Acquisition_r16

      if (sib1_Acquisition_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sib1_Acquisition_r16", -1);

         int tval = SharedSpectrumChAccessParamsPerBand_r16_sib1_Acquisition_r16.decodeEnumValue (buffer);
         sib1_Acquisition_r16 = SharedSpectrumChAccessParamsPerBand_r16_sib1_Acquisition_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("sib1_Acquisition_r16", -1);
      }
      else {
         sib1_Acquisition_r16 = null;
      }

      // decode extRA_ResponseWindow_r16

      if (extRA_ResponseWindow_r16Present) {
         buffer.getContext().eventDispatcher.startElement("extRA_ResponseWindow_r16", -1);

         int tval = SharedSpectrumChAccessParamsPerBand_r16_extRA_ResponseWindow_r16.decodeEnumValue (buffer);
         extRA_ResponseWindow_r16 = SharedSpectrumChAccessParamsPerBand_r16_extRA_ResponseWindow_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("extRA_ResponseWindow_r16", -1);
      }
      else {
         extRA_ResponseWindow_r16 = null;
      }

      // decode ssb_BFD_CBD_dynamicChannelAccess_r16

      if (ssb_BFD_CBD_dynamicChannelAccess_r16Present) {
         buffer.getContext().eventDispatcher.startElement("ssb_BFD_CBD_dynamicChannelAccess_r16", -1);

         int tval = SharedSpectrumChAccessParamsPerBand_r16_ssb_BFD_CBD_dynamicChannelAccess_r16.decodeEnumValue (buffer);
         ssb_BFD_CBD_dynamicChannelAccess_r16 = SharedSpectrumChAccessParamsPerBand_r16_ssb_BFD_CBD_dynamicChannelAccess_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("ssb_BFD_CBD_dynamicChannelAccess_r16", -1);
      }
      else {
         ssb_BFD_CBD_dynamicChannelAccess_r16 = null;
      }

      // decode ssb_BFD_CBD_semi_staticChannelAccess_r16

      if (ssb_BFD_CBD_semi_staticChannelAccess_r16Present) {
         buffer.getContext().eventDispatcher.startElement("ssb_BFD_CBD_semi_staticChannelAccess_r16", -1);

         int tval = SharedSpectrumChAccessParamsPerBand_r16_ssb_BFD_CBD_semi_staticChannelAccess_r16.decodeEnumValue (buffer);
         ssb_BFD_CBD_semi_staticChannelAccess_r16 = SharedSpectrumChAccessParamsPerBand_r16_ssb_BFD_CBD_semi_staticChannelAccess_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("ssb_BFD_CBD_semi_staticChannelAccess_r16", -1);
      }
      else {
         ssb_BFD_CBD_semi_staticChannelAccess_r16 = null;
      }

      // decode csi_RS_BFD_CBD_r16

      if (csi_RS_BFD_CBD_r16Present) {
         buffer.getContext().eventDispatcher.startElement("csi_RS_BFD_CBD_r16", -1);

         int tval = SharedSpectrumChAccessParamsPerBand_r16_csi_RS_BFD_CBD_r16.decodeEnumValue (buffer);
         csi_RS_BFD_CBD_r16 = SharedSpectrumChAccessParamsPerBand_r16_csi_RS_BFD_CBD_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("csi_RS_BFD_CBD_r16", -1);
      }
      else {
         csi_RS_BFD_CBD_r16 = null;
      }

      // decode ul_ChannelBW_SCell_10mhz_r16

      if (ul_ChannelBW_SCell_10mhz_r16Present) {
         buffer.getContext().eventDispatcher.startElement("ul_ChannelBW_SCell_10mhz_r16", -1);

         int tval = SharedSpectrumChAccessParamsPerBand_r16_ul_ChannelBW_SCell_10mhz_r16.decodeEnumValue (buffer);
         ul_ChannelBW_SCell_10mhz_r16 = SharedSpectrumChAccessParamsPerBand_r16_ul_ChannelBW_SCell_10mhz_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("ul_ChannelBW_SCell_10mhz_r16", -1);
      }
      else {
         ul_ChannelBW_SCell_10mhz_r16 = null;
      }

      // decode rssi_ChannelOccupancyReporting_r16

      if (rssi_ChannelOccupancyReporting_r16Present) {
         buffer.getContext().eventDispatcher.startElement("rssi_ChannelOccupancyReporting_r16", -1);

         int tval = SharedSpectrumChAccessParamsPerBand_r16_rssi_ChannelOccupancyReporting_r16.decodeEnumValue (buffer);
         rssi_ChannelOccupancyReporting_r16 = SharedSpectrumChAccessParamsPerBand_r16_rssi_ChannelOccupancyReporting_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("rssi_ChannelOccupancyReporting_r16", -1);
      }
      else {
         rssi_ChannelOccupancyReporting_r16 = null;
      }

      // decode srs_StartAnyOFDM_Symbol_r16

      if (srs_StartAnyOFDM_Symbol_r16Present) {
         buffer.getContext().eventDispatcher.startElement("srs_StartAnyOFDM_Symbol_r16", -1);

         int tval = SharedSpectrumChAccessParamsPerBand_r16_srs_StartAnyOFDM_Symbol_r16.decodeEnumValue (buffer);
         srs_StartAnyOFDM_Symbol_r16 = SharedSpectrumChAccessParamsPerBand_r16_srs_StartAnyOFDM_Symbol_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("srs_StartAnyOFDM_Symbol_r16", -1);
      }
      else {
         srs_StartAnyOFDM_Symbol_r16 = null;
      }

      // decode searchSpaceFreqMonitorLocation_r16

      if (searchSpaceFreqMonitorLocation_r16Present) {
         buffer.getContext().eventDispatcher.startElement("searchSpaceFreqMonitorLocation_r16", -1);

         searchSpaceFreqMonitorLocation_r16 = new Asn1Integer();
         searchSpaceFreqMonitorLocation_r16.decode (buffer, 1, 5);

         buffer.invokeCharacters(searchSpaceFreqMonitorLocation_r16.toString());
         buffer.getContext().eventDispatcher.endElement("searchSpaceFreqMonitorLocation_r16", -1);
      }
      else {
         searchSpaceFreqMonitorLocation_r16 = null;
      }

      // decode coreset_RB_Offset_r16

      if (coreset_RB_Offset_r16Present) {
         buffer.getContext().eventDispatcher.startElement("coreset_RB_Offset_r16", -1);

         int tval = SharedSpectrumChAccessParamsPerBand_r16_coreset_RB_Offset_r16.decodeEnumValue (buffer);
         coreset_RB_Offset_r16 = SharedSpectrumChAccessParamsPerBand_r16_coreset_RB_Offset_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("coreset_RB_Offset_r16", -1);
      }
      else {
         coreset_RB_Offset_r16 = null;
      }

      // decode cgi_Acquisition_r16

      if (cgi_Acquisition_r16Present) {
         buffer.getContext().eventDispatcher.startElement("cgi_Acquisition_r16", -1);

         int tval = SharedSpectrumChAccessParamsPerBand_r16_cgi_Acquisition_r16.decodeEnumValue (buffer);
         cgi_Acquisition_r16 = SharedSpectrumChAccessParamsPerBand_r16_cgi_Acquisition_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("cgi_Acquisition_r16", -1);
      }
      else {
         cgi_Acquisition_r16 = null;
      }

      // decode configuredUL_Tx_r16

      if (configuredUL_Tx_r16Present) {
         buffer.getContext().eventDispatcher.startElement("configuredUL_Tx_r16", -1);

         int tval = SharedSpectrumChAccessParamsPerBand_r16_configuredUL_Tx_r16.decodeEnumValue (buffer);
         configuredUL_Tx_r16 = SharedSpectrumChAccessParamsPerBand_r16_configuredUL_Tx_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("configuredUL_Tx_r16", -1);
      }
      else {
         configuredUL_Tx_r16 = null;
      }

      // decode prach_Wideband_r16

      if (prach_Wideband_r16Present) {
         buffer.getContext().eventDispatcher.startElement("prach_Wideband_r16", -1);

         int tval = SharedSpectrumChAccessParamsPerBand_r16_prach_Wideband_r16.decodeEnumValue (buffer);
         prach_Wideband_r16 = SharedSpectrumChAccessParamsPerBand_r16_prach_Wideband_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("prach_Wideband_r16", -1);
      }
      else {
         prach_Wideband_r16 = null;
      }

      // decode dci_AvailableRB_Set_r16

      if (dci_AvailableRB_Set_r16Present) {
         buffer.getContext().eventDispatcher.startElement("dci_AvailableRB_Set_r16", -1);

         int tval = SharedSpectrumChAccessParamsPerBand_r16_dci_AvailableRB_Set_r16.decodeEnumValue (buffer);
         dci_AvailableRB_Set_r16 = SharedSpectrumChAccessParamsPerBand_r16_dci_AvailableRB_Set_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("dci_AvailableRB_Set_r16", -1);
      }
      else {
         dci_AvailableRB_Set_r16 = null;
      }

      // decode dci_ChOccupancyDuration_r16

      if (dci_ChOccupancyDuration_r16Present) {
         buffer.getContext().eventDispatcher.startElement("dci_ChOccupancyDuration_r16", -1);

         int tval = SharedSpectrumChAccessParamsPerBand_r16_dci_ChOccupancyDuration_r16.decodeEnumValue (buffer);
         dci_ChOccupancyDuration_r16 = SharedSpectrumChAccessParamsPerBand_r16_dci_ChOccupancyDuration_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("dci_ChOccupancyDuration_r16", -1);
      }
      else {
         dci_ChOccupancyDuration_r16 = null;
      }

      // decode typeB_PDSCH_length_r16

      if (typeB_PDSCH_length_r16Present) {
         buffer.getContext().eventDispatcher.startElement("typeB_PDSCH_length_r16", -1);

         int tval = SharedSpectrumChAccessParamsPerBand_r16_typeB_PDSCH_length_r16.decodeEnumValue (buffer);
         typeB_PDSCH_length_r16 = SharedSpectrumChAccessParamsPerBand_r16_typeB_PDSCH_length_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("typeB_PDSCH_length_r16", -1);
      }
      else {
         typeB_PDSCH_length_r16 = null;
      }

      // decode searchSpaceSetGroupSwitchingwithDCI_r16

      if (searchSpaceSetGroupSwitchingwithDCI_r16Present) {
         buffer.getContext().eventDispatcher.startElement("searchSpaceSetGroupSwitchingwithDCI_r16", -1);

         int tval = SharedSpectrumChAccessParamsPerBand_r16_searchSpaceSetGroupSwitchingwithDCI_r16.decodeEnumValue (buffer);
         searchSpaceSetGroupSwitchingwithDCI_r16 = SharedSpectrumChAccessParamsPerBand_r16_searchSpaceSetGroupSwitchingwithDCI_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("searchSpaceSetGroupSwitchingwithDCI_r16", -1);
      }
      else {
         searchSpaceSetGroupSwitchingwithDCI_r16 = null;
      }

      // decode searchSpaceSetGroupSwitchingwithoutDCI_r16

      if (searchSpaceSetGroupSwitchingwithoutDCI_r16Present) {
         buffer.getContext().eventDispatcher.startElement("searchSpaceSetGroupSwitchingwithoutDCI_r16", -1);

         int tval = SharedSpectrumChAccessParamsPerBand_r16_searchSpaceSetGroupSwitchingwithoutDCI_r16.decodeEnumValue (buffer);
         searchSpaceSetGroupSwitchingwithoutDCI_r16 = SharedSpectrumChAccessParamsPerBand_r16_searchSpaceSetGroupSwitchingwithoutDCI_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("searchSpaceSetGroupSwitchingwithoutDCI_r16", -1);
      }
      else {
         searchSpaceSetGroupSwitchingwithoutDCI_r16 = null;
      }

      // decode searchSpaceSetGroupSwitchingcapability2_r16

      if (searchSpaceSetGroupSwitchingcapability2_r16Present) {
         buffer.getContext().eventDispatcher.startElement("searchSpaceSetGroupSwitchingcapability2_r16", -1);

         int tval = SharedSpectrumChAccessParamsPerBand_r16_searchSpaceSetGroupSwitchingcapability2_r16.decodeEnumValue (buffer);
         searchSpaceSetGroupSwitchingcapability2_r16 = SharedSpectrumChAccessParamsPerBand_r16_searchSpaceSetGroupSwitchingcapability2_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("searchSpaceSetGroupSwitchingcapability2_r16", -1);
      }
      else {
         searchSpaceSetGroupSwitchingcapability2_r16 = null;
      }

      // decode non_numericalPDSCH_HARQ_timing_r16

      if (non_numericalPDSCH_HARQ_timing_r16Present) {
         buffer.getContext().eventDispatcher.startElement("non_numericalPDSCH_HARQ_timing_r16", -1);

         int tval = SharedSpectrumChAccessParamsPerBand_r16_non_numericalPDSCH_HARQ_timing_r16.decodeEnumValue (buffer);
         non_numericalPDSCH_HARQ_timing_r16 = SharedSpectrumChAccessParamsPerBand_r16_non_numericalPDSCH_HARQ_timing_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("non_numericalPDSCH_HARQ_timing_r16", -1);
      }
      else {
         non_numericalPDSCH_HARQ_timing_r16 = null;
      }

      // decode enhancedDynamicHARQ_codebook_r16

      if (enhancedDynamicHARQ_codebook_r16Present) {
         buffer.getContext().eventDispatcher.startElement("enhancedDynamicHARQ_codebook_r16", -1);

         int tval = SharedSpectrumChAccessParamsPerBand_r16_enhancedDynamicHARQ_codebook_r16.decodeEnumValue (buffer);
         enhancedDynamicHARQ_codebook_r16 = SharedSpectrumChAccessParamsPerBand_r16_enhancedDynamicHARQ_codebook_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("enhancedDynamicHARQ_codebook_r16", -1);
      }
      else {
         enhancedDynamicHARQ_codebook_r16 = null;
      }

      // decode oneShotHARQ_feedback_r16

      if (oneShotHARQ_feedback_r16Present) {
         buffer.getContext().eventDispatcher.startElement("oneShotHARQ_feedback_r16", -1);

         int tval = SharedSpectrumChAccessParamsPerBand_r16_oneShotHARQ_feedback_r16.decodeEnumValue (buffer);
         oneShotHARQ_feedback_r16 = SharedSpectrumChAccessParamsPerBand_r16_oneShotHARQ_feedback_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("oneShotHARQ_feedback_r16", -1);
      }
      else {
         oneShotHARQ_feedback_r16 = null;
      }

      // decode multiPUSCH_UL_grant_r16

      if (multiPUSCH_UL_grant_r16Present) {
         buffer.getContext().eventDispatcher.startElement("multiPUSCH_UL_grant_r16", -1);

         int tval = SharedSpectrumChAccessParamsPerBand_r16_multiPUSCH_UL_grant_r16.decodeEnumValue (buffer);
         multiPUSCH_UL_grant_r16 = SharedSpectrumChAccessParamsPerBand_r16_multiPUSCH_UL_grant_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("multiPUSCH_UL_grant_r16", -1);
      }
      else {
         multiPUSCH_UL_grant_r16 = null;
      }

      // decode csi_RS_RLM_r16

      if (csi_RS_RLM_r16Present) {
         buffer.getContext().eventDispatcher.startElement("csi_RS_RLM_r16", -1);

         int tval = SharedSpectrumChAccessParamsPerBand_r16_csi_RS_RLM_r16.decodeEnumValue (buffer);
         csi_RS_RLM_r16 = SharedSpectrumChAccessParamsPerBand_r16_csi_RS_RLM_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("csi_RS_RLM_r16", -1);
      }
      else {
         csi_RS_RLM_r16 = null;
      }

      // decode csi_RS_RRM_r16

      if (csi_RS_RRM_r16Present) {
         buffer.getContext().eventDispatcher.startElement("csi_RS_RRM_r16", -1);

         int tval = SharedSpectrumChAccessParamsPerBand_r16_csi_RS_RRM_r16.decodeEnumValue (buffer);
         csi_RS_RRM_r16 = SharedSpectrumChAccessParamsPerBand_r16_csi_RS_RRM_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("csi_RS_RRM_r16", -1);
      }
      else {
         csi_RS_RRM_r16 = null;
      }

      // decode periodicAndSemi_PersistentCSI_RS_r16

      if (periodicAndSemi_PersistentCSI_RS_r16Present) {
         buffer.getContext().eventDispatcher.startElement("periodicAndSemi_PersistentCSI_RS_r16", -1);

         int tval = SharedSpectrumChAccessParamsPerBand_r16_periodicAndSemi_PersistentCSI_RS_r16.decodeEnumValue (buffer);
         periodicAndSemi_PersistentCSI_RS_r16 = SharedSpectrumChAccessParamsPerBand_r16_periodicAndSemi_PersistentCSI_RS_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("periodicAndSemi_PersistentCSI_RS_r16", -1);
      }
      else {
         periodicAndSemi_PersistentCSI_RS_r16 = null;
      }

      // decode pusch_PRB_interlace_r16

      if (pusch_PRB_interlace_r16Present) {
         buffer.getContext().eventDispatcher.startElement("pusch_PRB_interlace_r16", -1);

         int tval = SharedSpectrumChAccessParamsPerBand_r16_pusch_PRB_interlace_r16.decodeEnumValue (buffer);
         pusch_PRB_interlace_r16 = SharedSpectrumChAccessParamsPerBand_r16_pusch_PRB_interlace_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("pusch_PRB_interlace_r16", -1);
      }
      else {
         pusch_PRB_interlace_r16 = null;
      }

      // decode pucch_F0_F1_PRB_Interlace_r16

      if (pucch_F0_F1_PRB_Interlace_r16Present) {
         buffer.getContext().eventDispatcher.startElement("pucch_F0_F1_PRB_Interlace_r16", -1);

         int tval = SharedSpectrumChAccessParamsPerBand_r16_pucch_F0_F1_PRB_Interlace_r16.decodeEnumValue (buffer);
         pucch_F0_F1_PRB_Interlace_r16 = SharedSpectrumChAccessParamsPerBand_r16_pucch_F0_F1_PRB_Interlace_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("pucch_F0_F1_PRB_Interlace_r16", -1);
      }
      else {
         pucch_F0_F1_PRB_Interlace_r16 = null;
      }

      // decode occ_PRB_PF2_PF3_r16

      if (occ_PRB_PF2_PF3_r16Present) {
         buffer.getContext().eventDispatcher.startElement("occ_PRB_PF2_PF3_r16", -1);

         int tval = SharedSpectrumChAccessParamsPerBand_r16_occ_PRB_PF2_PF3_r16.decodeEnumValue (buffer);
         occ_PRB_PF2_PF3_r16 = SharedSpectrumChAccessParamsPerBand_r16_occ_PRB_PF2_PF3_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("occ_PRB_PF2_PF3_r16", -1);
      }
      else {
         occ_PRB_PF2_PF3_r16 = null;
      }

      // decode extCP_rangeCG_PUSCH_r16

      if (extCP_rangeCG_PUSCH_r16Present) {
         buffer.getContext().eventDispatcher.startElement("extCP_rangeCG_PUSCH_r16", -1);

         int tval = SharedSpectrumChAccessParamsPerBand_r16_extCP_rangeCG_PUSCH_r16.decodeEnumValue (buffer);
         extCP_rangeCG_PUSCH_r16 = SharedSpectrumChAccessParamsPerBand_r16_extCP_rangeCG_PUSCH_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("extCP_rangeCG_PUSCH_r16", -1);
      }
      else {
         extCP_rangeCG_PUSCH_r16 = null;
      }

      // decode configuredGrantWithReTx_r16

      if (configuredGrantWithReTx_r16Present) {
         buffer.getContext().eventDispatcher.startElement("configuredGrantWithReTx_r16", -1);

         int tval = SharedSpectrumChAccessParamsPerBand_r16_configuredGrantWithReTx_r16.decodeEnumValue (buffer);
         configuredGrantWithReTx_r16 = SharedSpectrumChAccessParamsPerBand_r16_configuredGrantWithReTx_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("configuredGrantWithReTx_r16", -1);
      }
      else {
         configuredGrantWithReTx_r16 = null;
      }

      // decode ed_Threshold_r16

      if (ed_Threshold_r16Present) {
         buffer.getContext().eventDispatcher.startElement("ed_Threshold_r16", -1);

         int tval = SharedSpectrumChAccessParamsPerBand_r16_ed_Threshold_r16.decodeEnumValue (buffer);
         ed_Threshold_r16 = SharedSpectrumChAccessParamsPerBand_r16_ed_Threshold_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("ed_Threshold_r16", -1);
      }
      else {
         ed_Threshold_r16 = null;
      }

      // decode ul_DL_COT_Sharing_r16

      if (ul_DL_COT_Sharing_r16Present) {
         buffer.getContext().eventDispatcher.startElement("ul_DL_COT_Sharing_r16", -1);

         int tval = SharedSpectrumChAccessParamsPerBand_r16_ul_DL_COT_Sharing_r16.decodeEnumValue (buffer);
         ul_DL_COT_Sharing_r16 = SharedSpectrumChAccessParamsPerBand_r16_ul_DL_COT_Sharing_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("ul_DL_COT_Sharing_r16", -1);
      }
      else {
         ul_DL_COT_Sharing_r16 = null;
      }

      // decode mux_CG_UCI_HARQ_ACK_r16

      if (mux_CG_UCI_HARQ_ACK_r16Present) {
         buffer.getContext().eventDispatcher.startElement("mux_CG_UCI_HARQ_ACK_r16", -1);

         int tval = SharedSpectrumChAccessParamsPerBand_r16_mux_CG_UCI_HARQ_ACK_r16.decodeEnumValue (buffer);
         mux_CG_UCI_HARQ_ACK_r16 = SharedSpectrumChAccessParamsPerBand_r16_mux_CG_UCI_HARQ_ACK_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("mux_CG_UCI_HARQ_ACK_r16", -1);
      }
      else {
         mux_CG_UCI_HARQ_ACK_r16 = null;
      }

      // decode cg_resourceConfig_r16

      if (cg_resourceConfig_r16Present) {
         buffer.getContext().eventDispatcher.startElement("cg_resourceConfig_r16", -1);

         int tval = SharedSpectrumChAccessParamsPerBand_r16_cg_resourceConfig_r16.decodeEnumValue (buffer);
         cg_resourceConfig_r16 = SharedSpectrumChAccessParamsPerBand_r16_cg_resourceConfig_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("cg_resourceConfig_r16", -1);
      }
      else {
         cg_resourceConfig_r16 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (ul_DynamicChAccess_r16 != null) ul_DynamicChAccess_r16.print (_sb, "ul_DynamicChAccess_r16", _level+1);
      if (ul_Semi_StaticChAccess_r16 != null) ul_Semi_StaticChAccess_r16.print (_sb, "ul_Semi_StaticChAccess_r16", _level+1);
      if (ssb_RRM_DynamicChAccess_r16 != null) ssb_RRM_DynamicChAccess_r16.print (_sb, "ssb_RRM_DynamicChAccess_r16", _level+1);
      if (ssb_RRM_Semi_StaticChAccess_r16 != null) ssb_RRM_Semi_StaticChAccess_r16.print (_sb, "ssb_RRM_Semi_StaticChAccess_r16", _level+1);
      if (mib_Acquisition_r16 != null) mib_Acquisition_r16.print (_sb, "mib_Acquisition_r16", _level+1);
      if (ssb_RLM_DynamicChAccess_r16 != null) ssb_RLM_DynamicChAccess_r16.print (_sb, "ssb_RLM_DynamicChAccess_r16", _level+1);
      if (ssb_RLM_Semi_StaticChAccess_r16 != null) ssb_RLM_Semi_StaticChAccess_r16.print (_sb, "ssb_RLM_Semi_StaticChAccess_r16", _level+1);
      if (sib1_Acquisition_r16 != null) sib1_Acquisition_r16.print (_sb, "sib1_Acquisition_r16", _level+1);
      if (extRA_ResponseWindow_r16 != null) extRA_ResponseWindow_r16.print (_sb, "extRA_ResponseWindow_r16", _level+1);
      if (ssb_BFD_CBD_dynamicChannelAccess_r16 != null) ssb_BFD_CBD_dynamicChannelAccess_r16.print (_sb, "ssb_BFD_CBD_dynamicChannelAccess_r16", _level+1);
      if (ssb_BFD_CBD_semi_staticChannelAccess_r16 != null) ssb_BFD_CBD_semi_staticChannelAccess_r16.print (_sb, "ssb_BFD_CBD_semi_staticChannelAccess_r16", _level+1);
      if (csi_RS_BFD_CBD_r16 != null) csi_RS_BFD_CBD_r16.print (_sb, "csi_RS_BFD_CBD_r16", _level+1);
      if (ul_ChannelBW_SCell_10mhz_r16 != null) ul_ChannelBW_SCell_10mhz_r16.print (_sb, "ul_ChannelBW_SCell_10mhz_r16", _level+1);
      if (rssi_ChannelOccupancyReporting_r16 != null) rssi_ChannelOccupancyReporting_r16.print (_sb, "rssi_ChannelOccupancyReporting_r16", _level+1);
      if (srs_StartAnyOFDM_Symbol_r16 != null) srs_StartAnyOFDM_Symbol_r16.print (_sb, "srs_StartAnyOFDM_Symbol_r16", _level+1);
      if (searchSpaceFreqMonitorLocation_r16 != null) searchSpaceFreqMonitorLocation_r16.print (_sb, "searchSpaceFreqMonitorLocation_r16", _level+1);
      if (coreset_RB_Offset_r16 != null) coreset_RB_Offset_r16.print (_sb, "coreset_RB_Offset_r16", _level+1);
      if (cgi_Acquisition_r16 != null) cgi_Acquisition_r16.print (_sb, "cgi_Acquisition_r16", _level+1);
      if (configuredUL_Tx_r16 != null) configuredUL_Tx_r16.print (_sb, "configuredUL_Tx_r16", _level+1);
      if (prach_Wideband_r16 != null) prach_Wideband_r16.print (_sb, "prach_Wideband_r16", _level+1);
      if (dci_AvailableRB_Set_r16 != null) dci_AvailableRB_Set_r16.print (_sb, "dci_AvailableRB_Set_r16", _level+1);
      if (dci_ChOccupancyDuration_r16 != null) dci_ChOccupancyDuration_r16.print (_sb, "dci_ChOccupancyDuration_r16", _level+1);
      if (typeB_PDSCH_length_r16 != null) typeB_PDSCH_length_r16.print (_sb, "typeB_PDSCH_length_r16", _level+1);
      if (searchSpaceSetGroupSwitchingwithDCI_r16 != null) searchSpaceSetGroupSwitchingwithDCI_r16.print (_sb, "searchSpaceSetGroupSwitchingwithDCI_r16", _level+1);
      if (searchSpaceSetGroupSwitchingwithoutDCI_r16 != null) searchSpaceSetGroupSwitchingwithoutDCI_r16.print (_sb, "searchSpaceSetGroupSwitchingwithoutDCI_r16", _level+1);
      if (searchSpaceSetGroupSwitchingcapability2_r16 != null) searchSpaceSetGroupSwitchingcapability2_r16.print (_sb, "searchSpaceSetGroupSwitchingcapability2_r16", _level+1);
      if (non_numericalPDSCH_HARQ_timing_r16 != null) non_numericalPDSCH_HARQ_timing_r16.print (_sb, "non_numericalPDSCH_HARQ_timing_r16", _level+1);
      if (enhancedDynamicHARQ_codebook_r16 != null) enhancedDynamicHARQ_codebook_r16.print (_sb, "enhancedDynamicHARQ_codebook_r16", _level+1);
      if (oneShotHARQ_feedback_r16 != null) oneShotHARQ_feedback_r16.print (_sb, "oneShotHARQ_feedback_r16", _level+1);
      if (multiPUSCH_UL_grant_r16 != null) multiPUSCH_UL_grant_r16.print (_sb, "multiPUSCH_UL_grant_r16", _level+1);
      if (csi_RS_RLM_r16 != null) csi_RS_RLM_r16.print (_sb, "csi_RS_RLM_r16", _level+1);
      if (csi_RS_RRM_r16 != null) csi_RS_RRM_r16.print (_sb, "csi_RS_RRM_r16", _level+1);
      if (periodicAndSemi_PersistentCSI_RS_r16 != null) periodicAndSemi_PersistentCSI_RS_r16.print (_sb, "periodicAndSemi_PersistentCSI_RS_r16", _level+1);
      if (pusch_PRB_interlace_r16 != null) pusch_PRB_interlace_r16.print (_sb, "pusch_PRB_interlace_r16", _level+1);
      if (pucch_F0_F1_PRB_Interlace_r16 != null) pucch_F0_F1_PRB_Interlace_r16.print (_sb, "pucch_F0_F1_PRB_Interlace_r16", _level+1);
      if (occ_PRB_PF2_PF3_r16 != null) occ_PRB_PF2_PF3_r16.print (_sb, "occ_PRB_PF2_PF3_r16", _level+1);
      if (extCP_rangeCG_PUSCH_r16 != null) extCP_rangeCG_PUSCH_r16.print (_sb, "extCP_rangeCG_PUSCH_r16", _level+1);
      if (configuredGrantWithReTx_r16 != null) configuredGrantWithReTx_r16.print (_sb, "configuredGrantWithReTx_r16", _level+1);
      if (ed_Threshold_r16 != null) ed_Threshold_r16.print (_sb, "ed_Threshold_r16", _level+1);
      if (ul_DL_COT_Sharing_r16 != null) ul_DL_COT_Sharing_r16.print (_sb, "ul_DL_COT_Sharing_r16", _level+1);
      if (mux_CG_UCI_HARQ_ACK_r16 != null) mux_CG_UCI_HARQ_ACK_r16.print (_sb, "mux_CG_UCI_HARQ_ACK_r16", _level+1);
      if (cg_resourceConfig_r16 != null) cg_resourceConfig_r16.print (_sb, "cg_resourceConfig_r16", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
