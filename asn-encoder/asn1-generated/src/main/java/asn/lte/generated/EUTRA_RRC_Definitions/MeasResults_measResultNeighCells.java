/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MeasResults_measResultNeighCells extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CHOICE";
   }

   // Choice element identifier constants
   public final static byte _MEASRESULTLISTEUTRA = 1;
   public final static byte _MEASRESULTLISTUTRA = 2;
   public final static byte _MEASRESULTLISTGERAN = 3;
   public final static byte _MEASRESULTSCDMA2000 = 4;
   public final static byte _MEASRESULTNEIGHCELLLISTNR_R15 = 5;
   public final static byte _EXTELEM1 = 6;

   public MeasResults_measResultNeighCells () {
      super();
   }

   public MeasResults_measResultNeighCells (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _MEASRESULTLISTEUTRA: return "measResultListEUTRA";
      case _MEASRESULTLISTUTRA: return "measResultListUTRA";
      case _MEASRESULTLISTGERAN: return "measResultListGERAN";
      case _MEASRESULTSCDMA2000: return "measResultsCDMA2000";
      case _MEASRESULTNEIGHCELLLISTNR_R15: return "measResultNeighCellListNR_r15";
      case _EXTELEM1: return "...";
      default: return "UNDEFINED";
      }
   }

   public void set_measResultListEUTRA (MeasResultListEUTRA value) {
      setElement (_MEASRESULTLISTEUTRA, value);
   }

   public void set_measResultListUTRA (MeasResultListUTRA value) {
      setElement (_MEASRESULTLISTUTRA, value);
   }

   public void set_measResultListGERAN (MeasResultListGERAN value) {
      setElement (_MEASRESULTLISTGERAN, value);
   }

   public void set_measResultsCDMA2000 (MeasResultsCDMA2000 value) {
      setElement (_MEASRESULTSCDMA2000, value);
   }

   public void set_measResultNeighCellListNR_r15 (MeasResultCellListNR_r15 value) {
      setElement (_MEASRESULTNEIGHCELLLISTNR_R15, value);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      Asn1PerDecodeBuffer savedBuffer = null;
      boolean extbit = buffer.decodeBit ("extbit");

      if (!extbit) {
         int idx = (int) buffer.decodeConsWholeNumber (4, "index");
         choiceID = idx + 1;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         switch (idx) {
            // measResultListEUTRA
            case 0: { 
               MeasResultListEUTRA measResultListEUTRA;
               element = measResultListEUTRA = new MeasResultListEUTRA();
               measResultListEUTRA.decode (buffer);
               break;
            }

            // measResultListUTRA
            case 1: { 
               MeasResultListUTRA measResultListUTRA;
               element = measResultListUTRA = new MeasResultListUTRA();
               measResultListUTRA.decode (buffer);
               break;
            }

            // measResultListGERAN
            case 2: { 
               MeasResultListGERAN measResultListGERAN;
               element = measResultListGERAN = new MeasResultListGERAN();
               measResultListGERAN.decode (buffer);
               break;
            }

            // measResultsCDMA2000
            case 3: { 
               MeasResultsCDMA2000 measResultsCDMA2000;
               element = measResultsCDMA2000 = new MeasResultsCDMA2000();
               measResultsCDMA2000.decode (buffer);
               break;
            }

            default:
            throw new Asn1InvalidChoiceOptionException (buffer, idx);
         }
      }
      else {
         int idx = (int) buffer.decodeSmallNonNegWholeNumber ();
         choiceID = idx + 5;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         buffer.byteAlign();

         Asn1OpenType openType = new Asn1OpenType ();
         openType.decode (buffer);

         savedBuffer = buffer;
         buffer = new Asn1PerDecodeBuffer (openType.value, savedBuffer.isAligned());
         buffer.setEventHandlerList (savedBuffer);

         switch (idx) {
            // measResultNeighCellListNR_r15
            case 0: { 
               MeasResultCellListNR_r15 measResultNeighCellListNR_r15;
               element = measResultNeighCellListNR_r15 = new MeasResultCellListNR_r15();
               measResultNeighCellListNR_r15.decode (buffer);
               break;
            }

            // extElem1
            case 1: { 
               Asn1OpenType extElem1;
               element = extElem1 = new Asn1OpenType();
               extElem1.decode (buffer);

               buffer.invokeCharacters(extElem1.toString());
               break;
            }

            default:
               setElement (_EXTELEM1, openType);
               buffer.invokeCharacters (openType.toString());
         }

      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);

      if (savedBuffer != null) {
         buffer = savedBuffer;
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (element != null) {
         element.print (_sb, getElemName(), _level+1);
      }
      indent (_sb, _level);
      _sb.append("}\n");
   }

}
