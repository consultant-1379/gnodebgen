/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class RadioResourceConfigDedicatedSCG_r12 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "RadioResourceConfigDedicatedSCG-r12";
   }

   public DRB_ToAddModListSCG_r12 drb_ToAddModListSCG_r12;  // optional
   public MAC_MainConfig mac_MainConfigSCG_r12;  // optional
   public RLF_TimersAndConstantsSCG_r12 rlf_TimersAndConstantsSCG_r12;  // optional
   public boolean mV2ExtPresent;
   public DRB_ToAddModListSCG_r15 drb_ToAddModListSCG_r15;  // optional
   public boolean mV3ExtPresent;
   public SRB_ToAddModList srb_ToAddModListSCG_r15;  // optional
   public SRB_ToReleaseList_r15 srb_ToReleaseListSCG_r15;  // optional
   public Asn1OpenExt extElem1;

   public RadioResourceConfigDedicatedSCG_r12 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public RadioResourceConfigDedicatedSCG_r12 (
      DRB_ToAddModListSCG_r12 drb_ToAddModListSCG_r12_,
      MAC_MainConfig mac_MainConfigSCG_r12_,
      RLF_TimersAndConstantsSCG_r12 rlf_TimersAndConstantsSCG_r12_,
      DRB_ToAddModListSCG_r15 drb_ToAddModListSCG_r15_,
      SRB_ToAddModList srb_ToAddModListSCG_r15_,
      SRB_ToReleaseList_r15 srb_ToReleaseListSCG_r15_
   ) {
      super();
      drb_ToAddModListSCG_r12 = drb_ToAddModListSCG_r12_;
      mac_MainConfigSCG_r12 = mac_MainConfigSCG_r12_;
      rlf_TimersAndConstantsSCG_r12 = rlf_TimersAndConstantsSCG_r12_;
      drb_ToAddModListSCG_r15 = drb_ToAddModListSCG_r15_;
      srb_ToAddModListSCG_r15 = srb_ToAddModListSCG_r15_;
      srb_ToReleaseListSCG_r15 = srb_ToReleaseListSCG_r15_;
   }

   public void init () {
      drb_ToAddModListSCG_r12 = null;
      mac_MainConfigSCG_r12 = null;
      rlf_TimersAndConstantsSCG_r12 = null;
      drb_ToAddModListSCG_r15 = null;
      srb_ToAddModListSCG_r15 = null;
      srb_ToReleaseListSCG_r15 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return drb_ToAddModListSCG_r12;
         case 1: return mac_MainConfigSCG_r12;
         case 2: return rlf_TimersAndConstantsSCG_r12;
         case 3: return drb_ToAddModListSCG_r15;
         case 4: return srb_ToAddModListSCG_r15;
         case 5: return srb_ToReleaseListSCG_r15;
         case 6: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "drb-ToAddModListSCG-r12";
         case 1: return "mac-MainConfigSCG-r12";
         case 2: return "rlf-TimersAndConstantsSCG-r12";
         case 3: return "drb-ToAddModListSCG-r15";
         case 4: return "srb-ToAddModListSCG-r15";
         case 5: return "srb-ToReleaseListSCG-r15";
         case 6: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean drb_ToAddModListSCG_r12Present = buffer.decodeBit ("drb_ToAddModListSCG_r12Present");
      boolean mac_MainConfigSCG_r12Present = buffer.decodeBit ("mac_MainConfigSCG_r12Present");
      boolean rlf_TimersAndConstantsSCG_r12Present = buffer.decodeBit ("rlf_TimersAndConstantsSCG_r12Present");

      // decode drb_ToAddModListSCG_r12

      if (drb_ToAddModListSCG_r12Present) {
         buffer.getContext().eventDispatcher.startElement("drb_ToAddModListSCG_r12", -1);

         drb_ToAddModListSCG_r12 = new DRB_ToAddModListSCG_r12();
         drb_ToAddModListSCG_r12.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("drb_ToAddModListSCG_r12", -1);
      }
      else {
         drb_ToAddModListSCG_r12 = null;
      }

      // decode mac_MainConfigSCG_r12

      if (mac_MainConfigSCG_r12Present) {
         buffer.getContext().eventDispatcher.startElement("mac_MainConfigSCG_r12", -1);

         mac_MainConfigSCG_r12 = new MAC_MainConfig();
         mac_MainConfigSCG_r12.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("mac_MainConfigSCG_r12", -1);
      }
      else {
         mac_MainConfigSCG_r12 = null;
      }

      // decode rlf_TimersAndConstantsSCG_r12

      if (rlf_TimersAndConstantsSCG_r12Present) {
         buffer.getContext().eventDispatcher.startElement("rlf_TimersAndConstantsSCG_r12", -1);

         rlf_TimersAndConstantsSCG_r12 = new RLF_TimersAndConstantsSCG_r12();
         rlf_TimersAndConstantsSCG_r12.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("rlf_TimersAndConstantsSCG_r12", -1);
      }
      else {
         rlf_TimersAndConstantsSCG_r12 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean drb_ToAddModListSCG_r15Present = buffer.decodeBit ("drb_ToAddModListSCG_r15Present");

            // decode drb_ToAddModListSCG_r15

            if (drb_ToAddModListSCG_r15Present) {
               buffer.getContext().eventDispatcher.startElement("drb_ToAddModListSCG_r15", -1);

               drb_ToAddModListSCG_r15 = new DRB_ToAddModListSCG_r15();
               drb_ToAddModListSCG_r15.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("drb_ToAddModListSCG_r15", -1);
            }
            else {
               drb_ToAddModListSCG_r15 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean srb_ToAddModListSCG_r15Present = buffer.decodeBit ("srb_ToAddModListSCG_r15Present");

            boolean srb_ToReleaseListSCG_r15Present = buffer.decodeBit ("srb_ToReleaseListSCG_r15Present");

            // decode srb_ToAddModListSCG_r15

            if (srb_ToAddModListSCG_r15Present) {
               buffer.getContext().eventDispatcher.startElement("srb_ToAddModListSCG_r15", -1);

               srb_ToAddModListSCG_r15 = new SRB_ToAddModList();
               srb_ToAddModListSCG_r15.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("srb_ToAddModListSCG_r15", -1);
            }
            else {
               srb_ToAddModListSCG_r15 = null;
            }

            // decode srb_ToReleaseListSCG_r15

            if (srb_ToReleaseListSCG_r15Present) {
               buffer.getContext().eventDispatcher.startElement("srb_ToReleaseListSCG_r15", -1);

               srb_ToReleaseListSCG_r15 = new SRB_ToReleaseList_r15();
               srb_ToReleaseListSCG_r15.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("srb_ToReleaseListSCG_r15", -1);
            }
            else {
               srb_ToReleaseListSCG_r15 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (drb_ToAddModListSCG_r12 != null) drb_ToAddModListSCG_r12.print (_sb, "drb_ToAddModListSCG_r12", _level+1);
      if (mac_MainConfigSCG_r12 != null) mac_MainConfigSCG_r12.print (_sb, "mac_MainConfigSCG_r12", _level+1);
      if (rlf_TimersAndConstantsSCG_r12 != null) rlf_TimersAndConstantsSCG_r12.print (_sb, "rlf_TimersAndConstantsSCG_r12", _level+1);
      if (drb_ToAddModListSCG_r15 != null) drb_ToAddModListSCG_r15.print (_sb, "drb_ToAddModListSCG_r15", _level+1);
      if (srb_ToAddModListSCG_r15 != null) srb_ToAddModListSCG_r15.print (_sb, "srb_ToAddModListSCG_r15", _level+1);
      if (srb_ToReleaseListSCG_r15 != null) srb_ToReleaseListSCG_r15.print (_sb, "srb_ToReleaseListSCG_r15", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
