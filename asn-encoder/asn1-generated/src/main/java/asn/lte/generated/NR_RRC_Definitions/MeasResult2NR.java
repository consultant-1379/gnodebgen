/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MeasResult2NR extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "MeasResult2NR";
   }

   public ARFCN_ValueNR ssbFrequency;  // optional
   public ARFCN_ValueNR refFreqCSI_RS;  // optional
   public MeasResultNR measResultServingCell;  // optional
   public MeasResultListNR measResultNeighCellListNR;  // optional
   public Asn1OpenExt extElem1;

   public MeasResult2NR () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MeasResult2NR (
      ARFCN_ValueNR ssbFrequency_,
      ARFCN_ValueNR refFreqCSI_RS_,
      MeasResultNR measResultServingCell_,
      MeasResultListNR measResultNeighCellListNR_
   ) {
      super();
      ssbFrequency = ssbFrequency_;
      refFreqCSI_RS = refFreqCSI_RS_;
      measResultServingCell = measResultServingCell_;
      measResultNeighCellListNR = measResultNeighCellListNR_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public MeasResult2NR (long ssbFrequency_,
      long refFreqCSI_RS_,
      MeasResultNR measResultServingCell_,
      MeasResultListNR measResultNeighCellListNR_
   ) {
      super();
      ssbFrequency = new ARFCN_ValueNR (ssbFrequency_);
      refFreqCSI_RS = new ARFCN_ValueNR (refFreqCSI_RS_);
      measResultServingCell = measResultServingCell_;
      measResultNeighCellListNR = measResultNeighCellListNR_;
   }

   public void init () {
      ssbFrequency = null;
      refFreqCSI_RS = null;
      measResultServingCell = null;
      measResultNeighCellListNR = null;
      extElem1 = null;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return ssbFrequency;
         case 1: return refFreqCSI_RS;
         case 2: return measResultServingCell;
         case 3: return measResultNeighCellListNR;
         case 4: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "ssbFrequency";
         case 1: return "refFreqCSI-RS";
         case 2: return "measResultServingCell";
         case 3: return "measResultNeighCellListNR";
         case 4: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean ssbFrequencyPresent = buffer.decodeBit ("ssbFrequencyPresent");
      boolean refFreqCSI_RSPresent = buffer.decodeBit ("refFreqCSI_RSPresent");
      boolean measResultServingCellPresent = buffer.decodeBit ("measResultServingCellPresent");
      boolean measResultNeighCellListNRPresent = buffer.decodeBit ("measResultNeighCellListNRPresent");

      // decode ssbFrequency

      if (ssbFrequencyPresent) {
         buffer.getContext().eventDispatcher.startElement("ssbFrequency", -1);

         ssbFrequency = new ARFCN_ValueNR();
         ssbFrequency.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ssbFrequency", -1);
      }
      else {
         ssbFrequency = null;
      }

      // decode refFreqCSI_RS

      if (refFreqCSI_RSPresent) {
         buffer.getContext().eventDispatcher.startElement("refFreqCSI_RS", -1);

         refFreqCSI_RS = new ARFCN_ValueNR();
         refFreqCSI_RS.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("refFreqCSI_RS", -1);
      }
      else {
         refFreqCSI_RS = null;
      }

      // decode measResultServingCell

      if (measResultServingCellPresent) {
         buffer.getContext().eventDispatcher.startElement("measResultServingCell", -1);

         measResultServingCell = new MeasResultNR();
         measResultServingCell.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("measResultServingCell", -1);
      }
      else {
         measResultServingCell = null;
      }

      // decode measResultNeighCellListNR

      if (measResultNeighCellListNRPresent) {
         buffer.getContext().eventDispatcher.startElement("measResultNeighCellListNR", -1);

         measResultNeighCellListNR = new MeasResultListNR();
         measResultNeighCellListNR.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("measResultNeighCellListNR", -1);
      }
      else {
         measResultNeighCellListNR = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (ssbFrequency != null) ssbFrequency.print (_sb, "ssbFrequency", _level+1);
      if (refFreqCSI_RS != null) refFreqCSI_RS.print (_sb, "refFreqCSI_RS", _level+1);
      if (measResultServingCell != null) measResultServingCell.print (_sb, "measResultServingCell", _level+1);
      if (measResultNeighCellListNR != null) measResultNeighCellListNR.print (_sb, "measResultNeighCellListNR", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
