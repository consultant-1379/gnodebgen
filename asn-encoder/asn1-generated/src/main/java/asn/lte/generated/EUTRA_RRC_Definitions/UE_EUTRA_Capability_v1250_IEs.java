/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class UE_EUTRA_Capability_v1250_IEs extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "UE-EUTRA-Capability-v1250-IEs";
   }

   public PhyLayerParameters_v1250 phyLayerParameters_v1250;  // optional
   public RF_Parameters_v1250 rf_Parameters_v1250;  // optional
   public RLC_Parameters_r12 rlc_Parameters_r12;  // optional
   public UE_BasedNetwPerfMeasParameters_v1250 ue_BasedNetwPerfMeasParameters_v1250;  // optional
   public Asn1Integer ue_CategoryDL_r12;  // optional
   public Asn1Integer ue_CategoryUL_r12;  // optional
   public WLAN_IW_Parameters_r12 wlan_IW_Parameters_r12;  // optional
   public MeasParameters_v1250 measParameters_v1250;  // optional
   public DC_Parameters_r12 dc_Parameters_r12;  // optional
   public MBMS_Parameters_v1250 mbms_Parameters_v1250;  // optional
   public MAC_Parameters_r12 mac_Parameters_r12;  // optional
   public UE_EUTRA_CapabilityAddXDD_Mode_v1250 fdd_Add_UE_EUTRA_Capabilities_v1250;  // optional
   public UE_EUTRA_CapabilityAddXDD_Mode_v1250 tdd_Add_UE_EUTRA_Capabilities_v1250;  // optional
   public SL_Parameters_r12 sl_Parameters_r12;  // optional
   public UE_EUTRA_Capability_v1260_IEs nonCriticalExtension;  // optional

   public UE_EUTRA_Capability_v1250_IEs () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public UE_EUTRA_Capability_v1250_IEs (
      PhyLayerParameters_v1250 phyLayerParameters_v1250_,
      RF_Parameters_v1250 rf_Parameters_v1250_,
      RLC_Parameters_r12 rlc_Parameters_r12_,
      UE_BasedNetwPerfMeasParameters_v1250 ue_BasedNetwPerfMeasParameters_v1250_,
      Asn1Integer ue_CategoryDL_r12_,
      Asn1Integer ue_CategoryUL_r12_,
      WLAN_IW_Parameters_r12 wlan_IW_Parameters_r12_,
      MeasParameters_v1250 measParameters_v1250_,
      DC_Parameters_r12 dc_Parameters_r12_,
      MBMS_Parameters_v1250 mbms_Parameters_v1250_,
      MAC_Parameters_r12 mac_Parameters_r12_,
      UE_EUTRA_CapabilityAddXDD_Mode_v1250 fdd_Add_UE_EUTRA_Capabilities_v1250_,
      UE_EUTRA_CapabilityAddXDD_Mode_v1250 tdd_Add_UE_EUTRA_Capabilities_v1250_,
      SL_Parameters_r12 sl_Parameters_r12_,
      UE_EUTRA_Capability_v1260_IEs nonCriticalExtension_
   ) {
      super();
      phyLayerParameters_v1250 = phyLayerParameters_v1250_;
      rf_Parameters_v1250 = rf_Parameters_v1250_;
      rlc_Parameters_r12 = rlc_Parameters_r12_;
      ue_BasedNetwPerfMeasParameters_v1250 = ue_BasedNetwPerfMeasParameters_v1250_;
      ue_CategoryDL_r12 = ue_CategoryDL_r12_;
      ue_CategoryUL_r12 = ue_CategoryUL_r12_;
      wlan_IW_Parameters_r12 = wlan_IW_Parameters_r12_;
      measParameters_v1250 = measParameters_v1250_;
      dc_Parameters_r12 = dc_Parameters_r12_;
      mbms_Parameters_v1250 = mbms_Parameters_v1250_;
      mac_Parameters_r12 = mac_Parameters_r12_;
      fdd_Add_UE_EUTRA_Capabilities_v1250 = fdd_Add_UE_EUTRA_Capabilities_v1250_;
      tdd_Add_UE_EUTRA_Capabilities_v1250 = tdd_Add_UE_EUTRA_Capabilities_v1250_;
      sl_Parameters_r12 = sl_Parameters_r12_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public UE_EUTRA_Capability_v1250_IEs (PhyLayerParameters_v1250 phyLayerParameters_v1250_,
      RF_Parameters_v1250 rf_Parameters_v1250_,
      RLC_Parameters_r12 rlc_Parameters_r12_,
      UE_BasedNetwPerfMeasParameters_v1250 ue_BasedNetwPerfMeasParameters_v1250_,
      long ue_CategoryDL_r12_,
      long ue_CategoryUL_r12_,
      WLAN_IW_Parameters_r12 wlan_IW_Parameters_r12_,
      MeasParameters_v1250 measParameters_v1250_,
      DC_Parameters_r12 dc_Parameters_r12_,
      MBMS_Parameters_v1250 mbms_Parameters_v1250_,
      MAC_Parameters_r12 mac_Parameters_r12_,
      UE_EUTRA_CapabilityAddXDD_Mode_v1250 fdd_Add_UE_EUTRA_Capabilities_v1250_,
      UE_EUTRA_CapabilityAddXDD_Mode_v1250 tdd_Add_UE_EUTRA_Capabilities_v1250_,
      SL_Parameters_r12 sl_Parameters_r12_,
      UE_EUTRA_Capability_v1260_IEs nonCriticalExtension_
   ) {
      super();
      phyLayerParameters_v1250 = phyLayerParameters_v1250_;
      rf_Parameters_v1250 = rf_Parameters_v1250_;
      rlc_Parameters_r12 = rlc_Parameters_r12_;
      ue_BasedNetwPerfMeasParameters_v1250 = ue_BasedNetwPerfMeasParameters_v1250_;
      ue_CategoryDL_r12 = new Asn1Integer (ue_CategoryDL_r12_);
      ue_CategoryUL_r12 = new Asn1Integer (ue_CategoryUL_r12_);
      wlan_IW_Parameters_r12 = wlan_IW_Parameters_r12_;
      measParameters_v1250 = measParameters_v1250_;
      dc_Parameters_r12 = dc_Parameters_r12_;
      mbms_Parameters_v1250 = mbms_Parameters_v1250_;
      mac_Parameters_r12 = mac_Parameters_r12_;
      fdd_Add_UE_EUTRA_Capabilities_v1250 = fdd_Add_UE_EUTRA_Capabilities_v1250_;
      tdd_Add_UE_EUTRA_Capabilities_v1250 = tdd_Add_UE_EUTRA_Capabilities_v1250_;
      sl_Parameters_r12 = sl_Parameters_r12_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   public void init () {
      phyLayerParameters_v1250 = null;
      rf_Parameters_v1250 = null;
      rlc_Parameters_r12 = null;
      ue_BasedNetwPerfMeasParameters_v1250 = null;
      ue_CategoryDL_r12 = null;
      ue_CategoryUL_r12 = null;
      wlan_IW_Parameters_r12 = null;
      measParameters_v1250 = null;
      dc_Parameters_r12 = null;
      mbms_Parameters_v1250 = null;
      mac_Parameters_r12 = null;
      fdd_Add_UE_EUTRA_Capabilities_v1250 = null;
      tdd_Add_UE_EUTRA_Capabilities_v1250 = null;
      sl_Parameters_r12 = null;
      nonCriticalExtension = null;
   }

   public int getElementCount() { return 15; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return phyLayerParameters_v1250;
         case 1: return rf_Parameters_v1250;
         case 2: return rlc_Parameters_r12;
         case 3: return ue_BasedNetwPerfMeasParameters_v1250;
         case 4: return ue_CategoryDL_r12;
         case 5: return ue_CategoryUL_r12;
         case 6: return wlan_IW_Parameters_r12;
         case 7: return measParameters_v1250;
         case 8: return dc_Parameters_r12;
         case 9: return mbms_Parameters_v1250;
         case 10: return mac_Parameters_r12;
         case 11: return fdd_Add_UE_EUTRA_Capabilities_v1250;
         case 12: return tdd_Add_UE_EUTRA_Capabilities_v1250;
         case 13: return sl_Parameters_r12;
         case 14: return nonCriticalExtension;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "phyLayerParameters-v1250";
         case 1: return "rf-Parameters-v1250";
         case 2: return "rlc-Parameters-r12";
         case 3: return "ue-BasedNetwPerfMeasParameters-v1250";
         case 4: return "ue-CategoryDL-r12";
         case 5: return "ue-CategoryUL-r12";
         case 6: return "wlan-IW-Parameters-r12";
         case 7: return "measParameters-v1250";
         case 8: return "dc-Parameters-r12";
         case 9: return "mbms-Parameters-v1250";
         case 10: return "mac-Parameters-r12";
         case 11: return "fdd-Add-UE-EUTRA-Capabilities-v1250";
         case 12: return "tdd-Add-UE-EUTRA-Capabilities-v1250";
         case 13: return "sl-Parameters-r12";
         case 14: return "nonCriticalExtension";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean phyLayerParameters_v1250Present = buffer.decodeBit ("phyLayerParameters_v1250Present");
      boolean rf_Parameters_v1250Present = buffer.decodeBit ("rf_Parameters_v1250Present");
      boolean rlc_Parameters_r12Present = buffer.decodeBit ("rlc_Parameters_r12Present");
      boolean ue_BasedNetwPerfMeasParameters_v1250Present = buffer.decodeBit ("ue_BasedNetwPerfMeasParameters_v1250Present");
      boolean ue_CategoryDL_r12Present = buffer.decodeBit ("ue_CategoryDL_r12Present");
      boolean ue_CategoryUL_r12Present = buffer.decodeBit ("ue_CategoryUL_r12Present");
      boolean wlan_IW_Parameters_r12Present = buffer.decodeBit ("wlan_IW_Parameters_r12Present");
      boolean measParameters_v1250Present = buffer.decodeBit ("measParameters_v1250Present");
      boolean dc_Parameters_r12Present = buffer.decodeBit ("dc_Parameters_r12Present");
      boolean mbms_Parameters_v1250Present = buffer.decodeBit ("mbms_Parameters_v1250Present");
      boolean mac_Parameters_r12Present = buffer.decodeBit ("mac_Parameters_r12Present");
      boolean fdd_Add_UE_EUTRA_Capabilities_v1250Present = buffer.decodeBit ("fdd_Add_UE_EUTRA_Capabilities_v1250Present");
      boolean tdd_Add_UE_EUTRA_Capabilities_v1250Present = buffer.decodeBit ("tdd_Add_UE_EUTRA_Capabilities_v1250Present");
      boolean sl_Parameters_r12Present = buffer.decodeBit ("sl_Parameters_r12Present");
      boolean nonCriticalExtensionPresent = buffer.decodeBit ("nonCriticalExtensionPresent");

      // decode phyLayerParameters_v1250

      if (phyLayerParameters_v1250Present) {
         buffer.getContext().eventDispatcher.startElement("phyLayerParameters_v1250", -1);

         phyLayerParameters_v1250 = new PhyLayerParameters_v1250();
         phyLayerParameters_v1250.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("phyLayerParameters_v1250", -1);
      }
      else {
         phyLayerParameters_v1250 = null;
      }

      // decode rf_Parameters_v1250

      if (rf_Parameters_v1250Present) {
         buffer.getContext().eventDispatcher.startElement("rf_Parameters_v1250", -1);

         rf_Parameters_v1250 = new RF_Parameters_v1250();
         rf_Parameters_v1250.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("rf_Parameters_v1250", -1);
      }
      else {
         rf_Parameters_v1250 = null;
      }

      // decode rlc_Parameters_r12

      if (rlc_Parameters_r12Present) {
         buffer.getContext().eventDispatcher.startElement("rlc_Parameters_r12", -1);

         rlc_Parameters_r12 = new RLC_Parameters_r12();
         rlc_Parameters_r12.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("rlc_Parameters_r12", -1);
      }
      else {
         rlc_Parameters_r12 = null;
      }

      // decode ue_BasedNetwPerfMeasParameters_v1250

      if (ue_BasedNetwPerfMeasParameters_v1250Present) {
         buffer.getContext().eventDispatcher.startElement("ue_BasedNetwPerfMeasParameters_v1250", -1);

         ue_BasedNetwPerfMeasParameters_v1250 = new UE_BasedNetwPerfMeasParameters_v1250();
         ue_BasedNetwPerfMeasParameters_v1250.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ue_BasedNetwPerfMeasParameters_v1250", -1);
      }
      else {
         ue_BasedNetwPerfMeasParameters_v1250 = null;
      }

      // decode ue_CategoryDL_r12

      if (ue_CategoryDL_r12Present) {
         buffer.getContext().eventDispatcher.startElement("ue_CategoryDL_r12", -1);

         ue_CategoryDL_r12 = new Asn1Integer();
         ue_CategoryDL_r12.decode (buffer, 0, 14);

         buffer.invokeCharacters(ue_CategoryDL_r12.toString());
         buffer.getContext().eventDispatcher.endElement("ue_CategoryDL_r12", -1);
      }
      else {
         ue_CategoryDL_r12 = null;
      }

      // decode ue_CategoryUL_r12

      if (ue_CategoryUL_r12Present) {
         buffer.getContext().eventDispatcher.startElement("ue_CategoryUL_r12", -1);

         ue_CategoryUL_r12 = new Asn1Integer();
         ue_CategoryUL_r12.decode (buffer, 0, 13);

         buffer.invokeCharacters(ue_CategoryUL_r12.toString());
         buffer.getContext().eventDispatcher.endElement("ue_CategoryUL_r12", -1);
      }
      else {
         ue_CategoryUL_r12 = null;
      }

      // decode wlan_IW_Parameters_r12

      if (wlan_IW_Parameters_r12Present) {
         buffer.getContext().eventDispatcher.startElement("wlan_IW_Parameters_r12", -1);

         wlan_IW_Parameters_r12 = new WLAN_IW_Parameters_r12();
         wlan_IW_Parameters_r12.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("wlan_IW_Parameters_r12", -1);
      }
      else {
         wlan_IW_Parameters_r12 = null;
      }

      // decode measParameters_v1250

      if (measParameters_v1250Present) {
         buffer.getContext().eventDispatcher.startElement("measParameters_v1250", -1);

         measParameters_v1250 = new MeasParameters_v1250();
         measParameters_v1250.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("measParameters_v1250", -1);
      }
      else {
         measParameters_v1250 = null;
      }

      // decode dc_Parameters_r12

      if (dc_Parameters_r12Present) {
         buffer.getContext().eventDispatcher.startElement("dc_Parameters_r12", -1);

         dc_Parameters_r12 = new DC_Parameters_r12();
         dc_Parameters_r12.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("dc_Parameters_r12", -1);
      }
      else {
         dc_Parameters_r12 = null;
      }

      // decode mbms_Parameters_v1250

      if (mbms_Parameters_v1250Present) {
         buffer.getContext().eventDispatcher.startElement("mbms_Parameters_v1250", -1);

         mbms_Parameters_v1250 = new MBMS_Parameters_v1250();
         mbms_Parameters_v1250.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("mbms_Parameters_v1250", -1);
      }
      else {
         mbms_Parameters_v1250 = null;
      }

      // decode mac_Parameters_r12

      if (mac_Parameters_r12Present) {
         buffer.getContext().eventDispatcher.startElement("mac_Parameters_r12", -1);

         mac_Parameters_r12 = new MAC_Parameters_r12();
         mac_Parameters_r12.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("mac_Parameters_r12", -1);
      }
      else {
         mac_Parameters_r12 = null;
      }

      // decode fdd_Add_UE_EUTRA_Capabilities_v1250

      if (fdd_Add_UE_EUTRA_Capabilities_v1250Present) {
         buffer.getContext().eventDispatcher.startElement("fdd_Add_UE_EUTRA_Capabilities_v1250", -1);

         fdd_Add_UE_EUTRA_Capabilities_v1250 = new UE_EUTRA_CapabilityAddXDD_Mode_v1250();
         fdd_Add_UE_EUTRA_Capabilities_v1250.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("fdd_Add_UE_EUTRA_Capabilities_v1250", -1);
      }
      else {
         fdd_Add_UE_EUTRA_Capabilities_v1250 = null;
      }

      // decode tdd_Add_UE_EUTRA_Capabilities_v1250

      if (tdd_Add_UE_EUTRA_Capabilities_v1250Present) {
         buffer.getContext().eventDispatcher.startElement("tdd_Add_UE_EUTRA_Capabilities_v1250", -1);

         tdd_Add_UE_EUTRA_Capabilities_v1250 = new UE_EUTRA_CapabilityAddXDD_Mode_v1250();
         tdd_Add_UE_EUTRA_Capabilities_v1250.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("tdd_Add_UE_EUTRA_Capabilities_v1250", -1);
      }
      else {
         tdd_Add_UE_EUTRA_Capabilities_v1250 = null;
      }

      // decode sl_Parameters_r12

      if (sl_Parameters_r12Present) {
         buffer.getContext().eventDispatcher.startElement("sl_Parameters_r12", -1);

         sl_Parameters_r12 = new SL_Parameters_r12();
         sl_Parameters_r12.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sl_Parameters_r12", -1);
      }
      else {
         sl_Parameters_r12 = null;
      }

      // decode nonCriticalExtension

      if (nonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension = new UE_EUTRA_Capability_v1260_IEs();
         nonCriticalExtension.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }
      else {
         nonCriticalExtension = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (phyLayerParameters_v1250 != null) phyLayerParameters_v1250.print (_sb, "phyLayerParameters_v1250", _level+1);
      if (rf_Parameters_v1250 != null) rf_Parameters_v1250.print (_sb, "rf_Parameters_v1250", _level+1);
      if (rlc_Parameters_r12 != null) rlc_Parameters_r12.print (_sb, "rlc_Parameters_r12", _level+1);
      if (ue_BasedNetwPerfMeasParameters_v1250 != null) ue_BasedNetwPerfMeasParameters_v1250.print (_sb, "ue_BasedNetwPerfMeasParameters_v1250", _level+1);
      if (ue_CategoryDL_r12 != null) ue_CategoryDL_r12.print (_sb, "ue_CategoryDL_r12", _level+1);
      if (ue_CategoryUL_r12 != null) ue_CategoryUL_r12.print (_sb, "ue_CategoryUL_r12", _level+1);
      if (wlan_IW_Parameters_r12 != null) wlan_IW_Parameters_r12.print (_sb, "wlan_IW_Parameters_r12", _level+1);
      if (measParameters_v1250 != null) measParameters_v1250.print (_sb, "measParameters_v1250", _level+1);
      if (dc_Parameters_r12 != null) dc_Parameters_r12.print (_sb, "dc_Parameters_r12", _level+1);
      if (mbms_Parameters_v1250 != null) mbms_Parameters_v1250.print (_sb, "mbms_Parameters_v1250", _level+1);
      if (mac_Parameters_r12 != null) mac_Parameters_r12.print (_sb, "mac_Parameters_r12", _level+1);
      if (fdd_Add_UE_EUTRA_Capabilities_v1250 != null) fdd_Add_UE_EUTRA_Capabilities_v1250.print (_sb, "fdd_Add_UE_EUTRA_Capabilities_v1250", _level+1);
      if (tdd_Add_UE_EUTRA_Capabilities_v1250 != null) tdd_Add_UE_EUTRA_Capabilities_v1250.print (_sb, "tdd_Add_UE_EUTRA_Capabilities_v1250", _level+1);
      if (sl_Parameters_r12 != null) sl_Parameters_r12.print (_sb, "sl_Parameters_r12", _level+1);
      if (nonCriticalExtension != null) nonCriticalExtension.print (_sb, "nonCriticalExtension", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
