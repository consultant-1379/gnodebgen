/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class LogMeasInfo_r16 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "LogMeasInfo-r16";
   }

   public LocationInfo_r16 locationInfo_r16;  // optional
   public Asn1Integer relativeTimeStamp_r16;
   public CGI_Info_Logging_r16 servCellIdentity_r16;  // optional
   public MeasResultServingCell_r16 measResultServingCell_r16;  // optional
   public LogMeasInfo_r16_measResultNeighCells_r16 measResultNeighCells_r16;
   public LogMeasInfo_r16_anyCellSelectionDetected_r16 anyCellSelectionDetected_r16 = null;  // optional

   public LogMeasInfo_r16 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public LogMeasInfo_r16 (
      LocationInfo_r16 locationInfo_r16_,
      Asn1Integer relativeTimeStamp_r16_,
      CGI_Info_Logging_r16 servCellIdentity_r16_,
      MeasResultServingCell_r16 measResultServingCell_r16_,
      LogMeasInfo_r16_measResultNeighCells_r16 measResultNeighCells_r16_,
      LogMeasInfo_r16_anyCellSelectionDetected_r16 anyCellSelectionDetected_r16_
   ) {
      super();
      locationInfo_r16 = locationInfo_r16_;
      relativeTimeStamp_r16 = relativeTimeStamp_r16_;
      servCellIdentity_r16 = servCellIdentity_r16_;
      measResultServingCell_r16 = measResultServingCell_r16_;
      measResultNeighCells_r16 = measResultNeighCells_r16_;
      anyCellSelectionDetected_r16 = anyCellSelectionDetected_r16_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public LogMeasInfo_r16 (
      Asn1Integer relativeTimeStamp_r16_,
      LogMeasInfo_r16_measResultNeighCells_r16 measResultNeighCells_r16_
   ) {
      super();
      relativeTimeStamp_r16 = relativeTimeStamp_r16_;
      measResultNeighCells_r16 = measResultNeighCells_r16_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public LogMeasInfo_r16 (LocationInfo_r16 locationInfo_r16_,
      long relativeTimeStamp_r16_,
      CGI_Info_Logging_r16 servCellIdentity_r16_,
      MeasResultServingCell_r16 measResultServingCell_r16_,
      LogMeasInfo_r16_measResultNeighCells_r16 measResultNeighCells_r16_,
      LogMeasInfo_r16_anyCellSelectionDetected_r16 anyCellSelectionDetected_r16_
   ) {
      super();
      locationInfo_r16 = locationInfo_r16_;
      relativeTimeStamp_r16 = new Asn1Integer (relativeTimeStamp_r16_);
      servCellIdentity_r16 = servCellIdentity_r16_;
      measResultServingCell_r16 = measResultServingCell_r16_;
      measResultNeighCells_r16 = measResultNeighCells_r16_;
      anyCellSelectionDetected_r16 = anyCellSelectionDetected_r16_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public LogMeasInfo_r16 (
      long relativeTimeStamp_r16_,
      LogMeasInfo_r16_measResultNeighCells_r16 measResultNeighCells_r16_
   ) {
      super();
      relativeTimeStamp_r16 = new Asn1Integer (relativeTimeStamp_r16_);
      measResultNeighCells_r16 = measResultNeighCells_r16_;
   }

   public void init () {
      locationInfo_r16 = null;
      relativeTimeStamp_r16 = null;
      servCellIdentity_r16 = null;
      measResultServingCell_r16 = null;
      measResultNeighCells_r16 = null;
      anyCellSelectionDetected_r16 = null;
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return locationInfo_r16;
         case 1: return relativeTimeStamp_r16;
         case 2: return servCellIdentity_r16;
         case 3: return measResultServingCell_r16;
         case 4: return measResultNeighCells_r16;
         case 5: return anyCellSelectionDetected_r16;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "locationInfo-r16";
         case 1: return "relativeTimeStamp-r16";
         case 2: return "servCellIdentity-r16";
         case 3: return "measResultServingCell-r16";
         case 4: return "measResultNeighCells-r16";
         case 5: return "anyCellSelectionDetected-r16";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean locationInfo_r16Present = buffer.decodeBit ("locationInfo_r16Present");
      boolean servCellIdentity_r16Present = buffer.decodeBit ("servCellIdentity_r16Present");
      boolean measResultServingCell_r16Present = buffer.decodeBit ("measResultServingCell_r16Present");
      boolean anyCellSelectionDetected_r16Present = buffer.decodeBit ("anyCellSelectionDetected_r16Present");

      // decode locationInfo_r16

      if (locationInfo_r16Present) {
         buffer.getContext().eventDispatcher.startElement("locationInfo_r16", -1);

         locationInfo_r16 = new LocationInfo_r16();
         locationInfo_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("locationInfo_r16", -1);
      }
      else {
         locationInfo_r16 = null;
      }

      // decode relativeTimeStamp_r16

      buffer.getContext().eventDispatcher.startElement("relativeTimeStamp_r16", -1);

      relativeTimeStamp_r16 = new Asn1Integer();
      relativeTimeStamp_r16.decode (buffer, 0, 7200);

      buffer.invokeCharacters(relativeTimeStamp_r16.toString());
      buffer.getContext().eventDispatcher.endElement("relativeTimeStamp_r16", -1);

      // decode servCellIdentity_r16

      if (servCellIdentity_r16Present) {
         buffer.getContext().eventDispatcher.startElement("servCellIdentity_r16", -1);

         servCellIdentity_r16 = new CGI_Info_Logging_r16();
         servCellIdentity_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("servCellIdentity_r16", -1);
      }
      else {
         servCellIdentity_r16 = null;
      }

      // decode measResultServingCell_r16

      if (measResultServingCell_r16Present) {
         buffer.getContext().eventDispatcher.startElement("measResultServingCell_r16", -1);

         measResultServingCell_r16 = new MeasResultServingCell_r16();
         measResultServingCell_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("measResultServingCell_r16", -1);
      }
      else {
         measResultServingCell_r16 = null;
      }

      // decode measResultNeighCells_r16

      buffer.getContext().eventDispatcher.startElement("measResultNeighCells_r16", -1);

      measResultNeighCells_r16 = new LogMeasInfo_r16_measResultNeighCells_r16();
      measResultNeighCells_r16.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("measResultNeighCells_r16", -1);

      // decode anyCellSelectionDetected_r16

      if (anyCellSelectionDetected_r16Present) {
         buffer.getContext().eventDispatcher.startElement("anyCellSelectionDetected_r16", -1);

         int tval = LogMeasInfo_r16_anyCellSelectionDetected_r16.decodeEnumValue (buffer);
         anyCellSelectionDetected_r16 = LogMeasInfo_r16_anyCellSelectionDetected_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("anyCellSelectionDetected_r16", -1);
      }
      else {
         anyCellSelectionDetected_r16 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (locationInfo_r16 != null) locationInfo_r16.print (_sb, "locationInfo_r16", _level+1);
      if (relativeTimeStamp_r16 != null) relativeTimeStamp_r16.print (_sb, "relativeTimeStamp_r16", _level+1);
      if (servCellIdentity_r16 != null) servCellIdentity_r16.print (_sb, "servCellIdentity_r16", _level+1);
      if (measResultServingCell_r16 != null) measResultServingCell_r16.print (_sb, "measResultServingCell_r16", _level+1);
      if (measResultNeighCells_r16 != null) measResultNeighCells_r16.print (_sb, "measResultNeighCells_r16", _level+1);
      if (anyCellSelectionDetected_r16 != null) anyCellSelectionDetected_r16.print (_sb, "anyCellSelectionDetected_r16", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
