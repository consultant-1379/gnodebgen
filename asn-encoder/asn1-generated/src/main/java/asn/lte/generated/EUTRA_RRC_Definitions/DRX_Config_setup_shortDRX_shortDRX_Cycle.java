/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class DRX_Config_setup_shortDRX_shortDRX_Cycle extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ENUMERATED";
   }

   // Integer constants for switch-case
   public static final int _SF2 = 0;
   public static final int _SF5 = 1;
   public static final int _SF8 = 2;
   public static final int _SF10 = 3;
   public static final int _SF16 = 4;
   public static final int _SF20 = 5;
   public static final int _SF32 = 6;
   public static final int _SF40 = 7;
   public static final int _SF64 = 8;
   public static final int _SF80 = 9;
   public static final int _SF128 = 10;
   public static final int _SF160 = 11;
   public static final int _SF256 = 12;
   public static final int _SF320 = 13;
   public static final int _SF512 = 14;
   public static final int _SF640 = 15;

   // Singleton instances of DRX_Config_setup_shortDRX_shortDRX_Cycle
   protected static final DRX_Config_setup_shortDRX_shortDRX_Cycle _sf2 = new DRX_Config_setup_shortDRX_shortDRX_Cycle(0);
   protected static final DRX_Config_setup_shortDRX_shortDRX_Cycle _sf5 = new DRX_Config_setup_shortDRX_shortDRX_Cycle(1);
   protected static final DRX_Config_setup_shortDRX_shortDRX_Cycle _sf8 = new DRX_Config_setup_shortDRX_shortDRX_Cycle(2);
   protected static final DRX_Config_setup_shortDRX_shortDRX_Cycle _sf10 = new DRX_Config_setup_shortDRX_shortDRX_Cycle(3);
   protected static final DRX_Config_setup_shortDRX_shortDRX_Cycle _sf16 = new DRX_Config_setup_shortDRX_shortDRX_Cycle(4);
   protected static final DRX_Config_setup_shortDRX_shortDRX_Cycle _sf20 = new DRX_Config_setup_shortDRX_shortDRX_Cycle(5);
   protected static final DRX_Config_setup_shortDRX_shortDRX_Cycle _sf32 = new DRX_Config_setup_shortDRX_shortDRX_Cycle(6);
   protected static final DRX_Config_setup_shortDRX_shortDRX_Cycle _sf40 = new DRX_Config_setup_shortDRX_shortDRX_Cycle(7);
   protected static final DRX_Config_setup_shortDRX_shortDRX_Cycle _sf64 = new DRX_Config_setup_shortDRX_shortDRX_Cycle(8);
   protected static final DRX_Config_setup_shortDRX_shortDRX_Cycle _sf80 = new DRX_Config_setup_shortDRX_shortDRX_Cycle(9);
   protected static final DRX_Config_setup_shortDRX_shortDRX_Cycle _sf128 = new DRX_Config_setup_shortDRX_shortDRX_Cycle(10);
   protected static final DRX_Config_setup_shortDRX_shortDRX_Cycle _sf160 = new DRX_Config_setup_shortDRX_shortDRX_Cycle(11);
   protected static final DRX_Config_setup_shortDRX_shortDRX_Cycle _sf256 = new DRX_Config_setup_shortDRX_shortDRX_Cycle(12);
   protected static final DRX_Config_setup_shortDRX_shortDRX_Cycle _sf320 = new DRX_Config_setup_shortDRX_shortDRX_Cycle(13);
   protected static final DRX_Config_setup_shortDRX_shortDRX_Cycle _sf512 = new DRX_Config_setup_shortDRX_shortDRX_Cycle(14);
   protected static final DRX_Config_setup_shortDRX_shortDRX_Cycle _sf640 = new DRX_Config_setup_shortDRX_shortDRX_Cycle(15);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    *   7
    *   8
    *   9
    *   10
    *   11
    *   12
    *   13
    *   14
    *   15
    */
   protected DRX_Config_setup_shortDRX_shortDRX_Cycle (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for sf2.
    */
   public static DRX_Config_setup_shortDRX_shortDRX_Cycle sf2() {
      return _sf2;
   }

   /**
    * Singleton accessor method for sf5.
    */
   public static DRX_Config_setup_shortDRX_shortDRX_Cycle sf5() {
      return _sf5;
   }

   /**
    * Singleton accessor method for sf8.
    */
   public static DRX_Config_setup_shortDRX_shortDRX_Cycle sf8() {
      return _sf8;
   }

   /**
    * Singleton accessor method for sf10.
    */
   public static DRX_Config_setup_shortDRX_shortDRX_Cycle sf10() {
      return _sf10;
   }

   /**
    * Singleton accessor method for sf16.
    */
   public static DRX_Config_setup_shortDRX_shortDRX_Cycle sf16() {
      return _sf16;
   }

   /**
    * Singleton accessor method for sf20.
    */
   public static DRX_Config_setup_shortDRX_shortDRX_Cycle sf20() {
      return _sf20;
   }

   /**
    * Singleton accessor method for sf32.
    */
   public static DRX_Config_setup_shortDRX_shortDRX_Cycle sf32() {
      return _sf32;
   }

   /**
    * Singleton accessor method for sf40.
    */
   public static DRX_Config_setup_shortDRX_shortDRX_Cycle sf40() {
      return _sf40;
   }

   /**
    * Singleton accessor method for sf64.
    */
   public static DRX_Config_setup_shortDRX_shortDRX_Cycle sf64() {
      return _sf64;
   }

   /**
    * Singleton accessor method for sf80.
    */
   public static DRX_Config_setup_shortDRX_shortDRX_Cycle sf80() {
      return _sf80;
   }

   /**
    * Singleton accessor method for sf128.
    */
   public static DRX_Config_setup_shortDRX_shortDRX_Cycle sf128() {
      return _sf128;
   }

   /**
    * Singleton accessor method for sf160.
    */
   public static DRX_Config_setup_shortDRX_shortDRX_Cycle sf160() {
      return _sf160;
   }

   /**
    * Singleton accessor method for sf256.
    */
   public static DRX_Config_setup_shortDRX_shortDRX_Cycle sf256() {
      return _sf256;
   }

   /**
    * Singleton accessor method for sf320.
    */
   public static DRX_Config_setup_shortDRX_shortDRX_Cycle sf320() {
      return _sf320;
   }

   /**
    * Singleton accessor method for sf512.
    */
   public static DRX_Config_setup_shortDRX_shortDRX_Cycle sf512() {
      return _sf512;
   }

   /**
    * Singleton accessor method for sf640.
    */
   public static DRX_Config_setup_shortDRX_shortDRX_Cycle sf640() {
      return _sf640;
   }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return DRX_Config_setup_shortDRX_shortDRX_Cycle.valueOf( DRX_Config_setup_shortDRX_shortDRX_Cycle.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static DRX_Config_setup_shortDRX_shortDRX_Cycle valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 0: return sf2();
         case 1: return sf5();
         case 2: return sf8();
         case 3: return sf10();
         case 4: return sf16();
         case 5: return sf20();
         case 6: return sf32();
         case 7: return sf40();
         case 8: return sf64();
         case 9: return sf80();
         case 10: return sf128();
         case 11: return sf160();
         case 12: return sf256();
         case 13: return sf320();
         case 14: return sf512();
         case 15: return sf640();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      ui = (int) buffer.decodeConsWholeNumber (16);

      switch (ui) {
         case 0: ret =  0; break;
         case 1: ret =  1; break;
         case 2: ret =  2; break;
         case 3: ret =  3; break;
         case 4: ret =  4; break;
         case 5: ret =  5; break;
         case 6: ret =  6; break;
         case 7: ret =  7; break;
         case 8: ret =  8; break;
         case 9: ret =  9; break;
         case 10: ret =  10; break;
         case 11: ret =  11; break;
         case 12: ret =  12; break;
         case 13: ret =  13; break;
         case 14: ret =  14; break;
         case 15: ret =  15; break;
         default: throw new Asn1InvalidEnumException (ui);
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (DRX_Config_setup_shortDRX_shortDRX_Cycle.valueOf(ret).toString());

      return ret;
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("sf2");
         case 1: return ("sf5");
         case 2: return ("sf8");
         case 3: return ("sf10");
         case 4: return ("sf16");
         case 5: return ("sf20");
         case 6: return ("sf32");
         case 7: return ("sf40");
         case 8: return ("sf64");
         case 9: return ("sf80");
         case 10: return ("sf128");
         case 11: return ("sf160");
         case 12: return ("sf256");
         case 13: return ("sf320");
         case 14: return ("sf512");
         case 15: return ("sf640");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
