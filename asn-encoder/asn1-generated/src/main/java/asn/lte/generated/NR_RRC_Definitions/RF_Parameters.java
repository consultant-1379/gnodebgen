/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class RF_Parameters extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "RF-Parameters";
   }

   public RF_Parameters_supportedBandListNR supportedBandListNR;
   public BandCombinationList supportedBandCombinationList;  // optional
   public FreqBandList appliedFreqBandListFilter;  // optional
   public boolean mV2ExtPresent;
   public BandCombinationList_v1540 supportedBandCombinationList_v1540;  // optional
   public RF_Parameters_srs_SwitchingTimeRequested srs_SwitchingTimeRequested = null;  // optional
   public boolean mV3ExtPresent;
   public BandCombinationList_v1550 supportedBandCombinationList_v1550;  // optional
   public boolean mV4ExtPresent;
   public BandCombinationList_v1560 supportedBandCombinationList_v1560;  // optional
   public boolean mV5ExtPresent;
   public BandCombinationList_v1610 supportedBandCombinationList_v1610;  // optional
   public BandCombinationListSidelinkEUTRA_NR_r16 supportedBandCombinationListSidelinkEUTRA_NR_r16;  // optional
   public BandCombinationList_UplinkTxSwitch_r16 supportedBandCombinationList_UplinkTxSwitch_r16;  // optional
   public boolean mV6ExtPresent;
   public BandCombinationList_v1630 supportedBandCombinationList_v1630;  // optional
   public BandCombinationListSidelinkEUTRA_NR_v1630 supportedBandCombinationListSidelinkEUTRA_NR_v1630;  // optional
   public BandCombinationList_UplinkTxSwitch_v1630 supportedBandCombinationList_UplinkTxSwitch_v1630;  // optional
   public Asn1OpenExt extElem1;

   public RF_Parameters () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public RF_Parameters (
      RF_Parameters_supportedBandListNR supportedBandListNR_,
      BandCombinationList supportedBandCombinationList_,
      FreqBandList appliedFreqBandListFilter_,
      BandCombinationList_v1540 supportedBandCombinationList_v1540_,
      RF_Parameters_srs_SwitchingTimeRequested srs_SwitchingTimeRequested_,
      BandCombinationList_v1550 supportedBandCombinationList_v1550_,
      BandCombinationList_v1560 supportedBandCombinationList_v1560_,
      BandCombinationList_v1610 supportedBandCombinationList_v1610_,
      BandCombinationListSidelinkEUTRA_NR_r16 supportedBandCombinationListSidelinkEUTRA_NR_r16_,
      BandCombinationList_UplinkTxSwitch_r16 supportedBandCombinationList_UplinkTxSwitch_r16_,
      BandCombinationList_v1630 supportedBandCombinationList_v1630_,
      BandCombinationListSidelinkEUTRA_NR_v1630 supportedBandCombinationListSidelinkEUTRA_NR_v1630_,
      BandCombinationList_UplinkTxSwitch_v1630 supportedBandCombinationList_UplinkTxSwitch_v1630_
   ) {
      super();
      supportedBandListNR = supportedBandListNR_;
      supportedBandCombinationList = supportedBandCombinationList_;
      appliedFreqBandListFilter = appliedFreqBandListFilter_;
      supportedBandCombinationList_v1540 = supportedBandCombinationList_v1540_;
      srs_SwitchingTimeRequested = srs_SwitchingTimeRequested_;
      supportedBandCombinationList_v1550 = supportedBandCombinationList_v1550_;
      supportedBandCombinationList_v1560 = supportedBandCombinationList_v1560_;
      supportedBandCombinationList_v1610 = supportedBandCombinationList_v1610_;
      supportedBandCombinationListSidelinkEUTRA_NR_r16 = supportedBandCombinationListSidelinkEUTRA_NR_r16_;
      supportedBandCombinationList_UplinkTxSwitch_r16 = supportedBandCombinationList_UplinkTxSwitch_r16_;
      supportedBandCombinationList_v1630 = supportedBandCombinationList_v1630_;
      supportedBandCombinationListSidelinkEUTRA_NR_v1630 = supportedBandCombinationListSidelinkEUTRA_NR_v1630_;
      supportedBandCombinationList_UplinkTxSwitch_v1630 = supportedBandCombinationList_UplinkTxSwitch_v1630_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public RF_Parameters (
      RF_Parameters_supportedBandListNR supportedBandListNR_
   ) {
      super();
      supportedBandListNR = supportedBandListNR_;
   }

   public void init () {
      supportedBandListNR = null;
      supportedBandCombinationList = null;
      appliedFreqBandListFilter = null;
      supportedBandCombinationList_v1540 = null;
      srs_SwitchingTimeRequested = null;
      supportedBandCombinationList_v1550 = null;
      supportedBandCombinationList_v1560 = null;
      supportedBandCombinationList_v1610 = null;
      supportedBandCombinationListSidelinkEUTRA_NR_r16 = null;
      supportedBandCombinationList_UplinkTxSwitch_r16 = null;
      supportedBandCombinationList_v1630 = null;
      supportedBandCombinationListSidelinkEUTRA_NR_v1630 = null;
      supportedBandCombinationList_UplinkTxSwitch_v1630 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 14; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return supportedBandListNR;
         case 1: return supportedBandCombinationList;
         case 2: return appliedFreqBandListFilter;
         case 3: return supportedBandCombinationList_v1540;
         case 4: return srs_SwitchingTimeRequested;
         case 5: return supportedBandCombinationList_v1550;
         case 6: return supportedBandCombinationList_v1560;
         case 7: return supportedBandCombinationList_v1610;
         case 8: return supportedBandCombinationListSidelinkEUTRA_NR_r16;
         case 9: return supportedBandCombinationList_UplinkTxSwitch_r16;
         case 10: return supportedBandCombinationList_v1630;
         case 11: return supportedBandCombinationListSidelinkEUTRA_NR_v1630;
         case 12: return supportedBandCombinationList_UplinkTxSwitch_v1630;
         case 13: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "supportedBandListNR";
         case 1: return "supportedBandCombinationList";
         case 2: return "appliedFreqBandListFilter";
         case 3: return "supportedBandCombinationList-v1540";
         case 4: return "srs-SwitchingTimeRequested";
         case 5: return "supportedBandCombinationList-v1550";
         case 6: return "supportedBandCombinationList-v1560";
         case 7: return "supportedBandCombinationList-v1610";
         case 8: return "supportedBandCombinationListSidelinkEUTRA-NR-r16";
         case 9: return "supportedBandCombinationList-UplinkTxSwitch-r16";
         case 10: return "supportedBandCombinationList-v1630";
         case 11: return "supportedBandCombinationListSidelinkEUTRA-NR-v1630";
         case 12: return "supportedBandCombinationList-UplinkTxSwitch-v1630";
         case 13: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean supportedBandCombinationListPresent = buffer.decodeBit ("supportedBandCombinationListPresent");
      boolean appliedFreqBandListFilterPresent = buffer.decodeBit ("appliedFreqBandListFilterPresent");

      // decode supportedBandListNR

      buffer.getContext().eventDispatcher.startElement("supportedBandListNR", -1);

      supportedBandListNR = new RF_Parameters_supportedBandListNR();
      supportedBandListNR.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("supportedBandListNR", -1);

      // decode supportedBandCombinationList

      if (supportedBandCombinationListPresent) {
         buffer.getContext().eventDispatcher.startElement("supportedBandCombinationList", -1);

         supportedBandCombinationList = new BandCombinationList();
         supportedBandCombinationList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("supportedBandCombinationList", -1);
      }
      else {
         supportedBandCombinationList = null;
      }

      // decode appliedFreqBandListFilter

      if (appliedFreqBandListFilterPresent) {
         buffer.getContext().eventDispatcher.startElement("appliedFreqBandListFilter", -1);

         appliedFreqBandListFilter = new FreqBandList();
         appliedFreqBandListFilter.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("appliedFreqBandListFilter", -1);
      }
      else {
         appliedFreqBandListFilter = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV4ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV5ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV6ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean supportedBandCombinationList_v1540Present = buffer.decodeBit ("supportedBandCombinationList_v1540Present");

            boolean srs_SwitchingTimeRequestedPresent = buffer.decodeBit ("srs_SwitchingTimeRequestedPresent");

            // decode supportedBandCombinationList_v1540

            if (supportedBandCombinationList_v1540Present) {
               buffer.getContext().eventDispatcher.startElement("supportedBandCombinationList_v1540", -1);

               supportedBandCombinationList_v1540 = new BandCombinationList_v1540();
               supportedBandCombinationList_v1540.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("supportedBandCombinationList_v1540", -1);
            }
            else {
               supportedBandCombinationList_v1540 = null;
            }

            // decode srs_SwitchingTimeRequested

            if (srs_SwitchingTimeRequestedPresent) {
               buffer.getContext().eventDispatcher.startElement("srs_SwitchingTimeRequested", -1);

               int tval = RF_Parameters_srs_SwitchingTimeRequested.decodeEnumValue (buffer);
               srs_SwitchingTimeRequested = RF_Parameters_srs_SwitchingTimeRequested.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("srs_SwitchingTimeRequested", -1);
            }
            else {
               srs_SwitchingTimeRequested = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean supportedBandCombinationList_v1550Present = buffer.decodeBit ("supportedBandCombinationList_v1550Present");

            // decode supportedBandCombinationList_v1550

            if (supportedBandCombinationList_v1550Present) {
               buffer.getContext().eventDispatcher.startElement("supportedBandCombinationList_v1550", -1);

               supportedBandCombinationList_v1550 = new BandCombinationList_v1550();
               supportedBandCombinationList_v1550.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("supportedBandCombinationList_v1550", -1);
            }
            else {
               supportedBandCombinationList_v1550 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV4ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean supportedBandCombinationList_v1560Present = buffer.decodeBit ("supportedBandCombinationList_v1560Present");

            // decode supportedBandCombinationList_v1560

            if (supportedBandCombinationList_v1560Present) {
               buffer.getContext().eventDispatcher.startElement("supportedBandCombinationList_v1560", -1);

               supportedBandCombinationList_v1560 = new BandCombinationList_v1560();
               supportedBandCombinationList_v1560.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("supportedBandCombinationList_v1560", -1);
            }
            else {
               supportedBandCombinationList_v1560 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV5ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean supportedBandCombinationList_v1610Present = buffer.decodeBit ("supportedBandCombinationList_v1610Present");

            boolean supportedBandCombinationListSidelinkEUTRA_NR_r16Present = buffer.decodeBit ("supportedBandCombinationListSidelinkEUTRA_NR_r16Present");

            boolean supportedBandCombinationList_UplinkTxSwitch_r16Present = buffer.decodeBit ("supportedBandCombinationList_UplinkTxSwitch_r16Present");

            // decode supportedBandCombinationList_v1610

            if (supportedBandCombinationList_v1610Present) {
               buffer.getContext().eventDispatcher.startElement("supportedBandCombinationList_v1610", -1);

               supportedBandCombinationList_v1610 = new BandCombinationList_v1610();
               supportedBandCombinationList_v1610.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("supportedBandCombinationList_v1610", -1);
            }
            else {
               supportedBandCombinationList_v1610 = null;
            }

            // decode supportedBandCombinationListSidelinkEUTRA_NR_r16

            if (supportedBandCombinationListSidelinkEUTRA_NR_r16Present) {
               buffer.getContext().eventDispatcher.startElement("supportedBandCombinationListSidelinkEUTRA_NR_r16", -1);

               supportedBandCombinationListSidelinkEUTRA_NR_r16 = new BandCombinationListSidelinkEUTRA_NR_r16();
               supportedBandCombinationListSidelinkEUTRA_NR_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("supportedBandCombinationListSidelinkEUTRA_NR_r16", -1);
            }
            else {
               supportedBandCombinationListSidelinkEUTRA_NR_r16 = null;
            }

            // decode supportedBandCombinationList_UplinkTxSwitch_r16

            if (supportedBandCombinationList_UplinkTxSwitch_r16Present) {
               buffer.getContext().eventDispatcher.startElement("supportedBandCombinationList_UplinkTxSwitch_r16", -1);

               supportedBandCombinationList_UplinkTxSwitch_r16 = new BandCombinationList_UplinkTxSwitch_r16();
               supportedBandCombinationList_UplinkTxSwitch_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("supportedBandCombinationList_UplinkTxSwitch_r16", -1);
            }
            else {
               supportedBandCombinationList_UplinkTxSwitch_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV6ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean supportedBandCombinationList_v1630Present = buffer.decodeBit ("supportedBandCombinationList_v1630Present");

            boolean supportedBandCombinationListSidelinkEUTRA_NR_v1630Present = buffer.decodeBit ("supportedBandCombinationListSidelinkEUTRA_NR_v1630Present");

            boolean supportedBandCombinationList_UplinkTxSwitch_v1630Present = buffer.decodeBit ("supportedBandCombinationList_UplinkTxSwitch_v1630Present");

            // decode supportedBandCombinationList_v1630

            if (supportedBandCombinationList_v1630Present) {
               buffer.getContext().eventDispatcher.startElement("supportedBandCombinationList_v1630", -1);

               supportedBandCombinationList_v1630 = new BandCombinationList_v1630();
               supportedBandCombinationList_v1630.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("supportedBandCombinationList_v1630", -1);
            }
            else {
               supportedBandCombinationList_v1630 = null;
            }

            // decode supportedBandCombinationListSidelinkEUTRA_NR_v1630

            if (supportedBandCombinationListSidelinkEUTRA_NR_v1630Present) {
               buffer.getContext().eventDispatcher.startElement("supportedBandCombinationListSidelinkEUTRA_NR_v1630", -1);

               supportedBandCombinationListSidelinkEUTRA_NR_v1630 = new BandCombinationListSidelinkEUTRA_NR_v1630();
               supportedBandCombinationListSidelinkEUTRA_NR_v1630.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("supportedBandCombinationListSidelinkEUTRA_NR_v1630", -1);
            }
            else {
               supportedBandCombinationListSidelinkEUTRA_NR_v1630 = null;
            }

            // decode supportedBandCombinationList_UplinkTxSwitch_v1630

            if (supportedBandCombinationList_UplinkTxSwitch_v1630Present) {
               buffer.getContext().eventDispatcher.startElement("supportedBandCombinationList_UplinkTxSwitch_v1630", -1);

               supportedBandCombinationList_UplinkTxSwitch_v1630 = new BandCombinationList_UplinkTxSwitch_v1630();
               supportedBandCombinationList_UplinkTxSwitch_v1630.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("supportedBandCombinationList_UplinkTxSwitch_v1630", -1);
            }
            else {
               supportedBandCombinationList_UplinkTxSwitch_v1630 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (supportedBandListNR != null) supportedBandListNR.print (_sb, "supportedBandListNR", _level+1);
      if (supportedBandCombinationList != null) supportedBandCombinationList.print (_sb, "supportedBandCombinationList", _level+1);
      if (appliedFreqBandListFilter != null) appliedFreqBandListFilter.print (_sb, "appliedFreqBandListFilter", _level+1);
      if (supportedBandCombinationList_v1540 != null) supportedBandCombinationList_v1540.print (_sb, "supportedBandCombinationList_v1540", _level+1);
      if (srs_SwitchingTimeRequested != null) srs_SwitchingTimeRequested.print (_sb, "srs_SwitchingTimeRequested", _level+1);
      if (supportedBandCombinationList_v1550 != null) supportedBandCombinationList_v1550.print (_sb, "supportedBandCombinationList_v1550", _level+1);
      if (supportedBandCombinationList_v1560 != null) supportedBandCombinationList_v1560.print (_sb, "supportedBandCombinationList_v1560", _level+1);
      if (supportedBandCombinationList_v1610 != null) supportedBandCombinationList_v1610.print (_sb, "supportedBandCombinationList_v1610", _level+1);
      if (supportedBandCombinationListSidelinkEUTRA_NR_r16 != null) supportedBandCombinationListSidelinkEUTRA_NR_r16.print (_sb, "supportedBandCombinationListSidelinkEUTRA_NR_r16", _level+1);
      if (supportedBandCombinationList_UplinkTxSwitch_r16 != null) supportedBandCombinationList_UplinkTxSwitch_r16.print (_sb, "supportedBandCombinationList_UplinkTxSwitch_r16", _level+1);
      if (supportedBandCombinationList_v1630 != null) supportedBandCombinationList_v1630.print (_sb, "supportedBandCombinationList_v1630", _level+1);
      if (supportedBandCombinationListSidelinkEUTRA_NR_v1630 != null) supportedBandCombinationListSidelinkEUTRA_NR_v1630.print (_sb, "supportedBandCombinationListSidelinkEUTRA_NR_v1630", _level+1);
      if (supportedBandCombinationList_UplinkTxSwitch_v1630 != null) supportedBandCombinationList_UplinkTxSwitch_v1630.print (_sb, "supportedBandCombinationList_UplinkTxSwitch_v1630", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
