/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NBIOT_RRC_Definitions;

import com.objsys.asn1j.runtime.*;
import asn.lte.generated.EUTRA_RRC_Definitions.IntraFreqNeighCellList;
import asn.lte.generated.EUTRA_RRC_Definitions.IntraFreqBlackCellList;

public class SystemInformationBlockType4_NB_r13 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NBIOT_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SystemInformationBlockType4-NB-r13";
   }

   public IntraFreqNeighCellList intraFreqNeighCellList_r13;  // optional
   public IntraFreqBlackCellList intraFreqBlackCellList_r13;  // optional
   public Asn1OctetString lateNonCriticalExtension;  // optional
   public boolean mV2ExtPresent;
   public NSSS_RRM_Config_NB_r15 nsss_RRM_Config_r15;  // optional
   public IntraFreqNeighCellList_NB_v1530 intraFreqNeighCellList_v1530;  // optional
   public Asn1OpenExt extElem1;

   public SystemInformationBlockType4_NB_r13 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SystemInformationBlockType4_NB_r13 (
      IntraFreqNeighCellList intraFreqNeighCellList_r13_,
      IntraFreqBlackCellList intraFreqBlackCellList_r13_,
      Asn1OctetString lateNonCriticalExtension_,
      NSSS_RRM_Config_NB_r15 nsss_RRM_Config_r15_,
      IntraFreqNeighCellList_NB_v1530 intraFreqNeighCellList_v1530_
   ) {
      super();
      intraFreqNeighCellList_r13 = intraFreqNeighCellList_r13_;
      intraFreqBlackCellList_r13 = intraFreqBlackCellList_r13_;
      lateNonCriticalExtension = lateNonCriticalExtension_;
      nsss_RRM_Config_r15 = nsss_RRM_Config_r15_;
      intraFreqNeighCellList_v1530 = intraFreqNeighCellList_v1530_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SystemInformationBlockType4_NB_r13 (IntraFreqNeighCellList intraFreqNeighCellList_r13_,
      IntraFreqBlackCellList intraFreqBlackCellList_r13_,
      byte[] lateNonCriticalExtension_,
      NSSS_RRM_Config_NB_r15 nsss_RRM_Config_r15_,
      IntraFreqNeighCellList_NB_v1530 intraFreqNeighCellList_v1530_
   ) {
      super();
      intraFreqNeighCellList_r13 = intraFreqNeighCellList_r13_;
      intraFreqBlackCellList_r13 = intraFreqBlackCellList_r13_;
      lateNonCriticalExtension = new Asn1OctetString (lateNonCriticalExtension_);
      nsss_RRM_Config_r15 = nsss_RRM_Config_r15_;
      intraFreqNeighCellList_v1530 = intraFreqNeighCellList_v1530_;
   }

   public void init () {
      intraFreqNeighCellList_r13 = null;
      intraFreqBlackCellList_r13 = null;
      lateNonCriticalExtension = null;
      nsss_RRM_Config_r15 = null;
      intraFreqNeighCellList_v1530 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return intraFreqNeighCellList_r13;
         case 1: return intraFreqBlackCellList_r13;
         case 2: return lateNonCriticalExtension;
         case 3: return nsss_RRM_Config_r15;
         case 4: return intraFreqNeighCellList_v1530;
         case 5: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "intraFreqNeighCellList-r13";
         case 1: return "intraFreqBlackCellList-r13";
         case 2: return "lateNonCriticalExtension";
         case 3: return "nsss-RRM-Config-r15";
         case 4: return "intraFreqNeighCellList-v1530";
         case 5: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean intraFreqNeighCellList_r13Present = buffer.decodeBit ("intraFreqNeighCellList_r13Present");
      boolean intraFreqBlackCellList_r13Present = buffer.decodeBit ("intraFreqBlackCellList_r13Present");
      boolean lateNonCriticalExtensionPresent = buffer.decodeBit ("lateNonCriticalExtensionPresent");

      // decode intraFreqNeighCellList_r13

      if (intraFreqNeighCellList_r13Present) {
         buffer.getContext().eventDispatcher.startElement("intraFreqNeighCellList_r13", -1);

         intraFreqNeighCellList_r13 = new IntraFreqNeighCellList();
         intraFreqNeighCellList_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("intraFreqNeighCellList_r13", -1);
      }
      else {
         intraFreqNeighCellList_r13 = null;
      }

      // decode intraFreqBlackCellList_r13

      if (intraFreqBlackCellList_r13Present) {
         buffer.getContext().eventDispatcher.startElement("intraFreqBlackCellList_r13", -1);

         intraFreqBlackCellList_r13 = new IntraFreqBlackCellList();
         intraFreqBlackCellList_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("intraFreqBlackCellList_r13", -1);
      }
      else {
         intraFreqBlackCellList_r13 = null;
      }

      // decode lateNonCriticalExtension

      if (lateNonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("lateNonCriticalExtension", -1);

         lateNonCriticalExtension = new Asn1OctetString();
         lateNonCriticalExtension.decode (buffer);

         buffer.invokeCharacters(lateNonCriticalExtension.toString());
         buffer.getContext().eventDispatcher.endElement("lateNonCriticalExtension", -1);
      }
      else {
         lateNonCriticalExtension = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean nsss_RRM_Config_r15Present = buffer.decodeBit ("nsss_RRM_Config_r15Present");

            boolean intraFreqNeighCellList_v1530Present = buffer.decodeBit ("intraFreqNeighCellList_v1530Present");

            // decode nsss_RRM_Config_r15

            if (nsss_RRM_Config_r15Present) {
               buffer.getContext().eventDispatcher.startElement("nsss_RRM_Config_r15", -1);

               nsss_RRM_Config_r15 = new NSSS_RRM_Config_NB_r15();
               nsss_RRM_Config_r15.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("nsss_RRM_Config_r15", -1);
            }
            else {
               nsss_RRM_Config_r15 = null;
            }

            // decode intraFreqNeighCellList_v1530

            if (intraFreqNeighCellList_v1530Present) {
               buffer.getContext().eventDispatcher.startElement("intraFreqNeighCellList_v1530", -1);

               intraFreqNeighCellList_v1530 = new IntraFreqNeighCellList_NB_v1530();
               intraFreqNeighCellList_v1530.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("intraFreqNeighCellList_v1530", -1);
            }
            else {
               intraFreqNeighCellList_v1530 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (intraFreqNeighCellList_r13 != null) intraFreqNeighCellList_r13.print (_sb, "intraFreqNeighCellList_r13", _level+1);
      if (intraFreqBlackCellList_r13 != null) intraFreqBlackCellList_r13.print (_sb, "intraFreqBlackCellList_r13", _level+1);
      if (lateNonCriticalExtension != null) lateNonCriticalExtension.print (_sb, "lateNonCriticalExtension", _level+1);
      if (nsss_RRM_Config_r15 != null) nsss_RRM_Config_r15.print (_sb, "nsss_RRM_Config_r15", _level+1);
      if (intraFreqNeighCellList_v1530 != null) intraFreqNeighCellList_v1530.print (_sb, "intraFreqNeighCellList_v1530", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
