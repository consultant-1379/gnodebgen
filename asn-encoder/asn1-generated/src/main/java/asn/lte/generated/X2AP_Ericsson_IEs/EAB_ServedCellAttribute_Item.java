/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.X2AP_Ericsson_IEs;

import com.objsys.asn1j.runtime.*;
import asn.lte.generated.X2AP_IEs.ECGI;

public class EAB_ServedCellAttribute_Item extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_X2AP_Ericsson_IEsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "EAB-ServedCellAttribute-Item";
   }

   public ECGI cell_ID;
   public EAB_DuplexOperation duplexOpertion = null;
   public EAB_PCellCA_Capacity pCellCA_Capacity;  // optional
   public EAB_CellState cellState = null;  // optional
   public EAB_LBM_ID lBM_ID;  // optional
   public EAB_ServedCellAttribute_Item_iE_Extensions iE_Extensions;  // optional
   public Asn1OpenExt extElem1;

   public EAB_ServedCellAttribute_Item () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public EAB_ServedCellAttribute_Item (
      ECGI cell_ID_,
      EAB_DuplexOperation duplexOpertion_,
      EAB_PCellCA_Capacity pCellCA_Capacity_,
      EAB_CellState cellState_,
      EAB_LBM_ID lBM_ID_,
      EAB_ServedCellAttribute_Item_iE_Extensions iE_Extensions_
   ) {
      super();
      cell_ID = cell_ID_;
      duplexOpertion = duplexOpertion_;
      pCellCA_Capacity = pCellCA_Capacity_;
      cellState = cellState_;
      lBM_ID = lBM_ID_;
      iE_Extensions = iE_Extensions_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public EAB_ServedCellAttribute_Item (
      ECGI cell_ID_,
      EAB_DuplexOperation duplexOpertion_
   ) {
      super();
      cell_ID = cell_ID_;
      duplexOpertion = duplexOpertion_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public EAB_ServedCellAttribute_Item (ECGI cell_ID_,
      EAB_DuplexOperation duplexOpertion_,
      EAB_PCellCA_Capacity pCellCA_Capacity_,
      EAB_CellState cellState_,
      long lBM_ID_,
      EAB_ServedCellAttribute_Item_iE_Extensions iE_Extensions_
   ) {
      super();
      cell_ID = cell_ID_;
      duplexOpertion = duplexOpertion_;
      pCellCA_Capacity = pCellCA_Capacity_;
      cellState = cellState_;
      lBM_ID = new EAB_LBM_ID (lBM_ID_);
      iE_Extensions = iE_Extensions_;
   }

   public void init () {
      cell_ID = null;
      duplexOpertion = null;
      pCellCA_Capacity = null;
      cellState = null;
      lBM_ID = null;
      iE_Extensions = null;
      extElem1 = null;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return cell_ID;
         case 1: return duplexOpertion;
         case 2: return pCellCA_Capacity;
         case 3: return cellState;
         case 4: return lBM_ID;
         case 5: return iE_Extensions;
         case 6: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "cell-ID";
         case 1: return "duplexOpertion";
         case 2: return "pCellCA-Capacity";
         case 3: return "cellState";
         case 4: return "lBM-ID";
         case 5: return "iE-Extensions";
         case 6: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean pCellCA_CapacityPresent = buffer.decodeBit ("pCellCA_CapacityPresent");
      boolean cellStatePresent = buffer.decodeBit ("cellStatePresent");
      boolean lBM_IDPresent = buffer.decodeBit ("lBM_IDPresent");
      boolean iE_ExtensionsPresent = buffer.decodeBit ("iE_ExtensionsPresent");

      // decode cell_ID

      buffer.getContext().eventDispatcher.startElement("cell_ID", -1);

      cell_ID = new ECGI();
      cell_ID.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("cell_ID", -1);

      // decode duplexOpertion

      buffer.getContext().eventDispatcher.startElement("duplexOpertion", -1);

      {
         int tval = EAB_DuplexOperation.decodeEnumValue (buffer);
         duplexOpertion = EAB_DuplexOperation.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("duplexOpertion", -1);

      // decode pCellCA_Capacity

      if (pCellCA_CapacityPresent) {
         buffer.getContext().eventDispatcher.startElement("pCellCA_Capacity", -1);

         pCellCA_Capacity = new EAB_PCellCA_Capacity();
         pCellCA_Capacity.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("pCellCA_Capacity", -1);
      }
      else {
         pCellCA_Capacity = null;
      }

      // decode cellState

      if (cellStatePresent) {
         buffer.getContext().eventDispatcher.startElement("cellState", -1);

         int tval = EAB_CellState.decodeEnumValue (buffer);
         cellState = EAB_CellState.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("cellState", -1);
      }
      else {
         cellState = null;
      }

      // decode lBM_ID

      if (lBM_IDPresent) {
         buffer.getContext().eventDispatcher.startElement("lBM_ID", -1);

         lBM_ID = new EAB_LBM_ID();
         lBM_ID.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("lBM_ID", -1);
      }
      else {
         lBM_ID = null;
      }

      // decode iE_Extensions

      if (iE_ExtensionsPresent) {
         buffer.getContext().eventDispatcher.startElement("iE_Extensions", -1);

         iE_Extensions = new EAB_ServedCellAttribute_Item_iE_Extensions();
         iE_Extensions.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("iE_Extensions", -1);
      }
      else {
         iE_Extensions = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (cell_ID != null) cell_ID.print (_sb, "cell_ID", _level+1);
      if (duplexOpertion != null) duplexOpertion.print (_sb, "duplexOpertion", _level+1);
      if (pCellCA_Capacity != null) pCellCA_Capacity.print (_sb, "pCellCA_Capacity", _level+1);
      if (cellState != null) cellState.print (_sb, "cellState", _level+1);
      if (lBM_ID != null) lBM_ID.print (_sb, "lBM_ID", _level+1);
      if (iE_Extensions != null) iE_Extensions.print (_sb, "iE_Extensions", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
