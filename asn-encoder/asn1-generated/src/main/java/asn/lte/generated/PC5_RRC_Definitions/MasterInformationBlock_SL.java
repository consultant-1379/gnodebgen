/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.PC5_RRC_Definitions;

import com.objsys.asn1j.runtime.*;
import asn.lte.generated.EUTRA_RRC_Definitions.TDD_ConfigSL_r12;

public class MasterInformationBlock_SL extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_PC5_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "MasterInformationBlock-SL";
   }

   public MasterInformationBlock_SL_sl_Bandwidth_r12 sl_Bandwidth_r12 = null;
   public TDD_ConfigSL_r12 tdd_ConfigSL_r12;
   public Asn1BitString directFrameNumber_r12;
   public Asn1Integer directSubframeNumber_r12;
   public Asn1Boolean inCoverage_r12;
   public Asn1BitString reserved_r12;

   public MasterInformationBlock_SL () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MasterInformationBlock_SL (
      MasterInformationBlock_SL_sl_Bandwidth_r12 sl_Bandwidth_r12_,
      TDD_ConfigSL_r12 tdd_ConfigSL_r12_,
      Asn1BitString directFrameNumber_r12_,
      Asn1Integer directSubframeNumber_r12_,
      Asn1Boolean inCoverage_r12_,
      Asn1BitString reserved_r12_
   ) {
      super();
      sl_Bandwidth_r12 = sl_Bandwidth_r12_;
      tdd_ConfigSL_r12 = tdd_ConfigSL_r12_;
      directFrameNumber_r12 = directFrameNumber_r12_;
      directSubframeNumber_r12 = directSubframeNumber_r12_;
      inCoverage_r12 = inCoverage_r12_;
      reserved_r12 = reserved_r12_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public MasterInformationBlock_SL (MasterInformationBlock_SL_sl_Bandwidth_r12 sl_Bandwidth_r12_,
      TDD_ConfigSL_r12 tdd_ConfigSL_r12_,
      Asn1BitString directFrameNumber_r12_,
      long directSubframeNumber_r12_,
      boolean inCoverage_r12_,
      Asn1BitString reserved_r12_
   ) {
      super();
      sl_Bandwidth_r12 = sl_Bandwidth_r12_;
      tdd_ConfigSL_r12 = tdd_ConfigSL_r12_;
      directFrameNumber_r12 = directFrameNumber_r12_;
      directSubframeNumber_r12 = new Asn1Integer (directSubframeNumber_r12_);
      inCoverage_r12 = new Asn1Boolean (inCoverage_r12_);
      reserved_r12 = reserved_r12_;
   }

   public void init () {
      sl_Bandwidth_r12 = null;
      tdd_ConfigSL_r12 = null;
      directFrameNumber_r12 = null;
      directSubframeNumber_r12 = null;
      inCoverage_r12 = null;
      reserved_r12 = null;
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return sl_Bandwidth_r12;
         case 1: return tdd_ConfigSL_r12;
         case 2: return directFrameNumber_r12;
         case 3: return directSubframeNumber_r12;
         case 4: return inCoverage_r12;
         case 5: return reserved_r12;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "sl-Bandwidth-r12";
         case 1: return "tdd-ConfigSL-r12";
         case 2: return "directFrameNumber-r12";
         case 3: return "directSubframeNumber-r12";
         case 4: return "inCoverage-r12";
         case 5: return "reserved-r12";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode sl_Bandwidth_r12

      buffer.getContext().eventDispatcher.startElement("sl_Bandwidth_r12", -1);

      {
         int tval = MasterInformationBlock_SL_sl_Bandwidth_r12.decodeEnumValue (buffer);
         sl_Bandwidth_r12 = MasterInformationBlock_SL_sl_Bandwidth_r12.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("sl_Bandwidth_r12", -1);

      // decode tdd_ConfigSL_r12

      buffer.getContext().eventDispatcher.startElement("tdd_ConfigSL_r12", -1);

      tdd_ConfigSL_r12 = new TDD_ConfigSL_r12();
      tdd_ConfigSL_r12.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("tdd_ConfigSL_r12", -1);

      // decode directFrameNumber_r12

      buffer.getContext().eventDispatcher.startElement("directFrameNumber_r12", -1);

      directFrameNumber_r12 = new Asn1BitString();
      directFrameNumber_r12.decode (buffer, 10, 10);

      buffer.invokeCharacters(directFrameNumber_r12.toString());
      buffer.getContext().eventDispatcher.endElement("directFrameNumber_r12", -1);

      // decode directSubframeNumber_r12

      buffer.getContext().eventDispatcher.startElement("directSubframeNumber_r12", -1);

      directSubframeNumber_r12 = new Asn1Integer();
      directSubframeNumber_r12.decode (buffer, 0, 9);

      buffer.invokeCharacters(directSubframeNumber_r12.toString());
      buffer.getContext().eventDispatcher.endElement("directSubframeNumber_r12", -1);

      // decode inCoverage_r12

      buffer.getContext().eventDispatcher.startElement("inCoverage_r12", -1);

      inCoverage_r12 = new Asn1Boolean();
      inCoverage_r12.decode (buffer);

      buffer.invokeCharacters(inCoverage_r12.toString());
      buffer.getContext().eventDispatcher.endElement("inCoverage_r12", -1);

      // decode reserved_r12

      buffer.getContext().eventDispatcher.startElement("reserved_r12", -1);

      reserved_r12 = new Asn1BitString();
      reserved_r12.decode (buffer, 19, 19);

      buffer.invokeCharacters(reserved_r12.toString());
      buffer.getContext().eventDispatcher.endElement("reserved_r12", -1);

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (sl_Bandwidth_r12 != null) sl_Bandwidth_r12.print (_sb, "sl_Bandwidth_r12", _level+1);
      if (tdd_ConfigSL_r12 != null) tdd_ConfigSL_r12.print (_sb, "tdd_ConfigSL_r12", _level+1);
      if (directFrameNumber_r12 != null) directFrameNumber_r12.print (_sb, "directFrameNumber_r12", _level+1);
      if (directSubframeNumber_r12 != null) directSubframeNumber_r12.print (_sb, "directSubframeNumber_r12", _level+1);
      if (inCoverage_r12 != null) inCoverage_r12.print (_sb, "inCoverage_r12", _level+1);
      if (reserved_r12 != null) reserved_r12.print (_sb, "reserved_r12", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
