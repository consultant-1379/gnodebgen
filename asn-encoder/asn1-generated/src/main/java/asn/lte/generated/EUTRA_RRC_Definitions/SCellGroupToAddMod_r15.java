/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SCellGroupToAddMod_r15 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SCellGroupToAddMod-r15";
   }

   public SCellGroupIndex_r15 sCellGroupIndex_r15;
   public SCellConfigCommon_r15 sCellConfigCommon_r15;  // optional
   public SCellToReleaseListExt_r13 sCellToReleaseList_r15;  // optional
   public SCellToAddModListExt_r13 sCellToAddModList_r15;  // optional

   public SCellGroupToAddMod_r15 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SCellGroupToAddMod_r15 (
      SCellGroupIndex_r15 sCellGroupIndex_r15_,
      SCellConfigCommon_r15 sCellConfigCommon_r15_,
      SCellToReleaseListExt_r13 sCellToReleaseList_r15_,
      SCellToAddModListExt_r13 sCellToAddModList_r15_
   ) {
      super();
      sCellGroupIndex_r15 = sCellGroupIndex_r15_;
      sCellConfigCommon_r15 = sCellConfigCommon_r15_;
      sCellToReleaseList_r15 = sCellToReleaseList_r15_;
      sCellToAddModList_r15 = sCellToAddModList_r15_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SCellGroupToAddMod_r15 (
      SCellGroupIndex_r15 sCellGroupIndex_r15_
   ) {
      super();
      sCellGroupIndex_r15 = sCellGroupIndex_r15_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SCellGroupToAddMod_r15 (long sCellGroupIndex_r15_,
      SCellConfigCommon_r15 sCellConfigCommon_r15_,
      SCellToReleaseListExt_r13 sCellToReleaseList_r15_,
      SCellToAddModListExt_r13 sCellToAddModList_r15_
   ) {
      super();
      sCellGroupIndex_r15 = new SCellGroupIndex_r15 (sCellGroupIndex_r15_);
      sCellConfigCommon_r15 = sCellConfigCommon_r15_;
      sCellToReleaseList_r15 = sCellToReleaseList_r15_;
      sCellToAddModList_r15 = sCellToAddModList_r15_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public SCellGroupToAddMod_r15 (
      long sCellGroupIndex_r15_
   ) {
      super();
      sCellGroupIndex_r15 = new SCellGroupIndex_r15 (sCellGroupIndex_r15_);
   }

   public void init () {
      sCellGroupIndex_r15 = null;
      sCellConfigCommon_r15 = null;
      sCellToReleaseList_r15 = null;
      sCellToAddModList_r15 = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return sCellGroupIndex_r15;
         case 1: return sCellConfigCommon_r15;
         case 2: return sCellToReleaseList_r15;
         case 3: return sCellToAddModList_r15;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "sCellGroupIndex-r15";
         case 1: return "sCellConfigCommon-r15";
         case 2: return "sCellToReleaseList-r15";
         case 3: return "sCellToAddModList-r15";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean sCellConfigCommon_r15Present = buffer.decodeBit ("sCellConfigCommon_r15Present");
      boolean sCellToReleaseList_r15Present = buffer.decodeBit ("sCellToReleaseList_r15Present");
      boolean sCellToAddModList_r15Present = buffer.decodeBit ("sCellToAddModList_r15Present");

      // decode sCellGroupIndex_r15

      buffer.getContext().eventDispatcher.startElement("sCellGroupIndex_r15", -1);

      sCellGroupIndex_r15 = new SCellGroupIndex_r15();
      sCellGroupIndex_r15.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("sCellGroupIndex_r15", -1);

      // decode sCellConfigCommon_r15

      if (sCellConfigCommon_r15Present) {
         buffer.getContext().eventDispatcher.startElement("sCellConfigCommon_r15", -1);

         sCellConfigCommon_r15 = new SCellConfigCommon_r15();
         sCellConfigCommon_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sCellConfigCommon_r15", -1);
      }
      else {
         sCellConfigCommon_r15 = null;
      }

      // decode sCellToReleaseList_r15

      if (sCellToReleaseList_r15Present) {
         buffer.getContext().eventDispatcher.startElement("sCellToReleaseList_r15", -1);

         sCellToReleaseList_r15 = new SCellToReleaseListExt_r13();
         sCellToReleaseList_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sCellToReleaseList_r15", -1);
      }
      else {
         sCellToReleaseList_r15 = null;
      }

      // decode sCellToAddModList_r15

      if (sCellToAddModList_r15Present) {
         buffer.getContext().eventDispatcher.startElement("sCellToAddModList_r15", -1);

         sCellToAddModList_r15 = new SCellToAddModListExt_r13();
         sCellToAddModList_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sCellToAddModList_r15", -1);
      }
      else {
         sCellToAddModList_r15 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (sCellGroupIndex_r15 != null) sCellGroupIndex_r15.print (_sb, "sCellGroupIndex_r15", _level+1);
      if (sCellConfigCommon_r15 != null) sCellConfigCommon_r15.print (_sb, "sCellConfigCommon_r15", _level+1);
      if (sCellToReleaseList_r15 != null) sCellToReleaseList_r15.print (_sb, "sCellToReleaseList_r15", _level+1);
      if (sCellToAddModList_r15 != null) sCellToAddModList_r15.print (_sb, "sCellToAddModList_r15", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
