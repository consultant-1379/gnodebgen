/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SoundingRS_UL_ConfigDedicated_setup extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public SoundingRS_UL_ConfigDedicated_setup_srs_Bandwidth srs_Bandwidth = null;
   public SoundingRS_UL_ConfigDedicated_setup_srs_HoppingBandwidth srs_HoppingBandwidth = null;
   public Asn1Integer freqDomainPosition;
   public Asn1Boolean duration;
   public Asn1Integer srs_ConfigIndex;
   public Asn1Integer transmissionComb;
   public SoundingRS_UL_ConfigDedicated_setup_cyclicShift cyclicShift = null;

   public SoundingRS_UL_ConfigDedicated_setup () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SoundingRS_UL_ConfigDedicated_setup (
      SoundingRS_UL_ConfigDedicated_setup_srs_Bandwidth srs_Bandwidth_,
      SoundingRS_UL_ConfigDedicated_setup_srs_HoppingBandwidth srs_HoppingBandwidth_,
      Asn1Integer freqDomainPosition_,
      Asn1Boolean duration_,
      Asn1Integer srs_ConfigIndex_,
      Asn1Integer transmissionComb_,
      SoundingRS_UL_ConfigDedicated_setup_cyclicShift cyclicShift_
   ) {
      super();
      srs_Bandwidth = srs_Bandwidth_;
      srs_HoppingBandwidth = srs_HoppingBandwidth_;
      freqDomainPosition = freqDomainPosition_;
      duration = duration_;
      srs_ConfigIndex = srs_ConfigIndex_;
      transmissionComb = transmissionComb_;
      cyclicShift = cyclicShift_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SoundingRS_UL_ConfigDedicated_setup (SoundingRS_UL_ConfigDedicated_setup_srs_Bandwidth srs_Bandwidth_,
      SoundingRS_UL_ConfigDedicated_setup_srs_HoppingBandwidth srs_HoppingBandwidth_,
      long freqDomainPosition_,
      boolean duration_,
      long srs_ConfigIndex_,
      long transmissionComb_,
      SoundingRS_UL_ConfigDedicated_setup_cyclicShift cyclicShift_
   ) {
      super();
      srs_Bandwidth = srs_Bandwidth_;
      srs_HoppingBandwidth = srs_HoppingBandwidth_;
      freqDomainPosition = new Asn1Integer (freqDomainPosition_);
      duration = new Asn1Boolean (duration_);
      srs_ConfigIndex = new Asn1Integer (srs_ConfigIndex_);
      transmissionComb = new Asn1Integer (transmissionComb_);
      cyclicShift = cyclicShift_;
   }

   public void init () {
      srs_Bandwidth = null;
      srs_HoppingBandwidth = null;
      freqDomainPosition = null;
      duration = null;
      srs_ConfigIndex = null;
      transmissionComb = null;
      cyclicShift = null;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return srs_Bandwidth;
         case 1: return srs_HoppingBandwidth;
         case 2: return freqDomainPosition;
         case 3: return duration;
         case 4: return srs_ConfigIndex;
         case 5: return transmissionComb;
         case 6: return cyclicShift;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "srs-Bandwidth";
         case 1: return "srs-HoppingBandwidth";
         case 2: return "freqDomainPosition";
         case 3: return "duration";
         case 4: return "srs-ConfigIndex";
         case 5: return "transmissionComb";
         case 6: return "cyclicShift";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode srs_Bandwidth

      buffer.getContext().eventDispatcher.startElement("srs_Bandwidth", -1);

      {
         int tval = SoundingRS_UL_ConfigDedicated_setup_srs_Bandwidth.decodeEnumValue (buffer);
         srs_Bandwidth = SoundingRS_UL_ConfigDedicated_setup_srs_Bandwidth.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("srs_Bandwidth", -1);

      // decode srs_HoppingBandwidth

      buffer.getContext().eventDispatcher.startElement("srs_HoppingBandwidth", -1);

      {
         int tval = SoundingRS_UL_ConfigDedicated_setup_srs_HoppingBandwidth.decodeEnumValue (buffer);
         srs_HoppingBandwidth = SoundingRS_UL_ConfigDedicated_setup_srs_HoppingBandwidth.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("srs_HoppingBandwidth", -1);

      // decode freqDomainPosition

      buffer.getContext().eventDispatcher.startElement("freqDomainPosition", -1);

      freqDomainPosition = new Asn1Integer();
      freqDomainPosition.decode (buffer, 0, 23);

      buffer.invokeCharacters(freqDomainPosition.toString());
      buffer.getContext().eventDispatcher.endElement("freqDomainPosition", -1);

      // decode duration

      buffer.getContext().eventDispatcher.startElement("duration", -1);

      duration = new Asn1Boolean();
      duration.decode (buffer);

      buffer.invokeCharacters(duration.toString());
      buffer.getContext().eventDispatcher.endElement("duration", -1);

      // decode srs_ConfigIndex

      buffer.getContext().eventDispatcher.startElement("srs_ConfigIndex", -1);

      srs_ConfigIndex = new Asn1Integer();
      srs_ConfigIndex.decode (buffer, 0, 1023);

      buffer.invokeCharacters(srs_ConfigIndex.toString());
      buffer.getContext().eventDispatcher.endElement("srs_ConfigIndex", -1);

      // decode transmissionComb

      buffer.getContext().eventDispatcher.startElement("transmissionComb", -1);

      transmissionComb = new Asn1Integer();
      transmissionComb.decode (buffer, 0, 1);

      buffer.invokeCharacters(transmissionComb.toString());
      buffer.getContext().eventDispatcher.endElement("transmissionComb", -1);

      // decode cyclicShift

      buffer.getContext().eventDispatcher.startElement("cyclicShift", -1);

      {
         int tval = SoundingRS_UL_ConfigDedicated_setup_cyclicShift.decodeEnumValue (buffer);
         cyclicShift = SoundingRS_UL_ConfigDedicated_setup_cyclicShift.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("cyclicShift", -1);

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (srs_Bandwidth != null) srs_Bandwidth.print (_sb, "srs_Bandwidth", _level+1);
      if (srs_HoppingBandwidth != null) srs_HoppingBandwidth.print (_sb, "srs_HoppingBandwidth", _level+1);
      if (freqDomainPosition != null) freqDomainPosition.print (_sb, "freqDomainPosition", _level+1);
      if (duration != null) duration.print (_sb, "duration", _level+1);
      if (srs_ConfigIndex != null) srs_ConfigIndex.print (_sb, "srs_ConfigIndex", _level+1);
      if (transmissionComb != null) transmissionComb.print (_sb, "transmissionComb", _level+1);
      if (cyclicShift != null) cyclicShift.print (_sb, "cyclicShift", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
