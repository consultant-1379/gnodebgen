/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SL_ResourcePool_r16_sl_SubchannelSize_r16 extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ENUMERATED";
   }

   // Integer constants for switch-case
   public static final int _N10 = 0;
   public static final int _N12 = 1;
   public static final int _N15 = 2;
   public static final int _N20 = 3;
   public static final int _N25 = 4;
   public static final int _N50 = 5;
   public static final int _N75 = 6;
   public static final int _N100 = 7;

   // Singleton instances of SL_ResourcePool_r16_sl_SubchannelSize_r16
   protected static final SL_ResourcePool_r16_sl_SubchannelSize_r16 _n10 = new SL_ResourcePool_r16_sl_SubchannelSize_r16(0);
   protected static final SL_ResourcePool_r16_sl_SubchannelSize_r16 _n12 = new SL_ResourcePool_r16_sl_SubchannelSize_r16(1);
   protected static final SL_ResourcePool_r16_sl_SubchannelSize_r16 _n15 = new SL_ResourcePool_r16_sl_SubchannelSize_r16(2);
   protected static final SL_ResourcePool_r16_sl_SubchannelSize_r16 _n20 = new SL_ResourcePool_r16_sl_SubchannelSize_r16(3);
   protected static final SL_ResourcePool_r16_sl_SubchannelSize_r16 _n25 = new SL_ResourcePool_r16_sl_SubchannelSize_r16(4);
   protected static final SL_ResourcePool_r16_sl_SubchannelSize_r16 _n50 = new SL_ResourcePool_r16_sl_SubchannelSize_r16(5);
   protected static final SL_ResourcePool_r16_sl_SubchannelSize_r16 _n75 = new SL_ResourcePool_r16_sl_SubchannelSize_r16(6);
   protected static final SL_ResourcePool_r16_sl_SubchannelSize_r16 _n100 = new SL_ResourcePool_r16_sl_SubchannelSize_r16(7);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    *   7
    */
   protected SL_ResourcePool_r16_sl_SubchannelSize_r16 (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for n10.
    */
   public static SL_ResourcePool_r16_sl_SubchannelSize_r16 n10() {
      return _n10;
   }

   /**
    * Singleton accessor method for n12.
    */
   public static SL_ResourcePool_r16_sl_SubchannelSize_r16 n12() {
      return _n12;
   }

   /**
    * Singleton accessor method for n15.
    */
   public static SL_ResourcePool_r16_sl_SubchannelSize_r16 n15() {
      return _n15;
   }

   /**
    * Singleton accessor method for n20.
    */
   public static SL_ResourcePool_r16_sl_SubchannelSize_r16 n20() {
      return _n20;
   }

   /**
    * Singleton accessor method for n25.
    */
   public static SL_ResourcePool_r16_sl_SubchannelSize_r16 n25() {
      return _n25;
   }

   /**
    * Singleton accessor method for n50.
    */
   public static SL_ResourcePool_r16_sl_SubchannelSize_r16 n50() {
      return _n50;
   }

   /**
    * Singleton accessor method for n75.
    */
   public static SL_ResourcePool_r16_sl_SubchannelSize_r16 n75() {
      return _n75;
   }

   /**
    * Singleton accessor method for n100.
    */
   public static SL_ResourcePool_r16_sl_SubchannelSize_r16 n100() {
      return _n100;
   }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return SL_ResourcePool_r16_sl_SubchannelSize_r16.valueOf( SL_ResourcePool_r16_sl_SubchannelSize_r16.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static SL_ResourcePool_r16_sl_SubchannelSize_r16 valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 0: return n10();
         case 1: return n12();
         case 2: return n15();
         case 3: return n20();
         case 4: return n25();
         case 5: return n50();
         case 6: return n75();
         case 7: return n100();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      ui = (int) buffer.decodeConsWholeNumber (8);

      switch (ui) {
         case 0: ret =  0; break;
         case 1: ret =  1; break;
         case 2: ret =  2; break;
         case 3: ret =  3; break;
         case 4: ret =  4; break;
         case 5: ret =  5; break;
         case 6: ret =  6; break;
         case 7: ret =  7; break;
         default: throw new Asn1InvalidEnumException (ui);
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (SL_ResourcePool_r16_sl_SubchannelSize_r16.valueOf(ret).toString());

      return ret;
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("n10");
         case 1: return ("n12");
         case 2: return ("n15");
         case 3: return ("n20");
         case 4: return ("n25");
         case 5: return ("n50");
         case 6: return ("n75");
         case 7: return ("n100");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
