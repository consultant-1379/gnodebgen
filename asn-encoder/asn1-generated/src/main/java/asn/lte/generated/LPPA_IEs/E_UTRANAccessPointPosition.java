/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.LPPA_IEs;

import com.objsys.asn1j.runtime.*;

public class E_UTRANAccessPointPosition extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPPA_IEsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "E-UTRANAccessPointPosition";
   }

   public E_UTRANAccessPointPosition_latitudeSign latitudeSign = null;
   public Asn1Integer latitude;
   public Asn1Integer longitude;
   public E_UTRANAccessPointPosition_directionOfAltitude directionOfAltitude = null;
   public Asn1Integer altitude;
   public Asn1Integer uncertaintySemi_major;
   public Asn1Integer uncertaintySemi_minor;
   public Asn1Integer orientationOfMajorAxis;
   public Asn1Integer uncertaintyAltitude;
   public Asn1Integer confidence;
   public Asn1OpenExt extElem1;

   public E_UTRANAccessPointPosition () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public E_UTRANAccessPointPosition (
      E_UTRANAccessPointPosition_latitudeSign latitudeSign_,
      Asn1Integer latitude_,
      Asn1Integer longitude_,
      E_UTRANAccessPointPosition_directionOfAltitude directionOfAltitude_,
      Asn1Integer altitude_,
      Asn1Integer uncertaintySemi_major_,
      Asn1Integer uncertaintySemi_minor_,
      Asn1Integer orientationOfMajorAxis_,
      Asn1Integer uncertaintyAltitude_,
      Asn1Integer confidence_
   ) {
      super();
      latitudeSign = latitudeSign_;
      latitude = latitude_;
      longitude = longitude_;
      directionOfAltitude = directionOfAltitude_;
      altitude = altitude_;
      uncertaintySemi_major = uncertaintySemi_major_;
      uncertaintySemi_minor = uncertaintySemi_minor_;
      orientationOfMajorAxis = orientationOfMajorAxis_;
      uncertaintyAltitude = uncertaintyAltitude_;
      confidence = confidence_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public E_UTRANAccessPointPosition (E_UTRANAccessPointPosition_latitudeSign latitudeSign_,
      long latitude_,
      long longitude_,
      E_UTRANAccessPointPosition_directionOfAltitude directionOfAltitude_,
      long altitude_,
      long uncertaintySemi_major_,
      long uncertaintySemi_minor_,
      long orientationOfMajorAxis_,
      long uncertaintyAltitude_,
      long confidence_
   ) {
      super();
      latitudeSign = latitudeSign_;
      latitude = new Asn1Integer (latitude_);
      longitude = new Asn1Integer (longitude_);
      directionOfAltitude = directionOfAltitude_;
      altitude = new Asn1Integer (altitude_);
      uncertaintySemi_major = new Asn1Integer (uncertaintySemi_major_);
      uncertaintySemi_minor = new Asn1Integer (uncertaintySemi_minor_);
      orientationOfMajorAxis = new Asn1Integer (orientationOfMajorAxis_);
      uncertaintyAltitude = new Asn1Integer (uncertaintyAltitude_);
      confidence = new Asn1Integer (confidence_);
   }

   public void init () {
      latitudeSign = null;
      latitude = null;
      longitude = null;
      directionOfAltitude = null;
      altitude = null;
      uncertaintySemi_major = null;
      uncertaintySemi_minor = null;
      orientationOfMajorAxis = null;
      uncertaintyAltitude = null;
      confidence = null;
      extElem1 = null;
   }

   public int getElementCount() { return 11; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return latitudeSign;
         case 1: return latitude;
         case 2: return longitude;
         case 3: return directionOfAltitude;
         case 4: return altitude;
         case 5: return uncertaintySemi_major;
         case 6: return uncertaintySemi_minor;
         case 7: return orientationOfMajorAxis;
         case 8: return uncertaintyAltitude;
         case 9: return confidence;
         case 10: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "latitudeSign";
         case 1: return "latitude";
         case 2: return "longitude";
         case 3: return "directionOfAltitude";
         case 4: return "altitude";
         case 5: return "uncertaintySemi-major";
         case 6: return "uncertaintySemi-minor";
         case 7: return "orientationOfMajorAxis";
         case 8: return "uncertaintyAltitude";
         case 9: return "confidence";
         case 10: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // decode latitudeSign

      buffer.getContext().eventDispatcher.startElement("latitudeSign", -1);

      {
         int tval = E_UTRANAccessPointPosition_latitudeSign.decodeEnumValue (buffer);
         latitudeSign = E_UTRANAccessPointPosition_latitudeSign.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("latitudeSign", -1);

      // decode latitude

      buffer.getContext().eventDispatcher.startElement("latitude", -1);

      latitude = new Asn1Integer();
      latitude.decode (buffer, 0, 8388607);

      buffer.invokeCharacters(latitude.toString());
      buffer.getContext().eventDispatcher.endElement("latitude", -1);

      // decode longitude

      buffer.getContext().eventDispatcher.startElement("longitude", -1);

      longitude = new Asn1Integer();
      longitude.decode (buffer, -8388608, 8388607);

      buffer.invokeCharacters(longitude.toString());
      buffer.getContext().eventDispatcher.endElement("longitude", -1);

      // decode directionOfAltitude

      buffer.getContext().eventDispatcher.startElement("directionOfAltitude", -1);

      {
         int tval = E_UTRANAccessPointPosition_directionOfAltitude.decodeEnumValue (buffer);
         directionOfAltitude = E_UTRANAccessPointPosition_directionOfAltitude.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("directionOfAltitude", -1);

      // decode altitude

      buffer.getContext().eventDispatcher.startElement("altitude", -1);

      altitude = new Asn1Integer();
      altitude.decode (buffer, 0, 32767);

      buffer.invokeCharacters(altitude.toString());
      buffer.getContext().eventDispatcher.endElement("altitude", -1);

      // decode uncertaintySemi_major

      buffer.getContext().eventDispatcher.startElement("uncertaintySemi_major", -1);

      uncertaintySemi_major = new Asn1Integer();
      uncertaintySemi_major.decode (buffer, 0, 127);

      buffer.invokeCharacters(uncertaintySemi_major.toString());
      buffer.getContext().eventDispatcher.endElement("uncertaintySemi_major", -1);

      // decode uncertaintySemi_minor

      buffer.getContext().eventDispatcher.startElement("uncertaintySemi_minor", -1);

      uncertaintySemi_minor = new Asn1Integer();
      uncertaintySemi_minor.decode (buffer, 0, 127);

      buffer.invokeCharacters(uncertaintySemi_minor.toString());
      buffer.getContext().eventDispatcher.endElement("uncertaintySemi_minor", -1);

      // decode orientationOfMajorAxis

      buffer.getContext().eventDispatcher.startElement("orientationOfMajorAxis", -1);

      orientationOfMajorAxis = new Asn1Integer();
      orientationOfMajorAxis.decode (buffer, 0, 179);

      buffer.invokeCharacters(orientationOfMajorAxis.toString());
      buffer.getContext().eventDispatcher.endElement("orientationOfMajorAxis", -1);

      // decode uncertaintyAltitude

      buffer.getContext().eventDispatcher.startElement("uncertaintyAltitude", -1);

      uncertaintyAltitude = new Asn1Integer();
      uncertaintyAltitude.decode (buffer, 0, 127);

      buffer.invokeCharacters(uncertaintyAltitude.toString());
      buffer.getContext().eventDispatcher.endElement("uncertaintyAltitude", -1);

      // decode confidence

      buffer.getContext().eventDispatcher.startElement("confidence", -1);

      confidence = new Asn1Integer();
      confidence.decode (buffer, 0, 100);

      buffer.invokeCharacters(confidence.toString());
      buffer.getContext().eventDispatcher.endElement("confidence", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (latitudeSign != null) latitudeSign.print (_sb, "latitudeSign", _level+1);
      if (latitude != null) latitude.print (_sb, "latitude", _level+1);
      if (longitude != null) longitude.print (_sb, "longitude", _level+1);
      if (directionOfAltitude != null) directionOfAltitude.print (_sb, "directionOfAltitude", _level+1);
      if (altitude != null) altitude.print (_sb, "altitude", _level+1);
      if (uncertaintySemi_major != null) uncertaintySemi_major.print (_sb, "uncertaintySemi_major", _level+1);
      if (uncertaintySemi_minor != null) uncertaintySemi_minor.print (_sb, "uncertaintySemi_minor", _level+1);
      if (orientationOfMajorAxis != null) orientationOfMajorAxis.print (_sb, "orientationOfMajorAxis", _level+1);
      if (uncertaintyAltitude != null) uncertaintyAltitude.print (_sb, "uncertaintyAltitude", _level+1);
      if (confidence != null) confidence.print (_sb, "confidence", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
