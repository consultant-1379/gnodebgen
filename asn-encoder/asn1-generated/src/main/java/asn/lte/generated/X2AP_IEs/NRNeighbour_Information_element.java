/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.X2AP_IEs;

import com.objsys.asn1j.runtime.*;

public class NRNeighbour_Information_element extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_X2AP_IEsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public NRPCI nrpCI;
   public NRCGI nrCellID;
   public FiveGS_TAC fiveGS_TAC;  // optional
   public TAC configured_TAC;  // optional
   public Asn1OctetString measurementTimingConfiguration;
   public NRNeighbour_Information_element_nRNeighbourModeInfo nRNeighbourModeInfo;
   public NRNeighbour_Information_element_iE_Extensions iE_Extensions;  // optional
   public Asn1OpenExt extElem1;

   public NRNeighbour_Information_element () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public NRNeighbour_Information_element (
      NRPCI nrpCI_,
      NRCGI nrCellID_,
      FiveGS_TAC fiveGS_TAC_,
      TAC configured_TAC_,
      Asn1OctetString measurementTimingConfiguration_,
      NRNeighbour_Information_element_nRNeighbourModeInfo nRNeighbourModeInfo_,
      NRNeighbour_Information_element_iE_Extensions iE_Extensions_
   ) {
      super();
      nrpCI = nrpCI_;
      nrCellID = nrCellID_;
      fiveGS_TAC = fiveGS_TAC_;
      configured_TAC = configured_TAC_;
      measurementTimingConfiguration = measurementTimingConfiguration_;
      nRNeighbourModeInfo = nRNeighbourModeInfo_;
      iE_Extensions = iE_Extensions_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public NRNeighbour_Information_element (
      NRPCI nrpCI_,
      NRCGI nrCellID_,
      Asn1OctetString measurementTimingConfiguration_,
      NRNeighbour_Information_element_nRNeighbourModeInfo nRNeighbourModeInfo_
   ) {
      super();
      nrpCI = nrpCI_;
      nrCellID = nrCellID_;
      measurementTimingConfiguration = measurementTimingConfiguration_;
      nRNeighbourModeInfo = nRNeighbourModeInfo_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public NRNeighbour_Information_element (long nrpCI_,
      NRCGI nrCellID_,
      byte[] fiveGS_TAC_,
      byte[] configured_TAC_,
      byte[] measurementTimingConfiguration_,
      NRNeighbour_Information_element_nRNeighbourModeInfo nRNeighbourModeInfo_,
      NRNeighbour_Information_element_iE_Extensions iE_Extensions_
   ) {
      super();
      nrpCI = new NRPCI (nrpCI_);
      nrCellID = nrCellID_;
      fiveGS_TAC = new FiveGS_TAC (fiveGS_TAC_);
      configured_TAC = new TAC (configured_TAC_);
      measurementTimingConfiguration = new Asn1OctetString (measurementTimingConfiguration_);
      nRNeighbourModeInfo = nRNeighbourModeInfo_;
      iE_Extensions = iE_Extensions_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public NRNeighbour_Information_element (
      long nrpCI_,
      NRCGI nrCellID_,
      byte[] measurementTimingConfiguration_,
      NRNeighbour_Information_element_nRNeighbourModeInfo nRNeighbourModeInfo_
   ) {
      super();
      nrpCI = new NRPCI (nrpCI_);
      nrCellID = nrCellID_;
      measurementTimingConfiguration = new Asn1OctetString (measurementTimingConfiguration_);
      nRNeighbourModeInfo = nRNeighbourModeInfo_;
   }

   public void init () {
      nrpCI = null;
      nrCellID = null;
      fiveGS_TAC = null;
      configured_TAC = null;
      measurementTimingConfiguration = null;
      nRNeighbourModeInfo = null;
      iE_Extensions = null;
      extElem1 = null;
   }

   public int getElementCount() { return 8; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return nrpCI;
         case 1: return nrCellID;
         case 2: return fiveGS_TAC;
         case 3: return configured_TAC;
         case 4: return measurementTimingConfiguration;
         case 5: return nRNeighbourModeInfo;
         case 6: return iE_Extensions;
         case 7: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "nrpCI";
         case 1: return "nrCellID";
         case 2: return "fiveGS-TAC";
         case 3: return "configured-TAC";
         case 4: return "measurementTimingConfiguration";
         case 5: return "nRNeighbourModeInfo";
         case 6: return "iE-Extensions";
         case 7: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean fiveGS_TACPresent = buffer.decodeBit ("fiveGS_TACPresent");
      boolean configured_TACPresent = buffer.decodeBit ("configured_TACPresent");
      boolean iE_ExtensionsPresent = buffer.decodeBit ("iE_ExtensionsPresent");

      // decode nrpCI

      buffer.getContext().eventDispatcher.startElement("nrpCI", -1);

      nrpCI = new NRPCI();
      nrpCI.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("nrpCI", -1);

      // decode nrCellID

      buffer.getContext().eventDispatcher.startElement("nrCellID", -1);

      nrCellID = new NRCGI();
      nrCellID.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("nrCellID", -1);

      // decode fiveGS_TAC

      if (fiveGS_TACPresent) {
         buffer.getContext().eventDispatcher.startElement("fiveGS_TAC", -1);

         fiveGS_TAC = new FiveGS_TAC();
         fiveGS_TAC.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("fiveGS_TAC", -1);
      }
      else {
         fiveGS_TAC = null;
      }

      // decode configured_TAC

      if (configured_TACPresent) {
         buffer.getContext().eventDispatcher.startElement("configured_TAC", -1);

         configured_TAC = new TAC();
         configured_TAC.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("configured_TAC", -1);
      }
      else {
         configured_TAC = null;
      }

      // decode measurementTimingConfiguration

      buffer.getContext().eventDispatcher.startElement("measurementTimingConfiguration", -1);

      measurementTimingConfiguration = new Asn1OctetString();
      measurementTimingConfiguration.decode (buffer);

      buffer.invokeCharacters(measurementTimingConfiguration.toString());
      buffer.getContext().eventDispatcher.endElement("measurementTimingConfiguration", -1);

      // decode nRNeighbourModeInfo

      buffer.getContext().eventDispatcher.startElement("nRNeighbourModeInfo", -1);

      nRNeighbourModeInfo = new NRNeighbour_Information_element_nRNeighbourModeInfo();
      nRNeighbourModeInfo.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("nRNeighbourModeInfo", -1);

      // decode iE_Extensions

      if (iE_ExtensionsPresent) {
         buffer.getContext().eventDispatcher.startElement("iE_Extensions", -1);

         iE_Extensions = new NRNeighbour_Information_element_iE_Extensions();
         iE_Extensions.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("iE_Extensions", -1);
      }
      else {
         iE_Extensions = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (nrpCI != null) nrpCI.print (_sb, "nrpCI", _level+1);
      if (nrCellID != null) nrCellID.print (_sb, "nrCellID", _level+1);
      if (fiveGS_TAC != null) fiveGS_TAC.print (_sb, "fiveGS_TAC", _level+1);
      if (configured_TAC != null) configured_TAC.print (_sb, "configured_TAC", _level+1);
      if (measurementTimingConfiguration != null) measurementTimingConfiguration.print (_sb, "measurementTimingConfiguration", _level+1);
      if (nRNeighbourModeInfo != null) nRNeighbourModeInfo.print (_sb, "nRNeighbourModeInfo", _level+1);
      if (iE_Extensions != null) iE_Extensions.print (_sb, "iE_Extensions", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
