/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MeasResultSFTD_EUTRA extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "MeasResultSFTD-EUTRA";
   }

   public EUTRA_PhysCellId eutra_PhysCellId;
   public Asn1Integer sfn_OffsetResult;
   public Asn1Integer frameBoundaryOffsetResult;
   public RSRP_Range rsrp_Result;  // optional

   public MeasResultSFTD_EUTRA () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MeasResultSFTD_EUTRA (
      EUTRA_PhysCellId eutra_PhysCellId_,
      Asn1Integer sfn_OffsetResult_,
      Asn1Integer frameBoundaryOffsetResult_,
      RSRP_Range rsrp_Result_
   ) {
      super();
      eutra_PhysCellId = eutra_PhysCellId_;
      sfn_OffsetResult = sfn_OffsetResult_;
      frameBoundaryOffsetResult = frameBoundaryOffsetResult_;
      rsrp_Result = rsrp_Result_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public MeasResultSFTD_EUTRA (
      EUTRA_PhysCellId eutra_PhysCellId_,
      Asn1Integer sfn_OffsetResult_,
      Asn1Integer frameBoundaryOffsetResult_
   ) {
      super();
      eutra_PhysCellId = eutra_PhysCellId_;
      sfn_OffsetResult = sfn_OffsetResult_;
      frameBoundaryOffsetResult = frameBoundaryOffsetResult_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public MeasResultSFTD_EUTRA (long eutra_PhysCellId_,
      long sfn_OffsetResult_,
      long frameBoundaryOffsetResult_,
      long rsrp_Result_
   ) {
      super();
      eutra_PhysCellId = new EUTRA_PhysCellId (eutra_PhysCellId_);
      sfn_OffsetResult = new Asn1Integer (sfn_OffsetResult_);
      frameBoundaryOffsetResult = new Asn1Integer (frameBoundaryOffsetResult_);
      rsrp_Result = new RSRP_Range (rsrp_Result_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public MeasResultSFTD_EUTRA (
      long eutra_PhysCellId_,
      long sfn_OffsetResult_,
      long frameBoundaryOffsetResult_
   ) {
      super();
      eutra_PhysCellId = new EUTRA_PhysCellId (eutra_PhysCellId_);
      sfn_OffsetResult = new Asn1Integer (sfn_OffsetResult_);
      frameBoundaryOffsetResult = new Asn1Integer (frameBoundaryOffsetResult_);
   }

   public void init () {
      eutra_PhysCellId = null;
      sfn_OffsetResult = null;
      frameBoundaryOffsetResult = null;
      rsrp_Result = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return eutra_PhysCellId;
         case 1: return sfn_OffsetResult;
         case 2: return frameBoundaryOffsetResult;
         case 3: return rsrp_Result;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "eutra-PhysCellId";
         case 1: return "sfn-OffsetResult";
         case 2: return "frameBoundaryOffsetResult";
         case 3: return "rsrp-Result";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean rsrp_ResultPresent = buffer.decodeBit ("rsrp_ResultPresent");

      // decode eutra_PhysCellId

      buffer.getContext().eventDispatcher.startElement("eutra_PhysCellId", -1);

      eutra_PhysCellId = new EUTRA_PhysCellId();
      eutra_PhysCellId.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("eutra_PhysCellId", -1);

      // decode sfn_OffsetResult

      buffer.getContext().eventDispatcher.startElement("sfn_OffsetResult", -1);

      sfn_OffsetResult = new Asn1Integer();
      sfn_OffsetResult.decode (buffer, 0, 1023);

      buffer.invokeCharacters(sfn_OffsetResult.toString());
      buffer.getContext().eventDispatcher.endElement("sfn_OffsetResult", -1);

      // decode frameBoundaryOffsetResult

      buffer.getContext().eventDispatcher.startElement("frameBoundaryOffsetResult", -1);

      frameBoundaryOffsetResult = new Asn1Integer();
      frameBoundaryOffsetResult.decode (buffer, -30720, 30719);

      buffer.invokeCharacters(frameBoundaryOffsetResult.toString());
      buffer.getContext().eventDispatcher.endElement("frameBoundaryOffsetResult", -1);

      // decode rsrp_Result

      if (rsrp_ResultPresent) {
         buffer.getContext().eventDispatcher.startElement("rsrp_Result", -1);

         rsrp_Result = new RSRP_Range();
         rsrp_Result.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("rsrp_Result", -1);
      }
      else {
         rsrp_Result = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (eutra_PhysCellId != null) eutra_PhysCellId.print (_sb, "eutra_PhysCellId", _level+1);
      if (sfn_OffsetResult != null) sfn_OffsetResult.print (_sb, "sfn_OffsetResult", _level+1);
      if (frameBoundaryOffsetResult != null) frameBoundaryOffsetResult.print (_sb, "frameBoundaryOffsetResult", _level+1);
      if (rsrp_Result != null) rsrp_Result.print (_sb, "rsrp_Result", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
