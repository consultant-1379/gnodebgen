/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class FailureReportSCG_r12 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "FailureReportSCG-r12";
   }

   public FailureReportSCG_r12_failureType_r12 failureType_r12 = null;
   public MeasResultServFreqList_r10 measResultServFreqList_r12;  // optional
   public MeasResultList2EUTRA_r9 measResultNeighCells_r12;  // optional
   public boolean mV2ExtPresent;
   public FailureReportSCG_r12_failureType_v1290 failureType_v1290 = null;  // optional
   public boolean mV3ExtPresent;
   public MeasResultServFreqListExt_r13 measResultServFreqListExt_r13;  // optional
   public Asn1OpenExt extElem1;

   public FailureReportSCG_r12 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public FailureReportSCG_r12 (
      FailureReportSCG_r12_failureType_r12 failureType_r12_,
      MeasResultServFreqList_r10 measResultServFreqList_r12_,
      MeasResultList2EUTRA_r9 measResultNeighCells_r12_,
      FailureReportSCG_r12_failureType_v1290 failureType_v1290_,
      MeasResultServFreqListExt_r13 measResultServFreqListExt_r13_
   ) {
      super();
      failureType_r12 = failureType_r12_;
      measResultServFreqList_r12 = measResultServFreqList_r12_;
      measResultNeighCells_r12 = measResultNeighCells_r12_;
      failureType_v1290 = failureType_v1290_;
      measResultServFreqListExt_r13 = measResultServFreqListExt_r13_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public FailureReportSCG_r12 (
      FailureReportSCG_r12_failureType_r12 failureType_r12_
   ) {
      super();
      failureType_r12 = failureType_r12_;
   }

   public void init () {
      failureType_r12 = null;
      measResultServFreqList_r12 = null;
      measResultNeighCells_r12 = null;
      failureType_v1290 = null;
      measResultServFreqListExt_r13 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return failureType_r12;
         case 1: return measResultServFreqList_r12;
         case 2: return measResultNeighCells_r12;
         case 3: return failureType_v1290;
         case 4: return measResultServFreqListExt_r13;
         case 5: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "failureType-r12";
         case 1: return "measResultServFreqList-r12";
         case 2: return "measResultNeighCells-r12";
         case 3: return "failureType-v1290";
         case 4: return "measResultServFreqListExt-r13";
         case 5: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean measResultServFreqList_r12Present = buffer.decodeBit ("measResultServFreqList_r12Present");
      boolean measResultNeighCells_r12Present = buffer.decodeBit ("measResultNeighCells_r12Present");

      // decode failureType_r12

      buffer.getContext().eventDispatcher.startElement("failureType_r12", -1);

      {
         int tval = FailureReportSCG_r12_failureType_r12.decodeEnumValue (buffer);
         failureType_r12 = FailureReportSCG_r12_failureType_r12.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("failureType_r12", -1);

      // decode measResultServFreqList_r12

      if (measResultServFreqList_r12Present) {
         buffer.getContext().eventDispatcher.startElement("measResultServFreqList_r12", -1);

         measResultServFreqList_r12 = new MeasResultServFreqList_r10();
         measResultServFreqList_r12.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("measResultServFreqList_r12", -1);
      }
      else {
         measResultServFreqList_r12 = null;
      }

      // decode measResultNeighCells_r12

      if (measResultNeighCells_r12Present) {
         buffer.getContext().eventDispatcher.startElement("measResultNeighCells_r12", -1);

         measResultNeighCells_r12 = new MeasResultList2EUTRA_r9();
         measResultNeighCells_r12.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("measResultNeighCells_r12", -1);
      }
      else {
         measResultNeighCells_r12 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean failureType_v1290Present = buffer.decodeBit ("failureType_v1290Present");

            // decode failureType_v1290

            if (failureType_v1290Present) {
               buffer.getContext().eventDispatcher.startElement("failureType_v1290", -1);

               int tval = FailureReportSCG_r12_failureType_v1290.decodeEnumValue (buffer);
               failureType_v1290 = FailureReportSCG_r12_failureType_v1290.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("failureType_v1290", -1);
            }
            else {
               failureType_v1290 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean measResultServFreqListExt_r13Present = buffer.decodeBit ("measResultServFreqListExt_r13Present");

            // decode measResultServFreqListExt_r13

            if (measResultServFreqListExt_r13Present) {
               buffer.getContext().eventDispatcher.startElement("measResultServFreqListExt_r13", -1);

               measResultServFreqListExt_r13 = new MeasResultServFreqListExt_r13();
               measResultServFreqListExt_r13.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("measResultServFreqListExt_r13", -1);
            }
            else {
               measResultServFreqListExt_r13 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (failureType_r12 != null) failureType_r12.print (_sb, "failureType_r12", _level+1);
      if (measResultServFreqList_r12 != null) measResultServFreqList_r12.print (_sb, "measResultServFreqList_r12", _level+1);
      if (measResultNeighCells_r12 != null) measResultNeighCells_r12.print (_sb, "measResultNeighCells_r12", _level+1);
      if (failureType_v1290 != null) failureType_v1290.print (_sb, "failureType_v1290", _level+1);
      if (measResultServFreqListExt_r13 != null) measResultServFreqListExt_r13.print (_sb, "measResultServFreqListExt_r13", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
