/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SRS_SwitchingTimeNR_switchingTimeUL extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ENUMERATED";
   }

   // Integer constants for switch-case
   public static final int _N0US = 0;
   public static final int _N30US = 1;
   public static final int _N100US = 2;
   public static final int _N140US = 3;
   public static final int _N200US = 4;
   public static final int _N300US = 5;
   public static final int _N500US = 6;
   public static final int _N900US = 7;

   // Singleton instances of SRS_SwitchingTimeNR_switchingTimeUL
   protected static final SRS_SwitchingTimeNR_switchingTimeUL _n0us = new SRS_SwitchingTimeNR_switchingTimeUL(0);
   protected static final SRS_SwitchingTimeNR_switchingTimeUL _n30us = new SRS_SwitchingTimeNR_switchingTimeUL(1);
   protected static final SRS_SwitchingTimeNR_switchingTimeUL _n100us = new SRS_SwitchingTimeNR_switchingTimeUL(2);
   protected static final SRS_SwitchingTimeNR_switchingTimeUL _n140us = new SRS_SwitchingTimeNR_switchingTimeUL(3);
   protected static final SRS_SwitchingTimeNR_switchingTimeUL _n200us = new SRS_SwitchingTimeNR_switchingTimeUL(4);
   protected static final SRS_SwitchingTimeNR_switchingTimeUL _n300us = new SRS_SwitchingTimeNR_switchingTimeUL(5);
   protected static final SRS_SwitchingTimeNR_switchingTimeUL _n500us = new SRS_SwitchingTimeNR_switchingTimeUL(6);
   protected static final SRS_SwitchingTimeNR_switchingTimeUL _n900us = new SRS_SwitchingTimeNR_switchingTimeUL(7);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    *   7
    */
   protected SRS_SwitchingTimeNR_switchingTimeUL (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for n0us.
    */
   public static SRS_SwitchingTimeNR_switchingTimeUL n0us() {
      return _n0us;
   }

   /**
    * Singleton accessor method for n30us.
    */
   public static SRS_SwitchingTimeNR_switchingTimeUL n30us() {
      return _n30us;
   }

   /**
    * Singleton accessor method for n100us.
    */
   public static SRS_SwitchingTimeNR_switchingTimeUL n100us() {
      return _n100us;
   }

   /**
    * Singleton accessor method for n140us.
    */
   public static SRS_SwitchingTimeNR_switchingTimeUL n140us() {
      return _n140us;
   }

   /**
    * Singleton accessor method for n200us.
    */
   public static SRS_SwitchingTimeNR_switchingTimeUL n200us() {
      return _n200us;
   }

   /**
    * Singleton accessor method for n300us.
    */
   public static SRS_SwitchingTimeNR_switchingTimeUL n300us() {
      return _n300us;
   }

   /**
    * Singleton accessor method for n500us.
    */
   public static SRS_SwitchingTimeNR_switchingTimeUL n500us() {
      return _n500us;
   }

   /**
    * Singleton accessor method for n900us.
    */
   public static SRS_SwitchingTimeNR_switchingTimeUL n900us() {
      return _n900us;
   }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return SRS_SwitchingTimeNR_switchingTimeUL.valueOf( SRS_SwitchingTimeNR_switchingTimeUL.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static SRS_SwitchingTimeNR_switchingTimeUL valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 0: return n0us();
         case 1: return n30us();
         case 2: return n100us();
         case 3: return n140us();
         case 4: return n200us();
         case 5: return n300us();
         case 6: return n500us();
         case 7: return n900us();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      ui = (int) buffer.decodeConsWholeNumber (8);

      switch (ui) {
         case 0: ret =  0; break;
         case 1: ret =  1; break;
         case 2: ret =  2; break;
         case 3: ret =  3; break;
         case 4: ret =  4; break;
         case 5: ret =  5; break;
         case 6: ret =  6; break;
         case 7: ret =  7; break;
         default: throw new Asn1InvalidEnumException (ui);
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (SRS_SwitchingTimeNR_switchingTimeUL.valueOf(ret).toString());

      return ret;
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("n0us");
         case 1: return ("n30us");
         case 2: return ("n100us");
         case 3: return ("n140us");
         case 4: return ("n200us");
         case 5: return ("n300us");
         case 6: return ("n500us");
         case 7: return ("n900us");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
