/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SystemInformationBlockType2_ac_BarringInfo extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public Asn1Boolean ac_BarringForEmergency;
   public AC_BarringConfig ac_BarringForMO_Signalling;  // optional
   public AC_BarringConfig ac_BarringForMO_Data;  // optional

   public SystemInformationBlockType2_ac_BarringInfo () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SystemInformationBlockType2_ac_BarringInfo (
      Asn1Boolean ac_BarringForEmergency_,
      AC_BarringConfig ac_BarringForMO_Signalling_,
      AC_BarringConfig ac_BarringForMO_Data_
   ) {
      super();
      ac_BarringForEmergency = ac_BarringForEmergency_;
      ac_BarringForMO_Signalling = ac_BarringForMO_Signalling_;
      ac_BarringForMO_Data = ac_BarringForMO_Data_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SystemInformationBlockType2_ac_BarringInfo (
      Asn1Boolean ac_BarringForEmergency_
   ) {
      super();
      ac_BarringForEmergency = ac_BarringForEmergency_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SystemInformationBlockType2_ac_BarringInfo (boolean ac_BarringForEmergency_,
      AC_BarringConfig ac_BarringForMO_Signalling_,
      AC_BarringConfig ac_BarringForMO_Data_
   ) {
      super();
      ac_BarringForEmergency = new Asn1Boolean (ac_BarringForEmergency_);
      ac_BarringForMO_Signalling = ac_BarringForMO_Signalling_;
      ac_BarringForMO_Data = ac_BarringForMO_Data_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public SystemInformationBlockType2_ac_BarringInfo (
      boolean ac_BarringForEmergency_
   ) {
      super();
      ac_BarringForEmergency = new Asn1Boolean (ac_BarringForEmergency_);
   }

   public void init () {
      ac_BarringForEmergency = null;
      ac_BarringForMO_Signalling = null;
      ac_BarringForMO_Data = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return ac_BarringForEmergency;
         case 1: return ac_BarringForMO_Signalling;
         case 2: return ac_BarringForMO_Data;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "ac-BarringForEmergency";
         case 1: return "ac-BarringForMO-Signalling";
         case 2: return "ac-BarringForMO-Data";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean ac_BarringForMO_SignallingPresent = buffer.decodeBit ("ac_BarringForMO_SignallingPresent");
      boolean ac_BarringForMO_DataPresent = buffer.decodeBit ("ac_BarringForMO_DataPresent");

      // decode ac_BarringForEmergency

      buffer.getContext().eventDispatcher.startElement("ac_BarringForEmergency", -1);

      ac_BarringForEmergency = new Asn1Boolean();
      ac_BarringForEmergency.decode (buffer);

      buffer.invokeCharacters(ac_BarringForEmergency.toString());
      buffer.getContext().eventDispatcher.endElement("ac_BarringForEmergency", -1);

      // decode ac_BarringForMO_Signalling

      if (ac_BarringForMO_SignallingPresent) {
         buffer.getContext().eventDispatcher.startElement("ac_BarringForMO_Signalling", -1);

         ac_BarringForMO_Signalling = new AC_BarringConfig();
         ac_BarringForMO_Signalling.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ac_BarringForMO_Signalling", -1);
      }
      else {
         ac_BarringForMO_Signalling = null;
      }

      // decode ac_BarringForMO_Data

      if (ac_BarringForMO_DataPresent) {
         buffer.getContext().eventDispatcher.startElement("ac_BarringForMO_Data", -1);

         ac_BarringForMO_Data = new AC_BarringConfig();
         ac_BarringForMO_Data.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ac_BarringForMO_Data", -1);
      }
      else {
         ac_BarringForMO_Data = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (ac_BarringForEmergency != null) ac_BarringForEmergency.print (_sb, "ac_BarringForEmergency", _level+1);
      if (ac_BarringForMO_Signalling != null) ac_BarringForMO_Signalling.print (_sb, "ac_BarringForMO_Signalling", _level+1);
      if (ac_BarringForMO_Data != null) ac_BarringForMO_Data.print (_sb, "ac_BarringForMO_Data", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
