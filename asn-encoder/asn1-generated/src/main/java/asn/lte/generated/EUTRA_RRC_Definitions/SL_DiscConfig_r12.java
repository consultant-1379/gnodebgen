/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SL_DiscConfig_r12 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SL-DiscConfig-r12";
   }

   public SL_DiscConfig_r12_discTxResources_r12 discTxResources_r12;  // optional
   public boolean mV2ExtPresent;
   public SL_DiscConfig_r12_discTF_IndexList_v1260 discTF_IndexList_v1260;  // optional
   public boolean mV3ExtPresent;
   public SL_DiscConfig_r12_discTxResourcesPS_r13 discTxResourcesPS_r13;  // optional
   public SL_DiscConfig_r12_discTxInterFreqInfo_r13 discTxInterFreqInfo_r13;  // optional
   public Asn1Boolean gapRequestsAllowedDedicated_r13;  // optional
   public SL_DiscConfig_r12_discRxGapConfig_r13 discRxGapConfig_r13;  // optional
   public SL_DiscConfig_r12_discTxGapConfig_r13 discTxGapConfig_r13;  // optional
   public SL_DiscConfig_r12_discSysInfoToReportConfig_r13 discSysInfoToReportConfig_r13;  // optional
   public Asn1OpenExt extElem1;

   public SL_DiscConfig_r12 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SL_DiscConfig_r12 (
      SL_DiscConfig_r12_discTxResources_r12 discTxResources_r12_,
      SL_DiscConfig_r12_discTF_IndexList_v1260 discTF_IndexList_v1260_,
      SL_DiscConfig_r12_discTxResourcesPS_r13 discTxResourcesPS_r13_,
      SL_DiscConfig_r12_discTxInterFreqInfo_r13 discTxInterFreqInfo_r13_,
      Asn1Boolean gapRequestsAllowedDedicated_r13_,
      SL_DiscConfig_r12_discRxGapConfig_r13 discRxGapConfig_r13_,
      SL_DiscConfig_r12_discTxGapConfig_r13 discTxGapConfig_r13_,
      SL_DiscConfig_r12_discSysInfoToReportConfig_r13 discSysInfoToReportConfig_r13_
   ) {
      super();
      discTxResources_r12 = discTxResources_r12_;
      discTF_IndexList_v1260 = discTF_IndexList_v1260_;
      discTxResourcesPS_r13 = discTxResourcesPS_r13_;
      discTxInterFreqInfo_r13 = discTxInterFreqInfo_r13_;
      gapRequestsAllowedDedicated_r13 = gapRequestsAllowedDedicated_r13_;
      discRxGapConfig_r13 = discRxGapConfig_r13_;
      discTxGapConfig_r13 = discTxGapConfig_r13_;
      discSysInfoToReportConfig_r13 = discSysInfoToReportConfig_r13_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SL_DiscConfig_r12 (SL_DiscConfig_r12_discTxResources_r12 discTxResources_r12_,
      SL_DiscConfig_r12_discTF_IndexList_v1260 discTF_IndexList_v1260_,
      SL_DiscConfig_r12_discTxResourcesPS_r13 discTxResourcesPS_r13_,
      SL_DiscConfig_r12_discTxInterFreqInfo_r13 discTxInterFreqInfo_r13_,
      boolean gapRequestsAllowedDedicated_r13_,
      SL_DiscConfig_r12_discRxGapConfig_r13 discRxGapConfig_r13_,
      SL_DiscConfig_r12_discTxGapConfig_r13 discTxGapConfig_r13_,
      SL_DiscConfig_r12_discSysInfoToReportConfig_r13 discSysInfoToReportConfig_r13_
   ) {
      super();
      discTxResources_r12 = discTxResources_r12_;
      discTF_IndexList_v1260 = discTF_IndexList_v1260_;
      discTxResourcesPS_r13 = discTxResourcesPS_r13_;
      discTxInterFreqInfo_r13 = discTxInterFreqInfo_r13_;
      gapRequestsAllowedDedicated_r13 = new Asn1Boolean (gapRequestsAllowedDedicated_r13_);
      discRxGapConfig_r13 = discRxGapConfig_r13_;
      discTxGapConfig_r13 = discTxGapConfig_r13_;
      discSysInfoToReportConfig_r13 = discSysInfoToReportConfig_r13_;
   }

   public void init () {
      discTxResources_r12 = null;
      discTF_IndexList_v1260 = null;
      discTxResourcesPS_r13 = null;
      discTxInterFreqInfo_r13 = null;
      gapRequestsAllowedDedicated_r13 = null;
      discRxGapConfig_r13 = null;
      discTxGapConfig_r13 = null;
      discSysInfoToReportConfig_r13 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 9; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return discTxResources_r12;
         case 1: return discTF_IndexList_v1260;
         case 2: return discTxResourcesPS_r13;
         case 3: return discTxInterFreqInfo_r13;
         case 4: return gapRequestsAllowedDedicated_r13;
         case 5: return discRxGapConfig_r13;
         case 6: return discTxGapConfig_r13;
         case 7: return discSysInfoToReportConfig_r13;
         case 8: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "discTxResources-r12";
         case 1: return "discTF-IndexList-v1260";
         case 2: return "discTxResourcesPS-r13";
         case 3: return "discTxInterFreqInfo-r13";
         case 4: return "gapRequestsAllowedDedicated-r13";
         case 5: return "discRxGapConfig-r13";
         case 6: return "discTxGapConfig-r13";
         case 7: return "discSysInfoToReportConfig-r13";
         case 8: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean discTxResources_r12Present = buffer.decodeBit ("discTxResources_r12Present");

      // decode discTxResources_r12

      if (discTxResources_r12Present) {
         buffer.getContext().eventDispatcher.startElement("discTxResources_r12", -1);

         discTxResources_r12 = new SL_DiscConfig_r12_discTxResources_r12();
         discTxResources_r12.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("discTxResources_r12", -1);
      }
      else {
         discTxResources_r12 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean discTF_IndexList_v1260Present = buffer.decodeBit ("discTF_IndexList_v1260Present");

            // decode discTF_IndexList_v1260

            if (discTF_IndexList_v1260Present) {
               buffer.getContext().eventDispatcher.startElement("discTF_IndexList_v1260", -1);

               discTF_IndexList_v1260 = new SL_DiscConfig_r12_discTF_IndexList_v1260();
               discTF_IndexList_v1260.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("discTF_IndexList_v1260", -1);
            }
            else {
               discTF_IndexList_v1260 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean discTxResourcesPS_r13Present = buffer.decodeBit ("discTxResourcesPS_r13Present");

            boolean discTxInterFreqInfo_r13Present = buffer.decodeBit ("discTxInterFreqInfo_r13Present");

            boolean gapRequestsAllowedDedicated_r13Present = buffer.decodeBit ("gapRequestsAllowedDedicated_r13Present");

            boolean discRxGapConfig_r13Present = buffer.decodeBit ("discRxGapConfig_r13Present");

            boolean discTxGapConfig_r13Present = buffer.decodeBit ("discTxGapConfig_r13Present");

            boolean discSysInfoToReportConfig_r13Present = buffer.decodeBit ("discSysInfoToReportConfig_r13Present");

            // decode discTxResourcesPS_r13

            if (discTxResourcesPS_r13Present) {
               buffer.getContext().eventDispatcher.startElement("discTxResourcesPS_r13", -1);

               discTxResourcesPS_r13 = new SL_DiscConfig_r12_discTxResourcesPS_r13();
               discTxResourcesPS_r13.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("discTxResourcesPS_r13", -1);
            }
            else {
               discTxResourcesPS_r13 = null;
            }

            // decode discTxInterFreqInfo_r13

            if (discTxInterFreqInfo_r13Present) {
               buffer.getContext().eventDispatcher.startElement("discTxInterFreqInfo_r13", -1);

               discTxInterFreqInfo_r13 = new SL_DiscConfig_r12_discTxInterFreqInfo_r13();
               discTxInterFreqInfo_r13.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("discTxInterFreqInfo_r13", -1);
            }
            else {
               discTxInterFreqInfo_r13 = null;
            }

            // decode gapRequestsAllowedDedicated_r13

            if (gapRequestsAllowedDedicated_r13Present) {
               buffer.getContext().eventDispatcher.startElement("gapRequestsAllowedDedicated_r13", -1);

               gapRequestsAllowedDedicated_r13 = new Asn1Boolean();
               gapRequestsAllowedDedicated_r13.decode (buffer);

               buffer.invokeCharacters(gapRequestsAllowedDedicated_r13.toString());
               buffer.getContext().eventDispatcher.endElement("gapRequestsAllowedDedicated_r13", -1);
            }
            else {
               gapRequestsAllowedDedicated_r13 = null;
            }

            // decode discRxGapConfig_r13

            if (discRxGapConfig_r13Present) {
               buffer.getContext().eventDispatcher.startElement("discRxGapConfig_r13", -1);

               discRxGapConfig_r13 = new SL_DiscConfig_r12_discRxGapConfig_r13();
               discRxGapConfig_r13.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("discRxGapConfig_r13", -1);
            }
            else {
               discRxGapConfig_r13 = null;
            }

            // decode discTxGapConfig_r13

            if (discTxGapConfig_r13Present) {
               buffer.getContext().eventDispatcher.startElement("discTxGapConfig_r13", -1);

               discTxGapConfig_r13 = new SL_DiscConfig_r12_discTxGapConfig_r13();
               discTxGapConfig_r13.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("discTxGapConfig_r13", -1);
            }
            else {
               discTxGapConfig_r13 = null;
            }

            // decode discSysInfoToReportConfig_r13

            if (discSysInfoToReportConfig_r13Present) {
               buffer.getContext().eventDispatcher.startElement("discSysInfoToReportConfig_r13", -1);

               discSysInfoToReportConfig_r13 = new SL_DiscConfig_r12_discSysInfoToReportConfig_r13();
               discSysInfoToReportConfig_r13.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("discSysInfoToReportConfig_r13", -1);
            }
            else {
               discSysInfoToReportConfig_r13 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (discTxResources_r12 != null) discTxResources_r12.print (_sb, "discTxResources_r12", _level+1);
      if (discTF_IndexList_v1260 != null) discTF_IndexList_v1260.print (_sb, "discTF_IndexList_v1260", _level+1);
      if (discTxResourcesPS_r13 != null) discTxResourcesPS_r13.print (_sb, "discTxResourcesPS_r13", _level+1);
      if (discTxInterFreqInfo_r13 != null) discTxInterFreqInfo_r13.print (_sb, "discTxInterFreqInfo_r13", _level+1);
      if (gapRequestsAllowedDedicated_r13 != null) gapRequestsAllowedDedicated_r13.print (_sb, "gapRequestsAllowedDedicated_r13", _level+1);
      if (discRxGapConfig_r13 != null) discRxGapConfig_r13.print (_sb, "discRxGapConfig_r13", _level+1);
      if (discTxGapConfig_r13 != null) discTxGapConfig_r13.print (_sb, "discTxGapConfig_r13", _level+1);
      if (discSysInfoToReportConfig_r13 != null) discSysInfoToReportConfig_r13.print (_sb, "discSysInfoToReportConfig_r13", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
