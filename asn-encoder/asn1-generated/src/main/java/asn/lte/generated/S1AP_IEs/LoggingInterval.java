/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.S1AP_IEs;

import com.objsys.asn1j.runtime.*;

public class LoggingInterval extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_S1AP_IEsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "LoggingInterval";
   }

   // Integer constants for switch-case
   public static final int _MS128 = 0;
   public static final int _MS256 = 1;
   public static final int _MS512 = 2;
   public static final int _MS1024 = 3;
   public static final int _MS2048 = 4;
   public static final int _MS3072 = 5;
   public static final int _MS4096 = 6;
   public static final int _MS6144 = 7;

   // Singleton instances of LoggingInterval
   protected static final LoggingInterval _ms128 = new LoggingInterval(0);
   protected static final LoggingInterval _ms256 = new LoggingInterval(1);
   protected static final LoggingInterval _ms512 = new LoggingInterval(2);
   protected static final LoggingInterval _ms1024 = new LoggingInterval(3);
   protected static final LoggingInterval _ms2048 = new LoggingInterval(4);
   protected static final LoggingInterval _ms3072 = new LoggingInterval(5);
   protected static final LoggingInterval _ms4096 = new LoggingInterval(6);
   protected static final LoggingInterval _ms6144 = new LoggingInterval(7);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    *   7
    */
   protected LoggingInterval (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for ms128.
    */
   public static LoggingInterval ms128() {
      return _ms128;
   }

   /**
    * Singleton accessor method for ms256.
    */
   public static LoggingInterval ms256() {
      return _ms256;
   }

   /**
    * Singleton accessor method for ms512.
    */
   public static LoggingInterval ms512() {
      return _ms512;
   }

   /**
    * Singleton accessor method for ms1024.
    */
   public static LoggingInterval ms1024() {
      return _ms1024;
   }

   /**
    * Singleton accessor method for ms2048.
    */
   public static LoggingInterval ms2048() {
      return _ms2048;
   }

   /**
    * Singleton accessor method for ms3072.
    */
   public static LoggingInterval ms3072() {
      return _ms3072;
   }

   /**
    * Singleton accessor method for ms4096.
    */
   public static LoggingInterval ms4096() {
      return _ms4096;
   }

   /**
    * Singleton accessor method for ms6144.
    */
   public static LoggingInterval ms6144() {
      return _ms6144;
   }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return LoggingInterval.valueOf( LoggingInterval.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static LoggingInterval valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 0: return ms128();
         case 1: return ms256();
         case 2: return ms512();
         case 3: return ms1024();
         case 4: return ms2048();
         case 5: return ms3072();
         case 6: return ms4096();
         case 7: return ms6144();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      ui = (int) buffer.decodeConsWholeNumber (8);

      switch (ui) {
         case 0: ret =  0; break;
         case 1: ret =  1; break;
         case 2: ret =  2; break;
         case 3: ret =  3; break;
         case 4: ret =  4; break;
         case 5: ret =  5; break;
         case 6: ret =  6; break;
         case 7: ret =  7; break;
         default: throw new Asn1InvalidEnumException (ui);
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (LoggingInterval.valueOf(ret).toString());

      return ret;
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("ms128");
         case 1: return ("ms256");
         case 2: return ("ms512");
         case 3: return ("ms1024");
         case 4: return ("ms2048");
         case 5: return ("ms3072");
         case 6: return ("ms4096");
         case 7: return ("ms6144");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
