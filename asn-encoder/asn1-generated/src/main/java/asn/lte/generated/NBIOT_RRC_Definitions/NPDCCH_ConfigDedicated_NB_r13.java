/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NBIOT_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class NPDCCH_ConfigDedicated_NB_r13 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NBIOT_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "NPDCCH-ConfigDedicated-NB-r13";
   }

   public NPDCCH_ConfigDedicated_NB_r13_npdcch_NumRepetitions_r13 npdcch_NumRepetitions_r13 = null;
   public NPDCCH_ConfigDedicated_NB_r13_npdcch_StartSF_USS_r13 npdcch_StartSF_USS_r13 = null;
   public NPDCCH_ConfigDedicated_NB_r13_npdcch_Offset_USS_r13 npdcch_Offset_USS_r13 = null;

   public NPDCCH_ConfigDedicated_NB_r13 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public NPDCCH_ConfigDedicated_NB_r13 (
      NPDCCH_ConfigDedicated_NB_r13_npdcch_NumRepetitions_r13 npdcch_NumRepetitions_r13_,
      NPDCCH_ConfigDedicated_NB_r13_npdcch_StartSF_USS_r13 npdcch_StartSF_USS_r13_,
      NPDCCH_ConfigDedicated_NB_r13_npdcch_Offset_USS_r13 npdcch_Offset_USS_r13_
   ) {
      super();
      npdcch_NumRepetitions_r13 = npdcch_NumRepetitions_r13_;
      npdcch_StartSF_USS_r13 = npdcch_StartSF_USS_r13_;
      npdcch_Offset_USS_r13 = npdcch_Offset_USS_r13_;
   }

   public void init () {
      npdcch_NumRepetitions_r13 = null;
      npdcch_StartSF_USS_r13 = null;
      npdcch_Offset_USS_r13 = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return npdcch_NumRepetitions_r13;
         case 1: return npdcch_StartSF_USS_r13;
         case 2: return npdcch_Offset_USS_r13;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "npdcch-NumRepetitions-r13";
         case 1: return "npdcch-StartSF-USS-r13";
         case 2: return "npdcch-Offset-USS-r13";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode npdcch_NumRepetitions_r13

      buffer.getContext().eventDispatcher.startElement("npdcch_NumRepetitions_r13", -1);

      {
         int tval = NPDCCH_ConfigDedicated_NB_r13_npdcch_NumRepetitions_r13.decodeEnumValue (buffer);
         npdcch_NumRepetitions_r13 = NPDCCH_ConfigDedicated_NB_r13_npdcch_NumRepetitions_r13.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("npdcch_NumRepetitions_r13", -1);

      // decode npdcch_StartSF_USS_r13

      buffer.getContext().eventDispatcher.startElement("npdcch_StartSF_USS_r13", -1);

      {
         int tval = NPDCCH_ConfigDedicated_NB_r13_npdcch_StartSF_USS_r13.decodeEnumValue (buffer);
         npdcch_StartSF_USS_r13 = NPDCCH_ConfigDedicated_NB_r13_npdcch_StartSF_USS_r13.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("npdcch_StartSF_USS_r13", -1);

      // decode npdcch_Offset_USS_r13

      buffer.getContext().eventDispatcher.startElement("npdcch_Offset_USS_r13", -1);

      {
         int tval = NPDCCH_ConfigDedicated_NB_r13_npdcch_Offset_USS_r13.decodeEnumValue (buffer);
         npdcch_Offset_USS_r13 = NPDCCH_ConfigDedicated_NB_r13_npdcch_Offset_USS_r13.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("npdcch_Offset_USS_r13", -1);

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (npdcch_NumRepetitions_r13 != null) npdcch_NumRepetitions_r13.print (_sb, "npdcch_NumRepetitions_r13", _level+1);
      if (npdcch_StartSF_USS_r13 != null) npdcch_StartSF_USS_r13.print (_sb, "npdcch_StartSF_USS_r13", _level+1);
      if (npdcch_Offset_USS_r13 != null) npdcch_Offset_USS_r13.print (_sb, "npdcch_Offset_USS_r13", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
