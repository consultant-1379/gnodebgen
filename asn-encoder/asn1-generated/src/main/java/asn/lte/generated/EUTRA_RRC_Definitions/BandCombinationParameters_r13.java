/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class BandCombinationParameters_r13 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "BandCombinationParameters-r13";
   }

   public BandCombinationParameters_r13_differentFallbackSupported_r13 differentFallbackSupported_r13 = null;  // optional
   public BandCombinationParameters_r13_bandParameterList_r13 bandParameterList_r13;
   public SupportedBandwidthCombinationSet_r10 supportedBandwidthCombinationSet_r13;  // optional
   public BandCombinationParameters_r13_multipleTimingAdvance_r13 multipleTimingAdvance_r13 = null;  // optional
   public BandCombinationParameters_r13_simultaneousRx_Tx_r13 simultaneousRx_Tx_r13 = null;  // optional
   public BandInfoEUTRA bandInfoEUTRA_r13;
   public BandCombinationParameters_r13_dc_Support_r13 dc_Support_r13;  // optional
   public Asn1BitString supportedNAICS_2CRS_AP_r13;  // optional
   public Asn1BitString commSupportedBandsPerBC_r13;  // optional

   public BandCombinationParameters_r13 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public BandCombinationParameters_r13 (
      BandCombinationParameters_r13_differentFallbackSupported_r13 differentFallbackSupported_r13_,
      BandCombinationParameters_r13_bandParameterList_r13 bandParameterList_r13_,
      SupportedBandwidthCombinationSet_r10 supportedBandwidthCombinationSet_r13_,
      BandCombinationParameters_r13_multipleTimingAdvance_r13 multipleTimingAdvance_r13_,
      BandCombinationParameters_r13_simultaneousRx_Tx_r13 simultaneousRx_Tx_r13_,
      BandInfoEUTRA bandInfoEUTRA_r13_,
      BandCombinationParameters_r13_dc_Support_r13 dc_Support_r13_,
      Asn1BitString supportedNAICS_2CRS_AP_r13_,
      Asn1BitString commSupportedBandsPerBC_r13_
   ) {
      super();
      differentFallbackSupported_r13 = differentFallbackSupported_r13_;
      bandParameterList_r13 = bandParameterList_r13_;
      supportedBandwidthCombinationSet_r13 = supportedBandwidthCombinationSet_r13_;
      multipleTimingAdvance_r13 = multipleTimingAdvance_r13_;
      simultaneousRx_Tx_r13 = simultaneousRx_Tx_r13_;
      bandInfoEUTRA_r13 = bandInfoEUTRA_r13_;
      dc_Support_r13 = dc_Support_r13_;
      supportedNAICS_2CRS_AP_r13 = supportedNAICS_2CRS_AP_r13_;
      commSupportedBandsPerBC_r13 = commSupportedBandsPerBC_r13_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public BandCombinationParameters_r13 (
      BandCombinationParameters_r13_bandParameterList_r13 bandParameterList_r13_,
      BandInfoEUTRA bandInfoEUTRA_r13_
   ) {
      super();
      bandParameterList_r13 = bandParameterList_r13_;
      bandInfoEUTRA_r13 = bandInfoEUTRA_r13_;
   }

   public void init () {
      differentFallbackSupported_r13 = null;
      bandParameterList_r13 = null;
      supportedBandwidthCombinationSet_r13 = null;
      multipleTimingAdvance_r13 = null;
      simultaneousRx_Tx_r13 = null;
      bandInfoEUTRA_r13 = null;
      dc_Support_r13 = null;
      supportedNAICS_2CRS_AP_r13 = null;
      commSupportedBandsPerBC_r13 = null;
   }

   public int getElementCount() { return 9; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return differentFallbackSupported_r13;
         case 1: return bandParameterList_r13;
         case 2: return supportedBandwidthCombinationSet_r13;
         case 3: return multipleTimingAdvance_r13;
         case 4: return simultaneousRx_Tx_r13;
         case 5: return bandInfoEUTRA_r13;
         case 6: return dc_Support_r13;
         case 7: return supportedNAICS_2CRS_AP_r13;
         case 8: return commSupportedBandsPerBC_r13;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "differentFallbackSupported-r13";
         case 1: return "bandParameterList-r13";
         case 2: return "supportedBandwidthCombinationSet-r13";
         case 3: return "multipleTimingAdvance-r13";
         case 4: return "simultaneousRx-Tx-r13";
         case 5: return "bandInfoEUTRA-r13";
         case 6: return "dc-Support-r13";
         case 7: return "supportedNAICS-2CRS-AP-r13";
         case 8: return "commSupportedBandsPerBC-r13";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean differentFallbackSupported_r13Present = buffer.decodeBit ("differentFallbackSupported_r13Present");
      boolean supportedBandwidthCombinationSet_r13Present = buffer.decodeBit ("supportedBandwidthCombinationSet_r13Present");
      boolean multipleTimingAdvance_r13Present = buffer.decodeBit ("multipleTimingAdvance_r13Present");
      boolean simultaneousRx_Tx_r13Present = buffer.decodeBit ("simultaneousRx_Tx_r13Present");
      boolean dc_Support_r13Present = buffer.decodeBit ("dc_Support_r13Present");
      boolean supportedNAICS_2CRS_AP_r13Present = buffer.decodeBit ("supportedNAICS_2CRS_AP_r13Present");
      boolean commSupportedBandsPerBC_r13Present = buffer.decodeBit ("commSupportedBandsPerBC_r13Present");

      // decode differentFallbackSupported_r13

      if (differentFallbackSupported_r13Present) {
         buffer.getContext().eventDispatcher.startElement("differentFallbackSupported_r13", -1);

         int tval = BandCombinationParameters_r13_differentFallbackSupported_r13.decodeEnumValue (buffer);
         differentFallbackSupported_r13 = BandCombinationParameters_r13_differentFallbackSupported_r13.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("differentFallbackSupported_r13", -1);
      }
      else {
         differentFallbackSupported_r13 = null;
      }

      // decode bandParameterList_r13

      buffer.getContext().eventDispatcher.startElement("bandParameterList_r13", -1);

      bandParameterList_r13 = new BandCombinationParameters_r13_bandParameterList_r13();
      bandParameterList_r13.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("bandParameterList_r13", -1);

      // decode supportedBandwidthCombinationSet_r13

      if (supportedBandwidthCombinationSet_r13Present) {
         buffer.getContext().eventDispatcher.startElement("supportedBandwidthCombinationSet_r13", -1);

         supportedBandwidthCombinationSet_r13 = new SupportedBandwidthCombinationSet_r10();
         supportedBandwidthCombinationSet_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("supportedBandwidthCombinationSet_r13", -1);
      }
      else {
         supportedBandwidthCombinationSet_r13 = null;
      }

      // decode multipleTimingAdvance_r13

      if (multipleTimingAdvance_r13Present) {
         buffer.getContext().eventDispatcher.startElement("multipleTimingAdvance_r13", -1);

         int tval = BandCombinationParameters_r13_multipleTimingAdvance_r13.decodeEnumValue (buffer);
         multipleTimingAdvance_r13 = BandCombinationParameters_r13_multipleTimingAdvance_r13.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("multipleTimingAdvance_r13", -1);
      }
      else {
         multipleTimingAdvance_r13 = null;
      }

      // decode simultaneousRx_Tx_r13

      if (simultaneousRx_Tx_r13Present) {
         buffer.getContext().eventDispatcher.startElement("simultaneousRx_Tx_r13", -1);

         int tval = BandCombinationParameters_r13_simultaneousRx_Tx_r13.decodeEnumValue (buffer);
         simultaneousRx_Tx_r13 = BandCombinationParameters_r13_simultaneousRx_Tx_r13.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("simultaneousRx_Tx_r13", -1);
      }
      else {
         simultaneousRx_Tx_r13 = null;
      }

      // decode bandInfoEUTRA_r13

      buffer.getContext().eventDispatcher.startElement("bandInfoEUTRA_r13", -1);

      bandInfoEUTRA_r13 = new BandInfoEUTRA();
      bandInfoEUTRA_r13.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("bandInfoEUTRA_r13", -1);

      // decode dc_Support_r13

      if (dc_Support_r13Present) {
         buffer.getContext().eventDispatcher.startElement("dc_Support_r13", -1);

         dc_Support_r13 = new BandCombinationParameters_r13_dc_Support_r13();
         dc_Support_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("dc_Support_r13", -1);
      }
      else {
         dc_Support_r13 = null;
      }

      // decode supportedNAICS_2CRS_AP_r13

      if (supportedNAICS_2CRS_AP_r13Present) {
         buffer.getContext().eventDispatcher.startElement("supportedNAICS_2CRS_AP_r13", -1);

         supportedNAICS_2CRS_AP_r13 = new Asn1BitString();
         supportedNAICS_2CRS_AP_r13.decode (buffer, 1, 8);

         buffer.invokeCharacters(supportedNAICS_2CRS_AP_r13.toString());
         buffer.getContext().eventDispatcher.endElement("supportedNAICS_2CRS_AP_r13", -1);
      }
      else {
         supportedNAICS_2CRS_AP_r13 = null;
      }

      // decode commSupportedBandsPerBC_r13

      if (commSupportedBandsPerBC_r13Present) {
         buffer.getContext().eventDispatcher.startElement("commSupportedBandsPerBC_r13", -1);

         commSupportedBandsPerBC_r13 = new Asn1BitString();
         commSupportedBandsPerBC_r13.decode (buffer, 1, 64);

         buffer.invokeCharacters(commSupportedBandsPerBC_r13.toString());
         buffer.getContext().eventDispatcher.endElement("commSupportedBandsPerBC_r13", -1);
      }
      else {
         commSupportedBandsPerBC_r13 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (differentFallbackSupported_r13 != null) differentFallbackSupported_r13.print (_sb, "differentFallbackSupported_r13", _level+1);
      if (bandParameterList_r13 != null) bandParameterList_r13.print (_sb, "bandParameterList_r13", _level+1);
      if (supportedBandwidthCombinationSet_r13 != null) supportedBandwidthCombinationSet_r13.print (_sb, "supportedBandwidthCombinationSet_r13", _level+1);
      if (multipleTimingAdvance_r13 != null) multipleTimingAdvance_r13.print (_sb, "multipleTimingAdvance_r13", _level+1);
      if (simultaneousRx_Tx_r13 != null) simultaneousRx_Tx_r13.print (_sb, "simultaneousRx_Tx_r13", _level+1);
      if (bandInfoEUTRA_r13 != null) bandInfoEUTRA_r13.print (_sb, "bandInfoEUTRA_r13", _level+1);
      if (dc_Support_r13 != null) dc_Support_r13.print (_sb, "dc_Support_r13", _level+1);
      if (supportedNAICS_2CRS_AP_r13 != null) supportedNAICS_2CRS_AP_r13.print (_sb, "supportedNAICS_2CRS_AP_r13", _level+1);
      if (commSupportedBandsPerBC_r13 != null) commSupportedBandsPerBC_r13.print (_sb, "commSupportedBandsPerBC_r13", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
