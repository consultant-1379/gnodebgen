/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class ProcessingParameters extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ProcessingParameters";
   }

   public ProcessingParameters_fallback fallback = null;
   public ProcessingParameters_differentTB_PerSlot differentTB_PerSlot;  // optional

   public ProcessingParameters () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ProcessingParameters (
      ProcessingParameters_fallback fallback_,
      ProcessingParameters_differentTB_PerSlot differentTB_PerSlot_
   ) {
      super();
      fallback = fallback_;
      differentTB_PerSlot = differentTB_PerSlot_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public ProcessingParameters (
      ProcessingParameters_fallback fallback_
   ) {
      super();
      fallback = fallback_;
   }

   public void init () {
      fallback = null;
      differentTB_PerSlot = null;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return fallback;
         case 1: return differentTB_PerSlot;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "fallback";
         case 1: return "differentTB-PerSlot";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean differentTB_PerSlotPresent = buffer.decodeBit ("differentTB_PerSlotPresent");

      // decode fallback

      buffer.getContext().eventDispatcher.startElement("fallback", -1);

      {
         int tval = ProcessingParameters_fallback.decodeEnumValue (buffer);
         fallback = ProcessingParameters_fallback.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("fallback", -1);

      // decode differentTB_PerSlot

      if (differentTB_PerSlotPresent) {
         buffer.getContext().eventDispatcher.startElement("differentTB_PerSlot", -1);

         differentTB_PerSlot = new ProcessingParameters_differentTB_PerSlot();
         differentTB_PerSlot.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("differentTB_PerSlot", -1);
      }
      else {
         differentTB_PerSlot = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (fallback != null) fallback.print (_sb, "fallback", _level+1);
      if (differentTB_PerSlot != null) differentTB_PerSlot.print (_sb, "differentTB_PerSlot", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
