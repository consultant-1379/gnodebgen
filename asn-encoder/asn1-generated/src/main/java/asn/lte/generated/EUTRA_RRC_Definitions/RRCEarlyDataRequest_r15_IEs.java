/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class RRCEarlyDataRequest_r15_IEs extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "RRCEarlyDataRequest-r15-IEs";
   }

   public S_TMSI s_TMSI_r15;
   public RRCEarlyDataRequest_r15_IEs_establishmentCause_r15 establishmentCause_r15 = null;
   public DedicatedInfoNAS dedicatedInfoNAS_r15;
   public RRCEarlyDataRequest_r15_IEs_nonCriticalExtension nonCriticalExtension;  // optional

   public RRCEarlyDataRequest_r15_IEs () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public RRCEarlyDataRequest_r15_IEs (
      S_TMSI s_TMSI_r15_,
      RRCEarlyDataRequest_r15_IEs_establishmentCause_r15 establishmentCause_r15_,
      DedicatedInfoNAS dedicatedInfoNAS_r15_,
      RRCEarlyDataRequest_r15_IEs_nonCriticalExtension nonCriticalExtension_
   ) {
      super();
      s_TMSI_r15 = s_TMSI_r15_;
      establishmentCause_r15 = establishmentCause_r15_;
      dedicatedInfoNAS_r15 = dedicatedInfoNAS_r15_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public RRCEarlyDataRequest_r15_IEs (
      S_TMSI s_TMSI_r15_,
      RRCEarlyDataRequest_r15_IEs_establishmentCause_r15 establishmentCause_r15_,
      DedicatedInfoNAS dedicatedInfoNAS_r15_
   ) {
      super();
      s_TMSI_r15 = s_TMSI_r15_;
      establishmentCause_r15 = establishmentCause_r15_;
      dedicatedInfoNAS_r15 = dedicatedInfoNAS_r15_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public RRCEarlyDataRequest_r15_IEs (S_TMSI s_TMSI_r15_,
      RRCEarlyDataRequest_r15_IEs_establishmentCause_r15 establishmentCause_r15_,
      byte[] dedicatedInfoNAS_r15_,
      RRCEarlyDataRequest_r15_IEs_nonCriticalExtension nonCriticalExtension_
   ) {
      super();
      s_TMSI_r15 = s_TMSI_r15_;
      establishmentCause_r15 = establishmentCause_r15_;
      dedicatedInfoNAS_r15 = new DedicatedInfoNAS (dedicatedInfoNAS_r15_);
      nonCriticalExtension = nonCriticalExtension_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public RRCEarlyDataRequest_r15_IEs (
      S_TMSI s_TMSI_r15_,
      RRCEarlyDataRequest_r15_IEs_establishmentCause_r15 establishmentCause_r15_,
      byte[] dedicatedInfoNAS_r15_
   ) {
      super();
      s_TMSI_r15 = s_TMSI_r15_;
      establishmentCause_r15 = establishmentCause_r15_;
      dedicatedInfoNAS_r15 = new DedicatedInfoNAS (dedicatedInfoNAS_r15_);
   }

   public void init () {
      s_TMSI_r15 = null;
      establishmentCause_r15 = null;
      dedicatedInfoNAS_r15 = null;
      nonCriticalExtension = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return s_TMSI_r15;
         case 1: return establishmentCause_r15;
         case 2: return dedicatedInfoNAS_r15;
         case 3: return nonCriticalExtension;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "s-TMSI-r15";
         case 1: return "establishmentCause-r15";
         case 2: return "dedicatedInfoNAS-r15";
         case 3: return "nonCriticalExtension";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean nonCriticalExtensionPresent = buffer.decodeBit ("nonCriticalExtensionPresent");

      // decode s_TMSI_r15

      buffer.getContext().eventDispatcher.startElement("s_TMSI_r15", -1);

      s_TMSI_r15 = new S_TMSI();
      s_TMSI_r15.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("s_TMSI_r15", -1);

      // decode establishmentCause_r15

      buffer.getContext().eventDispatcher.startElement("establishmentCause_r15", -1);

      {
         int tval = RRCEarlyDataRequest_r15_IEs_establishmentCause_r15.decodeEnumValue (buffer);
         establishmentCause_r15 = RRCEarlyDataRequest_r15_IEs_establishmentCause_r15.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("establishmentCause_r15", -1);

      // decode dedicatedInfoNAS_r15

      buffer.getContext().eventDispatcher.startElement("dedicatedInfoNAS_r15", -1);

      dedicatedInfoNAS_r15 = new DedicatedInfoNAS();
      dedicatedInfoNAS_r15.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("dedicatedInfoNAS_r15", -1);

      // decode nonCriticalExtension

      if (nonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension = new RRCEarlyDataRequest_r15_IEs_nonCriticalExtension();
         nonCriticalExtension.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }
      else {
         nonCriticalExtension = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (s_TMSI_r15 != null) s_TMSI_r15.print (_sb, "s_TMSI_r15", _level+1);
      if (establishmentCause_r15 != null) establishmentCause_r15.print (_sb, "establishmentCause_r15", _level+1);
      if (dedicatedInfoNAS_r15 != null) dedicatedInfoNAS_r15.print (_sb, "dedicatedInfoNAS_r15", _level+1);
      if (nonCriticalExtension != null) nonCriticalExtension.print (_sb, "nonCriticalExtension", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
