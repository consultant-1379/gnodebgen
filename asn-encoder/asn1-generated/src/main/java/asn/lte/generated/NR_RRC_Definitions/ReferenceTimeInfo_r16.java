/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class ReferenceTimeInfo_r16 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ReferenceTimeInfo-r16";
   }

   public ReferenceTime_r16 time_r16;
   public Asn1Integer uncertainty_r16;  // optional
   public ReferenceTimeInfo_r16_timeInfoType_r16 timeInfoType_r16 = null;  // optional
   public Asn1Integer referenceSFN_r16;  // optional

   public ReferenceTimeInfo_r16 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ReferenceTimeInfo_r16 (
      ReferenceTime_r16 time_r16_,
      Asn1Integer uncertainty_r16_,
      ReferenceTimeInfo_r16_timeInfoType_r16 timeInfoType_r16_,
      Asn1Integer referenceSFN_r16_
   ) {
      super();
      time_r16 = time_r16_;
      uncertainty_r16 = uncertainty_r16_;
      timeInfoType_r16 = timeInfoType_r16_;
      referenceSFN_r16 = referenceSFN_r16_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public ReferenceTimeInfo_r16 (
      ReferenceTime_r16 time_r16_
   ) {
      super();
      time_r16 = time_r16_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public ReferenceTimeInfo_r16 (ReferenceTime_r16 time_r16_,
      long uncertainty_r16_,
      ReferenceTimeInfo_r16_timeInfoType_r16 timeInfoType_r16_,
      long referenceSFN_r16_
   ) {
      super();
      time_r16 = time_r16_;
      uncertainty_r16 = new Asn1Integer (uncertainty_r16_);
      timeInfoType_r16 = timeInfoType_r16_;
      referenceSFN_r16 = new Asn1Integer (referenceSFN_r16_);
   }

   public void init () {
      time_r16 = null;
      uncertainty_r16 = null;
      timeInfoType_r16 = null;
      referenceSFN_r16 = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return time_r16;
         case 1: return uncertainty_r16;
         case 2: return timeInfoType_r16;
         case 3: return referenceSFN_r16;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "time-r16";
         case 1: return "uncertainty-r16";
         case 2: return "timeInfoType-r16";
         case 3: return "referenceSFN-r16";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean uncertainty_r16Present = buffer.decodeBit ("uncertainty_r16Present");
      boolean timeInfoType_r16Present = buffer.decodeBit ("timeInfoType_r16Present");
      boolean referenceSFN_r16Present = buffer.decodeBit ("referenceSFN_r16Present");

      // decode time_r16

      buffer.getContext().eventDispatcher.startElement("time_r16", -1);

      time_r16 = new ReferenceTime_r16();
      time_r16.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("time_r16", -1);

      // decode uncertainty_r16

      if (uncertainty_r16Present) {
         buffer.getContext().eventDispatcher.startElement("uncertainty_r16", -1);

         uncertainty_r16 = new Asn1Integer();
         uncertainty_r16.decode (buffer, 0, 32767);

         buffer.invokeCharacters(uncertainty_r16.toString());
         buffer.getContext().eventDispatcher.endElement("uncertainty_r16", -1);
      }
      else {
         uncertainty_r16 = null;
      }

      // decode timeInfoType_r16

      if (timeInfoType_r16Present) {
         buffer.getContext().eventDispatcher.startElement("timeInfoType_r16", -1);

         int tval = ReferenceTimeInfo_r16_timeInfoType_r16.decodeEnumValue (buffer);
         timeInfoType_r16 = ReferenceTimeInfo_r16_timeInfoType_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("timeInfoType_r16", -1);
      }
      else {
         timeInfoType_r16 = null;
      }

      // decode referenceSFN_r16

      if (referenceSFN_r16Present) {
         buffer.getContext().eventDispatcher.startElement("referenceSFN_r16", -1);

         referenceSFN_r16 = new Asn1Integer();
         referenceSFN_r16.decode (buffer, 0, 1023);

         buffer.invokeCharacters(referenceSFN_r16.toString());
         buffer.getContext().eventDispatcher.endElement("referenceSFN_r16", -1);
      }
      else {
         referenceSFN_r16 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (time_r16 != null) time_r16.print (_sb, "time_r16", _level+1);
      if (uncertainty_r16 != null) uncertainty_r16.print (_sb, "uncertainty_r16", _level+1);
      if (timeInfoType_r16 != null) timeInfoType_r16.print (_sb, "timeInfoType_r16", _level+1);
      if (referenceSFN_r16 != null) referenceSFN_r16.print (_sb, "referenceSFN_r16", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
