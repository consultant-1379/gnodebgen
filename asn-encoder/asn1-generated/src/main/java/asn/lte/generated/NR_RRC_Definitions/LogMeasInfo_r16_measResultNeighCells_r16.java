/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class LogMeasInfo_r16_measResultNeighCells_r16 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public MeasResultListLogging2NR_r16 measResultNeighCellListNR;  // optional
   public MeasResultList2EUTRA_r16 measResultNeighCellListEUTRA;  // optional

   public LogMeasInfo_r16_measResultNeighCells_r16 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public LogMeasInfo_r16_measResultNeighCells_r16 (
      MeasResultListLogging2NR_r16 measResultNeighCellListNR_,
      MeasResultList2EUTRA_r16 measResultNeighCellListEUTRA_
   ) {
      super();
      measResultNeighCellListNR = measResultNeighCellListNR_;
      measResultNeighCellListEUTRA = measResultNeighCellListEUTRA_;
   }

   public void init () {
      measResultNeighCellListNR = null;
      measResultNeighCellListEUTRA = null;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return measResultNeighCellListNR;
         case 1: return measResultNeighCellListEUTRA;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "measResultNeighCellListNR";
         case 1: return "measResultNeighCellListEUTRA";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean measResultNeighCellListNRPresent = buffer.decodeBit ("measResultNeighCellListNRPresent");
      boolean measResultNeighCellListEUTRAPresent = buffer.decodeBit ("measResultNeighCellListEUTRAPresent");

      // decode measResultNeighCellListNR

      if (measResultNeighCellListNRPresent) {
         buffer.getContext().eventDispatcher.startElement("measResultNeighCellListNR", -1);

         measResultNeighCellListNR = new MeasResultListLogging2NR_r16();
         measResultNeighCellListNR.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("measResultNeighCellListNR", -1);
      }
      else {
         measResultNeighCellListNR = null;
      }

      // decode measResultNeighCellListEUTRA

      if (measResultNeighCellListEUTRAPresent) {
         buffer.getContext().eventDispatcher.startElement("measResultNeighCellListEUTRA", -1);

         measResultNeighCellListEUTRA = new MeasResultList2EUTRA_r16();
         measResultNeighCellListEUTRA.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("measResultNeighCellListEUTRA", -1);
      }
      else {
         measResultNeighCellListEUTRA = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (measResultNeighCellListNR != null) measResultNeighCellListNR.print (_sb, "measResultNeighCellListNR", _level+1);
      if (measResultNeighCellListEUTRA != null) measResultNeighCellListEUTRA.print (_sb, "measResultNeighCellListEUTRA", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
