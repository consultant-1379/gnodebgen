/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.LPPA_IEs;

import com.objsys.asn1j.runtime.*;

public class OTDOA_Information_Item extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPPA_IEsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "OTDOA-Information-Item";
   }

   // Integer constants for switch-case
   public static final int _PCI = 0;
   public static final int _CELLID = 1;
   public static final int _TAC = 2;
   public static final int _EARFCN = 3;
   public static final int _PRSBANDWIDTH = 4;
   public static final int _PRSCONFIGINDEX = 5;
   public static final int _CPLENGTH = 6;
   public static final int _NODLFRAMES = 7;
   public static final int _NOANTENNAPORTS = 8;
   public static final int _SFNINITTIME = 9;
   public static final int _E_UTRANACCESSPOINTPOSITION = 10;
   public static final int _PRSMUTINGCONFIGURATION = 11;

   // Singleton instances of OTDOA_Information_Item
   protected static final OTDOA_Information_Item _pci = new OTDOA_Information_Item(0);
   protected static final OTDOA_Information_Item _cellid = new OTDOA_Information_Item(1);
   protected static final OTDOA_Information_Item _tac = new OTDOA_Information_Item(2);
   protected static final OTDOA_Information_Item _earfcn = new OTDOA_Information_Item(3);
   protected static final OTDOA_Information_Item _prsBandwidth = new OTDOA_Information_Item(4);
   protected static final OTDOA_Information_Item _prsConfigIndex = new OTDOA_Information_Item(5);
   protected static final OTDOA_Information_Item _cpLength = new OTDOA_Information_Item(6);
   protected static final OTDOA_Information_Item _noDlFrames = new OTDOA_Information_Item(7);
   protected static final OTDOA_Information_Item _noAntennaPorts = new OTDOA_Information_Item(8);
   protected static final OTDOA_Information_Item _sFNInitTime = new OTDOA_Information_Item(9);
   protected static final OTDOA_Information_Item _e_UTRANAccessPointPosition = new OTDOA_Information_Item(10);
   protected static final OTDOA_Information_Item _prsmutingconfiguration = new OTDOA_Information_Item(11);
   private static OTDOA_Information_Item __undefined = new OTDOA_Information_Item(-999);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    *   7
    *   8
    *   9
    *   10
    *   11
    */
   protected OTDOA_Information_Item (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for pci.
    */
   public static OTDOA_Information_Item pci() {
      return _pci;
   }

   /**
    * Singleton accessor method for cellid.
    */
   public static OTDOA_Information_Item cellid() {
      return _cellid;
   }

   /**
    * Singleton accessor method for tac.
    */
   public static OTDOA_Information_Item tac() {
      return _tac;
   }

   /**
    * Singleton accessor method for earfcn.
    */
   public static OTDOA_Information_Item earfcn() {
      return _earfcn;
   }

   /**
    * Singleton accessor method for prsBandwidth.
    */
   public static OTDOA_Information_Item prsBandwidth() {
      return _prsBandwidth;
   }

   /**
    * Singleton accessor method for prsConfigIndex.
    */
   public static OTDOA_Information_Item prsConfigIndex() {
      return _prsConfigIndex;
   }

   /**
    * Singleton accessor method for cpLength.
    */
   public static OTDOA_Information_Item cpLength() {
      return _cpLength;
   }

   /**
    * Singleton accessor method for noDlFrames.
    */
   public static OTDOA_Information_Item noDlFrames() {
      return _noDlFrames;
   }

   /**
    * Singleton accessor method for noAntennaPorts.
    */
   public static OTDOA_Information_Item noAntennaPorts() {
      return _noAntennaPorts;
   }

   /**
    * Singleton accessor method for sFNInitTime.
    */
   public static OTDOA_Information_Item sFNInitTime() {
      return _sFNInitTime;
   }

   /**
    * Singleton accessor method for e_UTRANAccessPointPosition.
    */
   public static OTDOA_Information_Item e_UTRANAccessPointPosition() {
      return _e_UTRANAccessPointPosition;
   }

   /**
    * Singleton accessor method for prsmutingconfiguration.
    */
   public static OTDOA_Information_Item prsmutingconfiguration() {
      return _prsmutingconfiguration;
   }

   /** Undefined value. */
   protected static OTDOA_Information_Item __undefined_() { return __undefined; }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return OTDOA_Information_Item.valueOf( OTDOA_Information_Item.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static OTDOA_Information_Item valueOf (int _value)
   {
      switch ((int)_value) {
         case 0: return pci();
         case 1: return cellid();
         case 2: return tac();
         case 3: return earfcn();
         case 4: return prsBandwidth();
         case 5: return prsConfigIndex();
         case 6: return cpLength();
         case 7: return noDlFrames();
         case 8: return noAntennaPorts();
         case 9: return sFNInitTime();
         case 10: return e_UTRANAccessPointPosition();
         case 11: return prsmutingconfiguration();
         default: return __undefined_();
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      boolean extbit = buffer.decodeBit ("extbit");

      if (extbit) {
         ui = buffer.decodeSmallNonNegWholeNumber ();

         switch (ui) {
            case 0: ret = 10; break;
            case 1: ret = 11; break;
            default: ret = 0x7fffffff; break;
         }
      }
      else {
         ui = (int) buffer.decodeConsWholeNumber (10);

         switch (ui) {
            case 0: ret =  0; break;
            case 1: ret =  1; break;
            case 2: ret =  2; break;
            case 3: ret =  3; break;
            case 4: ret =  4; break;
            case 5: ret =  5; break;
            case 6: ret =  6; break;
            case 7: ret =  7; break;
            case 8: ret =  8; break;
            case 9: ret =  9; break;
            default: throw new Asn1InvalidEnumException (ui);
         }
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (OTDOA_Information_Item.valueOf(ret).toString());

      return ret;
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("pci");
         case 1: return ("cellid");
         case 2: return ("tac");
         case 3: return ("earfcn");
         case 4: return ("prsBandwidth");
         case 5: return ("prsConfigIndex");
         case 6: return ("cpLength");
         case 7: return ("noDlFrames");
         case 8: return ("noAntennaPorts");
         case 9: return ("sFNInitTime");
         case 10: return ("e-UTRANAccessPointPosition");
         case 11: return ("prsmutingconfiguration");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
