/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NBIOT_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class AB_Config_NB_r13 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NBIOT_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "AB-Config-NB-r13";
   }

   public AB_Config_NB_r13_ab_Category_r13 ab_Category_r13 = null;
   public Asn1BitString ab_BarringBitmap_r13;
   public AB_Config_NB_r13_ab_BarringForExceptionData_r13 ab_BarringForExceptionData_r13 = null;  // optional
   public Asn1BitString ab_BarringForSpecialAC_r13;

   public AB_Config_NB_r13 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public AB_Config_NB_r13 (
      AB_Config_NB_r13_ab_Category_r13 ab_Category_r13_,
      Asn1BitString ab_BarringBitmap_r13_,
      AB_Config_NB_r13_ab_BarringForExceptionData_r13 ab_BarringForExceptionData_r13_,
      Asn1BitString ab_BarringForSpecialAC_r13_
   ) {
      super();
      ab_Category_r13 = ab_Category_r13_;
      ab_BarringBitmap_r13 = ab_BarringBitmap_r13_;
      ab_BarringForExceptionData_r13 = ab_BarringForExceptionData_r13_;
      ab_BarringForSpecialAC_r13 = ab_BarringForSpecialAC_r13_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public AB_Config_NB_r13 (
      AB_Config_NB_r13_ab_Category_r13 ab_Category_r13_,
      Asn1BitString ab_BarringBitmap_r13_,
      Asn1BitString ab_BarringForSpecialAC_r13_
   ) {
      super();
      ab_Category_r13 = ab_Category_r13_;
      ab_BarringBitmap_r13 = ab_BarringBitmap_r13_;
      ab_BarringForSpecialAC_r13 = ab_BarringForSpecialAC_r13_;
   }

   public void init () {
      ab_Category_r13 = null;
      ab_BarringBitmap_r13 = null;
      ab_BarringForExceptionData_r13 = null;
      ab_BarringForSpecialAC_r13 = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return ab_Category_r13;
         case 1: return ab_BarringBitmap_r13;
         case 2: return ab_BarringForExceptionData_r13;
         case 3: return ab_BarringForSpecialAC_r13;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "ab-Category-r13";
         case 1: return "ab-BarringBitmap-r13";
         case 2: return "ab-BarringForExceptionData-r13";
         case 3: return "ab-BarringForSpecialAC-r13";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean ab_BarringForExceptionData_r13Present = buffer.decodeBit ("ab_BarringForExceptionData_r13Present");

      // decode ab_Category_r13

      buffer.getContext().eventDispatcher.startElement("ab_Category_r13", -1);

      {
         int tval = AB_Config_NB_r13_ab_Category_r13.decodeEnumValue (buffer);
         ab_Category_r13 = AB_Config_NB_r13_ab_Category_r13.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("ab_Category_r13", -1);

      // decode ab_BarringBitmap_r13

      buffer.getContext().eventDispatcher.startElement("ab_BarringBitmap_r13", -1);

      ab_BarringBitmap_r13 = new Asn1BitString();
      ab_BarringBitmap_r13.decode (buffer, 10, 10);

      buffer.invokeCharacters(ab_BarringBitmap_r13.toString());
      buffer.getContext().eventDispatcher.endElement("ab_BarringBitmap_r13", -1);

      // decode ab_BarringForExceptionData_r13

      if (ab_BarringForExceptionData_r13Present) {
         buffer.getContext().eventDispatcher.startElement("ab_BarringForExceptionData_r13", -1);

         int tval = AB_Config_NB_r13_ab_BarringForExceptionData_r13.decodeEnumValue (buffer);
         ab_BarringForExceptionData_r13 = AB_Config_NB_r13_ab_BarringForExceptionData_r13.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("ab_BarringForExceptionData_r13", -1);
      }
      else {
         ab_BarringForExceptionData_r13 = null;
      }

      // decode ab_BarringForSpecialAC_r13

      buffer.getContext().eventDispatcher.startElement("ab_BarringForSpecialAC_r13", -1);

      ab_BarringForSpecialAC_r13 = new Asn1BitString();
      ab_BarringForSpecialAC_r13.decode (buffer, 5, 5);

      buffer.invokeCharacters(ab_BarringForSpecialAC_r13.toString());
      buffer.getContext().eventDispatcher.endElement("ab_BarringForSpecialAC_r13", -1);

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (ab_Category_r13 != null) ab_Category_r13.print (_sb, "ab_Category_r13", _level+1);
      if (ab_BarringBitmap_r13 != null) ab_BarringBitmap_r13.print (_sb, "ab_BarringBitmap_r13", _level+1);
      if (ab_BarringForExceptionData_r13 != null) ab_BarringForExceptionData_r13.print (_sb, "ab_BarringForExceptionData_r13", _level+1);
      if (ab_BarringForSpecialAC_r13 != null) ab_BarringForSpecialAC_r13.print (_sb, "ab_BarringForSpecialAC_r13", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
