/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SC_MTCH_Info_BR_r14 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SC-MTCH-Info-BR-r14";
   }

   public ARFCN_ValueEUTRA_r9 sc_mtch_CarrierFreq_r14;
   public MBMSSessionInfo_r13 mbmsSessionInfo_r14;
   public Asn1BitString g_RNTI_r14;
   public SC_MTCH_SchedulingInfo_BR_r14 sc_mtch_schedulingInfo_r14;  // optional
   public Asn1BitString sc_mtch_neighbourCell_r14;  // optional
   public Asn1Integer mpdcch_Narrowband_SC_MTCH_r14;
   public SC_MTCH_Info_BR_r14_mpdcch_NumRepetition_SC_MTCH_r14 mpdcch_NumRepetition_SC_MTCH_r14 = null;
   public SC_MTCH_Info_BR_r14_mpdcch_StartSF_SC_MTCH_r14 mpdcch_StartSF_SC_MTCH_r14;
   public SC_MTCH_Info_BR_r14_mpdcch_PDSCH_HoppingConfig_SC_MTCH_r14 mpdcch_PDSCH_HoppingConfig_SC_MTCH_r14 = null;
   public SC_MTCH_Info_BR_r14_mpdcch_PDSCH_CEmodeConfig_SC_MTCH_r14 mpdcch_PDSCH_CEmodeConfig_SC_MTCH_r14 = null;
   public SC_MTCH_Info_BR_r14_mpdcch_PDSCH_MaxBandwidth_SC_MTCH_r14 mpdcch_PDSCH_MaxBandwidth_SC_MTCH_r14 = null;
   public SC_MTCH_Info_BR_r14_mpdcch_Offset_SC_MTCH_r14 mpdcch_Offset_SC_MTCH_r14 = null;
   public SC_MTCH_Info_BR_r14_p_a_r14 p_a_r14 = null;  // optional
   public Asn1OpenExt extElem1;

   public SC_MTCH_Info_BR_r14 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SC_MTCH_Info_BR_r14 (
      ARFCN_ValueEUTRA_r9 sc_mtch_CarrierFreq_r14_,
      MBMSSessionInfo_r13 mbmsSessionInfo_r14_,
      Asn1BitString g_RNTI_r14_,
      SC_MTCH_SchedulingInfo_BR_r14 sc_mtch_schedulingInfo_r14_,
      Asn1BitString sc_mtch_neighbourCell_r14_,
      Asn1Integer mpdcch_Narrowband_SC_MTCH_r14_,
      SC_MTCH_Info_BR_r14_mpdcch_NumRepetition_SC_MTCH_r14 mpdcch_NumRepetition_SC_MTCH_r14_,
      SC_MTCH_Info_BR_r14_mpdcch_StartSF_SC_MTCH_r14 mpdcch_StartSF_SC_MTCH_r14_,
      SC_MTCH_Info_BR_r14_mpdcch_PDSCH_HoppingConfig_SC_MTCH_r14 mpdcch_PDSCH_HoppingConfig_SC_MTCH_r14_,
      SC_MTCH_Info_BR_r14_mpdcch_PDSCH_CEmodeConfig_SC_MTCH_r14 mpdcch_PDSCH_CEmodeConfig_SC_MTCH_r14_,
      SC_MTCH_Info_BR_r14_mpdcch_PDSCH_MaxBandwidth_SC_MTCH_r14 mpdcch_PDSCH_MaxBandwidth_SC_MTCH_r14_,
      SC_MTCH_Info_BR_r14_mpdcch_Offset_SC_MTCH_r14 mpdcch_Offset_SC_MTCH_r14_,
      SC_MTCH_Info_BR_r14_p_a_r14 p_a_r14_
   ) {
      super();
      sc_mtch_CarrierFreq_r14 = sc_mtch_CarrierFreq_r14_;
      mbmsSessionInfo_r14 = mbmsSessionInfo_r14_;
      g_RNTI_r14 = g_RNTI_r14_;
      sc_mtch_schedulingInfo_r14 = sc_mtch_schedulingInfo_r14_;
      sc_mtch_neighbourCell_r14 = sc_mtch_neighbourCell_r14_;
      mpdcch_Narrowband_SC_MTCH_r14 = mpdcch_Narrowband_SC_MTCH_r14_;
      mpdcch_NumRepetition_SC_MTCH_r14 = mpdcch_NumRepetition_SC_MTCH_r14_;
      mpdcch_StartSF_SC_MTCH_r14 = mpdcch_StartSF_SC_MTCH_r14_;
      mpdcch_PDSCH_HoppingConfig_SC_MTCH_r14 = mpdcch_PDSCH_HoppingConfig_SC_MTCH_r14_;
      mpdcch_PDSCH_CEmodeConfig_SC_MTCH_r14 = mpdcch_PDSCH_CEmodeConfig_SC_MTCH_r14_;
      mpdcch_PDSCH_MaxBandwidth_SC_MTCH_r14 = mpdcch_PDSCH_MaxBandwidth_SC_MTCH_r14_;
      mpdcch_Offset_SC_MTCH_r14 = mpdcch_Offset_SC_MTCH_r14_;
      p_a_r14 = p_a_r14_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SC_MTCH_Info_BR_r14 (
      ARFCN_ValueEUTRA_r9 sc_mtch_CarrierFreq_r14_,
      MBMSSessionInfo_r13 mbmsSessionInfo_r14_,
      Asn1BitString g_RNTI_r14_,
      Asn1Integer mpdcch_Narrowband_SC_MTCH_r14_,
      SC_MTCH_Info_BR_r14_mpdcch_NumRepetition_SC_MTCH_r14 mpdcch_NumRepetition_SC_MTCH_r14_,
      SC_MTCH_Info_BR_r14_mpdcch_StartSF_SC_MTCH_r14 mpdcch_StartSF_SC_MTCH_r14_,
      SC_MTCH_Info_BR_r14_mpdcch_PDSCH_HoppingConfig_SC_MTCH_r14 mpdcch_PDSCH_HoppingConfig_SC_MTCH_r14_,
      SC_MTCH_Info_BR_r14_mpdcch_PDSCH_CEmodeConfig_SC_MTCH_r14 mpdcch_PDSCH_CEmodeConfig_SC_MTCH_r14_,
      SC_MTCH_Info_BR_r14_mpdcch_PDSCH_MaxBandwidth_SC_MTCH_r14 mpdcch_PDSCH_MaxBandwidth_SC_MTCH_r14_,
      SC_MTCH_Info_BR_r14_mpdcch_Offset_SC_MTCH_r14 mpdcch_Offset_SC_MTCH_r14_
   ) {
      super();
      sc_mtch_CarrierFreq_r14 = sc_mtch_CarrierFreq_r14_;
      mbmsSessionInfo_r14 = mbmsSessionInfo_r14_;
      g_RNTI_r14 = g_RNTI_r14_;
      mpdcch_Narrowband_SC_MTCH_r14 = mpdcch_Narrowband_SC_MTCH_r14_;
      mpdcch_NumRepetition_SC_MTCH_r14 = mpdcch_NumRepetition_SC_MTCH_r14_;
      mpdcch_StartSF_SC_MTCH_r14 = mpdcch_StartSF_SC_MTCH_r14_;
      mpdcch_PDSCH_HoppingConfig_SC_MTCH_r14 = mpdcch_PDSCH_HoppingConfig_SC_MTCH_r14_;
      mpdcch_PDSCH_CEmodeConfig_SC_MTCH_r14 = mpdcch_PDSCH_CEmodeConfig_SC_MTCH_r14_;
      mpdcch_PDSCH_MaxBandwidth_SC_MTCH_r14 = mpdcch_PDSCH_MaxBandwidth_SC_MTCH_r14_;
      mpdcch_Offset_SC_MTCH_r14 = mpdcch_Offset_SC_MTCH_r14_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SC_MTCH_Info_BR_r14 (long sc_mtch_CarrierFreq_r14_,
      MBMSSessionInfo_r13 mbmsSessionInfo_r14_,
      Asn1BitString g_RNTI_r14_,
      SC_MTCH_SchedulingInfo_BR_r14 sc_mtch_schedulingInfo_r14_,
      Asn1BitString sc_mtch_neighbourCell_r14_,
      long mpdcch_Narrowband_SC_MTCH_r14_,
      SC_MTCH_Info_BR_r14_mpdcch_NumRepetition_SC_MTCH_r14 mpdcch_NumRepetition_SC_MTCH_r14_,
      SC_MTCH_Info_BR_r14_mpdcch_StartSF_SC_MTCH_r14 mpdcch_StartSF_SC_MTCH_r14_,
      SC_MTCH_Info_BR_r14_mpdcch_PDSCH_HoppingConfig_SC_MTCH_r14 mpdcch_PDSCH_HoppingConfig_SC_MTCH_r14_,
      SC_MTCH_Info_BR_r14_mpdcch_PDSCH_CEmodeConfig_SC_MTCH_r14 mpdcch_PDSCH_CEmodeConfig_SC_MTCH_r14_,
      SC_MTCH_Info_BR_r14_mpdcch_PDSCH_MaxBandwidth_SC_MTCH_r14 mpdcch_PDSCH_MaxBandwidth_SC_MTCH_r14_,
      SC_MTCH_Info_BR_r14_mpdcch_Offset_SC_MTCH_r14 mpdcch_Offset_SC_MTCH_r14_,
      SC_MTCH_Info_BR_r14_p_a_r14 p_a_r14_
   ) {
      super();
      sc_mtch_CarrierFreq_r14 = new ARFCN_ValueEUTRA_r9 (sc_mtch_CarrierFreq_r14_);
      mbmsSessionInfo_r14 = mbmsSessionInfo_r14_;
      g_RNTI_r14 = g_RNTI_r14_;
      sc_mtch_schedulingInfo_r14 = sc_mtch_schedulingInfo_r14_;
      sc_mtch_neighbourCell_r14 = sc_mtch_neighbourCell_r14_;
      mpdcch_Narrowband_SC_MTCH_r14 = new Asn1Integer (mpdcch_Narrowband_SC_MTCH_r14_);
      mpdcch_NumRepetition_SC_MTCH_r14 = mpdcch_NumRepetition_SC_MTCH_r14_;
      mpdcch_StartSF_SC_MTCH_r14 = mpdcch_StartSF_SC_MTCH_r14_;
      mpdcch_PDSCH_HoppingConfig_SC_MTCH_r14 = mpdcch_PDSCH_HoppingConfig_SC_MTCH_r14_;
      mpdcch_PDSCH_CEmodeConfig_SC_MTCH_r14 = mpdcch_PDSCH_CEmodeConfig_SC_MTCH_r14_;
      mpdcch_PDSCH_MaxBandwidth_SC_MTCH_r14 = mpdcch_PDSCH_MaxBandwidth_SC_MTCH_r14_;
      mpdcch_Offset_SC_MTCH_r14 = mpdcch_Offset_SC_MTCH_r14_;
      p_a_r14 = p_a_r14_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public SC_MTCH_Info_BR_r14 (
      long sc_mtch_CarrierFreq_r14_,
      MBMSSessionInfo_r13 mbmsSessionInfo_r14_,
      Asn1BitString g_RNTI_r14_,
      long mpdcch_Narrowband_SC_MTCH_r14_,
      SC_MTCH_Info_BR_r14_mpdcch_NumRepetition_SC_MTCH_r14 mpdcch_NumRepetition_SC_MTCH_r14_,
      SC_MTCH_Info_BR_r14_mpdcch_StartSF_SC_MTCH_r14 mpdcch_StartSF_SC_MTCH_r14_,
      SC_MTCH_Info_BR_r14_mpdcch_PDSCH_HoppingConfig_SC_MTCH_r14 mpdcch_PDSCH_HoppingConfig_SC_MTCH_r14_,
      SC_MTCH_Info_BR_r14_mpdcch_PDSCH_CEmodeConfig_SC_MTCH_r14 mpdcch_PDSCH_CEmodeConfig_SC_MTCH_r14_,
      SC_MTCH_Info_BR_r14_mpdcch_PDSCH_MaxBandwidth_SC_MTCH_r14 mpdcch_PDSCH_MaxBandwidth_SC_MTCH_r14_,
      SC_MTCH_Info_BR_r14_mpdcch_Offset_SC_MTCH_r14 mpdcch_Offset_SC_MTCH_r14_
   ) {
      super();
      sc_mtch_CarrierFreq_r14 = new ARFCN_ValueEUTRA_r9 (sc_mtch_CarrierFreq_r14_);
      mbmsSessionInfo_r14 = mbmsSessionInfo_r14_;
      g_RNTI_r14 = g_RNTI_r14_;
      mpdcch_Narrowband_SC_MTCH_r14 = new Asn1Integer (mpdcch_Narrowband_SC_MTCH_r14_);
      mpdcch_NumRepetition_SC_MTCH_r14 = mpdcch_NumRepetition_SC_MTCH_r14_;
      mpdcch_StartSF_SC_MTCH_r14 = mpdcch_StartSF_SC_MTCH_r14_;
      mpdcch_PDSCH_HoppingConfig_SC_MTCH_r14 = mpdcch_PDSCH_HoppingConfig_SC_MTCH_r14_;
      mpdcch_PDSCH_CEmodeConfig_SC_MTCH_r14 = mpdcch_PDSCH_CEmodeConfig_SC_MTCH_r14_;
      mpdcch_PDSCH_MaxBandwidth_SC_MTCH_r14 = mpdcch_PDSCH_MaxBandwidth_SC_MTCH_r14_;
      mpdcch_Offset_SC_MTCH_r14 = mpdcch_Offset_SC_MTCH_r14_;
   }

   public void init () {
      sc_mtch_CarrierFreq_r14 = null;
      mbmsSessionInfo_r14 = null;
      g_RNTI_r14 = null;
      sc_mtch_schedulingInfo_r14 = null;
      sc_mtch_neighbourCell_r14 = null;
      mpdcch_Narrowband_SC_MTCH_r14 = null;
      mpdcch_NumRepetition_SC_MTCH_r14 = null;
      mpdcch_StartSF_SC_MTCH_r14 = null;
      mpdcch_PDSCH_HoppingConfig_SC_MTCH_r14 = null;
      mpdcch_PDSCH_CEmodeConfig_SC_MTCH_r14 = null;
      mpdcch_PDSCH_MaxBandwidth_SC_MTCH_r14 = null;
      mpdcch_Offset_SC_MTCH_r14 = null;
      p_a_r14 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 14; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return sc_mtch_CarrierFreq_r14;
         case 1: return mbmsSessionInfo_r14;
         case 2: return g_RNTI_r14;
         case 3: return sc_mtch_schedulingInfo_r14;
         case 4: return sc_mtch_neighbourCell_r14;
         case 5: return mpdcch_Narrowband_SC_MTCH_r14;
         case 6: return mpdcch_NumRepetition_SC_MTCH_r14;
         case 7: return mpdcch_StartSF_SC_MTCH_r14;
         case 8: return mpdcch_PDSCH_HoppingConfig_SC_MTCH_r14;
         case 9: return mpdcch_PDSCH_CEmodeConfig_SC_MTCH_r14;
         case 10: return mpdcch_PDSCH_MaxBandwidth_SC_MTCH_r14;
         case 11: return mpdcch_Offset_SC_MTCH_r14;
         case 12: return p_a_r14;
         case 13: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "sc-mtch-CarrierFreq-r14";
         case 1: return "mbmsSessionInfo-r14";
         case 2: return "g-RNTI-r14";
         case 3: return "sc-mtch-schedulingInfo-r14";
         case 4: return "sc-mtch-neighbourCell-r14";
         case 5: return "mpdcch-Narrowband-SC-MTCH-r14";
         case 6: return "mpdcch-NumRepetition-SC-MTCH-r14";
         case 7: return "mpdcch-StartSF-SC-MTCH-r14";
         case 8: return "mpdcch-PDSCH-HoppingConfig-SC-MTCH-r14";
         case 9: return "mpdcch-PDSCH-CEmodeConfig-SC-MTCH-r14";
         case 10: return "mpdcch-PDSCH-MaxBandwidth-SC-MTCH-r14";
         case 11: return "mpdcch-Offset-SC-MTCH-r14";
         case 12: return "p-a-r14";
         case 13: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean sc_mtch_schedulingInfo_r14Present = buffer.decodeBit ("sc_mtch_schedulingInfo_r14Present");
      boolean sc_mtch_neighbourCell_r14Present = buffer.decodeBit ("sc_mtch_neighbourCell_r14Present");
      boolean p_a_r14Present = buffer.decodeBit ("p_a_r14Present");

      // decode sc_mtch_CarrierFreq_r14

      buffer.getContext().eventDispatcher.startElement("sc_mtch_CarrierFreq_r14", -1);

      sc_mtch_CarrierFreq_r14 = new ARFCN_ValueEUTRA_r9();
      sc_mtch_CarrierFreq_r14.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("sc_mtch_CarrierFreq_r14", -1);

      // decode mbmsSessionInfo_r14

      buffer.getContext().eventDispatcher.startElement("mbmsSessionInfo_r14", -1);

      mbmsSessionInfo_r14 = new MBMSSessionInfo_r13();
      mbmsSessionInfo_r14.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("mbmsSessionInfo_r14", -1);

      // decode g_RNTI_r14

      buffer.getContext().eventDispatcher.startElement("g_RNTI_r14", -1);

      g_RNTI_r14 = new Asn1BitString();
      g_RNTI_r14.decode (buffer, 16, 16);

      buffer.invokeCharacters(g_RNTI_r14.toString());
      buffer.getContext().eventDispatcher.endElement("g_RNTI_r14", -1);

      // decode sc_mtch_schedulingInfo_r14

      if (sc_mtch_schedulingInfo_r14Present) {
         buffer.getContext().eventDispatcher.startElement("sc_mtch_schedulingInfo_r14", -1);

         sc_mtch_schedulingInfo_r14 = new SC_MTCH_SchedulingInfo_BR_r14();
         sc_mtch_schedulingInfo_r14.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sc_mtch_schedulingInfo_r14", -1);
      }
      else {
         sc_mtch_schedulingInfo_r14 = null;
      }

      // decode sc_mtch_neighbourCell_r14

      if (sc_mtch_neighbourCell_r14Present) {
         buffer.getContext().eventDispatcher.startElement("sc_mtch_neighbourCell_r14", -1);

         sc_mtch_neighbourCell_r14 = new Asn1BitString();
         sc_mtch_neighbourCell_r14.decode (buffer, 8, 8);

         buffer.invokeCharacters(sc_mtch_neighbourCell_r14.toString());
         buffer.getContext().eventDispatcher.endElement("sc_mtch_neighbourCell_r14", -1);
      }
      else {
         sc_mtch_neighbourCell_r14 = null;
      }

      // decode mpdcch_Narrowband_SC_MTCH_r14

      buffer.getContext().eventDispatcher.startElement("mpdcch_Narrowband_SC_MTCH_r14", -1);

      mpdcch_Narrowband_SC_MTCH_r14 = new Asn1Integer();
      mpdcch_Narrowband_SC_MTCH_r14.decode (buffer, 1, 16);

      buffer.invokeCharacters(mpdcch_Narrowband_SC_MTCH_r14.toString());
      buffer.getContext().eventDispatcher.endElement("mpdcch_Narrowband_SC_MTCH_r14", -1);

      // decode mpdcch_NumRepetition_SC_MTCH_r14

      buffer.getContext().eventDispatcher.startElement("mpdcch_NumRepetition_SC_MTCH_r14", -1);

      {
         int tval = SC_MTCH_Info_BR_r14_mpdcch_NumRepetition_SC_MTCH_r14.decodeEnumValue (buffer);
         mpdcch_NumRepetition_SC_MTCH_r14 = SC_MTCH_Info_BR_r14_mpdcch_NumRepetition_SC_MTCH_r14.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("mpdcch_NumRepetition_SC_MTCH_r14", -1);

      // decode mpdcch_StartSF_SC_MTCH_r14

      buffer.getContext().eventDispatcher.startElement("mpdcch_StartSF_SC_MTCH_r14", -1);

      mpdcch_StartSF_SC_MTCH_r14 = new SC_MTCH_Info_BR_r14_mpdcch_StartSF_SC_MTCH_r14();
      mpdcch_StartSF_SC_MTCH_r14.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("mpdcch_StartSF_SC_MTCH_r14", -1);

      // decode mpdcch_PDSCH_HoppingConfig_SC_MTCH_r14

      buffer.getContext().eventDispatcher.startElement("mpdcch_PDSCH_HoppingConfig_SC_MTCH_r14", -1);

      {
         int tval = SC_MTCH_Info_BR_r14_mpdcch_PDSCH_HoppingConfig_SC_MTCH_r14.decodeEnumValue (buffer);
         mpdcch_PDSCH_HoppingConfig_SC_MTCH_r14 = SC_MTCH_Info_BR_r14_mpdcch_PDSCH_HoppingConfig_SC_MTCH_r14.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("mpdcch_PDSCH_HoppingConfig_SC_MTCH_r14", -1);

      // decode mpdcch_PDSCH_CEmodeConfig_SC_MTCH_r14

      buffer.getContext().eventDispatcher.startElement("mpdcch_PDSCH_CEmodeConfig_SC_MTCH_r14", -1);

      {
         int tval = SC_MTCH_Info_BR_r14_mpdcch_PDSCH_CEmodeConfig_SC_MTCH_r14.decodeEnumValue (buffer);
         mpdcch_PDSCH_CEmodeConfig_SC_MTCH_r14 = SC_MTCH_Info_BR_r14_mpdcch_PDSCH_CEmodeConfig_SC_MTCH_r14.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("mpdcch_PDSCH_CEmodeConfig_SC_MTCH_r14", -1);

      // decode mpdcch_PDSCH_MaxBandwidth_SC_MTCH_r14

      buffer.getContext().eventDispatcher.startElement("mpdcch_PDSCH_MaxBandwidth_SC_MTCH_r14", -1);

      {
         int tval = SC_MTCH_Info_BR_r14_mpdcch_PDSCH_MaxBandwidth_SC_MTCH_r14.decodeEnumValue (buffer);
         mpdcch_PDSCH_MaxBandwidth_SC_MTCH_r14 = SC_MTCH_Info_BR_r14_mpdcch_PDSCH_MaxBandwidth_SC_MTCH_r14.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("mpdcch_PDSCH_MaxBandwidth_SC_MTCH_r14", -1);

      // decode mpdcch_Offset_SC_MTCH_r14

      buffer.getContext().eventDispatcher.startElement("mpdcch_Offset_SC_MTCH_r14", -1);

      {
         int tval = SC_MTCH_Info_BR_r14_mpdcch_Offset_SC_MTCH_r14.decodeEnumValue (buffer);
         mpdcch_Offset_SC_MTCH_r14 = SC_MTCH_Info_BR_r14_mpdcch_Offset_SC_MTCH_r14.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("mpdcch_Offset_SC_MTCH_r14", -1);

      // decode p_a_r14

      if (p_a_r14Present) {
         buffer.getContext().eventDispatcher.startElement("p_a_r14", -1);

         int tval = SC_MTCH_Info_BR_r14_p_a_r14.decodeEnumValue (buffer);
         p_a_r14 = SC_MTCH_Info_BR_r14_p_a_r14.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("p_a_r14", -1);
      }
      else {
         p_a_r14 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (sc_mtch_CarrierFreq_r14 != null) sc_mtch_CarrierFreq_r14.print (_sb, "sc_mtch_CarrierFreq_r14", _level+1);
      if (mbmsSessionInfo_r14 != null) mbmsSessionInfo_r14.print (_sb, "mbmsSessionInfo_r14", _level+1);
      if (g_RNTI_r14 != null) g_RNTI_r14.print (_sb, "g_RNTI_r14", _level+1);
      if (sc_mtch_schedulingInfo_r14 != null) sc_mtch_schedulingInfo_r14.print (_sb, "sc_mtch_schedulingInfo_r14", _level+1);
      if (sc_mtch_neighbourCell_r14 != null) sc_mtch_neighbourCell_r14.print (_sb, "sc_mtch_neighbourCell_r14", _level+1);
      if (mpdcch_Narrowband_SC_MTCH_r14 != null) mpdcch_Narrowband_SC_MTCH_r14.print (_sb, "mpdcch_Narrowband_SC_MTCH_r14", _level+1);
      if (mpdcch_NumRepetition_SC_MTCH_r14 != null) mpdcch_NumRepetition_SC_MTCH_r14.print (_sb, "mpdcch_NumRepetition_SC_MTCH_r14", _level+1);
      if (mpdcch_StartSF_SC_MTCH_r14 != null) mpdcch_StartSF_SC_MTCH_r14.print (_sb, "mpdcch_StartSF_SC_MTCH_r14", _level+1);
      if (mpdcch_PDSCH_HoppingConfig_SC_MTCH_r14 != null) mpdcch_PDSCH_HoppingConfig_SC_MTCH_r14.print (_sb, "mpdcch_PDSCH_HoppingConfig_SC_MTCH_r14", _level+1);
      if (mpdcch_PDSCH_CEmodeConfig_SC_MTCH_r14 != null) mpdcch_PDSCH_CEmodeConfig_SC_MTCH_r14.print (_sb, "mpdcch_PDSCH_CEmodeConfig_SC_MTCH_r14", _level+1);
      if (mpdcch_PDSCH_MaxBandwidth_SC_MTCH_r14 != null) mpdcch_PDSCH_MaxBandwidth_SC_MTCH_r14.print (_sb, "mpdcch_PDSCH_MaxBandwidth_SC_MTCH_r14", _level+1);
      if (mpdcch_Offset_SC_MTCH_r14 != null) mpdcch_Offset_SC_MTCH_r14.print (_sb, "mpdcch_Offset_SC_MTCH_r14", _level+1);
      if (p_a_r14 != null) p_a_r14.print (_sb, "p_a_r14", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
