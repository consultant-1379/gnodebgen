/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class CellReselectionParametersCDMA2000_r11 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CellReselectionParametersCDMA2000-r11";
   }

   public BandClassListCDMA2000 bandClassList;
   public CellReselectionParametersCDMA2000_r11_neighCellList_r11 neighCellList_r11;
   public T_Reselection t_ReselectionCDMA2000;
   public SpeedStateScaleFactors t_ReselectionCDMA2000_SF;  // optional

   public CellReselectionParametersCDMA2000_r11 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CellReselectionParametersCDMA2000_r11 (
      BandClassListCDMA2000 bandClassList_,
      CellReselectionParametersCDMA2000_r11_neighCellList_r11 neighCellList_r11_,
      T_Reselection t_ReselectionCDMA2000_,
      SpeedStateScaleFactors t_ReselectionCDMA2000_SF_
   ) {
      super();
      bandClassList = bandClassList_;
      neighCellList_r11 = neighCellList_r11_;
      t_ReselectionCDMA2000 = t_ReselectionCDMA2000_;
      t_ReselectionCDMA2000_SF = t_ReselectionCDMA2000_SF_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public CellReselectionParametersCDMA2000_r11 (
      BandClassListCDMA2000 bandClassList_,
      CellReselectionParametersCDMA2000_r11_neighCellList_r11 neighCellList_r11_,
      T_Reselection t_ReselectionCDMA2000_
   ) {
      super();
      bandClassList = bandClassList_;
      neighCellList_r11 = neighCellList_r11_;
      t_ReselectionCDMA2000 = t_ReselectionCDMA2000_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public CellReselectionParametersCDMA2000_r11 (BandClassListCDMA2000 bandClassList_,
      CellReselectionParametersCDMA2000_r11_neighCellList_r11 neighCellList_r11_,
      long t_ReselectionCDMA2000_,
      SpeedStateScaleFactors t_ReselectionCDMA2000_SF_
   ) {
      super();
      bandClassList = bandClassList_;
      neighCellList_r11 = neighCellList_r11_;
      t_ReselectionCDMA2000 = new T_Reselection (t_ReselectionCDMA2000_);
      t_ReselectionCDMA2000_SF = t_ReselectionCDMA2000_SF_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public CellReselectionParametersCDMA2000_r11 (
      BandClassListCDMA2000 bandClassList_,
      CellReselectionParametersCDMA2000_r11_neighCellList_r11 neighCellList_r11_,
      long t_ReselectionCDMA2000_
   ) {
      super();
      bandClassList = bandClassList_;
      neighCellList_r11 = neighCellList_r11_;
      t_ReselectionCDMA2000 = new T_Reselection (t_ReselectionCDMA2000_);
   }

   public void init () {
      bandClassList = null;
      neighCellList_r11 = null;
      t_ReselectionCDMA2000 = null;
      t_ReselectionCDMA2000_SF = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return bandClassList;
         case 1: return neighCellList_r11;
         case 2: return t_ReselectionCDMA2000;
         case 3: return t_ReselectionCDMA2000_SF;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "bandClassList";
         case 1: return "neighCellList-r11";
         case 2: return "t-ReselectionCDMA2000";
         case 3: return "t-ReselectionCDMA2000-SF";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean t_ReselectionCDMA2000_SFPresent = buffer.decodeBit ("t_ReselectionCDMA2000_SFPresent");

      // decode bandClassList

      buffer.getContext().eventDispatcher.startElement("bandClassList", -1);

      bandClassList = new BandClassListCDMA2000();
      bandClassList.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("bandClassList", -1);

      // decode neighCellList_r11

      buffer.getContext().eventDispatcher.startElement("neighCellList_r11", -1);

      neighCellList_r11 = new CellReselectionParametersCDMA2000_r11_neighCellList_r11();
      neighCellList_r11.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("neighCellList_r11", -1);

      // decode t_ReselectionCDMA2000

      buffer.getContext().eventDispatcher.startElement("t_ReselectionCDMA2000", -1);

      t_ReselectionCDMA2000 = new T_Reselection();
      t_ReselectionCDMA2000.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("t_ReselectionCDMA2000", -1);

      // decode t_ReselectionCDMA2000_SF

      if (t_ReselectionCDMA2000_SFPresent) {
         buffer.getContext().eventDispatcher.startElement("t_ReselectionCDMA2000_SF", -1);

         t_ReselectionCDMA2000_SF = new SpeedStateScaleFactors();
         t_ReselectionCDMA2000_SF.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("t_ReselectionCDMA2000_SF", -1);
      }
      else {
         t_ReselectionCDMA2000_SF = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (bandClassList != null) bandClassList.print (_sb, "bandClassList", _level+1);
      if (neighCellList_r11 != null) neighCellList_r11.print (_sb, "neighCellList_r11", _level+1);
      if (t_ReselectionCDMA2000 != null) t_ReselectionCDMA2000.print (_sb, "t_ReselectionCDMA2000", _level+1);
      if (t_ReselectionCDMA2000_SF != null) t_ReselectionCDMA2000_SF.print (_sb, "t_ReselectionCDMA2000_SF", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
