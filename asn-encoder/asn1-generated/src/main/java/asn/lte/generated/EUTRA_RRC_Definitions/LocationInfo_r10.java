/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class LocationInfo_r10 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "LocationInfo-r10";
   }

   public LocationInfo_r10_locationCoordinates_r10 locationCoordinates_r10;
   public Asn1OctetString horizontalVelocity_r10;  // optional
   public Asn1OctetString gnss_TOD_msec_r10;  // optional
   public boolean mV2ExtPresent;
   public LocationInfo_r10_verticalVelocityInfo_r15 verticalVelocityInfo_r15;  // optional
   public Asn1OpenExt extElem1;

   public LocationInfo_r10 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public LocationInfo_r10 (
      LocationInfo_r10_locationCoordinates_r10 locationCoordinates_r10_,
      Asn1OctetString horizontalVelocity_r10_,
      Asn1OctetString gnss_TOD_msec_r10_,
      LocationInfo_r10_verticalVelocityInfo_r15 verticalVelocityInfo_r15_
   ) {
      super();
      locationCoordinates_r10 = locationCoordinates_r10_;
      horizontalVelocity_r10 = horizontalVelocity_r10_;
      gnss_TOD_msec_r10 = gnss_TOD_msec_r10_;
      verticalVelocityInfo_r15 = verticalVelocityInfo_r15_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public LocationInfo_r10 (
      LocationInfo_r10_locationCoordinates_r10 locationCoordinates_r10_
   ) {
      super();
      locationCoordinates_r10 = locationCoordinates_r10_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public LocationInfo_r10 (LocationInfo_r10_locationCoordinates_r10 locationCoordinates_r10_,
      byte[] horizontalVelocity_r10_,
      byte[] gnss_TOD_msec_r10_,
      LocationInfo_r10_verticalVelocityInfo_r15 verticalVelocityInfo_r15_
   ) {
      super();
      locationCoordinates_r10 = locationCoordinates_r10_;
      horizontalVelocity_r10 = new Asn1OctetString (horizontalVelocity_r10_);
      gnss_TOD_msec_r10 = new Asn1OctetString (gnss_TOD_msec_r10_);
      verticalVelocityInfo_r15 = verticalVelocityInfo_r15_;
   }

   public void init () {
      locationCoordinates_r10 = null;
      horizontalVelocity_r10 = null;
      gnss_TOD_msec_r10 = null;
      verticalVelocityInfo_r15 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return locationCoordinates_r10;
         case 1: return horizontalVelocity_r10;
         case 2: return gnss_TOD_msec_r10;
         case 3: return verticalVelocityInfo_r15;
         case 4: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "locationCoordinates-r10";
         case 1: return "horizontalVelocity-r10";
         case 2: return "gnss-TOD-msec-r10";
         case 3: return "verticalVelocityInfo-r15";
         case 4: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean horizontalVelocity_r10Present = buffer.decodeBit ("horizontalVelocity_r10Present");
      boolean gnss_TOD_msec_r10Present = buffer.decodeBit ("gnss_TOD_msec_r10Present");

      // decode locationCoordinates_r10

      buffer.getContext().eventDispatcher.startElement("locationCoordinates_r10", -1);

      locationCoordinates_r10 = new LocationInfo_r10_locationCoordinates_r10();
      locationCoordinates_r10.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("locationCoordinates_r10", -1);

      // decode horizontalVelocity_r10

      if (horizontalVelocity_r10Present) {
         buffer.getContext().eventDispatcher.startElement("horizontalVelocity_r10", -1);

         horizontalVelocity_r10 = new Asn1OctetString();
         horizontalVelocity_r10.decode (buffer);

         buffer.invokeCharacters(horizontalVelocity_r10.toString());
         buffer.getContext().eventDispatcher.endElement("horizontalVelocity_r10", -1);
      }
      else {
         horizontalVelocity_r10 = null;
      }

      // decode gnss_TOD_msec_r10

      if (gnss_TOD_msec_r10Present) {
         buffer.getContext().eventDispatcher.startElement("gnss_TOD_msec_r10", -1);

         gnss_TOD_msec_r10 = new Asn1OctetString();
         gnss_TOD_msec_r10.decode (buffer);

         buffer.invokeCharacters(gnss_TOD_msec_r10.toString());
         buffer.getContext().eventDispatcher.endElement("gnss_TOD_msec_r10", -1);
      }
      else {
         gnss_TOD_msec_r10 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean verticalVelocityInfo_r15Present = buffer.decodeBit ("verticalVelocityInfo_r15Present");

            // decode verticalVelocityInfo_r15

            if (verticalVelocityInfo_r15Present) {
               buffer.getContext().eventDispatcher.startElement("verticalVelocityInfo_r15", -1);

               verticalVelocityInfo_r15 = new LocationInfo_r10_verticalVelocityInfo_r15();
               verticalVelocityInfo_r15.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("verticalVelocityInfo_r15", -1);
            }
            else {
               verticalVelocityInfo_r15 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (locationCoordinates_r10 != null) locationCoordinates_r10.print (_sb, "locationCoordinates_r10", _level+1);
      if (horizontalVelocity_r10 != null) horizontalVelocity_r10.print (_sb, "horizontalVelocity_r10", _level+1);
      if (gnss_TOD_msec_r10 != null) gnss_TOD_msec_r10.print (_sb, "gnss_TOD_msec_r10", _level+1);
      if (verticalVelocityInfo_r15 != null) verticalVelocityInfo_r15.print (_sb, "verticalVelocityInfo_r15", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
