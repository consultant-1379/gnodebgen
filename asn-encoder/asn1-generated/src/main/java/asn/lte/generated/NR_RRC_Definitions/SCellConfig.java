/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SCellConfig extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SCellConfig";
   }

   public SCellIndex sCellIndex;
   public ServingCellConfigCommon sCellConfigCommon;  // optional
   public ServingCellConfig sCellConfigDedicated;  // optional
   public boolean mV2ExtPresent;
   public SSB_MTC smtc;  // optional
   public boolean mV3ExtPresent;
   public SCellConfig_sCellState_r16 sCellState_r16 = null;  // optional
   public SCellConfig_secondaryDRX_GroupConfig_r16 secondaryDRX_GroupConfig_r16 = null;  // optional
   public Asn1OpenExt extElem1;

   public SCellConfig () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SCellConfig (
      SCellIndex sCellIndex_,
      ServingCellConfigCommon sCellConfigCommon_,
      ServingCellConfig sCellConfigDedicated_,
      SSB_MTC smtc_,
      SCellConfig_sCellState_r16 sCellState_r16_,
      SCellConfig_secondaryDRX_GroupConfig_r16 secondaryDRX_GroupConfig_r16_
   ) {
      super();
      sCellIndex = sCellIndex_;
      sCellConfigCommon = sCellConfigCommon_;
      sCellConfigDedicated = sCellConfigDedicated_;
      smtc = smtc_;
      sCellState_r16 = sCellState_r16_;
      secondaryDRX_GroupConfig_r16 = secondaryDRX_GroupConfig_r16_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SCellConfig (
      SCellIndex sCellIndex_
   ) {
      super();
      sCellIndex = sCellIndex_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SCellConfig (long sCellIndex_,
      ServingCellConfigCommon sCellConfigCommon_,
      ServingCellConfig sCellConfigDedicated_,
      SSB_MTC smtc_,
      SCellConfig_sCellState_r16 sCellState_r16_,
      SCellConfig_secondaryDRX_GroupConfig_r16 secondaryDRX_GroupConfig_r16_
   ) {
      super();
      sCellIndex = new SCellIndex (sCellIndex_);
      sCellConfigCommon = sCellConfigCommon_;
      sCellConfigDedicated = sCellConfigDedicated_;
      smtc = smtc_;
      sCellState_r16 = sCellState_r16_;
      secondaryDRX_GroupConfig_r16 = secondaryDRX_GroupConfig_r16_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public SCellConfig (
      long sCellIndex_
   ) {
      super();
      sCellIndex = new SCellIndex (sCellIndex_);
   }

   public void init () {
      sCellIndex = null;
      sCellConfigCommon = null;
      sCellConfigDedicated = null;
      smtc = null;
      sCellState_r16 = null;
      secondaryDRX_GroupConfig_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return sCellIndex;
         case 1: return sCellConfigCommon;
         case 2: return sCellConfigDedicated;
         case 3: return smtc;
         case 4: return sCellState_r16;
         case 5: return secondaryDRX_GroupConfig_r16;
         case 6: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "sCellIndex";
         case 1: return "sCellConfigCommon";
         case 2: return "sCellConfigDedicated";
         case 3: return "smtc";
         case 4: return "sCellState-r16";
         case 5: return "secondaryDRX-GroupConfig-r16";
         case 6: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean sCellConfigCommonPresent = buffer.decodeBit ("sCellConfigCommonPresent");
      boolean sCellConfigDedicatedPresent = buffer.decodeBit ("sCellConfigDedicatedPresent");

      // decode sCellIndex

      buffer.getContext().eventDispatcher.startElement("sCellIndex", -1);

      sCellIndex = new SCellIndex();
      sCellIndex.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("sCellIndex", -1);

      // decode sCellConfigCommon

      if (sCellConfigCommonPresent) {
         buffer.getContext().eventDispatcher.startElement("sCellConfigCommon", -1);

         sCellConfigCommon = new ServingCellConfigCommon();
         sCellConfigCommon.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sCellConfigCommon", -1);
      }
      else {
         sCellConfigCommon = null;
      }

      // decode sCellConfigDedicated

      if (sCellConfigDedicatedPresent) {
         buffer.getContext().eventDispatcher.startElement("sCellConfigDedicated", -1);

         sCellConfigDedicated = new ServingCellConfig();
         sCellConfigDedicated.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sCellConfigDedicated", -1);
      }
      else {
         sCellConfigDedicated = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean smtcPresent = buffer.decodeBit ("smtcPresent");

            // decode smtc

            if (smtcPresent) {
               buffer.getContext().eventDispatcher.startElement("smtc", -1);

               smtc = new SSB_MTC();
               smtc.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("smtc", -1);
            }
            else {
               smtc = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean sCellState_r16Present = buffer.decodeBit ("sCellState_r16Present");

            boolean secondaryDRX_GroupConfig_r16Present = buffer.decodeBit ("secondaryDRX_GroupConfig_r16Present");

            // decode sCellState_r16

            if (sCellState_r16Present) {
               buffer.getContext().eventDispatcher.startElement("sCellState_r16", -1);

               int tval = SCellConfig_sCellState_r16.decodeEnumValue (buffer);
               sCellState_r16 = SCellConfig_sCellState_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("sCellState_r16", -1);
            }
            else {
               sCellState_r16 = null;
            }

            // decode secondaryDRX_GroupConfig_r16

            if (secondaryDRX_GroupConfig_r16Present) {
               buffer.getContext().eventDispatcher.startElement("secondaryDRX_GroupConfig_r16", -1);

               int tval = SCellConfig_secondaryDRX_GroupConfig_r16.decodeEnumValue (buffer);
               secondaryDRX_GroupConfig_r16 = SCellConfig_secondaryDRX_GroupConfig_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("secondaryDRX_GroupConfig_r16", -1);
            }
            else {
               secondaryDRX_GroupConfig_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (sCellIndex != null) sCellIndex.print (_sb, "sCellIndex", _level+1);
      if (sCellConfigCommon != null) sCellConfigCommon.print (_sb, "sCellConfigCommon", _level+1);
      if (sCellConfigDedicated != null) sCellConfigDedicated.print (_sb, "sCellConfigDedicated", _level+1);
      if (smtc != null) smtc.print (_sb, "smtc", _level+1);
      if (sCellState_r16 != null) sCellState_r16.print (_sb, "sCellState_r16", _level+1);
      if (secondaryDRX_GroupConfig_r16 != null) secondaryDRX_GroupConfig_r16.print (_sb, "secondaryDRX_GroupConfig_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
