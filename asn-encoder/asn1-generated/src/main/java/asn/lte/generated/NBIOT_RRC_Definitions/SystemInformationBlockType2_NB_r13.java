/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NBIOT_RRC_Definitions;

import com.objsys.asn1j.runtime.*;
import asn.lte.generated.EUTRA_RRC_Definitions.TimeAlignmentTimer;

public class SystemInformationBlockType2_NB_r13 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NBIOT_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SystemInformationBlockType2-NB-r13";
   }

   public RadioResourceConfigCommonSIB_NB_r13 radioResourceConfigCommon_r13;
   public UE_TimersAndConstants_NB_r13 ue_TimersAndConstants_r13;
   public SystemInformationBlockType2_NB_r13_freqInfo_r13 freqInfo_r13;
   public TimeAlignmentTimer timeAlignmentTimerCommon_r13 = null;
   public SystemInformationBlockType2_NB_r13_multiBandInfoList_r13 multiBandInfoList_r13;  // optional
   public Asn1OctetString lateNonCriticalExtension;  // optional
   public boolean mV2ExtPresent;
   public SystemInformationBlockType2_NB_r13_cp_Reestablishment_r14 cp_Reestablishment_r14 = null;  // optional
   public boolean mV3ExtPresent;
   public SystemInformationBlockType2_NB_r13_servingCellMeasInfo_r14 servingCellMeasInfo_r14 = null;  // optional
   public SystemInformationBlockType2_NB_r13_cqi_Reporting_r14 cqi_Reporting_r14 = null;  // optional
   public boolean mV4ExtPresent;
   public SystemInformationBlockType2_NB_r13_enhancedPHR_r15 enhancedPHR_r15 = null;  // optional
   public SystemInformationBlockType2_NB_r13_freqInfo_v1530 freqInfo_v1530;  // optional
   public SystemInformationBlockType2_NB_r13_cp_EDT_r15 cp_EDT_r15 = null;  // optional
   public SystemInformationBlockType2_NB_r13_up_EDT_r15 up_EDT_r15 = null;  // optional
   public Asn1OpenExt extElem1;

   public SystemInformationBlockType2_NB_r13 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SystemInformationBlockType2_NB_r13 (
      RadioResourceConfigCommonSIB_NB_r13 radioResourceConfigCommon_r13_,
      UE_TimersAndConstants_NB_r13 ue_TimersAndConstants_r13_,
      SystemInformationBlockType2_NB_r13_freqInfo_r13 freqInfo_r13_,
      TimeAlignmentTimer timeAlignmentTimerCommon_r13_,
      SystemInformationBlockType2_NB_r13_multiBandInfoList_r13 multiBandInfoList_r13_,
      Asn1OctetString lateNonCriticalExtension_,
      SystemInformationBlockType2_NB_r13_cp_Reestablishment_r14 cp_Reestablishment_r14_,
      SystemInformationBlockType2_NB_r13_servingCellMeasInfo_r14 servingCellMeasInfo_r14_,
      SystemInformationBlockType2_NB_r13_cqi_Reporting_r14 cqi_Reporting_r14_,
      SystemInformationBlockType2_NB_r13_enhancedPHR_r15 enhancedPHR_r15_,
      SystemInformationBlockType2_NB_r13_freqInfo_v1530 freqInfo_v1530_,
      SystemInformationBlockType2_NB_r13_cp_EDT_r15 cp_EDT_r15_,
      SystemInformationBlockType2_NB_r13_up_EDT_r15 up_EDT_r15_
   ) {
      super();
      radioResourceConfigCommon_r13 = radioResourceConfigCommon_r13_;
      ue_TimersAndConstants_r13 = ue_TimersAndConstants_r13_;
      freqInfo_r13 = freqInfo_r13_;
      timeAlignmentTimerCommon_r13 = timeAlignmentTimerCommon_r13_;
      multiBandInfoList_r13 = multiBandInfoList_r13_;
      lateNonCriticalExtension = lateNonCriticalExtension_;
      cp_Reestablishment_r14 = cp_Reestablishment_r14_;
      servingCellMeasInfo_r14 = servingCellMeasInfo_r14_;
      cqi_Reporting_r14 = cqi_Reporting_r14_;
      enhancedPHR_r15 = enhancedPHR_r15_;
      freqInfo_v1530 = freqInfo_v1530_;
      cp_EDT_r15 = cp_EDT_r15_;
      up_EDT_r15 = up_EDT_r15_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SystemInformationBlockType2_NB_r13 (
      RadioResourceConfigCommonSIB_NB_r13 radioResourceConfigCommon_r13_,
      UE_TimersAndConstants_NB_r13 ue_TimersAndConstants_r13_,
      SystemInformationBlockType2_NB_r13_freqInfo_r13 freqInfo_r13_,
      TimeAlignmentTimer timeAlignmentTimerCommon_r13_
   ) {
      super();
      radioResourceConfigCommon_r13 = radioResourceConfigCommon_r13_;
      ue_TimersAndConstants_r13 = ue_TimersAndConstants_r13_;
      freqInfo_r13 = freqInfo_r13_;
      timeAlignmentTimerCommon_r13 = timeAlignmentTimerCommon_r13_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SystemInformationBlockType2_NB_r13 (RadioResourceConfigCommonSIB_NB_r13 radioResourceConfigCommon_r13_,
      UE_TimersAndConstants_NB_r13 ue_TimersAndConstants_r13_,
      SystemInformationBlockType2_NB_r13_freqInfo_r13 freqInfo_r13_,
      TimeAlignmentTimer timeAlignmentTimerCommon_r13_,
      SystemInformationBlockType2_NB_r13_multiBandInfoList_r13 multiBandInfoList_r13_,
      byte[] lateNonCriticalExtension_,
      SystemInformationBlockType2_NB_r13_cp_Reestablishment_r14 cp_Reestablishment_r14_,
      SystemInformationBlockType2_NB_r13_servingCellMeasInfo_r14 servingCellMeasInfo_r14_,
      SystemInformationBlockType2_NB_r13_cqi_Reporting_r14 cqi_Reporting_r14_,
      SystemInformationBlockType2_NB_r13_enhancedPHR_r15 enhancedPHR_r15_,
      SystemInformationBlockType2_NB_r13_freqInfo_v1530 freqInfo_v1530_,
      SystemInformationBlockType2_NB_r13_cp_EDT_r15 cp_EDT_r15_,
      SystemInformationBlockType2_NB_r13_up_EDT_r15 up_EDT_r15_
   ) {
      super();
      radioResourceConfigCommon_r13 = radioResourceConfigCommon_r13_;
      ue_TimersAndConstants_r13 = ue_TimersAndConstants_r13_;
      freqInfo_r13 = freqInfo_r13_;
      timeAlignmentTimerCommon_r13 = timeAlignmentTimerCommon_r13_;
      multiBandInfoList_r13 = multiBandInfoList_r13_;
      lateNonCriticalExtension = new Asn1OctetString (lateNonCriticalExtension_);
      cp_Reestablishment_r14 = cp_Reestablishment_r14_;
      servingCellMeasInfo_r14 = servingCellMeasInfo_r14_;
      cqi_Reporting_r14 = cqi_Reporting_r14_;
      enhancedPHR_r15 = enhancedPHR_r15_;
      freqInfo_v1530 = freqInfo_v1530_;
      cp_EDT_r15 = cp_EDT_r15_;
      up_EDT_r15 = up_EDT_r15_;
   }

   public void init () {
      radioResourceConfigCommon_r13 = null;
      ue_TimersAndConstants_r13 = null;
      freqInfo_r13 = null;
      timeAlignmentTimerCommon_r13 = null;
      multiBandInfoList_r13 = null;
      lateNonCriticalExtension = null;
      cp_Reestablishment_r14 = null;
      servingCellMeasInfo_r14 = null;
      cqi_Reporting_r14 = null;
      enhancedPHR_r15 = null;
      freqInfo_v1530 = null;
      cp_EDT_r15 = null;
      up_EDT_r15 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 14; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return radioResourceConfigCommon_r13;
         case 1: return ue_TimersAndConstants_r13;
         case 2: return freqInfo_r13;
         case 3: return timeAlignmentTimerCommon_r13;
         case 4: return multiBandInfoList_r13;
         case 5: return lateNonCriticalExtension;
         case 6: return cp_Reestablishment_r14;
         case 7: return servingCellMeasInfo_r14;
         case 8: return cqi_Reporting_r14;
         case 9: return enhancedPHR_r15;
         case 10: return freqInfo_v1530;
         case 11: return cp_EDT_r15;
         case 12: return up_EDT_r15;
         case 13: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "radioResourceConfigCommon-r13";
         case 1: return "ue-TimersAndConstants-r13";
         case 2: return "freqInfo-r13";
         case 3: return "timeAlignmentTimerCommon-r13";
         case 4: return "multiBandInfoList-r13";
         case 5: return "lateNonCriticalExtension";
         case 6: return "cp-Reestablishment-r14";
         case 7: return "servingCellMeasInfo-r14";
         case 8: return "cqi-Reporting-r14";
         case 9: return "enhancedPHR-r15";
         case 10: return "freqInfo-v1530";
         case 11: return "cp-EDT-r15";
         case 12: return "up-EDT-r15";
         case 13: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean multiBandInfoList_r13Present = buffer.decodeBit ("multiBandInfoList_r13Present");
      boolean lateNonCriticalExtensionPresent = buffer.decodeBit ("lateNonCriticalExtensionPresent");

      // decode radioResourceConfigCommon_r13

      buffer.getContext().eventDispatcher.startElement("radioResourceConfigCommon_r13", -1);

      radioResourceConfigCommon_r13 = new RadioResourceConfigCommonSIB_NB_r13();
      radioResourceConfigCommon_r13.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("radioResourceConfigCommon_r13", -1);

      // decode ue_TimersAndConstants_r13

      buffer.getContext().eventDispatcher.startElement("ue_TimersAndConstants_r13", -1);

      ue_TimersAndConstants_r13 = new UE_TimersAndConstants_NB_r13();
      ue_TimersAndConstants_r13.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("ue_TimersAndConstants_r13", -1);

      // decode freqInfo_r13

      buffer.getContext().eventDispatcher.startElement("freqInfo_r13", -1);

      freqInfo_r13 = new SystemInformationBlockType2_NB_r13_freqInfo_r13();
      freqInfo_r13.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("freqInfo_r13", -1);

      // decode timeAlignmentTimerCommon_r13

      buffer.getContext().eventDispatcher.startElement("timeAlignmentTimerCommon_r13", -1);

      {
         int tval = TimeAlignmentTimer.decodeEnumValue (buffer);
         timeAlignmentTimerCommon_r13 = TimeAlignmentTimer.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("timeAlignmentTimerCommon_r13", -1);

      // decode multiBandInfoList_r13

      if (multiBandInfoList_r13Present) {
         buffer.getContext().eventDispatcher.startElement("multiBandInfoList_r13", -1);

         multiBandInfoList_r13 = new SystemInformationBlockType2_NB_r13_multiBandInfoList_r13();
         multiBandInfoList_r13.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("multiBandInfoList_r13", -1);
      }
      else {
         multiBandInfoList_r13 = null;
      }

      // decode lateNonCriticalExtension

      if (lateNonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("lateNonCriticalExtension", -1);

         lateNonCriticalExtension = new Asn1OctetString();
         lateNonCriticalExtension.decode (buffer);

         buffer.invokeCharacters(lateNonCriticalExtension.toString());
         buffer.getContext().eventDispatcher.endElement("lateNonCriticalExtension", -1);
      }
      else {
         lateNonCriticalExtension = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV4ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean cp_Reestablishment_r14Present = buffer.decodeBit ("cp_Reestablishment_r14Present");

            // decode cp_Reestablishment_r14

            if (cp_Reestablishment_r14Present) {
               buffer.getContext().eventDispatcher.startElement("cp_Reestablishment_r14", -1);

               int tval = SystemInformationBlockType2_NB_r13_cp_Reestablishment_r14.decodeEnumValue (buffer);
               cp_Reestablishment_r14 = SystemInformationBlockType2_NB_r13_cp_Reestablishment_r14.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("cp_Reestablishment_r14", -1);
            }
            else {
               cp_Reestablishment_r14 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean servingCellMeasInfo_r14Present = buffer.decodeBit ("servingCellMeasInfo_r14Present");

            boolean cqi_Reporting_r14Present = buffer.decodeBit ("cqi_Reporting_r14Present");

            // decode servingCellMeasInfo_r14

            if (servingCellMeasInfo_r14Present) {
               buffer.getContext().eventDispatcher.startElement("servingCellMeasInfo_r14", -1);

               int tval = SystemInformationBlockType2_NB_r13_servingCellMeasInfo_r14.decodeEnumValue (buffer);
               servingCellMeasInfo_r14 = SystemInformationBlockType2_NB_r13_servingCellMeasInfo_r14.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("servingCellMeasInfo_r14", -1);
            }
            else {
               servingCellMeasInfo_r14 = null;
            }

            // decode cqi_Reporting_r14

            if (cqi_Reporting_r14Present) {
               buffer.getContext().eventDispatcher.startElement("cqi_Reporting_r14", -1);

               int tval = SystemInformationBlockType2_NB_r13_cqi_Reporting_r14.decodeEnumValue (buffer);
               cqi_Reporting_r14 = SystemInformationBlockType2_NB_r13_cqi_Reporting_r14.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("cqi_Reporting_r14", -1);
            }
            else {
               cqi_Reporting_r14 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV4ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean enhancedPHR_r15Present = buffer.decodeBit ("enhancedPHR_r15Present");

            boolean freqInfo_v1530Present = buffer.decodeBit ("freqInfo_v1530Present");

            boolean cp_EDT_r15Present = buffer.decodeBit ("cp_EDT_r15Present");

            boolean up_EDT_r15Present = buffer.decodeBit ("up_EDT_r15Present");

            // decode enhancedPHR_r15

            if (enhancedPHR_r15Present) {
               buffer.getContext().eventDispatcher.startElement("enhancedPHR_r15", -1);

               int tval = SystemInformationBlockType2_NB_r13_enhancedPHR_r15.decodeEnumValue (buffer);
               enhancedPHR_r15 = SystemInformationBlockType2_NB_r13_enhancedPHR_r15.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("enhancedPHR_r15", -1);
            }
            else {
               enhancedPHR_r15 = null;
            }

            // decode freqInfo_v1530

            if (freqInfo_v1530Present) {
               buffer.getContext().eventDispatcher.startElement("freqInfo_v1530", -1);

               freqInfo_v1530 = new SystemInformationBlockType2_NB_r13_freqInfo_v1530();
               freqInfo_v1530.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("freqInfo_v1530", -1);
            }
            else {
               freqInfo_v1530 = null;
            }

            // decode cp_EDT_r15

            if (cp_EDT_r15Present) {
               buffer.getContext().eventDispatcher.startElement("cp_EDT_r15", -1);

               int tval = SystemInformationBlockType2_NB_r13_cp_EDT_r15.decodeEnumValue (buffer);
               cp_EDT_r15 = SystemInformationBlockType2_NB_r13_cp_EDT_r15.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("cp_EDT_r15", -1);
            }
            else {
               cp_EDT_r15 = null;
            }

            // decode up_EDT_r15

            if (up_EDT_r15Present) {
               buffer.getContext().eventDispatcher.startElement("up_EDT_r15", -1);

               int tval = SystemInformationBlockType2_NB_r13_up_EDT_r15.decodeEnumValue (buffer);
               up_EDT_r15 = SystemInformationBlockType2_NB_r13_up_EDT_r15.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("up_EDT_r15", -1);
            }
            else {
               up_EDT_r15 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (radioResourceConfigCommon_r13 != null) radioResourceConfigCommon_r13.print (_sb, "radioResourceConfigCommon_r13", _level+1);
      if (ue_TimersAndConstants_r13 != null) ue_TimersAndConstants_r13.print (_sb, "ue_TimersAndConstants_r13", _level+1);
      if (freqInfo_r13 != null) freqInfo_r13.print (_sb, "freqInfo_r13", _level+1);
      if (timeAlignmentTimerCommon_r13 != null) timeAlignmentTimerCommon_r13.print (_sb, "timeAlignmentTimerCommon_r13", _level+1);
      if (multiBandInfoList_r13 != null) multiBandInfoList_r13.print (_sb, "multiBandInfoList_r13", _level+1);
      if (lateNonCriticalExtension != null) lateNonCriticalExtension.print (_sb, "lateNonCriticalExtension", _level+1);
      if (cp_Reestablishment_r14 != null) cp_Reestablishment_r14.print (_sb, "cp_Reestablishment_r14", _level+1);
      if (servingCellMeasInfo_r14 != null) servingCellMeasInfo_r14.print (_sb, "servingCellMeasInfo_r14", _level+1);
      if (cqi_Reporting_r14 != null) cqi_Reporting_r14.print (_sb, "cqi_Reporting_r14", _level+1);
      if (enhancedPHR_r15 != null) enhancedPHR_r15.print (_sb, "enhancedPHR_r15", _level+1);
      if (freqInfo_v1530 != null) freqInfo_v1530.print (_sb, "freqInfo_v1530", _level+1);
      if (cp_EDT_r15 != null) cp_EDT_r15.print (_sb, "cp_EDT_r15", _level+1);
      if (up_EDT_r15 != null) up_EDT_r15.print (_sb, "up_EDT_r15", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
