/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SL_Parameters_v1310 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SL-Parameters-v1310";
   }

   public SL_Parameters_v1310_discSysInfoReporting_r13 discSysInfoReporting_r13 = null;  // optional
   public SL_Parameters_v1310_commMultipleTx_r13 commMultipleTx_r13 = null;  // optional
   public SL_Parameters_v1310_discInterFreqTx_r13 discInterFreqTx_r13 = null;  // optional
   public SL_Parameters_v1310_discPeriodicSLSS_r13 discPeriodicSLSS_r13 = null;  // optional

   public SL_Parameters_v1310 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SL_Parameters_v1310 (
      SL_Parameters_v1310_discSysInfoReporting_r13 discSysInfoReporting_r13_,
      SL_Parameters_v1310_commMultipleTx_r13 commMultipleTx_r13_,
      SL_Parameters_v1310_discInterFreqTx_r13 discInterFreqTx_r13_,
      SL_Parameters_v1310_discPeriodicSLSS_r13 discPeriodicSLSS_r13_
   ) {
      super();
      discSysInfoReporting_r13 = discSysInfoReporting_r13_;
      commMultipleTx_r13 = commMultipleTx_r13_;
      discInterFreqTx_r13 = discInterFreqTx_r13_;
      discPeriodicSLSS_r13 = discPeriodicSLSS_r13_;
   }

   public void init () {
      discSysInfoReporting_r13 = null;
      commMultipleTx_r13 = null;
      discInterFreqTx_r13 = null;
      discPeriodicSLSS_r13 = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return discSysInfoReporting_r13;
         case 1: return commMultipleTx_r13;
         case 2: return discInterFreqTx_r13;
         case 3: return discPeriodicSLSS_r13;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "discSysInfoReporting-r13";
         case 1: return "commMultipleTx-r13";
         case 2: return "discInterFreqTx-r13";
         case 3: return "discPeriodicSLSS-r13";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean discSysInfoReporting_r13Present = buffer.decodeBit ("discSysInfoReporting_r13Present");
      boolean commMultipleTx_r13Present = buffer.decodeBit ("commMultipleTx_r13Present");
      boolean discInterFreqTx_r13Present = buffer.decodeBit ("discInterFreqTx_r13Present");
      boolean discPeriodicSLSS_r13Present = buffer.decodeBit ("discPeriodicSLSS_r13Present");

      // decode discSysInfoReporting_r13

      if (discSysInfoReporting_r13Present) {
         buffer.getContext().eventDispatcher.startElement("discSysInfoReporting_r13", -1);

         int tval = SL_Parameters_v1310_discSysInfoReporting_r13.decodeEnumValue (buffer);
         discSysInfoReporting_r13 = SL_Parameters_v1310_discSysInfoReporting_r13.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("discSysInfoReporting_r13", -1);
      }
      else {
         discSysInfoReporting_r13 = null;
      }

      // decode commMultipleTx_r13

      if (commMultipleTx_r13Present) {
         buffer.getContext().eventDispatcher.startElement("commMultipleTx_r13", -1);

         int tval = SL_Parameters_v1310_commMultipleTx_r13.decodeEnumValue (buffer);
         commMultipleTx_r13 = SL_Parameters_v1310_commMultipleTx_r13.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("commMultipleTx_r13", -1);
      }
      else {
         commMultipleTx_r13 = null;
      }

      // decode discInterFreqTx_r13

      if (discInterFreqTx_r13Present) {
         buffer.getContext().eventDispatcher.startElement("discInterFreqTx_r13", -1);

         int tval = SL_Parameters_v1310_discInterFreqTx_r13.decodeEnumValue (buffer);
         discInterFreqTx_r13 = SL_Parameters_v1310_discInterFreqTx_r13.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("discInterFreqTx_r13", -1);
      }
      else {
         discInterFreqTx_r13 = null;
      }

      // decode discPeriodicSLSS_r13

      if (discPeriodicSLSS_r13Present) {
         buffer.getContext().eventDispatcher.startElement("discPeriodicSLSS_r13", -1);

         int tval = SL_Parameters_v1310_discPeriodicSLSS_r13.decodeEnumValue (buffer);
         discPeriodicSLSS_r13 = SL_Parameters_v1310_discPeriodicSLSS_r13.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("discPeriodicSLSS_r13", -1);
      }
      else {
         discPeriodicSLSS_r13 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (discSysInfoReporting_r13 != null) discSysInfoReporting_r13.print (_sb, "discSysInfoReporting_r13", _level+1);
      if (commMultipleTx_r13 != null) commMultipleTx_r13.print (_sb, "commMultipleTx_r13", _level+1);
      if (discInterFreqTx_r13 != null) discInterFreqTx_r13.print (_sb, "discInterFreqTx_r13", _level+1);
      if (discPeriodicSLSS_r13 != null) discPeriodicSLSS_r13.print (_sb, "discPeriodicSLSS_r13", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
