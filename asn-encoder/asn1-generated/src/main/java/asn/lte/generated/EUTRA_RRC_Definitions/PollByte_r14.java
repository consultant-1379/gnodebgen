/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class PollByte_r14 extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "PollByte-r14";
   }

   // Integer constants for switch-case
   public static final int _KB1 = 0;
   public static final int _KB2 = 1;
   public static final int _KB5 = 2;
   public static final int _KB8 = 3;
   public static final int _KB10 = 4;
   public static final int _KB15 = 5;
   public static final int _KB3500 = 6;
   public static final int _KB4000 = 7;
   public static final int _KB4500 = 8;
   public static final int _KB5000 = 9;
   public static final int _KB5500 = 10;
   public static final int _KB6000 = 11;
   public static final int _KB6500 = 12;
   public static final int _KB7000 = 13;
   public static final int _KB7500 = 14;
   public static final int _KB8000 = 15;
   public static final int _KB9000 = 16;
   public static final int _KB10000 = 17;
   public static final int _KB11000 = 18;
   public static final int _KB12000 = 19;
   public static final int _KB13000 = 20;
   public static final int _KB14000 = 21;
   public static final int _KB15000 = 22;
   public static final int _KB16000 = 23;
   public static final int _KB17000 = 24;
   public static final int _KB18000 = 25;
   public static final int _KB19000 = 26;
   public static final int _KB20000 = 27;
   public static final int _KB25000 = 28;
   public static final int _KB30000 = 29;
   public static final int _KB35000 = 30;
   public static final int _KB40000 = 31;

   // Singleton instances of PollByte_r14
   protected static final PollByte_r14 _kB1 = new PollByte_r14(0);
   protected static final PollByte_r14 _kB2 = new PollByte_r14(1);
   protected static final PollByte_r14 _kB5 = new PollByte_r14(2);
   protected static final PollByte_r14 _kB8 = new PollByte_r14(3);
   protected static final PollByte_r14 _kB10 = new PollByte_r14(4);
   protected static final PollByte_r14 _kB15 = new PollByte_r14(5);
   protected static final PollByte_r14 _kB3500 = new PollByte_r14(6);
   protected static final PollByte_r14 _kB4000 = new PollByte_r14(7);
   protected static final PollByte_r14 _kB4500 = new PollByte_r14(8);
   protected static final PollByte_r14 _kB5000 = new PollByte_r14(9);
   protected static final PollByte_r14 _kB5500 = new PollByte_r14(10);
   protected static final PollByte_r14 _kB6000 = new PollByte_r14(11);
   protected static final PollByte_r14 _kB6500 = new PollByte_r14(12);
   protected static final PollByte_r14 _kB7000 = new PollByte_r14(13);
   protected static final PollByte_r14 _kB7500 = new PollByte_r14(14);
   protected static final PollByte_r14 _kB8000 = new PollByte_r14(15);
   protected static final PollByte_r14 _kB9000 = new PollByte_r14(16);
   protected static final PollByte_r14 _kB10000 = new PollByte_r14(17);
   protected static final PollByte_r14 _kB11000 = new PollByte_r14(18);
   protected static final PollByte_r14 _kB12000 = new PollByte_r14(19);
   protected static final PollByte_r14 _kB13000 = new PollByte_r14(20);
   protected static final PollByte_r14 _kB14000 = new PollByte_r14(21);
   protected static final PollByte_r14 _kB15000 = new PollByte_r14(22);
   protected static final PollByte_r14 _kB16000 = new PollByte_r14(23);
   protected static final PollByte_r14 _kB17000 = new PollByte_r14(24);
   protected static final PollByte_r14 _kB18000 = new PollByte_r14(25);
   protected static final PollByte_r14 _kB19000 = new PollByte_r14(26);
   protected static final PollByte_r14 _kB20000 = new PollByte_r14(27);
   protected static final PollByte_r14 _kB25000 = new PollByte_r14(28);
   protected static final PollByte_r14 _kB30000 = new PollByte_r14(29);
   protected static final PollByte_r14 _kB35000 = new PollByte_r14(30);
   protected static final PollByte_r14 _kB40000 = new PollByte_r14(31);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    *   7
    *   8
    *   9
    *   10
    *   11
    *   12
    *   13
    *   14
    *   15
    *   16
    *   17
    *   18
    *   19
    *   20
    *   21
    *   22
    *   23
    *   24
    *   25
    *   26
    *   27
    *   28
    *   29
    *   30
    *   31
    */
   protected PollByte_r14 (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for kB1.
    */
   public static PollByte_r14 kB1() {
      return _kB1;
   }

   /**
    * Singleton accessor method for kB2.
    */
   public static PollByte_r14 kB2() {
      return _kB2;
   }

   /**
    * Singleton accessor method for kB5.
    */
   public static PollByte_r14 kB5() {
      return _kB5;
   }

   /**
    * Singleton accessor method for kB8.
    */
   public static PollByte_r14 kB8() {
      return _kB8;
   }

   /**
    * Singleton accessor method for kB10.
    */
   public static PollByte_r14 kB10() {
      return _kB10;
   }

   /**
    * Singleton accessor method for kB15.
    */
   public static PollByte_r14 kB15() {
      return _kB15;
   }

   /**
    * Singleton accessor method for kB3500.
    */
   public static PollByte_r14 kB3500() {
      return _kB3500;
   }

   /**
    * Singleton accessor method for kB4000.
    */
   public static PollByte_r14 kB4000() {
      return _kB4000;
   }

   /**
    * Singleton accessor method for kB4500.
    */
   public static PollByte_r14 kB4500() {
      return _kB4500;
   }

   /**
    * Singleton accessor method for kB5000.
    */
   public static PollByte_r14 kB5000() {
      return _kB5000;
   }

   /**
    * Singleton accessor method for kB5500.
    */
   public static PollByte_r14 kB5500() {
      return _kB5500;
   }

   /**
    * Singleton accessor method for kB6000.
    */
   public static PollByte_r14 kB6000() {
      return _kB6000;
   }

   /**
    * Singleton accessor method for kB6500.
    */
   public static PollByte_r14 kB6500() {
      return _kB6500;
   }

   /**
    * Singleton accessor method for kB7000.
    */
   public static PollByte_r14 kB7000() {
      return _kB7000;
   }

   /**
    * Singleton accessor method for kB7500.
    */
   public static PollByte_r14 kB7500() {
      return _kB7500;
   }

   /**
    * Singleton accessor method for kB8000.
    */
   public static PollByte_r14 kB8000() {
      return _kB8000;
   }

   /**
    * Singleton accessor method for kB9000.
    */
   public static PollByte_r14 kB9000() {
      return _kB9000;
   }

   /**
    * Singleton accessor method for kB10000.
    */
   public static PollByte_r14 kB10000() {
      return _kB10000;
   }

   /**
    * Singleton accessor method for kB11000.
    */
   public static PollByte_r14 kB11000() {
      return _kB11000;
   }

   /**
    * Singleton accessor method for kB12000.
    */
   public static PollByte_r14 kB12000() {
      return _kB12000;
   }

   /**
    * Singleton accessor method for kB13000.
    */
   public static PollByte_r14 kB13000() {
      return _kB13000;
   }

   /**
    * Singleton accessor method for kB14000.
    */
   public static PollByte_r14 kB14000() {
      return _kB14000;
   }

   /**
    * Singleton accessor method for kB15000.
    */
   public static PollByte_r14 kB15000() {
      return _kB15000;
   }

   /**
    * Singleton accessor method for kB16000.
    */
   public static PollByte_r14 kB16000() {
      return _kB16000;
   }

   /**
    * Singleton accessor method for kB17000.
    */
   public static PollByte_r14 kB17000() {
      return _kB17000;
   }

   /**
    * Singleton accessor method for kB18000.
    */
   public static PollByte_r14 kB18000() {
      return _kB18000;
   }

   /**
    * Singleton accessor method for kB19000.
    */
   public static PollByte_r14 kB19000() {
      return _kB19000;
   }

   /**
    * Singleton accessor method for kB20000.
    */
   public static PollByte_r14 kB20000() {
      return _kB20000;
   }

   /**
    * Singleton accessor method for kB25000.
    */
   public static PollByte_r14 kB25000() {
      return _kB25000;
   }

   /**
    * Singleton accessor method for kB30000.
    */
   public static PollByte_r14 kB30000() {
      return _kB30000;
   }

   /**
    * Singleton accessor method for kB35000.
    */
   public static PollByte_r14 kB35000() {
      return _kB35000;
   }

   /**
    * Singleton accessor method for kB40000.
    */
   public static PollByte_r14 kB40000() {
      return _kB40000;
   }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return PollByte_r14.valueOf( PollByte_r14.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static PollByte_r14 valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 0: return kB1();
         case 1: return kB2();
         case 2: return kB5();
         case 3: return kB8();
         case 4: return kB10();
         case 5: return kB15();
         case 6: return kB3500();
         case 7: return kB4000();
         case 8: return kB4500();
         case 9: return kB5000();
         case 10: return kB5500();
         case 11: return kB6000();
         case 12: return kB6500();
         case 13: return kB7000();
         case 14: return kB7500();
         case 15: return kB8000();
         case 16: return kB9000();
         case 17: return kB10000();
         case 18: return kB11000();
         case 19: return kB12000();
         case 20: return kB13000();
         case 21: return kB14000();
         case 22: return kB15000();
         case 23: return kB16000();
         case 24: return kB17000();
         case 25: return kB18000();
         case 26: return kB19000();
         case 27: return kB20000();
         case 28: return kB25000();
         case 29: return kB30000();
         case 30: return kB35000();
         case 31: return kB40000();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      ui = (int) buffer.decodeConsWholeNumber (32);

      switch (ui) {
         case 0: ret =  0; break;
         case 1: ret =  1; break;
         case 2: ret =  2; break;
         case 3: ret =  3; break;
         case 4: ret =  4; break;
         case 5: ret =  5; break;
         case 6: ret =  6; break;
         case 7: ret =  7; break;
         case 8: ret =  8; break;
         case 9: ret =  9; break;
         case 10: ret =  10; break;
         case 11: ret =  11; break;
         case 12: ret =  12; break;
         case 13: ret =  13; break;
         case 14: ret =  14; break;
         case 15: ret =  15; break;
         case 16: ret =  16; break;
         case 17: ret =  17; break;
         case 18: ret =  18; break;
         case 19: ret =  19; break;
         case 20: ret =  20; break;
         case 21: ret =  21; break;
         case 22: ret =  22; break;
         case 23: ret =  23; break;
         case 24: ret =  24; break;
         case 25: ret =  25; break;
         case 26: ret =  26; break;
         case 27: ret =  27; break;
         case 28: ret =  28; break;
         case 29: ret =  29; break;
         case 30: ret =  30; break;
         case 31: ret =  31; break;
         default: throw new Asn1InvalidEnumException (ui);
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (PollByte_r14.valueOf(ret).toString());

      return ret;
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("kB1");
         case 1: return ("kB2");
         case 2: return ("kB5");
         case 3: return ("kB8");
         case 4: return ("kB10");
         case 5: return ("kB15");
         case 6: return ("kB3500");
         case 7: return ("kB4000");
         case 8: return ("kB4500");
         case 9: return ("kB5000");
         case 10: return ("kB5500");
         case 11: return ("kB6000");
         case 12: return ("kB6500");
         case 13: return ("kB7000");
         case 14: return ("kB7500");
         case 15: return ("kB8000");
         case 16: return ("kB9000");
         case 17: return ("kB10000");
         case 18: return ("kB11000");
         case 19: return ("kB12000");
         case 20: return ("kB13000");
         case 21: return ("kB14000");
         case 22: return ("kB15000");
         case 23: return ("kB16000");
         case 24: return ("kB17000");
         case 25: return ("kB18000");
         case 26: return ("kB19000");
         case 27: return ("kB20000");
         case 28: return ("kB25000");
         case 29: return ("kB30000");
         case 30: return ("kB35000");
         case 31: return ("kB40000");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
