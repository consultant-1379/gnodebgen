/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NBIOT_InterNodeDefinitions;

import com.objsys.asn1j.runtime.*;
import asn.lte.generated.NBIOT_RRC_Definitions.RadioResourceConfigDedicated_NB_r13;
import asn.lte.generated.EUTRA_RRC_Definitions.SecurityAlgorithmConfig;
import asn.lte.generated.EUTRA_RRC_Definitions.C_RNTI;
import asn.lte.generated.NBIOT_RRC_Definitions.CarrierFreq_NB_r13;

public class AS_Config_NB extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NBIOT_InterNodeDefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "AS-Config-NB";
   }

   public RadioResourceConfigDedicated_NB_r13 sourceRadioResourceConfig_r13;
   public SecurityAlgorithmConfig sourceSecurityAlgorithmConfig_r13;
   public C_RNTI sourceUE_Identity_r13;
   public CarrierFreq_NB_r13 sourceDl_CarrierFreq_r13;
   public Asn1OpenExt extElem1;

   public AS_Config_NB () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public AS_Config_NB (
      RadioResourceConfigDedicated_NB_r13 sourceRadioResourceConfig_r13_,
      SecurityAlgorithmConfig sourceSecurityAlgorithmConfig_r13_,
      C_RNTI sourceUE_Identity_r13_,
      CarrierFreq_NB_r13 sourceDl_CarrierFreq_r13_
   ) {
      super();
      sourceRadioResourceConfig_r13 = sourceRadioResourceConfig_r13_;
      sourceSecurityAlgorithmConfig_r13 = sourceSecurityAlgorithmConfig_r13_;
      sourceUE_Identity_r13 = sourceUE_Identity_r13_;
      sourceDl_CarrierFreq_r13 = sourceDl_CarrierFreq_r13_;
   }

   public void init () {
      sourceRadioResourceConfig_r13 = null;
      sourceSecurityAlgorithmConfig_r13 = null;
      sourceUE_Identity_r13 = null;
      sourceDl_CarrierFreq_r13 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return sourceRadioResourceConfig_r13;
         case 1: return sourceSecurityAlgorithmConfig_r13;
         case 2: return sourceUE_Identity_r13;
         case 3: return sourceDl_CarrierFreq_r13;
         case 4: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "sourceRadioResourceConfig-r13";
         case 1: return "sourceSecurityAlgorithmConfig-r13";
         case 2: return "sourceUE-Identity-r13";
         case 3: return "sourceDl-CarrierFreq-r13";
         case 4: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // decode sourceRadioResourceConfig_r13

      buffer.getContext().eventDispatcher.startElement("sourceRadioResourceConfig_r13", -1);

      sourceRadioResourceConfig_r13 = new RadioResourceConfigDedicated_NB_r13();
      sourceRadioResourceConfig_r13.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("sourceRadioResourceConfig_r13", -1);

      // decode sourceSecurityAlgorithmConfig_r13

      buffer.getContext().eventDispatcher.startElement("sourceSecurityAlgorithmConfig_r13", -1);

      sourceSecurityAlgorithmConfig_r13 = new SecurityAlgorithmConfig();
      sourceSecurityAlgorithmConfig_r13.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("sourceSecurityAlgorithmConfig_r13", -1);

      // decode sourceUE_Identity_r13

      buffer.getContext().eventDispatcher.startElement("sourceUE_Identity_r13", -1);

      sourceUE_Identity_r13 = new C_RNTI();
      sourceUE_Identity_r13.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("sourceUE_Identity_r13", -1);

      // decode sourceDl_CarrierFreq_r13

      buffer.getContext().eventDispatcher.startElement("sourceDl_CarrierFreq_r13", -1);

      sourceDl_CarrierFreq_r13 = new CarrierFreq_NB_r13();
      sourceDl_CarrierFreq_r13.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("sourceDl_CarrierFreq_r13", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (sourceRadioResourceConfig_r13 != null) sourceRadioResourceConfig_r13.print (_sb, "sourceRadioResourceConfig_r13", _level+1);
      if (sourceSecurityAlgorithmConfig_r13 != null) sourceSecurityAlgorithmConfig_r13.print (_sb, "sourceSecurityAlgorithmConfig_r13", _level+1);
      if (sourceUE_Identity_r13 != null) sourceUE_Identity_r13.print (_sb, "sourceUE_Identity_r13", _level+1);
      if (sourceDl_CarrierFreq_r13 != null) sourceDl_CarrierFreq_r13.print (_sb, "sourceDl_CarrierFreq_r13", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
