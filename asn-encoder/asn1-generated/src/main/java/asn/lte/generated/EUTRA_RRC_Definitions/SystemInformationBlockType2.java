/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SystemInformationBlockType2 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SystemInformationBlockType2";
   }

   public SystemInformationBlockType2_ac_BarringInfo ac_BarringInfo;  // optional
   public RadioResourceConfigCommonSIB radioResourceConfigCommon;
   public UE_TimersAndConstants ue_TimersAndConstants;
   public SystemInformationBlockType2_freqInfo freqInfo;
   public MBSFN_SubframeConfigList mbsfn_SubframeConfigList;  // optional
   public TimeAlignmentTimer timeAlignmentTimerCommon = null;
   public SystemInformationBlockType2_v8h0_IEs lateNonCriticalExtension;  // optional
   public boolean mV3ExtPresent;
   public AC_BarringConfig ssac_BarringForMMTEL_Voice_r9;  // optional
   public AC_BarringConfig ssac_BarringForMMTEL_Video_r9;  // optional
   public boolean mV4ExtPresent;
   public AC_BarringConfig ac_BarringForCSFB_r10;  // optional
   public boolean mV5ExtPresent;
   public SystemInformationBlockType2_ac_BarringSkipForMMTELVoice_r12 ac_BarringSkipForMMTELVoice_r12 = null;  // optional
   public SystemInformationBlockType2_ac_BarringSkipForMMTELVideo_r12 ac_BarringSkipForMMTELVideo_r12 = null;  // optional
   public SystemInformationBlockType2_ac_BarringSkipForSMS_r12 ac_BarringSkipForSMS_r12 = null;  // optional
   public AC_BarringPerPLMN_List_r12 ac_BarringPerPLMN_List_r12;  // optional
   public boolean mV6ExtPresent;
   public SystemInformationBlockType2_voiceServiceCauseIndication_r12 voiceServiceCauseIndication_r12 = null;  // optional
   public boolean mV7ExtPresent;
   public ACDC_BarringForCommon_r13 acdc_BarringForCommon_r13;  // optional
   public ACDC_BarringPerPLMN_List_r13 acdc_BarringPerPLMN_List_r13;  // optional
   public boolean mV8ExtPresent;
   public UDT_Restricting_r13 udt_RestrictingForCommon_r13;  // optional
   public UDT_RestrictingPerPLMN_List_r13 udt_RestrictingPerPLMN_List_r13;  // optional
   public CIOT_EPS_OptimisationInfo_r13 cIoT_EPS_OptimisationInfo_r13;  // optional
   public SystemInformationBlockType2_useFullResumeID_r13 useFullResumeID_r13 = null;  // optional
   public boolean mV9ExtPresent;
   public SystemInformationBlockType2_unicastFreqHoppingInd_r13 unicastFreqHoppingInd_r13 = null;  // optional
   public boolean mV10ExtPresent;
   public MBSFN_SubframeConfigList_v1430 mbsfn_SubframeConfigList_v1430;  // optional
   public SystemInformationBlockType2_videoServiceCauseIndication_r14 videoServiceCauseIndication_r14 = null;  // optional
   public boolean mV11ExtPresent;
   public PLMN_InfoList_r15 plmn_InfoList_r15;  // optional
   public boolean mV12ExtPresent;
   public SystemInformationBlockType2_cp_EDT_r15 cp_EDT_r15 = null;  // optional
   public SystemInformationBlockType2_up_EDT_r15 up_EDT_r15 = null;  // optional
   public SystemInformationBlockType2_idleModeMeasurements_r15 idleModeMeasurements_r15 = null;  // optional
   public SystemInformationBlockType2_reducedCP_LatencyEnabled_r15 reducedCP_LatencyEnabled_r15 = null;  // optional
   public boolean mV13ExtPresent;
   public SystemInformationBlockType2_mbms_ROM_ServiceIndication_r15 mbms_ROM_ServiceIndication_r15 = null;  // optional
   public Asn1OpenExt extElem1;

   public SystemInformationBlockType2 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SystemInformationBlockType2 (
      SystemInformationBlockType2_ac_BarringInfo ac_BarringInfo_,
      RadioResourceConfigCommonSIB radioResourceConfigCommon_,
      UE_TimersAndConstants ue_TimersAndConstants_,
      SystemInformationBlockType2_freqInfo freqInfo_,
      MBSFN_SubframeConfigList mbsfn_SubframeConfigList_,
      TimeAlignmentTimer timeAlignmentTimerCommon_,
      SystemInformationBlockType2_v8h0_IEs lateNonCriticalExtension_,
      AC_BarringConfig ssac_BarringForMMTEL_Voice_r9_,
      AC_BarringConfig ssac_BarringForMMTEL_Video_r9_,
      AC_BarringConfig ac_BarringForCSFB_r10_,
      SystemInformationBlockType2_ac_BarringSkipForMMTELVoice_r12 ac_BarringSkipForMMTELVoice_r12_,
      SystemInformationBlockType2_ac_BarringSkipForMMTELVideo_r12 ac_BarringSkipForMMTELVideo_r12_,
      SystemInformationBlockType2_ac_BarringSkipForSMS_r12 ac_BarringSkipForSMS_r12_,
      AC_BarringPerPLMN_List_r12 ac_BarringPerPLMN_List_r12_,
      SystemInformationBlockType2_voiceServiceCauseIndication_r12 voiceServiceCauseIndication_r12_,
      ACDC_BarringForCommon_r13 acdc_BarringForCommon_r13_,
      ACDC_BarringPerPLMN_List_r13 acdc_BarringPerPLMN_List_r13_,
      UDT_Restricting_r13 udt_RestrictingForCommon_r13_,
      UDT_RestrictingPerPLMN_List_r13 udt_RestrictingPerPLMN_List_r13_,
      CIOT_EPS_OptimisationInfo_r13 cIoT_EPS_OptimisationInfo_r13_,
      SystemInformationBlockType2_useFullResumeID_r13 useFullResumeID_r13_,
      SystemInformationBlockType2_unicastFreqHoppingInd_r13 unicastFreqHoppingInd_r13_,
      MBSFN_SubframeConfigList_v1430 mbsfn_SubframeConfigList_v1430_,
      SystemInformationBlockType2_videoServiceCauseIndication_r14 videoServiceCauseIndication_r14_,
      PLMN_InfoList_r15 plmn_InfoList_r15_,
      SystemInformationBlockType2_cp_EDT_r15 cp_EDT_r15_,
      SystemInformationBlockType2_up_EDT_r15 up_EDT_r15_,
      SystemInformationBlockType2_idleModeMeasurements_r15 idleModeMeasurements_r15_,
      SystemInformationBlockType2_reducedCP_LatencyEnabled_r15 reducedCP_LatencyEnabled_r15_,
      SystemInformationBlockType2_mbms_ROM_ServiceIndication_r15 mbms_ROM_ServiceIndication_r15_
   ) {
      super();
      ac_BarringInfo = ac_BarringInfo_;
      radioResourceConfigCommon = radioResourceConfigCommon_;
      ue_TimersAndConstants = ue_TimersAndConstants_;
      freqInfo = freqInfo_;
      mbsfn_SubframeConfigList = mbsfn_SubframeConfigList_;
      timeAlignmentTimerCommon = timeAlignmentTimerCommon_;
      lateNonCriticalExtension = lateNonCriticalExtension_;
      ssac_BarringForMMTEL_Voice_r9 = ssac_BarringForMMTEL_Voice_r9_;
      ssac_BarringForMMTEL_Video_r9 = ssac_BarringForMMTEL_Video_r9_;
      ac_BarringForCSFB_r10 = ac_BarringForCSFB_r10_;
      ac_BarringSkipForMMTELVoice_r12 = ac_BarringSkipForMMTELVoice_r12_;
      ac_BarringSkipForMMTELVideo_r12 = ac_BarringSkipForMMTELVideo_r12_;
      ac_BarringSkipForSMS_r12 = ac_BarringSkipForSMS_r12_;
      ac_BarringPerPLMN_List_r12 = ac_BarringPerPLMN_List_r12_;
      voiceServiceCauseIndication_r12 = voiceServiceCauseIndication_r12_;
      acdc_BarringForCommon_r13 = acdc_BarringForCommon_r13_;
      acdc_BarringPerPLMN_List_r13 = acdc_BarringPerPLMN_List_r13_;
      udt_RestrictingForCommon_r13 = udt_RestrictingForCommon_r13_;
      udt_RestrictingPerPLMN_List_r13 = udt_RestrictingPerPLMN_List_r13_;
      cIoT_EPS_OptimisationInfo_r13 = cIoT_EPS_OptimisationInfo_r13_;
      useFullResumeID_r13 = useFullResumeID_r13_;
      unicastFreqHoppingInd_r13 = unicastFreqHoppingInd_r13_;
      mbsfn_SubframeConfigList_v1430 = mbsfn_SubframeConfigList_v1430_;
      videoServiceCauseIndication_r14 = videoServiceCauseIndication_r14_;
      plmn_InfoList_r15 = plmn_InfoList_r15_;
      cp_EDT_r15 = cp_EDT_r15_;
      up_EDT_r15 = up_EDT_r15_;
      idleModeMeasurements_r15 = idleModeMeasurements_r15_;
      reducedCP_LatencyEnabled_r15 = reducedCP_LatencyEnabled_r15_;
      mbms_ROM_ServiceIndication_r15 = mbms_ROM_ServiceIndication_r15_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SystemInformationBlockType2 (
      RadioResourceConfigCommonSIB radioResourceConfigCommon_,
      UE_TimersAndConstants ue_TimersAndConstants_,
      SystemInformationBlockType2_freqInfo freqInfo_,
      TimeAlignmentTimer timeAlignmentTimerCommon_
   ) {
      super();
      radioResourceConfigCommon = radioResourceConfigCommon_;
      ue_TimersAndConstants = ue_TimersAndConstants_;
      freqInfo = freqInfo_;
      timeAlignmentTimerCommon = timeAlignmentTimerCommon_;
   }

   public void init () {
      ac_BarringInfo = null;
      radioResourceConfigCommon = null;
      ue_TimersAndConstants = null;
      freqInfo = null;
      mbsfn_SubframeConfigList = null;
      timeAlignmentTimerCommon = null;
      lateNonCriticalExtension = null;
      ssac_BarringForMMTEL_Voice_r9 = null;
      ssac_BarringForMMTEL_Video_r9 = null;
      ac_BarringForCSFB_r10 = null;
      ac_BarringSkipForMMTELVoice_r12 = null;
      ac_BarringSkipForMMTELVideo_r12 = null;
      ac_BarringSkipForSMS_r12 = null;
      ac_BarringPerPLMN_List_r12 = null;
      voiceServiceCauseIndication_r12 = null;
      acdc_BarringForCommon_r13 = null;
      acdc_BarringPerPLMN_List_r13 = null;
      udt_RestrictingForCommon_r13 = null;
      udt_RestrictingPerPLMN_List_r13 = null;
      cIoT_EPS_OptimisationInfo_r13 = null;
      useFullResumeID_r13 = null;
      unicastFreqHoppingInd_r13 = null;
      mbsfn_SubframeConfigList_v1430 = null;
      videoServiceCauseIndication_r14 = null;
      plmn_InfoList_r15 = null;
      cp_EDT_r15 = null;
      up_EDT_r15 = null;
      idleModeMeasurements_r15 = null;
      reducedCP_LatencyEnabled_r15 = null;
      mbms_ROM_ServiceIndication_r15 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 31; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return ac_BarringInfo;
         case 1: return radioResourceConfigCommon;
         case 2: return ue_TimersAndConstants;
         case 3: return freqInfo;
         case 4: return mbsfn_SubframeConfigList;
         case 5: return timeAlignmentTimerCommon;
         case 6: return lateNonCriticalExtension;
         case 7: return ssac_BarringForMMTEL_Voice_r9;
         case 8: return ssac_BarringForMMTEL_Video_r9;
         case 9: return ac_BarringForCSFB_r10;
         case 10: return ac_BarringSkipForMMTELVoice_r12;
         case 11: return ac_BarringSkipForMMTELVideo_r12;
         case 12: return ac_BarringSkipForSMS_r12;
         case 13: return ac_BarringPerPLMN_List_r12;
         case 14: return voiceServiceCauseIndication_r12;
         case 15: return acdc_BarringForCommon_r13;
         case 16: return acdc_BarringPerPLMN_List_r13;
         case 17: return udt_RestrictingForCommon_r13;
         case 18: return udt_RestrictingPerPLMN_List_r13;
         case 19: return cIoT_EPS_OptimisationInfo_r13;
         case 20: return useFullResumeID_r13;
         case 21: return unicastFreqHoppingInd_r13;
         case 22: return mbsfn_SubframeConfigList_v1430;
         case 23: return videoServiceCauseIndication_r14;
         case 24: return plmn_InfoList_r15;
         case 25: return cp_EDT_r15;
         case 26: return up_EDT_r15;
         case 27: return idleModeMeasurements_r15;
         case 28: return reducedCP_LatencyEnabled_r15;
         case 29: return mbms_ROM_ServiceIndication_r15;
         case 30: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "ac-BarringInfo";
         case 1: return "radioResourceConfigCommon";
         case 2: return "ue-TimersAndConstants";
         case 3: return "freqInfo";
         case 4: return "mbsfn-SubframeConfigList";
         case 5: return "timeAlignmentTimerCommon";
         case 6: return "lateNonCriticalExtension";
         case 7: return "ssac-BarringForMMTEL-Voice-r9";
         case 8: return "ssac-BarringForMMTEL-Video-r9";
         case 9: return "ac-BarringForCSFB-r10";
         case 10: return "ac-BarringSkipForMMTELVoice-r12";
         case 11: return "ac-BarringSkipForMMTELVideo-r12";
         case 12: return "ac-BarringSkipForSMS-r12";
         case 13: return "ac-BarringPerPLMN-List-r12";
         case 14: return "voiceServiceCauseIndication-r12";
         case 15: return "acdc-BarringForCommon-r13";
         case 16: return "acdc-BarringPerPLMN-List-r13";
         case 17: return "udt-RestrictingForCommon-r13";
         case 18: return "udt-RestrictingPerPLMN-List-r13";
         case 19: return "cIoT-EPS-OptimisationInfo-r13";
         case 20: return "useFullResumeID-r13";
         case 21: return "unicastFreqHoppingInd-r13";
         case 22: return "mbsfn-SubframeConfigList-v1430";
         case 23: return "videoServiceCauseIndication-r14";
         case 24: return "plmn-InfoList-r15";
         case 25: return "cp-EDT-r15";
         case 26: return "up-EDT-r15";
         case 27: return "idleModeMeasurements-r15";
         case 28: return "reducedCP-LatencyEnabled-r15";
         case 29: return "mbms-ROM-ServiceIndication-r15";
         case 30: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean ac_BarringInfoPresent = buffer.decodeBit ("ac_BarringInfoPresent");
      boolean mbsfn_SubframeConfigListPresent = buffer.decodeBit ("mbsfn_SubframeConfigListPresent");

      // decode ac_BarringInfo

      if (ac_BarringInfoPresent) {
         buffer.getContext().eventDispatcher.startElement("ac_BarringInfo", -1);

         ac_BarringInfo = new SystemInformationBlockType2_ac_BarringInfo();
         ac_BarringInfo.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ac_BarringInfo", -1);
      }
      else {
         ac_BarringInfo = null;
      }

      // decode radioResourceConfigCommon

      buffer.getContext().eventDispatcher.startElement("radioResourceConfigCommon", -1);

      radioResourceConfigCommon = new RadioResourceConfigCommonSIB();
      radioResourceConfigCommon.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("radioResourceConfigCommon", -1);

      // decode ue_TimersAndConstants

      buffer.getContext().eventDispatcher.startElement("ue_TimersAndConstants", -1);

      ue_TimersAndConstants = new UE_TimersAndConstants();
      ue_TimersAndConstants.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("ue_TimersAndConstants", -1);

      // decode freqInfo

      buffer.getContext().eventDispatcher.startElement("freqInfo", -1);

      freqInfo = new SystemInformationBlockType2_freqInfo();
      freqInfo.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("freqInfo", -1);

      // decode mbsfn_SubframeConfigList

      if (mbsfn_SubframeConfigListPresent) {
         buffer.getContext().eventDispatcher.startElement("mbsfn_SubframeConfigList", -1);

         mbsfn_SubframeConfigList = new MBSFN_SubframeConfigList();
         mbsfn_SubframeConfigList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("mbsfn_SubframeConfigList", -1);
      }
      else {
         mbsfn_SubframeConfigList = null;
      }

      // decode timeAlignmentTimerCommon

      buffer.getContext().eventDispatcher.startElement("timeAlignmentTimerCommon", -1);

      {
         int tval = TimeAlignmentTimer.decodeEnumValue (buffer);
         timeAlignmentTimerCommon = TimeAlignmentTimer.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("timeAlignmentTimerCommon", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("lateNonCriticalExtensionPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV4ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV5ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV6ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV7ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV8ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV9ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV10ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV11ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV12ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV13ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode lateNonCriticalExtension

         if (i < bitcnt && bitmap[i++]) {
            buffer.getContext().eventDispatcher.startElement("lateNonCriticalExtension", -1);

            long _curidx = buffer.getBitOffset();
            bitidx = buffer.decodeExtLength ();
            if (bitidx - _curidx >= 131088)  {
               throw new Asn1Exception ("PER fragmentation not enabled: add -perindef to decode");
            }

            /* decode contained type */
            Asn1OctetString lateNonCriticalExtension_outer = new Asn1OctetString();
            lateNonCriticalExtension_outer.decode (buffer);

            if (lateNonCriticalExtension_outer.value == null) {
               throw new Asn1Exception("contained type's complete encoding is empty");
            }

            Asn1PerDecodeBuffer savedBuffer = buffer;
            buffer = new Asn1PerDecodeBuffer (lateNonCriticalExtension_outer.value, buffer.isAligned());
            buffer.setEventHandlerList( savedBuffer );

            lateNonCriticalExtension = new SystemInformationBlockType2_v8h0_IEs();
            lateNonCriticalExtension.decode (buffer);

            buffer = savedBuffer;
            buffer.moveBitCursor (bitidx);

            buffer.getContext().eventDispatcher.endElement("lateNonCriticalExtension", -1);

         }
         else {
            lateNonCriticalExtension = null;
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean ssac_BarringForMMTEL_Voice_r9Present = buffer.decodeBit ("ssac_BarringForMMTEL_Voice_r9Present");

            boolean ssac_BarringForMMTEL_Video_r9Present = buffer.decodeBit ("ssac_BarringForMMTEL_Video_r9Present");

            // decode ssac_BarringForMMTEL_Voice_r9

            if (ssac_BarringForMMTEL_Voice_r9Present) {
               buffer.getContext().eventDispatcher.startElement("ssac_BarringForMMTEL_Voice_r9", -1);

               ssac_BarringForMMTEL_Voice_r9 = new AC_BarringConfig();
               ssac_BarringForMMTEL_Voice_r9.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("ssac_BarringForMMTEL_Voice_r9", -1);
            }
            else {
               ssac_BarringForMMTEL_Voice_r9 = null;
            }

            // decode ssac_BarringForMMTEL_Video_r9

            if (ssac_BarringForMMTEL_Video_r9Present) {
               buffer.getContext().eventDispatcher.startElement("ssac_BarringForMMTEL_Video_r9", -1);

               ssac_BarringForMMTEL_Video_r9 = new AC_BarringConfig();
               ssac_BarringForMMTEL_Video_r9.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("ssac_BarringForMMTEL_Video_r9", -1);
            }
            else {
               ssac_BarringForMMTEL_Video_r9 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV4ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean ac_BarringForCSFB_r10Present = buffer.decodeBit ("ac_BarringForCSFB_r10Present");

            // decode ac_BarringForCSFB_r10

            if (ac_BarringForCSFB_r10Present) {
               buffer.getContext().eventDispatcher.startElement("ac_BarringForCSFB_r10", -1);

               ac_BarringForCSFB_r10 = new AC_BarringConfig();
               ac_BarringForCSFB_r10.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("ac_BarringForCSFB_r10", -1);
            }
            else {
               ac_BarringForCSFB_r10 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV5ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean ac_BarringSkipForMMTELVoice_r12Present = buffer.decodeBit ("ac_BarringSkipForMMTELVoice_r12Present");

            boolean ac_BarringSkipForMMTELVideo_r12Present = buffer.decodeBit ("ac_BarringSkipForMMTELVideo_r12Present");

            boolean ac_BarringSkipForSMS_r12Present = buffer.decodeBit ("ac_BarringSkipForSMS_r12Present");

            boolean ac_BarringPerPLMN_List_r12Present = buffer.decodeBit ("ac_BarringPerPLMN_List_r12Present");

            // decode ac_BarringSkipForMMTELVoice_r12

            if (ac_BarringSkipForMMTELVoice_r12Present) {
               buffer.getContext().eventDispatcher.startElement("ac_BarringSkipForMMTELVoice_r12", -1);

               int tval = SystemInformationBlockType2_ac_BarringSkipForMMTELVoice_r12.decodeEnumValue (buffer);
               ac_BarringSkipForMMTELVoice_r12 = SystemInformationBlockType2_ac_BarringSkipForMMTELVoice_r12.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("ac_BarringSkipForMMTELVoice_r12", -1);
            }
            else {
               ac_BarringSkipForMMTELVoice_r12 = null;
            }

            // decode ac_BarringSkipForMMTELVideo_r12

            if (ac_BarringSkipForMMTELVideo_r12Present) {
               buffer.getContext().eventDispatcher.startElement("ac_BarringSkipForMMTELVideo_r12", -1);

               int tval = SystemInformationBlockType2_ac_BarringSkipForMMTELVideo_r12.decodeEnumValue (buffer);
               ac_BarringSkipForMMTELVideo_r12 = SystemInformationBlockType2_ac_BarringSkipForMMTELVideo_r12.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("ac_BarringSkipForMMTELVideo_r12", -1);
            }
            else {
               ac_BarringSkipForMMTELVideo_r12 = null;
            }

            // decode ac_BarringSkipForSMS_r12

            if (ac_BarringSkipForSMS_r12Present) {
               buffer.getContext().eventDispatcher.startElement("ac_BarringSkipForSMS_r12", -1);

               int tval = SystemInformationBlockType2_ac_BarringSkipForSMS_r12.decodeEnumValue (buffer);
               ac_BarringSkipForSMS_r12 = SystemInformationBlockType2_ac_BarringSkipForSMS_r12.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("ac_BarringSkipForSMS_r12", -1);
            }
            else {
               ac_BarringSkipForSMS_r12 = null;
            }

            // decode ac_BarringPerPLMN_List_r12

            if (ac_BarringPerPLMN_List_r12Present) {
               buffer.getContext().eventDispatcher.startElement("ac_BarringPerPLMN_List_r12", -1);

               ac_BarringPerPLMN_List_r12 = new AC_BarringPerPLMN_List_r12();
               ac_BarringPerPLMN_List_r12.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("ac_BarringPerPLMN_List_r12", -1);
            }
            else {
               ac_BarringPerPLMN_List_r12 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV6ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean voiceServiceCauseIndication_r12Present = buffer.decodeBit ("voiceServiceCauseIndication_r12Present");

            // decode voiceServiceCauseIndication_r12

            if (voiceServiceCauseIndication_r12Present) {
               buffer.getContext().eventDispatcher.startElement("voiceServiceCauseIndication_r12", -1);

               int tval = SystemInformationBlockType2_voiceServiceCauseIndication_r12.decodeEnumValue (buffer);
               voiceServiceCauseIndication_r12 = SystemInformationBlockType2_voiceServiceCauseIndication_r12.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("voiceServiceCauseIndication_r12", -1);
            }
            else {
               voiceServiceCauseIndication_r12 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV7ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean acdc_BarringForCommon_r13Present = buffer.decodeBit ("acdc_BarringForCommon_r13Present");

            boolean acdc_BarringPerPLMN_List_r13Present = buffer.decodeBit ("acdc_BarringPerPLMN_List_r13Present");

            // decode acdc_BarringForCommon_r13

            if (acdc_BarringForCommon_r13Present) {
               buffer.getContext().eventDispatcher.startElement("acdc_BarringForCommon_r13", -1);

               acdc_BarringForCommon_r13 = new ACDC_BarringForCommon_r13();
               acdc_BarringForCommon_r13.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("acdc_BarringForCommon_r13", -1);
            }
            else {
               acdc_BarringForCommon_r13 = null;
            }

            // decode acdc_BarringPerPLMN_List_r13

            if (acdc_BarringPerPLMN_List_r13Present) {
               buffer.getContext().eventDispatcher.startElement("acdc_BarringPerPLMN_List_r13", -1);

               acdc_BarringPerPLMN_List_r13 = new ACDC_BarringPerPLMN_List_r13();
               acdc_BarringPerPLMN_List_r13.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("acdc_BarringPerPLMN_List_r13", -1);
            }
            else {
               acdc_BarringPerPLMN_List_r13 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV8ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean udt_RestrictingForCommon_r13Present = buffer.decodeBit ("udt_RestrictingForCommon_r13Present");

            boolean udt_RestrictingPerPLMN_List_r13Present = buffer.decodeBit ("udt_RestrictingPerPLMN_List_r13Present");

            boolean cIoT_EPS_OptimisationInfo_r13Present = buffer.decodeBit ("cIoT_EPS_OptimisationInfo_r13Present");

            boolean useFullResumeID_r13Present = buffer.decodeBit ("useFullResumeID_r13Present");

            // decode udt_RestrictingForCommon_r13

            if (udt_RestrictingForCommon_r13Present) {
               buffer.getContext().eventDispatcher.startElement("udt_RestrictingForCommon_r13", -1);

               udt_RestrictingForCommon_r13 = new UDT_Restricting_r13();
               udt_RestrictingForCommon_r13.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("udt_RestrictingForCommon_r13", -1);
            }
            else {
               udt_RestrictingForCommon_r13 = null;
            }

            // decode udt_RestrictingPerPLMN_List_r13

            if (udt_RestrictingPerPLMN_List_r13Present) {
               buffer.getContext().eventDispatcher.startElement("udt_RestrictingPerPLMN_List_r13", -1);

               udt_RestrictingPerPLMN_List_r13 = new UDT_RestrictingPerPLMN_List_r13();
               udt_RestrictingPerPLMN_List_r13.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("udt_RestrictingPerPLMN_List_r13", -1);
            }
            else {
               udt_RestrictingPerPLMN_List_r13 = null;
            }

            // decode cIoT_EPS_OptimisationInfo_r13

            if (cIoT_EPS_OptimisationInfo_r13Present) {
               buffer.getContext().eventDispatcher.startElement("cIoT_EPS_OptimisationInfo_r13", -1);

               cIoT_EPS_OptimisationInfo_r13 = new CIOT_EPS_OptimisationInfo_r13();
               cIoT_EPS_OptimisationInfo_r13.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("cIoT_EPS_OptimisationInfo_r13", -1);
            }
            else {
               cIoT_EPS_OptimisationInfo_r13 = null;
            }

            // decode useFullResumeID_r13

            if (useFullResumeID_r13Present) {
               buffer.getContext().eventDispatcher.startElement("useFullResumeID_r13", -1);

               int tval = SystemInformationBlockType2_useFullResumeID_r13.decodeEnumValue (buffer);
               useFullResumeID_r13 = SystemInformationBlockType2_useFullResumeID_r13.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("useFullResumeID_r13", -1);
            }
            else {
               useFullResumeID_r13 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV9ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean unicastFreqHoppingInd_r13Present = buffer.decodeBit ("unicastFreqHoppingInd_r13Present");

            // decode unicastFreqHoppingInd_r13

            if (unicastFreqHoppingInd_r13Present) {
               buffer.getContext().eventDispatcher.startElement("unicastFreqHoppingInd_r13", -1);

               int tval = SystemInformationBlockType2_unicastFreqHoppingInd_r13.decodeEnumValue (buffer);
               unicastFreqHoppingInd_r13 = SystemInformationBlockType2_unicastFreqHoppingInd_r13.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("unicastFreqHoppingInd_r13", -1);
            }
            else {
               unicastFreqHoppingInd_r13 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV10ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean mbsfn_SubframeConfigList_v1430Present = buffer.decodeBit ("mbsfn_SubframeConfigList_v1430Present");

            boolean videoServiceCauseIndication_r14Present = buffer.decodeBit ("videoServiceCauseIndication_r14Present");

            // decode mbsfn_SubframeConfigList_v1430

            if (mbsfn_SubframeConfigList_v1430Present) {
               buffer.getContext().eventDispatcher.startElement("mbsfn_SubframeConfigList_v1430", -1);

               mbsfn_SubframeConfigList_v1430 = new MBSFN_SubframeConfigList_v1430();
               mbsfn_SubframeConfigList_v1430.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("mbsfn_SubframeConfigList_v1430", -1);
            }
            else {
               mbsfn_SubframeConfigList_v1430 = null;
            }

            // decode videoServiceCauseIndication_r14

            if (videoServiceCauseIndication_r14Present) {
               buffer.getContext().eventDispatcher.startElement("videoServiceCauseIndication_r14", -1);

               int tval = SystemInformationBlockType2_videoServiceCauseIndication_r14.decodeEnumValue (buffer);
               videoServiceCauseIndication_r14 = SystemInformationBlockType2_videoServiceCauseIndication_r14.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("videoServiceCauseIndication_r14", -1);
            }
            else {
               videoServiceCauseIndication_r14 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV11ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean plmn_InfoList_r15Present = buffer.decodeBit ("plmn_InfoList_r15Present");

            // decode plmn_InfoList_r15

            if (plmn_InfoList_r15Present) {
               buffer.getContext().eventDispatcher.startElement("plmn_InfoList_r15", -1);

               plmn_InfoList_r15 = new PLMN_InfoList_r15();
               plmn_InfoList_r15.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("plmn_InfoList_r15", -1);
            }
            else {
               plmn_InfoList_r15 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV12ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean cp_EDT_r15Present = buffer.decodeBit ("cp_EDT_r15Present");

            boolean up_EDT_r15Present = buffer.decodeBit ("up_EDT_r15Present");

            boolean idleModeMeasurements_r15Present = buffer.decodeBit ("idleModeMeasurements_r15Present");

            boolean reducedCP_LatencyEnabled_r15Present = buffer.decodeBit ("reducedCP_LatencyEnabled_r15Present");

            // decode cp_EDT_r15

            if (cp_EDT_r15Present) {
               buffer.getContext().eventDispatcher.startElement("cp_EDT_r15", -1);

               int tval = SystemInformationBlockType2_cp_EDT_r15.decodeEnumValue (buffer);
               cp_EDT_r15 = SystemInformationBlockType2_cp_EDT_r15.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("cp_EDT_r15", -1);
            }
            else {
               cp_EDT_r15 = null;
            }

            // decode up_EDT_r15

            if (up_EDT_r15Present) {
               buffer.getContext().eventDispatcher.startElement("up_EDT_r15", -1);

               int tval = SystemInformationBlockType2_up_EDT_r15.decodeEnumValue (buffer);
               up_EDT_r15 = SystemInformationBlockType2_up_EDT_r15.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("up_EDT_r15", -1);
            }
            else {
               up_EDT_r15 = null;
            }

            // decode idleModeMeasurements_r15

            if (idleModeMeasurements_r15Present) {
               buffer.getContext().eventDispatcher.startElement("idleModeMeasurements_r15", -1);

               int tval = SystemInformationBlockType2_idleModeMeasurements_r15.decodeEnumValue (buffer);
               idleModeMeasurements_r15 = SystemInformationBlockType2_idleModeMeasurements_r15.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("idleModeMeasurements_r15", -1);
            }
            else {
               idleModeMeasurements_r15 = null;
            }

            // decode reducedCP_LatencyEnabled_r15

            if (reducedCP_LatencyEnabled_r15Present) {
               buffer.getContext().eventDispatcher.startElement("reducedCP_LatencyEnabled_r15", -1);

               int tval = SystemInformationBlockType2_reducedCP_LatencyEnabled_r15.decodeEnumValue (buffer);
               reducedCP_LatencyEnabled_r15 = SystemInformationBlockType2_reducedCP_LatencyEnabled_r15.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("reducedCP_LatencyEnabled_r15", -1);
            }
            else {
               reducedCP_LatencyEnabled_r15 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV13ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean mbms_ROM_ServiceIndication_r15Present = buffer.decodeBit ("mbms_ROM_ServiceIndication_r15Present");

            // decode mbms_ROM_ServiceIndication_r15

            if (mbms_ROM_ServiceIndication_r15Present) {
               buffer.getContext().eventDispatcher.startElement("mbms_ROM_ServiceIndication_r15", -1);

               int tval = SystemInformationBlockType2_mbms_ROM_ServiceIndication_r15.decodeEnumValue (buffer);
               mbms_ROM_ServiceIndication_r15 = SystemInformationBlockType2_mbms_ROM_ServiceIndication_r15.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("mbms_ROM_ServiceIndication_r15", -1);
            }
            else {
               mbms_ROM_ServiceIndication_r15 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (ac_BarringInfo != null) ac_BarringInfo.print (_sb, "ac_BarringInfo", _level+1);
      if (radioResourceConfigCommon != null) radioResourceConfigCommon.print (_sb, "radioResourceConfigCommon", _level+1);
      if (ue_TimersAndConstants != null) ue_TimersAndConstants.print (_sb, "ue_TimersAndConstants", _level+1);
      if (freqInfo != null) freqInfo.print (_sb, "freqInfo", _level+1);
      if (mbsfn_SubframeConfigList != null) mbsfn_SubframeConfigList.print (_sb, "mbsfn_SubframeConfigList", _level+1);
      if (timeAlignmentTimerCommon != null) timeAlignmentTimerCommon.print (_sb, "timeAlignmentTimerCommon", _level+1);
      if (lateNonCriticalExtension != null) lateNonCriticalExtension.print (_sb, "lateNonCriticalExtension", _level+1);
      if (ssac_BarringForMMTEL_Voice_r9 != null) ssac_BarringForMMTEL_Voice_r9.print (_sb, "ssac_BarringForMMTEL_Voice_r9", _level+1);
      if (ssac_BarringForMMTEL_Video_r9 != null) ssac_BarringForMMTEL_Video_r9.print (_sb, "ssac_BarringForMMTEL_Video_r9", _level+1);
      if (ac_BarringForCSFB_r10 != null) ac_BarringForCSFB_r10.print (_sb, "ac_BarringForCSFB_r10", _level+1);
      if (ac_BarringSkipForMMTELVoice_r12 != null) ac_BarringSkipForMMTELVoice_r12.print (_sb, "ac_BarringSkipForMMTELVoice_r12", _level+1);
      if (ac_BarringSkipForMMTELVideo_r12 != null) ac_BarringSkipForMMTELVideo_r12.print (_sb, "ac_BarringSkipForMMTELVideo_r12", _level+1);
      if (ac_BarringSkipForSMS_r12 != null) ac_BarringSkipForSMS_r12.print (_sb, "ac_BarringSkipForSMS_r12", _level+1);
      if (ac_BarringPerPLMN_List_r12 != null) ac_BarringPerPLMN_List_r12.print (_sb, "ac_BarringPerPLMN_List_r12", _level+1);
      if (voiceServiceCauseIndication_r12 != null) voiceServiceCauseIndication_r12.print (_sb, "voiceServiceCauseIndication_r12", _level+1);
      if (acdc_BarringForCommon_r13 != null) acdc_BarringForCommon_r13.print (_sb, "acdc_BarringForCommon_r13", _level+1);
      if (acdc_BarringPerPLMN_List_r13 != null) acdc_BarringPerPLMN_List_r13.print (_sb, "acdc_BarringPerPLMN_List_r13", _level+1);
      if (udt_RestrictingForCommon_r13 != null) udt_RestrictingForCommon_r13.print (_sb, "udt_RestrictingForCommon_r13", _level+1);
      if (udt_RestrictingPerPLMN_List_r13 != null) udt_RestrictingPerPLMN_List_r13.print (_sb, "udt_RestrictingPerPLMN_List_r13", _level+1);
      if (cIoT_EPS_OptimisationInfo_r13 != null) cIoT_EPS_OptimisationInfo_r13.print (_sb, "cIoT_EPS_OptimisationInfo_r13", _level+1);
      if (useFullResumeID_r13 != null) useFullResumeID_r13.print (_sb, "useFullResumeID_r13", _level+1);
      if (unicastFreqHoppingInd_r13 != null) unicastFreqHoppingInd_r13.print (_sb, "unicastFreqHoppingInd_r13", _level+1);
      if (mbsfn_SubframeConfigList_v1430 != null) mbsfn_SubframeConfigList_v1430.print (_sb, "mbsfn_SubframeConfigList_v1430", _level+1);
      if (videoServiceCauseIndication_r14 != null) videoServiceCauseIndication_r14.print (_sb, "videoServiceCauseIndication_r14", _level+1);
      if (plmn_InfoList_r15 != null) plmn_InfoList_r15.print (_sb, "plmn_InfoList_r15", _level+1);
      if (cp_EDT_r15 != null) cp_EDT_r15.print (_sb, "cp_EDT_r15", _level+1);
      if (up_EDT_r15 != null) up_EDT_r15.print (_sb, "up_EDT_r15", _level+1);
      if (idleModeMeasurements_r15 != null) idleModeMeasurements_r15.print (_sb, "idleModeMeasurements_r15", _level+1);
      if (reducedCP_LatencyEnabled_r15 != null) reducedCP_LatencyEnabled_r15.print (_sb, "reducedCP_LatencyEnabled_r15", _level+1);
      if (mbms_ROM_ServiceIndication_r15 != null) mbms_ROM_ServiceIndication_r15.print (_sb, "mbms_ROM_ServiceIndication_r15", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
