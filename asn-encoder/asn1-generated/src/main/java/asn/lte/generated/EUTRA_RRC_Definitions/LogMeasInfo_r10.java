/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class LogMeasInfo_r10 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "LogMeasInfo-r10";
   }

   public LocationInfo_r10 locationInfo_r10;  // optional
   public Asn1Integer relativeTimeStamp_r10;
   public CellGlobalIdEUTRA servCellIdentity_r10;
   public LogMeasInfo_r10_measResultServCell_r10 measResultServCell_r10;
   public LogMeasInfo_r10_measResultNeighCells_r10 measResultNeighCells_r10;  // optional
   public boolean mV2ExtPresent;
   public MeasResultList2EUTRA_v9e0 measResultListEUTRA_v1090;  // optional
   public boolean mV3ExtPresent;
   public MeasResultListMBSFN_r12 measResultListMBSFN_r12;  // optional
   public RSRQ_Range_v1250 measResultServCell_v1250;  // optional
   public RSRQ_Type_r12 servCellRSRQ_Type_r12;  // optional
   public MeasResultList2EUTRA_v1250 measResultListEUTRA_v1250;  // optional
   public boolean mV4ExtPresent;
   public LogMeasInfo_r10_inDeviceCoexDetected_r13 inDeviceCoexDetected_r13 = null;  // optional
   public boolean mV5ExtPresent;
   public RSRP_Range_v1360 measResultServCell_v1360;  // optional
   public boolean mV6ExtPresent;
   public LogMeasResultListBT_r15 logMeasResultListBT_r15;  // optional
   public LogMeasResultListWLAN_r15 logMeasResultListWLAN_r15;  // optional
   public boolean mV7ExtPresent;
   public LogMeasInfo_r10_anyCellSelectionDetected_r15 anyCellSelectionDetected_r15 = null;  // optional
   public Asn1OpenExt extElem1;

   public LogMeasInfo_r10 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public LogMeasInfo_r10 (
      LocationInfo_r10 locationInfo_r10_,
      Asn1Integer relativeTimeStamp_r10_,
      CellGlobalIdEUTRA servCellIdentity_r10_,
      LogMeasInfo_r10_measResultServCell_r10 measResultServCell_r10_,
      LogMeasInfo_r10_measResultNeighCells_r10 measResultNeighCells_r10_,
      MeasResultList2EUTRA_v9e0 measResultListEUTRA_v1090_,
      MeasResultListMBSFN_r12 measResultListMBSFN_r12_,
      RSRQ_Range_v1250 measResultServCell_v1250_,
      RSRQ_Type_r12 servCellRSRQ_Type_r12_,
      MeasResultList2EUTRA_v1250 measResultListEUTRA_v1250_,
      LogMeasInfo_r10_inDeviceCoexDetected_r13 inDeviceCoexDetected_r13_,
      RSRP_Range_v1360 measResultServCell_v1360_,
      LogMeasResultListBT_r15 logMeasResultListBT_r15_,
      LogMeasResultListWLAN_r15 logMeasResultListWLAN_r15_,
      LogMeasInfo_r10_anyCellSelectionDetected_r15 anyCellSelectionDetected_r15_
   ) {
      super();
      locationInfo_r10 = locationInfo_r10_;
      relativeTimeStamp_r10 = relativeTimeStamp_r10_;
      servCellIdentity_r10 = servCellIdentity_r10_;
      measResultServCell_r10 = measResultServCell_r10_;
      measResultNeighCells_r10 = measResultNeighCells_r10_;
      measResultListEUTRA_v1090 = measResultListEUTRA_v1090_;
      measResultListMBSFN_r12 = measResultListMBSFN_r12_;
      measResultServCell_v1250 = measResultServCell_v1250_;
      servCellRSRQ_Type_r12 = servCellRSRQ_Type_r12_;
      measResultListEUTRA_v1250 = measResultListEUTRA_v1250_;
      inDeviceCoexDetected_r13 = inDeviceCoexDetected_r13_;
      measResultServCell_v1360 = measResultServCell_v1360_;
      logMeasResultListBT_r15 = logMeasResultListBT_r15_;
      logMeasResultListWLAN_r15 = logMeasResultListWLAN_r15_;
      anyCellSelectionDetected_r15 = anyCellSelectionDetected_r15_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public LogMeasInfo_r10 (
      Asn1Integer relativeTimeStamp_r10_,
      CellGlobalIdEUTRA servCellIdentity_r10_,
      LogMeasInfo_r10_measResultServCell_r10 measResultServCell_r10_
   ) {
      super();
      relativeTimeStamp_r10 = relativeTimeStamp_r10_;
      servCellIdentity_r10 = servCellIdentity_r10_;
      measResultServCell_r10 = measResultServCell_r10_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public LogMeasInfo_r10 (LocationInfo_r10 locationInfo_r10_,
      long relativeTimeStamp_r10_,
      CellGlobalIdEUTRA servCellIdentity_r10_,
      LogMeasInfo_r10_measResultServCell_r10 measResultServCell_r10_,
      LogMeasInfo_r10_measResultNeighCells_r10 measResultNeighCells_r10_,
      MeasResultList2EUTRA_v9e0 measResultListEUTRA_v1090_,
      MeasResultListMBSFN_r12 measResultListMBSFN_r12_,
      long measResultServCell_v1250_,
      RSRQ_Type_r12 servCellRSRQ_Type_r12_,
      MeasResultList2EUTRA_v1250 measResultListEUTRA_v1250_,
      LogMeasInfo_r10_inDeviceCoexDetected_r13 inDeviceCoexDetected_r13_,
      long measResultServCell_v1360_,
      LogMeasResultListBT_r15 logMeasResultListBT_r15_,
      LogMeasResultListWLAN_r15 logMeasResultListWLAN_r15_,
      LogMeasInfo_r10_anyCellSelectionDetected_r15 anyCellSelectionDetected_r15_
   ) {
      super();
      locationInfo_r10 = locationInfo_r10_;
      relativeTimeStamp_r10 = new Asn1Integer (relativeTimeStamp_r10_);
      servCellIdentity_r10 = servCellIdentity_r10_;
      measResultServCell_r10 = measResultServCell_r10_;
      measResultNeighCells_r10 = measResultNeighCells_r10_;
      measResultListEUTRA_v1090 = measResultListEUTRA_v1090_;
      measResultListMBSFN_r12 = measResultListMBSFN_r12_;
      measResultServCell_v1250 = new RSRQ_Range_v1250 (measResultServCell_v1250_);
      servCellRSRQ_Type_r12 = servCellRSRQ_Type_r12_;
      measResultListEUTRA_v1250 = measResultListEUTRA_v1250_;
      inDeviceCoexDetected_r13 = inDeviceCoexDetected_r13_;
      measResultServCell_v1360 = new RSRP_Range_v1360 (measResultServCell_v1360_);
      logMeasResultListBT_r15 = logMeasResultListBT_r15_;
      logMeasResultListWLAN_r15 = logMeasResultListWLAN_r15_;
      anyCellSelectionDetected_r15 = anyCellSelectionDetected_r15_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public LogMeasInfo_r10 (
      long relativeTimeStamp_r10_,
      CellGlobalIdEUTRA servCellIdentity_r10_,
      LogMeasInfo_r10_measResultServCell_r10 measResultServCell_r10_
   ) {
      super();
      relativeTimeStamp_r10 = new Asn1Integer (relativeTimeStamp_r10_);
      servCellIdentity_r10 = servCellIdentity_r10_;
      measResultServCell_r10 = measResultServCell_r10_;
   }

   public void init () {
      locationInfo_r10 = null;
      relativeTimeStamp_r10 = null;
      servCellIdentity_r10 = null;
      measResultServCell_r10 = null;
      measResultNeighCells_r10 = null;
      measResultListEUTRA_v1090 = null;
      measResultListMBSFN_r12 = null;
      measResultServCell_v1250 = null;
      servCellRSRQ_Type_r12 = null;
      measResultListEUTRA_v1250 = null;
      inDeviceCoexDetected_r13 = null;
      measResultServCell_v1360 = null;
      logMeasResultListBT_r15 = null;
      logMeasResultListWLAN_r15 = null;
      anyCellSelectionDetected_r15 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 16; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return locationInfo_r10;
         case 1: return relativeTimeStamp_r10;
         case 2: return servCellIdentity_r10;
         case 3: return measResultServCell_r10;
         case 4: return measResultNeighCells_r10;
         case 5: return measResultListEUTRA_v1090;
         case 6: return measResultListMBSFN_r12;
         case 7: return measResultServCell_v1250;
         case 8: return servCellRSRQ_Type_r12;
         case 9: return measResultListEUTRA_v1250;
         case 10: return inDeviceCoexDetected_r13;
         case 11: return measResultServCell_v1360;
         case 12: return logMeasResultListBT_r15;
         case 13: return logMeasResultListWLAN_r15;
         case 14: return anyCellSelectionDetected_r15;
         case 15: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "locationInfo-r10";
         case 1: return "relativeTimeStamp-r10";
         case 2: return "servCellIdentity-r10";
         case 3: return "measResultServCell-r10";
         case 4: return "measResultNeighCells-r10";
         case 5: return "measResultListEUTRA-v1090";
         case 6: return "measResultListMBSFN-r12";
         case 7: return "measResultServCell-v1250";
         case 8: return "servCellRSRQ-Type-r12";
         case 9: return "measResultListEUTRA-v1250";
         case 10: return "inDeviceCoexDetected-r13";
         case 11: return "measResultServCell-v1360";
         case 12: return "logMeasResultListBT-r15";
         case 13: return "logMeasResultListWLAN-r15";
         case 14: return "anyCellSelectionDetected-r15";
         case 15: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean locationInfo_r10Present = buffer.decodeBit ("locationInfo_r10Present");
      boolean measResultNeighCells_r10Present = buffer.decodeBit ("measResultNeighCells_r10Present");

      // decode locationInfo_r10

      if (locationInfo_r10Present) {
         buffer.getContext().eventDispatcher.startElement("locationInfo_r10", -1);

         locationInfo_r10 = new LocationInfo_r10();
         locationInfo_r10.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("locationInfo_r10", -1);
      }
      else {
         locationInfo_r10 = null;
      }

      // decode relativeTimeStamp_r10

      buffer.getContext().eventDispatcher.startElement("relativeTimeStamp_r10", -1);

      relativeTimeStamp_r10 = new Asn1Integer();
      relativeTimeStamp_r10.decode (buffer, 0, 7200);

      buffer.invokeCharacters(relativeTimeStamp_r10.toString());
      buffer.getContext().eventDispatcher.endElement("relativeTimeStamp_r10", -1);

      // decode servCellIdentity_r10

      buffer.getContext().eventDispatcher.startElement("servCellIdentity_r10", -1);

      servCellIdentity_r10 = new CellGlobalIdEUTRA();
      servCellIdentity_r10.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("servCellIdentity_r10", -1);

      // decode measResultServCell_r10

      buffer.getContext().eventDispatcher.startElement("measResultServCell_r10", -1);

      measResultServCell_r10 = new LogMeasInfo_r10_measResultServCell_r10();
      measResultServCell_r10.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("measResultServCell_r10", -1);

      // decode measResultNeighCells_r10

      if (measResultNeighCells_r10Present) {
         buffer.getContext().eventDispatcher.startElement("measResultNeighCells_r10", -1);

         measResultNeighCells_r10 = new LogMeasInfo_r10_measResultNeighCells_r10();
         measResultNeighCells_r10.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("measResultNeighCells_r10", -1);
      }
      else {
         measResultNeighCells_r10 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV4ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV5ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV6ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV7ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean measResultListEUTRA_v1090Present = buffer.decodeBit ("measResultListEUTRA_v1090Present");

            // decode measResultListEUTRA_v1090

            if (measResultListEUTRA_v1090Present) {
               buffer.getContext().eventDispatcher.startElement("measResultListEUTRA_v1090", -1);

               measResultListEUTRA_v1090 = new MeasResultList2EUTRA_v9e0();
               measResultListEUTRA_v1090.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("measResultListEUTRA_v1090", -1);
            }
            else {
               measResultListEUTRA_v1090 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean measResultListMBSFN_r12Present = buffer.decodeBit ("measResultListMBSFN_r12Present");

            boolean measResultServCell_v1250Present = buffer.decodeBit ("measResultServCell_v1250Present");

            boolean servCellRSRQ_Type_r12Present = buffer.decodeBit ("servCellRSRQ_Type_r12Present");

            boolean measResultListEUTRA_v1250Present = buffer.decodeBit ("measResultListEUTRA_v1250Present");

            // decode measResultListMBSFN_r12

            if (measResultListMBSFN_r12Present) {
               buffer.getContext().eventDispatcher.startElement("measResultListMBSFN_r12", -1);

               measResultListMBSFN_r12 = new MeasResultListMBSFN_r12();
               measResultListMBSFN_r12.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("measResultListMBSFN_r12", -1);
            }
            else {
               measResultListMBSFN_r12 = null;
            }

            // decode measResultServCell_v1250

            if (measResultServCell_v1250Present) {
               buffer.getContext().eventDispatcher.startElement("measResultServCell_v1250", -1);

               measResultServCell_v1250 = new RSRQ_Range_v1250();
               measResultServCell_v1250.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("measResultServCell_v1250", -1);
            }
            else {
               measResultServCell_v1250 = null;
            }

            // decode servCellRSRQ_Type_r12

            if (servCellRSRQ_Type_r12Present) {
               buffer.getContext().eventDispatcher.startElement("servCellRSRQ_Type_r12", -1);

               servCellRSRQ_Type_r12 = new RSRQ_Type_r12();
               servCellRSRQ_Type_r12.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("servCellRSRQ_Type_r12", -1);
            }
            else {
               servCellRSRQ_Type_r12 = null;
            }

            // decode measResultListEUTRA_v1250

            if (measResultListEUTRA_v1250Present) {
               buffer.getContext().eventDispatcher.startElement("measResultListEUTRA_v1250", -1);

               measResultListEUTRA_v1250 = new MeasResultList2EUTRA_v1250();
               measResultListEUTRA_v1250.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("measResultListEUTRA_v1250", -1);
            }
            else {
               measResultListEUTRA_v1250 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV4ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean inDeviceCoexDetected_r13Present = buffer.decodeBit ("inDeviceCoexDetected_r13Present");

            // decode inDeviceCoexDetected_r13

            if (inDeviceCoexDetected_r13Present) {
               buffer.getContext().eventDispatcher.startElement("inDeviceCoexDetected_r13", -1);

               int tval = LogMeasInfo_r10_inDeviceCoexDetected_r13.decodeEnumValue (buffer);
               inDeviceCoexDetected_r13 = LogMeasInfo_r10_inDeviceCoexDetected_r13.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("inDeviceCoexDetected_r13", -1);
            }
            else {
               inDeviceCoexDetected_r13 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV5ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean measResultServCell_v1360Present = buffer.decodeBit ("measResultServCell_v1360Present");

            // decode measResultServCell_v1360

            if (measResultServCell_v1360Present) {
               buffer.getContext().eventDispatcher.startElement("measResultServCell_v1360", -1);

               measResultServCell_v1360 = new RSRP_Range_v1360();
               measResultServCell_v1360.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("measResultServCell_v1360", -1);
            }
            else {
               measResultServCell_v1360 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV6ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean logMeasResultListBT_r15Present = buffer.decodeBit ("logMeasResultListBT_r15Present");

            boolean logMeasResultListWLAN_r15Present = buffer.decodeBit ("logMeasResultListWLAN_r15Present");

            // decode logMeasResultListBT_r15

            if (logMeasResultListBT_r15Present) {
               buffer.getContext().eventDispatcher.startElement("logMeasResultListBT_r15", -1);

               logMeasResultListBT_r15 = new LogMeasResultListBT_r15();
               logMeasResultListBT_r15.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("logMeasResultListBT_r15", -1);
            }
            else {
               logMeasResultListBT_r15 = null;
            }

            // decode logMeasResultListWLAN_r15

            if (logMeasResultListWLAN_r15Present) {
               buffer.getContext().eventDispatcher.startElement("logMeasResultListWLAN_r15", -1);

               logMeasResultListWLAN_r15 = new LogMeasResultListWLAN_r15();
               logMeasResultListWLAN_r15.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("logMeasResultListWLAN_r15", -1);
            }
            else {
               logMeasResultListWLAN_r15 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV7ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean anyCellSelectionDetected_r15Present = buffer.decodeBit ("anyCellSelectionDetected_r15Present");

            // decode anyCellSelectionDetected_r15

            if (anyCellSelectionDetected_r15Present) {
               buffer.getContext().eventDispatcher.startElement("anyCellSelectionDetected_r15", -1);

               int tval = LogMeasInfo_r10_anyCellSelectionDetected_r15.decodeEnumValue (buffer);
               anyCellSelectionDetected_r15 = LogMeasInfo_r10_anyCellSelectionDetected_r15.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("anyCellSelectionDetected_r15", -1);
            }
            else {
               anyCellSelectionDetected_r15 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (locationInfo_r10 != null) locationInfo_r10.print (_sb, "locationInfo_r10", _level+1);
      if (relativeTimeStamp_r10 != null) relativeTimeStamp_r10.print (_sb, "relativeTimeStamp_r10", _level+1);
      if (servCellIdentity_r10 != null) servCellIdentity_r10.print (_sb, "servCellIdentity_r10", _level+1);
      if (measResultServCell_r10 != null) measResultServCell_r10.print (_sb, "measResultServCell_r10", _level+1);
      if (measResultNeighCells_r10 != null) measResultNeighCells_r10.print (_sb, "measResultNeighCells_r10", _level+1);
      if (measResultListEUTRA_v1090 != null) measResultListEUTRA_v1090.print (_sb, "measResultListEUTRA_v1090", _level+1);
      if (measResultListMBSFN_r12 != null) measResultListMBSFN_r12.print (_sb, "measResultListMBSFN_r12", _level+1);
      if (measResultServCell_v1250 != null) measResultServCell_v1250.print (_sb, "measResultServCell_v1250", _level+1);
      if (servCellRSRQ_Type_r12 != null) servCellRSRQ_Type_r12.print (_sb, "servCellRSRQ_Type_r12", _level+1);
      if (measResultListEUTRA_v1250 != null) measResultListEUTRA_v1250.print (_sb, "measResultListEUTRA_v1250", _level+1);
      if (inDeviceCoexDetected_r13 != null) inDeviceCoexDetected_r13.print (_sb, "inDeviceCoexDetected_r13", _level+1);
      if (measResultServCell_v1360 != null) measResultServCell_v1360.print (_sb, "measResultServCell_v1360", _level+1);
      if (logMeasResultListBT_r15 != null) logMeasResultListBT_r15.print (_sb, "logMeasResultListBT_r15", _level+1);
      if (logMeasResultListWLAN_r15 != null) logMeasResultListWLAN_r15.print (_sb, "logMeasResultListWLAN_r15", _level+1);
      if (anyCellSelectionDetected_r15 != null) anyCellSelectionDetected_r15.print (_sb, "anyCellSelectionDetected_r15", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
