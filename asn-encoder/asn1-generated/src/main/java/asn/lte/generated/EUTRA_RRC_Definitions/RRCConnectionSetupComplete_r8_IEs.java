/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class RRCConnectionSetupComplete_r8_IEs extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "RRCConnectionSetupComplete-r8-IEs";
   }

   public Asn1Integer selectedPLMN_Identity;
   public RegisteredMME registeredMME;  // optional
   public DedicatedInfoNAS dedicatedInfoNAS;
   public RRCConnectionSetupComplete_v8a0_IEs nonCriticalExtension;  // optional

   public RRCConnectionSetupComplete_r8_IEs () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public RRCConnectionSetupComplete_r8_IEs (
      Asn1Integer selectedPLMN_Identity_,
      RegisteredMME registeredMME_,
      DedicatedInfoNAS dedicatedInfoNAS_,
      RRCConnectionSetupComplete_v8a0_IEs nonCriticalExtension_
   ) {
      super();
      selectedPLMN_Identity = selectedPLMN_Identity_;
      registeredMME = registeredMME_;
      dedicatedInfoNAS = dedicatedInfoNAS_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public RRCConnectionSetupComplete_r8_IEs (
      Asn1Integer selectedPLMN_Identity_,
      DedicatedInfoNAS dedicatedInfoNAS_
   ) {
      super();
      selectedPLMN_Identity = selectedPLMN_Identity_;
      dedicatedInfoNAS = dedicatedInfoNAS_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public RRCConnectionSetupComplete_r8_IEs (long selectedPLMN_Identity_,
      RegisteredMME registeredMME_,
      byte[] dedicatedInfoNAS_,
      RRCConnectionSetupComplete_v8a0_IEs nonCriticalExtension_
   ) {
      super();
      selectedPLMN_Identity = new Asn1Integer (selectedPLMN_Identity_);
      registeredMME = registeredMME_;
      dedicatedInfoNAS = new DedicatedInfoNAS (dedicatedInfoNAS_);
      nonCriticalExtension = nonCriticalExtension_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public RRCConnectionSetupComplete_r8_IEs (
      long selectedPLMN_Identity_,
      byte[] dedicatedInfoNAS_
   ) {
      super();
      selectedPLMN_Identity = new Asn1Integer (selectedPLMN_Identity_);
      dedicatedInfoNAS = new DedicatedInfoNAS (dedicatedInfoNAS_);
   }

   public void init () {
      selectedPLMN_Identity = null;
      registeredMME = null;
      dedicatedInfoNAS = null;
      nonCriticalExtension = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return selectedPLMN_Identity;
         case 1: return registeredMME;
         case 2: return dedicatedInfoNAS;
         case 3: return nonCriticalExtension;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "selectedPLMN-Identity";
         case 1: return "registeredMME";
         case 2: return "dedicatedInfoNAS";
         case 3: return "nonCriticalExtension";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean registeredMMEPresent = buffer.decodeBit ("registeredMMEPresent");
      boolean nonCriticalExtensionPresent = buffer.decodeBit ("nonCriticalExtensionPresent");

      // decode selectedPLMN_Identity

      buffer.getContext().eventDispatcher.startElement("selectedPLMN_Identity", -1);

      selectedPLMN_Identity = new Asn1Integer();
      selectedPLMN_Identity.decode (buffer, 1, 6);

      buffer.invokeCharacters(selectedPLMN_Identity.toString());
      buffer.getContext().eventDispatcher.endElement("selectedPLMN_Identity", -1);

      // decode registeredMME

      if (registeredMMEPresent) {
         buffer.getContext().eventDispatcher.startElement("registeredMME", -1);

         registeredMME = new RegisteredMME();
         registeredMME.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("registeredMME", -1);
      }
      else {
         registeredMME = null;
      }

      // decode dedicatedInfoNAS

      buffer.getContext().eventDispatcher.startElement("dedicatedInfoNAS", -1);

      dedicatedInfoNAS = new DedicatedInfoNAS();
      dedicatedInfoNAS.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("dedicatedInfoNAS", -1);

      // decode nonCriticalExtension

      if (nonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension = new RRCConnectionSetupComplete_v8a0_IEs();
         nonCriticalExtension.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }
      else {
         nonCriticalExtension = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (selectedPLMN_Identity != null) selectedPLMN_Identity.print (_sb, "selectedPLMN_Identity", _level+1);
      if (registeredMME != null) registeredMME.print (_sb, "registeredMME", _level+1);
      if (dedicatedInfoNAS != null) dedicatedInfoNAS.print (_sb, "dedicatedInfoNAS", _level+1);
      if (nonCriticalExtension != null) nonCriticalExtension.print (_sb, "nonCriticalExtension", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
