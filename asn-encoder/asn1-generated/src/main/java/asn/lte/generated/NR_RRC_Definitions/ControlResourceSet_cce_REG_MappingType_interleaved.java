/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class ControlResourceSet_cce_REG_MappingType_interleaved extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public ControlResourceSet_cce_REG_MappingType_interleaved_reg_BundleSize reg_BundleSize = null;
   public ControlResourceSet_cce_REG_MappingType_interleaved_interleaverSize interleaverSize = null;
   public Asn1Integer shiftIndex;  // optional

   public ControlResourceSet_cce_REG_MappingType_interleaved () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ControlResourceSet_cce_REG_MappingType_interleaved (
      ControlResourceSet_cce_REG_MappingType_interleaved_reg_BundleSize reg_BundleSize_,
      ControlResourceSet_cce_REG_MappingType_interleaved_interleaverSize interleaverSize_,
      Asn1Integer shiftIndex_
   ) {
      super();
      reg_BundleSize = reg_BundleSize_;
      interleaverSize = interleaverSize_;
      shiftIndex = shiftIndex_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public ControlResourceSet_cce_REG_MappingType_interleaved (
      ControlResourceSet_cce_REG_MappingType_interleaved_reg_BundleSize reg_BundleSize_,
      ControlResourceSet_cce_REG_MappingType_interleaved_interleaverSize interleaverSize_
   ) {
      super();
      reg_BundleSize = reg_BundleSize_;
      interleaverSize = interleaverSize_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public ControlResourceSet_cce_REG_MappingType_interleaved (ControlResourceSet_cce_REG_MappingType_interleaved_reg_BundleSize reg_BundleSize_,
      ControlResourceSet_cce_REG_MappingType_interleaved_interleaverSize interleaverSize_,
      long shiftIndex_
   ) {
      super();
      reg_BundleSize = reg_BundleSize_;
      interleaverSize = interleaverSize_;
      shiftIndex = new Asn1Integer (shiftIndex_);
   }

   public void init () {
      reg_BundleSize = null;
      interleaverSize = null;
      shiftIndex = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return reg_BundleSize;
         case 1: return interleaverSize;
         case 2: return shiftIndex;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "reg-BundleSize";
         case 1: return "interleaverSize";
         case 2: return "shiftIndex";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean shiftIndexPresent = buffer.decodeBit ("shiftIndexPresent");

      // decode reg_BundleSize

      buffer.getContext().eventDispatcher.startElement("reg_BundleSize", -1);

      {
         int tval = ControlResourceSet_cce_REG_MappingType_interleaved_reg_BundleSize.decodeEnumValue (buffer);
         reg_BundleSize = ControlResourceSet_cce_REG_MappingType_interleaved_reg_BundleSize.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("reg_BundleSize", -1);

      // decode interleaverSize

      buffer.getContext().eventDispatcher.startElement("interleaverSize", -1);

      {
         int tval = ControlResourceSet_cce_REG_MappingType_interleaved_interleaverSize.decodeEnumValue (buffer);
         interleaverSize = ControlResourceSet_cce_REG_MappingType_interleaved_interleaverSize.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("interleaverSize", -1);

      // decode shiftIndex

      if (shiftIndexPresent) {
         buffer.getContext().eventDispatcher.startElement("shiftIndex", -1);

         shiftIndex = new Asn1Integer();
         shiftIndex.decode (buffer, 0, 274);

         buffer.invokeCharacters(shiftIndex.toString());
         buffer.getContext().eventDispatcher.endElement("shiftIndex", -1);
      }
      else {
         shiftIndex = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (reg_BundleSize != null) reg_BundleSize.print (_sb, "reg_BundleSize", _level+1);
      if (interleaverSize != null) interleaverSize.print (_sb, "interleaverSize", _level+1);
      if (shiftIndex != null) shiftIndex.print (_sb, "shiftIndex", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
