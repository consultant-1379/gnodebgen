/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class UplinkPowerControlDedicated extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "UplinkPowerControlDedicated";
   }

   public Asn1Integer p0_UE_PUSCH;
   public UplinkPowerControlDedicated_deltaMCS_Enabled deltaMCS_Enabled = null;
   public Asn1Boolean accumulationEnabled;
   public Asn1Integer p0_UE_PUCCH;
   public Asn1Integer pSRS_Offset;
   public FilterCoefficient filterCoefficient = null;  // default = FilterCoefficient.fc4()

   public UplinkPowerControlDedicated () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public UplinkPowerControlDedicated (
      Asn1Integer p0_UE_PUSCH_,
      UplinkPowerControlDedicated_deltaMCS_Enabled deltaMCS_Enabled_,
      Asn1Boolean accumulationEnabled_,
      Asn1Integer p0_UE_PUCCH_,
      Asn1Integer pSRS_Offset_,
      FilterCoefficient filterCoefficient_
   ) {
      super();
      p0_UE_PUSCH = p0_UE_PUSCH_;
      deltaMCS_Enabled = deltaMCS_Enabled_;
      accumulationEnabled = accumulationEnabled_;
      p0_UE_PUCCH = p0_UE_PUCCH_;
      pSRS_Offset = pSRS_Offset_;
      filterCoefficient = filterCoefficient_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public UplinkPowerControlDedicated (
      Asn1Integer p0_UE_PUSCH_,
      UplinkPowerControlDedicated_deltaMCS_Enabled deltaMCS_Enabled_,
      Asn1Boolean accumulationEnabled_,
      Asn1Integer p0_UE_PUCCH_,
      Asn1Integer pSRS_Offset_
   ) {
      super();
      p0_UE_PUSCH = p0_UE_PUSCH_;
      deltaMCS_Enabled = deltaMCS_Enabled_;
      accumulationEnabled = accumulationEnabled_;
      p0_UE_PUCCH = p0_UE_PUCCH_;
      pSRS_Offset = pSRS_Offset_;
      filterCoefficient = FilterCoefficient.fc4();
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public UplinkPowerControlDedicated (long p0_UE_PUSCH_,
      UplinkPowerControlDedicated_deltaMCS_Enabled deltaMCS_Enabled_,
      boolean accumulationEnabled_,
      long p0_UE_PUCCH_,
      long pSRS_Offset_,
      FilterCoefficient filterCoefficient_
   ) {
      super();
      p0_UE_PUSCH = new Asn1Integer (p0_UE_PUSCH_);
      deltaMCS_Enabled = deltaMCS_Enabled_;
      accumulationEnabled = new Asn1Boolean (accumulationEnabled_);
      p0_UE_PUCCH = new Asn1Integer (p0_UE_PUCCH_);
      pSRS_Offset = new Asn1Integer (pSRS_Offset_);
      filterCoefficient = filterCoefficient_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public UplinkPowerControlDedicated (
      long p0_UE_PUSCH_,
      UplinkPowerControlDedicated_deltaMCS_Enabled deltaMCS_Enabled_,
      boolean accumulationEnabled_,
      long p0_UE_PUCCH_,
      long pSRS_Offset_
   ) {
      super();
      p0_UE_PUSCH = new Asn1Integer (p0_UE_PUSCH_);
      deltaMCS_Enabled = deltaMCS_Enabled_;
      accumulationEnabled = new Asn1Boolean (accumulationEnabled_);
      p0_UE_PUCCH = new Asn1Integer (p0_UE_PUCCH_);
      pSRS_Offset = new Asn1Integer (pSRS_Offset_);
      filterCoefficient = FilterCoefficient.fc4();
   }

   public void init () {
      p0_UE_PUSCH = null;
      deltaMCS_Enabled = null;
      accumulationEnabled = null;
      p0_UE_PUCCH = null;
      pSRS_Offset = null;
      filterCoefficient = FilterCoefficient.fc4();
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return p0_UE_PUSCH;
         case 1: return deltaMCS_Enabled;
         case 2: return accumulationEnabled;
         case 3: return p0_UE_PUCCH;
         case 4: return pSRS_Offset;
         case 5: return filterCoefficient;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "p0-UE-PUSCH";
         case 1: return "deltaMCS-Enabled";
         case 2: return "accumulationEnabled";
         case 3: return "p0-UE-PUCCH";
         case 4: return "pSRS-Offset";
         case 5: return "filterCoefficient";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean filterCoefficientPresent = buffer.decodeBit ("filterCoefficientPresent");

      // decode p0_UE_PUSCH

      buffer.getContext().eventDispatcher.startElement("p0_UE_PUSCH", -1);

      p0_UE_PUSCH = new Asn1Integer();
      p0_UE_PUSCH.decode (buffer, -8, 7);

      buffer.invokeCharacters(p0_UE_PUSCH.toString());
      buffer.getContext().eventDispatcher.endElement("p0_UE_PUSCH", -1);

      // decode deltaMCS_Enabled

      buffer.getContext().eventDispatcher.startElement("deltaMCS_Enabled", -1);

      {
         int tval = UplinkPowerControlDedicated_deltaMCS_Enabled.decodeEnumValue (buffer);
         deltaMCS_Enabled = UplinkPowerControlDedicated_deltaMCS_Enabled.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("deltaMCS_Enabled", -1);

      // decode accumulationEnabled

      buffer.getContext().eventDispatcher.startElement("accumulationEnabled", -1);

      accumulationEnabled = new Asn1Boolean();
      accumulationEnabled.decode (buffer);

      buffer.invokeCharacters(accumulationEnabled.toString());
      buffer.getContext().eventDispatcher.endElement("accumulationEnabled", -1);

      // decode p0_UE_PUCCH

      buffer.getContext().eventDispatcher.startElement("p0_UE_PUCCH", -1);

      p0_UE_PUCCH = new Asn1Integer();
      p0_UE_PUCCH.decode (buffer, -8, 7);

      buffer.invokeCharacters(p0_UE_PUCCH.toString());
      buffer.getContext().eventDispatcher.endElement("p0_UE_PUCCH", -1);

      // decode pSRS_Offset

      buffer.getContext().eventDispatcher.startElement("pSRS_Offset", -1);

      pSRS_Offset = new Asn1Integer();
      pSRS_Offset.decode (buffer, 0, 15);

      buffer.invokeCharacters(pSRS_Offset.toString());
      buffer.getContext().eventDispatcher.endElement("pSRS_Offset", -1);

      // decode filterCoefficient

      if (filterCoefficientPresent) {
         buffer.getContext().eventDispatcher.startElement("filterCoefficient", -1);

         int tval = FilterCoefficient.decodeEnumValue (buffer);
         filterCoefficient = FilterCoefficient.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("filterCoefficient", -1);
      }
      else {
         filterCoefficient = FilterCoefficient.fc4();
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (p0_UE_PUSCH != null) p0_UE_PUSCH.print (_sb, "p0_UE_PUSCH", _level+1);
      if (deltaMCS_Enabled != null) deltaMCS_Enabled.print (_sb, "deltaMCS_Enabled", _level+1);
      if (accumulationEnabled != null) accumulationEnabled.print (_sb, "accumulationEnabled", _level+1);
      if (p0_UE_PUCCH != null) p0_UE_PUCCH.print (_sb, "p0_UE_PUCCH", _level+1);
      if (pSRS_Offset != null) pSRS_Offset.print (_sb, "pSRS_Offset", _level+1);
      if (filterCoefficient != null) filterCoefficient.print (_sb, "filterCoefficient", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
