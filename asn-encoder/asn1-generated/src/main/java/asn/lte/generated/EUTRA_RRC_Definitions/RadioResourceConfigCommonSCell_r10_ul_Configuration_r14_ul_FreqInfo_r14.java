/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class RadioResourceConfigCommonSCell_r10_ul_Configuration_r14_ul_FreqInfo_r14 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public ARFCN_ValueEUTRA_r9 ul_CarrierFreq_r14;  // optional
   public RadioResourceConfigCommonSCell_r10_ul_Configuration_r14_ul_FreqInfo_r14_ul_Bandwidth_r14 ul_Bandwidth_r14 = null;  // optional
   public AdditionalSpectrumEmission additionalSpectrumEmissionSCell_r14;

   public RadioResourceConfigCommonSCell_r10_ul_Configuration_r14_ul_FreqInfo_r14 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public RadioResourceConfigCommonSCell_r10_ul_Configuration_r14_ul_FreqInfo_r14 (
      ARFCN_ValueEUTRA_r9 ul_CarrierFreq_r14_,
      RadioResourceConfigCommonSCell_r10_ul_Configuration_r14_ul_FreqInfo_r14_ul_Bandwidth_r14 ul_Bandwidth_r14_,
      AdditionalSpectrumEmission additionalSpectrumEmissionSCell_r14_
   ) {
      super();
      ul_CarrierFreq_r14 = ul_CarrierFreq_r14_;
      ul_Bandwidth_r14 = ul_Bandwidth_r14_;
      additionalSpectrumEmissionSCell_r14 = additionalSpectrumEmissionSCell_r14_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public RadioResourceConfigCommonSCell_r10_ul_Configuration_r14_ul_FreqInfo_r14 (
      AdditionalSpectrumEmission additionalSpectrumEmissionSCell_r14_
   ) {
      super();
      additionalSpectrumEmissionSCell_r14 = additionalSpectrumEmissionSCell_r14_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public RadioResourceConfigCommonSCell_r10_ul_Configuration_r14_ul_FreqInfo_r14 (long ul_CarrierFreq_r14_,
      RadioResourceConfigCommonSCell_r10_ul_Configuration_r14_ul_FreqInfo_r14_ul_Bandwidth_r14 ul_Bandwidth_r14_,
      long additionalSpectrumEmissionSCell_r14_
   ) {
      super();
      ul_CarrierFreq_r14 = new ARFCN_ValueEUTRA_r9 (ul_CarrierFreq_r14_);
      ul_Bandwidth_r14 = ul_Bandwidth_r14_;
      additionalSpectrumEmissionSCell_r14 = new AdditionalSpectrumEmission (additionalSpectrumEmissionSCell_r14_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public RadioResourceConfigCommonSCell_r10_ul_Configuration_r14_ul_FreqInfo_r14 (
      long additionalSpectrumEmissionSCell_r14_
   ) {
      super();
      additionalSpectrumEmissionSCell_r14 = new AdditionalSpectrumEmission (additionalSpectrumEmissionSCell_r14_);
   }

   public void init () {
      ul_CarrierFreq_r14 = null;
      ul_Bandwidth_r14 = null;
      additionalSpectrumEmissionSCell_r14 = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return ul_CarrierFreq_r14;
         case 1: return ul_Bandwidth_r14;
         case 2: return additionalSpectrumEmissionSCell_r14;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "ul-CarrierFreq-r14";
         case 1: return "ul-Bandwidth-r14";
         case 2: return "additionalSpectrumEmissionSCell-r14";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean ul_CarrierFreq_r14Present = buffer.decodeBit ("ul_CarrierFreq_r14Present");
      boolean ul_Bandwidth_r14Present = buffer.decodeBit ("ul_Bandwidth_r14Present");

      // decode ul_CarrierFreq_r14

      if (ul_CarrierFreq_r14Present) {
         buffer.getContext().eventDispatcher.startElement("ul_CarrierFreq_r14", -1);

         ul_CarrierFreq_r14 = new ARFCN_ValueEUTRA_r9();
         ul_CarrierFreq_r14.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ul_CarrierFreq_r14", -1);
      }
      else {
         ul_CarrierFreq_r14 = null;
      }

      // decode ul_Bandwidth_r14

      if (ul_Bandwidth_r14Present) {
         buffer.getContext().eventDispatcher.startElement("ul_Bandwidth_r14", -1);

         int tval = RadioResourceConfigCommonSCell_r10_ul_Configuration_r14_ul_FreqInfo_r14_ul_Bandwidth_r14.decodeEnumValue (buffer);
         ul_Bandwidth_r14 = RadioResourceConfigCommonSCell_r10_ul_Configuration_r14_ul_FreqInfo_r14_ul_Bandwidth_r14.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("ul_Bandwidth_r14", -1);
      }
      else {
         ul_Bandwidth_r14 = null;
      }

      // decode additionalSpectrumEmissionSCell_r14

      buffer.getContext().eventDispatcher.startElement("additionalSpectrumEmissionSCell_r14", -1);

      additionalSpectrumEmissionSCell_r14 = new AdditionalSpectrumEmission();
      additionalSpectrumEmissionSCell_r14.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("additionalSpectrumEmissionSCell_r14", -1);

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (ul_CarrierFreq_r14 != null) ul_CarrierFreq_r14.print (_sb, "ul_CarrierFreq_r14", _level+1);
      if (ul_Bandwidth_r14 != null) ul_Bandwidth_r14.print (_sb, "ul_Bandwidth_r14", _level+1);
      if (additionalSpectrumEmissionSCell_r14 != null) additionalSpectrumEmissionSCell_r14.print (_sb, "additionalSpectrumEmissionSCell_r14", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
