/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class RN_SubframeConfig_r10_rpdcch_Config_r10_resourceBlockAssignment_r10_type2_r10 extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CHOICE";
   }

   // Choice element identifier constants
   public final static byte _NRB6_R10 = 1;
   public final static byte _NRB15_R10 = 2;
   public final static byte _NRB25_R10 = 3;
   public final static byte _NRB50_R10 = 4;
   public final static byte _NRB75_R10 = 5;
   public final static byte _NRB100_R10 = 6;

   public RN_SubframeConfig_r10_rpdcch_Config_r10_resourceBlockAssignment_r10_type2_r10 () {
      super();
   }

   public RN_SubframeConfig_r10_rpdcch_Config_r10_resourceBlockAssignment_r10_type2_r10 (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _NRB6_R10: return "nrb6_r10";
      case _NRB15_R10: return "nrb15_r10";
      case _NRB25_R10: return "nrb25_r10";
      case _NRB50_R10: return "nrb50_r10";
      case _NRB75_R10: return "nrb75_r10";
      case _NRB100_R10: return "nrb100_r10";
      default: return "UNDEFINED";
      }
   }

   public void set_nrb6_r10 (Asn1BitString value) {
      setElement (_NRB6_R10, value);
   }

   public void set_nrb15_r10 (Asn1BitString value) {
      setElement (_NRB15_R10, value);
   }

   public void set_nrb25_r10 (Asn1BitString value) {
      setElement (_NRB25_R10, value);
   }

   public void set_nrb50_r10 (Asn1BitString value) {
      setElement (_NRB50_R10, value);
   }

   public void set_nrb75_r10 (Asn1BitString value) {
      setElement (_NRB75_R10, value);
   }

   public void set_nrb100_r10 (Asn1BitString value) {
      setElement (_NRB100_R10, value);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int idx = (int) buffer.decodeConsWholeNumber (6, "index");
      choiceID = idx + 1;
      buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

      switch (idx) {
         // nrb6_r10
         case 0: { 
            Asn1BitString nrb6_r10;
            element = nrb6_r10 = new Asn1BitString();
            nrb6_r10.decode (buffer, 5, 5);

            buffer.invokeCharacters(nrb6_r10.toString());
            break;
         }

         // nrb15_r10
         case 1: { 
            Asn1BitString nrb15_r10;
            element = nrb15_r10 = new Asn1BitString();
            nrb15_r10.decode (buffer, 7, 7);

            buffer.invokeCharacters(nrb15_r10.toString());
            break;
         }

         // nrb25_r10
         case 2: { 
            Asn1BitString nrb25_r10;
            element = nrb25_r10 = new Asn1BitString();
            nrb25_r10.decode (buffer, 9, 9);

            buffer.invokeCharacters(nrb25_r10.toString());
            break;
         }

         // nrb50_r10
         case 3: { 
            Asn1BitString nrb50_r10;
            element = nrb50_r10 = new Asn1BitString();
            nrb50_r10.decode (buffer, 11, 11);

            buffer.invokeCharacters(nrb50_r10.toString());
            break;
         }

         // nrb75_r10
         case 4: { 
            Asn1BitString nrb75_r10;
            element = nrb75_r10 = new Asn1BitString();
            nrb75_r10.decode (buffer, 12, 12);

            buffer.invokeCharacters(nrb75_r10.toString());
            break;
         }

         // nrb100_r10
         case 5: { 
            Asn1BitString nrb100_r10;
            element = nrb100_r10 = new Asn1BitString();
            nrb100_r10.decode (buffer, 13, 13);

            buffer.invokeCharacters(nrb100_r10.toString());
            break;
         }

         default:
         throw new Asn1InvalidChoiceOptionException (buffer, idx);
      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (element != null) {
         element.print (_sb, getElemName(), _level+1);
      }
      indent (_sb, _level);
      _sb.append("}\n");
   }

}
