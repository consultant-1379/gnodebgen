/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.X2AP_PDU_Contents;

import com.objsys.asn1j.runtime.*;
import asn.lte.generated.X2AP_CommonDataTypes.ProtocolIE_ID;
import asn.lte.generated.X2AP_CommonDataTypes.Criticality;

public class SgNBAdditionRequest_protocolIEs_element extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_X2AP_PDU_ContentsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public ProtocolIE_ID id;
   public Criticality criticality = null;

   /**
    * id: id-MeNB-UE-X2AP-ID
    * criticality: Criticality.reject
    * presence: Presence.mandatory
    * ASN.1 type: UE-X2AP-ID
    * Java type: UE_X2AP_ID
    *
    * id: id-NRUESecurityCapabilities
    * criticality: Criticality.reject
    * presence: Presence.mandatory
    * ASN.1 type: NRUESecurityCapabilities
    * Java type: NRUESecurityCapabilities
    *
    * id: id-SgNBSecurityKey
    * criticality: Criticality.reject
    * presence: Presence.mandatory
    * ASN.1 type: SgNBSecurityKey
    * Java type: SgNBSecurityKey
    *
    * id: id-SgNBUEAggregateMaximumBitRate
    * criticality: Criticality.reject
    * presence: Presence.mandatory
    * ASN.1 type: UEAggregateMaximumBitRate
    * Java type: UEAggregateMaximumBitRate
    *
    * id: id-SelectedPLMN
    * criticality: Criticality.ignore
    * presence: Presence.optional
    * ASN.1 type: PLMN-Identity
    * Java type: PLMN_Identity
    *
    * id: id-HandoverRestrictionList
    * criticality: Criticality.ignore
    * presence: Presence.optional
    * ASN.1 type: HandoverRestrictionList
    * Java type: HandoverRestrictionList
    *
    * id: id-E-RABs-ToBeAdded-SgNBAddReqList
    * criticality: Criticality.reject
    * presence: Presence.mandatory
    * ASN.1 type: E-RABs-ToBeAdded-SgNBAddReqList
    * Java type: E_RABs_ToBeAdded_SgNBAddReqList
    *
    * id: id-MeNBtoSgNBContainer
    * criticality: Criticality.reject
    * presence: Presence.mandatory
    * ASN.1 type: MeNBtoSgNBContainer
    * Java type: MeNBtoSgNBContainer
    *
    * id: id-SgNB-UE-X2AP-ID
    * criticality: Criticality.reject
    * presence: Presence.optional
    * ASN.1 type: SgNB-UE-X2AP-ID
    * Java type: SgNB_UE_X2AP_ID
    *
    * id: id-ExpectedUEBehaviour
    * criticality: Criticality.ignore
    * presence: Presence.optional
    * ASN.1 type: ExpectedUEBehaviour
    * Java type: ExpectedUEBehaviour
    *
    * id: id-MeNB-UE-X2AP-ID-Extension
    * criticality: Criticality.reject
    * presence: Presence.optional
    * ASN.1 type: UE-X2AP-ID-Extension
    * Java type: UE_X2AP_ID_Extension
    *
    * id: id-RequestedSplitSRBs
    * criticality: Criticality.reject
    * presence: Presence.optional
    * ASN.1 type: SplitSRBs
    * Java type: SplitSRBs
    *
    * id: id-MeNBResourceCoordinationInformation
    * criticality: Criticality.ignore
    * presence: Presence.optional
    * ASN.1 type: MeNBResourceCoordinationInformation
    * Java type: MeNBResourceCoordinationInformation
    *
    * id: id-SGNB-Addition-Trigger-Ind
    * criticality: Criticality.reject
    * presence: Presence.optional
    * ASN.1 type: SGNB-Addition-Trigger-Ind
    * Java type: SGNB_Addition_Trigger_Ind
    *
    * id: id-SubscriberProfileIDforRFP
    * criticality: Criticality.ignore
    * presence: Presence.optional
    * ASN.1 type: SubscriberProfileIDforRFP
    * Java type: SubscriberProfileIDforRFP
    *
    * id: id-MeNBCell-ID
    * criticality: Criticality.reject
    * presence: Presence.mandatory
    * ASN.1 type: ECGI
    * Java type: ECGI
    *
    * id: id-DesiredActNotificationLevel
    * criticality: Criticality.ignore
    * presence: Presence.optional
    * ASN.1 type: DesiredActNotificationLevel
    * Java type: DesiredActNotificationLevel
    *
    * id: id-TraceActivation
    * criticality: Criticality.ignore
    * presence: Presence.optional
    * ASN.1 type: TraceActivation
    * Java type: TraceActivation
    *
    * id: id-LocationInformationSgNBReporting
    * criticality: Criticality.ignore
    * presence: Presence.optional
    * ASN.1 type: LocationInformationSgNBReporting
    * Java type: LocationInformationSgNBReporting
    *
    * id: id-Masked-IMEISV
    * criticality: Criticality.ignore
    * presence: Presence.optional
    * ASN.1 type: Masked-IMEISV
    * Java type: Masked_IMEISV
    *
    * id: id-Ericsson-ExtConveyor
    * criticality: Criticality.ignore
    * presence: Presence.optional
    * ASN.1 type: EAB-SgNBAdditionRequest-ExtConveyor
    * Java type: EAB_SgNBAdditionRequest_ExtConveyor
    */
   public Asn1Type value;

   public SgNBAdditionRequest_protocolIEs_element () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SgNBAdditionRequest_protocolIEs_element (
      ProtocolIE_ID id_,
      Criticality criticality_,
      Asn1Type value_
   ) {
      super();
      id = id_;
      criticality = criticality_;
      value = value_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SgNBAdditionRequest_protocolIEs_element (long id_,
      Criticality criticality_,
      Asn1Type value_
   ) {
      super();
      id = new ProtocolIE_ID (id_);
      criticality = criticality_;
      value = value_;
   }

   public void init () {
      id = null;
      criticality = null;
      value = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return id;
         case 1: return criticality;
         case 2: return value;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "id";
         case 1: return "criticality";
         case 2: return "value";
         default: return null;
      }
   }


   /**
    * Assign fields according to information object having key id-MeNB-UE-X2AP-ID
    */
   public void setUsing_id_MeNB_UE_X2AP_ID(asn.lte.generated.X2AP_IEs.UE_X2AP_ID value) {
      this.id = new asn.lte.generated.X2AP_CommonDataTypes.ProtocolIE_ID(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_MeNB_UE_X2AP_ID);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key id-NRUESecurityCapabilities
    */
   public void setUsing_id_NRUESecurityCapabilities(asn.lte.generated.X2AP_IEs.NRUESecurityCapabilities value) {
      this.id = new asn.lte.generated.X2AP_CommonDataTypes.ProtocolIE_ID(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_NRUESecurityCapabilities);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key id-SgNBSecurityKey
    */
   public void setUsing_id_SgNBSecurityKey(asn.lte.generated.X2AP_IEs.SgNBSecurityKey value) {
      this.id = new asn.lte.generated.X2AP_CommonDataTypes.ProtocolIE_ID(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_SgNBSecurityKey);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key id-SgNBUEAggregateMaximumBitRate
    */
   public void setUsing_id_SgNBUEAggregateMaximumBitRate(asn.lte.generated.X2AP_IEs.UEAggregateMaximumBitRate value) {
      this.id = new asn.lte.generated.X2AP_CommonDataTypes.ProtocolIE_ID(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_SgNBUEAggregateMaximumBitRate);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key id-SelectedPLMN
    */
   public void setUsing_id_SelectedPLMN(asn.lte.generated.X2AP_IEs.PLMN_Identity value) {
      this.id = new asn.lte.generated.X2AP_CommonDataTypes.ProtocolIE_ID(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_SelectedPLMN);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key id-HandoverRestrictionList
    */
   public void setUsing_id_HandoverRestrictionList(asn.lte.generated.X2AP_IEs.HandoverRestrictionList value) {
      this.id = new asn.lte.generated.X2AP_CommonDataTypes.ProtocolIE_ID(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_HandoverRestrictionList);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key id-E-RABs-ToBeAdded-SgNBAddReqList
    */
   public void setUsing_id_E_RABs_ToBeAdded_SgNBAddReqList(E_RABs_ToBeAdded_SgNBAddReqList value) {
      this.id = new asn.lte.generated.X2AP_CommonDataTypes.ProtocolIE_ID(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_E_RABs_ToBeAdded_SgNBAddReqList);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key id-MeNBtoSgNBContainer
    */
   public void setUsing_id_MeNBtoSgNBContainer(asn.lte.generated.X2AP_IEs.MeNBtoSgNBContainer value) {
      this.id = new asn.lte.generated.X2AP_CommonDataTypes.ProtocolIE_ID(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_MeNBtoSgNBContainer);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key id-SgNB-UE-X2AP-ID
    */
   public void setUsing_id_SgNB_UE_X2AP_ID(asn.lte.generated.X2AP_IEs.SgNB_UE_X2AP_ID value) {
      this.id = new asn.lte.generated.X2AP_CommonDataTypes.ProtocolIE_ID(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_SgNB_UE_X2AP_ID);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key id-ExpectedUEBehaviour
    */
   public void setUsing_id_ExpectedUEBehaviour(asn.lte.generated.X2AP_IEs.ExpectedUEBehaviour value) {
      this.id = new asn.lte.generated.X2AP_CommonDataTypes.ProtocolIE_ID(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_ExpectedUEBehaviour);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key id-MeNB-UE-X2AP-ID-Extension
    */
   public void setUsing_id_MeNB_UE_X2AP_ID_Extension(asn.lte.generated.X2AP_IEs.UE_X2AP_ID_Extension value) {
      this.id = new asn.lte.generated.X2AP_CommonDataTypes.ProtocolIE_ID(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_MeNB_UE_X2AP_ID_Extension);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key id-RequestedSplitSRBs
    */
   public void setUsing_id_RequestedSplitSRBs(asn.lte.generated.X2AP_IEs.SplitSRBs value) {
      this.id = new asn.lte.generated.X2AP_CommonDataTypes.ProtocolIE_ID(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_RequestedSplitSRBs);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key id-MeNBResourceCoordinationInformation
    */
   public void setUsing_id_MeNBResourceCoordinationInformation(asn.lte.generated.X2AP_IEs.MeNBResourceCoordinationInformation value) {
      this.id = new asn.lte.generated.X2AP_CommonDataTypes.ProtocolIE_ID(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_MeNBResourceCoordinationInformation);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key id-SGNB-Addition-Trigger-Ind
    */
   public void setUsing_id_SGNB_Addition_Trigger_Ind(asn.lte.generated.X2AP_IEs.SGNB_Addition_Trigger_Ind value) {
      this.id = new asn.lte.generated.X2AP_CommonDataTypes.ProtocolIE_ID(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_SGNB_Addition_Trigger_Ind);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key id-SubscriberProfileIDforRFP
    */
   public void setUsing_id_SubscriberProfileIDforRFP(asn.lte.generated.X2AP_IEs.SubscriberProfileIDforRFP value) {
      this.id = new asn.lte.generated.X2AP_CommonDataTypes.ProtocolIE_ID(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_SubscriberProfileIDforRFP);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key id-MeNBCell-ID
    */
   public void setUsing_id_MeNBCell_ID(asn.lte.generated.X2AP_IEs.ECGI value) {
      this.id = new asn.lte.generated.X2AP_CommonDataTypes.ProtocolIE_ID(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_MeNBCell_ID);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.reject();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key id-DesiredActNotificationLevel
    */
   public void setUsing_id_DesiredActNotificationLevel(asn.lte.generated.X2AP_IEs.DesiredActNotificationLevel value) {
      this.id = new asn.lte.generated.X2AP_CommonDataTypes.ProtocolIE_ID(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_DesiredActNotificationLevel);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key id-TraceActivation
    */
   public void setUsing_id_TraceActivation(asn.lte.generated.X2AP_IEs.TraceActivation value) {
      this.id = new asn.lte.generated.X2AP_CommonDataTypes.ProtocolIE_ID(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_TraceActivation);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key id-LocationInformationSgNBReporting
    */
   public void setUsing_id_LocationInformationSgNBReporting(asn.lte.generated.X2AP_IEs.LocationInformationSgNBReporting value) {
      this.id = new asn.lte.generated.X2AP_CommonDataTypes.ProtocolIE_ID(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_LocationInformationSgNBReporting);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key id-Masked-IMEISV
    */
   public void setUsing_id_Masked_IMEISV(asn.lte.generated.X2AP_IEs.Masked_IMEISV value) {
      this.id = new asn.lte.generated.X2AP_CommonDataTypes.ProtocolIE_ID(asn.lte.generated.X2AP_Constants._X2AP_ConstantsValues.id_Masked_IMEISV);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Assign fields according to information object having key id-Ericsson-ExtConveyor
    */
   public void setUsing_id_Ericsson_ExtConveyor(asn.lte.generated.X2AP_Ericsson_IEs.EAB_SgNBAdditionRequest_ExtConveyor value) {
      this.id = new asn.lte.generated.X2AP_CommonDataTypes.ProtocolIE_ID(asn.lte.generated.X2AP_Ericsson_Conveyor._X2AP_Ericsson_ConveyorValues.id_Ericsson_ExtConveyor);
      this.criticality = asn.lte.generated.X2AP_CommonDataTypes.Criticality.ignore();
      this.value = value;
   }

   /**
    * Get value of value with type set according to information object having key id-MeNB-UE-X2AP-ID
    */
   public asn.lte.generated.X2AP_IEs.UE_X2AP_ID getValueFor_id_MeNB_UE_X2AP_ID() {
      return (asn.lte.generated.X2AP_IEs.UE_X2AP_ID) this.value;
   }

   /**
    * Get value of value with type set according to information object having key id-NRUESecurityCapabilities
    */
   public asn.lte.generated.X2AP_IEs.NRUESecurityCapabilities getValueFor_id_NRUESecurityCapabilities() {
      return (asn.lte.generated.X2AP_IEs.NRUESecurityCapabilities) this.value;
   }

   /**
    * Get value of value with type set according to information object having key id-SgNBSecurityKey
    */
   public asn.lte.generated.X2AP_IEs.SgNBSecurityKey getValueFor_id_SgNBSecurityKey() {
      return (asn.lte.generated.X2AP_IEs.SgNBSecurityKey) this.value;
   }

   /**
    * Get value of value with type set according to information object having key id-SgNBUEAggregateMaximumBitRate
    */
   public asn.lte.generated.X2AP_IEs.UEAggregateMaximumBitRate getValueFor_id_SgNBUEAggregateMaximumBitRate() {
      return (asn.lte.generated.X2AP_IEs.UEAggregateMaximumBitRate) this.value;
   }

   /**
    * Get value of value with type set according to information object having key id-SelectedPLMN
    */
   public asn.lte.generated.X2AP_IEs.PLMN_Identity getValueFor_id_SelectedPLMN() {
      return (asn.lte.generated.X2AP_IEs.PLMN_Identity) this.value;
   }

   /**
    * Get value of value with type set according to information object having key id-HandoverRestrictionList
    */
   public asn.lte.generated.X2AP_IEs.HandoverRestrictionList getValueFor_id_HandoverRestrictionList() {
      return (asn.lte.generated.X2AP_IEs.HandoverRestrictionList) this.value;
   }

   /**
    * Get value of value with type set according to information object having key id-E-RABs-ToBeAdded-SgNBAddReqList
    */
   public E_RABs_ToBeAdded_SgNBAddReqList getValueFor_id_E_RABs_ToBeAdded_SgNBAddReqList() {
      return (E_RABs_ToBeAdded_SgNBAddReqList) this.value;
   }

   /**
    * Get value of value with type set according to information object having key id-MeNBtoSgNBContainer
    */
   public asn.lte.generated.X2AP_IEs.MeNBtoSgNBContainer getValueFor_id_MeNBtoSgNBContainer() {
      return (asn.lte.generated.X2AP_IEs.MeNBtoSgNBContainer) this.value;
   }

   /**
    * Get value of value with type set according to information object having key id-SgNB-UE-X2AP-ID
    */
   public asn.lte.generated.X2AP_IEs.SgNB_UE_X2AP_ID getValueFor_id_SgNB_UE_X2AP_ID() {
      return (asn.lte.generated.X2AP_IEs.SgNB_UE_X2AP_ID) this.value;
   }

   /**
    * Get value of value with type set according to information object having key id-ExpectedUEBehaviour
    */
   public asn.lte.generated.X2AP_IEs.ExpectedUEBehaviour getValueFor_id_ExpectedUEBehaviour() {
      return (asn.lte.generated.X2AP_IEs.ExpectedUEBehaviour) this.value;
   }

   /**
    * Get value of value with type set according to information object having key id-MeNB-UE-X2AP-ID-Extension
    */
   public asn.lte.generated.X2AP_IEs.UE_X2AP_ID_Extension getValueFor_id_MeNB_UE_X2AP_ID_Extension() {
      return (asn.lte.generated.X2AP_IEs.UE_X2AP_ID_Extension) this.value;
   }

   /**
    * Get value of value with type set according to information object having key id-RequestedSplitSRBs
    */
   public asn.lte.generated.X2AP_IEs.SplitSRBs getValueFor_id_RequestedSplitSRBs() {
      return (asn.lte.generated.X2AP_IEs.SplitSRBs) this.value;
   }

   /**
    * Get value of value with type set according to information object having key id-MeNBResourceCoordinationInformation
    */
   public asn.lte.generated.X2AP_IEs.MeNBResourceCoordinationInformation getValueFor_id_MeNBResourceCoordinationInformation() {
      return (asn.lte.generated.X2AP_IEs.MeNBResourceCoordinationInformation) this.value;
   }

   /**
    * Get value of value with type set according to information object having key id-SGNB-Addition-Trigger-Ind
    */
   public asn.lte.generated.X2AP_IEs.SGNB_Addition_Trigger_Ind getValueFor_id_SGNB_Addition_Trigger_Ind() {
      return (asn.lte.generated.X2AP_IEs.SGNB_Addition_Trigger_Ind) this.value;
   }

   /**
    * Get value of value with type set according to information object having key id-SubscriberProfileIDforRFP
    */
   public asn.lte.generated.X2AP_IEs.SubscriberProfileIDforRFP getValueFor_id_SubscriberProfileIDforRFP() {
      return (asn.lte.generated.X2AP_IEs.SubscriberProfileIDforRFP) this.value;
   }

   /**
    * Get value of value with type set according to information object having key id-MeNBCell-ID
    */
   public asn.lte.generated.X2AP_IEs.ECGI getValueFor_id_MeNBCell_ID() {
      return (asn.lte.generated.X2AP_IEs.ECGI) this.value;
   }

   /**
    * Get value of value with type set according to information object having key id-DesiredActNotificationLevel
    */
   public asn.lte.generated.X2AP_IEs.DesiredActNotificationLevel getValueFor_id_DesiredActNotificationLevel() {
      return (asn.lte.generated.X2AP_IEs.DesiredActNotificationLevel) this.value;
   }

   /**
    * Get value of value with type set according to information object having key id-TraceActivation
    */
   public asn.lte.generated.X2AP_IEs.TraceActivation getValueFor_id_TraceActivation() {
      return (asn.lte.generated.X2AP_IEs.TraceActivation) this.value;
   }

   /**
    * Get value of value with type set according to information object having key id-LocationInformationSgNBReporting
    */
   public asn.lte.generated.X2AP_IEs.LocationInformationSgNBReporting getValueFor_id_LocationInformationSgNBReporting() {
      return (asn.lte.generated.X2AP_IEs.LocationInformationSgNBReporting) this.value;
   }

   /**
    * Get value of value with type set according to information object having key id-Masked-IMEISV
    */
   public asn.lte.generated.X2AP_IEs.Masked_IMEISV getValueFor_id_Masked_IMEISV() {
      return (asn.lte.generated.X2AP_IEs.Masked_IMEISV) this.value;
   }

   /**
    * Get value of value with type set according to information object having key id-Ericsson-ExtConveyor
    */
   public asn.lte.generated.X2AP_Ericsson_IEs.EAB_SgNBAdditionRequest_ExtConveyor getValueFor_id_Ericsson_ExtConveyor() {
      return (asn.lte.generated.X2AP_Ericsson_IEs.EAB_SgNBAdditionRequest_ExtConveyor) this.value;
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode id

      buffer.getContext().eventDispatcher.startElement("id", -1);

      id = new ProtocolIE_ID();
      id.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("id", -1);

      // decode criticality

      buffer.getContext().eventDispatcher.startElement("criticality", -1);

      {
         int tval = Criticality.decodeEnumValue (buffer);
         criticality = Criticality.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("criticality", -1);

      // decode value

      buffer.getContext().eventDispatcher.startElement("value", -1);

      value = new Asn1OpenType();
      value.decode (buffer);

      buffer.invokeCharacters(value.toString());
      buffer.getContext().eventDispatcher.endElement("value", -1);

      checkTC (true, buffer.getLazyOpenTypeDecode() ? 0 : 2, buffer.isAligned(), buffer.getContext().eventDispatcher);
   }

   public void checkTC(boolean decode, int decodeOpenTypeFlag, boolean aligned, Asn1NamedEventDispatcher eventDispatcher)
      throws Asn1Exception
   {
      /* check id */
      asn.lte.generated.X2AP_Containers.X2AP_PROTOCOL_IES _index = null;
      for(int i=0; i < _X2AP_PDU_ContentsValues.SgNBAdditionRequest_IEs.length; i++) {
         if(_X2AP_PDU_ContentsValues.SgNBAdditionRequest_IEs[i].id.equals(id)) {
            _index = _X2AP_PDU_ContentsValues.SgNBAdditionRequest_IEs[i];
            break;
         }
      }
      if (null == _index) {
         return;
      }

      /* check value */
      if( decode && decodeOpenTypeFlag >=1 ) {
         try {
            Asn1PerDecodeBuffer buffer = new Asn1PerDecodeBuffer(((Asn1OpenType)value).value, aligned);
            buffer.setLazyOpenTypeDecode(decodeOpenTypeFlag == 1);
            if (eventDispatcher != null)buffer.getContext().eventDispatcher = eventDispatcher;
            buffer.getContext().eventDispatcher.startElement("value", -1);

            String className = _index.Value.actualType.getName();
            if (className.lastIndexOf('.') > 0) {
               className = className.substring (className.lastIndexOf (".")+1);
            }
            buffer.getContext().eventDispatcher.startElement(className, -1);

            value = Asn1Type.decode(buffer, _index.Value);

            buffer.getContext().eventDispatcher.endElement(className, -1);

            buffer.getContext().eventDispatcher.endElement("value", -1);
         }
         catch (java.io.IOException e) {
            throw new Asn1Exception(e.toString());
         }
      }

      /* use -strict option to validate the "criticality" element */
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (id.value == 111) {
         indent (_sb, _level+1);
         _sb.append("id = id-MeNB-UE-X2AP-ID\n");
      }
      else if (id.value == 248) {
         indent (_sb, _level+1);
         _sb.append("id = id-NRUESecurityCapabilities\n");
      }
      else if (id.value == 203) {
         indent (_sb, _level+1);
         _sb.append("id = id-SgNBSecurityKey\n");
      }
      else if (id.value == 204) {
         indent (_sb, _level+1);
         _sb.append("id = id-SgNBUEAggregateMaximumBitRate\n");
      }
      else if (id.value == 269) {
         indent (_sb, _level+1);
         _sb.append("id = id-SelectedPLMN\n");
      }
      else if (id.value == 240) {
         indent (_sb, _level+1);
         _sb.append("id = id-HandoverRestrictionList\n");
      }
      else if (id.value == 205) {
         indent (_sb, _level+1);
         _sb.append("id = id-E-RABs-ToBeAdded-SgNBAddReqList\n");
      }
      else if (id.value == 206) {
         indent (_sb, _level+1);
         _sb.append("id = id-MeNBtoSgNBContainer\n");
      }
      else if (id.value == 207) {
         indent (_sb, _level+1);
         _sb.append("id = id-SgNB-UE-X2AP-ID\n");
      }
      else if (id.value == 104) {
         indent (_sb, _level+1);
         _sb.append("id = id-ExpectedUEBehaviour\n");
      }
      else if (id.value == 157) {
         indent (_sb, _level+1);
         _sb.append("id = id-MeNB-UE-X2AP-ID-Extension\n");
      }
      else if (id.value == 208) {
         indent (_sb, _level+1);
         _sb.append("id = id-RequestedSplitSRBs\n");
      }
      else if (id.value == 257) {
         indent (_sb, _level+1);
         _sb.append("id = id-MeNBResourceCoordinationInformation\n");
      }
      else if (id.value == 278) {
         indent (_sb, _level+1);
         _sb.append("id = id-SGNB-Addition-Trigger-Ind\n");
      }
      else if (id.value == 275) {
         indent (_sb, _level+1);
         _sb.append("id = id-SubscriberProfileIDforRFP\n");
      }
      else if (id.value == 279) {
         indent (_sb, _level+1);
         _sb.append("id = id-MeNBCell-ID\n");
      }
      else if (id.value == 329) {
         indent (_sb, _level+1);
         _sb.append("id = id-DesiredActNotificationLevel\n");
      }
      else if (id.value == 13) {
         indent (_sb, _level+1);
         _sb.append("id = id-TraceActivation\n");
      }
      else if (id.value == 330) {
         indent (_sb, _level+1);
         _sb.append("id = id-LocationInformationSgNBReporting\n");
      }
      else if (id.value == 98) {
         indent (_sb, _level+1);
         _sb.append("id = id-Masked-IMEISV\n");
      }
      else if (id.value == 43229) {
         indent (_sb, _level+1);
         _sb.append("id = id-Ericsson-ExtConveyor\n");
      }

      if (criticality != null) {
         criticality.print (_sb, "criticality", _level+1);
      }
      if (value != null) {
         String tmpName = value.getAsn1TypeName();
         if (tmpName != null && tmpName != "")  {
            tmpName = "value" + " (" + tmpName + ")";
         }
         else  {
            tmpName = "value";
         }
         value.print (_sb, tmpName, _level+1);
      }
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
