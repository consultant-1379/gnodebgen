/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class CSI_Process_r11 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CSI-Process-r11";
   }

   public CSI_ProcessId_r11 csi_ProcessId_r11;
   public CSI_RS_ConfigNZPId_r11 csi_RS_ConfigNZPId_r11;
   public CSI_IM_ConfigId_r11 csi_IM_ConfigId_r11;
   public P_C_AndCBSR_Pair_r13a p_C_AndCBSRList_r11;
   public CQI_ReportBothProc_r11 cqi_ReportBothProc_r11;  // optional
   public Asn1Integer cqi_ReportPeriodicProcId_r11;  // optional
   public CQI_ReportAperiodicProc_r11 cqi_ReportAperiodicProc_r11;  // optional
   public boolean mV2ExtPresent;
   public CSI_Process_r11_alternativeCodebookEnabledFor4TXProc_r12 alternativeCodebookEnabledFor4TXProc_r12 = null;  // optional
   public CSI_Process_r11_csi_IM_ConfigIdList_r12 csi_IM_ConfigIdList_r12;  // optional
   public CSI_Process_r11_cqi_ReportAperiodicProc2_r12 cqi_ReportAperiodicProc2_r12;  // optional
   public boolean mV3ExtPresent;
   public CSI_Process_r11_cqi_ReportAperiodicProc_v1310 cqi_ReportAperiodicProc_v1310;  // optional
   public CSI_Process_r11_cqi_ReportAperiodicProc2_v1310 cqi_ReportAperiodicProc2_v1310;  // optional
   public CSI_RS_ConfigEMIMO_r13 eMIMO_Type_r13;  // optional
   public boolean mV4ExtPresent;
   public CSI_RS_ConfigEMIMO_v1430 dummy;  // optional
   public CSI_RS_ConfigEMIMO_Hybrid_r14 eMIMO_Hybrid_r14;  // optional
   public Asn1Boolean advancedCodebookEnabled_r14;  // optional
   public boolean mV5ExtPresent;
   public CSI_RS_ConfigEMIMO_v1480 eMIMO_Type_v1480;  // optional
   public boolean mV6ExtPresent;
   public Asn1Boolean feCOMP_CSI_Enabled_v1530;  // optional
   public CSI_RS_ConfigEMIMO_v1530 eMIMO_Type_v1530;  // optional
   public Asn1OpenExt extElem1;

   public CSI_Process_r11 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CSI_Process_r11 (
      CSI_ProcessId_r11 csi_ProcessId_r11_,
      CSI_RS_ConfigNZPId_r11 csi_RS_ConfigNZPId_r11_,
      CSI_IM_ConfigId_r11 csi_IM_ConfigId_r11_,
      P_C_AndCBSR_Pair_r13a p_C_AndCBSRList_r11_,
      CQI_ReportBothProc_r11 cqi_ReportBothProc_r11_,
      Asn1Integer cqi_ReportPeriodicProcId_r11_,
      CQI_ReportAperiodicProc_r11 cqi_ReportAperiodicProc_r11_,
      CSI_Process_r11_alternativeCodebookEnabledFor4TXProc_r12 alternativeCodebookEnabledFor4TXProc_r12_,
      CSI_Process_r11_csi_IM_ConfigIdList_r12 csi_IM_ConfigIdList_r12_,
      CSI_Process_r11_cqi_ReportAperiodicProc2_r12 cqi_ReportAperiodicProc2_r12_,
      CSI_Process_r11_cqi_ReportAperiodicProc_v1310 cqi_ReportAperiodicProc_v1310_,
      CSI_Process_r11_cqi_ReportAperiodicProc2_v1310 cqi_ReportAperiodicProc2_v1310_,
      CSI_RS_ConfigEMIMO_r13 eMIMO_Type_r13_,
      CSI_RS_ConfigEMIMO_v1430 dummy_,
      CSI_RS_ConfigEMIMO_Hybrid_r14 eMIMO_Hybrid_r14_,
      Asn1Boolean advancedCodebookEnabled_r14_,
      CSI_RS_ConfigEMIMO_v1480 eMIMO_Type_v1480_,
      Asn1Boolean feCOMP_CSI_Enabled_v1530_,
      CSI_RS_ConfigEMIMO_v1530 eMIMO_Type_v1530_
   ) {
      super();
      csi_ProcessId_r11 = csi_ProcessId_r11_;
      csi_RS_ConfigNZPId_r11 = csi_RS_ConfigNZPId_r11_;
      csi_IM_ConfigId_r11 = csi_IM_ConfigId_r11_;
      p_C_AndCBSRList_r11 = p_C_AndCBSRList_r11_;
      cqi_ReportBothProc_r11 = cqi_ReportBothProc_r11_;
      cqi_ReportPeriodicProcId_r11 = cqi_ReportPeriodicProcId_r11_;
      cqi_ReportAperiodicProc_r11 = cqi_ReportAperiodicProc_r11_;
      alternativeCodebookEnabledFor4TXProc_r12 = alternativeCodebookEnabledFor4TXProc_r12_;
      csi_IM_ConfigIdList_r12 = csi_IM_ConfigIdList_r12_;
      cqi_ReportAperiodicProc2_r12 = cqi_ReportAperiodicProc2_r12_;
      cqi_ReportAperiodicProc_v1310 = cqi_ReportAperiodicProc_v1310_;
      cqi_ReportAperiodicProc2_v1310 = cqi_ReportAperiodicProc2_v1310_;
      eMIMO_Type_r13 = eMIMO_Type_r13_;
      dummy = dummy_;
      eMIMO_Hybrid_r14 = eMIMO_Hybrid_r14_;
      advancedCodebookEnabled_r14 = advancedCodebookEnabled_r14_;
      eMIMO_Type_v1480 = eMIMO_Type_v1480_;
      feCOMP_CSI_Enabled_v1530 = feCOMP_CSI_Enabled_v1530_;
      eMIMO_Type_v1530 = eMIMO_Type_v1530_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public CSI_Process_r11 (
      CSI_ProcessId_r11 csi_ProcessId_r11_,
      CSI_RS_ConfigNZPId_r11 csi_RS_ConfigNZPId_r11_,
      CSI_IM_ConfigId_r11 csi_IM_ConfigId_r11_,
      P_C_AndCBSR_Pair_r13a p_C_AndCBSRList_r11_
   ) {
      super();
      csi_ProcessId_r11 = csi_ProcessId_r11_;
      csi_RS_ConfigNZPId_r11 = csi_RS_ConfigNZPId_r11_;
      csi_IM_ConfigId_r11 = csi_IM_ConfigId_r11_;
      p_C_AndCBSRList_r11 = p_C_AndCBSRList_r11_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public CSI_Process_r11 (long csi_ProcessId_r11_,
      long csi_RS_ConfigNZPId_r11_,
      long csi_IM_ConfigId_r11_,
      P_C_AndCBSR_Pair_r13a p_C_AndCBSRList_r11_,
      CQI_ReportBothProc_r11 cqi_ReportBothProc_r11_,
      long cqi_ReportPeriodicProcId_r11_,
      CQI_ReportAperiodicProc_r11 cqi_ReportAperiodicProc_r11_,
      CSI_Process_r11_alternativeCodebookEnabledFor4TXProc_r12 alternativeCodebookEnabledFor4TXProc_r12_,
      CSI_Process_r11_csi_IM_ConfigIdList_r12 csi_IM_ConfigIdList_r12_,
      CSI_Process_r11_cqi_ReportAperiodicProc2_r12 cqi_ReportAperiodicProc2_r12_,
      CSI_Process_r11_cqi_ReportAperiodicProc_v1310 cqi_ReportAperiodicProc_v1310_,
      CSI_Process_r11_cqi_ReportAperiodicProc2_v1310 cqi_ReportAperiodicProc2_v1310_,
      CSI_RS_ConfigEMIMO_r13 eMIMO_Type_r13_,
      CSI_RS_ConfigEMIMO_v1430 dummy_,
      CSI_RS_ConfigEMIMO_Hybrid_r14 eMIMO_Hybrid_r14_,
      boolean advancedCodebookEnabled_r14_,
      CSI_RS_ConfigEMIMO_v1480 eMIMO_Type_v1480_,
      boolean feCOMP_CSI_Enabled_v1530_,
      CSI_RS_ConfigEMIMO_v1530 eMIMO_Type_v1530_
   ) {
      super();
      csi_ProcessId_r11 = new CSI_ProcessId_r11 (csi_ProcessId_r11_);
      csi_RS_ConfigNZPId_r11 = new CSI_RS_ConfigNZPId_r11 (csi_RS_ConfigNZPId_r11_);
      csi_IM_ConfigId_r11 = new CSI_IM_ConfigId_r11 (csi_IM_ConfigId_r11_);
      p_C_AndCBSRList_r11 = p_C_AndCBSRList_r11_;
      cqi_ReportBothProc_r11 = cqi_ReportBothProc_r11_;
      cqi_ReportPeriodicProcId_r11 = new Asn1Integer (cqi_ReportPeriodicProcId_r11_);
      cqi_ReportAperiodicProc_r11 = cqi_ReportAperiodicProc_r11_;
      alternativeCodebookEnabledFor4TXProc_r12 = alternativeCodebookEnabledFor4TXProc_r12_;
      csi_IM_ConfigIdList_r12 = csi_IM_ConfigIdList_r12_;
      cqi_ReportAperiodicProc2_r12 = cqi_ReportAperiodicProc2_r12_;
      cqi_ReportAperiodicProc_v1310 = cqi_ReportAperiodicProc_v1310_;
      cqi_ReportAperiodicProc2_v1310 = cqi_ReportAperiodicProc2_v1310_;
      eMIMO_Type_r13 = eMIMO_Type_r13_;
      dummy = dummy_;
      eMIMO_Hybrid_r14 = eMIMO_Hybrid_r14_;
      advancedCodebookEnabled_r14 = new Asn1Boolean (advancedCodebookEnabled_r14_);
      eMIMO_Type_v1480 = eMIMO_Type_v1480_;
      feCOMP_CSI_Enabled_v1530 = new Asn1Boolean (feCOMP_CSI_Enabled_v1530_);
      eMIMO_Type_v1530 = eMIMO_Type_v1530_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public CSI_Process_r11 (
      long csi_ProcessId_r11_,
      long csi_RS_ConfigNZPId_r11_,
      long csi_IM_ConfigId_r11_,
      P_C_AndCBSR_Pair_r13a p_C_AndCBSRList_r11_
   ) {
      super();
      csi_ProcessId_r11 = new CSI_ProcessId_r11 (csi_ProcessId_r11_);
      csi_RS_ConfigNZPId_r11 = new CSI_RS_ConfigNZPId_r11 (csi_RS_ConfigNZPId_r11_);
      csi_IM_ConfigId_r11 = new CSI_IM_ConfigId_r11 (csi_IM_ConfigId_r11_);
      p_C_AndCBSRList_r11 = p_C_AndCBSRList_r11_;
   }

   public void init () {
      csi_ProcessId_r11 = null;
      csi_RS_ConfigNZPId_r11 = null;
      csi_IM_ConfigId_r11 = null;
      p_C_AndCBSRList_r11 = null;
      cqi_ReportBothProc_r11 = null;
      cqi_ReportPeriodicProcId_r11 = null;
      cqi_ReportAperiodicProc_r11 = null;
      alternativeCodebookEnabledFor4TXProc_r12 = null;
      csi_IM_ConfigIdList_r12 = null;
      cqi_ReportAperiodicProc2_r12 = null;
      cqi_ReportAperiodicProc_v1310 = null;
      cqi_ReportAperiodicProc2_v1310 = null;
      eMIMO_Type_r13 = null;
      dummy = null;
      eMIMO_Hybrid_r14 = null;
      advancedCodebookEnabled_r14 = null;
      eMIMO_Type_v1480 = null;
      feCOMP_CSI_Enabled_v1530 = null;
      eMIMO_Type_v1530 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 20; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return csi_ProcessId_r11;
         case 1: return csi_RS_ConfigNZPId_r11;
         case 2: return csi_IM_ConfigId_r11;
         case 3: return p_C_AndCBSRList_r11;
         case 4: return cqi_ReportBothProc_r11;
         case 5: return cqi_ReportPeriodicProcId_r11;
         case 6: return cqi_ReportAperiodicProc_r11;
         case 7: return alternativeCodebookEnabledFor4TXProc_r12;
         case 8: return csi_IM_ConfigIdList_r12;
         case 9: return cqi_ReportAperiodicProc2_r12;
         case 10: return cqi_ReportAperiodicProc_v1310;
         case 11: return cqi_ReportAperiodicProc2_v1310;
         case 12: return eMIMO_Type_r13;
         case 13: return dummy;
         case 14: return eMIMO_Hybrid_r14;
         case 15: return advancedCodebookEnabled_r14;
         case 16: return eMIMO_Type_v1480;
         case 17: return feCOMP_CSI_Enabled_v1530;
         case 18: return eMIMO_Type_v1530;
         case 19: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "csi-ProcessId-r11";
         case 1: return "csi-RS-ConfigNZPId-r11";
         case 2: return "csi-IM-ConfigId-r11";
         case 3: return "p-C-AndCBSRList-r11";
         case 4: return "cqi-ReportBothProc-r11";
         case 5: return "cqi-ReportPeriodicProcId-r11";
         case 6: return "cqi-ReportAperiodicProc-r11";
         case 7: return "alternativeCodebookEnabledFor4TXProc-r12";
         case 8: return "csi-IM-ConfigIdList-r12";
         case 9: return "cqi-ReportAperiodicProc2-r12";
         case 10: return "cqi-ReportAperiodicProc-v1310";
         case 11: return "cqi-ReportAperiodicProc2-v1310";
         case 12: return "eMIMO-Type-r13";
         case 13: return "dummy";
         case 14: return "eMIMO-Hybrid-r14";
         case 15: return "advancedCodebookEnabled-r14";
         case 16: return "eMIMO-Type-v1480";
         case 17: return "feCOMP-CSI-Enabled-v1530";
         case 18: return "eMIMO-Type-v1530";
         case 19: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean cqi_ReportBothProc_r11Present = buffer.decodeBit ("cqi_ReportBothProc_r11Present");
      boolean cqi_ReportPeriodicProcId_r11Present = buffer.decodeBit ("cqi_ReportPeriodicProcId_r11Present");
      boolean cqi_ReportAperiodicProc_r11Present = buffer.decodeBit ("cqi_ReportAperiodicProc_r11Present");

      // decode csi_ProcessId_r11

      buffer.getContext().eventDispatcher.startElement("csi_ProcessId_r11", -1);

      csi_ProcessId_r11 = new CSI_ProcessId_r11();
      csi_ProcessId_r11.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("csi_ProcessId_r11", -1);

      // decode csi_RS_ConfigNZPId_r11

      buffer.getContext().eventDispatcher.startElement("csi_RS_ConfigNZPId_r11", -1);

      csi_RS_ConfigNZPId_r11 = new CSI_RS_ConfigNZPId_r11();
      csi_RS_ConfigNZPId_r11.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("csi_RS_ConfigNZPId_r11", -1);

      // decode csi_IM_ConfigId_r11

      buffer.getContext().eventDispatcher.startElement("csi_IM_ConfigId_r11", -1);

      csi_IM_ConfigId_r11 = new CSI_IM_ConfigId_r11();
      csi_IM_ConfigId_r11.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("csi_IM_ConfigId_r11", -1);

      // decode p_C_AndCBSRList_r11

      buffer.getContext().eventDispatcher.startElement("p_C_AndCBSRList_r11", -1);

      p_C_AndCBSRList_r11 = new P_C_AndCBSR_Pair_r13a();
      p_C_AndCBSRList_r11.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("p_C_AndCBSRList_r11", -1);

      // decode cqi_ReportBothProc_r11

      if (cqi_ReportBothProc_r11Present) {
         buffer.getContext().eventDispatcher.startElement("cqi_ReportBothProc_r11", -1);

         cqi_ReportBothProc_r11 = new CQI_ReportBothProc_r11();
         cqi_ReportBothProc_r11.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("cqi_ReportBothProc_r11", -1);
      }
      else {
         cqi_ReportBothProc_r11 = null;
      }

      // decode cqi_ReportPeriodicProcId_r11

      if (cqi_ReportPeriodicProcId_r11Present) {
         buffer.getContext().eventDispatcher.startElement("cqi_ReportPeriodicProcId_r11", -1);

         cqi_ReportPeriodicProcId_r11 = new Asn1Integer();
         cqi_ReportPeriodicProcId_r11.decode (buffer, 0, 3);

         buffer.invokeCharacters(cqi_ReportPeriodicProcId_r11.toString());
         buffer.getContext().eventDispatcher.endElement("cqi_ReportPeriodicProcId_r11", -1);
      }
      else {
         cqi_ReportPeriodicProcId_r11 = null;
      }

      // decode cqi_ReportAperiodicProc_r11

      if (cqi_ReportAperiodicProc_r11Present) {
         buffer.getContext().eventDispatcher.startElement("cqi_ReportAperiodicProc_r11", -1);

         cqi_ReportAperiodicProc_r11 = new CQI_ReportAperiodicProc_r11();
         cqi_ReportAperiodicProc_r11.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("cqi_ReportAperiodicProc_r11", -1);
      }
      else {
         cqi_ReportAperiodicProc_r11 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV4ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV5ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV6ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean alternativeCodebookEnabledFor4TXProc_r12Present = buffer.decodeBit ("alternativeCodebookEnabledFor4TXProc_r12Present");

            boolean csi_IM_ConfigIdList_r12Present = buffer.decodeBit ("csi_IM_ConfigIdList_r12Present");

            boolean cqi_ReportAperiodicProc2_r12Present = buffer.decodeBit ("cqi_ReportAperiodicProc2_r12Present");

            // decode alternativeCodebookEnabledFor4TXProc_r12

            if (alternativeCodebookEnabledFor4TXProc_r12Present) {
               buffer.getContext().eventDispatcher.startElement("alternativeCodebookEnabledFor4TXProc_r12", -1);

               int tval = CSI_Process_r11_alternativeCodebookEnabledFor4TXProc_r12.decodeEnumValue (buffer);
               alternativeCodebookEnabledFor4TXProc_r12 = CSI_Process_r11_alternativeCodebookEnabledFor4TXProc_r12.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("alternativeCodebookEnabledFor4TXProc_r12", -1);
            }
            else {
               alternativeCodebookEnabledFor4TXProc_r12 = null;
            }

            // decode csi_IM_ConfigIdList_r12

            if (csi_IM_ConfigIdList_r12Present) {
               buffer.getContext().eventDispatcher.startElement("csi_IM_ConfigIdList_r12", -1);

               csi_IM_ConfigIdList_r12 = new CSI_Process_r11_csi_IM_ConfigIdList_r12();
               csi_IM_ConfigIdList_r12.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("csi_IM_ConfigIdList_r12", -1);
            }
            else {
               csi_IM_ConfigIdList_r12 = null;
            }

            // decode cqi_ReportAperiodicProc2_r12

            if (cqi_ReportAperiodicProc2_r12Present) {
               buffer.getContext().eventDispatcher.startElement("cqi_ReportAperiodicProc2_r12", -1);

               cqi_ReportAperiodicProc2_r12 = new CSI_Process_r11_cqi_ReportAperiodicProc2_r12();
               cqi_ReportAperiodicProc2_r12.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("cqi_ReportAperiodicProc2_r12", -1);
            }
            else {
               cqi_ReportAperiodicProc2_r12 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean cqi_ReportAperiodicProc_v1310Present = buffer.decodeBit ("cqi_ReportAperiodicProc_v1310Present");

            boolean cqi_ReportAperiodicProc2_v1310Present = buffer.decodeBit ("cqi_ReportAperiodicProc2_v1310Present");

            boolean eMIMO_Type_r13Present = buffer.decodeBit ("eMIMO_Type_r13Present");

            // decode cqi_ReportAperiodicProc_v1310

            if (cqi_ReportAperiodicProc_v1310Present) {
               buffer.getContext().eventDispatcher.startElement("cqi_ReportAperiodicProc_v1310", -1);

               cqi_ReportAperiodicProc_v1310 = new CSI_Process_r11_cqi_ReportAperiodicProc_v1310();
               cqi_ReportAperiodicProc_v1310.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("cqi_ReportAperiodicProc_v1310", -1);
            }
            else {
               cqi_ReportAperiodicProc_v1310 = null;
            }

            // decode cqi_ReportAperiodicProc2_v1310

            if (cqi_ReportAperiodicProc2_v1310Present) {
               buffer.getContext().eventDispatcher.startElement("cqi_ReportAperiodicProc2_v1310", -1);

               cqi_ReportAperiodicProc2_v1310 = new CSI_Process_r11_cqi_ReportAperiodicProc2_v1310();
               cqi_ReportAperiodicProc2_v1310.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("cqi_ReportAperiodicProc2_v1310", -1);
            }
            else {
               cqi_ReportAperiodicProc2_v1310 = null;
            }

            // decode eMIMO_Type_r13

            if (eMIMO_Type_r13Present) {
               buffer.getContext().eventDispatcher.startElement("eMIMO_Type_r13", -1);

               eMIMO_Type_r13 = new CSI_RS_ConfigEMIMO_r13();
               eMIMO_Type_r13.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("eMIMO_Type_r13", -1);
            }
            else {
               eMIMO_Type_r13 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV4ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean dummyPresent = buffer.decodeBit ("dummyPresent");

            boolean eMIMO_Hybrid_r14Present = buffer.decodeBit ("eMIMO_Hybrid_r14Present");

            boolean advancedCodebookEnabled_r14Present = buffer.decodeBit ("advancedCodebookEnabled_r14Present");

            // decode dummy

            if (dummyPresent) {
               buffer.getContext().eventDispatcher.startElement("dummy", -1);

               dummy = new CSI_RS_ConfigEMIMO_v1430();
               dummy.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("dummy", -1);
            }
            else {
               dummy = null;
            }

            // decode eMIMO_Hybrid_r14

            if (eMIMO_Hybrid_r14Present) {
               buffer.getContext().eventDispatcher.startElement("eMIMO_Hybrid_r14", -1);

               eMIMO_Hybrid_r14 = new CSI_RS_ConfigEMIMO_Hybrid_r14();
               eMIMO_Hybrid_r14.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("eMIMO_Hybrid_r14", -1);
            }
            else {
               eMIMO_Hybrid_r14 = null;
            }

            // decode advancedCodebookEnabled_r14

            if (advancedCodebookEnabled_r14Present) {
               buffer.getContext().eventDispatcher.startElement("advancedCodebookEnabled_r14", -1);

               advancedCodebookEnabled_r14 = new Asn1Boolean();
               advancedCodebookEnabled_r14.decode (buffer);

               buffer.invokeCharacters(advancedCodebookEnabled_r14.toString());
               buffer.getContext().eventDispatcher.endElement("advancedCodebookEnabled_r14", -1);
            }
            else {
               advancedCodebookEnabled_r14 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV5ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean eMIMO_Type_v1480Present = buffer.decodeBit ("eMIMO_Type_v1480Present");

            // decode eMIMO_Type_v1480

            if (eMIMO_Type_v1480Present) {
               buffer.getContext().eventDispatcher.startElement("eMIMO_Type_v1480", -1);

               eMIMO_Type_v1480 = new CSI_RS_ConfigEMIMO_v1480();
               eMIMO_Type_v1480.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("eMIMO_Type_v1480", -1);
            }
            else {
               eMIMO_Type_v1480 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV6ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean feCOMP_CSI_Enabled_v1530Present = buffer.decodeBit ("feCOMP_CSI_Enabled_v1530Present");

            boolean eMIMO_Type_v1530Present = buffer.decodeBit ("eMIMO_Type_v1530Present");

            // decode feCOMP_CSI_Enabled_v1530

            if (feCOMP_CSI_Enabled_v1530Present) {
               buffer.getContext().eventDispatcher.startElement("feCOMP_CSI_Enabled_v1530", -1);

               feCOMP_CSI_Enabled_v1530 = new Asn1Boolean();
               feCOMP_CSI_Enabled_v1530.decode (buffer);

               buffer.invokeCharacters(feCOMP_CSI_Enabled_v1530.toString());
               buffer.getContext().eventDispatcher.endElement("feCOMP_CSI_Enabled_v1530", -1);
            }
            else {
               feCOMP_CSI_Enabled_v1530 = null;
            }

            // decode eMIMO_Type_v1530

            if (eMIMO_Type_v1530Present) {
               buffer.getContext().eventDispatcher.startElement("eMIMO_Type_v1530", -1);

               eMIMO_Type_v1530 = new CSI_RS_ConfigEMIMO_v1530();
               eMIMO_Type_v1530.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("eMIMO_Type_v1530", -1);
            }
            else {
               eMIMO_Type_v1530 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (csi_ProcessId_r11 != null) csi_ProcessId_r11.print (_sb, "csi_ProcessId_r11", _level+1);
      if (csi_RS_ConfigNZPId_r11 != null) csi_RS_ConfigNZPId_r11.print (_sb, "csi_RS_ConfigNZPId_r11", _level+1);
      if (csi_IM_ConfigId_r11 != null) csi_IM_ConfigId_r11.print (_sb, "csi_IM_ConfigId_r11", _level+1);
      if (p_C_AndCBSRList_r11 != null) p_C_AndCBSRList_r11.print (_sb, "p_C_AndCBSRList_r11", _level+1);
      if (cqi_ReportBothProc_r11 != null) cqi_ReportBothProc_r11.print (_sb, "cqi_ReportBothProc_r11", _level+1);
      if (cqi_ReportPeriodicProcId_r11 != null) cqi_ReportPeriodicProcId_r11.print (_sb, "cqi_ReportPeriodicProcId_r11", _level+1);
      if (cqi_ReportAperiodicProc_r11 != null) cqi_ReportAperiodicProc_r11.print (_sb, "cqi_ReportAperiodicProc_r11", _level+1);
      if (alternativeCodebookEnabledFor4TXProc_r12 != null) alternativeCodebookEnabledFor4TXProc_r12.print (_sb, "alternativeCodebookEnabledFor4TXProc_r12", _level+1);
      if (csi_IM_ConfigIdList_r12 != null) csi_IM_ConfigIdList_r12.print (_sb, "csi_IM_ConfigIdList_r12", _level+1);
      if (cqi_ReportAperiodicProc2_r12 != null) cqi_ReportAperiodicProc2_r12.print (_sb, "cqi_ReportAperiodicProc2_r12", _level+1);
      if (cqi_ReportAperiodicProc_v1310 != null) cqi_ReportAperiodicProc_v1310.print (_sb, "cqi_ReportAperiodicProc_v1310", _level+1);
      if (cqi_ReportAperiodicProc2_v1310 != null) cqi_ReportAperiodicProc2_v1310.print (_sb, "cqi_ReportAperiodicProc2_v1310", _level+1);
      if (eMIMO_Type_r13 != null) eMIMO_Type_r13.print (_sb, "eMIMO_Type_r13", _level+1);
      if (dummy != null) dummy.print (_sb, "dummy", _level+1);
      if (eMIMO_Hybrid_r14 != null) eMIMO_Hybrid_r14.print (_sb, "eMIMO_Hybrid_r14", _level+1);
      if (advancedCodebookEnabled_r14 != null) advancedCodebookEnabled_r14.print (_sb, "advancedCodebookEnabled_r14", _level+1);
      if (eMIMO_Type_v1480 != null) eMIMO_Type_v1480.print (_sb, "eMIMO_Type_v1480", _level+1);
      if (feCOMP_CSI_Enabled_v1530 != null) feCOMP_CSI_Enabled_v1530.print (_sb, "feCOMP_CSI_Enabled_v1530", _level+1);
      if (eMIMO_Type_v1530 != null) eMIMO_Type_v1530.print (_sb, "eMIMO_Type_v1530", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
