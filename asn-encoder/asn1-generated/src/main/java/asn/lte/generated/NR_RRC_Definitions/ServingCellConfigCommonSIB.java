/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class ServingCellConfigCommonSIB extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ServingCellConfigCommonSIB";
   }

   public DownlinkConfigCommonSIB downlinkConfigCommon;
   public UplinkConfigCommonSIB uplinkConfigCommon;  // optional
   public UplinkConfigCommonSIB supplementaryUplink;  // optional
   public ServingCellConfigCommonSIB_n_TimingAdvanceOffset n_TimingAdvanceOffset = null;  // optional
   public ServingCellConfigCommonSIB_ssb_PositionsInBurst ssb_PositionsInBurst;
   public ServingCellConfigCommonSIB_ssb_PeriodicityServingCell ssb_PeriodicityServingCell = null;
   public TDD_UL_DL_ConfigCommon tdd_UL_DL_ConfigurationCommon;  // optional
   public Asn1Integer ss_PBCH_BlockPower;
   public boolean mV2ExtPresent;
   public ServingCellConfigCommonSIB_channelAccessMode_r16 channelAccessMode_r16;  // optional
   public ServingCellConfigCommonSIB_discoveryBurstWindowLength_r16 discoveryBurstWindowLength_r16 = null;  // optional
   public HighSpeedConfig_r16 highSpeedConfig_r16;  // optional
   public Asn1OpenExt extElem1;

   public ServingCellConfigCommonSIB () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ServingCellConfigCommonSIB (
      DownlinkConfigCommonSIB downlinkConfigCommon_,
      UplinkConfigCommonSIB uplinkConfigCommon_,
      UplinkConfigCommonSIB supplementaryUplink_,
      ServingCellConfigCommonSIB_n_TimingAdvanceOffset n_TimingAdvanceOffset_,
      ServingCellConfigCommonSIB_ssb_PositionsInBurst ssb_PositionsInBurst_,
      ServingCellConfigCommonSIB_ssb_PeriodicityServingCell ssb_PeriodicityServingCell_,
      TDD_UL_DL_ConfigCommon tdd_UL_DL_ConfigurationCommon_,
      Asn1Integer ss_PBCH_BlockPower_,
      ServingCellConfigCommonSIB_channelAccessMode_r16 channelAccessMode_r16_,
      ServingCellConfigCommonSIB_discoveryBurstWindowLength_r16 discoveryBurstWindowLength_r16_,
      HighSpeedConfig_r16 highSpeedConfig_r16_
   ) {
      super();
      downlinkConfigCommon = downlinkConfigCommon_;
      uplinkConfigCommon = uplinkConfigCommon_;
      supplementaryUplink = supplementaryUplink_;
      n_TimingAdvanceOffset = n_TimingAdvanceOffset_;
      ssb_PositionsInBurst = ssb_PositionsInBurst_;
      ssb_PeriodicityServingCell = ssb_PeriodicityServingCell_;
      tdd_UL_DL_ConfigurationCommon = tdd_UL_DL_ConfigurationCommon_;
      ss_PBCH_BlockPower = ss_PBCH_BlockPower_;
      channelAccessMode_r16 = channelAccessMode_r16_;
      discoveryBurstWindowLength_r16 = discoveryBurstWindowLength_r16_;
      highSpeedConfig_r16 = highSpeedConfig_r16_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public ServingCellConfigCommonSIB (
      DownlinkConfigCommonSIB downlinkConfigCommon_,
      ServingCellConfigCommonSIB_ssb_PositionsInBurst ssb_PositionsInBurst_,
      ServingCellConfigCommonSIB_ssb_PeriodicityServingCell ssb_PeriodicityServingCell_,
      Asn1Integer ss_PBCH_BlockPower_
   ) {
      super();
      downlinkConfigCommon = downlinkConfigCommon_;
      ssb_PositionsInBurst = ssb_PositionsInBurst_;
      ssb_PeriodicityServingCell = ssb_PeriodicityServingCell_;
      ss_PBCH_BlockPower = ss_PBCH_BlockPower_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public ServingCellConfigCommonSIB (DownlinkConfigCommonSIB downlinkConfigCommon_,
      UplinkConfigCommonSIB uplinkConfigCommon_,
      UplinkConfigCommonSIB supplementaryUplink_,
      ServingCellConfigCommonSIB_n_TimingAdvanceOffset n_TimingAdvanceOffset_,
      ServingCellConfigCommonSIB_ssb_PositionsInBurst ssb_PositionsInBurst_,
      ServingCellConfigCommonSIB_ssb_PeriodicityServingCell ssb_PeriodicityServingCell_,
      TDD_UL_DL_ConfigCommon tdd_UL_DL_ConfigurationCommon_,
      long ss_PBCH_BlockPower_,
      ServingCellConfigCommonSIB_channelAccessMode_r16 channelAccessMode_r16_,
      ServingCellConfigCommonSIB_discoveryBurstWindowLength_r16 discoveryBurstWindowLength_r16_,
      HighSpeedConfig_r16 highSpeedConfig_r16_
   ) {
      super();
      downlinkConfigCommon = downlinkConfigCommon_;
      uplinkConfigCommon = uplinkConfigCommon_;
      supplementaryUplink = supplementaryUplink_;
      n_TimingAdvanceOffset = n_TimingAdvanceOffset_;
      ssb_PositionsInBurst = ssb_PositionsInBurst_;
      ssb_PeriodicityServingCell = ssb_PeriodicityServingCell_;
      tdd_UL_DL_ConfigurationCommon = tdd_UL_DL_ConfigurationCommon_;
      ss_PBCH_BlockPower = new Asn1Integer (ss_PBCH_BlockPower_);
      channelAccessMode_r16 = channelAccessMode_r16_;
      discoveryBurstWindowLength_r16 = discoveryBurstWindowLength_r16_;
      highSpeedConfig_r16 = highSpeedConfig_r16_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public ServingCellConfigCommonSIB (
      DownlinkConfigCommonSIB downlinkConfigCommon_,
      ServingCellConfigCommonSIB_ssb_PositionsInBurst ssb_PositionsInBurst_,
      ServingCellConfigCommonSIB_ssb_PeriodicityServingCell ssb_PeriodicityServingCell_,
      long ss_PBCH_BlockPower_
   ) {
      super();
      downlinkConfigCommon = downlinkConfigCommon_;
      ssb_PositionsInBurst = ssb_PositionsInBurst_;
      ssb_PeriodicityServingCell = ssb_PeriodicityServingCell_;
      ss_PBCH_BlockPower = new Asn1Integer (ss_PBCH_BlockPower_);
   }

   public void init () {
      downlinkConfigCommon = null;
      uplinkConfigCommon = null;
      supplementaryUplink = null;
      n_TimingAdvanceOffset = null;
      ssb_PositionsInBurst = null;
      ssb_PeriodicityServingCell = null;
      tdd_UL_DL_ConfigurationCommon = null;
      ss_PBCH_BlockPower = null;
      channelAccessMode_r16 = null;
      discoveryBurstWindowLength_r16 = null;
      highSpeedConfig_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 12; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return downlinkConfigCommon;
         case 1: return uplinkConfigCommon;
         case 2: return supplementaryUplink;
         case 3: return n_TimingAdvanceOffset;
         case 4: return ssb_PositionsInBurst;
         case 5: return ssb_PeriodicityServingCell;
         case 6: return tdd_UL_DL_ConfigurationCommon;
         case 7: return ss_PBCH_BlockPower;
         case 8: return channelAccessMode_r16;
         case 9: return discoveryBurstWindowLength_r16;
         case 10: return highSpeedConfig_r16;
         case 11: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "downlinkConfigCommon";
         case 1: return "uplinkConfigCommon";
         case 2: return "supplementaryUplink";
         case 3: return "n-TimingAdvanceOffset";
         case 4: return "ssb-PositionsInBurst";
         case 5: return "ssb-PeriodicityServingCell";
         case 6: return "tdd-UL-DL-ConfigurationCommon";
         case 7: return "ss-PBCH-BlockPower";
         case 8: return "channelAccessMode-r16";
         case 9: return "discoveryBurstWindowLength-r16";
         case 10: return "highSpeedConfig-r16";
         case 11: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean uplinkConfigCommonPresent = buffer.decodeBit ("uplinkConfigCommonPresent");
      boolean supplementaryUplinkPresent = buffer.decodeBit ("supplementaryUplinkPresent");
      boolean n_TimingAdvanceOffsetPresent = buffer.decodeBit ("n_TimingAdvanceOffsetPresent");
      boolean tdd_UL_DL_ConfigurationCommonPresent = buffer.decodeBit ("tdd_UL_DL_ConfigurationCommonPresent");

      // decode downlinkConfigCommon

      buffer.getContext().eventDispatcher.startElement("downlinkConfigCommon", -1);

      downlinkConfigCommon = new DownlinkConfigCommonSIB();
      downlinkConfigCommon.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("downlinkConfigCommon", -1);

      // decode uplinkConfigCommon

      if (uplinkConfigCommonPresent) {
         buffer.getContext().eventDispatcher.startElement("uplinkConfigCommon", -1);

         uplinkConfigCommon = new UplinkConfigCommonSIB();
         uplinkConfigCommon.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("uplinkConfigCommon", -1);
      }
      else {
         uplinkConfigCommon = null;
      }

      // decode supplementaryUplink

      if (supplementaryUplinkPresent) {
         buffer.getContext().eventDispatcher.startElement("supplementaryUplink", -1);

         supplementaryUplink = new UplinkConfigCommonSIB();
         supplementaryUplink.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("supplementaryUplink", -1);
      }
      else {
         supplementaryUplink = null;
      }

      // decode n_TimingAdvanceOffset

      if (n_TimingAdvanceOffsetPresent) {
         buffer.getContext().eventDispatcher.startElement("n_TimingAdvanceOffset", -1);

         int tval = ServingCellConfigCommonSIB_n_TimingAdvanceOffset.decodeEnumValue (buffer);
         n_TimingAdvanceOffset = ServingCellConfigCommonSIB_n_TimingAdvanceOffset.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("n_TimingAdvanceOffset", -1);
      }
      else {
         n_TimingAdvanceOffset = null;
      }

      // decode ssb_PositionsInBurst

      buffer.getContext().eventDispatcher.startElement("ssb_PositionsInBurst", -1);

      ssb_PositionsInBurst = new ServingCellConfigCommonSIB_ssb_PositionsInBurst();
      ssb_PositionsInBurst.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("ssb_PositionsInBurst", -1);

      // decode ssb_PeriodicityServingCell

      buffer.getContext().eventDispatcher.startElement("ssb_PeriodicityServingCell", -1);

      {
         int tval = ServingCellConfigCommonSIB_ssb_PeriodicityServingCell.decodeEnumValue (buffer);
         ssb_PeriodicityServingCell = ServingCellConfigCommonSIB_ssb_PeriodicityServingCell.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("ssb_PeriodicityServingCell", -1);

      // decode tdd_UL_DL_ConfigurationCommon

      if (tdd_UL_DL_ConfigurationCommonPresent) {
         buffer.getContext().eventDispatcher.startElement("tdd_UL_DL_ConfigurationCommon", -1);

         tdd_UL_DL_ConfigurationCommon = new TDD_UL_DL_ConfigCommon();
         tdd_UL_DL_ConfigurationCommon.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("tdd_UL_DL_ConfigurationCommon", -1);
      }
      else {
         tdd_UL_DL_ConfigurationCommon = null;
      }

      // decode ss_PBCH_BlockPower

      buffer.getContext().eventDispatcher.startElement("ss_PBCH_BlockPower", -1);

      ss_PBCH_BlockPower = new Asn1Integer();
      ss_PBCH_BlockPower.decode (buffer, -60, 50);

      buffer.invokeCharacters(ss_PBCH_BlockPower.toString());
      buffer.getContext().eventDispatcher.endElement("ss_PBCH_BlockPower", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean channelAccessMode_r16Present = buffer.decodeBit ("channelAccessMode_r16Present");

            boolean discoveryBurstWindowLength_r16Present = buffer.decodeBit ("discoveryBurstWindowLength_r16Present");

            boolean highSpeedConfig_r16Present = buffer.decodeBit ("highSpeedConfig_r16Present");

            // decode channelAccessMode_r16

            if (channelAccessMode_r16Present) {
               buffer.getContext().eventDispatcher.startElement("channelAccessMode_r16", -1);

               channelAccessMode_r16 = new ServingCellConfigCommonSIB_channelAccessMode_r16();
               channelAccessMode_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("channelAccessMode_r16", -1);
            }
            else {
               channelAccessMode_r16 = null;
            }

            // decode discoveryBurstWindowLength_r16

            if (discoveryBurstWindowLength_r16Present) {
               buffer.getContext().eventDispatcher.startElement("discoveryBurstWindowLength_r16", -1);

               int tval = ServingCellConfigCommonSIB_discoveryBurstWindowLength_r16.decodeEnumValue (buffer);
               discoveryBurstWindowLength_r16 = ServingCellConfigCommonSIB_discoveryBurstWindowLength_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("discoveryBurstWindowLength_r16", -1);
            }
            else {
               discoveryBurstWindowLength_r16 = null;
            }

            // decode highSpeedConfig_r16

            if (highSpeedConfig_r16Present) {
               buffer.getContext().eventDispatcher.startElement("highSpeedConfig_r16", -1);

               highSpeedConfig_r16 = new HighSpeedConfig_r16();
               highSpeedConfig_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("highSpeedConfig_r16", -1);
            }
            else {
               highSpeedConfig_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (downlinkConfigCommon != null) downlinkConfigCommon.print (_sb, "downlinkConfigCommon", _level+1);
      if (uplinkConfigCommon != null) uplinkConfigCommon.print (_sb, "uplinkConfigCommon", _level+1);
      if (supplementaryUplink != null) supplementaryUplink.print (_sb, "supplementaryUplink", _level+1);
      if (n_TimingAdvanceOffset != null) n_TimingAdvanceOffset.print (_sb, "n_TimingAdvanceOffset", _level+1);
      if (ssb_PositionsInBurst != null) ssb_PositionsInBurst.print (_sb, "ssb_PositionsInBurst", _level+1);
      if (ssb_PeriodicityServingCell != null) ssb_PeriodicityServingCell.print (_sb, "ssb_PeriodicityServingCell", _level+1);
      if (tdd_UL_DL_ConfigurationCommon != null) tdd_UL_DL_ConfigurationCommon.print (_sb, "tdd_UL_DL_ConfigurationCommon", _level+1);
      if (ss_PBCH_BlockPower != null) ss_PBCH_BlockPower.print (_sb, "ss_PBCH_BlockPower", _level+1);
      if (channelAccessMode_r16 != null) channelAccessMode_r16.print (_sb, "channelAccessMode_r16", _level+1);
      if (discoveryBurstWindowLength_r16 != null) discoveryBurstWindowLength_r16.print (_sb, "discoveryBurstWindowLength_r16", _level+1);
      if (highSpeedConfig_r16 != null) highSpeedConfig_r16.print (_sb, "highSpeedConfig_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
