/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.S1AP_IEs;

import com.objsys.asn1j.runtime.*;
import asn.lte.generated.S1AP_CommonDataTypes.ProcedureCode;
import asn.lte.generated.S1AP_CommonDataTypes.TriggeringMessage;
import asn.lte.generated.S1AP_CommonDataTypes.Criticality;

public class CriticalityDiagnostics extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_S1AP_IEsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CriticalityDiagnostics";
   }

   public ProcedureCode procedureCode;  // optional
   public TriggeringMessage triggeringMessage = null;  // optional
   public Criticality procedureCriticality = null;  // optional
   public CriticalityDiagnostics_IE_List iEsCriticalityDiagnostics;  // optional
   public CriticalityDiagnostics_iE_Extensions iE_Extensions;  // optional
   public Asn1OpenExt extElem1;

   public CriticalityDiagnostics () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CriticalityDiagnostics (
      ProcedureCode procedureCode_,
      TriggeringMessage triggeringMessage_,
      Criticality procedureCriticality_,
      CriticalityDiagnostics_IE_List iEsCriticalityDiagnostics_,
      CriticalityDiagnostics_iE_Extensions iE_Extensions_
   ) {
      super();
      procedureCode = procedureCode_;
      triggeringMessage = triggeringMessage_;
      procedureCriticality = procedureCriticality_;
      iEsCriticalityDiagnostics = iEsCriticalityDiagnostics_;
      iE_Extensions = iE_Extensions_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public CriticalityDiagnostics (long procedureCode_,
      TriggeringMessage triggeringMessage_,
      Criticality procedureCriticality_,
      CriticalityDiagnostics_IE_List iEsCriticalityDiagnostics_,
      CriticalityDiagnostics_iE_Extensions iE_Extensions_
   ) {
      super();
      procedureCode = new ProcedureCode (procedureCode_);
      triggeringMessage = triggeringMessage_;
      procedureCriticality = procedureCriticality_;
      iEsCriticalityDiagnostics = iEsCriticalityDiagnostics_;
      iE_Extensions = iE_Extensions_;
   }

   public void init () {
      procedureCode = null;
      triggeringMessage = null;
      procedureCriticality = null;
      iEsCriticalityDiagnostics = null;
      iE_Extensions = null;
      extElem1 = null;
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return procedureCode;
         case 1: return triggeringMessage;
         case 2: return procedureCriticality;
         case 3: return iEsCriticalityDiagnostics;
         case 4: return iE_Extensions;
         case 5: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "procedureCode";
         case 1: return "triggeringMessage";
         case 2: return "procedureCriticality";
         case 3: return "iEsCriticalityDiagnostics";
         case 4: return "iE-Extensions";
         case 5: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean procedureCodePresent = buffer.decodeBit ("procedureCodePresent");
      boolean triggeringMessagePresent = buffer.decodeBit ("triggeringMessagePresent");
      boolean procedureCriticalityPresent = buffer.decodeBit ("procedureCriticalityPresent");
      boolean iEsCriticalityDiagnosticsPresent = buffer.decodeBit ("iEsCriticalityDiagnosticsPresent");
      boolean iE_ExtensionsPresent = buffer.decodeBit ("iE_ExtensionsPresent");

      // decode procedureCode

      if (procedureCodePresent) {
         buffer.getContext().eventDispatcher.startElement("procedureCode", -1);

         procedureCode = new ProcedureCode();
         procedureCode.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("procedureCode", -1);
      }
      else {
         procedureCode = null;
      }

      // decode triggeringMessage

      if (triggeringMessagePresent) {
         buffer.getContext().eventDispatcher.startElement("triggeringMessage", -1);

         int tval = TriggeringMessage.decodeEnumValue (buffer);
         triggeringMessage = TriggeringMessage.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("triggeringMessage", -1);
      }
      else {
         triggeringMessage = null;
      }

      // decode procedureCriticality

      if (procedureCriticalityPresent) {
         buffer.getContext().eventDispatcher.startElement("procedureCriticality", -1);

         int tval = Criticality.decodeEnumValue (buffer);
         procedureCriticality = Criticality.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("procedureCriticality", -1);
      }
      else {
         procedureCriticality = null;
      }

      // decode iEsCriticalityDiagnostics

      if (iEsCriticalityDiagnosticsPresent) {
         buffer.getContext().eventDispatcher.startElement("iEsCriticalityDiagnostics", -1);

         iEsCriticalityDiagnostics = new CriticalityDiagnostics_IE_List();
         iEsCriticalityDiagnostics.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("iEsCriticalityDiagnostics", -1);
      }
      else {
         iEsCriticalityDiagnostics = null;
      }

      // decode iE_Extensions

      if (iE_ExtensionsPresent) {
         buffer.getContext().eventDispatcher.startElement("iE_Extensions", -1);

         iE_Extensions = new CriticalityDiagnostics_iE_Extensions();
         iE_Extensions.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("iE_Extensions", -1);
      }
      else {
         iE_Extensions = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (procedureCode != null) procedureCode.print (_sb, "procedureCode", _level+1);
      if (triggeringMessage != null) triggeringMessage.print (_sb, "triggeringMessage", _level+1);
      if (procedureCriticality != null) procedureCriticality.print (_sb, "procedureCriticality", _level+1);
      if (iEsCriticalityDiagnostics != null) iEsCriticalityDiagnostics.print (_sb, "iEsCriticalityDiagnostics", _level+1);
      if (iE_Extensions != null) iE_Extensions.print (_sb, "iE_Extensions", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
