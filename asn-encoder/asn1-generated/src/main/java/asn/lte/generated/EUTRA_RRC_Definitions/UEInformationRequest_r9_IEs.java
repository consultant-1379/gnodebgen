/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class UEInformationRequest_r9_IEs extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "UEInformationRequest-r9-IEs";
   }

   public Asn1Boolean rach_ReportReq_r9;
   public Asn1Boolean rlf_ReportReq_r9;
   public UEInformationRequest_v930_IEs nonCriticalExtension;  // optional

   public UEInformationRequest_r9_IEs () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public UEInformationRequest_r9_IEs (
      Asn1Boolean rach_ReportReq_r9_,
      Asn1Boolean rlf_ReportReq_r9_,
      UEInformationRequest_v930_IEs nonCriticalExtension_
   ) {
      super();
      rach_ReportReq_r9 = rach_ReportReq_r9_;
      rlf_ReportReq_r9 = rlf_ReportReq_r9_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public UEInformationRequest_r9_IEs (
      Asn1Boolean rach_ReportReq_r9_,
      Asn1Boolean rlf_ReportReq_r9_
   ) {
      super();
      rach_ReportReq_r9 = rach_ReportReq_r9_;
      rlf_ReportReq_r9 = rlf_ReportReq_r9_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public UEInformationRequest_r9_IEs (boolean rach_ReportReq_r9_,
      boolean rlf_ReportReq_r9_,
      UEInformationRequest_v930_IEs nonCriticalExtension_
   ) {
      super();
      rach_ReportReq_r9 = new Asn1Boolean (rach_ReportReq_r9_);
      rlf_ReportReq_r9 = new Asn1Boolean (rlf_ReportReq_r9_);
      nonCriticalExtension = nonCriticalExtension_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public UEInformationRequest_r9_IEs (
      boolean rach_ReportReq_r9_,
      boolean rlf_ReportReq_r9_
   ) {
      super();
      rach_ReportReq_r9 = new Asn1Boolean (rach_ReportReq_r9_);
      rlf_ReportReq_r9 = new Asn1Boolean (rlf_ReportReq_r9_);
   }

   public void init () {
      rach_ReportReq_r9 = null;
      rlf_ReportReq_r9 = null;
      nonCriticalExtension = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return rach_ReportReq_r9;
         case 1: return rlf_ReportReq_r9;
         case 2: return nonCriticalExtension;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "rach-ReportReq-r9";
         case 1: return "rlf-ReportReq-r9";
         case 2: return "nonCriticalExtension";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean nonCriticalExtensionPresent = buffer.decodeBit ("nonCriticalExtensionPresent");

      // decode rach_ReportReq_r9

      buffer.getContext().eventDispatcher.startElement("rach_ReportReq_r9", -1);

      rach_ReportReq_r9 = new Asn1Boolean();
      rach_ReportReq_r9.decode (buffer);

      buffer.invokeCharacters(rach_ReportReq_r9.toString());
      buffer.getContext().eventDispatcher.endElement("rach_ReportReq_r9", -1);

      // decode rlf_ReportReq_r9

      buffer.getContext().eventDispatcher.startElement("rlf_ReportReq_r9", -1);

      rlf_ReportReq_r9 = new Asn1Boolean();
      rlf_ReportReq_r9.decode (buffer);

      buffer.invokeCharacters(rlf_ReportReq_r9.toString());
      buffer.getContext().eventDispatcher.endElement("rlf_ReportReq_r9", -1);

      // decode nonCriticalExtension

      if (nonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension = new UEInformationRequest_v930_IEs();
         nonCriticalExtension.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }
      else {
         nonCriticalExtension = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (rach_ReportReq_r9 != null) rach_ReportReq_r9.print (_sb, "rach_ReportReq_r9", _level+1);
      if (rlf_ReportReq_r9 != null) rlf_ReportReq_r9.print (_sb, "rlf_ReportReq_r9", _level+1);
      if (nonCriticalExtension != null) nonCriticalExtension.print (_sb, "nonCriticalExtension", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
