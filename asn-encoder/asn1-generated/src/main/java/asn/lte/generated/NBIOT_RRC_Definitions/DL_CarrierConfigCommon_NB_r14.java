/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NBIOT_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class DL_CarrierConfigCommon_NB_r14 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NBIOT_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "DL-CarrierConfigCommon-NB-r14";
   }

   public CarrierFreq_NB_r13 dl_CarrierFreq_r14;
   public DL_CarrierConfigCommon_NB_r14_downlinkBitmapNonAnchor_r14 downlinkBitmapNonAnchor_r14;
   public DL_CarrierConfigCommon_NB_r14_dl_GapNonAnchor_r14 dl_GapNonAnchor_r14;
   public DL_CarrierConfigCommon_NB_r14_inbandCarrierInfo_r14 inbandCarrierInfo_r14;  // optional
   public DL_CarrierConfigCommon_NB_r14_nrs_PowerOffsetNonAnchor_r14 nrs_PowerOffsetNonAnchor_r14 = null;  // default = DL_CarrierConfigCommon_NB_r14_nrs_PowerOffsetNonAnchor_r14.dB0()
   public boolean mV2ExtPresent;
   public DL_GapConfig_NB_v1530 dl_GapNonAnchor_v1530;  // optional
   public Asn1OpenExt extElem1;

   public DL_CarrierConfigCommon_NB_r14 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public DL_CarrierConfigCommon_NB_r14 (
      CarrierFreq_NB_r13 dl_CarrierFreq_r14_,
      DL_CarrierConfigCommon_NB_r14_downlinkBitmapNonAnchor_r14 downlinkBitmapNonAnchor_r14_,
      DL_CarrierConfigCommon_NB_r14_dl_GapNonAnchor_r14 dl_GapNonAnchor_r14_,
      DL_CarrierConfigCommon_NB_r14_inbandCarrierInfo_r14 inbandCarrierInfo_r14_,
      DL_CarrierConfigCommon_NB_r14_nrs_PowerOffsetNonAnchor_r14 nrs_PowerOffsetNonAnchor_r14_,
      DL_GapConfig_NB_v1530 dl_GapNonAnchor_v1530_
   ) {
      super();
      dl_CarrierFreq_r14 = dl_CarrierFreq_r14_;
      downlinkBitmapNonAnchor_r14 = downlinkBitmapNonAnchor_r14_;
      dl_GapNonAnchor_r14 = dl_GapNonAnchor_r14_;
      inbandCarrierInfo_r14 = inbandCarrierInfo_r14_;
      nrs_PowerOffsetNonAnchor_r14 = nrs_PowerOffsetNonAnchor_r14_;
      dl_GapNonAnchor_v1530 = dl_GapNonAnchor_v1530_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public DL_CarrierConfigCommon_NB_r14 (
      CarrierFreq_NB_r13 dl_CarrierFreq_r14_,
      DL_CarrierConfigCommon_NB_r14_downlinkBitmapNonAnchor_r14 downlinkBitmapNonAnchor_r14_,
      DL_CarrierConfigCommon_NB_r14_dl_GapNonAnchor_r14 dl_GapNonAnchor_r14_
   ) {
      super();
      dl_CarrierFreq_r14 = dl_CarrierFreq_r14_;
      downlinkBitmapNonAnchor_r14 = downlinkBitmapNonAnchor_r14_;
      dl_GapNonAnchor_r14 = dl_GapNonAnchor_r14_;
      nrs_PowerOffsetNonAnchor_r14 = DL_CarrierConfigCommon_NB_r14_nrs_PowerOffsetNonAnchor_r14.dB0();
   }

   public void init () {
      dl_CarrierFreq_r14 = null;
      downlinkBitmapNonAnchor_r14 = null;
      dl_GapNonAnchor_r14 = null;
      inbandCarrierInfo_r14 = null;
      nrs_PowerOffsetNonAnchor_r14 = DL_CarrierConfigCommon_NB_r14_nrs_PowerOffsetNonAnchor_r14.dB0();
      dl_GapNonAnchor_v1530 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return dl_CarrierFreq_r14;
         case 1: return downlinkBitmapNonAnchor_r14;
         case 2: return dl_GapNonAnchor_r14;
         case 3: return inbandCarrierInfo_r14;
         case 4: return nrs_PowerOffsetNonAnchor_r14;
         case 5: return dl_GapNonAnchor_v1530;
         case 6: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "dl-CarrierFreq-r14";
         case 1: return "downlinkBitmapNonAnchor-r14";
         case 2: return "dl-GapNonAnchor-r14";
         case 3: return "inbandCarrierInfo-r14";
         case 4: return "nrs-PowerOffsetNonAnchor-r14";
         case 5: return "dl-GapNonAnchor-v1530";
         case 6: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean inbandCarrierInfo_r14Present = buffer.decodeBit ("inbandCarrierInfo_r14Present");
      boolean nrs_PowerOffsetNonAnchor_r14Present = buffer.decodeBit ("nrs_PowerOffsetNonAnchor_r14Present");

      // decode dl_CarrierFreq_r14

      buffer.getContext().eventDispatcher.startElement("dl_CarrierFreq_r14", -1);

      dl_CarrierFreq_r14 = new CarrierFreq_NB_r13();
      dl_CarrierFreq_r14.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("dl_CarrierFreq_r14", -1);

      // decode downlinkBitmapNonAnchor_r14

      buffer.getContext().eventDispatcher.startElement("downlinkBitmapNonAnchor_r14", -1);

      downlinkBitmapNonAnchor_r14 = new DL_CarrierConfigCommon_NB_r14_downlinkBitmapNonAnchor_r14();
      downlinkBitmapNonAnchor_r14.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("downlinkBitmapNonAnchor_r14", -1);

      // decode dl_GapNonAnchor_r14

      buffer.getContext().eventDispatcher.startElement("dl_GapNonAnchor_r14", -1);

      dl_GapNonAnchor_r14 = new DL_CarrierConfigCommon_NB_r14_dl_GapNonAnchor_r14();
      dl_GapNonAnchor_r14.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("dl_GapNonAnchor_r14", -1);

      // decode inbandCarrierInfo_r14

      if (inbandCarrierInfo_r14Present) {
         buffer.getContext().eventDispatcher.startElement("inbandCarrierInfo_r14", -1);

         inbandCarrierInfo_r14 = new DL_CarrierConfigCommon_NB_r14_inbandCarrierInfo_r14();
         inbandCarrierInfo_r14.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("inbandCarrierInfo_r14", -1);
      }
      else {
         inbandCarrierInfo_r14 = null;
      }

      // decode nrs_PowerOffsetNonAnchor_r14

      if (nrs_PowerOffsetNonAnchor_r14Present) {
         buffer.getContext().eventDispatcher.startElement("nrs_PowerOffsetNonAnchor_r14", -1);

         int tval = DL_CarrierConfigCommon_NB_r14_nrs_PowerOffsetNonAnchor_r14.decodeEnumValue (buffer);
         nrs_PowerOffsetNonAnchor_r14 = DL_CarrierConfigCommon_NB_r14_nrs_PowerOffsetNonAnchor_r14.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("nrs_PowerOffsetNonAnchor_r14", -1);
      }
      else {
         nrs_PowerOffsetNonAnchor_r14 = DL_CarrierConfigCommon_NB_r14_nrs_PowerOffsetNonAnchor_r14.dB0();
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean dl_GapNonAnchor_v1530Present = buffer.decodeBit ("dl_GapNonAnchor_v1530Present");

            // decode dl_GapNonAnchor_v1530

            if (dl_GapNonAnchor_v1530Present) {
               buffer.getContext().eventDispatcher.startElement("dl_GapNonAnchor_v1530", -1);

               dl_GapNonAnchor_v1530 = new DL_GapConfig_NB_v1530();
               dl_GapNonAnchor_v1530.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("dl_GapNonAnchor_v1530", -1);
            }
            else {
               dl_GapNonAnchor_v1530 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (dl_CarrierFreq_r14 != null) dl_CarrierFreq_r14.print (_sb, "dl_CarrierFreq_r14", _level+1);
      if (downlinkBitmapNonAnchor_r14 != null) downlinkBitmapNonAnchor_r14.print (_sb, "downlinkBitmapNonAnchor_r14", _level+1);
      if (dl_GapNonAnchor_r14 != null) dl_GapNonAnchor_r14.print (_sb, "dl_GapNonAnchor_r14", _level+1);
      if (inbandCarrierInfo_r14 != null) inbandCarrierInfo_r14.print (_sb, "inbandCarrierInfo_r14", _level+1);
      if (nrs_PowerOffsetNonAnchor_r14 != null) nrs_PowerOffsetNonAnchor_r14.print (_sb, "nrs_PowerOffsetNonAnchor_r14", _level+1);
      if (dl_GapNonAnchor_v1530 != null) dl_GapNonAnchor_v1530.print (_sb, "dl_GapNonAnchor_v1530", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
