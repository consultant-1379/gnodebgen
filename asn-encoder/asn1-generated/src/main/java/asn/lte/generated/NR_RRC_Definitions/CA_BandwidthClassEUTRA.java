/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class CA_BandwidthClassEUTRA extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CA-BandwidthClassEUTRA";
   }

   // Integer constants for switch-case
   public static final int _A = 0;
   public static final int _B = 1;
   public static final int _C = 2;
   public static final int _D = 3;
   public static final int _E = 4;
   public static final int _F = 5;

   // Singleton instances of CA_BandwidthClassEUTRA
   protected static final CA_BandwidthClassEUTRA _a = new CA_BandwidthClassEUTRA(0);
   protected static final CA_BandwidthClassEUTRA _b = new CA_BandwidthClassEUTRA(1);
   protected static final CA_BandwidthClassEUTRA _c = new CA_BandwidthClassEUTRA(2);
   protected static final CA_BandwidthClassEUTRA _d = new CA_BandwidthClassEUTRA(3);
   protected static final CA_BandwidthClassEUTRA _e = new CA_BandwidthClassEUTRA(4);
   protected static final CA_BandwidthClassEUTRA _f = new CA_BandwidthClassEUTRA(5);
   private static CA_BandwidthClassEUTRA __undefined = new CA_BandwidthClassEUTRA(-999);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    */
   protected CA_BandwidthClassEUTRA (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for a.
    */
   public static CA_BandwidthClassEUTRA a() {
      return _a;
   }

   /**
    * Singleton accessor method for b.
    */
   public static CA_BandwidthClassEUTRA b() {
      return _b;
   }

   /**
    * Singleton accessor method for c.
    */
   public static CA_BandwidthClassEUTRA c() {
      return _c;
   }

   /**
    * Singleton accessor method for d.
    */
   public static CA_BandwidthClassEUTRA d() {
      return _d;
   }

   /**
    * Singleton accessor method for e.
    */
   public static CA_BandwidthClassEUTRA e() {
      return _e;
   }

   /**
    * Singleton accessor method for f.
    */
   public static CA_BandwidthClassEUTRA f() {
      return _f;
   }

   /** Undefined value. */
   protected static CA_BandwidthClassEUTRA __undefined_() { return __undefined; }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return CA_BandwidthClassEUTRA.valueOf( CA_BandwidthClassEUTRA.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static CA_BandwidthClassEUTRA valueOf (int _value)
   {
      switch ((int)_value) {
         case 0: return a();
         case 1: return b();
         case 2: return c();
         case 3: return d();
         case 4: return e();
         case 5: return f();
         default: return __undefined_();
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      boolean extbit = buffer.decodeBit ("extbit");

      if (extbit) {
         ui = buffer.decodeSmallNonNegWholeNumber ();

         return 0x7fffffff;
      }
      else {
         ui = (int) buffer.decodeConsWholeNumber (6);

         switch (ui) {
            case 0: ret =  0; break;
            case 1: ret =  1; break;
            case 2: ret =  2; break;
            case 3: ret =  3; break;
            case 4: ret =  4; break;
            case 5: ret =  5; break;
            default: throw new Asn1InvalidEnumException (ui);
         }
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (CA_BandwidthClassEUTRA.valueOf(ret).toString());

      return ret;
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("a");
         case 1: return ("b");
         case 2: return ("c");
         case 3: return ("d");
         case 4: return ("e");
         case 5: return ("f");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
