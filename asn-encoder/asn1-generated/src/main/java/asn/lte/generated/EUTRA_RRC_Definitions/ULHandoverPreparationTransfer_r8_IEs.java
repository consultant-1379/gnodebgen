/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class ULHandoverPreparationTransfer_r8_IEs extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ULHandoverPreparationTransfer-r8-IEs";
   }

   public CDMA2000_Type cdma2000_Type = null;
   public Asn1BitString meid;  // optional
   public DedicatedInfoCDMA2000 dedicatedInfo;
   public ULHandoverPreparationTransfer_v8a0_IEs nonCriticalExtension;  // optional

   public ULHandoverPreparationTransfer_r8_IEs () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ULHandoverPreparationTransfer_r8_IEs (
      CDMA2000_Type cdma2000_Type_,
      Asn1BitString meid_,
      DedicatedInfoCDMA2000 dedicatedInfo_,
      ULHandoverPreparationTransfer_v8a0_IEs nonCriticalExtension_
   ) {
      super();
      cdma2000_Type = cdma2000_Type_;
      meid = meid_;
      dedicatedInfo = dedicatedInfo_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public ULHandoverPreparationTransfer_r8_IEs (
      CDMA2000_Type cdma2000_Type_,
      DedicatedInfoCDMA2000 dedicatedInfo_
   ) {
      super();
      cdma2000_Type = cdma2000_Type_;
      dedicatedInfo = dedicatedInfo_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public ULHandoverPreparationTransfer_r8_IEs (CDMA2000_Type cdma2000_Type_,
      Asn1BitString meid_,
      byte[] dedicatedInfo_,
      ULHandoverPreparationTransfer_v8a0_IEs nonCriticalExtension_
   ) {
      super();
      cdma2000_Type = cdma2000_Type_;
      meid = meid_;
      dedicatedInfo = new DedicatedInfoCDMA2000 (dedicatedInfo_);
      nonCriticalExtension = nonCriticalExtension_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public ULHandoverPreparationTransfer_r8_IEs (
      CDMA2000_Type cdma2000_Type_,
      byte[] dedicatedInfo_
   ) {
      super();
      cdma2000_Type = cdma2000_Type_;
      dedicatedInfo = new DedicatedInfoCDMA2000 (dedicatedInfo_);
   }

   public void init () {
      cdma2000_Type = null;
      meid = null;
      dedicatedInfo = null;
      nonCriticalExtension = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return cdma2000_Type;
         case 1: return meid;
         case 2: return dedicatedInfo;
         case 3: return nonCriticalExtension;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "cdma2000-Type";
         case 1: return "meid";
         case 2: return "dedicatedInfo";
         case 3: return "nonCriticalExtension";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean meidPresent = buffer.decodeBit ("meidPresent");
      boolean nonCriticalExtensionPresent = buffer.decodeBit ("nonCriticalExtensionPresent");

      // decode cdma2000_Type

      buffer.getContext().eventDispatcher.startElement("cdma2000_Type", -1);

      {
         int tval = CDMA2000_Type.decodeEnumValue (buffer);
         cdma2000_Type = CDMA2000_Type.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("cdma2000_Type", -1);

      // decode meid

      if (meidPresent) {
         buffer.getContext().eventDispatcher.startElement("meid", -1);

         meid = new Asn1BitString();
         meid.decode (buffer, 56, 56);

         buffer.invokeCharacters(meid.toString());
         buffer.getContext().eventDispatcher.endElement("meid", -1);
      }
      else {
         meid = null;
      }

      // decode dedicatedInfo

      buffer.getContext().eventDispatcher.startElement("dedicatedInfo", -1);

      dedicatedInfo = new DedicatedInfoCDMA2000();
      dedicatedInfo.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("dedicatedInfo", -1);

      // decode nonCriticalExtension

      if (nonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension = new ULHandoverPreparationTransfer_v8a0_IEs();
         nonCriticalExtension.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }
      else {
         nonCriticalExtension = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (cdma2000_Type != null) cdma2000_Type.print (_sb, "cdma2000_Type", _level+1);
      if (meid != null) meid.print (_sb, "meid", _level+1);
      if (dedicatedInfo != null) dedicatedInfo.print (_sb, "dedicatedInfo", _level+1);
      if (nonCriticalExtension != null) nonCriticalExtension.print (_sb, "nonCriticalExtension", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
