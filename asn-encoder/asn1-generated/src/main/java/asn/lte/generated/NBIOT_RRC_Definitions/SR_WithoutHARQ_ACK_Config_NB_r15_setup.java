/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NBIOT_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SR_WithoutHARQ_ACK_Config_NB_r15_setup extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NBIOT_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public Asn1Integer sr_ProhibitTimer_r15;  // optional
   public SR_NPRACH_Resource_NB_r15 sr_NPRACH_Resource_r15;  // optional

   public SR_WithoutHARQ_ACK_Config_NB_r15_setup () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SR_WithoutHARQ_ACK_Config_NB_r15_setup (
      Asn1Integer sr_ProhibitTimer_r15_,
      SR_NPRACH_Resource_NB_r15 sr_NPRACH_Resource_r15_
   ) {
      super();
      sr_ProhibitTimer_r15 = sr_ProhibitTimer_r15_;
      sr_NPRACH_Resource_r15 = sr_NPRACH_Resource_r15_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SR_WithoutHARQ_ACK_Config_NB_r15_setup (long sr_ProhibitTimer_r15_,
      SR_NPRACH_Resource_NB_r15 sr_NPRACH_Resource_r15_
   ) {
      super();
      sr_ProhibitTimer_r15 = new Asn1Integer (sr_ProhibitTimer_r15_);
      sr_NPRACH_Resource_r15 = sr_NPRACH_Resource_r15_;
   }

   public void init () {
      sr_ProhibitTimer_r15 = null;
      sr_NPRACH_Resource_r15 = null;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return sr_ProhibitTimer_r15;
         case 1: return sr_NPRACH_Resource_r15;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "sr-ProhibitTimer-r15";
         case 1: return "sr-NPRACH-Resource-r15";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean sr_ProhibitTimer_r15Present = buffer.decodeBit ("sr_ProhibitTimer_r15Present");
      boolean sr_NPRACH_Resource_r15Present = buffer.decodeBit ("sr_NPRACH_Resource_r15Present");

      // decode sr_ProhibitTimer_r15

      if (sr_ProhibitTimer_r15Present) {
         buffer.getContext().eventDispatcher.startElement("sr_ProhibitTimer_r15", -1);

         sr_ProhibitTimer_r15 = new Asn1Integer();
         sr_ProhibitTimer_r15.decode (buffer, 0, 7);

         buffer.invokeCharacters(sr_ProhibitTimer_r15.toString());
         buffer.getContext().eventDispatcher.endElement("sr_ProhibitTimer_r15", -1);
      }
      else {
         sr_ProhibitTimer_r15 = null;
      }

      // decode sr_NPRACH_Resource_r15

      if (sr_NPRACH_Resource_r15Present) {
         buffer.getContext().eventDispatcher.startElement("sr_NPRACH_Resource_r15", -1);

         sr_NPRACH_Resource_r15 = new SR_NPRACH_Resource_NB_r15();
         sr_NPRACH_Resource_r15.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sr_NPRACH_Resource_r15", -1);
      }
      else {
         sr_NPRACH_Resource_r15 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (sr_ProhibitTimer_r15 != null) sr_ProhibitTimer_r15.print (_sb, "sr_ProhibitTimer_r15", _level+1);
      if (sr_NPRACH_Resource_r15 != null) sr_NPRACH_Resource_r15.print (_sb, "sr_NPRACH_Resource_r15", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
