/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class PDCP_Config_t_Reordering extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ENUMERATED";
   }

   // Integer constants for switch-case
   public static final int _MS0 = 0;
   public static final int _MS1 = 1;
   public static final int _MS2 = 2;
   public static final int _MS4 = 3;
   public static final int _MS5 = 4;
   public static final int _MS8 = 5;
   public static final int _MS10 = 6;
   public static final int _MS15 = 7;
   public static final int _MS20 = 8;
   public static final int _MS30 = 9;
   public static final int _MS40 = 10;
   public static final int _MS50 = 11;
   public static final int _MS60 = 12;
   public static final int _MS80 = 13;
   public static final int _MS100 = 14;
   public static final int _MS120 = 15;
   public static final int _MS140 = 16;
   public static final int _MS160 = 17;
   public static final int _MS180 = 18;
   public static final int _MS200 = 19;
   public static final int _MS220 = 20;
   public static final int _MS240 = 21;
   public static final int _MS260 = 22;
   public static final int _MS280 = 23;
   public static final int _MS300 = 24;
   public static final int _MS500 = 25;
   public static final int _MS750 = 26;
   public static final int _MS1000 = 27;
   public static final int _MS1250 = 28;
   public static final int _MS1500 = 29;
   public static final int _MS1750 = 30;
   public static final int _MS2000 = 31;
   public static final int _MS2250 = 32;
   public static final int _MS2500 = 33;
   public static final int _MS2750 = 34;
   public static final int _MS3000 = 35;
   public static final int _SPARE28 = 36;
   public static final int _SPARE27 = 37;
   public static final int _SPARE26 = 38;
   public static final int _SPARE25 = 39;
   public static final int _SPARE24 = 40;
   public static final int _SPARE23 = 41;
   public static final int _SPARE22 = 42;
   public static final int _SPARE21 = 43;
   public static final int _SPARE20 = 44;
   public static final int _SPARE19 = 45;
   public static final int _SPARE18 = 46;
   public static final int _SPARE17 = 47;
   public static final int _SPARE16 = 48;
   public static final int _SPARE15 = 49;
   public static final int _SPARE14 = 50;
   public static final int _SPARE13 = 51;
   public static final int _SPARE12 = 52;
   public static final int _SPARE11 = 53;
   public static final int _SPARE10 = 54;
   public static final int _SPARE09 = 55;
   public static final int _SPARE08 = 56;
   public static final int _SPARE07 = 57;
   public static final int _SPARE06 = 58;
   public static final int _SPARE05 = 59;
   public static final int _SPARE04 = 60;
   public static final int _SPARE03 = 61;
   public static final int _SPARE02 = 62;
   public static final int _SPARE01 = 63;

   // Singleton instances of PDCP_Config_t_Reordering
   protected static final PDCP_Config_t_Reordering _ms0 = new PDCP_Config_t_Reordering(0);
   protected static final PDCP_Config_t_Reordering _ms1 = new PDCP_Config_t_Reordering(1);
   protected static final PDCP_Config_t_Reordering _ms2 = new PDCP_Config_t_Reordering(2);
   protected static final PDCP_Config_t_Reordering _ms4 = new PDCP_Config_t_Reordering(3);
   protected static final PDCP_Config_t_Reordering _ms5 = new PDCP_Config_t_Reordering(4);
   protected static final PDCP_Config_t_Reordering _ms8 = new PDCP_Config_t_Reordering(5);
   protected static final PDCP_Config_t_Reordering _ms10 = new PDCP_Config_t_Reordering(6);
   protected static final PDCP_Config_t_Reordering _ms15 = new PDCP_Config_t_Reordering(7);
   protected static final PDCP_Config_t_Reordering _ms20 = new PDCP_Config_t_Reordering(8);
   protected static final PDCP_Config_t_Reordering _ms30 = new PDCP_Config_t_Reordering(9);
   protected static final PDCP_Config_t_Reordering _ms40 = new PDCP_Config_t_Reordering(10);
   protected static final PDCP_Config_t_Reordering _ms50 = new PDCP_Config_t_Reordering(11);
   protected static final PDCP_Config_t_Reordering _ms60 = new PDCP_Config_t_Reordering(12);
   protected static final PDCP_Config_t_Reordering _ms80 = new PDCP_Config_t_Reordering(13);
   protected static final PDCP_Config_t_Reordering _ms100 = new PDCP_Config_t_Reordering(14);
   protected static final PDCP_Config_t_Reordering _ms120 = new PDCP_Config_t_Reordering(15);
   protected static final PDCP_Config_t_Reordering _ms140 = new PDCP_Config_t_Reordering(16);
   protected static final PDCP_Config_t_Reordering _ms160 = new PDCP_Config_t_Reordering(17);
   protected static final PDCP_Config_t_Reordering _ms180 = new PDCP_Config_t_Reordering(18);
   protected static final PDCP_Config_t_Reordering _ms200 = new PDCP_Config_t_Reordering(19);
   protected static final PDCP_Config_t_Reordering _ms220 = new PDCP_Config_t_Reordering(20);
   protected static final PDCP_Config_t_Reordering _ms240 = new PDCP_Config_t_Reordering(21);
   protected static final PDCP_Config_t_Reordering _ms260 = new PDCP_Config_t_Reordering(22);
   protected static final PDCP_Config_t_Reordering _ms280 = new PDCP_Config_t_Reordering(23);
   protected static final PDCP_Config_t_Reordering _ms300 = new PDCP_Config_t_Reordering(24);
   protected static final PDCP_Config_t_Reordering _ms500 = new PDCP_Config_t_Reordering(25);
   protected static final PDCP_Config_t_Reordering _ms750 = new PDCP_Config_t_Reordering(26);
   protected static final PDCP_Config_t_Reordering _ms1000 = new PDCP_Config_t_Reordering(27);
   protected static final PDCP_Config_t_Reordering _ms1250 = new PDCP_Config_t_Reordering(28);
   protected static final PDCP_Config_t_Reordering _ms1500 = new PDCP_Config_t_Reordering(29);
   protected static final PDCP_Config_t_Reordering _ms1750 = new PDCP_Config_t_Reordering(30);
   protected static final PDCP_Config_t_Reordering _ms2000 = new PDCP_Config_t_Reordering(31);
   protected static final PDCP_Config_t_Reordering _ms2250 = new PDCP_Config_t_Reordering(32);
   protected static final PDCP_Config_t_Reordering _ms2500 = new PDCP_Config_t_Reordering(33);
   protected static final PDCP_Config_t_Reordering _ms2750 = new PDCP_Config_t_Reordering(34);
   protected static final PDCP_Config_t_Reordering _ms3000 = new PDCP_Config_t_Reordering(35);
   protected static final PDCP_Config_t_Reordering _spare28 = new PDCP_Config_t_Reordering(36);
   protected static final PDCP_Config_t_Reordering _spare27 = new PDCP_Config_t_Reordering(37);
   protected static final PDCP_Config_t_Reordering _spare26 = new PDCP_Config_t_Reordering(38);
   protected static final PDCP_Config_t_Reordering _spare25 = new PDCP_Config_t_Reordering(39);
   protected static final PDCP_Config_t_Reordering _spare24 = new PDCP_Config_t_Reordering(40);
   protected static final PDCP_Config_t_Reordering _spare23 = new PDCP_Config_t_Reordering(41);
   protected static final PDCP_Config_t_Reordering _spare22 = new PDCP_Config_t_Reordering(42);
   protected static final PDCP_Config_t_Reordering _spare21 = new PDCP_Config_t_Reordering(43);
   protected static final PDCP_Config_t_Reordering _spare20 = new PDCP_Config_t_Reordering(44);
   protected static final PDCP_Config_t_Reordering _spare19 = new PDCP_Config_t_Reordering(45);
   protected static final PDCP_Config_t_Reordering _spare18 = new PDCP_Config_t_Reordering(46);
   protected static final PDCP_Config_t_Reordering _spare17 = new PDCP_Config_t_Reordering(47);
   protected static final PDCP_Config_t_Reordering _spare16 = new PDCP_Config_t_Reordering(48);
   protected static final PDCP_Config_t_Reordering _spare15 = new PDCP_Config_t_Reordering(49);
   protected static final PDCP_Config_t_Reordering _spare14 = new PDCP_Config_t_Reordering(50);
   protected static final PDCP_Config_t_Reordering _spare13 = new PDCP_Config_t_Reordering(51);
   protected static final PDCP_Config_t_Reordering _spare12 = new PDCP_Config_t_Reordering(52);
   protected static final PDCP_Config_t_Reordering _spare11 = new PDCP_Config_t_Reordering(53);
   protected static final PDCP_Config_t_Reordering _spare10 = new PDCP_Config_t_Reordering(54);
   protected static final PDCP_Config_t_Reordering _spare09 = new PDCP_Config_t_Reordering(55);
   protected static final PDCP_Config_t_Reordering _spare08 = new PDCP_Config_t_Reordering(56);
   protected static final PDCP_Config_t_Reordering _spare07 = new PDCP_Config_t_Reordering(57);
   protected static final PDCP_Config_t_Reordering _spare06 = new PDCP_Config_t_Reordering(58);
   protected static final PDCP_Config_t_Reordering _spare05 = new PDCP_Config_t_Reordering(59);
   protected static final PDCP_Config_t_Reordering _spare04 = new PDCP_Config_t_Reordering(60);
   protected static final PDCP_Config_t_Reordering _spare03 = new PDCP_Config_t_Reordering(61);
   protected static final PDCP_Config_t_Reordering _spare02 = new PDCP_Config_t_Reordering(62);
   protected static final PDCP_Config_t_Reordering _spare01 = new PDCP_Config_t_Reordering(63);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    *   7
    *   8
    *   9
    *   10
    *   11
    *   12
    *   13
    *   14
    *   15
    *   16
    *   17
    *   18
    *   19
    *   20
    *   21
    *   22
    *   23
    *   24
    *   25
    *   26
    *   27
    *   28
    *   29
    *   30
    *   31
    *   32
    *   33
    *   34
    *   35
    *   36
    *   37
    *   38
    *   39
    *   40
    *   41
    *   42
    *   43
    *   44
    *   45
    *   46
    *   47
    *   48
    *   49
    *   50
    *   51
    *   52
    *   53
    *   54
    *   55
    *   56
    *   57
    *   58
    *   59
    *   60
    *   61
    *   62
    *   63
    */
   protected PDCP_Config_t_Reordering (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for ms0.
    */
   public static PDCP_Config_t_Reordering ms0() {
      return _ms0;
   }

   /**
    * Singleton accessor method for ms1.
    */
   public static PDCP_Config_t_Reordering ms1() {
      return _ms1;
   }

   /**
    * Singleton accessor method for ms2.
    */
   public static PDCP_Config_t_Reordering ms2() {
      return _ms2;
   }

   /**
    * Singleton accessor method for ms4.
    */
   public static PDCP_Config_t_Reordering ms4() {
      return _ms4;
   }

   /**
    * Singleton accessor method for ms5.
    */
   public static PDCP_Config_t_Reordering ms5() {
      return _ms5;
   }

   /**
    * Singleton accessor method for ms8.
    */
   public static PDCP_Config_t_Reordering ms8() {
      return _ms8;
   }

   /**
    * Singleton accessor method for ms10.
    */
   public static PDCP_Config_t_Reordering ms10() {
      return _ms10;
   }

   /**
    * Singleton accessor method for ms15.
    */
   public static PDCP_Config_t_Reordering ms15() {
      return _ms15;
   }

   /**
    * Singleton accessor method for ms20.
    */
   public static PDCP_Config_t_Reordering ms20() {
      return _ms20;
   }

   /**
    * Singleton accessor method for ms30.
    */
   public static PDCP_Config_t_Reordering ms30() {
      return _ms30;
   }

   /**
    * Singleton accessor method for ms40.
    */
   public static PDCP_Config_t_Reordering ms40() {
      return _ms40;
   }

   /**
    * Singleton accessor method for ms50.
    */
   public static PDCP_Config_t_Reordering ms50() {
      return _ms50;
   }

   /**
    * Singleton accessor method for ms60.
    */
   public static PDCP_Config_t_Reordering ms60() {
      return _ms60;
   }

   /**
    * Singleton accessor method for ms80.
    */
   public static PDCP_Config_t_Reordering ms80() {
      return _ms80;
   }

   /**
    * Singleton accessor method for ms100.
    */
   public static PDCP_Config_t_Reordering ms100() {
      return _ms100;
   }

   /**
    * Singleton accessor method for ms120.
    */
   public static PDCP_Config_t_Reordering ms120() {
      return _ms120;
   }

   /**
    * Singleton accessor method for ms140.
    */
   public static PDCP_Config_t_Reordering ms140() {
      return _ms140;
   }

   /**
    * Singleton accessor method for ms160.
    */
   public static PDCP_Config_t_Reordering ms160() {
      return _ms160;
   }

   /**
    * Singleton accessor method for ms180.
    */
   public static PDCP_Config_t_Reordering ms180() {
      return _ms180;
   }

   /**
    * Singleton accessor method for ms200.
    */
   public static PDCP_Config_t_Reordering ms200() {
      return _ms200;
   }

   /**
    * Singleton accessor method for ms220.
    */
   public static PDCP_Config_t_Reordering ms220() {
      return _ms220;
   }

   /**
    * Singleton accessor method for ms240.
    */
   public static PDCP_Config_t_Reordering ms240() {
      return _ms240;
   }

   /**
    * Singleton accessor method for ms260.
    */
   public static PDCP_Config_t_Reordering ms260() {
      return _ms260;
   }

   /**
    * Singleton accessor method for ms280.
    */
   public static PDCP_Config_t_Reordering ms280() {
      return _ms280;
   }

   /**
    * Singleton accessor method for ms300.
    */
   public static PDCP_Config_t_Reordering ms300() {
      return _ms300;
   }

   /**
    * Singleton accessor method for ms500.
    */
   public static PDCP_Config_t_Reordering ms500() {
      return _ms500;
   }

   /**
    * Singleton accessor method for ms750.
    */
   public static PDCP_Config_t_Reordering ms750() {
      return _ms750;
   }

   /**
    * Singleton accessor method for ms1000.
    */
   public static PDCP_Config_t_Reordering ms1000() {
      return _ms1000;
   }

   /**
    * Singleton accessor method for ms1250.
    */
   public static PDCP_Config_t_Reordering ms1250() {
      return _ms1250;
   }

   /**
    * Singleton accessor method for ms1500.
    */
   public static PDCP_Config_t_Reordering ms1500() {
      return _ms1500;
   }

   /**
    * Singleton accessor method for ms1750.
    */
   public static PDCP_Config_t_Reordering ms1750() {
      return _ms1750;
   }

   /**
    * Singleton accessor method for ms2000.
    */
   public static PDCP_Config_t_Reordering ms2000() {
      return _ms2000;
   }

   /**
    * Singleton accessor method for ms2250.
    */
   public static PDCP_Config_t_Reordering ms2250() {
      return _ms2250;
   }

   /**
    * Singleton accessor method for ms2500.
    */
   public static PDCP_Config_t_Reordering ms2500() {
      return _ms2500;
   }

   /**
    * Singleton accessor method for ms2750.
    */
   public static PDCP_Config_t_Reordering ms2750() {
      return _ms2750;
   }

   /**
    * Singleton accessor method for ms3000.
    */
   public static PDCP_Config_t_Reordering ms3000() {
      return _ms3000;
   }

   /**
    * Singleton accessor method for spare28.
    */
   public static PDCP_Config_t_Reordering spare28() {
      return _spare28;
   }

   /**
    * Singleton accessor method for spare27.
    */
   public static PDCP_Config_t_Reordering spare27() {
      return _spare27;
   }

   /**
    * Singleton accessor method for spare26.
    */
   public static PDCP_Config_t_Reordering spare26() {
      return _spare26;
   }

   /**
    * Singleton accessor method for spare25.
    */
   public static PDCP_Config_t_Reordering spare25() {
      return _spare25;
   }

   /**
    * Singleton accessor method for spare24.
    */
   public static PDCP_Config_t_Reordering spare24() {
      return _spare24;
   }

   /**
    * Singleton accessor method for spare23.
    */
   public static PDCP_Config_t_Reordering spare23() {
      return _spare23;
   }

   /**
    * Singleton accessor method for spare22.
    */
   public static PDCP_Config_t_Reordering spare22() {
      return _spare22;
   }

   /**
    * Singleton accessor method for spare21.
    */
   public static PDCP_Config_t_Reordering spare21() {
      return _spare21;
   }

   /**
    * Singleton accessor method for spare20.
    */
   public static PDCP_Config_t_Reordering spare20() {
      return _spare20;
   }

   /**
    * Singleton accessor method for spare19.
    */
   public static PDCP_Config_t_Reordering spare19() {
      return _spare19;
   }

   /**
    * Singleton accessor method for spare18.
    */
   public static PDCP_Config_t_Reordering spare18() {
      return _spare18;
   }

   /**
    * Singleton accessor method for spare17.
    */
   public static PDCP_Config_t_Reordering spare17() {
      return _spare17;
   }

   /**
    * Singleton accessor method for spare16.
    */
   public static PDCP_Config_t_Reordering spare16() {
      return _spare16;
   }

   /**
    * Singleton accessor method for spare15.
    */
   public static PDCP_Config_t_Reordering spare15() {
      return _spare15;
   }

   /**
    * Singleton accessor method for spare14.
    */
   public static PDCP_Config_t_Reordering spare14() {
      return _spare14;
   }

   /**
    * Singleton accessor method for spare13.
    */
   public static PDCP_Config_t_Reordering spare13() {
      return _spare13;
   }

   /**
    * Singleton accessor method for spare12.
    */
   public static PDCP_Config_t_Reordering spare12() {
      return _spare12;
   }

   /**
    * Singleton accessor method for spare11.
    */
   public static PDCP_Config_t_Reordering spare11() {
      return _spare11;
   }

   /**
    * Singleton accessor method for spare10.
    */
   public static PDCP_Config_t_Reordering spare10() {
      return _spare10;
   }

   /**
    * Singleton accessor method for spare09.
    */
   public static PDCP_Config_t_Reordering spare09() {
      return _spare09;
   }

   /**
    * Singleton accessor method for spare08.
    */
   public static PDCP_Config_t_Reordering spare08() {
      return _spare08;
   }

   /**
    * Singleton accessor method for spare07.
    */
   public static PDCP_Config_t_Reordering spare07() {
      return _spare07;
   }

   /**
    * Singleton accessor method for spare06.
    */
   public static PDCP_Config_t_Reordering spare06() {
      return _spare06;
   }

   /**
    * Singleton accessor method for spare05.
    */
   public static PDCP_Config_t_Reordering spare05() {
      return _spare05;
   }

   /**
    * Singleton accessor method for spare04.
    */
   public static PDCP_Config_t_Reordering spare04() {
      return _spare04;
   }

   /**
    * Singleton accessor method for spare03.
    */
   public static PDCP_Config_t_Reordering spare03() {
      return _spare03;
   }

   /**
    * Singleton accessor method for spare02.
    */
   public static PDCP_Config_t_Reordering spare02() {
      return _spare02;
   }

   /**
    * Singleton accessor method for spare01.
    */
   public static PDCP_Config_t_Reordering spare01() {
      return _spare01;
   }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return PDCP_Config_t_Reordering.valueOf( PDCP_Config_t_Reordering.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static PDCP_Config_t_Reordering valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 0: return ms0();
         case 1: return ms1();
         case 2: return ms2();
         case 3: return ms4();
         case 4: return ms5();
         case 5: return ms8();
         case 6: return ms10();
         case 7: return ms15();
         case 8: return ms20();
         case 9: return ms30();
         case 10: return ms40();
         case 11: return ms50();
         case 12: return ms60();
         case 13: return ms80();
         case 14: return ms100();
         case 15: return ms120();
         case 16: return ms140();
         case 17: return ms160();
         case 18: return ms180();
         case 19: return ms200();
         case 20: return ms220();
         case 21: return ms240();
         case 22: return ms260();
         case 23: return ms280();
         case 24: return ms300();
         case 25: return ms500();
         case 26: return ms750();
         case 27: return ms1000();
         case 28: return ms1250();
         case 29: return ms1500();
         case 30: return ms1750();
         case 31: return ms2000();
         case 32: return ms2250();
         case 33: return ms2500();
         case 34: return ms2750();
         case 35: return ms3000();
         case 36: return spare28();
         case 37: return spare27();
         case 38: return spare26();
         case 39: return spare25();
         case 40: return spare24();
         case 41: return spare23();
         case 42: return spare22();
         case 43: return spare21();
         case 44: return spare20();
         case 45: return spare19();
         case 46: return spare18();
         case 47: return spare17();
         case 48: return spare16();
         case 49: return spare15();
         case 50: return spare14();
         case 51: return spare13();
         case 52: return spare12();
         case 53: return spare11();
         case 54: return spare10();
         case 55: return spare09();
         case 56: return spare08();
         case 57: return spare07();
         case 58: return spare06();
         case 59: return spare05();
         case 60: return spare04();
         case 61: return spare03();
         case 62: return spare02();
         case 63: return spare01();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      ui = (int) buffer.decodeConsWholeNumber (64);

      switch (ui) {
         case 0: ret =  0; break;
         case 1: ret =  1; break;
         case 2: ret =  2; break;
         case 3: ret =  3; break;
         case 4: ret =  4; break;
         case 5: ret =  5; break;
         case 6: ret =  6; break;
         case 7: ret =  7; break;
         case 8: ret =  8; break;
         case 9: ret =  9; break;
         case 10: ret =  10; break;
         case 11: ret =  11; break;
         case 12: ret =  12; break;
         case 13: ret =  13; break;
         case 14: ret =  14; break;
         case 15: ret =  15; break;
         case 16: ret =  16; break;
         case 17: ret =  17; break;
         case 18: ret =  18; break;
         case 19: ret =  19; break;
         case 20: ret =  20; break;
         case 21: ret =  21; break;
         case 22: ret =  22; break;
         case 23: ret =  23; break;
         case 24: ret =  24; break;
         case 25: ret =  25; break;
         case 26: ret =  26; break;
         case 27: ret =  27; break;
         case 28: ret =  28; break;
         case 29: ret =  29; break;
         case 30: ret =  30; break;
         case 31: ret =  31; break;
         case 32: ret =  32; break;
         case 33: ret =  33; break;
         case 34: ret =  34; break;
         case 35: ret =  35; break;
         case 36: ret =  36; break;
         case 37: ret =  37; break;
         case 38: ret =  38; break;
         case 39: ret =  39; break;
         case 40: ret =  40; break;
         case 41: ret =  41; break;
         case 42: ret =  42; break;
         case 43: ret =  43; break;
         case 44: ret =  44; break;
         case 45: ret =  45; break;
         case 46: ret =  46; break;
         case 47: ret =  47; break;
         case 48: ret =  48; break;
         case 49: ret =  49; break;
         case 50: ret =  50; break;
         case 51: ret =  51; break;
         case 52: ret =  52; break;
         case 53: ret =  53; break;
         case 54: ret =  54; break;
         case 55: ret =  55; break;
         case 56: ret =  56; break;
         case 57: ret =  57; break;
         case 58: ret =  58; break;
         case 59: ret =  59; break;
         case 60: ret =  60; break;
         case 61: ret =  61; break;
         case 62: ret =  62; break;
         case 63: ret =  63; break;
         default: throw new Asn1InvalidEnumException (ui);
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (PDCP_Config_t_Reordering.valueOf(ret).toString());

      return ret;
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("ms0");
         case 1: return ("ms1");
         case 2: return ("ms2");
         case 3: return ("ms4");
         case 4: return ("ms5");
         case 5: return ("ms8");
         case 6: return ("ms10");
         case 7: return ("ms15");
         case 8: return ("ms20");
         case 9: return ("ms30");
         case 10: return ("ms40");
         case 11: return ("ms50");
         case 12: return ("ms60");
         case 13: return ("ms80");
         case 14: return ("ms100");
         case 15: return ("ms120");
         case 16: return ("ms140");
         case 17: return ("ms160");
         case 18: return ("ms180");
         case 19: return ("ms200");
         case 20: return ("ms220");
         case 21: return ("ms240");
         case 22: return ("ms260");
         case 23: return ("ms280");
         case 24: return ("ms300");
         case 25: return ("ms500");
         case 26: return ("ms750");
         case 27: return ("ms1000");
         case 28: return ("ms1250");
         case 29: return ("ms1500");
         case 30: return ("ms1750");
         case 31: return ("ms2000");
         case 32: return ("ms2250");
         case 33: return ("ms2500");
         case 34: return ("ms2750");
         case 35: return ("ms3000");
         case 36: return ("spare28");
         case 37: return ("spare27");
         case 38: return ("spare26");
         case 39: return ("spare25");
         case 40: return ("spare24");
         case 41: return ("spare23");
         case 42: return ("spare22");
         case 43: return ("spare21");
         case 44: return ("spare20");
         case 45: return ("spare19");
         case 46: return ("spare18");
         case 47: return ("spare17");
         case 48: return ("spare16");
         case 49: return ("spare15");
         case 50: return ("spare14");
         case 51: return ("spare13");
         case 52: return ("spare12");
         case 53: return ("spare11");
         case 54: return ("spare10");
         case 55: return ("spare09");
         case 56: return ("spare08");
         case 57: return ("spare07");
         case 58: return ("spare06");
         case 59: return ("spare05");
         case 60: return ("spare04");
         case 61: return ("spare03");
         case 62: return ("spare02");
         case 63: return ("spare01");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
