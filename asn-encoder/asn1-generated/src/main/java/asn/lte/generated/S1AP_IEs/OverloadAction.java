/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.S1AP_IEs;

import com.objsys.asn1j.runtime.*;

public class OverloadAction extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_S1AP_IEsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "OverloadAction";
   }

   // Integer constants for switch-case
   public static final int _REJECT_NON_EMERGENCY_MO_DT = 0;
   public static final int _REJECT_RRC_CR_SIGNALLING = 1;
   public static final int _PERMIT_EMERGENCY_SESSIONS_AND_MOBILE_TERMINATED_SERVICES_ONLY = 2;
   public static final int _PERMIT_HIGH_PRIORITY_SESSIONS_AND_MOBILE_TERMINATED_SERVICES_ONLY = 3;
   public static final int _REJECT_DELAY_TOLERANT_ACCESS = 4;
   public static final int _PERMIT_HIGH_PRIORITY_SESSIONS_AND_EXCEPTION_REPORTING_AND_MOBILE_TERMINATED_SERVICES_ONLY = 5;
   public static final int _NOT_ACCEPT_MO_DATA_OR_DELAY_TOLERANT_ACCESS_FROM_CP_CIOT = 6;

   // Singleton instances of OverloadAction
   protected static final OverloadAction _reject_non_emergency_mo_dt = new OverloadAction(0);
   protected static final OverloadAction _reject_rrc_cr_signalling = new OverloadAction(1);
   protected static final OverloadAction _permit_emergency_sessions_and_mobile_terminated_services_only = new OverloadAction(2);
   protected static final OverloadAction _permit_high_priority_sessions_and_mobile_terminated_services_only = new OverloadAction(3);
   protected static final OverloadAction _reject_delay_tolerant_access = new OverloadAction(4);
   protected static final OverloadAction _permit_high_priority_sessions_and_exception_reporting_and_mobile_terminated_services_only = new OverloadAction(5);
   protected static final OverloadAction _not_accept_mo_data_or_delay_tolerant_access_from_CP_CIoT = new OverloadAction(6);
   private static OverloadAction __undefined = new OverloadAction(-999);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    */
   protected OverloadAction (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for reject_non_emergency_mo_dt.
    */
   public static OverloadAction reject_non_emergency_mo_dt() {
      return _reject_non_emergency_mo_dt;
   }

   /**
    * Singleton accessor method for reject_rrc_cr_signalling.
    */
   public static OverloadAction reject_rrc_cr_signalling() {
      return _reject_rrc_cr_signalling;
   }

   /**
    * Singleton accessor method for permit_emergency_sessions_and_mobile_terminated_services_only.
    */
   public static OverloadAction permit_emergency_sessions_and_mobile_terminated_services_only() {
      return _permit_emergency_sessions_and_mobile_terminated_services_only;
   }

   /**
    * Singleton accessor method for permit_high_priority_sessions_and_mobile_terminated_services_only.
    */
   public static OverloadAction permit_high_priority_sessions_and_mobile_terminated_services_only() {
      return _permit_high_priority_sessions_and_mobile_terminated_services_only;
   }

   /**
    * Singleton accessor method for reject_delay_tolerant_access.
    */
   public static OverloadAction reject_delay_tolerant_access() {
      return _reject_delay_tolerant_access;
   }

   /**
    * Singleton accessor method for permit_high_priority_sessions_and_exception_reporting_and_mobile_terminated_services_only.
    */
   public static OverloadAction permit_high_priority_sessions_and_exception_reporting_and_mobile_terminated_services_only() {
      return _permit_high_priority_sessions_and_exception_reporting_and_mobile_terminated_services_only;
   }

   /**
    * Singleton accessor method for not_accept_mo_data_or_delay_tolerant_access_from_CP_CIoT.
    */
   public static OverloadAction not_accept_mo_data_or_delay_tolerant_access_from_CP_CIoT() {
      return _not_accept_mo_data_or_delay_tolerant_access_from_CP_CIoT;
   }

   /** Undefined value. */
   protected static OverloadAction __undefined_() { return __undefined; }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return OverloadAction.valueOf( OverloadAction.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static OverloadAction valueOf (int _value)
   {
      switch ((int)_value) {
         case 0: return reject_non_emergency_mo_dt();
         case 1: return reject_rrc_cr_signalling();
         case 2: return permit_emergency_sessions_and_mobile_terminated_services_only();
         case 3: return permit_high_priority_sessions_and_mobile_terminated_services_only();
         case 4: return reject_delay_tolerant_access();
         case 5: return permit_high_priority_sessions_and_exception_reporting_and_mobile_terminated_services_only();
         case 6: return not_accept_mo_data_or_delay_tolerant_access_from_CP_CIoT();
         default: return __undefined_();
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      boolean extbit = buffer.decodeBit ("extbit");

      if (extbit) {
         ui = buffer.decodeSmallNonNegWholeNumber ();

         switch (ui) {
            case 0: ret = 3; break;
            case 1: ret = 4; break;
            case 2: ret = 5; break;
            case 3: ret = 6; break;
            default: ret = 0x7fffffff; break;
         }
      }
      else {
         ui = (int) buffer.decodeConsWholeNumber (3);

         switch (ui) {
            case 0: ret =  0; break;
            case 1: ret =  1; break;
            case 2: ret =  2; break;
            default: throw new Asn1InvalidEnumException (ui);
         }
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (OverloadAction.valueOf(ret).toString());

      return ret;
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("reject-non-emergency-mo-dt");
         case 1: return ("reject-rrc-cr-signalling");
         case 2: return ("permit-emergency-sessions-and-mobile-terminated-services-only");
         case 3: return ("permit-high-priority-sessions-and-mobile-terminated-services-only");
         case 4: return ("reject-delay-tolerant-access");
         case 5: return ("permit-high-priority-sessions-and-exception-reporting-and-mobile-terminated-services-only");
         case 6: return ("not-accept-mo-data-or-delay-tolerant-access-from-CP-CIoT");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
