/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SL_ScheduledConfig_r16 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SL-ScheduledConfig-r16";
   }

   public RNTI_Value sl_RNTI_r16;
   public MAC_MainConfigSL_r16 mac_MainConfigSL_r16;  // optional
   public RNTI_Value sl_CS_RNTI_r16;  // optional
   public SL_ScheduledConfig_r16_sl_PSFCH_ToPUCCH_r16 sl_PSFCH_ToPUCCH_r16;  // optional
   public SL_ConfiguredGrantConfigList_r16 sl_ConfiguredGrantConfigList_r16;  // optional
   public boolean mV2ExtPresent;
   public SL_ScheduledConfig_r16_sl_DCI_ToSL_Trans_r16 sl_DCI_ToSL_Trans_r16;  // optional
   public Asn1OpenExt extElem1;

   public SL_ScheduledConfig_r16 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SL_ScheduledConfig_r16 (
      RNTI_Value sl_RNTI_r16_,
      MAC_MainConfigSL_r16 mac_MainConfigSL_r16_,
      RNTI_Value sl_CS_RNTI_r16_,
      SL_ScheduledConfig_r16_sl_PSFCH_ToPUCCH_r16 sl_PSFCH_ToPUCCH_r16_,
      SL_ConfiguredGrantConfigList_r16 sl_ConfiguredGrantConfigList_r16_,
      SL_ScheduledConfig_r16_sl_DCI_ToSL_Trans_r16 sl_DCI_ToSL_Trans_r16_
   ) {
      super();
      sl_RNTI_r16 = sl_RNTI_r16_;
      mac_MainConfigSL_r16 = mac_MainConfigSL_r16_;
      sl_CS_RNTI_r16 = sl_CS_RNTI_r16_;
      sl_PSFCH_ToPUCCH_r16 = sl_PSFCH_ToPUCCH_r16_;
      sl_ConfiguredGrantConfigList_r16 = sl_ConfiguredGrantConfigList_r16_;
      sl_DCI_ToSL_Trans_r16 = sl_DCI_ToSL_Trans_r16_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SL_ScheduledConfig_r16 (
      RNTI_Value sl_RNTI_r16_
   ) {
      super();
      sl_RNTI_r16 = sl_RNTI_r16_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SL_ScheduledConfig_r16 (long sl_RNTI_r16_,
      MAC_MainConfigSL_r16 mac_MainConfigSL_r16_,
      long sl_CS_RNTI_r16_,
      SL_ScheduledConfig_r16_sl_PSFCH_ToPUCCH_r16 sl_PSFCH_ToPUCCH_r16_,
      SL_ConfiguredGrantConfigList_r16 sl_ConfiguredGrantConfigList_r16_,
      SL_ScheduledConfig_r16_sl_DCI_ToSL_Trans_r16 sl_DCI_ToSL_Trans_r16_
   ) {
      super();
      sl_RNTI_r16 = new RNTI_Value (sl_RNTI_r16_);
      mac_MainConfigSL_r16 = mac_MainConfigSL_r16_;
      sl_CS_RNTI_r16 = new RNTI_Value (sl_CS_RNTI_r16_);
      sl_PSFCH_ToPUCCH_r16 = sl_PSFCH_ToPUCCH_r16_;
      sl_ConfiguredGrantConfigList_r16 = sl_ConfiguredGrantConfigList_r16_;
      sl_DCI_ToSL_Trans_r16 = sl_DCI_ToSL_Trans_r16_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public SL_ScheduledConfig_r16 (
      long sl_RNTI_r16_
   ) {
      super();
      sl_RNTI_r16 = new RNTI_Value (sl_RNTI_r16_);
   }

   public void init () {
      sl_RNTI_r16 = null;
      mac_MainConfigSL_r16 = null;
      sl_CS_RNTI_r16 = null;
      sl_PSFCH_ToPUCCH_r16 = null;
      sl_ConfiguredGrantConfigList_r16 = null;
      sl_DCI_ToSL_Trans_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return sl_RNTI_r16;
         case 1: return mac_MainConfigSL_r16;
         case 2: return sl_CS_RNTI_r16;
         case 3: return sl_PSFCH_ToPUCCH_r16;
         case 4: return sl_ConfiguredGrantConfigList_r16;
         case 5: return sl_DCI_ToSL_Trans_r16;
         case 6: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "sl-RNTI-r16";
         case 1: return "mac-MainConfigSL-r16";
         case 2: return "sl-CS-RNTI-r16";
         case 3: return "sl-PSFCH-ToPUCCH-r16";
         case 4: return "sl-ConfiguredGrantConfigList-r16";
         case 5: return "sl-DCI-ToSL-Trans-r16";
         case 6: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean mac_MainConfigSL_r16Present = buffer.decodeBit ("mac_MainConfigSL_r16Present");
      boolean sl_CS_RNTI_r16Present = buffer.decodeBit ("sl_CS_RNTI_r16Present");
      boolean sl_PSFCH_ToPUCCH_r16Present = buffer.decodeBit ("sl_PSFCH_ToPUCCH_r16Present");
      boolean sl_ConfiguredGrantConfigList_r16Present = buffer.decodeBit ("sl_ConfiguredGrantConfigList_r16Present");

      // decode sl_RNTI_r16

      buffer.getContext().eventDispatcher.startElement("sl_RNTI_r16", -1);

      sl_RNTI_r16 = new RNTI_Value();
      sl_RNTI_r16.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("sl_RNTI_r16", -1);

      // decode mac_MainConfigSL_r16

      if (mac_MainConfigSL_r16Present) {
         buffer.getContext().eventDispatcher.startElement("mac_MainConfigSL_r16", -1);

         mac_MainConfigSL_r16 = new MAC_MainConfigSL_r16();
         mac_MainConfigSL_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("mac_MainConfigSL_r16", -1);
      }
      else {
         mac_MainConfigSL_r16 = null;
      }

      // decode sl_CS_RNTI_r16

      if (sl_CS_RNTI_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_CS_RNTI_r16", -1);

         sl_CS_RNTI_r16 = new RNTI_Value();
         sl_CS_RNTI_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sl_CS_RNTI_r16", -1);
      }
      else {
         sl_CS_RNTI_r16 = null;
      }

      // decode sl_PSFCH_ToPUCCH_r16

      if (sl_PSFCH_ToPUCCH_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_PSFCH_ToPUCCH_r16", -1);

         sl_PSFCH_ToPUCCH_r16 = new SL_ScheduledConfig_r16_sl_PSFCH_ToPUCCH_r16();
         sl_PSFCH_ToPUCCH_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sl_PSFCH_ToPUCCH_r16", -1);
      }
      else {
         sl_PSFCH_ToPUCCH_r16 = null;
      }

      // decode sl_ConfiguredGrantConfigList_r16

      if (sl_ConfiguredGrantConfigList_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_ConfiguredGrantConfigList_r16", -1);

         sl_ConfiguredGrantConfigList_r16 = new SL_ConfiguredGrantConfigList_r16();
         sl_ConfiguredGrantConfigList_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sl_ConfiguredGrantConfigList_r16", -1);
      }
      else {
         sl_ConfiguredGrantConfigList_r16 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean sl_DCI_ToSL_Trans_r16Present = buffer.decodeBit ("sl_DCI_ToSL_Trans_r16Present");

            // decode sl_DCI_ToSL_Trans_r16

            if (sl_DCI_ToSL_Trans_r16Present) {
               buffer.getContext().eventDispatcher.startElement("sl_DCI_ToSL_Trans_r16", -1);

               sl_DCI_ToSL_Trans_r16 = new SL_ScheduledConfig_r16_sl_DCI_ToSL_Trans_r16();
               sl_DCI_ToSL_Trans_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("sl_DCI_ToSL_Trans_r16", -1);
            }
            else {
               sl_DCI_ToSL_Trans_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (sl_RNTI_r16 != null) sl_RNTI_r16.print (_sb, "sl_RNTI_r16", _level+1);
      if (mac_MainConfigSL_r16 != null) mac_MainConfigSL_r16.print (_sb, "mac_MainConfigSL_r16", _level+1);
      if (sl_CS_RNTI_r16 != null) sl_CS_RNTI_r16.print (_sb, "sl_CS_RNTI_r16", _level+1);
      if (sl_PSFCH_ToPUCCH_r16 != null) sl_PSFCH_ToPUCCH_r16.print (_sb, "sl_PSFCH_ToPUCCH_r16", _level+1);
      if (sl_ConfiguredGrantConfigList_r16 != null) sl_ConfiguredGrantConfigList_r16.print (_sb, "sl_ConfiguredGrantConfigList_r16", _level+1);
      if (sl_DCI_ToSL_Trans_r16 != null) sl_DCI_ToSL_Trans_r16.print (_sb, "sl_DCI_ToSL_Trans_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
