/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.S1AP_IEs;

import com.objsys.asn1j.runtime.*;

public class TargetID extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_S1AP_IEsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "TargetID";
   }

   // Choice element identifier constants
   public final static byte _TARGETENB_ID = 1;
   public final static byte _TARGETRNC_ID = 2;
   public final static byte _CGI = 3;
   public final static byte _TARGETGNGRANNODE_ID = 4;
   public final static byte _EXTELEM1 = 5;

   public TargetID () {
      super();
   }

   public TargetID (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _TARGETENB_ID: return "targeteNB_ID";
      case _TARGETRNC_ID: return "targetRNC_ID";
      case _CGI: return "cGI";
      case _TARGETGNGRANNODE_ID: return "targetgNgRanNode_ID";
      case _EXTELEM1: return "...";
      default: return "UNDEFINED";
      }
   }

   public void set_targeteNB_ID (TargeteNB_ID value) {
      setElement (_TARGETENB_ID, value);
   }

   public void set_targetRNC_ID (TargetRNC_ID value) {
      setElement (_TARGETRNC_ID, value);
   }

   public void set_cGI (CGI value) {
      setElement (_CGI, value);
   }

   public void set_targetgNgRanNode_ID (TargetNgRanNode_ID value) {
      setElement (_TARGETGNGRANNODE_ID, value);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      Asn1PerDecodeBuffer savedBuffer = null;
      boolean extbit = buffer.decodeBit ("extbit");

      if (!extbit) {
         int idx = (int) buffer.decodeConsWholeNumber (3, "index");
         choiceID = idx + 1;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         switch (idx) {
            // targeteNB_ID
            case 0: { 
               TargeteNB_ID targeteNB_ID;
               element = targeteNB_ID = new TargeteNB_ID();
               targeteNB_ID.decode (buffer);
               break;
            }

            // targetRNC_ID
            case 1: { 
               TargetRNC_ID targetRNC_ID;
               element = targetRNC_ID = new TargetRNC_ID();
               targetRNC_ID.decode (buffer);
               break;
            }

            // cGI
            case 2: { 
               CGI cGI;
               element = cGI = new CGI();
               cGI.decode (buffer);
               break;
            }

            default:
            throw new Asn1InvalidChoiceOptionException (buffer, idx);
         }
      }
      else {
         int idx = (int) buffer.decodeSmallNonNegWholeNumber ();
         choiceID = idx + 4;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         buffer.byteAlign();

         Asn1OpenType openType = new Asn1OpenType ();
         openType.decode (buffer);

         savedBuffer = buffer;
         buffer = new Asn1PerDecodeBuffer (openType.value, savedBuffer.isAligned());
         buffer.setEventHandlerList (savedBuffer);

         switch (idx) {
            // targetgNgRanNode_ID
            case 0: { 
               TargetNgRanNode_ID targetgNgRanNode_ID;
               element = targetgNgRanNode_ID = new TargetNgRanNode_ID();
               targetgNgRanNode_ID.decode (buffer);
               break;
            }

            // extElem1
            case 1: { 
               Asn1OpenType extElem1;
               element = extElem1 = new Asn1OpenType();
               extElem1.decode (buffer);

               buffer.invokeCharacters(extElem1.toString());
               break;
            }

            default:
               setElement (_EXTELEM1, openType);
               buffer.invokeCharacters (openType.toString());
         }

      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);

      if (savedBuffer != null) {
         buffer = savedBuffer;
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (element != null) {
         element.print (_sb, getElemName(), _level+1);
      }
      indent (_sb, _level);
      _sb.append("}\n");
   }

}
