/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.PC5_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class RRCReconfigurationSidelink_IEs_r16 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_PC5_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "RRCReconfigurationSidelink-IEs-r16";
   }

   public RRCReconfigurationSidelink_IEs_r16_slrb_ConfigToAddModList_r16 slrb_ConfigToAddModList_r16;  // optional
   public RRCReconfigurationSidelink_IEs_r16_slrb_ConfigToReleaseList_r16 slrb_ConfigToReleaseList_r16;  // optional
   public RRCReconfigurationSidelink_IEs_r16_sl_MeasConfig_r16 sl_MeasConfig_r16;  // optional
   public RRCReconfigurationSidelink_IEs_r16_sl_CSI_RS_Config_r16 sl_CSI_RS_Config_r16;  // optional
   public RRCReconfigurationSidelink_IEs_r16_sl_ResetConfig_r16 sl_ResetConfig_r16 = null;  // optional
   public Asn1Integer sl_LatencyBoundCSI_Report_r16;  // optional
   public Asn1OctetString lateNonCriticalExtension;  // optional
   public RRCReconfigurationSidelink_IEs_r16_nonCriticalExtension nonCriticalExtension;  // optional

   public RRCReconfigurationSidelink_IEs_r16 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public RRCReconfigurationSidelink_IEs_r16 (
      RRCReconfigurationSidelink_IEs_r16_slrb_ConfigToAddModList_r16 slrb_ConfigToAddModList_r16_,
      RRCReconfigurationSidelink_IEs_r16_slrb_ConfigToReleaseList_r16 slrb_ConfigToReleaseList_r16_,
      RRCReconfigurationSidelink_IEs_r16_sl_MeasConfig_r16 sl_MeasConfig_r16_,
      RRCReconfigurationSidelink_IEs_r16_sl_CSI_RS_Config_r16 sl_CSI_RS_Config_r16_,
      RRCReconfigurationSidelink_IEs_r16_sl_ResetConfig_r16 sl_ResetConfig_r16_,
      Asn1Integer sl_LatencyBoundCSI_Report_r16_,
      Asn1OctetString lateNonCriticalExtension_,
      RRCReconfigurationSidelink_IEs_r16_nonCriticalExtension nonCriticalExtension_
   ) {
      super();
      slrb_ConfigToAddModList_r16 = slrb_ConfigToAddModList_r16_;
      slrb_ConfigToReleaseList_r16 = slrb_ConfigToReleaseList_r16_;
      sl_MeasConfig_r16 = sl_MeasConfig_r16_;
      sl_CSI_RS_Config_r16 = sl_CSI_RS_Config_r16_;
      sl_ResetConfig_r16 = sl_ResetConfig_r16_;
      sl_LatencyBoundCSI_Report_r16 = sl_LatencyBoundCSI_Report_r16_;
      lateNonCriticalExtension = lateNonCriticalExtension_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public RRCReconfigurationSidelink_IEs_r16 (RRCReconfigurationSidelink_IEs_r16_slrb_ConfigToAddModList_r16 slrb_ConfigToAddModList_r16_,
      RRCReconfigurationSidelink_IEs_r16_slrb_ConfigToReleaseList_r16 slrb_ConfigToReleaseList_r16_,
      RRCReconfigurationSidelink_IEs_r16_sl_MeasConfig_r16 sl_MeasConfig_r16_,
      RRCReconfigurationSidelink_IEs_r16_sl_CSI_RS_Config_r16 sl_CSI_RS_Config_r16_,
      RRCReconfigurationSidelink_IEs_r16_sl_ResetConfig_r16 sl_ResetConfig_r16_,
      long sl_LatencyBoundCSI_Report_r16_,
      byte[] lateNonCriticalExtension_,
      RRCReconfigurationSidelink_IEs_r16_nonCriticalExtension nonCriticalExtension_
   ) {
      super();
      slrb_ConfigToAddModList_r16 = slrb_ConfigToAddModList_r16_;
      slrb_ConfigToReleaseList_r16 = slrb_ConfigToReleaseList_r16_;
      sl_MeasConfig_r16 = sl_MeasConfig_r16_;
      sl_CSI_RS_Config_r16 = sl_CSI_RS_Config_r16_;
      sl_ResetConfig_r16 = sl_ResetConfig_r16_;
      sl_LatencyBoundCSI_Report_r16 = new Asn1Integer (sl_LatencyBoundCSI_Report_r16_);
      lateNonCriticalExtension = new Asn1OctetString (lateNonCriticalExtension_);
      nonCriticalExtension = nonCriticalExtension_;
   }

   public void init () {
      slrb_ConfigToAddModList_r16 = null;
      slrb_ConfigToReleaseList_r16 = null;
      sl_MeasConfig_r16 = null;
      sl_CSI_RS_Config_r16 = null;
      sl_ResetConfig_r16 = null;
      sl_LatencyBoundCSI_Report_r16 = null;
      lateNonCriticalExtension = null;
      nonCriticalExtension = null;
   }

   public int getElementCount() { return 8; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return slrb_ConfigToAddModList_r16;
         case 1: return slrb_ConfigToReleaseList_r16;
         case 2: return sl_MeasConfig_r16;
         case 3: return sl_CSI_RS_Config_r16;
         case 4: return sl_ResetConfig_r16;
         case 5: return sl_LatencyBoundCSI_Report_r16;
         case 6: return lateNonCriticalExtension;
         case 7: return nonCriticalExtension;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "slrb-ConfigToAddModList-r16";
         case 1: return "slrb-ConfigToReleaseList-r16";
         case 2: return "sl-MeasConfig-r16";
         case 3: return "sl-CSI-RS-Config-r16";
         case 4: return "sl-ResetConfig-r16";
         case 5: return "sl-LatencyBoundCSI-Report-r16";
         case 6: return "lateNonCriticalExtension";
         case 7: return "nonCriticalExtension";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean slrb_ConfigToAddModList_r16Present = buffer.decodeBit ("slrb_ConfigToAddModList_r16Present");
      boolean slrb_ConfigToReleaseList_r16Present = buffer.decodeBit ("slrb_ConfigToReleaseList_r16Present");
      boolean sl_MeasConfig_r16Present = buffer.decodeBit ("sl_MeasConfig_r16Present");
      boolean sl_CSI_RS_Config_r16Present = buffer.decodeBit ("sl_CSI_RS_Config_r16Present");
      boolean sl_ResetConfig_r16Present = buffer.decodeBit ("sl_ResetConfig_r16Present");
      boolean sl_LatencyBoundCSI_Report_r16Present = buffer.decodeBit ("sl_LatencyBoundCSI_Report_r16Present");
      boolean lateNonCriticalExtensionPresent = buffer.decodeBit ("lateNonCriticalExtensionPresent");
      boolean nonCriticalExtensionPresent = buffer.decodeBit ("nonCriticalExtensionPresent");

      // decode slrb_ConfigToAddModList_r16

      if (slrb_ConfigToAddModList_r16Present) {
         buffer.getContext().eventDispatcher.startElement("slrb_ConfigToAddModList_r16", -1);

         slrb_ConfigToAddModList_r16 = new RRCReconfigurationSidelink_IEs_r16_slrb_ConfigToAddModList_r16();
         slrb_ConfigToAddModList_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("slrb_ConfigToAddModList_r16", -1);
      }
      else {
         slrb_ConfigToAddModList_r16 = null;
      }

      // decode slrb_ConfigToReleaseList_r16

      if (slrb_ConfigToReleaseList_r16Present) {
         buffer.getContext().eventDispatcher.startElement("slrb_ConfigToReleaseList_r16", -1);

         slrb_ConfigToReleaseList_r16 = new RRCReconfigurationSidelink_IEs_r16_slrb_ConfigToReleaseList_r16();
         slrb_ConfigToReleaseList_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("slrb_ConfigToReleaseList_r16", -1);
      }
      else {
         slrb_ConfigToReleaseList_r16 = null;
      }

      // decode sl_MeasConfig_r16

      if (sl_MeasConfig_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_MeasConfig_r16", -1);

         sl_MeasConfig_r16 = new RRCReconfigurationSidelink_IEs_r16_sl_MeasConfig_r16();
         sl_MeasConfig_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sl_MeasConfig_r16", -1);
      }
      else {
         sl_MeasConfig_r16 = null;
      }

      // decode sl_CSI_RS_Config_r16

      if (sl_CSI_RS_Config_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_CSI_RS_Config_r16", -1);

         sl_CSI_RS_Config_r16 = new RRCReconfigurationSidelink_IEs_r16_sl_CSI_RS_Config_r16();
         sl_CSI_RS_Config_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sl_CSI_RS_Config_r16", -1);
      }
      else {
         sl_CSI_RS_Config_r16 = null;
      }

      // decode sl_ResetConfig_r16

      if (sl_ResetConfig_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_ResetConfig_r16", -1);

         int tval = RRCReconfigurationSidelink_IEs_r16_sl_ResetConfig_r16.decodeEnumValue (buffer);
         sl_ResetConfig_r16 = RRCReconfigurationSidelink_IEs_r16_sl_ResetConfig_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("sl_ResetConfig_r16", -1);
      }
      else {
         sl_ResetConfig_r16 = null;
      }

      // decode sl_LatencyBoundCSI_Report_r16

      if (sl_LatencyBoundCSI_Report_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_LatencyBoundCSI_Report_r16", -1);

         sl_LatencyBoundCSI_Report_r16 = new Asn1Integer();
         sl_LatencyBoundCSI_Report_r16.decode (buffer, 3, 160);

         buffer.invokeCharacters(sl_LatencyBoundCSI_Report_r16.toString());
         buffer.getContext().eventDispatcher.endElement("sl_LatencyBoundCSI_Report_r16", -1);
      }
      else {
         sl_LatencyBoundCSI_Report_r16 = null;
      }

      // decode lateNonCriticalExtension

      if (lateNonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("lateNonCriticalExtension", -1);

         lateNonCriticalExtension = new Asn1OctetString();
         lateNonCriticalExtension.decode (buffer);

         buffer.invokeCharacters(lateNonCriticalExtension.toString());
         buffer.getContext().eventDispatcher.endElement("lateNonCriticalExtension", -1);
      }
      else {
         lateNonCriticalExtension = null;
      }

      // decode nonCriticalExtension

      if (nonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension = new RRCReconfigurationSidelink_IEs_r16_nonCriticalExtension();
         nonCriticalExtension.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }
      else {
         nonCriticalExtension = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (slrb_ConfigToAddModList_r16 != null) slrb_ConfigToAddModList_r16.print (_sb, "slrb_ConfigToAddModList_r16", _level+1);
      if (slrb_ConfigToReleaseList_r16 != null) slrb_ConfigToReleaseList_r16.print (_sb, "slrb_ConfigToReleaseList_r16", _level+1);
      if (sl_MeasConfig_r16 != null) sl_MeasConfig_r16.print (_sb, "sl_MeasConfig_r16", _level+1);
      if (sl_CSI_RS_Config_r16 != null) sl_CSI_RS_Config_r16.print (_sb, "sl_CSI_RS_Config_r16", _level+1);
      if (sl_ResetConfig_r16 != null) sl_ResetConfig_r16.print (_sb, "sl_ResetConfig_r16", _level+1);
      if (sl_LatencyBoundCSI_Report_r16 != null) sl_LatencyBoundCSI_Report_r16.print (_sb, "sl_LatencyBoundCSI_Report_r16", _level+1);
      if (lateNonCriticalExtension != null) lateNonCriticalExtension.print (_sb, "lateNonCriticalExtension", _level+1);
      if (nonCriticalExtension != null) nonCriticalExtension.print (_sb, "nonCriticalExtension", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
