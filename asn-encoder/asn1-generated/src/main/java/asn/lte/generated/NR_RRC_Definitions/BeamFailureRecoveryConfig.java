/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class BeamFailureRecoveryConfig extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "BeamFailureRecoveryConfig";
   }

   public Asn1Integer rootSequenceIndex_BFR;  // optional
   public RACH_ConfigGeneric rach_ConfigBFR;  // optional
   public RSRP_Range rsrp_ThresholdSSB;  // optional
   public BeamFailureRecoveryConfig_candidateBeamRSList candidateBeamRSList;  // optional
   public BeamFailureRecoveryConfig_ssb_perRACH_Occasion ssb_perRACH_Occasion = null;  // optional
   public Asn1Integer ra_ssb_OccasionMaskIndex;  // optional
   public SearchSpaceId recoverySearchSpaceId;  // optional
   public RA_Prioritization ra_Prioritization;  // optional
   public BeamFailureRecoveryConfig_beamFailureRecoveryTimer beamFailureRecoveryTimer = null;  // optional
   public boolean mV2ExtPresent;
   public SubcarrierSpacing msg1_SubcarrierSpacing = null;  // optional
   public boolean mV3ExtPresent;
   public RA_Prioritization ra_PrioritizationTwoStep_r16;  // optional
   public BeamFailureRecoveryConfig_candidateBeamRSListExt_v1610 candidateBeamRSListExt_v1610;  // optional
   public Asn1OpenExt extElem1;

   public BeamFailureRecoveryConfig () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public BeamFailureRecoveryConfig (
      Asn1Integer rootSequenceIndex_BFR_,
      RACH_ConfigGeneric rach_ConfigBFR_,
      RSRP_Range rsrp_ThresholdSSB_,
      BeamFailureRecoveryConfig_candidateBeamRSList candidateBeamRSList_,
      BeamFailureRecoveryConfig_ssb_perRACH_Occasion ssb_perRACH_Occasion_,
      Asn1Integer ra_ssb_OccasionMaskIndex_,
      SearchSpaceId recoverySearchSpaceId_,
      RA_Prioritization ra_Prioritization_,
      BeamFailureRecoveryConfig_beamFailureRecoveryTimer beamFailureRecoveryTimer_,
      SubcarrierSpacing msg1_SubcarrierSpacing_,
      RA_Prioritization ra_PrioritizationTwoStep_r16_,
      BeamFailureRecoveryConfig_candidateBeamRSListExt_v1610 candidateBeamRSListExt_v1610_
   ) {
      super();
      rootSequenceIndex_BFR = rootSequenceIndex_BFR_;
      rach_ConfigBFR = rach_ConfigBFR_;
      rsrp_ThresholdSSB = rsrp_ThresholdSSB_;
      candidateBeamRSList = candidateBeamRSList_;
      ssb_perRACH_Occasion = ssb_perRACH_Occasion_;
      ra_ssb_OccasionMaskIndex = ra_ssb_OccasionMaskIndex_;
      recoverySearchSpaceId = recoverySearchSpaceId_;
      ra_Prioritization = ra_Prioritization_;
      beamFailureRecoveryTimer = beamFailureRecoveryTimer_;
      msg1_SubcarrierSpacing = msg1_SubcarrierSpacing_;
      ra_PrioritizationTwoStep_r16 = ra_PrioritizationTwoStep_r16_;
      candidateBeamRSListExt_v1610 = candidateBeamRSListExt_v1610_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public BeamFailureRecoveryConfig (long rootSequenceIndex_BFR_,
      RACH_ConfigGeneric rach_ConfigBFR_,
      long rsrp_ThresholdSSB_,
      BeamFailureRecoveryConfig_candidateBeamRSList candidateBeamRSList_,
      BeamFailureRecoveryConfig_ssb_perRACH_Occasion ssb_perRACH_Occasion_,
      long ra_ssb_OccasionMaskIndex_,
      long recoverySearchSpaceId_,
      RA_Prioritization ra_Prioritization_,
      BeamFailureRecoveryConfig_beamFailureRecoveryTimer beamFailureRecoveryTimer_,
      SubcarrierSpacing msg1_SubcarrierSpacing_,
      RA_Prioritization ra_PrioritizationTwoStep_r16_,
      BeamFailureRecoveryConfig_candidateBeamRSListExt_v1610 candidateBeamRSListExt_v1610_
   ) {
      super();
      rootSequenceIndex_BFR = new Asn1Integer (rootSequenceIndex_BFR_);
      rach_ConfigBFR = rach_ConfigBFR_;
      rsrp_ThresholdSSB = new RSRP_Range (rsrp_ThresholdSSB_);
      candidateBeamRSList = candidateBeamRSList_;
      ssb_perRACH_Occasion = ssb_perRACH_Occasion_;
      ra_ssb_OccasionMaskIndex = new Asn1Integer (ra_ssb_OccasionMaskIndex_);
      recoverySearchSpaceId = new SearchSpaceId (recoverySearchSpaceId_);
      ra_Prioritization = ra_Prioritization_;
      beamFailureRecoveryTimer = beamFailureRecoveryTimer_;
      msg1_SubcarrierSpacing = msg1_SubcarrierSpacing_;
      ra_PrioritizationTwoStep_r16 = ra_PrioritizationTwoStep_r16_;
      candidateBeamRSListExt_v1610 = candidateBeamRSListExt_v1610_;
   }

   public void init () {
      rootSequenceIndex_BFR = null;
      rach_ConfigBFR = null;
      rsrp_ThresholdSSB = null;
      candidateBeamRSList = null;
      ssb_perRACH_Occasion = null;
      ra_ssb_OccasionMaskIndex = null;
      recoverySearchSpaceId = null;
      ra_Prioritization = null;
      beamFailureRecoveryTimer = null;
      msg1_SubcarrierSpacing = null;
      ra_PrioritizationTwoStep_r16 = null;
      candidateBeamRSListExt_v1610 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 13; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return rootSequenceIndex_BFR;
         case 1: return rach_ConfigBFR;
         case 2: return rsrp_ThresholdSSB;
         case 3: return candidateBeamRSList;
         case 4: return ssb_perRACH_Occasion;
         case 5: return ra_ssb_OccasionMaskIndex;
         case 6: return recoverySearchSpaceId;
         case 7: return ra_Prioritization;
         case 8: return beamFailureRecoveryTimer;
         case 9: return msg1_SubcarrierSpacing;
         case 10: return ra_PrioritizationTwoStep_r16;
         case 11: return candidateBeamRSListExt_v1610;
         case 12: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "rootSequenceIndex-BFR";
         case 1: return "rach-ConfigBFR";
         case 2: return "rsrp-ThresholdSSB";
         case 3: return "candidateBeamRSList";
         case 4: return "ssb-perRACH-Occasion";
         case 5: return "ra-ssb-OccasionMaskIndex";
         case 6: return "recoverySearchSpaceId";
         case 7: return "ra-Prioritization";
         case 8: return "beamFailureRecoveryTimer";
         case 9: return "msg1-SubcarrierSpacing";
         case 10: return "ra-PrioritizationTwoStep-r16";
         case 11: return "candidateBeamRSListExt-v1610";
         case 12: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean rootSequenceIndex_BFRPresent = buffer.decodeBit ("rootSequenceIndex_BFRPresent");
      boolean rach_ConfigBFRPresent = buffer.decodeBit ("rach_ConfigBFRPresent");
      boolean rsrp_ThresholdSSBPresent = buffer.decodeBit ("rsrp_ThresholdSSBPresent");
      boolean candidateBeamRSListPresent = buffer.decodeBit ("candidateBeamRSListPresent");
      boolean ssb_perRACH_OccasionPresent = buffer.decodeBit ("ssb_perRACH_OccasionPresent");
      boolean ra_ssb_OccasionMaskIndexPresent = buffer.decodeBit ("ra_ssb_OccasionMaskIndexPresent");
      boolean recoverySearchSpaceIdPresent = buffer.decodeBit ("recoverySearchSpaceIdPresent");
      boolean ra_PrioritizationPresent = buffer.decodeBit ("ra_PrioritizationPresent");
      boolean beamFailureRecoveryTimerPresent = buffer.decodeBit ("beamFailureRecoveryTimerPresent");

      // decode rootSequenceIndex_BFR

      if (rootSequenceIndex_BFRPresent) {
         buffer.getContext().eventDispatcher.startElement("rootSequenceIndex_BFR", -1);

         rootSequenceIndex_BFR = new Asn1Integer();
         rootSequenceIndex_BFR.decode (buffer, 0, 137);

         buffer.invokeCharacters(rootSequenceIndex_BFR.toString());
         buffer.getContext().eventDispatcher.endElement("rootSequenceIndex_BFR", -1);
      }
      else {
         rootSequenceIndex_BFR = null;
      }

      // decode rach_ConfigBFR

      if (rach_ConfigBFRPresent) {
         buffer.getContext().eventDispatcher.startElement("rach_ConfigBFR", -1);

         rach_ConfigBFR = new RACH_ConfigGeneric();
         rach_ConfigBFR.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("rach_ConfigBFR", -1);
      }
      else {
         rach_ConfigBFR = null;
      }

      // decode rsrp_ThresholdSSB

      if (rsrp_ThresholdSSBPresent) {
         buffer.getContext().eventDispatcher.startElement("rsrp_ThresholdSSB", -1);

         rsrp_ThresholdSSB = new RSRP_Range();
         rsrp_ThresholdSSB.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("rsrp_ThresholdSSB", -1);
      }
      else {
         rsrp_ThresholdSSB = null;
      }

      // decode candidateBeamRSList

      if (candidateBeamRSListPresent) {
         buffer.getContext().eventDispatcher.startElement("candidateBeamRSList", -1);

         candidateBeamRSList = new BeamFailureRecoveryConfig_candidateBeamRSList();
         candidateBeamRSList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("candidateBeamRSList", -1);
      }
      else {
         candidateBeamRSList = null;
      }

      // decode ssb_perRACH_Occasion

      if (ssb_perRACH_OccasionPresent) {
         buffer.getContext().eventDispatcher.startElement("ssb_perRACH_Occasion", -1);

         int tval = BeamFailureRecoveryConfig_ssb_perRACH_Occasion.decodeEnumValue (buffer);
         ssb_perRACH_Occasion = BeamFailureRecoveryConfig_ssb_perRACH_Occasion.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("ssb_perRACH_Occasion", -1);
      }
      else {
         ssb_perRACH_Occasion = null;
      }

      // decode ra_ssb_OccasionMaskIndex

      if (ra_ssb_OccasionMaskIndexPresent) {
         buffer.getContext().eventDispatcher.startElement("ra_ssb_OccasionMaskIndex", -1);

         ra_ssb_OccasionMaskIndex = new Asn1Integer();
         ra_ssb_OccasionMaskIndex.decode (buffer, 0, 15);

         buffer.invokeCharacters(ra_ssb_OccasionMaskIndex.toString());
         buffer.getContext().eventDispatcher.endElement("ra_ssb_OccasionMaskIndex", -1);
      }
      else {
         ra_ssb_OccasionMaskIndex = null;
      }

      // decode recoverySearchSpaceId

      if (recoverySearchSpaceIdPresent) {
         buffer.getContext().eventDispatcher.startElement("recoverySearchSpaceId", -1);

         recoverySearchSpaceId = new SearchSpaceId();
         recoverySearchSpaceId.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("recoverySearchSpaceId", -1);
      }
      else {
         recoverySearchSpaceId = null;
      }

      // decode ra_Prioritization

      if (ra_PrioritizationPresent) {
         buffer.getContext().eventDispatcher.startElement("ra_Prioritization", -1);

         ra_Prioritization = new RA_Prioritization();
         ra_Prioritization.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ra_Prioritization", -1);
      }
      else {
         ra_Prioritization = null;
      }

      // decode beamFailureRecoveryTimer

      if (beamFailureRecoveryTimerPresent) {
         buffer.getContext().eventDispatcher.startElement("beamFailureRecoveryTimer", -1);

         int tval = BeamFailureRecoveryConfig_beamFailureRecoveryTimer.decodeEnumValue (buffer);
         beamFailureRecoveryTimer = BeamFailureRecoveryConfig_beamFailureRecoveryTimer.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("beamFailureRecoveryTimer", -1);
      }
      else {
         beamFailureRecoveryTimer = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean msg1_SubcarrierSpacingPresent = buffer.decodeBit ("msg1_SubcarrierSpacingPresent");

            // decode msg1_SubcarrierSpacing

            if (msg1_SubcarrierSpacingPresent) {
               buffer.getContext().eventDispatcher.startElement("msg1_SubcarrierSpacing", -1);

               int tval = SubcarrierSpacing.decodeEnumValue (buffer);
               msg1_SubcarrierSpacing = SubcarrierSpacing.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("msg1_SubcarrierSpacing", -1);
            }
            else {
               msg1_SubcarrierSpacing = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean ra_PrioritizationTwoStep_r16Present = buffer.decodeBit ("ra_PrioritizationTwoStep_r16Present");

            boolean candidateBeamRSListExt_v1610Present = buffer.decodeBit ("candidateBeamRSListExt_v1610Present");

            // decode ra_PrioritizationTwoStep_r16

            if (ra_PrioritizationTwoStep_r16Present) {
               buffer.getContext().eventDispatcher.startElement("ra_PrioritizationTwoStep_r16", -1);

               ra_PrioritizationTwoStep_r16 = new RA_Prioritization();
               ra_PrioritizationTwoStep_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("ra_PrioritizationTwoStep_r16", -1);
            }
            else {
               ra_PrioritizationTwoStep_r16 = null;
            }

            // decode candidateBeamRSListExt_v1610

            if (candidateBeamRSListExt_v1610Present) {
               buffer.getContext().eventDispatcher.startElement("candidateBeamRSListExt_v1610", -1);

               candidateBeamRSListExt_v1610 = new BeamFailureRecoveryConfig_candidateBeamRSListExt_v1610();
               candidateBeamRSListExt_v1610.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("candidateBeamRSListExt_v1610", -1);
            }
            else {
               candidateBeamRSListExt_v1610 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (rootSequenceIndex_BFR != null) rootSequenceIndex_BFR.print (_sb, "rootSequenceIndex_BFR", _level+1);
      if (rach_ConfigBFR != null) rach_ConfigBFR.print (_sb, "rach_ConfigBFR", _level+1);
      if (rsrp_ThresholdSSB != null) rsrp_ThresholdSSB.print (_sb, "rsrp_ThresholdSSB", _level+1);
      if (candidateBeamRSList != null) candidateBeamRSList.print (_sb, "candidateBeamRSList", _level+1);
      if (ssb_perRACH_Occasion != null) ssb_perRACH_Occasion.print (_sb, "ssb_perRACH_Occasion", _level+1);
      if (ra_ssb_OccasionMaskIndex != null) ra_ssb_OccasionMaskIndex.print (_sb, "ra_ssb_OccasionMaskIndex", _level+1);
      if (recoverySearchSpaceId != null) recoverySearchSpaceId.print (_sb, "recoverySearchSpaceId", _level+1);
      if (ra_Prioritization != null) ra_Prioritization.print (_sb, "ra_Prioritization", _level+1);
      if (beamFailureRecoveryTimer != null) beamFailureRecoveryTimer.print (_sb, "beamFailureRecoveryTimer", _level+1);
      if (msg1_SubcarrierSpacing != null) msg1_SubcarrierSpacing.print (_sb, "msg1_SubcarrierSpacing", _level+1);
      if (ra_PrioritizationTwoStep_r16 != null) ra_PrioritizationTwoStep_r16.print (_sb, "ra_PrioritizationTwoStep_r16", _level+1);
      if (candidateBeamRSListExt_v1610 != null) candidateBeamRSListExt_v1610.print (_sb, "candidateBeamRSListExt_v1610", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
