/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SCellToAddModExt_v1430 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SCellToAddModExt-v1430";
   }

   public Asn1Integer srs_SwitchFromServCellIndex_r14;  // optional
   public boolean mV2ExtPresent;
   public SCellToAddModExt_v1430_sCellState_r15 sCellState_r15 = null;  // optional
   public Asn1OpenExt extElem1;

   public SCellToAddModExt_v1430 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SCellToAddModExt_v1430 (
      Asn1Integer srs_SwitchFromServCellIndex_r14_,
      SCellToAddModExt_v1430_sCellState_r15 sCellState_r15_
   ) {
      super();
      srs_SwitchFromServCellIndex_r14 = srs_SwitchFromServCellIndex_r14_;
      sCellState_r15 = sCellState_r15_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SCellToAddModExt_v1430 (long srs_SwitchFromServCellIndex_r14_,
      SCellToAddModExt_v1430_sCellState_r15 sCellState_r15_
   ) {
      super();
      srs_SwitchFromServCellIndex_r14 = new Asn1Integer (srs_SwitchFromServCellIndex_r14_);
      sCellState_r15 = sCellState_r15_;
   }

   public void init () {
      srs_SwitchFromServCellIndex_r14 = null;
      sCellState_r15 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return srs_SwitchFromServCellIndex_r14;
         case 1: return sCellState_r15;
         case 2: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "srs-SwitchFromServCellIndex-r14";
         case 1: return "sCellState-r15";
         case 2: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean srs_SwitchFromServCellIndex_r14Present = buffer.decodeBit ("srs_SwitchFromServCellIndex_r14Present");

      // decode srs_SwitchFromServCellIndex_r14

      if (srs_SwitchFromServCellIndex_r14Present) {
         buffer.getContext().eventDispatcher.startElement("srs_SwitchFromServCellIndex_r14", -1);

         srs_SwitchFromServCellIndex_r14 = new Asn1Integer();
         srs_SwitchFromServCellIndex_r14.decode (buffer, 0, 31);

         buffer.invokeCharacters(srs_SwitchFromServCellIndex_r14.toString());
         buffer.getContext().eventDispatcher.endElement("srs_SwitchFromServCellIndex_r14", -1);
      }
      else {
         srs_SwitchFromServCellIndex_r14 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean sCellState_r15Present = buffer.decodeBit ("sCellState_r15Present");

            // decode sCellState_r15

            if (sCellState_r15Present) {
               buffer.getContext().eventDispatcher.startElement("sCellState_r15", -1);

               int tval = SCellToAddModExt_v1430_sCellState_r15.decodeEnumValue (buffer);
               sCellState_r15 = SCellToAddModExt_v1430_sCellState_r15.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("sCellState_r15", -1);
            }
            else {
               sCellState_r15 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (srs_SwitchFromServCellIndex_r14 != null) srs_SwitchFromServCellIndex_r14.print (_sb, "srs_SwitchFromServCellIndex_r14", _level+1);
      if (sCellState_r15 != null) sCellState_r15.print (_sb, "sCellState_r15", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
