/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.X2AP_Ericsson_IEs;

import com.objsys.asn1j.runtime.*;

public class EAB_TrafficLoadStatus_v801 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_X2AP_Ericsson_IEsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "EAB-TrafficLoadStatus-v801";
   }

   public Asn1Integer cellDLCACapacity;  // optional
   public Asn1Integer cellLoadFactor;  // optional

   public EAB_TrafficLoadStatus_v801 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public EAB_TrafficLoadStatus_v801 (
      Asn1Integer cellDLCACapacity_,
      Asn1Integer cellLoadFactor_
   ) {
      super();
      cellDLCACapacity = cellDLCACapacity_;
      cellLoadFactor = cellLoadFactor_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public EAB_TrafficLoadStatus_v801 (long cellDLCACapacity_,
      long cellLoadFactor_
   ) {
      super();
      cellDLCACapacity = new Asn1Integer (cellDLCACapacity_);
      cellLoadFactor = new Asn1Integer (cellLoadFactor_);
   }

   public void init () {
      cellDLCACapacity = null;
      cellLoadFactor = null;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return cellDLCACapacity;
         case 1: return cellLoadFactor;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "cellDLCACapacity";
         case 1: return "cellLoadFactor";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean cellDLCACapacityPresent = buffer.decodeBit ("cellDLCACapacityPresent");
      boolean cellLoadFactorPresent = buffer.decodeBit ("cellLoadFactorPresent");

      // decode cellDLCACapacity

      if (cellDLCACapacityPresent) {
         buffer.getContext().eventDispatcher.startElement("cellDLCACapacity", -1);

         cellDLCACapacity = new Asn1Integer();
         boolean extbit = buffer.decodeBit ("extbit");
         if (!extbit) {
            cellDLCACapacity.decode (buffer, 1, 50000);
         }
         else {
            cellDLCACapacity.decode (buffer);
         }

         buffer.invokeCharacters(cellDLCACapacity.toString());
         buffer.getContext().eventDispatcher.endElement("cellDLCACapacity", -1);
      }
      else {
         cellDLCACapacity = null;
      }

      // decode cellLoadFactor

      if (cellLoadFactorPresent) {
         buffer.getContext().eventDispatcher.startElement("cellLoadFactor", -1);

         cellLoadFactor = new Asn1Integer();
         boolean extbit_1 = buffer.decodeBit ("extbit_1");
         if (!extbit_1) {
            cellLoadFactor.decode (buffer, 0, 4096);
         }
         else {
            cellLoadFactor.decode (buffer);
         }

         buffer.invokeCharacters(cellLoadFactor.toString());
         buffer.getContext().eventDispatcher.endElement("cellLoadFactor", -1);
      }
      else {
         cellLoadFactor = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (cellDLCACapacity != null) cellDLCACapacity.print (_sb, "cellDLCACapacity", _level+1);
      if (cellLoadFactor != null) cellLoadFactor.print (_sb, "cellLoadFactor", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
