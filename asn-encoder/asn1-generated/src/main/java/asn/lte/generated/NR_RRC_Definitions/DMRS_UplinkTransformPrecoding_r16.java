/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class DMRS_UplinkTransformPrecoding_r16 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "DMRS-UplinkTransformPrecoding-r16";
   }

   public Asn1Integer pi2BPSK_ScramblingID0;  // optional
   public Asn1Integer pi2BPSK_ScramblingID1;  // optional

   public DMRS_UplinkTransformPrecoding_r16 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public DMRS_UplinkTransformPrecoding_r16 (
      Asn1Integer pi2BPSK_ScramblingID0_,
      Asn1Integer pi2BPSK_ScramblingID1_
   ) {
      super();
      pi2BPSK_ScramblingID0 = pi2BPSK_ScramblingID0_;
      pi2BPSK_ScramblingID1 = pi2BPSK_ScramblingID1_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public DMRS_UplinkTransformPrecoding_r16 (long pi2BPSK_ScramblingID0_,
      long pi2BPSK_ScramblingID1_
   ) {
      super();
      pi2BPSK_ScramblingID0 = new Asn1Integer (pi2BPSK_ScramblingID0_);
      pi2BPSK_ScramblingID1 = new Asn1Integer (pi2BPSK_ScramblingID1_);
   }

   public void init () {
      pi2BPSK_ScramblingID0 = null;
      pi2BPSK_ScramblingID1 = null;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return pi2BPSK_ScramblingID0;
         case 1: return pi2BPSK_ScramblingID1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "pi2BPSK-ScramblingID0";
         case 1: return "pi2BPSK-ScramblingID1";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean pi2BPSK_ScramblingID0Present = buffer.decodeBit ("pi2BPSK_ScramblingID0Present");
      boolean pi2BPSK_ScramblingID1Present = buffer.decodeBit ("pi2BPSK_ScramblingID1Present");

      // decode pi2BPSK_ScramblingID0

      if (pi2BPSK_ScramblingID0Present) {
         buffer.getContext().eventDispatcher.startElement("pi2BPSK_ScramblingID0", -1);

         pi2BPSK_ScramblingID0 = new Asn1Integer();
         pi2BPSK_ScramblingID0.decode (buffer, 0, 65535);

         buffer.invokeCharacters(pi2BPSK_ScramblingID0.toString());
         buffer.getContext().eventDispatcher.endElement("pi2BPSK_ScramblingID0", -1);
      }
      else {
         pi2BPSK_ScramblingID0 = null;
      }

      // decode pi2BPSK_ScramblingID1

      if (pi2BPSK_ScramblingID1Present) {
         buffer.getContext().eventDispatcher.startElement("pi2BPSK_ScramblingID1", -1);

         pi2BPSK_ScramblingID1 = new Asn1Integer();
         pi2BPSK_ScramblingID1.decode (buffer, 0, 65535);

         buffer.invokeCharacters(pi2BPSK_ScramblingID1.toString());
         buffer.getContext().eventDispatcher.endElement("pi2BPSK_ScramblingID1", -1);
      }
      else {
         pi2BPSK_ScramblingID1 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (pi2BPSK_ScramblingID0 != null) pi2BPSK_ScramblingID0.print (_sb, "pi2BPSK_ScramblingID0", _level+1);
      if (pi2BPSK_ScramblingID1 != null) pi2BPSK_ScramblingID1.print (_sb, "pi2BPSK_ScramblingID1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
