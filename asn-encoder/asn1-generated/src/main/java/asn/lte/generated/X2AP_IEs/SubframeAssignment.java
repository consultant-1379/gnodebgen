/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.X2AP_IEs;

import com.objsys.asn1j.runtime.*;

public class SubframeAssignment extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_X2AP_IEsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SubframeAssignment";
   }

   // Integer constants for switch-case
   public static final int _SA0 = 0;
   public static final int _SA1 = 1;
   public static final int _SA2 = 2;
   public static final int _SA3 = 3;
   public static final int _SA4 = 4;
   public static final int _SA5 = 5;
   public static final int _SA6 = 6;

   // Singleton instances of SubframeAssignment
   protected static final SubframeAssignment _sa0 = new SubframeAssignment(0);
   protected static final SubframeAssignment _sa1 = new SubframeAssignment(1);
   protected static final SubframeAssignment _sa2 = new SubframeAssignment(2);
   protected static final SubframeAssignment _sa3 = new SubframeAssignment(3);
   protected static final SubframeAssignment _sa4 = new SubframeAssignment(4);
   protected static final SubframeAssignment _sa5 = new SubframeAssignment(5);
   protected static final SubframeAssignment _sa6 = new SubframeAssignment(6);
   private static SubframeAssignment __undefined = new SubframeAssignment(-999);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    */
   protected SubframeAssignment (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for sa0.
    */
   public static SubframeAssignment sa0() {
      return _sa0;
   }

   /**
    * Singleton accessor method for sa1.
    */
   public static SubframeAssignment sa1() {
      return _sa1;
   }

   /**
    * Singleton accessor method for sa2.
    */
   public static SubframeAssignment sa2() {
      return _sa2;
   }

   /**
    * Singleton accessor method for sa3.
    */
   public static SubframeAssignment sa3() {
      return _sa3;
   }

   /**
    * Singleton accessor method for sa4.
    */
   public static SubframeAssignment sa4() {
      return _sa4;
   }

   /**
    * Singleton accessor method for sa5.
    */
   public static SubframeAssignment sa5() {
      return _sa5;
   }

   /**
    * Singleton accessor method for sa6.
    */
   public static SubframeAssignment sa6() {
      return _sa6;
   }

   /** Undefined value. */
   protected static SubframeAssignment __undefined_() { return __undefined; }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return SubframeAssignment.valueOf( SubframeAssignment.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static SubframeAssignment valueOf (int _value)
   {
      switch ((int)_value) {
         case 0: return sa0();
         case 1: return sa1();
         case 2: return sa2();
         case 3: return sa3();
         case 4: return sa4();
         case 5: return sa5();
         case 6: return sa6();
         default: return __undefined_();
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      boolean extbit = buffer.decodeBit ("extbit");

      if (extbit) {
         ui = buffer.decodeSmallNonNegWholeNumber ();

         return 0x7fffffff;
      }
      else {
         ui = (int) buffer.decodeConsWholeNumber (7);

         switch (ui) {
            case 0: ret =  0; break;
            case 1: ret =  1; break;
            case 2: ret =  2; break;
            case 3: ret =  3; break;
            case 4: ret =  4; break;
            case 5: ret =  5; break;
            case 6: ret =  6; break;
            default: throw new Asn1InvalidEnumException (ui);
         }
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (SubframeAssignment.valueOf(ret).toString());

      return ret;
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("sa0");
         case 1: return ("sa1");
         case 2: return ("sa2");
         case 3: return ("sa3");
         case 4: return ("sa4");
         case 5: return ("sa5");
         case 6: return ("sa6");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
