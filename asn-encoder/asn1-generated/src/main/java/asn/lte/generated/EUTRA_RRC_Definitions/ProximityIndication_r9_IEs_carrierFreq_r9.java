/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class ProximityIndication_r9_IEs_carrierFreq_r9 extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CHOICE";
   }

   // Choice element identifier constants
   public final static byte _EUTRA_R9 = 1;
   public final static byte _UTRA_R9 = 2;
   public final static byte _EUTRA2_V9E0 = 3;
   public final static byte _EXTELEM1 = 4;

   public ProximityIndication_r9_IEs_carrierFreq_r9 () {
      super();
   }

   public ProximityIndication_r9_IEs_carrierFreq_r9 (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _EUTRA_R9: return "eutra_r9";
      case _UTRA_R9: return "utra_r9";
      case _EUTRA2_V9E0: return "eutra2_v9e0";
      case _EXTELEM1: return "...";
      default: return "UNDEFINED";
      }
   }

   public void set_eutra_r9 (ARFCN_ValueEUTRA value) {
      setElement (_EUTRA_R9, value);
   }

   public void set_utra_r9 (ARFCN_ValueUTRA value) {
      setElement (_UTRA_R9, value);
   }

   public void set_eutra2_v9e0 (ARFCN_ValueEUTRA_v9e0 value) {
      setElement (_EUTRA2_V9E0, value);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      Asn1PerDecodeBuffer savedBuffer = null;
      boolean extbit = buffer.decodeBit ("extbit");

      if (!extbit) {
         int idx = (int) buffer.decodeConsWholeNumber (2, "index");
         choiceID = idx + 1;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         switch (idx) {
            // eutra_r9
            case 0: { 
               ARFCN_ValueEUTRA eutra_r9;
               element = eutra_r9 = new ARFCN_ValueEUTRA();
               eutra_r9.decode (buffer);
               break;
            }

            // utra_r9
            case 1: { 
               ARFCN_ValueUTRA utra_r9;
               element = utra_r9 = new ARFCN_ValueUTRA();
               utra_r9.decode (buffer);
               break;
            }

            default:
            throw new Asn1InvalidChoiceOptionException (buffer, idx);
         }
      }
      else {
         int idx = (int) buffer.decodeSmallNonNegWholeNumber ();
         choiceID = idx + 3;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         buffer.byteAlign();

         Asn1OpenType openType = new Asn1OpenType ();
         openType.decode (buffer);

         savedBuffer = buffer;
         buffer = new Asn1PerDecodeBuffer (openType.value, savedBuffer.isAligned());
         buffer.setEventHandlerList (savedBuffer);

         switch (idx) {
            // eutra2_v9e0
            case 0: { 
               ARFCN_ValueEUTRA_v9e0 eutra2_v9e0;
               element = eutra2_v9e0 = new ARFCN_ValueEUTRA_v9e0();
               eutra2_v9e0.decode (buffer);
               break;
            }

            // extElem1
            case 1: { 
               Asn1OpenType extElem1;
               element = extElem1 = new Asn1OpenType();
               extElem1.decode (buffer);

               buffer.invokeCharacters(extElem1.toString());
               break;
            }

            default:
               setElement (_EXTELEM1, openType);
               buffer.invokeCharacters (openType.toString());
         }

      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);

      if (savedBuffer != null) {
         buffer = savedBuffer;
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (element != null) {
         element.print (_sb, getElemName(), _level+1);
      }
      indent (_sb, _level);
      _sb.append("}\n");
   }

}
