/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MeasResultGERAN extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "MeasResultGERAN";
   }

   public CarrierFreqGERAN carrierFreq;
   public PhysCellIdGERAN physCellId;
   public MeasResultGERAN_cgi_Info cgi_Info;  // optional
   public MeasResultGERAN_measResult measResult;

   public MeasResultGERAN () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MeasResultGERAN (
      CarrierFreqGERAN carrierFreq_,
      PhysCellIdGERAN physCellId_,
      MeasResultGERAN_cgi_Info cgi_Info_,
      MeasResultGERAN_measResult measResult_
   ) {
      super();
      carrierFreq = carrierFreq_;
      physCellId = physCellId_;
      cgi_Info = cgi_Info_;
      measResult = measResult_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public MeasResultGERAN (
      CarrierFreqGERAN carrierFreq_,
      PhysCellIdGERAN physCellId_,
      MeasResultGERAN_measResult measResult_
   ) {
      super();
      carrierFreq = carrierFreq_;
      physCellId = physCellId_;
      measResult = measResult_;
   }

   public void init () {
      carrierFreq = null;
      physCellId = null;
      cgi_Info = null;
      measResult = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return carrierFreq;
         case 1: return physCellId;
         case 2: return cgi_Info;
         case 3: return measResult;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "carrierFreq";
         case 1: return "physCellId";
         case 2: return "cgi-Info";
         case 3: return "measResult";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean cgi_InfoPresent = buffer.decodeBit ("cgi_InfoPresent");

      // decode carrierFreq

      buffer.getContext().eventDispatcher.startElement("carrierFreq", -1);

      carrierFreq = new CarrierFreqGERAN();
      carrierFreq.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("carrierFreq", -1);

      // decode physCellId

      buffer.getContext().eventDispatcher.startElement("physCellId", -1);

      physCellId = new PhysCellIdGERAN();
      physCellId.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("physCellId", -1);

      // decode cgi_Info

      if (cgi_InfoPresent) {
         buffer.getContext().eventDispatcher.startElement("cgi_Info", -1);

         cgi_Info = new MeasResultGERAN_cgi_Info();
         cgi_Info.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("cgi_Info", -1);
      }
      else {
         cgi_Info = null;
      }

      // decode measResult

      buffer.getContext().eventDispatcher.startElement("measResult", -1);

      measResult = new MeasResultGERAN_measResult();
      measResult.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("measResult", -1);

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (carrierFreq != null) carrierFreq.print (_sb, "carrierFreq", _level+1);
      if (physCellId != null) physCellId.print (_sb, "physCellId", _level+1);
      if (cgi_Info != null) cgi_Info.print (_sb, "cgi_Info", _level+1);
      if (measResult != null) measResult.print (_sb, "measResult", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
