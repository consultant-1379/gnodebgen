/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.LPPA_IEs;

import com.objsys.asn1j.runtime.*;

public class PRSMutingConfiguration extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_LPPA_IEsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "PRSMutingConfiguration";
   }

   // Choice element identifier constants
   public final static byte _TWO = 1;
   public final static byte _FOUR = 2;
   public final static byte _EIGHT = 3;
   public final static byte _SIXTEEN = 4;
   public final static byte _EXTELEM1 = 5;

   public PRSMutingConfiguration () {
      super();
   }

   public PRSMutingConfiguration (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _TWO: return "two";
      case _FOUR: return "four";
      case _EIGHT: return "eight";
      case _SIXTEEN: return "sixteen";
      case _EXTELEM1: return "...";
      default: return "UNDEFINED";
      }
   }

   public void set_two (Asn1BitString value) {
      setElement (_TWO, value);
   }

   public void set_four (Asn1BitString value) {
      setElement (_FOUR, value);
   }

   public void set_eight (Asn1BitString value) {
      setElement (_EIGHT, value);
   }

   public void set_sixteen (Asn1BitString value) {
      setElement (_SIXTEEN, value);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      Asn1PerDecodeBuffer savedBuffer = null;
      boolean extbit = buffer.decodeBit ("extbit");

      if (!extbit) {
         int idx = (int) buffer.decodeConsWholeNumber (4, "index");
         choiceID = idx + 1;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         switch (idx) {
            // two
            case 0: { 
               Asn1BitString two;
               element = two = new Asn1BitString();
               two.decode (buffer, 2, 2);

               buffer.invokeCharacters(two.toString());
               break;
            }

            // four
            case 1: { 
               Asn1BitString four;
               element = four = new Asn1BitString();
               four.decode (buffer, 4, 4);

               buffer.invokeCharacters(four.toString());
               break;
            }

            // eight
            case 2: { 
               Asn1BitString eight;
               element = eight = new Asn1BitString();
               eight.decode (buffer, 8, 8);

               buffer.invokeCharacters(eight.toString());
               break;
            }

            // sixteen
            case 3: { 
               Asn1BitString sixteen;
               element = sixteen = new Asn1BitString();
               sixteen.decode (buffer, 16, 16);

               buffer.invokeCharacters(sixteen.toString());
               break;
            }

            default:
            throw new Asn1InvalidChoiceOptionException (buffer, idx);
         }
      }
      else {
         int idx = (int) buffer.decodeSmallNonNegWholeNumber ();
         choiceID = idx + 5;
         buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

         buffer.byteAlign();

         Asn1OpenType openType = new Asn1OpenType ();
         openType.decode (buffer);

         setElement (_EXTELEM1, openType);
         buffer.invokeCharacters (openType.toString());
      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);

      if (savedBuffer != null) {
         buffer = savedBuffer;
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (element != null) {
         element.print (_sb, getElemName(), _level+1);
      }
      indent (_sb, _level);
      _sb.append("}\n");
   }

}
