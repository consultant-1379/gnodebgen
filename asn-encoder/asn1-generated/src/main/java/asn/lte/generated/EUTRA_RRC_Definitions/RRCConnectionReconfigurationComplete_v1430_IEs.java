/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class RRCConnectionReconfigurationComplete_v1430_IEs extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "RRCConnectionReconfigurationComplete-v1430-IEs";
   }

   public PerCC_GapIndicationList_r14 perCC_GapIndicationList_r14;  // optional
   public Asn1Integer numFreqEffective_r14;  // optional
   public Asn1Integer numFreqEffectiveReduced_r14;  // optional
   public RRCConnectionReconfigurationComplete_v1510_IEs nonCriticalExtension;  // optional

   public RRCConnectionReconfigurationComplete_v1430_IEs () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public RRCConnectionReconfigurationComplete_v1430_IEs (
      PerCC_GapIndicationList_r14 perCC_GapIndicationList_r14_,
      Asn1Integer numFreqEffective_r14_,
      Asn1Integer numFreqEffectiveReduced_r14_,
      RRCConnectionReconfigurationComplete_v1510_IEs nonCriticalExtension_
   ) {
      super();
      perCC_GapIndicationList_r14 = perCC_GapIndicationList_r14_;
      numFreqEffective_r14 = numFreqEffective_r14_;
      numFreqEffectiveReduced_r14 = numFreqEffectiveReduced_r14_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public RRCConnectionReconfigurationComplete_v1430_IEs (PerCC_GapIndicationList_r14 perCC_GapIndicationList_r14_,
      long numFreqEffective_r14_,
      long numFreqEffectiveReduced_r14_,
      RRCConnectionReconfigurationComplete_v1510_IEs nonCriticalExtension_
   ) {
      super();
      perCC_GapIndicationList_r14 = perCC_GapIndicationList_r14_;
      numFreqEffective_r14 = new Asn1Integer (numFreqEffective_r14_);
      numFreqEffectiveReduced_r14 = new Asn1Integer (numFreqEffectiveReduced_r14_);
      nonCriticalExtension = nonCriticalExtension_;
   }

   public void init () {
      perCC_GapIndicationList_r14 = null;
      numFreqEffective_r14 = null;
      numFreqEffectiveReduced_r14 = null;
      nonCriticalExtension = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return perCC_GapIndicationList_r14;
         case 1: return numFreqEffective_r14;
         case 2: return numFreqEffectiveReduced_r14;
         case 3: return nonCriticalExtension;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "perCC-GapIndicationList-r14";
         case 1: return "numFreqEffective-r14";
         case 2: return "numFreqEffectiveReduced-r14";
         case 3: return "nonCriticalExtension";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean perCC_GapIndicationList_r14Present = buffer.decodeBit ("perCC_GapIndicationList_r14Present");
      boolean numFreqEffective_r14Present = buffer.decodeBit ("numFreqEffective_r14Present");
      boolean numFreqEffectiveReduced_r14Present = buffer.decodeBit ("numFreqEffectiveReduced_r14Present");
      boolean nonCriticalExtensionPresent = buffer.decodeBit ("nonCriticalExtensionPresent");

      // decode perCC_GapIndicationList_r14

      if (perCC_GapIndicationList_r14Present) {
         buffer.getContext().eventDispatcher.startElement("perCC_GapIndicationList_r14", -1);

         perCC_GapIndicationList_r14 = new PerCC_GapIndicationList_r14();
         perCC_GapIndicationList_r14.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("perCC_GapIndicationList_r14", -1);
      }
      else {
         perCC_GapIndicationList_r14 = null;
      }

      // decode numFreqEffective_r14

      if (numFreqEffective_r14Present) {
         buffer.getContext().eventDispatcher.startElement("numFreqEffective_r14", -1);

         numFreqEffective_r14 = new Asn1Integer();
         numFreqEffective_r14.decode (buffer, 1, 12);

         buffer.invokeCharacters(numFreqEffective_r14.toString());
         buffer.getContext().eventDispatcher.endElement("numFreqEffective_r14", -1);
      }
      else {
         numFreqEffective_r14 = null;
      }

      // decode numFreqEffectiveReduced_r14

      if (numFreqEffectiveReduced_r14Present) {
         buffer.getContext().eventDispatcher.startElement("numFreqEffectiveReduced_r14", -1);

         numFreqEffectiveReduced_r14 = new Asn1Integer();
         numFreqEffectiveReduced_r14.decode (buffer, 1, 12);

         buffer.invokeCharacters(numFreqEffectiveReduced_r14.toString());
         buffer.getContext().eventDispatcher.endElement("numFreqEffectiveReduced_r14", -1);
      }
      else {
         numFreqEffectiveReduced_r14 = null;
      }

      // decode nonCriticalExtension

      if (nonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension = new RRCConnectionReconfigurationComplete_v1510_IEs();
         nonCriticalExtension.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }
      else {
         nonCriticalExtension = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (perCC_GapIndicationList_r14 != null) perCC_GapIndicationList_r14.print (_sb, "perCC_GapIndicationList_r14", _level+1);
      if (numFreqEffective_r14 != null) numFreqEffective_r14.print (_sb, "numFreqEffective_r14", _level+1);
      if (numFreqEffectiveReduced_r14 != null) numFreqEffectiveReduced_r14.print (_sb, "numFreqEffectiveReduced_r14", _level+1);
      if (nonCriticalExtension != null) nonCriticalExtension.print (_sb, "nonCriticalExtension", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
