/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class CQI_ReportPeriodicProcExt_r11 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CQI-ReportPeriodicProcExt-r11";
   }

   public CQI_ReportPeriodicProcExtId_r11 cqi_ReportPeriodicProcExtId_r11;
   public Asn1Integer cqi_pmi_ConfigIndex_r11;
   public CQI_ReportPeriodicProcExt_r11_cqi_FormatIndicatorPeriodic_r11 cqi_FormatIndicatorPeriodic_r11;
   public Asn1Integer ri_ConfigIndex_r11;  // optional
   public CQI_ReportPeriodicProcExt_r11_csi_ConfigIndex_r11 csi_ConfigIndex_r11;  // optional
   public boolean mV2ExtPresent;
   public CRI_ReportConfig_r13 cri_ReportConfig_r13;  // optional
   public boolean mV3ExtPresent;
   public CQI_ReportPeriodicProcExt_r11_periodicityFactorWB_r13 periodicityFactorWB_r13 = null;  // optional
   public Asn1OpenExt extElem1;

   public CQI_ReportPeriodicProcExt_r11 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CQI_ReportPeriodicProcExt_r11 (
      CQI_ReportPeriodicProcExtId_r11 cqi_ReportPeriodicProcExtId_r11_,
      Asn1Integer cqi_pmi_ConfigIndex_r11_,
      CQI_ReportPeriodicProcExt_r11_cqi_FormatIndicatorPeriodic_r11 cqi_FormatIndicatorPeriodic_r11_,
      Asn1Integer ri_ConfigIndex_r11_,
      CQI_ReportPeriodicProcExt_r11_csi_ConfigIndex_r11 csi_ConfigIndex_r11_,
      CRI_ReportConfig_r13 cri_ReportConfig_r13_,
      CQI_ReportPeriodicProcExt_r11_periodicityFactorWB_r13 periodicityFactorWB_r13_
   ) {
      super();
      cqi_ReportPeriodicProcExtId_r11 = cqi_ReportPeriodicProcExtId_r11_;
      cqi_pmi_ConfigIndex_r11 = cqi_pmi_ConfigIndex_r11_;
      cqi_FormatIndicatorPeriodic_r11 = cqi_FormatIndicatorPeriodic_r11_;
      ri_ConfigIndex_r11 = ri_ConfigIndex_r11_;
      csi_ConfigIndex_r11 = csi_ConfigIndex_r11_;
      cri_ReportConfig_r13 = cri_ReportConfig_r13_;
      periodicityFactorWB_r13 = periodicityFactorWB_r13_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public CQI_ReportPeriodicProcExt_r11 (
      CQI_ReportPeriodicProcExtId_r11 cqi_ReportPeriodicProcExtId_r11_,
      Asn1Integer cqi_pmi_ConfigIndex_r11_,
      CQI_ReportPeriodicProcExt_r11_cqi_FormatIndicatorPeriodic_r11 cqi_FormatIndicatorPeriodic_r11_
   ) {
      super();
      cqi_ReportPeriodicProcExtId_r11 = cqi_ReportPeriodicProcExtId_r11_;
      cqi_pmi_ConfigIndex_r11 = cqi_pmi_ConfigIndex_r11_;
      cqi_FormatIndicatorPeriodic_r11 = cqi_FormatIndicatorPeriodic_r11_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public CQI_ReportPeriodicProcExt_r11 (long cqi_ReportPeriodicProcExtId_r11_,
      long cqi_pmi_ConfigIndex_r11_,
      CQI_ReportPeriodicProcExt_r11_cqi_FormatIndicatorPeriodic_r11 cqi_FormatIndicatorPeriodic_r11_,
      long ri_ConfigIndex_r11_,
      CQI_ReportPeriodicProcExt_r11_csi_ConfigIndex_r11 csi_ConfigIndex_r11_,
      CRI_ReportConfig_r13 cri_ReportConfig_r13_,
      CQI_ReportPeriodicProcExt_r11_periodicityFactorWB_r13 periodicityFactorWB_r13_
   ) {
      super();
      cqi_ReportPeriodicProcExtId_r11 = new CQI_ReportPeriodicProcExtId_r11 (cqi_ReportPeriodicProcExtId_r11_);
      cqi_pmi_ConfigIndex_r11 = new Asn1Integer (cqi_pmi_ConfigIndex_r11_);
      cqi_FormatIndicatorPeriodic_r11 = cqi_FormatIndicatorPeriodic_r11_;
      ri_ConfigIndex_r11 = new Asn1Integer (ri_ConfigIndex_r11_);
      csi_ConfigIndex_r11 = csi_ConfigIndex_r11_;
      cri_ReportConfig_r13 = cri_ReportConfig_r13_;
      periodicityFactorWB_r13 = periodicityFactorWB_r13_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public CQI_ReportPeriodicProcExt_r11 (
      long cqi_ReportPeriodicProcExtId_r11_,
      long cqi_pmi_ConfigIndex_r11_,
      CQI_ReportPeriodicProcExt_r11_cqi_FormatIndicatorPeriodic_r11 cqi_FormatIndicatorPeriodic_r11_
   ) {
      super();
      cqi_ReportPeriodicProcExtId_r11 = new CQI_ReportPeriodicProcExtId_r11 (cqi_ReportPeriodicProcExtId_r11_);
      cqi_pmi_ConfigIndex_r11 = new Asn1Integer (cqi_pmi_ConfigIndex_r11_);
      cqi_FormatIndicatorPeriodic_r11 = cqi_FormatIndicatorPeriodic_r11_;
   }

   public void init () {
      cqi_ReportPeriodicProcExtId_r11 = null;
      cqi_pmi_ConfigIndex_r11 = null;
      cqi_FormatIndicatorPeriodic_r11 = null;
      ri_ConfigIndex_r11 = null;
      csi_ConfigIndex_r11 = null;
      cri_ReportConfig_r13 = null;
      periodicityFactorWB_r13 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 8; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return cqi_ReportPeriodicProcExtId_r11;
         case 1: return cqi_pmi_ConfigIndex_r11;
         case 2: return cqi_FormatIndicatorPeriodic_r11;
         case 3: return ri_ConfigIndex_r11;
         case 4: return csi_ConfigIndex_r11;
         case 5: return cri_ReportConfig_r13;
         case 6: return periodicityFactorWB_r13;
         case 7: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "cqi-ReportPeriodicProcExtId-r11";
         case 1: return "cqi-pmi-ConfigIndex-r11";
         case 2: return "cqi-FormatIndicatorPeriodic-r11";
         case 3: return "ri-ConfigIndex-r11";
         case 4: return "csi-ConfigIndex-r11";
         case 5: return "cri-ReportConfig-r13";
         case 6: return "periodicityFactorWB-r13";
         case 7: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean ri_ConfigIndex_r11Present = buffer.decodeBit ("ri_ConfigIndex_r11Present");
      boolean csi_ConfigIndex_r11Present = buffer.decodeBit ("csi_ConfigIndex_r11Present");

      // decode cqi_ReportPeriodicProcExtId_r11

      buffer.getContext().eventDispatcher.startElement("cqi_ReportPeriodicProcExtId_r11", -1);

      cqi_ReportPeriodicProcExtId_r11 = new CQI_ReportPeriodicProcExtId_r11();
      cqi_ReportPeriodicProcExtId_r11.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("cqi_ReportPeriodicProcExtId_r11", -1);

      // decode cqi_pmi_ConfigIndex_r11

      buffer.getContext().eventDispatcher.startElement("cqi_pmi_ConfigIndex_r11", -1);

      cqi_pmi_ConfigIndex_r11 = new Asn1Integer();
      cqi_pmi_ConfigIndex_r11.decode (buffer, 0, 1023);

      buffer.invokeCharacters(cqi_pmi_ConfigIndex_r11.toString());
      buffer.getContext().eventDispatcher.endElement("cqi_pmi_ConfigIndex_r11", -1);

      // decode cqi_FormatIndicatorPeriodic_r11

      buffer.getContext().eventDispatcher.startElement("cqi_FormatIndicatorPeriodic_r11", -1);

      cqi_FormatIndicatorPeriodic_r11 = new CQI_ReportPeriodicProcExt_r11_cqi_FormatIndicatorPeriodic_r11();
      cqi_FormatIndicatorPeriodic_r11.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("cqi_FormatIndicatorPeriodic_r11", -1);

      // decode ri_ConfigIndex_r11

      if (ri_ConfigIndex_r11Present) {
         buffer.getContext().eventDispatcher.startElement("ri_ConfigIndex_r11", -1);

         ri_ConfigIndex_r11 = new Asn1Integer();
         ri_ConfigIndex_r11.decode (buffer, 0, 1023);

         buffer.invokeCharacters(ri_ConfigIndex_r11.toString());
         buffer.getContext().eventDispatcher.endElement("ri_ConfigIndex_r11", -1);
      }
      else {
         ri_ConfigIndex_r11 = null;
      }

      // decode csi_ConfigIndex_r11

      if (csi_ConfigIndex_r11Present) {
         buffer.getContext().eventDispatcher.startElement("csi_ConfigIndex_r11", -1);

         csi_ConfigIndex_r11 = new CQI_ReportPeriodicProcExt_r11_csi_ConfigIndex_r11();
         csi_ConfigIndex_r11.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("csi_ConfigIndex_r11", -1);
      }
      else {
         csi_ConfigIndex_r11 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean cri_ReportConfig_r13Present = buffer.decodeBit ("cri_ReportConfig_r13Present");

            // decode cri_ReportConfig_r13

            if (cri_ReportConfig_r13Present) {
               buffer.getContext().eventDispatcher.startElement("cri_ReportConfig_r13", -1);

               cri_ReportConfig_r13 = new CRI_ReportConfig_r13();
               cri_ReportConfig_r13.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("cri_ReportConfig_r13", -1);
            }
            else {
               cri_ReportConfig_r13 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean periodicityFactorWB_r13Present = buffer.decodeBit ("periodicityFactorWB_r13Present");

            // decode periodicityFactorWB_r13

            if (periodicityFactorWB_r13Present) {
               buffer.getContext().eventDispatcher.startElement("periodicityFactorWB_r13", -1);

               int tval = CQI_ReportPeriodicProcExt_r11_periodicityFactorWB_r13.decodeEnumValue (buffer);
               periodicityFactorWB_r13 = CQI_ReportPeriodicProcExt_r11_periodicityFactorWB_r13.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("periodicityFactorWB_r13", -1);
            }
            else {
               periodicityFactorWB_r13 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (cqi_ReportPeriodicProcExtId_r11 != null) cqi_ReportPeriodicProcExtId_r11.print (_sb, "cqi_ReportPeriodicProcExtId_r11", _level+1);
      if (cqi_pmi_ConfigIndex_r11 != null) cqi_pmi_ConfigIndex_r11.print (_sb, "cqi_pmi_ConfigIndex_r11", _level+1);
      if (cqi_FormatIndicatorPeriodic_r11 != null) cqi_FormatIndicatorPeriodic_r11.print (_sb, "cqi_FormatIndicatorPeriodic_r11", _level+1);
      if (ri_ConfigIndex_r11 != null) ri_ConfigIndex_r11.print (_sb, "ri_ConfigIndex_r11", _level+1);
      if (csi_ConfigIndex_r11 != null) csi_ConfigIndex_r11.print (_sb, "csi_ConfigIndex_r11", _level+1);
      if (cri_ReportConfig_r13 != null) cri_ReportConfig_r13.print (_sb, "cri_ReportConfig_r13", _level+1);
      if (periodicityFactorWB_r13 != null) periodicityFactorWB_r13.print (_sb, "periodicityFactorWB_r13", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
