/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.lte.generated.EUTRA_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MMTEL_Parameters_r14 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_EUTRA_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "MMTEL-Parameters-r14";
   }

   public MMTEL_Parameters_r14_delayBudgetReporting_r14 delayBudgetReporting_r14 = null;  // optional
   public MMTEL_Parameters_r14_pusch_Enhancements_r14 pusch_Enhancements_r14 = null;  // optional
   public MMTEL_Parameters_r14_recommendedBitRate_r14 recommendedBitRate_r14 = null;  // optional
   public MMTEL_Parameters_r14_recommendedBitRateQuery_r14 recommendedBitRateQuery_r14 = null;  // optional

   public MMTEL_Parameters_r14 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MMTEL_Parameters_r14 (
      MMTEL_Parameters_r14_delayBudgetReporting_r14 delayBudgetReporting_r14_,
      MMTEL_Parameters_r14_pusch_Enhancements_r14 pusch_Enhancements_r14_,
      MMTEL_Parameters_r14_recommendedBitRate_r14 recommendedBitRate_r14_,
      MMTEL_Parameters_r14_recommendedBitRateQuery_r14 recommendedBitRateQuery_r14_
   ) {
      super();
      delayBudgetReporting_r14 = delayBudgetReporting_r14_;
      pusch_Enhancements_r14 = pusch_Enhancements_r14_;
      recommendedBitRate_r14 = recommendedBitRate_r14_;
      recommendedBitRateQuery_r14 = recommendedBitRateQuery_r14_;
   }

   public void init () {
      delayBudgetReporting_r14 = null;
      pusch_Enhancements_r14 = null;
      recommendedBitRate_r14 = null;
      recommendedBitRateQuery_r14 = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return delayBudgetReporting_r14;
         case 1: return pusch_Enhancements_r14;
         case 2: return recommendedBitRate_r14;
         case 3: return recommendedBitRateQuery_r14;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "delayBudgetReporting-r14";
         case 1: return "pusch-Enhancements-r14";
         case 2: return "recommendedBitRate-r14";
         case 3: return "recommendedBitRateQuery-r14";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean delayBudgetReporting_r14Present = buffer.decodeBit ("delayBudgetReporting_r14Present");
      boolean pusch_Enhancements_r14Present = buffer.decodeBit ("pusch_Enhancements_r14Present");
      boolean recommendedBitRate_r14Present = buffer.decodeBit ("recommendedBitRate_r14Present");
      boolean recommendedBitRateQuery_r14Present = buffer.decodeBit ("recommendedBitRateQuery_r14Present");

      // decode delayBudgetReporting_r14

      if (delayBudgetReporting_r14Present) {
         buffer.getContext().eventDispatcher.startElement("delayBudgetReporting_r14", -1);

         int tval = MMTEL_Parameters_r14_delayBudgetReporting_r14.decodeEnumValue (buffer);
         delayBudgetReporting_r14 = MMTEL_Parameters_r14_delayBudgetReporting_r14.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("delayBudgetReporting_r14", -1);
      }
      else {
         delayBudgetReporting_r14 = null;
      }

      // decode pusch_Enhancements_r14

      if (pusch_Enhancements_r14Present) {
         buffer.getContext().eventDispatcher.startElement("pusch_Enhancements_r14", -1);

         int tval = MMTEL_Parameters_r14_pusch_Enhancements_r14.decodeEnumValue (buffer);
         pusch_Enhancements_r14 = MMTEL_Parameters_r14_pusch_Enhancements_r14.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("pusch_Enhancements_r14", -1);
      }
      else {
         pusch_Enhancements_r14 = null;
      }

      // decode recommendedBitRate_r14

      if (recommendedBitRate_r14Present) {
         buffer.getContext().eventDispatcher.startElement("recommendedBitRate_r14", -1);

         int tval = MMTEL_Parameters_r14_recommendedBitRate_r14.decodeEnumValue (buffer);
         recommendedBitRate_r14 = MMTEL_Parameters_r14_recommendedBitRate_r14.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("recommendedBitRate_r14", -1);
      }
      else {
         recommendedBitRate_r14 = null;
      }

      // decode recommendedBitRateQuery_r14

      if (recommendedBitRateQuery_r14Present) {
         buffer.getContext().eventDispatcher.startElement("recommendedBitRateQuery_r14", -1);

         int tval = MMTEL_Parameters_r14_recommendedBitRateQuery_r14.decodeEnumValue (buffer);
         recommendedBitRateQuery_r14 = MMTEL_Parameters_r14_recommendedBitRateQuery_r14.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("recommendedBitRateQuery_r14", -1);
      }
      else {
         recommendedBitRateQuery_r14 = null;
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (delayBudgetReporting_r14 != null) delayBudgetReporting_r14.print (_sb, "delayBudgetReporting_r14", _level+1);
      if (pusch_Enhancements_r14 != null) pusch_Enhancements_r14.print (_sb, "pusch_Enhancements_r14", _level+1);
      if (recommendedBitRate_r14 != null) recommendedBitRate_r14.print (_sb, "recommendedBitRate_r14", _level+1);
      if (recommendedBitRateQuery_r14 != null) recommendedBitRateQuery_r14.print (_sb, "recommendedBitRateQuery_r14", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
