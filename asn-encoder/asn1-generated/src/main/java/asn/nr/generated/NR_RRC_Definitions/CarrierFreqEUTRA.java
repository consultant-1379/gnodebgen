/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class CarrierFreqEUTRA extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CarrierFreqEUTRA";
   }

   public ARFCN_ValueEUTRA carrierFreq;
   public EUTRA_MultiBandInfoList eutra_multiBandInfoList;  // optional
   public EUTRA_FreqNeighCellList eutra_FreqNeighCellList;  // optional
   public EUTRA_FreqBlackCellList eutra_BlackCellList;  // optional
   public EUTRA_AllowedMeasBandwidth allowedMeasBandwidth = null;
   public EUTRA_PresenceAntennaPort1 presenceAntennaPort1;
   public CellReselectionPriority cellReselectionPriority;  // optional
   public CellReselectionSubPriority cellReselectionSubPriority = null;  // optional
   public ReselectionThreshold threshX_High;
   public ReselectionThreshold threshX_Low;
   public Asn1Integer q_RxLevMin;
   public Asn1Integer q_QualMin;
   public Asn1Integer p_MaxEUTRA;
   public CarrierFreqEUTRA_threshX_Q threshX_Q;  // optional

   public CarrierFreqEUTRA () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CarrierFreqEUTRA (
      ARFCN_ValueEUTRA carrierFreq_,
      EUTRA_MultiBandInfoList eutra_multiBandInfoList_,
      EUTRA_FreqNeighCellList eutra_FreqNeighCellList_,
      EUTRA_FreqBlackCellList eutra_BlackCellList_,
      EUTRA_AllowedMeasBandwidth allowedMeasBandwidth_,
      EUTRA_PresenceAntennaPort1 presenceAntennaPort1_,
      CellReselectionPriority cellReselectionPriority_,
      CellReselectionSubPriority cellReselectionSubPriority_,
      ReselectionThreshold threshX_High_,
      ReselectionThreshold threshX_Low_,
      Asn1Integer q_RxLevMin_,
      Asn1Integer q_QualMin_,
      Asn1Integer p_MaxEUTRA_,
      CarrierFreqEUTRA_threshX_Q threshX_Q_
   ) {
      super();
      carrierFreq = carrierFreq_;
      eutra_multiBandInfoList = eutra_multiBandInfoList_;
      eutra_FreqNeighCellList = eutra_FreqNeighCellList_;
      eutra_BlackCellList = eutra_BlackCellList_;
      allowedMeasBandwidth = allowedMeasBandwidth_;
      presenceAntennaPort1 = presenceAntennaPort1_;
      cellReselectionPriority = cellReselectionPriority_;
      cellReselectionSubPriority = cellReselectionSubPriority_;
      threshX_High = threshX_High_;
      threshX_Low = threshX_Low_;
      q_RxLevMin = q_RxLevMin_;
      q_QualMin = q_QualMin_;
      p_MaxEUTRA = p_MaxEUTRA_;
      threshX_Q = threshX_Q_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public CarrierFreqEUTRA (
      ARFCN_ValueEUTRA carrierFreq_,
      EUTRA_AllowedMeasBandwidth allowedMeasBandwidth_,
      EUTRA_PresenceAntennaPort1 presenceAntennaPort1_,
      ReselectionThreshold threshX_High_,
      ReselectionThreshold threshX_Low_,
      Asn1Integer q_RxLevMin_,
      Asn1Integer q_QualMin_,
      Asn1Integer p_MaxEUTRA_
   ) {
      super();
      carrierFreq = carrierFreq_;
      allowedMeasBandwidth = allowedMeasBandwidth_;
      presenceAntennaPort1 = presenceAntennaPort1_;
      threshX_High = threshX_High_;
      threshX_Low = threshX_Low_;
      q_RxLevMin = q_RxLevMin_;
      q_QualMin = q_QualMin_;
      p_MaxEUTRA = p_MaxEUTRA_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public CarrierFreqEUTRA (long carrierFreq_,
      EUTRA_MultiBandInfoList eutra_multiBandInfoList_,
      EUTRA_FreqNeighCellList eutra_FreqNeighCellList_,
      EUTRA_FreqBlackCellList eutra_BlackCellList_,
      EUTRA_AllowedMeasBandwidth allowedMeasBandwidth_,
      boolean presenceAntennaPort1_,
      long cellReselectionPriority_,
      CellReselectionSubPriority cellReselectionSubPriority_,
      long threshX_High_,
      long threshX_Low_,
      long q_RxLevMin_,
      long q_QualMin_,
      long p_MaxEUTRA_,
      CarrierFreqEUTRA_threshX_Q threshX_Q_
   ) {
      super();
      carrierFreq = new ARFCN_ValueEUTRA (carrierFreq_);
      eutra_multiBandInfoList = eutra_multiBandInfoList_;
      eutra_FreqNeighCellList = eutra_FreqNeighCellList_;
      eutra_BlackCellList = eutra_BlackCellList_;
      allowedMeasBandwidth = allowedMeasBandwidth_;
      presenceAntennaPort1 = new EUTRA_PresenceAntennaPort1 (presenceAntennaPort1_);
      cellReselectionPriority = new CellReselectionPriority (cellReselectionPriority_);
      cellReselectionSubPriority = cellReselectionSubPriority_;
      threshX_High = new ReselectionThreshold (threshX_High_);
      threshX_Low = new ReselectionThreshold (threshX_Low_);
      q_RxLevMin = new Asn1Integer (q_RxLevMin_);
      q_QualMin = new Asn1Integer (q_QualMin_);
      p_MaxEUTRA = new Asn1Integer (p_MaxEUTRA_);
      threshX_Q = threshX_Q_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public CarrierFreqEUTRA (
      long carrierFreq_,
      EUTRA_AllowedMeasBandwidth allowedMeasBandwidth_,
      boolean presenceAntennaPort1_,
      long threshX_High_,
      long threshX_Low_,
      long q_RxLevMin_,
      long q_QualMin_,
      long p_MaxEUTRA_
   ) {
      super();
      carrierFreq = new ARFCN_ValueEUTRA (carrierFreq_);
      allowedMeasBandwidth = allowedMeasBandwidth_;
      presenceAntennaPort1 = new EUTRA_PresenceAntennaPort1 (presenceAntennaPort1_);
      threshX_High = new ReselectionThreshold (threshX_High_);
      threshX_Low = new ReselectionThreshold (threshX_Low_);
      q_RxLevMin = new Asn1Integer (q_RxLevMin_);
      q_QualMin = new Asn1Integer (q_QualMin_);
      p_MaxEUTRA = new Asn1Integer (p_MaxEUTRA_);
   }

   public void init () {
      carrierFreq = null;
      eutra_multiBandInfoList = null;
      eutra_FreqNeighCellList = null;
      eutra_BlackCellList = null;
      allowedMeasBandwidth = null;
      presenceAntennaPort1 = null;
      cellReselectionPriority = null;
      cellReselectionSubPriority = null;
      threshX_High = null;
      threshX_Low = null;
      q_RxLevMin = null;
      q_QualMin = null;
      p_MaxEUTRA = null;
      threshX_Q = null;
   }

   public int getElementCount() { return 14; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return carrierFreq;
         case 1: return eutra_multiBandInfoList;
         case 2: return eutra_FreqNeighCellList;
         case 3: return eutra_BlackCellList;
         case 4: return allowedMeasBandwidth;
         case 5: return presenceAntennaPort1;
         case 6: return cellReselectionPriority;
         case 7: return cellReselectionSubPriority;
         case 8: return threshX_High;
         case 9: return threshX_Low;
         case 10: return q_RxLevMin;
         case 11: return q_QualMin;
         case 12: return p_MaxEUTRA;
         case 13: return threshX_Q;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "carrierFreq";
         case 1: return "eutra-multiBandInfoList";
         case 2: return "eutra-FreqNeighCellList";
         case 3: return "eutra-BlackCellList";
         case 4: return "allowedMeasBandwidth";
         case 5: return "presenceAntennaPort1";
         case 6: return "cellReselectionPriority";
         case 7: return "cellReselectionSubPriority";
         case 8: return "threshX-High";
         case 9: return "threshX-Low";
         case 10: return "q-RxLevMin";
         case 11: return "q-QualMin";
         case 12: return "p-MaxEUTRA";
         case 13: return "threshX-Q";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean eutra_multiBandInfoListPresent = buffer.decodeBit ("eutra_multiBandInfoListPresent");
      boolean eutra_FreqNeighCellListPresent = buffer.decodeBit ("eutra_FreqNeighCellListPresent");
      boolean eutra_BlackCellListPresent = buffer.decodeBit ("eutra_BlackCellListPresent");
      boolean cellReselectionPriorityPresent = buffer.decodeBit ("cellReselectionPriorityPresent");
      boolean cellReselectionSubPriorityPresent = buffer.decodeBit ("cellReselectionSubPriorityPresent");
      boolean threshX_QPresent = buffer.decodeBit ("threshX_QPresent");

      // decode carrierFreq

      buffer.getContext().eventDispatcher.startElement("carrierFreq", -1);

      carrierFreq = new ARFCN_ValueEUTRA();
      carrierFreq.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("carrierFreq", -1);

      // decode eutra_multiBandInfoList

      if (eutra_multiBandInfoListPresent) {
         buffer.getContext().eventDispatcher.startElement("eutra_multiBandInfoList", -1);

         eutra_multiBandInfoList = new EUTRA_MultiBandInfoList();
         eutra_multiBandInfoList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("eutra_multiBandInfoList", -1);
      }
      else {
         eutra_multiBandInfoList = null;
      }

      // decode eutra_FreqNeighCellList

      if (eutra_FreqNeighCellListPresent) {
         buffer.getContext().eventDispatcher.startElement("eutra_FreqNeighCellList", -1);

         eutra_FreqNeighCellList = new EUTRA_FreqNeighCellList();
         eutra_FreqNeighCellList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("eutra_FreqNeighCellList", -1);
      }
      else {
         eutra_FreqNeighCellList = null;
      }

      // decode eutra_BlackCellList

      if (eutra_BlackCellListPresent) {
         buffer.getContext().eventDispatcher.startElement("eutra_BlackCellList", -1);

         eutra_BlackCellList = new EUTRA_FreqBlackCellList();
         eutra_BlackCellList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("eutra_BlackCellList", -1);
      }
      else {
         eutra_BlackCellList = null;
      }

      // decode allowedMeasBandwidth

      buffer.getContext().eventDispatcher.startElement("allowedMeasBandwidth", -1);

      {
         int tval = EUTRA_AllowedMeasBandwidth.decodeEnumValue (buffer);
         allowedMeasBandwidth = EUTRA_AllowedMeasBandwidth.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("allowedMeasBandwidth", -1);

      // decode presenceAntennaPort1

      buffer.getContext().eventDispatcher.startElement("presenceAntennaPort1", -1);

      presenceAntennaPort1 = new EUTRA_PresenceAntennaPort1();
      presenceAntennaPort1.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("presenceAntennaPort1", -1);

      // decode cellReselectionPriority

      if (cellReselectionPriorityPresent) {
         buffer.getContext().eventDispatcher.startElement("cellReselectionPriority", -1);

         cellReselectionPriority = new CellReselectionPriority();
         cellReselectionPriority.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("cellReselectionPriority", -1);
      }
      else {
         cellReselectionPriority = null;
      }

      // decode cellReselectionSubPriority

      if (cellReselectionSubPriorityPresent) {
         buffer.getContext().eventDispatcher.startElement("cellReselectionSubPriority", -1);

         int tval = CellReselectionSubPriority.decodeEnumValue (buffer);
         cellReselectionSubPriority = CellReselectionSubPriority.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("cellReselectionSubPriority", -1);
      }
      else {
         cellReselectionSubPriority = null;
      }

      // decode threshX_High

      buffer.getContext().eventDispatcher.startElement("threshX_High", -1);

      threshX_High = new ReselectionThreshold();
      threshX_High.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("threshX_High", -1);

      // decode threshX_Low

      buffer.getContext().eventDispatcher.startElement("threshX_Low", -1);

      threshX_Low = new ReselectionThreshold();
      threshX_Low.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("threshX_Low", -1);

      // decode q_RxLevMin

      buffer.getContext().eventDispatcher.startElement("q_RxLevMin", -1);

      q_RxLevMin = new Asn1Integer();
      q_RxLevMin.decode (buffer, -70, -22);

      buffer.invokeCharacters(q_RxLevMin.toString());
      buffer.getContext().eventDispatcher.endElement("q_RxLevMin", -1);

      // decode q_QualMin

      buffer.getContext().eventDispatcher.startElement("q_QualMin", -1);

      q_QualMin = new Asn1Integer();
      q_QualMin.decode (buffer, -34, -3);

      buffer.invokeCharacters(q_QualMin.toString());
      buffer.getContext().eventDispatcher.endElement("q_QualMin", -1);

      // decode p_MaxEUTRA

      buffer.getContext().eventDispatcher.startElement("p_MaxEUTRA", -1);

      p_MaxEUTRA = new Asn1Integer();
      p_MaxEUTRA.decode (buffer, -30, 33);

      buffer.invokeCharacters(p_MaxEUTRA.toString());
      buffer.getContext().eventDispatcher.endElement("p_MaxEUTRA", -1);

      // decode threshX_Q

      if (threshX_QPresent) {
         buffer.getContext().eventDispatcher.startElement("threshX_Q", -1);

         threshX_Q = new CarrierFreqEUTRA_threshX_Q();
         threshX_Q.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("threshX_Q", -1);
      }
      else {
         threshX_Q = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((eutra_multiBandInfoList != null), null);
      buffer.encodeBit ((eutra_FreqNeighCellList != null), null);
      buffer.encodeBit ((eutra_BlackCellList != null), null);
      buffer.encodeBit ((cellReselectionPriority != null), null);
      buffer.encodeBit ((cellReselectionSubPriority != null), null);
      buffer.encodeBit ((threshX_Q != null), null);

      // encode carrierFreq

      if (carrierFreq != null) {
         buffer.getContext().eventDispatcher.startElement("carrierFreq", -1);

         carrierFreq.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("carrierFreq", -1);
      }
      else throw new Asn1MissingRequiredException ("carrierFreq");

      // encode eutra_multiBandInfoList

      if (eutra_multiBandInfoList != null) {
         buffer.getContext().eventDispatcher.startElement("eutra_multiBandInfoList", -1);

         eutra_multiBandInfoList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("eutra_multiBandInfoList", -1);
      }

      // encode eutra_FreqNeighCellList

      if (eutra_FreqNeighCellList != null) {
         buffer.getContext().eventDispatcher.startElement("eutra_FreqNeighCellList", -1);

         eutra_FreqNeighCellList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("eutra_FreqNeighCellList", -1);
      }

      // encode eutra_BlackCellList

      if (eutra_BlackCellList != null) {
         buffer.getContext().eventDispatcher.startElement("eutra_BlackCellList", -1);

         eutra_BlackCellList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("eutra_BlackCellList", -1);
      }

      // encode allowedMeasBandwidth

      if (allowedMeasBandwidth != null) {
         buffer.getContext().eventDispatcher.startElement("allowedMeasBandwidth", -1);

         allowedMeasBandwidth.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("allowedMeasBandwidth", -1);
      }
      else throw new Asn1MissingRequiredException ("allowedMeasBandwidth");

      // encode presenceAntennaPort1

      if (presenceAntennaPort1 != null) {
         buffer.getContext().eventDispatcher.startElement("presenceAntennaPort1", -1);

         presenceAntennaPort1.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("presenceAntennaPort1", -1);
      }
      else throw new Asn1MissingRequiredException ("presenceAntennaPort1");

      // encode cellReselectionPriority

      if (cellReselectionPriority != null) {
         buffer.getContext().eventDispatcher.startElement("cellReselectionPriority", -1);

         cellReselectionPriority.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("cellReselectionPriority", -1);
      }

      // encode cellReselectionSubPriority

      if (cellReselectionSubPriority != null) {
         buffer.getContext().eventDispatcher.startElement("cellReselectionSubPriority", -1);

         cellReselectionSubPriority.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("cellReselectionSubPriority", -1);
      }

      // encode threshX_High

      if (threshX_High != null) {
         buffer.getContext().eventDispatcher.startElement("threshX_High", -1);

         threshX_High.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("threshX_High", -1);
      }
      else throw new Asn1MissingRequiredException ("threshX_High");

      // encode threshX_Low

      if (threshX_Low != null) {
         buffer.getContext().eventDispatcher.startElement("threshX_Low", -1);

         threshX_Low.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("threshX_Low", -1);
      }
      else throw new Asn1MissingRequiredException ("threshX_Low");

      // encode q_RxLevMin

      if (q_RxLevMin != null) {
         buffer.getContext().eventDispatcher.startElement("q_RxLevMin", -1);

         q_RxLevMin.encode (buffer, -70, -22);

         buffer.getContext().eventDispatcher.endElement("q_RxLevMin", -1);
      }
      else throw new Asn1MissingRequiredException ("q_RxLevMin");

      // encode q_QualMin

      if (q_QualMin != null) {
         buffer.getContext().eventDispatcher.startElement("q_QualMin", -1);

         q_QualMin.encode (buffer, -34, -3);

         buffer.getContext().eventDispatcher.endElement("q_QualMin", -1);
      }
      else throw new Asn1MissingRequiredException ("q_QualMin");

      // encode p_MaxEUTRA

      if (p_MaxEUTRA != null) {
         buffer.getContext().eventDispatcher.startElement("p_MaxEUTRA", -1);

         p_MaxEUTRA.encode (buffer, -30, 33);

         buffer.getContext().eventDispatcher.endElement("p_MaxEUTRA", -1);
      }
      else throw new Asn1MissingRequiredException ("p_MaxEUTRA");

      // encode threshX_Q

      if (threshX_Q != null) {
         buffer.getContext().eventDispatcher.startElement("threshX_Q", -1);

         threshX_Q.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("threshX_Q", -1);
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (carrierFreq != null) carrierFreq.print (_sb, "carrierFreq", _level+1);
      if (eutra_multiBandInfoList != null) eutra_multiBandInfoList.print (_sb, "eutra_multiBandInfoList", _level+1);
      if (eutra_FreqNeighCellList != null) eutra_FreqNeighCellList.print (_sb, "eutra_FreqNeighCellList", _level+1);
      if (eutra_BlackCellList != null) eutra_BlackCellList.print (_sb, "eutra_BlackCellList", _level+1);
      if (allowedMeasBandwidth != null) allowedMeasBandwidth.print (_sb, "allowedMeasBandwidth", _level+1);
      if (presenceAntennaPort1 != null) presenceAntennaPort1.print (_sb, "presenceAntennaPort1", _level+1);
      if (cellReselectionPriority != null) cellReselectionPriority.print (_sb, "cellReselectionPriority", _level+1);
      if (cellReselectionSubPriority != null) cellReselectionSubPriority.print (_sb, "cellReselectionSubPriority", _level+1);
      if (threshX_High != null) threshX_High.print (_sb, "threshX_High", _level+1);
      if (threshX_Low != null) threshX_Low.print (_sb, "threshX_Low", _level+1);
      if (q_RxLevMin != null) q_RxLevMin.print (_sb, "q_RxLevMin", _level+1);
      if (q_QualMin != null) q_QualMin.print (_sb, "q_QualMin", _level+1);
      if (p_MaxEUTRA != null) p_MaxEUTRA.print (_sb, "p_MaxEUTRA", _level+1);
      if (threshX_Q != null) threshX_Q.print (_sb, "threshX_Q", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
