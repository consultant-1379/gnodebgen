/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class CodebookConfig_codebookType_type1_subType_typeI_SinglePanel_nrOfAntennaPorts_moreThanTwo_n1_n2 extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CHOICE";
   }

   // Choice element identifier constants
   public final static byte _TWO_ONE_TYPEI_SINGLEPANEL_RESTRICTION = 1;
   public final static byte _TWO_TWO_TYPEI_SINGLEPANEL_RESTRICTION = 2;
   public final static byte _FOUR_ONE_TYPEI_SINGLEPANEL_RESTRICTION = 3;
   public final static byte _THREE_TWO_TYPEI_SINGLEPANEL_RESTRICTION = 4;
   public final static byte _SIX_ONE_TYPEI_SINGLEPANEL_RESTRICTION = 5;
   public final static byte _FOUR_TWO_TYPEI_SINGLEPANEL_RESTRICTION = 6;
   public final static byte _EIGHT_ONE_TYPEI_SINGLEPANEL_RESTRICTION = 7;
   public final static byte _FOUR_THREE_TYPEI_SINGLEPANEL_RESTRICTION = 8;
   public final static byte _SIX_TWO_TYPEI_SINGLEPANEL_RESTRICTION = 9;
   public final static byte _TWELVE_ONE_TYPEI_SINGLEPANEL_RESTRICTION = 10;
   public final static byte _FOUR_FOUR_TYPEI_SINGLEPANEL_RESTRICTION = 11;
   public final static byte _EIGHT_TWO_TYPEI_SINGLEPANEL_RESTRICTION = 12;
   public final static byte _SIXTEEN_ONE_TYPEI_SINGLEPANEL_RESTRICTION = 13;

   public CodebookConfig_codebookType_type1_subType_typeI_SinglePanel_nrOfAntennaPorts_moreThanTwo_n1_n2 () {
      super();
   }

   public CodebookConfig_codebookType_type1_subType_typeI_SinglePanel_nrOfAntennaPorts_moreThanTwo_n1_n2 (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _TWO_ONE_TYPEI_SINGLEPANEL_RESTRICTION: return "two_one_TypeI_SinglePanel_Restriction";
      case _TWO_TWO_TYPEI_SINGLEPANEL_RESTRICTION: return "two_two_TypeI_SinglePanel_Restriction";
      case _FOUR_ONE_TYPEI_SINGLEPANEL_RESTRICTION: return "four_one_TypeI_SinglePanel_Restriction";
      case _THREE_TWO_TYPEI_SINGLEPANEL_RESTRICTION: return "three_two_TypeI_SinglePanel_Restriction";
      case _SIX_ONE_TYPEI_SINGLEPANEL_RESTRICTION: return "six_one_TypeI_SinglePanel_Restriction";
      case _FOUR_TWO_TYPEI_SINGLEPANEL_RESTRICTION: return "four_two_TypeI_SinglePanel_Restriction";
      case _EIGHT_ONE_TYPEI_SINGLEPANEL_RESTRICTION: return "eight_one_TypeI_SinglePanel_Restriction";
      case _FOUR_THREE_TYPEI_SINGLEPANEL_RESTRICTION: return "four_three_TypeI_SinglePanel_Restriction";
      case _SIX_TWO_TYPEI_SINGLEPANEL_RESTRICTION: return "six_two_TypeI_SinglePanel_Restriction";
      case _TWELVE_ONE_TYPEI_SINGLEPANEL_RESTRICTION: return "twelve_one_TypeI_SinglePanel_Restriction";
      case _FOUR_FOUR_TYPEI_SINGLEPANEL_RESTRICTION: return "four_four_TypeI_SinglePanel_Restriction";
      case _EIGHT_TWO_TYPEI_SINGLEPANEL_RESTRICTION: return "eight_two_TypeI_SinglePanel_Restriction";
      case _SIXTEEN_ONE_TYPEI_SINGLEPANEL_RESTRICTION: return "sixteen_one_TypeI_SinglePanel_Restriction";
      default: return "UNDEFINED";
      }
   }

   public void set_two_one_TypeI_SinglePanel_Restriction (Asn1BitString value) {
      setElement (_TWO_ONE_TYPEI_SINGLEPANEL_RESTRICTION, value);
   }

   public void set_two_two_TypeI_SinglePanel_Restriction (Asn1BitString value) {
      setElement (_TWO_TWO_TYPEI_SINGLEPANEL_RESTRICTION, value);
   }

   public void set_four_one_TypeI_SinglePanel_Restriction (Asn1BitString value) {
      setElement (_FOUR_ONE_TYPEI_SINGLEPANEL_RESTRICTION, value);
   }

   public void set_three_two_TypeI_SinglePanel_Restriction (Asn1BitString value) {
      setElement (_THREE_TWO_TYPEI_SINGLEPANEL_RESTRICTION, value);
   }

   public void set_six_one_TypeI_SinglePanel_Restriction (Asn1BitString value) {
      setElement (_SIX_ONE_TYPEI_SINGLEPANEL_RESTRICTION, value);
   }

   public void set_four_two_TypeI_SinglePanel_Restriction (Asn1BitString value) {
      setElement (_FOUR_TWO_TYPEI_SINGLEPANEL_RESTRICTION, value);
   }

   public void set_eight_one_TypeI_SinglePanel_Restriction (Asn1BitString value) {
      setElement (_EIGHT_ONE_TYPEI_SINGLEPANEL_RESTRICTION, value);
   }

   public void set_four_three_TypeI_SinglePanel_Restriction (Asn1BitString value) {
      setElement (_FOUR_THREE_TYPEI_SINGLEPANEL_RESTRICTION, value);
   }

   public void set_six_two_TypeI_SinglePanel_Restriction (Asn1BitString value) {
      setElement (_SIX_TWO_TYPEI_SINGLEPANEL_RESTRICTION, value);
   }

   public void set_twelve_one_TypeI_SinglePanel_Restriction (Asn1BitString value) {
      setElement (_TWELVE_ONE_TYPEI_SINGLEPANEL_RESTRICTION, value);
   }

   public void set_four_four_TypeI_SinglePanel_Restriction (Asn1BitString value) {
      setElement (_FOUR_FOUR_TYPEI_SINGLEPANEL_RESTRICTION, value);
   }

   public void set_eight_two_TypeI_SinglePanel_Restriction (Asn1BitString value) {
      setElement (_EIGHT_TWO_TYPEI_SINGLEPANEL_RESTRICTION, value);
   }

   public void set_sixteen_one_TypeI_SinglePanel_Restriction (Asn1BitString value) {
      setElement (_SIXTEEN_ONE_TYPEI_SINGLEPANEL_RESTRICTION, value);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int idx = (int) buffer.decodeConsWholeNumber (13, "index");
      choiceID = idx + 1;
      buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

      switch (idx) {
         // two_one_TypeI_SinglePanel_Restriction
         case 0: { 
            Asn1BitString two_one_TypeI_SinglePanel_Restriction;
            element = two_one_TypeI_SinglePanel_Restriction = new Asn1BitString();
            two_one_TypeI_SinglePanel_Restriction.decode (buffer, 8, 8);

            buffer.invokeCharacters(two_one_TypeI_SinglePanel_Restriction.toString());
            break;
         }

         // two_two_TypeI_SinglePanel_Restriction
         case 1: { 
            Asn1BitString two_two_TypeI_SinglePanel_Restriction;
            element = two_two_TypeI_SinglePanel_Restriction = new Asn1BitString();
            two_two_TypeI_SinglePanel_Restriction.decode (buffer, 64, 64);

            buffer.invokeCharacters(two_two_TypeI_SinglePanel_Restriction.toString());
            break;
         }

         // four_one_TypeI_SinglePanel_Restriction
         case 2: { 
            Asn1BitString four_one_TypeI_SinglePanel_Restriction;
            element = four_one_TypeI_SinglePanel_Restriction = new Asn1BitString();
            four_one_TypeI_SinglePanel_Restriction.decode (buffer, 16, 16);

            buffer.invokeCharacters(four_one_TypeI_SinglePanel_Restriction.toString());
            break;
         }

         // three_two_TypeI_SinglePanel_Restriction
         case 3: { 
            Asn1BitString three_two_TypeI_SinglePanel_Restriction;
            element = three_two_TypeI_SinglePanel_Restriction = new Asn1BitString();
            three_two_TypeI_SinglePanel_Restriction.decode (buffer, 96, 96);

            buffer.invokeCharacters(three_two_TypeI_SinglePanel_Restriction.toString());
            break;
         }

         // six_one_TypeI_SinglePanel_Restriction
         case 4: { 
            Asn1BitString six_one_TypeI_SinglePanel_Restriction;
            element = six_one_TypeI_SinglePanel_Restriction = new Asn1BitString();
            six_one_TypeI_SinglePanel_Restriction.decode (buffer, 24, 24);

            buffer.invokeCharacters(six_one_TypeI_SinglePanel_Restriction.toString());
            break;
         }

         // four_two_TypeI_SinglePanel_Restriction
         case 5: { 
            Asn1BitString four_two_TypeI_SinglePanel_Restriction;
            element = four_two_TypeI_SinglePanel_Restriction = new Asn1BitString();
            four_two_TypeI_SinglePanel_Restriction.decode (buffer, 128, 128);

            buffer.invokeCharacters(four_two_TypeI_SinglePanel_Restriction.toString());
            break;
         }

         // eight_one_TypeI_SinglePanel_Restriction
         case 6: { 
            Asn1BitString eight_one_TypeI_SinglePanel_Restriction;
            element = eight_one_TypeI_SinglePanel_Restriction = new Asn1BitString();
            eight_one_TypeI_SinglePanel_Restriction.decode (buffer, 32, 32);

            buffer.invokeCharacters(eight_one_TypeI_SinglePanel_Restriction.toString());
            break;
         }

         // four_three_TypeI_SinglePanel_Restriction
         case 7: { 
            Asn1BitString four_three_TypeI_SinglePanel_Restriction;
            element = four_three_TypeI_SinglePanel_Restriction = new Asn1BitString();
            four_three_TypeI_SinglePanel_Restriction.decode (buffer, 192, 192);

            buffer.invokeCharacters(four_three_TypeI_SinglePanel_Restriction.toString());
            break;
         }

         // six_two_TypeI_SinglePanel_Restriction
         case 8: { 
            Asn1BitString six_two_TypeI_SinglePanel_Restriction;
            element = six_two_TypeI_SinglePanel_Restriction = new Asn1BitString();
            six_two_TypeI_SinglePanel_Restriction.decode (buffer, 192, 192);

            buffer.invokeCharacters(six_two_TypeI_SinglePanel_Restriction.toString());
            break;
         }

         // twelve_one_TypeI_SinglePanel_Restriction
         case 9: { 
            Asn1BitString twelve_one_TypeI_SinglePanel_Restriction;
            element = twelve_one_TypeI_SinglePanel_Restriction = new Asn1BitString();
            twelve_one_TypeI_SinglePanel_Restriction.decode (buffer, 48, 48);

            buffer.invokeCharacters(twelve_one_TypeI_SinglePanel_Restriction.toString());
            break;
         }

         // four_four_TypeI_SinglePanel_Restriction
         case 10: { 
            Asn1BitString four_four_TypeI_SinglePanel_Restriction;
            element = four_four_TypeI_SinglePanel_Restriction = new Asn1BitString();
            four_four_TypeI_SinglePanel_Restriction.decode (buffer, 256, 256);

            buffer.invokeCharacters(four_four_TypeI_SinglePanel_Restriction.toString());
            break;
         }

         // eight_two_TypeI_SinglePanel_Restriction
         case 11: { 
            Asn1BitString eight_two_TypeI_SinglePanel_Restriction;
            element = eight_two_TypeI_SinglePanel_Restriction = new Asn1BitString();
            eight_two_TypeI_SinglePanel_Restriction.decode (buffer, 256, 256);

            buffer.invokeCharacters(eight_two_TypeI_SinglePanel_Restriction.toString());
            break;
         }

         // sixteen_one_TypeI_SinglePanel_Restriction
         case 12: { 
            Asn1BitString sixteen_one_TypeI_SinglePanel_Restriction;
            element = sixteen_one_TypeI_SinglePanel_Restriction = new Asn1BitString();
            sixteen_one_TypeI_SinglePanel_Restriction.decode (buffer, 64, 64);

            buffer.invokeCharacters(sixteen_one_TypeI_SinglePanel_Restriction.toString());
            break;
         }

         default:
         throw new Asn1InvalidChoiceOptionException (buffer, idx);
      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // Encode choice index value

      buffer.encodeConsWholeNumber (choiceID - 1, 13, "index");

      buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

      switch (choiceID) {
         // two_one_TypeI_SinglePanel_Restriction
         case _TWO_ONE_TYPEI_SINGLEPANEL_RESTRICTION:
            Asn1BitString two_one_TypeI_SinglePanel_Restriction = (Asn1BitString) element;
            two_one_TypeI_SinglePanel_Restriction.encode (buffer, 8, 8);
            break;

         // two_two_TypeI_SinglePanel_Restriction
         case _TWO_TWO_TYPEI_SINGLEPANEL_RESTRICTION:
            Asn1BitString two_two_TypeI_SinglePanel_Restriction = (Asn1BitString) element;
            two_two_TypeI_SinglePanel_Restriction.encode (buffer, 64, 64);
            break;

         // four_one_TypeI_SinglePanel_Restriction
         case _FOUR_ONE_TYPEI_SINGLEPANEL_RESTRICTION:
            Asn1BitString four_one_TypeI_SinglePanel_Restriction = (Asn1BitString) element;
            four_one_TypeI_SinglePanel_Restriction.encode (buffer, 16, 16);
            break;

         // three_two_TypeI_SinglePanel_Restriction
         case _THREE_TWO_TYPEI_SINGLEPANEL_RESTRICTION:
            Asn1BitString three_two_TypeI_SinglePanel_Restriction = (Asn1BitString) element;
            three_two_TypeI_SinglePanel_Restriction.encode (buffer, 96, 96);
            break;

         // six_one_TypeI_SinglePanel_Restriction
         case _SIX_ONE_TYPEI_SINGLEPANEL_RESTRICTION:
            Asn1BitString six_one_TypeI_SinglePanel_Restriction = (Asn1BitString) element;
            six_one_TypeI_SinglePanel_Restriction.encode (buffer, 24, 24);
            break;

         // four_two_TypeI_SinglePanel_Restriction
         case _FOUR_TWO_TYPEI_SINGLEPANEL_RESTRICTION:
            Asn1BitString four_two_TypeI_SinglePanel_Restriction = (Asn1BitString) element;
            four_two_TypeI_SinglePanel_Restriction.encode (buffer, 128, 128);
            break;

         // eight_one_TypeI_SinglePanel_Restriction
         case _EIGHT_ONE_TYPEI_SINGLEPANEL_RESTRICTION:
            Asn1BitString eight_one_TypeI_SinglePanel_Restriction = (Asn1BitString) element;
            eight_one_TypeI_SinglePanel_Restriction.encode (buffer, 32, 32);
            break;

         // four_three_TypeI_SinglePanel_Restriction
         case _FOUR_THREE_TYPEI_SINGLEPANEL_RESTRICTION:
            Asn1BitString four_three_TypeI_SinglePanel_Restriction = (Asn1BitString) element;
            four_three_TypeI_SinglePanel_Restriction.encode (buffer, 192, 192);
            break;

         // six_two_TypeI_SinglePanel_Restriction
         case _SIX_TWO_TYPEI_SINGLEPANEL_RESTRICTION:
            Asn1BitString six_two_TypeI_SinglePanel_Restriction = (Asn1BitString) element;
            six_two_TypeI_SinglePanel_Restriction.encode (buffer, 192, 192);
            break;

         // twelve_one_TypeI_SinglePanel_Restriction
         case _TWELVE_ONE_TYPEI_SINGLEPANEL_RESTRICTION:
            Asn1BitString twelve_one_TypeI_SinglePanel_Restriction = (Asn1BitString) element;
            twelve_one_TypeI_SinglePanel_Restriction.encode (buffer, 48, 48);
            break;

         // four_four_TypeI_SinglePanel_Restriction
         case _FOUR_FOUR_TYPEI_SINGLEPANEL_RESTRICTION:
            Asn1BitString four_four_TypeI_SinglePanel_Restriction = (Asn1BitString) element;
            four_four_TypeI_SinglePanel_Restriction.encode (buffer, 256, 256);
            break;

         // eight_two_TypeI_SinglePanel_Restriction
         case _EIGHT_TWO_TYPEI_SINGLEPANEL_RESTRICTION:
            Asn1BitString eight_two_TypeI_SinglePanel_Restriction = (Asn1BitString) element;
            eight_two_TypeI_SinglePanel_Restriction.encode (buffer, 256, 256);
            break;

         // sixteen_one_TypeI_SinglePanel_Restriction
         case _SIXTEEN_ONE_TYPEI_SINGLEPANEL_RESTRICTION:
            Asn1BitString sixteen_one_TypeI_SinglePanel_Restriction = (Asn1BitString) element;
            sixteen_one_TypeI_SinglePanel_Restriction.encode (buffer, 64, 64);
            break;

         default:
         throw new Asn1InvalidChoiceOptionException();
      }

      buffer.getContext().eventDispatcher.endElement("getElemName()", -1);
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (element != null) {
         element.print (_sb, getElemName(), _level+1);
      }
      indent (_sb, _level);
      _sb.append("}\n");
   }

}
