/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class BandCombination extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "BandCombination";
   }

   public BandCombination_bandList bandList;
   public FeatureSetCombinationId featureSetCombination;
   public CA_ParametersEUTRA ca_ParametersEUTRA;  // optional
   public CA_ParametersNR ca_ParametersNR;  // optional
   public MRDC_Parameters mrdc_Parameters;  // optional
   public Asn1BitString supportedBandwidthCombinationSet;  // optional
   public BandCombination_powerClass_v1530 powerClass_v1530 = null;  // optional

   public BandCombination () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public BandCombination (
      BandCombination_bandList bandList_,
      FeatureSetCombinationId featureSetCombination_,
      CA_ParametersEUTRA ca_ParametersEUTRA_,
      CA_ParametersNR ca_ParametersNR_,
      MRDC_Parameters mrdc_Parameters_,
      Asn1BitString supportedBandwidthCombinationSet_,
      BandCombination_powerClass_v1530 powerClass_v1530_
   ) {
      super();
      bandList = bandList_;
      featureSetCombination = featureSetCombination_;
      ca_ParametersEUTRA = ca_ParametersEUTRA_;
      ca_ParametersNR = ca_ParametersNR_;
      mrdc_Parameters = mrdc_Parameters_;
      supportedBandwidthCombinationSet = supportedBandwidthCombinationSet_;
      powerClass_v1530 = powerClass_v1530_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public BandCombination (
      BandCombination_bandList bandList_,
      FeatureSetCombinationId featureSetCombination_
   ) {
      super();
      bandList = bandList_;
      featureSetCombination = featureSetCombination_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public BandCombination (BandCombination_bandList bandList_,
      long featureSetCombination_,
      CA_ParametersEUTRA ca_ParametersEUTRA_,
      CA_ParametersNR ca_ParametersNR_,
      MRDC_Parameters mrdc_Parameters_,
      Asn1BitString supportedBandwidthCombinationSet_,
      BandCombination_powerClass_v1530 powerClass_v1530_
   ) {
      super();
      bandList = bandList_;
      featureSetCombination = new FeatureSetCombinationId (featureSetCombination_);
      ca_ParametersEUTRA = ca_ParametersEUTRA_;
      ca_ParametersNR = ca_ParametersNR_;
      mrdc_Parameters = mrdc_Parameters_;
      supportedBandwidthCombinationSet = supportedBandwidthCombinationSet_;
      powerClass_v1530 = powerClass_v1530_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public BandCombination (
      BandCombination_bandList bandList_,
      long featureSetCombination_
   ) {
      super();
      bandList = bandList_;
      featureSetCombination = new FeatureSetCombinationId (featureSetCombination_);
   }

   public void init () {
      bandList = null;
      featureSetCombination = null;
      ca_ParametersEUTRA = null;
      ca_ParametersNR = null;
      mrdc_Parameters = null;
      supportedBandwidthCombinationSet = null;
      powerClass_v1530 = null;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return bandList;
         case 1: return featureSetCombination;
         case 2: return ca_ParametersEUTRA;
         case 3: return ca_ParametersNR;
         case 4: return mrdc_Parameters;
         case 5: return supportedBandwidthCombinationSet;
         case 6: return powerClass_v1530;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "bandList";
         case 1: return "featureSetCombination";
         case 2: return "ca-ParametersEUTRA";
         case 3: return "ca-ParametersNR";
         case 4: return "mrdc-Parameters";
         case 5: return "supportedBandwidthCombinationSet";
         case 6: return "powerClass-v1530";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean ca_ParametersEUTRAPresent = buffer.decodeBit ("ca_ParametersEUTRAPresent");
      boolean ca_ParametersNRPresent = buffer.decodeBit ("ca_ParametersNRPresent");
      boolean mrdc_ParametersPresent = buffer.decodeBit ("mrdc_ParametersPresent");
      boolean supportedBandwidthCombinationSetPresent = buffer.decodeBit ("supportedBandwidthCombinationSetPresent");
      boolean powerClass_v1530Present = buffer.decodeBit ("powerClass_v1530Present");

      // decode bandList

      buffer.getContext().eventDispatcher.startElement("bandList", -1);

      bandList = new BandCombination_bandList();
      bandList.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("bandList", -1);

      // decode featureSetCombination

      buffer.getContext().eventDispatcher.startElement("featureSetCombination", -1);

      featureSetCombination = new FeatureSetCombinationId();
      featureSetCombination.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("featureSetCombination", -1);

      // decode ca_ParametersEUTRA

      if (ca_ParametersEUTRAPresent) {
         buffer.getContext().eventDispatcher.startElement("ca_ParametersEUTRA", -1);

         ca_ParametersEUTRA = new CA_ParametersEUTRA();
         ca_ParametersEUTRA.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ca_ParametersEUTRA", -1);
      }
      else {
         ca_ParametersEUTRA = null;
      }

      // decode ca_ParametersNR

      if (ca_ParametersNRPresent) {
         buffer.getContext().eventDispatcher.startElement("ca_ParametersNR", -1);

         ca_ParametersNR = new CA_ParametersNR();
         ca_ParametersNR.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ca_ParametersNR", -1);
      }
      else {
         ca_ParametersNR = null;
      }

      // decode mrdc_Parameters

      if (mrdc_ParametersPresent) {
         buffer.getContext().eventDispatcher.startElement("mrdc_Parameters", -1);

         mrdc_Parameters = new MRDC_Parameters();
         mrdc_Parameters.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("mrdc_Parameters", -1);
      }
      else {
         mrdc_Parameters = null;
      }

      // decode supportedBandwidthCombinationSet

      if (supportedBandwidthCombinationSetPresent) {
         buffer.getContext().eventDispatcher.startElement("supportedBandwidthCombinationSet", -1);

         supportedBandwidthCombinationSet = new Asn1BitString();
         supportedBandwidthCombinationSet.decode (buffer, 1, 32);

         buffer.invokeCharacters(supportedBandwidthCombinationSet.toString());
         buffer.getContext().eventDispatcher.endElement("supportedBandwidthCombinationSet", -1);
      }
      else {
         supportedBandwidthCombinationSet = null;
      }

      // decode powerClass_v1530

      if (powerClass_v1530Present) {
         buffer.getContext().eventDispatcher.startElement("powerClass_v1530", -1);

         int tval = BandCombination_powerClass_v1530.decodeEnumValue (buffer);
         powerClass_v1530 = BandCombination_powerClass_v1530.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("powerClass_v1530", -1);
      }
      else {
         powerClass_v1530 = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((ca_ParametersEUTRA != null), null);
      buffer.encodeBit ((ca_ParametersNR != null), null);
      buffer.encodeBit ((mrdc_Parameters != null), null);
      buffer.encodeBit ((supportedBandwidthCombinationSet != null), null);
      buffer.encodeBit ((powerClass_v1530 != null), null);

      // encode bandList

      if (bandList != null) {
         buffer.getContext().eventDispatcher.startElement("bandList", -1);

         bandList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("bandList", -1);
      }
      else throw new Asn1MissingRequiredException ("bandList");

      // encode featureSetCombination

      if (featureSetCombination != null) {
         buffer.getContext().eventDispatcher.startElement("featureSetCombination", -1);

         featureSetCombination.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("featureSetCombination", -1);
      }
      else throw new Asn1MissingRequiredException ("featureSetCombination");

      // encode ca_ParametersEUTRA

      if (ca_ParametersEUTRA != null) {
         buffer.getContext().eventDispatcher.startElement("ca_ParametersEUTRA", -1);

         ca_ParametersEUTRA.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ca_ParametersEUTRA", -1);
      }

      // encode ca_ParametersNR

      if (ca_ParametersNR != null) {
         buffer.getContext().eventDispatcher.startElement("ca_ParametersNR", -1);

         ca_ParametersNR.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ca_ParametersNR", -1);
      }

      // encode mrdc_Parameters

      if (mrdc_Parameters != null) {
         buffer.getContext().eventDispatcher.startElement("mrdc_Parameters", -1);

         mrdc_Parameters.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("mrdc_Parameters", -1);
      }

      // encode supportedBandwidthCombinationSet

      if (supportedBandwidthCombinationSet != null) {
         buffer.getContext().eventDispatcher.startElement("supportedBandwidthCombinationSet", -1);

         supportedBandwidthCombinationSet.encode (buffer, 1, 32);

         buffer.getContext().eventDispatcher.endElement("supportedBandwidthCombinationSet", -1);
      }

      // encode powerClass_v1530

      if (powerClass_v1530 != null) {
         buffer.getContext().eventDispatcher.startElement("powerClass_v1530", -1);

         powerClass_v1530.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("powerClass_v1530", -1);
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (bandList != null) bandList.print (_sb, "bandList", _level+1);
      if (featureSetCombination != null) featureSetCombination.print (_sb, "featureSetCombination", _level+1);
      if (ca_ParametersEUTRA != null) ca_ParametersEUTRA.print (_sb, "ca_ParametersEUTRA", _level+1);
      if (ca_ParametersNR != null) ca_ParametersNR.print (_sb, "ca_ParametersNR", _level+1);
      if (mrdc_Parameters != null) mrdc_Parameters.print (_sb, "mrdc_Parameters", _level+1);
      if (supportedBandwidthCombinationSet != null) supportedBandwidthCombinationSet.print (_sb, "supportedBandwidthCombinationSet", _level+1);
      if (powerClass_v1530 != null) powerClass_v1530.print (_sb, "powerClass_v1530", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
