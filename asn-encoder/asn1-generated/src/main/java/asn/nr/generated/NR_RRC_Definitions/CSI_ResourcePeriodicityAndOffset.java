/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class CSI_ResourcePeriodicityAndOffset extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CSI-ResourcePeriodicityAndOffset";
   }

   // Choice element identifier constants
   public final static byte _SLOTS4 = 1;
   public final static byte _SLOTS5 = 2;
   public final static byte _SLOTS8 = 3;
   public final static byte _SLOTS10 = 4;
   public final static byte _SLOTS16 = 5;
   public final static byte _SLOTS20 = 6;
   public final static byte _SLOTS32 = 7;
   public final static byte _SLOTS40 = 8;
   public final static byte _SLOTS64 = 9;
   public final static byte _SLOTS80 = 10;
   public final static byte _SLOTS160 = 11;
   public final static byte _SLOTS320 = 12;
   public final static byte _SLOTS640 = 13;

   public CSI_ResourcePeriodicityAndOffset () {
      super();
   }

   public CSI_ResourcePeriodicityAndOffset (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _SLOTS4: return "slots4";
      case _SLOTS5: return "slots5";
      case _SLOTS8: return "slots8";
      case _SLOTS10: return "slots10";
      case _SLOTS16: return "slots16";
      case _SLOTS20: return "slots20";
      case _SLOTS32: return "slots32";
      case _SLOTS40: return "slots40";
      case _SLOTS64: return "slots64";
      case _SLOTS80: return "slots80";
      case _SLOTS160: return "slots160";
      case _SLOTS320: return "slots320";
      case _SLOTS640: return "slots640";
      default: return "UNDEFINED";
      }
   }

   public void set_slots4 (Asn1Integer value) {
      setElement (_SLOTS4, value);
   }

   public void set_slots5 (Asn1Integer value) {
      setElement (_SLOTS5, value);
   }

   public void set_slots8 (Asn1Integer value) {
      setElement (_SLOTS8, value);
   }

   public void set_slots10 (Asn1Integer value) {
      setElement (_SLOTS10, value);
   }

   public void set_slots16 (Asn1Integer value) {
      setElement (_SLOTS16, value);
   }

   public void set_slots20 (Asn1Integer value) {
      setElement (_SLOTS20, value);
   }

   public void set_slots32 (Asn1Integer value) {
      setElement (_SLOTS32, value);
   }

   public void set_slots40 (Asn1Integer value) {
      setElement (_SLOTS40, value);
   }

   public void set_slots64 (Asn1Integer value) {
      setElement (_SLOTS64, value);
   }

   public void set_slots80 (Asn1Integer value) {
      setElement (_SLOTS80, value);
   }

   public void set_slots160 (Asn1Integer value) {
      setElement (_SLOTS160, value);
   }

   public void set_slots320 (Asn1Integer value) {
      setElement (_SLOTS320, value);
   }

   public void set_slots640 (Asn1Integer value) {
      setElement (_SLOTS640, value);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int idx = (int) buffer.decodeConsWholeNumber (13, "index");
      choiceID = idx + 1;
      buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

      switch (idx) {
         // slots4
         case 0: { 
            Asn1Integer slots4;
            element = slots4 = new Asn1Integer();
            slots4.decode (buffer, 0, 3);

            buffer.invokeCharacters(slots4.toString());
            break;
         }

         // slots5
         case 1: { 
            Asn1Integer slots5;
            element = slots5 = new Asn1Integer();
            slots5.decode (buffer, 0, 4);

            buffer.invokeCharacters(slots5.toString());
            break;
         }

         // slots8
         case 2: { 
            Asn1Integer slots8;
            element = slots8 = new Asn1Integer();
            slots8.decode (buffer, 0, 7);

            buffer.invokeCharacters(slots8.toString());
            break;
         }

         // slots10
         case 3: { 
            Asn1Integer slots10;
            element = slots10 = new Asn1Integer();
            slots10.decode (buffer, 0, 9);

            buffer.invokeCharacters(slots10.toString());
            break;
         }

         // slots16
         case 4: { 
            Asn1Integer slots16;
            element = slots16 = new Asn1Integer();
            slots16.decode (buffer, 0, 15);

            buffer.invokeCharacters(slots16.toString());
            break;
         }

         // slots20
         case 5: { 
            Asn1Integer slots20;
            element = slots20 = new Asn1Integer();
            slots20.decode (buffer, 0, 19);

            buffer.invokeCharacters(slots20.toString());
            break;
         }

         // slots32
         case 6: { 
            Asn1Integer slots32;
            element = slots32 = new Asn1Integer();
            slots32.decode (buffer, 0, 31);

            buffer.invokeCharacters(slots32.toString());
            break;
         }

         // slots40
         case 7: { 
            Asn1Integer slots40;
            element = slots40 = new Asn1Integer();
            slots40.decode (buffer, 0, 39);

            buffer.invokeCharacters(slots40.toString());
            break;
         }

         // slots64
         case 8: { 
            Asn1Integer slots64;
            element = slots64 = new Asn1Integer();
            slots64.decode (buffer, 0, 63);

            buffer.invokeCharacters(slots64.toString());
            break;
         }

         // slots80
         case 9: { 
            Asn1Integer slots80;
            element = slots80 = new Asn1Integer();
            slots80.decode (buffer, 0, 79);

            buffer.invokeCharacters(slots80.toString());
            break;
         }

         // slots160
         case 10: { 
            Asn1Integer slots160;
            element = slots160 = new Asn1Integer();
            slots160.decode (buffer, 0, 159);

            buffer.invokeCharacters(slots160.toString());
            break;
         }

         // slots320
         case 11: { 
            Asn1Integer slots320;
            element = slots320 = new Asn1Integer();
            slots320.decode (buffer, 0, 319);

            buffer.invokeCharacters(slots320.toString());
            break;
         }

         // slots640
         case 12: { 
            Asn1Integer slots640;
            element = slots640 = new Asn1Integer();
            slots640.decode (buffer, 0, 639);

            buffer.invokeCharacters(slots640.toString());
            break;
         }

         default:
         throw new Asn1InvalidChoiceOptionException (buffer, idx);
      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // Encode choice index value

      buffer.encodeConsWholeNumber (choiceID - 1, 13, "index");

      buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

      switch (choiceID) {
         // slots4
         case _SLOTS4:
            Asn1Integer slots4 = (Asn1Integer) element;
            slots4.encode (buffer, 0, 3);
            break;

         // slots5
         case _SLOTS5:
            Asn1Integer slots5 = (Asn1Integer) element;
            slots5.encode (buffer, 0, 4);
            break;

         // slots8
         case _SLOTS8:
            Asn1Integer slots8 = (Asn1Integer) element;
            slots8.encode (buffer, 0, 7);
            break;

         // slots10
         case _SLOTS10:
            Asn1Integer slots10 = (Asn1Integer) element;
            slots10.encode (buffer, 0, 9);
            break;

         // slots16
         case _SLOTS16:
            Asn1Integer slots16 = (Asn1Integer) element;
            slots16.encode (buffer, 0, 15);
            break;

         // slots20
         case _SLOTS20:
            Asn1Integer slots20 = (Asn1Integer) element;
            slots20.encode (buffer, 0, 19);
            break;

         // slots32
         case _SLOTS32:
            Asn1Integer slots32 = (Asn1Integer) element;
            slots32.encode (buffer, 0, 31);
            break;

         // slots40
         case _SLOTS40:
            Asn1Integer slots40 = (Asn1Integer) element;
            slots40.encode (buffer, 0, 39);
            break;

         // slots64
         case _SLOTS64:
            Asn1Integer slots64 = (Asn1Integer) element;
            slots64.encode (buffer, 0, 63);
            break;

         // slots80
         case _SLOTS80:
            Asn1Integer slots80 = (Asn1Integer) element;
            slots80.encode (buffer, 0, 79);
            break;

         // slots160
         case _SLOTS160:
            Asn1Integer slots160 = (Asn1Integer) element;
            slots160.encode (buffer, 0, 159);
            break;

         // slots320
         case _SLOTS320:
            Asn1Integer slots320 = (Asn1Integer) element;
            slots320.encode (buffer, 0, 319);
            break;

         // slots640
         case _SLOTS640:
            Asn1Integer slots640 = (Asn1Integer) element;
            slots640.encode (buffer, 0, 639);
            break;

         default:
         throw new Asn1InvalidChoiceOptionException();
      }

      buffer.getContext().eventDispatcher.endElement("getElemName()", -1);
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (element != null) {
         element.print (_sb, getElemName(), _level+1);
      }
      indent (_sb, _level);
      _sb.append("}\n");
   }

}
