/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_InterNodeDefinitions;

import com.objsys.asn1j.runtime.*;

public class TransmissionBandwidth_EUTRA_r16 extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_InterNodeDefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "TransmissionBandwidth-EUTRA-r16";
   }

   // Integer constants for switch-case
   public static final int _RB6 = 0;
   public static final int _RB15 = 1;
   public static final int _RB25 = 2;
   public static final int _RB50 = 3;
   public static final int _RB75 = 4;
   public static final int _RB100 = 5;

   // Singleton instances of TransmissionBandwidth_EUTRA_r16
   protected static final TransmissionBandwidth_EUTRA_r16 _rb6 = new TransmissionBandwidth_EUTRA_r16(0);
   protected static final TransmissionBandwidth_EUTRA_r16 _rb15 = new TransmissionBandwidth_EUTRA_r16(1);
   protected static final TransmissionBandwidth_EUTRA_r16 _rb25 = new TransmissionBandwidth_EUTRA_r16(2);
   protected static final TransmissionBandwidth_EUTRA_r16 _rb50 = new TransmissionBandwidth_EUTRA_r16(3);
   protected static final TransmissionBandwidth_EUTRA_r16 _rb75 = new TransmissionBandwidth_EUTRA_r16(4);
   protected static final TransmissionBandwidth_EUTRA_r16 _rb100 = new TransmissionBandwidth_EUTRA_r16(5);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    */
   protected TransmissionBandwidth_EUTRA_r16 (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for rb6.
    */
   public static TransmissionBandwidth_EUTRA_r16 rb6() {
      return _rb6;
   }

   /**
    * Singleton accessor method for rb15.
    */
   public static TransmissionBandwidth_EUTRA_r16 rb15() {
      return _rb15;
   }

   /**
    * Singleton accessor method for rb25.
    */
   public static TransmissionBandwidth_EUTRA_r16 rb25() {
      return _rb25;
   }

   /**
    * Singleton accessor method for rb50.
    */
   public static TransmissionBandwidth_EUTRA_r16 rb50() {
      return _rb50;
   }

   /**
    * Singleton accessor method for rb75.
    */
   public static TransmissionBandwidth_EUTRA_r16 rb75() {
      return _rb75;
   }

   /**
    * Singleton accessor method for rb100.
    */
   public static TransmissionBandwidth_EUTRA_r16 rb100() {
      return _rb100;
   }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return TransmissionBandwidth_EUTRA_r16.valueOf( TransmissionBandwidth_EUTRA_r16.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static TransmissionBandwidth_EUTRA_r16 valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 0: return rb6();
         case 1: return rb15();
         case 2: return rb25();
         case 3: return rb50();
         case 4: return rb75();
         case 5: return rb100();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      ui = (int) buffer.decodeConsWholeNumber (6);

      switch (ui) {
         case 0: ret =  0; break;
         case 1: ret =  1; break;
         case 2: ret =  2; break;
         case 3: ret =  3; break;
         case 4: ret =  4; break;
         case 5: ret =  5; break;
         default: throw new Asn1InvalidEnumException (ui);
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (TransmissionBandwidth_EUTRA_r16.valueOf(ret).toString());

      return ret;
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      switch ((int)value) {
         case 0: ui = 0; /* rb6 */break;
         case 1: ui = 1; /* rb15 */break;
         case 2: ui = 2; /* rb25 */break;
         case 3: ui = 3; /* rb50 */break;
         case 4: ui = 4; /* rb75 */break;
         case 5: ui = 5; /* rb100 */break;
         default:
            throw new Asn1InvalidEnumException (value);
      }

      buffer.encodeConsWholeNumber (ui, 6);
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("rb6");
         case 1: return ("rb15");
         case 2: return ("rb25");
         case 3: return ("rb50");
         case 4: return ("rb75");
         case 5: return ("rb100");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
