/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_UE_Variables;

import com.objsys.asn1j.runtime.*;
import asn.nr.generated.NR_RRC_Definitions.MeasIdToAddModList;
import asn.nr.generated.NR_RRC_Definitions.MeasObjectToAddModList;
import asn.nr.generated.NR_RRC_Definitions.ReportConfigToAddModList;
import asn.nr.generated.NR_RRC_Definitions.QuantityConfig;

public class VarMeasConfig extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_UE_VariablesRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "VarMeasConfig";
   }

   public MeasIdToAddModList measIdList;  // optional
   public MeasObjectToAddModList measObjectList;  // optional
   public ReportConfigToAddModList reportConfigList;  // optional
   public QuantityConfig quantityConfig;  // optional
   public VarMeasConfig_s_MeasureConfig s_MeasureConfig;  // optional

   public VarMeasConfig () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public VarMeasConfig (
      MeasIdToAddModList measIdList_,
      MeasObjectToAddModList measObjectList_,
      ReportConfigToAddModList reportConfigList_,
      QuantityConfig quantityConfig_,
      VarMeasConfig_s_MeasureConfig s_MeasureConfig_
   ) {
      super();
      measIdList = measIdList_;
      measObjectList = measObjectList_;
      reportConfigList = reportConfigList_;
      quantityConfig = quantityConfig_;
      s_MeasureConfig = s_MeasureConfig_;
   }

   public void init () {
      measIdList = null;
      measObjectList = null;
      reportConfigList = null;
      quantityConfig = null;
      s_MeasureConfig = null;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return measIdList;
         case 1: return measObjectList;
         case 2: return reportConfigList;
         case 3: return quantityConfig;
         case 4: return s_MeasureConfig;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "measIdList";
         case 1: return "measObjectList";
         case 2: return "reportConfigList";
         case 3: return "quantityConfig";
         case 4: return "s-MeasureConfig";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean measIdListPresent = buffer.decodeBit ("measIdListPresent");
      boolean measObjectListPresent = buffer.decodeBit ("measObjectListPresent");
      boolean reportConfigListPresent = buffer.decodeBit ("reportConfigListPresent");
      boolean quantityConfigPresent = buffer.decodeBit ("quantityConfigPresent");
      boolean s_MeasureConfigPresent = buffer.decodeBit ("s_MeasureConfigPresent");

      // decode measIdList

      if (measIdListPresent) {
         buffer.getContext().eventDispatcher.startElement("measIdList", -1);

         measIdList = new MeasIdToAddModList();
         measIdList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("measIdList", -1);
      }
      else {
         measIdList = null;
      }

      // decode measObjectList

      if (measObjectListPresent) {
         buffer.getContext().eventDispatcher.startElement("measObjectList", -1);

         measObjectList = new MeasObjectToAddModList();
         measObjectList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("measObjectList", -1);
      }
      else {
         measObjectList = null;
      }

      // decode reportConfigList

      if (reportConfigListPresent) {
         buffer.getContext().eventDispatcher.startElement("reportConfigList", -1);

         reportConfigList = new ReportConfigToAddModList();
         reportConfigList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("reportConfigList", -1);
      }
      else {
         reportConfigList = null;
      }

      // decode quantityConfig

      if (quantityConfigPresent) {
         buffer.getContext().eventDispatcher.startElement("quantityConfig", -1);

         quantityConfig = new QuantityConfig();
         quantityConfig.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("quantityConfig", -1);
      }
      else {
         quantityConfig = null;
      }

      // decode s_MeasureConfig

      if (s_MeasureConfigPresent) {
         buffer.getContext().eventDispatcher.startElement("s_MeasureConfig", -1);

         s_MeasureConfig = new VarMeasConfig_s_MeasureConfig();
         s_MeasureConfig.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("s_MeasureConfig", -1);
      }
      else {
         s_MeasureConfig = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((measIdList != null), null);
      buffer.encodeBit ((measObjectList != null), null);
      buffer.encodeBit ((reportConfigList != null), null);
      buffer.encodeBit ((quantityConfig != null), null);
      buffer.encodeBit ((s_MeasureConfig != null), null);

      // encode measIdList

      if (measIdList != null) {
         buffer.getContext().eventDispatcher.startElement("measIdList", -1);

         measIdList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("measIdList", -1);
      }

      // encode measObjectList

      if (measObjectList != null) {
         buffer.getContext().eventDispatcher.startElement("measObjectList", -1);

         measObjectList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("measObjectList", -1);
      }

      // encode reportConfigList

      if (reportConfigList != null) {
         buffer.getContext().eventDispatcher.startElement("reportConfigList", -1);

         reportConfigList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("reportConfigList", -1);
      }

      // encode quantityConfig

      if (quantityConfig != null) {
         buffer.getContext().eventDispatcher.startElement("quantityConfig", -1);

         quantityConfig.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("quantityConfig", -1);
      }

      // encode s_MeasureConfig

      if (s_MeasureConfig != null) {
         buffer.getContext().eventDispatcher.startElement("s_MeasureConfig", -1);

         s_MeasureConfig.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("s_MeasureConfig", -1);
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (measIdList != null) measIdList.print (_sb, "measIdList", _level+1);
      if (measObjectList != null) measObjectList.print (_sb, "measObjectList", _level+1);
      if (reportConfigList != null) reportConfigList.print (_sb, "reportConfigList", _level+1);
      if (quantityConfig != null) quantityConfig.print (_sb, "quantityConfig", _level+1);
      if (s_MeasureConfig != null) s_MeasureConfig.print (_sb, "s_MeasureConfig", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
