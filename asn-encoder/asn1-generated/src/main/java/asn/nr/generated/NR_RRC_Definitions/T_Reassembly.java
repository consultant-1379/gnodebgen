/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class T_Reassembly extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "T-Reassembly";
   }

   // Integer constants for switch-case
   public static final int _MS0 = 0;
   public static final int _MS5 = 1;
   public static final int _MS10 = 2;
   public static final int _MS15 = 3;
   public static final int _MS20 = 4;
   public static final int _MS25 = 5;
   public static final int _MS30 = 6;
   public static final int _MS35 = 7;
   public static final int _MS40 = 8;
   public static final int _MS45 = 9;
   public static final int _MS50 = 10;
   public static final int _MS55 = 11;
   public static final int _MS60 = 12;
   public static final int _MS65 = 13;
   public static final int _MS70 = 14;
   public static final int _MS75 = 15;
   public static final int _MS80 = 16;
   public static final int _MS85 = 17;
   public static final int _MS90 = 18;
   public static final int _MS95 = 19;
   public static final int _MS100 = 20;
   public static final int _MS110 = 21;
   public static final int _MS120 = 22;
   public static final int _MS130 = 23;
   public static final int _MS140 = 24;
   public static final int _MS150 = 25;
   public static final int _MS160 = 26;
   public static final int _MS170 = 27;
   public static final int _MS180 = 28;
   public static final int _MS190 = 29;
   public static final int _MS200 = 30;
   public static final int _SPARE1 = 31;

   // Singleton instances of T_Reassembly
   protected static final T_Reassembly _ms0 = new T_Reassembly(0);
   protected static final T_Reassembly _ms5 = new T_Reassembly(1);
   protected static final T_Reassembly _ms10 = new T_Reassembly(2);
   protected static final T_Reassembly _ms15 = new T_Reassembly(3);
   protected static final T_Reassembly _ms20 = new T_Reassembly(4);
   protected static final T_Reassembly _ms25 = new T_Reassembly(5);
   protected static final T_Reassembly _ms30 = new T_Reassembly(6);
   protected static final T_Reassembly _ms35 = new T_Reassembly(7);
   protected static final T_Reassembly _ms40 = new T_Reassembly(8);
   protected static final T_Reassembly _ms45 = new T_Reassembly(9);
   protected static final T_Reassembly _ms50 = new T_Reassembly(10);
   protected static final T_Reassembly _ms55 = new T_Reassembly(11);
   protected static final T_Reassembly _ms60 = new T_Reassembly(12);
   protected static final T_Reassembly _ms65 = new T_Reassembly(13);
   protected static final T_Reassembly _ms70 = new T_Reassembly(14);
   protected static final T_Reassembly _ms75 = new T_Reassembly(15);
   protected static final T_Reassembly _ms80 = new T_Reassembly(16);
   protected static final T_Reassembly _ms85 = new T_Reassembly(17);
   protected static final T_Reassembly _ms90 = new T_Reassembly(18);
   protected static final T_Reassembly _ms95 = new T_Reassembly(19);
   protected static final T_Reassembly _ms100 = new T_Reassembly(20);
   protected static final T_Reassembly _ms110 = new T_Reassembly(21);
   protected static final T_Reassembly _ms120 = new T_Reassembly(22);
   protected static final T_Reassembly _ms130 = new T_Reassembly(23);
   protected static final T_Reassembly _ms140 = new T_Reassembly(24);
   protected static final T_Reassembly _ms150 = new T_Reassembly(25);
   protected static final T_Reassembly _ms160 = new T_Reassembly(26);
   protected static final T_Reassembly _ms170 = new T_Reassembly(27);
   protected static final T_Reassembly _ms180 = new T_Reassembly(28);
   protected static final T_Reassembly _ms190 = new T_Reassembly(29);
   protected static final T_Reassembly _ms200 = new T_Reassembly(30);
   protected static final T_Reassembly _spare1 = new T_Reassembly(31);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    *   7
    *   8
    *   9
    *   10
    *   11
    *   12
    *   13
    *   14
    *   15
    *   16
    *   17
    *   18
    *   19
    *   20
    *   21
    *   22
    *   23
    *   24
    *   25
    *   26
    *   27
    *   28
    *   29
    *   30
    *   31
    */
   protected T_Reassembly (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for ms0.
    */
   public static T_Reassembly ms0() {
      return _ms0;
   }

   /**
    * Singleton accessor method for ms5.
    */
   public static T_Reassembly ms5() {
      return _ms5;
   }

   /**
    * Singleton accessor method for ms10.
    */
   public static T_Reassembly ms10() {
      return _ms10;
   }

   /**
    * Singleton accessor method for ms15.
    */
   public static T_Reassembly ms15() {
      return _ms15;
   }

   /**
    * Singleton accessor method for ms20.
    */
   public static T_Reassembly ms20() {
      return _ms20;
   }

   /**
    * Singleton accessor method for ms25.
    */
   public static T_Reassembly ms25() {
      return _ms25;
   }

   /**
    * Singleton accessor method for ms30.
    */
   public static T_Reassembly ms30() {
      return _ms30;
   }

   /**
    * Singleton accessor method for ms35.
    */
   public static T_Reassembly ms35() {
      return _ms35;
   }

   /**
    * Singleton accessor method for ms40.
    */
   public static T_Reassembly ms40() {
      return _ms40;
   }

   /**
    * Singleton accessor method for ms45.
    */
   public static T_Reassembly ms45() {
      return _ms45;
   }

   /**
    * Singleton accessor method for ms50.
    */
   public static T_Reassembly ms50() {
      return _ms50;
   }

   /**
    * Singleton accessor method for ms55.
    */
   public static T_Reassembly ms55() {
      return _ms55;
   }

   /**
    * Singleton accessor method for ms60.
    */
   public static T_Reassembly ms60() {
      return _ms60;
   }

   /**
    * Singleton accessor method for ms65.
    */
   public static T_Reassembly ms65() {
      return _ms65;
   }

   /**
    * Singleton accessor method for ms70.
    */
   public static T_Reassembly ms70() {
      return _ms70;
   }

   /**
    * Singleton accessor method for ms75.
    */
   public static T_Reassembly ms75() {
      return _ms75;
   }

   /**
    * Singleton accessor method for ms80.
    */
   public static T_Reassembly ms80() {
      return _ms80;
   }

   /**
    * Singleton accessor method for ms85.
    */
   public static T_Reassembly ms85() {
      return _ms85;
   }

   /**
    * Singleton accessor method for ms90.
    */
   public static T_Reassembly ms90() {
      return _ms90;
   }

   /**
    * Singleton accessor method for ms95.
    */
   public static T_Reassembly ms95() {
      return _ms95;
   }

   /**
    * Singleton accessor method for ms100.
    */
   public static T_Reassembly ms100() {
      return _ms100;
   }

   /**
    * Singleton accessor method for ms110.
    */
   public static T_Reassembly ms110() {
      return _ms110;
   }

   /**
    * Singleton accessor method for ms120.
    */
   public static T_Reassembly ms120() {
      return _ms120;
   }

   /**
    * Singleton accessor method for ms130.
    */
   public static T_Reassembly ms130() {
      return _ms130;
   }

   /**
    * Singleton accessor method for ms140.
    */
   public static T_Reassembly ms140() {
      return _ms140;
   }

   /**
    * Singleton accessor method for ms150.
    */
   public static T_Reassembly ms150() {
      return _ms150;
   }

   /**
    * Singleton accessor method for ms160.
    */
   public static T_Reassembly ms160() {
      return _ms160;
   }

   /**
    * Singleton accessor method for ms170.
    */
   public static T_Reassembly ms170() {
      return _ms170;
   }

   /**
    * Singleton accessor method for ms180.
    */
   public static T_Reassembly ms180() {
      return _ms180;
   }

   /**
    * Singleton accessor method for ms190.
    */
   public static T_Reassembly ms190() {
      return _ms190;
   }

   /**
    * Singleton accessor method for ms200.
    */
   public static T_Reassembly ms200() {
      return _ms200;
   }

   /**
    * Singleton accessor method for spare1.
    */
   public static T_Reassembly spare1() {
      return _spare1;
   }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return T_Reassembly.valueOf( T_Reassembly.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static T_Reassembly valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 0: return ms0();
         case 1: return ms5();
         case 2: return ms10();
         case 3: return ms15();
         case 4: return ms20();
         case 5: return ms25();
         case 6: return ms30();
         case 7: return ms35();
         case 8: return ms40();
         case 9: return ms45();
         case 10: return ms50();
         case 11: return ms55();
         case 12: return ms60();
         case 13: return ms65();
         case 14: return ms70();
         case 15: return ms75();
         case 16: return ms80();
         case 17: return ms85();
         case 18: return ms90();
         case 19: return ms95();
         case 20: return ms100();
         case 21: return ms110();
         case 22: return ms120();
         case 23: return ms130();
         case 24: return ms140();
         case 25: return ms150();
         case 26: return ms160();
         case 27: return ms170();
         case 28: return ms180();
         case 29: return ms190();
         case 30: return ms200();
         case 31: return spare1();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      ui = (int) buffer.decodeConsWholeNumber (32);

      switch (ui) {
         case 0: ret =  0; break;
         case 1: ret =  1; break;
         case 2: ret =  2; break;
         case 3: ret =  3; break;
         case 4: ret =  4; break;
         case 5: ret =  5; break;
         case 6: ret =  6; break;
         case 7: ret =  7; break;
         case 8: ret =  8; break;
         case 9: ret =  9; break;
         case 10: ret =  10; break;
         case 11: ret =  11; break;
         case 12: ret =  12; break;
         case 13: ret =  13; break;
         case 14: ret =  14; break;
         case 15: ret =  15; break;
         case 16: ret =  16; break;
         case 17: ret =  17; break;
         case 18: ret =  18; break;
         case 19: ret =  19; break;
         case 20: ret =  20; break;
         case 21: ret =  21; break;
         case 22: ret =  22; break;
         case 23: ret =  23; break;
         case 24: ret =  24; break;
         case 25: ret =  25; break;
         case 26: ret =  26; break;
         case 27: ret =  27; break;
         case 28: ret =  28; break;
         case 29: ret =  29; break;
         case 30: ret =  30; break;
         case 31: ret =  31; break;
         default: throw new Asn1InvalidEnumException (ui);
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (T_Reassembly.valueOf(ret).toString());

      return ret;
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      switch ((int)value) {
         case 0: ui = 0; /* ms0 */break;
         case 1: ui = 1; /* ms5 */break;
         case 2: ui = 2; /* ms10 */break;
         case 3: ui = 3; /* ms15 */break;
         case 4: ui = 4; /* ms20 */break;
         case 5: ui = 5; /* ms25 */break;
         case 6: ui = 6; /* ms30 */break;
         case 7: ui = 7; /* ms35 */break;
         case 8: ui = 8; /* ms40 */break;
         case 9: ui = 9; /* ms45 */break;
         case 10: ui = 10; /* ms50 */break;
         case 11: ui = 11; /* ms55 */break;
         case 12: ui = 12; /* ms60 */break;
         case 13: ui = 13; /* ms65 */break;
         case 14: ui = 14; /* ms70 */break;
         case 15: ui = 15; /* ms75 */break;
         case 16: ui = 16; /* ms80 */break;
         case 17: ui = 17; /* ms85 */break;
         case 18: ui = 18; /* ms90 */break;
         case 19: ui = 19; /* ms95 */break;
         case 20: ui = 20; /* ms100 */break;
         case 21: ui = 21; /* ms110 */break;
         case 22: ui = 22; /* ms120 */break;
         case 23: ui = 23; /* ms130 */break;
         case 24: ui = 24; /* ms140 */break;
         case 25: ui = 25; /* ms150 */break;
         case 26: ui = 26; /* ms160 */break;
         case 27: ui = 27; /* ms170 */break;
         case 28: ui = 28; /* ms180 */break;
         case 29: ui = 29; /* ms190 */break;
         case 30: ui = 30; /* ms200 */break;
         case 31: ui = 31; /* spare1 */break;
         default:
            throw new Asn1InvalidEnumException (value);
      }

      buffer.encodeConsWholeNumber (ui, 32);
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("ms0");
         case 1: return ("ms5");
         case 2: return ("ms10");
         case 3: return ("ms15");
         case 4: return ("ms20");
         case 5: return ("ms25");
         case 6: return ("ms30");
         case 7: return ("ms35");
         case 8: return ("ms40");
         case 9: return ("ms45");
         case 10: return ("ms50");
         case 11: return ("ms55");
         case 12: return ("ms60");
         case 13: return ("ms65");
         case 14: return ("ms70");
         case 15: return ("ms75");
         case 16: return ("ms80");
         case 17: return ("ms85");
         case 18: return ("ms90");
         case 19: return ("ms95");
         case 20: return ("ms100");
         case 21: return ("ms110");
         case 22: return ("ms120");
         case 23: return ("ms130");
         case 24: return ("ms140");
         case 25: return ("ms150");
         case 26: return ("ms160");
         case 27: return ("ms170");
         case 28: return ("ms180");
         case 29: return ("ms190");
         case 30: return ("ms200");
         case 31: return ("spare1");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
