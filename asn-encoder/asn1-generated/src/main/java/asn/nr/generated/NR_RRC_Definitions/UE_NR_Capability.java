/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class UE_NR_Capability extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "UE-NR-Capability";
   }

   public AccessStratumRelease accessStratumRelease = null;
   public PDCP_Parameters pdcp_Parameters;
   public RLC_Parameters rlc_Parameters;  // optional
   public MAC_Parameters mac_Parameters;  // optional
   public Phy_Parameters phy_Parameters;
   public RF_Parameters rf_Parameters;
   public MeasAndMobParameters measAndMobParameters;  // optional
   public UE_NR_CapabilityAddXDD_Mode fdd_Add_UE_NR_Capabilities;  // optional
   public UE_NR_CapabilityAddXDD_Mode tdd_Add_UE_NR_Capabilities;  // optional
   public UE_NR_CapabilityAddFRX_Mode fr1_Add_UE_NR_Capabilities;  // optional
   public UE_NR_CapabilityAddFRX_Mode fr2_Add_UE_NR_Capabilities;  // optional
   public FeatureSets featureSets;  // optional
   public UE_NR_Capability_featureSetCombinations featureSetCombinations;  // optional
   public UE_NR_Capability_v15c0 lateNonCriticalExtension;  // optional
   public UE_NR_Capability_v1530 nonCriticalExtension;  // optional

   public UE_NR_Capability () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public UE_NR_Capability (
      AccessStratumRelease accessStratumRelease_,
      PDCP_Parameters pdcp_Parameters_,
      RLC_Parameters rlc_Parameters_,
      MAC_Parameters mac_Parameters_,
      Phy_Parameters phy_Parameters_,
      RF_Parameters rf_Parameters_,
      MeasAndMobParameters measAndMobParameters_,
      UE_NR_CapabilityAddXDD_Mode fdd_Add_UE_NR_Capabilities_,
      UE_NR_CapabilityAddXDD_Mode tdd_Add_UE_NR_Capabilities_,
      UE_NR_CapabilityAddFRX_Mode fr1_Add_UE_NR_Capabilities_,
      UE_NR_CapabilityAddFRX_Mode fr2_Add_UE_NR_Capabilities_,
      FeatureSets featureSets_,
      UE_NR_Capability_featureSetCombinations featureSetCombinations_,
      UE_NR_Capability_v15c0 lateNonCriticalExtension_,
      UE_NR_Capability_v1530 nonCriticalExtension_
   ) {
      super();
      accessStratumRelease = accessStratumRelease_;
      pdcp_Parameters = pdcp_Parameters_;
      rlc_Parameters = rlc_Parameters_;
      mac_Parameters = mac_Parameters_;
      phy_Parameters = phy_Parameters_;
      rf_Parameters = rf_Parameters_;
      measAndMobParameters = measAndMobParameters_;
      fdd_Add_UE_NR_Capabilities = fdd_Add_UE_NR_Capabilities_;
      tdd_Add_UE_NR_Capabilities = tdd_Add_UE_NR_Capabilities_;
      fr1_Add_UE_NR_Capabilities = fr1_Add_UE_NR_Capabilities_;
      fr2_Add_UE_NR_Capabilities = fr2_Add_UE_NR_Capabilities_;
      featureSets = featureSets_;
      featureSetCombinations = featureSetCombinations_;
      lateNonCriticalExtension = lateNonCriticalExtension_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public UE_NR_Capability (
      AccessStratumRelease accessStratumRelease_,
      PDCP_Parameters pdcp_Parameters_,
      Phy_Parameters phy_Parameters_,
      RF_Parameters rf_Parameters_
   ) {
      super();
      accessStratumRelease = accessStratumRelease_;
      pdcp_Parameters = pdcp_Parameters_;
      phy_Parameters = phy_Parameters_;
      rf_Parameters = rf_Parameters_;
   }

   public void init () {
      accessStratumRelease = null;
      pdcp_Parameters = null;
      rlc_Parameters = null;
      mac_Parameters = null;
      phy_Parameters = null;
      rf_Parameters = null;
      measAndMobParameters = null;
      fdd_Add_UE_NR_Capabilities = null;
      tdd_Add_UE_NR_Capabilities = null;
      fr1_Add_UE_NR_Capabilities = null;
      fr2_Add_UE_NR_Capabilities = null;
      featureSets = null;
      featureSetCombinations = null;
      lateNonCriticalExtension = null;
      nonCriticalExtension = null;
   }

   public int getElementCount() { return 15; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return accessStratumRelease;
         case 1: return pdcp_Parameters;
         case 2: return rlc_Parameters;
         case 3: return mac_Parameters;
         case 4: return phy_Parameters;
         case 5: return rf_Parameters;
         case 6: return measAndMobParameters;
         case 7: return fdd_Add_UE_NR_Capabilities;
         case 8: return tdd_Add_UE_NR_Capabilities;
         case 9: return fr1_Add_UE_NR_Capabilities;
         case 10: return fr2_Add_UE_NR_Capabilities;
         case 11: return featureSets;
         case 12: return featureSetCombinations;
         case 13: return lateNonCriticalExtension;
         case 14: return nonCriticalExtension;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "accessStratumRelease";
         case 1: return "pdcp-Parameters";
         case 2: return "rlc-Parameters";
         case 3: return "mac-Parameters";
         case 4: return "phy-Parameters";
         case 5: return "rf-Parameters";
         case 6: return "measAndMobParameters";
         case 7: return "fdd-Add-UE-NR-Capabilities";
         case 8: return "tdd-Add-UE-NR-Capabilities";
         case 9: return "fr1-Add-UE-NR-Capabilities";
         case 10: return "fr2-Add-UE-NR-Capabilities";
         case 11: return "featureSets";
         case 12: return "featureSetCombinations";
         case 13: return "lateNonCriticalExtension";
         case 14: return "nonCriticalExtension";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean rlc_ParametersPresent = buffer.decodeBit ("rlc_ParametersPresent");
      boolean mac_ParametersPresent = buffer.decodeBit ("mac_ParametersPresent");
      boolean measAndMobParametersPresent = buffer.decodeBit ("measAndMobParametersPresent");
      boolean fdd_Add_UE_NR_CapabilitiesPresent = buffer.decodeBit ("fdd_Add_UE_NR_CapabilitiesPresent");
      boolean tdd_Add_UE_NR_CapabilitiesPresent = buffer.decodeBit ("tdd_Add_UE_NR_CapabilitiesPresent");
      boolean fr1_Add_UE_NR_CapabilitiesPresent = buffer.decodeBit ("fr1_Add_UE_NR_CapabilitiesPresent");
      boolean fr2_Add_UE_NR_CapabilitiesPresent = buffer.decodeBit ("fr2_Add_UE_NR_CapabilitiesPresent");
      boolean featureSetsPresent = buffer.decodeBit ("featureSetsPresent");
      boolean featureSetCombinationsPresent = buffer.decodeBit ("featureSetCombinationsPresent");
      boolean lateNonCriticalExtensionPresent = buffer.decodeBit ("lateNonCriticalExtensionPresent");
      boolean nonCriticalExtensionPresent = buffer.decodeBit ("nonCriticalExtensionPresent");

      // decode accessStratumRelease

      buffer.getContext().eventDispatcher.startElement("accessStratumRelease", -1);

      {
         int tval = AccessStratumRelease.decodeEnumValue (buffer);
         accessStratumRelease = AccessStratumRelease.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("accessStratumRelease", -1);

      // decode pdcp_Parameters

      buffer.getContext().eventDispatcher.startElement("pdcp_Parameters", -1);

      pdcp_Parameters = new PDCP_Parameters();
      pdcp_Parameters.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("pdcp_Parameters", -1);

      // decode rlc_Parameters

      if (rlc_ParametersPresent) {
         buffer.getContext().eventDispatcher.startElement("rlc_Parameters", -1);

         rlc_Parameters = new RLC_Parameters();
         rlc_Parameters.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("rlc_Parameters", -1);
      }
      else {
         rlc_Parameters = null;
      }

      // decode mac_Parameters

      if (mac_ParametersPresent) {
         buffer.getContext().eventDispatcher.startElement("mac_Parameters", -1);

         mac_Parameters = new MAC_Parameters();
         mac_Parameters.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("mac_Parameters", -1);
      }
      else {
         mac_Parameters = null;
      }

      // decode phy_Parameters

      buffer.getContext().eventDispatcher.startElement("phy_Parameters", -1);

      phy_Parameters = new Phy_Parameters();
      phy_Parameters.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("phy_Parameters", -1);

      // decode rf_Parameters

      buffer.getContext().eventDispatcher.startElement("rf_Parameters", -1);

      rf_Parameters = new RF_Parameters();
      rf_Parameters.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("rf_Parameters", -1);

      // decode measAndMobParameters

      if (measAndMobParametersPresent) {
         buffer.getContext().eventDispatcher.startElement("measAndMobParameters", -1);

         measAndMobParameters = new MeasAndMobParameters();
         measAndMobParameters.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("measAndMobParameters", -1);
      }
      else {
         measAndMobParameters = null;
      }

      // decode fdd_Add_UE_NR_Capabilities

      if (fdd_Add_UE_NR_CapabilitiesPresent) {
         buffer.getContext().eventDispatcher.startElement("fdd_Add_UE_NR_Capabilities", -1);

         fdd_Add_UE_NR_Capabilities = new UE_NR_CapabilityAddXDD_Mode();
         fdd_Add_UE_NR_Capabilities.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("fdd_Add_UE_NR_Capabilities", -1);
      }
      else {
         fdd_Add_UE_NR_Capabilities = null;
      }

      // decode tdd_Add_UE_NR_Capabilities

      if (tdd_Add_UE_NR_CapabilitiesPresent) {
         buffer.getContext().eventDispatcher.startElement("tdd_Add_UE_NR_Capabilities", -1);

         tdd_Add_UE_NR_Capabilities = new UE_NR_CapabilityAddXDD_Mode();
         tdd_Add_UE_NR_Capabilities.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("tdd_Add_UE_NR_Capabilities", -1);
      }
      else {
         tdd_Add_UE_NR_Capabilities = null;
      }

      // decode fr1_Add_UE_NR_Capabilities

      if (fr1_Add_UE_NR_CapabilitiesPresent) {
         buffer.getContext().eventDispatcher.startElement("fr1_Add_UE_NR_Capabilities", -1);

         fr1_Add_UE_NR_Capabilities = new UE_NR_CapabilityAddFRX_Mode();
         fr1_Add_UE_NR_Capabilities.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("fr1_Add_UE_NR_Capabilities", -1);
      }
      else {
         fr1_Add_UE_NR_Capabilities = null;
      }

      // decode fr2_Add_UE_NR_Capabilities

      if (fr2_Add_UE_NR_CapabilitiesPresent) {
         buffer.getContext().eventDispatcher.startElement("fr2_Add_UE_NR_Capabilities", -1);

         fr2_Add_UE_NR_Capabilities = new UE_NR_CapabilityAddFRX_Mode();
         fr2_Add_UE_NR_Capabilities.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("fr2_Add_UE_NR_Capabilities", -1);
      }
      else {
         fr2_Add_UE_NR_Capabilities = null;
      }

      // decode featureSets

      if (featureSetsPresent) {
         buffer.getContext().eventDispatcher.startElement("featureSets", -1);

         featureSets = new FeatureSets();
         featureSets.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("featureSets", -1);
      }
      else {
         featureSets = null;
      }

      // decode featureSetCombinations

      if (featureSetCombinationsPresent) {
         buffer.getContext().eventDispatcher.startElement("featureSetCombinations", -1);

         featureSetCombinations = new UE_NR_Capability_featureSetCombinations();
         featureSetCombinations.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("featureSetCombinations", -1);
      }
      else {
         featureSetCombinations = null;
      }

      // decode lateNonCriticalExtension

      if (lateNonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("lateNonCriticalExtension", -1);

         Asn1OctetString lateNonCriticalExtension_outer = new Asn1OctetString();
         lateNonCriticalExtension_outer.decode (buffer);
         if (lateNonCriticalExtension_outer.value == null) throw new Asn1Exception("contained type's complete encoding is empty");
         Asn1PerDecodeBuffer savedBuffer = buffer;
         buffer = new Asn1PerDecodeBuffer( lateNonCriticalExtension_outer.value, buffer.isAligned());
         buffer.setEventHandlerList( savedBuffer );
         lateNonCriticalExtension = new UE_NR_Capability_v15c0();
         lateNonCriticalExtension.decode (buffer);
         buffer = savedBuffer;
         buffer.getContext().eventDispatcher.endElement("lateNonCriticalExtension", -1);
      }
      else {
         lateNonCriticalExtension = null;
      }

      // decode nonCriticalExtension

      if (nonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension = new UE_NR_Capability_v1530();
         nonCriticalExtension.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }
      else {
         nonCriticalExtension = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((rlc_Parameters != null), null);
      buffer.encodeBit ((mac_Parameters != null), null);
      buffer.encodeBit ((measAndMobParameters != null), null);
      buffer.encodeBit ((fdd_Add_UE_NR_Capabilities != null), null);
      buffer.encodeBit ((tdd_Add_UE_NR_Capabilities != null), null);
      buffer.encodeBit ((fr1_Add_UE_NR_Capabilities != null), null);
      buffer.encodeBit ((fr2_Add_UE_NR_Capabilities != null), null);
      buffer.encodeBit ((featureSets != null), null);
      buffer.encodeBit ((featureSetCombinations != null), null);
      buffer.encodeBit ((lateNonCriticalExtension != null), null);
      buffer.encodeBit ((nonCriticalExtension != null), null);

      // encode accessStratumRelease

      if (accessStratumRelease != null) {
         buffer.getContext().eventDispatcher.startElement("accessStratumRelease", -1);

         accessStratumRelease.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("accessStratumRelease", -1);
      }
      else throw new Asn1MissingRequiredException ("accessStratumRelease");

      // encode pdcp_Parameters

      if (pdcp_Parameters != null) {
         buffer.getContext().eventDispatcher.startElement("pdcp_Parameters", -1);

         pdcp_Parameters.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("pdcp_Parameters", -1);
      }
      else throw new Asn1MissingRequiredException ("pdcp_Parameters");

      // encode rlc_Parameters

      if (rlc_Parameters != null) {
         buffer.getContext().eventDispatcher.startElement("rlc_Parameters", -1);

         rlc_Parameters.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("rlc_Parameters", -1);
      }

      // encode mac_Parameters

      if (mac_Parameters != null) {
         buffer.getContext().eventDispatcher.startElement("mac_Parameters", -1);

         mac_Parameters.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("mac_Parameters", -1);
      }

      // encode phy_Parameters

      if (phy_Parameters != null) {
         buffer.getContext().eventDispatcher.startElement("phy_Parameters", -1);

         phy_Parameters.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("phy_Parameters", -1);
      }
      else throw new Asn1MissingRequiredException ("phy_Parameters");

      // encode rf_Parameters

      if (rf_Parameters != null) {
         buffer.getContext().eventDispatcher.startElement("rf_Parameters", -1);

         rf_Parameters.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("rf_Parameters", -1);
      }
      else throw new Asn1MissingRequiredException ("rf_Parameters");

      // encode measAndMobParameters

      if (measAndMobParameters != null) {
         buffer.getContext().eventDispatcher.startElement("measAndMobParameters", -1);

         measAndMobParameters.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("measAndMobParameters", -1);
      }

      // encode fdd_Add_UE_NR_Capabilities

      if (fdd_Add_UE_NR_Capabilities != null) {
         buffer.getContext().eventDispatcher.startElement("fdd_Add_UE_NR_Capabilities", -1);

         fdd_Add_UE_NR_Capabilities.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("fdd_Add_UE_NR_Capabilities", -1);
      }

      // encode tdd_Add_UE_NR_Capabilities

      if (tdd_Add_UE_NR_Capabilities != null) {
         buffer.getContext().eventDispatcher.startElement("tdd_Add_UE_NR_Capabilities", -1);

         tdd_Add_UE_NR_Capabilities.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("tdd_Add_UE_NR_Capabilities", -1);
      }

      // encode fr1_Add_UE_NR_Capabilities

      if (fr1_Add_UE_NR_Capabilities != null) {
         buffer.getContext().eventDispatcher.startElement("fr1_Add_UE_NR_Capabilities", -1);

         fr1_Add_UE_NR_Capabilities.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("fr1_Add_UE_NR_Capabilities", -1);
      }

      // encode fr2_Add_UE_NR_Capabilities

      if (fr2_Add_UE_NR_Capabilities != null) {
         buffer.getContext().eventDispatcher.startElement("fr2_Add_UE_NR_Capabilities", -1);

         fr2_Add_UE_NR_Capabilities.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("fr2_Add_UE_NR_Capabilities", -1);
      }

      // encode featureSets

      if (featureSets != null) {
         buffer.getContext().eventDispatcher.startElement("featureSets", -1);

         featureSets.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("featureSets", -1);
      }

      // encode featureSetCombinations

      if (featureSetCombinations != null) {
         buffer.getContext().eventDispatcher.startElement("featureSetCombinations", -1);

         featureSetCombinations.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("featureSetCombinations", -1);
      }

      // encode lateNonCriticalExtension

      if (lateNonCriticalExtension != null) {
         buffer.getContext().eventDispatcher.startElement("lateNonCriticalExtension", -1);

         Asn1OctetString lateNonCriticalExtension_outer;
         {
            Asn1PerEncodeBuffer savedBuffer = buffer;
            buffer = new Asn1PerEncodeBuffer(buffer.isAligned());
            lateNonCriticalExtension.encode (buffer);
            lateNonCriticalExtension_outer = new Asn1OctetString(buffer.getMsgCopy() );
            buffer = savedBuffer;
         }
         lateNonCriticalExtension_outer.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("lateNonCriticalExtension", -1);
      }

      // encode nonCriticalExtension

      if (nonCriticalExtension != null) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (accessStratumRelease != null) accessStratumRelease.print (_sb, "accessStratumRelease", _level+1);
      if (pdcp_Parameters != null) pdcp_Parameters.print (_sb, "pdcp_Parameters", _level+1);
      if (rlc_Parameters != null) rlc_Parameters.print (_sb, "rlc_Parameters", _level+1);
      if (mac_Parameters != null) mac_Parameters.print (_sb, "mac_Parameters", _level+1);
      if (phy_Parameters != null) phy_Parameters.print (_sb, "phy_Parameters", _level+1);
      if (rf_Parameters != null) rf_Parameters.print (_sb, "rf_Parameters", _level+1);
      if (measAndMobParameters != null) measAndMobParameters.print (_sb, "measAndMobParameters", _level+1);
      if (fdd_Add_UE_NR_Capabilities != null) fdd_Add_UE_NR_Capabilities.print (_sb, "fdd_Add_UE_NR_Capabilities", _level+1);
      if (tdd_Add_UE_NR_Capabilities != null) tdd_Add_UE_NR_Capabilities.print (_sb, "tdd_Add_UE_NR_Capabilities", _level+1);
      if (fr1_Add_UE_NR_Capabilities != null) fr1_Add_UE_NR_Capabilities.print (_sb, "fr1_Add_UE_NR_Capabilities", _level+1);
      if (fr2_Add_UE_NR_Capabilities != null) fr2_Add_UE_NR_Capabilities.print (_sb, "fr2_Add_UE_NR_Capabilities", _level+1);
      if (featureSets != null) featureSets.print (_sb, "featureSets", _level+1);
      if (featureSetCombinations != null) featureSetCombinations.print (_sb, "featureSetCombinations", _level+1);
      if (lateNonCriticalExtension != null) lateNonCriticalExtension.print (_sb, "lateNonCriticalExtension", _level+1);
      if (nonCriticalExtension != null) nonCriticalExtension.print (_sb, "nonCriticalExtension", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
