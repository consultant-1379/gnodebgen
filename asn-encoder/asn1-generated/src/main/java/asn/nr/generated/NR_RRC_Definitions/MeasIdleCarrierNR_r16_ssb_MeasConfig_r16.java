/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MeasIdleCarrierNR_r16_ssb_MeasConfig_r16 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public Asn1Integer nrofSS_BlocksToAverage_r16;  // optional
   public ThresholdNR absThreshSS_BlocksConsolidation_r16;  // optional
   public SSB_MTC smtc_r16;  // optional
   public SSB_ToMeasure ssb_ToMeasure_r16;  // optional
   public Asn1Boolean deriveSSB_IndexFromCell_r16;
   public SS_RSSI_Measurement ss_RSSI_Measurement_r16;  // optional

   public MeasIdleCarrierNR_r16_ssb_MeasConfig_r16 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MeasIdleCarrierNR_r16_ssb_MeasConfig_r16 (
      Asn1Integer nrofSS_BlocksToAverage_r16_,
      ThresholdNR absThreshSS_BlocksConsolidation_r16_,
      SSB_MTC smtc_r16_,
      SSB_ToMeasure ssb_ToMeasure_r16_,
      Asn1Boolean deriveSSB_IndexFromCell_r16_,
      SS_RSSI_Measurement ss_RSSI_Measurement_r16_
   ) {
      super();
      nrofSS_BlocksToAverage_r16 = nrofSS_BlocksToAverage_r16_;
      absThreshSS_BlocksConsolidation_r16 = absThreshSS_BlocksConsolidation_r16_;
      smtc_r16 = smtc_r16_;
      ssb_ToMeasure_r16 = ssb_ToMeasure_r16_;
      deriveSSB_IndexFromCell_r16 = deriveSSB_IndexFromCell_r16_;
      ss_RSSI_Measurement_r16 = ss_RSSI_Measurement_r16_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public MeasIdleCarrierNR_r16_ssb_MeasConfig_r16 (
      Asn1Boolean deriveSSB_IndexFromCell_r16_
   ) {
      super();
      deriveSSB_IndexFromCell_r16 = deriveSSB_IndexFromCell_r16_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public MeasIdleCarrierNR_r16_ssb_MeasConfig_r16 (long nrofSS_BlocksToAverage_r16_,
      ThresholdNR absThreshSS_BlocksConsolidation_r16_,
      SSB_MTC smtc_r16_,
      SSB_ToMeasure ssb_ToMeasure_r16_,
      boolean deriveSSB_IndexFromCell_r16_,
      SS_RSSI_Measurement ss_RSSI_Measurement_r16_
   ) {
      super();
      nrofSS_BlocksToAverage_r16 = new Asn1Integer (nrofSS_BlocksToAverage_r16_);
      absThreshSS_BlocksConsolidation_r16 = absThreshSS_BlocksConsolidation_r16_;
      smtc_r16 = smtc_r16_;
      ssb_ToMeasure_r16 = ssb_ToMeasure_r16_;
      deriveSSB_IndexFromCell_r16 = new Asn1Boolean (deriveSSB_IndexFromCell_r16_);
      ss_RSSI_Measurement_r16 = ss_RSSI_Measurement_r16_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public MeasIdleCarrierNR_r16_ssb_MeasConfig_r16 (
      boolean deriveSSB_IndexFromCell_r16_
   ) {
      super();
      deriveSSB_IndexFromCell_r16 = new Asn1Boolean (deriveSSB_IndexFromCell_r16_);
   }

   public void init () {
      nrofSS_BlocksToAverage_r16 = null;
      absThreshSS_BlocksConsolidation_r16 = null;
      smtc_r16 = null;
      ssb_ToMeasure_r16 = null;
      deriveSSB_IndexFromCell_r16 = null;
      ss_RSSI_Measurement_r16 = null;
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return nrofSS_BlocksToAverage_r16;
         case 1: return absThreshSS_BlocksConsolidation_r16;
         case 2: return smtc_r16;
         case 3: return ssb_ToMeasure_r16;
         case 4: return deriveSSB_IndexFromCell_r16;
         case 5: return ss_RSSI_Measurement_r16;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "nrofSS-BlocksToAverage-r16";
         case 1: return "absThreshSS-BlocksConsolidation-r16";
         case 2: return "smtc-r16";
         case 3: return "ssb-ToMeasure-r16";
         case 4: return "deriveSSB-IndexFromCell-r16";
         case 5: return "ss-RSSI-Measurement-r16";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean nrofSS_BlocksToAverage_r16Present = buffer.decodeBit ("nrofSS_BlocksToAverage_r16Present");
      boolean absThreshSS_BlocksConsolidation_r16Present = buffer.decodeBit ("absThreshSS_BlocksConsolidation_r16Present");
      boolean smtc_r16Present = buffer.decodeBit ("smtc_r16Present");
      boolean ssb_ToMeasure_r16Present = buffer.decodeBit ("ssb_ToMeasure_r16Present");
      boolean ss_RSSI_Measurement_r16Present = buffer.decodeBit ("ss_RSSI_Measurement_r16Present");

      // decode nrofSS_BlocksToAverage_r16

      if (nrofSS_BlocksToAverage_r16Present) {
         buffer.getContext().eventDispatcher.startElement("nrofSS_BlocksToAverage_r16", -1);

         nrofSS_BlocksToAverage_r16 = new Asn1Integer();
         nrofSS_BlocksToAverage_r16.decode (buffer, 2, 16);

         buffer.invokeCharacters(nrofSS_BlocksToAverage_r16.toString());
         buffer.getContext().eventDispatcher.endElement("nrofSS_BlocksToAverage_r16", -1);
      }
      else {
         nrofSS_BlocksToAverage_r16 = null;
      }

      // decode absThreshSS_BlocksConsolidation_r16

      if (absThreshSS_BlocksConsolidation_r16Present) {
         buffer.getContext().eventDispatcher.startElement("absThreshSS_BlocksConsolidation_r16", -1);

         absThreshSS_BlocksConsolidation_r16 = new ThresholdNR();
         absThreshSS_BlocksConsolidation_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("absThreshSS_BlocksConsolidation_r16", -1);
      }
      else {
         absThreshSS_BlocksConsolidation_r16 = null;
      }

      // decode smtc_r16

      if (smtc_r16Present) {
         buffer.getContext().eventDispatcher.startElement("smtc_r16", -1);

         smtc_r16 = new SSB_MTC();
         smtc_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("smtc_r16", -1);
      }
      else {
         smtc_r16 = null;
      }

      // decode ssb_ToMeasure_r16

      if (ssb_ToMeasure_r16Present) {
         buffer.getContext().eventDispatcher.startElement("ssb_ToMeasure_r16", -1);

         ssb_ToMeasure_r16 = new SSB_ToMeasure();
         ssb_ToMeasure_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ssb_ToMeasure_r16", -1);
      }
      else {
         ssb_ToMeasure_r16 = null;
      }

      // decode deriveSSB_IndexFromCell_r16

      buffer.getContext().eventDispatcher.startElement("deriveSSB_IndexFromCell_r16", -1);

      deriveSSB_IndexFromCell_r16 = new Asn1Boolean();
      deriveSSB_IndexFromCell_r16.decode (buffer);

      buffer.invokeCharacters(deriveSSB_IndexFromCell_r16.toString());
      buffer.getContext().eventDispatcher.endElement("deriveSSB_IndexFromCell_r16", -1);

      // decode ss_RSSI_Measurement_r16

      if (ss_RSSI_Measurement_r16Present) {
         buffer.getContext().eventDispatcher.startElement("ss_RSSI_Measurement_r16", -1);

         ss_RSSI_Measurement_r16 = new SS_RSSI_Measurement();
         ss_RSSI_Measurement_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ss_RSSI_Measurement_r16", -1);
      }
      else {
         ss_RSSI_Measurement_r16 = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((nrofSS_BlocksToAverage_r16 != null), null);
      buffer.encodeBit ((absThreshSS_BlocksConsolidation_r16 != null), null);
      buffer.encodeBit ((smtc_r16 != null), null);
      buffer.encodeBit ((ssb_ToMeasure_r16 != null), null);
      buffer.encodeBit ((ss_RSSI_Measurement_r16 != null), null);

      // encode nrofSS_BlocksToAverage_r16

      if (nrofSS_BlocksToAverage_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("nrofSS_BlocksToAverage_r16", -1);

         nrofSS_BlocksToAverage_r16.encode (buffer, 2, 16);

         buffer.getContext().eventDispatcher.endElement("nrofSS_BlocksToAverage_r16", -1);
      }

      // encode absThreshSS_BlocksConsolidation_r16

      if (absThreshSS_BlocksConsolidation_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("absThreshSS_BlocksConsolidation_r16", -1);

         absThreshSS_BlocksConsolidation_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("absThreshSS_BlocksConsolidation_r16", -1);
      }

      // encode smtc_r16

      if (smtc_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("smtc_r16", -1);

         smtc_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("smtc_r16", -1);
      }

      // encode ssb_ToMeasure_r16

      if (ssb_ToMeasure_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("ssb_ToMeasure_r16", -1);

         ssb_ToMeasure_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ssb_ToMeasure_r16", -1);
      }

      // encode deriveSSB_IndexFromCell_r16

      if (deriveSSB_IndexFromCell_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("deriveSSB_IndexFromCell_r16", -1);

         deriveSSB_IndexFromCell_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("deriveSSB_IndexFromCell_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("deriveSSB_IndexFromCell_r16");

      // encode ss_RSSI_Measurement_r16

      if (ss_RSSI_Measurement_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("ss_RSSI_Measurement_r16", -1);

         ss_RSSI_Measurement_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ss_RSSI_Measurement_r16", -1);
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (nrofSS_BlocksToAverage_r16 != null) nrofSS_BlocksToAverage_r16.print (_sb, "nrofSS_BlocksToAverage_r16", _level+1);
      if (absThreshSS_BlocksConsolidation_r16 != null) absThreshSS_BlocksConsolidation_r16.print (_sb, "absThreshSS_BlocksConsolidation_r16", _level+1);
      if (smtc_r16 != null) smtc_r16.print (_sb, "smtc_r16", _level+1);
      if (ssb_ToMeasure_r16 != null) ssb_ToMeasure_r16.print (_sb, "ssb_ToMeasure_r16", _level+1);
      if (deriveSSB_IndexFromCell_r16 != null) deriveSSB_IndexFromCell_r16.print (_sb, "deriveSSB_IndexFromCell_r16", _level+1);
      if (ss_RSSI_Measurement_r16 != null) ss_RSSI_Measurement_r16.print (_sb, "ss_RSSI_Measurement_r16", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
