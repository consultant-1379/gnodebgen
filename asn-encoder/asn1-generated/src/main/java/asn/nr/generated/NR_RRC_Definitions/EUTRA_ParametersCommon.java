/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class EUTRA_ParametersCommon extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "EUTRA-ParametersCommon";
   }

   public EUTRA_ParametersCommon_mfbi_EUTRA mfbi_EUTRA = null;  // optional
   public Asn1BitString modifiedMPR_BehaviorEUTRA;  // optional
   public EUTRA_ParametersCommon_multiNS_Pmax_EUTRA multiNS_Pmax_EUTRA = null;  // optional
   public EUTRA_ParametersCommon_rs_SINR_MeasEUTRA rs_SINR_MeasEUTRA = null;  // optional
   public boolean mV2ExtPresent;
   public EUTRA_ParametersCommon_ne_DC ne_DC = null;  // optional
   public boolean mV3ExtPresent;
   public EUTRA_ParametersCommon_nr_HO_ToEN_DC_r16 nr_HO_ToEN_DC_r16 = null;  // optional
   public Asn1OpenExt extElem1;

   public EUTRA_ParametersCommon () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public EUTRA_ParametersCommon (
      EUTRA_ParametersCommon_mfbi_EUTRA mfbi_EUTRA_,
      Asn1BitString modifiedMPR_BehaviorEUTRA_,
      EUTRA_ParametersCommon_multiNS_Pmax_EUTRA multiNS_Pmax_EUTRA_,
      EUTRA_ParametersCommon_rs_SINR_MeasEUTRA rs_SINR_MeasEUTRA_,
      EUTRA_ParametersCommon_ne_DC ne_DC_,
      EUTRA_ParametersCommon_nr_HO_ToEN_DC_r16 nr_HO_ToEN_DC_r16_
   ) {
      super();
      mfbi_EUTRA = mfbi_EUTRA_;
      modifiedMPR_BehaviorEUTRA = modifiedMPR_BehaviorEUTRA_;
      multiNS_Pmax_EUTRA = multiNS_Pmax_EUTRA_;
      rs_SINR_MeasEUTRA = rs_SINR_MeasEUTRA_;
      ne_DC = ne_DC_;
      nr_HO_ToEN_DC_r16 = nr_HO_ToEN_DC_r16_;
   }

   public void init () {
      mfbi_EUTRA = null;
      modifiedMPR_BehaviorEUTRA = null;
      multiNS_Pmax_EUTRA = null;
      rs_SINR_MeasEUTRA = null;
      ne_DC = null;
      nr_HO_ToEN_DC_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return mfbi_EUTRA;
         case 1: return modifiedMPR_BehaviorEUTRA;
         case 2: return multiNS_Pmax_EUTRA;
         case 3: return rs_SINR_MeasEUTRA;
         case 4: return ne_DC;
         case 5: return nr_HO_ToEN_DC_r16;
         case 6: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "mfbi-EUTRA";
         case 1: return "modifiedMPR-BehaviorEUTRA";
         case 2: return "multiNS-Pmax-EUTRA";
         case 3: return "rs-SINR-MeasEUTRA";
         case 4: return "ne-DC";
         case 5: return "nr-HO-ToEN-DC-r16";
         case 6: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean mfbi_EUTRAPresent = buffer.decodeBit ("mfbi_EUTRAPresent");
      boolean modifiedMPR_BehaviorEUTRAPresent = buffer.decodeBit ("modifiedMPR_BehaviorEUTRAPresent");
      boolean multiNS_Pmax_EUTRAPresent = buffer.decodeBit ("multiNS_Pmax_EUTRAPresent");
      boolean rs_SINR_MeasEUTRAPresent = buffer.decodeBit ("rs_SINR_MeasEUTRAPresent");

      // decode mfbi_EUTRA

      if (mfbi_EUTRAPresent) {
         buffer.getContext().eventDispatcher.startElement("mfbi_EUTRA", -1);

         int tval = EUTRA_ParametersCommon_mfbi_EUTRA.decodeEnumValue (buffer);
         mfbi_EUTRA = EUTRA_ParametersCommon_mfbi_EUTRA.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("mfbi_EUTRA", -1);
      }
      else {
         mfbi_EUTRA = null;
      }

      // decode modifiedMPR_BehaviorEUTRA

      if (modifiedMPR_BehaviorEUTRAPresent) {
         buffer.getContext().eventDispatcher.startElement("modifiedMPR_BehaviorEUTRA", -1);

         modifiedMPR_BehaviorEUTRA = new Asn1BitString();
         modifiedMPR_BehaviorEUTRA.decode (buffer, 32, 32);

         buffer.invokeCharacters(modifiedMPR_BehaviorEUTRA.toString());
         buffer.getContext().eventDispatcher.endElement("modifiedMPR_BehaviorEUTRA", -1);
      }
      else {
         modifiedMPR_BehaviorEUTRA = null;
      }

      // decode multiNS_Pmax_EUTRA

      if (multiNS_Pmax_EUTRAPresent) {
         buffer.getContext().eventDispatcher.startElement("multiNS_Pmax_EUTRA", -1);

         int tval = EUTRA_ParametersCommon_multiNS_Pmax_EUTRA.decodeEnumValue (buffer);
         multiNS_Pmax_EUTRA = EUTRA_ParametersCommon_multiNS_Pmax_EUTRA.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("multiNS_Pmax_EUTRA", -1);
      }
      else {
         multiNS_Pmax_EUTRA = null;
      }

      // decode rs_SINR_MeasEUTRA

      if (rs_SINR_MeasEUTRAPresent) {
         buffer.getContext().eventDispatcher.startElement("rs_SINR_MeasEUTRA", -1);

         int tval = EUTRA_ParametersCommon_rs_SINR_MeasEUTRA.decodeEnumValue (buffer);
         rs_SINR_MeasEUTRA = EUTRA_ParametersCommon_rs_SINR_MeasEUTRA.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("rs_SINR_MeasEUTRA", -1);
      }
      else {
         rs_SINR_MeasEUTRA = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean ne_DCPresent = buffer.decodeBit ("ne_DCPresent");

            // decode ne_DC

            if (ne_DCPresent) {
               buffer.getContext().eventDispatcher.startElement("ne_DC", -1);

               int tval = EUTRA_ParametersCommon_ne_DC.decodeEnumValue (buffer);
               ne_DC = EUTRA_ParametersCommon_ne_DC.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("ne_DC", -1);
            }
            else {
               ne_DC = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean nr_HO_ToEN_DC_r16Present = buffer.decodeBit ("nr_HO_ToEN_DC_r16Present");

            // decode nr_HO_ToEN_DC_r16

            if (nr_HO_ToEN_DC_r16Present) {
               buffer.getContext().eventDispatcher.startElement("nr_HO_ToEN_DC_r16", -1);

               int tval = EUTRA_ParametersCommon_nr_HO_ToEN_DC_r16.decodeEnumValue (buffer);
               nr_HO_ToEN_DC_r16 = EUTRA_ParametersCommon_nr_HO_ToEN_DC_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("nr_HO_ToEN_DC_r16", -1);
            }
            else {
               nr_HO_ToEN_DC_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (mV2ExtPresent ||
      mV3ExtPresent ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((mfbi_EUTRA != null), null);
      buffer.encodeBit ((modifiedMPR_BehaviorEUTRA != null), null);
      buffer.encodeBit ((multiNS_Pmax_EUTRA != null), null);
      buffer.encodeBit ((rs_SINR_MeasEUTRA != null), null);

      // encode mfbi_EUTRA

      if (mfbi_EUTRA != null) {
         buffer.getContext().eventDispatcher.startElement("mfbi_EUTRA", -1);

         mfbi_EUTRA.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("mfbi_EUTRA", -1);
      }

      // encode modifiedMPR_BehaviorEUTRA

      if (modifiedMPR_BehaviorEUTRA != null) {
         buffer.getContext().eventDispatcher.startElement("modifiedMPR_BehaviorEUTRA", -1);

         modifiedMPR_BehaviorEUTRA.encode (buffer, 32, 32);

         buffer.getContext().eventDispatcher.endElement("modifiedMPR_BehaviorEUTRA", -1);
      }

      // encode multiNS_Pmax_EUTRA

      if (multiNS_Pmax_EUTRA != null) {
         buffer.getContext().eventDispatcher.startElement("multiNS_Pmax_EUTRA", -1);

         multiNS_Pmax_EUTRA.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("multiNS_Pmax_EUTRA", -1);
      }

      // encode rs_SINR_MeasEUTRA

      if (rs_SINR_MeasEUTRA != null) {
         buffer.getContext().eventDispatcher.startElement("rs_SINR_MeasEUTRA", -1);

         rs_SINR_MeasEUTRA.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("rs_SINR_MeasEUTRA", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 2;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit (mV2ExtPresent, null);
         buffer.encodeBit (mV3ExtPresent, null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         if (mV2ExtPresent) {
            buffer.reset();
            buffer.encodeBit ((ne_DC != null), "optbit");
            if (ne_DC != null) {
               ne_DC.encode (buffer);
            }
            mainBuffer.encodeOpenType (buffer, null);
         }

         if (mV3ExtPresent) {
            buffer.reset();
            buffer.encodeBit ((nr_HO_ToEN_DC_r16 != null), "optbit");
            if (nr_HO_ToEN_DC_r16 != null) {
               nr_HO_ToEN_DC_r16.encode (buffer);
            }
            mainBuffer.encodeOpenType (buffer, null);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (mfbi_EUTRA != null) mfbi_EUTRA.print (_sb, "mfbi_EUTRA", _level+1);
      if (modifiedMPR_BehaviorEUTRA != null) modifiedMPR_BehaviorEUTRA.print (_sb, "modifiedMPR_BehaviorEUTRA", _level+1);
      if (multiNS_Pmax_EUTRA != null) multiNS_Pmax_EUTRA.print (_sb, "multiNS_Pmax_EUTRA", _level+1);
      if (rs_SINR_MeasEUTRA != null) rs_SINR_MeasEUTRA.print (_sb, "rs_SINR_MeasEUTRA", _level+1);
      if (ne_DC != null) ne_DC.print (_sb, "ne_DC", _level+1);
      if (nr_HO_ToEN_DC_r16 != null) nr_HO_ToEN_DC_r16.print (_sb, "nr_HO_ToEN_DC_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
