/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class PUCCH_PowerControl extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "PUCCH-PowerControl";
   }

   public Asn1Integer deltaF_PUCCH_f0;  // optional
   public Asn1Integer deltaF_PUCCH_f1;  // optional
   public Asn1Integer deltaF_PUCCH_f2;  // optional
   public Asn1Integer deltaF_PUCCH_f3;  // optional
   public Asn1Integer deltaF_PUCCH_f4;  // optional
   public PUCCH_PowerControl_p0_Set p0_Set;  // optional
   public PUCCH_PowerControl_pathlossReferenceRSs pathlossReferenceRSs;  // optional
   public PUCCH_PowerControl_twoPUCCH_PC_AdjustmentStates twoPUCCH_PC_AdjustmentStates = null;  // optional
   public boolean mV2ExtPresent;
   public PUCCH_PowerControl_pathlossReferenceRSs_v1610 pathlossReferenceRSs_v1610;  // optional
   public Asn1OpenExt extElem1;

   public PUCCH_PowerControl () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public PUCCH_PowerControl (
      Asn1Integer deltaF_PUCCH_f0_,
      Asn1Integer deltaF_PUCCH_f1_,
      Asn1Integer deltaF_PUCCH_f2_,
      Asn1Integer deltaF_PUCCH_f3_,
      Asn1Integer deltaF_PUCCH_f4_,
      PUCCH_PowerControl_p0_Set p0_Set_,
      PUCCH_PowerControl_pathlossReferenceRSs pathlossReferenceRSs_,
      PUCCH_PowerControl_twoPUCCH_PC_AdjustmentStates twoPUCCH_PC_AdjustmentStates_,
      PUCCH_PowerControl_pathlossReferenceRSs_v1610 pathlossReferenceRSs_v1610_
   ) {
      super();
      deltaF_PUCCH_f0 = deltaF_PUCCH_f0_;
      deltaF_PUCCH_f1 = deltaF_PUCCH_f1_;
      deltaF_PUCCH_f2 = deltaF_PUCCH_f2_;
      deltaF_PUCCH_f3 = deltaF_PUCCH_f3_;
      deltaF_PUCCH_f4 = deltaF_PUCCH_f4_;
      p0_Set = p0_Set_;
      pathlossReferenceRSs = pathlossReferenceRSs_;
      twoPUCCH_PC_AdjustmentStates = twoPUCCH_PC_AdjustmentStates_;
      pathlossReferenceRSs_v1610 = pathlossReferenceRSs_v1610_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public PUCCH_PowerControl (long deltaF_PUCCH_f0_,
      long deltaF_PUCCH_f1_,
      long deltaF_PUCCH_f2_,
      long deltaF_PUCCH_f3_,
      long deltaF_PUCCH_f4_,
      PUCCH_PowerControl_p0_Set p0_Set_,
      PUCCH_PowerControl_pathlossReferenceRSs pathlossReferenceRSs_,
      PUCCH_PowerControl_twoPUCCH_PC_AdjustmentStates twoPUCCH_PC_AdjustmentStates_,
      PUCCH_PowerControl_pathlossReferenceRSs_v1610 pathlossReferenceRSs_v1610_
   ) {
      super();
      deltaF_PUCCH_f0 = new Asn1Integer (deltaF_PUCCH_f0_);
      deltaF_PUCCH_f1 = new Asn1Integer (deltaF_PUCCH_f1_);
      deltaF_PUCCH_f2 = new Asn1Integer (deltaF_PUCCH_f2_);
      deltaF_PUCCH_f3 = new Asn1Integer (deltaF_PUCCH_f3_);
      deltaF_PUCCH_f4 = new Asn1Integer (deltaF_PUCCH_f4_);
      p0_Set = p0_Set_;
      pathlossReferenceRSs = pathlossReferenceRSs_;
      twoPUCCH_PC_AdjustmentStates = twoPUCCH_PC_AdjustmentStates_;
      pathlossReferenceRSs_v1610 = pathlossReferenceRSs_v1610_;
   }

   public void init () {
      deltaF_PUCCH_f0 = null;
      deltaF_PUCCH_f1 = null;
      deltaF_PUCCH_f2 = null;
      deltaF_PUCCH_f3 = null;
      deltaF_PUCCH_f4 = null;
      p0_Set = null;
      pathlossReferenceRSs = null;
      twoPUCCH_PC_AdjustmentStates = null;
      pathlossReferenceRSs_v1610 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 10; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return deltaF_PUCCH_f0;
         case 1: return deltaF_PUCCH_f1;
         case 2: return deltaF_PUCCH_f2;
         case 3: return deltaF_PUCCH_f3;
         case 4: return deltaF_PUCCH_f4;
         case 5: return p0_Set;
         case 6: return pathlossReferenceRSs;
         case 7: return twoPUCCH_PC_AdjustmentStates;
         case 8: return pathlossReferenceRSs_v1610;
         case 9: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "deltaF-PUCCH-f0";
         case 1: return "deltaF-PUCCH-f1";
         case 2: return "deltaF-PUCCH-f2";
         case 3: return "deltaF-PUCCH-f3";
         case 4: return "deltaF-PUCCH-f4";
         case 5: return "p0-Set";
         case 6: return "pathlossReferenceRSs";
         case 7: return "twoPUCCH-PC-AdjustmentStates";
         case 8: return "pathlossReferenceRSs-v1610";
         case 9: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean deltaF_PUCCH_f0Present = buffer.decodeBit ("deltaF_PUCCH_f0Present");
      boolean deltaF_PUCCH_f1Present = buffer.decodeBit ("deltaF_PUCCH_f1Present");
      boolean deltaF_PUCCH_f2Present = buffer.decodeBit ("deltaF_PUCCH_f2Present");
      boolean deltaF_PUCCH_f3Present = buffer.decodeBit ("deltaF_PUCCH_f3Present");
      boolean deltaF_PUCCH_f4Present = buffer.decodeBit ("deltaF_PUCCH_f4Present");
      boolean p0_SetPresent = buffer.decodeBit ("p0_SetPresent");
      boolean pathlossReferenceRSsPresent = buffer.decodeBit ("pathlossReferenceRSsPresent");
      boolean twoPUCCH_PC_AdjustmentStatesPresent = buffer.decodeBit ("twoPUCCH_PC_AdjustmentStatesPresent");

      // decode deltaF_PUCCH_f0

      if (deltaF_PUCCH_f0Present) {
         buffer.getContext().eventDispatcher.startElement("deltaF_PUCCH_f0", -1);

         deltaF_PUCCH_f0 = new Asn1Integer();
         deltaF_PUCCH_f0.decode (buffer, -16, 15);

         buffer.invokeCharacters(deltaF_PUCCH_f0.toString());
         buffer.getContext().eventDispatcher.endElement("deltaF_PUCCH_f0", -1);
      }
      else {
         deltaF_PUCCH_f0 = null;
      }

      // decode deltaF_PUCCH_f1

      if (deltaF_PUCCH_f1Present) {
         buffer.getContext().eventDispatcher.startElement("deltaF_PUCCH_f1", -1);

         deltaF_PUCCH_f1 = new Asn1Integer();
         deltaF_PUCCH_f1.decode (buffer, -16, 15);

         buffer.invokeCharacters(deltaF_PUCCH_f1.toString());
         buffer.getContext().eventDispatcher.endElement("deltaF_PUCCH_f1", -1);
      }
      else {
         deltaF_PUCCH_f1 = null;
      }

      // decode deltaF_PUCCH_f2

      if (deltaF_PUCCH_f2Present) {
         buffer.getContext().eventDispatcher.startElement("deltaF_PUCCH_f2", -1);

         deltaF_PUCCH_f2 = new Asn1Integer();
         deltaF_PUCCH_f2.decode (buffer, -16, 15);

         buffer.invokeCharacters(deltaF_PUCCH_f2.toString());
         buffer.getContext().eventDispatcher.endElement("deltaF_PUCCH_f2", -1);
      }
      else {
         deltaF_PUCCH_f2 = null;
      }

      // decode deltaF_PUCCH_f3

      if (deltaF_PUCCH_f3Present) {
         buffer.getContext().eventDispatcher.startElement("deltaF_PUCCH_f3", -1);

         deltaF_PUCCH_f3 = new Asn1Integer();
         deltaF_PUCCH_f3.decode (buffer, -16, 15);

         buffer.invokeCharacters(deltaF_PUCCH_f3.toString());
         buffer.getContext().eventDispatcher.endElement("deltaF_PUCCH_f3", -1);
      }
      else {
         deltaF_PUCCH_f3 = null;
      }

      // decode deltaF_PUCCH_f4

      if (deltaF_PUCCH_f4Present) {
         buffer.getContext().eventDispatcher.startElement("deltaF_PUCCH_f4", -1);

         deltaF_PUCCH_f4 = new Asn1Integer();
         deltaF_PUCCH_f4.decode (buffer, -16, 15);

         buffer.invokeCharacters(deltaF_PUCCH_f4.toString());
         buffer.getContext().eventDispatcher.endElement("deltaF_PUCCH_f4", -1);
      }
      else {
         deltaF_PUCCH_f4 = null;
      }

      // decode p0_Set

      if (p0_SetPresent) {
         buffer.getContext().eventDispatcher.startElement("p0_Set", -1);

         p0_Set = new PUCCH_PowerControl_p0_Set();
         p0_Set.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("p0_Set", -1);
      }
      else {
         p0_Set = null;
      }

      // decode pathlossReferenceRSs

      if (pathlossReferenceRSsPresent) {
         buffer.getContext().eventDispatcher.startElement("pathlossReferenceRSs", -1);

         pathlossReferenceRSs = new PUCCH_PowerControl_pathlossReferenceRSs();
         pathlossReferenceRSs.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("pathlossReferenceRSs", -1);
      }
      else {
         pathlossReferenceRSs = null;
      }

      // decode twoPUCCH_PC_AdjustmentStates

      if (twoPUCCH_PC_AdjustmentStatesPresent) {
         buffer.getContext().eventDispatcher.startElement("twoPUCCH_PC_AdjustmentStates", -1);

         int tval = PUCCH_PowerControl_twoPUCCH_PC_AdjustmentStates.decodeEnumValue (buffer);
         twoPUCCH_PC_AdjustmentStates = PUCCH_PowerControl_twoPUCCH_PC_AdjustmentStates.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("twoPUCCH_PC_AdjustmentStates", -1);
      }
      else {
         twoPUCCH_PC_AdjustmentStates = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean pathlossReferenceRSs_v1610Present = buffer.decodeBit ("pathlossReferenceRSs_v1610Present");

            // decode pathlossReferenceRSs_v1610

            if (pathlossReferenceRSs_v1610Present) {
               buffer.getContext().eventDispatcher.startElement("pathlossReferenceRSs_v1610", -1);

               pathlossReferenceRSs_v1610 = new PUCCH_PowerControl_pathlossReferenceRSs_v1610();
               pathlossReferenceRSs_v1610.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("pathlossReferenceRSs_v1610", -1);
            }
            else {
               pathlossReferenceRSs_v1610 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (mV2ExtPresent ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((deltaF_PUCCH_f0 != null), null);
      buffer.encodeBit ((deltaF_PUCCH_f1 != null), null);
      buffer.encodeBit ((deltaF_PUCCH_f2 != null), null);
      buffer.encodeBit ((deltaF_PUCCH_f3 != null), null);
      buffer.encodeBit ((deltaF_PUCCH_f4 != null), null);
      buffer.encodeBit ((p0_Set != null), null);
      buffer.encodeBit ((pathlossReferenceRSs != null), null);
      buffer.encodeBit ((twoPUCCH_PC_AdjustmentStates != null), null);

      // encode deltaF_PUCCH_f0

      if (deltaF_PUCCH_f0 != null) {
         buffer.getContext().eventDispatcher.startElement("deltaF_PUCCH_f0", -1);

         deltaF_PUCCH_f0.encode (buffer, -16, 15);

         buffer.getContext().eventDispatcher.endElement("deltaF_PUCCH_f0", -1);
      }

      // encode deltaF_PUCCH_f1

      if (deltaF_PUCCH_f1 != null) {
         buffer.getContext().eventDispatcher.startElement("deltaF_PUCCH_f1", -1);

         deltaF_PUCCH_f1.encode (buffer, -16, 15);

         buffer.getContext().eventDispatcher.endElement("deltaF_PUCCH_f1", -1);
      }

      // encode deltaF_PUCCH_f2

      if (deltaF_PUCCH_f2 != null) {
         buffer.getContext().eventDispatcher.startElement("deltaF_PUCCH_f2", -1);

         deltaF_PUCCH_f2.encode (buffer, -16, 15);

         buffer.getContext().eventDispatcher.endElement("deltaF_PUCCH_f2", -1);
      }

      // encode deltaF_PUCCH_f3

      if (deltaF_PUCCH_f3 != null) {
         buffer.getContext().eventDispatcher.startElement("deltaF_PUCCH_f3", -1);

         deltaF_PUCCH_f3.encode (buffer, -16, 15);

         buffer.getContext().eventDispatcher.endElement("deltaF_PUCCH_f3", -1);
      }

      // encode deltaF_PUCCH_f4

      if (deltaF_PUCCH_f4 != null) {
         buffer.getContext().eventDispatcher.startElement("deltaF_PUCCH_f4", -1);

         deltaF_PUCCH_f4.encode (buffer, -16, 15);

         buffer.getContext().eventDispatcher.endElement("deltaF_PUCCH_f4", -1);
      }

      // encode p0_Set

      if (p0_Set != null) {
         buffer.getContext().eventDispatcher.startElement("p0_Set", -1);

         p0_Set.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("p0_Set", -1);
      }

      // encode pathlossReferenceRSs

      if (pathlossReferenceRSs != null) {
         buffer.getContext().eventDispatcher.startElement("pathlossReferenceRSs", -1);

         pathlossReferenceRSs.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("pathlossReferenceRSs", -1);
      }

      // encode twoPUCCH_PC_AdjustmentStates

      if (twoPUCCH_PC_AdjustmentStates != null) {
         buffer.getContext().eventDispatcher.startElement("twoPUCCH_PC_AdjustmentStates", -1);

         twoPUCCH_PC_AdjustmentStates.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("twoPUCCH_PC_AdjustmentStates", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 1;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit (mV2ExtPresent, null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         if (mV2ExtPresent) {
            buffer.reset();
            buffer.encodeBit ((pathlossReferenceRSs_v1610 != null), "optbit");
            if (pathlossReferenceRSs_v1610 != null) {
               pathlossReferenceRSs_v1610.encode (buffer);
            }
            mainBuffer.encodeOpenType (buffer, null);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (deltaF_PUCCH_f0 != null) deltaF_PUCCH_f0.print (_sb, "deltaF_PUCCH_f0", _level+1);
      if (deltaF_PUCCH_f1 != null) deltaF_PUCCH_f1.print (_sb, "deltaF_PUCCH_f1", _level+1);
      if (deltaF_PUCCH_f2 != null) deltaF_PUCCH_f2.print (_sb, "deltaF_PUCCH_f2", _level+1);
      if (deltaF_PUCCH_f3 != null) deltaF_PUCCH_f3.print (_sb, "deltaF_PUCCH_f3", _level+1);
      if (deltaF_PUCCH_f4 != null) deltaF_PUCCH_f4.print (_sb, "deltaF_PUCCH_f4", _level+1);
      if (p0_Set != null) p0_Set.print (_sb, "p0_Set", _level+1);
      if (pathlossReferenceRSs != null) pathlossReferenceRSs.print (_sb, "pathlossReferenceRSs", _level+1);
      if (twoPUCCH_PC_AdjustmentStates != null) twoPUCCH_PC_AdjustmentStates.print (_sb, "twoPUCCH_PC_AdjustmentStates", _level+1);
      if (pathlossReferenceRSs_v1610 != null) pathlossReferenceRSs_v1610.print (_sb, "pathlossReferenceRSs_v1610", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
