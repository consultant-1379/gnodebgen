/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class ControlResourceSet extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ControlResourceSet";
   }

   public ControlResourceSetId controlResourceSetId;
   public Asn1BitString frequencyDomainResources;
   public Asn1Integer duration;
   public ControlResourceSet_cce_REG_MappingType cce_REG_MappingType;
   public ControlResourceSet_precoderGranularity precoderGranularity = null;
   public ControlResourceSet_tci_StatesPDCCH_ToAddList tci_StatesPDCCH_ToAddList;  // optional
   public ControlResourceSet_tci_StatesPDCCH_ToReleaseList tci_StatesPDCCH_ToReleaseList;  // optional
   public ControlResourceSet_tci_PresentInDCI tci_PresentInDCI = null;  // optional
   public Asn1Integer pdcch_DMRS_ScramblingID;  // optional
   public boolean mV2ExtPresent;
   public Asn1Integer rb_Offset_r16;  // optional
   public Asn1Integer tci_PresentDCI_1_2_r16;  // optional
   public Asn1Integer coresetPoolIndex_r16;  // optional
   public ControlResourceSetId_v1610 controlResourceSetId_v1610;  // optional
   public Asn1OpenExt extElem1;

   public ControlResourceSet () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ControlResourceSet (
      ControlResourceSetId controlResourceSetId_,
      Asn1BitString frequencyDomainResources_,
      Asn1Integer duration_,
      ControlResourceSet_cce_REG_MappingType cce_REG_MappingType_,
      ControlResourceSet_precoderGranularity precoderGranularity_,
      ControlResourceSet_tci_StatesPDCCH_ToAddList tci_StatesPDCCH_ToAddList_,
      ControlResourceSet_tci_StatesPDCCH_ToReleaseList tci_StatesPDCCH_ToReleaseList_,
      ControlResourceSet_tci_PresentInDCI tci_PresentInDCI_,
      Asn1Integer pdcch_DMRS_ScramblingID_,
      Asn1Integer rb_Offset_r16_,
      Asn1Integer tci_PresentDCI_1_2_r16_,
      Asn1Integer coresetPoolIndex_r16_,
      ControlResourceSetId_v1610 controlResourceSetId_v1610_
   ) {
      super();
      controlResourceSetId = controlResourceSetId_;
      frequencyDomainResources = frequencyDomainResources_;
      duration = duration_;
      cce_REG_MappingType = cce_REG_MappingType_;
      precoderGranularity = precoderGranularity_;
      tci_StatesPDCCH_ToAddList = tci_StatesPDCCH_ToAddList_;
      tci_StatesPDCCH_ToReleaseList = tci_StatesPDCCH_ToReleaseList_;
      tci_PresentInDCI = tci_PresentInDCI_;
      pdcch_DMRS_ScramblingID = pdcch_DMRS_ScramblingID_;
      rb_Offset_r16 = rb_Offset_r16_;
      tci_PresentDCI_1_2_r16 = tci_PresentDCI_1_2_r16_;
      coresetPoolIndex_r16 = coresetPoolIndex_r16_;
      controlResourceSetId_v1610 = controlResourceSetId_v1610_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public ControlResourceSet (
      ControlResourceSetId controlResourceSetId_,
      Asn1BitString frequencyDomainResources_,
      Asn1Integer duration_,
      ControlResourceSet_cce_REG_MappingType cce_REG_MappingType_,
      ControlResourceSet_precoderGranularity precoderGranularity_
   ) {
      super();
      controlResourceSetId = controlResourceSetId_;
      frequencyDomainResources = frequencyDomainResources_;
      duration = duration_;
      cce_REG_MappingType = cce_REG_MappingType_;
      precoderGranularity = precoderGranularity_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public ControlResourceSet (long controlResourceSetId_,
      Asn1BitString frequencyDomainResources_,
      long duration_,
      ControlResourceSet_cce_REG_MappingType cce_REG_MappingType_,
      ControlResourceSet_precoderGranularity precoderGranularity_,
      ControlResourceSet_tci_StatesPDCCH_ToAddList tci_StatesPDCCH_ToAddList_,
      ControlResourceSet_tci_StatesPDCCH_ToReleaseList tci_StatesPDCCH_ToReleaseList_,
      ControlResourceSet_tci_PresentInDCI tci_PresentInDCI_,
      long pdcch_DMRS_ScramblingID_,
      long rb_Offset_r16_,
      long tci_PresentDCI_1_2_r16_,
      long coresetPoolIndex_r16_,
      long controlResourceSetId_v1610_
   ) {
      super();
      controlResourceSetId = new ControlResourceSetId (controlResourceSetId_);
      frequencyDomainResources = frequencyDomainResources_;
      duration = new Asn1Integer (duration_);
      cce_REG_MappingType = cce_REG_MappingType_;
      precoderGranularity = precoderGranularity_;
      tci_StatesPDCCH_ToAddList = tci_StatesPDCCH_ToAddList_;
      tci_StatesPDCCH_ToReleaseList = tci_StatesPDCCH_ToReleaseList_;
      tci_PresentInDCI = tci_PresentInDCI_;
      pdcch_DMRS_ScramblingID = new Asn1Integer (pdcch_DMRS_ScramblingID_);
      rb_Offset_r16 = new Asn1Integer (rb_Offset_r16_);
      tci_PresentDCI_1_2_r16 = new Asn1Integer (tci_PresentDCI_1_2_r16_);
      coresetPoolIndex_r16 = new Asn1Integer (coresetPoolIndex_r16_);
      controlResourceSetId_v1610 = new ControlResourceSetId_v1610 (controlResourceSetId_v1610_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public ControlResourceSet (
      long controlResourceSetId_,
      Asn1BitString frequencyDomainResources_,
      long duration_,
      ControlResourceSet_cce_REG_MappingType cce_REG_MappingType_,
      ControlResourceSet_precoderGranularity precoderGranularity_
   ) {
      super();
      controlResourceSetId = new ControlResourceSetId (controlResourceSetId_);
      frequencyDomainResources = frequencyDomainResources_;
      duration = new Asn1Integer (duration_);
      cce_REG_MappingType = cce_REG_MappingType_;
      precoderGranularity = precoderGranularity_;
   }

   public void init () {
      controlResourceSetId = null;
      frequencyDomainResources = null;
      duration = null;
      cce_REG_MappingType = null;
      precoderGranularity = null;
      tci_StatesPDCCH_ToAddList = null;
      tci_StatesPDCCH_ToReleaseList = null;
      tci_PresentInDCI = null;
      pdcch_DMRS_ScramblingID = null;
      rb_Offset_r16 = null;
      tci_PresentDCI_1_2_r16 = null;
      coresetPoolIndex_r16 = null;
      controlResourceSetId_v1610 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 14; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return controlResourceSetId;
         case 1: return frequencyDomainResources;
         case 2: return duration;
         case 3: return cce_REG_MappingType;
         case 4: return precoderGranularity;
         case 5: return tci_StatesPDCCH_ToAddList;
         case 6: return tci_StatesPDCCH_ToReleaseList;
         case 7: return tci_PresentInDCI;
         case 8: return pdcch_DMRS_ScramblingID;
         case 9: return rb_Offset_r16;
         case 10: return tci_PresentDCI_1_2_r16;
         case 11: return coresetPoolIndex_r16;
         case 12: return controlResourceSetId_v1610;
         case 13: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "controlResourceSetId";
         case 1: return "frequencyDomainResources";
         case 2: return "duration";
         case 3: return "cce-REG-MappingType";
         case 4: return "precoderGranularity";
         case 5: return "tci-StatesPDCCH-ToAddList";
         case 6: return "tci-StatesPDCCH-ToReleaseList";
         case 7: return "tci-PresentInDCI";
         case 8: return "pdcch-DMRS-ScramblingID";
         case 9: return "rb-Offset-r16";
         case 10: return "tci-PresentDCI-1-2-r16";
         case 11: return "coresetPoolIndex-r16";
         case 12: return "controlResourceSetId-v1610";
         case 13: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean tci_StatesPDCCH_ToAddListPresent = buffer.decodeBit ("tci_StatesPDCCH_ToAddListPresent");
      boolean tci_StatesPDCCH_ToReleaseListPresent = buffer.decodeBit ("tci_StatesPDCCH_ToReleaseListPresent");
      boolean tci_PresentInDCIPresent = buffer.decodeBit ("tci_PresentInDCIPresent");
      boolean pdcch_DMRS_ScramblingIDPresent = buffer.decodeBit ("pdcch_DMRS_ScramblingIDPresent");

      // decode controlResourceSetId

      buffer.getContext().eventDispatcher.startElement("controlResourceSetId", -1);

      controlResourceSetId = new ControlResourceSetId();
      controlResourceSetId.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("controlResourceSetId", -1);

      // decode frequencyDomainResources

      buffer.getContext().eventDispatcher.startElement("frequencyDomainResources", -1);

      frequencyDomainResources = new Asn1BitString();
      frequencyDomainResources.decode (buffer, 45, 45);

      buffer.invokeCharacters(frequencyDomainResources.toString());
      buffer.getContext().eventDispatcher.endElement("frequencyDomainResources", -1);

      // decode duration

      buffer.getContext().eventDispatcher.startElement("duration", -1);

      duration = new Asn1Integer();
      duration.decode (buffer, 1, 3);

      buffer.invokeCharacters(duration.toString());
      buffer.getContext().eventDispatcher.endElement("duration", -1);

      // decode cce_REG_MappingType

      buffer.getContext().eventDispatcher.startElement("cce_REG_MappingType", -1);

      cce_REG_MappingType = new ControlResourceSet_cce_REG_MappingType();
      cce_REG_MappingType.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("cce_REG_MappingType", -1);

      // decode precoderGranularity

      buffer.getContext().eventDispatcher.startElement("precoderGranularity", -1);

      {
         int tval = ControlResourceSet_precoderGranularity.decodeEnumValue (buffer);
         precoderGranularity = ControlResourceSet_precoderGranularity.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("precoderGranularity", -1);

      // decode tci_StatesPDCCH_ToAddList

      if (tci_StatesPDCCH_ToAddListPresent) {
         buffer.getContext().eventDispatcher.startElement("tci_StatesPDCCH_ToAddList", -1);

         tci_StatesPDCCH_ToAddList = new ControlResourceSet_tci_StatesPDCCH_ToAddList();
         tci_StatesPDCCH_ToAddList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("tci_StatesPDCCH_ToAddList", -1);
      }
      else {
         tci_StatesPDCCH_ToAddList = null;
      }

      // decode tci_StatesPDCCH_ToReleaseList

      if (tci_StatesPDCCH_ToReleaseListPresent) {
         buffer.getContext().eventDispatcher.startElement("tci_StatesPDCCH_ToReleaseList", -1);

         tci_StatesPDCCH_ToReleaseList = new ControlResourceSet_tci_StatesPDCCH_ToReleaseList();
         tci_StatesPDCCH_ToReleaseList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("tci_StatesPDCCH_ToReleaseList", -1);
      }
      else {
         tci_StatesPDCCH_ToReleaseList = null;
      }

      // decode tci_PresentInDCI

      if (tci_PresentInDCIPresent) {
         buffer.getContext().eventDispatcher.startElement("tci_PresentInDCI", -1);

         int tval = ControlResourceSet_tci_PresentInDCI.decodeEnumValue (buffer);
         tci_PresentInDCI = ControlResourceSet_tci_PresentInDCI.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("tci_PresentInDCI", -1);
      }
      else {
         tci_PresentInDCI = null;
      }

      // decode pdcch_DMRS_ScramblingID

      if (pdcch_DMRS_ScramblingIDPresent) {
         buffer.getContext().eventDispatcher.startElement("pdcch_DMRS_ScramblingID", -1);

         pdcch_DMRS_ScramblingID = new Asn1Integer();
         pdcch_DMRS_ScramblingID.decode (buffer, 0, 65535);

         buffer.invokeCharacters(pdcch_DMRS_ScramblingID.toString());
         buffer.getContext().eventDispatcher.endElement("pdcch_DMRS_ScramblingID", -1);
      }
      else {
         pdcch_DMRS_ScramblingID = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean rb_Offset_r16Present = buffer.decodeBit ("rb_Offset_r16Present");

            boolean tci_PresentDCI_1_2_r16Present = buffer.decodeBit ("tci_PresentDCI_1_2_r16Present");

            boolean coresetPoolIndex_r16Present = buffer.decodeBit ("coresetPoolIndex_r16Present");

            boolean controlResourceSetId_v1610Present = buffer.decodeBit ("controlResourceSetId_v1610Present");

            // decode rb_Offset_r16

            if (rb_Offset_r16Present) {
               buffer.getContext().eventDispatcher.startElement("rb_Offset_r16", -1);

               rb_Offset_r16 = new Asn1Integer();
               rb_Offset_r16.decode (buffer, 0, 5);

               buffer.invokeCharacters(rb_Offset_r16.toString());
               buffer.getContext().eventDispatcher.endElement("rb_Offset_r16", -1);
            }
            else {
               rb_Offset_r16 = null;
            }

            // decode tci_PresentDCI_1_2_r16

            if (tci_PresentDCI_1_2_r16Present) {
               buffer.getContext().eventDispatcher.startElement("tci_PresentDCI_1_2_r16", -1);

               tci_PresentDCI_1_2_r16 = new Asn1Integer();
               tci_PresentDCI_1_2_r16.decode (buffer, 1, 3);

               buffer.invokeCharacters(tci_PresentDCI_1_2_r16.toString());
               buffer.getContext().eventDispatcher.endElement("tci_PresentDCI_1_2_r16", -1);
            }
            else {
               tci_PresentDCI_1_2_r16 = null;
            }

            // decode coresetPoolIndex_r16

            if (coresetPoolIndex_r16Present) {
               buffer.getContext().eventDispatcher.startElement("coresetPoolIndex_r16", -1);

               coresetPoolIndex_r16 = new Asn1Integer();
               coresetPoolIndex_r16.decode (buffer, 0, 1);

               buffer.invokeCharacters(coresetPoolIndex_r16.toString());
               buffer.getContext().eventDispatcher.endElement("coresetPoolIndex_r16", -1);
            }
            else {
               coresetPoolIndex_r16 = null;
            }

            // decode controlResourceSetId_v1610

            if (controlResourceSetId_v1610Present) {
               buffer.getContext().eventDispatcher.startElement("controlResourceSetId_v1610", -1);

               controlResourceSetId_v1610 = new ControlResourceSetId_v1610();
               controlResourceSetId_v1610.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("controlResourceSetId_v1610", -1);
            }
            else {
               controlResourceSetId_v1610 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (mV2ExtPresent ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((tci_StatesPDCCH_ToAddList != null), null);
      buffer.encodeBit ((tci_StatesPDCCH_ToReleaseList != null), null);
      buffer.encodeBit ((tci_PresentInDCI != null), null);
      buffer.encodeBit ((pdcch_DMRS_ScramblingID != null), null);

      // encode controlResourceSetId

      if (controlResourceSetId != null) {
         buffer.getContext().eventDispatcher.startElement("controlResourceSetId", -1);

         controlResourceSetId.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("controlResourceSetId", -1);
      }
      else throw new Asn1MissingRequiredException ("controlResourceSetId");

      // encode frequencyDomainResources

      if (frequencyDomainResources != null) {
         buffer.getContext().eventDispatcher.startElement("frequencyDomainResources", -1);

         frequencyDomainResources.encode (buffer, 45, 45);

         buffer.getContext().eventDispatcher.endElement("frequencyDomainResources", -1);
      }
      else throw new Asn1MissingRequiredException ("frequencyDomainResources");

      // encode duration

      if (duration != null) {
         buffer.getContext().eventDispatcher.startElement("duration", -1);

         duration.encode (buffer, 1, 3);

         buffer.getContext().eventDispatcher.endElement("duration", -1);
      }
      else throw new Asn1MissingRequiredException ("duration");

      // encode cce_REG_MappingType

      if (cce_REG_MappingType != null) {
         buffer.getContext().eventDispatcher.startElement("cce_REG_MappingType", -1);

         cce_REG_MappingType.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("cce_REG_MappingType", -1);
      }
      else throw new Asn1MissingRequiredException ("cce_REG_MappingType");

      // encode precoderGranularity

      if (precoderGranularity != null) {
         buffer.getContext().eventDispatcher.startElement("precoderGranularity", -1);

         precoderGranularity.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("precoderGranularity", -1);
      }
      else throw new Asn1MissingRequiredException ("precoderGranularity");

      // encode tci_StatesPDCCH_ToAddList

      if (tci_StatesPDCCH_ToAddList != null) {
         buffer.getContext().eventDispatcher.startElement("tci_StatesPDCCH_ToAddList", -1);

         tci_StatesPDCCH_ToAddList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("tci_StatesPDCCH_ToAddList", -1);
      }

      // encode tci_StatesPDCCH_ToReleaseList

      if (tci_StatesPDCCH_ToReleaseList != null) {
         buffer.getContext().eventDispatcher.startElement("tci_StatesPDCCH_ToReleaseList", -1);

         tci_StatesPDCCH_ToReleaseList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("tci_StatesPDCCH_ToReleaseList", -1);
      }

      // encode tci_PresentInDCI

      if (tci_PresentInDCI != null) {
         buffer.getContext().eventDispatcher.startElement("tci_PresentInDCI", -1);

         tci_PresentInDCI.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("tci_PresentInDCI", -1);
      }

      // encode pdcch_DMRS_ScramblingID

      if (pdcch_DMRS_ScramblingID != null) {
         buffer.getContext().eventDispatcher.startElement("pdcch_DMRS_ScramblingID", -1);

         pdcch_DMRS_ScramblingID.encode (buffer, 0, 65535);

         buffer.getContext().eventDispatcher.endElement("pdcch_DMRS_ScramblingID", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 1;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit (mV2ExtPresent, null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         if (mV2ExtPresent) {
            buffer.reset();
            buffer.encodeBit ((rb_Offset_r16 != null), "optbit");
            buffer.encodeBit ((tci_PresentDCI_1_2_r16 != null), "optbit");
            buffer.encodeBit ((coresetPoolIndex_r16 != null), "optbit");
            buffer.encodeBit ((controlResourceSetId_v1610 != null), "optbit");
            if (rb_Offset_r16 != null) {
               rb_Offset_r16.encode (buffer, 0, 5);
            }
            if (tci_PresentDCI_1_2_r16 != null) {
               tci_PresentDCI_1_2_r16.encode (buffer, 1, 3);
            }
            if (coresetPoolIndex_r16 != null) {
               coresetPoolIndex_r16.encode (buffer, 0, 1);
            }
            if (controlResourceSetId_v1610 != null) {
               controlResourceSetId_v1610.encode (buffer);
            }
            mainBuffer.encodeOpenType (buffer, null);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (controlResourceSetId != null) controlResourceSetId.print (_sb, "controlResourceSetId", _level+1);
      if (frequencyDomainResources != null) frequencyDomainResources.print (_sb, "frequencyDomainResources", _level+1);
      if (duration != null) duration.print (_sb, "duration", _level+1);
      if (cce_REG_MappingType != null) cce_REG_MappingType.print (_sb, "cce_REG_MappingType", _level+1);
      if (precoderGranularity != null) precoderGranularity.print (_sb, "precoderGranularity", _level+1);
      if (tci_StatesPDCCH_ToAddList != null) tci_StatesPDCCH_ToAddList.print (_sb, "tci_StatesPDCCH_ToAddList", _level+1);
      if (tci_StatesPDCCH_ToReleaseList != null) tci_StatesPDCCH_ToReleaseList.print (_sb, "tci_StatesPDCCH_ToReleaseList", _level+1);
      if (tci_PresentInDCI != null) tci_PresentInDCI.print (_sb, "tci_PresentInDCI", _level+1);
      if (pdcch_DMRS_ScramblingID != null) pdcch_DMRS_ScramblingID.print (_sb, "pdcch_DMRS_ScramblingID", _level+1);
      if (rb_Offset_r16 != null) rb_Offset_r16.print (_sb, "rb_Offset_r16", _level+1);
      if (tci_PresentDCI_1_2_r16 != null) tci_PresentDCI_1_2_r16.print (_sb, "tci_PresentDCI_1_2_r16", _level+1);
      if (coresetPoolIndex_r16 != null) coresetPoolIndex_r16.print (_sb, "coresetPoolIndex_r16", _level+1);
      if (controlResourceSetId_v1610 != null) controlResourceSetId_v1610.print (_sb, "controlResourceSetId_v1610", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
