/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MIMO_ParametersPerBand_multiDCI_multiTRP_Parameters_r16 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public Asn1Integer overlapPDSCHsFullyFreqTime_r16;  // optional
   public MIMO_ParametersPerBand_multiDCI_multiTRP_Parameters_r16_overlapPDSCHsInTimePartiallyFreq_r16 overlapPDSCHsInTimePartiallyFreq_r16 = null;  // optional
   public MIMO_ParametersPerBand_multiDCI_multiTRP_Parameters_r16_outOfOrderOperationDL_r16 outOfOrderOperationDL_r16;  // optional
   public MIMO_ParametersPerBand_multiDCI_multiTRP_Parameters_r16_outOfOrderOperationUL_r16 outOfOrderOperationUL_r16 = null;  // optional
   public MIMO_ParametersPerBand_multiDCI_multiTRP_Parameters_r16_separateCRS_RateMatching_r16 separateCRS_RateMatching_r16 = null;  // optional
   public MIMO_ParametersPerBand_multiDCI_multiTRP_Parameters_r16_defaultQCL_PerCORESETPoolIndex_r16 defaultQCL_PerCORESETPoolIndex_r16 = null;  // optional
   public MIMO_ParametersPerBand_multiDCI_multiTRP_Parameters_r16_maxNumberActivatedTCI_States_r16 maxNumberActivatedTCI_States_r16;  // optional

   public MIMO_ParametersPerBand_multiDCI_multiTRP_Parameters_r16 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MIMO_ParametersPerBand_multiDCI_multiTRP_Parameters_r16 (
      Asn1Integer overlapPDSCHsFullyFreqTime_r16_,
      MIMO_ParametersPerBand_multiDCI_multiTRP_Parameters_r16_overlapPDSCHsInTimePartiallyFreq_r16 overlapPDSCHsInTimePartiallyFreq_r16_,
      MIMO_ParametersPerBand_multiDCI_multiTRP_Parameters_r16_outOfOrderOperationDL_r16 outOfOrderOperationDL_r16_,
      MIMO_ParametersPerBand_multiDCI_multiTRP_Parameters_r16_outOfOrderOperationUL_r16 outOfOrderOperationUL_r16_,
      MIMO_ParametersPerBand_multiDCI_multiTRP_Parameters_r16_separateCRS_RateMatching_r16 separateCRS_RateMatching_r16_,
      MIMO_ParametersPerBand_multiDCI_multiTRP_Parameters_r16_defaultQCL_PerCORESETPoolIndex_r16 defaultQCL_PerCORESETPoolIndex_r16_,
      MIMO_ParametersPerBand_multiDCI_multiTRP_Parameters_r16_maxNumberActivatedTCI_States_r16 maxNumberActivatedTCI_States_r16_
   ) {
      super();
      overlapPDSCHsFullyFreqTime_r16 = overlapPDSCHsFullyFreqTime_r16_;
      overlapPDSCHsInTimePartiallyFreq_r16 = overlapPDSCHsInTimePartiallyFreq_r16_;
      outOfOrderOperationDL_r16 = outOfOrderOperationDL_r16_;
      outOfOrderOperationUL_r16 = outOfOrderOperationUL_r16_;
      separateCRS_RateMatching_r16 = separateCRS_RateMatching_r16_;
      defaultQCL_PerCORESETPoolIndex_r16 = defaultQCL_PerCORESETPoolIndex_r16_;
      maxNumberActivatedTCI_States_r16 = maxNumberActivatedTCI_States_r16_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public MIMO_ParametersPerBand_multiDCI_multiTRP_Parameters_r16 (long overlapPDSCHsFullyFreqTime_r16_,
      MIMO_ParametersPerBand_multiDCI_multiTRP_Parameters_r16_overlapPDSCHsInTimePartiallyFreq_r16 overlapPDSCHsInTimePartiallyFreq_r16_,
      MIMO_ParametersPerBand_multiDCI_multiTRP_Parameters_r16_outOfOrderOperationDL_r16 outOfOrderOperationDL_r16_,
      MIMO_ParametersPerBand_multiDCI_multiTRP_Parameters_r16_outOfOrderOperationUL_r16 outOfOrderOperationUL_r16_,
      MIMO_ParametersPerBand_multiDCI_multiTRP_Parameters_r16_separateCRS_RateMatching_r16 separateCRS_RateMatching_r16_,
      MIMO_ParametersPerBand_multiDCI_multiTRP_Parameters_r16_defaultQCL_PerCORESETPoolIndex_r16 defaultQCL_PerCORESETPoolIndex_r16_,
      MIMO_ParametersPerBand_multiDCI_multiTRP_Parameters_r16_maxNumberActivatedTCI_States_r16 maxNumberActivatedTCI_States_r16_
   ) {
      super();
      overlapPDSCHsFullyFreqTime_r16 = new Asn1Integer (overlapPDSCHsFullyFreqTime_r16_);
      overlapPDSCHsInTimePartiallyFreq_r16 = overlapPDSCHsInTimePartiallyFreq_r16_;
      outOfOrderOperationDL_r16 = outOfOrderOperationDL_r16_;
      outOfOrderOperationUL_r16 = outOfOrderOperationUL_r16_;
      separateCRS_RateMatching_r16 = separateCRS_RateMatching_r16_;
      defaultQCL_PerCORESETPoolIndex_r16 = defaultQCL_PerCORESETPoolIndex_r16_;
      maxNumberActivatedTCI_States_r16 = maxNumberActivatedTCI_States_r16_;
   }

   public void init () {
      overlapPDSCHsFullyFreqTime_r16 = null;
      overlapPDSCHsInTimePartiallyFreq_r16 = null;
      outOfOrderOperationDL_r16 = null;
      outOfOrderOperationUL_r16 = null;
      separateCRS_RateMatching_r16 = null;
      defaultQCL_PerCORESETPoolIndex_r16 = null;
      maxNumberActivatedTCI_States_r16 = null;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return overlapPDSCHsFullyFreqTime_r16;
         case 1: return overlapPDSCHsInTimePartiallyFreq_r16;
         case 2: return outOfOrderOperationDL_r16;
         case 3: return outOfOrderOperationUL_r16;
         case 4: return separateCRS_RateMatching_r16;
         case 5: return defaultQCL_PerCORESETPoolIndex_r16;
         case 6: return maxNumberActivatedTCI_States_r16;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "overlapPDSCHsFullyFreqTime-r16";
         case 1: return "overlapPDSCHsInTimePartiallyFreq-r16";
         case 2: return "outOfOrderOperationDL-r16";
         case 3: return "outOfOrderOperationUL-r16";
         case 4: return "separateCRS-RateMatching-r16";
         case 5: return "defaultQCL-PerCORESETPoolIndex-r16";
         case 6: return "maxNumberActivatedTCI-States-r16";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean overlapPDSCHsFullyFreqTime_r16Present = buffer.decodeBit ("overlapPDSCHsFullyFreqTime_r16Present");
      boolean overlapPDSCHsInTimePartiallyFreq_r16Present = buffer.decodeBit ("overlapPDSCHsInTimePartiallyFreq_r16Present");
      boolean outOfOrderOperationDL_r16Present = buffer.decodeBit ("outOfOrderOperationDL_r16Present");
      boolean outOfOrderOperationUL_r16Present = buffer.decodeBit ("outOfOrderOperationUL_r16Present");
      boolean separateCRS_RateMatching_r16Present = buffer.decodeBit ("separateCRS_RateMatching_r16Present");
      boolean defaultQCL_PerCORESETPoolIndex_r16Present = buffer.decodeBit ("defaultQCL_PerCORESETPoolIndex_r16Present");
      boolean maxNumberActivatedTCI_States_r16Present = buffer.decodeBit ("maxNumberActivatedTCI_States_r16Present");

      // decode overlapPDSCHsFullyFreqTime_r16

      if (overlapPDSCHsFullyFreqTime_r16Present) {
         buffer.getContext().eventDispatcher.startElement("overlapPDSCHsFullyFreqTime_r16", -1);

         overlapPDSCHsFullyFreqTime_r16 = new Asn1Integer();
         overlapPDSCHsFullyFreqTime_r16.decode (buffer, 1, 2);

         buffer.invokeCharacters(overlapPDSCHsFullyFreqTime_r16.toString());
         buffer.getContext().eventDispatcher.endElement("overlapPDSCHsFullyFreqTime_r16", -1);
      }
      else {
         overlapPDSCHsFullyFreqTime_r16 = null;
      }

      // decode overlapPDSCHsInTimePartiallyFreq_r16

      if (overlapPDSCHsInTimePartiallyFreq_r16Present) {
         buffer.getContext().eventDispatcher.startElement("overlapPDSCHsInTimePartiallyFreq_r16", -1);

         int tval = MIMO_ParametersPerBand_multiDCI_multiTRP_Parameters_r16_overlapPDSCHsInTimePartiallyFreq_r16.decodeEnumValue (buffer);
         overlapPDSCHsInTimePartiallyFreq_r16 = MIMO_ParametersPerBand_multiDCI_multiTRP_Parameters_r16_overlapPDSCHsInTimePartiallyFreq_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("overlapPDSCHsInTimePartiallyFreq_r16", -1);
      }
      else {
         overlapPDSCHsInTimePartiallyFreq_r16 = null;
      }

      // decode outOfOrderOperationDL_r16

      if (outOfOrderOperationDL_r16Present) {
         buffer.getContext().eventDispatcher.startElement("outOfOrderOperationDL_r16", -1);

         outOfOrderOperationDL_r16 = new MIMO_ParametersPerBand_multiDCI_multiTRP_Parameters_r16_outOfOrderOperationDL_r16();
         outOfOrderOperationDL_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("outOfOrderOperationDL_r16", -1);
      }
      else {
         outOfOrderOperationDL_r16 = null;
      }

      // decode outOfOrderOperationUL_r16

      if (outOfOrderOperationUL_r16Present) {
         buffer.getContext().eventDispatcher.startElement("outOfOrderOperationUL_r16", -1);

         int tval = MIMO_ParametersPerBand_multiDCI_multiTRP_Parameters_r16_outOfOrderOperationUL_r16.decodeEnumValue (buffer);
         outOfOrderOperationUL_r16 = MIMO_ParametersPerBand_multiDCI_multiTRP_Parameters_r16_outOfOrderOperationUL_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("outOfOrderOperationUL_r16", -1);
      }
      else {
         outOfOrderOperationUL_r16 = null;
      }

      // decode separateCRS_RateMatching_r16

      if (separateCRS_RateMatching_r16Present) {
         buffer.getContext().eventDispatcher.startElement("separateCRS_RateMatching_r16", -1);

         int tval = MIMO_ParametersPerBand_multiDCI_multiTRP_Parameters_r16_separateCRS_RateMatching_r16.decodeEnumValue (buffer);
         separateCRS_RateMatching_r16 = MIMO_ParametersPerBand_multiDCI_multiTRP_Parameters_r16_separateCRS_RateMatching_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("separateCRS_RateMatching_r16", -1);
      }
      else {
         separateCRS_RateMatching_r16 = null;
      }

      // decode defaultQCL_PerCORESETPoolIndex_r16

      if (defaultQCL_PerCORESETPoolIndex_r16Present) {
         buffer.getContext().eventDispatcher.startElement("defaultQCL_PerCORESETPoolIndex_r16", -1);

         int tval = MIMO_ParametersPerBand_multiDCI_multiTRP_Parameters_r16_defaultQCL_PerCORESETPoolIndex_r16.decodeEnumValue (buffer);
         defaultQCL_PerCORESETPoolIndex_r16 = MIMO_ParametersPerBand_multiDCI_multiTRP_Parameters_r16_defaultQCL_PerCORESETPoolIndex_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("defaultQCL_PerCORESETPoolIndex_r16", -1);
      }
      else {
         defaultQCL_PerCORESETPoolIndex_r16 = null;
      }

      // decode maxNumberActivatedTCI_States_r16

      if (maxNumberActivatedTCI_States_r16Present) {
         buffer.getContext().eventDispatcher.startElement("maxNumberActivatedTCI_States_r16", -1);

         maxNumberActivatedTCI_States_r16 = new MIMO_ParametersPerBand_multiDCI_multiTRP_Parameters_r16_maxNumberActivatedTCI_States_r16();
         maxNumberActivatedTCI_States_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("maxNumberActivatedTCI_States_r16", -1);
      }
      else {
         maxNumberActivatedTCI_States_r16 = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((overlapPDSCHsFullyFreqTime_r16 != null), null);
      buffer.encodeBit ((overlapPDSCHsInTimePartiallyFreq_r16 != null), null);
      buffer.encodeBit ((outOfOrderOperationDL_r16 != null), null);
      buffer.encodeBit ((outOfOrderOperationUL_r16 != null), null);
      buffer.encodeBit ((separateCRS_RateMatching_r16 != null), null);
      buffer.encodeBit ((defaultQCL_PerCORESETPoolIndex_r16 != null), null);
      buffer.encodeBit ((maxNumberActivatedTCI_States_r16 != null), null);

      // encode overlapPDSCHsFullyFreqTime_r16

      if (overlapPDSCHsFullyFreqTime_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("overlapPDSCHsFullyFreqTime_r16", -1);

         overlapPDSCHsFullyFreqTime_r16.encode (buffer, 1, 2);

         buffer.getContext().eventDispatcher.endElement("overlapPDSCHsFullyFreqTime_r16", -1);
      }

      // encode overlapPDSCHsInTimePartiallyFreq_r16

      if (overlapPDSCHsInTimePartiallyFreq_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("overlapPDSCHsInTimePartiallyFreq_r16", -1);

         overlapPDSCHsInTimePartiallyFreq_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("overlapPDSCHsInTimePartiallyFreq_r16", -1);
      }

      // encode outOfOrderOperationDL_r16

      if (outOfOrderOperationDL_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("outOfOrderOperationDL_r16", -1);

         outOfOrderOperationDL_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("outOfOrderOperationDL_r16", -1);
      }

      // encode outOfOrderOperationUL_r16

      if (outOfOrderOperationUL_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("outOfOrderOperationUL_r16", -1);

         outOfOrderOperationUL_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("outOfOrderOperationUL_r16", -1);
      }

      // encode separateCRS_RateMatching_r16

      if (separateCRS_RateMatching_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("separateCRS_RateMatching_r16", -1);

         separateCRS_RateMatching_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("separateCRS_RateMatching_r16", -1);
      }

      // encode defaultQCL_PerCORESETPoolIndex_r16

      if (defaultQCL_PerCORESETPoolIndex_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("defaultQCL_PerCORESETPoolIndex_r16", -1);

         defaultQCL_PerCORESETPoolIndex_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("defaultQCL_PerCORESETPoolIndex_r16", -1);
      }

      // encode maxNumberActivatedTCI_States_r16

      if (maxNumberActivatedTCI_States_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("maxNumberActivatedTCI_States_r16", -1);

         maxNumberActivatedTCI_States_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("maxNumberActivatedTCI_States_r16", -1);
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (overlapPDSCHsFullyFreqTime_r16 != null) overlapPDSCHsFullyFreqTime_r16.print (_sb, "overlapPDSCHsFullyFreqTime_r16", _level+1);
      if (overlapPDSCHsInTimePartiallyFreq_r16 != null) overlapPDSCHsInTimePartiallyFreq_r16.print (_sb, "overlapPDSCHsInTimePartiallyFreq_r16", _level+1);
      if (outOfOrderOperationDL_r16 != null) outOfOrderOperationDL_r16.print (_sb, "outOfOrderOperationDL_r16", _level+1);
      if (outOfOrderOperationUL_r16 != null) outOfOrderOperationUL_r16.print (_sb, "outOfOrderOperationUL_r16", _level+1);
      if (separateCRS_RateMatching_r16 != null) separateCRS_RateMatching_r16.print (_sb, "separateCRS_RateMatching_r16", _level+1);
      if (defaultQCL_PerCORESETPoolIndex_r16 != null) defaultQCL_PerCORESETPoolIndex_r16.print (_sb, "defaultQCL_PerCORESETPoolIndex_r16", _level+1);
      if (maxNumberActivatedTCI_States_r16 != null) maxNumberActivatedTCI_States_r16.print (_sb, "maxNumberActivatedTCI_States_r16", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
