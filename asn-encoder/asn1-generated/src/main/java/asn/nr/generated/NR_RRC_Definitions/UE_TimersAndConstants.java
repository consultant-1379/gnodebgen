/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class UE_TimersAndConstants extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "UE-TimersAndConstants";
   }

   public UE_TimersAndConstants_t300 t300 = null;
   public UE_TimersAndConstants_t301 t301 = null;
   public UE_TimersAndConstants_t310 t310 = null;
   public UE_TimersAndConstants_n310 n310 = null;
   public UE_TimersAndConstants_t311 t311 = null;
   public UE_TimersAndConstants_n311 n311 = null;
   public UE_TimersAndConstants_t319 t319 = null;
   public Asn1OpenExt extElem1;

   public UE_TimersAndConstants () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public UE_TimersAndConstants (
      UE_TimersAndConstants_t300 t300_,
      UE_TimersAndConstants_t301 t301_,
      UE_TimersAndConstants_t310 t310_,
      UE_TimersAndConstants_n310 n310_,
      UE_TimersAndConstants_t311 t311_,
      UE_TimersAndConstants_n311 n311_,
      UE_TimersAndConstants_t319 t319_
   ) {
      super();
      t300 = t300_;
      t301 = t301_;
      t310 = t310_;
      n310 = n310_;
      t311 = t311_;
      n311 = n311_;
      t319 = t319_;
   }

   public void init () {
      t300 = null;
      t301 = null;
      t310 = null;
      n310 = null;
      t311 = null;
      n311 = null;
      t319 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 8; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return t300;
         case 1: return t301;
         case 2: return t310;
         case 3: return n310;
         case 4: return t311;
         case 5: return n311;
         case 6: return t319;
         case 7: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "t300";
         case 1: return "t301";
         case 2: return "t310";
         case 3: return "n310";
         case 4: return "t311";
         case 5: return "n311";
         case 6: return "t319";
         case 7: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // decode t300

      buffer.getContext().eventDispatcher.startElement("t300", -1);

      {
         int tval = UE_TimersAndConstants_t300.decodeEnumValue (buffer);
         t300 = UE_TimersAndConstants_t300.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("t300", -1);

      // decode t301

      buffer.getContext().eventDispatcher.startElement("t301", -1);

      {
         int tval = UE_TimersAndConstants_t301.decodeEnumValue (buffer);
         t301 = UE_TimersAndConstants_t301.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("t301", -1);

      // decode t310

      buffer.getContext().eventDispatcher.startElement("t310", -1);

      {
         int tval = UE_TimersAndConstants_t310.decodeEnumValue (buffer);
         t310 = UE_TimersAndConstants_t310.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("t310", -1);

      // decode n310

      buffer.getContext().eventDispatcher.startElement("n310", -1);

      {
         int tval = UE_TimersAndConstants_n310.decodeEnumValue (buffer);
         n310 = UE_TimersAndConstants_n310.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("n310", -1);

      // decode t311

      buffer.getContext().eventDispatcher.startElement("t311", -1);

      {
         int tval = UE_TimersAndConstants_t311.decodeEnumValue (buffer);
         t311 = UE_TimersAndConstants_t311.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("t311", -1);

      // decode n311

      buffer.getContext().eventDispatcher.startElement("n311", -1);

      {
         int tval = UE_TimersAndConstants_n311.decodeEnumValue (buffer);
         n311 = UE_TimersAndConstants_n311.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("n311", -1);

      // decode t319

      buffer.getContext().eventDispatcher.startElement("t319", -1);

      {
         int tval = UE_TimersAndConstants_t319.decodeEnumValue (buffer);
         t319 = UE_TimersAndConstants_t319.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("t319", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode t300

      if (t300 != null) {
         buffer.getContext().eventDispatcher.startElement("t300", -1);

         t300.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("t300", -1);
      }
      else throw new Asn1MissingRequiredException ("t300");

      // encode t301

      if (t301 != null) {
         buffer.getContext().eventDispatcher.startElement("t301", -1);

         t301.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("t301", -1);
      }
      else throw new Asn1MissingRequiredException ("t301");

      // encode t310

      if (t310 != null) {
         buffer.getContext().eventDispatcher.startElement("t310", -1);

         t310.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("t310", -1);
      }
      else throw new Asn1MissingRequiredException ("t310");

      // encode n310

      if (n310 != null) {
         buffer.getContext().eventDispatcher.startElement("n310", -1);

         n310.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("n310", -1);
      }
      else throw new Asn1MissingRequiredException ("n310");

      // encode t311

      if (t311 != null) {
         buffer.getContext().eventDispatcher.startElement("t311", -1);

         t311.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("t311", -1);
      }
      else throw new Asn1MissingRequiredException ("t311");

      // encode n311

      if (n311 != null) {
         buffer.getContext().eventDispatcher.startElement("n311", -1);

         n311.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("n311", -1);
      }
      else throw new Asn1MissingRequiredException ("n311");

      // encode t319

      if (t319 != null) {
         buffer.getContext().eventDispatcher.startElement("t319", -1);

         t319.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("t319", -1);
      }
      else throw new Asn1MissingRequiredException ("t319");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (t300 != null) t300.print (_sb, "t300", _level+1);
      if (t301 != null) t301.print (_sb, "t301", _level+1);
      if (t310 != null) t310.print (_sb, "t310", _level+1);
      if (n310 != null) n310.print (_sb, "n310", _level+1);
      if (t311 != null) t311.print (_sb, "t311", _level+1);
      if (n311 != null) n311.print (_sb, "n311", _level+1);
      if (t319 != null) t319.print (_sb, "t319", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
