/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SRS_Resource_freqHopping extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public Asn1Integer c_SRS;
   public Asn1Integer b_SRS;
   public Asn1Integer b_hop;

   public SRS_Resource_freqHopping () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SRS_Resource_freqHopping (
      Asn1Integer c_SRS_,
      Asn1Integer b_SRS_,
      Asn1Integer b_hop_
   ) {
      super();
      c_SRS = c_SRS_;
      b_SRS = b_SRS_;
      b_hop = b_hop_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SRS_Resource_freqHopping (long c_SRS_,
      long b_SRS_,
      long b_hop_
   ) {
      super();
      c_SRS = new Asn1Integer (c_SRS_);
      b_SRS = new Asn1Integer (b_SRS_);
      b_hop = new Asn1Integer (b_hop_);
   }

   public void init () {
      c_SRS = null;
      b_SRS = null;
      b_hop = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return c_SRS;
         case 1: return b_SRS;
         case 2: return b_hop;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "c-SRS";
         case 1: return "b-SRS";
         case 2: return "b-hop";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode c_SRS

      buffer.getContext().eventDispatcher.startElement("c_SRS", -1);

      c_SRS = new Asn1Integer();
      c_SRS.decode (buffer, 0, 63);

      buffer.invokeCharacters(c_SRS.toString());
      buffer.getContext().eventDispatcher.endElement("c_SRS", -1);

      // decode b_SRS

      buffer.getContext().eventDispatcher.startElement("b_SRS", -1);

      b_SRS = new Asn1Integer();
      b_SRS.decode (buffer, 0, 3);

      buffer.invokeCharacters(b_SRS.toString());
      buffer.getContext().eventDispatcher.endElement("b_SRS", -1);

      // decode b_hop

      buffer.getContext().eventDispatcher.startElement("b_hop", -1);

      b_hop = new Asn1Integer();
      b_hop.decode (buffer, 0, 3);

      buffer.invokeCharacters(b_hop.toString());
      buffer.getContext().eventDispatcher.endElement("b_hop", -1);

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode c_SRS

      if (c_SRS != null) {
         buffer.getContext().eventDispatcher.startElement("c_SRS", -1);

         c_SRS.encode (buffer, 0, 63);

         buffer.getContext().eventDispatcher.endElement("c_SRS", -1);
      }
      else throw new Asn1MissingRequiredException ("c_SRS");

      // encode b_SRS

      if (b_SRS != null) {
         buffer.getContext().eventDispatcher.startElement("b_SRS", -1);

         b_SRS.encode (buffer, 0, 3);

         buffer.getContext().eventDispatcher.endElement("b_SRS", -1);
      }
      else throw new Asn1MissingRequiredException ("b_SRS");

      // encode b_hop

      if (b_hop != null) {
         buffer.getContext().eventDispatcher.startElement("b_hop", -1);

         b_hop.encode (buffer, 0, 3);

         buffer.getContext().eventDispatcher.endElement("b_hop", -1);
      }
      else throw new Asn1MissingRequiredException ("b_hop");

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (c_SRS != null) c_SRS.print (_sb, "c_SRS", _level+1);
      if (b_SRS != null) b_SRS.print (_sb, "b_SRS", _level+1);
      if (b_hop != null) b_hop.print (_sb, "b_hop", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
