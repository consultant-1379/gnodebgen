/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class EventTriggerConfig_eventId_eventA4 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public MeasTriggerQuantity a4_Threshold;
   public Asn1Boolean reportOnLeave;
   public Hysteresis hysteresis;
   public TimeToTrigger timeToTrigger = null;
   public Asn1Boolean useWhiteCellList;

   public EventTriggerConfig_eventId_eventA4 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public EventTriggerConfig_eventId_eventA4 (
      MeasTriggerQuantity a4_Threshold_,
      Asn1Boolean reportOnLeave_,
      Hysteresis hysteresis_,
      TimeToTrigger timeToTrigger_,
      Asn1Boolean useWhiteCellList_
   ) {
      super();
      a4_Threshold = a4_Threshold_;
      reportOnLeave = reportOnLeave_;
      hysteresis = hysteresis_;
      timeToTrigger = timeToTrigger_;
      useWhiteCellList = useWhiteCellList_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public EventTriggerConfig_eventId_eventA4 (MeasTriggerQuantity a4_Threshold_,
      boolean reportOnLeave_,
      long hysteresis_,
      TimeToTrigger timeToTrigger_,
      boolean useWhiteCellList_
   ) {
      super();
      a4_Threshold = a4_Threshold_;
      reportOnLeave = new Asn1Boolean (reportOnLeave_);
      hysteresis = new Hysteresis (hysteresis_);
      timeToTrigger = timeToTrigger_;
      useWhiteCellList = new Asn1Boolean (useWhiteCellList_);
   }

   public void init () {
      a4_Threshold = null;
      reportOnLeave = null;
      hysteresis = null;
      timeToTrigger = null;
      useWhiteCellList = null;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return a4_Threshold;
         case 1: return reportOnLeave;
         case 2: return hysteresis;
         case 3: return timeToTrigger;
         case 4: return useWhiteCellList;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "a4-Threshold";
         case 1: return "reportOnLeave";
         case 2: return "hysteresis";
         case 3: return "timeToTrigger";
         case 4: return "useWhiteCellList";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode a4_Threshold

      buffer.getContext().eventDispatcher.startElement("a4_Threshold", -1);

      a4_Threshold = new MeasTriggerQuantity();
      a4_Threshold.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("a4_Threshold", -1);

      // decode reportOnLeave

      buffer.getContext().eventDispatcher.startElement("reportOnLeave", -1);

      reportOnLeave = new Asn1Boolean();
      reportOnLeave.decode (buffer);

      buffer.invokeCharacters(reportOnLeave.toString());
      buffer.getContext().eventDispatcher.endElement("reportOnLeave", -1);

      // decode hysteresis

      buffer.getContext().eventDispatcher.startElement("hysteresis", -1);

      hysteresis = new Hysteresis();
      hysteresis.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("hysteresis", -1);

      // decode timeToTrigger

      buffer.getContext().eventDispatcher.startElement("timeToTrigger", -1);

      {
         int tval = TimeToTrigger.decodeEnumValue (buffer);
         timeToTrigger = TimeToTrigger.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("timeToTrigger", -1);

      // decode useWhiteCellList

      buffer.getContext().eventDispatcher.startElement("useWhiteCellList", -1);

      useWhiteCellList = new Asn1Boolean();
      useWhiteCellList.decode (buffer);

      buffer.invokeCharacters(useWhiteCellList.toString());
      buffer.getContext().eventDispatcher.endElement("useWhiteCellList", -1);

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode a4_Threshold

      if (a4_Threshold != null) {
         buffer.getContext().eventDispatcher.startElement("a4_Threshold", -1);

         a4_Threshold.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("a4_Threshold", -1);
      }
      else throw new Asn1MissingRequiredException ("a4_Threshold");

      // encode reportOnLeave

      if (reportOnLeave != null) {
         buffer.getContext().eventDispatcher.startElement("reportOnLeave", -1);

         reportOnLeave.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("reportOnLeave", -1);
      }
      else throw new Asn1MissingRequiredException ("reportOnLeave");

      // encode hysteresis

      if (hysteresis != null) {
         buffer.getContext().eventDispatcher.startElement("hysteresis", -1);

         hysteresis.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("hysteresis", -1);
      }
      else throw new Asn1MissingRequiredException ("hysteresis");

      // encode timeToTrigger

      if (timeToTrigger != null) {
         buffer.getContext().eventDispatcher.startElement("timeToTrigger", -1);

         timeToTrigger.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("timeToTrigger", -1);
      }
      else throw new Asn1MissingRequiredException ("timeToTrigger");

      // encode useWhiteCellList

      if (useWhiteCellList != null) {
         buffer.getContext().eventDispatcher.startElement("useWhiteCellList", -1);

         useWhiteCellList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("useWhiteCellList", -1);
      }
      else throw new Asn1MissingRequiredException ("useWhiteCellList");

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (a4_Threshold != null) a4_Threshold.print (_sb, "a4_Threshold", _level+1);
      if (reportOnLeave != null) reportOnLeave.print (_sb, "reportOnLeave", _level+1);
      if (hysteresis != null) hysteresis.print (_sb, "hysteresis", _level+1);
      if (timeToTrigger != null) timeToTrigger.print (_sb, "timeToTrigger", _level+1);
      if (useWhiteCellList != null) useWhiteCellList.print (_sb, "useWhiteCellList", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
