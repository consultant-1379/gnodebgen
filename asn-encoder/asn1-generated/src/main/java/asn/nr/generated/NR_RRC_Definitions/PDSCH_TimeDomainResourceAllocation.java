/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class PDSCH_TimeDomainResourceAllocation extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "PDSCH-TimeDomainResourceAllocation";
   }

   public Asn1Integer k0;  // optional
   public PDSCH_TimeDomainResourceAllocation_mappingType mappingType = null;
   public Asn1Integer startSymbolAndLength;

   public PDSCH_TimeDomainResourceAllocation () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public PDSCH_TimeDomainResourceAllocation (
      Asn1Integer k0_,
      PDSCH_TimeDomainResourceAllocation_mappingType mappingType_,
      Asn1Integer startSymbolAndLength_
   ) {
      super();
      k0 = k0_;
      mappingType = mappingType_;
      startSymbolAndLength = startSymbolAndLength_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public PDSCH_TimeDomainResourceAllocation (
      PDSCH_TimeDomainResourceAllocation_mappingType mappingType_,
      Asn1Integer startSymbolAndLength_
   ) {
      super();
      mappingType = mappingType_;
      startSymbolAndLength = startSymbolAndLength_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public PDSCH_TimeDomainResourceAllocation (long k0_,
      PDSCH_TimeDomainResourceAllocation_mappingType mappingType_,
      long startSymbolAndLength_
   ) {
      super();
      k0 = new Asn1Integer (k0_);
      mappingType = mappingType_;
      startSymbolAndLength = new Asn1Integer (startSymbolAndLength_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public PDSCH_TimeDomainResourceAllocation (
      PDSCH_TimeDomainResourceAllocation_mappingType mappingType_,
      long startSymbolAndLength_
   ) {
      super();
      mappingType = mappingType_;
      startSymbolAndLength = new Asn1Integer (startSymbolAndLength_);
   }

   public void init () {
      k0 = null;
      mappingType = null;
      startSymbolAndLength = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return k0;
         case 1: return mappingType;
         case 2: return startSymbolAndLength;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "k0";
         case 1: return "mappingType";
         case 2: return "startSymbolAndLength";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean k0Present = buffer.decodeBit ("k0Present");

      // decode k0

      if (k0Present) {
         buffer.getContext().eventDispatcher.startElement("k0", -1);

         k0 = new Asn1Integer();
         k0.decode (buffer, 0, 32);

         buffer.invokeCharacters(k0.toString());
         buffer.getContext().eventDispatcher.endElement("k0", -1);
      }
      else {
         k0 = null;
      }

      // decode mappingType

      buffer.getContext().eventDispatcher.startElement("mappingType", -1);

      {
         int tval = PDSCH_TimeDomainResourceAllocation_mappingType.decodeEnumValue (buffer);
         mappingType = PDSCH_TimeDomainResourceAllocation_mappingType.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("mappingType", -1);

      // decode startSymbolAndLength

      buffer.getContext().eventDispatcher.startElement("startSymbolAndLength", -1);

      startSymbolAndLength = new Asn1Integer();
      startSymbolAndLength.decode (buffer, 0, 127);

      buffer.invokeCharacters(startSymbolAndLength.toString());
      buffer.getContext().eventDispatcher.endElement("startSymbolAndLength", -1);

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((k0 != null), null);

      // encode k0

      if (k0 != null) {
         buffer.getContext().eventDispatcher.startElement("k0", -1);

         k0.encode (buffer, 0, 32);

         buffer.getContext().eventDispatcher.endElement("k0", -1);
      }

      // encode mappingType

      if (mappingType != null) {
         buffer.getContext().eventDispatcher.startElement("mappingType", -1);

         mappingType.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("mappingType", -1);
      }
      else throw new Asn1MissingRequiredException ("mappingType");

      // encode startSymbolAndLength

      if (startSymbolAndLength != null) {
         buffer.getContext().eventDispatcher.startElement("startSymbolAndLength", -1);

         startSymbolAndLength.encode (buffer, 0, 127);

         buffer.getContext().eventDispatcher.endElement("startSymbolAndLength", -1);
      }
      else throw new Asn1MissingRequiredException ("startSymbolAndLength");

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (k0 != null) k0.print (_sb, "k0", _level+1);
      if (mappingType != null) mappingType.print (_sb, "mappingType", _level+1);
      if (startSymbolAndLength != null) startSymbolAndLength.print (_sb, "startSymbolAndLength", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
