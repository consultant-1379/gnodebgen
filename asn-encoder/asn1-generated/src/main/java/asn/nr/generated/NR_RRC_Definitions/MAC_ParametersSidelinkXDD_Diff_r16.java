/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MAC_ParametersSidelinkXDD_Diff_r16 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "MAC-ParametersSidelinkXDD-Diff-r16";
   }

   public MAC_ParametersSidelinkXDD_Diff_r16_multipleSR_ConfigurationsSidelink_r16 multipleSR_ConfigurationsSidelink_r16 = null;  // optional
   public MAC_ParametersSidelinkXDD_Diff_r16_logicalChannelSR_DelayTimerSidelink_r16 logicalChannelSR_DelayTimerSidelink_r16 = null;  // optional
   public Asn1OpenExt extElem1;

   public MAC_ParametersSidelinkXDD_Diff_r16 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MAC_ParametersSidelinkXDD_Diff_r16 (
      MAC_ParametersSidelinkXDD_Diff_r16_multipleSR_ConfigurationsSidelink_r16 multipleSR_ConfigurationsSidelink_r16_,
      MAC_ParametersSidelinkXDD_Diff_r16_logicalChannelSR_DelayTimerSidelink_r16 logicalChannelSR_DelayTimerSidelink_r16_
   ) {
      super();
      multipleSR_ConfigurationsSidelink_r16 = multipleSR_ConfigurationsSidelink_r16_;
      logicalChannelSR_DelayTimerSidelink_r16 = logicalChannelSR_DelayTimerSidelink_r16_;
   }

   public void init () {
      multipleSR_ConfigurationsSidelink_r16 = null;
      logicalChannelSR_DelayTimerSidelink_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return multipleSR_ConfigurationsSidelink_r16;
         case 1: return logicalChannelSR_DelayTimerSidelink_r16;
         case 2: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "multipleSR-ConfigurationsSidelink-r16";
         case 1: return "logicalChannelSR-DelayTimerSidelink-r16";
         case 2: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean multipleSR_ConfigurationsSidelink_r16Present = buffer.decodeBit ("multipleSR_ConfigurationsSidelink_r16Present");
      boolean logicalChannelSR_DelayTimerSidelink_r16Present = buffer.decodeBit ("logicalChannelSR_DelayTimerSidelink_r16Present");

      // decode multipleSR_ConfigurationsSidelink_r16

      if (multipleSR_ConfigurationsSidelink_r16Present) {
         buffer.getContext().eventDispatcher.startElement("multipleSR_ConfigurationsSidelink_r16", -1);

         int tval = MAC_ParametersSidelinkXDD_Diff_r16_multipleSR_ConfigurationsSidelink_r16.decodeEnumValue (buffer);
         multipleSR_ConfigurationsSidelink_r16 = MAC_ParametersSidelinkXDD_Diff_r16_multipleSR_ConfigurationsSidelink_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("multipleSR_ConfigurationsSidelink_r16", -1);
      }
      else {
         multipleSR_ConfigurationsSidelink_r16 = null;
      }

      // decode logicalChannelSR_DelayTimerSidelink_r16

      if (logicalChannelSR_DelayTimerSidelink_r16Present) {
         buffer.getContext().eventDispatcher.startElement("logicalChannelSR_DelayTimerSidelink_r16", -1);

         int tval = MAC_ParametersSidelinkXDD_Diff_r16_logicalChannelSR_DelayTimerSidelink_r16.decodeEnumValue (buffer);
         logicalChannelSR_DelayTimerSidelink_r16 = MAC_ParametersSidelinkXDD_Diff_r16_logicalChannelSR_DelayTimerSidelink_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("logicalChannelSR_DelayTimerSidelink_r16", -1);
      }
      else {
         logicalChannelSR_DelayTimerSidelink_r16 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((multipleSR_ConfigurationsSidelink_r16 != null), null);
      buffer.encodeBit ((logicalChannelSR_DelayTimerSidelink_r16 != null), null);

      // encode multipleSR_ConfigurationsSidelink_r16

      if (multipleSR_ConfigurationsSidelink_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("multipleSR_ConfigurationsSidelink_r16", -1);

         multipleSR_ConfigurationsSidelink_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("multipleSR_ConfigurationsSidelink_r16", -1);
      }

      // encode logicalChannelSR_DelayTimerSidelink_r16

      if (logicalChannelSR_DelayTimerSidelink_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("logicalChannelSR_DelayTimerSidelink_r16", -1);

         logicalChannelSR_DelayTimerSidelink_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("logicalChannelSR_DelayTimerSidelink_r16", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (multipleSR_ConfigurationsSidelink_r16 != null) multipleSR_ConfigurationsSidelink_r16.print (_sb, "multipleSR_ConfigurationsSidelink_r16", _level+1);
      if (logicalChannelSR_DelayTimerSidelink_r16 != null) logicalChannelSR_DelayTimerSidelink_r16.print (_sb, "logicalChannelSR_DelayTimerSidelink_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
