/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class UL_DataSplitThreshold extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "UL-DataSplitThreshold";
   }

   // Integer constants for switch-case
   public static final int _B0 = 0;
   public static final int _B100 = 1;
   public static final int _B200 = 2;
   public static final int _B400 = 3;
   public static final int _B800 = 4;
   public static final int _B1600 = 5;
   public static final int _B3200 = 6;
   public static final int _B6400 = 7;
   public static final int _B12800 = 8;
   public static final int _B25600 = 9;
   public static final int _B51200 = 10;
   public static final int _B102400 = 11;
   public static final int _B204800 = 12;
   public static final int _B409600 = 13;
   public static final int _B819200 = 14;
   public static final int _B1228800 = 15;
   public static final int _B1638400 = 16;
   public static final int _B2457600 = 17;
   public static final int _B3276800 = 18;
   public static final int _B4096000 = 19;
   public static final int _B4915200 = 20;
   public static final int _B5734400 = 21;
   public static final int _B6553600 = 22;
   public static final int _INFINITY = 23;
   public static final int _SPARE8 = 24;
   public static final int _SPARE7 = 25;
   public static final int _SPARE6 = 26;
   public static final int _SPARE5 = 27;
   public static final int _SPARE4 = 28;
   public static final int _SPARE3 = 29;
   public static final int _SPARE2 = 30;
   public static final int _SPARE1 = 31;

   // Singleton instances of UL_DataSplitThreshold
   protected static final UL_DataSplitThreshold _b0 = new UL_DataSplitThreshold(0);
   protected static final UL_DataSplitThreshold _b100 = new UL_DataSplitThreshold(1);
   protected static final UL_DataSplitThreshold _b200 = new UL_DataSplitThreshold(2);
   protected static final UL_DataSplitThreshold _b400 = new UL_DataSplitThreshold(3);
   protected static final UL_DataSplitThreshold _b800 = new UL_DataSplitThreshold(4);
   protected static final UL_DataSplitThreshold _b1600 = new UL_DataSplitThreshold(5);
   protected static final UL_DataSplitThreshold _b3200 = new UL_DataSplitThreshold(6);
   protected static final UL_DataSplitThreshold _b6400 = new UL_DataSplitThreshold(7);
   protected static final UL_DataSplitThreshold _b12800 = new UL_DataSplitThreshold(8);
   protected static final UL_DataSplitThreshold _b25600 = new UL_DataSplitThreshold(9);
   protected static final UL_DataSplitThreshold _b51200 = new UL_DataSplitThreshold(10);
   protected static final UL_DataSplitThreshold _b102400 = new UL_DataSplitThreshold(11);
   protected static final UL_DataSplitThreshold _b204800 = new UL_DataSplitThreshold(12);
   protected static final UL_DataSplitThreshold _b409600 = new UL_DataSplitThreshold(13);
   protected static final UL_DataSplitThreshold _b819200 = new UL_DataSplitThreshold(14);
   protected static final UL_DataSplitThreshold _b1228800 = new UL_DataSplitThreshold(15);
   protected static final UL_DataSplitThreshold _b1638400 = new UL_DataSplitThreshold(16);
   protected static final UL_DataSplitThreshold _b2457600 = new UL_DataSplitThreshold(17);
   protected static final UL_DataSplitThreshold _b3276800 = new UL_DataSplitThreshold(18);
   protected static final UL_DataSplitThreshold _b4096000 = new UL_DataSplitThreshold(19);
   protected static final UL_DataSplitThreshold _b4915200 = new UL_DataSplitThreshold(20);
   protected static final UL_DataSplitThreshold _b5734400 = new UL_DataSplitThreshold(21);
   protected static final UL_DataSplitThreshold _b6553600 = new UL_DataSplitThreshold(22);
   protected static final UL_DataSplitThreshold _infinity = new UL_DataSplitThreshold(23);
   protected static final UL_DataSplitThreshold _spare8 = new UL_DataSplitThreshold(24);
   protected static final UL_DataSplitThreshold _spare7 = new UL_DataSplitThreshold(25);
   protected static final UL_DataSplitThreshold _spare6 = new UL_DataSplitThreshold(26);
   protected static final UL_DataSplitThreshold _spare5 = new UL_DataSplitThreshold(27);
   protected static final UL_DataSplitThreshold _spare4 = new UL_DataSplitThreshold(28);
   protected static final UL_DataSplitThreshold _spare3 = new UL_DataSplitThreshold(29);
   protected static final UL_DataSplitThreshold _spare2 = new UL_DataSplitThreshold(30);
   protected static final UL_DataSplitThreshold _spare1 = new UL_DataSplitThreshold(31);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    *   7
    *   8
    *   9
    *   10
    *   11
    *   12
    *   13
    *   14
    *   15
    *   16
    *   17
    *   18
    *   19
    *   20
    *   21
    *   22
    *   23
    *   24
    *   25
    *   26
    *   27
    *   28
    *   29
    *   30
    *   31
    */
   protected UL_DataSplitThreshold (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for b0.
    */
   public static UL_DataSplitThreshold b0() {
      return _b0;
   }

   /**
    * Singleton accessor method for b100.
    */
   public static UL_DataSplitThreshold b100() {
      return _b100;
   }

   /**
    * Singleton accessor method for b200.
    */
   public static UL_DataSplitThreshold b200() {
      return _b200;
   }

   /**
    * Singleton accessor method for b400.
    */
   public static UL_DataSplitThreshold b400() {
      return _b400;
   }

   /**
    * Singleton accessor method for b800.
    */
   public static UL_DataSplitThreshold b800() {
      return _b800;
   }

   /**
    * Singleton accessor method for b1600.
    */
   public static UL_DataSplitThreshold b1600() {
      return _b1600;
   }

   /**
    * Singleton accessor method for b3200.
    */
   public static UL_DataSplitThreshold b3200() {
      return _b3200;
   }

   /**
    * Singleton accessor method for b6400.
    */
   public static UL_DataSplitThreshold b6400() {
      return _b6400;
   }

   /**
    * Singleton accessor method for b12800.
    */
   public static UL_DataSplitThreshold b12800() {
      return _b12800;
   }

   /**
    * Singleton accessor method for b25600.
    */
   public static UL_DataSplitThreshold b25600() {
      return _b25600;
   }

   /**
    * Singleton accessor method for b51200.
    */
   public static UL_DataSplitThreshold b51200() {
      return _b51200;
   }

   /**
    * Singleton accessor method for b102400.
    */
   public static UL_DataSplitThreshold b102400() {
      return _b102400;
   }

   /**
    * Singleton accessor method for b204800.
    */
   public static UL_DataSplitThreshold b204800() {
      return _b204800;
   }

   /**
    * Singleton accessor method for b409600.
    */
   public static UL_DataSplitThreshold b409600() {
      return _b409600;
   }

   /**
    * Singleton accessor method for b819200.
    */
   public static UL_DataSplitThreshold b819200() {
      return _b819200;
   }

   /**
    * Singleton accessor method for b1228800.
    */
   public static UL_DataSplitThreshold b1228800() {
      return _b1228800;
   }

   /**
    * Singleton accessor method for b1638400.
    */
   public static UL_DataSplitThreshold b1638400() {
      return _b1638400;
   }

   /**
    * Singleton accessor method for b2457600.
    */
   public static UL_DataSplitThreshold b2457600() {
      return _b2457600;
   }

   /**
    * Singleton accessor method for b3276800.
    */
   public static UL_DataSplitThreshold b3276800() {
      return _b3276800;
   }

   /**
    * Singleton accessor method for b4096000.
    */
   public static UL_DataSplitThreshold b4096000() {
      return _b4096000;
   }

   /**
    * Singleton accessor method for b4915200.
    */
   public static UL_DataSplitThreshold b4915200() {
      return _b4915200;
   }

   /**
    * Singleton accessor method for b5734400.
    */
   public static UL_DataSplitThreshold b5734400() {
      return _b5734400;
   }

   /**
    * Singleton accessor method for b6553600.
    */
   public static UL_DataSplitThreshold b6553600() {
      return _b6553600;
   }

   /**
    * Singleton accessor method for infinity.
    */
   public static UL_DataSplitThreshold infinity() {
      return _infinity;
   }

   /**
    * Singleton accessor method for spare8.
    */
   public static UL_DataSplitThreshold spare8() {
      return _spare8;
   }

   /**
    * Singleton accessor method for spare7.
    */
   public static UL_DataSplitThreshold spare7() {
      return _spare7;
   }

   /**
    * Singleton accessor method for spare6.
    */
   public static UL_DataSplitThreshold spare6() {
      return _spare6;
   }

   /**
    * Singleton accessor method for spare5.
    */
   public static UL_DataSplitThreshold spare5() {
      return _spare5;
   }

   /**
    * Singleton accessor method for spare4.
    */
   public static UL_DataSplitThreshold spare4() {
      return _spare4;
   }

   /**
    * Singleton accessor method for spare3.
    */
   public static UL_DataSplitThreshold spare3() {
      return _spare3;
   }

   /**
    * Singleton accessor method for spare2.
    */
   public static UL_DataSplitThreshold spare2() {
      return _spare2;
   }

   /**
    * Singleton accessor method for spare1.
    */
   public static UL_DataSplitThreshold spare1() {
      return _spare1;
   }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return UL_DataSplitThreshold.valueOf( UL_DataSplitThreshold.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static UL_DataSplitThreshold valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 0: return b0();
         case 1: return b100();
         case 2: return b200();
         case 3: return b400();
         case 4: return b800();
         case 5: return b1600();
         case 6: return b3200();
         case 7: return b6400();
         case 8: return b12800();
         case 9: return b25600();
         case 10: return b51200();
         case 11: return b102400();
         case 12: return b204800();
         case 13: return b409600();
         case 14: return b819200();
         case 15: return b1228800();
         case 16: return b1638400();
         case 17: return b2457600();
         case 18: return b3276800();
         case 19: return b4096000();
         case 20: return b4915200();
         case 21: return b5734400();
         case 22: return b6553600();
         case 23: return infinity();
         case 24: return spare8();
         case 25: return spare7();
         case 26: return spare6();
         case 27: return spare5();
         case 28: return spare4();
         case 29: return spare3();
         case 30: return spare2();
         case 31: return spare1();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      ui = (int) buffer.decodeConsWholeNumber (32);

      switch (ui) {
         case 0: ret =  0; break;
         case 1: ret =  1; break;
         case 2: ret =  2; break;
         case 3: ret =  3; break;
         case 4: ret =  4; break;
         case 5: ret =  5; break;
         case 6: ret =  6; break;
         case 7: ret =  7; break;
         case 8: ret =  8; break;
         case 9: ret =  9; break;
         case 10: ret =  10; break;
         case 11: ret =  11; break;
         case 12: ret =  12; break;
         case 13: ret =  13; break;
         case 14: ret =  14; break;
         case 15: ret =  15; break;
         case 16: ret =  16; break;
         case 17: ret =  17; break;
         case 18: ret =  18; break;
         case 19: ret =  19; break;
         case 20: ret =  20; break;
         case 21: ret =  21; break;
         case 22: ret =  22; break;
         case 23: ret =  23; break;
         case 24: ret =  24; break;
         case 25: ret =  25; break;
         case 26: ret =  26; break;
         case 27: ret =  27; break;
         case 28: ret =  28; break;
         case 29: ret =  29; break;
         case 30: ret =  30; break;
         case 31: ret =  31; break;
         default: throw new Asn1InvalidEnumException (ui);
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (UL_DataSplitThreshold.valueOf(ret).toString());

      return ret;
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      switch ((int)value) {
         case 0: ui = 0; /* b0 */break;
         case 1: ui = 1; /* b100 */break;
         case 2: ui = 2; /* b200 */break;
         case 3: ui = 3; /* b400 */break;
         case 4: ui = 4; /* b800 */break;
         case 5: ui = 5; /* b1600 */break;
         case 6: ui = 6; /* b3200 */break;
         case 7: ui = 7; /* b6400 */break;
         case 8: ui = 8; /* b12800 */break;
         case 9: ui = 9; /* b25600 */break;
         case 10: ui = 10; /* b51200 */break;
         case 11: ui = 11; /* b102400 */break;
         case 12: ui = 12; /* b204800 */break;
         case 13: ui = 13; /* b409600 */break;
         case 14: ui = 14; /* b819200 */break;
         case 15: ui = 15; /* b1228800 */break;
         case 16: ui = 16; /* b1638400 */break;
         case 17: ui = 17; /* b2457600 */break;
         case 18: ui = 18; /* b3276800 */break;
         case 19: ui = 19; /* b4096000 */break;
         case 20: ui = 20; /* b4915200 */break;
         case 21: ui = 21; /* b5734400 */break;
         case 22: ui = 22; /* b6553600 */break;
         case 23: ui = 23; /* infinity */break;
         case 24: ui = 24; /* spare8 */break;
         case 25: ui = 25; /* spare7 */break;
         case 26: ui = 26; /* spare6 */break;
         case 27: ui = 27; /* spare5 */break;
         case 28: ui = 28; /* spare4 */break;
         case 29: ui = 29; /* spare3 */break;
         case 30: ui = 30; /* spare2 */break;
         case 31: ui = 31; /* spare1 */break;
         default:
            throw new Asn1InvalidEnumException (value);
      }

      buffer.encodeConsWholeNumber (ui, 32);
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("b0");
         case 1: return ("b100");
         case 2: return ("b200");
         case 3: return ("b400");
         case 4: return ("b800");
         case 5: return ("b1600");
         case 6: return ("b3200");
         case 7: return ("b6400");
         case 8: return ("b12800");
         case 9: return ("b25600");
         case 10: return ("b51200");
         case 11: return ("b102400");
         case 12: return ("b204800");
         case 13: return ("b409600");
         case 14: return ("b819200");
         case 15: return ("b1228800");
         case 16: return ("b1638400");
         case 17: return ("b2457600");
         case 18: return ("b3276800");
         case 19: return ("b4096000");
         case 20: return ("b4915200");
         case 21: return ("b5734400");
         case 22: return ("b6553600");
         case 23: return ("infinity");
         case 24: return ("spare8");
         case 25: return ("spare7");
         case 26: return ("spare6");
         case 27: return ("spare5");
         case 28: return ("spare4");
         case 29: return ("spare3");
         case 30: return ("spare2");
         case 31: return ("spare1");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
