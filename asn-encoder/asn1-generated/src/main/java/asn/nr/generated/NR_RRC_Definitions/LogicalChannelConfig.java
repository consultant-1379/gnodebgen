/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class LogicalChannelConfig extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "LogicalChannelConfig";
   }

   public LogicalChannelConfig_ul_SpecificParameters ul_SpecificParameters;  // optional
   public boolean mV2ExtPresent;
   public Asn1Integer channelAccessPriority_r16;  // optional
   public LogicalChannelConfig_bitRateMultiplier_r16 bitRateMultiplier_r16 = null;  // optional
   public Asn1OpenExt extElem1;

   public LogicalChannelConfig () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public LogicalChannelConfig (
      LogicalChannelConfig_ul_SpecificParameters ul_SpecificParameters_,
      Asn1Integer channelAccessPriority_r16_,
      LogicalChannelConfig_bitRateMultiplier_r16 bitRateMultiplier_r16_
   ) {
      super();
      ul_SpecificParameters = ul_SpecificParameters_;
      channelAccessPriority_r16 = channelAccessPriority_r16_;
      bitRateMultiplier_r16 = bitRateMultiplier_r16_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public LogicalChannelConfig (LogicalChannelConfig_ul_SpecificParameters ul_SpecificParameters_,
      long channelAccessPriority_r16_,
      LogicalChannelConfig_bitRateMultiplier_r16 bitRateMultiplier_r16_
   ) {
      super();
      ul_SpecificParameters = ul_SpecificParameters_;
      channelAccessPriority_r16 = new Asn1Integer (channelAccessPriority_r16_);
      bitRateMultiplier_r16 = bitRateMultiplier_r16_;
   }

   public void init () {
      ul_SpecificParameters = null;
      channelAccessPriority_r16 = null;
      bitRateMultiplier_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return ul_SpecificParameters;
         case 1: return channelAccessPriority_r16;
         case 2: return bitRateMultiplier_r16;
         case 3: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "ul-SpecificParameters";
         case 1: return "channelAccessPriority-r16";
         case 2: return "bitRateMultiplier-r16";
         case 3: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean ul_SpecificParametersPresent = buffer.decodeBit ("ul_SpecificParametersPresent");

      // decode ul_SpecificParameters

      if (ul_SpecificParametersPresent) {
         buffer.getContext().eventDispatcher.startElement("ul_SpecificParameters", -1);

         ul_SpecificParameters = new LogicalChannelConfig_ul_SpecificParameters();
         ul_SpecificParameters.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ul_SpecificParameters", -1);
      }
      else {
         ul_SpecificParameters = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean channelAccessPriority_r16Present = buffer.decodeBit ("channelAccessPriority_r16Present");

            boolean bitRateMultiplier_r16Present = buffer.decodeBit ("bitRateMultiplier_r16Present");

            // decode channelAccessPriority_r16

            if (channelAccessPriority_r16Present) {
               buffer.getContext().eventDispatcher.startElement("channelAccessPriority_r16", -1);

               channelAccessPriority_r16 = new Asn1Integer();
               channelAccessPriority_r16.decode (buffer, 1, 4);

               buffer.invokeCharacters(channelAccessPriority_r16.toString());
               buffer.getContext().eventDispatcher.endElement("channelAccessPriority_r16", -1);
            }
            else {
               channelAccessPriority_r16 = null;
            }

            // decode bitRateMultiplier_r16

            if (bitRateMultiplier_r16Present) {
               buffer.getContext().eventDispatcher.startElement("bitRateMultiplier_r16", -1);

               int tval = LogicalChannelConfig_bitRateMultiplier_r16.decodeEnumValue (buffer);
               bitRateMultiplier_r16 = LogicalChannelConfig_bitRateMultiplier_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("bitRateMultiplier_r16", -1);
            }
            else {
               bitRateMultiplier_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (mV2ExtPresent ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((ul_SpecificParameters != null), null);

      // encode ul_SpecificParameters

      if (ul_SpecificParameters != null) {
         buffer.getContext().eventDispatcher.startElement("ul_SpecificParameters", -1);

         ul_SpecificParameters.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ul_SpecificParameters", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 1;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit (mV2ExtPresent, null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         if (mV2ExtPresent) {
            buffer.reset();
            buffer.encodeBit ((channelAccessPriority_r16 != null), "optbit");
            buffer.encodeBit ((bitRateMultiplier_r16 != null), "optbit");
            if (channelAccessPriority_r16 != null) {
               channelAccessPriority_r16.encode (buffer, 1, 4);
            }
            if (bitRateMultiplier_r16 != null) {
               bitRateMultiplier_r16.encode (buffer);
            }
            mainBuffer.encodeOpenType (buffer, null);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (ul_SpecificParameters != null) ul_SpecificParameters.print (_sb, "ul_SpecificParameters", _level+1);
      if (channelAccessPriority_r16 != null) channelAccessPriority_r16.print (_sb, "channelAccessPriority_r16", _level+1);
      if (bitRateMultiplier_r16 != null) bitRateMultiplier_r16.print (_sb, "bitRateMultiplier_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
