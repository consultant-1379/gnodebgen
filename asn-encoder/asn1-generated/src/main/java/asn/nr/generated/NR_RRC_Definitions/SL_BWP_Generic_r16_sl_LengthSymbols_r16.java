/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SL_BWP_Generic_r16_sl_LengthSymbols_r16 extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ENUMERATED";
   }

   // Integer constants for switch-case
   public static final int _SYM7 = 0;
   public static final int _SYM8 = 1;
   public static final int _SYM9 = 2;
   public static final int _SYM10 = 3;
   public static final int _SYM11 = 4;
   public static final int _SYM12 = 5;
   public static final int _SYM13 = 6;
   public static final int _SYM14 = 7;

   // Singleton instances of SL_BWP_Generic_r16_sl_LengthSymbols_r16
   protected static final SL_BWP_Generic_r16_sl_LengthSymbols_r16 _sym7 = new SL_BWP_Generic_r16_sl_LengthSymbols_r16(0);
   protected static final SL_BWP_Generic_r16_sl_LengthSymbols_r16 _sym8 = new SL_BWP_Generic_r16_sl_LengthSymbols_r16(1);
   protected static final SL_BWP_Generic_r16_sl_LengthSymbols_r16 _sym9 = new SL_BWP_Generic_r16_sl_LengthSymbols_r16(2);
   protected static final SL_BWP_Generic_r16_sl_LengthSymbols_r16 _sym10 = new SL_BWP_Generic_r16_sl_LengthSymbols_r16(3);
   protected static final SL_BWP_Generic_r16_sl_LengthSymbols_r16 _sym11 = new SL_BWP_Generic_r16_sl_LengthSymbols_r16(4);
   protected static final SL_BWP_Generic_r16_sl_LengthSymbols_r16 _sym12 = new SL_BWP_Generic_r16_sl_LengthSymbols_r16(5);
   protected static final SL_BWP_Generic_r16_sl_LengthSymbols_r16 _sym13 = new SL_BWP_Generic_r16_sl_LengthSymbols_r16(6);
   protected static final SL_BWP_Generic_r16_sl_LengthSymbols_r16 _sym14 = new SL_BWP_Generic_r16_sl_LengthSymbols_r16(7);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    *   7
    */
   protected SL_BWP_Generic_r16_sl_LengthSymbols_r16 (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for sym7.
    */
   public static SL_BWP_Generic_r16_sl_LengthSymbols_r16 sym7() {
      return _sym7;
   }

   /**
    * Singleton accessor method for sym8.
    */
   public static SL_BWP_Generic_r16_sl_LengthSymbols_r16 sym8() {
      return _sym8;
   }

   /**
    * Singleton accessor method for sym9.
    */
   public static SL_BWP_Generic_r16_sl_LengthSymbols_r16 sym9() {
      return _sym9;
   }

   /**
    * Singleton accessor method for sym10.
    */
   public static SL_BWP_Generic_r16_sl_LengthSymbols_r16 sym10() {
      return _sym10;
   }

   /**
    * Singleton accessor method for sym11.
    */
   public static SL_BWP_Generic_r16_sl_LengthSymbols_r16 sym11() {
      return _sym11;
   }

   /**
    * Singleton accessor method for sym12.
    */
   public static SL_BWP_Generic_r16_sl_LengthSymbols_r16 sym12() {
      return _sym12;
   }

   /**
    * Singleton accessor method for sym13.
    */
   public static SL_BWP_Generic_r16_sl_LengthSymbols_r16 sym13() {
      return _sym13;
   }

   /**
    * Singleton accessor method for sym14.
    */
   public static SL_BWP_Generic_r16_sl_LengthSymbols_r16 sym14() {
      return _sym14;
   }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return SL_BWP_Generic_r16_sl_LengthSymbols_r16.valueOf( SL_BWP_Generic_r16_sl_LengthSymbols_r16.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static SL_BWP_Generic_r16_sl_LengthSymbols_r16 valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 0: return sym7();
         case 1: return sym8();
         case 2: return sym9();
         case 3: return sym10();
         case 4: return sym11();
         case 5: return sym12();
         case 6: return sym13();
         case 7: return sym14();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      ui = (int) buffer.decodeConsWholeNumber (8);

      switch (ui) {
         case 0: ret =  0; break;
         case 1: ret =  1; break;
         case 2: ret =  2; break;
         case 3: ret =  3; break;
         case 4: ret =  4; break;
         case 5: ret =  5; break;
         case 6: ret =  6; break;
         case 7: ret =  7; break;
         default: throw new Asn1InvalidEnumException (ui);
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (SL_BWP_Generic_r16_sl_LengthSymbols_r16.valueOf(ret).toString());

      return ret;
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      switch ((int)value) {
         case 0: ui = 0; /* sym7 */break;
         case 1: ui = 1; /* sym8 */break;
         case 2: ui = 2; /* sym9 */break;
         case 3: ui = 3; /* sym10 */break;
         case 4: ui = 4; /* sym11 */break;
         case 5: ui = 5; /* sym12 */break;
         case 6: ui = 6; /* sym13 */break;
         case 7: ui = 7; /* sym14 */break;
         default:
            throw new Asn1InvalidEnumException (value);
      }

      buffer.encodeConsWholeNumber (ui, 8);
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("sym7");
         case 1: return ("sym8");
         case 2: return ("sym9");
         case 3: return ("sym10");
         case 4: return ("sym11");
         case 5: return ("sym12");
         case 6: return ("sym13");
         case 7: return ("sym14");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
