/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SIB1_cellSelectionInfo extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public Q_RxLevMin q_RxLevMin;
   public Asn1Integer q_RxLevMinOffset;  // optional
   public Q_RxLevMin q_RxLevMinSUL;  // optional
   public Q_QualMin q_QualMin;  // optional
   public Asn1Integer q_QualMinOffset;  // optional

   public SIB1_cellSelectionInfo () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SIB1_cellSelectionInfo (
      Q_RxLevMin q_RxLevMin_,
      Asn1Integer q_RxLevMinOffset_,
      Q_RxLevMin q_RxLevMinSUL_,
      Q_QualMin q_QualMin_,
      Asn1Integer q_QualMinOffset_
   ) {
      super();
      q_RxLevMin = q_RxLevMin_;
      q_RxLevMinOffset = q_RxLevMinOffset_;
      q_RxLevMinSUL = q_RxLevMinSUL_;
      q_QualMin = q_QualMin_;
      q_QualMinOffset = q_QualMinOffset_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SIB1_cellSelectionInfo (
      Q_RxLevMin q_RxLevMin_
   ) {
      super();
      q_RxLevMin = q_RxLevMin_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SIB1_cellSelectionInfo (long q_RxLevMin_,
      long q_RxLevMinOffset_,
      long q_RxLevMinSUL_,
      long q_QualMin_,
      long q_QualMinOffset_
   ) {
      super();
      q_RxLevMin = new Q_RxLevMin (q_RxLevMin_);
      q_RxLevMinOffset = new Asn1Integer (q_RxLevMinOffset_);
      q_RxLevMinSUL = new Q_RxLevMin (q_RxLevMinSUL_);
      q_QualMin = new Q_QualMin (q_QualMin_);
      q_QualMinOffset = new Asn1Integer (q_QualMinOffset_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public SIB1_cellSelectionInfo (
      long q_RxLevMin_
   ) {
      super();
      q_RxLevMin = new Q_RxLevMin (q_RxLevMin_);
   }

   public void init () {
      q_RxLevMin = null;
      q_RxLevMinOffset = null;
      q_RxLevMinSUL = null;
      q_QualMin = null;
      q_QualMinOffset = null;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return q_RxLevMin;
         case 1: return q_RxLevMinOffset;
         case 2: return q_RxLevMinSUL;
         case 3: return q_QualMin;
         case 4: return q_QualMinOffset;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "q-RxLevMin";
         case 1: return "q-RxLevMinOffset";
         case 2: return "q-RxLevMinSUL";
         case 3: return "q-QualMin";
         case 4: return "q-QualMinOffset";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean q_RxLevMinOffsetPresent = buffer.decodeBit ("q_RxLevMinOffsetPresent");
      boolean q_RxLevMinSULPresent = buffer.decodeBit ("q_RxLevMinSULPresent");
      boolean q_QualMinPresent = buffer.decodeBit ("q_QualMinPresent");
      boolean q_QualMinOffsetPresent = buffer.decodeBit ("q_QualMinOffsetPresent");

      // decode q_RxLevMin

      buffer.getContext().eventDispatcher.startElement("q_RxLevMin", -1);

      q_RxLevMin = new Q_RxLevMin();
      q_RxLevMin.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("q_RxLevMin", -1);

      // decode q_RxLevMinOffset

      if (q_RxLevMinOffsetPresent) {
         buffer.getContext().eventDispatcher.startElement("q_RxLevMinOffset", -1);

         q_RxLevMinOffset = new Asn1Integer();
         q_RxLevMinOffset.decode (buffer, 1, 8);

         buffer.invokeCharacters(q_RxLevMinOffset.toString());
         buffer.getContext().eventDispatcher.endElement("q_RxLevMinOffset", -1);
      }
      else {
         q_RxLevMinOffset = null;
      }

      // decode q_RxLevMinSUL

      if (q_RxLevMinSULPresent) {
         buffer.getContext().eventDispatcher.startElement("q_RxLevMinSUL", -1);

         q_RxLevMinSUL = new Q_RxLevMin();
         q_RxLevMinSUL.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("q_RxLevMinSUL", -1);
      }
      else {
         q_RxLevMinSUL = null;
      }

      // decode q_QualMin

      if (q_QualMinPresent) {
         buffer.getContext().eventDispatcher.startElement("q_QualMin", -1);

         q_QualMin = new Q_QualMin();
         q_QualMin.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("q_QualMin", -1);
      }
      else {
         q_QualMin = null;
      }

      // decode q_QualMinOffset

      if (q_QualMinOffsetPresent) {
         buffer.getContext().eventDispatcher.startElement("q_QualMinOffset", -1);

         q_QualMinOffset = new Asn1Integer();
         q_QualMinOffset.decode (buffer, 1, 8);

         buffer.invokeCharacters(q_QualMinOffset.toString());
         buffer.getContext().eventDispatcher.endElement("q_QualMinOffset", -1);
      }
      else {
         q_QualMinOffset = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((q_RxLevMinOffset != null), null);
      buffer.encodeBit ((q_RxLevMinSUL != null), null);
      buffer.encodeBit ((q_QualMin != null), null);
      buffer.encodeBit ((q_QualMinOffset != null), null);

      // encode q_RxLevMin

      if (q_RxLevMin != null) {
         buffer.getContext().eventDispatcher.startElement("q_RxLevMin", -1);

         q_RxLevMin.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("q_RxLevMin", -1);
      }
      else throw new Asn1MissingRequiredException ("q_RxLevMin");

      // encode q_RxLevMinOffset

      if (q_RxLevMinOffset != null) {
         buffer.getContext().eventDispatcher.startElement("q_RxLevMinOffset", -1);

         q_RxLevMinOffset.encode (buffer, 1, 8);

         buffer.getContext().eventDispatcher.endElement("q_RxLevMinOffset", -1);
      }

      // encode q_RxLevMinSUL

      if (q_RxLevMinSUL != null) {
         buffer.getContext().eventDispatcher.startElement("q_RxLevMinSUL", -1);

         q_RxLevMinSUL.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("q_RxLevMinSUL", -1);
      }

      // encode q_QualMin

      if (q_QualMin != null) {
         buffer.getContext().eventDispatcher.startElement("q_QualMin", -1);

         q_QualMin.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("q_QualMin", -1);
      }

      // encode q_QualMinOffset

      if (q_QualMinOffset != null) {
         buffer.getContext().eventDispatcher.startElement("q_QualMinOffset", -1);

         q_QualMinOffset.encode (buffer, 1, 8);

         buffer.getContext().eventDispatcher.endElement("q_QualMinOffset", -1);
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (q_RxLevMin != null) q_RxLevMin.print (_sb, "q_RxLevMin", _level+1);
      if (q_RxLevMinOffset != null) q_RxLevMinOffset.print (_sb, "q_RxLevMinOffset", _level+1);
      if (q_RxLevMinSUL != null) q_RxLevMinSUL.print (_sb, "q_RxLevMinSUL", _level+1);
      if (q_QualMin != null) q_QualMin.print (_sb, "q_QualMin", _level+1);
      if (q_QualMinOffset != null) q_QualMinOffset.print (_sb, "q_QualMinOffset", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
