/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class ConnEstFailReport_r16 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ConnEstFailReport-r16";
   }

   public MeasResultFailedCell_r16 measResultFailedCell_r16;
   public LocationInfo_r16 locationInfo_r16;  // optional
   public ConnEstFailReport_r16_measResultNeighCells_r16 measResultNeighCells_r16;
   public Asn1Integer numberOfConnFail_r16;
   public PerRAInfoList_r16 perRAInfoList_r16;
   public TimeSinceFailure_r16 timeSinceFailure_r16;
   public Asn1OpenExt extElem1;

   public ConnEstFailReport_r16 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ConnEstFailReport_r16 (
      MeasResultFailedCell_r16 measResultFailedCell_r16_,
      LocationInfo_r16 locationInfo_r16_,
      ConnEstFailReport_r16_measResultNeighCells_r16 measResultNeighCells_r16_,
      Asn1Integer numberOfConnFail_r16_,
      PerRAInfoList_r16 perRAInfoList_r16_,
      TimeSinceFailure_r16 timeSinceFailure_r16_
   ) {
      super();
      measResultFailedCell_r16 = measResultFailedCell_r16_;
      locationInfo_r16 = locationInfo_r16_;
      measResultNeighCells_r16 = measResultNeighCells_r16_;
      numberOfConnFail_r16 = numberOfConnFail_r16_;
      perRAInfoList_r16 = perRAInfoList_r16_;
      timeSinceFailure_r16 = timeSinceFailure_r16_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public ConnEstFailReport_r16 (
      MeasResultFailedCell_r16 measResultFailedCell_r16_,
      ConnEstFailReport_r16_measResultNeighCells_r16 measResultNeighCells_r16_,
      Asn1Integer numberOfConnFail_r16_,
      PerRAInfoList_r16 perRAInfoList_r16_,
      TimeSinceFailure_r16 timeSinceFailure_r16_
   ) {
      super();
      measResultFailedCell_r16 = measResultFailedCell_r16_;
      measResultNeighCells_r16 = measResultNeighCells_r16_;
      numberOfConnFail_r16 = numberOfConnFail_r16_;
      perRAInfoList_r16 = perRAInfoList_r16_;
      timeSinceFailure_r16 = timeSinceFailure_r16_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public ConnEstFailReport_r16 (MeasResultFailedCell_r16 measResultFailedCell_r16_,
      LocationInfo_r16 locationInfo_r16_,
      ConnEstFailReport_r16_measResultNeighCells_r16 measResultNeighCells_r16_,
      long numberOfConnFail_r16_,
      PerRAInfoList_r16 perRAInfoList_r16_,
      long timeSinceFailure_r16_
   ) {
      super();
      measResultFailedCell_r16 = measResultFailedCell_r16_;
      locationInfo_r16 = locationInfo_r16_;
      measResultNeighCells_r16 = measResultNeighCells_r16_;
      numberOfConnFail_r16 = new Asn1Integer (numberOfConnFail_r16_);
      perRAInfoList_r16 = perRAInfoList_r16_;
      timeSinceFailure_r16 = new TimeSinceFailure_r16 (timeSinceFailure_r16_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public ConnEstFailReport_r16 (
      MeasResultFailedCell_r16 measResultFailedCell_r16_,
      ConnEstFailReport_r16_measResultNeighCells_r16 measResultNeighCells_r16_,
      long numberOfConnFail_r16_,
      PerRAInfoList_r16 perRAInfoList_r16_,
      long timeSinceFailure_r16_
   ) {
      super();
      measResultFailedCell_r16 = measResultFailedCell_r16_;
      measResultNeighCells_r16 = measResultNeighCells_r16_;
      numberOfConnFail_r16 = new Asn1Integer (numberOfConnFail_r16_);
      perRAInfoList_r16 = perRAInfoList_r16_;
      timeSinceFailure_r16 = new TimeSinceFailure_r16 (timeSinceFailure_r16_);
   }

   public void init () {
      measResultFailedCell_r16 = null;
      locationInfo_r16 = null;
      measResultNeighCells_r16 = null;
      numberOfConnFail_r16 = null;
      perRAInfoList_r16 = null;
      timeSinceFailure_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return measResultFailedCell_r16;
         case 1: return locationInfo_r16;
         case 2: return measResultNeighCells_r16;
         case 3: return numberOfConnFail_r16;
         case 4: return perRAInfoList_r16;
         case 5: return timeSinceFailure_r16;
         case 6: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "measResultFailedCell-r16";
         case 1: return "locationInfo-r16";
         case 2: return "measResultNeighCells-r16";
         case 3: return "numberOfConnFail-r16";
         case 4: return "perRAInfoList-r16";
         case 5: return "timeSinceFailure-r16";
         case 6: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean locationInfo_r16Present = buffer.decodeBit ("locationInfo_r16Present");

      // decode measResultFailedCell_r16

      buffer.getContext().eventDispatcher.startElement("measResultFailedCell_r16", -1);

      measResultFailedCell_r16 = new MeasResultFailedCell_r16();
      measResultFailedCell_r16.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("measResultFailedCell_r16", -1);

      // decode locationInfo_r16

      if (locationInfo_r16Present) {
         buffer.getContext().eventDispatcher.startElement("locationInfo_r16", -1);

         locationInfo_r16 = new LocationInfo_r16();
         locationInfo_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("locationInfo_r16", -1);
      }
      else {
         locationInfo_r16 = null;
      }

      // decode measResultNeighCells_r16

      buffer.getContext().eventDispatcher.startElement("measResultNeighCells_r16", -1);

      measResultNeighCells_r16 = new ConnEstFailReport_r16_measResultNeighCells_r16();
      measResultNeighCells_r16.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("measResultNeighCells_r16", -1);

      // decode numberOfConnFail_r16

      buffer.getContext().eventDispatcher.startElement("numberOfConnFail_r16", -1);

      numberOfConnFail_r16 = new Asn1Integer();
      numberOfConnFail_r16.decode (buffer, 1, 8);

      buffer.invokeCharacters(numberOfConnFail_r16.toString());
      buffer.getContext().eventDispatcher.endElement("numberOfConnFail_r16", -1);

      // decode perRAInfoList_r16

      buffer.getContext().eventDispatcher.startElement("perRAInfoList_r16", -1);

      perRAInfoList_r16 = new PerRAInfoList_r16();
      perRAInfoList_r16.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("perRAInfoList_r16", -1);

      // decode timeSinceFailure_r16

      buffer.getContext().eventDispatcher.startElement("timeSinceFailure_r16", -1);

      timeSinceFailure_r16 = new TimeSinceFailure_r16();
      timeSinceFailure_r16.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("timeSinceFailure_r16", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((locationInfo_r16 != null), null);

      // encode measResultFailedCell_r16

      if (measResultFailedCell_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("measResultFailedCell_r16", -1);

         measResultFailedCell_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("measResultFailedCell_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("measResultFailedCell_r16");

      // encode locationInfo_r16

      if (locationInfo_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("locationInfo_r16", -1);

         locationInfo_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("locationInfo_r16", -1);
      }

      // encode measResultNeighCells_r16

      if (measResultNeighCells_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("measResultNeighCells_r16", -1);

         measResultNeighCells_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("measResultNeighCells_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("measResultNeighCells_r16");

      // encode numberOfConnFail_r16

      if (numberOfConnFail_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("numberOfConnFail_r16", -1);

         numberOfConnFail_r16.encode (buffer, 1, 8);

         buffer.getContext().eventDispatcher.endElement("numberOfConnFail_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("numberOfConnFail_r16");

      // encode perRAInfoList_r16

      if (perRAInfoList_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("perRAInfoList_r16", -1);

         perRAInfoList_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("perRAInfoList_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("perRAInfoList_r16");

      // encode timeSinceFailure_r16

      if (timeSinceFailure_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("timeSinceFailure_r16", -1);

         timeSinceFailure_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("timeSinceFailure_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("timeSinceFailure_r16");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (measResultFailedCell_r16 != null) measResultFailedCell_r16.print (_sb, "measResultFailedCell_r16", _level+1);
      if (locationInfo_r16 != null) locationInfo_r16.print (_sb, "locationInfo_r16", _level+1);
      if (measResultNeighCells_r16 != null) measResultNeighCells_r16.print (_sb, "measResultNeighCells_r16", _level+1);
      if (numberOfConnFail_r16 != null) numberOfConnFail_r16.print (_sb, "numberOfConnFail_r16", _level+1);
      if (perRAInfoList_r16 != null) perRAInfoList_r16.print (_sb, "perRAInfoList_r16", _level+1);
      if (timeSinceFailure_r16 != null) timeSinceFailure_r16.print (_sb, "timeSinceFailure_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
