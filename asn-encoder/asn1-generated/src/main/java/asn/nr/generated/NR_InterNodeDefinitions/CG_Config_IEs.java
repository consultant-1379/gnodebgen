/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_InterNodeDefinitions;

import com.objsys.asn1j.runtime.*;
import asn.nr.generated.NR_RRC_Definitions.RRCReconfiguration;
import asn.nr.generated.NR_RRC_Definitions.RadioBearerConfig;
import asn.nr.generated.NR_RRC_Definitions.MeasResultList2NR;

public class CG_Config_IEs extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_InterNodeDefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CG-Config-IEs";
   }

   public RRCReconfiguration scg_CellGroupConfig;  // optional
   public RadioBearerConfig scg_RB_Config;  // optional
   public ConfigRestrictModReqSCG configRestrictModReq;  // optional
   public DRX_Info drx_InfoSCG;  // optional
   public MeasResultList2NR candidateCellInfoListSN;  // optional
   public MeasConfigSN measConfigSN;  // optional
   public BandCombinationInfoSN selectedBandCombination;  // optional
   public FR_InfoList fr_InfoListSCG;  // optional
   public CandidateServingFreqListNR candidateServingFreqListNR;  // optional
   public CG_Config_v1540_IEs nonCriticalExtension;  // optional

   public CG_Config_IEs () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CG_Config_IEs (
      RRCReconfiguration scg_CellGroupConfig_,
      RadioBearerConfig scg_RB_Config_,
      ConfigRestrictModReqSCG configRestrictModReq_,
      DRX_Info drx_InfoSCG_,
      MeasResultList2NR candidateCellInfoListSN_,
      MeasConfigSN measConfigSN_,
      BandCombinationInfoSN selectedBandCombination_,
      FR_InfoList fr_InfoListSCG_,
      CandidateServingFreqListNR candidateServingFreqListNR_,
      CG_Config_v1540_IEs nonCriticalExtension_
   ) {
      super();
      scg_CellGroupConfig = scg_CellGroupConfig_;
      scg_RB_Config = scg_RB_Config_;
      configRestrictModReq = configRestrictModReq_;
      drx_InfoSCG = drx_InfoSCG_;
      candidateCellInfoListSN = candidateCellInfoListSN_;
      measConfigSN = measConfigSN_;
      selectedBandCombination = selectedBandCombination_;
      fr_InfoListSCG = fr_InfoListSCG_;
      candidateServingFreqListNR = candidateServingFreqListNR_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   public void init () {
      scg_CellGroupConfig = null;
      scg_RB_Config = null;
      configRestrictModReq = null;
      drx_InfoSCG = null;
      candidateCellInfoListSN = null;
      measConfigSN = null;
      selectedBandCombination = null;
      fr_InfoListSCG = null;
      candidateServingFreqListNR = null;
      nonCriticalExtension = null;
   }

   public int getElementCount() { return 10; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return scg_CellGroupConfig;
         case 1: return scg_RB_Config;
         case 2: return configRestrictModReq;
         case 3: return drx_InfoSCG;
         case 4: return candidateCellInfoListSN;
         case 5: return measConfigSN;
         case 6: return selectedBandCombination;
         case 7: return fr_InfoListSCG;
         case 8: return candidateServingFreqListNR;
         case 9: return nonCriticalExtension;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "scg-CellGroupConfig";
         case 1: return "scg-RB-Config";
         case 2: return "configRestrictModReq";
         case 3: return "drx-InfoSCG";
         case 4: return "candidateCellInfoListSN";
         case 5: return "measConfigSN";
         case 6: return "selectedBandCombination";
         case 7: return "fr-InfoListSCG";
         case 8: return "candidateServingFreqListNR";
         case 9: return "nonCriticalExtension";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean scg_CellGroupConfigPresent = buffer.decodeBit ("scg_CellGroupConfigPresent");
      boolean scg_RB_ConfigPresent = buffer.decodeBit ("scg_RB_ConfigPresent");
      boolean configRestrictModReqPresent = buffer.decodeBit ("configRestrictModReqPresent");
      boolean drx_InfoSCGPresent = buffer.decodeBit ("drx_InfoSCGPresent");
      boolean candidateCellInfoListSNPresent = buffer.decodeBit ("candidateCellInfoListSNPresent");
      boolean measConfigSNPresent = buffer.decodeBit ("measConfigSNPresent");
      boolean selectedBandCombinationPresent = buffer.decodeBit ("selectedBandCombinationPresent");
      boolean fr_InfoListSCGPresent = buffer.decodeBit ("fr_InfoListSCGPresent");
      boolean candidateServingFreqListNRPresent = buffer.decodeBit ("candidateServingFreqListNRPresent");
      boolean nonCriticalExtensionPresent = buffer.decodeBit ("nonCriticalExtensionPresent");

      // decode scg_CellGroupConfig

      if (scg_CellGroupConfigPresent) {
         buffer.getContext().eventDispatcher.startElement("scg_CellGroupConfig", -1);

         Asn1OctetString scg_CellGroupConfig_outer = new Asn1OctetString();
         scg_CellGroupConfig_outer.decode (buffer);
         if (scg_CellGroupConfig_outer.value == null) throw new Asn1Exception("contained type's complete encoding is empty");
         Asn1PerDecodeBuffer savedBuffer = buffer;
         buffer = new Asn1PerDecodeBuffer( scg_CellGroupConfig_outer.value, buffer.isAligned());
         buffer.setEventHandlerList( savedBuffer );
         scg_CellGroupConfig = new RRCReconfiguration();
         scg_CellGroupConfig.decode (buffer);
         buffer = savedBuffer;
         buffer.getContext().eventDispatcher.endElement("scg_CellGroupConfig", -1);
      }
      else {
         scg_CellGroupConfig = null;
      }

      // decode scg_RB_Config

      if (scg_RB_ConfigPresent) {
         buffer.getContext().eventDispatcher.startElement("scg_RB_Config", -1);

         Asn1OctetString scg_RB_Config_outer = new Asn1OctetString();
         scg_RB_Config_outer.decode (buffer);
         if (scg_RB_Config_outer.value == null) throw new Asn1Exception("contained type's complete encoding is empty");
         Asn1PerDecodeBuffer savedBuffer = buffer;
         buffer = new Asn1PerDecodeBuffer( scg_RB_Config_outer.value, buffer.isAligned());
         buffer.setEventHandlerList( savedBuffer );
         scg_RB_Config = new RadioBearerConfig();
         scg_RB_Config.decode (buffer);
         buffer = savedBuffer;
         buffer.getContext().eventDispatcher.endElement("scg_RB_Config", -1);
      }
      else {
         scg_RB_Config = null;
      }

      // decode configRestrictModReq

      if (configRestrictModReqPresent) {
         buffer.getContext().eventDispatcher.startElement("configRestrictModReq", -1);

         configRestrictModReq = new ConfigRestrictModReqSCG();
         configRestrictModReq.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("configRestrictModReq", -1);
      }
      else {
         configRestrictModReq = null;
      }

      // decode drx_InfoSCG

      if (drx_InfoSCGPresent) {
         buffer.getContext().eventDispatcher.startElement("drx_InfoSCG", -1);

         drx_InfoSCG = new DRX_Info();
         drx_InfoSCG.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("drx_InfoSCG", -1);
      }
      else {
         drx_InfoSCG = null;
      }

      // decode candidateCellInfoListSN

      if (candidateCellInfoListSNPresent) {
         buffer.getContext().eventDispatcher.startElement("candidateCellInfoListSN", -1);

         Asn1OctetString candidateCellInfoListSN_outer = new Asn1OctetString();
         candidateCellInfoListSN_outer.decode (buffer);
         if (candidateCellInfoListSN_outer.value == null) throw new Asn1Exception("contained type's complete encoding is empty");
         Asn1PerDecodeBuffer savedBuffer = buffer;
         buffer = new Asn1PerDecodeBuffer( candidateCellInfoListSN_outer.value, buffer.isAligned());
         buffer.setEventHandlerList( savedBuffer );
         candidateCellInfoListSN = new MeasResultList2NR();
         candidateCellInfoListSN.decode (buffer);
         buffer = savedBuffer;
         buffer.getContext().eventDispatcher.endElement("candidateCellInfoListSN", -1);
      }
      else {
         candidateCellInfoListSN = null;
      }

      // decode measConfigSN

      if (measConfigSNPresent) {
         buffer.getContext().eventDispatcher.startElement("measConfigSN", -1);

         measConfigSN = new MeasConfigSN();
         measConfigSN.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("measConfigSN", -1);
      }
      else {
         measConfigSN = null;
      }

      // decode selectedBandCombination

      if (selectedBandCombinationPresent) {
         buffer.getContext().eventDispatcher.startElement("selectedBandCombination", -1);

         selectedBandCombination = new BandCombinationInfoSN();
         selectedBandCombination.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("selectedBandCombination", -1);
      }
      else {
         selectedBandCombination = null;
      }

      // decode fr_InfoListSCG

      if (fr_InfoListSCGPresent) {
         buffer.getContext().eventDispatcher.startElement("fr_InfoListSCG", -1);

         fr_InfoListSCG = new FR_InfoList();
         fr_InfoListSCG.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("fr_InfoListSCG", -1);
      }
      else {
         fr_InfoListSCG = null;
      }

      // decode candidateServingFreqListNR

      if (candidateServingFreqListNRPresent) {
         buffer.getContext().eventDispatcher.startElement("candidateServingFreqListNR", -1);

         candidateServingFreqListNR = new CandidateServingFreqListNR();
         candidateServingFreqListNR.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("candidateServingFreqListNR", -1);
      }
      else {
         candidateServingFreqListNR = null;
      }

      // decode nonCriticalExtension

      if (nonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension = new CG_Config_v1540_IEs();
         nonCriticalExtension.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }
      else {
         nonCriticalExtension = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((scg_CellGroupConfig != null), null);
      buffer.encodeBit ((scg_RB_Config != null), null);
      buffer.encodeBit ((configRestrictModReq != null), null);
      buffer.encodeBit ((drx_InfoSCG != null), null);
      buffer.encodeBit ((candidateCellInfoListSN != null), null);
      buffer.encodeBit ((measConfigSN != null), null);
      buffer.encodeBit ((selectedBandCombination != null), null);
      buffer.encodeBit ((fr_InfoListSCG != null), null);
      buffer.encodeBit ((candidateServingFreqListNR != null), null);
      buffer.encodeBit ((nonCriticalExtension != null), null);

      // encode scg_CellGroupConfig

      if (scg_CellGroupConfig != null) {
         buffer.getContext().eventDispatcher.startElement("scg_CellGroupConfig", -1);

         Asn1OctetString scg_CellGroupConfig_outer;
         {
            Asn1PerEncodeBuffer savedBuffer = buffer;
            buffer = new Asn1PerEncodeBuffer(buffer.isAligned());
            scg_CellGroupConfig.encode (buffer);
            scg_CellGroupConfig_outer = new Asn1OctetString(buffer.getMsgCopy() );
            buffer = savedBuffer;
         }
         scg_CellGroupConfig_outer.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("scg_CellGroupConfig", -1);
      }

      // encode scg_RB_Config

      if (scg_RB_Config != null) {
         buffer.getContext().eventDispatcher.startElement("scg_RB_Config", -1);

         Asn1OctetString scg_RB_Config_outer;
         {
            Asn1PerEncodeBuffer savedBuffer = buffer;
            buffer = new Asn1PerEncodeBuffer(buffer.isAligned());
            scg_RB_Config.encode (buffer);
            scg_RB_Config_outer = new Asn1OctetString(buffer.getMsgCopy() );
            buffer = savedBuffer;
         }
         scg_RB_Config_outer.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("scg_RB_Config", -1);
      }

      // encode configRestrictModReq

      if (configRestrictModReq != null) {
         buffer.getContext().eventDispatcher.startElement("configRestrictModReq", -1);

         configRestrictModReq.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("configRestrictModReq", -1);
      }

      // encode drx_InfoSCG

      if (drx_InfoSCG != null) {
         buffer.getContext().eventDispatcher.startElement("drx_InfoSCG", -1);

         drx_InfoSCG.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("drx_InfoSCG", -1);
      }

      // encode candidateCellInfoListSN

      if (candidateCellInfoListSN != null) {
         buffer.getContext().eventDispatcher.startElement("candidateCellInfoListSN", -1);

         Asn1OctetString candidateCellInfoListSN_outer;
         {
            Asn1PerEncodeBuffer savedBuffer = buffer;
            buffer = new Asn1PerEncodeBuffer(buffer.isAligned());
            candidateCellInfoListSN.encode (buffer);
            candidateCellInfoListSN_outer = new Asn1OctetString(buffer.getMsgCopy() );
            buffer = savedBuffer;
         }
         candidateCellInfoListSN_outer.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("candidateCellInfoListSN", -1);
      }

      // encode measConfigSN

      if (measConfigSN != null) {
         buffer.getContext().eventDispatcher.startElement("measConfigSN", -1);

         measConfigSN.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("measConfigSN", -1);
      }

      // encode selectedBandCombination

      if (selectedBandCombination != null) {
         buffer.getContext().eventDispatcher.startElement("selectedBandCombination", -1);

         selectedBandCombination.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("selectedBandCombination", -1);
      }

      // encode fr_InfoListSCG

      if (fr_InfoListSCG != null) {
         buffer.getContext().eventDispatcher.startElement("fr_InfoListSCG", -1);

         fr_InfoListSCG.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("fr_InfoListSCG", -1);
      }

      // encode candidateServingFreqListNR

      if (candidateServingFreqListNR != null) {
         buffer.getContext().eventDispatcher.startElement("candidateServingFreqListNR", -1);

         candidateServingFreqListNR.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("candidateServingFreqListNR", -1);
      }

      // encode nonCriticalExtension

      if (nonCriticalExtension != null) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (scg_CellGroupConfig != null) scg_CellGroupConfig.print (_sb, "scg_CellGroupConfig", _level+1);
      if (scg_RB_Config != null) scg_RB_Config.print (_sb, "scg_RB_Config", _level+1);
      if (configRestrictModReq != null) configRestrictModReq.print (_sb, "configRestrictModReq", _level+1);
      if (drx_InfoSCG != null) drx_InfoSCG.print (_sb, "drx_InfoSCG", _level+1);
      if (candidateCellInfoListSN != null) candidateCellInfoListSN.print (_sb, "candidateCellInfoListSN", _level+1);
      if (measConfigSN != null) measConfigSN.print (_sb, "measConfigSN", _level+1);
      if (selectedBandCombination != null) selectedBandCombination.print (_sb, "selectedBandCombination", _level+1);
      if (fr_InfoListSCG != null) fr_InfoListSCG.print (_sb, "fr_InfoListSCG", _level+1);
      if (candidateServingFreqListNR != null) candidateServingFreqListNR.print (_sb, "candidateServingFreqListNR", _level+1);
      if (nonCriticalExtension != null) nonCriticalExtension.print (_sb, "nonCriticalExtension", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
