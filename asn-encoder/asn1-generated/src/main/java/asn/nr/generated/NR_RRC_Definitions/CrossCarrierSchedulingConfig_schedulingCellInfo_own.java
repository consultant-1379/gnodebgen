/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class CrossCarrierSchedulingConfig_schedulingCellInfo_own extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public Asn1Boolean cif_Presence;

   public CrossCarrierSchedulingConfig_schedulingCellInfo_own () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CrossCarrierSchedulingConfig_schedulingCellInfo_own (
      Asn1Boolean cif_Presence_
   ) {
      super();
      cif_Presence = cif_Presence_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public CrossCarrierSchedulingConfig_schedulingCellInfo_own (boolean cif_Presence_
   ) {
      super();
      cif_Presence = new Asn1Boolean (cif_Presence_);
   }

   public void init () {
      cif_Presence = null;
   }

   public int getElementCount() { return 1; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return cif_Presence;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "cif-Presence";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode cif_Presence

      buffer.getContext().eventDispatcher.startElement("cif_Presence", -1);

      cif_Presence = new Asn1Boolean();
      cif_Presence.decode (buffer);

      buffer.invokeCharacters(cif_Presence.toString());
      buffer.getContext().eventDispatcher.endElement("cif_Presence", -1);

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode cif_Presence

      if (cif_Presence != null) {
         buffer.getContext().eventDispatcher.startElement("cif_Presence", -1);

         cif_Presence.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("cif_Presence", -1);
      }
      else throw new Asn1MissingRequiredException ("cif_Presence");

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (cif_Presence != null) cif_Presence.print (_sb, "cif_Presence", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
