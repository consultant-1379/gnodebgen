/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class FrequencyInfoDL extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "FrequencyInfoDL";
   }

   public ARFCN_ValueNR absoluteFrequencySSB;  // optional
   public MultiFrequencyBandListNR frequencyBandList;
   public ARFCN_ValueNR absoluteFrequencyPointA;
   public FrequencyInfoDL_scs_SpecificCarrierList scs_SpecificCarrierList;
   public Asn1OpenExt extElem1;

   public FrequencyInfoDL () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public FrequencyInfoDL (
      ARFCN_ValueNR absoluteFrequencySSB_,
      MultiFrequencyBandListNR frequencyBandList_,
      ARFCN_ValueNR absoluteFrequencyPointA_,
      FrequencyInfoDL_scs_SpecificCarrierList scs_SpecificCarrierList_
   ) {
      super();
      absoluteFrequencySSB = absoluteFrequencySSB_;
      frequencyBandList = frequencyBandList_;
      absoluteFrequencyPointA = absoluteFrequencyPointA_;
      scs_SpecificCarrierList = scs_SpecificCarrierList_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public FrequencyInfoDL (
      MultiFrequencyBandListNR frequencyBandList_,
      ARFCN_ValueNR absoluteFrequencyPointA_,
      FrequencyInfoDL_scs_SpecificCarrierList scs_SpecificCarrierList_
   ) {
      super();
      frequencyBandList = frequencyBandList_;
      absoluteFrequencyPointA = absoluteFrequencyPointA_;
      scs_SpecificCarrierList = scs_SpecificCarrierList_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public FrequencyInfoDL (long absoluteFrequencySSB_,
      MultiFrequencyBandListNR frequencyBandList_,
      long absoluteFrequencyPointA_,
      FrequencyInfoDL_scs_SpecificCarrierList scs_SpecificCarrierList_
   ) {
      super();
      absoluteFrequencySSB = new ARFCN_ValueNR (absoluteFrequencySSB_);
      frequencyBandList = frequencyBandList_;
      absoluteFrequencyPointA = new ARFCN_ValueNR (absoluteFrequencyPointA_);
      scs_SpecificCarrierList = scs_SpecificCarrierList_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public FrequencyInfoDL (
      MultiFrequencyBandListNR frequencyBandList_,
      long absoluteFrequencyPointA_,
      FrequencyInfoDL_scs_SpecificCarrierList scs_SpecificCarrierList_
   ) {
      super();
      frequencyBandList = frequencyBandList_;
      absoluteFrequencyPointA = new ARFCN_ValueNR (absoluteFrequencyPointA_);
      scs_SpecificCarrierList = scs_SpecificCarrierList_;
   }

   public void init () {
      absoluteFrequencySSB = null;
      frequencyBandList = null;
      absoluteFrequencyPointA = null;
      scs_SpecificCarrierList = null;
      extElem1 = null;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return absoluteFrequencySSB;
         case 1: return frequencyBandList;
         case 2: return absoluteFrequencyPointA;
         case 3: return scs_SpecificCarrierList;
         case 4: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "absoluteFrequencySSB";
         case 1: return "frequencyBandList";
         case 2: return "absoluteFrequencyPointA";
         case 3: return "scs-SpecificCarrierList";
         case 4: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean absoluteFrequencySSBPresent = buffer.decodeBit ("absoluteFrequencySSBPresent");

      // decode absoluteFrequencySSB

      if (absoluteFrequencySSBPresent) {
         buffer.getContext().eventDispatcher.startElement("absoluteFrequencySSB", -1);

         absoluteFrequencySSB = new ARFCN_ValueNR();
         absoluteFrequencySSB.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("absoluteFrequencySSB", -1);
      }
      else {
         absoluteFrequencySSB = null;
      }

      // decode frequencyBandList

      buffer.getContext().eventDispatcher.startElement("frequencyBandList", -1);

      frequencyBandList = new MultiFrequencyBandListNR();
      frequencyBandList.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("frequencyBandList", -1);

      // decode absoluteFrequencyPointA

      buffer.getContext().eventDispatcher.startElement("absoluteFrequencyPointA", -1);

      absoluteFrequencyPointA = new ARFCN_ValueNR();
      absoluteFrequencyPointA.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("absoluteFrequencyPointA", -1);

      // decode scs_SpecificCarrierList

      buffer.getContext().eventDispatcher.startElement("scs_SpecificCarrierList", -1);

      scs_SpecificCarrierList = new FrequencyInfoDL_scs_SpecificCarrierList();
      scs_SpecificCarrierList.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("scs_SpecificCarrierList", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((absoluteFrequencySSB != null), null);

      // encode absoluteFrequencySSB

      if (absoluteFrequencySSB != null) {
         buffer.getContext().eventDispatcher.startElement("absoluteFrequencySSB", -1);

         absoluteFrequencySSB.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("absoluteFrequencySSB", -1);
      }

      // encode frequencyBandList

      if (frequencyBandList != null) {
         buffer.getContext().eventDispatcher.startElement("frequencyBandList", -1);

         frequencyBandList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("frequencyBandList", -1);
      }
      else throw new Asn1MissingRequiredException ("frequencyBandList");

      // encode absoluteFrequencyPointA

      if (absoluteFrequencyPointA != null) {
         buffer.getContext().eventDispatcher.startElement("absoluteFrequencyPointA", -1);

         absoluteFrequencyPointA.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("absoluteFrequencyPointA", -1);
      }
      else throw new Asn1MissingRequiredException ("absoluteFrequencyPointA");

      // encode scs_SpecificCarrierList

      if (scs_SpecificCarrierList != null) {
         buffer.getContext().eventDispatcher.startElement("scs_SpecificCarrierList", -1);

         scs_SpecificCarrierList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("scs_SpecificCarrierList", -1);
      }
      else throw new Asn1MissingRequiredException ("scs_SpecificCarrierList");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (absoluteFrequencySSB != null) absoluteFrequencySSB.print (_sb, "absoluteFrequencySSB", _level+1);
      if (frequencyBandList != null) frequencyBandList.print (_sb, "frequencyBandList", _level+1);
      if (absoluteFrequencyPointA != null) absoluteFrequencyPointA.print (_sb, "absoluteFrequencyPointA", _level+1);
      if (scs_SpecificCarrierList != null) scs_SpecificCarrierList.print (_sb, "scs_SpecificCarrierList", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
