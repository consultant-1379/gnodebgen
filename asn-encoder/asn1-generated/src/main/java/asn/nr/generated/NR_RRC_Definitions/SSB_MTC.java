/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SSB_MTC extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SSB-MTC";
   }

   public SSB_MTC_periodicityAndOffset periodicityAndOffset;
   public SSB_MTC_duration duration = null;

   public SSB_MTC () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SSB_MTC (
      SSB_MTC_periodicityAndOffset periodicityAndOffset_,
      SSB_MTC_duration duration_
   ) {
      super();
      periodicityAndOffset = periodicityAndOffset_;
      duration = duration_;
   }

   public void init () {
      periodicityAndOffset = null;
      duration = null;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return periodicityAndOffset;
         case 1: return duration;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "periodicityAndOffset";
         case 1: return "duration";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode periodicityAndOffset

      buffer.getContext().eventDispatcher.startElement("periodicityAndOffset", -1);

      periodicityAndOffset = new SSB_MTC_periodicityAndOffset();
      periodicityAndOffset.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("periodicityAndOffset", -1);

      // decode duration

      buffer.getContext().eventDispatcher.startElement("duration", -1);

      {
         int tval = SSB_MTC_duration.decodeEnumValue (buffer);
         duration = SSB_MTC_duration.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("duration", -1);

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode periodicityAndOffset

      if (periodicityAndOffset != null) {
         buffer.getContext().eventDispatcher.startElement("periodicityAndOffset", -1);

         periodicityAndOffset.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("periodicityAndOffset", -1);
      }
      else throw new Asn1MissingRequiredException ("periodicityAndOffset");

      // encode duration

      if (duration != null) {
         buffer.getContext().eventDispatcher.startElement("duration", -1);

         duration.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("duration", -1);
      }
      else throw new Asn1MissingRequiredException ("duration");

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (periodicityAndOffset != null) periodicityAndOffset.print (_sb, "periodicityAndOffset", _level+1);
      if (duration != null) duration.print (_sb, "duration", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
