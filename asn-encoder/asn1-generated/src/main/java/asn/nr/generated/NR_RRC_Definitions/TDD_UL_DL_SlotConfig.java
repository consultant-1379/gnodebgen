/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class TDD_UL_DL_SlotConfig extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "TDD-UL-DL-SlotConfig";
   }

   public TDD_UL_DL_SlotIndex slotIndex;
   public TDD_UL_DL_SlotConfig_symbols symbols;

   public TDD_UL_DL_SlotConfig () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public TDD_UL_DL_SlotConfig (
      TDD_UL_DL_SlotIndex slotIndex_,
      TDD_UL_DL_SlotConfig_symbols symbols_
   ) {
      super();
      slotIndex = slotIndex_;
      symbols = symbols_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public TDD_UL_DL_SlotConfig (long slotIndex_,
      TDD_UL_DL_SlotConfig_symbols symbols_
   ) {
      super();
      slotIndex = new TDD_UL_DL_SlotIndex (slotIndex_);
      symbols = symbols_;
   }

   public void init () {
      slotIndex = null;
      symbols = null;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return slotIndex;
         case 1: return symbols;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "slotIndex";
         case 1: return "symbols";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode slotIndex

      buffer.getContext().eventDispatcher.startElement("slotIndex", -1);

      slotIndex = new TDD_UL_DL_SlotIndex();
      slotIndex.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("slotIndex", -1);

      // decode symbols

      buffer.getContext().eventDispatcher.startElement("symbols", -1);

      symbols = new TDD_UL_DL_SlotConfig_symbols();
      symbols.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("symbols", -1);

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode slotIndex

      if (slotIndex != null) {
         buffer.getContext().eventDispatcher.startElement("slotIndex", -1);

         slotIndex.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("slotIndex", -1);
      }
      else throw new Asn1MissingRequiredException ("slotIndex");

      // encode symbols

      if (symbols != null) {
         buffer.getContext().eventDispatcher.startElement("symbols", -1);

         symbols.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("symbols", -1);
      }
      else throw new Asn1MissingRequiredException ("symbols");

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (slotIndex != null) slotIndex.print (_sb, "slotIndex", _level+1);
      if (symbols != null) symbols.print (_sb, "symbols", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
