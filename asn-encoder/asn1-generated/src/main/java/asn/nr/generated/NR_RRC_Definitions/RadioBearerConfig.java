/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class RadioBearerConfig extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "RadioBearerConfig";
   }

   public SRB_ToAddModList srb_ToAddModList;  // optional
   public RadioBearerConfig_srb3_ToRelease srb3_ToRelease = null;  // optional
   public DRB_ToAddModList drb_ToAddModList;  // optional
   public DRB_ToReleaseList drb_ToReleaseList;  // optional
   public SecurityConfig securityConfig;  // optional
   public Asn1OpenExt extElem1;

   public RadioBearerConfig () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public RadioBearerConfig (
      SRB_ToAddModList srb_ToAddModList_,
      RadioBearerConfig_srb3_ToRelease srb3_ToRelease_,
      DRB_ToAddModList drb_ToAddModList_,
      DRB_ToReleaseList drb_ToReleaseList_,
      SecurityConfig securityConfig_
   ) {
      super();
      srb_ToAddModList = srb_ToAddModList_;
      srb3_ToRelease = srb3_ToRelease_;
      drb_ToAddModList = drb_ToAddModList_;
      drb_ToReleaseList = drb_ToReleaseList_;
      securityConfig = securityConfig_;
   }

   public void init () {
      srb_ToAddModList = null;
      srb3_ToRelease = null;
      drb_ToAddModList = null;
      drb_ToReleaseList = null;
      securityConfig = null;
      extElem1 = null;
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return srb_ToAddModList;
         case 1: return srb3_ToRelease;
         case 2: return drb_ToAddModList;
         case 3: return drb_ToReleaseList;
         case 4: return securityConfig;
         case 5: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "srb-ToAddModList";
         case 1: return "srb3-ToRelease";
         case 2: return "drb-ToAddModList";
         case 3: return "drb-ToReleaseList";
         case 4: return "securityConfig";
         case 5: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean srb_ToAddModListPresent = buffer.decodeBit ("srb_ToAddModListPresent");
      boolean srb3_ToReleasePresent = buffer.decodeBit ("srb3_ToReleasePresent");
      boolean drb_ToAddModListPresent = buffer.decodeBit ("drb_ToAddModListPresent");
      boolean drb_ToReleaseListPresent = buffer.decodeBit ("drb_ToReleaseListPresent");
      boolean securityConfigPresent = buffer.decodeBit ("securityConfigPresent");

      // decode srb_ToAddModList

      if (srb_ToAddModListPresent) {
         buffer.getContext().eventDispatcher.startElement("srb_ToAddModList", -1);

         srb_ToAddModList = new SRB_ToAddModList();
         srb_ToAddModList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("srb_ToAddModList", -1);
      }
      else {
         srb_ToAddModList = null;
      }

      // decode srb3_ToRelease

      if (srb3_ToReleasePresent) {
         buffer.getContext().eventDispatcher.startElement("srb3_ToRelease", -1);

         int tval = RadioBearerConfig_srb3_ToRelease.decodeEnumValue (buffer);
         srb3_ToRelease = RadioBearerConfig_srb3_ToRelease.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("srb3_ToRelease", -1);
      }
      else {
         srb3_ToRelease = null;
      }

      // decode drb_ToAddModList

      if (drb_ToAddModListPresent) {
         buffer.getContext().eventDispatcher.startElement("drb_ToAddModList", -1);

         drb_ToAddModList = new DRB_ToAddModList();
         drb_ToAddModList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("drb_ToAddModList", -1);
      }
      else {
         drb_ToAddModList = null;
      }

      // decode drb_ToReleaseList

      if (drb_ToReleaseListPresent) {
         buffer.getContext().eventDispatcher.startElement("drb_ToReleaseList", -1);

         drb_ToReleaseList = new DRB_ToReleaseList();
         drb_ToReleaseList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("drb_ToReleaseList", -1);
      }
      else {
         drb_ToReleaseList = null;
      }

      // decode securityConfig

      if (securityConfigPresent) {
         buffer.getContext().eventDispatcher.startElement("securityConfig", -1);

         securityConfig = new SecurityConfig();
         securityConfig.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("securityConfig", -1);
      }
      else {
         securityConfig = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((srb_ToAddModList != null), null);
      buffer.encodeBit ((srb3_ToRelease != null), null);
      buffer.encodeBit ((drb_ToAddModList != null), null);
      buffer.encodeBit ((drb_ToReleaseList != null), null);
      buffer.encodeBit ((securityConfig != null), null);

      // encode srb_ToAddModList

      if (srb_ToAddModList != null) {
         buffer.getContext().eventDispatcher.startElement("srb_ToAddModList", -1);

         srb_ToAddModList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("srb_ToAddModList", -1);
      }

      // encode srb3_ToRelease

      if (srb3_ToRelease != null) {
         buffer.getContext().eventDispatcher.startElement("srb3_ToRelease", -1);

         srb3_ToRelease.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("srb3_ToRelease", -1);
      }

      // encode drb_ToAddModList

      if (drb_ToAddModList != null) {
         buffer.getContext().eventDispatcher.startElement("drb_ToAddModList", -1);

         drb_ToAddModList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("drb_ToAddModList", -1);
      }

      // encode drb_ToReleaseList

      if (drb_ToReleaseList != null) {
         buffer.getContext().eventDispatcher.startElement("drb_ToReleaseList", -1);

         drb_ToReleaseList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("drb_ToReleaseList", -1);
      }

      // encode securityConfig

      if (securityConfig != null) {
         buffer.getContext().eventDispatcher.startElement("securityConfig", -1);

         securityConfig.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("securityConfig", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (srb_ToAddModList != null) srb_ToAddModList.print (_sb, "srb_ToAddModList", _level+1);
      if (srb3_ToRelease != null) srb3_ToRelease.print (_sb, "srb3_ToRelease", _level+1);
      if (drb_ToAddModList != null) drb_ToAddModList.print (_sb, "drb_ToAddModList", _level+1);
      if (drb_ToReleaseList != null) drb_ToReleaseList.print (_sb, "drb_ToReleaseList", _level+1);
      if (securityConfig != null) securityConfig.print (_sb, "securityConfig", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
