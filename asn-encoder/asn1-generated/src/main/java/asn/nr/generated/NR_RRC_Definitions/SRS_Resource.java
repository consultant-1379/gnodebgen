/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SRS_Resource extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SRS-Resource";
   }

   public SRS_ResourceId srs_ResourceId;
   public SRS_Resource_nrofSRS_Ports nrofSRS_Ports = null;
   public SRS_Resource_ptrs_PortIndex ptrs_PortIndex = null;  // optional
   public SRS_Resource_transmissionComb transmissionComb;
   public SRS_Resource_resourceMapping resourceMapping;
   public Asn1Integer freqDomainPosition;
   public Asn1Integer freqDomainShift;
   public SRS_Resource_freqHopping freqHopping;
   public SRS_Resource_groupOrSequenceHopping groupOrSequenceHopping = null;
   public SRS_Resource_resourceType resourceType;
   public Asn1Integer sequenceId;
   public SRS_SpatialRelationInfo spatialRelationInfo;  // optional
   public boolean mV2ExtPresent;
   public SRS_Resource_resourceMapping_r16 resourceMapping_r16;  // optional
   public Asn1OpenExt extElem1;

   public SRS_Resource () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SRS_Resource (
      SRS_ResourceId srs_ResourceId_,
      SRS_Resource_nrofSRS_Ports nrofSRS_Ports_,
      SRS_Resource_ptrs_PortIndex ptrs_PortIndex_,
      SRS_Resource_transmissionComb transmissionComb_,
      SRS_Resource_resourceMapping resourceMapping_,
      Asn1Integer freqDomainPosition_,
      Asn1Integer freqDomainShift_,
      SRS_Resource_freqHopping freqHopping_,
      SRS_Resource_groupOrSequenceHopping groupOrSequenceHopping_,
      SRS_Resource_resourceType resourceType_,
      Asn1Integer sequenceId_,
      SRS_SpatialRelationInfo spatialRelationInfo_,
      SRS_Resource_resourceMapping_r16 resourceMapping_r16_
   ) {
      super();
      srs_ResourceId = srs_ResourceId_;
      nrofSRS_Ports = nrofSRS_Ports_;
      ptrs_PortIndex = ptrs_PortIndex_;
      transmissionComb = transmissionComb_;
      resourceMapping = resourceMapping_;
      freqDomainPosition = freqDomainPosition_;
      freqDomainShift = freqDomainShift_;
      freqHopping = freqHopping_;
      groupOrSequenceHopping = groupOrSequenceHopping_;
      resourceType = resourceType_;
      sequenceId = sequenceId_;
      spatialRelationInfo = spatialRelationInfo_;
      resourceMapping_r16 = resourceMapping_r16_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SRS_Resource (
      SRS_ResourceId srs_ResourceId_,
      SRS_Resource_nrofSRS_Ports nrofSRS_Ports_,
      SRS_Resource_transmissionComb transmissionComb_,
      SRS_Resource_resourceMapping resourceMapping_,
      Asn1Integer freqDomainPosition_,
      Asn1Integer freqDomainShift_,
      SRS_Resource_freqHopping freqHopping_,
      SRS_Resource_groupOrSequenceHopping groupOrSequenceHopping_,
      SRS_Resource_resourceType resourceType_,
      Asn1Integer sequenceId_
   ) {
      super();
      srs_ResourceId = srs_ResourceId_;
      nrofSRS_Ports = nrofSRS_Ports_;
      transmissionComb = transmissionComb_;
      resourceMapping = resourceMapping_;
      freqDomainPosition = freqDomainPosition_;
      freqDomainShift = freqDomainShift_;
      freqHopping = freqHopping_;
      groupOrSequenceHopping = groupOrSequenceHopping_;
      resourceType = resourceType_;
      sequenceId = sequenceId_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SRS_Resource (long srs_ResourceId_,
      SRS_Resource_nrofSRS_Ports nrofSRS_Ports_,
      SRS_Resource_ptrs_PortIndex ptrs_PortIndex_,
      SRS_Resource_transmissionComb transmissionComb_,
      SRS_Resource_resourceMapping resourceMapping_,
      long freqDomainPosition_,
      long freqDomainShift_,
      SRS_Resource_freqHopping freqHopping_,
      SRS_Resource_groupOrSequenceHopping groupOrSequenceHopping_,
      SRS_Resource_resourceType resourceType_,
      long sequenceId_,
      SRS_SpatialRelationInfo spatialRelationInfo_,
      SRS_Resource_resourceMapping_r16 resourceMapping_r16_
   ) {
      super();
      srs_ResourceId = new SRS_ResourceId (srs_ResourceId_);
      nrofSRS_Ports = nrofSRS_Ports_;
      ptrs_PortIndex = ptrs_PortIndex_;
      transmissionComb = transmissionComb_;
      resourceMapping = resourceMapping_;
      freqDomainPosition = new Asn1Integer (freqDomainPosition_);
      freqDomainShift = new Asn1Integer (freqDomainShift_);
      freqHopping = freqHopping_;
      groupOrSequenceHopping = groupOrSequenceHopping_;
      resourceType = resourceType_;
      sequenceId = new Asn1Integer (sequenceId_);
      spatialRelationInfo = spatialRelationInfo_;
      resourceMapping_r16 = resourceMapping_r16_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public SRS_Resource (
      long srs_ResourceId_,
      SRS_Resource_nrofSRS_Ports nrofSRS_Ports_,
      SRS_Resource_transmissionComb transmissionComb_,
      SRS_Resource_resourceMapping resourceMapping_,
      long freqDomainPosition_,
      long freqDomainShift_,
      SRS_Resource_freqHopping freqHopping_,
      SRS_Resource_groupOrSequenceHopping groupOrSequenceHopping_,
      SRS_Resource_resourceType resourceType_,
      long sequenceId_
   ) {
      super();
      srs_ResourceId = new SRS_ResourceId (srs_ResourceId_);
      nrofSRS_Ports = nrofSRS_Ports_;
      transmissionComb = transmissionComb_;
      resourceMapping = resourceMapping_;
      freqDomainPosition = new Asn1Integer (freqDomainPosition_);
      freqDomainShift = new Asn1Integer (freqDomainShift_);
      freqHopping = freqHopping_;
      groupOrSequenceHopping = groupOrSequenceHopping_;
      resourceType = resourceType_;
      sequenceId = new Asn1Integer (sequenceId_);
   }

   public void init () {
      srs_ResourceId = null;
      nrofSRS_Ports = null;
      ptrs_PortIndex = null;
      transmissionComb = null;
      resourceMapping = null;
      freqDomainPosition = null;
      freqDomainShift = null;
      freqHopping = null;
      groupOrSequenceHopping = null;
      resourceType = null;
      sequenceId = null;
      spatialRelationInfo = null;
      resourceMapping_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 14; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return srs_ResourceId;
         case 1: return nrofSRS_Ports;
         case 2: return ptrs_PortIndex;
         case 3: return transmissionComb;
         case 4: return resourceMapping;
         case 5: return freqDomainPosition;
         case 6: return freqDomainShift;
         case 7: return freqHopping;
         case 8: return groupOrSequenceHopping;
         case 9: return resourceType;
         case 10: return sequenceId;
         case 11: return spatialRelationInfo;
         case 12: return resourceMapping_r16;
         case 13: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "srs-ResourceId";
         case 1: return "nrofSRS-Ports";
         case 2: return "ptrs-PortIndex";
         case 3: return "transmissionComb";
         case 4: return "resourceMapping";
         case 5: return "freqDomainPosition";
         case 6: return "freqDomainShift";
         case 7: return "freqHopping";
         case 8: return "groupOrSequenceHopping";
         case 9: return "resourceType";
         case 10: return "sequenceId";
         case 11: return "spatialRelationInfo";
         case 12: return "resourceMapping-r16";
         case 13: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean ptrs_PortIndexPresent = buffer.decodeBit ("ptrs_PortIndexPresent");
      boolean spatialRelationInfoPresent = buffer.decodeBit ("spatialRelationInfoPresent");

      // decode srs_ResourceId

      buffer.getContext().eventDispatcher.startElement("srs_ResourceId", -1);

      srs_ResourceId = new SRS_ResourceId();
      srs_ResourceId.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("srs_ResourceId", -1);

      // decode nrofSRS_Ports

      buffer.getContext().eventDispatcher.startElement("nrofSRS_Ports", -1);

      {
         int tval = SRS_Resource_nrofSRS_Ports.decodeEnumValue (buffer);
         nrofSRS_Ports = SRS_Resource_nrofSRS_Ports.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("nrofSRS_Ports", -1);

      // decode ptrs_PortIndex

      if (ptrs_PortIndexPresent) {
         buffer.getContext().eventDispatcher.startElement("ptrs_PortIndex", -1);

         int tval = SRS_Resource_ptrs_PortIndex.decodeEnumValue (buffer);
         ptrs_PortIndex = SRS_Resource_ptrs_PortIndex.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("ptrs_PortIndex", -1);
      }
      else {
         ptrs_PortIndex = null;
      }

      // decode transmissionComb

      buffer.getContext().eventDispatcher.startElement("transmissionComb", -1);

      transmissionComb = new SRS_Resource_transmissionComb();
      transmissionComb.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("transmissionComb", -1);

      // decode resourceMapping

      buffer.getContext().eventDispatcher.startElement("resourceMapping", -1);

      resourceMapping = new SRS_Resource_resourceMapping();
      resourceMapping.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("resourceMapping", -1);

      // decode freqDomainPosition

      buffer.getContext().eventDispatcher.startElement("freqDomainPosition", -1);

      freqDomainPosition = new Asn1Integer();
      freqDomainPosition.decode (buffer, 0, 67);

      buffer.invokeCharacters(freqDomainPosition.toString());
      buffer.getContext().eventDispatcher.endElement("freqDomainPosition", -1);

      // decode freqDomainShift

      buffer.getContext().eventDispatcher.startElement("freqDomainShift", -1);

      freqDomainShift = new Asn1Integer();
      freqDomainShift.decode (buffer, 0, 268);

      buffer.invokeCharacters(freqDomainShift.toString());
      buffer.getContext().eventDispatcher.endElement("freqDomainShift", -1);

      // decode freqHopping

      buffer.getContext().eventDispatcher.startElement("freqHopping", -1);

      freqHopping = new SRS_Resource_freqHopping();
      freqHopping.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("freqHopping", -1);

      // decode groupOrSequenceHopping

      buffer.getContext().eventDispatcher.startElement("groupOrSequenceHopping", -1);

      {
         int tval = SRS_Resource_groupOrSequenceHopping.decodeEnumValue (buffer);
         groupOrSequenceHopping = SRS_Resource_groupOrSequenceHopping.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("groupOrSequenceHopping", -1);

      // decode resourceType

      buffer.getContext().eventDispatcher.startElement("resourceType", -1);

      resourceType = new SRS_Resource_resourceType();
      resourceType.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("resourceType", -1);

      // decode sequenceId

      buffer.getContext().eventDispatcher.startElement("sequenceId", -1);

      sequenceId = new Asn1Integer();
      sequenceId.decode (buffer, 0, 1023);

      buffer.invokeCharacters(sequenceId.toString());
      buffer.getContext().eventDispatcher.endElement("sequenceId", -1);

      // decode spatialRelationInfo

      if (spatialRelationInfoPresent) {
         buffer.getContext().eventDispatcher.startElement("spatialRelationInfo", -1);

         spatialRelationInfo = new SRS_SpatialRelationInfo();
         spatialRelationInfo.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("spatialRelationInfo", -1);
      }
      else {
         spatialRelationInfo = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean resourceMapping_r16Present = buffer.decodeBit ("resourceMapping_r16Present");

            // decode resourceMapping_r16

            if (resourceMapping_r16Present) {
               buffer.getContext().eventDispatcher.startElement("resourceMapping_r16", -1);

               resourceMapping_r16 = new SRS_Resource_resourceMapping_r16();
               resourceMapping_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("resourceMapping_r16", -1);
            }
            else {
               resourceMapping_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (mV2ExtPresent ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((ptrs_PortIndex != null), null);
      buffer.encodeBit ((spatialRelationInfo != null), null);

      // encode srs_ResourceId

      if (srs_ResourceId != null) {
         buffer.getContext().eventDispatcher.startElement("srs_ResourceId", -1);

         srs_ResourceId.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("srs_ResourceId", -1);
      }
      else throw new Asn1MissingRequiredException ("srs_ResourceId");

      // encode nrofSRS_Ports

      if (nrofSRS_Ports != null) {
         buffer.getContext().eventDispatcher.startElement("nrofSRS_Ports", -1);

         nrofSRS_Ports.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("nrofSRS_Ports", -1);
      }
      else throw new Asn1MissingRequiredException ("nrofSRS_Ports");

      // encode ptrs_PortIndex

      if (ptrs_PortIndex != null) {
         buffer.getContext().eventDispatcher.startElement("ptrs_PortIndex", -1);

         ptrs_PortIndex.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ptrs_PortIndex", -1);
      }

      // encode transmissionComb

      if (transmissionComb != null) {
         buffer.getContext().eventDispatcher.startElement("transmissionComb", -1);

         transmissionComb.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("transmissionComb", -1);
      }
      else throw new Asn1MissingRequiredException ("transmissionComb");

      // encode resourceMapping

      if (resourceMapping != null) {
         buffer.getContext().eventDispatcher.startElement("resourceMapping", -1);

         resourceMapping.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("resourceMapping", -1);
      }
      else throw new Asn1MissingRequiredException ("resourceMapping");

      // encode freqDomainPosition

      if (freqDomainPosition != null) {
         buffer.getContext().eventDispatcher.startElement("freqDomainPosition", -1);

         freqDomainPosition.encode (buffer, 0, 67);

         buffer.getContext().eventDispatcher.endElement("freqDomainPosition", -1);
      }
      else throw new Asn1MissingRequiredException ("freqDomainPosition");

      // encode freqDomainShift

      if (freqDomainShift != null) {
         buffer.getContext().eventDispatcher.startElement("freqDomainShift", -1);

         freqDomainShift.encode (buffer, 0, 268);

         buffer.getContext().eventDispatcher.endElement("freqDomainShift", -1);
      }
      else throw new Asn1MissingRequiredException ("freqDomainShift");

      // encode freqHopping

      if (freqHopping != null) {
         buffer.getContext().eventDispatcher.startElement("freqHopping", -1);

         freqHopping.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("freqHopping", -1);
      }
      else throw new Asn1MissingRequiredException ("freqHopping");

      // encode groupOrSequenceHopping

      if (groupOrSequenceHopping != null) {
         buffer.getContext().eventDispatcher.startElement("groupOrSequenceHopping", -1);

         groupOrSequenceHopping.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("groupOrSequenceHopping", -1);
      }
      else throw new Asn1MissingRequiredException ("groupOrSequenceHopping");

      // encode resourceType

      if (resourceType != null) {
         buffer.getContext().eventDispatcher.startElement("resourceType", -1);

         resourceType.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("resourceType", -1);
      }
      else throw new Asn1MissingRequiredException ("resourceType");

      // encode sequenceId

      if (sequenceId != null) {
         buffer.getContext().eventDispatcher.startElement("sequenceId", -1);

         sequenceId.encode (buffer, 0, 1023);

         buffer.getContext().eventDispatcher.endElement("sequenceId", -1);
      }
      else throw new Asn1MissingRequiredException ("sequenceId");

      // encode spatialRelationInfo

      if (spatialRelationInfo != null) {
         buffer.getContext().eventDispatcher.startElement("spatialRelationInfo", -1);

         spatialRelationInfo.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("spatialRelationInfo", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 1;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit (mV2ExtPresent, null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         if (mV2ExtPresent) {
            buffer.reset();
            buffer.encodeBit ((resourceMapping_r16 != null), "optbit");
            if (resourceMapping_r16 != null) {
               resourceMapping_r16.encode (buffer);
            }
            mainBuffer.encodeOpenType (buffer, null);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (srs_ResourceId != null) srs_ResourceId.print (_sb, "srs_ResourceId", _level+1);
      if (nrofSRS_Ports != null) nrofSRS_Ports.print (_sb, "nrofSRS_Ports", _level+1);
      if (ptrs_PortIndex != null) ptrs_PortIndex.print (_sb, "ptrs_PortIndex", _level+1);
      if (transmissionComb != null) transmissionComb.print (_sb, "transmissionComb", _level+1);
      if (resourceMapping != null) resourceMapping.print (_sb, "resourceMapping", _level+1);
      if (freqDomainPosition != null) freqDomainPosition.print (_sb, "freqDomainPosition", _level+1);
      if (freqDomainShift != null) freqDomainShift.print (_sb, "freqDomainShift", _level+1);
      if (freqHopping != null) freqHopping.print (_sb, "freqHopping", _level+1);
      if (groupOrSequenceHopping != null) groupOrSequenceHopping.print (_sb, "groupOrSequenceHopping", _level+1);
      if (resourceType != null) resourceType.print (_sb, "resourceType", _level+1);
      if (sequenceId != null) sequenceId.print (_sb, "sequenceId", _level+1);
      if (spatialRelationInfo != null) spatialRelationInfo.print (_sb, "spatialRelationInfo", _level+1);
      if (resourceMapping_r16 != null) resourceMapping_r16.print (_sb, "resourceMapping_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
