/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class ResultsPerCSI_RS_Index extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ResultsPerCSI-RS-Index";
   }

   public CSI_RS_Index csi_RS_Index;
   public MeasQuantityResults csi_RS_Results;  // optional

   public ResultsPerCSI_RS_Index () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ResultsPerCSI_RS_Index (
      CSI_RS_Index csi_RS_Index_,
      MeasQuantityResults csi_RS_Results_
   ) {
      super();
      csi_RS_Index = csi_RS_Index_;
      csi_RS_Results = csi_RS_Results_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public ResultsPerCSI_RS_Index (
      CSI_RS_Index csi_RS_Index_
   ) {
      super();
      csi_RS_Index = csi_RS_Index_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public ResultsPerCSI_RS_Index (long csi_RS_Index_,
      MeasQuantityResults csi_RS_Results_
   ) {
      super();
      csi_RS_Index = new CSI_RS_Index (csi_RS_Index_);
      csi_RS_Results = csi_RS_Results_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public ResultsPerCSI_RS_Index (
      long csi_RS_Index_
   ) {
      super();
      csi_RS_Index = new CSI_RS_Index (csi_RS_Index_);
   }

   public void init () {
      csi_RS_Index = null;
      csi_RS_Results = null;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return csi_RS_Index;
         case 1: return csi_RS_Results;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "csi-RS-Index";
         case 1: return "csi-RS-Results";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean csi_RS_ResultsPresent = buffer.decodeBit ("csi_RS_ResultsPresent");

      // decode csi_RS_Index

      buffer.getContext().eventDispatcher.startElement("csi_RS_Index", -1);

      csi_RS_Index = new CSI_RS_Index();
      csi_RS_Index.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("csi_RS_Index", -1);

      // decode csi_RS_Results

      if (csi_RS_ResultsPresent) {
         buffer.getContext().eventDispatcher.startElement("csi_RS_Results", -1);

         csi_RS_Results = new MeasQuantityResults();
         csi_RS_Results.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("csi_RS_Results", -1);
      }
      else {
         csi_RS_Results = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((csi_RS_Results != null), null);

      // encode csi_RS_Index

      if (csi_RS_Index != null) {
         buffer.getContext().eventDispatcher.startElement("csi_RS_Index", -1);

         csi_RS_Index.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("csi_RS_Index", -1);
      }
      else throw new Asn1MissingRequiredException ("csi_RS_Index");

      // encode csi_RS_Results

      if (csi_RS_Results != null) {
         buffer.getContext().eventDispatcher.startElement("csi_RS_Results", -1);

         csi_RS_Results.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("csi_RS_Results", -1);
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (csi_RS_Index != null) csi_RS_Index.print (_sb, "csi_RS_Index", _level+1);
      if (csi_RS_Results != null) csi_RS_Results.print (_sb, "csi_RS_Results", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
