/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SL_RLC_Config_r16_sl_AM_RLC_r16_sl_MaxRetxThreshold_r16 extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ENUMERATED";
   }

   // Integer constants for switch-case
   public static final int _T1 = 0;
   public static final int _T2 = 1;
   public static final int _T3 = 2;
   public static final int _T4 = 3;
   public static final int _T6 = 4;
   public static final int _T8 = 5;
   public static final int _T16 = 6;
   public static final int _T32 = 7;

   // Singleton instances of SL_RLC_Config_r16_sl_AM_RLC_r16_sl_MaxRetxThreshold_r16
   protected static final SL_RLC_Config_r16_sl_AM_RLC_r16_sl_MaxRetxThreshold_r16 _t1 = new SL_RLC_Config_r16_sl_AM_RLC_r16_sl_MaxRetxThreshold_r16(0);
   protected static final SL_RLC_Config_r16_sl_AM_RLC_r16_sl_MaxRetxThreshold_r16 _t2 = new SL_RLC_Config_r16_sl_AM_RLC_r16_sl_MaxRetxThreshold_r16(1);
   protected static final SL_RLC_Config_r16_sl_AM_RLC_r16_sl_MaxRetxThreshold_r16 _t3 = new SL_RLC_Config_r16_sl_AM_RLC_r16_sl_MaxRetxThreshold_r16(2);
   protected static final SL_RLC_Config_r16_sl_AM_RLC_r16_sl_MaxRetxThreshold_r16 _t4 = new SL_RLC_Config_r16_sl_AM_RLC_r16_sl_MaxRetxThreshold_r16(3);
   protected static final SL_RLC_Config_r16_sl_AM_RLC_r16_sl_MaxRetxThreshold_r16 _t6 = new SL_RLC_Config_r16_sl_AM_RLC_r16_sl_MaxRetxThreshold_r16(4);
   protected static final SL_RLC_Config_r16_sl_AM_RLC_r16_sl_MaxRetxThreshold_r16 _t8 = new SL_RLC_Config_r16_sl_AM_RLC_r16_sl_MaxRetxThreshold_r16(5);
   protected static final SL_RLC_Config_r16_sl_AM_RLC_r16_sl_MaxRetxThreshold_r16 _t16 = new SL_RLC_Config_r16_sl_AM_RLC_r16_sl_MaxRetxThreshold_r16(6);
   protected static final SL_RLC_Config_r16_sl_AM_RLC_r16_sl_MaxRetxThreshold_r16 _t32 = new SL_RLC_Config_r16_sl_AM_RLC_r16_sl_MaxRetxThreshold_r16(7);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    *   7
    */
   protected SL_RLC_Config_r16_sl_AM_RLC_r16_sl_MaxRetxThreshold_r16 (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for t1.
    */
   public static SL_RLC_Config_r16_sl_AM_RLC_r16_sl_MaxRetxThreshold_r16 t1() {
      return _t1;
   }

   /**
    * Singleton accessor method for t2.
    */
   public static SL_RLC_Config_r16_sl_AM_RLC_r16_sl_MaxRetxThreshold_r16 t2() {
      return _t2;
   }

   /**
    * Singleton accessor method for t3.
    */
   public static SL_RLC_Config_r16_sl_AM_RLC_r16_sl_MaxRetxThreshold_r16 t3() {
      return _t3;
   }

   /**
    * Singleton accessor method for t4.
    */
   public static SL_RLC_Config_r16_sl_AM_RLC_r16_sl_MaxRetxThreshold_r16 t4() {
      return _t4;
   }

   /**
    * Singleton accessor method for t6.
    */
   public static SL_RLC_Config_r16_sl_AM_RLC_r16_sl_MaxRetxThreshold_r16 t6() {
      return _t6;
   }

   /**
    * Singleton accessor method for t8.
    */
   public static SL_RLC_Config_r16_sl_AM_RLC_r16_sl_MaxRetxThreshold_r16 t8() {
      return _t8;
   }

   /**
    * Singleton accessor method for t16.
    */
   public static SL_RLC_Config_r16_sl_AM_RLC_r16_sl_MaxRetxThreshold_r16 t16() {
      return _t16;
   }

   /**
    * Singleton accessor method for t32.
    */
   public static SL_RLC_Config_r16_sl_AM_RLC_r16_sl_MaxRetxThreshold_r16 t32() {
      return _t32;
   }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return SL_RLC_Config_r16_sl_AM_RLC_r16_sl_MaxRetxThreshold_r16.valueOf( SL_RLC_Config_r16_sl_AM_RLC_r16_sl_MaxRetxThreshold_r16.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static SL_RLC_Config_r16_sl_AM_RLC_r16_sl_MaxRetxThreshold_r16 valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 0: return t1();
         case 1: return t2();
         case 2: return t3();
         case 3: return t4();
         case 4: return t6();
         case 5: return t8();
         case 6: return t16();
         case 7: return t32();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      ui = (int) buffer.decodeConsWholeNumber (8);

      switch (ui) {
         case 0: ret =  0; break;
         case 1: ret =  1; break;
         case 2: ret =  2; break;
         case 3: ret =  3; break;
         case 4: ret =  4; break;
         case 5: ret =  5; break;
         case 6: ret =  6; break;
         case 7: ret =  7; break;
         default: throw new Asn1InvalidEnumException (ui);
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (SL_RLC_Config_r16_sl_AM_RLC_r16_sl_MaxRetxThreshold_r16.valueOf(ret).toString());

      return ret;
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      switch ((int)value) {
         case 0: ui = 0; /* t1 */break;
         case 1: ui = 1; /* t2 */break;
         case 2: ui = 2; /* t3 */break;
         case 3: ui = 3; /* t4 */break;
         case 4: ui = 4; /* t6 */break;
         case 5: ui = 5; /* t8 */break;
         case 6: ui = 6; /* t16 */break;
         case 7: ui = 7; /* t32 */break;
         default:
            throw new Asn1InvalidEnumException (value);
      }

      buffer.encodeConsWholeNumber (ui, 8);
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("t1");
         case 1: return ("t2");
         case 2: return ("t3");
         case 3: return ("t4");
         case 4: return ("t6");
         case 5: return ("t8");
         case 6: return ("t16");
         case 7: return ("t32");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
