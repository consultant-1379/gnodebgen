/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class BWP_UplinkCommon extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "BWP-UplinkCommon";
   }

   public BWP genericParameters;
   public BWP_UplinkCommon_rach_ConfigCommon rach_ConfigCommon;  // optional
   public BWP_UplinkCommon_pusch_ConfigCommon pusch_ConfigCommon;  // optional
   public BWP_UplinkCommon_pucch_ConfigCommon pucch_ConfigCommon;  // optional
   public boolean mV2ExtPresent;
   public BWP_UplinkCommon_rach_ConfigCommonIAB_r16 rach_ConfigCommonIAB_r16;  // optional
   public BWP_UplinkCommon_useInterlacePUCCH_PUSCH_r16 useInterlacePUCCH_PUSCH_r16 = null;  // optional
   public BWP_UplinkCommon_msgA_ConfigCommon_r16 msgA_ConfigCommon_r16;  // optional
   public Asn1OpenExt extElem1;

   public BWP_UplinkCommon () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public BWP_UplinkCommon (
      BWP genericParameters_,
      BWP_UplinkCommon_rach_ConfigCommon rach_ConfigCommon_,
      BWP_UplinkCommon_pusch_ConfigCommon pusch_ConfigCommon_,
      BWP_UplinkCommon_pucch_ConfigCommon pucch_ConfigCommon_,
      BWP_UplinkCommon_rach_ConfigCommonIAB_r16 rach_ConfigCommonIAB_r16_,
      BWP_UplinkCommon_useInterlacePUCCH_PUSCH_r16 useInterlacePUCCH_PUSCH_r16_,
      BWP_UplinkCommon_msgA_ConfigCommon_r16 msgA_ConfigCommon_r16_
   ) {
      super();
      genericParameters = genericParameters_;
      rach_ConfigCommon = rach_ConfigCommon_;
      pusch_ConfigCommon = pusch_ConfigCommon_;
      pucch_ConfigCommon = pucch_ConfigCommon_;
      rach_ConfigCommonIAB_r16 = rach_ConfigCommonIAB_r16_;
      useInterlacePUCCH_PUSCH_r16 = useInterlacePUCCH_PUSCH_r16_;
      msgA_ConfigCommon_r16 = msgA_ConfigCommon_r16_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public BWP_UplinkCommon (
      BWP genericParameters_
   ) {
      super();
      genericParameters = genericParameters_;
   }

   public void init () {
      genericParameters = null;
      rach_ConfigCommon = null;
      pusch_ConfigCommon = null;
      pucch_ConfigCommon = null;
      rach_ConfigCommonIAB_r16 = null;
      useInterlacePUCCH_PUSCH_r16 = null;
      msgA_ConfigCommon_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 8; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return genericParameters;
         case 1: return rach_ConfigCommon;
         case 2: return pusch_ConfigCommon;
         case 3: return pucch_ConfigCommon;
         case 4: return rach_ConfigCommonIAB_r16;
         case 5: return useInterlacePUCCH_PUSCH_r16;
         case 6: return msgA_ConfigCommon_r16;
         case 7: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "genericParameters";
         case 1: return "rach-ConfigCommon";
         case 2: return "pusch-ConfigCommon";
         case 3: return "pucch-ConfigCommon";
         case 4: return "rach-ConfigCommonIAB-r16";
         case 5: return "useInterlacePUCCH-PUSCH-r16";
         case 6: return "msgA-ConfigCommon-r16";
         case 7: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean rach_ConfigCommonPresent = buffer.decodeBit ("rach_ConfigCommonPresent");
      boolean pusch_ConfigCommonPresent = buffer.decodeBit ("pusch_ConfigCommonPresent");
      boolean pucch_ConfigCommonPresent = buffer.decodeBit ("pucch_ConfigCommonPresent");

      // decode genericParameters

      buffer.getContext().eventDispatcher.startElement("genericParameters", -1);

      genericParameters = new BWP();
      genericParameters.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("genericParameters", -1);

      // decode rach_ConfigCommon

      if (rach_ConfigCommonPresent) {
         buffer.getContext().eventDispatcher.startElement("rach_ConfigCommon", -1);

         rach_ConfigCommon = new BWP_UplinkCommon_rach_ConfigCommon();
         rach_ConfigCommon.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("rach_ConfigCommon", -1);
      }
      else {
         rach_ConfigCommon = null;
      }

      // decode pusch_ConfigCommon

      if (pusch_ConfigCommonPresent) {
         buffer.getContext().eventDispatcher.startElement("pusch_ConfigCommon", -1);

         pusch_ConfigCommon = new BWP_UplinkCommon_pusch_ConfigCommon();
         pusch_ConfigCommon.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("pusch_ConfigCommon", -1);
      }
      else {
         pusch_ConfigCommon = null;
      }

      // decode pucch_ConfigCommon

      if (pucch_ConfigCommonPresent) {
         buffer.getContext().eventDispatcher.startElement("pucch_ConfigCommon", -1);

         pucch_ConfigCommon = new BWP_UplinkCommon_pucch_ConfigCommon();
         pucch_ConfigCommon.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("pucch_ConfigCommon", -1);
      }
      else {
         pucch_ConfigCommon = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean rach_ConfigCommonIAB_r16Present = buffer.decodeBit ("rach_ConfigCommonIAB_r16Present");

            boolean useInterlacePUCCH_PUSCH_r16Present = buffer.decodeBit ("useInterlacePUCCH_PUSCH_r16Present");

            boolean msgA_ConfigCommon_r16Present = buffer.decodeBit ("msgA_ConfigCommon_r16Present");

            // decode rach_ConfigCommonIAB_r16

            if (rach_ConfigCommonIAB_r16Present) {
               buffer.getContext().eventDispatcher.startElement("rach_ConfigCommonIAB_r16", -1);

               rach_ConfigCommonIAB_r16 = new BWP_UplinkCommon_rach_ConfigCommonIAB_r16();
               rach_ConfigCommonIAB_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("rach_ConfigCommonIAB_r16", -1);
            }
            else {
               rach_ConfigCommonIAB_r16 = null;
            }

            // decode useInterlacePUCCH_PUSCH_r16

            if (useInterlacePUCCH_PUSCH_r16Present) {
               buffer.getContext().eventDispatcher.startElement("useInterlacePUCCH_PUSCH_r16", -1);

               int tval = BWP_UplinkCommon_useInterlacePUCCH_PUSCH_r16.decodeEnumValue (buffer);
               useInterlacePUCCH_PUSCH_r16 = BWP_UplinkCommon_useInterlacePUCCH_PUSCH_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("useInterlacePUCCH_PUSCH_r16", -1);
            }
            else {
               useInterlacePUCCH_PUSCH_r16 = null;
            }

            // decode msgA_ConfigCommon_r16

            if (msgA_ConfigCommon_r16Present) {
               buffer.getContext().eventDispatcher.startElement("msgA_ConfigCommon_r16", -1);

               msgA_ConfigCommon_r16 = new BWP_UplinkCommon_msgA_ConfigCommon_r16();
               msgA_ConfigCommon_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("msgA_ConfigCommon_r16", -1);
            }
            else {
               msgA_ConfigCommon_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (mV2ExtPresent ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((rach_ConfigCommon != null), null);
      buffer.encodeBit ((pusch_ConfigCommon != null), null);
      buffer.encodeBit ((pucch_ConfigCommon != null), null);

      // encode genericParameters

      if (genericParameters != null) {
         buffer.getContext().eventDispatcher.startElement("genericParameters", -1);

         genericParameters.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("genericParameters", -1);
      }
      else throw new Asn1MissingRequiredException ("genericParameters");

      // encode rach_ConfigCommon

      if (rach_ConfigCommon != null) {
         buffer.getContext().eventDispatcher.startElement("rach_ConfigCommon", -1);

         rach_ConfigCommon.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("rach_ConfigCommon", -1);
      }

      // encode pusch_ConfigCommon

      if (pusch_ConfigCommon != null) {
         buffer.getContext().eventDispatcher.startElement("pusch_ConfigCommon", -1);

         pusch_ConfigCommon.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("pusch_ConfigCommon", -1);
      }

      // encode pucch_ConfigCommon

      if (pucch_ConfigCommon != null) {
         buffer.getContext().eventDispatcher.startElement("pucch_ConfigCommon", -1);

         pucch_ConfigCommon.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("pucch_ConfigCommon", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 1;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit (mV2ExtPresent, null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         if (mV2ExtPresent) {
            buffer.reset();
            buffer.encodeBit ((rach_ConfigCommonIAB_r16 != null), "optbit");
            buffer.encodeBit ((useInterlacePUCCH_PUSCH_r16 != null), "optbit");
            buffer.encodeBit ((msgA_ConfigCommon_r16 != null), "optbit");
            if (rach_ConfigCommonIAB_r16 != null) {
               rach_ConfigCommonIAB_r16.encode (buffer);
            }
            if (useInterlacePUCCH_PUSCH_r16 != null) {
               useInterlacePUCCH_PUSCH_r16.encode (buffer);
            }
            if (msgA_ConfigCommon_r16 != null) {
               msgA_ConfigCommon_r16.encode (buffer);
            }
            mainBuffer.encodeOpenType (buffer, null);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (genericParameters != null) genericParameters.print (_sb, "genericParameters", _level+1);
      if (rach_ConfigCommon != null) rach_ConfigCommon.print (_sb, "rach_ConfigCommon", _level+1);
      if (pusch_ConfigCommon != null) pusch_ConfigCommon.print (_sb, "pusch_ConfigCommon", _level+1);
      if (pucch_ConfigCommon != null) pucch_ConfigCommon.print (_sb, "pucch_ConfigCommon", _level+1);
      if (rach_ConfigCommonIAB_r16 != null) rach_ConfigCommonIAB_r16.print (_sb, "rach_ConfigCommonIAB_r16", _level+1);
      if (useInterlacePUCCH_PUSCH_r16 != null) useInterlacePUCCH_PUSCH_r16.print (_sb, "useInterlacePUCCH_PUSCH_r16", _level+1);
      if (msgA_ConfigCommon_r16 != null) msgA_ConfigCommon_r16.print (_sb, "msgA_ConfigCommon_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
