/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class GapConfig extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "GapConfig";
   }

   public Asn1Integer gapOffset;
   public GapConfig_mgl mgl = null;
   public GapConfig_mgrp mgrp = null;
   public GapConfig_mgta mgta = null;
   public boolean mV2ExtPresent;
   public GapConfig_refServCellIndicator refServCellIndicator = null;  // optional
   public boolean mV3ExtPresent;
   public ServCellIndex refFR2ServCellAsyncCA_r16;  // optional
   public GapConfig_mgl_r16 mgl_r16 = null;  // optional
   public Asn1OpenExt extElem1;

   public GapConfig () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public GapConfig (
      Asn1Integer gapOffset_,
      GapConfig_mgl mgl_,
      GapConfig_mgrp mgrp_,
      GapConfig_mgta mgta_,
      GapConfig_refServCellIndicator refServCellIndicator_,
      ServCellIndex refFR2ServCellAsyncCA_r16_,
      GapConfig_mgl_r16 mgl_r16_
   ) {
      super();
      gapOffset = gapOffset_;
      mgl = mgl_;
      mgrp = mgrp_;
      mgta = mgta_;
      refServCellIndicator = refServCellIndicator_;
      refFR2ServCellAsyncCA_r16 = refFR2ServCellAsyncCA_r16_;
      mgl_r16 = mgl_r16_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public GapConfig (
      Asn1Integer gapOffset_,
      GapConfig_mgl mgl_,
      GapConfig_mgrp mgrp_,
      GapConfig_mgta mgta_
   ) {
      super();
      gapOffset = gapOffset_;
      mgl = mgl_;
      mgrp = mgrp_;
      mgta = mgta_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public GapConfig (long gapOffset_,
      GapConfig_mgl mgl_,
      GapConfig_mgrp mgrp_,
      GapConfig_mgta mgta_,
      GapConfig_refServCellIndicator refServCellIndicator_,
      long refFR2ServCellAsyncCA_r16_,
      GapConfig_mgl_r16 mgl_r16_
   ) {
      super();
      gapOffset = new Asn1Integer (gapOffset_);
      mgl = mgl_;
      mgrp = mgrp_;
      mgta = mgta_;
      refServCellIndicator = refServCellIndicator_;
      refFR2ServCellAsyncCA_r16 = new ServCellIndex (refFR2ServCellAsyncCA_r16_);
      mgl_r16 = mgl_r16_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public GapConfig (
      long gapOffset_,
      GapConfig_mgl mgl_,
      GapConfig_mgrp mgrp_,
      GapConfig_mgta mgta_
   ) {
      super();
      gapOffset = new Asn1Integer (gapOffset_);
      mgl = mgl_;
      mgrp = mgrp_;
      mgta = mgta_;
   }

   public void init () {
      gapOffset = null;
      mgl = null;
      mgrp = null;
      mgta = null;
      refServCellIndicator = null;
      refFR2ServCellAsyncCA_r16 = null;
      mgl_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 8; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return gapOffset;
         case 1: return mgl;
         case 2: return mgrp;
         case 3: return mgta;
         case 4: return refServCellIndicator;
         case 5: return refFR2ServCellAsyncCA_r16;
         case 6: return mgl_r16;
         case 7: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "gapOffset";
         case 1: return "mgl";
         case 2: return "mgrp";
         case 3: return "mgta";
         case 4: return "refServCellIndicator";
         case 5: return "refFR2ServCellAsyncCA-r16";
         case 6: return "mgl-r16";
         case 7: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      // decode gapOffset

      buffer.getContext().eventDispatcher.startElement("gapOffset", -1);

      gapOffset = new Asn1Integer();
      gapOffset.decode (buffer, 0, 159);

      buffer.invokeCharacters(gapOffset.toString());
      buffer.getContext().eventDispatcher.endElement("gapOffset", -1);

      // decode mgl

      buffer.getContext().eventDispatcher.startElement("mgl", -1);

      {
         int tval = GapConfig_mgl.decodeEnumValue (buffer);
         mgl = GapConfig_mgl.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("mgl", -1);

      // decode mgrp

      buffer.getContext().eventDispatcher.startElement("mgrp", -1);

      {
         int tval = GapConfig_mgrp.decodeEnumValue (buffer);
         mgrp = GapConfig_mgrp.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("mgrp", -1);

      // decode mgta

      buffer.getContext().eventDispatcher.startElement("mgta", -1);

      {
         int tval = GapConfig_mgta.decodeEnumValue (buffer);
         mgta = GapConfig_mgta.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("mgta", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean refServCellIndicatorPresent = buffer.decodeBit ("refServCellIndicatorPresent");

            // decode refServCellIndicator

            if (refServCellIndicatorPresent) {
               buffer.getContext().eventDispatcher.startElement("refServCellIndicator", -1);

               int tval = GapConfig_refServCellIndicator.decodeEnumValue (buffer);
               refServCellIndicator = GapConfig_refServCellIndicator.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("refServCellIndicator", -1);
            }
            else {
               refServCellIndicator = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean refFR2ServCellAsyncCA_r16Present = buffer.decodeBit ("refFR2ServCellAsyncCA_r16Present");

            boolean mgl_r16Present = buffer.decodeBit ("mgl_r16Present");

            // decode refFR2ServCellAsyncCA_r16

            if (refFR2ServCellAsyncCA_r16Present) {
               buffer.getContext().eventDispatcher.startElement("refFR2ServCellAsyncCA_r16", -1);

               refFR2ServCellAsyncCA_r16 = new ServCellIndex();
               refFR2ServCellAsyncCA_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("refFR2ServCellAsyncCA_r16", -1);
            }
            else {
               refFR2ServCellAsyncCA_r16 = null;
            }

            // decode mgl_r16

            if (mgl_r16Present) {
               buffer.getContext().eventDispatcher.startElement("mgl_r16", -1);

               int tval = GapConfig_mgl_r16.decodeEnumValue (buffer);
               mgl_r16 = GapConfig_mgl_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("mgl_r16", -1);
            }
            else {
               mgl_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (mV2ExtPresent ||
      mV3ExtPresent ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode gapOffset

      if (gapOffset != null) {
         buffer.getContext().eventDispatcher.startElement("gapOffset", -1);

         gapOffset.encode (buffer, 0, 159);

         buffer.getContext().eventDispatcher.endElement("gapOffset", -1);
      }
      else throw new Asn1MissingRequiredException ("gapOffset");

      // encode mgl

      if (mgl != null) {
         buffer.getContext().eventDispatcher.startElement("mgl", -1);

         mgl.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("mgl", -1);
      }
      else throw new Asn1MissingRequiredException ("mgl");

      // encode mgrp

      if (mgrp != null) {
         buffer.getContext().eventDispatcher.startElement("mgrp", -1);

         mgrp.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("mgrp", -1);
      }
      else throw new Asn1MissingRequiredException ("mgrp");

      // encode mgta

      if (mgta != null) {
         buffer.getContext().eventDispatcher.startElement("mgta", -1);

         mgta.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("mgta", -1);
      }
      else throw new Asn1MissingRequiredException ("mgta");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 2;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit (mV2ExtPresent, null);
         buffer.encodeBit (mV3ExtPresent, null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         if (mV2ExtPresent) {
            buffer.reset();
            buffer.encodeBit ((refServCellIndicator != null), "optbit");
            if (refServCellIndicator != null) {
               refServCellIndicator.encode (buffer);
            }
            mainBuffer.encodeOpenType (buffer, null);
         }

         if (mV3ExtPresent) {
            buffer.reset();
            buffer.encodeBit ((refFR2ServCellAsyncCA_r16 != null), "optbit");
            buffer.encodeBit ((mgl_r16 != null), "optbit");
            if (refFR2ServCellAsyncCA_r16 != null) {
               refFR2ServCellAsyncCA_r16.encode (buffer);
            }
            if (mgl_r16 != null) {
               mgl_r16.encode (buffer);
            }
            mainBuffer.encodeOpenType (buffer, null);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (gapOffset != null) gapOffset.print (_sb, "gapOffset", _level+1);
      if (mgl != null) mgl.print (_sb, "mgl", _level+1);
      if (mgrp != null) mgrp.print (_sb, "mgrp", _level+1);
      if (mgta != null) mgta.print (_sb, "mgta", _level+1);
      if (refServCellIndicator != null) refServCellIndicator.print (_sb, "refServCellIndicator", _level+1);
      if (refFR2ServCellAsyncCA_r16 != null) refFR2ServCellAsyncCA_r16.print (_sb, "refFR2ServCellAsyncCA_r16", _level+1);
      if (mgl_r16 != null) mgl_r16.print (_sb, "mgl_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
