/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class UE_CapabilityRequestFilterNR extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "UE-CapabilityRequestFilterNR";
   }

   public FreqBandList frequencyBandListFilter;  // optional
   public UE_CapabilityRequestFilterNR_v1540 nonCriticalExtension;  // optional

   public UE_CapabilityRequestFilterNR () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public UE_CapabilityRequestFilterNR (
      FreqBandList frequencyBandListFilter_,
      UE_CapabilityRequestFilterNR_v1540 nonCriticalExtension_
   ) {
      super();
      frequencyBandListFilter = frequencyBandListFilter_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   public void init () {
      frequencyBandListFilter = null;
      nonCriticalExtension = null;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return frequencyBandListFilter;
         case 1: return nonCriticalExtension;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "frequencyBandListFilter";
         case 1: return "nonCriticalExtension";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean frequencyBandListFilterPresent = buffer.decodeBit ("frequencyBandListFilterPresent");
      boolean nonCriticalExtensionPresent = buffer.decodeBit ("nonCriticalExtensionPresent");

      // decode frequencyBandListFilter

      if (frequencyBandListFilterPresent) {
         buffer.getContext().eventDispatcher.startElement("frequencyBandListFilter", -1);

         frequencyBandListFilter = new FreqBandList();
         frequencyBandListFilter.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("frequencyBandListFilter", -1);
      }
      else {
         frequencyBandListFilter = null;
      }

      // decode nonCriticalExtension

      if (nonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension = new UE_CapabilityRequestFilterNR_v1540();
         nonCriticalExtension.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }
      else {
         nonCriticalExtension = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((frequencyBandListFilter != null), null);
      buffer.encodeBit ((nonCriticalExtension != null), null);

      // encode frequencyBandListFilter

      if (frequencyBandListFilter != null) {
         buffer.getContext().eventDispatcher.startElement("frequencyBandListFilter", -1);

         frequencyBandListFilter.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("frequencyBandListFilter", -1);
      }

      // encode nonCriticalExtension

      if (nonCriticalExtension != null) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (frequencyBandListFilter != null) frequencyBandListFilter.print (_sb, "frequencyBandListFilter", _level+1);
      if (nonCriticalExtension != null) nonCriticalExtension.print (_sb, "nonCriticalExtension", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
