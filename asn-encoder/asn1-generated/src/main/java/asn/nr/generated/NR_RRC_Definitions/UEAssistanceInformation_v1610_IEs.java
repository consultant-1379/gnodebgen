/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class UEAssistanceInformation_v1610_IEs extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "UEAssistanceInformation-v1610-IEs";
   }

   public IDC_Assistance_r16 idc_Assistance_r16;  // optional
   public DRX_Preference_r16 drx_Preference_r16;  // optional
   public MaxBW_Preference_r16 maxBW_Preference_r16;  // optional
   public MaxCC_Preference_r16 maxCC_Preference_r16;  // optional
   public MaxMIMO_LayerPreference_r16 maxMIMO_LayerPreference_r16;  // optional
   public MinSchedulingOffsetPreference_r16 minSchedulingOffsetPreference_r16;  // optional
   public ReleasePreference_r16 releasePreference_r16;  // optional
   public SL_UE_AssistanceInformationNR_r16 sl_UE_AssistanceInformationNR_r16;  // optional
   public Asn1Boolean referenceTimeInfoPreference_r16;  // optional
   public UEAssistanceInformation_v1610_IEs_nonCriticalExtension nonCriticalExtension;  // optional

   public UEAssistanceInformation_v1610_IEs () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public UEAssistanceInformation_v1610_IEs (
      IDC_Assistance_r16 idc_Assistance_r16_,
      DRX_Preference_r16 drx_Preference_r16_,
      MaxBW_Preference_r16 maxBW_Preference_r16_,
      MaxCC_Preference_r16 maxCC_Preference_r16_,
      MaxMIMO_LayerPreference_r16 maxMIMO_LayerPreference_r16_,
      MinSchedulingOffsetPreference_r16 minSchedulingOffsetPreference_r16_,
      ReleasePreference_r16 releasePreference_r16_,
      SL_UE_AssistanceInformationNR_r16 sl_UE_AssistanceInformationNR_r16_,
      Asn1Boolean referenceTimeInfoPreference_r16_,
      UEAssistanceInformation_v1610_IEs_nonCriticalExtension nonCriticalExtension_
   ) {
      super();
      idc_Assistance_r16 = idc_Assistance_r16_;
      drx_Preference_r16 = drx_Preference_r16_;
      maxBW_Preference_r16 = maxBW_Preference_r16_;
      maxCC_Preference_r16 = maxCC_Preference_r16_;
      maxMIMO_LayerPreference_r16 = maxMIMO_LayerPreference_r16_;
      minSchedulingOffsetPreference_r16 = minSchedulingOffsetPreference_r16_;
      releasePreference_r16 = releasePreference_r16_;
      sl_UE_AssistanceInformationNR_r16 = sl_UE_AssistanceInformationNR_r16_;
      referenceTimeInfoPreference_r16 = referenceTimeInfoPreference_r16_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public UEAssistanceInformation_v1610_IEs (IDC_Assistance_r16 idc_Assistance_r16_,
      DRX_Preference_r16 drx_Preference_r16_,
      MaxBW_Preference_r16 maxBW_Preference_r16_,
      MaxCC_Preference_r16 maxCC_Preference_r16_,
      MaxMIMO_LayerPreference_r16 maxMIMO_LayerPreference_r16_,
      MinSchedulingOffsetPreference_r16 minSchedulingOffsetPreference_r16_,
      ReleasePreference_r16 releasePreference_r16_,
      SL_UE_AssistanceInformationNR_r16 sl_UE_AssistanceInformationNR_r16_,
      boolean referenceTimeInfoPreference_r16_,
      UEAssistanceInformation_v1610_IEs_nonCriticalExtension nonCriticalExtension_
   ) {
      super();
      idc_Assistance_r16 = idc_Assistance_r16_;
      drx_Preference_r16 = drx_Preference_r16_;
      maxBW_Preference_r16 = maxBW_Preference_r16_;
      maxCC_Preference_r16 = maxCC_Preference_r16_;
      maxMIMO_LayerPreference_r16 = maxMIMO_LayerPreference_r16_;
      minSchedulingOffsetPreference_r16 = minSchedulingOffsetPreference_r16_;
      releasePreference_r16 = releasePreference_r16_;
      sl_UE_AssistanceInformationNR_r16 = sl_UE_AssistanceInformationNR_r16_;
      referenceTimeInfoPreference_r16 = new Asn1Boolean (referenceTimeInfoPreference_r16_);
      nonCriticalExtension = nonCriticalExtension_;
   }

   public void init () {
      idc_Assistance_r16 = null;
      drx_Preference_r16 = null;
      maxBW_Preference_r16 = null;
      maxCC_Preference_r16 = null;
      maxMIMO_LayerPreference_r16 = null;
      minSchedulingOffsetPreference_r16 = null;
      releasePreference_r16 = null;
      sl_UE_AssistanceInformationNR_r16 = null;
      referenceTimeInfoPreference_r16 = null;
      nonCriticalExtension = null;
   }

   public int getElementCount() { return 10; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return idc_Assistance_r16;
         case 1: return drx_Preference_r16;
         case 2: return maxBW_Preference_r16;
         case 3: return maxCC_Preference_r16;
         case 4: return maxMIMO_LayerPreference_r16;
         case 5: return minSchedulingOffsetPreference_r16;
         case 6: return releasePreference_r16;
         case 7: return sl_UE_AssistanceInformationNR_r16;
         case 8: return referenceTimeInfoPreference_r16;
         case 9: return nonCriticalExtension;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "idc-Assistance-r16";
         case 1: return "drx-Preference-r16";
         case 2: return "maxBW-Preference-r16";
         case 3: return "maxCC-Preference-r16";
         case 4: return "maxMIMO-LayerPreference-r16";
         case 5: return "minSchedulingOffsetPreference-r16";
         case 6: return "releasePreference-r16";
         case 7: return "sl-UE-AssistanceInformationNR-r16";
         case 8: return "referenceTimeInfoPreference-r16";
         case 9: return "nonCriticalExtension";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean idc_Assistance_r16Present = buffer.decodeBit ("idc_Assistance_r16Present");
      boolean drx_Preference_r16Present = buffer.decodeBit ("drx_Preference_r16Present");
      boolean maxBW_Preference_r16Present = buffer.decodeBit ("maxBW_Preference_r16Present");
      boolean maxCC_Preference_r16Present = buffer.decodeBit ("maxCC_Preference_r16Present");
      boolean maxMIMO_LayerPreference_r16Present = buffer.decodeBit ("maxMIMO_LayerPreference_r16Present");
      boolean minSchedulingOffsetPreference_r16Present = buffer.decodeBit ("minSchedulingOffsetPreference_r16Present");
      boolean releasePreference_r16Present = buffer.decodeBit ("releasePreference_r16Present");
      boolean sl_UE_AssistanceInformationNR_r16Present = buffer.decodeBit ("sl_UE_AssistanceInformationNR_r16Present");
      boolean referenceTimeInfoPreference_r16Present = buffer.decodeBit ("referenceTimeInfoPreference_r16Present");
      boolean nonCriticalExtensionPresent = buffer.decodeBit ("nonCriticalExtensionPresent");

      // decode idc_Assistance_r16

      if (idc_Assistance_r16Present) {
         buffer.getContext().eventDispatcher.startElement("idc_Assistance_r16", -1);

         idc_Assistance_r16 = new IDC_Assistance_r16();
         idc_Assistance_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("idc_Assistance_r16", -1);
      }
      else {
         idc_Assistance_r16 = null;
      }

      // decode drx_Preference_r16

      if (drx_Preference_r16Present) {
         buffer.getContext().eventDispatcher.startElement("drx_Preference_r16", -1);

         drx_Preference_r16 = new DRX_Preference_r16();
         drx_Preference_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("drx_Preference_r16", -1);
      }
      else {
         drx_Preference_r16 = null;
      }

      // decode maxBW_Preference_r16

      if (maxBW_Preference_r16Present) {
         buffer.getContext().eventDispatcher.startElement("maxBW_Preference_r16", -1);

         maxBW_Preference_r16 = new MaxBW_Preference_r16();
         maxBW_Preference_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("maxBW_Preference_r16", -1);
      }
      else {
         maxBW_Preference_r16 = null;
      }

      // decode maxCC_Preference_r16

      if (maxCC_Preference_r16Present) {
         buffer.getContext().eventDispatcher.startElement("maxCC_Preference_r16", -1);

         maxCC_Preference_r16 = new MaxCC_Preference_r16();
         maxCC_Preference_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("maxCC_Preference_r16", -1);
      }
      else {
         maxCC_Preference_r16 = null;
      }

      // decode maxMIMO_LayerPreference_r16

      if (maxMIMO_LayerPreference_r16Present) {
         buffer.getContext().eventDispatcher.startElement("maxMIMO_LayerPreference_r16", -1);

         maxMIMO_LayerPreference_r16 = new MaxMIMO_LayerPreference_r16();
         maxMIMO_LayerPreference_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("maxMIMO_LayerPreference_r16", -1);
      }
      else {
         maxMIMO_LayerPreference_r16 = null;
      }

      // decode minSchedulingOffsetPreference_r16

      if (minSchedulingOffsetPreference_r16Present) {
         buffer.getContext().eventDispatcher.startElement("minSchedulingOffsetPreference_r16", -1);

         minSchedulingOffsetPreference_r16 = new MinSchedulingOffsetPreference_r16();
         minSchedulingOffsetPreference_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("minSchedulingOffsetPreference_r16", -1);
      }
      else {
         minSchedulingOffsetPreference_r16 = null;
      }

      // decode releasePreference_r16

      if (releasePreference_r16Present) {
         buffer.getContext().eventDispatcher.startElement("releasePreference_r16", -1);

         releasePreference_r16 = new ReleasePreference_r16();
         releasePreference_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("releasePreference_r16", -1);
      }
      else {
         releasePreference_r16 = null;
      }

      // decode sl_UE_AssistanceInformationNR_r16

      if (sl_UE_AssistanceInformationNR_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_UE_AssistanceInformationNR_r16", -1);

         sl_UE_AssistanceInformationNR_r16 = new SL_UE_AssistanceInformationNR_r16();
         sl_UE_AssistanceInformationNR_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sl_UE_AssistanceInformationNR_r16", -1);
      }
      else {
         sl_UE_AssistanceInformationNR_r16 = null;
      }

      // decode referenceTimeInfoPreference_r16

      if (referenceTimeInfoPreference_r16Present) {
         buffer.getContext().eventDispatcher.startElement("referenceTimeInfoPreference_r16", -1);

         referenceTimeInfoPreference_r16 = new Asn1Boolean();
         referenceTimeInfoPreference_r16.decode (buffer);

         buffer.invokeCharacters(referenceTimeInfoPreference_r16.toString());
         buffer.getContext().eventDispatcher.endElement("referenceTimeInfoPreference_r16", -1);
      }
      else {
         referenceTimeInfoPreference_r16 = null;
      }

      // decode nonCriticalExtension

      if (nonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension = new UEAssistanceInformation_v1610_IEs_nonCriticalExtension();
         nonCriticalExtension.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }
      else {
         nonCriticalExtension = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((idc_Assistance_r16 != null), null);
      buffer.encodeBit ((drx_Preference_r16 != null), null);
      buffer.encodeBit ((maxBW_Preference_r16 != null), null);
      buffer.encodeBit ((maxCC_Preference_r16 != null), null);
      buffer.encodeBit ((maxMIMO_LayerPreference_r16 != null), null);
      buffer.encodeBit ((minSchedulingOffsetPreference_r16 != null), null);
      buffer.encodeBit ((releasePreference_r16 != null), null);
      buffer.encodeBit ((sl_UE_AssistanceInformationNR_r16 != null), null);
      buffer.encodeBit ((referenceTimeInfoPreference_r16 != null), null);
      buffer.encodeBit ((nonCriticalExtension != null), null);

      // encode idc_Assistance_r16

      if (idc_Assistance_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("idc_Assistance_r16", -1);

         idc_Assistance_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("idc_Assistance_r16", -1);
      }

      // encode drx_Preference_r16

      if (drx_Preference_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("drx_Preference_r16", -1);

         drx_Preference_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("drx_Preference_r16", -1);
      }

      // encode maxBW_Preference_r16

      if (maxBW_Preference_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("maxBW_Preference_r16", -1);

         maxBW_Preference_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("maxBW_Preference_r16", -1);
      }

      // encode maxCC_Preference_r16

      if (maxCC_Preference_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("maxCC_Preference_r16", -1);

         maxCC_Preference_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("maxCC_Preference_r16", -1);
      }

      // encode maxMIMO_LayerPreference_r16

      if (maxMIMO_LayerPreference_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("maxMIMO_LayerPreference_r16", -1);

         maxMIMO_LayerPreference_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("maxMIMO_LayerPreference_r16", -1);
      }

      // encode minSchedulingOffsetPreference_r16

      if (minSchedulingOffsetPreference_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("minSchedulingOffsetPreference_r16", -1);

         minSchedulingOffsetPreference_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("minSchedulingOffsetPreference_r16", -1);
      }

      // encode releasePreference_r16

      if (releasePreference_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("releasePreference_r16", -1);

         releasePreference_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("releasePreference_r16", -1);
      }

      // encode sl_UE_AssistanceInformationNR_r16

      if (sl_UE_AssistanceInformationNR_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_UE_AssistanceInformationNR_r16", -1);

         sl_UE_AssistanceInformationNR_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sl_UE_AssistanceInformationNR_r16", -1);
      }

      // encode referenceTimeInfoPreference_r16

      if (referenceTimeInfoPreference_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("referenceTimeInfoPreference_r16", -1);

         referenceTimeInfoPreference_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("referenceTimeInfoPreference_r16", -1);
      }

      // encode nonCriticalExtension

      if (nonCriticalExtension != null) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (idc_Assistance_r16 != null) idc_Assistance_r16.print (_sb, "idc_Assistance_r16", _level+1);
      if (drx_Preference_r16 != null) drx_Preference_r16.print (_sb, "drx_Preference_r16", _level+1);
      if (maxBW_Preference_r16 != null) maxBW_Preference_r16.print (_sb, "maxBW_Preference_r16", _level+1);
      if (maxCC_Preference_r16 != null) maxCC_Preference_r16.print (_sb, "maxCC_Preference_r16", _level+1);
      if (maxMIMO_LayerPreference_r16 != null) maxMIMO_LayerPreference_r16.print (_sb, "maxMIMO_LayerPreference_r16", _level+1);
      if (minSchedulingOffsetPreference_r16 != null) minSchedulingOffsetPreference_r16.print (_sb, "minSchedulingOffsetPreference_r16", _level+1);
      if (releasePreference_r16 != null) releasePreference_r16.print (_sb, "releasePreference_r16", _level+1);
      if (sl_UE_AssistanceInformationNR_r16 != null) sl_UE_AssistanceInformationNR_r16.print (_sb, "sl_UE_AssistanceInformationNR_r16", _level+1);
      if (referenceTimeInfoPreference_r16 != null) referenceTimeInfoPreference_r16.print (_sb, "referenceTimeInfoPreference_r16", _level+1);
      if (nonCriticalExtension != null) nonCriticalExtension.print (_sb, "nonCriticalExtension", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
