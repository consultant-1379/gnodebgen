/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class Phy_ParametersCommon extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "Phy-ParametersCommon";
   }

   public Phy_ParametersCommon_csi_RS_CFRA_ForHO csi_RS_CFRA_ForHO = null;  // optional
   public Phy_ParametersCommon_dynamicPRB_BundlingDL dynamicPRB_BundlingDL = null;  // optional
   public Phy_ParametersCommon_sp_CSI_ReportPUCCH sp_CSI_ReportPUCCH = null;  // optional
   public Phy_ParametersCommon_sp_CSI_ReportPUSCH sp_CSI_ReportPUSCH = null;  // optional
   public Phy_ParametersCommon_nzp_CSI_RS_IntefMgmt nzp_CSI_RS_IntefMgmt = null;  // optional
   public Phy_ParametersCommon_type2_SP_CSI_Feedback_LongPUCCH type2_SP_CSI_Feedback_LongPUCCH = null;  // optional
   public Phy_ParametersCommon_precoderGranularityCORESET precoderGranularityCORESET = null;  // optional
   public Phy_ParametersCommon_dynamicHARQ_ACK_Codebook dynamicHARQ_ACK_Codebook = null;  // optional
   public Phy_ParametersCommon_semiStaticHARQ_ACK_Codebook semiStaticHARQ_ACK_Codebook = null;  // optional
   public Phy_ParametersCommon_spatialBundlingHARQ_ACK spatialBundlingHARQ_ACK = null;  // optional
   public Phy_ParametersCommon_dynamicBetaOffsetInd_HARQ_ACK_CSI dynamicBetaOffsetInd_HARQ_ACK_CSI = null;  // optional
   public Phy_ParametersCommon_pucch_Repetition_F1_3_4 pucch_Repetition_F1_3_4 = null;  // optional
   public Phy_ParametersCommon_ra_Type0_PUSCH ra_Type0_PUSCH = null;  // optional
   public Phy_ParametersCommon_dynamicSwitchRA_Type0_1_PDSCH dynamicSwitchRA_Type0_1_PDSCH = null;  // optional
   public Phy_ParametersCommon_dynamicSwitchRA_Type0_1_PUSCH dynamicSwitchRA_Type0_1_PUSCH = null;  // optional
   public Phy_ParametersCommon_pdsch_MappingTypeA pdsch_MappingTypeA = null;  // optional
   public Phy_ParametersCommon_pdsch_MappingTypeB pdsch_MappingTypeB = null;  // optional
   public Phy_ParametersCommon_interleavingVRB_ToPRB_PDSCH interleavingVRB_ToPRB_PDSCH = null;  // optional
   public Phy_ParametersCommon_interSlotFreqHopping_PUSCH interSlotFreqHopping_PUSCH = null;  // optional
   public Phy_ParametersCommon_type1_PUSCH_RepetitionMultiSlots type1_PUSCH_RepetitionMultiSlots = null;  // optional
   public Phy_ParametersCommon_type2_PUSCH_RepetitionMultiSlots type2_PUSCH_RepetitionMultiSlots = null;  // optional
   public Phy_ParametersCommon_pusch_RepetitionMultiSlots pusch_RepetitionMultiSlots = null;  // optional
   public Phy_ParametersCommon_pdsch_RepetitionMultiSlots pdsch_RepetitionMultiSlots = null;  // optional
   public Phy_ParametersCommon_downlinkSPS downlinkSPS = null;  // optional
   public Phy_ParametersCommon_configuredUL_GrantType1 configuredUL_GrantType1 = null;  // optional
   public Phy_ParametersCommon_configuredUL_GrantType2 configuredUL_GrantType2 = null;  // optional
   public Phy_ParametersCommon_pre_EmptIndication_DL pre_EmptIndication_DL = null;  // optional
   public Phy_ParametersCommon_cbg_TransIndication_DL cbg_TransIndication_DL = null;  // optional
   public Phy_ParametersCommon_cbg_TransIndication_UL cbg_TransIndication_UL = null;  // optional
   public Phy_ParametersCommon_cbg_FlushIndication_DL cbg_FlushIndication_DL = null;  // optional
   public Phy_ParametersCommon_dynamicHARQ_ACK_CodeB_CBG_Retx_DL dynamicHARQ_ACK_CodeB_CBG_Retx_DL = null;  // optional
   public Phy_ParametersCommon_rateMatchingResrcSetSemi_Static rateMatchingResrcSetSemi_Static = null;  // optional
   public Phy_ParametersCommon_rateMatchingResrcSetDynamic rateMatchingResrcSetDynamic = null;  // optional
   public Phy_ParametersCommon_bwp_SwitchingDelay bwp_SwitchingDelay = null;  // optional
   public boolean mV2ExtPresent;
   public Phy_ParametersCommon_dummy dummy = null;  // optional
   public boolean mV3ExtPresent;
   public Phy_ParametersCommon_maxNumberSearchSpaces maxNumberSearchSpaces = null;  // optional
   public Phy_ParametersCommon_rateMatchingCtrlResrcSetDynamic rateMatchingCtrlResrcSetDynamic = null;  // optional
   public Phy_ParametersCommon_maxLayersMIMO_Indication maxLayersMIMO_Indication = null;  // optional
   public boolean mV4ExtPresent;
   public CarrierAggregationVariant spCellPlacement;  // optional
   public boolean mV5ExtPresent;
   public Phy_ParametersCommon_twoStepRACH_r16 twoStepRACH_r16 = null;  // optional
   public Phy_ParametersCommon_dci_Format1_2And0_2_r16 dci_Format1_2And0_2_r16 = null;  // optional
   public Phy_ParametersCommon_monitoringDCI_SameSearchSpace_r16 monitoringDCI_SameSearchSpace_r16 = null;  // optional
   public Phy_ParametersCommon_type2_CG_ReleaseDCI_0_1_r16 type2_CG_ReleaseDCI_0_1_r16 = null;  // optional
   public Phy_ParametersCommon_type2_CG_ReleaseDCI_0_2_r16 type2_CG_ReleaseDCI_0_2_r16 = null;  // optional
   public Phy_ParametersCommon_sps_ReleaseDCI_1_1_r16 sps_ReleaseDCI_1_1_r16 = null;  // optional
   public Phy_ParametersCommon_sps_ReleaseDCI_1_2_r16 sps_ReleaseDCI_1_2_r16 = null;  // optional
   public Phy_ParametersCommon_csi_TriggerStateNon_ActiveBWP_r16 csi_TriggerStateNon_ActiveBWP_r16 = null;  // optional
   public Phy_ParametersCommon_seperateSMTC_InterIAB_Support_r16 seperateSMTC_InterIAB_Support_r16 = null;  // optional
   public Phy_ParametersCommon_seperateRACH_IAB_Support_r16 seperateRACH_IAB_Support_r16 = null;  // optional
   public Phy_ParametersCommon_ul_flexibleDL_SlotFormatSemiStatic_IAB_r16 ul_flexibleDL_SlotFormatSemiStatic_IAB_r16 = null;  // optional
   public Phy_ParametersCommon_ul_flexibleDL_SlotFormatDynamics_IAB_r16 ul_flexibleDL_SlotFormatDynamics_IAB_r16 = null;  // optional
   public Phy_ParametersCommon_dft_S_OFDM_WaveformUL_IAB_r16 dft_S_OFDM_WaveformUL_IAB_r16 = null;  // optional
   public Phy_ParametersCommon_dci_25_AI_RNTI_Support_IAB_r16 dci_25_AI_RNTI_Support_IAB_r16 = null;  // optional
   public Phy_ParametersCommon_t_DeltaReceptionSupport_IAB_r16 t_DeltaReceptionSupport_IAB_r16 = null;  // optional
   public Phy_ParametersCommon_guardSymbolReportReception_IAB_r16 guardSymbolReportReception_IAB_r16 = null;  // optional
   public Phy_ParametersCommon_harqACK_CB_SpatialBundlingPUCCH_Group_r16 harqACK_CB_SpatialBundlingPUCCH_Group_r16 = null;  // optional
   public Phy_ParametersCommon_crossSlotScheduling_r16 crossSlotScheduling_r16;  // optional
   public Phy_ParametersCommon_maxNumberSRS_PosPathLossEstimateAllServingCells_r16 maxNumberSRS_PosPathLossEstimateAllServingCells_r16 = null;  // optional
   public Phy_ParametersCommon_extendedCG_Periodicities_r16 extendedCG_Periodicities_r16 = null;  // optional
   public Phy_ParametersCommon_extendedSPS_Periodicities_r16 extendedSPS_Periodicities_r16 = null;  // optional
   public CodebookVariantsList_r16 codebookVariantsList_r16;  // optional
   public Phy_ParametersCommon_pusch_RepetitionTypeA_r16 pusch_RepetitionTypeA_r16;  // optional
   public Phy_ParametersCommon_dci_DL_PriorityIndicator_r16 dci_DL_PriorityIndicator_r16 = null;  // optional
   public Phy_ParametersCommon_dci_UL_PriorityIndicator_r16 dci_UL_PriorityIndicator_r16 = null;  // optional
   public Phy_ParametersCommon_maxNumberPathlossRS_Update_r16 maxNumberPathlossRS_Update_r16 = null;  // optional
   public Phy_ParametersCommon_type2_HARQ_ACK_Codebook_r16 type2_HARQ_ACK_Codebook_r16 = null;  // optional
   public Phy_ParametersCommon_maxTotalResourcesForAcrossFreqRanges_r16 maxTotalResourcesForAcrossFreqRanges_r16;  // optional
   public Phy_ParametersCommon_harqACK_separateMultiDCI_MultiTRP_r16 harqACK_separateMultiDCI_MultiTRP_r16;  // optional
   public Phy_ParametersCommon_harqACK_jointMultiDCI_MultiTRP_r16 harqACK_jointMultiDCI_MultiTRP_r16 = null;  // optional
   public Phy_ParametersCommon_bwp_SwitchingMultiCCs_r16 bwp_SwitchingMultiCCs_r16;  // optional
   public boolean mV6ExtPresent;
   public Phy_ParametersCommon_targetSMTC_SCG_r16 targetSMTC_SCG_r16 = null;  // optional
   public Phy_ParametersCommon_supportRepetitionZeroOffsetRV_r16 supportRepetitionZeroOffsetRV_r16 = null;  // optional
   public Phy_ParametersCommon_cbg_TransInOrderPUSCH_UL_r16 cbg_TransInOrderPUSCH_UL_r16 = null;  // optional
   public boolean mV7ExtPresent;
   public Phy_ParametersCommon_bwp_SwitchingMultiDormancyCCs_r16 bwp_SwitchingMultiDormancyCCs_r16;  // optional
   public Phy_ParametersCommon_supportRetx_Diff_CoresetPool_Multi_DCI_TRP_r16 supportRetx_Diff_CoresetPool_Multi_DCI_TRP_r16 = null;  // optional
   public Phy_ParametersCommon_pdcch_MonitoringAnyOccasionsWithSpanGapCrossCarrierSch_r16 pdcch_MonitoringAnyOccasionsWithSpanGapCrossCarrierSch_r16 = null;  // optional
   public Asn1OpenExt extElem1;

   public Phy_ParametersCommon () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public Phy_ParametersCommon (
      Phy_ParametersCommon_csi_RS_CFRA_ForHO csi_RS_CFRA_ForHO_,
      Phy_ParametersCommon_dynamicPRB_BundlingDL dynamicPRB_BundlingDL_,
      Phy_ParametersCommon_sp_CSI_ReportPUCCH sp_CSI_ReportPUCCH_,
      Phy_ParametersCommon_sp_CSI_ReportPUSCH sp_CSI_ReportPUSCH_,
      Phy_ParametersCommon_nzp_CSI_RS_IntefMgmt nzp_CSI_RS_IntefMgmt_,
      Phy_ParametersCommon_type2_SP_CSI_Feedback_LongPUCCH type2_SP_CSI_Feedback_LongPUCCH_,
      Phy_ParametersCommon_precoderGranularityCORESET precoderGranularityCORESET_,
      Phy_ParametersCommon_dynamicHARQ_ACK_Codebook dynamicHARQ_ACK_Codebook_,
      Phy_ParametersCommon_semiStaticHARQ_ACK_Codebook semiStaticHARQ_ACK_Codebook_,
      Phy_ParametersCommon_spatialBundlingHARQ_ACK spatialBundlingHARQ_ACK_,
      Phy_ParametersCommon_dynamicBetaOffsetInd_HARQ_ACK_CSI dynamicBetaOffsetInd_HARQ_ACK_CSI_,
      Phy_ParametersCommon_pucch_Repetition_F1_3_4 pucch_Repetition_F1_3_4_,
      Phy_ParametersCommon_ra_Type0_PUSCH ra_Type0_PUSCH_,
      Phy_ParametersCommon_dynamicSwitchRA_Type0_1_PDSCH dynamicSwitchRA_Type0_1_PDSCH_,
      Phy_ParametersCommon_dynamicSwitchRA_Type0_1_PUSCH dynamicSwitchRA_Type0_1_PUSCH_,
      Phy_ParametersCommon_pdsch_MappingTypeA pdsch_MappingTypeA_,
      Phy_ParametersCommon_pdsch_MappingTypeB pdsch_MappingTypeB_,
      Phy_ParametersCommon_interleavingVRB_ToPRB_PDSCH interleavingVRB_ToPRB_PDSCH_,
      Phy_ParametersCommon_interSlotFreqHopping_PUSCH interSlotFreqHopping_PUSCH_,
      Phy_ParametersCommon_type1_PUSCH_RepetitionMultiSlots type1_PUSCH_RepetitionMultiSlots_,
      Phy_ParametersCommon_type2_PUSCH_RepetitionMultiSlots type2_PUSCH_RepetitionMultiSlots_,
      Phy_ParametersCommon_pusch_RepetitionMultiSlots pusch_RepetitionMultiSlots_,
      Phy_ParametersCommon_pdsch_RepetitionMultiSlots pdsch_RepetitionMultiSlots_,
      Phy_ParametersCommon_downlinkSPS downlinkSPS_,
      Phy_ParametersCommon_configuredUL_GrantType1 configuredUL_GrantType1_,
      Phy_ParametersCommon_configuredUL_GrantType2 configuredUL_GrantType2_,
      Phy_ParametersCommon_pre_EmptIndication_DL pre_EmptIndication_DL_,
      Phy_ParametersCommon_cbg_TransIndication_DL cbg_TransIndication_DL_,
      Phy_ParametersCommon_cbg_TransIndication_UL cbg_TransIndication_UL_,
      Phy_ParametersCommon_cbg_FlushIndication_DL cbg_FlushIndication_DL_,
      Phy_ParametersCommon_dynamicHARQ_ACK_CodeB_CBG_Retx_DL dynamicHARQ_ACK_CodeB_CBG_Retx_DL_,
      Phy_ParametersCommon_rateMatchingResrcSetSemi_Static rateMatchingResrcSetSemi_Static_,
      Phy_ParametersCommon_rateMatchingResrcSetDynamic rateMatchingResrcSetDynamic_,
      Phy_ParametersCommon_bwp_SwitchingDelay bwp_SwitchingDelay_,
      Phy_ParametersCommon_dummy dummy_,
      Phy_ParametersCommon_maxNumberSearchSpaces maxNumberSearchSpaces_,
      Phy_ParametersCommon_rateMatchingCtrlResrcSetDynamic rateMatchingCtrlResrcSetDynamic_,
      Phy_ParametersCommon_maxLayersMIMO_Indication maxLayersMIMO_Indication_,
      CarrierAggregationVariant spCellPlacement_,
      Phy_ParametersCommon_twoStepRACH_r16 twoStepRACH_r16_,
      Phy_ParametersCommon_dci_Format1_2And0_2_r16 dci_Format1_2And0_2_r16_,
      Phy_ParametersCommon_monitoringDCI_SameSearchSpace_r16 monitoringDCI_SameSearchSpace_r16_,
      Phy_ParametersCommon_type2_CG_ReleaseDCI_0_1_r16 type2_CG_ReleaseDCI_0_1_r16_,
      Phy_ParametersCommon_type2_CG_ReleaseDCI_0_2_r16 type2_CG_ReleaseDCI_0_2_r16_,
      Phy_ParametersCommon_sps_ReleaseDCI_1_1_r16 sps_ReleaseDCI_1_1_r16_,
      Phy_ParametersCommon_sps_ReleaseDCI_1_2_r16 sps_ReleaseDCI_1_2_r16_,
      Phy_ParametersCommon_csi_TriggerStateNon_ActiveBWP_r16 csi_TriggerStateNon_ActiveBWP_r16_,
      Phy_ParametersCommon_seperateSMTC_InterIAB_Support_r16 seperateSMTC_InterIAB_Support_r16_,
      Phy_ParametersCommon_seperateRACH_IAB_Support_r16 seperateRACH_IAB_Support_r16_,
      Phy_ParametersCommon_ul_flexibleDL_SlotFormatSemiStatic_IAB_r16 ul_flexibleDL_SlotFormatSemiStatic_IAB_r16_,
      Phy_ParametersCommon_ul_flexibleDL_SlotFormatDynamics_IAB_r16 ul_flexibleDL_SlotFormatDynamics_IAB_r16_,
      Phy_ParametersCommon_dft_S_OFDM_WaveformUL_IAB_r16 dft_S_OFDM_WaveformUL_IAB_r16_,
      Phy_ParametersCommon_dci_25_AI_RNTI_Support_IAB_r16 dci_25_AI_RNTI_Support_IAB_r16_,
      Phy_ParametersCommon_t_DeltaReceptionSupport_IAB_r16 t_DeltaReceptionSupport_IAB_r16_,
      Phy_ParametersCommon_guardSymbolReportReception_IAB_r16 guardSymbolReportReception_IAB_r16_,
      Phy_ParametersCommon_harqACK_CB_SpatialBundlingPUCCH_Group_r16 harqACK_CB_SpatialBundlingPUCCH_Group_r16_,
      Phy_ParametersCommon_crossSlotScheduling_r16 crossSlotScheduling_r16_,
      Phy_ParametersCommon_maxNumberSRS_PosPathLossEstimateAllServingCells_r16 maxNumberSRS_PosPathLossEstimateAllServingCells_r16_,
      Phy_ParametersCommon_extendedCG_Periodicities_r16 extendedCG_Periodicities_r16_,
      Phy_ParametersCommon_extendedSPS_Periodicities_r16 extendedSPS_Periodicities_r16_,
      CodebookVariantsList_r16 codebookVariantsList_r16_,
      Phy_ParametersCommon_pusch_RepetitionTypeA_r16 pusch_RepetitionTypeA_r16_,
      Phy_ParametersCommon_dci_DL_PriorityIndicator_r16 dci_DL_PriorityIndicator_r16_,
      Phy_ParametersCommon_dci_UL_PriorityIndicator_r16 dci_UL_PriorityIndicator_r16_,
      Phy_ParametersCommon_maxNumberPathlossRS_Update_r16 maxNumberPathlossRS_Update_r16_,
      Phy_ParametersCommon_type2_HARQ_ACK_Codebook_r16 type2_HARQ_ACK_Codebook_r16_,
      Phy_ParametersCommon_maxTotalResourcesForAcrossFreqRanges_r16 maxTotalResourcesForAcrossFreqRanges_r16_,
      Phy_ParametersCommon_harqACK_separateMultiDCI_MultiTRP_r16 harqACK_separateMultiDCI_MultiTRP_r16_,
      Phy_ParametersCommon_harqACK_jointMultiDCI_MultiTRP_r16 harqACK_jointMultiDCI_MultiTRP_r16_,
      Phy_ParametersCommon_bwp_SwitchingMultiCCs_r16 bwp_SwitchingMultiCCs_r16_,
      Phy_ParametersCommon_targetSMTC_SCG_r16 targetSMTC_SCG_r16_,
      Phy_ParametersCommon_supportRepetitionZeroOffsetRV_r16 supportRepetitionZeroOffsetRV_r16_,
      Phy_ParametersCommon_cbg_TransInOrderPUSCH_UL_r16 cbg_TransInOrderPUSCH_UL_r16_,
      Phy_ParametersCommon_bwp_SwitchingMultiDormancyCCs_r16 bwp_SwitchingMultiDormancyCCs_r16_,
      Phy_ParametersCommon_supportRetx_Diff_CoresetPool_Multi_DCI_TRP_r16 supportRetx_Diff_CoresetPool_Multi_DCI_TRP_r16_,
      Phy_ParametersCommon_pdcch_MonitoringAnyOccasionsWithSpanGapCrossCarrierSch_r16 pdcch_MonitoringAnyOccasionsWithSpanGapCrossCarrierSch_r16_
   ) {
      super();
      csi_RS_CFRA_ForHO = csi_RS_CFRA_ForHO_;
      dynamicPRB_BundlingDL = dynamicPRB_BundlingDL_;
      sp_CSI_ReportPUCCH = sp_CSI_ReportPUCCH_;
      sp_CSI_ReportPUSCH = sp_CSI_ReportPUSCH_;
      nzp_CSI_RS_IntefMgmt = nzp_CSI_RS_IntefMgmt_;
      type2_SP_CSI_Feedback_LongPUCCH = type2_SP_CSI_Feedback_LongPUCCH_;
      precoderGranularityCORESET = precoderGranularityCORESET_;
      dynamicHARQ_ACK_Codebook = dynamicHARQ_ACK_Codebook_;
      semiStaticHARQ_ACK_Codebook = semiStaticHARQ_ACK_Codebook_;
      spatialBundlingHARQ_ACK = spatialBundlingHARQ_ACK_;
      dynamicBetaOffsetInd_HARQ_ACK_CSI = dynamicBetaOffsetInd_HARQ_ACK_CSI_;
      pucch_Repetition_F1_3_4 = pucch_Repetition_F1_3_4_;
      ra_Type0_PUSCH = ra_Type0_PUSCH_;
      dynamicSwitchRA_Type0_1_PDSCH = dynamicSwitchRA_Type0_1_PDSCH_;
      dynamicSwitchRA_Type0_1_PUSCH = dynamicSwitchRA_Type0_1_PUSCH_;
      pdsch_MappingTypeA = pdsch_MappingTypeA_;
      pdsch_MappingTypeB = pdsch_MappingTypeB_;
      interleavingVRB_ToPRB_PDSCH = interleavingVRB_ToPRB_PDSCH_;
      interSlotFreqHopping_PUSCH = interSlotFreqHopping_PUSCH_;
      type1_PUSCH_RepetitionMultiSlots = type1_PUSCH_RepetitionMultiSlots_;
      type2_PUSCH_RepetitionMultiSlots = type2_PUSCH_RepetitionMultiSlots_;
      pusch_RepetitionMultiSlots = pusch_RepetitionMultiSlots_;
      pdsch_RepetitionMultiSlots = pdsch_RepetitionMultiSlots_;
      downlinkSPS = downlinkSPS_;
      configuredUL_GrantType1 = configuredUL_GrantType1_;
      configuredUL_GrantType2 = configuredUL_GrantType2_;
      pre_EmptIndication_DL = pre_EmptIndication_DL_;
      cbg_TransIndication_DL = cbg_TransIndication_DL_;
      cbg_TransIndication_UL = cbg_TransIndication_UL_;
      cbg_FlushIndication_DL = cbg_FlushIndication_DL_;
      dynamicHARQ_ACK_CodeB_CBG_Retx_DL = dynamicHARQ_ACK_CodeB_CBG_Retx_DL_;
      rateMatchingResrcSetSemi_Static = rateMatchingResrcSetSemi_Static_;
      rateMatchingResrcSetDynamic = rateMatchingResrcSetDynamic_;
      bwp_SwitchingDelay = bwp_SwitchingDelay_;
      dummy = dummy_;
      maxNumberSearchSpaces = maxNumberSearchSpaces_;
      rateMatchingCtrlResrcSetDynamic = rateMatchingCtrlResrcSetDynamic_;
      maxLayersMIMO_Indication = maxLayersMIMO_Indication_;
      spCellPlacement = spCellPlacement_;
      twoStepRACH_r16 = twoStepRACH_r16_;
      dci_Format1_2And0_2_r16 = dci_Format1_2And0_2_r16_;
      monitoringDCI_SameSearchSpace_r16 = monitoringDCI_SameSearchSpace_r16_;
      type2_CG_ReleaseDCI_0_1_r16 = type2_CG_ReleaseDCI_0_1_r16_;
      type2_CG_ReleaseDCI_0_2_r16 = type2_CG_ReleaseDCI_0_2_r16_;
      sps_ReleaseDCI_1_1_r16 = sps_ReleaseDCI_1_1_r16_;
      sps_ReleaseDCI_1_2_r16 = sps_ReleaseDCI_1_2_r16_;
      csi_TriggerStateNon_ActiveBWP_r16 = csi_TriggerStateNon_ActiveBWP_r16_;
      seperateSMTC_InterIAB_Support_r16 = seperateSMTC_InterIAB_Support_r16_;
      seperateRACH_IAB_Support_r16 = seperateRACH_IAB_Support_r16_;
      ul_flexibleDL_SlotFormatSemiStatic_IAB_r16 = ul_flexibleDL_SlotFormatSemiStatic_IAB_r16_;
      ul_flexibleDL_SlotFormatDynamics_IAB_r16 = ul_flexibleDL_SlotFormatDynamics_IAB_r16_;
      dft_S_OFDM_WaveformUL_IAB_r16 = dft_S_OFDM_WaveformUL_IAB_r16_;
      dci_25_AI_RNTI_Support_IAB_r16 = dci_25_AI_RNTI_Support_IAB_r16_;
      t_DeltaReceptionSupport_IAB_r16 = t_DeltaReceptionSupport_IAB_r16_;
      guardSymbolReportReception_IAB_r16 = guardSymbolReportReception_IAB_r16_;
      harqACK_CB_SpatialBundlingPUCCH_Group_r16 = harqACK_CB_SpatialBundlingPUCCH_Group_r16_;
      crossSlotScheduling_r16 = crossSlotScheduling_r16_;
      maxNumberSRS_PosPathLossEstimateAllServingCells_r16 = maxNumberSRS_PosPathLossEstimateAllServingCells_r16_;
      extendedCG_Periodicities_r16 = extendedCG_Periodicities_r16_;
      extendedSPS_Periodicities_r16 = extendedSPS_Periodicities_r16_;
      codebookVariantsList_r16 = codebookVariantsList_r16_;
      pusch_RepetitionTypeA_r16 = pusch_RepetitionTypeA_r16_;
      dci_DL_PriorityIndicator_r16 = dci_DL_PriorityIndicator_r16_;
      dci_UL_PriorityIndicator_r16 = dci_UL_PriorityIndicator_r16_;
      maxNumberPathlossRS_Update_r16 = maxNumberPathlossRS_Update_r16_;
      type2_HARQ_ACK_Codebook_r16 = type2_HARQ_ACK_Codebook_r16_;
      maxTotalResourcesForAcrossFreqRanges_r16 = maxTotalResourcesForAcrossFreqRanges_r16_;
      harqACK_separateMultiDCI_MultiTRP_r16 = harqACK_separateMultiDCI_MultiTRP_r16_;
      harqACK_jointMultiDCI_MultiTRP_r16 = harqACK_jointMultiDCI_MultiTRP_r16_;
      bwp_SwitchingMultiCCs_r16 = bwp_SwitchingMultiCCs_r16_;
      targetSMTC_SCG_r16 = targetSMTC_SCG_r16_;
      supportRepetitionZeroOffsetRV_r16 = supportRepetitionZeroOffsetRV_r16_;
      cbg_TransInOrderPUSCH_UL_r16 = cbg_TransInOrderPUSCH_UL_r16_;
      bwp_SwitchingMultiDormancyCCs_r16 = bwp_SwitchingMultiDormancyCCs_r16_;
      supportRetx_Diff_CoresetPool_Multi_DCI_TRP_r16 = supportRetx_Diff_CoresetPool_Multi_DCI_TRP_r16_;
      pdcch_MonitoringAnyOccasionsWithSpanGapCrossCarrierSch_r16 = pdcch_MonitoringAnyOccasionsWithSpanGapCrossCarrierSch_r16_;
   }

   public void init () {
      csi_RS_CFRA_ForHO = null;
      dynamicPRB_BundlingDL = null;
      sp_CSI_ReportPUCCH = null;
      sp_CSI_ReportPUSCH = null;
      nzp_CSI_RS_IntefMgmt = null;
      type2_SP_CSI_Feedback_LongPUCCH = null;
      precoderGranularityCORESET = null;
      dynamicHARQ_ACK_Codebook = null;
      semiStaticHARQ_ACK_Codebook = null;
      spatialBundlingHARQ_ACK = null;
      dynamicBetaOffsetInd_HARQ_ACK_CSI = null;
      pucch_Repetition_F1_3_4 = null;
      ra_Type0_PUSCH = null;
      dynamicSwitchRA_Type0_1_PDSCH = null;
      dynamicSwitchRA_Type0_1_PUSCH = null;
      pdsch_MappingTypeA = null;
      pdsch_MappingTypeB = null;
      interleavingVRB_ToPRB_PDSCH = null;
      interSlotFreqHopping_PUSCH = null;
      type1_PUSCH_RepetitionMultiSlots = null;
      type2_PUSCH_RepetitionMultiSlots = null;
      pusch_RepetitionMultiSlots = null;
      pdsch_RepetitionMultiSlots = null;
      downlinkSPS = null;
      configuredUL_GrantType1 = null;
      configuredUL_GrantType2 = null;
      pre_EmptIndication_DL = null;
      cbg_TransIndication_DL = null;
      cbg_TransIndication_UL = null;
      cbg_FlushIndication_DL = null;
      dynamicHARQ_ACK_CodeB_CBG_Retx_DL = null;
      rateMatchingResrcSetSemi_Static = null;
      rateMatchingResrcSetDynamic = null;
      bwp_SwitchingDelay = null;
      dummy = null;
      maxNumberSearchSpaces = null;
      rateMatchingCtrlResrcSetDynamic = null;
      maxLayersMIMO_Indication = null;
      spCellPlacement = null;
      twoStepRACH_r16 = null;
      dci_Format1_2And0_2_r16 = null;
      monitoringDCI_SameSearchSpace_r16 = null;
      type2_CG_ReleaseDCI_0_1_r16 = null;
      type2_CG_ReleaseDCI_0_2_r16 = null;
      sps_ReleaseDCI_1_1_r16 = null;
      sps_ReleaseDCI_1_2_r16 = null;
      csi_TriggerStateNon_ActiveBWP_r16 = null;
      seperateSMTC_InterIAB_Support_r16 = null;
      seperateRACH_IAB_Support_r16 = null;
      ul_flexibleDL_SlotFormatSemiStatic_IAB_r16 = null;
      ul_flexibleDL_SlotFormatDynamics_IAB_r16 = null;
      dft_S_OFDM_WaveformUL_IAB_r16 = null;
      dci_25_AI_RNTI_Support_IAB_r16 = null;
      t_DeltaReceptionSupport_IAB_r16 = null;
      guardSymbolReportReception_IAB_r16 = null;
      harqACK_CB_SpatialBundlingPUCCH_Group_r16 = null;
      crossSlotScheduling_r16 = null;
      maxNumberSRS_PosPathLossEstimateAllServingCells_r16 = null;
      extendedCG_Periodicities_r16 = null;
      extendedSPS_Periodicities_r16 = null;
      codebookVariantsList_r16 = null;
      pusch_RepetitionTypeA_r16 = null;
      dci_DL_PriorityIndicator_r16 = null;
      dci_UL_PriorityIndicator_r16 = null;
      maxNumberPathlossRS_Update_r16 = null;
      type2_HARQ_ACK_Codebook_r16 = null;
      maxTotalResourcesForAcrossFreqRanges_r16 = null;
      harqACK_separateMultiDCI_MultiTRP_r16 = null;
      harqACK_jointMultiDCI_MultiTRP_r16 = null;
      bwp_SwitchingMultiCCs_r16 = null;
      targetSMTC_SCG_r16 = null;
      supportRepetitionZeroOffsetRV_r16 = null;
      cbg_TransInOrderPUSCH_UL_r16 = null;
      bwp_SwitchingMultiDormancyCCs_r16 = null;
      supportRetx_Diff_CoresetPool_Multi_DCI_TRP_r16 = null;
      pdcch_MonitoringAnyOccasionsWithSpanGapCrossCarrierSch_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 77; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return csi_RS_CFRA_ForHO;
         case 1: return dynamicPRB_BundlingDL;
         case 2: return sp_CSI_ReportPUCCH;
         case 3: return sp_CSI_ReportPUSCH;
         case 4: return nzp_CSI_RS_IntefMgmt;
         case 5: return type2_SP_CSI_Feedback_LongPUCCH;
         case 6: return precoderGranularityCORESET;
         case 7: return dynamicHARQ_ACK_Codebook;
         case 8: return semiStaticHARQ_ACK_Codebook;
         case 9: return spatialBundlingHARQ_ACK;
         case 10: return dynamicBetaOffsetInd_HARQ_ACK_CSI;
         case 11: return pucch_Repetition_F1_3_4;
         case 12: return ra_Type0_PUSCH;
         case 13: return dynamicSwitchRA_Type0_1_PDSCH;
         case 14: return dynamicSwitchRA_Type0_1_PUSCH;
         case 15: return pdsch_MappingTypeA;
         case 16: return pdsch_MappingTypeB;
         case 17: return interleavingVRB_ToPRB_PDSCH;
         case 18: return interSlotFreqHopping_PUSCH;
         case 19: return type1_PUSCH_RepetitionMultiSlots;
         case 20: return type2_PUSCH_RepetitionMultiSlots;
         case 21: return pusch_RepetitionMultiSlots;
         case 22: return pdsch_RepetitionMultiSlots;
         case 23: return downlinkSPS;
         case 24: return configuredUL_GrantType1;
         case 25: return configuredUL_GrantType2;
         case 26: return pre_EmptIndication_DL;
         case 27: return cbg_TransIndication_DL;
         case 28: return cbg_TransIndication_UL;
         case 29: return cbg_FlushIndication_DL;
         case 30: return dynamicHARQ_ACK_CodeB_CBG_Retx_DL;
         case 31: return rateMatchingResrcSetSemi_Static;
         case 32: return rateMatchingResrcSetDynamic;
         case 33: return bwp_SwitchingDelay;
         case 34: return dummy;
         case 35: return maxNumberSearchSpaces;
         case 36: return rateMatchingCtrlResrcSetDynamic;
         case 37: return maxLayersMIMO_Indication;
         case 38: return spCellPlacement;
         case 39: return twoStepRACH_r16;
         case 40: return dci_Format1_2And0_2_r16;
         case 41: return monitoringDCI_SameSearchSpace_r16;
         case 42: return type2_CG_ReleaseDCI_0_1_r16;
         case 43: return type2_CG_ReleaseDCI_0_2_r16;
         case 44: return sps_ReleaseDCI_1_1_r16;
         case 45: return sps_ReleaseDCI_1_2_r16;
         case 46: return csi_TriggerStateNon_ActiveBWP_r16;
         case 47: return seperateSMTC_InterIAB_Support_r16;
         case 48: return seperateRACH_IAB_Support_r16;
         case 49: return ul_flexibleDL_SlotFormatSemiStatic_IAB_r16;
         case 50: return ul_flexibleDL_SlotFormatDynamics_IAB_r16;
         case 51: return dft_S_OFDM_WaveformUL_IAB_r16;
         case 52: return dci_25_AI_RNTI_Support_IAB_r16;
         case 53: return t_DeltaReceptionSupport_IAB_r16;
         case 54: return guardSymbolReportReception_IAB_r16;
         case 55: return harqACK_CB_SpatialBundlingPUCCH_Group_r16;
         case 56: return crossSlotScheduling_r16;
         case 57: return maxNumberSRS_PosPathLossEstimateAllServingCells_r16;
         case 58: return extendedCG_Periodicities_r16;
         case 59: return extendedSPS_Periodicities_r16;
         case 60: return codebookVariantsList_r16;
         case 61: return pusch_RepetitionTypeA_r16;
         case 62: return dci_DL_PriorityIndicator_r16;
         case 63: return dci_UL_PriorityIndicator_r16;
         case 64: return maxNumberPathlossRS_Update_r16;
         case 65: return type2_HARQ_ACK_Codebook_r16;
         case 66: return maxTotalResourcesForAcrossFreqRanges_r16;
         case 67: return harqACK_separateMultiDCI_MultiTRP_r16;
         case 68: return harqACK_jointMultiDCI_MultiTRP_r16;
         case 69: return bwp_SwitchingMultiCCs_r16;
         case 70: return targetSMTC_SCG_r16;
         case 71: return supportRepetitionZeroOffsetRV_r16;
         case 72: return cbg_TransInOrderPUSCH_UL_r16;
         case 73: return bwp_SwitchingMultiDormancyCCs_r16;
         case 74: return supportRetx_Diff_CoresetPool_Multi_DCI_TRP_r16;
         case 75: return pdcch_MonitoringAnyOccasionsWithSpanGapCrossCarrierSch_r16;
         case 76: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "csi-RS-CFRA-ForHO";
         case 1: return "dynamicPRB-BundlingDL";
         case 2: return "sp-CSI-ReportPUCCH";
         case 3: return "sp-CSI-ReportPUSCH";
         case 4: return "nzp-CSI-RS-IntefMgmt";
         case 5: return "type2-SP-CSI-Feedback-LongPUCCH";
         case 6: return "precoderGranularityCORESET";
         case 7: return "dynamicHARQ-ACK-Codebook";
         case 8: return "semiStaticHARQ-ACK-Codebook";
         case 9: return "spatialBundlingHARQ-ACK";
         case 10: return "dynamicBetaOffsetInd-HARQ-ACK-CSI";
         case 11: return "pucch-Repetition-F1-3-4";
         case 12: return "ra-Type0-PUSCH";
         case 13: return "dynamicSwitchRA-Type0-1-PDSCH";
         case 14: return "dynamicSwitchRA-Type0-1-PUSCH";
         case 15: return "pdsch-MappingTypeA";
         case 16: return "pdsch-MappingTypeB";
         case 17: return "interleavingVRB-ToPRB-PDSCH";
         case 18: return "interSlotFreqHopping-PUSCH";
         case 19: return "type1-PUSCH-RepetitionMultiSlots";
         case 20: return "type2-PUSCH-RepetitionMultiSlots";
         case 21: return "pusch-RepetitionMultiSlots";
         case 22: return "pdsch-RepetitionMultiSlots";
         case 23: return "downlinkSPS";
         case 24: return "configuredUL-GrantType1";
         case 25: return "configuredUL-GrantType2";
         case 26: return "pre-EmptIndication-DL";
         case 27: return "cbg-TransIndication-DL";
         case 28: return "cbg-TransIndication-UL";
         case 29: return "cbg-FlushIndication-DL";
         case 30: return "dynamicHARQ-ACK-CodeB-CBG-Retx-DL";
         case 31: return "rateMatchingResrcSetSemi-Static";
         case 32: return "rateMatchingResrcSetDynamic";
         case 33: return "bwp-SwitchingDelay";
         case 34: return "dummy";
         case 35: return "maxNumberSearchSpaces";
         case 36: return "rateMatchingCtrlResrcSetDynamic";
         case 37: return "maxLayersMIMO-Indication";
         case 38: return "spCellPlacement";
         case 39: return "twoStepRACH-r16";
         case 40: return "dci-Format1-2And0-2-r16";
         case 41: return "monitoringDCI-SameSearchSpace-r16";
         case 42: return "type2-CG-ReleaseDCI-0-1-r16";
         case 43: return "type2-CG-ReleaseDCI-0-2-r16";
         case 44: return "sps-ReleaseDCI-1-1-r16";
         case 45: return "sps-ReleaseDCI-1-2-r16";
         case 46: return "csi-TriggerStateNon-ActiveBWP-r16";
         case 47: return "seperateSMTC-InterIAB-Support-r16";
         case 48: return "seperateRACH-IAB-Support-r16";
         case 49: return "ul-flexibleDL-SlotFormatSemiStatic-IAB-r16";
         case 50: return "ul-flexibleDL-SlotFormatDynamics-IAB-r16";
         case 51: return "dft-S-OFDM-WaveformUL-IAB-r16";
         case 52: return "dci-25-AI-RNTI-Support-IAB-r16";
         case 53: return "t-DeltaReceptionSupport-IAB-r16";
         case 54: return "guardSymbolReportReception-IAB-r16";
         case 55: return "harqACK-CB-SpatialBundlingPUCCH-Group-r16";
         case 56: return "crossSlotScheduling-r16";
         case 57: return "maxNumberSRS-PosPathLossEstimateAllServingCells-r16";
         case 58: return "extendedCG-Periodicities-r16";
         case 59: return "extendedSPS-Periodicities-r16";
         case 60: return "codebookVariantsList-r16";
         case 61: return "pusch-RepetitionTypeA-r16";
         case 62: return "dci-DL-PriorityIndicator-r16";
         case 63: return "dci-UL-PriorityIndicator-r16";
         case 64: return "maxNumberPathlossRS-Update-r16";
         case 65: return "type2-HARQ-ACK-Codebook-r16";
         case 66: return "maxTotalResourcesForAcrossFreqRanges-r16";
         case 67: return "harqACK-separateMultiDCI-MultiTRP-r16";
         case 68: return "harqACK-jointMultiDCI-MultiTRP-r16";
         case 69: return "bwp-SwitchingMultiCCs-r16";
         case 70: return "targetSMTC-SCG-r16";
         case 71: return "supportRepetitionZeroOffsetRV-r16";
         case 72: return "cbg-TransInOrderPUSCH-UL-r16";
         case 73: return "bwp-SwitchingMultiDormancyCCs-r16";
         case 74: return "supportRetx-Diff-CoresetPool-Multi-DCI-TRP-r16";
         case 75: return "pdcch-MonitoringAnyOccasionsWithSpanGapCrossCarrierSch-r16";
         case 76: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean csi_RS_CFRA_ForHOPresent = buffer.decodeBit ("csi_RS_CFRA_ForHOPresent");
      boolean dynamicPRB_BundlingDLPresent = buffer.decodeBit ("dynamicPRB_BundlingDLPresent");
      boolean sp_CSI_ReportPUCCHPresent = buffer.decodeBit ("sp_CSI_ReportPUCCHPresent");
      boolean sp_CSI_ReportPUSCHPresent = buffer.decodeBit ("sp_CSI_ReportPUSCHPresent");
      boolean nzp_CSI_RS_IntefMgmtPresent = buffer.decodeBit ("nzp_CSI_RS_IntefMgmtPresent");
      boolean type2_SP_CSI_Feedback_LongPUCCHPresent = buffer.decodeBit ("type2_SP_CSI_Feedback_LongPUCCHPresent");
      boolean precoderGranularityCORESETPresent = buffer.decodeBit ("precoderGranularityCORESETPresent");
      boolean dynamicHARQ_ACK_CodebookPresent = buffer.decodeBit ("dynamicHARQ_ACK_CodebookPresent");
      boolean semiStaticHARQ_ACK_CodebookPresent = buffer.decodeBit ("semiStaticHARQ_ACK_CodebookPresent");
      boolean spatialBundlingHARQ_ACKPresent = buffer.decodeBit ("spatialBundlingHARQ_ACKPresent");
      boolean dynamicBetaOffsetInd_HARQ_ACK_CSIPresent = buffer.decodeBit ("dynamicBetaOffsetInd_HARQ_ACK_CSIPresent");
      boolean pucch_Repetition_F1_3_4Present = buffer.decodeBit ("pucch_Repetition_F1_3_4Present");
      boolean ra_Type0_PUSCHPresent = buffer.decodeBit ("ra_Type0_PUSCHPresent");
      boolean dynamicSwitchRA_Type0_1_PDSCHPresent = buffer.decodeBit ("dynamicSwitchRA_Type0_1_PDSCHPresent");
      boolean dynamicSwitchRA_Type0_1_PUSCHPresent = buffer.decodeBit ("dynamicSwitchRA_Type0_1_PUSCHPresent");
      boolean pdsch_MappingTypeAPresent = buffer.decodeBit ("pdsch_MappingTypeAPresent");
      boolean pdsch_MappingTypeBPresent = buffer.decodeBit ("pdsch_MappingTypeBPresent");
      boolean interleavingVRB_ToPRB_PDSCHPresent = buffer.decodeBit ("interleavingVRB_ToPRB_PDSCHPresent");
      boolean interSlotFreqHopping_PUSCHPresent = buffer.decodeBit ("interSlotFreqHopping_PUSCHPresent");
      boolean type1_PUSCH_RepetitionMultiSlotsPresent = buffer.decodeBit ("type1_PUSCH_RepetitionMultiSlotsPresent");
      boolean type2_PUSCH_RepetitionMultiSlotsPresent = buffer.decodeBit ("type2_PUSCH_RepetitionMultiSlotsPresent");
      boolean pusch_RepetitionMultiSlotsPresent = buffer.decodeBit ("pusch_RepetitionMultiSlotsPresent");
      boolean pdsch_RepetitionMultiSlotsPresent = buffer.decodeBit ("pdsch_RepetitionMultiSlotsPresent");
      boolean downlinkSPSPresent = buffer.decodeBit ("downlinkSPSPresent");
      boolean configuredUL_GrantType1Present = buffer.decodeBit ("configuredUL_GrantType1Present");
      boolean configuredUL_GrantType2Present = buffer.decodeBit ("configuredUL_GrantType2Present");
      boolean pre_EmptIndication_DLPresent = buffer.decodeBit ("pre_EmptIndication_DLPresent");
      boolean cbg_TransIndication_DLPresent = buffer.decodeBit ("cbg_TransIndication_DLPresent");
      boolean cbg_TransIndication_ULPresent = buffer.decodeBit ("cbg_TransIndication_ULPresent");
      boolean cbg_FlushIndication_DLPresent = buffer.decodeBit ("cbg_FlushIndication_DLPresent");
      boolean dynamicHARQ_ACK_CodeB_CBG_Retx_DLPresent = buffer.decodeBit ("dynamicHARQ_ACK_CodeB_CBG_Retx_DLPresent");
      boolean rateMatchingResrcSetSemi_StaticPresent = buffer.decodeBit ("rateMatchingResrcSetSemi_StaticPresent");
      boolean rateMatchingResrcSetDynamicPresent = buffer.decodeBit ("rateMatchingResrcSetDynamicPresent");
      boolean bwp_SwitchingDelayPresent = buffer.decodeBit ("bwp_SwitchingDelayPresent");

      // decode csi_RS_CFRA_ForHO

      if (csi_RS_CFRA_ForHOPresent) {
         buffer.getContext().eventDispatcher.startElement("csi_RS_CFRA_ForHO", -1);

         int tval = Phy_ParametersCommon_csi_RS_CFRA_ForHO.decodeEnumValue (buffer);
         csi_RS_CFRA_ForHO = Phy_ParametersCommon_csi_RS_CFRA_ForHO.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("csi_RS_CFRA_ForHO", -1);
      }
      else {
         csi_RS_CFRA_ForHO = null;
      }

      // decode dynamicPRB_BundlingDL

      if (dynamicPRB_BundlingDLPresent) {
         buffer.getContext().eventDispatcher.startElement("dynamicPRB_BundlingDL", -1);

         int tval = Phy_ParametersCommon_dynamicPRB_BundlingDL.decodeEnumValue (buffer);
         dynamicPRB_BundlingDL = Phy_ParametersCommon_dynamicPRB_BundlingDL.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("dynamicPRB_BundlingDL", -1);
      }
      else {
         dynamicPRB_BundlingDL = null;
      }

      // decode sp_CSI_ReportPUCCH

      if (sp_CSI_ReportPUCCHPresent) {
         buffer.getContext().eventDispatcher.startElement("sp_CSI_ReportPUCCH", -1);

         int tval = Phy_ParametersCommon_sp_CSI_ReportPUCCH.decodeEnumValue (buffer);
         sp_CSI_ReportPUCCH = Phy_ParametersCommon_sp_CSI_ReportPUCCH.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("sp_CSI_ReportPUCCH", -1);
      }
      else {
         sp_CSI_ReportPUCCH = null;
      }

      // decode sp_CSI_ReportPUSCH

      if (sp_CSI_ReportPUSCHPresent) {
         buffer.getContext().eventDispatcher.startElement("sp_CSI_ReportPUSCH", -1);

         int tval = Phy_ParametersCommon_sp_CSI_ReportPUSCH.decodeEnumValue (buffer);
         sp_CSI_ReportPUSCH = Phy_ParametersCommon_sp_CSI_ReportPUSCH.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("sp_CSI_ReportPUSCH", -1);
      }
      else {
         sp_CSI_ReportPUSCH = null;
      }

      // decode nzp_CSI_RS_IntefMgmt

      if (nzp_CSI_RS_IntefMgmtPresent) {
         buffer.getContext().eventDispatcher.startElement("nzp_CSI_RS_IntefMgmt", -1);

         int tval = Phy_ParametersCommon_nzp_CSI_RS_IntefMgmt.decodeEnumValue (buffer);
         nzp_CSI_RS_IntefMgmt = Phy_ParametersCommon_nzp_CSI_RS_IntefMgmt.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("nzp_CSI_RS_IntefMgmt", -1);
      }
      else {
         nzp_CSI_RS_IntefMgmt = null;
      }

      // decode type2_SP_CSI_Feedback_LongPUCCH

      if (type2_SP_CSI_Feedback_LongPUCCHPresent) {
         buffer.getContext().eventDispatcher.startElement("type2_SP_CSI_Feedback_LongPUCCH", -1);

         int tval = Phy_ParametersCommon_type2_SP_CSI_Feedback_LongPUCCH.decodeEnumValue (buffer);
         type2_SP_CSI_Feedback_LongPUCCH = Phy_ParametersCommon_type2_SP_CSI_Feedback_LongPUCCH.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("type2_SP_CSI_Feedback_LongPUCCH", -1);
      }
      else {
         type2_SP_CSI_Feedback_LongPUCCH = null;
      }

      // decode precoderGranularityCORESET

      if (precoderGranularityCORESETPresent) {
         buffer.getContext().eventDispatcher.startElement("precoderGranularityCORESET", -1);

         int tval = Phy_ParametersCommon_precoderGranularityCORESET.decodeEnumValue (buffer);
         precoderGranularityCORESET = Phy_ParametersCommon_precoderGranularityCORESET.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("precoderGranularityCORESET", -1);
      }
      else {
         precoderGranularityCORESET = null;
      }

      // decode dynamicHARQ_ACK_Codebook

      if (dynamicHARQ_ACK_CodebookPresent) {
         buffer.getContext().eventDispatcher.startElement("dynamicHARQ_ACK_Codebook", -1);

         int tval = Phy_ParametersCommon_dynamicHARQ_ACK_Codebook.decodeEnumValue (buffer);
         dynamicHARQ_ACK_Codebook = Phy_ParametersCommon_dynamicHARQ_ACK_Codebook.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("dynamicHARQ_ACK_Codebook", -1);
      }
      else {
         dynamicHARQ_ACK_Codebook = null;
      }

      // decode semiStaticHARQ_ACK_Codebook

      if (semiStaticHARQ_ACK_CodebookPresent) {
         buffer.getContext().eventDispatcher.startElement("semiStaticHARQ_ACK_Codebook", -1);

         int tval = Phy_ParametersCommon_semiStaticHARQ_ACK_Codebook.decodeEnumValue (buffer);
         semiStaticHARQ_ACK_Codebook = Phy_ParametersCommon_semiStaticHARQ_ACK_Codebook.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("semiStaticHARQ_ACK_Codebook", -1);
      }
      else {
         semiStaticHARQ_ACK_Codebook = null;
      }

      // decode spatialBundlingHARQ_ACK

      if (spatialBundlingHARQ_ACKPresent) {
         buffer.getContext().eventDispatcher.startElement("spatialBundlingHARQ_ACK", -1);

         int tval = Phy_ParametersCommon_spatialBundlingHARQ_ACK.decodeEnumValue (buffer);
         spatialBundlingHARQ_ACK = Phy_ParametersCommon_spatialBundlingHARQ_ACK.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("spatialBundlingHARQ_ACK", -1);
      }
      else {
         spatialBundlingHARQ_ACK = null;
      }

      // decode dynamicBetaOffsetInd_HARQ_ACK_CSI

      if (dynamicBetaOffsetInd_HARQ_ACK_CSIPresent) {
         buffer.getContext().eventDispatcher.startElement("dynamicBetaOffsetInd_HARQ_ACK_CSI", -1);

         int tval = Phy_ParametersCommon_dynamicBetaOffsetInd_HARQ_ACK_CSI.decodeEnumValue (buffer);
         dynamicBetaOffsetInd_HARQ_ACK_CSI = Phy_ParametersCommon_dynamicBetaOffsetInd_HARQ_ACK_CSI.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("dynamicBetaOffsetInd_HARQ_ACK_CSI", -1);
      }
      else {
         dynamicBetaOffsetInd_HARQ_ACK_CSI = null;
      }

      // decode pucch_Repetition_F1_3_4

      if (pucch_Repetition_F1_3_4Present) {
         buffer.getContext().eventDispatcher.startElement("pucch_Repetition_F1_3_4", -1);

         int tval = Phy_ParametersCommon_pucch_Repetition_F1_3_4.decodeEnumValue (buffer);
         pucch_Repetition_F1_3_4 = Phy_ParametersCommon_pucch_Repetition_F1_3_4.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("pucch_Repetition_F1_3_4", -1);
      }
      else {
         pucch_Repetition_F1_3_4 = null;
      }

      // decode ra_Type0_PUSCH

      if (ra_Type0_PUSCHPresent) {
         buffer.getContext().eventDispatcher.startElement("ra_Type0_PUSCH", -1);

         int tval = Phy_ParametersCommon_ra_Type0_PUSCH.decodeEnumValue (buffer);
         ra_Type0_PUSCH = Phy_ParametersCommon_ra_Type0_PUSCH.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("ra_Type0_PUSCH", -1);
      }
      else {
         ra_Type0_PUSCH = null;
      }

      // decode dynamicSwitchRA_Type0_1_PDSCH

      if (dynamicSwitchRA_Type0_1_PDSCHPresent) {
         buffer.getContext().eventDispatcher.startElement("dynamicSwitchRA_Type0_1_PDSCH", -1);

         int tval = Phy_ParametersCommon_dynamicSwitchRA_Type0_1_PDSCH.decodeEnumValue (buffer);
         dynamicSwitchRA_Type0_1_PDSCH = Phy_ParametersCommon_dynamicSwitchRA_Type0_1_PDSCH.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("dynamicSwitchRA_Type0_1_PDSCH", -1);
      }
      else {
         dynamicSwitchRA_Type0_1_PDSCH = null;
      }

      // decode dynamicSwitchRA_Type0_1_PUSCH

      if (dynamicSwitchRA_Type0_1_PUSCHPresent) {
         buffer.getContext().eventDispatcher.startElement("dynamicSwitchRA_Type0_1_PUSCH", -1);

         int tval = Phy_ParametersCommon_dynamicSwitchRA_Type0_1_PUSCH.decodeEnumValue (buffer);
         dynamicSwitchRA_Type0_1_PUSCH = Phy_ParametersCommon_dynamicSwitchRA_Type0_1_PUSCH.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("dynamicSwitchRA_Type0_1_PUSCH", -1);
      }
      else {
         dynamicSwitchRA_Type0_1_PUSCH = null;
      }

      // decode pdsch_MappingTypeA

      if (pdsch_MappingTypeAPresent) {
         buffer.getContext().eventDispatcher.startElement("pdsch_MappingTypeA", -1);

         int tval = Phy_ParametersCommon_pdsch_MappingTypeA.decodeEnumValue (buffer);
         pdsch_MappingTypeA = Phy_ParametersCommon_pdsch_MappingTypeA.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("pdsch_MappingTypeA", -1);
      }
      else {
         pdsch_MappingTypeA = null;
      }

      // decode pdsch_MappingTypeB

      if (pdsch_MappingTypeBPresent) {
         buffer.getContext().eventDispatcher.startElement("pdsch_MappingTypeB", -1);

         int tval = Phy_ParametersCommon_pdsch_MappingTypeB.decodeEnumValue (buffer);
         pdsch_MappingTypeB = Phy_ParametersCommon_pdsch_MappingTypeB.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("pdsch_MappingTypeB", -1);
      }
      else {
         pdsch_MappingTypeB = null;
      }

      // decode interleavingVRB_ToPRB_PDSCH

      if (interleavingVRB_ToPRB_PDSCHPresent) {
         buffer.getContext().eventDispatcher.startElement("interleavingVRB_ToPRB_PDSCH", -1);

         int tval = Phy_ParametersCommon_interleavingVRB_ToPRB_PDSCH.decodeEnumValue (buffer);
         interleavingVRB_ToPRB_PDSCH = Phy_ParametersCommon_interleavingVRB_ToPRB_PDSCH.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("interleavingVRB_ToPRB_PDSCH", -1);
      }
      else {
         interleavingVRB_ToPRB_PDSCH = null;
      }

      // decode interSlotFreqHopping_PUSCH

      if (interSlotFreqHopping_PUSCHPresent) {
         buffer.getContext().eventDispatcher.startElement("interSlotFreqHopping_PUSCH", -1);

         int tval = Phy_ParametersCommon_interSlotFreqHopping_PUSCH.decodeEnumValue (buffer);
         interSlotFreqHopping_PUSCH = Phy_ParametersCommon_interSlotFreqHopping_PUSCH.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("interSlotFreqHopping_PUSCH", -1);
      }
      else {
         interSlotFreqHopping_PUSCH = null;
      }

      // decode type1_PUSCH_RepetitionMultiSlots

      if (type1_PUSCH_RepetitionMultiSlotsPresent) {
         buffer.getContext().eventDispatcher.startElement("type1_PUSCH_RepetitionMultiSlots", -1);

         int tval = Phy_ParametersCommon_type1_PUSCH_RepetitionMultiSlots.decodeEnumValue (buffer);
         type1_PUSCH_RepetitionMultiSlots = Phy_ParametersCommon_type1_PUSCH_RepetitionMultiSlots.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("type1_PUSCH_RepetitionMultiSlots", -1);
      }
      else {
         type1_PUSCH_RepetitionMultiSlots = null;
      }

      // decode type2_PUSCH_RepetitionMultiSlots

      if (type2_PUSCH_RepetitionMultiSlotsPresent) {
         buffer.getContext().eventDispatcher.startElement("type2_PUSCH_RepetitionMultiSlots", -1);

         int tval = Phy_ParametersCommon_type2_PUSCH_RepetitionMultiSlots.decodeEnumValue (buffer);
         type2_PUSCH_RepetitionMultiSlots = Phy_ParametersCommon_type2_PUSCH_RepetitionMultiSlots.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("type2_PUSCH_RepetitionMultiSlots", -1);
      }
      else {
         type2_PUSCH_RepetitionMultiSlots = null;
      }

      // decode pusch_RepetitionMultiSlots

      if (pusch_RepetitionMultiSlotsPresent) {
         buffer.getContext().eventDispatcher.startElement("pusch_RepetitionMultiSlots", -1);

         int tval = Phy_ParametersCommon_pusch_RepetitionMultiSlots.decodeEnumValue (buffer);
         pusch_RepetitionMultiSlots = Phy_ParametersCommon_pusch_RepetitionMultiSlots.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("pusch_RepetitionMultiSlots", -1);
      }
      else {
         pusch_RepetitionMultiSlots = null;
      }

      // decode pdsch_RepetitionMultiSlots

      if (pdsch_RepetitionMultiSlotsPresent) {
         buffer.getContext().eventDispatcher.startElement("pdsch_RepetitionMultiSlots", -1);

         int tval = Phy_ParametersCommon_pdsch_RepetitionMultiSlots.decodeEnumValue (buffer);
         pdsch_RepetitionMultiSlots = Phy_ParametersCommon_pdsch_RepetitionMultiSlots.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("pdsch_RepetitionMultiSlots", -1);
      }
      else {
         pdsch_RepetitionMultiSlots = null;
      }

      // decode downlinkSPS

      if (downlinkSPSPresent) {
         buffer.getContext().eventDispatcher.startElement("downlinkSPS", -1);

         int tval = Phy_ParametersCommon_downlinkSPS.decodeEnumValue (buffer);
         downlinkSPS = Phy_ParametersCommon_downlinkSPS.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("downlinkSPS", -1);
      }
      else {
         downlinkSPS = null;
      }

      // decode configuredUL_GrantType1

      if (configuredUL_GrantType1Present) {
         buffer.getContext().eventDispatcher.startElement("configuredUL_GrantType1", -1);

         int tval = Phy_ParametersCommon_configuredUL_GrantType1.decodeEnumValue (buffer);
         configuredUL_GrantType1 = Phy_ParametersCommon_configuredUL_GrantType1.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("configuredUL_GrantType1", -1);
      }
      else {
         configuredUL_GrantType1 = null;
      }

      // decode configuredUL_GrantType2

      if (configuredUL_GrantType2Present) {
         buffer.getContext().eventDispatcher.startElement("configuredUL_GrantType2", -1);

         int tval = Phy_ParametersCommon_configuredUL_GrantType2.decodeEnumValue (buffer);
         configuredUL_GrantType2 = Phy_ParametersCommon_configuredUL_GrantType2.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("configuredUL_GrantType2", -1);
      }
      else {
         configuredUL_GrantType2 = null;
      }

      // decode pre_EmptIndication_DL

      if (pre_EmptIndication_DLPresent) {
         buffer.getContext().eventDispatcher.startElement("pre_EmptIndication_DL", -1);

         int tval = Phy_ParametersCommon_pre_EmptIndication_DL.decodeEnumValue (buffer);
         pre_EmptIndication_DL = Phy_ParametersCommon_pre_EmptIndication_DL.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("pre_EmptIndication_DL", -1);
      }
      else {
         pre_EmptIndication_DL = null;
      }

      // decode cbg_TransIndication_DL

      if (cbg_TransIndication_DLPresent) {
         buffer.getContext().eventDispatcher.startElement("cbg_TransIndication_DL", -1);

         int tval = Phy_ParametersCommon_cbg_TransIndication_DL.decodeEnumValue (buffer);
         cbg_TransIndication_DL = Phy_ParametersCommon_cbg_TransIndication_DL.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("cbg_TransIndication_DL", -1);
      }
      else {
         cbg_TransIndication_DL = null;
      }

      // decode cbg_TransIndication_UL

      if (cbg_TransIndication_ULPresent) {
         buffer.getContext().eventDispatcher.startElement("cbg_TransIndication_UL", -1);

         int tval = Phy_ParametersCommon_cbg_TransIndication_UL.decodeEnumValue (buffer);
         cbg_TransIndication_UL = Phy_ParametersCommon_cbg_TransIndication_UL.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("cbg_TransIndication_UL", -1);
      }
      else {
         cbg_TransIndication_UL = null;
      }

      // decode cbg_FlushIndication_DL

      if (cbg_FlushIndication_DLPresent) {
         buffer.getContext().eventDispatcher.startElement("cbg_FlushIndication_DL", -1);

         int tval = Phy_ParametersCommon_cbg_FlushIndication_DL.decodeEnumValue (buffer);
         cbg_FlushIndication_DL = Phy_ParametersCommon_cbg_FlushIndication_DL.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("cbg_FlushIndication_DL", -1);
      }
      else {
         cbg_FlushIndication_DL = null;
      }

      // decode dynamicHARQ_ACK_CodeB_CBG_Retx_DL

      if (dynamicHARQ_ACK_CodeB_CBG_Retx_DLPresent) {
         buffer.getContext().eventDispatcher.startElement("dynamicHARQ_ACK_CodeB_CBG_Retx_DL", -1);

         int tval = Phy_ParametersCommon_dynamicHARQ_ACK_CodeB_CBG_Retx_DL.decodeEnumValue (buffer);
         dynamicHARQ_ACK_CodeB_CBG_Retx_DL = Phy_ParametersCommon_dynamicHARQ_ACK_CodeB_CBG_Retx_DL.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("dynamicHARQ_ACK_CodeB_CBG_Retx_DL", -1);
      }
      else {
         dynamicHARQ_ACK_CodeB_CBG_Retx_DL = null;
      }

      // decode rateMatchingResrcSetSemi_Static

      if (rateMatchingResrcSetSemi_StaticPresent) {
         buffer.getContext().eventDispatcher.startElement("rateMatchingResrcSetSemi_Static", -1);

         int tval = Phy_ParametersCommon_rateMatchingResrcSetSemi_Static.decodeEnumValue (buffer);
         rateMatchingResrcSetSemi_Static = Phy_ParametersCommon_rateMatchingResrcSetSemi_Static.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("rateMatchingResrcSetSemi_Static", -1);
      }
      else {
         rateMatchingResrcSetSemi_Static = null;
      }

      // decode rateMatchingResrcSetDynamic

      if (rateMatchingResrcSetDynamicPresent) {
         buffer.getContext().eventDispatcher.startElement("rateMatchingResrcSetDynamic", -1);

         int tval = Phy_ParametersCommon_rateMatchingResrcSetDynamic.decodeEnumValue (buffer);
         rateMatchingResrcSetDynamic = Phy_ParametersCommon_rateMatchingResrcSetDynamic.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("rateMatchingResrcSetDynamic", -1);
      }
      else {
         rateMatchingResrcSetDynamic = null;
      }

      // decode bwp_SwitchingDelay

      if (bwp_SwitchingDelayPresent) {
         buffer.getContext().eventDispatcher.startElement("bwp_SwitchingDelay", -1);

         int tval = Phy_ParametersCommon_bwp_SwitchingDelay.decodeEnumValue (buffer);
         bwp_SwitchingDelay = Phy_ParametersCommon_bwp_SwitchingDelay.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("bwp_SwitchingDelay", -1);
      }
      else {
         bwp_SwitchingDelay = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV4ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV5ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV6ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV7ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean dummyPresent = buffer.decodeBit ("dummyPresent");

            // decode dummy

            if (dummyPresent) {
               buffer.getContext().eventDispatcher.startElement("dummy", -1);

               int tval = Phy_ParametersCommon_dummy.decodeEnumValue (buffer);
               dummy = Phy_ParametersCommon_dummy.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("dummy", -1);
            }
            else {
               dummy = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean maxNumberSearchSpacesPresent = buffer.decodeBit ("maxNumberSearchSpacesPresent");

            boolean rateMatchingCtrlResrcSetDynamicPresent = buffer.decodeBit ("rateMatchingCtrlResrcSetDynamicPresent");

            boolean maxLayersMIMO_IndicationPresent = buffer.decodeBit ("maxLayersMIMO_IndicationPresent");

            // decode maxNumberSearchSpaces

            if (maxNumberSearchSpacesPresent) {
               buffer.getContext().eventDispatcher.startElement("maxNumberSearchSpaces", -1);

               int tval = Phy_ParametersCommon_maxNumberSearchSpaces.decodeEnumValue (buffer);
               maxNumberSearchSpaces = Phy_ParametersCommon_maxNumberSearchSpaces.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("maxNumberSearchSpaces", -1);
            }
            else {
               maxNumberSearchSpaces = null;
            }

            // decode rateMatchingCtrlResrcSetDynamic

            if (rateMatchingCtrlResrcSetDynamicPresent) {
               buffer.getContext().eventDispatcher.startElement("rateMatchingCtrlResrcSetDynamic", -1);

               int tval = Phy_ParametersCommon_rateMatchingCtrlResrcSetDynamic.decodeEnumValue (buffer);
               rateMatchingCtrlResrcSetDynamic = Phy_ParametersCommon_rateMatchingCtrlResrcSetDynamic.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("rateMatchingCtrlResrcSetDynamic", -1);
            }
            else {
               rateMatchingCtrlResrcSetDynamic = null;
            }

            // decode maxLayersMIMO_Indication

            if (maxLayersMIMO_IndicationPresent) {
               buffer.getContext().eventDispatcher.startElement("maxLayersMIMO_Indication", -1);

               int tval = Phy_ParametersCommon_maxLayersMIMO_Indication.decodeEnumValue (buffer);
               maxLayersMIMO_Indication = Phy_ParametersCommon_maxLayersMIMO_Indication.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("maxLayersMIMO_Indication", -1);
            }
            else {
               maxLayersMIMO_Indication = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV4ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean spCellPlacementPresent = buffer.decodeBit ("spCellPlacementPresent");

            // decode spCellPlacement

            if (spCellPlacementPresent) {
               buffer.getContext().eventDispatcher.startElement("spCellPlacement", -1);

               spCellPlacement = new CarrierAggregationVariant();
               spCellPlacement.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("spCellPlacement", -1);
            }
            else {
               spCellPlacement = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV5ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean twoStepRACH_r16Present = buffer.decodeBit ("twoStepRACH_r16Present");

            boolean dci_Format1_2And0_2_r16Present = buffer.decodeBit ("dci_Format1_2And0_2_r16Present");

            boolean monitoringDCI_SameSearchSpace_r16Present = buffer.decodeBit ("monitoringDCI_SameSearchSpace_r16Present");

            boolean type2_CG_ReleaseDCI_0_1_r16Present = buffer.decodeBit ("type2_CG_ReleaseDCI_0_1_r16Present");

            boolean type2_CG_ReleaseDCI_0_2_r16Present = buffer.decodeBit ("type2_CG_ReleaseDCI_0_2_r16Present");

            boolean sps_ReleaseDCI_1_1_r16Present = buffer.decodeBit ("sps_ReleaseDCI_1_1_r16Present");

            boolean sps_ReleaseDCI_1_2_r16Present = buffer.decodeBit ("sps_ReleaseDCI_1_2_r16Present");

            boolean csi_TriggerStateNon_ActiveBWP_r16Present = buffer.decodeBit ("csi_TriggerStateNon_ActiveBWP_r16Present");

            boolean seperateSMTC_InterIAB_Support_r16Present = buffer.decodeBit ("seperateSMTC_InterIAB_Support_r16Present");

            boolean seperateRACH_IAB_Support_r16Present = buffer.decodeBit ("seperateRACH_IAB_Support_r16Present");

            boolean ul_flexibleDL_SlotFormatSemiStatic_IAB_r16Present = buffer.decodeBit ("ul_flexibleDL_SlotFormatSemiStatic_IAB_r16Present");

            boolean ul_flexibleDL_SlotFormatDynamics_IAB_r16Present = buffer.decodeBit ("ul_flexibleDL_SlotFormatDynamics_IAB_r16Present");

            boolean dft_S_OFDM_WaveformUL_IAB_r16Present = buffer.decodeBit ("dft_S_OFDM_WaveformUL_IAB_r16Present");

            boolean dci_25_AI_RNTI_Support_IAB_r16Present = buffer.decodeBit ("dci_25_AI_RNTI_Support_IAB_r16Present");

            boolean t_DeltaReceptionSupport_IAB_r16Present = buffer.decodeBit ("t_DeltaReceptionSupport_IAB_r16Present");

            boolean guardSymbolReportReception_IAB_r16Present = buffer.decodeBit ("guardSymbolReportReception_IAB_r16Present");

            boolean harqACK_CB_SpatialBundlingPUCCH_Group_r16Present = buffer.decodeBit ("harqACK_CB_SpatialBundlingPUCCH_Group_r16Present");

            boolean crossSlotScheduling_r16Present = buffer.decodeBit ("crossSlotScheduling_r16Present");

            boolean maxNumberSRS_PosPathLossEstimateAllServingCells_r16Present = buffer.decodeBit ("maxNumberSRS_PosPathLossEstimateAllServingCells_r16Present");

            boolean extendedCG_Periodicities_r16Present = buffer.decodeBit ("extendedCG_Periodicities_r16Present");

            boolean extendedSPS_Periodicities_r16Present = buffer.decodeBit ("extendedSPS_Periodicities_r16Present");

            boolean codebookVariantsList_r16Present = buffer.decodeBit ("codebookVariantsList_r16Present");

            boolean pusch_RepetitionTypeA_r16Present = buffer.decodeBit ("pusch_RepetitionTypeA_r16Present");

            boolean dci_DL_PriorityIndicator_r16Present = buffer.decodeBit ("dci_DL_PriorityIndicator_r16Present");

            boolean dci_UL_PriorityIndicator_r16Present = buffer.decodeBit ("dci_UL_PriorityIndicator_r16Present");

            boolean maxNumberPathlossRS_Update_r16Present = buffer.decodeBit ("maxNumberPathlossRS_Update_r16Present");

            boolean type2_HARQ_ACK_Codebook_r16Present = buffer.decodeBit ("type2_HARQ_ACK_Codebook_r16Present");

            boolean maxTotalResourcesForAcrossFreqRanges_r16Present = buffer.decodeBit ("maxTotalResourcesForAcrossFreqRanges_r16Present");

            boolean harqACK_separateMultiDCI_MultiTRP_r16Present = buffer.decodeBit ("harqACK_separateMultiDCI_MultiTRP_r16Present");

            boolean harqACK_jointMultiDCI_MultiTRP_r16Present = buffer.decodeBit ("harqACK_jointMultiDCI_MultiTRP_r16Present");

            boolean bwp_SwitchingMultiCCs_r16Present = buffer.decodeBit ("bwp_SwitchingMultiCCs_r16Present");

            // decode twoStepRACH_r16

            if (twoStepRACH_r16Present) {
               buffer.getContext().eventDispatcher.startElement("twoStepRACH_r16", -1);

               int tval = Phy_ParametersCommon_twoStepRACH_r16.decodeEnumValue (buffer);
               twoStepRACH_r16 = Phy_ParametersCommon_twoStepRACH_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("twoStepRACH_r16", -1);
            }
            else {
               twoStepRACH_r16 = null;
            }

            // decode dci_Format1_2And0_2_r16

            if (dci_Format1_2And0_2_r16Present) {
               buffer.getContext().eventDispatcher.startElement("dci_Format1_2And0_2_r16", -1);

               int tval = Phy_ParametersCommon_dci_Format1_2And0_2_r16.decodeEnumValue (buffer);
               dci_Format1_2And0_2_r16 = Phy_ParametersCommon_dci_Format1_2And0_2_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("dci_Format1_2And0_2_r16", -1);
            }
            else {
               dci_Format1_2And0_2_r16 = null;
            }

            // decode monitoringDCI_SameSearchSpace_r16

            if (monitoringDCI_SameSearchSpace_r16Present) {
               buffer.getContext().eventDispatcher.startElement("monitoringDCI_SameSearchSpace_r16", -1);

               int tval = Phy_ParametersCommon_monitoringDCI_SameSearchSpace_r16.decodeEnumValue (buffer);
               monitoringDCI_SameSearchSpace_r16 = Phy_ParametersCommon_monitoringDCI_SameSearchSpace_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("monitoringDCI_SameSearchSpace_r16", -1);
            }
            else {
               monitoringDCI_SameSearchSpace_r16 = null;
            }

            // decode type2_CG_ReleaseDCI_0_1_r16

            if (type2_CG_ReleaseDCI_0_1_r16Present) {
               buffer.getContext().eventDispatcher.startElement("type2_CG_ReleaseDCI_0_1_r16", -1);

               int tval = Phy_ParametersCommon_type2_CG_ReleaseDCI_0_1_r16.decodeEnumValue (buffer);
               type2_CG_ReleaseDCI_0_1_r16 = Phy_ParametersCommon_type2_CG_ReleaseDCI_0_1_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("type2_CG_ReleaseDCI_0_1_r16", -1);
            }
            else {
               type2_CG_ReleaseDCI_0_1_r16 = null;
            }

            // decode type2_CG_ReleaseDCI_0_2_r16

            if (type2_CG_ReleaseDCI_0_2_r16Present) {
               buffer.getContext().eventDispatcher.startElement("type2_CG_ReleaseDCI_0_2_r16", -1);

               int tval = Phy_ParametersCommon_type2_CG_ReleaseDCI_0_2_r16.decodeEnumValue (buffer);
               type2_CG_ReleaseDCI_0_2_r16 = Phy_ParametersCommon_type2_CG_ReleaseDCI_0_2_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("type2_CG_ReleaseDCI_0_2_r16", -1);
            }
            else {
               type2_CG_ReleaseDCI_0_2_r16 = null;
            }

            // decode sps_ReleaseDCI_1_1_r16

            if (sps_ReleaseDCI_1_1_r16Present) {
               buffer.getContext().eventDispatcher.startElement("sps_ReleaseDCI_1_1_r16", -1);

               int tval = Phy_ParametersCommon_sps_ReleaseDCI_1_1_r16.decodeEnumValue (buffer);
               sps_ReleaseDCI_1_1_r16 = Phy_ParametersCommon_sps_ReleaseDCI_1_1_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("sps_ReleaseDCI_1_1_r16", -1);
            }
            else {
               sps_ReleaseDCI_1_1_r16 = null;
            }

            // decode sps_ReleaseDCI_1_2_r16

            if (sps_ReleaseDCI_1_2_r16Present) {
               buffer.getContext().eventDispatcher.startElement("sps_ReleaseDCI_1_2_r16", -1);

               int tval = Phy_ParametersCommon_sps_ReleaseDCI_1_2_r16.decodeEnumValue (buffer);
               sps_ReleaseDCI_1_2_r16 = Phy_ParametersCommon_sps_ReleaseDCI_1_2_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("sps_ReleaseDCI_1_2_r16", -1);
            }
            else {
               sps_ReleaseDCI_1_2_r16 = null;
            }

            // decode csi_TriggerStateNon_ActiveBWP_r16

            if (csi_TriggerStateNon_ActiveBWP_r16Present) {
               buffer.getContext().eventDispatcher.startElement("csi_TriggerStateNon_ActiveBWP_r16", -1);

               int tval = Phy_ParametersCommon_csi_TriggerStateNon_ActiveBWP_r16.decodeEnumValue (buffer);
               csi_TriggerStateNon_ActiveBWP_r16 = Phy_ParametersCommon_csi_TriggerStateNon_ActiveBWP_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("csi_TriggerStateNon_ActiveBWP_r16", -1);
            }
            else {
               csi_TriggerStateNon_ActiveBWP_r16 = null;
            }

            // decode seperateSMTC_InterIAB_Support_r16

            if (seperateSMTC_InterIAB_Support_r16Present) {
               buffer.getContext().eventDispatcher.startElement("seperateSMTC_InterIAB_Support_r16", -1);

               int tval = Phy_ParametersCommon_seperateSMTC_InterIAB_Support_r16.decodeEnumValue (buffer);
               seperateSMTC_InterIAB_Support_r16 = Phy_ParametersCommon_seperateSMTC_InterIAB_Support_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("seperateSMTC_InterIAB_Support_r16", -1);
            }
            else {
               seperateSMTC_InterIAB_Support_r16 = null;
            }

            // decode seperateRACH_IAB_Support_r16

            if (seperateRACH_IAB_Support_r16Present) {
               buffer.getContext().eventDispatcher.startElement("seperateRACH_IAB_Support_r16", -1);

               int tval = Phy_ParametersCommon_seperateRACH_IAB_Support_r16.decodeEnumValue (buffer);
               seperateRACH_IAB_Support_r16 = Phy_ParametersCommon_seperateRACH_IAB_Support_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("seperateRACH_IAB_Support_r16", -1);
            }
            else {
               seperateRACH_IAB_Support_r16 = null;
            }

            // decode ul_flexibleDL_SlotFormatSemiStatic_IAB_r16

            if (ul_flexibleDL_SlotFormatSemiStatic_IAB_r16Present) {
               buffer.getContext().eventDispatcher.startElement("ul_flexibleDL_SlotFormatSemiStatic_IAB_r16", -1);

               int tval = Phy_ParametersCommon_ul_flexibleDL_SlotFormatSemiStatic_IAB_r16.decodeEnumValue (buffer);
               ul_flexibleDL_SlotFormatSemiStatic_IAB_r16 = Phy_ParametersCommon_ul_flexibleDL_SlotFormatSemiStatic_IAB_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("ul_flexibleDL_SlotFormatSemiStatic_IAB_r16", -1);
            }
            else {
               ul_flexibleDL_SlotFormatSemiStatic_IAB_r16 = null;
            }

            // decode ul_flexibleDL_SlotFormatDynamics_IAB_r16

            if (ul_flexibleDL_SlotFormatDynamics_IAB_r16Present) {
               buffer.getContext().eventDispatcher.startElement("ul_flexibleDL_SlotFormatDynamics_IAB_r16", -1);

               int tval = Phy_ParametersCommon_ul_flexibleDL_SlotFormatDynamics_IAB_r16.decodeEnumValue (buffer);
               ul_flexibleDL_SlotFormatDynamics_IAB_r16 = Phy_ParametersCommon_ul_flexibleDL_SlotFormatDynamics_IAB_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("ul_flexibleDL_SlotFormatDynamics_IAB_r16", -1);
            }
            else {
               ul_flexibleDL_SlotFormatDynamics_IAB_r16 = null;
            }

            // decode dft_S_OFDM_WaveformUL_IAB_r16

            if (dft_S_OFDM_WaveformUL_IAB_r16Present) {
               buffer.getContext().eventDispatcher.startElement("dft_S_OFDM_WaveformUL_IAB_r16", -1);

               int tval = Phy_ParametersCommon_dft_S_OFDM_WaveformUL_IAB_r16.decodeEnumValue (buffer);
               dft_S_OFDM_WaveformUL_IAB_r16 = Phy_ParametersCommon_dft_S_OFDM_WaveformUL_IAB_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("dft_S_OFDM_WaveformUL_IAB_r16", -1);
            }
            else {
               dft_S_OFDM_WaveformUL_IAB_r16 = null;
            }

            // decode dci_25_AI_RNTI_Support_IAB_r16

            if (dci_25_AI_RNTI_Support_IAB_r16Present) {
               buffer.getContext().eventDispatcher.startElement("dci_25_AI_RNTI_Support_IAB_r16", -1);

               int tval = Phy_ParametersCommon_dci_25_AI_RNTI_Support_IAB_r16.decodeEnumValue (buffer);
               dci_25_AI_RNTI_Support_IAB_r16 = Phy_ParametersCommon_dci_25_AI_RNTI_Support_IAB_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("dci_25_AI_RNTI_Support_IAB_r16", -1);
            }
            else {
               dci_25_AI_RNTI_Support_IAB_r16 = null;
            }

            // decode t_DeltaReceptionSupport_IAB_r16

            if (t_DeltaReceptionSupport_IAB_r16Present) {
               buffer.getContext().eventDispatcher.startElement("t_DeltaReceptionSupport_IAB_r16", -1);

               int tval = Phy_ParametersCommon_t_DeltaReceptionSupport_IAB_r16.decodeEnumValue (buffer);
               t_DeltaReceptionSupport_IAB_r16 = Phy_ParametersCommon_t_DeltaReceptionSupport_IAB_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("t_DeltaReceptionSupport_IAB_r16", -1);
            }
            else {
               t_DeltaReceptionSupport_IAB_r16 = null;
            }

            // decode guardSymbolReportReception_IAB_r16

            if (guardSymbolReportReception_IAB_r16Present) {
               buffer.getContext().eventDispatcher.startElement("guardSymbolReportReception_IAB_r16", -1);

               int tval = Phy_ParametersCommon_guardSymbolReportReception_IAB_r16.decodeEnumValue (buffer);
               guardSymbolReportReception_IAB_r16 = Phy_ParametersCommon_guardSymbolReportReception_IAB_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("guardSymbolReportReception_IAB_r16", -1);
            }
            else {
               guardSymbolReportReception_IAB_r16 = null;
            }

            // decode harqACK_CB_SpatialBundlingPUCCH_Group_r16

            if (harqACK_CB_SpatialBundlingPUCCH_Group_r16Present) {
               buffer.getContext().eventDispatcher.startElement("harqACK_CB_SpatialBundlingPUCCH_Group_r16", -1);

               int tval = Phy_ParametersCommon_harqACK_CB_SpatialBundlingPUCCH_Group_r16.decodeEnumValue (buffer);
               harqACK_CB_SpatialBundlingPUCCH_Group_r16 = Phy_ParametersCommon_harqACK_CB_SpatialBundlingPUCCH_Group_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("harqACK_CB_SpatialBundlingPUCCH_Group_r16", -1);
            }
            else {
               harqACK_CB_SpatialBundlingPUCCH_Group_r16 = null;
            }

            // decode crossSlotScheduling_r16

            if (crossSlotScheduling_r16Present) {
               buffer.getContext().eventDispatcher.startElement("crossSlotScheduling_r16", -1);

               crossSlotScheduling_r16 = new Phy_ParametersCommon_crossSlotScheduling_r16();
               crossSlotScheduling_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("crossSlotScheduling_r16", -1);
            }
            else {
               crossSlotScheduling_r16 = null;
            }

            // decode maxNumberSRS_PosPathLossEstimateAllServingCells_r16

            if (maxNumberSRS_PosPathLossEstimateAllServingCells_r16Present) {
               buffer.getContext().eventDispatcher.startElement("maxNumberSRS_PosPathLossEstimateAllServingCells_r16", -1);

               int tval = Phy_ParametersCommon_maxNumberSRS_PosPathLossEstimateAllServingCells_r16.decodeEnumValue (buffer);
               maxNumberSRS_PosPathLossEstimateAllServingCells_r16 = Phy_ParametersCommon_maxNumberSRS_PosPathLossEstimateAllServingCells_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("maxNumberSRS_PosPathLossEstimateAllServingCells_r16", -1);
            }
            else {
               maxNumberSRS_PosPathLossEstimateAllServingCells_r16 = null;
            }

            // decode extendedCG_Periodicities_r16

            if (extendedCG_Periodicities_r16Present) {
               buffer.getContext().eventDispatcher.startElement("extendedCG_Periodicities_r16", -1);

               int tval = Phy_ParametersCommon_extendedCG_Periodicities_r16.decodeEnumValue (buffer);
               extendedCG_Periodicities_r16 = Phy_ParametersCommon_extendedCG_Periodicities_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("extendedCG_Periodicities_r16", -1);
            }
            else {
               extendedCG_Periodicities_r16 = null;
            }

            // decode extendedSPS_Periodicities_r16

            if (extendedSPS_Periodicities_r16Present) {
               buffer.getContext().eventDispatcher.startElement("extendedSPS_Periodicities_r16", -1);

               int tval = Phy_ParametersCommon_extendedSPS_Periodicities_r16.decodeEnumValue (buffer);
               extendedSPS_Periodicities_r16 = Phy_ParametersCommon_extendedSPS_Periodicities_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("extendedSPS_Periodicities_r16", -1);
            }
            else {
               extendedSPS_Periodicities_r16 = null;
            }

            // decode codebookVariantsList_r16

            if (codebookVariantsList_r16Present) {
               buffer.getContext().eventDispatcher.startElement("codebookVariantsList_r16", -1);

               codebookVariantsList_r16 = new CodebookVariantsList_r16();
               codebookVariantsList_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("codebookVariantsList_r16", -1);
            }
            else {
               codebookVariantsList_r16 = null;
            }

            // decode pusch_RepetitionTypeA_r16

            if (pusch_RepetitionTypeA_r16Present) {
               buffer.getContext().eventDispatcher.startElement("pusch_RepetitionTypeA_r16", -1);

               pusch_RepetitionTypeA_r16 = new Phy_ParametersCommon_pusch_RepetitionTypeA_r16();
               pusch_RepetitionTypeA_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("pusch_RepetitionTypeA_r16", -1);
            }
            else {
               pusch_RepetitionTypeA_r16 = null;
            }

            // decode dci_DL_PriorityIndicator_r16

            if (dci_DL_PriorityIndicator_r16Present) {
               buffer.getContext().eventDispatcher.startElement("dci_DL_PriorityIndicator_r16", -1);

               int tval = Phy_ParametersCommon_dci_DL_PriorityIndicator_r16.decodeEnumValue (buffer);
               dci_DL_PriorityIndicator_r16 = Phy_ParametersCommon_dci_DL_PriorityIndicator_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("dci_DL_PriorityIndicator_r16", -1);
            }
            else {
               dci_DL_PriorityIndicator_r16 = null;
            }

            // decode dci_UL_PriorityIndicator_r16

            if (dci_UL_PriorityIndicator_r16Present) {
               buffer.getContext().eventDispatcher.startElement("dci_UL_PriorityIndicator_r16", -1);

               int tval = Phy_ParametersCommon_dci_UL_PriorityIndicator_r16.decodeEnumValue (buffer);
               dci_UL_PriorityIndicator_r16 = Phy_ParametersCommon_dci_UL_PriorityIndicator_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("dci_UL_PriorityIndicator_r16", -1);
            }
            else {
               dci_UL_PriorityIndicator_r16 = null;
            }

            // decode maxNumberPathlossRS_Update_r16

            if (maxNumberPathlossRS_Update_r16Present) {
               buffer.getContext().eventDispatcher.startElement("maxNumberPathlossRS_Update_r16", -1);

               int tval = Phy_ParametersCommon_maxNumberPathlossRS_Update_r16.decodeEnumValue (buffer);
               maxNumberPathlossRS_Update_r16 = Phy_ParametersCommon_maxNumberPathlossRS_Update_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("maxNumberPathlossRS_Update_r16", -1);
            }
            else {
               maxNumberPathlossRS_Update_r16 = null;
            }

            // decode type2_HARQ_ACK_Codebook_r16

            if (type2_HARQ_ACK_Codebook_r16Present) {
               buffer.getContext().eventDispatcher.startElement("type2_HARQ_ACK_Codebook_r16", -1);

               int tval = Phy_ParametersCommon_type2_HARQ_ACK_Codebook_r16.decodeEnumValue (buffer);
               type2_HARQ_ACK_Codebook_r16 = Phy_ParametersCommon_type2_HARQ_ACK_Codebook_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("type2_HARQ_ACK_Codebook_r16", -1);
            }
            else {
               type2_HARQ_ACK_Codebook_r16 = null;
            }

            // decode maxTotalResourcesForAcrossFreqRanges_r16

            if (maxTotalResourcesForAcrossFreqRanges_r16Present) {
               buffer.getContext().eventDispatcher.startElement("maxTotalResourcesForAcrossFreqRanges_r16", -1);

               maxTotalResourcesForAcrossFreqRanges_r16 = new Phy_ParametersCommon_maxTotalResourcesForAcrossFreqRanges_r16();
               maxTotalResourcesForAcrossFreqRanges_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("maxTotalResourcesForAcrossFreqRanges_r16", -1);
            }
            else {
               maxTotalResourcesForAcrossFreqRanges_r16 = null;
            }

            // decode harqACK_separateMultiDCI_MultiTRP_r16

            if (harqACK_separateMultiDCI_MultiTRP_r16Present) {
               buffer.getContext().eventDispatcher.startElement("harqACK_separateMultiDCI_MultiTRP_r16", -1);

               harqACK_separateMultiDCI_MultiTRP_r16 = new Phy_ParametersCommon_harqACK_separateMultiDCI_MultiTRP_r16();
               harqACK_separateMultiDCI_MultiTRP_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("harqACK_separateMultiDCI_MultiTRP_r16", -1);
            }
            else {
               harqACK_separateMultiDCI_MultiTRP_r16 = null;
            }

            // decode harqACK_jointMultiDCI_MultiTRP_r16

            if (harqACK_jointMultiDCI_MultiTRP_r16Present) {
               buffer.getContext().eventDispatcher.startElement("harqACK_jointMultiDCI_MultiTRP_r16", -1);

               int tval = Phy_ParametersCommon_harqACK_jointMultiDCI_MultiTRP_r16.decodeEnumValue (buffer);
               harqACK_jointMultiDCI_MultiTRP_r16 = Phy_ParametersCommon_harqACK_jointMultiDCI_MultiTRP_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("harqACK_jointMultiDCI_MultiTRP_r16", -1);
            }
            else {
               harqACK_jointMultiDCI_MultiTRP_r16 = null;
            }

            // decode bwp_SwitchingMultiCCs_r16

            if (bwp_SwitchingMultiCCs_r16Present) {
               buffer.getContext().eventDispatcher.startElement("bwp_SwitchingMultiCCs_r16", -1);

               bwp_SwitchingMultiCCs_r16 = new Phy_ParametersCommon_bwp_SwitchingMultiCCs_r16();
               bwp_SwitchingMultiCCs_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("bwp_SwitchingMultiCCs_r16", -1);
            }
            else {
               bwp_SwitchingMultiCCs_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV6ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean targetSMTC_SCG_r16Present = buffer.decodeBit ("targetSMTC_SCG_r16Present");

            boolean supportRepetitionZeroOffsetRV_r16Present = buffer.decodeBit ("supportRepetitionZeroOffsetRV_r16Present");

            boolean cbg_TransInOrderPUSCH_UL_r16Present = buffer.decodeBit ("cbg_TransInOrderPUSCH_UL_r16Present");

            // decode targetSMTC_SCG_r16

            if (targetSMTC_SCG_r16Present) {
               buffer.getContext().eventDispatcher.startElement("targetSMTC_SCG_r16", -1);

               int tval = Phy_ParametersCommon_targetSMTC_SCG_r16.decodeEnumValue (buffer);
               targetSMTC_SCG_r16 = Phy_ParametersCommon_targetSMTC_SCG_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("targetSMTC_SCG_r16", -1);
            }
            else {
               targetSMTC_SCG_r16 = null;
            }

            // decode supportRepetitionZeroOffsetRV_r16

            if (supportRepetitionZeroOffsetRV_r16Present) {
               buffer.getContext().eventDispatcher.startElement("supportRepetitionZeroOffsetRV_r16", -1);

               int tval = Phy_ParametersCommon_supportRepetitionZeroOffsetRV_r16.decodeEnumValue (buffer);
               supportRepetitionZeroOffsetRV_r16 = Phy_ParametersCommon_supportRepetitionZeroOffsetRV_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("supportRepetitionZeroOffsetRV_r16", -1);
            }
            else {
               supportRepetitionZeroOffsetRV_r16 = null;
            }

            // decode cbg_TransInOrderPUSCH_UL_r16

            if (cbg_TransInOrderPUSCH_UL_r16Present) {
               buffer.getContext().eventDispatcher.startElement("cbg_TransInOrderPUSCH_UL_r16", -1);

               int tval = Phy_ParametersCommon_cbg_TransInOrderPUSCH_UL_r16.decodeEnumValue (buffer);
               cbg_TransInOrderPUSCH_UL_r16 = Phy_ParametersCommon_cbg_TransInOrderPUSCH_UL_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("cbg_TransInOrderPUSCH_UL_r16", -1);
            }
            else {
               cbg_TransInOrderPUSCH_UL_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV7ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean bwp_SwitchingMultiDormancyCCs_r16Present = buffer.decodeBit ("bwp_SwitchingMultiDormancyCCs_r16Present");

            boolean supportRetx_Diff_CoresetPool_Multi_DCI_TRP_r16Present = buffer.decodeBit ("supportRetx_Diff_CoresetPool_Multi_DCI_TRP_r16Present");

            boolean pdcch_MonitoringAnyOccasionsWithSpanGapCrossCarrierSch_r16Present = buffer.decodeBit ("pdcch_MonitoringAnyOccasionsWithSpanGapCrossCarrierSch_r16Present");

            // decode bwp_SwitchingMultiDormancyCCs_r16

            if (bwp_SwitchingMultiDormancyCCs_r16Present) {
               buffer.getContext().eventDispatcher.startElement("bwp_SwitchingMultiDormancyCCs_r16", -1);

               bwp_SwitchingMultiDormancyCCs_r16 = new Phy_ParametersCommon_bwp_SwitchingMultiDormancyCCs_r16();
               bwp_SwitchingMultiDormancyCCs_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("bwp_SwitchingMultiDormancyCCs_r16", -1);
            }
            else {
               bwp_SwitchingMultiDormancyCCs_r16 = null;
            }

            // decode supportRetx_Diff_CoresetPool_Multi_DCI_TRP_r16

            if (supportRetx_Diff_CoresetPool_Multi_DCI_TRP_r16Present) {
               buffer.getContext().eventDispatcher.startElement("supportRetx_Diff_CoresetPool_Multi_DCI_TRP_r16", -1);

               int tval = Phy_ParametersCommon_supportRetx_Diff_CoresetPool_Multi_DCI_TRP_r16.decodeEnumValue (buffer);
               supportRetx_Diff_CoresetPool_Multi_DCI_TRP_r16 = Phy_ParametersCommon_supportRetx_Diff_CoresetPool_Multi_DCI_TRP_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("supportRetx_Diff_CoresetPool_Multi_DCI_TRP_r16", -1);
            }
            else {
               supportRetx_Diff_CoresetPool_Multi_DCI_TRP_r16 = null;
            }

            // decode pdcch_MonitoringAnyOccasionsWithSpanGapCrossCarrierSch_r16

            if (pdcch_MonitoringAnyOccasionsWithSpanGapCrossCarrierSch_r16Present) {
               buffer.getContext().eventDispatcher.startElement("pdcch_MonitoringAnyOccasionsWithSpanGapCrossCarrierSch_r16", -1);

               int tval = Phy_ParametersCommon_pdcch_MonitoringAnyOccasionsWithSpanGapCrossCarrierSch_r16.decodeEnumValue (buffer);
               pdcch_MonitoringAnyOccasionsWithSpanGapCrossCarrierSch_r16 = Phy_ParametersCommon_pdcch_MonitoringAnyOccasionsWithSpanGapCrossCarrierSch_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("pdcch_MonitoringAnyOccasionsWithSpanGapCrossCarrierSch_r16", -1);
            }
            else {
               pdcch_MonitoringAnyOccasionsWithSpanGapCrossCarrierSch_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (mV2ExtPresent ||
      mV3ExtPresent ||
      mV4ExtPresent ||
      mV5ExtPresent ||
      mV6ExtPresent ||
      mV7ExtPresent ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((csi_RS_CFRA_ForHO != null), null);
      buffer.encodeBit ((dynamicPRB_BundlingDL != null), null);
      buffer.encodeBit ((sp_CSI_ReportPUCCH != null), null);
      buffer.encodeBit ((sp_CSI_ReportPUSCH != null), null);
      buffer.encodeBit ((nzp_CSI_RS_IntefMgmt != null), null);
      buffer.encodeBit ((type2_SP_CSI_Feedback_LongPUCCH != null), null);
      buffer.encodeBit ((precoderGranularityCORESET != null), null);
      buffer.encodeBit ((dynamicHARQ_ACK_Codebook != null), null);
      buffer.encodeBit ((semiStaticHARQ_ACK_Codebook != null), null);
      buffer.encodeBit ((spatialBundlingHARQ_ACK != null), null);
      buffer.encodeBit ((dynamicBetaOffsetInd_HARQ_ACK_CSI != null), null);
      buffer.encodeBit ((pucch_Repetition_F1_3_4 != null), null);
      buffer.encodeBit ((ra_Type0_PUSCH != null), null);
      buffer.encodeBit ((dynamicSwitchRA_Type0_1_PDSCH != null), null);
      buffer.encodeBit ((dynamicSwitchRA_Type0_1_PUSCH != null), null);
      buffer.encodeBit ((pdsch_MappingTypeA != null), null);
      buffer.encodeBit ((pdsch_MappingTypeB != null), null);
      buffer.encodeBit ((interleavingVRB_ToPRB_PDSCH != null), null);
      buffer.encodeBit ((interSlotFreqHopping_PUSCH != null), null);
      buffer.encodeBit ((type1_PUSCH_RepetitionMultiSlots != null), null);
      buffer.encodeBit ((type2_PUSCH_RepetitionMultiSlots != null), null);
      buffer.encodeBit ((pusch_RepetitionMultiSlots != null), null);
      buffer.encodeBit ((pdsch_RepetitionMultiSlots != null), null);
      buffer.encodeBit ((downlinkSPS != null), null);
      buffer.encodeBit ((configuredUL_GrantType1 != null), null);
      buffer.encodeBit ((configuredUL_GrantType2 != null), null);
      buffer.encodeBit ((pre_EmptIndication_DL != null), null);
      buffer.encodeBit ((cbg_TransIndication_DL != null), null);
      buffer.encodeBit ((cbg_TransIndication_UL != null), null);
      buffer.encodeBit ((cbg_FlushIndication_DL != null), null);
      buffer.encodeBit ((dynamicHARQ_ACK_CodeB_CBG_Retx_DL != null), null);
      buffer.encodeBit ((rateMatchingResrcSetSemi_Static != null), null);
      buffer.encodeBit ((rateMatchingResrcSetDynamic != null), null);
      buffer.encodeBit ((bwp_SwitchingDelay != null), null);

      // encode csi_RS_CFRA_ForHO

      if (csi_RS_CFRA_ForHO != null) {
         buffer.getContext().eventDispatcher.startElement("csi_RS_CFRA_ForHO", -1);

         csi_RS_CFRA_ForHO.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("csi_RS_CFRA_ForHO", -1);
      }

      // encode dynamicPRB_BundlingDL

      if (dynamicPRB_BundlingDL != null) {
         buffer.getContext().eventDispatcher.startElement("dynamicPRB_BundlingDL", -1);

         dynamicPRB_BundlingDL.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("dynamicPRB_BundlingDL", -1);
      }

      // encode sp_CSI_ReportPUCCH

      if (sp_CSI_ReportPUCCH != null) {
         buffer.getContext().eventDispatcher.startElement("sp_CSI_ReportPUCCH", -1);

         sp_CSI_ReportPUCCH.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sp_CSI_ReportPUCCH", -1);
      }

      // encode sp_CSI_ReportPUSCH

      if (sp_CSI_ReportPUSCH != null) {
         buffer.getContext().eventDispatcher.startElement("sp_CSI_ReportPUSCH", -1);

         sp_CSI_ReportPUSCH.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sp_CSI_ReportPUSCH", -1);
      }

      // encode nzp_CSI_RS_IntefMgmt

      if (nzp_CSI_RS_IntefMgmt != null) {
         buffer.getContext().eventDispatcher.startElement("nzp_CSI_RS_IntefMgmt", -1);

         nzp_CSI_RS_IntefMgmt.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("nzp_CSI_RS_IntefMgmt", -1);
      }

      // encode type2_SP_CSI_Feedback_LongPUCCH

      if (type2_SP_CSI_Feedback_LongPUCCH != null) {
         buffer.getContext().eventDispatcher.startElement("type2_SP_CSI_Feedback_LongPUCCH", -1);

         type2_SP_CSI_Feedback_LongPUCCH.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("type2_SP_CSI_Feedback_LongPUCCH", -1);
      }

      // encode precoderGranularityCORESET

      if (precoderGranularityCORESET != null) {
         buffer.getContext().eventDispatcher.startElement("precoderGranularityCORESET", -1);

         precoderGranularityCORESET.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("precoderGranularityCORESET", -1);
      }

      // encode dynamicHARQ_ACK_Codebook

      if (dynamicHARQ_ACK_Codebook != null) {
         buffer.getContext().eventDispatcher.startElement("dynamicHARQ_ACK_Codebook", -1);

         dynamicHARQ_ACK_Codebook.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("dynamicHARQ_ACK_Codebook", -1);
      }

      // encode semiStaticHARQ_ACK_Codebook

      if (semiStaticHARQ_ACK_Codebook != null) {
         buffer.getContext().eventDispatcher.startElement("semiStaticHARQ_ACK_Codebook", -1);

         semiStaticHARQ_ACK_Codebook.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("semiStaticHARQ_ACK_Codebook", -1);
      }

      // encode spatialBundlingHARQ_ACK

      if (spatialBundlingHARQ_ACK != null) {
         buffer.getContext().eventDispatcher.startElement("spatialBundlingHARQ_ACK", -1);

         spatialBundlingHARQ_ACK.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("spatialBundlingHARQ_ACK", -1);
      }

      // encode dynamicBetaOffsetInd_HARQ_ACK_CSI

      if (dynamicBetaOffsetInd_HARQ_ACK_CSI != null) {
         buffer.getContext().eventDispatcher.startElement("dynamicBetaOffsetInd_HARQ_ACK_CSI", -1);

         dynamicBetaOffsetInd_HARQ_ACK_CSI.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("dynamicBetaOffsetInd_HARQ_ACK_CSI", -1);
      }

      // encode pucch_Repetition_F1_3_4

      if (pucch_Repetition_F1_3_4 != null) {
         buffer.getContext().eventDispatcher.startElement("pucch_Repetition_F1_3_4", -1);

         pucch_Repetition_F1_3_4.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("pucch_Repetition_F1_3_4", -1);
      }

      // encode ra_Type0_PUSCH

      if (ra_Type0_PUSCH != null) {
         buffer.getContext().eventDispatcher.startElement("ra_Type0_PUSCH", -1);

         ra_Type0_PUSCH.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ra_Type0_PUSCH", -1);
      }

      // encode dynamicSwitchRA_Type0_1_PDSCH

      if (dynamicSwitchRA_Type0_1_PDSCH != null) {
         buffer.getContext().eventDispatcher.startElement("dynamicSwitchRA_Type0_1_PDSCH", -1);

         dynamicSwitchRA_Type0_1_PDSCH.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("dynamicSwitchRA_Type0_1_PDSCH", -1);
      }

      // encode dynamicSwitchRA_Type0_1_PUSCH

      if (dynamicSwitchRA_Type0_1_PUSCH != null) {
         buffer.getContext().eventDispatcher.startElement("dynamicSwitchRA_Type0_1_PUSCH", -1);

         dynamicSwitchRA_Type0_1_PUSCH.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("dynamicSwitchRA_Type0_1_PUSCH", -1);
      }

      // encode pdsch_MappingTypeA

      if (pdsch_MappingTypeA != null) {
         buffer.getContext().eventDispatcher.startElement("pdsch_MappingTypeA", -1);

         pdsch_MappingTypeA.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("pdsch_MappingTypeA", -1);
      }

      // encode pdsch_MappingTypeB

      if (pdsch_MappingTypeB != null) {
         buffer.getContext().eventDispatcher.startElement("pdsch_MappingTypeB", -1);

         pdsch_MappingTypeB.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("pdsch_MappingTypeB", -1);
      }

      // encode interleavingVRB_ToPRB_PDSCH

      if (interleavingVRB_ToPRB_PDSCH != null) {
         buffer.getContext().eventDispatcher.startElement("interleavingVRB_ToPRB_PDSCH", -1);

         interleavingVRB_ToPRB_PDSCH.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("interleavingVRB_ToPRB_PDSCH", -1);
      }

      // encode interSlotFreqHopping_PUSCH

      if (interSlotFreqHopping_PUSCH != null) {
         buffer.getContext().eventDispatcher.startElement("interSlotFreqHopping_PUSCH", -1);

         interSlotFreqHopping_PUSCH.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("interSlotFreqHopping_PUSCH", -1);
      }

      // encode type1_PUSCH_RepetitionMultiSlots

      if (type1_PUSCH_RepetitionMultiSlots != null) {
         buffer.getContext().eventDispatcher.startElement("type1_PUSCH_RepetitionMultiSlots", -1);

         type1_PUSCH_RepetitionMultiSlots.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("type1_PUSCH_RepetitionMultiSlots", -1);
      }

      // encode type2_PUSCH_RepetitionMultiSlots

      if (type2_PUSCH_RepetitionMultiSlots != null) {
         buffer.getContext().eventDispatcher.startElement("type2_PUSCH_RepetitionMultiSlots", -1);

         type2_PUSCH_RepetitionMultiSlots.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("type2_PUSCH_RepetitionMultiSlots", -1);
      }

      // encode pusch_RepetitionMultiSlots

      if (pusch_RepetitionMultiSlots != null) {
         buffer.getContext().eventDispatcher.startElement("pusch_RepetitionMultiSlots", -1);

         pusch_RepetitionMultiSlots.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("pusch_RepetitionMultiSlots", -1);
      }

      // encode pdsch_RepetitionMultiSlots

      if (pdsch_RepetitionMultiSlots != null) {
         buffer.getContext().eventDispatcher.startElement("pdsch_RepetitionMultiSlots", -1);

         pdsch_RepetitionMultiSlots.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("pdsch_RepetitionMultiSlots", -1);
      }

      // encode downlinkSPS

      if (downlinkSPS != null) {
         buffer.getContext().eventDispatcher.startElement("downlinkSPS", -1);

         downlinkSPS.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("downlinkSPS", -1);
      }

      // encode configuredUL_GrantType1

      if (configuredUL_GrantType1 != null) {
         buffer.getContext().eventDispatcher.startElement("configuredUL_GrantType1", -1);

         configuredUL_GrantType1.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("configuredUL_GrantType1", -1);
      }

      // encode configuredUL_GrantType2

      if (configuredUL_GrantType2 != null) {
         buffer.getContext().eventDispatcher.startElement("configuredUL_GrantType2", -1);

         configuredUL_GrantType2.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("configuredUL_GrantType2", -1);
      }

      // encode pre_EmptIndication_DL

      if (pre_EmptIndication_DL != null) {
         buffer.getContext().eventDispatcher.startElement("pre_EmptIndication_DL", -1);

         pre_EmptIndication_DL.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("pre_EmptIndication_DL", -1);
      }

      // encode cbg_TransIndication_DL

      if (cbg_TransIndication_DL != null) {
         buffer.getContext().eventDispatcher.startElement("cbg_TransIndication_DL", -1);

         cbg_TransIndication_DL.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("cbg_TransIndication_DL", -1);
      }

      // encode cbg_TransIndication_UL

      if (cbg_TransIndication_UL != null) {
         buffer.getContext().eventDispatcher.startElement("cbg_TransIndication_UL", -1);

         cbg_TransIndication_UL.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("cbg_TransIndication_UL", -1);
      }

      // encode cbg_FlushIndication_DL

      if (cbg_FlushIndication_DL != null) {
         buffer.getContext().eventDispatcher.startElement("cbg_FlushIndication_DL", -1);

         cbg_FlushIndication_DL.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("cbg_FlushIndication_DL", -1);
      }

      // encode dynamicHARQ_ACK_CodeB_CBG_Retx_DL

      if (dynamicHARQ_ACK_CodeB_CBG_Retx_DL != null) {
         buffer.getContext().eventDispatcher.startElement("dynamicHARQ_ACK_CodeB_CBG_Retx_DL", -1);

         dynamicHARQ_ACK_CodeB_CBG_Retx_DL.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("dynamicHARQ_ACK_CodeB_CBG_Retx_DL", -1);
      }

      // encode rateMatchingResrcSetSemi_Static

      if (rateMatchingResrcSetSemi_Static != null) {
         buffer.getContext().eventDispatcher.startElement("rateMatchingResrcSetSemi_Static", -1);

         rateMatchingResrcSetSemi_Static.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("rateMatchingResrcSetSemi_Static", -1);
      }

      // encode rateMatchingResrcSetDynamic

      if (rateMatchingResrcSetDynamic != null) {
         buffer.getContext().eventDispatcher.startElement("rateMatchingResrcSetDynamic", -1);

         rateMatchingResrcSetDynamic.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("rateMatchingResrcSetDynamic", -1);
      }

      // encode bwp_SwitchingDelay

      if (bwp_SwitchingDelay != null) {
         buffer.getContext().eventDispatcher.startElement("bwp_SwitchingDelay", -1);

         bwp_SwitchingDelay.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("bwp_SwitchingDelay", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 6;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit (mV2ExtPresent, null);
         buffer.encodeBit (mV3ExtPresent, null);
         buffer.encodeBit (mV4ExtPresent, null);
         buffer.encodeBit (mV5ExtPresent, null);
         buffer.encodeBit (mV6ExtPresent, null);
         buffer.encodeBit (mV7ExtPresent, null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         if (mV2ExtPresent) {
            buffer.reset();
            buffer.encodeBit ((dummy != null), "optbit");
            if (dummy != null) {
               dummy.encode (buffer);
            }
            mainBuffer.encodeOpenType (buffer, null);
         }

         if (mV3ExtPresent) {
            buffer.reset();
            buffer.encodeBit ((maxNumberSearchSpaces != null), "optbit");
            buffer.encodeBit ((rateMatchingCtrlResrcSetDynamic != null), "optbit");
            buffer.encodeBit ((maxLayersMIMO_Indication != null), "optbit");
            if (maxNumberSearchSpaces != null) {
               maxNumberSearchSpaces.encode (buffer);
            }
            if (rateMatchingCtrlResrcSetDynamic != null) {
               rateMatchingCtrlResrcSetDynamic.encode (buffer);
            }
            if (maxLayersMIMO_Indication != null) {
               maxLayersMIMO_Indication.encode (buffer);
            }
            mainBuffer.encodeOpenType (buffer, null);
         }

         if (mV4ExtPresent) {
            buffer.reset();
            buffer.encodeBit ((spCellPlacement != null), "optbit");
            if (spCellPlacement != null) {
               spCellPlacement.encode (buffer);
            }
            mainBuffer.encodeOpenType (buffer, null);
         }

         if (mV5ExtPresent) {
            buffer.reset();
            buffer.encodeBit ((twoStepRACH_r16 != null), "optbit");
            buffer.encodeBit ((dci_Format1_2And0_2_r16 != null), "optbit");
            buffer.encodeBit ((monitoringDCI_SameSearchSpace_r16 != null), "optbit");
            buffer.encodeBit ((type2_CG_ReleaseDCI_0_1_r16 != null), "optbit");
            buffer.encodeBit ((type2_CG_ReleaseDCI_0_2_r16 != null), "optbit");
            buffer.encodeBit ((sps_ReleaseDCI_1_1_r16 != null), "optbit");
            buffer.encodeBit ((sps_ReleaseDCI_1_2_r16 != null), "optbit");
            buffer.encodeBit ((csi_TriggerStateNon_ActiveBWP_r16 != null), "optbit");
            buffer.encodeBit ((seperateSMTC_InterIAB_Support_r16 != null), "optbit");
            buffer.encodeBit ((seperateRACH_IAB_Support_r16 != null), "optbit");
            buffer.encodeBit ((ul_flexibleDL_SlotFormatSemiStatic_IAB_r16 != null), "optbit");
            buffer.encodeBit ((ul_flexibleDL_SlotFormatDynamics_IAB_r16 != null), "optbit");
            buffer.encodeBit ((dft_S_OFDM_WaveformUL_IAB_r16 != null), "optbit");
            buffer.encodeBit ((dci_25_AI_RNTI_Support_IAB_r16 != null), "optbit");
            buffer.encodeBit ((t_DeltaReceptionSupport_IAB_r16 != null), "optbit");
            buffer.encodeBit ((guardSymbolReportReception_IAB_r16 != null), "optbit");
            buffer.encodeBit ((harqACK_CB_SpatialBundlingPUCCH_Group_r16 != null), "optbit");
            buffer.encodeBit ((crossSlotScheduling_r16 != null), "optbit");
            buffer.encodeBit ((maxNumberSRS_PosPathLossEstimateAllServingCells_r16 != null), "optbit");
            buffer.encodeBit ((extendedCG_Periodicities_r16 != null), "optbit");
            buffer.encodeBit ((extendedSPS_Periodicities_r16 != null), "optbit");
            buffer.encodeBit ((codebookVariantsList_r16 != null), "optbit");
            buffer.encodeBit ((pusch_RepetitionTypeA_r16 != null), "optbit");
            buffer.encodeBit ((dci_DL_PriorityIndicator_r16 != null), "optbit");
            buffer.encodeBit ((dci_UL_PriorityIndicator_r16 != null), "optbit");
            buffer.encodeBit ((maxNumberPathlossRS_Update_r16 != null), "optbit");
            buffer.encodeBit ((type2_HARQ_ACK_Codebook_r16 != null), "optbit");
            buffer.encodeBit ((maxTotalResourcesForAcrossFreqRanges_r16 != null), "optbit");
            buffer.encodeBit ((harqACK_separateMultiDCI_MultiTRP_r16 != null), "optbit");
            buffer.encodeBit ((harqACK_jointMultiDCI_MultiTRP_r16 != null), "optbit");
            buffer.encodeBit ((bwp_SwitchingMultiCCs_r16 != null), "optbit");
            if (twoStepRACH_r16 != null) {
               twoStepRACH_r16.encode (buffer);
            }
            if (dci_Format1_2And0_2_r16 != null) {
               dci_Format1_2And0_2_r16.encode (buffer);
            }
            if (monitoringDCI_SameSearchSpace_r16 != null) {
               monitoringDCI_SameSearchSpace_r16.encode (buffer);
            }
            if (type2_CG_ReleaseDCI_0_1_r16 != null) {
               type2_CG_ReleaseDCI_0_1_r16.encode (buffer);
            }
            if (type2_CG_ReleaseDCI_0_2_r16 != null) {
               type2_CG_ReleaseDCI_0_2_r16.encode (buffer);
            }
            if (sps_ReleaseDCI_1_1_r16 != null) {
               sps_ReleaseDCI_1_1_r16.encode (buffer);
            }
            if (sps_ReleaseDCI_1_2_r16 != null) {
               sps_ReleaseDCI_1_2_r16.encode (buffer);
            }
            if (csi_TriggerStateNon_ActiveBWP_r16 != null) {
               csi_TriggerStateNon_ActiveBWP_r16.encode (buffer);
            }
            if (seperateSMTC_InterIAB_Support_r16 != null) {
               seperateSMTC_InterIAB_Support_r16.encode (buffer);
            }
            if (seperateRACH_IAB_Support_r16 != null) {
               seperateRACH_IAB_Support_r16.encode (buffer);
            }
            if (ul_flexibleDL_SlotFormatSemiStatic_IAB_r16 != null) {
               ul_flexibleDL_SlotFormatSemiStatic_IAB_r16.encode (buffer);
            }
            if (ul_flexibleDL_SlotFormatDynamics_IAB_r16 != null) {
               ul_flexibleDL_SlotFormatDynamics_IAB_r16.encode (buffer);
            }
            if (dft_S_OFDM_WaveformUL_IAB_r16 != null) {
               dft_S_OFDM_WaveformUL_IAB_r16.encode (buffer);
            }
            if (dci_25_AI_RNTI_Support_IAB_r16 != null) {
               dci_25_AI_RNTI_Support_IAB_r16.encode (buffer);
            }
            if (t_DeltaReceptionSupport_IAB_r16 != null) {
               t_DeltaReceptionSupport_IAB_r16.encode (buffer);
            }
            if (guardSymbolReportReception_IAB_r16 != null) {
               guardSymbolReportReception_IAB_r16.encode (buffer);
            }
            if (harqACK_CB_SpatialBundlingPUCCH_Group_r16 != null) {
               harqACK_CB_SpatialBundlingPUCCH_Group_r16.encode (buffer);
            }
            if (crossSlotScheduling_r16 != null) {
               crossSlotScheduling_r16.encode (buffer);
            }
            if (maxNumberSRS_PosPathLossEstimateAllServingCells_r16 != null) {
               maxNumberSRS_PosPathLossEstimateAllServingCells_r16.encode (buffer);
            }
            if (extendedCG_Periodicities_r16 != null) {
               extendedCG_Periodicities_r16.encode (buffer);
            }
            if (extendedSPS_Periodicities_r16 != null) {
               extendedSPS_Periodicities_r16.encode (buffer);
            }
            if (codebookVariantsList_r16 != null) {
               codebookVariantsList_r16.encode (buffer);
            }
            if (pusch_RepetitionTypeA_r16 != null) {
               pusch_RepetitionTypeA_r16.encode (buffer);
            }
            if (dci_DL_PriorityIndicator_r16 != null) {
               dci_DL_PriorityIndicator_r16.encode (buffer);
            }
            if (dci_UL_PriorityIndicator_r16 != null) {
               dci_UL_PriorityIndicator_r16.encode (buffer);
            }
            if (maxNumberPathlossRS_Update_r16 != null) {
               maxNumberPathlossRS_Update_r16.encode (buffer);
            }
            if (type2_HARQ_ACK_Codebook_r16 != null) {
               type2_HARQ_ACK_Codebook_r16.encode (buffer);
            }
            if (maxTotalResourcesForAcrossFreqRanges_r16 != null) {
               maxTotalResourcesForAcrossFreqRanges_r16.encode (buffer);
            }
            if (harqACK_separateMultiDCI_MultiTRP_r16 != null) {
               harqACK_separateMultiDCI_MultiTRP_r16.encode (buffer);
            }
            if (harqACK_jointMultiDCI_MultiTRP_r16 != null) {
               harqACK_jointMultiDCI_MultiTRP_r16.encode (buffer);
            }
            if (bwp_SwitchingMultiCCs_r16 != null) {
               bwp_SwitchingMultiCCs_r16.encode (buffer);
            }
            mainBuffer.encodeOpenType (buffer, null);
         }

         if (mV6ExtPresent) {
            buffer.reset();
            buffer.encodeBit ((targetSMTC_SCG_r16 != null), "optbit");
            buffer.encodeBit ((supportRepetitionZeroOffsetRV_r16 != null), "optbit");
            buffer.encodeBit ((cbg_TransInOrderPUSCH_UL_r16 != null), "optbit");
            if (targetSMTC_SCG_r16 != null) {
               targetSMTC_SCG_r16.encode (buffer);
            }
            if (supportRepetitionZeroOffsetRV_r16 != null) {
               supportRepetitionZeroOffsetRV_r16.encode (buffer);
            }
            if (cbg_TransInOrderPUSCH_UL_r16 != null) {
               cbg_TransInOrderPUSCH_UL_r16.encode (buffer);
            }
            mainBuffer.encodeOpenType (buffer, null);
         }

         if (mV7ExtPresent) {
            buffer.reset();
            buffer.encodeBit ((bwp_SwitchingMultiDormancyCCs_r16 != null), "optbit");
            buffer.encodeBit ((supportRetx_Diff_CoresetPool_Multi_DCI_TRP_r16 != null), "optbit");
            buffer.encodeBit ((pdcch_MonitoringAnyOccasionsWithSpanGapCrossCarrierSch_r16 != null), "optbit");
            if (bwp_SwitchingMultiDormancyCCs_r16 != null) {
               bwp_SwitchingMultiDormancyCCs_r16.encode (buffer);
            }
            if (supportRetx_Diff_CoresetPool_Multi_DCI_TRP_r16 != null) {
               supportRetx_Diff_CoresetPool_Multi_DCI_TRP_r16.encode (buffer);
            }
            if (pdcch_MonitoringAnyOccasionsWithSpanGapCrossCarrierSch_r16 != null) {
               pdcch_MonitoringAnyOccasionsWithSpanGapCrossCarrierSch_r16.encode (buffer);
            }
            mainBuffer.encodeOpenType (buffer, null);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (csi_RS_CFRA_ForHO != null) csi_RS_CFRA_ForHO.print (_sb, "csi_RS_CFRA_ForHO", _level+1);
      if (dynamicPRB_BundlingDL != null) dynamicPRB_BundlingDL.print (_sb, "dynamicPRB_BundlingDL", _level+1);
      if (sp_CSI_ReportPUCCH != null) sp_CSI_ReportPUCCH.print (_sb, "sp_CSI_ReportPUCCH", _level+1);
      if (sp_CSI_ReportPUSCH != null) sp_CSI_ReportPUSCH.print (_sb, "sp_CSI_ReportPUSCH", _level+1);
      if (nzp_CSI_RS_IntefMgmt != null) nzp_CSI_RS_IntefMgmt.print (_sb, "nzp_CSI_RS_IntefMgmt", _level+1);
      if (type2_SP_CSI_Feedback_LongPUCCH != null) type2_SP_CSI_Feedback_LongPUCCH.print (_sb, "type2_SP_CSI_Feedback_LongPUCCH", _level+1);
      if (precoderGranularityCORESET != null) precoderGranularityCORESET.print (_sb, "precoderGranularityCORESET", _level+1);
      if (dynamicHARQ_ACK_Codebook != null) dynamicHARQ_ACK_Codebook.print (_sb, "dynamicHARQ_ACK_Codebook", _level+1);
      if (semiStaticHARQ_ACK_Codebook != null) semiStaticHARQ_ACK_Codebook.print (_sb, "semiStaticHARQ_ACK_Codebook", _level+1);
      if (spatialBundlingHARQ_ACK != null) spatialBundlingHARQ_ACK.print (_sb, "spatialBundlingHARQ_ACK", _level+1);
      if (dynamicBetaOffsetInd_HARQ_ACK_CSI != null) dynamicBetaOffsetInd_HARQ_ACK_CSI.print (_sb, "dynamicBetaOffsetInd_HARQ_ACK_CSI", _level+1);
      if (pucch_Repetition_F1_3_4 != null) pucch_Repetition_F1_3_4.print (_sb, "pucch_Repetition_F1_3_4", _level+1);
      if (ra_Type0_PUSCH != null) ra_Type0_PUSCH.print (_sb, "ra_Type0_PUSCH", _level+1);
      if (dynamicSwitchRA_Type0_1_PDSCH != null) dynamicSwitchRA_Type0_1_PDSCH.print (_sb, "dynamicSwitchRA_Type0_1_PDSCH", _level+1);
      if (dynamicSwitchRA_Type0_1_PUSCH != null) dynamicSwitchRA_Type0_1_PUSCH.print (_sb, "dynamicSwitchRA_Type0_1_PUSCH", _level+1);
      if (pdsch_MappingTypeA != null) pdsch_MappingTypeA.print (_sb, "pdsch_MappingTypeA", _level+1);
      if (pdsch_MappingTypeB != null) pdsch_MappingTypeB.print (_sb, "pdsch_MappingTypeB", _level+1);
      if (interleavingVRB_ToPRB_PDSCH != null) interleavingVRB_ToPRB_PDSCH.print (_sb, "interleavingVRB_ToPRB_PDSCH", _level+1);
      if (interSlotFreqHopping_PUSCH != null) interSlotFreqHopping_PUSCH.print (_sb, "interSlotFreqHopping_PUSCH", _level+1);
      if (type1_PUSCH_RepetitionMultiSlots != null) type1_PUSCH_RepetitionMultiSlots.print (_sb, "type1_PUSCH_RepetitionMultiSlots", _level+1);
      if (type2_PUSCH_RepetitionMultiSlots != null) type2_PUSCH_RepetitionMultiSlots.print (_sb, "type2_PUSCH_RepetitionMultiSlots", _level+1);
      if (pusch_RepetitionMultiSlots != null) pusch_RepetitionMultiSlots.print (_sb, "pusch_RepetitionMultiSlots", _level+1);
      if (pdsch_RepetitionMultiSlots != null) pdsch_RepetitionMultiSlots.print (_sb, "pdsch_RepetitionMultiSlots", _level+1);
      if (downlinkSPS != null) downlinkSPS.print (_sb, "downlinkSPS", _level+1);
      if (configuredUL_GrantType1 != null) configuredUL_GrantType1.print (_sb, "configuredUL_GrantType1", _level+1);
      if (configuredUL_GrantType2 != null) configuredUL_GrantType2.print (_sb, "configuredUL_GrantType2", _level+1);
      if (pre_EmptIndication_DL != null) pre_EmptIndication_DL.print (_sb, "pre_EmptIndication_DL", _level+1);
      if (cbg_TransIndication_DL != null) cbg_TransIndication_DL.print (_sb, "cbg_TransIndication_DL", _level+1);
      if (cbg_TransIndication_UL != null) cbg_TransIndication_UL.print (_sb, "cbg_TransIndication_UL", _level+1);
      if (cbg_FlushIndication_DL != null) cbg_FlushIndication_DL.print (_sb, "cbg_FlushIndication_DL", _level+1);
      if (dynamicHARQ_ACK_CodeB_CBG_Retx_DL != null) dynamicHARQ_ACK_CodeB_CBG_Retx_DL.print (_sb, "dynamicHARQ_ACK_CodeB_CBG_Retx_DL", _level+1);
      if (rateMatchingResrcSetSemi_Static != null) rateMatchingResrcSetSemi_Static.print (_sb, "rateMatchingResrcSetSemi_Static", _level+1);
      if (rateMatchingResrcSetDynamic != null) rateMatchingResrcSetDynamic.print (_sb, "rateMatchingResrcSetDynamic", _level+1);
      if (bwp_SwitchingDelay != null) bwp_SwitchingDelay.print (_sb, "bwp_SwitchingDelay", _level+1);
      if (dummy != null) dummy.print (_sb, "dummy", _level+1);
      if (maxNumberSearchSpaces != null) maxNumberSearchSpaces.print (_sb, "maxNumberSearchSpaces", _level+1);
      if (rateMatchingCtrlResrcSetDynamic != null) rateMatchingCtrlResrcSetDynamic.print (_sb, "rateMatchingCtrlResrcSetDynamic", _level+1);
      if (maxLayersMIMO_Indication != null) maxLayersMIMO_Indication.print (_sb, "maxLayersMIMO_Indication", _level+1);
      if (spCellPlacement != null) spCellPlacement.print (_sb, "spCellPlacement", _level+1);
      if (twoStepRACH_r16 != null) twoStepRACH_r16.print (_sb, "twoStepRACH_r16", _level+1);
      if (dci_Format1_2And0_2_r16 != null) dci_Format1_2And0_2_r16.print (_sb, "dci_Format1_2And0_2_r16", _level+1);
      if (monitoringDCI_SameSearchSpace_r16 != null) monitoringDCI_SameSearchSpace_r16.print (_sb, "monitoringDCI_SameSearchSpace_r16", _level+1);
      if (type2_CG_ReleaseDCI_0_1_r16 != null) type2_CG_ReleaseDCI_0_1_r16.print (_sb, "type2_CG_ReleaseDCI_0_1_r16", _level+1);
      if (type2_CG_ReleaseDCI_0_2_r16 != null) type2_CG_ReleaseDCI_0_2_r16.print (_sb, "type2_CG_ReleaseDCI_0_2_r16", _level+1);
      if (sps_ReleaseDCI_1_1_r16 != null) sps_ReleaseDCI_1_1_r16.print (_sb, "sps_ReleaseDCI_1_1_r16", _level+1);
      if (sps_ReleaseDCI_1_2_r16 != null) sps_ReleaseDCI_1_2_r16.print (_sb, "sps_ReleaseDCI_1_2_r16", _level+1);
      if (csi_TriggerStateNon_ActiveBWP_r16 != null) csi_TriggerStateNon_ActiveBWP_r16.print (_sb, "csi_TriggerStateNon_ActiveBWP_r16", _level+1);
      if (seperateSMTC_InterIAB_Support_r16 != null) seperateSMTC_InterIAB_Support_r16.print (_sb, "seperateSMTC_InterIAB_Support_r16", _level+1);
      if (seperateRACH_IAB_Support_r16 != null) seperateRACH_IAB_Support_r16.print (_sb, "seperateRACH_IAB_Support_r16", _level+1);
      if (ul_flexibleDL_SlotFormatSemiStatic_IAB_r16 != null) ul_flexibleDL_SlotFormatSemiStatic_IAB_r16.print (_sb, "ul_flexibleDL_SlotFormatSemiStatic_IAB_r16", _level+1);
      if (ul_flexibleDL_SlotFormatDynamics_IAB_r16 != null) ul_flexibleDL_SlotFormatDynamics_IAB_r16.print (_sb, "ul_flexibleDL_SlotFormatDynamics_IAB_r16", _level+1);
      if (dft_S_OFDM_WaveformUL_IAB_r16 != null) dft_S_OFDM_WaveformUL_IAB_r16.print (_sb, "dft_S_OFDM_WaveformUL_IAB_r16", _level+1);
      if (dci_25_AI_RNTI_Support_IAB_r16 != null) dci_25_AI_RNTI_Support_IAB_r16.print (_sb, "dci_25_AI_RNTI_Support_IAB_r16", _level+1);
      if (t_DeltaReceptionSupport_IAB_r16 != null) t_DeltaReceptionSupport_IAB_r16.print (_sb, "t_DeltaReceptionSupport_IAB_r16", _level+1);
      if (guardSymbolReportReception_IAB_r16 != null) guardSymbolReportReception_IAB_r16.print (_sb, "guardSymbolReportReception_IAB_r16", _level+1);
      if (harqACK_CB_SpatialBundlingPUCCH_Group_r16 != null) harqACK_CB_SpatialBundlingPUCCH_Group_r16.print (_sb, "harqACK_CB_SpatialBundlingPUCCH_Group_r16", _level+1);
      if (crossSlotScheduling_r16 != null) crossSlotScheduling_r16.print (_sb, "crossSlotScheduling_r16", _level+1);
      if (maxNumberSRS_PosPathLossEstimateAllServingCells_r16 != null) maxNumberSRS_PosPathLossEstimateAllServingCells_r16.print (_sb, "maxNumberSRS_PosPathLossEstimateAllServingCells_r16", _level+1);
      if (extendedCG_Periodicities_r16 != null) extendedCG_Periodicities_r16.print (_sb, "extendedCG_Periodicities_r16", _level+1);
      if (extendedSPS_Periodicities_r16 != null) extendedSPS_Periodicities_r16.print (_sb, "extendedSPS_Periodicities_r16", _level+1);
      if (codebookVariantsList_r16 != null) codebookVariantsList_r16.print (_sb, "codebookVariantsList_r16", _level+1);
      if (pusch_RepetitionTypeA_r16 != null) pusch_RepetitionTypeA_r16.print (_sb, "pusch_RepetitionTypeA_r16", _level+1);
      if (dci_DL_PriorityIndicator_r16 != null) dci_DL_PriorityIndicator_r16.print (_sb, "dci_DL_PriorityIndicator_r16", _level+1);
      if (dci_UL_PriorityIndicator_r16 != null) dci_UL_PriorityIndicator_r16.print (_sb, "dci_UL_PriorityIndicator_r16", _level+1);
      if (maxNumberPathlossRS_Update_r16 != null) maxNumberPathlossRS_Update_r16.print (_sb, "maxNumberPathlossRS_Update_r16", _level+1);
      if (type2_HARQ_ACK_Codebook_r16 != null) type2_HARQ_ACK_Codebook_r16.print (_sb, "type2_HARQ_ACK_Codebook_r16", _level+1);
      if (maxTotalResourcesForAcrossFreqRanges_r16 != null) maxTotalResourcesForAcrossFreqRanges_r16.print (_sb, "maxTotalResourcesForAcrossFreqRanges_r16", _level+1);
      if (harqACK_separateMultiDCI_MultiTRP_r16 != null) harqACK_separateMultiDCI_MultiTRP_r16.print (_sb, "harqACK_separateMultiDCI_MultiTRP_r16", _level+1);
      if (harqACK_jointMultiDCI_MultiTRP_r16 != null) harqACK_jointMultiDCI_MultiTRP_r16.print (_sb, "harqACK_jointMultiDCI_MultiTRP_r16", _level+1);
      if (bwp_SwitchingMultiCCs_r16 != null) bwp_SwitchingMultiCCs_r16.print (_sb, "bwp_SwitchingMultiCCs_r16", _level+1);
      if (targetSMTC_SCG_r16 != null) targetSMTC_SCG_r16.print (_sb, "targetSMTC_SCG_r16", _level+1);
      if (supportRepetitionZeroOffsetRV_r16 != null) supportRepetitionZeroOffsetRV_r16.print (_sb, "supportRepetitionZeroOffsetRV_r16", _level+1);
      if (cbg_TransInOrderPUSCH_UL_r16 != null) cbg_TransInOrderPUSCH_UL_r16.print (_sb, "cbg_TransInOrderPUSCH_UL_r16", _level+1);
      if (bwp_SwitchingMultiDormancyCCs_r16 != null) bwp_SwitchingMultiDormancyCCs_r16.print (_sb, "bwp_SwitchingMultiDormancyCCs_r16", _level+1);
      if (supportRetx_Diff_CoresetPool_Multi_DCI_TRP_r16 != null) supportRetx_Diff_CoresetPool_Multi_DCI_TRP_r16.print (_sb, "supportRetx_Diff_CoresetPool_Multi_DCI_TRP_r16", _level+1);
      if (pdcch_MonitoringAnyOccasionsWithSpanGapCrossCarrierSch_r16 != null) pdcch_MonitoringAnyOccasionsWithSpanGapCrossCarrierSch_r16.print (_sb, "pdcch_MonitoringAnyOccasionsWithSpanGapCrossCarrierSch_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
