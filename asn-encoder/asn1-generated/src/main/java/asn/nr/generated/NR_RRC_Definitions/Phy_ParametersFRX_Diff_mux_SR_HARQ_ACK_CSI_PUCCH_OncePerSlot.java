/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class Phy_ParametersFRX_Diff_mux_SR_HARQ_ACK_CSI_PUCCH_OncePerSlot extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public Phy_ParametersFRX_Diff_mux_SR_HARQ_ACK_CSI_PUCCH_OncePerSlot_sameSymbol sameSymbol = null;  // optional
   public Phy_ParametersFRX_Diff_mux_SR_HARQ_ACK_CSI_PUCCH_OncePerSlot_diffSymbol diffSymbol = null;  // optional

   public Phy_ParametersFRX_Diff_mux_SR_HARQ_ACK_CSI_PUCCH_OncePerSlot () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public Phy_ParametersFRX_Diff_mux_SR_HARQ_ACK_CSI_PUCCH_OncePerSlot (
      Phy_ParametersFRX_Diff_mux_SR_HARQ_ACK_CSI_PUCCH_OncePerSlot_sameSymbol sameSymbol_,
      Phy_ParametersFRX_Diff_mux_SR_HARQ_ACK_CSI_PUCCH_OncePerSlot_diffSymbol diffSymbol_
   ) {
      super();
      sameSymbol = sameSymbol_;
      diffSymbol = diffSymbol_;
   }

   public void init () {
      sameSymbol = null;
      diffSymbol = null;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return sameSymbol;
         case 1: return diffSymbol;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "sameSymbol";
         case 1: return "diffSymbol";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean sameSymbolPresent = buffer.decodeBit ("sameSymbolPresent");
      boolean diffSymbolPresent = buffer.decodeBit ("diffSymbolPresent");

      // decode sameSymbol

      if (sameSymbolPresent) {
         buffer.getContext().eventDispatcher.startElement("sameSymbol", -1);

         int tval = Phy_ParametersFRX_Diff_mux_SR_HARQ_ACK_CSI_PUCCH_OncePerSlot_sameSymbol.decodeEnumValue (buffer);
         sameSymbol = Phy_ParametersFRX_Diff_mux_SR_HARQ_ACK_CSI_PUCCH_OncePerSlot_sameSymbol.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("sameSymbol", -1);
      }
      else {
         sameSymbol = null;
      }

      // decode diffSymbol

      if (diffSymbolPresent) {
         buffer.getContext().eventDispatcher.startElement("diffSymbol", -1);

         int tval = Phy_ParametersFRX_Diff_mux_SR_HARQ_ACK_CSI_PUCCH_OncePerSlot_diffSymbol.decodeEnumValue (buffer);
         diffSymbol = Phy_ParametersFRX_Diff_mux_SR_HARQ_ACK_CSI_PUCCH_OncePerSlot_diffSymbol.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("diffSymbol", -1);
      }
      else {
         diffSymbol = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((sameSymbol != null), null);
      buffer.encodeBit ((diffSymbol != null), null);

      // encode sameSymbol

      if (sameSymbol != null) {
         buffer.getContext().eventDispatcher.startElement("sameSymbol", -1);

         sameSymbol.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sameSymbol", -1);
      }

      // encode diffSymbol

      if (diffSymbol != null) {
         buffer.getContext().eventDispatcher.startElement("diffSymbol", -1);

         diffSymbol.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("diffSymbol", -1);
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (sameSymbol != null) sameSymbol.print (_sb, "sameSymbol", _level+1);
      if (diffSymbol != null) diffSymbol.print (_sb, "diffSymbol", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
