/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class TDD_UL_DL_SlotConfig_symbols extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CHOICE";
   }

   // Choice element identifier constants
   public final static byte _ALLDOWNLINK = 1;
   public final static byte _ALLUPLINK = 2;
   public final static byte _EXPLICIT = 3;

   public TDD_UL_DL_SlotConfig_symbols () {
      super();
   }

   public TDD_UL_DL_SlotConfig_symbols (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _ALLDOWNLINK: return "allDownlink";
      case _ALLUPLINK: return "allUplink";
      case _EXPLICIT: return "explicit";
      default: return "UNDEFINED";
      }
   }

   public void set_allDownlink () {
      setElement (_ALLDOWNLINK, Asn1Null.NULL_VALUE);
   }

   public void set_allUplink () {
      setElement (_ALLUPLINK, Asn1Null.NULL_VALUE);
   }

   public void set_explicit (TDD_UL_DL_SlotConfig_symbols_explicit value) {
      setElement (_EXPLICIT, value);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int idx = (int) buffer.decodeConsWholeNumber (3, "index");
      choiceID = idx + 1;
      buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

      switch (idx) {
         // allDownlink
         case 0: { 
            Asn1Null allDownlink;
            element = allDownlink = Asn1Null.NULL_VALUE;
            allDownlink.decode (buffer);

            buffer.invokeCharacters(allDownlink.toString());
            break;
         }

         // allUplink
         case 1: { 
            Asn1Null allUplink;
            element = allUplink = Asn1Null.NULL_VALUE;
            allUplink.decode (buffer);

            buffer.invokeCharacters(allUplink.toString());
            break;
         }

         // explicit
         case 2: { 
            TDD_UL_DL_SlotConfig_symbols_explicit explicit;
            element = explicit = new TDD_UL_DL_SlotConfig_symbols_explicit();
            explicit.decode (buffer);
            break;
         }

         default:
         throw new Asn1InvalidChoiceOptionException (buffer, idx);
      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // Encode choice index value

      buffer.encodeConsWholeNumber (choiceID - 1, 3, "index");

      buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

      switch (choiceID) {
         // allDownlink
         case _ALLDOWNLINK:
            Asn1Null allDownlink = (Asn1Null) element;
            allDownlink.encode (buffer);
            break;

         // allUplink
         case _ALLUPLINK:
            Asn1Null allUplink = (Asn1Null) element;
            allUplink.encode (buffer);
            break;

         // explicit
         case _EXPLICIT:
            TDD_UL_DL_SlotConfig_symbols_explicit explicit = (TDD_UL_DL_SlotConfig_symbols_explicit) element;
            explicit.encode (buffer);
            break;

         default:
         throw new Asn1InvalidChoiceOptionException();
      }

      buffer.getContext().eventDispatcher.endElement("getElemName()", -1);
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (element != null) {
         element.print (_sb, getElemName(), _level+1);
      }
      indent (_sb, _level);
      _sb.append("}\n");
   }

}
