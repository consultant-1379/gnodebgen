/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class DRX_Config extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "DRX-Config";
   }

   public DRX_Config_drx_onDurationTimer drx_onDurationTimer;
   public DRX_Config_drx_InactivityTimer drx_InactivityTimer = null;
   public Asn1Integer drx_HARQ_RTT_TimerDL;
   public Asn1Integer drx_HARQ_RTT_TimerUL;
   public DRX_Config_drx_RetransmissionTimerDL drx_RetransmissionTimerDL = null;
   public DRX_Config_drx_RetransmissionTimerUL drx_RetransmissionTimerUL = null;
   public DRX_Config_drx_LongCycleStartOffset drx_LongCycleStartOffset;
   public DRX_Config_shortDRX shortDRX;  // optional
   public Asn1Integer drx_SlotOffset;

   public DRX_Config () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public DRX_Config (
      DRX_Config_drx_onDurationTimer drx_onDurationTimer_,
      DRX_Config_drx_InactivityTimer drx_InactivityTimer_,
      Asn1Integer drx_HARQ_RTT_TimerDL_,
      Asn1Integer drx_HARQ_RTT_TimerUL_,
      DRX_Config_drx_RetransmissionTimerDL drx_RetransmissionTimerDL_,
      DRX_Config_drx_RetransmissionTimerUL drx_RetransmissionTimerUL_,
      DRX_Config_drx_LongCycleStartOffset drx_LongCycleStartOffset_,
      DRX_Config_shortDRX shortDRX_,
      Asn1Integer drx_SlotOffset_
   ) {
      super();
      drx_onDurationTimer = drx_onDurationTimer_;
      drx_InactivityTimer = drx_InactivityTimer_;
      drx_HARQ_RTT_TimerDL = drx_HARQ_RTT_TimerDL_;
      drx_HARQ_RTT_TimerUL = drx_HARQ_RTT_TimerUL_;
      drx_RetransmissionTimerDL = drx_RetransmissionTimerDL_;
      drx_RetransmissionTimerUL = drx_RetransmissionTimerUL_;
      drx_LongCycleStartOffset = drx_LongCycleStartOffset_;
      shortDRX = shortDRX_;
      drx_SlotOffset = drx_SlotOffset_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public DRX_Config (
      DRX_Config_drx_onDurationTimer drx_onDurationTimer_,
      DRX_Config_drx_InactivityTimer drx_InactivityTimer_,
      Asn1Integer drx_HARQ_RTT_TimerDL_,
      Asn1Integer drx_HARQ_RTT_TimerUL_,
      DRX_Config_drx_RetransmissionTimerDL drx_RetransmissionTimerDL_,
      DRX_Config_drx_RetransmissionTimerUL drx_RetransmissionTimerUL_,
      DRX_Config_drx_LongCycleStartOffset drx_LongCycleStartOffset_,
      Asn1Integer drx_SlotOffset_
   ) {
      super();
      drx_onDurationTimer = drx_onDurationTimer_;
      drx_InactivityTimer = drx_InactivityTimer_;
      drx_HARQ_RTT_TimerDL = drx_HARQ_RTT_TimerDL_;
      drx_HARQ_RTT_TimerUL = drx_HARQ_RTT_TimerUL_;
      drx_RetransmissionTimerDL = drx_RetransmissionTimerDL_;
      drx_RetransmissionTimerUL = drx_RetransmissionTimerUL_;
      drx_LongCycleStartOffset = drx_LongCycleStartOffset_;
      drx_SlotOffset = drx_SlotOffset_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public DRX_Config (DRX_Config_drx_onDurationTimer drx_onDurationTimer_,
      DRX_Config_drx_InactivityTimer drx_InactivityTimer_,
      long drx_HARQ_RTT_TimerDL_,
      long drx_HARQ_RTT_TimerUL_,
      DRX_Config_drx_RetransmissionTimerDL drx_RetransmissionTimerDL_,
      DRX_Config_drx_RetransmissionTimerUL drx_RetransmissionTimerUL_,
      DRX_Config_drx_LongCycleStartOffset drx_LongCycleStartOffset_,
      DRX_Config_shortDRX shortDRX_,
      long drx_SlotOffset_
   ) {
      super();
      drx_onDurationTimer = drx_onDurationTimer_;
      drx_InactivityTimer = drx_InactivityTimer_;
      drx_HARQ_RTT_TimerDL = new Asn1Integer (drx_HARQ_RTT_TimerDL_);
      drx_HARQ_RTT_TimerUL = new Asn1Integer (drx_HARQ_RTT_TimerUL_);
      drx_RetransmissionTimerDL = drx_RetransmissionTimerDL_;
      drx_RetransmissionTimerUL = drx_RetransmissionTimerUL_;
      drx_LongCycleStartOffset = drx_LongCycleStartOffset_;
      shortDRX = shortDRX_;
      drx_SlotOffset = new Asn1Integer (drx_SlotOffset_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public DRX_Config (
      DRX_Config_drx_onDurationTimer drx_onDurationTimer_,
      DRX_Config_drx_InactivityTimer drx_InactivityTimer_,
      long drx_HARQ_RTT_TimerDL_,
      long drx_HARQ_RTT_TimerUL_,
      DRX_Config_drx_RetransmissionTimerDL drx_RetransmissionTimerDL_,
      DRX_Config_drx_RetransmissionTimerUL drx_RetransmissionTimerUL_,
      DRX_Config_drx_LongCycleStartOffset drx_LongCycleStartOffset_,
      long drx_SlotOffset_
   ) {
      super();
      drx_onDurationTimer = drx_onDurationTimer_;
      drx_InactivityTimer = drx_InactivityTimer_;
      drx_HARQ_RTT_TimerDL = new Asn1Integer (drx_HARQ_RTT_TimerDL_);
      drx_HARQ_RTT_TimerUL = new Asn1Integer (drx_HARQ_RTT_TimerUL_);
      drx_RetransmissionTimerDL = drx_RetransmissionTimerDL_;
      drx_RetransmissionTimerUL = drx_RetransmissionTimerUL_;
      drx_LongCycleStartOffset = drx_LongCycleStartOffset_;
      drx_SlotOffset = new Asn1Integer (drx_SlotOffset_);
   }

   public void init () {
      drx_onDurationTimer = null;
      drx_InactivityTimer = null;
      drx_HARQ_RTT_TimerDL = null;
      drx_HARQ_RTT_TimerUL = null;
      drx_RetransmissionTimerDL = null;
      drx_RetransmissionTimerUL = null;
      drx_LongCycleStartOffset = null;
      shortDRX = null;
      drx_SlotOffset = null;
   }

   public int getElementCount() { return 9; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return drx_onDurationTimer;
         case 1: return drx_InactivityTimer;
         case 2: return drx_HARQ_RTT_TimerDL;
         case 3: return drx_HARQ_RTT_TimerUL;
         case 4: return drx_RetransmissionTimerDL;
         case 5: return drx_RetransmissionTimerUL;
         case 6: return drx_LongCycleStartOffset;
         case 7: return shortDRX;
         case 8: return drx_SlotOffset;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "drx-onDurationTimer";
         case 1: return "drx-InactivityTimer";
         case 2: return "drx-HARQ-RTT-TimerDL";
         case 3: return "drx-HARQ-RTT-TimerUL";
         case 4: return "drx-RetransmissionTimerDL";
         case 5: return "drx-RetransmissionTimerUL";
         case 6: return "drx-LongCycleStartOffset";
         case 7: return "shortDRX";
         case 8: return "drx-SlotOffset";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean shortDRXPresent = buffer.decodeBit ("shortDRXPresent");

      // decode drx_onDurationTimer

      buffer.getContext().eventDispatcher.startElement("drx_onDurationTimer", -1);

      drx_onDurationTimer = new DRX_Config_drx_onDurationTimer();
      drx_onDurationTimer.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("drx_onDurationTimer", -1);

      // decode drx_InactivityTimer

      buffer.getContext().eventDispatcher.startElement("drx_InactivityTimer", -1);

      {
         int tval = DRX_Config_drx_InactivityTimer.decodeEnumValue (buffer);
         drx_InactivityTimer = DRX_Config_drx_InactivityTimer.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("drx_InactivityTimer", -1);

      // decode drx_HARQ_RTT_TimerDL

      buffer.getContext().eventDispatcher.startElement("drx_HARQ_RTT_TimerDL", -1);

      drx_HARQ_RTT_TimerDL = new Asn1Integer();
      drx_HARQ_RTT_TimerDL.decode (buffer, 0, 56);

      buffer.invokeCharacters(drx_HARQ_RTT_TimerDL.toString());
      buffer.getContext().eventDispatcher.endElement("drx_HARQ_RTT_TimerDL", -1);

      // decode drx_HARQ_RTT_TimerUL

      buffer.getContext().eventDispatcher.startElement("drx_HARQ_RTT_TimerUL", -1);

      drx_HARQ_RTT_TimerUL = new Asn1Integer();
      drx_HARQ_RTT_TimerUL.decode (buffer, 0, 56);

      buffer.invokeCharacters(drx_HARQ_RTT_TimerUL.toString());
      buffer.getContext().eventDispatcher.endElement("drx_HARQ_RTT_TimerUL", -1);

      // decode drx_RetransmissionTimerDL

      buffer.getContext().eventDispatcher.startElement("drx_RetransmissionTimerDL", -1);

      {
         int tval = DRX_Config_drx_RetransmissionTimerDL.decodeEnumValue (buffer);
         drx_RetransmissionTimerDL = DRX_Config_drx_RetransmissionTimerDL.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("drx_RetransmissionTimerDL", -1);

      // decode drx_RetransmissionTimerUL

      buffer.getContext().eventDispatcher.startElement("drx_RetransmissionTimerUL", -1);

      {
         int tval = DRX_Config_drx_RetransmissionTimerUL.decodeEnumValue (buffer);
         drx_RetransmissionTimerUL = DRX_Config_drx_RetransmissionTimerUL.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("drx_RetransmissionTimerUL", -1);

      // decode drx_LongCycleStartOffset

      buffer.getContext().eventDispatcher.startElement("drx_LongCycleStartOffset", -1);

      drx_LongCycleStartOffset = new DRX_Config_drx_LongCycleStartOffset();
      drx_LongCycleStartOffset.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("drx_LongCycleStartOffset", -1);

      // decode shortDRX

      if (shortDRXPresent) {
         buffer.getContext().eventDispatcher.startElement("shortDRX", -1);

         shortDRX = new DRX_Config_shortDRX();
         shortDRX.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("shortDRX", -1);
      }
      else {
         shortDRX = null;
      }

      // decode drx_SlotOffset

      buffer.getContext().eventDispatcher.startElement("drx_SlotOffset", -1);

      drx_SlotOffset = new Asn1Integer();
      drx_SlotOffset.decode (buffer, 0, 31);

      buffer.invokeCharacters(drx_SlotOffset.toString());
      buffer.getContext().eventDispatcher.endElement("drx_SlotOffset", -1);

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((shortDRX != null), null);

      // encode drx_onDurationTimer

      if (drx_onDurationTimer != null) {
         buffer.getContext().eventDispatcher.startElement("drx_onDurationTimer", -1);

         drx_onDurationTimer.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("drx_onDurationTimer", -1);
      }
      else throw new Asn1MissingRequiredException ("drx_onDurationTimer");

      // encode drx_InactivityTimer

      if (drx_InactivityTimer != null) {
         buffer.getContext().eventDispatcher.startElement("drx_InactivityTimer", -1);

         drx_InactivityTimer.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("drx_InactivityTimer", -1);
      }
      else throw new Asn1MissingRequiredException ("drx_InactivityTimer");

      // encode drx_HARQ_RTT_TimerDL

      if (drx_HARQ_RTT_TimerDL != null) {
         buffer.getContext().eventDispatcher.startElement("drx_HARQ_RTT_TimerDL", -1);

         drx_HARQ_RTT_TimerDL.encode (buffer, 0, 56);

         buffer.getContext().eventDispatcher.endElement("drx_HARQ_RTT_TimerDL", -1);
      }
      else throw new Asn1MissingRequiredException ("drx_HARQ_RTT_TimerDL");

      // encode drx_HARQ_RTT_TimerUL

      if (drx_HARQ_RTT_TimerUL != null) {
         buffer.getContext().eventDispatcher.startElement("drx_HARQ_RTT_TimerUL", -1);

         drx_HARQ_RTT_TimerUL.encode (buffer, 0, 56);

         buffer.getContext().eventDispatcher.endElement("drx_HARQ_RTT_TimerUL", -1);
      }
      else throw new Asn1MissingRequiredException ("drx_HARQ_RTT_TimerUL");

      // encode drx_RetransmissionTimerDL

      if (drx_RetransmissionTimerDL != null) {
         buffer.getContext().eventDispatcher.startElement("drx_RetransmissionTimerDL", -1);

         drx_RetransmissionTimerDL.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("drx_RetransmissionTimerDL", -1);
      }
      else throw new Asn1MissingRequiredException ("drx_RetransmissionTimerDL");

      // encode drx_RetransmissionTimerUL

      if (drx_RetransmissionTimerUL != null) {
         buffer.getContext().eventDispatcher.startElement("drx_RetransmissionTimerUL", -1);

         drx_RetransmissionTimerUL.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("drx_RetransmissionTimerUL", -1);
      }
      else throw new Asn1MissingRequiredException ("drx_RetransmissionTimerUL");

      // encode drx_LongCycleStartOffset

      if (drx_LongCycleStartOffset != null) {
         buffer.getContext().eventDispatcher.startElement("drx_LongCycleStartOffset", -1);

         drx_LongCycleStartOffset.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("drx_LongCycleStartOffset", -1);
      }
      else throw new Asn1MissingRequiredException ("drx_LongCycleStartOffset");

      // encode shortDRX

      if (shortDRX != null) {
         buffer.getContext().eventDispatcher.startElement("shortDRX", -1);

         shortDRX.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("shortDRX", -1);
      }

      // encode drx_SlotOffset

      if (drx_SlotOffset != null) {
         buffer.getContext().eventDispatcher.startElement("drx_SlotOffset", -1);

         drx_SlotOffset.encode (buffer, 0, 31);

         buffer.getContext().eventDispatcher.endElement("drx_SlotOffset", -1);
      }
      else throw new Asn1MissingRequiredException ("drx_SlotOffset");

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (drx_onDurationTimer != null) drx_onDurationTimer.print (_sb, "drx_onDurationTimer", _level+1);
      if (drx_InactivityTimer != null) drx_InactivityTimer.print (_sb, "drx_InactivityTimer", _level+1);
      if (drx_HARQ_RTT_TimerDL != null) drx_HARQ_RTT_TimerDL.print (_sb, "drx_HARQ_RTT_TimerDL", _level+1);
      if (drx_HARQ_RTT_TimerUL != null) drx_HARQ_RTT_TimerUL.print (_sb, "drx_HARQ_RTT_TimerUL", _level+1);
      if (drx_RetransmissionTimerDL != null) drx_RetransmissionTimerDL.print (_sb, "drx_RetransmissionTimerDL", _level+1);
      if (drx_RetransmissionTimerUL != null) drx_RetransmissionTimerUL.print (_sb, "drx_RetransmissionTimerUL", _level+1);
      if (drx_LongCycleStartOffset != null) drx_LongCycleStartOffset.print (_sb, "drx_LongCycleStartOffset", _level+1);
      if (shortDRX != null) shortDRX.print (_sb, "shortDRX", _level+1);
      if (drx_SlotOffset != null) drx_SlotOffset.print (_sb, "drx_SlotOffset", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
