/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class Phy_ParametersFRX_Diff extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "Phy-ParametersFRX-Diff";
   }

   public Phy_ParametersFRX_Diff_dynamicSFI dynamicSFI = null;  // optional
   public Asn1BitString dummy1;  // optional
   public Asn1BitString twoFL_DMRS;  // optional
   public Asn1BitString dummy2;  // optional
   public Asn1BitString dummy3;  // optional
   public Phy_ParametersFRX_Diff_supportedDMRS_TypeDL supportedDMRS_TypeDL = null;  // optional
   public Phy_ParametersFRX_Diff_supportedDMRS_TypeUL supportedDMRS_TypeUL = null;  // optional
   public Phy_ParametersFRX_Diff_semiOpenLoopCSI semiOpenLoopCSI = null;  // optional
   public Phy_ParametersFRX_Diff_csi_ReportWithoutPMI csi_ReportWithoutPMI = null;  // optional
   public Phy_ParametersFRX_Diff_csi_ReportWithoutCQI csi_ReportWithoutCQI = null;  // optional
   public Asn1BitString onePortsPTRS;  // optional
   public Phy_ParametersFRX_Diff_twoPUCCH_F0_2_ConsecSymbols twoPUCCH_F0_2_ConsecSymbols = null;  // optional
   public Phy_ParametersFRX_Diff_pucch_F2_WithFH pucch_F2_WithFH = null;  // optional
   public Phy_ParametersFRX_Diff_pucch_F3_WithFH pucch_F3_WithFH = null;  // optional
   public Phy_ParametersFRX_Diff_pucch_F4_WithFH pucch_F4_WithFH = null;  // optional
   public Phy_ParametersFRX_Diff_pucch_F0_2WithoutFH pucch_F0_2WithoutFH = null;  // optional
   public Phy_ParametersFRX_Diff_pucch_F1_3_4WithoutFH pucch_F1_3_4WithoutFH = null;  // optional
   public Phy_ParametersFRX_Diff_mux_SR_HARQ_ACK_CSI_PUCCH_MultiPerSlot mux_SR_HARQ_ACK_CSI_PUCCH_MultiPerSlot = null;  // optional
   public Phy_ParametersFRX_Diff_uci_CodeBlockSegmentation uci_CodeBlockSegmentation = null;  // optional
   public Phy_ParametersFRX_Diff_onePUCCH_LongAndShortFormat onePUCCH_LongAndShortFormat = null;  // optional
   public Phy_ParametersFRX_Diff_twoPUCCH_AnyOthersInSlot twoPUCCH_AnyOthersInSlot = null;  // optional
   public Phy_ParametersFRX_Diff_intraSlotFreqHopping_PUSCH intraSlotFreqHopping_PUSCH = null;  // optional
   public Phy_ParametersFRX_Diff_pusch_LBRM pusch_LBRM = null;  // optional
   public Asn1Integer pdcch_BlindDetectionCA;  // optional
   public Phy_ParametersFRX_Diff_tpc_PUSCH_RNTI tpc_PUSCH_RNTI = null;  // optional
   public Phy_ParametersFRX_Diff_tpc_PUCCH_RNTI tpc_PUCCH_RNTI = null;  // optional
   public Phy_ParametersFRX_Diff_tpc_SRS_RNTI tpc_SRS_RNTI = null;  // optional
   public Phy_ParametersFRX_Diff_absoluteTPC_Command absoluteTPC_Command = null;  // optional
   public Phy_ParametersFRX_Diff_twoDifferentTPC_Loop_PUSCH twoDifferentTPC_Loop_PUSCH = null;  // optional
   public Phy_ParametersFRX_Diff_twoDifferentTPC_Loop_PUCCH twoDifferentTPC_Loop_PUCCH = null;  // optional
   public Phy_ParametersFRX_Diff_pusch_HalfPi_BPSK pusch_HalfPi_BPSK = null;  // optional
   public Phy_ParametersFRX_Diff_pucch_F3_4_HalfPi_BPSK pucch_F3_4_HalfPi_BPSK = null;  // optional
   public Phy_ParametersFRX_Diff_almostContiguousCP_OFDM_UL almostContiguousCP_OFDM_UL = null;  // optional
   public Phy_ParametersFRX_Diff_sp_CSI_RS sp_CSI_RS = null;  // optional
   public Phy_ParametersFRX_Diff_sp_CSI_IM sp_CSI_IM = null;  // optional
   public Phy_ParametersFRX_Diff_tdd_MultiDL_UL_SwitchPerSlot tdd_MultiDL_UL_SwitchPerSlot = null;  // optional
   public Phy_ParametersFRX_Diff_multipleCORESET multipleCORESET = null;  // optional
   public boolean mV2ExtPresent;
   public CSI_RS_IM_ReceptionForFeedback csi_RS_IM_ReceptionForFeedback;  // optional
   public CSI_RS_ProcFrameworkForSRS csi_RS_ProcFrameworkForSRS;  // optional
   public CSI_ReportFramework csi_ReportFramework;  // optional
   public Phy_ParametersFRX_Diff_mux_SR_HARQ_ACK_CSI_PUCCH_OncePerSlot mux_SR_HARQ_ACK_CSI_PUCCH_OncePerSlot;  // optional
   public Phy_ParametersFRX_Diff_mux_SR_HARQ_ACK_PUCCH mux_SR_HARQ_ACK_PUCCH = null;  // optional
   public Phy_ParametersFRX_Diff_mux_MultipleGroupCtrlCH_Overlap mux_MultipleGroupCtrlCH_Overlap = null;  // optional
   public Phy_ParametersFRX_Diff_dl_SchedulingOffset_PDSCH_TypeA dl_SchedulingOffset_PDSCH_TypeA = null;  // optional
   public Phy_ParametersFRX_Diff_dl_SchedulingOffset_PDSCH_TypeB dl_SchedulingOffset_PDSCH_TypeB = null;  // optional
   public Phy_ParametersFRX_Diff_ul_SchedulingOffset ul_SchedulingOffset = null;  // optional
   public Phy_ParametersFRX_Diff_dl_64QAM_MCS_TableAlt dl_64QAM_MCS_TableAlt = null;  // optional
   public Phy_ParametersFRX_Diff_ul_64QAM_MCS_TableAlt ul_64QAM_MCS_TableAlt = null;  // optional
   public Phy_ParametersFRX_Diff_cqi_TableAlt cqi_TableAlt = null;  // optional
   public Phy_ParametersFRX_Diff_oneFL_DMRS_TwoAdditionalDMRS_UL oneFL_DMRS_TwoAdditionalDMRS_UL = null;  // optional
   public Phy_ParametersFRX_Diff_twoFL_DMRS_TwoAdditionalDMRS_UL twoFL_DMRS_TwoAdditionalDMRS_UL = null;  // optional
   public Phy_ParametersFRX_Diff_oneFL_DMRS_ThreeAdditionalDMRS_UL oneFL_DMRS_ThreeAdditionalDMRS_UL = null;  // optional
   public boolean mV3ExtPresent;
   public Phy_ParametersFRX_Diff_pdcch_BlindDetectionNRDC pdcch_BlindDetectionNRDC;  // optional
   public Phy_ParametersFRX_Diff_mux_HARQ_ACK_PUSCH_DiffSymbol mux_HARQ_ACK_PUSCH_DiffSymbol = null;  // optional
   public boolean mV4ExtPresent;
   public Phy_ParametersFRX_Diff_type1_HARQ_ACK_Codebook_r16 type1_HARQ_ACK_Codebook_r16 = null;  // optional
   public Phy_ParametersFRX_Diff_enhancedPowerControl_r16 enhancedPowerControl_r16 = null;  // optional
   public Phy_ParametersFRX_Diff_simultaneousTCI_ActMultipleCC_r16 simultaneousTCI_ActMultipleCC_r16 = null;  // optional
   public Phy_ParametersFRX_Diff_simultaneousSpatialRelationMultipleCC_r16 simultaneousSpatialRelationMultipleCC_r16 = null;  // optional
   public Phy_ParametersFRX_Diff_cli_RSSI_FDM_DL_r16 cli_RSSI_FDM_DL_r16 = null;  // optional
   public Phy_ParametersFRX_Diff_cli_SRS_RSRP_FDM_DL_r16 cli_SRS_RSRP_FDM_DL_r16 = null;  // optional
   public Phy_ParametersFRX_Diff_maxLayersMIMO_Adaptation_r16 maxLayersMIMO_Adaptation_r16 = null;  // optional
   public Phy_ParametersFRX_Diff_aggregationFactorSPS_DL_r16 aggregationFactorSPS_DL_r16 = null;  // optional
   public Phy_ParametersFRX_Diff_maxTotalResourcesForOneFreqRange_r16 maxTotalResourcesForOneFreqRange_r16;  // optional
   public CSI_ReportFrameworkExt_r16 csi_ReportFrameworkExt_r16;  // optional
   public boolean mV5ExtPresent;
   public Phy_ParametersFRX_Diff_twoTCI_Act_servingCellInCC_List_r16 twoTCI_Act_servingCellInCC_List_r16 = null;  // optional
   public Asn1OpenExt extElem1;

   public Phy_ParametersFRX_Diff () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public Phy_ParametersFRX_Diff (
      Phy_ParametersFRX_Diff_dynamicSFI dynamicSFI_,
      Asn1BitString dummy1_,
      Asn1BitString twoFL_DMRS_,
      Asn1BitString dummy2_,
      Asn1BitString dummy3_,
      Phy_ParametersFRX_Diff_supportedDMRS_TypeDL supportedDMRS_TypeDL_,
      Phy_ParametersFRX_Diff_supportedDMRS_TypeUL supportedDMRS_TypeUL_,
      Phy_ParametersFRX_Diff_semiOpenLoopCSI semiOpenLoopCSI_,
      Phy_ParametersFRX_Diff_csi_ReportWithoutPMI csi_ReportWithoutPMI_,
      Phy_ParametersFRX_Diff_csi_ReportWithoutCQI csi_ReportWithoutCQI_,
      Asn1BitString onePortsPTRS_,
      Phy_ParametersFRX_Diff_twoPUCCH_F0_2_ConsecSymbols twoPUCCH_F0_2_ConsecSymbols_,
      Phy_ParametersFRX_Diff_pucch_F2_WithFH pucch_F2_WithFH_,
      Phy_ParametersFRX_Diff_pucch_F3_WithFH pucch_F3_WithFH_,
      Phy_ParametersFRX_Diff_pucch_F4_WithFH pucch_F4_WithFH_,
      Phy_ParametersFRX_Diff_pucch_F0_2WithoutFH pucch_F0_2WithoutFH_,
      Phy_ParametersFRX_Diff_pucch_F1_3_4WithoutFH pucch_F1_3_4WithoutFH_,
      Phy_ParametersFRX_Diff_mux_SR_HARQ_ACK_CSI_PUCCH_MultiPerSlot mux_SR_HARQ_ACK_CSI_PUCCH_MultiPerSlot_,
      Phy_ParametersFRX_Diff_uci_CodeBlockSegmentation uci_CodeBlockSegmentation_,
      Phy_ParametersFRX_Diff_onePUCCH_LongAndShortFormat onePUCCH_LongAndShortFormat_,
      Phy_ParametersFRX_Diff_twoPUCCH_AnyOthersInSlot twoPUCCH_AnyOthersInSlot_,
      Phy_ParametersFRX_Diff_intraSlotFreqHopping_PUSCH intraSlotFreqHopping_PUSCH_,
      Phy_ParametersFRX_Diff_pusch_LBRM pusch_LBRM_,
      Asn1Integer pdcch_BlindDetectionCA_,
      Phy_ParametersFRX_Diff_tpc_PUSCH_RNTI tpc_PUSCH_RNTI_,
      Phy_ParametersFRX_Diff_tpc_PUCCH_RNTI tpc_PUCCH_RNTI_,
      Phy_ParametersFRX_Diff_tpc_SRS_RNTI tpc_SRS_RNTI_,
      Phy_ParametersFRX_Diff_absoluteTPC_Command absoluteTPC_Command_,
      Phy_ParametersFRX_Diff_twoDifferentTPC_Loop_PUSCH twoDifferentTPC_Loop_PUSCH_,
      Phy_ParametersFRX_Diff_twoDifferentTPC_Loop_PUCCH twoDifferentTPC_Loop_PUCCH_,
      Phy_ParametersFRX_Diff_pusch_HalfPi_BPSK pusch_HalfPi_BPSK_,
      Phy_ParametersFRX_Diff_pucch_F3_4_HalfPi_BPSK pucch_F3_4_HalfPi_BPSK_,
      Phy_ParametersFRX_Diff_almostContiguousCP_OFDM_UL almostContiguousCP_OFDM_UL_,
      Phy_ParametersFRX_Diff_sp_CSI_RS sp_CSI_RS_,
      Phy_ParametersFRX_Diff_sp_CSI_IM sp_CSI_IM_,
      Phy_ParametersFRX_Diff_tdd_MultiDL_UL_SwitchPerSlot tdd_MultiDL_UL_SwitchPerSlot_,
      Phy_ParametersFRX_Diff_multipleCORESET multipleCORESET_,
      CSI_RS_IM_ReceptionForFeedback csi_RS_IM_ReceptionForFeedback_,
      CSI_RS_ProcFrameworkForSRS csi_RS_ProcFrameworkForSRS_,
      CSI_ReportFramework csi_ReportFramework_,
      Phy_ParametersFRX_Diff_mux_SR_HARQ_ACK_CSI_PUCCH_OncePerSlot mux_SR_HARQ_ACK_CSI_PUCCH_OncePerSlot_,
      Phy_ParametersFRX_Diff_mux_SR_HARQ_ACK_PUCCH mux_SR_HARQ_ACK_PUCCH_,
      Phy_ParametersFRX_Diff_mux_MultipleGroupCtrlCH_Overlap mux_MultipleGroupCtrlCH_Overlap_,
      Phy_ParametersFRX_Diff_dl_SchedulingOffset_PDSCH_TypeA dl_SchedulingOffset_PDSCH_TypeA_,
      Phy_ParametersFRX_Diff_dl_SchedulingOffset_PDSCH_TypeB dl_SchedulingOffset_PDSCH_TypeB_,
      Phy_ParametersFRX_Diff_ul_SchedulingOffset ul_SchedulingOffset_,
      Phy_ParametersFRX_Diff_dl_64QAM_MCS_TableAlt dl_64QAM_MCS_TableAlt_,
      Phy_ParametersFRX_Diff_ul_64QAM_MCS_TableAlt ul_64QAM_MCS_TableAlt_,
      Phy_ParametersFRX_Diff_cqi_TableAlt cqi_TableAlt_,
      Phy_ParametersFRX_Diff_oneFL_DMRS_TwoAdditionalDMRS_UL oneFL_DMRS_TwoAdditionalDMRS_UL_,
      Phy_ParametersFRX_Diff_twoFL_DMRS_TwoAdditionalDMRS_UL twoFL_DMRS_TwoAdditionalDMRS_UL_,
      Phy_ParametersFRX_Diff_oneFL_DMRS_ThreeAdditionalDMRS_UL oneFL_DMRS_ThreeAdditionalDMRS_UL_,
      Phy_ParametersFRX_Diff_pdcch_BlindDetectionNRDC pdcch_BlindDetectionNRDC_,
      Phy_ParametersFRX_Diff_mux_HARQ_ACK_PUSCH_DiffSymbol mux_HARQ_ACK_PUSCH_DiffSymbol_,
      Phy_ParametersFRX_Diff_type1_HARQ_ACK_Codebook_r16 type1_HARQ_ACK_Codebook_r16_,
      Phy_ParametersFRX_Diff_enhancedPowerControl_r16 enhancedPowerControl_r16_,
      Phy_ParametersFRX_Diff_simultaneousTCI_ActMultipleCC_r16 simultaneousTCI_ActMultipleCC_r16_,
      Phy_ParametersFRX_Diff_simultaneousSpatialRelationMultipleCC_r16 simultaneousSpatialRelationMultipleCC_r16_,
      Phy_ParametersFRX_Diff_cli_RSSI_FDM_DL_r16 cli_RSSI_FDM_DL_r16_,
      Phy_ParametersFRX_Diff_cli_SRS_RSRP_FDM_DL_r16 cli_SRS_RSRP_FDM_DL_r16_,
      Phy_ParametersFRX_Diff_maxLayersMIMO_Adaptation_r16 maxLayersMIMO_Adaptation_r16_,
      Phy_ParametersFRX_Diff_aggregationFactorSPS_DL_r16 aggregationFactorSPS_DL_r16_,
      Phy_ParametersFRX_Diff_maxTotalResourcesForOneFreqRange_r16 maxTotalResourcesForOneFreqRange_r16_,
      CSI_ReportFrameworkExt_r16 csi_ReportFrameworkExt_r16_,
      Phy_ParametersFRX_Diff_twoTCI_Act_servingCellInCC_List_r16 twoTCI_Act_servingCellInCC_List_r16_
   ) {
      super();
      dynamicSFI = dynamicSFI_;
      dummy1 = dummy1_;
      twoFL_DMRS = twoFL_DMRS_;
      dummy2 = dummy2_;
      dummy3 = dummy3_;
      supportedDMRS_TypeDL = supportedDMRS_TypeDL_;
      supportedDMRS_TypeUL = supportedDMRS_TypeUL_;
      semiOpenLoopCSI = semiOpenLoopCSI_;
      csi_ReportWithoutPMI = csi_ReportWithoutPMI_;
      csi_ReportWithoutCQI = csi_ReportWithoutCQI_;
      onePortsPTRS = onePortsPTRS_;
      twoPUCCH_F0_2_ConsecSymbols = twoPUCCH_F0_2_ConsecSymbols_;
      pucch_F2_WithFH = pucch_F2_WithFH_;
      pucch_F3_WithFH = pucch_F3_WithFH_;
      pucch_F4_WithFH = pucch_F4_WithFH_;
      pucch_F0_2WithoutFH = pucch_F0_2WithoutFH_;
      pucch_F1_3_4WithoutFH = pucch_F1_3_4WithoutFH_;
      mux_SR_HARQ_ACK_CSI_PUCCH_MultiPerSlot = mux_SR_HARQ_ACK_CSI_PUCCH_MultiPerSlot_;
      uci_CodeBlockSegmentation = uci_CodeBlockSegmentation_;
      onePUCCH_LongAndShortFormat = onePUCCH_LongAndShortFormat_;
      twoPUCCH_AnyOthersInSlot = twoPUCCH_AnyOthersInSlot_;
      intraSlotFreqHopping_PUSCH = intraSlotFreqHopping_PUSCH_;
      pusch_LBRM = pusch_LBRM_;
      pdcch_BlindDetectionCA = pdcch_BlindDetectionCA_;
      tpc_PUSCH_RNTI = tpc_PUSCH_RNTI_;
      tpc_PUCCH_RNTI = tpc_PUCCH_RNTI_;
      tpc_SRS_RNTI = tpc_SRS_RNTI_;
      absoluteTPC_Command = absoluteTPC_Command_;
      twoDifferentTPC_Loop_PUSCH = twoDifferentTPC_Loop_PUSCH_;
      twoDifferentTPC_Loop_PUCCH = twoDifferentTPC_Loop_PUCCH_;
      pusch_HalfPi_BPSK = pusch_HalfPi_BPSK_;
      pucch_F3_4_HalfPi_BPSK = pucch_F3_4_HalfPi_BPSK_;
      almostContiguousCP_OFDM_UL = almostContiguousCP_OFDM_UL_;
      sp_CSI_RS = sp_CSI_RS_;
      sp_CSI_IM = sp_CSI_IM_;
      tdd_MultiDL_UL_SwitchPerSlot = tdd_MultiDL_UL_SwitchPerSlot_;
      multipleCORESET = multipleCORESET_;
      csi_RS_IM_ReceptionForFeedback = csi_RS_IM_ReceptionForFeedback_;
      csi_RS_ProcFrameworkForSRS = csi_RS_ProcFrameworkForSRS_;
      csi_ReportFramework = csi_ReportFramework_;
      mux_SR_HARQ_ACK_CSI_PUCCH_OncePerSlot = mux_SR_HARQ_ACK_CSI_PUCCH_OncePerSlot_;
      mux_SR_HARQ_ACK_PUCCH = mux_SR_HARQ_ACK_PUCCH_;
      mux_MultipleGroupCtrlCH_Overlap = mux_MultipleGroupCtrlCH_Overlap_;
      dl_SchedulingOffset_PDSCH_TypeA = dl_SchedulingOffset_PDSCH_TypeA_;
      dl_SchedulingOffset_PDSCH_TypeB = dl_SchedulingOffset_PDSCH_TypeB_;
      ul_SchedulingOffset = ul_SchedulingOffset_;
      dl_64QAM_MCS_TableAlt = dl_64QAM_MCS_TableAlt_;
      ul_64QAM_MCS_TableAlt = ul_64QAM_MCS_TableAlt_;
      cqi_TableAlt = cqi_TableAlt_;
      oneFL_DMRS_TwoAdditionalDMRS_UL = oneFL_DMRS_TwoAdditionalDMRS_UL_;
      twoFL_DMRS_TwoAdditionalDMRS_UL = twoFL_DMRS_TwoAdditionalDMRS_UL_;
      oneFL_DMRS_ThreeAdditionalDMRS_UL = oneFL_DMRS_ThreeAdditionalDMRS_UL_;
      pdcch_BlindDetectionNRDC = pdcch_BlindDetectionNRDC_;
      mux_HARQ_ACK_PUSCH_DiffSymbol = mux_HARQ_ACK_PUSCH_DiffSymbol_;
      type1_HARQ_ACK_Codebook_r16 = type1_HARQ_ACK_Codebook_r16_;
      enhancedPowerControl_r16 = enhancedPowerControl_r16_;
      simultaneousTCI_ActMultipleCC_r16 = simultaneousTCI_ActMultipleCC_r16_;
      simultaneousSpatialRelationMultipleCC_r16 = simultaneousSpatialRelationMultipleCC_r16_;
      cli_RSSI_FDM_DL_r16 = cli_RSSI_FDM_DL_r16_;
      cli_SRS_RSRP_FDM_DL_r16 = cli_SRS_RSRP_FDM_DL_r16_;
      maxLayersMIMO_Adaptation_r16 = maxLayersMIMO_Adaptation_r16_;
      aggregationFactorSPS_DL_r16 = aggregationFactorSPS_DL_r16_;
      maxTotalResourcesForOneFreqRange_r16 = maxTotalResourcesForOneFreqRange_r16_;
      csi_ReportFrameworkExt_r16 = csi_ReportFrameworkExt_r16_;
      twoTCI_Act_servingCellInCC_List_r16 = twoTCI_Act_servingCellInCC_List_r16_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public Phy_ParametersFRX_Diff (Phy_ParametersFRX_Diff_dynamicSFI dynamicSFI_,
      Asn1BitString dummy1_,
      Asn1BitString twoFL_DMRS_,
      Asn1BitString dummy2_,
      Asn1BitString dummy3_,
      Phy_ParametersFRX_Diff_supportedDMRS_TypeDL supportedDMRS_TypeDL_,
      Phy_ParametersFRX_Diff_supportedDMRS_TypeUL supportedDMRS_TypeUL_,
      Phy_ParametersFRX_Diff_semiOpenLoopCSI semiOpenLoopCSI_,
      Phy_ParametersFRX_Diff_csi_ReportWithoutPMI csi_ReportWithoutPMI_,
      Phy_ParametersFRX_Diff_csi_ReportWithoutCQI csi_ReportWithoutCQI_,
      Asn1BitString onePortsPTRS_,
      Phy_ParametersFRX_Diff_twoPUCCH_F0_2_ConsecSymbols twoPUCCH_F0_2_ConsecSymbols_,
      Phy_ParametersFRX_Diff_pucch_F2_WithFH pucch_F2_WithFH_,
      Phy_ParametersFRX_Diff_pucch_F3_WithFH pucch_F3_WithFH_,
      Phy_ParametersFRX_Diff_pucch_F4_WithFH pucch_F4_WithFH_,
      Phy_ParametersFRX_Diff_pucch_F0_2WithoutFH pucch_F0_2WithoutFH_,
      Phy_ParametersFRX_Diff_pucch_F1_3_4WithoutFH pucch_F1_3_4WithoutFH_,
      Phy_ParametersFRX_Diff_mux_SR_HARQ_ACK_CSI_PUCCH_MultiPerSlot mux_SR_HARQ_ACK_CSI_PUCCH_MultiPerSlot_,
      Phy_ParametersFRX_Diff_uci_CodeBlockSegmentation uci_CodeBlockSegmentation_,
      Phy_ParametersFRX_Diff_onePUCCH_LongAndShortFormat onePUCCH_LongAndShortFormat_,
      Phy_ParametersFRX_Diff_twoPUCCH_AnyOthersInSlot twoPUCCH_AnyOthersInSlot_,
      Phy_ParametersFRX_Diff_intraSlotFreqHopping_PUSCH intraSlotFreqHopping_PUSCH_,
      Phy_ParametersFRX_Diff_pusch_LBRM pusch_LBRM_,
      long pdcch_BlindDetectionCA_,
      Phy_ParametersFRX_Diff_tpc_PUSCH_RNTI tpc_PUSCH_RNTI_,
      Phy_ParametersFRX_Diff_tpc_PUCCH_RNTI tpc_PUCCH_RNTI_,
      Phy_ParametersFRX_Diff_tpc_SRS_RNTI tpc_SRS_RNTI_,
      Phy_ParametersFRX_Diff_absoluteTPC_Command absoluteTPC_Command_,
      Phy_ParametersFRX_Diff_twoDifferentTPC_Loop_PUSCH twoDifferentTPC_Loop_PUSCH_,
      Phy_ParametersFRX_Diff_twoDifferentTPC_Loop_PUCCH twoDifferentTPC_Loop_PUCCH_,
      Phy_ParametersFRX_Diff_pusch_HalfPi_BPSK pusch_HalfPi_BPSK_,
      Phy_ParametersFRX_Diff_pucch_F3_4_HalfPi_BPSK pucch_F3_4_HalfPi_BPSK_,
      Phy_ParametersFRX_Diff_almostContiguousCP_OFDM_UL almostContiguousCP_OFDM_UL_,
      Phy_ParametersFRX_Diff_sp_CSI_RS sp_CSI_RS_,
      Phy_ParametersFRX_Diff_sp_CSI_IM sp_CSI_IM_,
      Phy_ParametersFRX_Diff_tdd_MultiDL_UL_SwitchPerSlot tdd_MultiDL_UL_SwitchPerSlot_,
      Phy_ParametersFRX_Diff_multipleCORESET multipleCORESET_,
      CSI_RS_IM_ReceptionForFeedback csi_RS_IM_ReceptionForFeedback_,
      CSI_RS_ProcFrameworkForSRS csi_RS_ProcFrameworkForSRS_,
      CSI_ReportFramework csi_ReportFramework_,
      Phy_ParametersFRX_Diff_mux_SR_HARQ_ACK_CSI_PUCCH_OncePerSlot mux_SR_HARQ_ACK_CSI_PUCCH_OncePerSlot_,
      Phy_ParametersFRX_Diff_mux_SR_HARQ_ACK_PUCCH mux_SR_HARQ_ACK_PUCCH_,
      Phy_ParametersFRX_Diff_mux_MultipleGroupCtrlCH_Overlap mux_MultipleGroupCtrlCH_Overlap_,
      Phy_ParametersFRX_Diff_dl_SchedulingOffset_PDSCH_TypeA dl_SchedulingOffset_PDSCH_TypeA_,
      Phy_ParametersFRX_Diff_dl_SchedulingOffset_PDSCH_TypeB dl_SchedulingOffset_PDSCH_TypeB_,
      Phy_ParametersFRX_Diff_ul_SchedulingOffset ul_SchedulingOffset_,
      Phy_ParametersFRX_Diff_dl_64QAM_MCS_TableAlt dl_64QAM_MCS_TableAlt_,
      Phy_ParametersFRX_Diff_ul_64QAM_MCS_TableAlt ul_64QAM_MCS_TableAlt_,
      Phy_ParametersFRX_Diff_cqi_TableAlt cqi_TableAlt_,
      Phy_ParametersFRX_Diff_oneFL_DMRS_TwoAdditionalDMRS_UL oneFL_DMRS_TwoAdditionalDMRS_UL_,
      Phy_ParametersFRX_Diff_twoFL_DMRS_TwoAdditionalDMRS_UL twoFL_DMRS_TwoAdditionalDMRS_UL_,
      Phy_ParametersFRX_Diff_oneFL_DMRS_ThreeAdditionalDMRS_UL oneFL_DMRS_ThreeAdditionalDMRS_UL_,
      Phy_ParametersFRX_Diff_pdcch_BlindDetectionNRDC pdcch_BlindDetectionNRDC_,
      Phy_ParametersFRX_Diff_mux_HARQ_ACK_PUSCH_DiffSymbol mux_HARQ_ACK_PUSCH_DiffSymbol_,
      Phy_ParametersFRX_Diff_type1_HARQ_ACK_Codebook_r16 type1_HARQ_ACK_Codebook_r16_,
      Phy_ParametersFRX_Diff_enhancedPowerControl_r16 enhancedPowerControl_r16_,
      Phy_ParametersFRX_Diff_simultaneousTCI_ActMultipleCC_r16 simultaneousTCI_ActMultipleCC_r16_,
      Phy_ParametersFRX_Diff_simultaneousSpatialRelationMultipleCC_r16 simultaneousSpatialRelationMultipleCC_r16_,
      Phy_ParametersFRX_Diff_cli_RSSI_FDM_DL_r16 cli_RSSI_FDM_DL_r16_,
      Phy_ParametersFRX_Diff_cli_SRS_RSRP_FDM_DL_r16 cli_SRS_RSRP_FDM_DL_r16_,
      Phy_ParametersFRX_Diff_maxLayersMIMO_Adaptation_r16 maxLayersMIMO_Adaptation_r16_,
      Phy_ParametersFRX_Diff_aggregationFactorSPS_DL_r16 aggregationFactorSPS_DL_r16_,
      Phy_ParametersFRX_Diff_maxTotalResourcesForOneFreqRange_r16 maxTotalResourcesForOneFreqRange_r16_,
      CSI_ReportFrameworkExt_r16 csi_ReportFrameworkExt_r16_,
      Phy_ParametersFRX_Diff_twoTCI_Act_servingCellInCC_List_r16 twoTCI_Act_servingCellInCC_List_r16_
   ) {
      super();
      dynamicSFI = dynamicSFI_;
      dummy1 = dummy1_;
      twoFL_DMRS = twoFL_DMRS_;
      dummy2 = dummy2_;
      dummy3 = dummy3_;
      supportedDMRS_TypeDL = supportedDMRS_TypeDL_;
      supportedDMRS_TypeUL = supportedDMRS_TypeUL_;
      semiOpenLoopCSI = semiOpenLoopCSI_;
      csi_ReportWithoutPMI = csi_ReportWithoutPMI_;
      csi_ReportWithoutCQI = csi_ReportWithoutCQI_;
      onePortsPTRS = onePortsPTRS_;
      twoPUCCH_F0_2_ConsecSymbols = twoPUCCH_F0_2_ConsecSymbols_;
      pucch_F2_WithFH = pucch_F2_WithFH_;
      pucch_F3_WithFH = pucch_F3_WithFH_;
      pucch_F4_WithFH = pucch_F4_WithFH_;
      pucch_F0_2WithoutFH = pucch_F0_2WithoutFH_;
      pucch_F1_3_4WithoutFH = pucch_F1_3_4WithoutFH_;
      mux_SR_HARQ_ACK_CSI_PUCCH_MultiPerSlot = mux_SR_HARQ_ACK_CSI_PUCCH_MultiPerSlot_;
      uci_CodeBlockSegmentation = uci_CodeBlockSegmentation_;
      onePUCCH_LongAndShortFormat = onePUCCH_LongAndShortFormat_;
      twoPUCCH_AnyOthersInSlot = twoPUCCH_AnyOthersInSlot_;
      intraSlotFreqHopping_PUSCH = intraSlotFreqHopping_PUSCH_;
      pusch_LBRM = pusch_LBRM_;
      pdcch_BlindDetectionCA = new Asn1Integer (pdcch_BlindDetectionCA_);
      tpc_PUSCH_RNTI = tpc_PUSCH_RNTI_;
      tpc_PUCCH_RNTI = tpc_PUCCH_RNTI_;
      tpc_SRS_RNTI = tpc_SRS_RNTI_;
      absoluteTPC_Command = absoluteTPC_Command_;
      twoDifferentTPC_Loop_PUSCH = twoDifferentTPC_Loop_PUSCH_;
      twoDifferentTPC_Loop_PUCCH = twoDifferentTPC_Loop_PUCCH_;
      pusch_HalfPi_BPSK = pusch_HalfPi_BPSK_;
      pucch_F3_4_HalfPi_BPSK = pucch_F3_4_HalfPi_BPSK_;
      almostContiguousCP_OFDM_UL = almostContiguousCP_OFDM_UL_;
      sp_CSI_RS = sp_CSI_RS_;
      sp_CSI_IM = sp_CSI_IM_;
      tdd_MultiDL_UL_SwitchPerSlot = tdd_MultiDL_UL_SwitchPerSlot_;
      multipleCORESET = multipleCORESET_;
      csi_RS_IM_ReceptionForFeedback = csi_RS_IM_ReceptionForFeedback_;
      csi_RS_ProcFrameworkForSRS = csi_RS_ProcFrameworkForSRS_;
      csi_ReportFramework = csi_ReportFramework_;
      mux_SR_HARQ_ACK_CSI_PUCCH_OncePerSlot = mux_SR_HARQ_ACK_CSI_PUCCH_OncePerSlot_;
      mux_SR_HARQ_ACK_PUCCH = mux_SR_HARQ_ACK_PUCCH_;
      mux_MultipleGroupCtrlCH_Overlap = mux_MultipleGroupCtrlCH_Overlap_;
      dl_SchedulingOffset_PDSCH_TypeA = dl_SchedulingOffset_PDSCH_TypeA_;
      dl_SchedulingOffset_PDSCH_TypeB = dl_SchedulingOffset_PDSCH_TypeB_;
      ul_SchedulingOffset = ul_SchedulingOffset_;
      dl_64QAM_MCS_TableAlt = dl_64QAM_MCS_TableAlt_;
      ul_64QAM_MCS_TableAlt = ul_64QAM_MCS_TableAlt_;
      cqi_TableAlt = cqi_TableAlt_;
      oneFL_DMRS_TwoAdditionalDMRS_UL = oneFL_DMRS_TwoAdditionalDMRS_UL_;
      twoFL_DMRS_TwoAdditionalDMRS_UL = twoFL_DMRS_TwoAdditionalDMRS_UL_;
      oneFL_DMRS_ThreeAdditionalDMRS_UL = oneFL_DMRS_ThreeAdditionalDMRS_UL_;
      pdcch_BlindDetectionNRDC = pdcch_BlindDetectionNRDC_;
      mux_HARQ_ACK_PUSCH_DiffSymbol = mux_HARQ_ACK_PUSCH_DiffSymbol_;
      type1_HARQ_ACK_Codebook_r16 = type1_HARQ_ACK_Codebook_r16_;
      enhancedPowerControl_r16 = enhancedPowerControl_r16_;
      simultaneousTCI_ActMultipleCC_r16 = simultaneousTCI_ActMultipleCC_r16_;
      simultaneousSpatialRelationMultipleCC_r16 = simultaneousSpatialRelationMultipleCC_r16_;
      cli_RSSI_FDM_DL_r16 = cli_RSSI_FDM_DL_r16_;
      cli_SRS_RSRP_FDM_DL_r16 = cli_SRS_RSRP_FDM_DL_r16_;
      maxLayersMIMO_Adaptation_r16 = maxLayersMIMO_Adaptation_r16_;
      aggregationFactorSPS_DL_r16 = aggregationFactorSPS_DL_r16_;
      maxTotalResourcesForOneFreqRange_r16 = maxTotalResourcesForOneFreqRange_r16_;
      csi_ReportFrameworkExt_r16 = csi_ReportFrameworkExt_r16_;
      twoTCI_Act_servingCellInCC_List_r16 = twoTCI_Act_servingCellInCC_List_r16_;
   }

   public void init () {
      dynamicSFI = null;
      dummy1 = null;
      twoFL_DMRS = null;
      dummy2 = null;
      dummy3 = null;
      supportedDMRS_TypeDL = null;
      supportedDMRS_TypeUL = null;
      semiOpenLoopCSI = null;
      csi_ReportWithoutPMI = null;
      csi_ReportWithoutCQI = null;
      onePortsPTRS = null;
      twoPUCCH_F0_2_ConsecSymbols = null;
      pucch_F2_WithFH = null;
      pucch_F3_WithFH = null;
      pucch_F4_WithFH = null;
      pucch_F0_2WithoutFH = null;
      pucch_F1_3_4WithoutFH = null;
      mux_SR_HARQ_ACK_CSI_PUCCH_MultiPerSlot = null;
      uci_CodeBlockSegmentation = null;
      onePUCCH_LongAndShortFormat = null;
      twoPUCCH_AnyOthersInSlot = null;
      intraSlotFreqHopping_PUSCH = null;
      pusch_LBRM = null;
      pdcch_BlindDetectionCA = null;
      tpc_PUSCH_RNTI = null;
      tpc_PUCCH_RNTI = null;
      tpc_SRS_RNTI = null;
      absoluteTPC_Command = null;
      twoDifferentTPC_Loop_PUSCH = null;
      twoDifferentTPC_Loop_PUCCH = null;
      pusch_HalfPi_BPSK = null;
      pucch_F3_4_HalfPi_BPSK = null;
      almostContiguousCP_OFDM_UL = null;
      sp_CSI_RS = null;
      sp_CSI_IM = null;
      tdd_MultiDL_UL_SwitchPerSlot = null;
      multipleCORESET = null;
      csi_RS_IM_ReceptionForFeedback = null;
      csi_RS_ProcFrameworkForSRS = null;
      csi_ReportFramework = null;
      mux_SR_HARQ_ACK_CSI_PUCCH_OncePerSlot = null;
      mux_SR_HARQ_ACK_PUCCH = null;
      mux_MultipleGroupCtrlCH_Overlap = null;
      dl_SchedulingOffset_PDSCH_TypeA = null;
      dl_SchedulingOffset_PDSCH_TypeB = null;
      ul_SchedulingOffset = null;
      dl_64QAM_MCS_TableAlt = null;
      ul_64QAM_MCS_TableAlt = null;
      cqi_TableAlt = null;
      oneFL_DMRS_TwoAdditionalDMRS_UL = null;
      twoFL_DMRS_TwoAdditionalDMRS_UL = null;
      oneFL_DMRS_ThreeAdditionalDMRS_UL = null;
      pdcch_BlindDetectionNRDC = null;
      mux_HARQ_ACK_PUSCH_DiffSymbol = null;
      type1_HARQ_ACK_Codebook_r16 = null;
      enhancedPowerControl_r16 = null;
      simultaneousTCI_ActMultipleCC_r16 = null;
      simultaneousSpatialRelationMultipleCC_r16 = null;
      cli_RSSI_FDM_DL_r16 = null;
      cli_SRS_RSRP_FDM_DL_r16 = null;
      maxLayersMIMO_Adaptation_r16 = null;
      aggregationFactorSPS_DL_r16 = null;
      maxTotalResourcesForOneFreqRange_r16 = null;
      csi_ReportFrameworkExt_r16 = null;
      twoTCI_Act_servingCellInCC_List_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 66; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return dynamicSFI;
         case 1: return dummy1;
         case 2: return twoFL_DMRS;
         case 3: return dummy2;
         case 4: return dummy3;
         case 5: return supportedDMRS_TypeDL;
         case 6: return supportedDMRS_TypeUL;
         case 7: return semiOpenLoopCSI;
         case 8: return csi_ReportWithoutPMI;
         case 9: return csi_ReportWithoutCQI;
         case 10: return onePortsPTRS;
         case 11: return twoPUCCH_F0_2_ConsecSymbols;
         case 12: return pucch_F2_WithFH;
         case 13: return pucch_F3_WithFH;
         case 14: return pucch_F4_WithFH;
         case 15: return pucch_F0_2WithoutFH;
         case 16: return pucch_F1_3_4WithoutFH;
         case 17: return mux_SR_HARQ_ACK_CSI_PUCCH_MultiPerSlot;
         case 18: return uci_CodeBlockSegmentation;
         case 19: return onePUCCH_LongAndShortFormat;
         case 20: return twoPUCCH_AnyOthersInSlot;
         case 21: return intraSlotFreqHopping_PUSCH;
         case 22: return pusch_LBRM;
         case 23: return pdcch_BlindDetectionCA;
         case 24: return tpc_PUSCH_RNTI;
         case 25: return tpc_PUCCH_RNTI;
         case 26: return tpc_SRS_RNTI;
         case 27: return absoluteTPC_Command;
         case 28: return twoDifferentTPC_Loop_PUSCH;
         case 29: return twoDifferentTPC_Loop_PUCCH;
         case 30: return pusch_HalfPi_BPSK;
         case 31: return pucch_F3_4_HalfPi_BPSK;
         case 32: return almostContiguousCP_OFDM_UL;
         case 33: return sp_CSI_RS;
         case 34: return sp_CSI_IM;
         case 35: return tdd_MultiDL_UL_SwitchPerSlot;
         case 36: return multipleCORESET;
         case 37: return csi_RS_IM_ReceptionForFeedback;
         case 38: return csi_RS_ProcFrameworkForSRS;
         case 39: return csi_ReportFramework;
         case 40: return mux_SR_HARQ_ACK_CSI_PUCCH_OncePerSlot;
         case 41: return mux_SR_HARQ_ACK_PUCCH;
         case 42: return mux_MultipleGroupCtrlCH_Overlap;
         case 43: return dl_SchedulingOffset_PDSCH_TypeA;
         case 44: return dl_SchedulingOffset_PDSCH_TypeB;
         case 45: return ul_SchedulingOffset;
         case 46: return dl_64QAM_MCS_TableAlt;
         case 47: return ul_64QAM_MCS_TableAlt;
         case 48: return cqi_TableAlt;
         case 49: return oneFL_DMRS_TwoAdditionalDMRS_UL;
         case 50: return twoFL_DMRS_TwoAdditionalDMRS_UL;
         case 51: return oneFL_DMRS_ThreeAdditionalDMRS_UL;
         case 52: return pdcch_BlindDetectionNRDC;
         case 53: return mux_HARQ_ACK_PUSCH_DiffSymbol;
         case 54: return type1_HARQ_ACK_Codebook_r16;
         case 55: return enhancedPowerControl_r16;
         case 56: return simultaneousTCI_ActMultipleCC_r16;
         case 57: return simultaneousSpatialRelationMultipleCC_r16;
         case 58: return cli_RSSI_FDM_DL_r16;
         case 59: return cli_SRS_RSRP_FDM_DL_r16;
         case 60: return maxLayersMIMO_Adaptation_r16;
         case 61: return aggregationFactorSPS_DL_r16;
         case 62: return maxTotalResourcesForOneFreqRange_r16;
         case 63: return csi_ReportFrameworkExt_r16;
         case 64: return twoTCI_Act_servingCellInCC_List_r16;
         case 65: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "dynamicSFI";
         case 1: return "dummy1";
         case 2: return "twoFL-DMRS";
         case 3: return "dummy2";
         case 4: return "dummy3";
         case 5: return "supportedDMRS-TypeDL";
         case 6: return "supportedDMRS-TypeUL";
         case 7: return "semiOpenLoopCSI";
         case 8: return "csi-ReportWithoutPMI";
         case 9: return "csi-ReportWithoutCQI";
         case 10: return "onePortsPTRS";
         case 11: return "twoPUCCH-F0-2-ConsecSymbols";
         case 12: return "pucch-F2-WithFH";
         case 13: return "pucch-F3-WithFH";
         case 14: return "pucch-F4-WithFH";
         case 15: return "pucch-F0-2WithoutFH";
         case 16: return "pucch-F1-3-4WithoutFH";
         case 17: return "mux-SR-HARQ-ACK-CSI-PUCCH-MultiPerSlot";
         case 18: return "uci-CodeBlockSegmentation";
         case 19: return "onePUCCH-LongAndShortFormat";
         case 20: return "twoPUCCH-AnyOthersInSlot";
         case 21: return "intraSlotFreqHopping-PUSCH";
         case 22: return "pusch-LBRM";
         case 23: return "pdcch-BlindDetectionCA";
         case 24: return "tpc-PUSCH-RNTI";
         case 25: return "tpc-PUCCH-RNTI";
         case 26: return "tpc-SRS-RNTI";
         case 27: return "absoluteTPC-Command";
         case 28: return "twoDifferentTPC-Loop-PUSCH";
         case 29: return "twoDifferentTPC-Loop-PUCCH";
         case 30: return "pusch-HalfPi-BPSK";
         case 31: return "pucch-F3-4-HalfPi-BPSK";
         case 32: return "almostContiguousCP-OFDM-UL";
         case 33: return "sp-CSI-RS";
         case 34: return "sp-CSI-IM";
         case 35: return "tdd-MultiDL-UL-SwitchPerSlot";
         case 36: return "multipleCORESET";
         case 37: return "csi-RS-IM-ReceptionForFeedback";
         case 38: return "csi-RS-ProcFrameworkForSRS";
         case 39: return "csi-ReportFramework";
         case 40: return "mux-SR-HARQ-ACK-CSI-PUCCH-OncePerSlot";
         case 41: return "mux-SR-HARQ-ACK-PUCCH";
         case 42: return "mux-MultipleGroupCtrlCH-Overlap";
         case 43: return "dl-SchedulingOffset-PDSCH-TypeA";
         case 44: return "dl-SchedulingOffset-PDSCH-TypeB";
         case 45: return "ul-SchedulingOffset";
         case 46: return "dl-64QAM-MCS-TableAlt";
         case 47: return "ul-64QAM-MCS-TableAlt";
         case 48: return "cqi-TableAlt";
         case 49: return "oneFL-DMRS-TwoAdditionalDMRS-UL";
         case 50: return "twoFL-DMRS-TwoAdditionalDMRS-UL";
         case 51: return "oneFL-DMRS-ThreeAdditionalDMRS-UL";
         case 52: return "pdcch-BlindDetectionNRDC";
         case 53: return "mux-HARQ-ACK-PUSCH-DiffSymbol";
         case 54: return "type1-HARQ-ACK-Codebook-r16";
         case 55: return "enhancedPowerControl-r16";
         case 56: return "simultaneousTCI-ActMultipleCC-r16";
         case 57: return "simultaneousSpatialRelationMultipleCC-r16";
         case 58: return "cli-RSSI-FDM-DL-r16";
         case 59: return "cli-SRS-RSRP-FDM-DL-r16";
         case 60: return "maxLayersMIMO-Adaptation-r16";
         case 61: return "aggregationFactorSPS-DL-r16";
         case 62: return "maxTotalResourcesForOneFreqRange-r16";
         case 63: return "csi-ReportFrameworkExt-r16";
         case 64: return "twoTCI-Act-servingCellInCC-List-r16";
         case 65: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean dynamicSFIPresent = buffer.decodeBit ("dynamicSFIPresent");
      boolean dummy1Present = buffer.decodeBit ("dummy1Present");
      boolean twoFL_DMRSPresent = buffer.decodeBit ("twoFL_DMRSPresent");
      boolean dummy2Present = buffer.decodeBit ("dummy2Present");
      boolean dummy3Present = buffer.decodeBit ("dummy3Present");
      boolean supportedDMRS_TypeDLPresent = buffer.decodeBit ("supportedDMRS_TypeDLPresent");
      boolean supportedDMRS_TypeULPresent = buffer.decodeBit ("supportedDMRS_TypeULPresent");
      boolean semiOpenLoopCSIPresent = buffer.decodeBit ("semiOpenLoopCSIPresent");
      boolean csi_ReportWithoutPMIPresent = buffer.decodeBit ("csi_ReportWithoutPMIPresent");
      boolean csi_ReportWithoutCQIPresent = buffer.decodeBit ("csi_ReportWithoutCQIPresent");
      boolean onePortsPTRSPresent = buffer.decodeBit ("onePortsPTRSPresent");
      boolean twoPUCCH_F0_2_ConsecSymbolsPresent = buffer.decodeBit ("twoPUCCH_F0_2_ConsecSymbolsPresent");
      boolean pucch_F2_WithFHPresent = buffer.decodeBit ("pucch_F2_WithFHPresent");
      boolean pucch_F3_WithFHPresent = buffer.decodeBit ("pucch_F3_WithFHPresent");
      boolean pucch_F4_WithFHPresent = buffer.decodeBit ("pucch_F4_WithFHPresent");
      boolean pucch_F0_2WithoutFHPresent = buffer.decodeBit ("pucch_F0_2WithoutFHPresent");
      boolean pucch_F1_3_4WithoutFHPresent = buffer.decodeBit ("pucch_F1_3_4WithoutFHPresent");
      boolean mux_SR_HARQ_ACK_CSI_PUCCH_MultiPerSlotPresent = buffer.decodeBit ("mux_SR_HARQ_ACK_CSI_PUCCH_MultiPerSlotPresent");
      boolean uci_CodeBlockSegmentationPresent = buffer.decodeBit ("uci_CodeBlockSegmentationPresent");
      boolean onePUCCH_LongAndShortFormatPresent = buffer.decodeBit ("onePUCCH_LongAndShortFormatPresent");
      boolean twoPUCCH_AnyOthersInSlotPresent = buffer.decodeBit ("twoPUCCH_AnyOthersInSlotPresent");
      boolean intraSlotFreqHopping_PUSCHPresent = buffer.decodeBit ("intraSlotFreqHopping_PUSCHPresent");
      boolean pusch_LBRMPresent = buffer.decodeBit ("pusch_LBRMPresent");
      boolean pdcch_BlindDetectionCAPresent = buffer.decodeBit ("pdcch_BlindDetectionCAPresent");
      boolean tpc_PUSCH_RNTIPresent = buffer.decodeBit ("tpc_PUSCH_RNTIPresent");
      boolean tpc_PUCCH_RNTIPresent = buffer.decodeBit ("tpc_PUCCH_RNTIPresent");
      boolean tpc_SRS_RNTIPresent = buffer.decodeBit ("tpc_SRS_RNTIPresent");
      boolean absoluteTPC_CommandPresent = buffer.decodeBit ("absoluteTPC_CommandPresent");
      boolean twoDifferentTPC_Loop_PUSCHPresent = buffer.decodeBit ("twoDifferentTPC_Loop_PUSCHPresent");
      boolean twoDifferentTPC_Loop_PUCCHPresent = buffer.decodeBit ("twoDifferentTPC_Loop_PUCCHPresent");
      boolean pusch_HalfPi_BPSKPresent = buffer.decodeBit ("pusch_HalfPi_BPSKPresent");
      boolean pucch_F3_4_HalfPi_BPSKPresent = buffer.decodeBit ("pucch_F3_4_HalfPi_BPSKPresent");
      boolean almostContiguousCP_OFDM_ULPresent = buffer.decodeBit ("almostContiguousCP_OFDM_ULPresent");
      boolean sp_CSI_RSPresent = buffer.decodeBit ("sp_CSI_RSPresent");
      boolean sp_CSI_IMPresent = buffer.decodeBit ("sp_CSI_IMPresent");
      boolean tdd_MultiDL_UL_SwitchPerSlotPresent = buffer.decodeBit ("tdd_MultiDL_UL_SwitchPerSlotPresent");
      boolean multipleCORESETPresent = buffer.decodeBit ("multipleCORESETPresent");

      // decode dynamicSFI

      if (dynamicSFIPresent) {
         buffer.getContext().eventDispatcher.startElement("dynamicSFI", -1);

         int tval = Phy_ParametersFRX_Diff_dynamicSFI.decodeEnumValue (buffer);
         dynamicSFI = Phy_ParametersFRX_Diff_dynamicSFI.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("dynamicSFI", -1);
      }
      else {
         dynamicSFI = null;
      }

      // decode dummy1

      if (dummy1Present) {
         buffer.getContext().eventDispatcher.startElement("dummy1", -1);

         dummy1 = new Asn1BitString();
         dummy1.decode (buffer, 2, 2);

         buffer.invokeCharacters(dummy1.toString());
         buffer.getContext().eventDispatcher.endElement("dummy1", -1);
      }
      else {
         dummy1 = null;
      }

      // decode twoFL_DMRS

      if (twoFL_DMRSPresent) {
         buffer.getContext().eventDispatcher.startElement("twoFL_DMRS", -1);

         twoFL_DMRS = new Asn1BitString();
         twoFL_DMRS.decode (buffer, 2, 2);

         buffer.invokeCharacters(twoFL_DMRS.toString());
         buffer.getContext().eventDispatcher.endElement("twoFL_DMRS", -1);
      }
      else {
         twoFL_DMRS = null;
      }

      // decode dummy2

      if (dummy2Present) {
         buffer.getContext().eventDispatcher.startElement("dummy2", -1);

         dummy2 = new Asn1BitString();
         dummy2.decode (buffer, 2, 2);

         buffer.invokeCharacters(dummy2.toString());
         buffer.getContext().eventDispatcher.endElement("dummy2", -1);
      }
      else {
         dummy2 = null;
      }

      // decode dummy3

      if (dummy3Present) {
         buffer.getContext().eventDispatcher.startElement("dummy3", -1);

         dummy3 = new Asn1BitString();
         dummy3.decode (buffer, 2, 2);

         buffer.invokeCharacters(dummy3.toString());
         buffer.getContext().eventDispatcher.endElement("dummy3", -1);
      }
      else {
         dummy3 = null;
      }

      // decode supportedDMRS_TypeDL

      if (supportedDMRS_TypeDLPresent) {
         buffer.getContext().eventDispatcher.startElement("supportedDMRS_TypeDL", -1);

         int tval = Phy_ParametersFRX_Diff_supportedDMRS_TypeDL.decodeEnumValue (buffer);
         supportedDMRS_TypeDL = Phy_ParametersFRX_Diff_supportedDMRS_TypeDL.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("supportedDMRS_TypeDL", -1);
      }
      else {
         supportedDMRS_TypeDL = null;
      }

      // decode supportedDMRS_TypeUL

      if (supportedDMRS_TypeULPresent) {
         buffer.getContext().eventDispatcher.startElement("supportedDMRS_TypeUL", -1);

         int tval = Phy_ParametersFRX_Diff_supportedDMRS_TypeUL.decodeEnumValue (buffer);
         supportedDMRS_TypeUL = Phy_ParametersFRX_Diff_supportedDMRS_TypeUL.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("supportedDMRS_TypeUL", -1);
      }
      else {
         supportedDMRS_TypeUL = null;
      }

      // decode semiOpenLoopCSI

      if (semiOpenLoopCSIPresent) {
         buffer.getContext().eventDispatcher.startElement("semiOpenLoopCSI", -1);

         int tval = Phy_ParametersFRX_Diff_semiOpenLoopCSI.decodeEnumValue (buffer);
         semiOpenLoopCSI = Phy_ParametersFRX_Diff_semiOpenLoopCSI.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("semiOpenLoopCSI", -1);
      }
      else {
         semiOpenLoopCSI = null;
      }

      // decode csi_ReportWithoutPMI

      if (csi_ReportWithoutPMIPresent) {
         buffer.getContext().eventDispatcher.startElement("csi_ReportWithoutPMI", -1);

         int tval = Phy_ParametersFRX_Diff_csi_ReportWithoutPMI.decodeEnumValue (buffer);
         csi_ReportWithoutPMI = Phy_ParametersFRX_Diff_csi_ReportWithoutPMI.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("csi_ReportWithoutPMI", -1);
      }
      else {
         csi_ReportWithoutPMI = null;
      }

      // decode csi_ReportWithoutCQI

      if (csi_ReportWithoutCQIPresent) {
         buffer.getContext().eventDispatcher.startElement("csi_ReportWithoutCQI", -1);

         int tval = Phy_ParametersFRX_Diff_csi_ReportWithoutCQI.decodeEnumValue (buffer);
         csi_ReportWithoutCQI = Phy_ParametersFRX_Diff_csi_ReportWithoutCQI.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("csi_ReportWithoutCQI", -1);
      }
      else {
         csi_ReportWithoutCQI = null;
      }

      // decode onePortsPTRS

      if (onePortsPTRSPresent) {
         buffer.getContext().eventDispatcher.startElement("onePortsPTRS", -1);

         onePortsPTRS = new Asn1BitString();
         onePortsPTRS.decode (buffer, 2, 2);

         buffer.invokeCharacters(onePortsPTRS.toString());
         buffer.getContext().eventDispatcher.endElement("onePortsPTRS", -1);
      }
      else {
         onePortsPTRS = null;
      }

      // decode twoPUCCH_F0_2_ConsecSymbols

      if (twoPUCCH_F0_2_ConsecSymbolsPresent) {
         buffer.getContext().eventDispatcher.startElement("twoPUCCH_F0_2_ConsecSymbols", -1);

         int tval = Phy_ParametersFRX_Diff_twoPUCCH_F0_2_ConsecSymbols.decodeEnumValue (buffer);
         twoPUCCH_F0_2_ConsecSymbols = Phy_ParametersFRX_Diff_twoPUCCH_F0_2_ConsecSymbols.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("twoPUCCH_F0_2_ConsecSymbols", -1);
      }
      else {
         twoPUCCH_F0_2_ConsecSymbols = null;
      }

      // decode pucch_F2_WithFH

      if (pucch_F2_WithFHPresent) {
         buffer.getContext().eventDispatcher.startElement("pucch_F2_WithFH", -1);

         int tval = Phy_ParametersFRX_Diff_pucch_F2_WithFH.decodeEnumValue (buffer);
         pucch_F2_WithFH = Phy_ParametersFRX_Diff_pucch_F2_WithFH.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("pucch_F2_WithFH", -1);
      }
      else {
         pucch_F2_WithFH = null;
      }

      // decode pucch_F3_WithFH

      if (pucch_F3_WithFHPresent) {
         buffer.getContext().eventDispatcher.startElement("pucch_F3_WithFH", -1);

         int tval = Phy_ParametersFRX_Diff_pucch_F3_WithFH.decodeEnumValue (buffer);
         pucch_F3_WithFH = Phy_ParametersFRX_Diff_pucch_F3_WithFH.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("pucch_F3_WithFH", -1);
      }
      else {
         pucch_F3_WithFH = null;
      }

      // decode pucch_F4_WithFH

      if (pucch_F4_WithFHPresent) {
         buffer.getContext().eventDispatcher.startElement("pucch_F4_WithFH", -1);

         int tval = Phy_ParametersFRX_Diff_pucch_F4_WithFH.decodeEnumValue (buffer);
         pucch_F4_WithFH = Phy_ParametersFRX_Diff_pucch_F4_WithFH.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("pucch_F4_WithFH", -1);
      }
      else {
         pucch_F4_WithFH = null;
      }

      // decode pucch_F0_2WithoutFH

      if (pucch_F0_2WithoutFHPresent) {
         buffer.getContext().eventDispatcher.startElement("pucch_F0_2WithoutFH", -1);

         int tval = Phy_ParametersFRX_Diff_pucch_F0_2WithoutFH.decodeEnumValue (buffer);
         pucch_F0_2WithoutFH = Phy_ParametersFRX_Diff_pucch_F0_2WithoutFH.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("pucch_F0_2WithoutFH", -1);
      }
      else {
         pucch_F0_2WithoutFH = null;
      }

      // decode pucch_F1_3_4WithoutFH

      if (pucch_F1_3_4WithoutFHPresent) {
         buffer.getContext().eventDispatcher.startElement("pucch_F1_3_4WithoutFH", -1);

         int tval = Phy_ParametersFRX_Diff_pucch_F1_3_4WithoutFH.decodeEnumValue (buffer);
         pucch_F1_3_4WithoutFH = Phy_ParametersFRX_Diff_pucch_F1_3_4WithoutFH.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("pucch_F1_3_4WithoutFH", -1);
      }
      else {
         pucch_F1_3_4WithoutFH = null;
      }

      // decode mux_SR_HARQ_ACK_CSI_PUCCH_MultiPerSlot

      if (mux_SR_HARQ_ACK_CSI_PUCCH_MultiPerSlotPresent) {
         buffer.getContext().eventDispatcher.startElement("mux_SR_HARQ_ACK_CSI_PUCCH_MultiPerSlot", -1);

         int tval = Phy_ParametersFRX_Diff_mux_SR_HARQ_ACK_CSI_PUCCH_MultiPerSlot.decodeEnumValue (buffer);
         mux_SR_HARQ_ACK_CSI_PUCCH_MultiPerSlot = Phy_ParametersFRX_Diff_mux_SR_HARQ_ACK_CSI_PUCCH_MultiPerSlot.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("mux_SR_HARQ_ACK_CSI_PUCCH_MultiPerSlot", -1);
      }
      else {
         mux_SR_HARQ_ACK_CSI_PUCCH_MultiPerSlot = null;
      }

      // decode uci_CodeBlockSegmentation

      if (uci_CodeBlockSegmentationPresent) {
         buffer.getContext().eventDispatcher.startElement("uci_CodeBlockSegmentation", -1);

         int tval = Phy_ParametersFRX_Diff_uci_CodeBlockSegmentation.decodeEnumValue (buffer);
         uci_CodeBlockSegmentation = Phy_ParametersFRX_Diff_uci_CodeBlockSegmentation.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("uci_CodeBlockSegmentation", -1);
      }
      else {
         uci_CodeBlockSegmentation = null;
      }

      // decode onePUCCH_LongAndShortFormat

      if (onePUCCH_LongAndShortFormatPresent) {
         buffer.getContext().eventDispatcher.startElement("onePUCCH_LongAndShortFormat", -1);

         int tval = Phy_ParametersFRX_Diff_onePUCCH_LongAndShortFormat.decodeEnumValue (buffer);
         onePUCCH_LongAndShortFormat = Phy_ParametersFRX_Diff_onePUCCH_LongAndShortFormat.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("onePUCCH_LongAndShortFormat", -1);
      }
      else {
         onePUCCH_LongAndShortFormat = null;
      }

      // decode twoPUCCH_AnyOthersInSlot

      if (twoPUCCH_AnyOthersInSlotPresent) {
         buffer.getContext().eventDispatcher.startElement("twoPUCCH_AnyOthersInSlot", -1);

         int tval = Phy_ParametersFRX_Diff_twoPUCCH_AnyOthersInSlot.decodeEnumValue (buffer);
         twoPUCCH_AnyOthersInSlot = Phy_ParametersFRX_Diff_twoPUCCH_AnyOthersInSlot.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("twoPUCCH_AnyOthersInSlot", -1);
      }
      else {
         twoPUCCH_AnyOthersInSlot = null;
      }

      // decode intraSlotFreqHopping_PUSCH

      if (intraSlotFreqHopping_PUSCHPresent) {
         buffer.getContext().eventDispatcher.startElement("intraSlotFreqHopping_PUSCH", -1);

         int tval = Phy_ParametersFRX_Diff_intraSlotFreqHopping_PUSCH.decodeEnumValue (buffer);
         intraSlotFreqHopping_PUSCH = Phy_ParametersFRX_Diff_intraSlotFreqHopping_PUSCH.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("intraSlotFreqHopping_PUSCH", -1);
      }
      else {
         intraSlotFreqHopping_PUSCH = null;
      }

      // decode pusch_LBRM

      if (pusch_LBRMPresent) {
         buffer.getContext().eventDispatcher.startElement("pusch_LBRM", -1);

         int tval = Phy_ParametersFRX_Diff_pusch_LBRM.decodeEnumValue (buffer);
         pusch_LBRM = Phy_ParametersFRX_Diff_pusch_LBRM.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("pusch_LBRM", -1);
      }
      else {
         pusch_LBRM = null;
      }

      // decode pdcch_BlindDetectionCA

      if (pdcch_BlindDetectionCAPresent) {
         buffer.getContext().eventDispatcher.startElement("pdcch_BlindDetectionCA", -1);

         pdcch_BlindDetectionCA = new Asn1Integer();
         pdcch_BlindDetectionCA.decode (buffer, 4, 16);

         buffer.invokeCharacters(pdcch_BlindDetectionCA.toString());
         buffer.getContext().eventDispatcher.endElement("pdcch_BlindDetectionCA", -1);
      }
      else {
         pdcch_BlindDetectionCA = null;
      }

      // decode tpc_PUSCH_RNTI

      if (tpc_PUSCH_RNTIPresent) {
         buffer.getContext().eventDispatcher.startElement("tpc_PUSCH_RNTI", -1);

         int tval = Phy_ParametersFRX_Diff_tpc_PUSCH_RNTI.decodeEnumValue (buffer);
         tpc_PUSCH_RNTI = Phy_ParametersFRX_Diff_tpc_PUSCH_RNTI.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("tpc_PUSCH_RNTI", -1);
      }
      else {
         tpc_PUSCH_RNTI = null;
      }

      // decode tpc_PUCCH_RNTI

      if (tpc_PUCCH_RNTIPresent) {
         buffer.getContext().eventDispatcher.startElement("tpc_PUCCH_RNTI", -1);

         int tval = Phy_ParametersFRX_Diff_tpc_PUCCH_RNTI.decodeEnumValue (buffer);
         tpc_PUCCH_RNTI = Phy_ParametersFRX_Diff_tpc_PUCCH_RNTI.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("tpc_PUCCH_RNTI", -1);
      }
      else {
         tpc_PUCCH_RNTI = null;
      }

      // decode tpc_SRS_RNTI

      if (tpc_SRS_RNTIPresent) {
         buffer.getContext().eventDispatcher.startElement("tpc_SRS_RNTI", -1);

         int tval = Phy_ParametersFRX_Diff_tpc_SRS_RNTI.decodeEnumValue (buffer);
         tpc_SRS_RNTI = Phy_ParametersFRX_Diff_tpc_SRS_RNTI.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("tpc_SRS_RNTI", -1);
      }
      else {
         tpc_SRS_RNTI = null;
      }

      // decode absoluteTPC_Command

      if (absoluteTPC_CommandPresent) {
         buffer.getContext().eventDispatcher.startElement("absoluteTPC_Command", -1);

         int tval = Phy_ParametersFRX_Diff_absoluteTPC_Command.decodeEnumValue (buffer);
         absoluteTPC_Command = Phy_ParametersFRX_Diff_absoluteTPC_Command.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("absoluteTPC_Command", -1);
      }
      else {
         absoluteTPC_Command = null;
      }

      // decode twoDifferentTPC_Loop_PUSCH

      if (twoDifferentTPC_Loop_PUSCHPresent) {
         buffer.getContext().eventDispatcher.startElement("twoDifferentTPC_Loop_PUSCH", -1);

         int tval = Phy_ParametersFRX_Diff_twoDifferentTPC_Loop_PUSCH.decodeEnumValue (buffer);
         twoDifferentTPC_Loop_PUSCH = Phy_ParametersFRX_Diff_twoDifferentTPC_Loop_PUSCH.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("twoDifferentTPC_Loop_PUSCH", -1);
      }
      else {
         twoDifferentTPC_Loop_PUSCH = null;
      }

      // decode twoDifferentTPC_Loop_PUCCH

      if (twoDifferentTPC_Loop_PUCCHPresent) {
         buffer.getContext().eventDispatcher.startElement("twoDifferentTPC_Loop_PUCCH", -1);

         int tval = Phy_ParametersFRX_Diff_twoDifferentTPC_Loop_PUCCH.decodeEnumValue (buffer);
         twoDifferentTPC_Loop_PUCCH = Phy_ParametersFRX_Diff_twoDifferentTPC_Loop_PUCCH.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("twoDifferentTPC_Loop_PUCCH", -1);
      }
      else {
         twoDifferentTPC_Loop_PUCCH = null;
      }

      // decode pusch_HalfPi_BPSK

      if (pusch_HalfPi_BPSKPresent) {
         buffer.getContext().eventDispatcher.startElement("pusch_HalfPi_BPSK", -1);

         int tval = Phy_ParametersFRX_Diff_pusch_HalfPi_BPSK.decodeEnumValue (buffer);
         pusch_HalfPi_BPSK = Phy_ParametersFRX_Diff_pusch_HalfPi_BPSK.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("pusch_HalfPi_BPSK", -1);
      }
      else {
         pusch_HalfPi_BPSK = null;
      }

      // decode pucch_F3_4_HalfPi_BPSK

      if (pucch_F3_4_HalfPi_BPSKPresent) {
         buffer.getContext().eventDispatcher.startElement("pucch_F3_4_HalfPi_BPSK", -1);

         int tval = Phy_ParametersFRX_Diff_pucch_F3_4_HalfPi_BPSK.decodeEnumValue (buffer);
         pucch_F3_4_HalfPi_BPSK = Phy_ParametersFRX_Diff_pucch_F3_4_HalfPi_BPSK.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("pucch_F3_4_HalfPi_BPSK", -1);
      }
      else {
         pucch_F3_4_HalfPi_BPSK = null;
      }

      // decode almostContiguousCP_OFDM_UL

      if (almostContiguousCP_OFDM_ULPresent) {
         buffer.getContext().eventDispatcher.startElement("almostContiguousCP_OFDM_UL", -1);

         int tval = Phy_ParametersFRX_Diff_almostContiguousCP_OFDM_UL.decodeEnumValue (buffer);
         almostContiguousCP_OFDM_UL = Phy_ParametersFRX_Diff_almostContiguousCP_OFDM_UL.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("almostContiguousCP_OFDM_UL", -1);
      }
      else {
         almostContiguousCP_OFDM_UL = null;
      }

      // decode sp_CSI_RS

      if (sp_CSI_RSPresent) {
         buffer.getContext().eventDispatcher.startElement("sp_CSI_RS", -1);

         int tval = Phy_ParametersFRX_Diff_sp_CSI_RS.decodeEnumValue (buffer);
         sp_CSI_RS = Phy_ParametersFRX_Diff_sp_CSI_RS.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("sp_CSI_RS", -1);
      }
      else {
         sp_CSI_RS = null;
      }

      // decode sp_CSI_IM

      if (sp_CSI_IMPresent) {
         buffer.getContext().eventDispatcher.startElement("sp_CSI_IM", -1);

         int tval = Phy_ParametersFRX_Diff_sp_CSI_IM.decodeEnumValue (buffer);
         sp_CSI_IM = Phy_ParametersFRX_Diff_sp_CSI_IM.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("sp_CSI_IM", -1);
      }
      else {
         sp_CSI_IM = null;
      }

      // decode tdd_MultiDL_UL_SwitchPerSlot

      if (tdd_MultiDL_UL_SwitchPerSlotPresent) {
         buffer.getContext().eventDispatcher.startElement("tdd_MultiDL_UL_SwitchPerSlot", -1);

         int tval = Phy_ParametersFRX_Diff_tdd_MultiDL_UL_SwitchPerSlot.decodeEnumValue (buffer);
         tdd_MultiDL_UL_SwitchPerSlot = Phy_ParametersFRX_Diff_tdd_MultiDL_UL_SwitchPerSlot.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("tdd_MultiDL_UL_SwitchPerSlot", -1);
      }
      else {
         tdd_MultiDL_UL_SwitchPerSlot = null;
      }

      // decode multipleCORESET

      if (multipleCORESETPresent) {
         buffer.getContext().eventDispatcher.startElement("multipleCORESET", -1);

         int tval = Phy_ParametersFRX_Diff_multipleCORESET.decodeEnumValue (buffer);
         multipleCORESET = Phy_ParametersFRX_Diff_multipleCORESET.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("multipleCORESET", -1);
      }
      else {
         multipleCORESET = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV4ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV5ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean csi_RS_IM_ReceptionForFeedbackPresent = buffer.decodeBit ("csi_RS_IM_ReceptionForFeedbackPresent");

            boolean csi_RS_ProcFrameworkForSRSPresent = buffer.decodeBit ("csi_RS_ProcFrameworkForSRSPresent");

            boolean csi_ReportFrameworkPresent = buffer.decodeBit ("csi_ReportFrameworkPresent");

            boolean mux_SR_HARQ_ACK_CSI_PUCCH_OncePerSlotPresent = buffer.decodeBit ("mux_SR_HARQ_ACK_CSI_PUCCH_OncePerSlotPresent");

            boolean mux_SR_HARQ_ACK_PUCCHPresent = buffer.decodeBit ("mux_SR_HARQ_ACK_PUCCHPresent");

            boolean mux_MultipleGroupCtrlCH_OverlapPresent = buffer.decodeBit ("mux_MultipleGroupCtrlCH_OverlapPresent");

            boolean dl_SchedulingOffset_PDSCH_TypeAPresent = buffer.decodeBit ("dl_SchedulingOffset_PDSCH_TypeAPresent");

            boolean dl_SchedulingOffset_PDSCH_TypeBPresent = buffer.decodeBit ("dl_SchedulingOffset_PDSCH_TypeBPresent");

            boolean ul_SchedulingOffsetPresent = buffer.decodeBit ("ul_SchedulingOffsetPresent");

            boolean dl_64QAM_MCS_TableAltPresent = buffer.decodeBit ("dl_64QAM_MCS_TableAltPresent");

            boolean ul_64QAM_MCS_TableAltPresent = buffer.decodeBit ("ul_64QAM_MCS_TableAltPresent");

            boolean cqi_TableAltPresent = buffer.decodeBit ("cqi_TableAltPresent");

            boolean oneFL_DMRS_TwoAdditionalDMRS_ULPresent = buffer.decodeBit ("oneFL_DMRS_TwoAdditionalDMRS_ULPresent");

            boolean twoFL_DMRS_TwoAdditionalDMRS_ULPresent = buffer.decodeBit ("twoFL_DMRS_TwoAdditionalDMRS_ULPresent");

            boolean oneFL_DMRS_ThreeAdditionalDMRS_ULPresent = buffer.decodeBit ("oneFL_DMRS_ThreeAdditionalDMRS_ULPresent");

            // decode csi_RS_IM_ReceptionForFeedback

            if (csi_RS_IM_ReceptionForFeedbackPresent) {
               buffer.getContext().eventDispatcher.startElement("csi_RS_IM_ReceptionForFeedback", -1);

               csi_RS_IM_ReceptionForFeedback = new CSI_RS_IM_ReceptionForFeedback();
               csi_RS_IM_ReceptionForFeedback.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("csi_RS_IM_ReceptionForFeedback", -1);
            }
            else {
               csi_RS_IM_ReceptionForFeedback = null;
            }

            // decode csi_RS_ProcFrameworkForSRS

            if (csi_RS_ProcFrameworkForSRSPresent) {
               buffer.getContext().eventDispatcher.startElement("csi_RS_ProcFrameworkForSRS", -1);

               csi_RS_ProcFrameworkForSRS = new CSI_RS_ProcFrameworkForSRS();
               csi_RS_ProcFrameworkForSRS.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("csi_RS_ProcFrameworkForSRS", -1);
            }
            else {
               csi_RS_ProcFrameworkForSRS = null;
            }

            // decode csi_ReportFramework

            if (csi_ReportFrameworkPresent) {
               buffer.getContext().eventDispatcher.startElement("csi_ReportFramework", -1);

               csi_ReportFramework = new CSI_ReportFramework();
               csi_ReportFramework.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("csi_ReportFramework", -1);
            }
            else {
               csi_ReportFramework = null;
            }

            // decode mux_SR_HARQ_ACK_CSI_PUCCH_OncePerSlot

            if (mux_SR_HARQ_ACK_CSI_PUCCH_OncePerSlotPresent) {
               buffer.getContext().eventDispatcher.startElement("mux_SR_HARQ_ACK_CSI_PUCCH_OncePerSlot", -1);

               mux_SR_HARQ_ACK_CSI_PUCCH_OncePerSlot = new Phy_ParametersFRX_Diff_mux_SR_HARQ_ACK_CSI_PUCCH_OncePerSlot();
               mux_SR_HARQ_ACK_CSI_PUCCH_OncePerSlot.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("mux_SR_HARQ_ACK_CSI_PUCCH_OncePerSlot", -1);
            }
            else {
               mux_SR_HARQ_ACK_CSI_PUCCH_OncePerSlot = null;
            }

            // decode mux_SR_HARQ_ACK_PUCCH

            if (mux_SR_HARQ_ACK_PUCCHPresent) {
               buffer.getContext().eventDispatcher.startElement("mux_SR_HARQ_ACK_PUCCH", -1);

               int tval = Phy_ParametersFRX_Diff_mux_SR_HARQ_ACK_PUCCH.decodeEnumValue (buffer);
               mux_SR_HARQ_ACK_PUCCH = Phy_ParametersFRX_Diff_mux_SR_HARQ_ACK_PUCCH.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("mux_SR_HARQ_ACK_PUCCH", -1);
            }
            else {
               mux_SR_HARQ_ACK_PUCCH = null;
            }

            // decode mux_MultipleGroupCtrlCH_Overlap

            if (mux_MultipleGroupCtrlCH_OverlapPresent) {
               buffer.getContext().eventDispatcher.startElement("mux_MultipleGroupCtrlCH_Overlap", -1);

               int tval = Phy_ParametersFRX_Diff_mux_MultipleGroupCtrlCH_Overlap.decodeEnumValue (buffer);
               mux_MultipleGroupCtrlCH_Overlap = Phy_ParametersFRX_Diff_mux_MultipleGroupCtrlCH_Overlap.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("mux_MultipleGroupCtrlCH_Overlap", -1);
            }
            else {
               mux_MultipleGroupCtrlCH_Overlap = null;
            }

            // decode dl_SchedulingOffset_PDSCH_TypeA

            if (dl_SchedulingOffset_PDSCH_TypeAPresent) {
               buffer.getContext().eventDispatcher.startElement("dl_SchedulingOffset_PDSCH_TypeA", -1);

               int tval = Phy_ParametersFRX_Diff_dl_SchedulingOffset_PDSCH_TypeA.decodeEnumValue (buffer);
               dl_SchedulingOffset_PDSCH_TypeA = Phy_ParametersFRX_Diff_dl_SchedulingOffset_PDSCH_TypeA.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("dl_SchedulingOffset_PDSCH_TypeA", -1);
            }
            else {
               dl_SchedulingOffset_PDSCH_TypeA = null;
            }

            // decode dl_SchedulingOffset_PDSCH_TypeB

            if (dl_SchedulingOffset_PDSCH_TypeBPresent) {
               buffer.getContext().eventDispatcher.startElement("dl_SchedulingOffset_PDSCH_TypeB", -1);

               int tval = Phy_ParametersFRX_Diff_dl_SchedulingOffset_PDSCH_TypeB.decodeEnumValue (buffer);
               dl_SchedulingOffset_PDSCH_TypeB = Phy_ParametersFRX_Diff_dl_SchedulingOffset_PDSCH_TypeB.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("dl_SchedulingOffset_PDSCH_TypeB", -1);
            }
            else {
               dl_SchedulingOffset_PDSCH_TypeB = null;
            }

            // decode ul_SchedulingOffset

            if (ul_SchedulingOffsetPresent) {
               buffer.getContext().eventDispatcher.startElement("ul_SchedulingOffset", -1);

               int tval = Phy_ParametersFRX_Diff_ul_SchedulingOffset.decodeEnumValue (buffer);
               ul_SchedulingOffset = Phy_ParametersFRX_Diff_ul_SchedulingOffset.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("ul_SchedulingOffset", -1);
            }
            else {
               ul_SchedulingOffset = null;
            }

            // decode dl_64QAM_MCS_TableAlt

            if (dl_64QAM_MCS_TableAltPresent) {
               buffer.getContext().eventDispatcher.startElement("dl_64QAM_MCS_TableAlt", -1);

               int tval = Phy_ParametersFRX_Diff_dl_64QAM_MCS_TableAlt.decodeEnumValue (buffer);
               dl_64QAM_MCS_TableAlt = Phy_ParametersFRX_Diff_dl_64QAM_MCS_TableAlt.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("dl_64QAM_MCS_TableAlt", -1);
            }
            else {
               dl_64QAM_MCS_TableAlt = null;
            }

            // decode ul_64QAM_MCS_TableAlt

            if (ul_64QAM_MCS_TableAltPresent) {
               buffer.getContext().eventDispatcher.startElement("ul_64QAM_MCS_TableAlt", -1);

               int tval = Phy_ParametersFRX_Diff_ul_64QAM_MCS_TableAlt.decodeEnumValue (buffer);
               ul_64QAM_MCS_TableAlt = Phy_ParametersFRX_Diff_ul_64QAM_MCS_TableAlt.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("ul_64QAM_MCS_TableAlt", -1);
            }
            else {
               ul_64QAM_MCS_TableAlt = null;
            }

            // decode cqi_TableAlt

            if (cqi_TableAltPresent) {
               buffer.getContext().eventDispatcher.startElement("cqi_TableAlt", -1);

               int tval = Phy_ParametersFRX_Diff_cqi_TableAlt.decodeEnumValue (buffer);
               cqi_TableAlt = Phy_ParametersFRX_Diff_cqi_TableAlt.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("cqi_TableAlt", -1);
            }
            else {
               cqi_TableAlt = null;
            }

            // decode oneFL_DMRS_TwoAdditionalDMRS_UL

            if (oneFL_DMRS_TwoAdditionalDMRS_ULPresent) {
               buffer.getContext().eventDispatcher.startElement("oneFL_DMRS_TwoAdditionalDMRS_UL", -1);

               int tval = Phy_ParametersFRX_Diff_oneFL_DMRS_TwoAdditionalDMRS_UL.decodeEnumValue (buffer);
               oneFL_DMRS_TwoAdditionalDMRS_UL = Phy_ParametersFRX_Diff_oneFL_DMRS_TwoAdditionalDMRS_UL.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("oneFL_DMRS_TwoAdditionalDMRS_UL", -1);
            }
            else {
               oneFL_DMRS_TwoAdditionalDMRS_UL = null;
            }

            // decode twoFL_DMRS_TwoAdditionalDMRS_UL

            if (twoFL_DMRS_TwoAdditionalDMRS_ULPresent) {
               buffer.getContext().eventDispatcher.startElement("twoFL_DMRS_TwoAdditionalDMRS_UL", -1);

               int tval = Phy_ParametersFRX_Diff_twoFL_DMRS_TwoAdditionalDMRS_UL.decodeEnumValue (buffer);
               twoFL_DMRS_TwoAdditionalDMRS_UL = Phy_ParametersFRX_Diff_twoFL_DMRS_TwoAdditionalDMRS_UL.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("twoFL_DMRS_TwoAdditionalDMRS_UL", -1);
            }
            else {
               twoFL_DMRS_TwoAdditionalDMRS_UL = null;
            }

            // decode oneFL_DMRS_ThreeAdditionalDMRS_UL

            if (oneFL_DMRS_ThreeAdditionalDMRS_ULPresent) {
               buffer.getContext().eventDispatcher.startElement("oneFL_DMRS_ThreeAdditionalDMRS_UL", -1);

               int tval = Phy_ParametersFRX_Diff_oneFL_DMRS_ThreeAdditionalDMRS_UL.decodeEnumValue (buffer);
               oneFL_DMRS_ThreeAdditionalDMRS_UL = Phy_ParametersFRX_Diff_oneFL_DMRS_ThreeAdditionalDMRS_UL.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("oneFL_DMRS_ThreeAdditionalDMRS_UL", -1);
            }
            else {
               oneFL_DMRS_ThreeAdditionalDMRS_UL = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean pdcch_BlindDetectionNRDCPresent = buffer.decodeBit ("pdcch_BlindDetectionNRDCPresent");

            boolean mux_HARQ_ACK_PUSCH_DiffSymbolPresent = buffer.decodeBit ("mux_HARQ_ACK_PUSCH_DiffSymbolPresent");

            // decode pdcch_BlindDetectionNRDC

            if (pdcch_BlindDetectionNRDCPresent) {
               buffer.getContext().eventDispatcher.startElement("pdcch_BlindDetectionNRDC", -1);

               pdcch_BlindDetectionNRDC = new Phy_ParametersFRX_Diff_pdcch_BlindDetectionNRDC();
               pdcch_BlindDetectionNRDC.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("pdcch_BlindDetectionNRDC", -1);
            }
            else {
               pdcch_BlindDetectionNRDC = null;
            }

            // decode mux_HARQ_ACK_PUSCH_DiffSymbol

            if (mux_HARQ_ACK_PUSCH_DiffSymbolPresent) {
               buffer.getContext().eventDispatcher.startElement("mux_HARQ_ACK_PUSCH_DiffSymbol", -1);

               int tval = Phy_ParametersFRX_Diff_mux_HARQ_ACK_PUSCH_DiffSymbol.decodeEnumValue (buffer);
               mux_HARQ_ACK_PUSCH_DiffSymbol = Phy_ParametersFRX_Diff_mux_HARQ_ACK_PUSCH_DiffSymbol.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("mux_HARQ_ACK_PUSCH_DiffSymbol", -1);
            }
            else {
               mux_HARQ_ACK_PUSCH_DiffSymbol = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV4ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean type1_HARQ_ACK_Codebook_r16Present = buffer.decodeBit ("type1_HARQ_ACK_Codebook_r16Present");

            boolean enhancedPowerControl_r16Present = buffer.decodeBit ("enhancedPowerControl_r16Present");

            boolean simultaneousTCI_ActMultipleCC_r16Present = buffer.decodeBit ("simultaneousTCI_ActMultipleCC_r16Present");

            boolean simultaneousSpatialRelationMultipleCC_r16Present = buffer.decodeBit ("simultaneousSpatialRelationMultipleCC_r16Present");

            boolean cli_RSSI_FDM_DL_r16Present = buffer.decodeBit ("cli_RSSI_FDM_DL_r16Present");

            boolean cli_SRS_RSRP_FDM_DL_r16Present = buffer.decodeBit ("cli_SRS_RSRP_FDM_DL_r16Present");

            boolean maxLayersMIMO_Adaptation_r16Present = buffer.decodeBit ("maxLayersMIMO_Adaptation_r16Present");

            boolean aggregationFactorSPS_DL_r16Present = buffer.decodeBit ("aggregationFactorSPS_DL_r16Present");

            boolean maxTotalResourcesForOneFreqRange_r16Present = buffer.decodeBit ("maxTotalResourcesForOneFreqRange_r16Present");

            boolean csi_ReportFrameworkExt_r16Present = buffer.decodeBit ("csi_ReportFrameworkExt_r16Present");

            // decode type1_HARQ_ACK_Codebook_r16

            if (type1_HARQ_ACK_Codebook_r16Present) {
               buffer.getContext().eventDispatcher.startElement("type1_HARQ_ACK_Codebook_r16", -1);

               int tval = Phy_ParametersFRX_Diff_type1_HARQ_ACK_Codebook_r16.decodeEnumValue (buffer);
               type1_HARQ_ACK_Codebook_r16 = Phy_ParametersFRX_Diff_type1_HARQ_ACK_Codebook_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("type1_HARQ_ACK_Codebook_r16", -1);
            }
            else {
               type1_HARQ_ACK_Codebook_r16 = null;
            }

            // decode enhancedPowerControl_r16

            if (enhancedPowerControl_r16Present) {
               buffer.getContext().eventDispatcher.startElement("enhancedPowerControl_r16", -1);

               int tval = Phy_ParametersFRX_Diff_enhancedPowerControl_r16.decodeEnumValue (buffer);
               enhancedPowerControl_r16 = Phy_ParametersFRX_Diff_enhancedPowerControl_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("enhancedPowerControl_r16", -1);
            }
            else {
               enhancedPowerControl_r16 = null;
            }

            // decode simultaneousTCI_ActMultipleCC_r16

            if (simultaneousTCI_ActMultipleCC_r16Present) {
               buffer.getContext().eventDispatcher.startElement("simultaneousTCI_ActMultipleCC_r16", -1);

               int tval = Phy_ParametersFRX_Diff_simultaneousTCI_ActMultipleCC_r16.decodeEnumValue (buffer);
               simultaneousTCI_ActMultipleCC_r16 = Phy_ParametersFRX_Diff_simultaneousTCI_ActMultipleCC_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("simultaneousTCI_ActMultipleCC_r16", -1);
            }
            else {
               simultaneousTCI_ActMultipleCC_r16 = null;
            }

            // decode simultaneousSpatialRelationMultipleCC_r16

            if (simultaneousSpatialRelationMultipleCC_r16Present) {
               buffer.getContext().eventDispatcher.startElement("simultaneousSpatialRelationMultipleCC_r16", -1);

               int tval = Phy_ParametersFRX_Diff_simultaneousSpatialRelationMultipleCC_r16.decodeEnumValue (buffer);
               simultaneousSpatialRelationMultipleCC_r16 = Phy_ParametersFRX_Diff_simultaneousSpatialRelationMultipleCC_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("simultaneousSpatialRelationMultipleCC_r16", -1);
            }
            else {
               simultaneousSpatialRelationMultipleCC_r16 = null;
            }

            // decode cli_RSSI_FDM_DL_r16

            if (cli_RSSI_FDM_DL_r16Present) {
               buffer.getContext().eventDispatcher.startElement("cli_RSSI_FDM_DL_r16", -1);

               int tval = Phy_ParametersFRX_Diff_cli_RSSI_FDM_DL_r16.decodeEnumValue (buffer);
               cli_RSSI_FDM_DL_r16 = Phy_ParametersFRX_Diff_cli_RSSI_FDM_DL_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("cli_RSSI_FDM_DL_r16", -1);
            }
            else {
               cli_RSSI_FDM_DL_r16 = null;
            }

            // decode cli_SRS_RSRP_FDM_DL_r16

            if (cli_SRS_RSRP_FDM_DL_r16Present) {
               buffer.getContext().eventDispatcher.startElement("cli_SRS_RSRP_FDM_DL_r16", -1);

               int tval = Phy_ParametersFRX_Diff_cli_SRS_RSRP_FDM_DL_r16.decodeEnumValue (buffer);
               cli_SRS_RSRP_FDM_DL_r16 = Phy_ParametersFRX_Diff_cli_SRS_RSRP_FDM_DL_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("cli_SRS_RSRP_FDM_DL_r16", -1);
            }
            else {
               cli_SRS_RSRP_FDM_DL_r16 = null;
            }

            // decode maxLayersMIMO_Adaptation_r16

            if (maxLayersMIMO_Adaptation_r16Present) {
               buffer.getContext().eventDispatcher.startElement("maxLayersMIMO_Adaptation_r16", -1);

               int tval = Phy_ParametersFRX_Diff_maxLayersMIMO_Adaptation_r16.decodeEnumValue (buffer);
               maxLayersMIMO_Adaptation_r16 = Phy_ParametersFRX_Diff_maxLayersMIMO_Adaptation_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("maxLayersMIMO_Adaptation_r16", -1);
            }
            else {
               maxLayersMIMO_Adaptation_r16 = null;
            }

            // decode aggregationFactorSPS_DL_r16

            if (aggregationFactorSPS_DL_r16Present) {
               buffer.getContext().eventDispatcher.startElement("aggregationFactorSPS_DL_r16", -1);

               int tval = Phy_ParametersFRX_Diff_aggregationFactorSPS_DL_r16.decodeEnumValue (buffer);
               aggregationFactorSPS_DL_r16 = Phy_ParametersFRX_Diff_aggregationFactorSPS_DL_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("aggregationFactorSPS_DL_r16", -1);
            }
            else {
               aggregationFactorSPS_DL_r16 = null;
            }

            // decode maxTotalResourcesForOneFreqRange_r16

            if (maxTotalResourcesForOneFreqRange_r16Present) {
               buffer.getContext().eventDispatcher.startElement("maxTotalResourcesForOneFreqRange_r16", -1);

               maxTotalResourcesForOneFreqRange_r16 = new Phy_ParametersFRX_Diff_maxTotalResourcesForOneFreqRange_r16();
               maxTotalResourcesForOneFreqRange_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("maxTotalResourcesForOneFreqRange_r16", -1);
            }
            else {
               maxTotalResourcesForOneFreqRange_r16 = null;
            }

            // decode csi_ReportFrameworkExt_r16

            if (csi_ReportFrameworkExt_r16Present) {
               buffer.getContext().eventDispatcher.startElement("csi_ReportFrameworkExt_r16", -1);

               csi_ReportFrameworkExt_r16 = new CSI_ReportFrameworkExt_r16();
               csi_ReportFrameworkExt_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("csi_ReportFrameworkExt_r16", -1);
            }
            else {
               csi_ReportFrameworkExt_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV5ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean twoTCI_Act_servingCellInCC_List_r16Present = buffer.decodeBit ("twoTCI_Act_servingCellInCC_List_r16Present");

            // decode twoTCI_Act_servingCellInCC_List_r16

            if (twoTCI_Act_servingCellInCC_List_r16Present) {
               buffer.getContext().eventDispatcher.startElement("twoTCI_Act_servingCellInCC_List_r16", -1);

               int tval = Phy_ParametersFRX_Diff_twoTCI_Act_servingCellInCC_List_r16.decodeEnumValue (buffer);
               twoTCI_Act_servingCellInCC_List_r16 = Phy_ParametersFRX_Diff_twoTCI_Act_servingCellInCC_List_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("twoTCI_Act_servingCellInCC_List_r16", -1);
            }
            else {
               twoTCI_Act_servingCellInCC_List_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (mV2ExtPresent ||
      mV3ExtPresent ||
      mV4ExtPresent ||
      mV5ExtPresent ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((dynamicSFI != null), null);
      buffer.encodeBit ((dummy1 != null), null);
      buffer.encodeBit ((twoFL_DMRS != null), null);
      buffer.encodeBit ((dummy2 != null), null);
      buffer.encodeBit ((dummy3 != null), null);
      buffer.encodeBit ((supportedDMRS_TypeDL != null), null);
      buffer.encodeBit ((supportedDMRS_TypeUL != null), null);
      buffer.encodeBit ((semiOpenLoopCSI != null), null);
      buffer.encodeBit ((csi_ReportWithoutPMI != null), null);
      buffer.encodeBit ((csi_ReportWithoutCQI != null), null);
      buffer.encodeBit ((onePortsPTRS != null), null);
      buffer.encodeBit ((twoPUCCH_F0_2_ConsecSymbols != null), null);
      buffer.encodeBit ((pucch_F2_WithFH != null), null);
      buffer.encodeBit ((pucch_F3_WithFH != null), null);
      buffer.encodeBit ((pucch_F4_WithFH != null), null);
      buffer.encodeBit ((pucch_F0_2WithoutFH != null), null);
      buffer.encodeBit ((pucch_F1_3_4WithoutFH != null), null);
      buffer.encodeBit ((mux_SR_HARQ_ACK_CSI_PUCCH_MultiPerSlot != null), null);
      buffer.encodeBit ((uci_CodeBlockSegmentation != null), null);
      buffer.encodeBit ((onePUCCH_LongAndShortFormat != null), null);
      buffer.encodeBit ((twoPUCCH_AnyOthersInSlot != null), null);
      buffer.encodeBit ((intraSlotFreqHopping_PUSCH != null), null);
      buffer.encodeBit ((pusch_LBRM != null), null);
      buffer.encodeBit ((pdcch_BlindDetectionCA != null), null);
      buffer.encodeBit ((tpc_PUSCH_RNTI != null), null);
      buffer.encodeBit ((tpc_PUCCH_RNTI != null), null);
      buffer.encodeBit ((tpc_SRS_RNTI != null), null);
      buffer.encodeBit ((absoluteTPC_Command != null), null);
      buffer.encodeBit ((twoDifferentTPC_Loop_PUSCH != null), null);
      buffer.encodeBit ((twoDifferentTPC_Loop_PUCCH != null), null);
      buffer.encodeBit ((pusch_HalfPi_BPSK != null), null);
      buffer.encodeBit ((pucch_F3_4_HalfPi_BPSK != null), null);
      buffer.encodeBit ((almostContiguousCP_OFDM_UL != null), null);
      buffer.encodeBit ((sp_CSI_RS != null), null);
      buffer.encodeBit ((sp_CSI_IM != null), null);
      buffer.encodeBit ((tdd_MultiDL_UL_SwitchPerSlot != null), null);
      buffer.encodeBit ((multipleCORESET != null), null);

      // encode dynamicSFI

      if (dynamicSFI != null) {
         buffer.getContext().eventDispatcher.startElement("dynamicSFI", -1);

         dynamicSFI.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("dynamicSFI", -1);
      }

      // encode dummy1

      if (dummy1 != null) {
         buffer.getContext().eventDispatcher.startElement("dummy1", -1);

         dummy1.encode (buffer, 2, 2);

         buffer.getContext().eventDispatcher.endElement("dummy1", -1);
      }

      // encode twoFL_DMRS

      if (twoFL_DMRS != null) {
         buffer.getContext().eventDispatcher.startElement("twoFL_DMRS", -1);

         twoFL_DMRS.encode (buffer, 2, 2);

         buffer.getContext().eventDispatcher.endElement("twoFL_DMRS", -1);
      }

      // encode dummy2

      if (dummy2 != null) {
         buffer.getContext().eventDispatcher.startElement("dummy2", -1);

         dummy2.encode (buffer, 2, 2);

         buffer.getContext().eventDispatcher.endElement("dummy2", -1);
      }

      // encode dummy3

      if (dummy3 != null) {
         buffer.getContext().eventDispatcher.startElement("dummy3", -1);

         dummy3.encode (buffer, 2, 2);

         buffer.getContext().eventDispatcher.endElement("dummy3", -1);
      }

      // encode supportedDMRS_TypeDL

      if (supportedDMRS_TypeDL != null) {
         buffer.getContext().eventDispatcher.startElement("supportedDMRS_TypeDL", -1);

         supportedDMRS_TypeDL.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("supportedDMRS_TypeDL", -1);
      }

      // encode supportedDMRS_TypeUL

      if (supportedDMRS_TypeUL != null) {
         buffer.getContext().eventDispatcher.startElement("supportedDMRS_TypeUL", -1);

         supportedDMRS_TypeUL.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("supportedDMRS_TypeUL", -1);
      }

      // encode semiOpenLoopCSI

      if (semiOpenLoopCSI != null) {
         buffer.getContext().eventDispatcher.startElement("semiOpenLoopCSI", -1);

         semiOpenLoopCSI.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("semiOpenLoopCSI", -1);
      }

      // encode csi_ReportWithoutPMI

      if (csi_ReportWithoutPMI != null) {
         buffer.getContext().eventDispatcher.startElement("csi_ReportWithoutPMI", -1);

         csi_ReportWithoutPMI.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("csi_ReportWithoutPMI", -1);
      }

      // encode csi_ReportWithoutCQI

      if (csi_ReportWithoutCQI != null) {
         buffer.getContext().eventDispatcher.startElement("csi_ReportWithoutCQI", -1);

         csi_ReportWithoutCQI.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("csi_ReportWithoutCQI", -1);
      }

      // encode onePortsPTRS

      if (onePortsPTRS != null) {
         buffer.getContext().eventDispatcher.startElement("onePortsPTRS", -1);

         onePortsPTRS.encode (buffer, 2, 2);

         buffer.getContext().eventDispatcher.endElement("onePortsPTRS", -1);
      }

      // encode twoPUCCH_F0_2_ConsecSymbols

      if (twoPUCCH_F0_2_ConsecSymbols != null) {
         buffer.getContext().eventDispatcher.startElement("twoPUCCH_F0_2_ConsecSymbols", -1);

         twoPUCCH_F0_2_ConsecSymbols.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("twoPUCCH_F0_2_ConsecSymbols", -1);
      }

      // encode pucch_F2_WithFH

      if (pucch_F2_WithFH != null) {
         buffer.getContext().eventDispatcher.startElement("pucch_F2_WithFH", -1);

         pucch_F2_WithFH.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("pucch_F2_WithFH", -1);
      }

      // encode pucch_F3_WithFH

      if (pucch_F3_WithFH != null) {
         buffer.getContext().eventDispatcher.startElement("pucch_F3_WithFH", -1);

         pucch_F3_WithFH.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("pucch_F3_WithFH", -1);
      }

      // encode pucch_F4_WithFH

      if (pucch_F4_WithFH != null) {
         buffer.getContext().eventDispatcher.startElement("pucch_F4_WithFH", -1);

         pucch_F4_WithFH.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("pucch_F4_WithFH", -1);
      }

      // encode pucch_F0_2WithoutFH

      if (pucch_F0_2WithoutFH != null) {
         buffer.getContext().eventDispatcher.startElement("pucch_F0_2WithoutFH", -1);

         pucch_F0_2WithoutFH.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("pucch_F0_2WithoutFH", -1);
      }

      // encode pucch_F1_3_4WithoutFH

      if (pucch_F1_3_4WithoutFH != null) {
         buffer.getContext().eventDispatcher.startElement("pucch_F1_3_4WithoutFH", -1);

         pucch_F1_3_4WithoutFH.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("pucch_F1_3_4WithoutFH", -1);
      }

      // encode mux_SR_HARQ_ACK_CSI_PUCCH_MultiPerSlot

      if (mux_SR_HARQ_ACK_CSI_PUCCH_MultiPerSlot != null) {
         buffer.getContext().eventDispatcher.startElement("mux_SR_HARQ_ACK_CSI_PUCCH_MultiPerSlot", -1);

         mux_SR_HARQ_ACK_CSI_PUCCH_MultiPerSlot.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("mux_SR_HARQ_ACK_CSI_PUCCH_MultiPerSlot", -1);
      }

      // encode uci_CodeBlockSegmentation

      if (uci_CodeBlockSegmentation != null) {
         buffer.getContext().eventDispatcher.startElement("uci_CodeBlockSegmentation", -1);

         uci_CodeBlockSegmentation.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("uci_CodeBlockSegmentation", -1);
      }

      // encode onePUCCH_LongAndShortFormat

      if (onePUCCH_LongAndShortFormat != null) {
         buffer.getContext().eventDispatcher.startElement("onePUCCH_LongAndShortFormat", -1);

         onePUCCH_LongAndShortFormat.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("onePUCCH_LongAndShortFormat", -1);
      }

      // encode twoPUCCH_AnyOthersInSlot

      if (twoPUCCH_AnyOthersInSlot != null) {
         buffer.getContext().eventDispatcher.startElement("twoPUCCH_AnyOthersInSlot", -1);

         twoPUCCH_AnyOthersInSlot.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("twoPUCCH_AnyOthersInSlot", -1);
      }

      // encode intraSlotFreqHopping_PUSCH

      if (intraSlotFreqHopping_PUSCH != null) {
         buffer.getContext().eventDispatcher.startElement("intraSlotFreqHopping_PUSCH", -1);

         intraSlotFreqHopping_PUSCH.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("intraSlotFreqHopping_PUSCH", -1);
      }

      // encode pusch_LBRM

      if (pusch_LBRM != null) {
         buffer.getContext().eventDispatcher.startElement("pusch_LBRM", -1);

         pusch_LBRM.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("pusch_LBRM", -1);
      }

      // encode pdcch_BlindDetectionCA

      if (pdcch_BlindDetectionCA != null) {
         buffer.getContext().eventDispatcher.startElement("pdcch_BlindDetectionCA", -1);

         pdcch_BlindDetectionCA.encode (buffer, 4, 16);

         buffer.getContext().eventDispatcher.endElement("pdcch_BlindDetectionCA", -1);
      }

      // encode tpc_PUSCH_RNTI

      if (tpc_PUSCH_RNTI != null) {
         buffer.getContext().eventDispatcher.startElement("tpc_PUSCH_RNTI", -1);

         tpc_PUSCH_RNTI.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("tpc_PUSCH_RNTI", -1);
      }

      // encode tpc_PUCCH_RNTI

      if (tpc_PUCCH_RNTI != null) {
         buffer.getContext().eventDispatcher.startElement("tpc_PUCCH_RNTI", -1);

         tpc_PUCCH_RNTI.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("tpc_PUCCH_RNTI", -1);
      }

      // encode tpc_SRS_RNTI

      if (tpc_SRS_RNTI != null) {
         buffer.getContext().eventDispatcher.startElement("tpc_SRS_RNTI", -1);

         tpc_SRS_RNTI.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("tpc_SRS_RNTI", -1);
      }

      // encode absoluteTPC_Command

      if (absoluteTPC_Command != null) {
         buffer.getContext().eventDispatcher.startElement("absoluteTPC_Command", -1);

         absoluteTPC_Command.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("absoluteTPC_Command", -1);
      }

      // encode twoDifferentTPC_Loop_PUSCH

      if (twoDifferentTPC_Loop_PUSCH != null) {
         buffer.getContext().eventDispatcher.startElement("twoDifferentTPC_Loop_PUSCH", -1);

         twoDifferentTPC_Loop_PUSCH.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("twoDifferentTPC_Loop_PUSCH", -1);
      }

      // encode twoDifferentTPC_Loop_PUCCH

      if (twoDifferentTPC_Loop_PUCCH != null) {
         buffer.getContext().eventDispatcher.startElement("twoDifferentTPC_Loop_PUCCH", -1);

         twoDifferentTPC_Loop_PUCCH.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("twoDifferentTPC_Loop_PUCCH", -1);
      }

      // encode pusch_HalfPi_BPSK

      if (pusch_HalfPi_BPSK != null) {
         buffer.getContext().eventDispatcher.startElement("pusch_HalfPi_BPSK", -1);

         pusch_HalfPi_BPSK.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("pusch_HalfPi_BPSK", -1);
      }

      // encode pucch_F3_4_HalfPi_BPSK

      if (pucch_F3_4_HalfPi_BPSK != null) {
         buffer.getContext().eventDispatcher.startElement("pucch_F3_4_HalfPi_BPSK", -1);

         pucch_F3_4_HalfPi_BPSK.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("pucch_F3_4_HalfPi_BPSK", -1);
      }

      // encode almostContiguousCP_OFDM_UL

      if (almostContiguousCP_OFDM_UL != null) {
         buffer.getContext().eventDispatcher.startElement("almostContiguousCP_OFDM_UL", -1);

         almostContiguousCP_OFDM_UL.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("almostContiguousCP_OFDM_UL", -1);
      }

      // encode sp_CSI_RS

      if (sp_CSI_RS != null) {
         buffer.getContext().eventDispatcher.startElement("sp_CSI_RS", -1);

         sp_CSI_RS.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sp_CSI_RS", -1);
      }

      // encode sp_CSI_IM

      if (sp_CSI_IM != null) {
         buffer.getContext().eventDispatcher.startElement("sp_CSI_IM", -1);

         sp_CSI_IM.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sp_CSI_IM", -1);
      }

      // encode tdd_MultiDL_UL_SwitchPerSlot

      if (tdd_MultiDL_UL_SwitchPerSlot != null) {
         buffer.getContext().eventDispatcher.startElement("tdd_MultiDL_UL_SwitchPerSlot", -1);

         tdd_MultiDL_UL_SwitchPerSlot.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("tdd_MultiDL_UL_SwitchPerSlot", -1);
      }

      // encode multipleCORESET

      if (multipleCORESET != null) {
         buffer.getContext().eventDispatcher.startElement("multipleCORESET", -1);

         multipleCORESET.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("multipleCORESET", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 4;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit (mV2ExtPresent, null);
         buffer.encodeBit (mV3ExtPresent, null);
         buffer.encodeBit (mV4ExtPresent, null);
         buffer.encodeBit (mV5ExtPresent, null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         if (mV2ExtPresent) {
            buffer.reset();
            buffer.encodeBit ((csi_RS_IM_ReceptionForFeedback != null), "optbit");
            buffer.encodeBit ((csi_RS_ProcFrameworkForSRS != null), "optbit");
            buffer.encodeBit ((csi_ReportFramework != null), "optbit");
            buffer.encodeBit ((mux_SR_HARQ_ACK_CSI_PUCCH_OncePerSlot != null), "optbit");
            buffer.encodeBit ((mux_SR_HARQ_ACK_PUCCH != null), "optbit");
            buffer.encodeBit ((mux_MultipleGroupCtrlCH_Overlap != null), "optbit");
            buffer.encodeBit ((dl_SchedulingOffset_PDSCH_TypeA != null), "optbit");
            buffer.encodeBit ((dl_SchedulingOffset_PDSCH_TypeB != null), "optbit");
            buffer.encodeBit ((ul_SchedulingOffset != null), "optbit");
            buffer.encodeBit ((dl_64QAM_MCS_TableAlt != null), "optbit");
            buffer.encodeBit ((ul_64QAM_MCS_TableAlt != null), "optbit");
            buffer.encodeBit ((cqi_TableAlt != null), "optbit");
            buffer.encodeBit ((oneFL_DMRS_TwoAdditionalDMRS_UL != null), "optbit");
            buffer.encodeBit ((twoFL_DMRS_TwoAdditionalDMRS_UL != null), "optbit");
            buffer.encodeBit ((oneFL_DMRS_ThreeAdditionalDMRS_UL != null), "optbit");
            if (csi_RS_IM_ReceptionForFeedback != null) {
               csi_RS_IM_ReceptionForFeedback.encode (buffer);
            }
            if (csi_RS_ProcFrameworkForSRS != null) {
               csi_RS_ProcFrameworkForSRS.encode (buffer);
            }
            if (csi_ReportFramework != null) {
               csi_ReportFramework.encode (buffer);
            }
            if (mux_SR_HARQ_ACK_CSI_PUCCH_OncePerSlot != null) {
               mux_SR_HARQ_ACK_CSI_PUCCH_OncePerSlot.encode (buffer);
            }
            if (mux_SR_HARQ_ACK_PUCCH != null) {
               mux_SR_HARQ_ACK_PUCCH.encode (buffer);
            }
            if (mux_MultipleGroupCtrlCH_Overlap != null) {
               mux_MultipleGroupCtrlCH_Overlap.encode (buffer);
            }
            if (dl_SchedulingOffset_PDSCH_TypeA != null) {
               dl_SchedulingOffset_PDSCH_TypeA.encode (buffer);
            }
            if (dl_SchedulingOffset_PDSCH_TypeB != null) {
               dl_SchedulingOffset_PDSCH_TypeB.encode (buffer);
            }
            if (ul_SchedulingOffset != null) {
               ul_SchedulingOffset.encode (buffer);
            }
            if (dl_64QAM_MCS_TableAlt != null) {
               dl_64QAM_MCS_TableAlt.encode (buffer);
            }
            if (ul_64QAM_MCS_TableAlt != null) {
               ul_64QAM_MCS_TableAlt.encode (buffer);
            }
            if (cqi_TableAlt != null) {
               cqi_TableAlt.encode (buffer);
            }
            if (oneFL_DMRS_TwoAdditionalDMRS_UL != null) {
               oneFL_DMRS_TwoAdditionalDMRS_UL.encode (buffer);
            }
            if (twoFL_DMRS_TwoAdditionalDMRS_UL != null) {
               twoFL_DMRS_TwoAdditionalDMRS_UL.encode (buffer);
            }
            if (oneFL_DMRS_ThreeAdditionalDMRS_UL != null) {
               oneFL_DMRS_ThreeAdditionalDMRS_UL.encode (buffer);
            }
            mainBuffer.encodeOpenType (buffer, null);
         }

         if (mV3ExtPresent) {
            buffer.reset();
            buffer.encodeBit ((pdcch_BlindDetectionNRDC != null), "optbit");
            buffer.encodeBit ((mux_HARQ_ACK_PUSCH_DiffSymbol != null), "optbit");
            if (pdcch_BlindDetectionNRDC != null) {
               pdcch_BlindDetectionNRDC.encode (buffer);
            }
            if (mux_HARQ_ACK_PUSCH_DiffSymbol != null) {
               mux_HARQ_ACK_PUSCH_DiffSymbol.encode (buffer);
            }
            mainBuffer.encodeOpenType (buffer, null);
         }

         if (mV4ExtPresent) {
            buffer.reset();
            buffer.encodeBit ((type1_HARQ_ACK_Codebook_r16 != null), "optbit");
            buffer.encodeBit ((enhancedPowerControl_r16 != null), "optbit");
            buffer.encodeBit ((simultaneousTCI_ActMultipleCC_r16 != null), "optbit");
            buffer.encodeBit ((simultaneousSpatialRelationMultipleCC_r16 != null), "optbit");
            buffer.encodeBit ((cli_RSSI_FDM_DL_r16 != null), "optbit");
            buffer.encodeBit ((cli_SRS_RSRP_FDM_DL_r16 != null), "optbit");
            buffer.encodeBit ((maxLayersMIMO_Adaptation_r16 != null), "optbit");
            buffer.encodeBit ((aggregationFactorSPS_DL_r16 != null), "optbit");
            buffer.encodeBit ((maxTotalResourcesForOneFreqRange_r16 != null), "optbit");
            buffer.encodeBit ((csi_ReportFrameworkExt_r16 != null), "optbit");
            if (type1_HARQ_ACK_Codebook_r16 != null) {
               type1_HARQ_ACK_Codebook_r16.encode (buffer);
            }
            if (enhancedPowerControl_r16 != null) {
               enhancedPowerControl_r16.encode (buffer);
            }
            if (simultaneousTCI_ActMultipleCC_r16 != null) {
               simultaneousTCI_ActMultipleCC_r16.encode (buffer);
            }
            if (simultaneousSpatialRelationMultipleCC_r16 != null) {
               simultaneousSpatialRelationMultipleCC_r16.encode (buffer);
            }
            if (cli_RSSI_FDM_DL_r16 != null) {
               cli_RSSI_FDM_DL_r16.encode (buffer);
            }
            if (cli_SRS_RSRP_FDM_DL_r16 != null) {
               cli_SRS_RSRP_FDM_DL_r16.encode (buffer);
            }
            if (maxLayersMIMO_Adaptation_r16 != null) {
               maxLayersMIMO_Adaptation_r16.encode (buffer);
            }
            if (aggregationFactorSPS_DL_r16 != null) {
               aggregationFactorSPS_DL_r16.encode (buffer);
            }
            if (maxTotalResourcesForOneFreqRange_r16 != null) {
               maxTotalResourcesForOneFreqRange_r16.encode (buffer);
            }
            if (csi_ReportFrameworkExt_r16 != null) {
               csi_ReportFrameworkExt_r16.encode (buffer);
            }
            mainBuffer.encodeOpenType (buffer, null);
         }

         if (mV5ExtPresent) {
            buffer.reset();
            buffer.encodeBit ((twoTCI_Act_servingCellInCC_List_r16 != null), "optbit");
            if (twoTCI_Act_servingCellInCC_List_r16 != null) {
               twoTCI_Act_servingCellInCC_List_r16.encode (buffer);
            }
            mainBuffer.encodeOpenType (buffer, null);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (dynamicSFI != null) dynamicSFI.print (_sb, "dynamicSFI", _level+1);
      if (dummy1 != null) dummy1.print (_sb, "dummy1", _level+1);
      if (twoFL_DMRS != null) twoFL_DMRS.print (_sb, "twoFL_DMRS", _level+1);
      if (dummy2 != null) dummy2.print (_sb, "dummy2", _level+1);
      if (dummy3 != null) dummy3.print (_sb, "dummy3", _level+1);
      if (supportedDMRS_TypeDL != null) supportedDMRS_TypeDL.print (_sb, "supportedDMRS_TypeDL", _level+1);
      if (supportedDMRS_TypeUL != null) supportedDMRS_TypeUL.print (_sb, "supportedDMRS_TypeUL", _level+1);
      if (semiOpenLoopCSI != null) semiOpenLoopCSI.print (_sb, "semiOpenLoopCSI", _level+1);
      if (csi_ReportWithoutPMI != null) csi_ReportWithoutPMI.print (_sb, "csi_ReportWithoutPMI", _level+1);
      if (csi_ReportWithoutCQI != null) csi_ReportWithoutCQI.print (_sb, "csi_ReportWithoutCQI", _level+1);
      if (onePortsPTRS != null) onePortsPTRS.print (_sb, "onePortsPTRS", _level+1);
      if (twoPUCCH_F0_2_ConsecSymbols != null) twoPUCCH_F0_2_ConsecSymbols.print (_sb, "twoPUCCH_F0_2_ConsecSymbols", _level+1);
      if (pucch_F2_WithFH != null) pucch_F2_WithFH.print (_sb, "pucch_F2_WithFH", _level+1);
      if (pucch_F3_WithFH != null) pucch_F3_WithFH.print (_sb, "pucch_F3_WithFH", _level+1);
      if (pucch_F4_WithFH != null) pucch_F4_WithFH.print (_sb, "pucch_F4_WithFH", _level+1);
      if (pucch_F0_2WithoutFH != null) pucch_F0_2WithoutFH.print (_sb, "pucch_F0_2WithoutFH", _level+1);
      if (pucch_F1_3_4WithoutFH != null) pucch_F1_3_4WithoutFH.print (_sb, "pucch_F1_3_4WithoutFH", _level+1);
      if (mux_SR_HARQ_ACK_CSI_PUCCH_MultiPerSlot != null) mux_SR_HARQ_ACK_CSI_PUCCH_MultiPerSlot.print (_sb, "mux_SR_HARQ_ACK_CSI_PUCCH_MultiPerSlot", _level+1);
      if (uci_CodeBlockSegmentation != null) uci_CodeBlockSegmentation.print (_sb, "uci_CodeBlockSegmentation", _level+1);
      if (onePUCCH_LongAndShortFormat != null) onePUCCH_LongAndShortFormat.print (_sb, "onePUCCH_LongAndShortFormat", _level+1);
      if (twoPUCCH_AnyOthersInSlot != null) twoPUCCH_AnyOthersInSlot.print (_sb, "twoPUCCH_AnyOthersInSlot", _level+1);
      if (intraSlotFreqHopping_PUSCH != null) intraSlotFreqHopping_PUSCH.print (_sb, "intraSlotFreqHopping_PUSCH", _level+1);
      if (pusch_LBRM != null) pusch_LBRM.print (_sb, "pusch_LBRM", _level+1);
      if (pdcch_BlindDetectionCA != null) pdcch_BlindDetectionCA.print (_sb, "pdcch_BlindDetectionCA", _level+1);
      if (tpc_PUSCH_RNTI != null) tpc_PUSCH_RNTI.print (_sb, "tpc_PUSCH_RNTI", _level+1);
      if (tpc_PUCCH_RNTI != null) tpc_PUCCH_RNTI.print (_sb, "tpc_PUCCH_RNTI", _level+1);
      if (tpc_SRS_RNTI != null) tpc_SRS_RNTI.print (_sb, "tpc_SRS_RNTI", _level+1);
      if (absoluteTPC_Command != null) absoluteTPC_Command.print (_sb, "absoluteTPC_Command", _level+1);
      if (twoDifferentTPC_Loop_PUSCH != null) twoDifferentTPC_Loop_PUSCH.print (_sb, "twoDifferentTPC_Loop_PUSCH", _level+1);
      if (twoDifferentTPC_Loop_PUCCH != null) twoDifferentTPC_Loop_PUCCH.print (_sb, "twoDifferentTPC_Loop_PUCCH", _level+1);
      if (pusch_HalfPi_BPSK != null) pusch_HalfPi_BPSK.print (_sb, "pusch_HalfPi_BPSK", _level+1);
      if (pucch_F3_4_HalfPi_BPSK != null) pucch_F3_4_HalfPi_BPSK.print (_sb, "pucch_F3_4_HalfPi_BPSK", _level+1);
      if (almostContiguousCP_OFDM_UL != null) almostContiguousCP_OFDM_UL.print (_sb, "almostContiguousCP_OFDM_UL", _level+1);
      if (sp_CSI_RS != null) sp_CSI_RS.print (_sb, "sp_CSI_RS", _level+1);
      if (sp_CSI_IM != null) sp_CSI_IM.print (_sb, "sp_CSI_IM", _level+1);
      if (tdd_MultiDL_UL_SwitchPerSlot != null) tdd_MultiDL_UL_SwitchPerSlot.print (_sb, "tdd_MultiDL_UL_SwitchPerSlot", _level+1);
      if (multipleCORESET != null) multipleCORESET.print (_sb, "multipleCORESET", _level+1);
      if (csi_RS_IM_ReceptionForFeedback != null) csi_RS_IM_ReceptionForFeedback.print (_sb, "csi_RS_IM_ReceptionForFeedback", _level+1);
      if (csi_RS_ProcFrameworkForSRS != null) csi_RS_ProcFrameworkForSRS.print (_sb, "csi_RS_ProcFrameworkForSRS", _level+1);
      if (csi_ReportFramework != null) csi_ReportFramework.print (_sb, "csi_ReportFramework", _level+1);
      if (mux_SR_HARQ_ACK_CSI_PUCCH_OncePerSlot != null) mux_SR_HARQ_ACK_CSI_PUCCH_OncePerSlot.print (_sb, "mux_SR_HARQ_ACK_CSI_PUCCH_OncePerSlot", _level+1);
      if (mux_SR_HARQ_ACK_PUCCH != null) mux_SR_HARQ_ACK_PUCCH.print (_sb, "mux_SR_HARQ_ACK_PUCCH", _level+1);
      if (mux_MultipleGroupCtrlCH_Overlap != null) mux_MultipleGroupCtrlCH_Overlap.print (_sb, "mux_MultipleGroupCtrlCH_Overlap", _level+1);
      if (dl_SchedulingOffset_PDSCH_TypeA != null) dl_SchedulingOffset_PDSCH_TypeA.print (_sb, "dl_SchedulingOffset_PDSCH_TypeA", _level+1);
      if (dl_SchedulingOffset_PDSCH_TypeB != null) dl_SchedulingOffset_PDSCH_TypeB.print (_sb, "dl_SchedulingOffset_PDSCH_TypeB", _level+1);
      if (ul_SchedulingOffset != null) ul_SchedulingOffset.print (_sb, "ul_SchedulingOffset", _level+1);
      if (dl_64QAM_MCS_TableAlt != null) dl_64QAM_MCS_TableAlt.print (_sb, "dl_64QAM_MCS_TableAlt", _level+1);
      if (ul_64QAM_MCS_TableAlt != null) ul_64QAM_MCS_TableAlt.print (_sb, "ul_64QAM_MCS_TableAlt", _level+1);
      if (cqi_TableAlt != null) cqi_TableAlt.print (_sb, "cqi_TableAlt", _level+1);
      if (oneFL_DMRS_TwoAdditionalDMRS_UL != null) oneFL_DMRS_TwoAdditionalDMRS_UL.print (_sb, "oneFL_DMRS_TwoAdditionalDMRS_UL", _level+1);
      if (twoFL_DMRS_TwoAdditionalDMRS_UL != null) twoFL_DMRS_TwoAdditionalDMRS_UL.print (_sb, "twoFL_DMRS_TwoAdditionalDMRS_UL", _level+1);
      if (oneFL_DMRS_ThreeAdditionalDMRS_UL != null) oneFL_DMRS_ThreeAdditionalDMRS_UL.print (_sb, "oneFL_DMRS_ThreeAdditionalDMRS_UL", _level+1);
      if (pdcch_BlindDetectionNRDC != null) pdcch_BlindDetectionNRDC.print (_sb, "pdcch_BlindDetectionNRDC", _level+1);
      if (mux_HARQ_ACK_PUSCH_DiffSymbol != null) mux_HARQ_ACK_PUSCH_DiffSymbol.print (_sb, "mux_HARQ_ACK_PUSCH_DiffSymbol", _level+1);
      if (type1_HARQ_ACK_Codebook_r16 != null) type1_HARQ_ACK_Codebook_r16.print (_sb, "type1_HARQ_ACK_Codebook_r16", _level+1);
      if (enhancedPowerControl_r16 != null) enhancedPowerControl_r16.print (_sb, "enhancedPowerControl_r16", _level+1);
      if (simultaneousTCI_ActMultipleCC_r16 != null) simultaneousTCI_ActMultipleCC_r16.print (_sb, "simultaneousTCI_ActMultipleCC_r16", _level+1);
      if (simultaneousSpatialRelationMultipleCC_r16 != null) simultaneousSpatialRelationMultipleCC_r16.print (_sb, "simultaneousSpatialRelationMultipleCC_r16", _level+1);
      if (cli_RSSI_FDM_DL_r16 != null) cli_RSSI_FDM_DL_r16.print (_sb, "cli_RSSI_FDM_DL_r16", _level+1);
      if (cli_SRS_RSRP_FDM_DL_r16 != null) cli_SRS_RSRP_FDM_DL_r16.print (_sb, "cli_SRS_RSRP_FDM_DL_r16", _level+1);
      if (maxLayersMIMO_Adaptation_r16 != null) maxLayersMIMO_Adaptation_r16.print (_sb, "maxLayersMIMO_Adaptation_r16", _level+1);
      if (aggregationFactorSPS_DL_r16 != null) aggregationFactorSPS_DL_r16.print (_sb, "aggregationFactorSPS_DL_r16", _level+1);
      if (maxTotalResourcesForOneFreqRange_r16 != null) maxTotalResourcesForOneFreqRange_r16.print (_sb, "maxTotalResourcesForOneFreqRange_r16", _level+1);
      if (csi_ReportFrameworkExt_r16 != null) csi_ReportFrameworkExt_r16.print (_sb, "csi_ReportFrameworkExt_r16", _level+1);
      if (twoTCI_Act_servingCellInCC_List_r16 != null) twoTCI_Act_servingCellInCC_List_r16.print (_sb, "twoTCI_Act_servingCellInCC_List_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
