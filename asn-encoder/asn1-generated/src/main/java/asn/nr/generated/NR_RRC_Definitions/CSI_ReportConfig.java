/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class CSI_ReportConfig extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CSI-ReportConfig";
   }

   public CSI_ReportConfigId reportConfigId;
   public ServCellIndex carrier;  // optional
   public CSI_ResourceConfigId resourcesForChannelMeasurement;
   public CSI_ResourceConfigId csi_IM_ResourcesForInterference;  // optional
   public CSI_ResourceConfigId nzp_CSI_RS_ResourcesForInterference;  // optional
   public CSI_ReportConfig_reportConfigType reportConfigType;
   public CSI_ReportConfig_reportQuantity reportQuantity;
   public CSI_ReportConfig_reportFreqConfiguration reportFreqConfiguration;  // optional
   public CSI_ReportConfig_timeRestrictionForChannelMeasurements timeRestrictionForChannelMeasurements = null;
   public CSI_ReportConfig_timeRestrictionForInterferenceMeasurements timeRestrictionForInterferenceMeasurements = null;
   public CodebookConfig codebookConfig;  // optional
   public CSI_ReportConfig_dummy dummy = null;  // optional
   public CSI_ReportConfig_groupBasedBeamReporting groupBasedBeamReporting;
   public CSI_ReportConfig_cqi_Table cqi_Table = null;  // optional
   public CSI_ReportConfig_subbandSize subbandSize = null;
   public CSI_ReportConfig_non_PMI_PortIndication non_PMI_PortIndication;  // optional
   public boolean mV2ExtPresent;
   public CSI_ReportConfig_semiPersistentOnPUSCH_v1530 semiPersistentOnPUSCH_v1530;  // optional
   public boolean mV3ExtPresent;
   public CSI_ReportConfig_semiPersistentOnPUSCH_v1610 semiPersistentOnPUSCH_v1610;  // optional
   public CSI_ReportConfig_aperiodic_v1610 aperiodic_v1610;  // optional
   public CSI_ReportConfig_reportQuantity_r16 reportQuantity_r16;  // optional
   public CodebookConfig_r16 codebookConfig_r16;  // optional
   public Asn1OpenExt extElem1;

   public CSI_ReportConfig () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CSI_ReportConfig (
      CSI_ReportConfigId reportConfigId_,
      ServCellIndex carrier_,
      CSI_ResourceConfigId resourcesForChannelMeasurement_,
      CSI_ResourceConfigId csi_IM_ResourcesForInterference_,
      CSI_ResourceConfigId nzp_CSI_RS_ResourcesForInterference_,
      CSI_ReportConfig_reportConfigType reportConfigType_,
      CSI_ReportConfig_reportQuantity reportQuantity_,
      CSI_ReportConfig_reportFreqConfiguration reportFreqConfiguration_,
      CSI_ReportConfig_timeRestrictionForChannelMeasurements timeRestrictionForChannelMeasurements_,
      CSI_ReportConfig_timeRestrictionForInterferenceMeasurements timeRestrictionForInterferenceMeasurements_,
      CodebookConfig codebookConfig_,
      CSI_ReportConfig_dummy dummy_,
      CSI_ReportConfig_groupBasedBeamReporting groupBasedBeamReporting_,
      CSI_ReportConfig_cqi_Table cqi_Table_,
      CSI_ReportConfig_subbandSize subbandSize_,
      CSI_ReportConfig_non_PMI_PortIndication non_PMI_PortIndication_,
      CSI_ReportConfig_semiPersistentOnPUSCH_v1530 semiPersistentOnPUSCH_v1530_,
      CSI_ReportConfig_semiPersistentOnPUSCH_v1610 semiPersistentOnPUSCH_v1610_,
      CSI_ReportConfig_aperiodic_v1610 aperiodic_v1610_,
      CSI_ReportConfig_reportQuantity_r16 reportQuantity_r16_,
      CodebookConfig_r16 codebookConfig_r16_
   ) {
      super();
      reportConfigId = reportConfigId_;
      carrier = carrier_;
      resourcesForChannelMeasurement = resourcesForChannelMeasurement_;
      csi_IM_ResourcesForInterference = csi_IM_ResourcesForInterference_;
      nzp_CSI_RS_ResourcesForInterference = nzp_CSI_RS_ResourcesForInterference_;
      reportConfigType = reportConfigType_;
      reportQuantity = reportQuantity_;
      reportFreqConfiguration = reportFreqConfiguration_;
      timeRestrictionForChannelMeasurements = timeRestrictionForChannelMeasurements_;
      timeRestrictionForInterferenceMeasurements = timeRestrictionForInterferenceMeasurements_;
      codebookConfig = codebookConfig_;
      dummy = dummy_;
      groupBasedBeamReporting = groupBasedBeamReporting_;
      cqi_Table = cqi_Table_;
      subbandSize = subbandSize_;
      non_PMI_PortIndication = non_PMI_PortIndication_;
      semiPersistentOnPUSCH_v1530 = semiPersistentOnPUSCH_v1530_;
      semiPersistentOnPUSCH_v1610 = semiPersistentOnPUSCH_v1610_;
      aperiodic_v1610 = aperiodic_v1610_;
      reportQuantity_r16 = reportQuantity_r16_;
      codebookConfig_r16 = codebookConfig_r16_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public CSI_ReportConfig (
      CSI_ReportConfigId reportConfigId_,
      CSI_ResourceConfigId resourcesForChannelMeasurement_,
      CSI_ReportConfig_reportConfigType reportConfigType_,
      CSI_ReportConfig_reportQuantity reportQuantity_,
      CSI_ReportConfig_timeRestrictionForChannelMeasurements timeRestrictionForChannelMeasurements_,
      CSI_ReportConfig_timeRestrictionForInterferenceMeasurements timeRestrictionForInterferenceMeasurements_,
      CSI_ReportConfig_groupBasedBeamReporting groupBasedBeamReporting_,
      CSI_ReportConfig_subbandSize subbandSize_
   ) {
      super();
      reportConfigId = reportConfigId_;
      resourcesForChannelMeasurement = resourcesForChannelMeasurement_;
      reportConfigType = reportConfigType_;
      reportQuantity = reportQuantity_;
      timeRestrictionForChannelMeasurements = timeRestrictionForChannelMeasurements_;
      timeRestrictionForInterferenceMeasurements = timeRestrictionForInterferenceMeasurements_;
      groupBasedBeamReporting = groupBasedBeamReporting_;
      subbandSize = subbandSize_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public CSI_ReportConfig (long reportConfigId_,
      long carrier_,
      long resourcesForChannelMeasurement_,
      long csi_IM_ResourcesForInterference_,
      long nzp_CSI_RS_ResourcesForInterference_,
      CSI_ReportConfig_reportConfigType reportConfigType_,
      CSI_ReportConfig_reportQuantity reportQuantity_,
      CSI_ReportConfig_reportFreqConfiguration reportFreqConfiguration_,
      CSI_ReportConfig_timeRestrictionForChannelMeasurements timeRestrictionForChannelMeasurements_,
      CSI_ReportConfig_timeRestrictionForInterferenceMeasurements timeRestrictionForInterferenceMeasurements_,
      CodebookConfig codebookConfig_,
      CSI_ReportConfig_dummy dummy_,
      CSI_ReportConfig_groupBasedBeamReporting groupBasedBeamReporting_,
      CSI_ReportConfig_cqi_Table cqi_Table_,
      CSI_ReportConfig_subbandSize subbandSize_,
      CSI_ReportConfig_non_PMI_PortIndication non_PMI_PortIndication_,
      CSI_ReportConfig_semiPersistentOnPUSCH_v1530 semiPersistentOnPUSCH_v1530_,
      CSI_ReportConfig_semiPersistentOnPUSCH_v1610 semiPersistentOnPUSCH_v1610_,
      CSI_ReportConfig_aperiodic_v1610 aperiodic_v1610_,
      CSI_ReportConfig_reportQuantity_r16 reportQuantity_r16_,
      CodebookConfig_r16 codebookConfig_r16_
   ) {
      super();
      reportConfigId = new CSI_ReportConfigId (reportConfigId_);
      carrier = new ServCellIndex (carrier_);
      resourcesForChannelMeasurement = new CSI_ResourceConfigId (resourcesForChannelMeasurement_);
      csi_IM_ResourcesForInterference = new CSI_ResourceConfigId (csi_IM_ResourcesForInterference_);
      nzp_CSI_RS_ResourcesForInterference = new CSI_ResourceConfigId (nzp_CSI_RS_ResourcesForInterference_);
      reportConfigType = reportConfigType_;
      reportQuantity = reportQuantity_;
      reportFreqConfiguration = reportFreqConfiguration_;
      timeRestrictionForChannelMeasurements = timeRestrictionForChannelMeasurements_;
      timeRestrictionForInterferenceMeasurements = timeRestrictionForInterferenceMeasurements_;
      codebookConfig = codebookConfig_;
      dummy = dummy_;
      groupBasedBeamReporting = groupBasedBeamReporting_;
      cqi_Table = cqi_Table_;
      subbandSize = subbandSize_;
      non_PMI_PortIndication = non_PMI_PortIndication_;
      semiPersistentOnPUSCH_v1530 = semiPersistentOnPUSCH_v1530_;
      semiPersistentOnPUSCH_v1610 = semiPersistentOnPUSCH_v1610_;
      aperiodic_v1610 = aperiodic_v1610_;
      reportQuantity_r16 = reportQuantity_r16_;
      codebookConfig_r16 = codebookConfig_r16_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public CSI_ReportConfig (
      long reportConfigId_,
      long resourcesForChannelMeasurement_,
      CSI_ReportConfig_reportConfigType reportConfigType_,
      CSI_ReportConfig_reportQuantity reportQuantity_,
      CSI_ReportConfig_timeRestrictionForChannelMeasurements timeRestrictionForChannelMeasurements_,
      CSI_ReportConfig_timeRestrictionForInterferenceMeasurements timeRestrictionForInterferenceMeasurements_,
      CSI_ReportConfig_groupBasedBeamReporting groupBasedBeamReporting_,
      CSI_ReportConfig_subbandSize subbandSize_
   ) {
      super();
      reportConfigId = new CSI_ReportConfigId (reportConfigId_);
      resourcesForChannelMeasurement = new CSI_ResourceConfigId (resourcesForChannelMeasurement_);
      reportConfigType = reportConfigType_;
      reportQuantity = reportQuantity_;
      timeRestrictionForChannelMeasurements = timeRestrictionForChannelMeasurements_;
      timeRestrictionForInterferenceMeasurements = timeRestrictionForInterferenceMeasurements_;
      groupBasedBeamReporting = groupBasedBeamReporting_;
      subbandSize = subbandSize_;
   }

   public void init () {
      reportConfigId = null;
      carrier = null;
      resourcesForChannelMeasurement = null;
      csi_IM_ResourcesForInterference = null;
      nzp_CSI_RS_ResourcesForInterference = null;
      reportConfigType = null;
      reportQuantity = null;
      reportFreqConfiguration = null;
      timeRestrictionForChannelMeasurements = null;
      timeRestrictionForInterferenceMeasurements = null;
      codebookConfig = null;
      dummy = null;
      groupBasedBeamReporting = null;
      cqi_Table = null;
      subbandSize = null;
      non_PMI_PortIndication = null;
      semiPersistentOnPUSCH_v1530 = null;
      semiPersistentOnPUSCH_v1610 = null;
      aperiodic_v1610 = null;
      reportQuantity_r16 = null;
      codebookConfig_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 22; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return reportConfigId;
         case 1: return carrier;
         case 2: return resourcesForChannelMeasurement;
         case 3: return csi_IM_ResourcesForInterference;
         case 4: return nzp_CSI_RS_ResourcesForInterference;
         case 5: return reportConfigType;
         case 6: return reportQuantity;
         case 7: return reportFreqConfiguration;
         case 8: return timeRestrictionForChannelMeasurements;
         case 9: return timeRestrictionForInterferenceMeasurements;
         case 10: return codebookConfig;
         case 11: return dummy;
         case 12: return groupBasedBeamReporting;
         case 13: return cqi_Table;
         case 14: return subbandSize;
         case 15: return non_PMI_PortIndication;
         case 16: return semiPersistentOnPUSCH_v1530;
         case 17: return semiPersistentOnPUSCH_v1610;
         case 18: return aperiodic_v1610;
         case 19: return reportQuantity_r16;
         case 20: return codebookConfig_r16;
         case 21: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "reportConfigId";
         case 1: return "carrier";
         case 2: return "resourcesForChannelMeasurement";
         case 3: return "csi-IM-ResourcesForInterference";
         case 4: return "nzp-CSI-RS-ResourcesForInterference";
         case 5: return "reportConfigType";
         case 6: return "reportQuantity";
         case 7: return "reportFreqConfiguration";
         case 8: return "timeRestrictionForChannelMeasurements";
         case 9: return "timeRestrictionForInterferenceMeasurements";
         case 10: return "codebookConfig";
         case 11: return "dummy";
         case 12: return "groupBasedBeamReporting";
         case 13: return "cqi-Table";
         case 14: return "subbandSize";
         case 15: return "non-PMI-PortIndication";
         case 16: return "semiPersistentOnPUSCH-v1530";
         case 17: return "semiPersistentOnPUSCH-v1610";
         case 18: return "aperiodic-v1610";
         case 19: return "reportQuantity-r16";
         case 20: return "codebookConfig-r16";
         case 21: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean carrierPresent = buffer.decodeBit ("carrierPresent");
      boolean csi_IM_ResourcesForInterferencePresent = buffer.decodeBit ("csi_IM_ResourcesForInterferencePresent");
      boolean nzp_CSI_RS_ResourcesForInterferencePresent = buffer.decodeBit ("nzp_CSI_RS_ResourcesForInterferencePresent");
      boolean reportFreqConfigurationPresent = buffer.decodeBit ("reportFreqConfigurationPresent");
      boolean codebookConfigPresent = buffer.decodeBit ("codebookConfigPresent");
      boolean dummyPresent = buffer.decodeBit ("dummyPresent");
      boolean cqi_TablePresent = buffer.decodeBit ("cqi_TablePresent");
      boolean non_PMI_PortIndicationPresent = buffer.decodeBit ("non_PMI_PortIndicationPresent");

      // decode reportConfigId

      buffer.getContext().eventDispatcher.startElement("reportConfigId", -1);

      reportConfigId = new CSI_ReportConfigId();
      reportConfigId.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("reportConfigId", -1);

      // decode carrier

      if (carrierPresent) {
         buffer.getContext().eventDispatcher.startElement("carrier", -1);

         carrier = new ServCellIndex();
         carrier.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("carrier", -1);
      }
      else {
         carrier = null;
      }

      // decode resourcesForChannelMeasurement

      buffer.getContext().eventDispatcher.startElement("resourcesForChannelMeasurement", -1);

      resourcesForChannelMeasurement = new CSI_ResourceConfigId();
      resourcesForChannelMeasurement.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("resourcesForChannelMeasurement", -1);

      // decode csi_IM_ResourcesForInterference

      if (csi_IM_ResourcesForInterferencePresent) {
         buffer.getContext().eventDispatcher.startElement("csi_IM_ResourcesForInterference", -1);

         csi_IM_ResourcesForInterference = new CSI_ResourceConfigId();
         csi_IM_ResourcesForInterference.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("csi_IM_ResourcesForInterference", -1);
      }
      else {
         csi_IM_ResourcesForInterference = null;
      }

      // decode nzp_CSI_RS_ResourcesForInterference

      if (nzp_CSI_RS_ResourcesForInterferencePresent) {
         buffer.getContext().eventDispatcher.startElement("nzp_CSI_RS_ResourcesForInterference", -1);

         nzp_CSI_RS_ResourcesForInterference = new CSI_ResourceConfigId();
         nzp_CSI_RS_ResourcesForInterference.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nzp_CSI_RS_ResourcesForInterference", -1);
      }
      else {
         nzp_CSI_RS_ResourcesForInterference = null;
      }

      // decode reportConfigType

      buffer.getContext().eventDispatcher.startElement("reportConfigType", -1);

      reportConfigType = new CSI_ReportConfig_reportConfigType();
      reportConfigType.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("reportConfigType", -1);

      // decode reportQuantity

      buffer.getContext().eventDispatcher.startElement("reportQuantity", -1);

      reportQuantity = new CSI_ReportConfig_reportQuantity();
      reportQuantity.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("reportQuantity", -1);

      // decode reportFreqConfiguration

      if (reportFreqConfigurationPresent) {
         buffer.getContext().eventDispatcher.startElement("reportFreqConfiguration", -1);

         reportFreqConfiguration = new CSI_ReportConfig_reportFreqConfiguration();
         reportFreqConfiguration.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("reportFreqConfiguration", -1);
      }
      else {
         reportFreqConfiguration = null;
      }

      // decode timeRestrictionForChannelMeasurements

      buffer.getContext().eventDispatcher.startElement("timeRestrictionForChannelMeasurements", -1);

      {
         int tval = CSI_ReportConfig_timeRestrictionForChannelMeasurements.decodeEnumValue (buffer);
         timeRestrictionForChannelMeasurements = CSI_ReportConfig_timeRestrictionForChannelMeasurements.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("timeRestrictionForChannelMeasurements", -1);

      // decode timeRestrictionForInterferenceMeasurements

      buffer.getContext().eventDispatcher.startElement("timeRestrictionForInterferenceMeasurements", -1);

      {
         int tval = CSI_ReportConfig_timeRestrictionForInterferenceMeasurements.decodeEnumValue (buffer);
         timeRestrictionForInterferenceMeasurements = CSI_ReportConfig_timeRestrictionForInterferenceMeasurements.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("timeRestrictionForInterferenceMeasurements", -1);

      // decode codebookConfig

      if (codebookConfigPresent) {
         buffer.getContext().eventDispatcher.startElement("codebookConfig", -1);

         codebookConfig = new CodebookConfig();
         codebookConfig.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("codebookConfig", -1);
      }
      else {
         codebookConfig = null;
      }

      // decode dummy

      if (dummyPresent) {
         buffer.getContext().eventDispatcher.startElement("dummy", -1);

         int tval = CSI_ReportConfig_dummy.decodeEnumValue (buffer);
         dummy = CSI_ReportConfig_dummy.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("dummy", -1);
      }
      else {
         dummy = null;
      }

      // decode groupBasedBeamReporting

      buffer.getContext().eventDispatcher.startElement("groupBasedBeamReporting", -1);

      groupBasedBeamReporting = new CSI_ReportConfig_groupBasedBeamReporting();
      groupBasedBeamReporting.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("groupBasedBeamReporting", -1);

      // decode cqi_Table

      if (cqi_TablePresent) {
         buffer.getContext().eventDispatcher.startElement("cqi_Table", -1);

         int tval = CSI_ReportConfig_cqi_Table.decodeEnumValue (buffer);
         cqi_Table = CSI_ReportConfig_cqi_Table.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("cqi_Table", -1);
      }
      else {
         cqi_Table = null;
      }

      // decode subbandSize

      buffer.getContext().eventDispatcher.startElement("subbandSize", -1);

      {
         int tval = CSI_ReportConfig_subbandSize.decodeEnumValue (buffer);
         subbandSize = CSI_ReportConfig_subbandSize.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("subbandSize", -1);

      // decode non_PMI_PortIndication

      if (non_PMI_PortIndicationPresent) {
         buffer.getContext().eventDispatcher.startElement("non_PMI_PortIndication", -1);

         non_PMI_PortIndication = new CSI_ReportConfig_non_PMI_PortIndication();
         non_PMI_PortIndication.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("non_PMI_PortIndication", -1);
      }
      else {
         non_PMI_PortIndication = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean semiPersistentOnPUSCH_v1530Present = buffer.decodeBit ("semiPersistentOnPUSCH_v1530Present");

            // decode semiPersistentOnPUSCH_v1530

            if (semiPersistentOnPUSCH_v1530Present) {
               buffer.getContext().eventDispatcher.startElement("semiPersistentOnPUSCH_v1530", -1);

               semiPersistentOnPUSCH_v1530 = new CSI_ReportConfig_semiPersistentOnPUSCH_v1530();
               semiPersistentOnPUSCH_v1530.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("semiPersistentOnPUSCH_v1530", -1);
            }
            else {
               semiPersistentOnPUSCH_v1530 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean semiPersistentOnPUSCH_v1610Present = buffer.decodeBit ("semiPersistentOnPUSCH_v1610Present");

            boolean aperiodic_v1610Present = buffer.decodeBit ("aperiodic_v1610Present");

            boolean reportQuantity_r16Present = buffer.decodeBit ("reportQuantity_r16Present");

            boolean codebookConfig_r16Present = buffer.decodeBit ("codebookConfig_r16Present");

            // decode semiPersistentOnPUSCH_v1610

            if (semiPersistentOnPUSCH_v1610Present) {
               buffer.getContext().eventDispatcher.startElement("semiPersistentOnPUSCH_v1610", -1);

               semiPersistentOnPUSCH_v1610 = new CSI_ReportConfig_semiPersistentOnPUSCH_v1610();
               semiPersistentOnPUSCH_v1610.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("semiPersistentOnPUSCH_v1610", -1);
            }
            else {
               semiPersistentOnPUSCH_v1610 = null;
            }

            // decode aperiodic_v1610

            if (aperiodic_v1610Present) {
               buffer.getContext().eventDispatcher.startElement("aperiodic_v1610", -1);

               aperiodic_v1610 = new CSI_ReportConfig_aperiodic_v1610();
               aperiodic_v1610.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("aperiodic_v1610", -1);
            }
            else {
               aperiodic_v1610 = null;
            }

            // decode reportQuantity_r16

            if (reportQuantity_r16Present) {
               buffer.getContext().eventDispatcher.startElement("reportQuantity_r16", -1);

               reportQuantity_r16 = new CSI_ReportConfig_reportQuantity_r16();
               reportQuantity_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("reportQuantity_r16", -1);
            }
            else {
               reportQuantity_r16 = null;
            }

            // decode codebookConfig_r16

            if (codebookConfig_r16Present) {
               buffer.getContext().eventDispatcher.startElement("codebookConfig_r16", -1);

               codebookConfig_r16 = new CodebookConfig_r16();
               codebookConfig_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("codebookConfig_r16", -1);
            }
            else {
               codebookConfig_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (mV2ExtPresent ||
      mV3ExtPresent ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((carrier != null), null);
      buffer.encodeBit ((csi_IM_ResourcesForInterference != null), null);
      buffer.encodeBit ((nzp_CSI_RS_ResourcesForInterference != null), null);
      buffer.encodeBit ((reportFreqConfiguration != null), null);
      buffer.encodeBit ((codebookConfig != null), null);
      buffer.encodeBit ((dummy != null), null);
      buffer.encodeBit ((cqi_Table != null), null);
      buffer.encodeBit ((non_PMI_PortIndication != null), null);

      // encode reportConfigId

      if (reportConfigId != null) {
         buffer.getContext().eventDispatcher.startElement("reportConfigId", -1);

         reportConfigId.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("reportConfigId", -1);
      }
      else throw new Asn1MissingRequiredException ("reportConfigId");

      // encode carrier

      if (carrier != null) {
         buffer.getContext().eventDispatcher.startElement("carrier", -1);

         carrier.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("carrier", -1);
      }

      // encode resourcesForChannelMeasurement

      if (resourcesForChannelMeasurement != null) {
         buffer.getContext().eventDispatcher.startElement("resourcesForChannelMeasurement", -1);

         resourcesForChannelMeasurement.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("resourcesForChannelMeasurement", -1);
      }
      else throw new Asn1MissingRequiredException ("resourcesForChannelMeasurement");

      // encode csi_IM_ResourcesForInterference

      if (csi_IM_ResourcesForInterference != null) {
         buffer.getContext().eventDispatcher.startElement("csi_IM_ResourcesForInterference", -1);

         csi_IM_ResourcesForInterference.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("csi_IM_ResourcesForInterference", -1);
      }

      // encode nzp_CSI_RS_ResourcesForInterference

      if (nzp_CSI_RS_ResourcesForInterference != null) {
         buffer.getContext().eventDispatcher.startElement("nzp_CSI_RS_ResourcesForInterference", -1);

         nzp_CSI_RS_ResourcesForInterference.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("nzp_CSI_RS_ResourcesForInterference", -1);
      }

      // encode reportConfigType

      if (reportConfigType != null) {
         buffer.getContext().eventDispatcher.startElement("reportConfigType", -1);

         reportConfigType.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("reportConfigType", -1);
      }
      else throw new Asn1MissingRequiredException ("reportConfigType");

      // encode reportQuantity

      if (reportQuantity != null) {
         buffer.getContext().eventDispatcher.startElement("reportQuantity", -1);

         reportQuantity.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("reportQuantity", -1);
      }
      else throw new Asn1MissingRequiredException ("reportQuantity");

      // encode reportFreqConfiguration

      if (reportFreqConfiguration != null) {
         buffer.getContext().eventDispatcher.startElement("reportFreqConfiguration", -1);

         reportFreqConfiguration.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("reportFreqConfiguration", -1);
      }

      // encode timeRestrictionForChannelMeasurements

      if (timeRestrictionForChannelMeasurements != null) {
         buffer.getContext().eventDispatcher.startElement("timeRestrictionForChannelMeasurements", -1);

         timeRestrictionForChannelMeasurements.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("timeRestrictionForChannelMeasurements", -1);
      }
      else throw new Asn1MissingRequiredException ("timeRestrictionForChannelMeasurements");

      // encode timeRestrictionForInterferenceMeasurements

      if (timeRestrictionForInterferenceMeasurements != null) {
         buffer.getContext().eventDispatcher.startElement("timeRestrictionForInterferenceMeasurements", -1);

         timeRestrictionForInterferenceMeasurements.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("timeRestrictionForInterferenceMeasurements", -1);
      }
      else throw new Asn1MissingRequiredException ("timeRestrictionForInterferenceMeasurements");

      // encode codebookConfig

      if (codebookConfig != null) {
         buffer.getContext().eventDispatcher.startElement("codebookConfig", -1);

         codebookConfig.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("codebookConfig", -1);
      }

      // encode dummy

      if (dummy != null) {
         buffer.getContext().eventDispatcher.startElement("dummy", -1);

         dummy.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("dummy", -1);
      }

      // encode groupBasedBeamReporting

      if (groupBasedBeamReporting != null) {
         buffer.getContext().eventDispatcher.startElement("groupBasedBeamReporting", -1);

         groupBasedBeamReporting.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("groupBasedBeamReporting", -1);
      }
      else throw new Asn1MissingRequiredException ("groupBasedBeamReporting");

      // encode cqi_Table

      if (cqi_Table != null) {
         buffer.getContext().eventDispatcher.startElement("cqi_Table", -1);

         cqi_Table.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("cqi_Table", -1);
      }

      // encode subbandSize

      if (subbandSize != null) {
         buffer.getContext().eventDispatcher.startElement("subbandSize", -1);

         subbandSize.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("subbandSize", -1);
      }
      else throw new Asn1MissingRequiredException ("subbandSize");

      // encode non_PMI_PortIndication

      if (non_PMI_PortIndication != null) {
         buffer.getContext().eventDispatcher.startElement("non_PMI_PortIndication", -1);

         non_PMI_PortIndication.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("non_PMI_PortIndication", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 2;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit (mV2ExtPresent, null);
         buffer.encodeBit (mV3ExtPresent, null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         if (mV2ExtPresent) {
            buffer.reset();
            buffer.encodeBit ((semiPersistentOnPUSCH_v1530 != null), "optbit");
            if (semiPersistentOnPUSCH_v1530 != null) {
               semiPersistentOnPUSCH_v1530.encode (buffer);
            }
            mainBuffer.encodeOpenType (buffer, null);
         }

         if (mV3ExtPresent) {
            buffer.reset();
            buffer.encodeBit ((semiPersistentOnPUSCH_v1610 != null), "optbit");
            buffer.encodeBit ((aperiodic_v1610 != null), "optbit");
            buffer.encodeBit ((reportQuantity_r16 != null), "optbit");
            buffer.encodeBit ((codebookConfig_r16 != null), "optbit");
            if (semiPersistentOnPUSCH_v1610 != null) {
               semiPersistentOnPUSCH_v1610.encode (buffer);
            }
            if (aperiodic_v1610 != null) {
               aperiodic_v1610.encode (buffer);
            }
            if (reportQuantity_r16 != null) {
               reportQuantity_r16.encode (buffer);
            }
            if (codebookConfig_r16 != null) {
               codebookConfig_r16.encode (buffer);
            }
            mainBuffer.encodeOpenType (buffer, null);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (reportConfigId != null) reportConfigId.print (_sb, "reportConfigId", _level+1);
      if (carrier != null) carrier.print (_sb, "carrier", _level+1);
      if (resourcesForChannelMeasurement != null) resourcesForChannelMeasurement.print (_sb, "resourcesForChannelMeasurement", _level+1);
      if (csi_IM_ResourcesForInterference != null) csi_IM_ResourcesForInterference.print (_sb, "csi_IM_ResourcesForInterference", _level+1);
      if (nzp_CSI_RS_ResourcesForInterference != null) nzp_CSI_RS_ResourcesForInterference.print (_sb, "nzp_CSI_RS_ResourcesForInterference", _level+1);
      if (reportConfigType != null) reportConfigType.print (_sb, "reportConfigType", _level+1);
      if (reportQuantity != null) reportQuantity.print (_sb, "reportQuantity", _level+1);
      if (reportFreqConfiguration != null) reportFreqConfiguration.print (_sb, "reportFreqConfiguration", _level+1);
      if (timeRestrictionForChannelMeasurements != null) timeRestrictionForChannelMeasurements.print (_sb, "timeRestrictionForChannelMeasurements", _level+1);
      if (timeRestrictionForInterferenceMeasurements != null) timeRestrictionForInterferenceMeasurements.print (_sb, "timeRestrictionForInterferenceMeasurements", _level+1);
      if (codebookConfig != null) codebookConfig.print (_sb, "codebookConfig", _level+1);
      if (dummy != null) dummy.print (_sb, "dummy", _level+1);
      if (groupBasedBeamReporting != null) groupBasedBeamReporting.print (_sb, "groupBasedBeamReporting", _level+1);
      if (cqi_Table != null) cqi_Table.print (_sb, "cqi_Table", _level+1);
      if (subbandSize != null) subbandSize.print (_sb, "subbandSize", _level+1);
      if (non_PMI_PortIndication != null) non_PMI_PortIndication.print (_sb, "non_PMI_PortIndication", _level+1);
      if (semiPersistentOnPUSCH_v1530 != null) semiPersistentOnPUSCH_v1530.print (_sb, "semiPersistentOnPUSCH_v1530", _level+1);
      if (semiPersistentOnPUSCH_v1610 != null) semiPersistentOnPUSCH_v1610.print (_sb, "semiPersistentOnPUSCH_v1610", _level+1);
      if (aperiodic_v1610 != null) aperiodic_v1610.print (_sb, "aperiodic_v1610", _level+1);
      if (reportQuantity_r16 != null) reportQuantity_r16.print (_sb, "reportQuantity_r16", _level+1);
      if (codebookConfig_r16 != null) codebookConfig_r16.print (_sb, "codebookConfig_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
