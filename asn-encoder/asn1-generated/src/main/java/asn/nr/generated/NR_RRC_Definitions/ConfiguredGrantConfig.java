/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class ConfiguredGrantConfig extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ConfiguredGrantConfig";
   }

   public ConfiguredGrantConfig_frequencyHopping frequencyHopping = null;  // optional
   public DMRS_UplinkConfig cg_DMRS_Configuration;
   public ConfiguredGrantConfig_mcs_Table mcs_Table = null;  // optional
   public ConfiguredGrantConfig_mcs_TableTransformPrecoder mcs_TableTransformPrecoder = null;  // optional
   public ConfiguredGrantConfig_uci_OnPUSCH uci_OnPUSCH;  // optional
   public ConfiguredGrantConfig_resourceAllocation resourceAllocation = null;
   public ConfiguredGrantConfig_rbg_Size rbg_Size = null;  // optional
   public ConfiguredGrantConfig_powerControlLoopToUse powerControlLoopToUse = null;
   public P0_PUSCH_AlphaSetId p0_PUSCH_Alpha;
   public ConfiguredGrantConfig_transformPrecoder transformPrecoder = null;  // optional
   public Asn1Integer nrofHARQ_Processes;
   public ConfiguredGrantConfig_repK repK = null;
   public ConfiguredGrantConfig_repK_RV repK_RV = null;  // optional
   public ConfiguredGrantConfig_periodicity periodicity = null;
   public Asn1Integer configuredGrantTimer;  // optional
   public ConfiguredGrantConfig_rrc_ConfiguredUplinkGrant rrc_ConfiguredUplinkGrant;  // optional
   public boolean mV2ExtPresent;
   public Asn1Integer cg_RetransmissionTimer_r16;  // optional
   public ConfiguredGrantConfig_cg_minDFI_Delay_r16 cg_minDFI_Delay_r16 = null;  // optional
   public Asn1Integer cg_nrofPUSCH_InSlot_r16;  // optional
   public Asn1Integer cg_nrofSlots_r16;  // optional
   public CG_StartingOffsets_r16 cg_StartingOffsets_r16;  // optional
   public ConfiguredGrantConfig_cg_UCI_Multiplexing_r16 cg_UCI_Multiplexing_r16 = null;  // optional
   public Asn1Integer cg_COT_SharingOffset_r16;  // optional
   public Asn1Integer betaOffsetCG_UCI_r16;  // optional
   public ConfiguredGrantConfig_cg_COT_SharingList_r16 cg_COT_SharingList_r16;  // optional
   public Asn1Integer harq_ProcID_Offset_r16;  // optional
   public Asn1Integer harq_ProcID_Offset2_r16;  // optional
   public ConfiguredGrantConfigIndex_r16 configuredGrantConfigIndex_r16;  // optional
   public ConfiguredGrantConfigIndexMAC_r16 configuredGrantConfigIndexMAC_r16;  // optional
   public Asn1Integer periodicityExt_r16;  // optional
   public ConfiguredGrantConfig_startingFromRV0_r16 startingFromRV0_r16 = null;  // optional
   public ConfiguredGrantConfig_phy_PriorityIndex_r16 phy_PriorityIndex_r16 = null;  // optional
   public ConfiguredGrantConfig_autonomousTx_r16 autonomousTx_r16 = null;  // optional
   public Asn1OpenExt extElem1;

   public ConfiguredGrantConfig () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ConfiguredGrantConfig (
      ConfiguredGrantConfig_frequencyHopping frequencyHopping_,
      DMRS_UplinkConfig cg_DMRS_Configuration_,
      ConfiguredGrantConfig_mcs_Table mcs_Table_,
      ConfiguredGrantConfig_mcs_TableTransformPrecoder mcs_TableTransformPrecoder_,
      ConfiguredGrantConfig_uci_OnPUSCH uci_OnPUSCH_,
      ConfiguredGrantConfig_resourceAllocation resourceAllocation_,
      ConfiguredGrantConfig_rbg_Size rbg_Size_,
      ConfiguredGrantConfig_powerControlLoopToUse powerControlLoopToUse_,
      P0_PUSCH_AlphaSetId p0_PUSCH_Alpha_,
      ConfiguredGrantConfig_transformPrecoder transformPrecoder_,
      Asn1Integer nrofHARQ_Processes_,
      ConfiguredGrantConfig_repK repK_,
      ConfiguredGrantConfig_repK_RV repK_RV_,
      ConfiguredGrantConfig_periodicity periodicity_,
      Asn1Integer configuredGrantTimer_,
      ConfiguredGrantConfig_rrc_ConfiguredUplinkGrant rrc_ConfiguredUplinkGrant_,
      Asn1Integer cg_RetransmissionTimer_r16_,
      ConfiguredGrantConfig_cg_minDFI_Delay_r16 cg_minDFI_Delay_r16_,
      Asn1Integer cg_nrofPUSCH_InSlot_r16_,
      Asn1Integer cg_nrofSlots_r16_,
      CG_StartingOffsets_r16 cg_StartingOffsets_r16_,
      ConfiguredGrantConfig_cg_UCI_Multiplexing_r16 cg_UCI_Multiplexing_r16_,
      Asn1Integer cg_COT_SharingOffset_r16_,
      Asn1Integer betaOffsetCG_UCI_r16_,
      ConfiguredGrantConfig_cg_COT_SharingList_r16 cg_COT_SharingList_r16_,
      Asn1Integer harq_ProcID_Offset_r16_,
      Asn1Integer harq_ProcID_Offset2_r16_,
      ConfiguredGrantConfigIndex_r16 configuredGrantConfigIndex_r16_,
      ConfiguredGrantConfigIndexMAC_r16 configuredGrantConfigIndexMAC_r16_,
      Asn1Integer periodicityExt_r16_,
      ConfiguredGrantConfig_startingFromRV0_r16 startingFromRV0_r16_,
      ConfiguredGrantConfig_phy_PriorityIndex_r16 phy_PriorityIndex_r16_,
      ConfiguredGrantConfig_autonomousTx_r16 autonomousTx_r16_
   ) {
      super();
      frequencyHopping = frequencyHopping_;
      cg_DMRS_Configuration = cg_DMRS_Configuration_;
      mcs_Table = mcs_Table_;
      mcs_TableTransformPrecoder = mcs_TableTransformPrecoder_;
      uci_OnPUSCH = uci_OnPUSCH_;
      resourceAllocation = resourceAllocation_;
      rbg_Size = rbg_Size_;
      powerControlLoopToUse = powerControlLoopToUse_;
      p0_PUSCH_Alpha = p0_PUSCH_Alpha_;
      transformPrecoder = transformPrecoder_;
      nrofHARQ_Processes = nrofHARQ_Processes_;
      repK = repK_;
      repK_RV = repK_RV_;
      periodicity = periodicity_;
      configuredGrantTimer = configuredGrantTimer_;
      rrc_ConfiguredUplinkGrant = rrc_ConfiguredUplinkGrant_;
      cg_RetransmissionTimer_r16 = cg_RetransmissionTimer_r16_;
      cg_minDFI_Delay_r16 = cg_minDFI_Delay_r16_;
      cg_nrofPUSCH_InSlot_r16 = cg_nrofPUSCH_InSlot_r16_;
      cg_nrofSlots_r16 = cg_nrofSlots_r16_;
      cg_StartingOffsets_r16 = cg_StartingOffsets_r16_;
      cg_UCI_Multiplexing_r16 = cg_UCI_Multiplexing_r16_;
      cg_COT_SharingOffset_r16 = cg_COT_SharingOffset_r16_;
      betaOffsetCG_UCI_r16 = betaOffsetCG_UCI_r16_;
      cg_COT_SharingList_r16 = cg_COT_SharingList_r16_;
      harq_ProcID_Offset_r16 = harq_ProcID_Offset_r16_;
      harq_ProcID_Offset2_r16 = harq_ProcID_Offset2_r16_;
      configuredGrantConfigIndex_r16 = configuredGrantConfigIndex_r16_;
      configuredGrantConfigIndexMAC_r16 = configuredGrantConfigIndexMAC_r16_;
      periodicityExt_r16 = periodicityExt_r16_;
      startingFromRV0_r16 = startingFromRV0_r16_;
      phy_PriorityIndex_r16 = phy_PriorityIndex_r16_;
      autonomousTx_r16 = autonomousTx_r16_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public ConfiguredGrantConfig (
      DMRS_UplinkConfig cg_DMRS_Configuration_,
      ConfiguredGrantConfig_resourceAllocation resourceAllocation_,
      ConfiguredGrantConfig_powerControlLoopToUse powerControlLoopToUse_,
      P0_PUSCH_AlphaSetId p0_PUSCH_Alpha_,
      Asn1Integer nrofHARQ_Processes_,
      ConfiguredGrantConfig_repK repK_,
      ConfiguredGrantConfig_periodicity periodicity_
   ) {
      super();
      cg_DMRS_Configuration = cg_DMRS_Configuration_;
      resourceAllocation = resourceAllocation_;
      powerControlLoopToUse = powerControlLoopToUse_;
      p0_PUSCH_Alpha = p0_PUSCH_Alpha_;
      nrofHARQ_Processes = nrofHARQ_Processes_;
      repK = repK_;
      periodicity = periodicity_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public ConfiguredGrantConfig (ConfiguredGrantConfig_frequencyHopping frequencyHopping_,
      DMRS_UplinkConfig cg_DMRS_Configuration_,
      ConfiguredGrantConfig_mcs_Table mcs_Table_,
      ConfiguredGrantConfig_mcs_TableTransformPrecoder mcs_TableTransformPrecoder_,
      ConfiguredGrantConfig_uci_OnPUSCH uci_OnPUSCH_,
      ConfiguredGrantConfig_resourceAllocation resourceAllocation_,
      ConfiguredGrantConfig_rbg_Size rbg_Size_,
      ConfiguredGrantConfig_powerControlLoopToUse powerControlLoopToUse_,
      long p0_PUSCH_Alpha_,
      ConfiguredGrantConfig_transformPrecoder transformPrecoder_,
      long nrofHARQ_Processes_,
      ConfiguredGrantConfig_repK repK_,
      ConfiguredGrantConfig_repK_RV repK_RV_,
      ConfiguredGrantConfig_periodicity periodicity_,
      long configuredGrantTimer_,
      ConfiguredGrantConfig_rrc_ConfiguredUplinkGrant rrc_ConfiguredUplinkGrant_,
      long cg_RetransmissionTimer_r16_,
      ConfiguredGrantConfig_cg_minDFI_Delay_r16 cg_minDFI_Delay_r16_,
      long cg_nrofPUSCH_InSlot_r16_,
      long cg_nrofSlots_r16_,
      CG_StartingOffsets_r16 cg_StartingOffsets_r16_,
      ConfiguredGrantConfig_cg_UCI_Multiplexing_r16 cg_UCI_Multiplexing_r16_,
      long cg_COT_SharingOffset_r16_,
      long betaOffsetCG_UCI_r16_,
      ConfiguredGrantConfig_cg_COT_SharingList_r16 cg_COT_SharingList_r16_,
      long harq_ProcID_Offset_r16_,
      long harq_ProcID_Offset2_r16_,
      long configuredGrantConfigIndex_r16_,
      long configuredGrantConfigIndexMAC_r16_,
      long periodicityExt_r16_,
      ConfiguredGrantConfig_startingFromRV0_r16 startingFromRV0_r16_,
      ConfiguredGrantConfig_phy_PriorityIndex_r16 phy_PriorityIndex_r16_,
      ConfiguredGrantConfig_autonomousTx_r16 autonomousTx_r16_
   ) {
      super();
      frequencyHopping = frequencyHopping_;
      cg_DMRS_Configuration = cg_DMRS_Configuration_;
      mcs_Table = mcs_Table_;
      mcs_TableTransformPrecoder = mcs_TableTransformPrecoder_;
      uci_OnPUSCH = uci_OnPUSCH_;
      resourceAllocation = resourceAllocation_;
      rbg_Size = rbg_Size_;
      powerControlLoopToUse = powerControlLoopToUse_;
      p0_PUSCH_Alpha = new P0_PUSCH_AlphaSetId (p0_PUSCH_Alpha_);
      transformPrecoder = transformPrecoder_;
      nrofHARQ_Processes = new Asn1Integer (nrofHARQ_Processes_);
      repK = repK_;
      repK_RV = repK_RV_;
      periodicity = periodicity_;
      configuredGrantTimer = new Asn1Integer (configuredGrantTimer_);
      rrc_ConfiguredUplinkGrant = rrc_ConfiguredUplinkGrant_;
      cg_RetransmissionTimer_r16 = new Asn1Integer (cg_RetransmissionTimer_r16_);
      cg_minDFI_Delay_r16 = cg_minDFI_Delay_r16_;
      cg_nrofPUSCH_InSlot_r16 = new Asn1Integer (cg_nrofPUSCH_InSlot_r16_);
      cg_nrofSlots_r16 = new Asn1Integer (cg_nrofSlots_r16_);
      cg_StartingOffsets_r16 = cg_StartingOffsets_r16_;
      cg_UCI_Multiplexing_r16 = cg_UCI_Multiplexing_r16_;
      cg_COT_SharingOffset_r16 = new Asn1Integer (cg_COT_SharingOffset_r16_);
      betaOffsetCG_UCI_r16 = new Asn1Integer (betaOffsetCG_UCI_r16_);
      cg_COT_SharingList_r16 = cg_COT_SharingList_r16_;
      harq_ProcID_Offset_r16 = new Asn1Integer (harq_ProcID_Offset_r16_);
      harq_ProcID_Offset2_r16 = new Asn1Integer (harq_ProcID_Offset2_r16_);
      configuredGrantConfigIndex_r16 = new ConfiguredGrantConfigIndex_r16 (configuredGrantConfigIndex_r16_);
      configuredGrantConfigIndexMAC_r16 = new ConfiguredGrantConfigIndexMAC_r16 (configuredGrantConfigIndexMAC_r16_);
      periodicityExt_r16 = new Asn1Integer (periodicityExt_r16_);
      startingFromRV0_r16 = startingFromRV0_r16_;
      phy_PriorityIndex_r16 = phy_PriorityIndex_r16_;
      autonomousTx_r16 = autonomousTx_r16_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public ConfiguredGrantConfig (
      DMRS_UplinkConfig cg_DMRS_Configuration_,
      ConfiguredGrantConfig_resourceAllocation resourceAllocation_,
      ConfiguredGrantConfig_powerControlLoopToUse powerControlLoopToUse_,
      long p0_PUSCH_Alpha_,
      long nrofHARQ_Processes_,
      ConfiguredGrantConfig_repK repK_,
      ConfiguredGrantConfig_periodicity periodicity_
   ) {
      super();
      cg_DMRS_Configuration = cg_DMRS_Configuration_;
      resourceAllocation = resourceAllocation_;
      powerControlLoopToUse = powerControlLoopToUse_;
      p0_PUSCH_Alpha = new P0_PUSCH_AlphaSetId (p0_PUSCH_Alpha_);
      nrofHARQ_Processes = new Asn1Integer (nrofHARQ_Processes_);
      repK = repK_;
      periodicity = periodicity_;
   }

   public void init () {
      frequencyHopping = null;
      cg_DMRS_Configuration = null;
      mcs_Table = null;
      mcs_TableTransformPrecoder = null;
      uci_OnPUSCH = null;
      resourceAllocation = null;
      rbg_Size = null;
      powerControlLoopToUse = null;
      p0_PUSCH_Alpha = null;
      transformPrecoder = null;
      nrofHARQ_Processes = null;
      repK = null;
      repK_RV = null;
      periodicity = null;
      configuredGrantTimer = null;
      rrc_ConfiguredUplinkGrant = null;
      cg_RetransmissionTimer_r16 = null;
      cg_minDFI_Delay_r16 = null;
      cg_nrofPUSCH_InSlot_r16 = null;
      cg_nrofSlots_r16 = null;
      cg_StartingOffsets_r16 = null;
      cg_UCI_Multiplexing_r16 = null;
      cg_COT_SharingOffset_r16 = null;
      betaOffsetCG_UCI_r16 = null;
      cg_COT_SharingList_r16 = null;
      harq_ProcID_Offset_r16 = null;
      harq_ProcID_Offset2_r16 = null;
      configuredGrantConfigIndex_r16 = null;
      configuredGrantConfigIndexMAC_r16 = null;
      periodicityExt_r16 = null;
      startingFromRV0_r16 = null;
      phy_PriorityIndex_r16 = null;
      autonomousTx_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 34; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return frequencyHopping;
         case 1: return cg_DMRS_Configuration;
         case 2: return mcs_Table;
         case 3: return mcs_TableTransformPrecoder;
         case 4: return uci_OnPUSCH;
         case 5: return resourceAllocation;
         case 6: return rbg_Size;
         case 7: return powerControlLoopToUse;
         case 8: return p0_PUSCH_Alpha;
         case 9: return transformPrecoder;
         case 10: return nrofHARQ_Processes;
         case 11: return repK;
         case 12: return repK_RV;
         case 13: return periodicity;
         case 14: return configuredGrantTimer;
         case 15: return rrc_ConfiguredUplinkGrant;
         case 16: return cg_RetransmissionTimer_r16;
         case 17: return cg_minDFI_Delay_r16;
         case 18: return cg_nrofPUSCH_InSlot_r16;
         case 19: return cg_nrofSlots_r16;
         case 20: return cg_StartingOffsets_r16;
         case 21: return cg_UCI_Multiplexing_r16;
         case 22: return cg_COT_SharingOffset_r16;
         case 23: return betaOffsetCG_UCI_r16;
         case 24: return cg_COT_SharingList_r16;
         case 25: return harq_ProcID_Offset_r16;
         case 26: return harq_ProcID_Offset2_r16;
         case 27: return configuredGrantConfigIndex_r16;
         case 28: return configuredGrantConfigIndexMAC_r16;
         case 29: return periodicityExt_r16;
         case 30: return startingFromRV0_r16;
         case 31: return phy_PriorityIndex_r16;
         case 32: return autonomousTx_r16;
         case 33: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "frequencyHopping";
         case 1: return "cg-DMRS-Configuration";
         case 2: return "mcs-Table";
         case 3: return "mcs-TableTransformPrecoder";
         case 4: return "uci-OnPUSCH";
         case 5: return "resourceAllocation";
         case 6: return "rbg-Size";
         case 7: return "powerControlLoopToUse";
         case 8: return "p0-PUSCH-Alpha";
         case 9: return "transformPrecoder";
         case 10: return "nrofHARQ-Processes";
         case 11: return "repK";
         case 12: return "repK-RV";
         case 13: return "periodicity";
         case 14: return "configuredGrantTimer";
         case 15: return "rrc-ConfiguredUplinkGrant";
         case 16: return "cg-RetransmissionTimer-r16";
         case 17: return "cg-minDFI-Delay-r16";
         case 18: return "cg-nrofPUSCH-InSlot-r16";
         case 19: return "cg-nrofSlots-r16";
         case 20: return "cg-StartingOffsets-r16";
         case 21: return "cg-UCI-Multiplexing-r16";
         case 22: return "cg-COT-SharingOffset-r16";
         case 23: return "betaOffsetCG-UCI-r16";
         case 24: return "cg-COT-SharingList-r16";
         case 25: return "harq-ProcID-Offset-r16";
         case 26: return "harq-ProcID-Offset2-r16";
         case 27: return "configuredGrantConfigIndex-r16";
         case 28: return "configuredGrantConfigIndexMAC-r16";
         case 29: return "periodicityExt-r16";
         case 30: return "startingFromRV0-r16";
         case 31: return "phy-PriorityIndex-r16";
         case 32: return "autonomousTx-r16";
         case 33: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean frequencyHoppingPresent = buffer.decodeBit ("frequencyHoppingPresent");
      boolean mcs_TablePresent = buffer.decodeBit ("mcs_TablePresent");
      boolean mcs_TableTransformPrecoderPresent = buffer.decodeBit ("mcs_TableTransformPrecoderPresent");
      boolean uci_OnPUSCHPresent = buffer.decodeBit ("uci_OnPUSCHPresent");
      boolean rbg_SizePresent = buffer.decodeBit ("rbg_SizePresent");
      boolean transformPrecoderPresent = buffer.decodeBit ("transformPrecoderPresent");
      boolean repK_RVPresent = buffer.decodeBit ("repK_RVPresent");
      boolean configuredGrantTimerPresent = buffer.decodeBit ("configuredGrantTimerPresent");
      boolean rrc_ConfiguredUplinkGrantPresent = buffer.decodeBit ("rrc_ConfiguredUplinkGrantPresent");

      // decode frequencyHopping

      if (frequencyHoppingPresent) {
         buffer.getContext().eventDispatcher.startElement("frequencyHopping", -1);

         int tval = ConfiguredGrantConfig_frequencyHopping.decodeEnumValue (buffer);
         frequencyHopping = ConfiguredGrantConfig_frequencyHopping.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("frequencyHopping", -1);
      }
      else {
         frequencyHopping = null;
      }

      // decode cg_DMRS_Configuration

      buffer.getContext().eventDispatcher.startElement("cg_DMRS_Configuration", -1);

      cg_DMRS_Configuration = new DMRS_UplinkConfig();
      cg_DMRS_Configuration.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("cg_DMRS_Configuration", -1);

      // decode mcs_Table

      if (mcs_TablePresent) {
         buffer.getContext().eventDispatcher.startElement("mcs_Table", -1);

         int tval = ConfiguredGrantConfig_mcs_Table.decodeEnumValue (buffer);
         mcs_Table = ConfiguredGrantConfig_mcs_Table.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("mcs_Table", -1);
      }
      else {
         mcs_Table = null;
      }

      // decode mcs_TableTransformPrecoder

      if (mcs_TableTransformPrecoderPresent) {
         buffer.getContext().eventDispatcher.startElement("mcs_TableTransformPrecoder", -1);

         int tval = ConfiguredGrantConfig_mcs_TableTransformPrecoder.decodeEnumValue (buffer);
         mcs_TableTransformPrecoder = ConfiguredGrantConfig_mcs_TableTransformPrecoder.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("mcs_TableTransformPrecoder", -1);
      }
      else {
         mcs_TableTransformPrecoder = null;
      }

      // decode uci_OnPUSCH

      if (uci_OnPUSCHPresent) {
         buffer.getContext().eventDispatcher.startElement("uci_OnPUSCH", -1);

         uci_OnPUSCH = new ConfiguredGrantConfig_uci_OnPUSCH();
         uci_OnPUSCH.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("uci_OnPUSCH", -1);
      }
      else {
         uci_OnPUSCH = null;
      }

      // decode resourceAllocation

      buffer.getContext().eventDispatcher.startElement("resourceAllocation", -1);

      {
         int tval = ConfiguredGrantConfig_resourceAllocation.decodeEnumValue (buffer);
         resourceAllocation = ConfiguredGrantConfig_resourceAllocation.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("resourceAllocation", -1);

      // decode rbg_Size

      if (rbg_SizePresent) {
         buffer.getContext().eventDispatcher.startElement("rbg_Size", -1);

         int tval = ConfiguredGrantConfig_rbg_Size.decodeEnumValue (buffer);
         rbg_Size = ConfiguredGrantConfig_rbg_Size.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("rbg_Size", -1);
      }
      else {
         rbg_Size = null;
      }

      // decode powerControlLoopToUse

      buffer.getContext().eventDispatcher.startElement("powerControlLoopToUse", -1);

      {
         int tval = ConfiguredGrantConfig_powerControlLoopToUse.decodeEnumValue (buffer);
         powerControlLoopToUse = ConfiguredGrantConfig_powerControlLoopToUse.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("powerControlLoopToUse", -1);

      // decode p0_PUSCH_Alpha

      buffer.getContext().eventDispatcher.startElement("p0_PUSCH_Alpha", -1);

      p0_PUSCH_Alpha = new P0_PUSCH_AlphaSetId();
      p0_PUSCH_Alpha.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("p0_PUSCH_Alpha", -1);

      // decode transformPrecoder

      if (transformPrecoderPresent) {
         buffer.getContext().eventDispatcher.startElement("transformPrecoder", -1);

         int tval = ConfiguredGrantConfig_transformPrecoder.decodeEnumValue (buffer);
         transformPrecoder = ConfiguredGrantConfig_transformPrecoder.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("transformPrecoder", -1);
      }
      else {
         transformPrecoder = null;
      }

      // decode nrofHARQ_Processes

      buffer.getContext().eventDispatcher.startElement("nrofHARQ_Processes", -1);

      nrofHARQ_Processes = new Asn1Integer();
      nrofHARQ_Processes.decode (buffer, 1, 16);

      buffer.invokeCharacters(nrofHARQ_Processes.toString());
      buffer.getContext().eventDispatcher.endElement("nrofHARQ_Processes", -1);

      // decode repK

      buffer.getContext().eventDispatcher.startElement("repK", -1);

      {
         int tval = ConfiguredGrantConfig_repK.decodeEnumValue (buffer);
         repK = ConfiguredGrantConfig_repK.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("repK", -1);

      // decode repK_RV

      if (repK_RVPresent) {
         buffer.getContext().eventDispatcher.startElement("repK_RV", -1);

         int tval = ConfiguredGrantConfig_repK_RV.decodeEnumValue (buffer);
         repK_RV = ConfiguredGrantConfig_repK_RV.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("repK_RV", -1);
      }
      else {
         repK_RV = null;
      }

      // decode periodicity

      buffer.getContext().eventDispatcher.startElement("periodicity", -1);

      {
         int tval = ConfiguredGrantConfig_periodicity.decodeEnumValue (buffer);
         periodicity = ConfiguredGrantConfig_periodicity.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("periodicity", -1);

      // decode configuredGrantTimer

      if (configuredGrantTimerPresent) {
         buffer.getContext().eventDispatcher.startElement("configuredGrantTimer", -1);

         configuredGrantTimer = new Asn1Integer();
         configuredGrantTimer.decode (buffer, 1, 64);

         buffer.invokeCharacters(configuredGrantTimer.toString());
         buffer.getContext().eventDispatcher.endElement("configuredGrantTimer", -1);
      }
      else {
         configuredGrantTimer = null;
      }

      // decode rrc_ConfiguredUplinkGrant

      if (rrc_ConfiguredUplinkGrantPresent) {
         buffer.getContext().eventDispatcher.startElement("rrc_ConfiguredUplinkGrant", -1);

         rrc_ConfiguredUplinkGrant = new ConfiguredGrantConfig_rrc_ConfiguredUplinkGrant();
         rrc_ConfiguredUplinkGrant.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("rrc_ConfiguredUplinkGrant", -1);
      }
      else {
         rrc_ConfiguredUplinkGrant = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean cg_RetransmissionTimer_r16Present = buffer.decodeBit ("cg_RetransmissionTimer_r16Present");

            boolean cg_minDFI_Delay_r16Present = buffer.decodeBit ("cg_minDFI_Delay_r16Present");

            boolean cg_nrofPUSCH_InSlot_r16Present = buffer.decodeBit ("cg_nrofPUSCH_InSlot_r16Present");

            boolean cg_nrofSlots_r16Present = buffer.decodeBit ("cg_nrofSlots_r16Present");

            boolean cg_StartingOffsets_r16Present = buffer.decodeBit ("cg_StartingOffsets_r16Present");

            boolean cg_UCI_Multiplexing_r16Present = buffer.decodeBit ("cg_UCI_Multiplexing_r16Present");

            boolean cg_COT_SharingOffset_r16Present = buffer.decodeBit ("cg_COT_SharingOffset_r16Present");

            boolean betaOffsetCG_UCI_r16Present = buffer.decodeBit ("betaOffsetCG_UCI_r16Present");

            boolean cg_COT_SharingList_r16Present = buffer.decodeBit ("cg_COT_SharingList_r16Present");

            boolean harq_ProcID_Offset_r16Present = buffer.decodeBit ("harq_ProcID_Offset_r16Present");

            boolean harq_ProcID_Offset2_r16Present = buffer.decodeBit ("harq_ProcID_Offset2_r16Present");

            boolean configuredGrantConfigIndex_r16Present = buffer.decodeBit ("configuredGrantConfigIndex_r16Present");

            boolean configuredGrantConfigIndexMAC_r16Present = buffer.decodeBit ("configuredGrantConfigIndexMAC_r16Present");

            boolean periodicityExt_r16Present = buffer.decodeBit ("periodicityExt_r16Present");

            boolean startingFromRV0_r16Present = buffer.decodeBit ("startingFromRV0_r16Present");

            boolean phy_PriorityIndex_r16Present = buffer.decodeBit ("phy_PriorityIndex_r16Present");

            boolean autonomousTx_r16Present = buffer.decodeBit ("autonomousTx_r16Present");

            // decode cg_RetransmissionTimer_r16

            if (cg_RetransmissionTimer_r16Present) {
               buffer.getContext().eventDispatcher.startElement("cg_RetransmissionTimer_r16", -1);

               cg_RetransmissionTimer_r16 = new Asn1Integer();
               cg_RetransmissionTimer_r16.decode (buffer, 1, 64);

               buffer.invokeCharacters(cg_RetransmissionTimer_r16.toString());
               buffer.getContext().eventDispatcher.endElement("cg_RetransmissionTimer_r16", -1);
            }
            else {
               cg_RetransmissionTimer_r16 = null;
            }

            // decode cg_minDFI_Delay_r16

            if (cg_minDFI_Delay_r16Present) {
               buffer.getContext().eventDispatcher.startElement("cg_minDFI_Delay_r16", -1);

               int tval = ConfiguredGrantConfig_cg_minDFI_Delay_r16.decodeEnumValue (buffer);
               cg_minDFI_Delay_r16 = ConfiguredGrantConfig_cg_minDFI_Delay_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("cg_minDFI_Delay_r16", -1);
            }
            else {
               cg_minDFI_Delay_r16 = null;
            }

            // decode cg_nrofPUSCH_InSlot_r16

            if (cg_nrofPUSCH_InSlot_r16Present) {
               buffer.getContext().eventDispatcher.startElement("cg_nrofPUSCH_InSlot_r16", -1);

               cg_nrofPUSCH_InSlot_r16 = new Asn1Integer();
               cg_nrofPUSCH_InSlot_r16.decode (buffer, 1, 7);

               buffer.invokeCharacters(cg_nrofPUSCH_InSlot_r16.toString());
               buffer.getContext().eventDispatcher.endElement("cg_nrofPUSCH_InSlot_r16", -1);
            }
            else {
               cg_nrofPUSCH_InSlot_r16 = null;
            }

            // decode cg_nrofSlots_r16

            if (cg_nrofSlots_r16Present) {
               buffer.getContext().eventDispatcher.startElement("cg_nrofSlots_r16", -1);

               cg_nrofSlots_r16 = new Asn1Integer();
               cg_nrofSlots_r16.decode (buffer, 1, 40);

               buffer.invokeCharacters(cg_nrofSlots_r16.toString());
               buffer.getContext().eventDispatcher.endElement("cg_nrofSlots_r16", -1);
            }
            else {
               cg_nrofSlots_r16 = null;
            }

            // decode cg_StartingOffsets_r16

            if (cg_StartingOffsets_r16Present) {
               buffer.getContext().eventDispatcher.startElement("cg_StartingOffsets_r16", -1);

               cg_StartingOffsets_r16 = new CG_StartingOffsets_r16();
               cg_StartingOffsets_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("cg_StartingOffsets_r16", -1);
            }
            else {
               cg_StartingOffsets_r16 = null;
            }

            // decode cg_UCI_Multiplexing_r16

            if (cg_UCI_Multiplexing_r16Present) {
               buffer.getContext().eventDispatcher.startElement("cg_UCI_Multiplexing_r16", -1);

               int tval = ConfiguredGrantConfig_cg_UCI_Multiplexing_r16.decodeEnumValue (buffer);
               cg_UCI_Multiplexing_r16 = ConfiguredGrantConfig_cg_UCI_Multiplexing_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("cg_UCI_Multiplexing_r16", -1);
            }
            else {
               cg_UCI_Multiplexing_r16 = null;
            }

            // decode cg_COT_SharingOffset_r16

            if (cg_COT_SharingOffset_r16Present) {
               buffer.getContext().eventDispatcher.startElement("cg_COT_SharingOffset_r16", -1);

               cg_COT_SharingOffset_r16 = new Asn1Integer();
               cg_COT_SharingOffset_r16.decode (buffer, 1, 39);

               buffer.invokeCharacters(cg_COT_SharingOffset_r16.toString());
               buffer.getContext().eventDispatcher.endElement("cg_COT_SharingOffset_r16", -1);
            }
            else {
               cg_COT_SharingOffset_r16 = null;
            }

            // decode betaOffsetCG_UCI_r16

            if (betaOffsetCG_UCI_r16Present) {
               buffer.getContext().eventDispatcher.startElement("betaOffsetCG_UCI_r16", -1);

               betaOffsetCG_UCI_r16 = new Asn1Integer();
               betaOffsetCG_UCI_r16.decode (buffer, 0, 31);

               buffer.invokeCharacters(betaOffsetCG_UCI_r16.toString());
               buffer.getContext().eventDispatcher.endElement("betaOffsetCG_UCI_r16", -1);
            }
            else {
               betaOffsetCG_UCI_r16 = null;
            }

            // decode cg_COT_SharingList_r16

            if (cg_COT_SharingList_r16Present) {
               buffer.getContext().eventDispatcher.startElement("cg_COT_SharingList_r16", -1);

               cg_COT_SharingList_r16 = new ConfiguredGrantConfig_cg_COT_SharingList_r16();
               cg_COT_SharingList_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("cg_COT_SharingList_r16", -1);
            }
            else {
               cg_COT_SharingList_r16 = null;
            }

            // decode harq_ProcID_Offset_r16

            if (harq_ProcID_Offset_r16Present) {
               buffer.getContext().eventDispatcher.startElement("harq_ProcID_Offset_r16", -1);

               harq_ProcID_Offset_r16 = new Asn1Integer();
               harq_ProcID_Offset_r16.decode (buffer, 0, 15);

               buffer.invokeCharacters(harq_ProcID_Offset_r16.toString());
               buffer.getContext().eventDispatcher.endElement("harq_ProcID_Offset_r16", -1);
            }
            else {
               harq_ProcID_Offset_r16 = null;
            }

            // decode harq_ProcID_Offset2_r16

            if (harq_ProcID_Offset2_r16Present) {
               buffer.getContext().eventDispatcher.startElement("harq_ProcID_Offset2_r16", -1);

               harq_ProcID_Offset2_r16 = new Asn1Integer();
               harq_ProcID_Offset2_r16.decode (buffer, 0, 15);

               buffer.invokeCharacters(harq_ProcID_Offset2_r16.toString());
               buffer.getContext().eventDispatcher.endElement("harq_ProcID_Offset2_r16", -1);
            }
            else {
               harq_ProcID_Offset2_r16 = null;
            }

            // decode configuredGrantConfigIndex_r16

            if (configuredGrantConfigIndex_r16Present) {
               buffer.getContext().eventDispatcher.startElement("configuredGrantConfigIndex_r16", -1);

               configuredGrantConfigIndex_r16 = new ConfiguredGrantConfigIndex_r16();
               configuredGrantConfigIndex_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("configuredGrantConfigIndex_r16", -1);
            }
            else {
               configuredGrantConfigIndex_r16 = null;
            }

            // decode configuredGrantConfigIndexMAC_r16

            if (configuredGrantConfigIndexMAC_r16Present) {
               buffer.getContext().eventDispatcher.startElement("configuredGrantConfigIndexMAC_r16", -1);

               configuredGrantConfigIndexMAC_r16 = new ConfiguredGrantConfigIndexMAC_r16();
               configuredGrantConfigIndexMAC_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("configuredGrantConfigIndexMAC_r16", -1);
            }
            else {
               configuredGrantConfigIndexMAC_r16 = null;
            }

            // decode periodicityExt_r16

            if (periodicityExt_r16Present) {
               buffer.getContext().eventDispatcher.startElement("periodicityExt_r16", -1);

               periodicityExt_r16 = new Asn1Integer();
               periodicityExt_r16.decode (buffer, 1, 5120);

               buffer.invokeCharacters(periodicityExt_r16.toString());
               buffer.getContext().eventDispatcher.endElement("periodicityExt_r16", -1);
            }
            else {
               periodicityExt_r16 = null;
            }

            // decode startingFromRV0_r16

            if (startingFromRV0_r16Present) {
               buffer.getContext().eventDispatcher.startElement("startingFromRV0_r16", -1);

               int tval = ConfiguredGrantConfig_startingFromRV0_r16.decodeEnumValue (buffer);
               startingFromRV0_r16 = ConfiguredGrantConfig_startingFromRV0_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("startingFromRV0_r16", -1);
            }
            else {
               startingFromRV0_r16 = null;
            }

            // decode phy_PriorityIndex_r16

            if (phy_PriorityIndex_r16Present) {
               buffer.getContext().eventDispatcher.startElement("phy_PriorityIndex_r16", -1);

               int tval = ConfiguredGrantConfig_phy_PriorityIndex_r16.decodeEnumValue (buffer);
               phy_PriorityIndex_r16 = ConfiguredGrantConfig_phy_PriorityIndex_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("phy_PriorityIndex_r16", -1);
            }
            else {
               phy_PriorityIndex_r16 = null;
            }

            // decode autonomousTx_r16

            if (autonomousTx_r16Present) {
               buffer.getContext().eventDispatcher.startElement("autonomousTx_r16", -1);

               int tval = ConfiguredGrantConfig_autonomousTx_r16.decodeEnumValue (buffer);
               autonomousTx_r16 = ConfiguredGrantConfig_autonomousTx_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("autonomousTx_r16", -1);
            }
            else {
               autonomousTx_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (mV2ExtPresent ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((frequencyHopping != null), null);
      buffer.encodeBit ((mcs_Table != null), null);
      buffer.encodeBit ((mcs_TableTransformPrecoder != null), null);
      buffer.encodeBit ((uci_OnPUSCH != null), null);
      buffer.encodeBit ((rbg_Size != null), null);
      buffer.encodeBit ((transformPrecoder != null), null);
      buffer.encodeBit ((repK_RV != null), null);
      buffer.encodeBit ((configuredGrantTimer != null), null);
      buffer.encodeBit ((rrc_ConfiguredUplinkGrant != null), null);

      // encode frequencyHopping

      if (frequencyHopping != null) {
         buffer.getContext().eventDispatcher.startElement("frequencyHopping", -1);

         frequencyHopping.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("frequencyHopping", -1);
      }

      // encode cg_DMRS_Configuration

      if (cg_DMRS_Configuration != null) {
         buffer.getContext().eventDispatcher.startElement("cg_DMRS_Configuration", -1);

         cg_DMRS_Configuration.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("cg_DMRS_Configuration", -1);
      }
      else throw new Asn1MissingRequiredException ("cg_DMRS_Configuration");

      // encode mcs_Table

      if (mcs_Table != null) {
         buffer.getContext().eventDispatcher.startElement("mcs_Table", -1);

         mcs_Table.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("mcs_Table", -1);
      }

      // encode mcs_TableTransformPrecoder

      if (mcs_TableTransformPrecoder != null) {
         buffer.getContext().eventDispatcher.startElement("mcs_TableTransformPrecoder", -1);

         mcs_TableTransformPrecoder.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("mcs_TableTransformPrecoder", -1);
      }

      // encode uci_OnPUSCH

      if (uci_OnPUSCH != null) {
         buffer.getContext().eventDispatcher.startElement("uci_OnPUSCH", -1);

         uci_OnPUSCH.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("uci_OnPUSCH", -1);
      }

      // encode resourceAllocation

      if (resourceAllocation != null) {
         buffer.getContext().eventDispatcher.startElement("resourceAllocation", -1);

         resourceAllocation.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("resourceAllocation", -1);
      }
      else throw new Asn1MissingRequiredException ("resourceAllocation");

      // encode rbg_Size

      if (rbg_Size != null) {
         buffer.getContext().eventDispatcher.startElement("rbg_Size", -1);

         rbg_Size.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("rbg_Size", -1);
      }

      // encode powerControlLoopToUse

      if (powerControlLoopToUse != null) {
         buffer.getContext().eventDispatcher.startElement("powerControlLoopToUse", -1);

         powerControlLoopToUse.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("powerControlLoopToUse", -1);
      }
      else throw new Asn1MissingRequiredException ("powerControlLoopToUse");

      // encode p0_PUSCH_Alpha

      if (p0_PUSCH_Alpha != null) {
         buffer.getContext().eventDispatcher.startElement("p0_PUSCH_Alpha", -1);

         p0_PUSCH_Alpha.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("p0_PUSCH_Alpha", -1);
      }
      else throw new Asn1MissingRequiredException ("p0_PUSCH_Alpha");

      // encode transformPrecoder

      if (transformPrecoder != null) {
         buffer.getContext().eventDispatcher.startElement("transformPrecoder", -1);

         transformPrecoder.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("transformPrecoder", -1);
      }

      // encode nrofHARQ_Processes

      if (nrofHARQ_Processes != null) {
         buffer.getContext().eventDispatcher.startElement("nrofHARQ_Processes", -1);

         nrofHARQ_Processes.encode (buffer, 1, 16);

         buffer.getContext().eventDispatcher.endElement("nrofHARQ_Processes", -1);
      }
      else throw new Asn1MissingRequiredException ("nrofHARQ_Processes");

      // encode repK

      if (repK != null) {
         buffer.getContext().eventDispatcher.startElement("repK", -1);

         repK.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("repK", -1);
      }
      else throw new Asn1MissingRequiredException ("repK");

      // encode repK_RV

      if (repK_RV != null) {
         buffer.getContext().eventDispatcher.startElement("repK_RV", -1);

         repK_RV.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("repK_RV", -1);
      }

      // encode periodicity

      if (periodicity != null) {
         buffer.getContext().eventDispatcher.startElement("periodicity", -1);

         periodicity.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("periodicity", -1);
      }
      else throw new Asn1MissingRequiredException ("periodicity");

      // encode configuredGrantTimer

      if (configuredGrantTimer != null) {
         buffer.getContext().eventDispatcher.startElement("configuredGrantTimer", -1);

         configuredGrantTimer.encode (buffer, 1, 64);

         buffer.getContext().eventDispatcher.endElement("configuredGrantTimer", -1);
      }

      // encode rrc_ConfiguredUplinkGrant

      if (rrc_ConfiguredUplinkGrant != null) {
         buffer.getContext().eventDispatcher.startElement("rrc_ConfiguredUplinkGrant", -1);

         rrc_ConfiguredUplinkGrant.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("rrc_ConfiguredUplinkGrant", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 1;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit (mV2ExtPresent, null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         if (mV2ExtPresent) {
            buffer.reset();
            buffer.encodeBit ((cg_RetransmissionTimer_r16 != null), "optbit");
            buffer.encodeBit ((cg_minDFI_Delay_r16 != null), "optbit");
            buffer.encodeBit ((cg_nrofPUSCH_InSlot_r16 != null), "optbit");
            buffer.encodeBit ((cg_nrofSlots_r16 != null), "optbit");
            buffer.encodeBit ((cg_StartingOffsets_r16 != null), "optbit");
            buffer.encodeBit ((cg_UCI_Multiplexing_r16 != null), "optbit");
            buffer.encodeBit ((cg_COT_SharingOffset_r16 != null), "optbit");
            buffer.encodeBit ((betaOffsetCG_UCI_r16 != null), "optbit");
            buffer.encodeBit ((cg_COT_SharingList_r16 != null), "optbit");
            buffer.encodeBit ((harq_ProcID_Offset_r16 != null), "optbit");
            buffer.encodeBit ((harq_ProcID_Offset2_r16 != null), "optbit");
            buffer.encodeBit ((configuredGrantConfigIndex_r16 != null), "optbit");
            buffer.encodeBit ((configuredGrantConfigIndexMAC_r16 != null), "optbit");
            buffer.encodeBit ((periodicityExt_r16 != null), "optbit");
            buffer.encodeBit ((startingFromRV0_r16 != null), "optbit");
            buffer.encodeBit ((phy_PriorityIndex_r16 != null), "optbit");
            buffer.encodeBit ((autonomousTx_r16 != null), "optbit");
            if (cg_RetransmissionTimer_r16 != null) {
               cg_RetransmissionTimer_r16.encode (buffer, 1, 64);
            }
            if (cg_minDFI_Delay_r16 != null) {
               cg_minDFI_Delay_r16.encode (buffer);
            }
            if (cg_nrofPUSCH_InSlot_r16 != null) {
               cg_nrofPUSCH_InSlot_r16.encode (buffer, 1, 7);
            }
            if (cg_nrofSlots_r16 != null) {
               cg_nrofSlots_r16.encode (buffer, 1, 40);
            }
            if (cg_StartingOffsets_r16 != null) {
               cg_StartingOffsets_r16.encode (buffer);
            }
            if (cg_UCI_Multiplexing_r16 != null) {
               cg_UCI_Multiplexing_r16.encode (buffer);
            }
            if (cg_COT_SharingOffset_r16 != null) {
               cg_COT_SharingOffset_r16.encode (buffer, 1, 39);
            }
            if (betaOffsetCG_UCI_r16 != null) {
               betaOffsetCG_UCI_r16.encode (buffer, 0, 31);
            }
            if (cg_COT_SharingList_r16 != null) {
               cg_COT_SharingList_r16.encode (buffer);
            }
            if (harq_ProcID_Offset_r16 != null) {
               harq_ProcID_Offset_r16.encode (buffer, 0, 15);
            }
            if (harq_ProcID_Offset2_r16 != null) {
               harq_ProcID_Offset2_r16.encode (buffer, 0, 15);
            }
            if (configuredGrantConfigIndex_r16 != null) {
               configuredGrantConfigIndex_r16.encode (buffer);
            }
            if (configuredGrantConfigIndexMAC_r16 != null) {
               configuredGrantConfigIndexMAC_r16.encode (buffer);
            }
            if (periodicityExt_r16 != null) {
               periodicityExt_r16.encode (buffer, 1, 5120);
            }
            if (startingFromRV0_r16 != null) {
               startingFromRV0_r16.encode (buffer);
            }
            if (phy_PriorityIndex_r16 != null) {
               phy_PriorityIndex_r16.encode (buffer);
            }
            if (autonomousTx_r16 != null) {
               autonomousTx_r16.encode (buffer);
            }
            mainBuffer.encodeOpenType (buffer, null);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (frequencyHopping != null) frequencyHopping.print (_sb, "frequencyHopping", _level+1);
      if (cg_DMRS_Configuration != null) cg_DMRS_Configuration.print (_sb, "cg_DMRS_Configuration", _level+1);
      if (mcs_Table != null) mcs_Table.print (_sb, "mcs_Table", _level+1);
      if (mcs_TableTransformPrecoder != null) mcs_TableTransformPrecoder.print (_sb, "mcs_TableTransformPrecoder", _level+1);
      if (uci_OnPUSCH != null) uci_OnPUSCH.print (_sb, "uci_OnPUSCH", _level+1);
      if (resourceAllocation != null) resourceAllocation.print (_sb, "resourceAllocation", _level+1);
      if (rbg_Size != null) rbg_Size.print (_sb, "rbg_Size", _level+1);
      if (powerControlLoopToUse != null) powerControlLoopToUse.print (_sb, "powerControlLoopToUse", _level+1);
      if (p0_PUSCH_Alpha != null) p0_PUSCH_Alpha.print (_sb, "p0_PUSCH_Alpha", _level+1);
      if (transformPrecoder != null) transformPrecoder.print (_sb, "transformPrecoder", _level+1);
      if (nrofHARQ_Processes != null) nrofHARQ_Processes.print (_sb, "nrofHARQ_Processes", _level+1);
      if (repK != null) repK.print (_sb, "repK", _level+1);
      if (repK_RV != null) repK_RV.print (_sb, "repK_RV", _level+1);
      if (periodicity != null) periodicity.print (_sb, "periodicity", _level+1);
      if (configuredGrantTimer != null) configuredGrantTimer.print (_sb, "configuredGrantTimer", _level+1);
      if (rrc_ConfiguredUplinkGrant != null) rrc_ConfiguredUplinkGrant.print (_sb, "rrc_ConfiguredUplinkGrant", _level+1);
      if (cg_RetransmissionTimer_r16 != null) cg_RetransmissionTimer_r16.print (_sb, "cg_RetransmissionTimer_r16", _level+1);
      if (cg_minDFI_Delay_r16 != null) cg_minDFI_Delay_r16.print (_sb, "cg_minDFI_Delay_r16", _level+1);
      if (cg_nrofPUSCH_InSlot_r16 != null) cg_nrofPUSCH_InSlot_r16.print (_sb, "cg_nrofPUSCH_InSlot_r16", _level+1);
      if (cg_nrofSlots_r16 != null) cg_nrofSlots_r16.print (_sb, "cg_nrofSlots_r16", _level+1);
      if (cg_StartingOffsets_r16 != null) cg_StartingOffsets_r16.print (_sb, "cg_StartingOffsets_r16", _level+1);
      if (cg_UCI_Multiplexing_r16 != null) cg_UCI_Multiplexing_r16.print (_sb, "cg_UCI_Multiplexing_r16", _level+1);
      if (cg_COT_SharingOffset_r16 != null) cg_COT_SharingOffset_r16.print (_sb, "cg_COT_SharingOffset_r16", _level+1);
      if (betaOffsetCG_UCI_r16 != null) betaOffsetCG_UCI_r16.print (_sb, "betaOffsetCG_UCI_r16", _level+1);
      if (cg_COT_SharingList_r16 != null) cg_COT_SharingList_r16.print (_sb, "cg_COT_SharingList_r16", _level+1);
      if (harq_ProcID_Offset_r16 != null) harq_ProcID_Offset_r16.print (_sb, "harq_ProcID_Offset_r16", _level+1);
      if (harq_ProcID_Offset2_r16 != null) harq_ProcID_Offset2_r16.print (_sb, "harq_ProcID_Offset2_r16", _level+1);
      if (configuredGrantConfigIndex_r16 != null) configuredGrantConfigIndex_r16.print (_sb, "configuredGrantConfigIndex_r16", _level+1);
      if (configuredGrantConfigIndexMAC_r16 != null) configuredGrantConfigIndexMAC_r16.print (_sb, "configuredGrantConfigIndexMAC_r16", _level+1);
      if (periodicityExt_r16 != null) periodicityExt_r16.print (_sb, "periodicityExt_r16", _level+1);
      if (startingFromRV0_r16 != null) startingFromRV0_r16.print (_sb, "startingFromRV0_r16", _level+1);
      if (phy_PriorityIndex_r16 != null) phy_PriorityIndex_r16.print (_sb, "phy_PriorityIndex_r16", _level+1);
      if (autonomousTx_r16 != null) autonomousTx_r16.print (_sb, "autonomousTx_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
