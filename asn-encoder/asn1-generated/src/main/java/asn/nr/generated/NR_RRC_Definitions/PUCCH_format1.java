/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class PUCCH_format1 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "PUCCH-format1";
   }

   public Asn1Integer initialCyclicShift;
   public Asn1Integer nrofSymbols;
   public Asn1Integer startingSymbolIndex;
   public Asn1Integer timeDomainOCC;

   public PUCCH_format1 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public PUCCH_format1 (
      Asn1Integer initialCyclicShift_,
      Asn1Integer nrofSymbols_,
      Asn1Integer startingSymbolIndex_,
      Asn1Integer timeDomainOCC_
   ) {
      super();
      initialCyclicShift = initialCyclicShift_;
      nrofSymbols = nrofSymbols_;
      startingSymbolIndex = startingSymbolIndex_;
      timeDomainOCC = timeDomainOCC_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public PUCCH_format1 (long initialCyclicShift_,
      long nrofSymbols_,
      long startingSymbolIndex_,
      long timeDomainOCC_
   ) {
      super();
      initialCyclicShift = new Asn1Integer (initialCyclicShift_);
      nrofSymbols = new Asn1Integer (nrofSymbols_);
      startingSymbolIndex = new Asn1Integer (startingSymbolIndex_);
      timeDomainOCC = new Asn1Integer (timeDomainOCC_);
   }

   public void init () {
      initialCyclicShift = null;
      nrofSymbols = null;
      startingSymbolIndex = null;
      timeDomainOCC = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return initialCyclicShift;
         case 1: return nrofSymbols;
         case 2: return startingSymbolIndex;
         case 3: return timeDomainOCC;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "initialCyclicShift";
         case 1: return "nrofSymbols";
         case 2: return "startingSymbolIndex";
         case 3: return "timeDomainOCC";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode initialCyclicShift

      buffer.getContext().eventDispatcher.startElement("initialCyclicShift", -1);

      initialCyclicShift = new Asn1Integer();
      initialCyclicShift.decode (buffer, 0, 11);

      buffer.invokeCharacters(initialCyclicShift.toString());
      buffer.getContext().eventDispatcher.endElement("initialCyclicShift", -1);

      // decode nrofSymbols

      buffer.getContext().eventDispatcher.startElement("nrofSymbols", -1);

      nrofSymbols = new Asn1Integer();
      nrofSymbols.decode (buffer, 4, 14);

      buffer.invokeCharacters(nrofSymbols.toString());
      buffer.getContext().eventDispatcher.endElement("nrofSymbols", -1);

      // decode startingSymbolIndex

      buffer.getContext().eventDispatcher.startElement("startingSymbolIndex", -1);

      startingSymbolIndex = new Asn1Integer();
      startingSymbolIndex.decode (buffer, 0, 10);

      buffer.invokeCharacters(startingSymbolIndex.toString());
      buffer.getContext().eventDispatcher.endElement("startingSymbolIndex", -1);

      // decode timeDomainOCC

      buffer.getContext().eventDispatcher.startElement("timeDomainOCC", -1);

      timeDomainOCC = new Asn1Integer();
      timeDomainOCC.decode (buffer, 0, 6);

      buffer.invokeCharacters(timeDomainOCC.toString());
      buffer.getContext().eventDispatcher.endElement("timeDomainOCC", -1);

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode initialCyclicShift

      if (initialCyclicShift != null) {
         buffer.getContext().eventDispatcher.startElement("initialCyclicShift", -1);

         initialCyclicShift.encode (buffer, 0, 11);

         buffer.getContext().eventDispatcher.endElement("initialCyclicShift", -1);
      }
      else throw new Asn1MissingRequiredException ("initialCyclicShift");

      // encode nrofSymbols

      if (nrofSymbols != null) {
         buffer.getContext().eventDispatcher.startElement("nrofSymbols", -1);

         nrofSymbols.encode (buffer, 4, 14);

         buffer.getContext().eventDispatcher.endElement("nrofSymbols", -1);
      }
      else throw new Asn1MissingRequiredException ("nrofSymbols");

      // encode startingSymbolIndex

      if (startingSymbolIndex != null) {
         buffer.getContext().eventDispatcher.startElement("startingSymbolIndex", -1);

         startingSymbolIndex.encode (buffer, 0, 10);

         buffer.getContext().eventDispatcher.endElement("startingSymbolIndex", -1);
      }
      else throw new Asn1MissingRequiredException ("startingSymbolIndex");

      // encode timeDomainOCC

      if (timeDomainOCC != null) {
         buffer.getContext().eventDispatcher.startElement("timeDomainOCC", -1);

         timeDomainOCC.encode (buffer, 0, 6);

         buffer.getContext().eventDispatcher.endElement("timeDomainOCC", -1);
      }
      else throw new Asn1MissingRequiredException ("timeDomainOCC");

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (initialCyclicShift != null) initialCyclicShift.print (_sb, "initialCyclicShift", _level+1);
      if (nrofSymbols != null) nrofSymbols.print (_sb, "nrofSymbols", _level+1);
      if (startingSymbolIndex != null) startingSymbolIndex.print (_sb, "startingSymbolIndex", _level+1);
      if (timeDomainOCC != null) timeDomainOCC.print (_sb, "timeDomainOCC", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
