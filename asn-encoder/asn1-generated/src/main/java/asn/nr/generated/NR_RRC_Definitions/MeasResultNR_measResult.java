/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MeasResultNR_measResult extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public MeasResultNR_measResult_cellResults cellResults;
   public MeasResultNR_measResult_rsIndexResults rsIndexResults;  // optional

   public MeasResultNR_measResult () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MeasResultNR_measResult (
      MeasResultNR_measResult_cellResults cellResults_,
      MeasResultNR_measResult_rsIndexResults rsIndexResults_
   ) {
      super();
      cellResults = cellResults_;
      rsIndexResults = rsIndexResults_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public MeasResultNR_measResult (
      MeasResultNR_measResult_cellResults cellResults_
   ) {
      super();
      cellResults = cellResults_;
   }

   public void init () {
      cellResults = null;
      rsIndexResults = null;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return cellResults;
         case 1: return rsIndexResults;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "cellResults";
         case 1: return "rsIndexResults";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean rsIndexResultsPresent = buffer.decodeBit ("rsIndexResultsPresent");

      // decode cellResults

      buffer.getContext().eventDispatcher.startElement("cellResults", -1);

      cellResults = new MeasResultNR_measResult_cellResults();
      cellResults.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("cellResults", -1);

      // decode rsIndexResults

      if (rsIndexResultsPresent) {
         buffer.getContext().eventDispatcher.startElement("rsIndexResults", -1);

         rsIndexResults = new MeasResultNR_measResult_rsIndexResults();
         rsIndexResults.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("rsIndexResults", -1);
      }
      else {
         rsIndexResults = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((rsIndexResults != null), null);

      // encode cellResults

      if (cellResults != null) {
         buffer.getContext().eventDispatcher.startElement("cellResults", -1);

         cellResults.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("cellResults", -1);
      }
      else throw new Asn1MissingRequiredException ("cellResults");

      // encode rsIndexResults

      if (rsIndexResults != null) {
         buffer.getContext().eventDispatcher.startElement("rsIndexResults", -1);

         rsIndexResults.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("rsIndexResults", -1);
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (cellResults != null) cellResults.print (_sb, "cellResults", _level+1);
      if (rsIndexResults != null) rsIndexResults.print (_sb, "rsIndexResults", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
