/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class CA_ParametersNR extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CA-ParametersNR";
   }

   public CA_ParametersNR_dummy dummy = null;  // optional
   public CA_ParametersNR_parallelTxSRS_PUCCH_PUSCH parallelTxSRS_PUCCH_PUSCH = null;  // optional
   public CA_ParametersNR_parallelTxPRACH_SRS_PUCCH_PUSCH parallelTxPRACH_SRS_PUCCH_PUSCH = null;  // optional
   public CA_ParametersNR_simultaneousRxTxInterBandCA simultaneousRxTxInterBandCA = null;  // optional
   public CA_ParametersNR_simultaneousRxTxSUL simultaneousRxTxSUL = null;  // optional
   public CA_ParametersNR_diffNumerologyAcrossPUCCH_Group diffNumerologyAcrossPUCCH_Group = null;  // optional
   public CA_ParametersNR_diffNumerologyWithinPUCCH_GroupSmallerSCS diffNumerologyWithinPUCCH_GroupSmallerSCS = null;  // optional
   public CA_ParametersNR_supportedNumberTAG supportedNumberTAG = null;  // optional
   public Asn1OpenExt extElem1;

   public CA_ParametersNR () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CA_ParametersNR (
      CA_ParametersNR_dummy dummy_,
      CA_ParametersNR_parallelTxSRS_PUCCH_PUSCH parallelTxSRS_PUCCH_PUSCH_,
      CA_ParametersNR_parallelTxPRACH_SRS_PUCCH_PUSCH parallelTxPRACH_SRS_PUCCH_PUSCH_,
      CA_ParametersNR_simultaneousRxTxInterBandCA simultaneousRxTxInterBandCA_,
      CA_ParametersNR_simultaneousRxTxSUL simultaneousRxTxSUL_,
      CA_ParametersNR_diffNumerologyAcrossPUCCH_Group diffNumerologyAcrossPUCCH_Group_,
      CA_ParametersNR_diffNumerologyWithinPUCCH_GroupSmallerSCS diffNumerologyWithinPUCCH_GroupSmallerSCS_,
      CA_ParametersNR_supportedNumberTAG supportedNumberTAG_
   ) {
      super();
      dummy = dummy_;
      parallelTxSRS_PUCCH_PUSCH = parallelTxSRS_PUCCH_PUSCH_;
      parallelTxPRACH_SRS_PUCCH_PUSCH = parallelTxPRACH_SRS_PUCCH_PUSCH_;
      simultaneousRxTxInterBandCA = simultaneousRxTxInterBandCA_;
      simultaneousRxTxSUL = simultaneousRxTxSUL_;
      diffNumerologyAcrossPUCCH_Group = diffNumerologyAcrossPUCCH_Group_;
      diffNumerologyWithinPUCCH_GroupSmallerSCS = diffNumerologyWithinPUCCH_GroupSmallerSCS_;
      supportedNumberTAG = supportedNumberTAG_;
   }

   public void init () {
      dummy = null;
      parallelTxSRS_PUCCH_PUSCH = null;
      parallelTxPRACH_SRS_PUCCH_PUSCH = null;
      simultaneousRxTxInterBandCA = null;
      simultaneousRxTxSUL = null;
      diffNumerologyAcrossPUCCH_Group = null;
      diffNumerologyWithinPUCCH_GroupSmallerSCS = null;
      supportedNumberTAG = null;
      extElem1 = null;
   }

   public int getElementCount() { return 9; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return dummy;
         case 1: return parallelTxSRS_PUCCH_PUSCH;
         case 2: return parallelTxPRACH_SRS_PUCCH_PUSCH;
         case 3: return simultaneousRxTxInterBandCA;
         case 4: return simultaneousRxTxSUL;
         case 5: return diffNumerologyAcrossPUCCH_Group;
         case 6: return diffNumerologyWithinPUCCH_GroupSmallerSCS;
         case 7: return supportedNumberTAG;
         case 8: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "dummy";
         case 1: return "parallelTxSRS-PUCCH-PUSCH";
         case 2: return "parallelTxPRACH-SRS-PUCCH-PUSCH";
         case 3: return "simultaneousRxTxInterBandCA";
         case 4: return "simultaneousRxTxSUL";
         case 5: return "diffNumerologyAcrossPUCCH-Group";
         case 6: return "diffNumerologyWithinPUCCH-GroupSmallerSCS";
         case 7: return "supportedNumberTAG";
         case 8: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean dummyPresent = buffer.decodeBit ("dummyPresent");
      boolean parallelTxSRS_PUCCH_PUSCHPresent = buffer.decodeBit ("parallelTxSRS_PUCCH_PUSCHPresent");
      boolean parallelTxPRACH_SRS_PUCCH_PUSCHPresent = buffer.decodeBit ("parallelTxPRACH_SRS_PUCCH_PUSCHPresent");
      boolean simultaneousRxTxInterBandCAPresent = buffer.decodeBit ("simultaneousRxTxInterBandCAPresent");
      boolean simultaneousRxTxSULPresent = buffer.decodeBit ("simultaneousRxTxSULPresent");
      boolean diffNumerologyAcrossPUCCH_GroupPresent = buffer.decodeBit ("diffNumerologyAcrossPUCCH_GroupPresent");
      boolean diffNumerologyWithinPUCCH_GroupSmallerSCSPresent = buffer.decodeBit ("diffNumerologyWithinPUCCH_GroupSmallerSCSPresent");
      boolean supportedNumberTAGPresent = buffer.decodeBit ("supportedNumberTAGPresent");

      // decode dummy

      if (dummyPresent) {
         buffer.getContext().eventDispatcher.startElement("dummy", -1);

         int tval = CA_ParametersNR_dummy.decodeEnumValue (buffer);
         dummy = CA_ParametersNR_dummy.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("dummy", -1);
      }
      else {
         dummy = null;
      }

      // decode parallelTxSRS_PUCCH_PUSCH

      if (parallelTxSRS_PUCCH_PUSCHPresent) {
         buffer.getContext().eventDispatcher.startElement("parallelTxSRS_PUCCH_PUSCH", -1);

         int tval = CA_ParametersNR_parallelTxSRS_PUCCH_PUSCH.decodeEnumValue (buffer);
         parallelTxSRS_PUCCH_PUSCH = CA_ParametersNR_parallelTxSRS_PUCCH_PUSCH.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("parallelTxSRS_PUCCH_PUSCH", -1);
      }
      else {
         parallelTxSRS_PUCCH_PUSCH = null;
      }

      // decode parallelTxPRACH_SRS_PUCCH_PUSCH

      if (parallelTxPRACH_SRS_PUCCH_PUSCHPresent) {
         buffer.getContext().eventDispatcher.startElement("parallelTxPRACH_SRS_PUCCH_PUSCH", -1);

         int tval = CA_ParametersNR_parallelTxPRACH_SRS_PUCCH_PUSCH.decodeEnumValue (buffer);
         parallelTxPRACH_SRS_PUCCH_PUSCH = CA_ParametersNR_parallelTxPRACH_SRS_PUCCH_PUSCH.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("parallelTxPRACH_SRS_PUCCH_PUSCH", -1);
      }
      else {
         parallelTxPRACH_SRS_PUCCH_PUSCH = null;
      }

      // decode simultaneousRxTxInterBandCA

      if (simultaneousRxTxInterBandCAPresent) {
         buffer.getContext().eventDispatcher.startElement("simultaneousRxTxInterBandCA", -1);

         int tval = CA_ParametersNR_simultaneousRxTxInterBandCA.decodeEnumValue (buffer);
         simultaneousRxTxInterBandCA = CA_ParametersNR_simultaneousRxTxInterBandCA.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("simultaneousRxTxInterBandCA", -1);
      }
      else {
         simultaneousRxTxInterBandCA = null;
      }

      // decode simultaneousRxTxSUL

      if (simultaneousRxTxSULPresent) {
         buffer.getContext().eventDispatcher.startElement("simultaneousRxTxSUL", -1);

         int tval = CA_ParametersNR_simultaneousRxTxSUL.decodeEnumValue (buffer);
         simultaneousRxTxSUL = CA_ParametersNR_simultaneousRxTxSUL.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("simultaneousRxTxSUL", -1);
      }
      else {
         simultaneousRxTxSUL = null;
      }

      // decode diffNumerologyAcrossPUCCH_Group

      if (diffNumerologyAcrossPUCCH_GroupPresent) {
         buffer.getContext().eventDispatcher.startElement("diffNumerologyAcrossPUCCH_Group", -1);

         int tval = CA_ParametersNR_diffNumerologyAcrossPUCCH_Group.decodeEnumValue (buffer);
         diffNumerologyAcrossPUCCH_Group = CA_ParametersNR_diffNumerologyAcrossPUCCH_Group.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("diffNumerologyAcrossPUCCH_Group", -1);
      }
      else {
         diffNumerologyAcrossPUCCH_Group = null;
      }

      // decode diffNumerologyWithinPUCCH_GroupSmallerSCS

      if (diffNumerologyWithinPUCCH_GroupSmallerSCSPresent) {
         buffer.getContext().eventDispatcher.startElement("diffNumerologyWithinPUCCH_GroupSmallerSCS", -1);

         int tval = CA_ParametersNR_diffNumerologyWithinPUCCH_GroupSmallerSCS.decodeEnumValue (buffer);
         diffNumerologyWithinPUCCH_GroupSmallerSCS = CA_ParametersNR_diffNumerologyWithinPUCCH_GroupSmallerSCS.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("diffNumerologyWithinPUCCH_GroupSmallerSCS", -1);
      }
      else {
         diffNumerologyWithinPUCCH_GroupSmallerSCS = null;
      }

      // decode supportedNumberTAG

      if (supportedNumberTAGPresent) {
         buffer.getContext().eventDispatcher.startElement("supportedNumberTAG", -1);

         int tval = CA_ParametersNR_supportedNumberTAG.decodeEnumValue (buffer);
         supportedNumberTAG = CA_ParametersNR_supportedNumberTAG.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("supportedNumberTAG", -1);
      }
      else {
         supportedNumberTAG = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((dummy != null), null);
      buffer.encodeBit ((parallelTxSRS_PUCCH_PUSCH != null), null);
      buffer.encodeBit ((parallelTxPRACH_SRS_PUCCH_PUSCH != null), null);
      buffer.encodeBit ((simultaneousRxTxInterBandCA != null), null);
      buffer.encodeBit ((simultaneousRxTxSUL != null), null);
      buffer.encodeBit ((diffNumerologyAcrossPUCCH_Group != null), null);
      buffer.encodeBit ((diffNumerologyWithinPUCCH_GroupSmallerSCS != null), null);
      buffer.encodeBit ((supportedNumberTAG != null), null);

      // encode dummy

      if (dummy != null) {
         buffer.getContext().eventDispatcher.startElement("dummy", -1);

         dummy.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("dummy", -1);
      }

      // encode parallelTxSRS_PUCCH_PUSCH

      if (parallelTxSRS_PUCCH_PUSCH != null) {
         buffer.getContext().eventDispatcher.startElement("parallelTxSRS_PUCCH_PUSCH", -1);

         parallelTxSRS_PUCCH_PUSCH.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("parallelTxSRS_PUCCH_PUSCH", -1);
      }

      // encode parallelTxPRACH_SRS_PUCCH_PUSCH

      if (parallelTxPRACH_SRS_PUCCH_PUSCH != null) {
         buffer.getContext().eventDispatcher.startElement("parallelTxPRACH_SRS_PUCCH_PUSCH", -1);

         parallelTxPRACH_SRS_PUCCH_PUSCH.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("parallelTxPRACH_SRS_PUCCH_PUSCH", -1);
      }

      // encode simultaneousRxTxInterBandCA

      if (simultaneousRxTxInterBandCA != null) {
         buffer.getContext().eventDispatcher.startElement("simultaneousRxTxInterBandCA", -1);

         simultaneousRxTxInterBandCA.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("simultaneousRxTxInterBandCA", -1);
      }

      // encode simultaneousRxTxSUL

      if (simultaneousRxTxSUL != null) {
         buffer.getContext().eventDispatcher.startElement("simultaneousRxTxSUL", -1);

         simultaneousRxTxSUL.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("simultaneousRxTxSUL", -1);
      }

      // encode diffNumerologyAcrossPUCCH_Group

      if (diffNumerologyAcrossPUCCH_Group != null) {
         buffer.getContext().eventDispatcher.startElement("diffNumerologyAcrossPUCCH_Group", -1);

         diffNumerologyAcrossPUCCH_Group.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("diffNumerologyAcrossPUCCH_Group", -1);
      }

      // encode diffNumerologyWithinPUCCH_GroupSmallerSCS

      if (diffNumerologyWithinPUCCH_GroupSmallerSCS != null) {
         buffer.getContext().eventDispatcher.startElement("diffNumerologyWithinPUCCH_GroupSmallerSCS", -1);

         diffNumerologyWithinPUCCH_GroupSmallerSCS.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("diffNumerologyWithinPUCCH_GroupSmallerSCS", -1);
      }

      // encode supportedNumberTAG

      if (supportedNumberTAG != null) {
         buffer.getContext().eventDispatcher.startElement("supportedNumberTAG", -1);

         supportedNumberTAG.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("supportedNumberTAG", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (dummy != null) dummy.print (_sb, "dummy", _level+1);
      if (parallelTxSRS_PUCCH_PUSCH != null) parallelTxSRS_PUCCH_PUSCH.print (_sb, "parallelTxSRS_PUCCH_PUSCH", _level+1);
      if (parallelTxPRACH_SRS_PUCCH_PUSCH != null) parallelTxPRACH_SRS_PUCCH_PUSCH.print (_sb, "parallelTxPRACH_SRS_PUCCH_PUSCH", _level+1);
      if (simultaneousRxTxInterBandCA != null) simultaneousRxTxInterBandCA.print (_sb, "simultaneousRxTxInterBandCA", _level+1);
      if (simultaneousRxTxSUL != null) simultaneousRxTxSUL.print (_sb, "simultaneousRxTxSUL", _level+1);
      if (diffNumerologyAcrossPUCCH_Group != null) diffNumerologyAcrossPUCCH_Group.print (_sb, "diffNumerologyAcrossPUCCH_Group", _level+1);
      if (diffNumerologyWithinPUCCH_GroupSmallerSCS != null) diffNumerologyWithinPUCCH_GroupSmallerSCS.print (_sb, "diffNumerologyWithinPUCCH_GroupSmallerSCS", _level+1);
      if (supportedNumberTAG != null) supportedNumberTAG.print (_sb, "supportedNumberTAG", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
