/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class RACH_ConfigCommonTwoStepRA_r16 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "RACH-ConfigCommonTwoStepRA-r16";
   }

   public RACH_ConfigGenericTwoStepRA_r16 rach_ConfigGenericTwoStepRA_r16;
   public Asn1Integer msgA_TotalNumberOfRA_Preambles_r16;  // optional
   public RACH_ConfigCommonTwoStepRA_r16_msgA_SSB_PerRACH_OccasionAndCB_PreamblesPerSSB_r16 msgA_SSB_PerRACH_OccasionAndCB_PreamblesPerSSB_r16;  // optional
   public Asn1Integer msgA_CB_PreamblesPerSSB_PerSharedRO_r16;  // optional
   public Asn1Integer msgA_SSB_SharedRO_MaskIndex_r16;  // optional
   public GroupB_ConfiguredTwoStepRA_r16 groupB_ConfiguredTwoStepRA_r16;  // optional
   public RACH_ConfigCommonTwoStepRA_r16_msgA_PRACH_RootSequenceIndex_r16 msgA_PRACH_RootSequenceIndex_r16;  // optional
   public RACH_ConfigCommonTwoStepRA_r16_msgA_TransMax_r16 msgA_TransMax_r16 = null;  // optional
   public RSRP_Range msgA_RSRP_Threshold_r16;  // optional
   public RSRP_Range msgA_RSRP_ThresholdSSB_r16;  // optional
   public SubcarrierSpacing msgA_SubcarrierSpacing_r16 = null;  // optional
   public RACH_ConfigCommonTwoStepRA_r16_msgA_RestrictedSetConfig_r16 msgA_RestrictedSetConfig_r16 = null;  // optional
   public RACH_ConfigCommonTwoStepRA_r16_ra_PrioritizationForAccessIdentityTwoStep_r16 ra_PrioritizationForAccessIdentityTwoStep_r16;  // optional
   public RACH_ConfigCommonTwoStepRA_r16_ra_ContentionResolutionTimer_r16 ra_ContentionResolutionTimer_r16 = null;  // optional
   public Asn1OpenExt extElem1;

   public RACH_ConfigCommonTwoStepRA_r16 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public RACH_ConfigCommonTwoStepRA_r16 (
      RACH_ConfigGenericTwoStepRA_r16 rach_ConfigGenericTwoStepRA_r16_,
      Asn1Integer msgA_TotalNumberOfRA_Preambles_r16_,
      RACH_ConfigCommonTwoStepRA_r16_msgA_SSB_PerRACH_OccasionAndCB_PreamblesPerSSB_r16 msgA_SSB_PerRACH_OccasionAndCB_PreamblesPerSSB_r16_,
      Asn1Integer msgA_CB_PreamblesPerSSB_PerSharedRO_r16_,
      Asn1Integer msgA_SSB_SharedRO_MaskIndex_r16_,
      GroupB_ConfiguredTwoStepRA_r16 groupB_ConfiguredTwoStepRA_r16_,
      RACH_ConfigCommonTwoStepRA_r16_msgA_PRACH_RootSequenceIndex_r16 msgA_PRACH_RootSequenceIndex_r16_,
      RACH_ConfigCommonTwoStepRA_r16_msgA_TransMax_r16 msgA_TransMax_r16_,
      RSRP_Range msgA_RSRP_Threshold_r16_,
      RSRP_Range msgA_RSRP_ThresholdSSB_r16_,
      SubcarrierSpacing msgA_SubcarrierSpacing_r16_,
      RACH_ConfigCommonTwoStepRA_r16_msgA_RestrictedSetConfig_r16 msgA_RestrictedSetConfig_r16_,
      RACH_ConfigCommonTwoStepRA_r16_ra_PrioritizationForAccessIdentityTwoStep_r16 ra_PrioritizationForAccessIdentityTwoStep_r16_,
      RACH_ConfigCommonTwoStepRA_r16_ra_ContentionResolutionTimer_r16 ra_ContentionResolutionTimer_r16_
   ) {
      super();
      rach_ConfigGenericTwoStepRA_r16 = rach_ConfigGenericTwoStepRA_r16_;
      msgA_TotalNumberOfRA_Preambles_r16 = msgA_TotalNumberOfRA_Preambles_r16_;
      msgA_SSB_PerRACH_OccasionAndCB_PreamblesPerSSB_r16 = msgA_SSB_PerRACH_OccasionAndCB_PreamblesPerSSB_r16_;
      msgA_CB_PreamblesPerSSB_PerSharedRO_r16 = msgA_CB_PreamblesPerSSB_PerSharedRO_r16_;
      msgA_SSB_SharedRO_MaskIndex_r16 = msgA_SSB_SharedRO_MaskIndex_r16_;
      groupB_ConfiguredTwoStepRA_r16 = groupB_ConfiguredTwoStepRA_r16_;
      msgA_PRACH_RootSequenceIndex_r16 = msgA_PRACH_RootSequenceIndex_r16_;
      msgA_TransMax_r16 = msgA_TransMax_r16_;
      msgA_RSRP_Threshold_r16 = msgA_RSRP_Threshold_r16_;
      msgA_RSRP_ThresholdSSB_r16 = msgA_RSRP_ThresholdSSB_r16_;
      msgA_SubcarrierSpacing_r16 = msgA_SubcarrierSpacing_r16_;
      msgA_RestrictedSetConfig_r16 = msgA_RestrictedSetConfig_r16_;
      ra_PrioritizationForAccessIdentityTwoStep_r16 = ra_PrioritizationForAccessIdentityTwoStep_r16_;
      ra_ContentionResolutionTimer_r16 = ra_ContentionResolutionTimer_r16_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public RACH_ConfigCommonTwoStepRA_r16 (
      RACH_ConfigGenericTwoStepRA_r16 rach_ConfigGenericTwoStepRA_r16_
   ) {
      super();
      rach_ConfigGenericTwoStepRA_r16 = rach_ConfigGenericTwoStepRA_r16_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public RACH_ConfigCommonTwoStepRA_r16 (RACH_ConfigGenericTwoStepRA_r16 rach_ConfigGenericTwoStepRA_r16_,
      long msgA_TotalNumberOfRA_Preambles_r16_,
      RACH_ConfigCommonTwoStepRA_r16_msgA_SSB_PerRACH_OccasionAndCB_PreamblesPerSSB_r16 msgA_SSB_PerRACH_OccasionAndCB_PreamblesPerSSB_r16_,
      long msgA_CB_PreamblesPerSSB_PerSharedRO_r16_,
      long msgA_SSB_SharedRO_MaskIndex_r16_,
      GroupB_ConfiguredTwoStepRA_r16 groupB_ConfiguredTwoStepRA_r16_,
      RACH_ConfigCommonTwoStepRA_r16_msgA_PRACH_RootSequenceIndex_r16 msgA_PRACH_RootSequenceIndex_r16_,
      RACH_ConfigCommonTwoStepRA_r16_msgA_TransMax_r16 msgA_TransMax_r16_,
      long msgA_RSRP_Threshold_r16_,
      long msgA_RSRP_ThresholdSSB_r16_,
      SubcarrierSpacing msgA_SubcarrierSpacing_r16_,
      RACH_ConfigCommonTwoStepRA_r16_msgA_RestrictedSetConfig_r16 msgA_RestrictedSetConfig_r16_,
      RACH_ConfigCommonTwoStepRA_r16_ra_PrioritizationForAccessIdentityTwoStep_r16 ra_PrioritizationForAccessIdentityTwoStep_r16_,
      RACH_ConfigCommonTwoStepRA_r16_ra_ContentionResolutionTimer_r16 ra_ContentionResolutionTimer_r16_
   ) {
      super();
      rach_ConfigGenericTwoStepRA_r16 = rach_ConfigGenericTwoStepRA_r16_;
      msgA_TotalNumberOfRA_Preambles_r16 = new Asn1Integer (msgA_TotalNumberOfRA_Preambles_r16_);
      msgA_SSB_PerRACH_OccasionAndCB_PreamblesPerSSB_r16 = msgA_SSB_PerRACH_OccasionAndCB_PreamblesPerSSB_r16_;
      msgA_CB_PreamblesPerSSB_PerSharedRO_r16 = new Asn1Integer (msgA_CB_PreamblesPerSSB_PerSharedRO_r16_);
      msgA_SSB_SharedRO_MaskIndex_r16 = new Asn1Integer (msgA_SSB_SharedRO_MaskIndex_r16_);
      groupB_ConfiguredTwoStepRA_r16 = groupB_ConfiguredTwoStepRA_r16_;
      msgA_PRACH_RootSequenceIndex_r16 = msgA_PRACH_RootSequenceIndex_r16_;
      msgA_TransMax_r16 = msgA_TransMax_r16_;
      msgA_RSRP_Threshold_r16 = new RSRP_Range (msgA_RSRP_Threshold_r16_);
      msgA_RSRP_ThresholdSSB_r16 = new RSRP_Range (msgA_RSRP_ThresholdSSB_r16_);
      msgA_SubcarrierSpacing_r16 = msgA_SubcarrierSpacing_r16_;
      msgA_RestrictedSetConfig_r16 = msgA_RestrictedSetConfig_r16_;
      ra_PrioritizationForAccessIdentityTwoStep_r16 = ra_PrioritizationForAccessIdentityTwoStep_r16_;
      ra_ContentionResolutionTimer_r16 = ra_ContentionResolutionTimer_r16_;
   }

   public void init () {
      rach_ConfigGenericTwoStepRA_r16 = null;
      msgA_TotalNumberOfRA_Preambles_r16 = null;
      msgA_SSB_PerRACH_OccasionAndCB_PreamblesPerSSB_r16 = null;
      msgA_CB_PreamblesPerSSB_PerSharedRO_r16 = null;
      msgA_SSB_SharedRO_MaskIndex_r16 = null;
      groupB_ConfiguredTwoStepRA_r16 = null;
      msgA_PRACH_RootSequenceIndex_r16 = null;
      msgA_TransMax_r16 = null;
      msgA_RSRP_Threshold_r16 = null;
      msgA_RSRP_ThresholdSSB_r16 = null;
      msgA_SubcarrierSpacing_r16 = null;
      msgA_RestrictedSetConfig_r16 = null;
      ra_PrioritizationForAccessIdentityTwoStep_r16 = null;
      ra_ContentionResolutionTimer_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 15; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return rach_ConfigGenericTwoStepRA_r16;
         case 1: return msgA_TotalNumberOfRA_Preambles_r16;
         case 2: return msgA_SSB_PerRACH_OccasionAndCB_PreamblesPerSSB_r16;
         case 3: return msgA_CB_PreamblesPerSSB_PerSharedRO_r16;
         case 4: return msgA_SSB_SharedRO_MaskIndex_r16;
         case 5: return groupB_ConfiguredTwoStepRA_r16;
         case 6: return msgA_PRACH_RootSequenceIndex_r16;
         case 7: return msgA_TransMax_r16;
         case 8: return msgA_RSRP_Threshold_r16;
         case 9: return msgA_RSRP_ThresholdSSB_r16;
         case 10: return msgA_SubcarrierSpacing_r16;
         case 11: return msgA_RestrictedSetConfig_r16;
         case 12: return ra_PrioritizationForAccessIdentityTwoStep_r16;
         case 13: return ra_ContentionResolutionTimer_r16;
         case 14: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "rach-ConfigGenericTwoStepRA-r16";
         case 1: return "msgA-TotalNumberOfRA-Preambles-r16";
         case 2: return "msgA-SSB-PerRACH-OccasionAndCB-PreamblesPerSSB-r16";
         case 3: return "msgA-CB-PreamblesPerSSB-PerSharedRO-r16";
         case 4: return "msgA-SSB-SharedRO-MaskIndex-r16";
         case 5: return "groupB-ConfiguredTwoStepRA-r16";
         case 6: return "msgA-PRACH-RootSequenceIndex-r16";
         case 7: return "msgA-TransMax-r16";
         case 8: return "msgA-RSRP-Threshold-r16";
         case 9: return "msgA-RSRP-ThresholdSSB-r16";
         case 10: return "msgA-SubcarrierSpacing-r16";
         case 11: return "msgA-RestrictedSetConfig-r16";
         case 12: return "ra-PrioritizationForAccessIdentityTwoStep-r16";
         case 13: return "ra-ContentionResolutionTimer-r16";
         case 14: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean msgA_TotalNumberOfRA_Preambles_r16Present = buffer.decodeBit ("msgA_TotalNumberOfRA_Preambles_r16Present");
      boolean msgA_SSB_PerRACH_OccasionAndCB_PreamblesPerSSB_r16Present = buffer.decodeBit ("msgA_SSB_PerRACH_OccasionAndCB_PreamblesPerSSB_r16Present");
      boolean msgA_CB_PreamblesPerSSB_PerSharedRO_r16Present = buffer.decodeBit ("msgA_CB_PreamblesPerSSB_PerSharedRO_r16Present");
      boolean msgA_SSB_SharedRO_MaskIndex_r16Present = buffer.decodeBit ("msgA_SSB_SharedRO_MaskIndex_r16Present");
      boolean groupB_ConfiguredTwoStepRA_r16Present = buffer.decodeBit ("groupB_ConfiguredTwoStepRA_r16Present");
      boolean msgA_PRACH_RootSequenceIndex_r16Present = buffer.decodeBit ("msgA_PRACH_RootSequenceIndex_r16Present");
      boolean msgA_TransMax_r16Present = buffer.decodeBit ("msgA_TransMax_r16Present");
      boolean msgA_RSRP_Threshold_r16Present = buffer.decodeBit ("msgA_RSRP_Threshold_r16Present");
      boolean msgA_RSRP_ThresholdSSB_r16Present = buffer.decodeBit ("msgA_RSRP_ThresholdSSB_r16Present");
      boolean msgA_SubcarrierSpacing_r16Present = buffer.decodeBit ("msgA_SubcarrierSpacing_r16Present");
      boolean msgA_RestrictedSetConfig_r16Present = buffer.decodeBit ("msgA_RestrictedSetConfig_r16Present");
      boolean ra_PrioritizationForAccessIdentityTwoStep_r16Present = buffer.decodeBit ("ra_PrioritizationForAccessIdentityTwoStep_r16Present");
      boolean ra_ContentionResolutionTimer_r16Present = buffer.decodeBit ("ra_ContentionResolutionTimer_r16Present");

      // decode rach_ConfigGenericTwoStepRA_r16

      buffer.getContext().eventDispatcher.startElement("rach_ConfigGenericTwoStepRA_r16", -1);

      rach_ConfigGenericTwoStepRA_r16 = new RACH_ConfigGenericTwoStepRA_r16();
      rach_ConfigGenericTwoStepRA_r16.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("rach_ConfigGenericTwoStepRA_r16", -1);

      // decode msgA_TotalNumberOfRA_Preambles_r16

      if (msgA_TotalNumberOfRA_Preambles_r16Present) {
         buffer.getContext().eventDispatcher.startElement("msgA_TotalNumberOfRA_Preambles_r16", -1);

         msgA_TotalNumberOfRA_Preambles_r16 = new Asn1Integer();
         msgA_TotalNumberOfRA_Preambles_r16.decode (buffer, 1, 63);

         buffer.invokeCharacters(msgA_TotalNumberOfRA_Preambles_r16.toString());
         buffer.getContext().eventDispatcher.endElement("msgA_TotalNumberOfRA_Preambles_r16", -1);
      }
      else {
         msgA_TotalNumberOfRA_Preambles_r16 = null;
      }

      // decode msgA_SSB_PerRACH_OccasionAndCB_PreamblesPerSSB_r16

      if (msgA_SSB_PerRACH_OccasionAndCB_PreamblesPerSSB_r16Present) {
         buffer.getContext().eventDispatcher.startElement("msgA_SSB_PerRACH_OccasionAndCB_PreamblesPerSSB_r16", -1);

         msgA_SSB_PerRACH_OccasionAndCB_PreamblesPerSSB_r16 = new RACH_ConfigCommonTwoStepRA_r16_msgA_SSB_PerRACH_OccasionAndCB_PreamblesPerSSB_r16();
         msgA_SSB_PerRACH_OccasionAndCB_PreamblesPerSSB_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("msgA_SSB_PerRACH_OccasionAndCB_PreamblesPerSSB_r16", -1);
      }
      else {
         msgA_SSB_PerRACH_OccasionAndCB_PreamblesPerSSB_r16 = null;
      }

      // decode msgA_CB_PreamblesPerSSB_PerSharedRO_r16

      if (msgA_CB_PreamblesPerSSB_PerSharedRO_r16Present) {
         buffer.getContext().eventDispatcher.startElement("msgA_CB_PreamblesPerSSB_PerSharedRO_r16", -1);

         msgA_CB_PreamblesPerSSB_PerSharedRO_r16 = new Asn1Integer();
         msgA_CB_PreamblesPerSSB_PerSharedRO_r16.decode (buffer, 1, 60);

         buffer.invokeCharacters(msgA_CB_PreamblesPerSSB_PerSharedRO_r16.toString());
         buffer.getContext().eventDispatcher.endElement("msgA_CB_PreamblesPerSSB_PerSharedRO_r16", -1);
      }
      else {
         msgA_CB_PreamblesPerSSB_PerSharedRO_r16 = null;
      }

      // decode msgA_SSB_SharedRO_MaskIndex_r16

      if (msgA_SSB_SharedRO_MaskIndex_r16Present) {
         buffer.getContext().eventDispatcher.startElement("msgA_SSB_SharedRO_MaskIndex_r16", -1);

         msgA_SSB_SharedRO_MaskIndex_r16 = new Asn1Integer();
         msgA_SSB_SharedRO_MaskIndex_r16.decode (buffer, 1, 15);

         buffer.invokeCharacters(msgA_SSB_SharedRO_MaskIndex_r16.toString());
         buffer.getContext().eventDispatcher.endElement("msgA_SSB_SharedRO_MaskIndex_r16", -1);
      }
      else {
         msgA_SSB_SharedRO_MaskIndex_r16 = null;
      }

      // decode groupB_ConfiguredTwoStepRA_r16

      if (groupB_ConfiguredTwoStepRA_r16Present) {
         buffer.getContext().eventDispatcher.startElement("groupB_ConfiguredTwoStepRA_r16", -1);

         groupB_ConfiguredTwoStepRA_r16 = new GroupB_ConfiguredTwoStepRA_r16();
         groupB_ConfiguredTwoStepRA_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("groupB_ConfiguredTwoStepRA_r16", -1);
      }
      else {
         groupB_ConfiguredTwoStepRA_r16 = null;
      }

      // decode msgA_PRACH_RootSequenceIndex_r16

      if (msgA_PRACH_RootSequenceIndex_r16Present) {
         buffer.getContext().eventDispatcher.startElement("msgA_PRACH_RootSequenceIndex_r16", -1);

         msgA_PRACH_RootSequenceIndex_r16 = new RACH_ConfigCommonTwoStepRA_r16_msgA_PRACH_RootSequenceIndex_r16();
         msgA_PRACH_RootSequenceIndex_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("msgA_PRACH_RootSequenceIndex_r16", -1);
      }
      else {
         msgA_PRACH_RootSequenceIndex_r16 = null;
      }

      // decode msgA_TransMax_r16

      if (msgA_TransMax_r16Present) {
         buffer.getContext().eventDispatcher.startElement("msgA_TransMax_r16", -1);

         int tval = RACH_ConfigCommonTwoStepRA_r16_msgA_TransMax_r16.decodeEnumValue (buffer);
         msgA_TransMax_r16 = RACH_ConfigCommonTwoStepRA_r16_msgA_TransMax_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("msgA_TransMax_r16", -1);
      }
      else {
         msgA_TransMax_r16 = null;
      }

      // decode msgA_RSRP_Threshold_r16

      if (msgA_RSRP_Threshold_r16Present) {
         buffer.getContext().eventDispatcher.startElement("msgA_RSRP_Threshold_r16", -1);

         msgA_RSRP_Threshold_r16 = new RSRP_Range();
         msgA_RSRP_Threshold_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("msgA_RSRP_Threshold_r16", -1);
      }
      else {
         msgA_RSRP_Threshold_r16 = null;
      }

      // decode msgA_RSRP_ThresholdSSB_r16

      if (msgA_RSRP_ThresholdSSB_r16Present) {
         buffer.getContext().eventDispatcher.startElement("msgA_RSRP_ThresholdSSB_r16", -1);

         msgA_RSRP_ThresholdSSB_r16 = new RSRP_Range();
         msgA_RSRP_ThresholdSSB_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("msgA_RSRP_ThresholdSSB_r16", -1);
      }
      else {
         msgA_RSRP_ThresholdSSB_r16 = null;
      }

      // decode msgA_SubcarrierSpacing_r16

      if (msgA_SubcarrierSpacing_r16Present) {
         buffer.getContext().eventDispatcher.startElement("msgA_SubcarrierSpacing_r16", -1);

         int tval = SubcarrierSpacing.decodeEnumValue (buffer);
         msgA_SubcarrierSpacing_r16 = SubcarrierSpacing.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("msgA_SubcarrierSpacing_r16", -1);
      }
      else {
         msgA_SubcarrierSpacing_r16 = null;
      }

      // decode msgA_RestrictedSetConfig_r16

      if (msgA_RestrictedSetConfig_r16Present) {
         buffer.getContext().eventDispatcher.startElement("msgA_RestrictedSetConfig_r16", -1);

         int tval = RACH_ConfigCommonTwoStepRA_r16_msgA_RestrictedSetConfig_r16.decodeEnumValue (buffer);
         msgA_RestrictedSetConfig_r16 = RACH_ConfigCommonTwoStepRA_r16_msgA_RestrictedSetConfig_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("msgA_RestrictedSetConfig_r16", -1);
      }
      else {
         msgA_RestrictedSetConfig_r16 = null;
      }

      // decode ra_PrioritizationForAccessIdentityTwoStep_r16

      if (ra_PrioritizationForAccessIdentityTwoStep_r16Present) {
         buffer.getContext().eventDispatcher.startElement("ra_PrioritizationForAccessIdentityTwoStep_r16", -1);

         ra_PrioritizationForAccessIdentityTwoStep_r16 = new RACH_ConfigCommonTwoStepRA_r16_ra_PrioritizationForAccessIdentityTwoStep_r16();
         ra_PrioritizationForAccessIdentityTwoStep_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ra_PrioritizationForAccessIdentityTwoStep_r16", -1);
      }
      else {
         ra_PrioritizationForAccessIdentityTwoStep_r16 = null;
      }

      // decode ra_ContentionResolutionTimer_r16

      if (ra_ContentionResolutionTimer_r16Present) {
         buffer.getContext().eventDispatcher.startElement("ra_ContentionResolutionTimer_r16", -1);

         int tval = RACH_ConfigCommonTwoStepRA_r16_ra_ContentionResolutionTimer_r16.decodeEnumValue (buffer);
         ra_ContentionResolutionTimer_r16 = RACH_ConfigCommonTwoStepRA_r16_ra_ContentionResolutionTimer_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("ra_ContentionResolutionTimer_r16", -1);
      }
      else {
         ra_ContentionResolutionTimer_r16 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((msgA_TotalNumberOfRA_Preambles_r16 != null), null);
      buffer.encodeBit ((msgA_SSB_PerRACH_OccasionAndCB_PreamblesPerSSB_r16 != null), null);
      buffer.encodeBit ((msgA_CB_PreamblesPerSSB_PerSharedRO_r16 != null), null);
      buffer.encodeBit ((msgA_SSB_SharedRO_MaskIndex_r16 != null), null);
      buffer.encodeBit ((groupB_ConfiguredTwoStepRA_r16 != null), null);
      buffer.encodeBit ((msgA_PRACH_RootSequenceIndex_r16 != null), null);
      buffer.encodeBit ((msgA_TransMax_r16 != null), null);
      buffer.encodeBit ((msgA_RSRP_Threshold_r16 != null), null);
      buffer.encodeBit ((msgA_RSRP_ThresholdSSB_r16 != null), null);
      buffer.encodeBit ((msgA_SubcarrierSpacing_r16 != null), null);
      buffer.encodeBit ((msgA_RestrictedSetConfig_r16 != null), null);
      buffer.encodeBit ((ra_PrioritizationForAccessIdentityTwoStep_r16 != null), null);
      buffer.encodeBit ((ra_ContentionResolutionTimer_r16 != null), null);

      // encode rach_ConfigGenericTwoStepRA_r16

      if (rach_ConfigGenericTwoStepRA_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("rach_ConfigGenericTwoStepRA_r16", -1);

         rach_ConfigGenericTwoStepRA_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("rach_ConfigGenericTwoStepRA_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("rach_ConfigGenericTwoStepRA_r16");

      // encode msgA_TotalNumberOfRA_Preambles_r16

      if (msgA_TotalNumberOfRA_Preambles_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("msgA_TotalNumberOfRA_Preambles_r16", -1);

         msgA_TotalNumberOfRA_Preambles_r16.encode (buffer, 1, 63);

         buffer.getContext().eventDispatcher.endElement("msgA_TotalNumberOfRA_Preambles_r16", -1);
      }

      // encode msgA_SSB_PerRACH_OccasionAndCB_PreamblesPerSSB_r16

      if (msgA_SSB_PerRACH_OccasionAndCB_PreamblesPerSSB_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("msgA_SSB_PerRACH_OccasionAndCB_PreamblesPerSSB_r16", -1);

         msgA_SSB_PerRACH_OccasionAndCB_PreamblesPerSSB_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("msgA_SSB_PerRACH_OccasionAndCB_PreamblesPerSSB_r16", -1);
      }

      // encode msgA_CB_PreamblesPerSSB_PerSharedRO_r16

      if (msgA_CB_PreamblesPerSSB_PerSharedRO_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("msgA_CB_PreamblesPerSSB_PerSharedRO_r16", -1);

         msgA_CB_PreamblesPerSSB_PerSharedRO_r16.encode (buffer, 1, 60);

         buffer.getContext().eventDispatcher.endElement("msgA_CB_PreamblesPerSSB_PerSharedRO_r16", -1);
      }

      // encode msgA_SSB_SharedRO_MaskIndex_r16

      if (msgA_SSB_SharedRO_MaskIndex_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("msgA_SSB_SharedRO_MaskIndex_r16", -1);

         msgA_SSB_SharedRO_MaskIndex_r16.encode (buffer, 1, 15);

         buffer.getContext().eventDispatcher.endElement("msgA_SSB_SharedRO_MaskIndex_r16", -1);
      }

      // encode groupB_ConfiguredTwoStepRA_r16

      if (groupB_ConfiguredTwoStepRA_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("groupB_ConfiguredTwoStepRA_r16", -1);

         groupB_ConfiguredTwoStepRA_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("groupB_ConfiguredTwoStepRA_r16", -1);
      }

      // encode msgA_PRACH_RootSequenceIndex_r16

      if (msgA_PRACH_RootSequenceIndex_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("msgA_PRACH_RootSequenceIndex_r16", -1);

         msgA_PRACH_RootSequenceIndex_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("msgA_PRACH_RootSequenceIndex_r16", -1);
      }

      // encode msgA_TransMax_r16

      if (msgA_TransMax_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("msgA_TransMax_r16", -1);

         msgA_TransMax_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("msgA_TransMax_r16", -1);
      }

      // encode msgA_RSRP_Threshold_r16

      if (msgA_RSRP_Threshold_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("msgA_RSRP_Threshold_r16", -1);

         msgA_RSRP_Threshold_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("msgA_RSRP_Threshold_r16", -1);
      }

      // encode msgA_RSRP_ThresholdSSB_r16

      if (msgA_RSRP_ThresholdSSB_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("msgA_RSRP_ThresholdSSB_r16", -1);

         msgA_RSRP_ThresholdSSB_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("msgA_RSRP_ThresholdSSB_r16", -1);
      }

      // encode msgA_SubcarrierSpacing_r16

      if (msgA_SubcarrierSpacing_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("msgA_SubcarrierSpacing_r16", -1);

         msgA_SubcarrierSpacing_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("msgA_SubcarrierSpacing_r16", -1);
      }

      // encode msgA_RestrictedSetConfig_r16

      if (msgA_RestrictedSetConfig_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("msgA_RestrictedSetConfig_r16", -1);

         msgA_RestrictedSetConfig_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("msgA_RestrictedSetConfig_r16", -1);
      }

      // encode ra_PrioritizationForAccessIdentityTwoStep_r16

      if (ra_PrioritizationForAccessIdentityTwoStep_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("ra_PrioritizationForAccessIdentityTwoStep_r16", -1);

         ra_PrioritizationForAccessIdentityTwoStep_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ra_PrioritizationForAccessIdentityTwoStep_r16", -1);
      }

      // encode ra_ContentionResolutionTimer_r16

      if (ra_ContentionResolutionTimer_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("ra_ContentionResolutionTimer_r16", -1);

         ra_ContentionResolutionTimer_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ra_ContentionResolutionTimer_r16", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (rach_ConfigGenericTwoStepRA_r16 != null) rach_ConfigGenericTwoStepRA_r16.print (_sb, "rach_ConfigGenericTwoStepRA_r16", _level+1);
      if (msgA_TotalNumberOfRA_Preambles_r16 != null) msgA_TotalNumberOfRA_Preambles_r16.print (_sb, "msgA_TotalNumberOfRA_Preambles_r16", _level+1);
      if (msgA_SSB_PerRACH_OccasionAndCB_PreamblesPerSSB_r16 != null) msgA_SSB_PerRACH_OccasionAndCB_PreamblesPerSSB_r16.print (_sb, "msgA_SSB_PerRACH_OccasionAndCB_PreamblesPerSSB_r16", _level+1);
      if (msgA_CB_PreamblesPerSSB_PerSharedRO_r16 != null) msgA_CB_PreamblesPerSSB_PerSharedRO_r16.print (_sb, "msgA_CB_PreamblesPerSSB_PerSharedRO_r16", _level+1);
      if (msgA_SSB_SharedRO_MaskIndex_r16 != null) msgA_SSB_SharedRO_MaskIndex_r16.print (_sb, "msgA_SSB_SharedRO_MaskIndex_r16", _level+1);
      if (groupB_ConfiguredTwoStepRA_r16 != null) groupB_ConfiguredTwoStepRA_r16.print (_sb, "groupB_ConfiguredTwoStepRA_r16", _level+1);
      if (msgA_PRACH_RootSequenceIndex_r16 != null) msgA_PRACH_RootSequenceIndex_r16.print (_sb, "msgA_PRACH_RootSequenceIndex_r16", _level+1);
      if (msgA_TransMax_r16 != null) msgA_TransMax_r16.print (_sb, "msgA_TransMax_r16", _level+1);
      if (msgA_RSRP_Threshold_r16 != null) msgA_RSRP_Threshold_r16.print (_sb, "msgA_RSRP_Threshold_r16", _level+1);
      if (msgA_RSRP_ThresholdSSB_r16 != null) msgA_RSRP_ThresholdSSB_r16.print (_sb, "msgA_RSRP_ThresholdSSB_r16", _level+1);
      if (msgA_SubcarrierSpacing_r16 != null) msgA_SubcarrierSpacing_r16.print (_sb, "msgA_SubcarrierSpacing_r16", _level+1);
      if (msgA_RestrictedSetConfig_r16 != null) msgA_RestrictedSetConfig_r16.print (_sb, "msgA_RestrictedSetConfig_r16", _level+1);
      if (ra_PrioritizationForAccessIdentityTwoStep_r16 != null) ra_PrioritizationForAccessIdentityTwoStep_r16.print (_sb, "ra_PrioritizationForAccessIdentityTwoStep_r16", _level+1);
      if (ra_ContentionResolutionTimer_r16 != null) ra_ContentionResolutionTimer_r16.print (_sb, "ra_ContentionResolutionTimer_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
