/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class FilterCoefficient extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "FilterCoefficient";
   }

   // Integer constants for switch-case
   public static final int _FC0 = 0;
   public static final int _FC1 = 1;
   public static final int _FC2 = 2;
   public static final int _FC3 = 3;
   public static final int _FC4 = 4;
   public static final int _FC5 = 5;
   public static final int _FC6 = 6;
   public static final int _FC7 = 7;
   public static final int _FC8 = 8;
   public static final int _FC9 = 9;
   public static final int _FC11 = 10;
   public static final int _FC13 = 11;
   public static final int _FC15 = 12;
   public static final int _FC17 = 13;
   public static final int _FC19 = 14;
   public static final int _SPARE1 = 15;

   // Singleton instances of FilterCoefficient
   protected static final FilterCoefficient _fc0 = new FilterCoefficient(0);
   protected static final FilterCoefficient _fc1 = new FilterCoefficient(1);
   protected static final FilterCoefficient _fc2 = new FilterCoefficient(2);
   protected static final FilterCoefficient _fc3 = new FilterCoefficient(3);
   protected static final FilterCoefficient _fc4 = new FilterCoefficient(4);
   protected static final FilterCoefficient _fc5 = new FilterCoefficient(5);
   protected static final FilterCoefficient _fc6 = new FilterCoefficient(6);
   protected static final FilterCoefficient _fc7 = new FilterCoefficient(7);
   protected static final FilterCoefficient _fc8 = new FilterCoefficient(8);
   protected static final FilterCoefficient _fc9 = new FilterCoefficient(9);
   protected static final FilterCoefficient _fc11 = new FilterCoefficient(10);
   protected static final FilterCoefficient _fc13 = new FilterCoefficient(11);
   protected static final FilterCoefficient _fc15 = new FilterCoefficient(12);
   protected static final FilterCoefficient _fc17 = new FilterCoefficient(13);
   protected static final FilterCoefficient _fc19 = new FilterCoefficient(14);
   protected static final FilterCoefficient _spare1 = new FilterCoefficient(15);
   private static FilterCoefficient __undefined = new FilterCoefficient(-999);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    *   7
    *   8
    *   9
    *   10
    *   11
    *   12
    *   13
    *   14
    *   15
    */
   protected FilterCoefficient (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for fc0.
    */
   public static FilterCoefficient fc0() {
      return _fc0;
   }

   /**
    * Singleton accessor method for fc1.
    */
   public static FilterCoefficient fc1() {
      return _fc1;
   }

   /**
    * Singleton accessor method for fc2.
    */
   public static FilterCoefficient fc2() {
      return _fc2;
   }

   /**
    * Singleton accessor method for fc3.
    */
   public static FilterCoefficient fc3() {
      return _fc3;
   }

   /**
    * Singleton accessor method for fc4.
    */
   public static FilterCoefficient fc4() {
      return _fc4;
   }

   /**
    * Singleton accessor method for fc5.
    */
   public static FilterCoefficient fc5() {
      return _fc5;
   }

   /**
    * Singleton accessor method for fc6.
    */
   public static FilterCoefficient fc6() {
      return _fc6;
   }

   /**
    * Singleton accessor method for fc7.
    */
   public static FilterCoefficient fc7() {
      return _fc7;
   }

   /**
    * Singleton accessor method for fc8.
    */
   public static FilterCoefficient fc8() {
      return _fc8;
   }

   /**
    * Singleton accessor method for fc9.
    */
   public static FilterCoefficient fc9() {
      return _fc9;
   }

   /**
    * Singleton accessor method for fc11.
    */
   public static FilterCoefficient fc11() {
      return _fc11;
   }

   /**
    * Singleton accessor method for fc13.
    */
   public static FilterCoefficient fc13() {
      return _fc13;
   }

   /**
    * Singleton accessor method for fc15.
    */
   public static FilterCoefficient fc15() {
      return _fc15;
   }

   /**
    * Singleton accessor method for fc17.
    */
   public static FilterCoefficient fc17() {
      return _fc17;
   }

   /**
    * Singleton accessor method for fc19.
    */
   public static FilterCoefficient fc19() {
      return _fc19;
   }

   /**
    * Singleton accessor method for spare1.
    */
   public static FilterCoefficient spare1() {
      return _spare1;
   }

   /** Undefined value. */
   protected static FilterCoefficient __undefined_() { return __undefined; }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return FilterCoefficient.valueOf( FilterCoefficient.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static FilterCoefficient valueOf (int _value)
   {
      switch ((int)_value) {
         case 0: return fc0();
         case 1: return fc1();
         case 2: return fc2();
         case 3: return fc3();
         case 4: return fc4();
         case 5: return fc5();
         case 6: return fc6();
         case 7: return fc7();
         case 8: return fc8();
         case 9: return fc9();
         case 10: return fc11();
         case 11: return fc13();
         case 12: return fc15();
         case 13: return fc17();
         case 14: return fc19();
         case 15: return spare1();
         default: return __undefined_();
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      boolean extbit = buffer.decodeBit ("extbit");

      if (extbit) {
         ui = buffer.decodeSmallNonNegWholeNumber ();

         return 0x7fffffff;
      }
      else {
         ui = (int) buffer.decodeConsWholeNumber (16);

         switch (ui) {
            case 0: ret =  0; break;
            case 1: ret =  1; break;
            case 2: ret =  2; break;
            case 3: ret =  3; break;
            case 4: ret =  4; break;
            case 5: ret =  5; break;
            case 6: ret =  6; break;
            case 7: ret =  7; break;
            case 8: ret =  8; break;
            case 9: ret =  9; break;
            case 10: ret =  10; break;
            case 11: ret =  11; break;
            case 12: ret =  12; break;
            case 13: ret =  13; break;
            case 14: ret =  14; break;
            case 15: ret =  15; break;
            default: throw new Asn1InvalidEnumException (ui);
         }
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (FilterCoefficient.valueOf(ret).toString());

      return ret;
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      boolean extbit = false;

      switch ((int)value) {
         case 0: ui = 0; /* fc0 */break;
         case 1: ui = 1; /* fc1 */break;
         case 2: ui = 2; /* fc2 */break;
         case 3: ui = 3; /* fc3 */break;
         case 4: ui = 4; /* fc4 */break;
         case 5: ui = 5; /* fc5 */break;
         case 6: ui = 6; /* fc6 */break;
         case 7: ui = 7; /* fc7 */break;
         case 8: ui = 8; /* fc8 */break;
         case 9: ui = 9; /* fc9 */break;
         case 10: ui = 10; /* fc11 */break;
         case 11: ui = 11; /* fc13 */break;
         case 12: ui = 12; /* fc15 */break;
         case 13: ui = 13; /* fc17 */break;
         case 14: ui = 14; /* fc19 */break;
         case 15: ui = 15; /* spare1 */break;
         default:
            ui = (int) value;
            extbit = true;
      }

      buffer.encodeBit (extbit, "extbit");

      if (extbit) {
         buffer.encodeSmallNonNegWholeNumber (ui);
      }
      else {
         buffer.encodeConsWholeNumber (ui, 16);
      }
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("fc0");
         case 1: return ("fc1");
         case 2: return ("fc2");
         case 3: return ("fc3");
         case 4: return ("fc4");
         case 5: return ("fc5");
         case 6: return ("fc6");
         case 7: return ("fc7");
         case 8: return ("fc8");
         case 9: return ("fc9");
         case 10: return ("fc11");
         case 11: return ("fc13");
         case 12: return ("fc15");
         case 13: return ("fc17");
         case 14: return ("fc19");
         case 15: return ("spare1");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
