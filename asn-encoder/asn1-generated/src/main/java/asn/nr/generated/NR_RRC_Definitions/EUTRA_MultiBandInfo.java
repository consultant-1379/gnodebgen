/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class EUTRA_MultiBandInfo extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "EUTRA-MultiBandInfo";
   }

   public FreqBandIndicatorEUTRA eutra_FreqBandIndicator;
   public EUTRA_NS_PmaxList eutra_NS_PmaxList;  // optional

   public EUTRA_MultiBandInfo () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public EUTRA_MultiBandInfo (
      FreqBandIndicatorEUTRA eutra_FreqBandIndicator_,
      EUTRA_NS_PmaxList eutra_NS_PmaxList_
   ) {
      super();
      eutra_FreqBandIndicator = eutra_FreqBandIndicator_;
      eutra_NS_PmaxList = eutra_NS_PmaxList_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public EUTRA_MultiBandInfo (
      FreqBandIndicatorEUTRA eutra_FreqBandIndicator_
   ) {
      super();
      eutra_FreqBandIndicator = eutra_FreqBandIndicator_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public EUTRA_MultiBandInfo (long eutra_FreqBandIndicator_,
      EUTRA_NS_PmaxList eutra_NS_PmaxList_
   ) {
      super();
      eutra_FreqBandIndicator = new FreqBandIndicatorEUTRA (eutra_FreqBandIndicator_);
      eutra_NS_PmaxList = eutra_NS_PmaxList_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public EUTRA_MultiBandInfo (
      long eutra_FreqBandIndicator_
   ) {
      super();
      eutra_FreqBandIndicator = new FreqBandIndicatorEUTRA (eutra_FreqBandIndicator_);
   }

   public void init () {
      eutra_FreqBandIndicator = null;
      eutra_NS_PmaxList = null;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return eutra_FreqBandIndicator;
         case 1: return eutra_NS_PmaxList;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "eutra-FreqBandIndicator";
         case 1: return "eutra-NS-PmaxList";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean eutra_NS_PmaxListPresent = buffer.decodeBit ("eutra_NS_PmaxListPresent");

      // decode eutra_FreqBandIndicator

      buffer.getContext().eventDispatcher.startElement("eutra_FreqBandIndicator", -1);

      eutra_FreqBandIndicator = new FreqBandIndicatorEUTRA();
      eutra_FreqBandIndicator.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("eutra_FreqBandIndicator", -1);

      // decode eutra_NS_PmaxList

      if (eutra_NS_PmaxListPresent) {
         buffer.getContext().eventDispatcher.startElement("eutra_NS_PmaxList", -1);

         eutra_NS_PmaxList = new EUTRA_NS_PmaxList();
         eutra_NS_PmaxList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("eutra_NS_PmaxList", -1);
      }
      else {
         eutra_NS_PmaxList = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((eutra_NS_PmaxList != null), null);

      // encode eutra_FreqBandIndicator

      if (eutra_FreqBandIndicator != null) {
         buffer.getContext().eventDispatcher.startElement("eutra_FreqBandIndicator", -1);

         eutra_FreqBandIndicator.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("eutra_FreqBandIndicator", -1);
      }
      else throw new Asn1MissingRequiredException ("eutra_FreqBandIndicator");

      // encode eutra_NS_PmaxList

      if (eutra_NS_PmaxList != null) {
         buffer.getContext().eventDispatcher.startElement("eutra_NS_PmaxList", -1);

         eutra_NS_PmaxList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("eutra_NS_PmaxList", -1);
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (eutra_FreqBandIndicator != null) eutra_FreqBandIndicator.print (_sb, "eutra_FreqBandIndicator", _level+1);
      if (eutra_NS_PmaxList != null) eutra_NS_PmaxList.print (_sb, "eutra_NS_PmaxList", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
