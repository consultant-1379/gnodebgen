/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SDAP_Config extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SDAP-Config";
   }

   public PDU_SessionID pdu_Session;
   public SDAP_Config_sdap_HeaderDL sdap_HeaderDL = null;
   public SDAP_Config_sdap_HeaderUL sdap_HeaderUL = null;
   public Asn1Boolean defaultDRB;
   public SDAP_Config_mappedQoS_FlowsToAdd mappedQoS_FlowsToAdd;  // optional
   public SDAP_Config_mappedQoS_FlowsToRelease mappedQoS_FlowsToRelease;  // optional
   public Asn1OpenExt extElem1;

   public SDAP_Config () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SDAP_Config (
      PDU_SessionID pdu_Session_,
      SDAP_Config_sdap_HeaderDL sdap_HeaderDL_,
      SDAP_Config_sdap_HeaderUL sdap_HeaderUL_,
      Asn1Boolean defaultDRB_,
      SDAP_Config_mappedQoS_FlowsToAdd mappedQoS_FlowsToAdd_,
      SDAP_Config_mappedQoS_FlowsToRelease mappedQoS_FlowsToRelease_
   ) {
      super();
      pdu_Session = pdu_Session_;
      sdap_HeaderDL = sdap_HeaderDL_;
      sdap_HeaderUL = sdap_HeaderUL_;
      defaultDRB = defaultDRB_;
      mappedQoS_FlowsToAdd = mappedQoS_FlowsToAdd_;
      mappedQoS_FlowsToRelease = mappedQoS_FlowsToRelease_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SDAP_Config (
      PDU_SessionID pdu_Session_,
      SDAP_Config_sdap_HeaderDL sdap_HeaderDL_,
      SDAP_Config_sdap_HeaderUL sdap_HeaderUL_,
      Asn1Boolean defaultDRB_
   ) {
      super();
      pdu_Session = pdu_Session_;
      sdap_HeaderDL = sdap_HeaderDL_;
      sdap_HeaderUL = sdap_HeaderUL_;
      defaultDRB = defaultDRB_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SDAP_Config (long pdu_Session_,
      SDAP_Config_sdap_HeaderDL sdap_HeaderDL_,
      SDAP_Config_sdap_HeaderUL sdap_HeaderUL_,
      boolean defaultDRB_,
      SDAP_Config_mappedQoS_FlowsToAdd mappedQoS_FlowsToAdd_,
      SDAP_Config_mappedQoS_FlowsToRelease mappedQoS_FlowsToRelease_
   ) {
      super();
      pdu_Session = new PDU_SessionID (pdu_Session_);
      sdap_HeaderDL = sdap_HeaderDL_;
      sdap_HeaderUL = sdap_HeaderUL_;
      defaultDRB = new Asn1Boolean (defaultDRB_);
      mappedQoS_FlowsToAdd = mappedQoS_FlowsToAdd_;
      mappedQoS_FlowsToRelease = mappedQoS_FlowsToRelease_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public SDAP_Config (
      long pdu_Session_,
      SDAP_Config_sdap_HeaderDL sdap_HeaderDL_,
      SDAP_Config_sdap_HeaderUL sdap_HeaderUL_,
      boolean defaultDRB_
   ) {
      super();
      pdu_Session = new PDU_SessionID (pdu_Session_);
      sdap_HeaderDL = sdap_HeaderDL_;
      sdap_HeaderUL = sdap_HeaderUL_;
      defaultDRB = new Asn1Boolean (defaultDRB_);
   }

   public void init () {
      pdu_Session = null;
      sdap_HeaderDL = null;
      sdap_HeaderUL = null;
      defaultDRB = null;
      mappedQoS_FlowsToAdd = null;
      mappedQoS_FlowsToRelease = null;
      extElem1 = null;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return pdu_Session;
         case 1: return sdap_HeaderDL;
         case 2: return sdap_HeaderUL;
         case 3: return defaultDRB;
         case 4: return mappedQoS_FlowsToAdd;
         case 5: return mappedQoS_FlowsToRelease;
         case 6: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "pdu-Session";
         case 1: return "sdap-HeaderDL";
         case 2: return "sdap-HeaderUL";
         case 3: return "defaultDRB";
         case 4: return "mappedQoS-FlowsToAdd";
         case 5: return "mappedQoS-FlowsToRelease";
         case 6: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean mappedQoS_FlowsToAddPresent = buffer.decodeBit ("mappedQoS_FlowsToAddPresent");
      boolean mappedQoS_FlowsToReleasePresent = buffer.decodeBit ("mappedQoS_FlowsToReleasePresent");

      // decode pdu_Session

      buffer.getContext().eventDispatcher.startElement("pdu_Session", -1);

      pdu_Session = new PDU_SessionID();
      pdu_Session.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("pdu_Session", -1);

      // decode sdap_HeaderDL

      buffer.getContext().eventDispatcher.startElement("sdap_HeaderDL", -1);

      {
         int tval = SDAP_Config_sdap_HeaderDL.decodeEnumValue (buffer);
         sdap_HeaderDL = SDAP_Config_sdap_HeaderDL.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("sdap_HeaderDL", -1);

      // decode sdap_HeaderUL

      buffer.getContext().eventDispatcher.startElement("sdap_HeaderUL", -1);

      {
         int tval = SDAP_Config_sdap_HeaderUL.decodeEnumValue (buffer);
         sdap_HeaderUL = SDAP_Config_sdap_HeaderUL.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("sdap_HeaderUL", -1);

      // decode defaultDRB

      buffer.getContext().eventDispatcher.startElement("defaultDRB", -1);

      defaultDRB = new Asn1Boolean();
      defaultDRB.decode (buffer);

      buffer.invokeCharacters(defaultDRB.toString());
      buffer.getContext().eventDispatcher.endElement("defaultDRB", -1);

      // decode mappedQoS_FlowsToAdd

      if (mappedQoS_FlowsToAddPresent) {
         buffer.getContext().eventDispatcher.startElement("mappedQoS_FlowsToAdd", -1);

         mappedQoS_FlowsToAdd = new SDAP_Config_mappedQoS_FlowsToAdd();
         mappedQoS_FlowsToAdd.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("mappedQoS_FlowsToAdd", -1);
      }
      else {
         mappedQoS_FlowsToAdd = null;
      }

      // decode mappedQoS_FlowsToRelease

      if (mappedQoS_FlowsToReleasePresent) {
         buffer.getContext().eventDispatcher.startElement("mappedQoS_FlowsToRelease", -1);

         mappedQoS_FlowsToRelease = new SDAP_Config_mappedQoS_FlowsToRelease();
         mappedQoS_FlowsToRelease.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("mappedQoS_FlowsToRelease", -1);
      }
      else {
         mappedQoS_FlowsToRelease = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((mappedQoS_FlowsToAdd != null), null);
      buffer.encodeBit ((mappedQoS_FlowsToRelease != null), null);

      // encode pdu_Session

      if (pdu_Session != null) {
         buffer.getContext().eventDispatcher.startElement("pdu_Session", -1);

         pdu_Session.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("pdu_Session", -1);
      }
      else throw new Asn1MissingRequiredException ("pdu_Session");

      // encode sdap_HeaderDL

      if (sdap_HeaderDL != null) {
         buffer.getContext().eventDispatcher.startElement("sdap_HeaderDL", -1);

         sdap_HeaderDL.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sdap_HeaderDL", -1);
      }
      else throw new Asn1MissingRequiredException ("sdap_HeaderDL");

      // encode sdap_HeaderUL

      if (sdap_HeaderUL != null) {
         buffer.getContext().eventDispatcher.startElement("sdap_HeaderUL", -1);

         sdap_HeaderUL.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sdap_HeaderUL", -1);
      }
      else throw new Asn1MissingRequiredException ("sdap_HeaderUL");

      // encode defaultDRB

      if (defaultDRB != null) {
         buffer.getContext().eventDispatcher.startElement("defaultDRB", -1);

         defaultDRB.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("defaultDRB", -1);
      }
      else throw new Asn1MissingRequiredException ("defaultDRB");

      // encode mappedQoS_FlowsToAdd

      if (mappedQoS_FlowsToAdd != null) {
         buffer.getContext().eventDispatcher.startElement("mappedQoS_FlowsToAdd", -1);

         mappedQoS_FlowsToAdd.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("mappedQoS_FlowsToAdd", -1);
      }

      // encode mappedQoS_FlowsToRelease

      if (mappedQoS_FlowsToRelease != null) {
         buffer.getContext().eventDispatcher.startElement("mappedQoS_FlowsToRelease", -1);

         mappedQoS_FlowsToRelease.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("mappedQoS_FlowsToRelease", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (pdu_Session != null) pdu_Session.print (_sb, "pdu_Session", _level+1);
      if (sdap_HeaderDL != null) sdap_HeaderDL.print (_sb, "sdap_HeaderDL", _level+1);
      if (sdap_HeaderUL != null) sdap_HeaderUL.print (_sb, "sdap_HeaderUL", _level+1);
      if (defaultDRB != null) defaultDRB.print (_sb, "defaultDRB", _level+1);
      if (mappedQoS_FlowsToAdd != null) mappedQoS_FlowsToAdd.print (_sb, "mappedQoS_FlowsToAdd", _level+1);
      if (mappedQoS_FlowsToRelease != null) mappedQoS_FlowsToRelease.print (_sb, "mappedQoS_FlowsToRelease", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
