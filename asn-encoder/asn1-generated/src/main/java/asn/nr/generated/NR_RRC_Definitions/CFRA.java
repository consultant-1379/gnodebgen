/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class CFRA extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CFRA";
   }

   public CFRA_occasions occasions;  // optional
   public CFRA_resources resources;
   public boolean mV2ExtPresent;
   public Asn1Integer totalNumberOfRA_Preambles;  // optional
   public Asn1OpenExt extElem1;

   public CFRA () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CFRA (
      CFRA_occasions occasions_,
      CFRA_resources resources_,
      Asn1Integer totalNumberOfRA_Preambles_
   ) {
      super();
      occasions = occasions_;
      resources = resources_;
      totalNumberOfRA_Preambles = totalNumberOfRA_Preambles_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public CFRA (
      CFRA_resources resources_
   ) {
      super();
      resources = resources_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public CFRA (CFRA_occasions occasions_,
      CFRA_resources resources_,
      long totalNumberOfRA_Preambles_
   ) {
      super();
      occasions = occasions_;
      resources = resources_;
      totalNumberOfRA_Preambles = new Asn1Integer (totalNumberOfRA_Preambles_);
   }

   public void init () {
      occasions = null;
      resources = null;
      totalNumberOfRA_Preambles = null;
      extElem1 = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return occasions;
         case 1: return resources;
         case 2: return totalNumberOfRA_Preambles;
         case 3: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "occasions";
         case 1: return "resources";
         case 2: return "totalNumberOfRA-Preambles";
         case 3: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean occasionsPresent = buffer.decodeBit ("occasionsPresent");

      // decode occasions

      if (occasionsPresent) {
         buffer.getContext().eventDispatcher.startElement("occasions", -1);

         occasions = new CFRA_occasions();
         occasions.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("occasions", -1);
      }
      else {
         occasions = null;
      }

      // decode resources

      buffer.getContext().eventDispatcher.startElement("resources", -1);

      resources = new CFRA_resources();
      resources.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("resources", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean totalNumberOfRA_PreamblesPresent = buffer.decodeBit ("totalNumberOfRA_PreamblesPresent");

            // decode totalNumberOfRA_Preambles

            if (totalNumberOfRA_PreamblesPresent) {
               buffer.getContext().eventDispatcher.startElement("totalNumberOfRA_Preambles", -1);

               totalNumberOfRA_Preambles = new Asn1Integer();
               totalNumberOfRA_Preambles.decode (buffer, 1, 63);

               buffer.invokeCharacters(totalNumberOfRA_Preambles.toString());
               buffer.getContext().eventDispatcher.endElement("totalNumberOfRA_Preambles", -1);
            }
            else {
               totalNumberOfRA_Preambles = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (mV2ExtPresent ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((occasions != null), null);

      // encode occasions

      if (occasions != null) {
         buffer.getContext().eventDispatcher.startElement("occasions", -1);

         occasions.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("occasions", -1);
      }

      // encode resources

      if (resources != null) {
         buffer.getContext().eventDispatcher.startElement("resources", -1);

         resources.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("resources", -1);
      }
      else throw new Asn1MissingRequiredException ("resources");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 1;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit (mV2ExtPresent, null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         if (mV2ExtPresent) {
            buffer.reset();
            buffer.encodeBit ((totalNumberOfRA_Preambles != null), "optbit");
            if (totalNumberOfRA_Preambles != null) {
               totalNumberOfRA_Preambles.encode (buffer, 1, 63);
            }
            mainBuffer.encodeOpenType (buffer, null);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (occasions != null) occasions.print (_sb, "occasions", _level+1);
      if (resources != null) resources.print (_sb, "resources", _level+1);
      if (totalNumberOfRA_Preambles != null) totalNumberOfRA_Preambles.print (_sb, "totalNumberOfRA_Preambles", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
