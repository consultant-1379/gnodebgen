/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SL_PHY_MAC_RLC_Config_r16 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SL-PHY-MAC-RLC-Config-r16";
   }

   public SL_PHY_MAC_RLC_Config_r16_sl_ScheduledConfig_r16 sl_ScheduledConfig_r16;  // optional
   public SL_PHY_MAC_RLC_Config_r16_sl_UE_SelectedConfig_r16 sl_UE_SelectedConfig_r16;  // optional
   public SL_PHY_MAC_RLC_Config_r16_sl_FreqInfoToReleaseList_r16 sl_FreqInfoToReleaseList_r16;  // optional
   public SL_PHY_MAC_RLC_Config_r16_sl_FreqInfoToAddModList_r16 sl_FreqInfoToAddModList_r16;  // optional
   public SL_PHY_MAC_RLC_Config_r16_sl_RLC_BearerToReleaseList_r16 sl_RLC_BearerToReleaseList_r16;  // optional
   public SL_PHY_MAC_RLC_Config_r16_sl_RLC_BearerToAddModList_r16 sl_RLC_BearerToAddModList_r16;  // optional
   public SL_PHY_MAC_RLC_Config_r16_sl_MaxNumConsecutiveDTX_r16 sl_MaxNumConsecutiveDTX_r16 = null;  // optional
   public SL_PHY_MAC_RLC_Config_r16_sl_CSI_Acquisition_r16 sl_CSI_Acquisition_r16 = null;  // optional
   public SL_PHY_MAC_RLC_Config_r16_sl_CSI_SchedulingRequestId_r16 sl_CSI_SchedulingRequestId_r16;  // optional
   public Asn1Integer sl_SSB_PriorityNR_r16;  // optional
   public SL_PHY_MAC_RLC_Config_r16_networkControlledSyncTx_r16 networkControlledSyncTx_r16 = null;  // optional

   public SL_PHY_MAC_RLC_Config_r16 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SL_PHY_MAC_RLC_Config_r16 (
      SL_PHY_MAC_RLC_Config_r16_sl_ScheduledConfig_r16 sl_ScheduledConfig_r16_,
      SL_PHY_MAC_RLC_Config_r16_sl_UE_SelectedConfig_r16 sl_UE_SelectedConfig_r16_,
      SL_PHY_MAC_RLC_Config_r16_sl_FreqInfoToReleaseList_r16 sl_FreqInfoToReleaseList_r16_,
      SL_PHY_MAC_RLC_Config_r16_sl_FreqInfoToAddModList_r16 sl_FreqInfoToAddModList_r16_,
      SL_PHY_MAC_RLC_Config_r16_sl_RLC_BearerToReleaseList_r16 sl_RLC_BearerToReleaseList_r16_,
      SL_PHY_MAC_RLC_Config_r16_sl_RLC_BearerToAddModList_r16 sl_RLC_BearerToAddModList_r16_,
      SL_PHY_MAC_RLC_Config_r16_sl_MaxNumConsecutiveDTX_r16 sl_MaxNumConsecutiveDTX_r16_,
      SL_PHY_MAC_RLC_Config_r16_sl_CSI_Acquisition_r16 sl_CSI_Acquisition_r16_,
      SL_PHY_MAC_RLC_Config_r16_sl_CSI_SchedulingRequestId_r16 sl_CSI_SchedulingRequestId_r16_,
      Asn1Integer sl_SSB_PriorityNR_r16_,
      SL_PHY_MAC_RLC_Config_r16_networkControlledSyncTx_r16 networkControlledSyncTx_r16_
   ) {
      super();
      sl_ScheduledConfig_r16 = sl_ScheduledConfig_r16_;
      sl_UE_SelectedConfig_r16 = sl_UE_SelectedConfig_r16_;
      sl_FreqInfoToReleaseList_r16 = sl_FreqInfoToReleaseList_r16_;
      sl_FreqInfoToAddModList_r16 = sl_FreqInfoToAddModList_r16_;
      sl_RLC_BearerToReleaseList_r16 = sl_RLC_BearerToReleaseList_r16_;
      sl_RLC_BearerToAddModList_r16 = sl_RLC_BearerToAddModList_r16_;
      sl_MaxNumConsecutiveDTX_r16 = sl_MaxNumConsecutiveDTX_r16_;
      sl_CSI_Acquisition_r16 = sl_CSI_Acquisition_r16_;
      sl_CSI_SchedulingRequestId_r16 = sl_CSI_SchedulingRequestId_r16_;
      sl_SSB_PriorityNR_r16 = sl_SSB_PriorityNR_r16_;
      networkControlledSyncTx_r16 = networkControlledSyncTx_r16_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SL_PHY_MAC_RLC_Config_r16 (SL_PHY_MAC_RLC_Config_r16_sl_ScheduledConfig_r16 sl_ScheduledConfig_r16_,
      SL_PHY_MAC_RLC_Config_r16_sl_UE_SelectedConfig_r16 sl_UE_SelectedConfig_r16_,
      SL_PHY_MAC_RLC_Config_r16_sl_FreqInfoToReleaseList_r16 sl_FreqInfoToReleaseList_r16_,
      SL_PHY_MAC_RLC_Config_r16_sl_FreqInfoToAddModList_r16 sl_FreqInfoToAddModList_r16_,
      SL_PHY_MAC_RLC_Config_r16_sl_RLC_BearerToReleaseList_r16 sl_RLC_BearerToReleaseList_r16_,
      SL_PHY_MAC_RLC_Config_r16_sl_RLC_BearerToAddModList_r16 sl_RLC_BearerToAddModList_r16_,
      SL_PHY_MAC_RLC_Config_r16_sl_MaxNumConsecutiveDTX_r16 sl_MaxNumConsecutiveDTX_r16_,
      SL_PHY_MAC_RLC_Config_r16_sl_CSI_Acquisition_r16 sl_CSI_Acquisition_r16_,
      SL_PHY_MAC_RLC_Config_r16_sl_CSI_SchedulingRequestId_r16 sl_CSI_SchedulingRequestId_r16_,
      long sl_SSB_PriorityNR_r16_,
      SL_PHY_MAC_RLC_Config_r16_networkControlledSyncTx_r16 networkControlledSyncTx_r16_
   ) {
      super();
      sl_ScheduledConfig_r16 = sl_ScheduledConfig_r16_;
      sl_UE_SelectedConfig_r16 = sl_UE_SelectedConfig_r16_;
      sl_FreqInfoToReleaseList_r16 = sl_FreqInfoToReleaseList_r16_;
      sl_FreqInfoToAddModList_r16 = sl_FreqInfoToAddModList_r16_;
      sl_RLC_BearerToReleaseList_r16 = sl_RLC_BearerToReleaseList_r16_;
      sl_RLC_BearerToAddModList_r16 = sl_RLC_BearerToAddModList_r16_;
      sl_MaxNumConsecutiveDTX_r16 = sl_MaxNumConsecutiveDTX_r16_;
      sl_CSI_Acquisition_r16 = sl_CSI_Acquisition_r16_;
      sl_CSI_SchedulingRequestId_r16 = sl_CSI_SchedulingRequestId_r16_;
      sl_SSB_PriorityNR_r16 = new Asn1Integer (sl_SSB_PriorityNR_r16_);
      networkControlledSyncTx_r16 = networkControlledSyncTx_r16_;
   }

   public void init () {
      sl_ScheduledConfig_r16 = null;
      sl_UE_SelectedConfig_r16 = null;
      sl_FreqInfoToReleaseList_r16 = null;
      sl_FreqInfoToAddModList_r16 = null;
      sl_RLC_BearerToReleaseList_r16 = null;
      sl_RLC_BearerToAddModList_r16 = null;
      sl_MaxNumConsecutiveDTX_r16 = null;
      sl_CSI_Acquisition_r16 = null;
      sl_CSI_SchedulingRequestId_r16 = null;
      sl_SSB_PriorityNR_r16 = null;
      networkControlledSyncTx_r16 = null;
   }

   public int getElementCount() { return 11; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return sl_ScheduledConfig_r16;
         case 1: return sl_UE_SelectedConfig_r16;
         case 2: return sl_FreqInfoToReleaseList_r16;
         case 3: return sl_FreqInfoToAddModList_r16;
         case 4: return sl_RLC_BearerToReleaseList_r16;
         case 5: return sl_RLC_BearerToAddModList_r16;
         case 6: return sl_MaxNumConsecutiveDTX_r16;
         case 7: return sl_CSI_Acquisition_r16;
         case 8: return sl_CSI_SchedulingRequestId_r16;
         case 9: return sl_SSB_PriorityNR_r16;
         case 10: return networkControlledSyncTx_r16;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "sl-ScheduledConfig-r16";
         case 1: return "sl-UE-SelectedConfig-r16";
         case 2: return "sl-FreqInfoToReleaseList-r16";
         case 3: return "sl-FreqInfoToAddModList-r16";
         case 4: return "sl-RLC-BearerToReleaseList-r16";
         case 5: return "sl-RLC-BearerToAddModList-r16";
         case 6: return "sl-MaxNumConsecutiveDTX-r16";
         case 7: return "sl-CSI-Acquisition-r16";
         case 8: return "sl-CSI-SchedulingRequestId-r16";
         case 9: return "sl-SSB-PriorityNR-r16";
         case 10: return "networkControlledSyncTx-r16";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean sl_ScheduledConfig_r16Present = buffer.decodeBit ("sl_ScheduledConfig_r16Present");
      boolean sl_UE_SelectedConfig_r16Present = buffer.decodeBit ("sl_UE_SelectedConfig_r16Present");
      boolean sl_FreqInfoToReleaseList_r16Present = buffer.decodeBit ("sl_FreqInfoToReleaseList_r16Present");
      boolean sl_FreqInfoToAddModList_r16Present = buffer.decodeBit ("sl_FreqInfoToAddModList_r16Present");
      boolean sl_RLC_BearerToReleaseList_r16Present = buffer.decodeBit ("sl_RLC_BearerToReleaseList_r16Present");
      boolean sl_RLC_BearerToAddModList_r16Present = buffer.decodeBit ("sl_RLC_BearerToAddModList_r16Present");
      boolean sl_MaxNumConsecutiveDTX_r16Present = buffer.decodeBit ("sl_MaxNumConsecutiveDTX_r16Present");
      boolean sl_CSI_Acquisition_r16Present = buffer.decodeBit ("sl_CSI_Acquisition_r16Present");
      boolean sl_CSI_SchedulingRequestId_r16Present = buffer.decodeBit ("sl_CSI_SchedulingRequestId_r16Present");
      boolean sl_SSB_PriorityNR_r16Present = buffer.decodeBit ("sl_SSB_PriorityNR_r16Present");
      boolean networkControlledSyncTx_r16Present = buffer.decodeBit ("networkControlledSyncTx_r16Present");

      // decode sl_ScheduledConfig_r16

      if (sl_ScheduledConfig_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_ScheduledConfig_r16", -1);

         sl_ScheduledConfig_r16 = new SL_PHY_MAC_RLC_Config_r16_sl_ScheduledConfig_r16();
         sl_ScheduledConfig_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sl_ScheduledConfig_r16", -1);
      }
      else {
         sl_ScheduledConfig_r16 = null;
      }

      // decode sl_UE_SelectedConfig_r16

      if (sl_UE_SelectedConfig_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_UE_SelectedConfig_r16", -1);

         sl_UE_SelectedConfig_r16 = new SL_PHY_MAC_RLC_Config_r16_sl_UE_SelectedConfig_r16();
         sl_UE_SelectedConfig_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sl_UE_SelectedConfig_r16", -1);
      }
      else {
         sl_UE_SelectedConfig_r16 = null;
      }

      // decode sl_FreqInfoToReleaseList_r16

      if (sl_FreqInfoToReleaseList_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_FreqInfoToReleaseList_r16", -1);

         sl_FreqInfoToReleaseList_r16 = new SL_PHY_MAC_RLC_Config_r16_sl_FreqInfoToReleaseList_r16();
         sl_FreqInfoToReleaseList_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sl_FreqInfoToReleaseList_r16", -1);
      }
      else {
         sl_FreqInfoToReleaseList_r16 = null;
      }

      // decode sl_FreqInfoToAddModList_r16

      if (sl_FreqInfoToAddModList_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_FreqInfoToAddModList_r16", -1);

         sl_FreqInfoToAddModList_r16 = new SL_PHY_MAC_RLC_Config_r16_sl_FreqInfoToAddModList_r16();
         sl_FreqInfoToAddModList_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sl_FreqInfoToAddModList_r16", -1);
      }
      else {
         sl_FreqInfoToAddModList_r16 = null;
      }

      // decode sl_RLC_BearerToReleaseList_r16

      if (sl_RLC_BearerToReleaseList_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_RLC_BearerToReleaseList_r16", -1);

         sl_RLC_BearerToReleaseList_r16 = new SL_PHY_MAC_RLC_Config_r16_sl_RLC_BearerToReleaseList_r16();
         sl_RLC_BearerToReleaseList_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sl_RLC_BearerToReleaseList_r16", -1);
      }
      else {
         sl_RLC_BearerToReleaseList_r16 = null;
      }

      // decode sl_RLC_BearerToAddModList_r16

      if (sl_RLC_BearerToAddModList_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_RLC_BearerToAddModList_r16", -1);

         sl_RLC_BearerToAddModList_r16 = new SL_PHY_MAC_RLC_Config_r16_sl_RLC_BearerToAddModList_r16();
         sl_RLC_BearerToAddModList_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sl_RLC_BearerToAddModList_r16", -1);
      }
      else {
         sl_RLC_BearerToAddModList_r16 = null;
      }

      // decode sl_MaxNumConsecutiveDTX_r16

      if (sl_MaxNumConsecutiveDTX_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_MaxNumConsecutiveDTX_r16", -1);

         int tval = SL_PHY_MAC_RLC_Config_r16_sl_MaxNumConsecutiveDTX_r16.decodeEnumValue (buffer);
         sl_MaxNumConsecutiveDTX_r16 = SL_PHY_MAC_RLC_Config_r16_sl_MaxNumConsecutiveDTX_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("sl_MaxNumConsecutiveDTX_r16", -1);
      }
      else {
         sl_MaxNumConsecutiveDTX_r16 = null;
      }

      // decode sl_CSI_Acquisition_r16

      if (sl_CSI_Acquisition_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_CSI_Acquisition_r16", -1);

         int tval = SL_PHY_MAC_RLC_Config_r16_sl_CSI_Acquisition_r16.decodeEnumValue (buffer);
         sl_CSI_Acquisition_r16 = SL_PHY_MAC_RLC_Config_r16_sl_CSI_Acquisition_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("sl_CSI_Acquisition_r16", -1);
      }
      else {
         sl_CSI_Acquisition_r16 = null;
      }

      // decode sl_CSI_SchedulingRequestId_r16

      if (sl_CSI_SchedulingRequestId_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_CSI_SchedulingRequestId_r16", -1);

         sl_CSI_SchedulingRequestId_r16 = new SL_PHY_MAC_RLC_Config_r16_sl_CSI_SchedulingRequestId_r16();
         sl_CSI_SchedulingRequestId_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sl_CSI_SchedulingRequestId_r16", -1);
      }
      else {
         sl_CSI_SchedulingRequestId_r16 = null;
      }

      // decode sl_SSB_PriorityNR_r16

      if (sl_SSB_PriorityNR_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_SSB_PriorityNR_r16", -1);

         sl_SSB_PriorityNR_r16 = new Asn1Integer();
         sl_SSB_PriorityNR_r16.decode (buffer, 1, 8);

         buffer.invokeCharacters(sl_SSB_PriorityNR_r16.toString());
         buffer.getContext().eventDispatcher.endElement("sl_SSB_PriorityNR_r16", -1);
      }
      else {
         sl_SSB_PriorityNR_r16 = null;
      }

      // decode networkControlledSyncTx_r16

      if (networkControlledSyncTx_r16Present) {
         buffer.getContext().eventDispatcher.startElement("networkControlledSyncTx_r16", -1);

         int tval = SL_PHY_MAC_RLC_Config_r16_networkControlledSyncTx_r16.decodeEnumValue (buffer);
         networkControlledSyncTx_r16 = SL_PHY_MAC_RLC_Config_r16_networkControlledSyncTx_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("networkControlledSyncTx_r16", -1);
      }
      else {
         networkControlledSyncTx_r16 = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((sl_ScheduledConfig_r16 != null), null);
      buffer.encodeBit ((sl_UE_SelectedConfig_r16 != null), null);
      buffer.encodeBit ((sl_FreqInfoToReleaseList_r16 != null), null);
      buffer.encodeBit ((sl_FreqInfoToAddModList_r16 != null), null);
      buffer.encodeBit ((sl_RLC_BearerToReleaseList_r16 != null), null);
      buffer.encodeBit ((sl_RLC_BearerToAddModList_r16 != null), null);
      buffer.encodeBit ((sl_MaxNumConsecutiveDTX_r16 != null), null);
      buffer.encodeBit ((sl_CSI_Acquisition_r16 != null), null);
      buffer.encodeBit ((sl_CSI_SchedulingRequestId_r16 != null), null);
      buffer.encodeBit ((sl_SSB_PriorityNR_r16 != null), null);
      buffer.encodeBit ((networkControlledSyncTx_r16 != null), null);

      // encode sl_ScheduledConfig_r16

      if (sl_ScheduledConfig_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_ScheduledConfig_r16", -1);

         sl_ScheduledConfig_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sl_ScheduledConfig_r16", -1);
      }

      // encode sl_UE_SelectedConfig_r16

      if (sl_UE_SelectedConfig_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_UE_SelectedConfig_r16", -1);

         sl_UE_SelectedConfig_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sl_UE_SelectedConfig_r16", -1);
      }

      // encode sl_FreqInfoToReleaseList_r16

      if (sl_FreqInfoToReleaseList_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_FreqInfoToReleaseList_r16", -1);

         sl_FreqInfoToReleaseList_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sl_FreqInfoToReleaseList_r16", -1);
      }

      // encode sl_FreqInfoToAddModList_r16

      if (sl_FreqInfoToAddModList_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_FreqInfoToAddModList_r16", -1);

         sl_FreqInfoToAddModList_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sl_FreqInfoToAddModList_r16", -1);
      }

      // encode sl_RLC_BearerToReleaseList_r16

      if (sl_RLC_BearerToReleaseList_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_RLC_BearerToReleaseList_r16", -1);

         sl_RLC_BearerToReleaseList_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sl_RLC_BearerToReleaseList_r16", -1);
      }

      // encode sl_RLC_BearerToAddModList_r16

      if (sl_RLC_BearerToAddModList_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_RLC_BearerToAddModList_r16", -1);

         sl_RLC_BearerToAddModList_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sl_RLC_BearerToAddModList_r16", -1);
      }

      // encode sl_MaxNumConsecutiveDTX_r16

      if (sl_MaxNumConsecutiveDTX_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_MaxNumConsecutiveDTX_r16", -1);

         sl_MaxNumConsecutiveDTX_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sl_MaxNumConsecutiveDTX_r16", -1);
      }

      // encode sl_CSI_Acquisition_r16

      if (sl_CSI_Acquisition_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_CSI_Acquisition_r16", -1);

         sl_CSI_Acquisition_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sl_CSI_Acquisition_r16", -1);
      }

      // encode sl_CSI_SchedulingRequestId_r16

      if (sl_CSI_SchedulingRequestId_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_CSI_SchedulingRequestId_r16", -1);

         sl_CSI_SchedulingRequestId_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sl_CSI_SchedulingRequestId_r16", -1);
      }

      // encode sl_SSB_PriorityNR_r16

      if (sl_SSB_PriorityNR_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_SSB_PriorityNR_r16", -1);

         sl_SSB_PriorityNR_r16.encode (buffer, 1, 8);

         buffer.getContext().eventDispatcher.endElement("sl_SSB_PriorityNR_r16", -1);
      }

      // encode networkControlledSyncTx_r16

      if (networkControlledSyncTx_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("networkControlledSyncTx_r16", -1);

         networkControlledSyncTx_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("networkControlledSyncTx_r16", -1);
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (sl_ScheduledConfig_r16 != null) sl_ScheduledConfig_r16.print (_sb, "sl_ScheduledConfig_r16", _level+1);
      if (sl_UE_SelectedConfig_r16 != null) sl_UE_SelectedConfig_r16.print (_sb, "sl_UE_SelectedConfig_r16", _level+1);
      if (sl_FreqInfoToReleaseList_r16 != null) sl_FreqInfoToReleaseList_r16.print (_sb, "sl_FreqInfoToReleaseList_r16", _level+1);
      if (sl_FreqInfoToAddModList_r16 != null) sl_FreqInfoToAddModList_r16.print (_sb, "sl_FreqInfoToAddModList_r16", _level+1);
      if (sl_RLC_BearerToReleaseList_r16 != null) sl_RLC_BearerToReleaseList_r16.print (_sb, "sl_RLC_BearerToReleaseList_r16", _level+1);
      if (sl_RLC_BearerToAddModList_r16 != null) sl_RLC_BearerToAddModList_r16.print (_sb, "sl_RLC_BearerToAddModList_r16", _level+1);
      if (sl_MaxNumConsecutiveDTX_r16 != null) sl_MaxNumConsecutiveDTX_r16.print (_sb, "sl_MaxNumConsecutiveDTX_r16", _level+1);
      if (sl_CSI_Acquisition_r16 != null) sl_CSI_Acquisition_r16.print (_sb, "sl_CSI_Acquisition_r16", _level+1);
      if (sl_CSI_SchedulingRequestId_r16 != null) sl_CSI_SchedulingRequestId_r16.print (_sb, "sl_CSI_SchedulingRequestId_r16", _level+1);
      if (sl_SSB_PriorityNR_r16 != null) sl_SSB_PriorityNR_r16.print (_sb, "sl_SSB_PriorityNR_r16", _level+1);
      if (networkControlledSyncTx_r16 != null) networkControlledSyncTx_r16.print (_sb, "networkControlledSyncTx_r16", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
