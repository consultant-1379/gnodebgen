/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class CGI_InfoEUTRA_cgi_info_EPC extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public CellAccessRelatedInfo_EUTRA_EPC cgi_info_EPC_legacy;
   public CGI_InfoEUTRA_cgi_info_EPC_cgi_info_EPC_list cgi_info_EPC_list;  // optional

   public CGI_InfoEUTRA_cgi_info_EPC () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CGI_InfoEUTRA_cgi_info_EPC (
      CellAccessRelatedInfo_EUTRA_EPC cgi_info_EPC_legacy_,
      CGI_InfoEUTRA_cgi_info_EPC_cgi_info_EPC_list cgi_info_EPC_list_
   ) {
      super();
      cgi_info_EPC_legacy = cgi_info_EPC_legacy_;
      cgi_info_EPC_list = cgi_info_EPC_list_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public CGI_InfoEUTRA_cgi_info_EPC (
      CellAccessRelatedInfo_EUTRA_EPC cgi_info_EPC_legacy_
   ) {
      super();
      cgi_info_EPC_legacy = cgi_info_EPC_legacy_;
   }

   public void init () {
      cgi_info_EPC_legacy = null;
      cgi_info_EPC_list = null;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return cgi_info_EPC_legacy;
         case 1: return cgi_info_EPC_list;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "cgi-info-EPC-legacy";
         case 1: return "cgi-info-EPC-list";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean cgi_info_EPC_listPresent = buffer.decodeBit ("cgi_info_EPC_listPresent");

      // decode cgi_info_EPC_legacy

      buffer.getContext().eventDispatcher.startElement("cgi_info_EPC_legacy", -1);

      cgi_info_EPC_legacy = new CellAccessRelatedInfo_EUTRA_EPC();
      cgi_info_EPC_legacy.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("cgi_info_EPC_legacy", -1);

      // decode cgi_info_EPC_list

      if (cgi_info_EPC_listPresent) {
         buffer.getContext().eventDispatcher.startElement("cgi_info_EPC_list", -1);

         cgi_info_EPC_list = new CGI_InfoEUTRA_cgi_info_EPC_cgi_info_EPC_list();
         cgi_info_EPC_list.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("cgi_info_EPC_list", -1);
      }
      else {
         cgi_info_EPC_list = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((cgi_info_EPC_list != null), null);

      // encode cgi_info_EPC_legacy

      if (cgi_info_EPC_legacy != null) {
         buffer.getContext().eventDispatcher.startElement("cgi_info_EPC_legacy", -1);

         cgi_info_EPC_legacy.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("cgi_info_EPC_legacy", -1);
      }
      else throw new Asn1MissingRequiredException ("cgi_info_EPC_legacy");

      // encode cgi_info_EPC_list

      if (cgi_info_EPC_list != null) {
         buffer.getContext().eventDispatcher.startElement("cgi_info_EPC_list", -1);

         cgi_info_EPC_list.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("cgi_info_EPC_list", -1);
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (cgi_info_EPC_legacy != null) cgi_info_EPC_legacy.print (_sb, "cgi_info_EPC_legacy", _level+1);
      if (cgi_info_EPC_list != null) cgi_info_EPC_list.print (_sb, "cgi_info_EPC_list", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
