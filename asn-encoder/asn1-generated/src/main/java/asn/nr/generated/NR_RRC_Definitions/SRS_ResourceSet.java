/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SRS_ResourceSet extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SRS-ResourceSet";
   }

   public SRS_ResourceSetId srs_ResourceSetId;
   public SRS_ResourceSet_srs_ResourceIdList srs_ResourceIdList;  // optional
   public SRS_ResourceSet_resourceType resourceType;
   public SRS_ResourceSet_usage usage = null;
   public Alpha alpha = null;  // optional
   public Asn1Integer p0;  // optional
   public PathlossReferenceRS_Config pathlossReferenceRS;  // optional
   public SRS_ResourceSet_srs_PowerControlAdjustmentStates srs_PowerControlAdjustmentStates = null;  // optional
   public boolean mV2ExtPresent;
   public SRS_ResourceSet_pathlossReferenceRSList_r16 pathlossReferenceRSList_r16;  // optional
   public Asn1OpenExt extElem1;

   public SRS_ResourceSet () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SRS_ResourceSet (
      SRS_ResourceSetId srs_ResourceSetId_,
      SRS_ResourceSet_srs_ResourceIdList srs_ResourceIdList_,
      SRS_ResourceSet_resourceType resourceType_,
      SRS_ResourceSet_usage usage_,
      Alpha alpha_,
      Asn1Integer p0_,
      PathlossReferenceRS_Config pathlossReferenceRS_,
      SRS_ResourceSet_srs_PowerControlAdjustmentStates srs_PowerControlAdjustmentStates_,
      SRS_ResourceSet_pathlossReferenceRSList_r16 pathlossReferenceRSList_r16_
   ) {
      super();
      srs_ResourceSetId = srs_ResourceSetId_;
      srs_ResourceIdList = srs_ResourceIdList_;
      resourceType = resourceType_;
      usage = usage_;
      alpha = alpha_;
      p0 = p0_;
      pathlossReferenceRS = pathlossReferenceRS_;
      srs_PowerControlAdjustmentStates = srs_PowerControlAdjustmentStates_;
      pathlossReferenceRSList_r16 = pathlossReferenceRSList_r16_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SRS_ResourceSet (
      SRS_ResourceSetId srs_ResourceSetId_,
      SRS_ResourceSet_resourceType resourceType_,
      SRS_ResourceSet_usage usage_
   ) {
      super();
      srs_ResourceSetId = srs_ResourceSetId_;
      resourceType = resourceType_;
      usage = usage_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SRS_ResourceSet (long srs_ResourceSetId_,
      SRS_ResourceSet_srs_ResourceIdList srs_ResourceIdList_,
      SRS_ResourceSet_resourceType resourceType_,
      SRS_ResourceSet_usage usage_,
      Alpha alpha_,
      long p0_,
      PathlossReferenceRS_Config pathlossReferenceRS_,
      SRS_ResourceSet_srs_PowerControlAdjustmentStates srs_PowerControlAdjustmentStates_,
      SRS_ResourceSet_pathlossReferenceRSList_r16 pathlossReferenceRSList_r16_
   ) {
      super();
      srs_ResourceSetId = new SRS_ResourceSetId (srs_ResourceSetId_);
      srs_ResourceIdList = srs_ResourceIdList_;
      resourceType = resourceType_;
      usage = usage_;
      alpha = alpha_;
      p0 = new Asn1Integer (p0_);
      pathlossReferenceRS = pathlossReferenceRS_;
      srs_PowerControlAdjustmentStates = srs_PowerControlAdjustmentStates_;
      pathlossReferenceRSList_r16 = pathlossReferenceRSList_r16_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public SRS_ResourceSet (
      long srs_ResourceSetId_,
      SRS_ResourceSet_resourceType resourceType_,
      SRS_ResourceSet_usage usage_
   ) {
      super();
      srs_ResourceSetId = new SRS_ResourceSetId (srs_ResourceSetId_);
      resourceType = resourceType_;
      usage = usage_;
   }

   public void init () {
      srs_ResourceSetId = null;
      srs_ResourceIdList = null;
      resourceType = null;
      usage = null;
      alpha = null;
      p0 = null;
      pathlossReferenceRS = null;
      srs_PowerControlAdjustmentStates = null;
      pathlossReferenceRSList_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 10; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return srs_ResourceSetId;
         case 1: return srs_ResourceIdList;
         case 2: return resourceType;
         case 3: return usage;
         case 4: return alpha;
         case 5: return p0;
         case 6: return pathlossReferenceRS;
         case 7: return srs_PowerControlAdjustmentStates;
         case 8: return pathlossReferenceRSList_r16;
         case 9: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "srs-ResourceSetId";
         case 1: return "srs-ResourceIdList";
         case 2: return "resourceType";
         case 3: return "usage";
         case 4: return "alpha";
         case 5: return "p0";
         case 6: return "pathlossReferenceRS";
         case 7: return "srs-PowerControlAdjustmentStates";
         case 8: return "pathlossReferenceRSList-r16";
         case 9: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean srs_ResourceIdListPresent = buffer.decodeBit ("srs_ResourceIdListPresent");
      boolean alphaPresent = buffer.decodeBit ("alphaPresent");
      boolean p0Present = buffer.decodeBit ("p0Present");
      boolean pathlossReferenceRSPresent = buffer.decodeBit ("pathlossReferenceRSPresent");
      boolean srs_PowerControlAdjustmentStatesPresent = buffer.decodeBit ("srs_PowerControlAdjustmentStatesPresent");

      // decode srs_ResourceSetId

      buffer.getContext().eventDispatcher.startElement("srs_ResourceSetId", -1);

      srs_ResourceSetId = new SRS_ResourceSetId();
      srs_ResourceSetId.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("srs_ResourceSetId", -1);

      // decode srs_ResourceIdList

      if (srs_ResourceIdListPresent) {
         buffer.getContext().eventDispatcher.startElement("srs_ResourceIdList", -1);

         srs_ResourceIdList = new SRS_ResourceSet_srs_ResourceIdList();
         srs_ResourceIdList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("srs_ResourceIdList", -1);
      }
      else {
         srs_ResourceIdList = null;
      }

      // decode resourceType

      buffer.getContext().eventDispatcher.startElement("resourceType", -1);

      resourceType = new SRS_ResourceSet_resourceType();
      resourceType.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("resourceType", -1);

      // decode usage

      buffer.getContext().eventDispatcher.startElement("usage", -1);

      {
         int tval = SRS_ResourceSet_usage.decodeEnumValue (buffer);
         usage = SRS_ResourceSet_usage.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("usage", -1);

      // decode alpha

      if (alphaPresent) {
         buffer.getContext().eventDispatcher.startElement("alpha", -1);

         int tval = Alpha.decodeEnumValue (buffer);
         alpha = Alpha.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("alpha", -1);
      }
      else {
         alpha = null;
      }

      // decode p0

      if (p0Present) {
         buffer.getContext().eventDispatcher.startElement("p0", -1);

         p0 = new Asn1Integer();
         p0.decode (buffer, -202, 24);

         buffer.invokeCharacters(p0.toString());
         buffer.getContext().eventDispatcher.endElement("p0", -1);
      }
      else {
         p0 = null;
      }

      // decode pathlossReferenceRS

      if (pathlossReferenceRSPresent) {
         buffer.getContext().eventDispatcher.startElement("pathlossReferenceRS", -1);

         pathlossReferenceRS = new PathlossReferenceRS_Config();
         pathlossReferenceRS.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("pathlossReferenceRS", -1);
      }
      else {
         pathlossReferenceRS = null;
      }

      // decode srs_PowerControlAdjustmentStates

      if (srs_PowerControlAdjustmentStatesPresent) {
         buffer.getContext().eventDispatcher.startElement("srs_PowerControlAdjustmentStates", -1);

         int tval = SRS_ResourceSet_srs_PowerControlAdjustmentStates.decodeEnumValue (buffer);
         srs_PowerControlAdjustmentStates = SRS_ResourceSet_srs_PowerControlAdjustmentStates.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("srs_PowerControlAdjustmentStates", -1);
      }
      else {
         srs_PowerControlAdjustmentStates = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean pathlossReferenceRSList_r16Present = buffer.decodeBit ("pathlossReferenceRSList_r16Present");

            // decode pathlossReferenceRSList_r16

            if (pathlossReferenceRSList_r16Present) {
               buffer.getContext().eventDispatcher.startElement("pathlossReferenceRSList_r16", -1);

               pathlossReferenceRSList_r16 = new SRS_ResourceSet_pathlossReferenceRSList_r16();
               pathlossReferenceRSList_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("pathlossReferenceRSList_r16", -1);
            }
            else {
               pathlossReferenceRSList_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (mV2ExtPresent ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((srs_ResourceIdList != null), null);
      buffer.encodeBit ((alpha != null), null);
      buffer.encodeBit ((p0 != null), null);
      buffer.encodeBit ((pathlossReferenceRS != null), null);
      buffer.encodeBit ((srs_PowerControlAdjustmentStates != null), null);

      // encode srs_ResourceSetId

      if (srs_ResourceSetId != null) {
         buffer.getContext().eventDispatcher.startElement("srs_ResourceSetId", -1);

         srs_ResourceSetId.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("srs_ResourceSetId", -1);
      }
      else throw new Asn1MissingRequiredException ("srs_ResourceSetId");

      // encode srs_ResourceIdList

      if (srs_ResourceIdList != null) {
         buffer.getContext().eventDispatcher.startElement("srs_ResourceIdList", -1);

         srs_ResourceIdList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("srs_ResourceIdList", -1);
      }

      // encode resourceType

      if (resourceType != null) {
         buffer.getContext().eventDispatcher.startElement("resourceType", -1);

         resourceType.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("resourceType", -1);
      }
      else throw new Asn1MissingRequiredException ("resourceType");

      // encode usage

      if (usage != null) {
         buffer.getContext().eventDispatcher.startElement("usage", -1);

         usage.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("usage", -1);
      }
      else throw new Asn1MissingRequiredException ("usage");

      // encode alpha

      if (alpha != null) {
         buffer.getContext().eventDispatcher.startElement("alpha", -1);

         alpha.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("alpha", -1);
      }

      // encode p0

      if (p0 != null) {
         buffer.getContext().eventDispatcher.startElement("p0", -1);

         p0.encode (buffer, -202, 24);

         buffer.getContext().eventDispatcher.endElement("p0", -1);
      }

      // encode pathlossReferenceRS

      if (pathlossReferenceRS != null) {
         buffer.getContext().eventDispatcher.startElement("pathlossReferenceRS", -1);

         pathlossReferenceRS.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("pathlossReferenceRS", -1);
      }

      // encode srs_PowerControlAdjustmentStates

      if (srs_PowerControlAdjustmentStates != null) {
         buffer.getContext().eventDispatcher.startElement("srs_PowerControlAdjustmentStates", -1);

         srs_PowerControlAdjustmentStates.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("srs_PowerControlAdjustmentStates", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 1;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit (mV2ExtPresent, null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         if (mV2ExtPresent) {
            buffer.reset();
            buffer.encodeBit ((pathlossReferenceRSList_r16 != null), "optbit");
            if (pathlossReferenceRSList_r16 != null) {
               pathlossReferenceRSList_r16.encode (buffer);
            }
            mainBuffer.encodeOpenType (buffer, null);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (srs_ResourceSetId != null) srs_ResourceSetId.print (_sb, "srs_ResourceSetId", _level+1);
      if (srs_ResourceIdList != null) srs_ResourceIdList.print (_sb, "srs_ResourceIdList", _level+1);
      if (resourceType != null) resourceType.print (_sb, "resourceType", _level+1);
      if (usage != null) usage.print (_sb, "usage", _level+1);
      if (alpha != null) alpha.print (_sb, "alpha", _level+1);
      if (p0 != null) p0.print (_sb, "p0", _level+1);
      if (pathlossReferenceRS != null) pathlossReferenceRS.print (_sb, "pathlossReferenceRS", _level+1);
      if (srs_PowerControlAdjustmentStates != null) srs_PowerControlAdjustmentStates.print (_sb, "srs_PowerControlAdjustmentStates", _level+1);
      if (pathlossReferenceRSList_r16 != null) pathlossReferenceRSList_r16.print (_sb, "pathlossReferenceRSList_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
