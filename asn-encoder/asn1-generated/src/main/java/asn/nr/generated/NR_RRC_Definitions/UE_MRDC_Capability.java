/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class UE_MRDC_Capability extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "UE-MRDC-Capability";
   }

   public MeasAndMobParametersMRDC measAndMobParametersMRDC;  // optional
   public Phy_ParametersMRDC phy_ParametersMRDC_v1530;  // optional
   public RF_ParametersMRDC rf_ParametersMRDC;
   public GeneralParametersMRDC_XDD_Diff generalParametersMRDC;  // optional
   public UE_MRDC_CapabilityAddXDD_Mode fdd_Add_UE_MRDC_Capabilities;  // optional
   public UE_MRDC_CapabilityAddXDD_Mode tdd_Add_UE_MRDC_Capabilities;  // optional
   public UE_MRDC_CapabilityAddFRX_Mode fr1_Add_UE_MRDC_Capabilities;  // optional
   public UE_MRDC_CapabilityAddFRX_Mode fr2_Add_UE_MRDC_Capabilities;  // optional
   public UE_MRDC_Capability_featureSetCombinations featureSetCombinations;  // optional
   public PDCP_ParametersMRDC pdcp_ParametersMRDC_v1530;  // optional
   public Asn1OctetString lateNonCriticalExtension;  // optional
   public UE_MRDC_Capability_v1560 nonCriticalExtension;  // optional

   public UE_MRDC_Capability () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public UE_MRDC_Capability (
      MeasAndMobParametersMRDC measAndMobParametersMRDC_,
      Phy_ParametersMRDC phy_ParametersMRDC_v1530_,
      RF_ParametersMRDC rf_ParametersMRDC_,
      GeneralParametersMRDC_XDD_Diff generalParametersMRDC_,
      UE_MRDC_CapabilityAddXDD_Mode fdd_Add_UE_MRDC_Capabilities_,
      UE_MRDC_CapabilityAddXDD_Mode tdd_Add_UE_MRDC_Capabilities_,
      UE_MRDC_CapabilityAddFRX_Mode fr1_Add_UE_MRDC_Capabilities_,
      UE_MRDC_CapabilityAddFRX_Mode fr2_Add_UE_MRDC_Capabilities_,
      UE_MRDC_Capability_featureSetCombinations featureSetCombinations_,
      PDCP_ParametersMRDC pdcp_ParametersMRDC_v1530_,
      Asn1OctetString lateNonCriticalExtension_,
      UE_MRDC_Capability_v1560 nonCriticalExtension_
   ) {
      super();
      measAndMobParametersMRDC = measAndMobParametersMRDC_;
      phy_ParametersMRDC_v1530 = phy_ParametersMRDC_v1530_;
      rf_ParametersMRDC = rf_ParametersMRDC_;
      generalParametersMRDC = generalParametersMRDC_;
      fdd_Add_UE_MRDC_Capabilities = fdd_Add_UE_MRDC_Capabilities_;
      tdd_Add_UE_MRDC_Capabilities = tdd_Add_UE_MRDC_Capabilities_;
      fr1_Add_UE_MRDC_Capabilities = fr1_Add_UE_MRDC_Capabilities_;
      fr2_Add_UE_MRDC_Capabilities = fr2_Add_UE_MRDC_Capabilities_;
      featureSetCombinations = featureSetCombinations_;
      pdcp_ParametersMRDC_v1530 = pdcp_ParametersMRDC_v1530_;
      lateNonCriticalExtension = lateNonCriticalExtension_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public UE_MRDC_Capability (
      RF_ParametersMRDC rf_ParametersMRDC_
   ) {
      super();
      rf_ParametersMRDC = rf_ParametersMRDC_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public UE_MRDC_Capability (MeasAndMobParametersMRDC measAndMobParametersMRDC_,
      Phy_ParametersMRDC phy_ParametersMRDC_v1530_,
      RF_ParametersMRDC rf_ParametersMRDC_,
      GeneralParametersMRDC_XDD_Diff generalParametersMRDC_,
      UE_MRDC_CapabilityAddXDD_Mode fdd_Add_UE_MRDC_Capabilities_,
      UE_MRDC_CapabilityAddXDD_Mode tdd_Add_UE_MRDC_Capabilities_,
      UE_MRDC_CapabilityAddFRX_Mode fr1_Add_UE_MRDC_Capabilities_,
      UE_MRDC_CapabilityAddFRX_Mode fr2_Add_UE_MRDC_Capabilities_,
      UE_MRDC_Capability_featureSetCombinations featureSetCombinations_,
      PDCP_ParametersMRDC pdcp_ParametersMRDC_v1530_,
      byte[] lateNonCriticalExtension_,
      UE_MRDC_Capability_v1560 nonCriticalExtension_
   ) {
      super();
      measAndMobParametersMRDC = measAndMobParametersMRDC_;
      phy_ParametersMRDC_v1530 = phy_ParametersMRDC_v1530_;
      rf_ParametersMRDC = rf_ParametersMRDC_;
      generalParametersMRDC = generalParametersMRDC_;
      fdd_Add_UE_MRDC_Capabilities = fdd_Add_UE_MRDC_Capabilities_;
      tdd_Add_UE_MRDC_Capabilities = tdd_Add_UE_MRDC_Capabilities_;
      fr1_Add_UE_MRDC_Capabilities = fr1_Add_UE_MRDC_Capabilities_;
      fr2_Add_UE_MRDC_Capabilities = fr2_Add_UE_MRDC_Capabilities_;
      featureSetCombinations = featureSetCombinations_;
      pdcp_ParametersMRDC_v1530 = pdcp_ParametersMRDC_v1530_;
      lateNonCriticalExtension = new Asn1OctetString (lateNonCriticalExtension_);
      nonCriticalExtension = nonCriticalExtension_;
   }

   public void init () {
      measAndMobParametersMRDC = null;
      phy_ParametersMRDC_v1530 = null;
      rf_ParametersMRDC = null;
      generalParametersMRDC = null;
      fdd_Add_UE_MRDC_Capabilities = null;
      tdd_Add_UE_MRDC_Capabilities = null;
      fr1_Add_UE_MRDC_Capabilities = null;
      fr2_Add_UE_MRDC_Capabilities = null;
      featureSetCombinations = null;
      pdcp_ParametersMRDC_v1530 = null;
      lateNonCriticalExtension = null;
      nonCriticalExtension = null;
   }

   public int getElementCount() { return 12; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return measAndMobParametersMRDC;
         case 1: return phy_ParametersMRDC_v1530;
         case 2: return rf_ParametersMRDC;
         case 3: return generalParametersMRDC;
         case 4: return fdd_Add_UE_MRDC_Capabilities;
         case 5: return tdd_Add_UE_MRDC_Capabilities;
         case 6: return fr1_Add_UE_MRDC_Capabilities;
         case 7: return fr2_Add_UE_MRDC_Capabilities;
         case 8: return featureSetCombinations;
         case 9: return pdcp_ParametersMRDC_v1530;
         case 10: return lateNonCriticalExtension;
         case 11: return nonCriticalExtension;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "measAndMobParametersMRDC";
         case 1: return "phy-ParametersMRDC-v1530";
         case 2: return "rf-ParametersMRDC";
         case 3: return "generalParametersMRDC";
         case 4: return "fdd-Add-UE-MRDC-Capabilities";
         case 5: return "tdd-Add-UE-MRDC-Capabilities";
         case 6: return "fr1-Add-UE-MRDC-Capabilities";
         case 7: return "fr2-Add-UE-MRDC-Capabilities";
         case 8: return "featureSetCombinations";
         case 9: return "pdcp-ParametersMRDC-v1530";
         case 10: return "lateNonCriticalExtension";
         case 11: return "nonCriticalExtension";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean measAndMobParametersMRDCPresent = buffer.decodeBit ("measAndMobParametersMRDCPresent");
      boolean phy_ParametersMRDC_v1530Present = buffer.decodeBit ("phy_ParametersMRDC_v1530Present");
      boolean generalParametersMRDCPresent = buffer.decodeBit ("generalParametersMRDCPresent");
      boolean fdd_Add_UE_MRDC_CapabilitiesPresent = buffer.decodeBit ("fdd_Add_UE_MRDC_CapabilitiesPresent");
      boolean tdd_Add_UE_MRDC_CapabilitiesPresent = buffer.decodeBit ("tdd_Add_UE_MRDC_CapabilitiesPresent");
      boolean fr1_Add_UE_MRDC_CapabilitiesPresent = buffer.decodeBit ("fr1_Add_UE_MRDC_CapabilitiesPresent");
      boolean fr2_Add_UE_MRDC_CapabilitiesPresent = buffer.decodeBit ("fr2_Add_UE_MRDC_CapabilitiesPresent");
      boolean featureSetCombinationsPresent = buffer.decodeBit ("featureSetCombinationsPresent");
      boolean pdcp_ParametersMRDC_v1530Present = buffer.decodeBit ("pdcp_ParametersMRDC_v1530Present");
      boolean lateNonCriticalExtensionPresent = buffer.decodeBit ("lateNonCriticalExtensionPresent");
      boolean nonCriticalExtensionPresent = buffer.decodeBit ("nonCriticalExtensionPresent");

      // decode measAndMobParametersMRDC

      if (measAndMobParametersMRDCPresent) {
         buffer.getContext().eventDispatcher.startElement("measAndMobParametersMRDC", -1);

         measAndMobParametersMRDC = new MeasAndMobParametersMRDC();
         measAndMobParametersMRDC.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("measAndMobParametersMRDC", -1);
      }
      else {
         measAndMobParametersMRDC = null;
      }

      // decode phy_ParametersMRDC_v1530

      if (phy_ParametersMRDC_v1530Present) {
         buffer.getContext().eventDispatcher.startElement("phy_ParametersMRDC_v1530", -1);

         phy_ParametersMRDC_v1530 = new Phy_ParametersMRDC();
         phy_ParametersMRDC_v1530.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("phy_ParametersMRDC_v1530", -1);
      }
      else {
         phy_ParametersMRDC_v1530 = null;
      }

      // decode rf_ParametersMRDC

      buffer.getContext().eventDispatcher.startElement("rf_ParametersMRDC", -1);

      rf_ParametersMRDC = new RF_ParametersMRDC();
      rf_ParametersMRDC.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("rf_ParametersMRDC", -1);

      // decode generalParametersMRDC

      if (generalParametersMRDCPresent) {
         buffer.getContext().eventDispatcher.startElement("generalParametersMRDC", -1);

         generalParametersMRDC = new GeneralParametersMRDC_XDD_Diff();
         generalParametersMRDC.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("generalParametersMRDC", -1);
      }
      else {
         generalParametersMRDC = null;
      }

      // decode fdd_Add_UE_MRDC_Capabilities

      if (fdd_Add_UE_MRDC_CapabilitiesPresent) {
         buffer.getContext().eventDispatcher.startElement("fdd_Add_UE_MRDC_Capabilities", -1);

         fdd_Add_UE_MRDC_Capabilities = new UE_MRDC_CapabilityAddXDD_Mode();
         fdd_Add_UE_MRDC_Capabilities.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("fdd_Add_UE_MRDC_Capabilities", -1);
      }
      else {
         fdd_Add_UE_MRDC_Capabilities = null;
      }

      // decode tdd_Add_UE_MRDC_Capabilities

      if (tdd_Add_UE_MRDC_CapabilitiesPresent) {
         buffer.getContext().eventDispatcher.startElement("tdd_Add_UE_MRDC_Capabilities", -1);

         tdd_Add_UE_MRDC_Capabilities = new UE_MRDC_CapabilityAddXDD_Mode();
         tdd_Add_UE_MRDC_Capabilities.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("tdd_Add_UE_MRDC_Capabilities", -1);
      }
      else {
         tdd_Add_UE_MRDC_Capabilities = null;
      }

      // decode fr1_Add_UE_MRDC_Capabilities

      if (fr1_Add_UE_MRDC_CapabilitiesPresent) {
         buffer.getContext().eventDispatcher.startElement("fr1_Add_UE_MRDC_Capabilities", -1);

         fr1_Add_UE_MRDC_Capabilities = new UE_MRDC_CapabilityAddFRX_Mode();
         fr1_Add_UE_MRDC_Capabilities.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("fr1_Add_UE_MRDC_Capabilities", -1);
      }
      else {
         fr1_Add_UE_MRDC_Capabilities = null;
      }

      // decode fr2_Add_UE_MRDC_Capabilities

      if (fr2_Add_UE_MRDC_CapabilitiesPresent) {
         buffer.getContext().eventDispatcher.startElement("fr2_Add_UE_MRDC_Capabilities", -1);

         fr2_Add_UE_MRDC_Capabilities = new UE_MRDC_CapabilityAddFRX_Mode();
         fr2_Add_UE_MRDC_Capabilities.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("fr2_Add_UE_MRDC_Capabilities", -1);
      }
      else {
         fr2_Add_UE_MRDC_Capabilities = null;
      }

      // decode featureSetCombinations

      if (featureSetCombinationsPresent) {
         buffer.getContext().eventDispatcher.startElement("featureSetCombinations", -1);

         featureSetCombinations = new UE_MRDC_Capability_featureSetCombinations();
         featureSetCombinations.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("featureSetCombinations", -1);
      }
      else {
         featureSetCombinations = null;
      }

      // decode pdcp_ParametersMRDC_v1530

      if (pdcp_ParametersMRDC_v1530Present) {
         buffer.getContext().eventDispatcher.startElement("pdcp_ParametersMRDC_v1530", -1);

         pdcp_ParametersMRDC_v1530 = new PDCP_ParametersMRDC();
         pdcp_ParametersMRDC_v1530.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("pdcp_ParametersMRDC_v1530", -1);
      }
      else {
         pdcp_ParametersMRDC_v1530 = null;
      }

      // decode lateNonCriticalExtension

      if (lateNonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("lateNonCriticalExtension", -1);

         lateNonCriticalExtension = new Asn1OctetString();
         lateNonCriticalExtension.decode (buffer);

         buffer.invokeCharacters(lateNonCriticalExtension.toString());
         buffer.getContext().eventDispatcher.endElement("lateNonCriticalExtension", -1);
      }
      else {
         lateNonCriticalExtension = null;
      }

      // decode nonCriticalExtension

      if (nonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension = new UE_MRDC_Capability_v1560();
         nonCriticalExtension.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }
      else {
         nonCriticalExtension = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((measAndMobParametersMRDC != null), null);
      buffer.encodeBit ((phy_ParametersMRDC_v1530 != null), null);
      buffer.encodeBit ((generalParametersMRDC != null), null);
      buffer.encodeBit ((fdd_Add_UE_MRDC_Capabilities != null), null);
      buffer.encodeBit ((tdd_Add_UE_MRDC_Capabilities != null), null);
      buffer.encodeBit ((fr1_Add_UE_MRDC_Capabilities != null), null);
      buffer.encodeBit ((fr2_Add_UE_MRDC_Capabilities != null), null);
      buffer.encodeBit ((featureSetCombinations != null), null);
      buffer.encodeBit ((pdcp_ParametersMRDC_v1530 != null), null);
      buffer.encodeBit ((lateNonCriticalExtension != null), null);
      buffer.encodeBit ((nonCriticalExtension != null), null);

      // encode measAndMobParametersMRDC

      if (measAndMobParametersMRDC != null) {
         buffer.getContext().eventDispatcher.startElement("measAndMobParametersMRDC", -1);

         measAndMobParametersMRDC.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("measAndMobParametersMRDC", -1);
      }

      // encode phy_ParametersMRDC_v1530

      if (phy_ParametersMRDC_v1530 != null) {
         buffer.getContext().eventDispatcher.startElement("phy_ParametersMRDC_v1530", -1);

         phy_ParametersMRDC_v1530.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("phy_ParametersMRDC_v1530", -1);
      }

      // encode rf_ParametersMRDC

      if (rf_ParametersMRDC != null) {
         buffer.getContext().eventDispatcher.startElement("rf_ParametersMRDC", -1);

         rf_ParametersMRDC.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("rf_ParametersMRDC", -1);
      }
      else throw new Asn1MissingRequiredException ("rf_ParametersMRDC");

      // encode generalParametersMRDC

      if (generalParametersMRDC != null) {
         buffer.getContext().eventDispatcher.startElement("generalParametersMRDC", -1);

         generalParametersMRDC.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("generalParametersMRDC", -1);
      }

      // encode fdd_Add_UE_MRDC_Capabilities

      if (fdd_Add_UE_MRDC_Capabilities != null) {
         buffer.getContext().eventDispatcher.startElement("fdd_Add_UE_MRDC_Capabilities", -1);

         fdd_Add_UE_MRDC_Capabilities.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("fdd_Add_UE_MRDC_Capabilities", -1);
      }

      // encode tdd_Add_UE_MRDC_Capabilities

      if (tdd_Add_UE_MRDC_Capabilities != null) {
         buffer.getContext().eventDispatcher.startElement("tdd_Add_UE_MRDC_Capabilities", -1);

         tdd_Add_UE_MRDC_Capabilities.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("tdd_Add_UE_MRDC_Capabilities", -1);
      }

      // encode fr1_Add_UE_MRDC_Capabilities

      if (fr1_Add_UE_MRDC_Capabilities != null) {
         buffer.getContext().eventDispatcher.startElement("fr1_Add_UE_MRDC_Capabilities", -1);

         fr1_Add_UE_MRDC_Capabilities.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("fr1_Add_UE_MRDC_Capabilities", -1);
      }

      // encode fr2_Add_UE_MRDC_Capabilities

      if (fr2_Add_UE_MRDC_Capabilities != null) {
         buffer.getContext().eventDispatcher.startElement("fr2_Add_UE_MRDC_Capabilities", -1);

         fr2_Add_UE_MRDC_Capabilities.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("fr2_Add_UE_MRDC_Capabilities", -1);
      }

      // encode featureSetCombinations

      if (featureSetCombinations != null) {
         buffer.getContext().eventDispatcher.startElement("featureSetCombinations", -1);

         featureSetCombinations.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("featureSetCombinations", -1);
      }

      // encode pdcp_ParametersMRDC_v1530

      if (pdcp_ParametersMRDC_v1530 != null) {
         buffer.getContext().eventDispatcher.startElement("pdcp_ParametersMRDC_v1530", -1);

         pdcp_ParametersMRDC_v1530.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("pdcp_ParametersMRDC_v1530", -1);
      }

      // encode lateNonCriticalExtension

      if (lateNonCriticalExtension != null) {
         buffer.getContext().eventDispatcher.startElement("lateNonCriticalExtension", -1);

         lateNonCriticalExtension.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("lateNonCriticalExtension", -1);
      }

      // encode nonCriticalExtension

      if (nonCriticalExtension != null) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (measAndMobParametersMRDC != null) measAndMobParametersMRDC.print (_sb, "measAndMobParametersMRDC", _level+1);
      if (phy_ParametersMRDC_v1530 != null) phy_ParametersMRDC_v1530.print (_sb, "phy_ParametersMRDC_v1530", _level+1);
      if (rf_ParametersMRDC != null) rf_ParametersMRDC.print (_sb, "rf_ParametersMRDC", _level+1);
      if (generalParametersMRDC != null) generalParametersMRDC.print (_sb, "generalParametersMRDC", _level+1);
      if (fdd_Add_UE_MRDC_Capabilities != null) fdd_Add_UE_MRDC_Capabilities.print (_sb, "fdd_Add_UE_MRDC_Capabilities", _level+1);
      if (tdd_Add_UE_MRDC_Capabilities != null) tdd_Add_UE_MRDC_Capabilities.print (_sb, "tdd_Add_UE_MRDC_Capabilities", _level+1);
      if (fr1_Add_UE_MRDC_Capabilities != null) fr1_Add_UE_MRDC_Capabilities.print (_sb, "fr1_Add_UE_MRDC_Capabilities", _level+1);
      if (fr2_Add_UE_MRDC_Capabilities != null) fr2_Add_UE_MRDC_Capabilities.print (_sb, "fr2_Add_UE_MRDC_Capabilities", _level+1);
      if (featureSetCombinations != null) featureSetCombinations.print (_sb, "featureSetCombinations", _level+1);
      if (pdcp_ParametersMRDC_v1530 != null) pdcp_ParametersMRDC_v1530.print (_sb, "pdcp_ParametersMRDC_v1530", _level+1);
      if (lateNonCriticalExtension != null) lateNonCriticalExtension.print (_sb, "lateNonCriticalExtension", _level+1);
      if (nonCriticalExtension != null) nonCriticalExtension.print (_sb, "nonCriticalExtension", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
