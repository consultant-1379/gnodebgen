/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MeasConfig extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "MeasConfig";
   }

   public MeasObjectToRemoveList measObjectToRemoveList;  // optional
   public MeasObjectToAddModList measObjectToAddModList;  // optional
   public ReportConfigToRemoveList reportConfigToRemoveList;  // optional
   public ReportConfigToAddModList reportConfigToAddModList;  // optional
   public MeasIdToRemoveList measIdToRemoveList;  // optional
   public MeasIdToAddModList measIdToAddModList;  // optional
   public MeasConfig_s_MeasureConfig s_MeasureConfig;  // optional
   public QuantityConfig quantityConfig;  // optional
   public MeasGapConfig measGapConfig;  // optional
   public MeasGapSharingConfig measGapSharingConfig;  // optional
   public boolean mV2ExtPresent;
   public MeasConfig_interFrequencyConfig_NoGap_r16 interFrequencyConfig_NoGap_r16 = null;  // optional
   public Asn1OpenExt extElem1;

   public MeasConfig () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MeasConfig (
      MeasObjectToRemoveList measObjectToRemoveList_,
      MeasObjectToAddModList measObjectToAddModList_,
      ReportConfigToRemoveList reportConfigToRemoveList_,
      ReportConfigToAddModList reportConfigToAddModList_,
      MeasIdToRemoveList measIdToRemoveList_,
      MeasIdToAddModList measIdToAddModList_,
      MeasConfig_s_MeasureConfig s_MeasureConfig_,
      QuantityConfig quantityConfig_,
      MeasGapConfig measGapConfig_,
      MeasGapSharingConfig measGapSharingConfig_,
      MeasConfig_interFrequencyConfig_NoGap_r16 interFrequencyConfig_NoGap_r16_
   ) {
      super();
      measObjectToRemoveList = measObjectToRemoveList_;
      measObjectToAddModList = measObjectToAddModList_;
      reportConfigToRemoveList = reportConfigToRemoveList_;
      reportConfigToAddModList = reportConfigToAddModList_;
      measIdToRemoveList = measIdToRemoveList_;
      measIdToAddModList = measIdToAddModList_;
      s_MeasureConfig = s_MeasureConfig_;
      quantityConfig = quantityConfig_;
      measGapConfig = measGapConfig_;
      measGapSharingConfig = measGapSharingConfig_;
      interFrequencyConfig_NoGap_r16 = interFrequencyConfig_NoGap_r16_;
   }

   public void init () {
      measObjectToRemoveList = null;
      measObjectToAddModList = null;
      reportConfigToRemoveList = null;
      reportConfigToAddModList = null;
      measIdToRemoveList = null;
      measIdToAddModList = null;
      s_MeasureConfig = null;
      quantityConfig = null;
      measGapConfig = null;
      measGapSharingConfig = null;
      interFrequencyConfig_NoGap_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 12; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return measObjectToRemoveList;
         case 1: return measObjectToAddModList;
         case 2: return reportConfigToRemoveList;
         case 3: return reportConfigToAddModList;
         case 4: return measIdToRemoveList;
         case 5: return measIdToAddModList;
         case 6: return s_MeasureConfig;
         case 7: return quantityConfig;
         case 8: return measGapConfig;
         case 9: return measGapSharingConfig;
         case 10: return interFrequencyConfig_NoGap_r16;
         case 11: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "measObjectToRemoveList";
         case 1: return "measObjectToAddModList";
         case 2: return "reportConfigToRemoveList";
         case 3: return "reportConfigToAddModList";
         case 4: return "measIdToRemoveList";
         case 5: return "measIdToAddModList";
         case 6: return "s-MeasureConfig";
         case 7: return "quantityConfig";
         case 8: return "measGapConfig";
         case 9: return "measGapSharingConfig";
         case 10: return "interFrequencyConfig-NoGap-r16";
         case 11: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean measObjectToRemoveListPresent = buffer.decodeBit ("measObjectToRemoveListPresent");
      boolean measObjectToAddModListPresent = buffer.decodeBit ("measObjectToAddModListPresent");
      boolean reportConfigToRemoveListPresent = buffer.decodeBit ("reportConfigToRemoveListPresent");
      boolean reportConfigToAddModListPresent = buffer.decodeBit ("reportConfigToAddModListPresent");
      boolean measIdToRemoveListPresent = buffer.decodeBit ("measIdToRemoveListPresent");
      boolean measIdToAddModListPresent = buffer.decodeBit ("measIdToAddModListPresent");
      boolean s_MeasureConfigPresent = buffer.decodeBit ("s_MeasureConfigPresent");
      boolean quantityConfigPresent = buffer.decodeBit ("quantityConfigPresent");
      boolean measGapConfigPresent = buffer.decodeBit ("measGapConfigPresent");
      boolean measGapSharingConfigPresent = buffer.decodeBit ("measGapSharingConfigPresent");

      // decode measObjectToRemoveList

      if (measObjectToRemoveListPresent) {
         buffer.getContext().eventDispatcher.startElement("measObjectToRemoveList", -1);

         measObjectToRemoveList = new MeasObjectToRemoveList();
         measObjectToRemoveList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("measObjectToRemoveList", -1);
      }
      else {
         measObjectToRemoveList = null;
      }

      // decode measObjectToAddModList

      if (measObjectToAddModListPresent) {
         buffer.getContext().eventDispatcher.startElement("measObjectToAddModList", -1);

         measObjectToAddModList = new MeasObjectToAddModList();
         measObjectToAddModList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("measObjectToAddModList", -1);
      }
      else {
         measObjectToAddModList = null;
      }

      // decode reportConfigToRemoveList

      if (reportConfigToRemoveListPresent) {
         buffer.getContext().eventDispatcher.startElement("reportConfigToRemoveList", -1);

         reportConfigToRemoveList = new ReportConfigToRemoveList();
         reportConfigToRemoveList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("reportConfigToRemoveList", -1);
      }
      else {
         reportConfigToRemoveList = null;
      }

      // decode reportConfigToAddModList

      if (reportConfigToAddModListPresent) {
         buffer.getContext().eventDispatcher.startElement("reportConfigToAddModList", -1);

         reportConfigToAddModList = new ReportConfigToAddModList();
         reportConfigToAddModList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("reportConfigToAddModList", -1);
      }
      else {
         reportConfigToAddModList = null;
      }

      // decode measIdToRemoveList

      if (measIdToRemoveListPresent) {
         buffer.getContext().eventDispatcher.startElement("measIdToRemoveList", -1);

         measIdToRemoveList = new MeasIdToRemoveList();
         measIdToRemoveList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("measIdToRemoveList", -1);
      }
      else {
         measIdToRemoveList = null;
      }

      // decode measIdToAddModList

      if (measIdToAddModListPresent) {
         buffer.getContext().eventDispatcher.startElement("measIdToAddModList", -1);

         measIdToAddModList = new MeasIdToAddModList();
         measIdToAddModList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("measIdToAddModList", -1);
      }
      else {
         measIdToAddModList = null;
      }

      // decode s_MeasureConfig

      if (s_MeasureConfigPresent) {
         buffer.getContext().eventDispatcher.startElement("s_MeasureConfig", -1);

         s_MeasureConfig = new MeasConfig_s_MeasureConfig();
         s_MeasureConfig.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("s_MeasureConfig", -1);
      }
      else {
         s_MeasureConfig = null;
      }

      // decode quantityConfig

      if (quantityConfigPresent) {
         buffer.getContext().eventDispatcher.startElement("quantityConfig", -1);

         quantityConfig = new QuantityConfig();
         quantityConfig.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("quantityConfig", -1);
      }
      else {
         quantityConfig = null;
      }

      // decode measGapConfig

      if (measGapConfigPresent) {
         buffer.getContext().eventDispatcher.startElement("measGapConfig", -1);

         measGapConfig = new MeasGapConfig();
         measGapConfig.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("measGapConfig", -1);
      }
      else {
         measGapConfig = null;
      }

      // decode measGapSharingConfig

      if (measGapSharingConfigPresent) {
         buffer.getContext().eventDispatcher.startElement("measGapSharingConfig", -1);

         measGapSharingConfig = new MeasGapSharingConfig();
         measGapSharingConfig.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("measGapSharingConfig", -1);
      }
      else {
         measGapSharingConfig = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean interFrequencyConfig_NoGap_r16Present = buffer.decodeBit ("interFrequencyConfig_NoGap_r16Present");

            // decode interFrequencyConfig_NoGap_r16

            if (interFrequencyConfig_NoGap_r16Present) {
               buffer.getContext().eventDispatcher.startElement("interFrequencyConfig_NoGap_r16", -1);

               int tval = MeasConfig_interFrequencyConfig_NoGap_r16.decodeEnumValue (buffer);
               interFrequencyConfig_NoGap_r16 = MeasConfig_interFrequencyConfig_NoGap_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("interFrequencyConfig_NoGap_r16", -1);
            }
            else {
               interFrequencyConfig_NoGap_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (mV2ExtPresent ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((measObjectToRemoveList != null), null);
      buffer.encodeBit ((measObjectToAddModList != null), null);
      buffer.encodeBit ((reportConfigToRemoveList != null), null);
      buffer.encodeBit ((reportConfigToAddModList != null), null);
      buffer.encodeBit ((measIdToRemoveList != null), null);
      buffer.encodeBit ((measIdToAddModList != null), null);
      buffer.encodeBit ((s_MeasureConfig != null), null);
      buffer.encodeBit ((quantityConfig != null), null);
      buffer.encodeBit ((measGapConfig != null), null);
      buffer.encodeBit ((measGapSharingConfig != null), null);

      // encode measObjectToRemoveList

      if (measObjectToRemoveList != null) {
         buffer.getContext().eventDispatcher.startElement("measObjectToRemoveList", -1);

         measObjectToRemoveList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("measObjectToRemoveList", -1);
      }

      // encode measObjectToAddModList

      if (measObjectToAddModList != null) {
         buffer.getContext().eventDispatcher.startElement("measObjectToAddModList", -1);

         measObjectToAddModList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("measObjectToAddModList", -1);
      }

      // encode reportConfigToRemoveList

      if (reportConfigToRemoveList != null) {
         buffer.getContext().eventDispatcher.startElement("reportConfigToRemoveList", -1);

         reportConfigToRemoveList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("reportConfigToRemoveList", -1);
      }

      // encode reportConfigToAddModList

      if (reportConfigToAddModList != null) {
         buffer.getContext().eventDispatcher.startElement("reportConfigToAddModList", -1);

         reportConfigToAddModList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("reportConfigToAddModList", -1);
      }

      // encode measIdToRemoveList

      if (measIdToRemoveList != null) {
         buffer.getContext().eventDispatcher.startElement("measIdToRemoveList", -1);

         measIdToRemoveList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("measIdToRemoveList", -1);
      }

      // encode measIdToAddModList

      if (measIdToAddModList != null) {
         buffer.getContext().eventDispatcher.startElement("measIdToAddModList", -1);

         measIdToAddModList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("measIdToAddModList", -1);
      }

      // encode s_MeasureConfig

      if (s_MeasureConfig != null) {
         buffer.getContext().eventDispatcher.startElement("s_MeasureConfig", -1);

         s_MeasureConfig.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("s_MeasureConfig", -1);
      }

      // encode quantityConfig

      if (quantityConfig != null) {
         buffer.getContext().eventDispatcher.startElement("quantityConfig", -1);

         quantityConfig.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("quantityConfig", -1);
      }

      // encode measGapConfig

      if (measGapConfig != null) {
         buffer.getContext().eventDispatcher.startElement("measGapConfig", -1);

         measGapConfig.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("measGapConfig", -1);
      }

      // encode measGapSharingConfig

      if (measGapSharingConfig != null) {
         buffer.getContext().eventDispatcher.startElement("measGapSharingConfig", -1);

         measGapSharingConfig.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("measGapSharingConfig", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 1;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit (mV2ExtPresent, null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         if (mV2ExtPresent) {
            buffer.reset();
            buffer.encodeBit ((interFrequencyConfig_NoGap_r16 != null), "optbit");
            if (interFrequencyConfig_NoGap_r16 != null) {
               interFrequencyConfig_NoGap_r16.encode (buffer);
            }
            mainBuffer.encodeOpenType (buffer, null);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (measObjectToRemoveList != null) measObjectToRemoveList.print (_sb, "measObjectToRemoveList", _level+1);
      if (measObjectToAddModList != null) measObjectToAddModList.print (_sb, "measObjectToAddModList", _level+1);
      if (reportConfigToRemoveList != null) reportConfigToRemoveList.print (_sb, "reportConfigToRemoveList", _level+1);
      if (reportConfigToAddModList != null) reportConfigToAddModList.print (_sb, "reportConfigToAddModList", _level+1);
      if (measIdToRemoveList != null) measIdToRemoveList.print (_sb, "measIdToRemoveList", _level+1);
      if (measIdToAddModList != null) measIdToAddModList.print (_sb, "measIdToAddModList", _level+1);
      if (s_MeasureConfig != null) s_MeasureConfig.print (_sb, "s_MeasureConfig", _level+1);
      if (quantityConfig != null) quantityConfig.print (_sb, "quantityConfig", _level+1);
      if (measGapConfig != null) measGapConfig.print (_sb, "measGapConfig", _level+1);
      if (measGapSharingConfig != null) measGapSharingConfig.print (_sb, "measGapSharingConfig", _level+1);
      if (interFrequencyConfig_NoGap_r16 != null) interFrequencyConfig_NoGap_r16.print (_sb, "interFrequencyConfig_NoGap_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
