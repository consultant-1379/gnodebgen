/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class CodebookConfig_codebookType_type2 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public CodebookConfig_codebookType_type2_subType subType;
   public CodebookConfig_codebookType_type2_phaseAlphabetSize phaseAlphabetSize = null;
   public Asn1Boolean subbandAmplitude;
   public CodebookConfig_codebookType_type2_numberOfBeams numberOfBeams = null;

   public CodebookConfig_codebookType_type2 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CodebookConfig_codebookType_type2 (
      CodebookConfig_codebookType_type2_subType subType_,
      CodebookConfig_codebookType_type2_phaseAlphabetSize phaseAlphabetSize_,
      Asn1Boolean subbandAmplitude_,
      CodebookConfig_codebookType_type2_numberOfBeams numberOfBeams_
   ) {
      super();
      subType = subType_;
      phaseAlphabetSize = phaseAlphabetSize_;
      subbandAmplitude = subbandAmplitude_;
      numberOfBeams = numberOfBeams_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public CodebookConfig_codebookType_type2 (CodebookConfig_codebookType_type2_subType subType_,
      CodebookConfig_codebookType_type2_phaseAlphabetSize phaseAlphabetSize_,
      boolean subbandAmplitude_,
      CodebookConfig_codebookType_type2_numberOfBeams numberOfBeams_
   ) {
      super();
      subType = subType_;
      phaseAlphabetSize = phaseAlphabetSize_;
      subbandAmplitude = new Asn1Boolean (subbandAmplitude_);
      numberOfBeams = numberOfBeams_;
   }

   public void init () {
      subType = null;
      phaseAlphabetSize = null;
      subbandAmplitude = null;
      numberOfBeams = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return subType;
         case 1: return phaseAlphabetSize;
         case 2: return subbandAmplitude;
         case 3: return numberOfBeams;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "subType";
         case 1: return "phaseAlphabetSize";
         case 2: return "subbandAmplitude";
         case 3: return "numberOfBeams";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode subType

      buffer.getContext().eventDispatcher.startElement("subType", -1);

      subType = new CodebookConfig_codebookType_type2_subType();
      subType.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("subType", -1);

      // decode phaseAlphabetSize

      buffer.getContext().eventDispatcher.startElement("phaseAlphabetSize", -1);

      {
         int tval = CodebookConfig_codebookType_type2_phaseAlphabetSize.decodeEnumValue (buffer);
         phaseAlphabetSize = CodebookConfig_codebookType_type2_phaseAlphabetSize.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("phaseAlphabetSize", -1);

      // decode subbandAmplitude

      buffer.getContext().eventDispatcher.startElement("subbandAmplitude", -1);

      subbandAmplitude = new Asn1Boolean();
      subbandAmplitude.decode (buffer);

      buffer.invokeCharacters(subbandAmplitude.toString());
      buffer.getContext().eventDispatcher.endElement("subbandAmplitude", -1);

      // decode numberOfBeams

      buffer.getContext().eventDispatcher.startElement("numberOfBeams", -1);

      {
         int tval = CodebookConfig_codebookType_type2_numberOfBeams.decodeEnumValue (buffer);
         numberOfBeams = CodebookConfig_codebookType_type2_numberOfBeams.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("numberOfBeams", -1);

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode subType

      if (subType != null) {
         buffer.getContext().eventDispatcher.startElement("subType", -1);

         subType.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("subType", -1);
      }
      else throw new Asn1MissingRequiredException ("subType");

      // encode phaseAlphabetSize

      if (phaseAlphabetSize != null) {
         buffer.getContext().eventDispatcher.startElement("phaseAlphabetSize", -1);

         phaseAlphabetSize.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("phaseAlphabetSize", -1);
      }
      else throw new Asn1MissingRequiredException ("phaseAlphabetSize");

      // encode subbandAmplitude

      if (subbandAmplitude != null) {
         buffer.getContext().eventDispatcher.startElement("subbandAmplitude", -1);

         subbandAmplitude.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("subbandAmplitude", -1);
      }
      else throw new Asn1MissingRequiredException ("subbandAmplitude");

      // encode numberOfBeams

      if (numberOfBeams != null) {
         buffer.getContext().eventDispatcher.startElement("numberOfBeams", -1);

         numberOfBeams.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("numberOfBeams", -1);
      }
      else throw new Asn1MissingRequiredException ("numberOfBeams");

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (subType != null) subType.print (_sb, "subType", _level+1);
      if (phaseAlphabetSize != null) phaseAlphabetSize.print (_sb, "phaseAlphabetSize", _level+1);
      if (subbandAmplitude != null) subbandAmplitude.print (_sb, "subbandAmplitude", _level+1);
      if (numberOfBeams != null) numberOfBeams.print (_sb, "numberOfBeams", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
