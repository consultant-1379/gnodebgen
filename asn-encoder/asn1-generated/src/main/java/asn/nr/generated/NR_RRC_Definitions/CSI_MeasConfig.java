/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class CSI_MeasConfig extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CSI-MeasConfig";
   }

   public CSI_MeasConfig_nzp_CSI_RS_ResourceToAddModList nzp_CSI_RS_ResourceToAddModList;  // optional
   public CSI_MeasConfig_nzp_CSI_RS_ResourceToReleaseList nzp_CSI_RS_ResourceToReleaseList;  // optional
   public CSI_MeasConfig_nzp_CSI_RS_ResourceSetToAddModList nzp_CSI_RS_ResourceSetToAddModList;  // optional
   public CSI_MeasConfig_nzp_CSI_RS_ResourceSetToReleaseList nzp_CSI_RS_ResourceSetToReleaseList;  // optional
   public CSI_MeasConfig_csi_IM_ResourceToAddModList csi_IM_ResourceToAddModList;  // optional
   public CSI_MeasConfig_csi_IM_ResourceToReleaseList csi_IM_ResourceToReleaseList;  // optional
   public CSI_MeasConfig_csi_IM_ResourceSetToAddModList csi_IM_ResourceSetToAddModList;  // optional
   public CSI_MeasConfig_csi_IM_ResourceSetToReleaseList csi_IM_ResourceSetToReleaseList;  // optional
   public CSI_MeasConfig_csi_SSB_ResourceSetToAddModList csi_SSB_ResourceSetToAddModList;  // optional
   public CSI_MeasConfig_csi_SSB_ResourceSetToReleaseList csi_SSB_ResourceSetToReleaseList;  // optional
   public CSI_MeasConfig_csi_ResourceConfigToAddModList csi_ResourceConfigToAddModList;  // optional
   public CSI_MeasConfig_csi_ResourceConfigToReleaseList csi_ResourceConfigToReleaseList;  // optional
   public CSI_MeasConfig_csi_ReportConfigToAddModList csi_ReportConfigToAddModList;  // optional
   public CSI_MeasConfig_csi_ReportConfigToReleaseList csi_ReportConfigToReleaseList;  // optional
   public Asn1Integer reportTriggerSize;  // optional
   public CSI_MeasConfig_aperiodicTriggerStateList aperiodicTriggerStateList;  // optional
   public CSI_MeasConfig_semiPersistentOnPUSCH_TriggerStateList semiPersistentOnPUSCH_TriggerStateList;  // optional
   public boolean mV2ExtPresent;
   public Asn1Integer reportTriggerSizeDCI_0_2_r16;  // optional
   public Asn1OpenExt extElem1;

   public CSI_MeasConfig () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CSI_MeasConfig (
      CSI_MeasConfig_nzp_CSI_RS_ResourceToAddModList nzp_CSI_RS_ResourceToAddModList_,
      CSI_MeasConfig_nzp_CSI_RS_ResourceToReleaseList nzp_CSI_RS_ResourceToReleaseList_,
      CSI_MeasConfig_nzp_CSI_RS_ResourceSetToAddModList nzp_CSI_RS_ResourceSetToAddModList_,
      CSI_MeasConfig_nzp_CSI_RS_ResourceSetToReleaseList nzp_CSI_RS_ResourceSetToReleaseList_,
      CSI_MeasConfig_csi_IM_ResourceToAddModList csi_IM_ResourceToAddModList_,
      CSI_MeasConfig_csi_IM_ResourceToReleaseList csi_IM_ResourceToReleaseList_,
      CSI_MeasConfig_csi_IM_ResourceSetToAddModList csi_IM_ResourceSetToAddModList_,
      CSI_MeasConfig_csi_IM_ResourceSetToReleaseList csi_IM_ResourceSetToReleaseList_,
      CSI_MeasConfig_csi_SSB_ResourceSetToAddModList csi_SSB_ResourceSetToAddModList_,
      CSI_MeasConfig_csi_SSB_ResourceSetToReleaseList csi_SSB_ResourceSetToReleaseList_,
      CSI_MeasConfig_csi_ResourceConfigToAddModList csi_ResourceConfigToAddModList_,
      CSI_MeasConfig_csi_ResourceConfigToReleaseList csi_ResourceConfigToReleaseList_,
      CSI_MeasConfig_csi_ReportConfigToAddModList csi_ReportConfigToAddModList_,
      CSI_MeasConfig_csi_ReportConfigToReleaseList csi_ReportConfigToReleaseList_,
      Asn1Integer reportTriggerSize_,
      CSI_MeasConfig_aperiodicTriggerStateList aperiodicTriggerStateList_,
      CSI_MeasConfig_semiPersistentOnPUSCH_TriggerStateList semiPersistentOnPUSCH_TriggerStateList_,
      Asn1Integer reportTriggerSizeDCI_0_2_r16_
   ) {
      super();
      nzp_CSI_RS_ResourceToAddModList = nzp_CSI_RS_ResourceToAddModList_;
      nzp_CSI_RS_ResourceToReleaseList = nzp_CSI_RS_ResourceToReleaseList_;
      nzp_CSI_RS_ResourceSetToAddModList = nzp_CSI_RS_ResourceSetToAddModList_;
      nzp_CSI_RS_ResourceSetToReleaseList = nzp_CSI_RS_ResourceSetToReleaseList_;
      csi_IM_ResourceToAddModList = csi_IM_ResourceToAddModList_;
      csi_IM_ResourceToReleaseList = csi_IM_ResourceToReleaseList_;
      csi_IM_ResourceSetToAddModList = csi_IM_ResourceSetToAddModList_;
      csi_IM_ResourceSetToReleaseList = csi_IM_ResourceSetToReleaseList_;
      csi_SSB_ResourceSetToAddModList = csi_SSB_ResourceSetToAddModList_;
      csi_SSB_ResourceSetToReleaseList = csi_SSB_ResourceSetToReleaseList_;
      csi_ResourceConfigToAddModList = csi_ResourceConfigToAddModList_;
      csi_ResourceConfigToReleaseList = csi_ResourceConfigToReleaseList_;
      csi_ReportConfigToAddModList = csi_ReportConfigToAddModList_;
      csi_ReportConfigToReleaseList = csi_ReportConfigToReleaseList_;
      reportTriggerSize = reportTriggerSize_;
      aperiodicTriggerStateList = aperiodicTriggerStateList_;
      semiPersistentOnPUSCH_TriggerStateList = semiPersistentOnPUSCH_TriggerStateList_;
      reportTriggerSizeDCI_0_2_r16 = reportTriggerSizeDCI_0_2_r16_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public CSI_MeasConfig (CSI_MeasConfig_nzp_CSI_RS_ResourceToAddModList nzp_CSI_RS_ResourceToAddModList_,
      CSI_MeasConfig_nzp_CSI_RS_ResourceToReleaseList nzp_CSI_RS_ResourceToReleaseList_,
      CSI_MeasConfig_nzp_CSI_RS_ResourceSetToAddModList nzp_CSI_RS_ResourceSetToAddModList_,
      CSI_MeasConfig_nzp_CSI_RS_ResourceSetToReleaseList nzp_CSI_RS_ResourceSetToReleaseList_,
      CSI_MeasConfig_csi_IM_ResourceToAddModList csi_IM_ResourceToAddModList_,
      CSI_MeasConfig_csi_IM_ResourceToReleaseList csi_IM_ResourceToReleaseList_,
      CSI_MeasConfig_csi_IM_ResourceSetToAddModList csi_IM_ResourceSetToAddModList_,
      CSI_MeasConfig_csi_IM_ResourceSetToReleaseList csi_IM_ResourceSetToReleaseList_,
      CSI_MeasConfig_csi_SSB_ResourceSetToAddModList csi_SSB_ResourceSetToAddModList_,
      CSI_MeasConfig_csi_SSB_ResourceSetToReleaseList csi_SSB_ResourceSetToReleaseList_,
      CSI_MeasConfig_csi_ResourceConfigToAddModList csi_ResourceConfigToAddModList_,
      CSI_MeasConfig_csi_ResourceConfigToReleaseList csi_ResourceConfigToReleaseList_,
      CSI_MeasConfig_csi_ReportConfigToAddModList csi_ReportConfigToAddModList_,
      CSI_MeasConfig_csi_ReportConfigToReleaseList csi_ReportConfigToReleaseList_,
      long reportTriggerSize_,
      CSI_MeasConfig_aperiodicTriggerStateList aperiodicTriggerStateList_,
      CSI_MeasConfig_semiPersistentOnPUSCH_TriggerStateList semiPersistentOnPUSCH_TriggerStateList_,
      long reportTriggerSizeDCI_0_2_r16_
   ) {
      super();
      nzp_CSI_RS_ResourceToAddModList = nzp_CSI_RS_ResourceToAddModList_;
      nzp_CSI_RS_ResourceToReleaseList = nzp_CSI_RS_ResourceToReleaseList_;
      nzp_CSI_RS_ResourceSetToAddModList = nzp_CSI_RS_ResourceSetToAddModList_;
      nzp_CSI_RS_ResourceSetToReleaseList = nzp_CSI_RS_ResourceSetToReleaseList_;
      csi_IM_ResourceToAddModList = csi_IM_ResourceToAddModList_;
      csi_IM_ResourceToReleaseList = csi_IM_ResourceToReleaseList_;
      csi_IM_ResourceSetToAddModList = csi_IM_ResourceSetToAddModList_;
      csi_IM_ResourceSetToReleaseList = csi_IM_ResourceSetToReleaseList_;
      csi_SSB_ResourceSetToAddModList = csi_SSB_ResourceSetToAddModList_;
      csi_SSB_ResourceSetToReleaseList = csi_SSB_ResourceSetToReleaseList_;
      csi_ResourceConfigToAddModList = csi_ResourceConfigToAddModList_;
      csi_ResourceConfigToReleaseList = csi_ResourceConfigToReleaseList_;
      csi_ReportConfigToAddModList = csi_ReportConfigToAddModList_;
      csi_ReportConfigToReleaseList = csi_ReportConfigToReleaseList_;
      reportTriggerSize = new Asn1Integer (reportTriggerSize_);
      aperiodicTriggerStateList = aperiodicTriggerStateList_;
      semiPersistentOnPUSCH_TriggerStateList = semiPersistentOnPUSCH_TriggerStateList_;
      reportTriggerSizeDCI_0_2_r16 = new Asn1Integer (reportTriggerSizeDCI_0_2_r16_);
   }

   public void init () {
      nzp_CSI_RS_ResourceToAddModList = null;
      nzp_CSI_RS_ResourceToReleaseList = null;
      nzp_CSI_RS_ResourceSetToAddModList = null;
      nzp_CSI_RS_ResourceSetToReleaseList = null;
      csi_IM_ResourceToAddModList = null;
      csi_IM_ResourceToReleaseList = null;
      csi_IM_ResourceSetToAddModList = null;
      csi_IM_ResourceSetToReleaseList = null;
      csi_SSB_ResourceSetToAddModList = null;
      csi_SSB_ResourceSetToReleaseList = null;
      csi_ResourceConfigToAddModList = null;
      csi_ResourceConfigToReleaseList = null;
      csi_ReportConfigToAddModList = null;
      csi_ReportConfigToReleaseList = null;
      reportTriggerSize = null;
      aperiodicTriggerStateList = null;
      semiPersistentOnPUSCH_TriggerStateList = null;
      reportTriggerSizeDCI_0_2_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 19; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return nzp_CSI_RS_ResourceToAddModList;
         case 1: return nzp_CSI_RS_ResourceToReleaseList;
         case 2: return nzp_CSI_RS_ResourceSetToAddModList;
         case 3: return nzp_CSI_RS_ResourceSetToReleaseList;
         case 4: return csi_IM_ResourceToAddModList;
         case 5: return csi_IM_ResourceToReleaseList;
         case 6: return csi_IM_ResourceSetToAddModList;
         case 7: return csi_IM_ResourceSetToReleaseList;
         case 8: return csi_SSB_ResourceSetToAddModList;
         case 9: return csi_SSB_ResourceSetToReleaseList;
         case 10: return csi_ResourceConfigToAddModList;
         case 11: return csi_ResourceConfigToReleaseList;
         case 12: return csi_ReportConfigToAddModList;
         case 13: return csi_ReportConfigToReleaseList;
         case 14: return reportTriggerSize;
         case 15: return aperiodicTriggerStateList;
         case 16: return semiPersistentOnPUSCH_TriggerStateList;
         case 17: return reportTriggerSizeDCI_0_2_r16;
         case 18: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "nzp-CSI-RS-ResourceToAddModList";
         case 1: return "nzp-CSI-RS-ResourceToReleaseList";
         case 2: return "nzp-CSI-RS-ResourceSetToAddModList";
         case 3: return "nzp-CSI-RS-ResourceSetToReleaseList";
         case 4: return "csi-IM-ResourceToAddModList";
         case 5: return "csi-IM-ResourceToReleaseList";
         case 6: return "csi-IM-ResourceSetToAddModList";
         case 7: return "csi-IM-ResourceSetToReleaseList";
         case 8: return "csi-SSB-ResourceSetToAddModList";
         case 9: return "csi-SSB-ResourceSetToReleaseList";
         case 10: return "csi-ResourceConfigToAddModList";
         case 11: return "csi-ResourceConfigToReleaseList";
         case 12: return "csi-ReportConfigToAddModList";
         case 13: return "csi-ReportConfigToReleaseList";
         case 14: return "reportTriggerSize";
         case 15: return "aperiodicTriggerStateList";
         case 16: return "semiPersistentOnPUSCH-TriggerStateList";
         case 17: return "reportTriggerSizeDCI-0-2-r16";
         case 18: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean nzp_CSI_RS_ResourceToAddModListPresent = buffer.decodeBit ("nzp_CSI_RS_ResourceToAddModListPresent");
      boolean nzp_CSI_RS_ResourceToReleaseListPresent = buffer.decodeBit ("nzp_CSI_RS_ResourceToReleaseListPresent");
      boolean nzp_CSI_RS_ResourceSetToAddModListPresent = buffer.decodeBit ("nzp_CSI_RS_ResourceSetToAddModListPresent");
      boolean nzp_CSI_RS_ResourceSetToReleaseListPresent = buffer.decodeBit ("nzp_CSI_RS_ResourceSetToReleaseListPresent");
      boolean csi_IM_ResourceToAddModListPresent = buffer.decodeBit ("csi_IM_ResourceToAddModListPresent");
      boolean csi_IM_ResourceToReleaseListPresent = buffer.decodeBit ("csi_IM_ResourceToReleaseListPresent");
      boolean csi_IM_ResourceSetToAddModListPresent = buffer.decodeBit ("csi_IM_ResourceSetToAddModListPresent");
      boolean csi_IM_ResourceSetToReleaseListPresent = buffer.decodeBit ("csi_IM_ResourceSetToReleaseListPresent");
      boolean csi_SSB_ResourceSetToAddModListPresent = buffer.decodeBit ("csi_SSB_ResourceSetToAddModListPresent");
      boolean csi_SSB_ResourceSetToReleaseListPresent = buffer.decodeBit ("csi_SSB_ResourceSetToReleaseListPresent");
      boolean csi_ResourceConfigToAddModListPresent = buffer.decodeBit ("csi_ResourceConfigToAddModListPresent");
      boolean csi_ResourceConfigToReleaseListPresent = buffer.decodeBit ("csi_ResourceConfigToReleaseListPresent");
      boolean csi_ReportConfigToAddModListPresent = buffer.decodeBit ("csi_ReportConfigToAddModListPresent");
      boolean csi_ReportConfigToReleaseListPresent = buffer.decodeBit ("csi_ReportConfigToReleaseListPresent");
      boolean reportTriggerSizePresent = buffer.decodeBit ("reportTriggerSizePresent");
      boolean aperiodicTriggerStateListPresent = buffer.decodeBit ("aperiodicTriggerStateListPresent");
      boolean semiPersistentOnPUSCH_TriggerStateListPresent = buffer.decodeBit ("semiPersistentOnPUSCH_TriggerStateListPresent");

      // decode nzp_CSI_RS_ResourceToAddModList

      if (nzp_CSI_RS_ResourceToAddModListPresent) {
         buffer.getContext().eventDispatcher.startElement("nzp_CSI_RS_ResourceToAddModList", -1);

         nzp_CSI_RS_ResourceToAddModList = new CSI_MeasConfig_nzp_CSI_RS_ResourceToAddModList();
         nzp_CSI_RS_ResourceToAddModList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nzp_CSI_RS_ResourceToAddModList", -1);
      }
      else {
         nzp_CSI_RS_ResourceToAddModList = null;
      }

      // decode nzp_CSI_RS_ResourceToReleaseList

      if (nzp_CSI_RS_ResourceToReleaseListPresent) {
         buffer.getContext().eventDispatcher.startElement("nzp_CSI_RS_ResourceToReleaseList", -1);

         nzp_CSI_RS_ResourceToReleaseList = new CSI_MeasConfig_nzp_CSI_RS_ResourceToReleaseList();
         nzp_CSI_RS_ResourceToReleaseList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nzp_CSI_RS_ResourceToReleaseList", -1);
      }
      else {
         nzp_CSI_RS_ResourceToReleaseList = null;
      }

      // decode nzp_CSI_RS_ResourceSetToAddModList

      if (nzp_CSI_RS_ResourceSetToAddModListPresent) {
         buffer.getContext().eventDispatcher.startElement("nzp_CSI_RS_ResourceSetToAddModList", -1);

         nzp_CSI_RS_ResourceSetToAddModList = new CSI_MeasConfig_nzp_CSI_RS_ResourceSetToAddModList();
         nzp_CSI_RS_ResourceSetToAddModList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nzp_CSI_RS_ResourceSetToAddModList", -1);
      }
      else {
         nzp_CSI_RS_ResourceSetToAddModList = null;
      }

      // decode nzp_CSI_RS_ResourceSetToReleaseList

      if (nzp_CSI_RS_ResourceSetToReleaseListPresent) {
         buffer.getContext().eventDispatcher.startElement("nzp_CSI_RS_ResourceSetToReleaseList", -1);

         nzp_CSI_RS_ResourceSetToReleaseList = new CSI_MeasConfig_nzp_CSI_RS_ResourceSetToReleaseList();
         nzp_CSI_RS_ResourceSetToReleaseList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nzp_CSI_RS_ResourceSetToReleaseList", -1);
      }
      else {
         nzp_CSI_RS_ResourceSetToReleaseList = null;
      }

      // decode csi_IM_ResourceToAddModList

      if (csi_IM_ResourceToAddModListPresent) {
         buffer.getContext().eventDispatcher.startElement("csi_IM_ResourceToAddModList", -1);

         csi_IM_ResourceToAddModList = new CSI_MeasConfig_csi_IM_ResourceToAddModList();
         csi_IM_ResourceToAddModList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("csi_IM_ResourceToAddModList", -1);
      }
      else {
         csi_IM_ResourceToAddModList = null;
      }

      // decode csi_IM_ResourceToReleaseList

      if (csi_IM_ResourceToReleaseListPresent) {
         buffer.getContext().eventDispatcher.startElement("csi_IM_ResourceToReleaseList", -1);

         csi_IM_ResourceToReleaseList = new CSI_MeasConfig_csi_IM_ResourceToReleaseList();
         csi_IM_ResourceToReleaseList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("csi_IM_ResourceToReleaseList", -1);
      }
      else {
         csi_IM_ResourceToReleaseList = null;
      }

      // decode csi_IM_ResourceSetToAddModList

      if (csi_IM_ResourceSetToAddModListPresent) {
         buffer.getContext().eventDispatcher.startElement("csi_IM_ResourceSetToAddModList", -1);

         csi_IM_ResourceSetToAddModList = new CSI_MeasConfig_csi_IM_ResourceSetToAddModList();
         csi_IM_ResourceSetToAddModList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("csi_IM_ResourceSetToAddModList", -1);
      }
      else {
         csi_IM_ResourceSetToAddModList = null;
      }

      // decode csi_IM_ResourceSetToReleaseList

      if (csi_IM_ResourceSetToReleaseListPresent) {
         buffer.getContext().eventDispatcher.startElement("csi_IM_ResourceSetToReleaseList", -1);

         csi_IM_ResourceSetToReleaseList = new CSI_MeasConfig_csi_IM_ResourceSetToReleaseList();
         csi_IM_ResourceSetToReleaseList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("csi_IM_ResourceSetToReleaseList", -1);
      }
      else {
         csi_IM_ResourceSetToReleaseList = null;
      }

      // decode csi_SSB_ResourceSetToAddModList

      if (csi_SSB_ResourceSetToAddModListPresent) {
         buffer.getContext().eventDispatcher.startElement("csi_SSB_ResourceSetToAddModList", -1);

         csi_SSB_ResourceSetToAddModList = new CSI_MeasConfig_csi_SSB_ResourceSetToAddModList();
         csi_SSB_ResourceSetToAddModList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("csi_SSB_ResourceSetToAddModList", -1);
      }
      else {
         csi_SSB_ResourceSetToAddModList = null;
      }

      // decode csi_SSB_ResourceSetToReleaseList

      if (csi_SSB_ResourceSetToReleaseListPresent) {
         buffer.getContext().eventDispatcher.startElement("csi_SSB_ResourceSetToReleaseList", -1);

         csi_SSB_ResourceSetToReleaseList = new CSI_MeasConfig_csi_SSB_ResourceSetToReleaseList();
         csi_SSB_ResourceSetToReleaseList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("csi_SSB_ResourceSetToReleaseList", -1);
      }
      else {
         csi_SSB_ResourceSetToReleaseList = null;
      }

      // decode csi_ResourceConfigToAddModList

      if (csi_ResourceConfigToAddModListPresent) {
         buffer.getContext().eventDispatcher.startElement("csi_ResourceConfigToAddModList", -1);

         csi_ResourceConfigToAddModList = new CSI_MeasConfig_csi_ResourceConfigToAddModList();
         csi_ResourceConfigToAddModList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("csi_ResourceConfigToAddModList", -1);
      }
      else {
         csi_ResourceConfigToAddModList = null;
      }

      // decode csi_ResourceConfigToReleaseList

      if (csi_ResourceConfigToReleaseListPresent) {
         buffer.getContext().eventDispatcher.startElement("csi_ResourceConfigToReleaseList", -1);

         csi_ResourceConfigToReleaseList = new CSI_MeasConfig_csi_ResourceConfigToReleaseList();
         csi_ResourceConfigToReleaseList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("csi_ResourceConfigToReleaseList", -1);
      }
      else {
         csi_ResourceConfigToReleaseList = null;
      }

      // decode csi_ReportConfigToAddModList

      if (csi_ReportConfigToAddModListPresent) {
         buffer.getContext().eventDispatcher.startElement("csi_ReportConfigToAddModList", -1);

         csi_ReportConfigToAddModList = new CSI_MeasConfig_csi_ReportConfigToAddModList();
         csi_ReportConfigToAddModList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("csi_ReportConfigToAddModList", -1);
      }
      else {
         csi_ReportConfigToAddModList = null;
      }

      // decode csi_ReportConfigToReleaseList

      if (csi_ReportConfigToReleaseListPresent) {
         buffer.getContext().eventDispatcher.startElement("csi_ReportConfigToReleaseList", -1);

         csi_ReportConfigToReleaseList = new CSI_MeasConfig_csi_ReportConfigToReleaseList();
         csi_ReportConfigToReleaseList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("csi_ReportConfigToReleaseList", -1);
      }
      else {
         csi_ReportConfigToReleaseList = null;
      }

      // decode reportTriggerSize

      if (reportTriggerSizePresent) {
         buffer.getContext().eventDispatcher.startElement("reportTriggerSize", -1);

         reportTriggerSize = new Asn1Integer();
         reportTriggerSize.decode (buffer, 0, 6);

         buffer.invokeCharacters(reportTriggerSize.toString());
         buffer.getContext().eventDispatcher.endElement("reportTriggerSize", -1);
      }
      else {
         reportTriggerSize = null;
      }

      // decode aperiodicTriggerStateList

      if (aperiodicTriggerStateListPresent) {
         buffer.getContext().eventDispatcher.startElement("aperiodicTriggerStateList", -1);

         aperiodicTriggerStateList = new CSI_MeasConfig_aperiodicTriggerStateList();
         aperiodicTriggerStateList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("aperiodicTriggerStateList", -1);
      }
      else {
         aperiodicTriggerStateList = null;
      }

      // decode semiPersistentOnPUSCH_TriggerStateList

      if (semiPersistentOnPUSCH_TriggerStateListPresent) {
         buffer.getContext().eventDispatcher.startElement("semiPersistentOnPUSCH_TriggerStateList", -1);

         semiPersistentOnPUSCH_TriggerStateList = new CSI_MeasConfig_semiPersistentOnPUSCH_TriggerStateList();
         semiPersistentOnPUSCH_TriggerStateList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("semiPersistentOnPUSCH_TriggerStateList", -1);
      }
      else {
         semiPersistentOnPUSCH_TriggerStateList = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean reportTriggerSizeDCI_0_2_r16Present = buffer.decodeBit ("reportTriggerSizeDCI_0_2_r16Present");

            // decode reportTriggerSizeDCI_0_2_r16

            if (reportTriggerSizeDCI_0_2_r16Present) {
               buffer.getContext().eventDispatcher.startElement("reportTriggerSizeDCI_0_2_r16", -1);

               reportTriggerSizeDCI_0_2_r16 = new Asn1Integer();
               reportTriggerSizeDCI_0_2_r16.decode (buffer, 0, 6);

               buffer.invokeCharacters(reportTriggerSizeDCI_0_2_r16.toString());
               buffer.getContext().eventDispatcher.endElement("reportTriggerSizeDCI_0_2_r16", -1);
            }
            else {
               reportTriggerSizeDCI_0_2_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (mV2ExtPresent ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((nzp_CSI_RS_ResourceToAddModList != null), null);
      buffer.encodeBit ((nzp_CSI_RS_ResourceToReleaseList != null), null);
      buffer.encodeBit ((nzp_CSI_RS_ResourceSetToAddModList != null), null);
      buffer.encodeBit ((nzp_CSI_RS_ResourceSetToReleaseList != null), null);
      buffer.encodeBit ((csi_IM_ResourceToAddModList != null), null);
      buffer.encodeBit ((csi_IM_ResourceToReleaseList != null), null);
      buffer.encodeBit ((csi_IM_ResourceSetToAddModList != null), null);
      buffer.encodeBit ((csi_IM_ResourceSetToReleaseList != null), null);
      buffer.encodeBit ((csi_SSB_ResourceSetToAddModList != null), null);
      buffer.encodeBit ((csi_SSB_ResourceSetToReleaseList != null), null);
      buffer.encodeBit ((csi_ResourceConfigToAddModList != null), null);
      buffer.encodeBit ((csi_ResourceConfigToReleaseList != null), null);
      buffer.encodeBit ((csi_ReportConfigToAddModList != null), null);
      buffer.encodeBit ((csi_ReportConfigToReleaseList != null), null);
      buffer.encodeBit ((reportTriggerSize != null), null);
      buffer.encodeBit ((aperiodicTriggerStateList != null), null);
      buffer.encodeBit ((semiPersistentOnPUSCH_TriggerStateList != null), null);

      // encode nzp_CSI_RS_ResourceToAddModList

      if (nzp_CSI_RS_ResourceToAddModList != null) {
         buffer.getContext().eventDispatcher.startElement("nzp_CSI_RS_ResourceToAddModList", -1);

         nzp_CSI_RS_ResourceToAddModList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("nzp_CSI_RS_ResourceToAddModList", -1);
      }

      // encode nzp_CSI_RS_ResourceToReleaseList

      if (nzp_CSI_RS_ResourceToReleaseList != null) {
         buffer.getContext().eventDispatcher.startElement("nzp_CSI_RS_ResourceToReleaseList", -1);

         nzp_CSI_RS_ResourceToReleaseList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("nzp_CSI_RS_ResourceToReleaseList", -1);
      }

      // encode nzp_CSI_RS_ResourceSetToAddModList

      if (nzp_CSI_RS_ResourceSetToAddModList != null) {
         buffer.getContext().eventDispatcher.startElement("nzp_CSI_RS_ResourceSetToAddModList", -1);

         nzp_CSI_RS_ResourceSetToAddModList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("nzp_CSI_RS_ResourceSetToAddModList", -1);
      }

      // encode nzp_CSI_RS_ResourceSetToReleaseList

      if (nzp_CSI_RS_ResourceSetToReleaseList != null) {
         buffer.getContext().eventDispatcher.startElement("nzp_CSI_RS_ResourceSetToReleaseList", -1);

         nzp_CSI_RS_ResourceSetToReleaseList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("nzp_CSI_RS_ResourceSetToReleaseList", -1);
      }

      // encode csi_IM_ResourceToAddModList

      if (csi_IM_ResourceToAddModList != null) {
         buffer.getContext().eventDispatcher.startElement("csi_IM_ResourceToAddModList", -1);

         csi_IM_ResourceToAddModList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("csi_IM_ResourceToAddModList", -1);
      }

      // encode csi_IM_ResourceToReleaseList

      if (csi_IM_ResourceToReleaseList != null) {
         buffer.getContext().eventDispatcher.startElement("csi_IM_ResourceToReleaseList", -1);

         csi_IM_ResourceToReleaseList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("csi_IM_ResourceToReleaseList", -1);
      }

      // encode csi_IM_ResourceSetToAddModList

      if (csi_IM_ResourceSetToAddModList != null) {
         buffer.getContext().eventDispatcher.startElement("csi_IM_ResourceSetToAddModList", -1);

         csi_IM_ResourceSetToAddModList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("csi_IM_ResourceSetToAddModList", -1);
      }

      // encode csi_IM_ResourceSetToReleaseList

      if (csi_IM_ResourceSetToReleaseList != null) {
         buffer.getContext().eventDispatcher.startElement("csi_IM_ResourceSetToReleaseList", -1);

         csi_IM_ResourceSetToReleaseList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("csi_IM_ResourceSetToReleaseList", -1);
      }

      // encode csi_SSB_ResourceSetToAddModList

      if (csi_SSB_ResourceSetToAddModList != null) {
         buffer.getContext().eventDispatcher.startElement("csi_SSB_ResourceSetToAddModList", -1);

         csi_SSB_ResourceSetToAddModList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("csi_SSB_ResourceSetToAddModList", -1);
      }

      // encode csi_SSB_ResourceSetToReleaseList

      if (csi_SSB_ResourceSetToReleaseList != null) {
         buffer.getContext().eventDispatcher.startElement("csi_SSB_ResourceSetToReleaseList", -1);

         csi_SSB_ResourceSetToReleaseList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("csi_SSB_ResourceSetToReleaseList", -1);
      }

      // encode csi_ResourceConfigToAddModList

      if (csi_ResourceConfigToAddModList != null) {
         buffer.getContext().eventDispatcher.startElement("csi_ResourceConfigToAddModList", -1);

         csi_ResourceConfigToAddModList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("csi_ResourceConfigToAddModList", -1);
      }

      // encode csi_ResourceConfigToReleaseList

      if (csi_ResourceConfigToReleaseList != null) {
         buffer.getContext().eventDispatcher.startElement("csi_ResourceConfigToReleaseList", -1);

         csi_ResourceConfigToReleaseList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("csi_ResourceConfigToReleaseList", -1);
      }

      // encode csi_ReportConfigToAddModList

      if (csi_ReportConfigToAddModList != null) {
         buffer.getContext().eventDispatcher.startElement("csi_ReportConfigToAddModList", -1);

         csi_ReportConfigToAddModList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("csi_ReportConfigToAddModList", -1);
      }

      // encode csi_ReportConfigToReleaseList

      if (csi_ReportConfigToReleaseList != null) {
         buffer.getContext().eventDispatcher.startElement("csi_ReportConfigToReleaseList", -1);

         csi_ReportConfigToReleaseList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("csi_ReportConfigToReleaseList", -1);
      }

      // encode reportTriggerSize

      if (reportTriggerSize != null) {
         buffer.getContext().eventDispatcher.startElement("reportTriggerSize", -1);

         reportTriggerSize.encode (buffer, 0, 6);

         buffer.getContext().eventDispatcher.endElement("reportTriggerSize", -1);
      }

      // encode aperiodicTriggerStateList

      if (aperiodicTriggerStateList != null) {
         buffer.getContext().eventDispatcher.startElement("aperiodicTriggerStateList", -1);

         aperiodicTriggerStateList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("aperiodicTriggerStateList", -1);
      }

      // encode semiPersistentOnPUSCH_TriggerStateList

      if (semiPersistentOnPUSCH_TriggerStateList != null) {
         buffer.getContext().eventDispatcher.startElement("semiPersistentOnPUSCH_TriggerStateList", -1);

         semiPersistentOnPUSCH_TriggerStateList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("semiPersistentOnPUSCH_TriggerStateList", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 1;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit (mV2ExtPresent, null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         if (mV2ExtPresent) {
            buffer.reset();
            buffer.encodeBit ((reportTriggerSizeDCI_0_2_r16 != null), "optbit");
            if (reportTriggerSizeDCI_0_2_r16 != null) {
               reportTriggerSizeDCI_0_2_r16.encode (buffer, 0, 6);
            }
            mainBuffer.encodeOpenType (buffer, null);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (nzp_CSI_RS_ResourceToAddModList != null) nzp_CSI_RS_ResourceToAddModList.print (_sb, "nzp_CSI_RS_ResourceToAddModList", _level+1);
      if (nzp_CSI_RS_ResourceToReleaseList != null) nzp_CSI_RS_ResourceToReleaseList.print (_sb, "nzp_CSI_RS_ResourceToReleaseList", _level+1);
      if (nzp_CSI_RS_ResourceSetToAddModList != null) nzp_CSI_RS_ResourceSetToAddModList.print (_sb, "nzp_CSI_RS_ResourceSetToAddModList", _level+1);
      if (nzp_CSI_RS_ResourceSetToReleaseList != null) nzp_CSI_RS_ResourceSetToReleaseList.print (_sb, "nzp_CSI_RS_ResourceSetToReleaseList", _level+1);
      if (csi_IM_ResourceToAddModList != null) csi_IM_ResourceToAddModList.print (_sb, "csi_IM_ResourceToAddModList", _level+1);
      if (csi_IM_ResourceToReleaseList != null) csi_IM_ResourceToReleaseList.print (_sb, "csi_IM_ResourceToReleaseList", _level+1);
      if (csi_IM_ResourceSetToAddModList != null) csi_IM_ResourceSetToAddModList.print (_sb, "csi_IM_ResourceSetToAddModList", _level+1);
      if (csi_IM_ResourceSetToReleaseList != null) csi_IM_ResourceSetToReleaseList.print (_sb, "csi_IM_ResourceSetToReleaseList", _level+1);
      if (csi_SSB_ResourceSetToAddModList != null) csi_SSB_ResourceSetToAddModList.print (_sb, "csi_SSB_ResourceSetToAddModList", _level+1);
      if (csi_SSB_ResourceSetToReleaseList != null) csi_SSB_ResourceSetToReleaseList.print (_sb, "csi_SSB_ResourceSetToReleaseList", _level+1);
      if (csi_ResourceConfigToAddModList != null) csi_ResourceConfigToAddModList.print (_sb, "csi_ResourceConfigToAddModList", _level+1);
      if (csi_ResourceConfigToReleaseList != null) csi_ResourceConfigToReleaseList.print (_sb, "csi_ResourceConfigToReleaseList", _level+1);
      if (csi_ReportConfigToAddModList != null) csi_ReportConfigToAddModList.print (_sb, "csi_ReportConfigToAddModList", _level+1);
      if (csi_ReportConfigToReleaseList != null) csi_ReportConfigToReleaseList.print (_sb, "csi_ReportConfigToReleaseList", _level+1);
      if (reportTriggerSize != null) reportTriggerSize.print (_sb, "reportTriggerSize", _level+1);
      if (aperiodicTriggerStateList != null) aperiodicTriggerStateList.print (_sb, "aperiodicTriggerStateList", _level+1);
      if (semiPersistentOnPUSCH_TriggerStateList != null) semiPersistentOnPUSCH_TriggerStateList.print (_sb, "semiPersistentOnPUSCH_TriggerStateList", _level+1);
      if (reportTriggerSizeDCI_0_2_r16 != null) reportTriggerSizeDCI_0_2_r16.print (_sb, "reportTriggerSizeDCI_0_2_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
