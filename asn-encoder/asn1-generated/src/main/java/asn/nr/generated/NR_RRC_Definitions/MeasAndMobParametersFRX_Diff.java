/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MeasAndMobParametersFRX_Diff extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "MeasAndMobParametersFRX-Diff";
   }

   public MeasAndMobParametersFRX_Diff_ss_SINR_Meas ss_SINR_Meas = null;  // optional
   public MeasAndMobParametersFRX_Diff_csi_RSRP_AndRSRQ_MeasWithSSB csi_RSRP_AndRSRQ_MeasWithSSB = null;  // optional
   public MeasAndMobParametersFRX_Diff_csi_RSRP_AndRSRQ_MeasWithoutSSB csi_RSRP_AndRSRQ_MeasWithoutSSB = null;  // optional
   public MeasAndMobParametersFRX_Diff_csi_SINR_Meas csi_SINR_Meas = null;  // optional
   public MeasAndMobParametersFRX_Diff_csi_RS_RLM csi_RS_RLM = null;  // optional
   public boolean mV2ExtPresent;
   public MeasAndMobParametersFRX_Diff_handoverInterF handoverInterF = null;  // optional
   public MeasAndMobParametersFRX_Diff_handoverLTE_EPC handoverLTE_EPC = null;  // optional
   public MeasAndMobParametersFRX_Diff_handoverLTE_5GC handoverLTE_5GC = null;  // optional
   public boolean mV3ExtPresent;
   public MeasAndMobParametersFRX_Diff_maxNumberResource_CSI_RS_RLM maxNumberResource_CSI_RS_RLM = null;  // optional
   public boolean mV4ExtPresent;
   public MeasAndMobParametersFRX_Diff_simultaneousRxDataSSB_DiffNumerology simultaneousRxDataSSB_DiffNumerology = null;  // optional
   public boolean mV5ExtPresent;
   public MeasAndMobParametersFRX_Diff_nr_AutonomousGaps_r16 nr_AutonomousGaps_r16 = null;  // optional
   public MeasAndMobParametersFRX_Diff_nr_AutonomousGaps_ENDC_r16 nr_AutonomousGaps_ENDC_r16 = null;  // optional
   public MeasAndMobParametersFRX_Diff_nr_AutonomousGaps_NEDC_r16 nr_AutonomousGaps_NEDC_r16 = null;  // optional
   public MeasAndMobParametersFRX_Diff_nr_AutonomousGaps_NRDC_r16 nr_AutonomousGaps_NRDC_r16 = null;  // optional
   public MeasAndMobParametersFRX_Diff_dummy dummy = null;  // optional
   public MeasAndMobParametersFRX_Diff_cli_RSSI_Meas_r16 cli_RSSI_Meas_r16 = null;  // optional
   public MeasAndMobParametersFRX_Diff_cli_SRS_RSRP_Meas_r16 cli_SRS_RSRP_Meas_r16 = null;  // optional
   public MeasAndMobParametersFRX_Diff_interFrequencyMeas_NoGap_r16 interFrequencyMeas_NoGap_r16 = null;  // optional
   public MeasAndMobParametersFRX_Diff_simultaneousRxDataSSB_DiffNumerology_Inter_r16 simultaneousRxDataSSB_DiffNumerology_Inter_r16 = null;  // optional
   public MeasAndMobParametersFRX_Diff_idleInactiveNR_MeasReport_r16 idleInactiveNR_MeasReport_r16 = null;  // optional
   public MeasAndMobParametersFRX_Diff_idleInactiveNR_MeasBeamReport_r16 idleInactiveNR_MeasBeamReport_r16 = null;  // optional
   public boolean mV6ExtPresent;
   public MeasAndMobParametersFRX_Diff_increasedNumberofCSIRSPerMO_r16 increasedNumberofCSIRSPerMO_r16 = null;  // optional
   public Asn1OpenExt extElem1;

   public MeasAndMobParametersFRX_Diff () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MeasAndMobParametersFRX_Diff (
      MeasAndMobParametersFRX_Diff_ss_SINR_Meas ss_SINR_Meas_,
      MeasAndMobParametersFRX_Diff_csi_RSRP_AndRSRQ_MeasWithSSB csi_RSRP_AndRSRQ_MeasWithSSB_,
      MeasAndMobParametersFRX_Diff_csi_RSRP_AndRSRQ_MeasWithoutSSB csi_RSRP_AndRSRQ_MeasWithoutSSB_,
      MeasAndMobParametersFRX_Diff_csi_SINR_Meas csi_SINR_Meas_,
      MeasAndMobParametersFRX_Diff_csi_RS_RLM csi_RS_RLM_,
      MeasAndMobParametersFRX_Diff_handoverInterF handoverInterF_,
      MeasAndMobParametersFRX_Diff_handoverLTE_EPC handoverLTE_EPC_,
      MeasAndMobParametersFRX_Diff_handoverLTE_5GC handoverLTE_5GC_,
      MeasAndMobParametersFRX_Diff_maxNumberResource_CSI_RS_RLM maxNumberResource_CSI_RS_RLM_,
      MeasAndMobParametersFRX_Diff_simultaneousRxDataSSB_DiffNumerology simultaneousRxDataSSB_DiffNumerology_,
      MeasAndMobParametersFRX_Diff_nr_AutonomousGaps_r16 nr_AutonomousGaps_r16_,
      MeasAndMobParametersFRX_Diff_nr_AutonomousGaps_ENDC_r16 nr_AutonomousGaps_ENDC_r16_,
      MeasAndMobParametersFRX_Diff_nr_AutonomousGaps_NEDC_r16 nr_AutonomousGaps_NEDC_r16_,
      MeasAndMobParametersFRX_Diff_nr_AutonomousGaps_NRDC_r16 nr_AutonomousGaps_NRDC_r16_,
      MeasAndMobParametersFRX_Diff_dummy dummy_,
      MeasAndMobParametersFRX_Diff_cli_RSSI_Meas_r16 cli_RSSI_Meas_r16_,
      MeasAndMobParametersFRX_Diff_cli_SRS_RSRP_Meas_r16 cli_SRS_RSRP_Meas_r16_,
      MeasAndMobParametersFRX_Diff_interFrequencyMeas_NoGap_r16 interFrequencyMeas_NoGap_r16_,
      MeasAndMobParametersFRX_Diff_simultaneousRxDataSSB_DiffNumerology_Inter_r16 simultaneousRxDataSSB_DiffNumerology_Inter_r16_,
      MeasAndMobParametersFRX_Diff_idleInactiveNR_MeasReport_r16 idleInactiveNR_MeasReport_r16_,
      MeasAndMobParametersFRX_Diff_idleInactiveNR_MeasBeamReport_r16 idleInactiveNR_MeasBeamReport_r16_,
      MeasAndMobParametersFRX_Diff_increasedNumberofCSIRSPerMO_r16 increasedNumberofCSIRSPerMO_r16_
   ) {
      super();
      ss_SINR_Meas = ss_SINR_Meas_;
      csi_RSRP_AndRSRQ_MeasWithSSB = csi_RSRP_AndRSRQ_MeasWithSSB_;
      csi_RSRP_AndRSRQ_MeasWithoutSSB = csi_RSRP_AndRSRQ_MeasWithoutSSB_;
      csi_SINR_Meas = csi_SINR_Meas_;
      csi_RS_RLM = csi_RS_RLM_;
      handoverInterF = handoverInterF_;
      handoverLTE_EPC = handoverLTE_EPC_;
      handoverLTE_5GC = handoverLTE_5GC_;
      maxNumberResource_CSI_RS_RLM = maxNumberResource_CSI_RS_RLM_;
      simultaneousRxDataSSB_DiffNumerology = simultaneousRxDataSSB_DiffNumerology_;
      nr_AutonomousGaps_r16 = nr_AutonomousGaps_r16_;
      nr_AutonomousGaps_ENDC_r16 = nr_AutonomousGaps_ENDC_r16_;
      nr_AutonomousGaps_NEDC_r16 = nr_AutonomousGaps_NEDC_r16_;
      nr_AutonomousGaps_NRDC_r16 = nr_AutonomousGaps_NRDC_r16_;
      dummy = dummy_;
      cli_RSSI_Meas_r16 = cli_RSSI_Meas_r16_;
      cli_SRS_RSRP_Meas_r16 = cli_SRS_RSRP_Meas_r16_;
      interFrequencyMeas_NoGap_r16 = interFrequencyMeas_NoGap_r16_;
      simultaneousRxDataSSB_DiffNumerology_Inter_r16 = simultaneousRxDataSSB_DiffNumerology_Inter_r16_;
      idleInactiveNR_MeasReport_r16 = idleInactiveNR_MeasReport_r16_;
      idleInactiveNR_MeasBeamReport_r16 = idleInactiveNR_MeasBeamReport_r16_;
      increasedNumberofCSIRSPerMO_r16 = increasedNumberofCSIRSPerMO_r16_;
   }

   public void init () {
      ss_SINR_Meas = null;
      csi_RSRP_AndRSRQ_MeasWithSSB = null;
      csi_RSRP_AndRSRQ_MeasWithoutSSB = null;
      csi_SINR_Meas = null;
      csi_RS_RLM = null;
      handoverInterF = null;
      handoverLTE_EPC = null;
      handoverLTE_5GC = null;
      maxNumberResource_CSI_RS_RLM = null;
      simultaneousRxDataSSB_DiffNumerology = null;
      nr_AutonomousGaps_r16 = null;
      nr_AutonomousGaps_ENDC_r16 = null;
      nr_AutonomousGaps_NEDC_r16 = null;
      nr_AutonomousGaps_NRDC_r16 = null;
      dummy = null;
      cli_RSSI_Meas_r16 = null;
      cli_SRS_RSRP_Meas_r16 = null;
      interFrequencyMeas_NoGap_r16 = null;
      simultaneousRxDataSSB_DiffNumerology_Inter_r16 = null;
      idleInactiveNR_MeasReport_r16 = null;
      idleInactiveNR_MeasBeamReport_r16 = null;
      increasedNumberofCSIRSPerMO_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 23; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return ss_SINR_Meas;
         case 1: return csi_RSRP_AndRSRQ_MeasWithSSB;
         case 2: return csi_RSRP_AndRSRQ_MeasWithoutSSB;
         case 3: return csi_SINR_Meas;
         case 4: return csi_RS_RLM;
         case 5: return handoverInterF;
         case 6: return handoverLTE_EPC;
         case 7: return handoverLTE_5GC;
         case 8: return maxNumberResource_CSI_RS_RLM;
         case 9: return simultaneousRxDataSSB_DiffNumerology;
         case 10: return nr_AutonomousGaps_r16;
         case 11: return nr_AutonomousGaps_ENDC_r16;
         case 12: return nr_AutonomousGaps_NEDC_r16;
         case 13: return nr_AutonomousGaps_NRDC_r16;
         case 14: return dummy;
         case 15: return cli_RSSI_Meas_r16;
         case 16: return cli_SRS_RSRP_Meas_r16;
         case 17: return interFrequencyMeas_NoGap_r16;
         case 18: return simultaneousRxDataSSB_DiffNumerology_Inter_r16;
         case 19: return idleInactiveNR_MeasReport_r16;
         case 20: return idleInactiveNR_MeasBeamReport_r16;
         case 21: return increasedNumberofCSIRSPerMO_r16;
         case 22: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "ss-SINR-Meas";
         case 1: return "csi-RSRP-AndRSRQ-MeasWithSSB";
         case 2: return "csi-RSRP-AndRSRQ-MeasWithoutSSB";
         case 3: return "csi-SINR-Meas";
         case 4: return "csi-RS-RLM";
         case 5: return "handoverInterF";
         case 6: return "handoverLTE-EPC";
         case 7: return "handoverLTE-5GC";
         case 8: return "maxNumberResource-CSI-RS-RLM";
         case 9: return "simultaneousRxDataSSB-DiffNumerology";
         case 10: return "nr-AutonomousGaps-r16";
         case 11: return "nr-AutonomousGaps-ENDC-r16";
         case 12: return "nr-AutonomousGaps-NEDC-r16";
         case 13: return "nr-AutonomousGaps-NRDC-r16";
         case 14: return "dummy";
         case 15: return "cli-RSSI-Meas-r16";
         case 16: return "cli-SRS-RSRP-Meas-r16";
         case 17: return "interFrequencyMeas-NoGap-r16";
         case 18: return "simultaneousRxDataSSB-DiffNumerology-Inter-r16";
         case 19: return "idleInactiveNR-MeasReport-r16";
         case 20: return "idleInactiveNR-MeasBeamReport-r16";
         case 21: return "increasedNumberofCSIRSPerMO-r16";
         case 22: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean ss_SINR_MeasPresent = buffer.decodeBit ("ss_SINR_MeasPresent");
      boolean csi_RSRP_AndRSRQ_MeasWithSSBPresent = buffer.decodeBit ("csi_RSRP_AndRSRQ_MeasWithSSBPresent");
      boolean csi_RSRP_AndRSRQ_MeasWithoutSSBPresent = buffer.decodeBit ("csi_RSRP_AndRSRQ_MeasWithoutSSBPresent");
      boolean csi_SINR_MeasPresent = buffer.decodeBit ("csi_SINR_MeasPresent");
      boolean csi_RS_RLMPresent = buffer.decodeBit ("csi_RS_RLMPresent");

      // decode ss_SINR_Meas

      if (ss_SINR_MeasPresent) {
         buffer.getContext().eventDispatcher.startElement("ss_SINR_Meas", -1);

         int tval = MeasAndMobParametersFRX_Diff_ss_SINR_Meas.decodeEnumValue (buffer);
         ss_SINR_Meas = MeasAndMobParametersFRX_Diff_ss_SINR_Meas.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("ss_SINR_Meas", -1);
      }
      else {
         ss_SINR_Meas = null;
      }

      // decode csi_RSRP_AndRSRQ_MeasWithSSB

      if (csi_RSRP_AndRSRQ_MeasWithSSBPresent) {
         buffer.getContext().eventDispatcher.startElement("csi_RSRP_AndRSRQ_MeasWithSSB", -1);

         int tval = MeasAndMobParametersFRX_Diff_csi_RSRP_AndRSRQ_MeasWithSSB.decodeEnumValue (buffer);
         csi_RSRP_AndRSRQ_MeasWithSSB = MeasAndMobParametersFRX_Diff_csi_RSRP_AndRSRQ_MeasWithSSB.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("csi_RSRP_AndRSRQ_MeasWithSSB", -1);
      }
      else {
         csi_RSRP_AndRSRQ_MeasWithSSB = null;
      }

      // decode csi_RSRP_AndRSRQ_MeasWithoutSSB

      if (csi_RSRP_AndRSRQ_MeasWithoutSSBPresent) {
         buffer.getContext().eventDispatcher.startElement("csi_RSRP_AndRSRQ_MeasWithoutSSB", -1);

         int tval = MeasAndMobParametersFRX_Diff_csi_RSRP_AndRSRQ_MeasWithoutSSB.decodeEnumValue (buffer);
         csi_RSRP_AndRSRQ_MeasWithoutSSB = MeasAndMobParametersFRX_Diff_csi_RSRP_AndRSRQ_MeasWithoutSSB.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("csi_RSRP_AndRSRQ_MeasWithoutSSB", -1);
      }
      else {
         csi_RSRP_AndRSRQ_MeasWithoutSSB = null;
      }

      // decode csi_SINR_Meas

      if (csi_SINR_MeasPresent) {
         buffer.getContext().eventDispatcher.startElement("csi_SINR_Meas", -1);

         int tval = MeasAndMobParametersFRX_Diff_csi_SINR_Meas.decodeEnumValue (buffer);
         csi_SINR_Meas = MeasAndMobParametersFRX_Diff_csi_SINR_Meas.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("csi_SINR_Meas", -1);
      }
      else {
         csi_SINR_Meas = null;
      }

      // decode csi_RS_RLM

      if (csi_RS_RLMPresent) {
         buffer.getContext().eventDispatcher.startElement("csi_RS_RLM", -1);

         int tval = MeasAndMobParametersFRX_Diff_csi_RS_RLM.decodeEnumValue (buffer);
         csi_RS_RLM = MeasAndMobParametersFRX_Diff_csi_RS_RLM.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("csi_RS_RLM", -1);
      }
      else {
         csi_RS_RLM = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV4ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV5ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV6ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean handoverInterFPresent = buffer.decodeBit ("handoverInterFPresent");

            boolean handoverLTE_EPCPresent = buffer.decodeBit ("handoverLTE_EPCPresent");

            boolean handoverLTE_5GCPresent = buffer.decodeBit ("handoverLTE_5GCPresent");

            // decode handoverInterF

            if (handoverInterFPresent) {
               buffer.getContext().eventDispatcher.startElement("handoverInterF", -1);

               int tval = MeasAndMobParametersFRX_Diff_handoverInterF.decodeEnumValue (buffer);
               handoverInterF = MeasAndMobParametersFRX_Diff_handoverInterF.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("handoverInterF", -1);
            }
            else {
               handoverInterF = null;
            }

            // decode handoverLTE_EPC

            if (handoverLTE_EPCPresent) {
               buffer.getContext().eventDispatcher.startElement("handoverLTE_EPC", -1);

               int tval = MeasAndMobParametersFRX_Diff_handoverLTE_EPC.decodeEnumValue (buffer);
               handoverLTE_EPC = MeasAndMobParametersFRX_Diff_handoverLTE_EPC.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("handoverLTE_EPC", -1);
            }
            else {
               handoverLTE_EPC = null;
            }

            // decode handoverLTE_5GC

            if (handoverLTE_5GCPresent) {
               buffer.getContext().eventDispatcher.startElement("handoverLTE_5GC", -1);

               int tval = MeasAndMobParametersFRX_Diff_handoverLTE_5GC.decodeEnumValue (buffer);
               handoverLTE_5GC = MeasAndMobParametersFRX_Diff_handoverLTE_5GC.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("handoverLTE_5GC", -1);
            }
            else {
               handoverLTE_5GC = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean maxNumberResource_CSI_RS_RLMPresent = buffer.decodeBit ("maxNumberResource_CSI_RS_RLMPresent");

            // decode maxNumberResource_CSI_RS_RLM

            if (maxNumberResource_CSI_RS_RLMPresent) {
               buffer.getContext().eventDispatcher.startElement("maxNumberResource_CSI_RS_RLM", -1);

               int tval = MeasAndMobParametersFRX_Diff_maxNumberResource_CSI_RS_RLM.decodeEnumValue (buffer);
               maxNumberResource_CSI_RS_RLM = MeasAndMobParametersFRX_Diff_maxNumberResource_CSI_RS_RLM.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("maxNumberResource_CSI_RS_RLM", -1);
            }
            else {
               maxNumberResource_CSI_RS_RLM = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV4ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean simultaneousRxDataSSB_DiffNumerologyPresent = buffer.decodeBit ("simultaneousRxDataSSB_DiffNumerologyPresent");

            // decode simultaneousRxDataSSB_DiffNumerology

            if (simultaneousRxDataSSB_DiffNumerologyPresent) {
               buffer.getContext().eventDispatcher.startElement("simultaneousRxDataSSB_DiffNumerology", -1);

               int tval = MeasAndMobParametersFRX_Diff_simultaneousRxDataSSB_DiffNumerology.decodeEnumValue (buffer);
               simultaneousRxDataSSB_DiffNumerology = MeasAndMobParametersFRX_Diff_simultaneousRxDataSSB_DiffNumerology.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("simultaneousRxDataSSB_DiffNumerology", -1);
            }
            else {
               simultaneousRxDataSSB_DiffNumerology = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV5ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean nr_AutonomousGaps_r16Present = buffer.decodeBit ("nr_AutonomousGaps_r16Present");

            boolean nr_AutonomousGaps_ENDC_r16Present = buffer.decodeBit ("nr_AutonomousGaps_ENDC_r16Present");

            boolean nr_AutonomousGaps_NEDC_r16Present = buffer.decodeBit ("nr_AutonomousGaps_NEDC_r16Present");

            boolean nr_AutonomousGaps_NRDC_r16Present = buffer.decodeBit ("nr_AutonomousGaps_NRDC_r16Present");

            boolean dummyPresent = buffer.decodeBit ("dummyPresent");

            boolean cli_RSSI_Meas_r16Present = buffer.decodeBit ("cli_RSSI_Meas_r16Present");

            boolean cli_SRS_RSRP_Meas_r16Present = buffer.decodeBit ("cli_SRS_RSRP_Meas_r16Present");

            boolean interFrequencyMeas_NoGap_r16Present = buffer.decodeBit ("interFrequencyMeas_NoGap_r16Present");

            boolean simultaneousRxDataSSB_DiffNumerology_Inter_r16Present = buffer.decodeBit ("simultaneousRxDataSSB_DiffNumerology_Inter_r16Present");

            boolean idleInactiveNR_MeasReport_r16Present = buffer.decodeBit ("idleInactiveNR_MeasReport_r16Present");

            boolean idleInactiveNR_MeasBeamReport_r16Present = buffer.decodeBit ("idleInactiveNR_MeasBeamReport_r16Present");

            // decode nr_AutonomousGaps_r16

            if (nr_AutonomousGaps_r16Present) {
               buffer.getContext().eventDispatcher.startElement("nr_AutonomousGaps_r16", -1);

               int tval = MeasAndMobParametersFRX_Diff_nr_AutonomousGaps_r16.decodeEnumValue (buffer);
               nr_AutonomousGaps_r16 = MeasAndMobParametersFRX_Diff_nr_AutonomousGaps_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("nr_AutonomousGaps_r16", -1);
            }
            else {
               nr_AutonomousGaps_r16 = null;
            }

            // decode nr_AutonomousGaps_ENDC_r16

            if (nr_AutonomousGaps_ENDC_r16Present) {
               buffer.getContext().eventDispatcher.startElement("nr_AutonomousGaps_ENDC_r16", -1);

               int tval = MeasAndMobParametersFRX_Diff_nr_AutonomousGaps_ENDC_r16.decodeEnumValue (buffer);
               nr_AutonomousGaps_ENDC_r16 = MeasAndMobParametersFRX_Diff_nr_AutonomousGaps_ENDC_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("nr_AutonomousGaps_ENDC_r16", -1);
            }
            else {
               nr_AutonomousGaps_ENDC_r16 = null;
            }

            // decode nr_AutonomousGaps_NEDC_r16

            if (nr_AutonomousGaps_NEDC_r16Present) {
               buffer.getContext().eventDispatcher.startElement("nr_AutonomousGaps_NEDC_r16", -1);

               int tval = MeasAndMobParametersFRX_Diff_nr_AutonomousGaps_NEDC_r16.decodeEnumValue (buffer);
               nr_AutonomousGaps_NEDC_r16 = MeasAndMobParametersFRX_Diff_nr_AutonomousGaps_NEDC_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("nr_AutonomousGaps_NEDC_r16", -1);
            }
            else {
               nr_AutonomousGaps_NEDC_r16 = null;
            }

            // decode nr_AutonomousGaps_NRDC_r16

            if (nr_AutonomousGaps_NRDC_r16Present) {
               buffer.getContext().eventDispatcher.startElement("nr_AutonomousGaps_NRDC_r16", -1);

               int tval = MeasAndMobParametersFRX_Diff_nr_AutonomousGaps_NRDC_r16.decodeEnumValue (buffer);
               nr_AutonomousGaps_NRDC_r16 = MeasAndMobParametersFRX_Diff_nr_AutonomousGaps_NRDC_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("nr_AutonomousGaps_NRDC_r16", -1);
            }
            else {
               nr_AutonomousGaps_NRDC_r16 = null;
            }

            // decode dummy

            if (dummyPresent) {
               buffer.getContext().eventDispatcher.startElement("dummy", -1);

               int tval = MeasAndMobParametersFRX_Diff_dummy.decodeEnumValue (buffer);
               dummy = MeasAndMobParametersFRX_Diff_dummy.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("dummy", -1);
            }
            else {
               dummy = null;
            }

            // decode cli_RSSI_Meas_r16

            if (cli_RSSI_Meas_r16Present) {
               buffer.getContext().eventDispatcher.startElement("cli_RSSI_Meas_r16", -1);

               int tval = MeasAndMobParametersFRX_Diff_cli_RSSI_Meas_r16.decodeEnumValue (buffer);
               cli_RSSI_Meas_r16 = MeasAndMobParametersFRX_Diff_cli_RSSI_Meas_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("cli_RSSI_Meas_r16", -1);
            }
            else {
               cli_RSSI_Meas_r16 = null;
            }

            // decode cli_SRS_RSRP_Meas_r16

            if (cli_SRS_RSRP_Meas_r16Present) {
               buffer.getContext().eventDispatcher.startElement("cli_SRS_RSRP_Meas_r16", -1);

               int tval = MeasAndMobParametersFRX_Diff_cli_SRS_RSRP_Meas_r16.decodeEnumValue (buffer);
               cli_SRS_RSRP_Meas_r16 = MeasAndMobParametersFRX_Diff_cli_SRS_RSRP_Meas_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("cli_SRS_RSRP_Meas_r16", -1);
            }
            else {
               cli_SRS_RSRP_Meas_r16 = null;
            }

            // decode interFrequencyMeas_NoGap_r16

            if (interFrequencyMeas_NoGap_r16Present) {
               buffer.getContext().eventDispatcher.startElement("interFrequencyMeas_NoGap_r16", -1);

               int tval = MeasAndMobParametersFRX_Diff_interFrequencyMeas_NoGap_r16.decodeEnumValue (buffer);
               interFrequencyMeas_NoGap_r16 = MeasAndMobParametersFRX_Diff_interFrequencyMeas_NoGap_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("interFrequencyMeas_NoGap_r16", -1);
            }
            else {
               interFrequencyMeas_NoGap_r16 = null;
            }

            // decode simultaneousRxDataSSB_DiffNumerology_Inter_r16

            if (simultaneousRxDataSSB_DiffNumerology_Inter_r16Present) {
               buffer.getContext().eventDispatcher.startElement("simultaneousRxDataSSB_DiffNumerology_Inter_r16", -1);

               int tval = MeasAndMobParametersFRX_Diff_simultaneousRxDataSSB_DiffNumerology_Inter_r16.decodeEnumValue (buffer);
               simultaneousRxDataSSB_DiffNumerology_Inter_r16 = MeasAndMobParametersFRX_Diff_simultaneousRxDataSSB_DiffNumerology_Inter_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("simultaneousRxDataSSB_DiffNumerology_Inter_r16", -1);
            }
            else {
               simultaneousRxDataSSB_DiffNumerology_Inter_r16 = null;
            }

            // decode idleInactiveNR_MeasReport_r16

            if (idleInactiveNR_MeasReport_r16Present) {
               buffer.getContext().eventDispatcher.startElement("idleInactiveNR_MeasReport_r16", -1);

               int tval = MeasAndMobParametersFRX_Diff_idleInactiveNR_MeasReport_r16.decodeEnumValue (buffer);
               idleInactiveNR_MeasReport_r16 = MeasAndMobParametersFRX_Diff_idleInactiveNR_MeasReport_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("idleInactiveNR_MeasReport_r16", -1);
            }
            else {
               idleInactiveNR_MeasReport_r16 = null;
            }

            // decode idleInactiveNR_MeasBeamReport_r16

            if (idleInactiveNR_MeasBeamReport_r16Present) {
               buffer.getContext().eventDispatcher.startElement("idleInactiveNR_MeasBeamReport_r16", -1);

               int tval = MeasAndMobParametersFRX_Diff_idleInactiveNR_MeasBeamReport_r16.decodeEnumValue (buffer);
               idleInactiveNR_MeasBeamReport_r16 = MeasAndMobParametersFRX_Diff_idleInactiveNR_MeasBeamReport_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("idleInactiveNR_MeasBeamReport_r16", -1);
            }
            else {
               idleInactiveNR_MeasBeamReport_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV6ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean increasedNumberofCSIRSPerMO_r16Present = buffer.decodeBit ("increasedNumberofCSIRSPerMO_r16Present");

            // decode increasedNumberofCSIRSPerMO_r16

            if (increasedNumberofCSIRSPerMO_r16Present) {
               buffer.getContext().eventDispatcher.startElement("increasedNumberofCSIRSPerMO_r16", -1);

               int tval = MeasAndMobParametersFRX_Diff_increasedNumberofCSIRSPerMO_r16.decodeEnumValue (buffer);
               increasedNumberofCSIRSPerMO_r16 = MeasAndMobParametersFRX_Diff_increasedNumberofCSIRSPerMO_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("increasedNumberofCSIRSPerMO_r16", -1);
            }
            else {
               increasedNumberofCSIRSPerMO_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (mV2ExtPresent ||
      mV3ExtPresent ||
      mV4ExtPresent ||
      mV5ExtPresent ||
      mV6ExtPresent ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((ss_SINR_Meas != null), null);
      buffer.encodeBit ((csi_RSRP_AndRSRQ_MeasWithSSB != null), null);
      buffer.encodeBit ((csi_RSRP_AndRSRQ_MeasWithoutSSB != null), null);
      buffer.encodeBit ((csi_SINR_Meas != null), null);
      buffer.encodeBit ((csi_RS_RLM != null), null);

      // encode ss_SINR_Meas

      if (ss_SINR_Meas != null) {
         buffer.getContext().eventDispatcher.startElement("ss_SINR_Meas", -1);

         ss_SINR_Meas.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ss_SINR_Meas", -1);
      }

      // encode csi_RSRP_AndRSRQ_MeasWithSSB

      if (csi_RSRP_AndRSRQ_MeasWithSSB != null) {
         buffer.getContext().eventDispatcher.startElement("csi_RSRP_AndRSRQ_MeasWithSSB", -1);

         csi_RSRP_AndRSRQ_MeasWithSSB.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("csi_RSRP_AndRSRQ_MeasWithSSB", -1);
      }

      // encode csi_RSRP_AndRSRQ_MeasWithoutSSB

      if (csi_RSRP_AndRSRQ_MeasWithoutSSB != null) {
         buffer.getContext().eventDispatcher.startElement("csi_RSRP_AndRSRQ_MeasWithoutSSB", -1);

         csi_RSRP_AndRSRQ_MeasWithoutSSB.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("csi_RSRP_AndRSRQ_MeasWithoutSSB", -1);
      }

      // encode csi_SINR_Meas

      if (csi_SINR_Meas != null) {
         buffer.getContext().eventDispatcher.startElement("csi_SINR_Meas", -1);

         csi_SINR_Meas.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("csi_SINR_Meas", -1);
      }

      // encode csi_RS_RLM

      if (csi_RS_RLM != null) {
         buffer.getContext().eventDispatcher.startElement("csi_RS_RLM", -1);

         csi_RS_RLM.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("csi_RS_RLM", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 5;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit (mV2ExtPresent, null);
         buffer.encodeBit (mV3ExtPresent, null);
         buffer.encodeBit (mV4ExtPresent, null);
         buffer.encodeBit (mV5ExtPresent, null);
         buffer.encodeBit (mV6ExtPresent, null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         if (mV2ExtPresent) {
            buffer.reset();
            buffer.encodeBit ((handoverInterF != null), "optbit");
            buffer.encodeBit ((handoverLTE_EPC != null), "optbit");
            buffer.encodeBit ((handoverLTE_5GC != null), "optbit");
            if (handoverInterF != null) {
               handoverInterF.encode (buffer);
            }
            if (handoverLTE_EPC != null) {
               handoverLTE_EPC.encode (buffer);
            }
            if (handoverLTE_5GC != null) {
               handoverLTE_5GC.encode (buffer);
            }
            mainBuffer.encodeOpenType (buffer, null);
         }

         if (mV3ExtPresent) {
            buffer.reset();
            buffer.encodeBit ((maxNumberResource_CSI_RS_RLM != null), "optbit");
            if (maxNumberResource_CSI_RS_RLM != null) {
               maxNumberResource_CSI_RS_RLM.encode (buffer);
            }
            mainBuffer.encodeOpenType (buffer, null);
         }

         if (mV4ExtPresent) {
            buffer.reset();
            buffer.encodeBit ((simultaneousRxDataSSB_DiffNumerology != null), "optbit");
            if (simultaneousRxDataSSB_DiffNumerology != null) {
               simultaneousRxDataSSB_DiffNumerology.encode (buffer);
            }
            mainBuffer.encodeOpenType (buffer, null);
         }

         if (mV5ExtPresent) {
            buffer.reset();
            buffer.encodeBit ((nr_AutonomousGaps_r16 != null), "optbit");
            buffer.encodeBit ((nr_AutonomousGaps_ENDC_r16 != null), "optbit");
            buffer.encodeBit ((nr_AutonomousGaps_NEDC_r16 != null), "optbit");
            buffer.encodeBit ((nr_AutonomousGaps_NRDC_r16 != null), "optbit");
            buffer.encodeBit ((dummy != null), "optbit");
            buffer.encodeBit ((cli_RSSI_Meas_r16 != null), "optbit");
            buffer.encodeBit ((cli_SRS_RSRP_Meas_r16 != null), "optbit");
            buffer.encodeBit ((interFrequencyMeas_NoGap_r16 != null), "optbit");
            buffer.encodeBit ((simultaneousRxDataSSB_DiffNumerology_Inter_r16 != null), "optbit");
            buffer.encodeBit ((idleInactiveNR_MeasReport_r16 != null), "optbit");
            buffer.encodeBit ((idleInactiveNR_MeasBeamReport_r16 != null), "optbit");
            if (nr_AutonomousGaps_r16 != null) {
               nr_AutonomousGaps_r16.encode (buffer);
            }
            if (nr_AutonomousGaps_ENDC_r16 != null) {
               nr_AutonomousGaps_ENDC_r16.encode (buffer);
            }
            if (nr_AutonomousGaps_NEDC_r16 != null) {
               nr_AutonomousGaps_NEDC_r16.encode (buffer);
            }
            if (nr_AutonomousGaps_NRDC_r16 != null) {
               nr_AutonomousGaps_NRDC_r16.encode (buffer);
            }
            if (dummy != null) {
               dummy.encode (buffer);
            }
            if (cli_RSSI_Meas_r16 != null) {
               cli_RSSI_Meas_r16.encode (buffer);
            }
            if (cli_SRS_RSRP_Meas_r16 != null) {
               cli_SRS_RSRP_Meas_r16.encode (buffer);
            }
            if (interFrequencyMeas_NoGap_r16 != null) {
               interFrequencyMeas_NoGap_r16.encode (buffer);
            }
            if (simultaneousRxDataSSB_DiffNumerology_Inter_r16 != null) {
               simultaneousRxDataSSB_DiffNumerology_Inter_r16.encode (buffer);
            }
            if (idleInactiveNR_MeasReport_r16 != null) {
               idleInactiveNR_MeasReport_r16.encode (buffer);
            }
            if (idleInactiveNR_MeasBeamReport_r16 != null) {
               idleInactiveNR_MeasBeamReport_r16.encode (buffer);
            }
            mainBuffer.encodeOpenType (buffer, null);
         }

         if (mV6ExtPresent) {
            buffer.reset();
            buffer.encodeBit ((increasedNumberofCSIRSPerMO_r16 != null), "optbit");
            if (increasedNumberofCSIRSPerMO_r16 != null) {
               increasedNumberofCSIRSPerMO_r16.encode (buffer);
            }
            mainBuffer.encodeOpenType (buffer, null);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (ss_SINR_Meas != null) ss_SINR_Meas.print (_sb, "ss_SINR_Meas", _level+1);
      if (csi_RSRP_AndRSRQ_MeasWithSSB != null) csi_RSRP_AndRSRQ_MeasWithSSB.print (_sb, "csi_RSRP_AndRSRQ_MeasWithSSB", _level+1);
      if (csi_RSRP_AndRSRQ_MeasWithoutSSB != null) csi_RSRP_AndRSRQ_MeasWithoutSSB.print (_sb, "csi_RSRP_AndRSRQ_MeasWithoutSSB", _level+1);
      if (csi_SINR_Meas != null) csi_SINR_Meas.print (_sb, "csi_SINR_Meas", _level+1);
      if (csi_RS_RLM != null) csi_RS_RLM.print (_sb, "csi_RS_RLM", _level+1);
      if (handoverInterF != null) handoverInterF.print (_sb, "handoverInterF", _level+1);
      if (handoverLTE_EPC != null) handoverLTE_EPC.print (_sb, "handoverLTE_EPC", _level+1);
      if (handoverLTE_5GC != null) handoverLTE_5GC.print (_sb, "handoverLTE_5GC", _level+1);
      if (maxNumberResource_CSI_RS_RLM != null) maxNumberResource_CSI_RS_RLM.print (_sb, "maxNumberResource_CSI_RS_RLM", _level+1);
      if (simultaneousRxDataSSB_DiffNumerology != null) simultaneousRxDataSSB_DiffNumerology.print (_sb, "simultaneousRxDataSSB_DiffNumerology", _level+1);
      if (nr_AutonomousGaps_r16 != null) nr_AutonomousGaps_r16.print (_sb, "nr_AutonomousGaps_r16", _level+1);
      if (nr_AutonomousGaps_ENDC_r16 != null) nr_AutonomousGaps_ENDC_r16.print (_sb, "nr_AutonomousGaps_ENDC_r16", _level+1);
      if (nr_AutonomousGaps_NEDC_r16 != null) nr_AutonomousGaps_NEDC_r16.print (_sb, "nr_AutonomousGaps_NEDC_r16", _level+1);
      if (nr_AutonomousGaps_NRDC_r16 != null) nr_AutonomousGaps_NRDC_r16.print (_sb, "nr_AutonomousGaps_NRDC_r16", _level+1);
      if (dummy != null) dummy.print (_sb, "dummy", _level+1);
      if (cli_RSSI_Meas_r16 != null) cli_RSSI_Meas_r16.print (_sb, "cli_RSSI_Meas_r16", _level+1);
      if (cli_SRS_RSRP_Meas_r16 != null) cli_SRS_RSRP_Meas_r16.print (_sb, "cli_SRS_RSRP_Meas_r16", _level+1);
      if (interFrequencyMeas_NoGap_r16 != null) interFrequencyMeas_NoGap_r16.print (_sb, "interFrequencyMeas_NoGap_r16", _level+1);
      if (simultaneousRxDataSSB_DiffNumerology_Inter_r16 != null) simultaneousRxDataSSB_DiffNumerology_Inter_r16.print (_sb, "simultaneousRxDataSSB_DiffNumerology_Inter_r16", _level+1);
      if (idleInactiveNR_MeasReport_r16 != null) idleInactiveNR_MeasReport_r16.print (_sb, "idleInactiveNR_MeasReport_r16", _level+1);
      if (idleInactiveNR_MeasBeamReport_r16 != null) idleInactiveNR_MeasBeamReport_r16.print (_sb, "idleInactiveNR_MeasBeamReport_r16", _level+1);
      if (increasedNumberofCSIRSPerMO_r16 != null) increasedNumberofCSIRSPerMO_r16.print (_sb, "increasedNumberofCSIRSPerMO_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
