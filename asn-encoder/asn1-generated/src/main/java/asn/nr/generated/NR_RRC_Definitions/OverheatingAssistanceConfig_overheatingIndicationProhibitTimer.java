/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class OverheatingAssistanceConfig_overheatingIndicationProhibitTimer extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ENUMERATED";
   }

   // Integer constants for switch-case
   public static final int _S0 = 0;
   public static final int _S0DOT5 = 1;
   public static final int _S1 = 2;
   public static final int _S2 = 3;
   public static final int _S5 = 4;
   public static final int _S10 = 5;
   public static final int _S20 = 6;
   public static final int _S30 = 7;
   public static final int _S60 = 8;
   public static final int _S90 = 9;
   public static final int _S120 = 10;
   public static final int _S300 = 11;
   public static final int _S600 = 12;
   public static final int _SPARE3 = 13;
   public static final int _SPARE2 = 14;
   public static final int _SPARE1 = 15;

   // Singleton instances of OverheatingAssistanceConfig_overheatingIndicationProhibitTimer
   protected static final OverheatingAssistanceConfig_overheatingIndicationProhibitTimer _s0 = new OverheatingAssistanceConfig_overheatingIndicationProhibitTimer(0);
   protected static final OverheatingAssistanceConfig_overheatingIndicationProhibitTimer _s0dot5 = new OverheatingAssistanceConfig_overheatingIndicationProhibitTimer(1);
   protected static final OverheatingAssistanceConfig_overheatingIndicationProhibitTimer _s1 = new OverheatingAssistanceConfig_overheatingIndicationProhibitTimer(2);
   protected static final OverheatingAssistanceConfig_overheatingIndicationProhibitTimer _s2 = new OverheatingAssistanceConfig_overheatingIndicationProhibitTimer(3);
   protected static final OverheatingAssistanceConfig_overheatingIndicationProhibitTimer _s5 = new OverheatingAssistanceConfig_overheatingIndicationProhibitTimer(4);
   protected static final OverheatingAssistanceConfig_overheatingIndicationProhibitTimer _s10 = new OverheatingAssistanceConfig_overheatingIndicationProhibitTimer(5);
   protected static final OverheatingAssistanceConfig_overheatingIndicationProhibitTimer _s20 = new OverheatingAssistanceConfig_overheatingIndicationProhibitTimer(6);
   protected static final OverheatingAssistanceConfig_overheatingIndicationProhibitTimer _s30 = new OverheatingAssistanceConfig_overheatingIndicationProhibitTimer(7);
   protected static final OverheatingAssistanceConfig_overheatingIndicationProhibitTimer _s60 = new OverheatingAssistanceConfig_overheatingIndicationProhibitTimer(8);
   protected static final OverheatingAssistanceConfig_overheatingIndicationProhibitTimer _s90 = new OverheatingAssistanceConfig_overheatingIndicationProhibitTimer(9);
   protected static final OverheatingAssistanceConfig_overheatingIndicationProhibitTimer _s120 = new OverheatingAssistanceConfig_overheatingIndicationProhibitTimer(10);
   protected static final OverheatingAssistanceConfig_overheatingIndicationProhibitTimer _s300 = new OverheatingAssistanceConfig_overheatingIndicationProhibitTimer(11);
   protected static final OverheatingAssistanceConfig_overheatingIndicationProhibitTimer _s600 = new OverheatingAssistanceConfig_overheatingIndicationProhibitTimer(12);
   protected static final OverheatingAssistanceConfig_overheatingIndicationProhibitTimer _spare3 = new OverheatingAssistanceConfig_overheatingIndicationProhibitTimer(13);
   protected static final OverheatingAssistanceConfig_overheatingIndicationProhibitTimer _spare2 = new OverheatingAssistanceConfig_overheatingIndicationProhibitTimer(14);
   protected static final OverheatingAssistanceConfig_overheatingIndicationProhibitTimer _spare1 = new OverheatingAssistanceConfig_overheatingIndicationProhibitTimer(15);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    *   7
    *   8
    *   9
    *   10
    *   11
    *   12
    *   13
    *   14
    *   15
    */
   protected OverheatingAssistanceConfig_overheatingIndicationProhibitTimer (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for s0.
    */
   public static OverheatingAssistanceConfig_overheatingIndicationProhibitTimer s0() {
      return _s0;
   }

   /**
    * Singleton accessor method for s0dot5.
    */
   public static OverheatingAssistanceConfig_overheatingIndicationProhibitTimer s0dot5() {
      return _s0dot5;
   }

   /**
    * Singleton accessor method for s1.
    */
   public static OverheatingAssistanceConfig_overheatingIndicationProhibitTimer s1() {
      return _s1;
   }

   /**
    * Singleton accessor method for s2.
    */
   public static OverheatingAssistanceConfig_overheatingIndicationProhibitTimer s2() {
      return _s2;
   }

   /**
    * Singleton accessor method for s5.
    */
   public static OverheatingAssistanceConfig_overheatingIndicationProhibitTimer s5() {
      return _s5;
   }

   /**
    * Singleton accessor method for s10.
    */
   public static OverheatingAssistanceConfig_overheatingIndicationProhibitTimer s10() {
      return _s10;
   }

   /**
    * Singleton accessor method for s20.
    */
   public static OverheatingAssistanceConfig_overheatingIndicationProhibitTimer s20() {
      return _s20;
   }

   /**
    * Singleton accessor method for s30.
    */
   public static OverheatingAssistanceConfig_overheatingIndicationProhibitTimer s30() {
      return _s30;
   }

   /**
    * Singleton accessor method for s60.
    */
   public static OverheatingAssistanceConfig_overheatingIndicationProhibitTimer s60() {
      return _s60;
   }

   /**
    * Singleton accessor method for s90.
    */
   public static OverheatingAssistanceConfig_overheatingIndicationProhibitTimer s90() {
      return _s90;
   }

   /**
    * Singleton accessor method for s120.
    */
   public static OverheatingAssistanceConfig_overheatingIndicationProhibitTimer s120() {
      return _s120;
   }

   /**
    * Singleton accessor method for s300.
    */
   public static OverheatingAssistanceConfig_overheatingIndicationProhibitTimer s300() {
      return _s300;
   }

   /**
    * Singleton accessor method for s600.
    */
   public static OverheatingAssistanceConfig_overheatingIndicationProhibitTimer s600() {
      return _s600;
   }

   /**
    * Singleton accessor method for spare3.
    */
   public static OverheatingAssistanceConfig_overheatingIndicationProhibitTimer spare3() {
      return _spare3;
   }

   /**
    * Singleton accessor method for spare2.
    */
   public static OverheatingAssistanceConfig_overheatingIndicationProhibitTimer spare2() {
      return _spare2;
   }

   /**
    * Singleton accessor method for spare1.
    */
   public static OverheatingAssistanceConfig_overheatingIndicationProhibitTimer spare1() {
      return _spare1;
   }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return OverheatingAssistanceConfig_overheatingIndicationProhibitTimer.valueOf( OverheatingAssistanceConfig_overheatingIndicationProhibitTimer.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static OverheatingAssistanceConfig_overheatingIndicationProhibitTimer valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 0: return s0();
         case 1: return s0dot5();
         case 2: return s1();
         case 3: return s2();
         case 4: return s5();
         case 5: return s10();
         case 6: return s20();
         case 7: return s30();
         case 8: return s60();
         case 9: return s90();
         case 10: return s120();
         case 11: return s300();
         case 12: return s600();
         case 13: return spare3();
         case 14: return spare2();
         case 15: return spare1();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      ui = (int) buffer.decodeConsWholeNumber (16);

      switch (ui) {
         case 0: ret =  0; break;
         case 1: ret =  1; break;
         case 2: ret =  2; break;
         case 3: ret =  3; break;
         case 4: ret =  4; break;
         case 5: ret =  5; break;
         case 6: ret =  6; break;
         case 7: ret =  7; break;
         case 8: ret =  8; break;
         case 9: ret =  9; break;
         case 10: ret =  10; break;
         case 11: ret =  11; break;
         case 12: ret =  12; break;
         case 13: ret =  13; break;
         case 14: ret =  14; break;
         case 15: ret =  15; break;
         default: throw new Asn1InvalidEnumException (ui);
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (OverheatingAssistanceConfig_overheatingIndicationProhibitTimer.valueOf(ret).toString());

      return ret;
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      switch ((int)value) {
         case 0: ui = 0; /* s0 */break;
         case 1: ui = 1; /* s0dot5 */break;
         case 2: ui = 2; /* s1 */break;
         case 3: ui = 3; /* s2 */break;
         case 4: ui = 4; /* s5 */break;
         case 5: ui = 5; /* s10 */break;
         case 6: ui = 6; /* s20 */break;
         case 7: ui = 7; /* s30 */break;
         case 8: ui = 8; /* s60 */break;
         case 9: ui = 9; /* s90 */break;
         case 10: ui = 10; /* s120 */break;
         case 11: ui = 11; /* s300 */break;
         case 12: ui = 12; /* s600 */break;
         case 13: ui = 13; /* spare3 */break;
         case 14: ui = 14; /* spare2 */break;
         case 15: ui = 15; /* spare1 */break;
         default:
            throw new Asn1InvalidEnumException (value);
      }

      buffer.encodeConsWholeNumber (ui, 16);
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("s0");
         case 1: return ("s0dot5");
         case 2: return ("s1");
         case 3: return ("s2");
         case 4: return ("s5");
         case 5: return ("s10");
         case 6: return ("s20");
         case 7: return ("s30");
         case 8: return ("s60");
         case 9: return ("s90");
         case 10: return ("s120");
         case 11: return ("s300");
         case 12: return ("s600");
         case 13: return ("spare3");
         case 14: return ("spare2");
         case 15: return ("spare1");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
