/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class RACH_ConfigCommonTwoStepRA_r16_msgA_PRACH_RootSequenceIndex_r16 extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CHOICE";
   }

   // Choice element identifier constants
   public final static byte _L839 = 1;
   public final static byte _L139 = 2;
   public final static byte _L571 = 3;
   public final static byte _L1151 = 4;

   public RACH_ConfigCommonTwoStepRA_r16_msgA_PRACH_RootSequenceIndex_r16 () {
      super();
   }

   public RACH_ConfigCommonTwoStepRA_r16_msgA_PRACH_RootSequenceIndex_r16 (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _L839: return "l839";
      case _L139: return "l139";
      case _L571: return "l571";
      case _L1151: return "l1151";
      default: return "UNDEFINED";
      }
   }

   public void set_l839 (Asn1Integer value) {
      setElement (_L839, value);
   }

   public void set_l139 (Asn1Integer value) {
      setElement (_L139, value);
   }

   public void set_l571 (Asn1Integer value) {
      setElement (_L571, value);
   }

   public void set_l1151 (Asn1Integer value) {
      setElement (_L1151, value);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int idx = (int) buffer.decodeConsWholeNumber (4, "index");
      choiceID = idx + 1;
      buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

      switch (idx) {
         // l839
         case 0: { 
            Asn1Integer l839;
            element = l839 = new Asn1Integer();
            l839.decode (buffer, 0, 837);

            buffer.invokeCharacters(l839.toString());
            break;
         }

         // l139
         case 1: { 
            Asn1Integer l139;
            element = l139 = new Asn1Integer();
            l139.decode (buffer, 0, 137);

            buffer.invokeCharacters(l139.toString());
            break;
         }

         // l571
         case 2: { 
            Asn1Integer l571;
            element = l571 = new Asn1Integer();
            l571.decode (buffer, 0, 569);

            buffer.invokeCharacters(l571.toString());
            break;
         }

         // l1151
         case 3: { 
            Asn1Integer l1151;
            element = l1151 = new Asn1Integer();
            l1151.decode (buffer, 0, 1149);

            buffer.invokeCharacters(l1151.toString());
            break;
         }

         default:
         throw new Asn1InvalidChoiceOptionException (buffer, idx);
      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // Encode choice index value

      buffer.encodeConsWholeNumber (choiceID - 1, 4, "index");

      buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

      switch (choiceID) {
         // l839
         case _L839:
            Asn1Integer l839 = (Asn1Integer) element;
            l839.encode (buffer, 0, 837);
            break;

         // l139
         case _L139:
            Asn1Integer l139 = (Asn1Integer) element;
            l139.encode (buffer, 0, 137);
            break;

         // l571
         case _L571:
            Asn1Integer l571 = (Asn1Integer) element;
            l571.encode (buffer, 0, 569);
            break;

         // l1151
         case _L1151:
            Asn1Integer l1151 = (Asn1Integer) element;
            l1151.encode (buffer, 0, 1149);
            break;

         default:
         throw new Asn1InvalidChoiceOptionException();
      }

      buffer.getContext().eventDispatcher.endElement("getElemName()", -1);
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (element != null) {
         element.print (_sb, getElemName(), _level+1);
      }
      indent (_sb, _level);
      _sb.append("}\n");
   }

}
