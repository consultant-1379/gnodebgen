/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SL_ResourcePool_r16 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SL-ResourcePool-r16";
   }

   public SL_ResourcePool_r16_sl_PSCCH_Config_r16 sl_PSCCH_Config_r16;  // optional
   public SL_ResourcePool_r16_sl_PSSCH_Config_r16 sl_PSSCH_Config_r16;  // optional
   public SL_ResourcePool_r16_sl_PSFCH_Config_r16 sl_PSFCH_Config_r16;  // optional
   public SL_SyncAllowed_r16 sl_SyncAllowed_r16;  // optional
   public SL_ResourcePool_r16_sl_SubchannelSize_r16 sl_SubchannelSize_r16 = null;  // optional
   public Asn1Integer dummy;  // optional
   public Asn1Integer sl_StartRB_Subchannel_r16;  // optional
   public Asn1Integer sl_NumSubchannel_r16;  // optional
   public SL_ResourcePool_r16_sl_Additional_MCS_Table_r16 sl_Additional_MCS_Table_r16 = null;  // optional
   public Asn1Integer sl_ThreshS_RSSI_CBR_r16;  // optional
   public SL_ResourcePool_r16_sl_TimeWindowSizeCBR_r16 sl_TimeWindowSizeCBR_r16 = null;  // optional
   public SL_ResourcePool_r16_sl_TimeWindowSizeCR_r16 sl_TimeWindowSizeCR_r16 = null;  // optional
   public SL_PTRS_Config_r16 sl_PTRS_Config_r16;  // optional
   public SL_UE_SelectedConfigRP_r16 sl_UE_SelectedConfigRP_r16;  // optional
   public SL_ResourcePool_r16_sl_RxParametersNcell_r16 sl_RxParametersNcell_r16;  // optional
   public SL_ResourcePool_r16_sl_ZoneConfigMCR_List_r16 sl_ZoneConfigMCR_List_r16;  // optional
   public FilterCoefficient sl_FilterCoefficient_r16 = null;  // optional
   public Asn1Integer sl_RB_Number_r16;  // optional
   public SL_ResourcePool_r16_sl_PreemptionEnable_r16 sl_PreemptionEnable_r16 = null;  // optional
   public Asn1Integer sl_PriorityThreshold_UL_URLLC_r16;  // optional
   public Asn1Integer sl_PriorityThreshold_r16;  // optional
   public SL_ResourcePool_r16_sl_X_Overhead_r16 sl_X_Overhead_r16 = null;  // optional
   public SL_PowerControl_r16 sl_PowerControl_r16;  // optional
   public SL_TxPercentageList_r16 sl_TxPercentageList_r16;  // optional
   public SL_MinMaxMCS_List_r16 sl_MinMaxMCS_List_r16;  // optional
   public boolean mV2ExtPresent;
   public Asn1BitString sl_TimeResource_r16;  // optional
   public Asn1OpenExt extElem1;

   public SL_ResourcePool_r16 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SL_ResourcePool_r16 (
      SL_ResourcePool_r16_sl_PSCCH_Config_r16 sl_PSCCH_Config_r16_,
      SL_ResourcePool_r16_sl_PSSCH_Config_r16 sl_PSSCH_Config_r16_,
      SL_ResourcePool_r16_sl_PSFCH_Config_r16 sl_PSFCH_Config_r16_,
      SL_SyncAllowed_r16 sl_SyncAllowed_r16_,
      SL_ResourcePool_r16_sl_SubchannelSize_r16 sl_SubchannelSize_r16_,
      Asn1Integer dummy_,
      Asn1Integer sl_StartRB_Subchannel_r16_,
      Asn1Integer sl_NumSubchannel_r16_,
      SL_ResourcePool_r16_sl_Additional_MCS_Table_r16 sl_Additional_MCS_Table_r16_,
      Asn1Integer sl_ThreshS_RSSI_CBR_r16_,
      SL_ResourcePool_r16_sl_TimeWindowSizeCBR_r16 sl_TimeWindowSizeCBR_r16_,
      SL_ResourcePool_r16_sl_TimeWindowSizeCR_r16 sl_TimeWindowSizeCR_r16_,
      SL_PTRS_Config_r16 sl_PTRS_Config_r16_,
      SL_UE_SelectedConfigRP_r16 sl_UE_SelectedConfigRP_r16_,
      SL_ResourcePool_r16_sl_RxParametersNcell_r16 sl_RxParametersNcell_r16_,
      SL_ResourcePool_r16_sl_ZoneConfigMCR_List_r16 sl_ZoneConfigMCR_List_r16_,
      FilterCoefficient sl_FilterCoefficient_r16_,
      Asn1Integer sl_RB_Number_r16_,
      SL_ResourcePool_r16_sl_PreemptionEnable_r16 sl_PreemptionEnable_r16_,
      Asn1Integer sl_PriorityThreshold_UL_URLLC_r16_,
      Asn1Integer sl_PriorityThreshold_r16_,
      SL_ResourcePool_r16_sl_X_Overhead_r16 sl_X_Overhead_r16_,
      SL_PowerControl_r16 sl_PowerControl_r16_,
      SL_TxPercentageList_r16 sl_TxPercentageList_r16_,
      SL_MinMaxMCS_List_r16 sl_MinMaxMCS_List_r16_,
      Asn1BitString sl_TimeResource_r16_
   ) {
      super();
      sl_PSCCH_Config_r16 = sl_PSCCH_Config_r16_;
      sl_PSSCH_Config_r16 = sl_PSSCH_Config_r16_;
      sl_PSFCH_Config_r16 = sl_PSFCH_Config_r16_;
      sl_SyncAllowed_r16 = sl_SyncAllowed_r16_;
      sl_SubchannelSize_r16 = sl_SubchannelSize_r16_;
      dummy = dummy_;
      sl_StartRB_Subchannel_r16 = sl_StartRB_Subchannel_r16_;
      sl_NumSubchannel_r16 = sl_NumSubchannel_r16_;
      sl_Additional_MCS_Table_r16 = sl_Additional_MCS_Table_r16_;
      sl_ThreshS_RSSI_CBR_r16 = sl_ThreshS_RSSI_CBR_r16_;
      sl_TimeWindowSizeCBR_r16 = sl_TimeWindowSizeCBR_r16_;
      sl_TimeWindowSizeCR_r16 = sl_TimeWindowSizeCR_r16_;
      sl_PTRS_Config_r16 = sl_PTRS_Config_r16_;
      sl_UE_SelectedConfigRP_r16 = sl_UE_SelectedConfigRP_r16_;
      sl_RxParametersNcell_r16 = sl_RxParametersNcell_r16_;
      sl_ZoneConfigMCR_List_r16 = sl_ZoneConfigMCR_List_r16_;
      sl_FilterCoefficient_r16 = sl_FilterCoefficient_r16_;
      sl_RB_Number_r16 = sl_RB_Number_r16_;
      sl_PreemptionEnable_r16 = sl_PreemptionEnable_r16_;
      sl_PriorityThreshold_UL_URLLC_r16 = sl_PriorityThreshold_UL_URLLC_r16_;
      sl_PriorityThreshold_r16 = sl_PriorityThreshold_r16_;
      sl_X_Overhead_r16 = sl_X_Overhead_r16_;
      sl_PowerControl_r16 = sl_PowerControl_r16_;
      sl_TxPercentageList_r16 = sl_TxPercentageList_r16_;
      sl_MinMaxMCS_List_r16 = sl_MinMaxMCS_List_r16_;
      sl_TimeResource_r16 = sl_TimeResource_r16_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SL_ResourcePool_r16 (SL_ResourcePool_r16_sl_PSCCH_Config_r16 sl_PSCCH_Config_r16_,
      SL_ResourcePool_r16_sl_PSSCH_Config_r16 sl_PSSCH_Config_r16_,
      SL_ResourcePool_r16_sl_PSFCH_Config_r16 sl_PSFCH_Config_r16_,
      SL_SyncAllowed_r16 sl_SyncAllowed_r16_,
      SL_ResourcePool_r16_sl_SubchannelSize_r16 sl_SubchannelSize_r16_,
      long dummy_,
      long sl_StartRB_Subchannel_r16_,
      long sl_NumSubchannel_r16_,
      SL_ResourcePool_r16_sl_Additional_MCS_Table_r16 sl_Additional_MCS_Table_r16_,
      long sl_ThreshS_RSSI_CBR_r16_,
      SL_ResourcePool_r16_sl_TimeWindowSizeCBR_r16 sl_TimeWindowSizeCBR_r16_,
      SL_ResourcePool_r16_sl_TimeWindowSizeCR_r16 sl_TimeWindowSizeCR_r16_,
      SL_PTRS_Config_r16 sl_PTRS_Config_r16_,
      SL_UE_SelectedConfigRP_r16 sl_UE_SelectedConfigRP_r16_,
      SL_ResourcePool_r16_sl_RxParametersNcell_r16 sl_RxParametersNcell_r16_,
      SL_ResourcePool_r16_sl_ZoneConfigMCR_List_r16 sl_ZoneConfigMCR_List_r16_,
      FilterCoefficient sl_FilterCoefficient_r16_,
      long sl_RB_Number_r16_,
      SL_ResourcePool_r16_sl_PreemptionEnable_r16 sl_PreemptionEnable_r16_,
      long sl_PriorityThreshold_UL_URLLC_r16_,
      long sl_PriorityThreshold_r16_,
      SL_ResourcePool_r16_sl_X_Overhead_r16 sl_X_Overhead_r16_,
      SL_PowerControl_r16 sl_PowerControl_r16_,
      SL_TxPercentageList_r16 sl_TxPercentageList_r16_,
      SL_MinMaxMCS_List_r16 sl_MinMaxMCS_List_r16_,
      Asn1BitString sl_TimeResource_r16_
   ) {
      super();
      sl_PSCCH_Config_r16 = sl_PSCCH_Config_r16_;
      sl_PSSCH_Config_r16 = sl_PSSCH_Config_r16_;
      sl_PSFCH_Config_r16 = sl_PSFCH_Config_r16_;
      sl_SyncAllowed_r16 = sl_SyncAllowed_r16_;
      sl_SubchannelSize_r16 = sl_SubchannelSize_r16_;
      dummy = new Asn1Integer (dummy_);
      sl_StartRB_Subchannel_r16 = new Asn1Integer (sl_StartRB_Subchannel_r16_);
      sl_NumSubchannel_r16 = new Asn1Integer (sl_NumSubchannel_r16_);
      sl_Additional_MCS_Table_r16 = sl_Additional_MCS_Table_r16_;
      sl_ThreshS_RSSI_CBR_r16 = new Asn1Integer (sl_ThreshS_RSSI_CBR_r16_);
      sl_TimeWindowSizeCBR_r16 = sl_TimeWindowSizeCBR_r16_;
      sl_TimeWindowSizeCR_r16 = sl_TimeWindowSizeCR_r16_;
      sl_PTRS_Config_r16 = sl_PTRS_Config_r16_;
      sl_UE_SelectedConfigRP_r16 = sl_UE_SelectedConfigRP_r16_;
      sl_RxParametersNcell_r16 = sl_RxParametersNcell_r16_;
      sl_ZoneConfigMCR_List_r16 = sl_ZoneConfigMCR_List_r16_;
      sl_FilterCoefficient_r16 = sl_FilterCoefficient_r16_;
      sl_RB_Number_r16 = new Asn1Integer (sl_RB_Number_r16_);
      sl_PreemptionEnable_r16 = sl_PreemptionEnable_r16_;
      sl_PriorityThreshold_UL_URLLC_r16 = new Asn1Integer (sl_PriorityThreshold_UL_URLLC_r16_);
      sl_PriorityThreshold_r16 = new Asn1Integer (sl_PriorityThreshold_r16_);
      sl_X_Overhead_r16 = sl_X_Overhead_r16_;
      sl_PowerControl_r16 = sl_PowerControl_r16_;
      sl_TxPercentageList_r16 = sl_TxPercentageList_r16_;
      sl_MinMaxMCS_List_r16 = sl_MinMaxMCS_List_r16_;
      sl_TimeResource_r16 = sl_TimeResource_r16_;
   }

   public void init () {
      sl_PSCCH_Config_r16 = null;
      sl_PSSCH_Config_r16 = null;
      sl_PSFCH_Config_r16 = null;
      sl_SyncAllowed_r16 = null;
      sl_SubchannelSize_r16 = null;
      dummy = null;
      sl_StartRB_Subchannel_r16 = null;
      sl_NumSubchannel_r16 = null;
      sl_Additional_MCS_Table_r16 = null;
      sl_ThreshS_RSSI_CBR_r16 = null;
      sl_TimeWindowSizeCBR_r16 = null;
      sl_TimeWindowSizeCR_r16 = null;
      sl_PTRS_Config_r16 = null;
      sl_UE_SelectedConfigRP_r16 = null;
      sl_RxParametersNcell_r16 = null;
      sl_ZoneConfigMCR_List_r16 = null;
      sl_FilterCoefficient_r16 = null;
      sl_RB_Number_r16 = null;
      sl_PreemptionEnable_r16 = null;
      sl_PriorityThreshold_UL_URLLC_r16 = null;
      sl_PriorityThreshold_r16 = null;
      sl_X_Overhead_r16 = null;
      sl_PowerControl_r16 = null;
      sl_TxPercentageList_r16 = null;
      sl_MinMaxMCS_List_r16 = null;
      sl_TimeResource_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 27; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return sl_PSCCH_Config_r16;
         case 1: return sl_PSSCH_Config_r16;
         case 2: return sl_PSFCH_Config_r16;
         case 3: return sl_SyncAllowed_r16;
         case 4: return sl_SubchannelSize_r16;
         case 5: return dummy;
         case 6: return sl_StartRB_Subchannel_r16;
         case 7: return sl_NumSubchannel_r16;
         case 8: return sl_Additional_MCS_Table_r16;
         case 9: return sl_ThreshS_RSSI_CBR_r16;
         case 10: return sl_TimeWindowSizeCBR_r16;
         case 11: return sl_TimeWindowSizeCR_r16;
         case 12: return sl_PTRS_Config_r16;
         case 13: return sl_UE_SelectedConfigRP_r16;
         case 14: return sl_RxParametersNcell_r16;
         case 15: return sl_ZoneConfigMCR_List_r16;
         case 16: return sl_FilterCoefficient_r16;
         case 17: return sl_RB_Number_r16;
         case 18: return sl_PreemptionEnable_r16;
         case 19: return sl_PriorityThreshold_UL_URLLC_r16;
         case 20: return sl_PriorityThreshold_r16;
         case 21: return sl_X_Overhead_r16;
         case 22: return sl_PowerControl_r16;
         case 23: return sl_TxPercentageList_r16;
         case 24: return sl_MinMaxMCS_List_r16;
         case 25: return sl_TimeResource_r16;
         case 26: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "sl-PSCCH-Config-r16";
         case 1: return "sl-PSSCH-Config-r16";
         case 2: return "sl-PSFCH-Config-r16";
         case 3: return "sl-SyncAllowed-r16";
         case 4: return "sl-SubchannelSize-r16";
         case 5: return "dummy";
         case 6: return "sl-StartRB-Subchannel-r16";
         case 7: return "sl-NumSubchannel-r16";
         case 8: return "sl-Additional-MCS-Table-r16";
         case 9: return "sl-ThreshS-RSSI-CBR-r16";
         case 10: return "sl-TimeWindowSizeCBR-r16";
         case 11: return "sl-TimeWindowSizeCR-r16";
         case 12: return "sl-PTRS-Config-r16";
         case 13: return "sl-UE-SelectedConfigRP-r16";
         case 14: return "sl-RxParametersNcell-r16";
         case 15: return "sl-ZoneConfigMCR-List-r16";
         case 16: return "sl-FilterCoefficient-r16";
         case 17: return "sl-RB-Number-r16";
         case 18: return "sl-PreemptionEnable-r16";
         case 19: return "sl-PriorityThreshold-UL-URLLC-r16";
         case 20: return "sl-PriorityThreshold-r16";
         case 21: return "sl-X-Overhead-r16";
         case 22: return "sl-PowerControl-r16";
         case 23: return "sl-TxPercentageList-r16";
         case 24: return "sl-MinMaxMCS-List-r16";
         case 25: return "sl-TimeResource-r16";
         case 26: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean sl_PSCCH_Config_r16Present = buffer.decodeBit ("sl_PSCCH_Config_r16Present");
      boolean sl_PSSCH_Config_r16Present = buffer.decodeBit ("sl_PSSCH_Config_r16Present");
      boolean sl_PSFCH_Config_r16Present = buffer.decodeBit ("sl_PSFCH_Config_r16Present");
      boolean sl_SyncAllowed_r16Present = buffer.decodeBit ("sl_SyncAllowed_r16Present");
      boolean sl_SubchannelSize_r16Present = buffer.decodeBit ("sl_SubchannelSize_r16Present");
      boolean dummyPresent = buffer.decodeBit ("dummyPresent");
      boolean sl_StartRB_Subchannel_r16Present = buffer.decodeBit ("sl_StartRB_Subchannel_r16Present");
      boolean sl_NumSubchannel_r16Present = buffer.decodeBit ("sl_NumSubchannel_r16Present");
      boolean sl_Additional_MCS_Table_r16Present = buffer.decodeBit ("sl_Additional_MCS_Table_r16Present");
      boolean sl_ThreshS_RSSI_CBR_r16Present = buffer.decodeBit ("sl_ThreshS_RSSI_CBR_r16Present");
      boolean sl_TimeWindowSizeCBR_r16Present = buffer.decodeBit ("sl_TimeWindowSizeCBR_r16Present");
      boolean sl_TimeWindowSizeCR_r16Present = buffer.decodeBit ("sl_TimeWindowSizeCR_r16Present");
      boolean sl_PTRS_Config_r16Present = buffer.decodeBit ("sl_PTRS_Config_r16Present");
      boolean sl_UE_SelectedConfigRP_r16Present = buffer.decodeBit ("sl_UE_SelectedConfigRP_r16Present");
      boolean sl_RxParametersNcell_r16Present = buffer.decodeBit ("sl_RxParametersNcell_r16Present");
      boolean sl_ZoneConfigMCR_List_r16Present = buffer.decodeBit ("sl_ZoneConfigMCR_List_r16Present");
      boolean sl_FilterCoefficient_r16Present = buffer.decodeBit ("sl_FilterCoefficient_r16Present");
      boolean sl_RB_Number_r16Present = buffer.decodeBit ("sl_RB_Number_r16Present");
      boolean sl_PreemptionEnable_r16Present = buffer.decodeBit ("sl_PreemptionEnable_r16Present");
      boolean sl_PriorityThreshold_UL_URLLC_r16Present = buffer.decodeBit ("sl_PriorityThreshold_UL_URLLC_r16Present");
      boolean sl_PriorityThreshold_r16Present = buffer.decodeBit ("sl_PriorityThreshold_r16Present");
      boolean sl_X_Overhead_r16Present = buffer.decodeBit ("sl_X_Overhead_r16Present");
      boolean sl_PowerControl_r16Present = buffer.decodeBit ("sl_PowerControl_r16Present");
      boolean sl_TxPercentageList_r16Present = buffer.decodeBit ("sl_TxPercentageList_r16Present");
      boolean sl_MinMaxMCS_List_r16Present = buffer.decodeBit ("sl_MinMaxMCS_List_r16Present");

      // decode sl_PSCCH_Config_r16

      if (sl_PSCCH_Config_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_PSCCH_Config_r16", -1);

         sl_PSCCH_Config_r16 = new SL_ResourcePool_r16_sl_PSCCH_Config_r16();
         sl_PSCCH_Config_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sl_PSCCH_Config_r16", -1);
      }
      else {
         sl_PSCCH_Config_r16 = null;
      }

      // decode sl_PSSCH_Config_r16

      if (sl_PSSCH_Config_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_PSSCH_Config_r16", -1);

         sl_PSSCH_Config_r16 = new SL_ResourcePool_r16_sl_PSSCH_Config_r16();
         sl_PSSCH_Config_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sl_PSSCH_Config_r16", -1);
      }
      else {
         sl_PSSCH_Config_r16 = null;
      }

      // decode sl_PSFCH_Config_r16

      if (sl_PSFCH_Config_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_PSFCH_Config_r16", -1);

         sl_PSFCH_Config_r16 = new SL_ResourcePool_r16_sl_PSFCH_Config_r16();
         sl_PSFCH_Config_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sl_PSFCH_Config_r16", -1);
      }
      else {
         sl_PSFCH_Config_r16 = null;
      }

      // decode sl_SyncAllowed_r16

      if (sl_SyncAllowed_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_SyncAllowed_r16", -1);

         sl_SyncAllowed_r16 = new SL_SyncAllowed_r16();
         sl_SyncAllowed_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sl_SyncAllowed_r16", -1);
      }
      else {
         sl_SyncAllowed_r16 = null;
      }

      // decode sl_SubchannelSize_r16

      if (sl_SubchannelSize_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_SubchannelSize_r16", -1);

         int tval = SL_ResourcePool_r16_sl_SubchannelSize_r16.decodeEnumValue (buffer);
         sl_SubchannelSize_r16 = SL_ResourcePool_r16_sl_SubchannelSize_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("sl_SubchannelSize_r16", -1);
      }
      else {
         sl_SubchannelSize_r16 = null;
      }

      // decode dummy

      if (dummyPresent) {
         buffer.getContext().eventDispatcher.startElement("dummy", -1);

         dummy = new Asn1Integer();
         dummy.decode (buffer, 10, 160);

         buffer.invokeCharacters(dummy.toString());
         buffer.getContext().eventDispatcher.endElement("dummy", -1);
      }
      else {
         dummy = null;
      }

      // decode sl_StartRB_Subchannel_r16

      if (sl_StartRB_Subchannel_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_StartRB_Subchannel_r16", -1);

         sl_StartRB_Subchannel_r16 = new Asn1Integer();
         sl_StartRB_Subchannel_r16.decode (buffer, 0, 265);

         buffer.invokeCharacters(sl_StartRB_Subchannel_r16.toString());
         buffer.getContext().eventDispatcher.endElement("sl_StartRB_Subchannel_r16", -1);
      }
      else {
         sl_StartRB_Subchannel_r16 = null;
      }

      // decode sl_NumSubchannel_r16

      if (sl_NumSubchannel_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_NumSubchannel_r16", -1);

         sl_NumSubchannel_r16 = new Asn1Integer();
         sl_NumSubchannel_r16.decode (buffer, 1, 27);

         buffer.invokeCharacters(sl_NumSubchannel_r16.toString());
         buffer.getContext().eventDispatcher.endElement("sl_NumSubchannel_r16", -1);
      }
      else {
         sl_NumSubchannel_r16 = null;
      }

      // decode sl_Additional_MCS_Table_r16

      if (sl_Additional_MCS_Table_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_Additional_MCS_Table_r16", -1);

         int tval = SL_ResourcePool_r16_sl_Additional_MCS_Table_r16.decodeEnumValue (buffer);
         sl_Additional_MCS_Table_r16 = SL_ResourcePool_r16_sl_Additional_MCS_Table_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("sl_Additional_MCS_Table_r16", -1);
      }
      else {
         sl_Additional_MCS_Table_r16 = null;
      }

      // decode sl_ThreshS_RSSI_CBR_r16

      if (sl_ThreshS_RSSI_CBR_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_ThreshS_RSSI_CBR_r16", -1);

         sl_ThreshS_RSSI_CBR_r16 = new Asn1Integer();
         sl_ThreshS_RSSI_CBR_r16.decode (buffer, 0, 45);

         buffer.invokeCharacters(sl_ThreshS_RSSI_CBR_r16.toString());
         buffer.getContext().eventDispatcher.endElement("sl_ThreshS_RSSI_CBR_r16", -1);
      }
      else {
         sl_ThreshS_RSSI_CBR_r16 = null;
      }

      // decode sl_TimeWindowSizeCBR_r16

      if (sl_TimeWindowSizeCBR_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_TimeWindowSizeCBR_r16", -1);

         int tval = SL_ResourcePool_r16_sl_TimeWindowSizeCBR_r16.decodeEnumValue (buffer);
         sl_TimeWindowSizeCBR_r16 = SL_ResourcePool_r16_sl_TimeWindowSizeCBR_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("sl_TimeWindowSizeCBR_r16", -1);
      }
      else {
         sl_TimeWindowSizeCBR_r16 = null;
      }

      // decode sl_TimeWindowSizeCR_r16

      if (sl_TimeWindowSizeCR_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_TimeWindowSizeCR_r16", -1);

         int tval = SL_ResourcePool_r16_sl_TimeWindowSizeCR_r16.decodeEnumValue (buffer);
         sl_TimeWindowSizeCR_r16 = SL_ResourcePool_r16_sl_TimeWindowSizeCR_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("sl_TimeWindowSizeCR_r16", -1);
      }
      else {
         sl_TimeWindowSizeCR_r16 = null;
      }

      // decode sl_PTRS_Config_r16

      if (sl_PTRS_Config_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_PTRS_Config_r16", -1);

         sl_PTRS_Config_r16 = new SL_PTRS_Config_r16();
         sl_PTRS_Config_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sl_PTRS_Config_r16", -1);
      }
      else {
         sl_PTRS_Config_r16 = null;
      }

      // decode sl_UE_SelectedConfigRP_r16

      if (sl_UE_SelectedConfigRP_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_UE_SelectedConfigRP_r16", -1);

         sl_UE_SelectedConfigRP_r16 = new SL_UE_SelectedConfigRP_r16();
         sl_UE_SelectedConfigRP_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sl_UE_SelectedConfigRP_r16", -1);
      }
      else {
         sl_UE_SelectedConfigRP_r16 = null;
      }

      // decode sl_RxParametersNcell_r16

      if (sl_RxParametersNcell_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_RxParametersNcell_r16", -1);

         sl_RxParametersNcell_r16 = new SL_ResourcePool_r16_sl_RxParametersNcell_r16();
         sl_RxParametersNcell_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sl_RxParametersNcell_r16", -1);
      }
      else {
         sl_RxParametersNcell_r16 = null;
      }

      // decode sl_ZoneConfigMCR_List_r16

      if (sl_ZoneConfigMCR_List_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_ZoneConfigMCR_List_r16", -1);

         sl_ZoneConfigMCR_List_r16 = new SL_ResourcePool_r16_sl_ZoneConfigMCR_List_r16();
         sl_ZoneConfigMCR_List_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sl_ZoneConfigMCR_List_r16", -1);
      }
      else {
         sl_ZoneConfigMCR_List_r16 = null;
      }

      // decode sl_FilterCoefficient_r16

      if (sl_FilterCoefficient_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_FilterCoefficient_r16", -1);

         int tval = FilterCoefficient.decodeEnumValue (buffer);
         sl_FilterCoefficient_r16 = FilterCoefficient.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("sl_FilterCoefficient_r16", -1);
      }
      else {
         sl_FilterCoefficient_r16 = null;
      }

      // decode sl_RB_Number_r16

      if (sl_RB_Number_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_RB_Number_r16", -1);

         sl_RB_Number_r16 = new Asn1Integer();
         sl_RB_Number_r16.decode (buffer, 10, 275);

         buffer.invokeCharacters(sl_RB_Number_r16.toString());
         buffer.getContext().eventDispatcher.endElement("sl_RB_Number_r16", -1);
      }
      else {
         sl_RB_Number_r16 = null;
      }

      // decode sl_PreemptionEnable_r16

      if (sl_PreemptionEnable_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_PreemptionEnable_r16", -1);

         int tval = SL_ResourcePool_r16_sl_PreemptionEnable_r16.decodeEnumValue (buffer);
         sl_PreemptionEnable_r16 = SL_ResourcePool_r16_sl_PreemptionEnable_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("sl_PreemptionEnable_r16", -1);
      }
      else {
         sl_PreemptionEnable_r16 = null;
      }

      // decode sl_PriorityThreshold_UL_URLLC_r16

      if (sl_PriorityThreshold_UL_URLLC_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_PriorityThreshold_UL_URLLC_r16", -1);

         sl_PriorityThreshold_UL_URLLC_r16 = new Asn1Integer();
         sl_PriorityThreshold_UL_URLLC_r16.decode (buffer, 1, 9);

         buffer.invokeCharacters(sl_PriorityThreshold_UL_URLLC_r16.toString());
         buffer.getContext().eventDispatcher.endElement("sl_PriorityThreshold_UL_URLLC_r16", -1);
      }
      else {
         sl_PriorityThreshold_UL_URLLC_r16 = null;
      }

      // decode sl_PriorityThreshold_r16

      if (sl_PriorityThreshold_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_PriorityThreshold_r16", -1);

         sl_PriorityThreshold_r16 = new Asn1Integer();
         sl_PriorityThreshold_r16.decode (buffer, 1, 9);

         buffer.invokeCharacters(sl_PriorityThreshold_r16.toString());
         buffer.getContext().eventDispatcher.endElement("sl_PriorityThreshold_r16", -1);
      }
      else {
         sl_PriorityThreshold_r16 = null;
      }

      // decode sl_X_Overhead_r16

      if (sl_X_Overhead_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_X_Overhead_r16", -1);

         int tval = SL_ResourcePool_r16_sl_X_Overhead_r16.decodeEnumValue (buffer);
         sl_X_Overhead_r16 = SL_ResourcePool_r16_sl_X_Overhead_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("sl_X_Overhead_r16", -1);
      }
      else {
         sl_X_Overhead_r16 = null;
      }

      // decode sl_PowerControl_r16

      if (sl_PowerControl_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_PowerControl_r16", -1);

         sl_PowerControl_r16 = new SL_PowerControl_r16();
         sl_PowerControl_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sl_PowerControl_r16", -1);
      }
      else {
         sl_PowerControl_r16 = null;
      }

      // decode sl_TxPercentageList_r16

      if (sl_TxPercentageList_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_TxPercentageList_r16", -1);

         sl_TxPercentageList_r16 = new SL_TxPercentageList_r16();
         sl_TxPercentageList_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sl_TxPercentageList_r16", -1);
      }
      else {
         sl_TxPercentageList_r16 = null;
      }

      // decode sl_MinMaxMCS_List_r16

      if (sl_MinMaxMCS_List_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_MinMaxMCS_List_r16", -1);

         sl_MinMaxMCS_List_r16 = new SL_MinMaxMCS_List_r16();
         sl_MinMaxMCS_List_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sl_MinMaxMCS_List_r16", -1);
      }
      else {
         sl_MinMaxMCS_List_r16 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean sl_TimeResource_r16Present = buffer.decodeBit ("sl_TimeResource_r16Present");

            // decode sl_TimeResource_r16

            if (sl_TimeResource_r16Present) {
               buffer.getContext().eventDispatcher.startElement("sl_TimeResource_r16", -1);

               sl_TimeResource_r16 = new Asn1BitString();
               sl_TimeResource_r16.decode (buffer, 10, 160);

               buffer.invokeCharacters(sl_TimeResource_r16.toString());
               buffer.getContext().eventDispatcher.endElement("sl_TimeResource_r16", -1);
            }
            else {
               sl_TimeResource_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (mV2ExtPresent ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((sl_PSCCH_Config_r16 != null), null);
      buffer.encodeBit ((sl_PSSCH_Config_r16 != null), null);
      buffer.encodeBit ((sl_PSFCH_Config_r16 != null), null);
      buffer.encodeBit ((sl_SyncAllowed_r16 != null), null);
      buffer.encodeBit ((sl_SubchannelSize_r16 != null), null);
      buffer.encodeBit ((dummy != null), null);
      buffer.encodeBit ((sl_StartRB_Subchannel_r16 != null), null);
      buffer.encodeBit ((sl_NumSubchannel_r16 != null), null);
      buffer.encodeBit ((sl_Additional_MCS_Table_r16 != null), null);
      buffer.encodeBit ((sl_ThreshS_RSSI_CBR_r16 != null), null);
      buffer.encodeBit ((sl_TimeWindowSizeCBR_r16 != null), null);
      buffer.encodeBit ((sl_TimeWindowSizeCR_r16 != null), null);
      buffer.encodeBit ((sl_PTRS_Config_r16 != null), null);
      buffer.encodeBit ((sl_UE_SelectedConfigRP_r16 != null), null);
      buffer.encodeBit ((sl_RxParametersNcell_r16 != null), null);
      buffer.encodeBit ((sl_ZoneConfigMCR_List_r16 != null), null);
      buffer.encodeBit ((sl_FilterCoefficient_r16 != null), null);
      buffer.encodeBit ((sl_RB_Number_r16 != null), null);
      buffer.encodeBit ((sl_PreemptionEnable_r16 != null), null);
      buffer.encodeBit ((sl_PriorityThreshold_UL_URLLC_r16 != null), null);
      buffer.encodeBit ((sl_PriorityThreshold_r16 != null), null);
      buffer.encodeBit ((sl_X_Overhead_r16 != null), null);
      buffer.encodeBit ((sl_PowerControl_r16 != null), null);
      buffer.encodeBit ((sl_TxPercentageList_r16 != null), null);
      buffer.encodeBit ((sl_MinMaxMCS_List_r16 != null), null);

      // encode sl_PSCCH_Config_r16

      if (sl_PSCCH_Config_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_PSCCH_Config_r16", -1);

         sl_PSCCH_Config_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sl_PSCCH_Config_r16", -1);
      }

      // encode sl_PSSCH_Config_r16

      if (sl_PSSCH_Config_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_PSSCH_Config_r16", -1);

         sl_PSSCH_Config_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sl_PSSCH_Config_r16", -1);
      }

      // encode sl_PSFCH_Config_r16

      if (sl_PSFCH_Config_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_PSFCH_Config_r16", -1);

         sl_PSFCH_Config_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sl_PSFCH_Config_r16", -1);
      }

      // encode sl_SyncAllowed_r16

      if (sl_SyncAllowed_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_SyncAllowed_r16", -1);

         sl_SyncAllowed_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sl_SyncAllowed_r16", -1);
      }

      // encode sl_SubchannelSize_r16

      if (sl_SubchannelSize_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_SubchannelSize_r16", -1);

         sl_SubchannelSize_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sl_SubchannelSize_r16", -1);
      }

      // encode dummy

      if (dummy != null) {
         buffer.getContext().eventDispatcher.startElement("dummy", -1);

         dummy.encode (buffer, 10, 160);

         buffer.getContext().eventDispatcher.endElement("dummy", -1);
      }

      // encode sl_StartRB_Subchannel_r16

      if (sl_StartRB_Subchannel_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_StartRB_Subchannel_r16", -1);

         sl_StartRB_Subchannel_r16.encode (buffer, 0, 265);

         buffer.getContext().eventDispatcher.endElement("sl_StartRB_Subchannel_r16", -1);
      }

      // encode sl_NumSubchannel_r16

      if (sl_NumSubchannel_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_NumSubchannel_r16", -1);

         sl_NumSubchannel_r16.encode (buffer, 1, 27);

         buffer.getContext().eventDispatcher.endElement("sl_NumSubchannel_r16", -1);
      }

      // encode sl_Additional_MCS_Table_r16

      if (sl_Additional_MCS_Table_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_Additional_MCS_Table_r16", -1);

         sl_Additional_MCS_Table_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sl_Additional_MCS_Table_r16", -1);
      }

      // encode sl_ThreshS_RSSI_CBR_r16

      if (sl_ThreshS_RSSI_CBR_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_ThreshS_RSSI_CBR_r16", -1);

         sl_ThreshS_RSSI_CBR_r16.encode (buffer, 0, 45);

         buffer.getContext().eventDispatcher.endElement("sl_ThreshS_RSSI_CBR_r16", -1);
      }

      // encode sl_TimeWindowSizeCBR_r16

      if (sl_TimeWindowSizeCBR_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_TimeWindowSizeCBR_r16", -1);

         sl_TimeWindowSizeCBR_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sl_TimeWindowSizeCBR_r16", -1);
      }

      // encode sl_TimeWindowSizeCR_r16

      if (sl_TimeWindowSizeCR_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_TimeWindowSizeCR_r16", -1);

         sl_TimeWindowSizeCR_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sl_TimeWindowSizeCR_r16", -1);
      }

      // encode sl_PTRS_Config_r16

      if (sl_PTRS_Config_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_PTRS_Config_r16", -1);

         sl_PTRS_Config_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sl_PTRS_Config_r16", -1);
      }

      // encode sl_UE_SelectedConfigRP_r16

      if (sl_UE_SelectedConfigRP_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_UE_SelectedConfigRP_r16", -1);

         sl_UE_SelectedConfigRP_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sl_UE_SelectedConfigRP_r16", -1);
      }

      // encode sl_RxParametersNcell_r16

      if (sl_RxParametersNcell_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_RxParametersNcell_r16", -1);

         sl_RxParametersNcell_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sl_RxParametersNcell_r16", -1);
      }

      // encode sl_ZoneConfigMCR_List_r16

      if (sl_ZoneConfigMCR_List_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_ZoneConfigMCR_List_r16", -1);

         sl_ZoneConfigMCR_List_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sl_ZoneConfigMCR_List_r16", -1);
      }

      // encode sl_FilterCoefficient_r16

      if (sl_FilterCoefficient_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_FilterCoefficient_r16", -1);

         sl_FilterCoefficient_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sl_FilterCoefficient_r16", -1);
      }

      // encode sl_RB_Number_r16

      if (sl_RB_Number_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_RB_Number_r16", -1);

         sl_RB_Number_r16.encode (buffer, 10, 275);

         buffer.getContext().eventDispatcher.endElement("sl_RB_Number_r16", -1);
      }

      // encode sl_PreemptionEnable_r16

      if (sl_PreemptionEnable_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_PreemptionEnable_r16", -1);

         sl_PreemptionEnable_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sl_PreemptionEnable_r16", -1);
      }

      // encode sl_PriorityThreshold_UL_URLLC_r16

      if (sl_PriorityThreshold_UL_URLLC_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_PriorityThreshold_UL_URLLC_r16", -1);

         sl_PriorityThreshold_UL_URLLC_r16.encode (buffer, 1, 9);

         buffer.getContext().eventDispatcher.endElement("sl_PriorityThreshold_UL_URLLC_r16", -1);
      }

      // encode sl_PriorityThreshold_r16

      if (sl_PriorityThreshold_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_PriorityThreshold_r16", -1);

         sl_PriorityThreshold_r16.encode (buffer, 1, 9);

         buffer.getContext().eventDispatcher.endElement("sl_PriorityThreshold_r16", -1);
      }

      // encode sl_X_Overhead_r16

      if (sl_X_Overhead_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_X_Overhead_r16", -1);

         sl_X_Overhead_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sl_X_Overhead_r16", -1);
      }

      // encode sl_PowerControl_r16

      if (sl_PowerControl_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_PowerControl_r16", -1);

         sl_PowerControl_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sl_PowerControl_r16", -1);
      }

      // encode sl_TxPercentageList_r16

      if (sl_TxPercentageList_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_TxPercentageList_r16", -1);

         sl_TxPercentageList_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sl_TxPercentageList_r16", -1);
      }

      // encode sl_MinMaxMCS_List_r16

      if (sl_MinMaxMCS_List_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_MinMaxMCS_List_r16", -1);

         sl_MinMaxMCS_List_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sl_MinMaxMCS_List_r16", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 1;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit (mV2ExtPresent, null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         if (mV2ExtPresent) {
            buffer.reset();
            buffer.encodeBit ((sl_TimeResource_r16 != null), "optbit");
            if (sl_TimeResource_r16 != null) {
               sl_TimeResource_r16.encode (buffer, 10, 160);
            }
            mainBuffer.encodeOpenType (buffer, null);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (sl_PSCCH_Config_r16 != null) sl_PSCCH_Config_r16.print (_sb, "sl_PSCCH_Config_r16", _level+1);
      if (sl_PSSCH_Config_r16 != null) sl_PSSCH_Config_r16.print (_sb, "sl_PSSCH_Config_r16", _level+1);
      if (sl_PSFCH_Config_r16 != null) sl_PSFCH_Config_r16.print (_sb, "sl_PSFCH_Config_r16", _level+1);
      if (sl_SyncAllowed_r16 != null) sl_SyncAllowed_r16.print (_sb, "sl_SyncAllowed_r16", _level+1);
      if (sl_SubchannelSize_r16 != null) sl_SubchannelSize_r16.print (_sb, "sl_SubchannelSize_r16", _level+1);
      if (dummy != null) dummy.print (_sb, "dummy", _level+1);
      if (sl_StartRB_Subchannel_r16 != null) sl_StartRB_Subchannel_r16.print (_sb, "sl_StartRB_Subchannel_r16", _level+1);
      if (sl_NumSubchannel_r16 != null) sl_NumSubchannel_r16.print (_sb, "sl_NumSubchannel_r16", _level+1);
      if (sl_Additional_MCS_Table_r16 != null) sl_Additional_MCS_Table_r16.print (_sb, "sl_Additional_MCS_Table_r16", _level+1);
      if (sl_ThreshS_RSSI_CBR_r16 != null) sl_ThreshS_RSSI_CBR_r16.print (_sb, "sl_ThreshS_RSSI_CBR_r16", _level+1);
      if (sl_TimeWindowSizeCBR_r16 != null) sl_TimeWindowSizeCBR_r16.print (_sb, "sl_TimeWindowSizeCBR_r16", _level+1);
      if (sl_TimeWindowSizeCR_r16 != null) sl_TimeWindowSizeCR_r16.print (_sb, "sl_TimeWindowSizeCR_r16", _level+1);
      if (sl_PTRS_Config_r16 != null) sl_PTRS_Config_r16.print (_sb, "sl_PTRS_Config_r16", _level+1);
      if (sl_UE_SelectedConfigRP_r16 != null) sl_UE_SelectedConfigRP_r16.print (_sb, "sl_UE_SelectedConfigRP_r16", _level+1);
      if (sl_RxParametersNcell_r16 != null) sl_RxParametersNcell_r16.print (_sb, "sl_RxParametersNcell_r16", _level+1);
      if (sl_ZoneConfigMCR_List_r16 != null) sl_ZoneConfigMCR_List_r16.print (_sb, "sl_ZoneConfigMCR_List_r16", _level+1);
      if (sl_FilterCoefficient_r16 != null) sl_FilterCoefficient_r16.print (_sb, "sl_FilterCoefficient_r16", _level+1);
      if (sl_RB_Number_r16 != null) sl_RB_Number_r16.print (_sb, "sl_RB_Number_r16", _level+1);
      if (sl_PreemptionEnable_r16 != null) sl_PreemptionEnable_r16.print (_sb, "sl_PreemptionEnable_r16", _level+1);
      if (sl_PriorityThreshold_UL_URLLC_r16 != null) sl_PriorityThreshold_UL_URLLC_r16.print (_sb, "sl_PriorityThreshold_UL_URLLC_r16", _level+1);
      if (sl_PriorityThreshold_r16 != null) sl_PriorityThreshold_r16.print (_sb, "sl_PriorityThreshold_r16", _level+1);
      if (sl_X_Overhead_r16 != null) sl_X_Overhead_r16.print (_sb, "sl_X_Overhead_r16", _level+1);
      if (sl_PowerControl_r16 != null) sl_PowerControl_r16.print (_sb, "sl_PowerControl_r16", _level+1);
      if (sl_TxPercentageList_r16 != null) sl_TxPercentageList_r16.print (_sb, "sl_TxPercentageList_r16", _level+1);
      if (sl_MinMaxMCS_List_r16 != null) sl_MinMaxMCS_List_r16.print (_sb, "sl_MinMaxMCS_List_r16", _level+1);
      if (sl_TimeResource_r16 != null) sl_TimeResource_r16.print (_sb, "sl_TimeResource_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
