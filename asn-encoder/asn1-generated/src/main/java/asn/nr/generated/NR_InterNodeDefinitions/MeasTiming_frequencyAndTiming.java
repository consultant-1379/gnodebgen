/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_InterNodeDefinitions;

import com.objsys.asn1j.runtime.*;
import asn.nr.generated.NR_RRC_Definitions.ARFCN_ValueNR;
import asn.nr.generated.NR_RRC_Definitions.SubcarrierSpacing;
import asn.nr.generated.NR_RRC_Definitions.SSB_MTC;
import asn.nr.generated.NR_RRC_Definitions.SS_RSSI_Measurement;

public class MeasTiming_frequencyAndTiming extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_InterNodeDefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public ARFCN_ValueNR carrierFreq;
   public SubcarrierSpacing ssbSubcarrierSpacing = null;
   public SSB_MTC ssb_MeasurementTimingConfiguration;
   public SS_RSSI_Measurement ss_RSSI_Measurement;  // optional

   public MeasTiming_frequencyAndTiming () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MeasTiming_frequencyAndTiming (
      ARFCN_ValueNR carrierFreq_,
      SubcarrierSpacing ssbSubcarrierSpacing_,
      SSB_MTC ssb_MeasurementTimingConfiguration_,
      SS_RSSI_Measurement ss_RSSI_Measurement_
   ) {
      super();
      carrierFreq = carrierFreq_;
      ssbSubcarrierSpacing = ssbSubcarrierSpacing_;
      ssb_MeasurementTimingConfiguration = ssb_MeasurementTimingConfiguration_;
      ss_RSSI_Measurement = ss_RSSI_Measurement_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public MeasTiming_frequencyAndTiming (
      ARFCN_ValueNR carrierFreq_,
      SubcarrierSpacing ssbSubcarrierSpacing_,
      SSB_MTC ssb_MeasurementTimingConfiguration_
   ) {
      super();
      carrierFreq = carrierFreq_;
      ssbSubcarrierSpacing = ssbSubcarrierSpacing_;
      ssb_MeasurementTimingConfiguration = ssb_MeasurementTimingConfiguration_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public MeasTiming_frequencyAndTiming (long carrierFreq_,
      SubcarrierSpacing ssbSubcarrierSpacing_,
      SSB_MTC ssb_MeasurementTimingConfiguration_,
      SS_RSSI_Measurement ss_RSSI_Measurement_
   ) {
      super();
      carrierFreq = new ARFCN_ValueNR (carrierFreq_);
      ssbSubcarrierSpacing = ssbSubcarrierSpacing_;
      ssb_MeasurementTimingConfiguration = ssb_MeasurementTimingConfiguration_;
      ss_RSSI_Measurement = ss_RSSI_Measurement_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public MeasTiming_frequencyAndTiming (
      long carrierFreq_,
      SubcarrierSpacing ssbSubcarrierSpacing_,
      SSB_MTC ssb_MeasurementTimingConfiguration_
   ) {
      super();
      carrierFreq = new ARFCN_ValueNR (carrierFreq_);
      ssbSubcarrierSpacing = ssbSubcarrierSpacing_;
      ssb_MeasurementTimingConfiguration = ssb_MeasurementTimingConfiguration_;
   }

   public void init () {
      carrierFreq = null;
      ssbSubcarrierSpacing = null;
      ssb_MeasurementTimingConfiguration = null;
      ss_RSSI_Measurement = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return carrierFreq;
         case 1: return ssbSubcarrierSpacing;
         case 2: return ssb_MeasurementTimingConfiguration;
         case 3: return ss_RSSI_Measurement;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "carrierFreq";
         case 1: return "ssbSubcarrierSpacing";
         case 2: return "ssb-MeasurementTimingConfiguration";
         case 3: return "ss-RSSI-Measurement";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean ss_RSSI_MeasurementPresent = buffer.decodeBit ("ss_RSSI_MeasurementPresent");

      // decode carrierFreq

      buffer.getContext().eventDispatcher.startElement("carrierFreq", -1);

      carrierFreq = new ARFCN_ValueNR();
      carrierFreq.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("carrierFreq", -1);

      // decode ssbSubcarrierSpacing

      buffer.getContext().eventDispatcher.startElement("ssbSubcarrierSpacing", -1);

      {
         int tval = SubcarrierSpacing.decodeEnumValue (buffer);
         ssbSubcarrierSpacing = SubcarrierSpacing.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("ssbSubcarrierSpacing", -1);

      // decode ssb_MeasurementTimingConfiguration

      buffer.getContext().eventDispatcher.startElement("ssb_MeasurementTimingConfiguration", -1);

      ssb_MeasurementTimingConfiguration = new SSB_MTC();
      ssb_MeasurementTimingConfiguration.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("ssb_MeasurementTimingConfiguration", -1);

      // decode ss_RSSI_Measurement

      if (ss_RSSI_MeasurementPresent) {
         buffer.getContext().eventDispatcher.startElement("ss_RSSI_Measurement", -1);

         ss_RSSI_Measurement = new SS_RSSI_Measurement();
         ss_RSSI_Measurement.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ss_RSSI_Measurement", -1);
      }
      else {
         ss_RSSI_Measurement = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((ss_RSSI_Measurement != null), null);

      // encode carrierFreq

      if (carrierFreq != null) {
         buffer.getContext().eventDispatcher.startElement("carrierFreq", -1);

         carrierFreq.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("carrierFreq", -1);
      }
      else throw new Asn1MissingRequiredException ("carrierFreq");

      // encode ssbSubcarrierSpacing

      if (ssbSubcarrierSpacing != null) {
         buffer.getContext().eventDispatcher.startElement("ssbSubcarrierSpacing", -1);

         ssbSubcarrierSpacing.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ssbSubcarrierSpacing", -1);
      }
      else throw new Asn1MissingRequiredException ("ssbSubcarrierSpacing");

      // encode ssb_MeasurementTimingConfiguration

      if (ssb_MeasurementTimingConfiguration != null) {
         buffer.getContext().eventDispatcher.startElement("ssb_MeasurementTimingConfiguration", -1);

         ssb_MeasurementTimingConfiguration.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ssb_MeasurementTimingConfiguration", -1);
      }
      else throw new Asn1MissingRequiredException ("ssb_MeasurementTimingConfiguration");

      // encode ss_RSSI_Measurement

      if (ss_RSSI_Measurement != null) {
         buffer.getContext().eventDispatcher.startElement("ss_RSSI_Measurement", -1);

         ss_RSSI_Measurement.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ss_RSSI_Measurement", -1);
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (carrierFreq != null) carrierFreq.print (_sb, "carrierFreq", _level+1);
      if (ssbSubcarrierSpacing != null) ssbSubcarrierSpacing.print (_sb, "ssbSubcarrierSpacing", _level+1);
      if (ssb_MeasurementTimingConfiguration != null) ssb_MeasurementTimingConfiguration.print (_sb, "ssb_MeasurementTimingConfiguration", _level+1);
      if (ss_RSSI_Measurement != null) ss_RSSI_Measurement.print (_sb, "ss_RSSI_Measurement", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
