/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class DMRS_UplinkConfig_transformPrecodingEnabled extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public Asn1Integer nPUSCH_Identity;  // optional
   public DMRS_UplinkConfig_transformPrecodingEnabled_sequenceGroupHopping sequenceGroupHopping = null;  // optional
   public DMRS_UplinkConfig_transformPrecodingEnabled_sequenceHopping sequenceHopping = null;  // optional
   public boolean mV2ExtPresent;
   public DMRS_UplinkConfig_transformPrecodingEnabled_dmrs_UplinkTransformPrecoding_r16 dmrs_UplinkTransformPrecoding_r16;  // optional
   public Asn1OpenExt extElem1;

   public DMRS_UplinkConfig_transformPrecodingEnabled () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public DMRS_UplinkConfig_transformPrecodingEnabled (
      Asn1Integer nPUSCH_Identity_,
      DMRS_UplinkConfig_transformPrecodingEnabled_sequenceGroupHopping sequenceGroupHopping_,
      DMRS_UplinkConfig_transformPrecodingEnabled_sequenceHopping sequenceHopping_,
      DMRS_UplinkConfig_transformPrecodingEnabled_dmrs_UplinkTransformPrecoding_r16 dmrs_UplinkTransformPrecoding_r16_
   ) {
      super();
      nPUSCH_Identity = nPUSCH_Identity_;
      sequenceGroupHopping = sequenceGroupHopping_;
      sequenceHopping = sequenceHopping_;
      dmrs_UplinkTransformPrecoding_r16 = dmrs_UplinkTransformPrecoding_r16_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public DMRS_UplinkConfig_transformPrecodingEnabled (long nPUSCH_Identity_,
      DMRS_UplinkConfig_transformPrecodingEnabled_sequenceGroupHopping sequenceGroupHopping_,
      DMRS_UplinkConfig_transformPrecodingEnabled_sequenceHopping sequenceHopping_,
      DMRS_UplinkConfig_transformPrecodingEnabled_dmrs_UplinkTransformPrecoding_r16 dmrs_UplinkTransformPrecoding_r16_
   ) {
      super();
      nPUSCH_Identity = new Asn1Integer (nPUSCH_Identity_);
      sequenceGroupHopping = sequenceGroupHopping_;
      sequenceHopping = sequenceHopping_;
      dmrs_UplinkTransformPrecoding_r16 = dmrs_UplinkTransformPrecoding_r16_;
   }

   public void init () {
      nPUSCH_Identity = null;
      sequenceGroupHopping = null;
      sequenceHopping = null;
      dmrs_UplinkTransformPrecoding_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return nPUSCH_Identity;
         case 1: return sequenceGroupHopping;
         case 2: return sequenceHopping;
         case 3: return dmrs_UplinkTransformPrecoding_r16;
         case 4: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "nPUSCH-Identity";
         case 1: return "sequenceGroupHopping";
         case 2: return "sequenceHopping";
         case 3: return "dmrs-UplinkTransformPrecoding-r16";
         case 4: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean nPUSCH_IdentityPresent = buffer.decodeBit ("nPUSCH_IdentityPresent");
      boolean sequenceGroupHoppingPresent = buffer.decodeBit ("sequenceGroupHoppingPresent");
      boolean sequenceHoppingPresent = buffer.decodeBit ("sequenceHoppingPresent");

      // decode nPUSCH_Identity

      if (nPUSCH_IdentityPresent) {
         buffer.getContext().eventDispatcher.startElement("nPUSCH_Identity", -1);

         nPUSCH_Identity = new Asn1Integer();
         nPUSCH_Identity.decode (buffer, 0, 1007);

         buffer.invokeCharacters(nPUSCH_Identity.toString());
         buffer.getContext().eventDispatcher.endElement("nPUSCH_Identity", -1);
      }
      else {
         nPUSCH_Identity = null;
      }

      // decode sequenceGroupHopping

      if (sequenceGroupHoppingPresent) {
         buffer.getContext().eventDispatcher.startElement("sequenceGroupHopping", -1);

         int tval = DMRS_UplinkConfig_transformPrecodingEnabled_sequenceGroupHopping.decodeEnumValue (buffer);
         sequenceGroupHopping = DMRS_UplinkConfig_transformPrecodingEnabled_sequenceGroupHopping.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("sequenceGroupHopping", -1);
      }
      else {
         sequenceGroupHopping = null;
      }

      // decode sequenceHopping

      if (sequenceHoppingPresent) {
         buffer.getContext().eventDispatcher.startElement("sequenceHopping", -1);

         int tval = DMRS_UplinkConfig_transformPrecodingEnabled_sequenceHopping.decodeEnumValue (buffer);
         sequenceHopping = DMRS_UplinkConfig_transformPrecodingEnabled_sequenceHopping.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("sequenceHopping", -1);
      }
      else {
         sequenceHopping = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean dmrs_UplinkTransformPrecoding_r16Present = buffer.decodeBit ("dmrs_UplinkTransformPrecoding_r16Present");

            // decode dmrs_UplinkTransformPrecoding_r16

            if (dmrs_UplinkTransformPrecoding_r16Present) {
               buffer.getContext().eventDispatcher.startElement("dmrs_UplinkTransformPrecoding_r16", -1);

               dmrs_UplinkTransformPrecoding_r16 = new DMRS_UplinkConfig_transformPrecodingEnabled_dmrs_UplinkTransformPrecoding_r16();
               dmrs_UplinkTransformPrecoding_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("dmrs_UplinkTransformPrecoding_r16", -1);
            }
            else {
               dmrs_UplinkTransformPrecoding_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (mV2ExtPresent ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((nPUSCH_Identity != null), null);
      buffer.encodeBit ((sequenceGroupHopping != null), null);
      buffer.encodeBit ((sequenceHopping != null), null);

      // encode nPUSCH_Identity

      if (nPUSCH_Identity != null) {
         buffer.getContext().eventDispatcher.startElement("nPUSCH_Identity", -1);

         nPUSCH_Identity.encode (buffer, 0, 1007);

         buffer.getContext().eventDispatcher.endElement("nPUSCH_Identity", -1);
      }

      // encode sequenceGroupHopping

      if (sequenceGroupHopping != null) {
         buffer.getContext().eventDispatcher.startElement("sequenceGroupHopping", -1);

         sequenceGroupHopping.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sequenceGroupHopping", -1);
      }

      // encode sequenceHopping

      if (sequenceHopping != null) {
         buffer.getContext().eventDispatcher.startElement("sequenceHopping", -1);

         sequenceHopping.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sequenceHopping", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 1;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit (mV2ExtPresent, null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         if (mV2ExtPresent) {
            buffer.reset();
            buffer.encodeBit ((dmrs_UplinkTransformPrecoding_r16 != null), "optbit");
            if (dmrs_UplinkTransformPrecoding_r16 != null) {
               dmrs_UplinkTransformPrecoding_r16.encode (buffer);
            }
            mainBuffer.encodeOpenType (buffer, null);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (nPUSCH_Identity != null) nPUSCH_Identity.print (_sb, "nPUSCH_Identity", _level+1);
      if (sequenceGroupHopping != null) sequenceGroupHopping.print (_sb, "sequenceGroupHopping", _level+1);
      if (sequenceHopping != null) sequenceHopping.print (_sb, "sequenceHopping", _level+1);
      if (dmrs_UplinkTransformPrecoding_r16 != null) dmrs_UplinkTransformPrecoding_r16.print (_sb, "dmrs_UplinkTransformPrecoding_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
