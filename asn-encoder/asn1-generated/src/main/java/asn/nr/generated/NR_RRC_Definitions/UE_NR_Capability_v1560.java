/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class UE_NR_Capability_v1560 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "UE-NR-Capability-v1560";
   }

   public NRDC_Parameters nrdc_Parameters;  // optional
   public UECapabilityEnquiry_v1560_IEs receivedFilters;  // optional
   public UE_NR_Capability_v1570 nonCriticalExtension;  // optional

   public UE_NR_Capability_v1560 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public UE_NR_Capability_v1560 (
      NRDC_Parameters nrdc_Parameters_,
      UECapabilityEnquiry_v1560_IEs receivedFilters_,
      UE_NR_Capability_v1570 nonCriticalExtension_
   ) {
      super();
      nrdc_Parameters = nrdc_Parameters_;
      receivedFilters = receivedFilters_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   public void init () {
      nrdc_Parameters = null;
      receivedFilters = null;
      nonCriticalExtension = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return nrdc_Parameters;
         case 1: return receivedFilters;
         case 2: return nonCriticalExtension;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "nrdc-Parameters";
         case 1: return "receivedFilters";
         case 2: return "nonCriticalExtension";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean nrdc_ParametersPresent = buffer.decodeBit ("nrdc_ParametersPresent");
      boolean receivedFiltersPresent = buffer.decodeBit ("receivedFiltersPresent");
      boolean nonCriticalExtensionPresent = buffer.decodeBit ("nonCriticalExtensionPresent");

      // decode nrdc_Parameters

      if (nrdc_ParametersPresent) {
         buffer.getContext().eventDispatcher.startElement("nrdc_Parameters", -1);

         nrdc_Parameters = new NRDC_Parameters();
         nrdc_Parameters.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nrdc_Parameters", -1);
      }
      else {
         nrdc_Parameters = null;
      }

      // decode receivedFilters

      if (receivedFiltersPresent) {
         buffer.getContext().eventDispatcher.startElement("receivedFilters", -1);

         Asn1OctetString receivedFilters_outer = new Asn1OctetString();
         receivedFilters_outer.decode (buffer);
         if (receivedFilters_outer.value == null) throw new Asn1Exception("contained type's complete encoding is empty");
         Asn1PerDecodeBuffer savedBuffer = buffer;
         buffer = new Asn1PerDecodeBuffer( receivedFilters_outer.value, buffer.isAligned());
         buffer.setEventHandlerList( savedBuffer );
         receivedFilters = new UECapabilityEnquiry_v1560_IEs();
         receivedFilters.decode (buffer);
         buffer = savedBuffer;
         buffer.getContext().eventDispatcher.endElement("receivedFilters", -1);
      }
      else {
         receivedFilters = null;
      }

      // decode nonCriticalExtension

      if (nonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension = new UE_NR_Capability_v1570();
         nonCriticalExtension.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }
      else {
         nonCriticalExtension = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((nrdc_Parameters != null), null);
      buffer.encodeBit ((receivedFilters != null), null);
      buffer.encodeBit ((nonCriticalExtension != null), null);

      // encode nrdc_Parameters

      if (nrdc_Parameters != null) {
         buffer.getContext().eventDispatcher.startElement("nrdc_Parameters", -1);

         nrdc_Parameters.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("nrdc_Parameters", -1);
      }

      // encode receivedFilters

      if (receivedFilters != null) {
         buffer.getContext().eventDispatcher.startElement("receivedFilters", -1);

         Asn1OctetString receivedFilters_outer;
         {
            Asn1PerEncodeBuffer savedBuffer = buffer;
            buffer = new Asn1PerEncodeBuffer(buffer.isAligned());
            receivedFilters.encode (buffer);
            receivedFilters_outer = new Asn1OctetString(buffer.getMsgCopy() );
            buffer = savedBuffer;
         }
         receivedFilters_outer.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("receivedFilters", -1);
      }

      // encode nonCriticalExtension

      if (nonCriticalExtension != null) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (nrdc_Parameters != null) nrdc_Parameters.print (_sb, "nrdc_Parameters", _level+1);
      if (receivedFilters != null) receivedFilters.print (_sb, "receivedFilters", _level+1);
      if (nonCriticalExtension != null) nonCriticalExtension.print (_sb, "nonCriticalExtension", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
