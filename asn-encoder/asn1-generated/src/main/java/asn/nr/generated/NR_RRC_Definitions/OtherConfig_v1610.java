/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class OtherConfig_v1610 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "OtherConfig-v1610";
   }

   public OtherConfig_v1610_idc_AssistanceConfig_r16 idc_AssistanceConfig_r16;  // optional
   public OtherConfig_v1610_drx_PreferenceConfig_r16 drx_PreferenceConfig_r16;  // optional
   public OtherConfig_v1610_maxBW_PreferenceConfig_r16 maxBW_PreferenceConfig_r16;  // optional
   public OtherConfig_v1610_maxCC_PreferenceConfig_r16 maxCC_PreferenceConfig_r16;  // optional
   public OtherConfig_v1610_maxMIMO_LayerPreferenceConfig_r16 maxMIMO_LayerPreferenceConfig_r16;  // optional
   public OtherConfig_v1610_minSchedulingOffsetPreferenceConfig_r16 minSchedulingOffsetPreferenceConfig_r16;  // optional
   public OtherConfig_v1610_releasePreferenceConfig_r16 releasePreferenceConfig_r16;  // optional
   public OtherConfig_v1610_referenceTimePreferenceReporting_r16 referenceTimePreferenceReporting_r16 = null;  // optional
   public OtherConfig_v1610_btNameList_r16 btNameList_r16;  // optional
   public OtherConfig_v1610_wlanNameList_r16 wlanNameList_r16;  // optional
   public OtherConfig_v1610_sensorNameList_r16 sensorNameList_r16;  // optional
   public OtherConfig_v1610_obtainCommonLocation_r16 obtainCommonLocation_r16 = null;  // optional
   public OtherConfig_v1610_sl_AssistanceConfigNR_r16 sl_AssistanceConfigNR_r16 = null;  // optional

   public OtherConfig_v1610 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public OtherConfig_v1610 (
      OtherConfig_v1610_idc_AssistanceConfig_r16 idc_AssistanceConfig_r16_,
      OtherConfig_v1610_drx_PreferenceConfig_r16 drx_PreferenceConfig_r16_,
      OtherConfig_v1610_maxBW_PreferenceConfig_r16 maxBW_PreferenceConfig_r16_,
      OtherConfig_v1610_maxCC_PreferenceConfig_r16 maxCC_PreferenceConfig_r16_,
      OtherConfig_v1610_maxMIMO_LayerPreferenceConfig_r16 maxMIMO_LayerPreferenceConfig_r16_,
      OtherConfig_v1610_minSchedulingOffsetPreferenceConfig_r16 minSchedulingOffsetPreferenceConfig_r16_,
      OtherConfig_v1610_releasePreferenceConfig_r16 releasePreferenceConfig_r16_,
      OtherConfig_v1610_referenceTimePreferenceReporting_r16 referenceTimePreferenceReporting_r16_,
      OtherConfig_v1610_btNameList_r16 btNameList_r16_,
      OtherConfig_v1610_wlanNameList_r16 wlanNameList_r16_,
      OtherConfig_v1610_sensorNameList_r16 sensorNameList_r16_,
      OtherConfig_v1610_obtainCommonLocation_r16 obtainCommonLocation_r16_,
      OtherConfig_v1610_sl_AssistanceConfigNR_r16 sl_AssistanceConfigNR_r16_
   ) {
      super();
      idc_AssistanceConfig_r16 = idc_AssistanceConfig_r16_;
      drx_PreferenceConfig_r16 = drx_PreferenceConfig_r16_;
      maxBW_PreferenceConfig_r16 = maxBW_PreferenceConfig_r16_;
      maxCC_PreferenceConfig_r16 = maxCC_PreferenceConfig_r16_;
      maxMIMO_LayerPreferenceConfig_r16 = maxMIMO_LayerPreferenceConfig_r16_;
      minSchedulingOffsetPreferenceConfig_r16 = minSchedulingOffsetPreferenceConfig_r16_;
      releasePreferenceConfig_r16 = releasePreferenceConfig_r16_;
      referenceTimePreferenceReporting_r16 = referenceTimePreferenceReporting_r16_;
      btNameList_r16 = btNameList_r16_;
      wlanNameList_r16 = wlanNameList_r16_;
      sensorNameList_r16 = sensorNameList_r16_;
      obtainCommonLocation_r16 = obtainCommonLocation_r16_;
      sl_AssistanceConfigNR_r16 = sl_AssistanceConfigNR_r16_;
   }

   public void init () {
      idc_AssistanceConfig_r16 = null;
      drx_PreferenceConfig_r16 = null;
      maxBW_PreferenceConfig_r16 = null;
      maxCC_PreferenceConfig_r16 = null;
      maxMIMO_LayerPreferenceConfig_r16 = null;
      minSchedulingOffsetPreferenceConfig_r16 = null;
      releasePreferenceConfig_r16 = null;
      referenceTimePreferenceReporting_r16 = null;
      btNameList_r16 = null;
      wlanNameList_r16 = null;
      sensorNameList_r16 = null;
      obtainCommonLocation_r16 = null;
      sl_AssistanceConfigNR_r16 = null;
   }

   public int getElementCount() { return 13; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return idc_AssistanceConfig_r16;
         case 1: return drx_PreferenceConfig_r16;
         case 2: return maxBW_PreferenceConfig_r16;
         case 3: return maxCC_PreferenceConfig_r16;
         case 4: return maxMIMO_LayerPreferenceConfig_r16;
         case 5: return minSchedulingOffsetPreferenceConfig_r16;
         case 6: return releasePreferenceConfig_r16;
         case 7: return referenceTimePreferenceReporting_r16;
         case 8: return btNameList_r16;
         case 9: return wlanNameList_r16;
         case 10: return sensorNameList_r16;
         case 11: return obtainCommonLocation_r16;
         case 12: return sl_AssistanceConfigNR_r16;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "idc-AssistanceConfig-r16";
         case 1: return "drx-PreferenceConfig-r16";
         case 2: return "maxBW-PreferenceConfig-r16";
         case 3: return "maxCC-PreferenceConfig-r16";
         case 4: return "maxMIMO-LayerPreferenceConfig-r16";
         case 5: return "minSchedulingOffsetPreferenceConfig-r16";
         case 6: return "releasePreferenceConfig-r16";
         case 7: return "referenceTimePreferenceReporting-r16";
         case 8: return "btNameList-r16";
         case 9: return "wlanNameList-r16";
         case 10: return "sensorNameList-r16";
         case 11: return "obtainCommonLocation-r16";
         case 12: return "sl-AssistanceConfigNR-r16";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean idc_AssistanceConfig_r16Present = buffer.decodeBit ("idc_AssistanceConfig_r16Present");
      boolean drx_PreferenceConfig_r16Present = buffer.decodeBit ("drx_PreferenceConfig_r16Present");
      boolean maxBW_PreferenceConfig_r16Present = buffer.decodeBit ("maxBW_PreferenceConfig_r16Present");
      boolean maxCC_PreferenceConfig_r16Present = buffer.decodeBit ("maxCC_PreferenceConfig_r16Present");
      boolean maxMIMO_LayerPreferenceConfig_r16Present = buffer.decodeBit ("maxMIMO_LayerPreferenceConfig_r16Present");
      boolean minSchedulingOffsetPreferenceConfig_r16Present = buffer.decodeBit ("minSchedulingOffsetPreferenceConfig_r16Present");
      boolean releasePreferenceConfig_r16Present = buffer.decodeBit ("releasePreferenceConfig_r16Present");
      boolean referenceTimePreferenceReporting_r16Present = buffer.decodeBit ("referenceTimePreferenceReporting_r16Present");
      boolean btNameList_r16Present = buffer.decodeBit ("btNameList_r16Present");
      boolean wlanNameList_r16Present = buffer.decodeBit ("wlanNameList_r16Present");
      boolean sensorNameList_r16Present = buffer.decodeBit ("sensorNameList_r16Present");
      boolean obtainCommonLocation_r16Present = buffer.decodeBit ("obtainCommonLocation_r16Present");
      boolean sl_AssistanceConfigNR_r16Present = buffer.decodeBit ("sl_AssistanceConfigNR_r16Present");

      // decode idc_AssistanceConfig_r16

      if (idc_AssistanceConfig_r16Present) {
         buffer.getContext().eventDispatcher.startElement("idc_AssistanceConfig_r16", -1);

         idc_AssistanceConfig_r16 = new OtherConfig_v1610_idc_AssistanceConfig_r16();
         idc_AssistanceConfig_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("idc_AssistanceConfig_r16", -1);
      }
      else {
         idc_AssistanceConfig_r16 = null;
      }

      // decode drx_PreferenceConfig_r16

      if (drx_PreferenceConfig_r16Present) {
         buffer.getContext().eventDispatcher.startElement("drx_PreferenceConfig_r16", -1);

         drx_PreferenceConfig_r16 = new OtherConfig_v1610_drx_PreferenceConfig_r16();
         drx_PreferenceConfig_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("drx_PreferenceConfig_r16", -1);
      }
      else {
         drx_PreferenceConfig_r16 = null;
      }

      // decode maxBW_PreferenceConfig_r16

      if (maxBW_PreferenceConfig_r16Present) {
         buffer.getContext().eventDispatcher.startElement("maxBW_PreferenceConfig_r16", -1);

         maxBW_PreferenceConfig_r16 = new OtherConfig_v1610_maxBW_PreferenceConfig_r16();
         maxBW_PreferenceConfig_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("maxBW_PreferenceConfig_r16", -1);
      }
      else {
         maxBW_PreferenceConfig_r16 = null;
      }

      // decode maxCC_PreferenceConfig_r16

      if (maxCC_PreferenceConfig_r16Present) {
         buffer.getContext().eventDispatcher.startElement("maxCC_PreferenceConfig_r16", -1);

         maxCC_PreferenceConfig_r16 = new OtherConfig_v1610_maxCC_PreferenceConfig_r16();
         maxCC_PreferenceConfig_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("maxCC_PreferenceConfig_r16", -1);
      }
      else {
         maxCC_PreferenceConfig_r16 = null;
      }

      // decode maxMIMO_LayerPreferenceConfig_r16

      if (maxMIMO_LayerPreferenceConfig_r16Present) {
         buffer.getContext().eventDispatcher.startElement("maxMIMO_LayerPreferenceConfig_r16", -1);

         maxMIMO_LayerPreferenceConfig_r16 = new OtherConfig_v1610_maxMIMO_LayerPreferenceConfig_r16();
         maxMIMO_LayerPreferenceConfig_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("maxMIMO_LayerPreferenceConfig_r16", -1);
      }
      else {
         maxMIMO_LayerPreferenceConfig_r16 = null;
      }

      // decode minSchedulingOffsetPreferenceConfig_r16

      if (minSchedulingOffsetPreferenceConfig_r16Present) {
         buffer.getContext().eventDispatcher.startElement("minSchedulingOffsetPreferenceConfig_r16", -1);

         minSchedulingOffsetPreferenceConfig_r16 = new OtherConfig_v1610_minSchedulingOffsetPreferenceConfig_r16();
         minSchedulingOffsetPreferenceConfig_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("minSchedulingOffsetPreferenceConfig_r16", -1);
      }
      else {
         minSchedulingOffsetPreferenceConfig_r16 = null;
      }

      // decode releasePreferenceConfig_r16

      if (releasePreferenceConfig_r16Present) {
         buffer.getContext().eventDispatcher.startElement("releasePreferenceConfig_r16", -1);

         releasePreferenceConfig_r16 = new OtherConfig_v1610_releasePreferenceConfig_r16();
         releasePreferenceConfig_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("releasePreferenceConfig_r16", -1);
      }
      else {
         releasePreferenceConfig_r16 = null;
      }

      // decode referenceTimePreferenceReporting_r16

      if (referenceTimePreferenceReporting_r16Present) {
         buffer.getContext().eventDispatcher.startElement("referenceTimePreferenceReporting_r16", -1);

         int tval = OtherConfig_v1610_referenceTimePreferenceReporting_r16.decodeEnumValue (buffer);
         referenceTimePreferenceReporting_r16 = OtherConfig_v1610_referenceTimePreferenceReporting_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("referenceTimePreferenceReporting_r16", -1);
      }
      else {
         referenceTimePreferenceReporting_r16 = null;
      }

      // decode btNameList_r16

      if (btNameList_r16Present) {
         buffer.getContext().eventDispatcher.startElement("btNameList_r16", -1);

         btNameList_r16 = new OtherConfig_v1610_btNameList_r16();
         btNameList_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("btNameList_r16", -1);
      }
      else {
         btNameList_r16 = null;
      }

      // decode wlanNameList_r16

      if (wlanNameList_r16Present) {
         buffer.getContext().eventDispatcher.startElement("wlanNameList_r16", -1);

         wlanNameList_r16 = new OtherConfig_v1610_wlanNameList_r16();
         wlanNameList_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("wlanNameList_r16", -1);
      }
      else {
         wlanNameList_r16 = null;
      }

      // decode sensorNameList_r16

      if (sensorNameList_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sensorNameList_r16", -1);

         sensorNameList_r16 = new OtherConfig_v1610_sensorNameList_r16();
         sensorNameList_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sensorNameList_r16", -1);
      }
      else {
         sensorNameList_r16 = null;
      }

      // decode obtainCommonLocation_r16

      if (obtainCommonLocation_r16Present) {
         buffer.getContext().eventDispatcher.startElement("obtainCommonLocation_r16", -1);

         int tval = OtherConfig_v1610_obtainCommonLocation_r16.decodeEnumValue (buffer);
         obtainCommonLocation_r16 = OtherConfig_v1610_obtainCommonLocation_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("obtainCommonLocation_r16", -1);
      }
      else {
         obtainCommonLocation_r16 = null;
      }

      // decode sl_AssistanceConfigNR_r16

      if (sl_AssistanceConfigNR_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_AssistanceConfigNR_r16", -1);

         int tval = OtherConfig_v1610_sl_AssistanceConfigNR_r16.decodeEnumValue (buffer);
         sl_AssistanceConfigNR_r16 = OtherConfig_v1610_sl_AssistanceConfigNR_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("sl_AssistanceConfigNR_r16", -1);
      }
      else {
         sl_AssistanceConfigNR_r16 = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((idc_AssistanceConfig_r16 != null), null);
      buffer.encodeBit ((drx_PreferenceConfig_r16 != null), null);
      buffer.encodeBit ((maxBW_PreferenceConfig_r16 != null), null);
      buffer.encodeBit ((maxCC_PreferenceConfig_r16 != null), null);
      buffer.encodeBit ((maxMIMO_LayerPreferenceConfig_r16 != null), null);
      buffer.encodeBit ((minSchedulingOffsetPreferenceConfig_r16 != null), null);
      buffer.encodeBit ((releasePreferenceConfig_r16 != null), null);
      buffer.encodeBit ((referenceTimePreferenceReporting_r16 != null), null);
      buffer.encodeBit ((btNameList_r16 != null), null);
      buffer.encodeBit ((wlanNameList_r16 != null), null);
      buffer.encodeBit ((sensorNameList_r16 != null), null);
      buffer.encodeBit ((obtainCommonLocation_r16 != null), null);
      buffer.encodeBit ((sl_AssistanceConfigNR_r16 != null), null);

      // encode idc_AssistanceConfig_r16

      if (idc_AssistanceConfig_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("idc_AssistanceConfig_r16", -1);

         idc_AssistanceConfig_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("idc_AssistanceConfig_r16", -1);
      }

      // encode drx_PreferenceConfig_r16

      if (drx_PreferenceConfig_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("drx_PreferenceConfig_r16", -1);

         drx_PreferenceConfig_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("drx_PreferenceConfig_r16", -1);
      }

      // encode maxBW_PreferenceConfig_r16

      if (maxBW_PreferenceConfig_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("maxBW_PreferenceConfig_r16", -1);

         maxBW_PreferenceConfig_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("maxBW_PreferenceConfig_r16", -1);
      }

      // encode maxCC_PreferenceConfig_r16

      if (maxCC_PreferenceConfig_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("maxCC_PreferenceConfig_r16", -1);

         maxCC_PreferenceConfig_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("maxCC_PreferenceConfig_r16", -1);
      }

      // encode maxMIMO_LayerPreferenceConfig_r16

      if (maxMIMO_LayerPreferenceConfig_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("maxMIMO_LayerPreferenceConfig_r16", -1);

         maxMIMO_LayerPreferenceConfig_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("maxMIMO_LayerPreferenceConfig_r16", -1);
      }

      // encode minSchedulingOffsetPreferenceConfig_r16

      if (minSchedulingOffsetPreferenceConfig_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("minSchedulingOffsetPreferenceConfig_r16", -1);

         minSchedulingOffsetPreferenceConfig_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("minSchedulingOffsetPreferenceConfig_r16", -1);
      }

      // encode releasePreferenceConfig_r16

      if (releasePreferenceConfig_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("releasePreferenceConfig_r16", -1);

         releasePreferenceConfig_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("releasePreferenceConfig_r16", -1);
      }

      // encode referenceTimePreferenceReporting_r16

      if (referenceTimePreferenceReporting_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("referenceTimePreferenceReporting_r16", -1);

         referenceTimePreferenceReporting_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("referenceTimePreferenceReporting_r16", -1);
      }

      // encode btNameList_r16

      if (btNameList_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("btNameList_r16", -1);

         btNameList_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("btNameList_r16", -1);
      }

      // encode wlanNameList_r16

      if (wlanNameList_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("wlanNameList_r16", -1);

         wlanNameList_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("wlanNameList_r16", -1);
      }

      // encode sensorNameList_r16

      if (sensorNameList_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sensorNameList_r16", -1);

         sensorNameList_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sensorNameList_r16", -1);
      }

      // encode obtainCommonLocation_r16

      if (obtainCommonLocation_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("obtainCommonLocation_r16", -1);

         obtainCommonLocation_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("obtainCommonLocation_r16", -1);
      }

      // encode sl_AssistanceConfigNR_r16

      if (sl_AssistanceConfigNR_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_AssistanceConfigNR_r16", -1);

         sl_AssistanceConfigNR_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sl_AssistanceConfigNR_r16", -1);
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (idc_AssistanceConfig_r16 != null) idc_AssistanceConfig_r16.print (_sb, "idc_AssistanceConfig_r16", _level+1);
      if (drx_PreferenceConfig_r16 != null) drx_PreferenceConfig_r16.print (_sb, "drx_PreferenceConfig_r16", _level+1);
      if (maxBW_PreferenceConfig_r16 != null) maxBW_PreferenceConfig_r16.print (_sb, "maxBW_PreferenceConfig_r16", _level+1);
      if (maxCC_PreferenceConfig_r16 != null) maxCC_PreferenceConfig_r16.print (_sb, "maxCC_PreferenceConfig_r16", _level+1);
      if (maxMIMO_LayerPreferenceConfig_r16 != null) maxMIMO_LayerPreferenceConfig_r16.print (_sb, "maxMIMO_LayerPreferenceConfig_r16", _level+1);
      if (minSchedulingOffsetPreferenceConfig_r16 != null) minSchedulingOffsetPreferenceConfig_r16.print (_sb, "minSchedulingOffsetPreferenceConfig_r16", _level+1);
      if (releasePreferenceConfig_r16 != null) releasePreferenceConfig_r16.print (_sb, "releasePreferenceConfig_r16", _level+1);
      if (referenceTimePreferenceReporting_r16 != null) referenceTimePreferenceReporting_r16.print (_sb, "referenceTimePreferenceReporting_r16", _level+1);
      if (btNameList_r16 != null) btNameList_r16.print (_sb, "btNameList_r16", _level+1);
      if (wlanNameList_r16 != null) wlanNameList_r16.print (_sb, "wlanNameList_r16", _level+1);
      if (sensorNameList_r16 != null) sensorNameList_r16.print (_sb, "sensorNameList_r16", _level+1);
      if (obtainCommonLocation_r16 != null) obtainCommonLocation_r16.print (_sb, "obtainCommonLocation_r16", _level+1);
      if (sl_AssistanceConfigNR_r16 != null) sl_AssistanceConfigNR_r16.print (_sb, "sl_AssistanceConfigNR_r16", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
