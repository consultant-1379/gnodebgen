/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class CSI_RS_ResourceMapping extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CSI-RS-ResourceMapping";
   }

   public CSI_RS_ResourceMapping_frequencyDomainAllocation frequencyDomainAllocation;
   public CSI_RS_ResourceMapping_nrofPorts nrofPorts = null;
   public Asn1Integer firstOFDMSymbolInTimeDomain;
   public Asn1Integer firstOFDMSymbolInTimeDomain2;  // optional
   public CSI_RS_ResourceMapping_cdm_Type cdm_Type = null;
   public CSI_RS_ResourceMapping_density density;
   public CSI_FrequencyOccupation freqBand;
   public Asn1OpenExt extElem1;

   public CSI_RS_ResourceMapping () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CSI_RS_ResourceMapping (
      CSI_RS_ResourceMapping_frequencyDomainAllocation frequencyDomainAllocation_,
      CSI_RS_ResourceMapping_nrofPorts nrofPorts_,
      Asn1Integer firstOFDMSymbolInTimeDomain_,
      Asn1Integer firstOFDMSymbolInTimeDomain2_,
      CSI_RS_ResourceMapping_cdm_Type cdm_Type_,
      CSI_RS_ResourceMapping_density density_,
      CSI_FrequencyOccupation freqBand_
   ) {
      super();
      frequencyDomainAllocation = frequencyDomainAllocation_;
      nrofPorts = nrofPorts_;
      firstOFDMSymbolInTimeDomain = firstOFDMSymbolInTimeDomain_;
      firstOFDMSymbolInTimeDomain2 = firstOFDMSymbolInTimeDomain2_;
      cdm_Type = cdm_Type_;
      density = density_;
      freqBand = freqBand_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public CSI_RS_ResourceMapping (
      CSI_RS_ResourceMapping_frequencyDomainAllocation frequencyDomainAllocation_,
      CSI_RS_ResourceMapping_nrofPorts nrofPorts_,
      Asn1Integer firstOFDMSymbolInTimeDomain_,
      CSI_RS_ResourceMapping_cdm_Type cdm_Type_,
      CSI_RS_ResourceMapping_density density_,
      CSI_FrequencyOccupation freqBand_
   ) {
      super();
      frequencyDomainAllocation = frequencyDomainAllocation_;
      nrofPorts = nrofPorts_;
      firstOFDMSymbolInTimeDomain = firstOFDMSymbolInTimeDomain_;
      cdm_Type = cdm_Type_;
      density = density_;
      freqBand = freqBand_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public CSI_RS_ResourceMapping (CSI_RS_ResourceMapping_frequencyDomainAllocation frequencyDomainAllocation_,
      CSI_RS_ResourceMapping_nrofPorts nrofPorts_,
      long firstOFDMSymbolInTimeDomain_,
      long firstOFDMSymbolInTimeDomain2_,
      CSI_RS_ResourceMapping_cdm_Type cdm_Type_,
      CSI_RS_ResourceMapping_density density_,
      CSI_FrequencyOccupation freqBand_
   ) {
      super();
      frequencyDomainAllocation = frequencyDomainAllocation_;
      nrofPorts = nrofPorts_;
      firstOFDMSymbolInTimeDomain = new Asn1Integer (firstOFDMSymbolInTimeDomain_);
      firstOFDMSymbolInTimeDomain2 = new Asn1Integer (firstOFDMSymbolInTimeDomain2_);
      cdm_Type = cdm_Type_;
      density = density_;
      freqBand = freqBand_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public CSI_RS_ResourceMapping (
      CSI_RS_ResourceMapping_frequencyDomainAllocation frequencyDomainAllocation_,
      CSI_RS_ResourceMapping_nrofPorts nrofPorts_,
      long firstOFDMSymbolInTimeDomain_,
      CSI_RS_ResourceMapping_cdm_Type cdm_Type_,
      CSI_RS_ResourceMapping_density density_,
      CSI_FrequencyOccupation freqBand_
   ) {
      super();
      frequencyDomainAllocation = frequencyDomainAllocation_;
      nrofPorts = nrofPorts_;
      firstOFDMSymbolInTimeDomain = new Asn1Integer (firstOFDMSymbolInTimeDomain_);
      cdm_Type = cdm_Type_;
      density = density_;
      freqBand = freqBand_;
   }

   public void init () {
      frequencyDomainAllocation = null;
      nrofPorts = null;
      firstOFDMSymbolInTimeDomain = null;
      firstOFDMSymbolInTimeDomain2 = null;
      cdm_Type = null;
      density = null;
      freqBand = null;
      extElem1 = null;
   }

   public int getElementCount() { return 8; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return frequencyDomainAllocation;
         case 1: return nrofPorts;
         case 2: return firstOFDMSymbolInTimeDomain;
         case 3: return firstOFDMSymbolInTimeDomain2;
         case 4: return cdm_Type;
         case 5: return density;
         case 6: return freqBand;
         case 7: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "frequencyDomainAllocation";
         case 1: return "nrofPorts";
         case 2: return "firstOFDMSymbolInTimeDomain";
         case 3: return "firstOFDMSymbolInTimeDomain2";
         case 4: return "cdm-Type";
         case 5: return "density";
         case 6: return "freqBand";
         case 7: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean firstOFDMSymbolInTimeDomain2Present = buffer.decodeBit ("firstOFDMSymbolInTimeDomain2Present");

      // decode frequencyDomainAllocation

      buffer.getContext().eventDispatcher.startElement("frequencyDomainAllocation", -1);

      frequencyDomainAllocation = new CSI_RS_ResourceMapping_frequencyDomainAllocation();
      frequencyDomainAllocation.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("frequencyDomainAllocation", -1);

      // decode nrofPorts

      buffer.getContext().eventDispatcher.startElement("nrofPorts", -1);

      {
         int tval = CSI_RS_ResourceMapping_nrofPorts.decodeEnumValue (buffer);
         nrofPorts = CSI_RS_ResourceMapping_nrofPorts.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("nrofPorts", -1);

      // decode firstOFDMSymbolInTimeDomain

      buffer.getContext().eventDispatcher.startElement("firstOFDMSymbolInTimeDomain", -1);

      firstOFDMSymbolInTimeDomain = new Asn1Integer();
      firstOFDMSymbolInTimeDomain.decode (buffer, 0, 13);

      buffer.invokeCharacters(firstOFDMSymbolInTimeDomain.toString());
      buffer.getContext().eventDispatcher.endElement("firstOFDMSymbolInTimeDomain", -1);

      // decode firstOFDMSymbolInTimeDomain2

      if (firstOFDMSymbolInTimeDomain2Present) {
         buffer.getContext().eventDispatcher.startElement("firstOFDMSymbolInTimeDomain2", -1);

         firstOFDMSymbolInTimeDomain2 = new Asn1Integer();
         firstOFDMSymbolInTimeDomain2.decode (buffer, 2, 12);

         buffer.invokeCharacters(firstOFDMSymbolInTimeDomain2.toString());
         buffer.getContext().eventDispatcher.endElement("firstOFDMSymbolInTimeDomain2", -1);
      }
      else {
         firstOFDMSymbolInTimeDomain2 = null;
      }

      // decode cdm_Type

      buffer.getContext().eventDispatcher.startElement("cdm_Type", -1);

      {
         int tval = CSI_RS_ResourceMapping_cdm_Type.decodeEnumValue (buffer);
         cdm_Type = CSI_RS_ResourceMapping_cdm_Type.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("cdm_Type", -1);

      // decode density

      buffer.getContext().eventDispatcher.startElement("density", -1);

      density = new CSI_RS_ResourceMapping_density();
      density.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("density", -1);

      // decode freqBand

      buffer.getContext().eventDispatcher.startElement("freqBand", -1);

      freqBand = new CSI_FrequencyOccupation();
      freqBand.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("freqBand", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((firstOFDMSymbolInTimeDomain2 != null), null);

      // encode frequencyDomainAllocation

      if (frequencyDomainAllocation != null) {
         buffer.getContext().eventDispatcher.startElement("frequencyDomainAllocation", -1);

         frequencyDomainAllocation.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("frequencyDomainAllocation", -1);
      }
      else throw new Asn1MissingRequiredException ("frequencyDomainAllocation");

      // encode nrofPorts

      if (nrofPorts != null) {
         buffer.getContext().eventDispatcher.startElement("nrofPorts", -1);

         nrofPorts.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("nrofPorts", -1);
      }
      else throw new Asn1MissingRequiredException ("nrofPorts");

      // encode firstOFDMSymbolInTimeDomain

      if (firstOFDMSymbolInTimeDomain != null) {
         buffer.getContext().eventDispatcher.startElement("firstOFDMSymbolInTimeDomain", -1);

         firstOFDMSymbolInTimeDomain.encode (buffer, 0, 13);

         buffer.getContext().eventDispatcher.endElement("firstOFDMSymbolInTimeDomain", -1);
      }
      else throw new Asn1MissingRequiredException ("firstOFDMSymbolInTimeDomain");

      // encode firstOFDMSymbolInTimeDomain2

      if (firstOFDMSymbolInTimeDomain2 != null) {
         buffer.getContext().eventDispatcher.startElement("firstOFDMSymbolInTimeDomain2", -1);

         firstOFDMSymbolInTimeDomain2.encode (buffer, 2, 12);

         buffer.getContext().eventDispatcher.endElement("firstOFDMSymbolInTimeDomain2", -1);
      }

      // encode cdm_Type

      if (cdm_Type != null) {
         buffer.getContext().eventDispatcher.startElement("cdm_Type", -1);

         cdm_Type.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("cdm_Type", -1);
      }
      else throw new Asn1MissingRequiredException ("cdm_Type");

      // encode density

      if (density != null) {
         buffer.getContext().eventDispatcher.startElement("density", -1);

         density.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("density", -1);
      }
      else throw new Asn1MissingRequiredException ("density");

      // encode freqBand

      if (freqBand != null) {
         buffer.getContext().eventDispatcher.startElement("freqBand", -1);

         freqBand.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("freqBand", -1);
      }
      else throw new Asn1MissingRequiredException ("freqBand");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (frequencyDomainAllocation != null) frequencyDomainAllocation.print (_sb, "frequencyDomainAllocation", _level+1);
      if (nrofPorts != null) nrofPorts.print (_sb, "nrofPorts", _level+1);
      if (firstOFDMSymbolInTimeDomain != null) firstOFDMSymbolInTimeDomain.print (_sb, "firstOFDMSymbolInTimeDomain", _level+1);
      if (firstOFDMSymbolInTimeDomain2 != null) firstOFDMSymbolInTimeDomain2.print (_sb, "firstOFDMSymbolInTimeDomain2", _level+1);
      if (cdm_Type != null) cdm_Type.print (_sb, "cdm_Type", _level+1);
      if (density != null) density.print (_sb, "density", _level+1);
      if (freqBand != null) freqBand.print (_sb, "freqBand", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
