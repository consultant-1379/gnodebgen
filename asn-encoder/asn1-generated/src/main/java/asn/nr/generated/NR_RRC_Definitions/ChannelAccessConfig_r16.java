/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class ChannelAccessConfig_r16 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ChannelAccessConfig-r16";
   }

   public ChannelAccessConfig_r16_energyDetectionConfig_r16 energyDetectionConfig_r16;  // optional
   public Asn1Integer ul_toDL_COT_SharingED_Threshold_r16;  // optional
   public ChannelAccessConfig_r16_absenceOfAnyOtherTechnology_r16 absenceOfAnyOtherTechnology_r16 = null;  // optional

   public ChannelAccessConfig_r16 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ChannelAccessConfig_r16 (
      ChannelAccessConfig_r16_energyDetectionConfig_r16 energyDetectionConfig_r16_,
      Asn1Integer ul_toDL_COT_SharingED_Threshold_r16_,
      ChannelAccessConfig_r16_absenceOfAnyOtherTechnology_r16 absenceOfAnyOtherTechnology_r16_
   ) {
      super();
      energyDetectionConfig_r16 = energyDetectionConfig_r16_;
      ul_toDL_COT_SharingED_Threshold_r16 = ul_toDL_COT_SharingED_Threshold_r16_;
      absenceOfAnyOtherTechnology_r16 = absenceOfAnyOtherTechnology_r16_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public ChannelAccessConfig_r16 (ChannelAccessConfig_r16_energyDetectionConfig_r16 energyDetectionConfig_r16_,
      long ul_toDL_COT_SharingED_Threshold_r16_,
      ChannelAccessConfig_r16_absenceOfAnyOtherTechnology_r16 absenceOfAnyOtherTechnology_r16_
   ) {
      super();
      energyDetectionConfig_r16 = energyDetectionConfig_r16_;
      ul_toDL_COT_SharingED_Threshold_r16 = new Asn1Integer (ul_toDL_COT_SharingED_Threshold_r16_);
      absenceOfAnyOtherTechnology_r16 = absenceOfAnyOtherTechnology_r16_;
   }

   public void init () {
      energyDetectionConfig_r16 = null;
      ul_toDL_COT_SharingED_Threshold_r16 = null;
      absenceOfAnyOtherTechnology_r16 = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return energyDetectionConfig_r16;
         case 1: return ul_toDL_COT_SharingED_Threshold_r16;
         case 2: return absenceOfAnyOtherTechnology_r16;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "energyDetectionConfig-r16";
         case 1: return "ul-toDL-COT-SharingED-Threshold-r16";
         case 2: return "absenceOfAnyOtherTechnology-r16";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean energyDetectionConfig_r16Present = buffer.decodeBit ("energyDetectionConfig_r16Present");
      boolean ul_toDL_COT_SharingED_Threshold_r16Present = buffer.decodeBit ("ul_toDL_COT_SharingED_Threshold_r16Present");
      boolean absenceOfAnyOtherTechnology_r16Present = buffer.decodeBit ("absenceOfAnyOtherTechnology_r16Present");

      // decode energyDetectionConfig_r16

      if (energyDetectionConfig_r16Present) {
         buffer.getContext().eventDispatcher.startElement("energyDetectionConfig_r16", -1);

         energyDetectionConfig_r16 = new ChannelAccessConfig_r16_energyDetectionConfig_r16();
         energyDetectionConfig_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("energyDetectionConfig_r16", -1);
      }
      else {
         energyDetectionConfig_r16 = null;
      }

      // decode ul_toDL_COT_SharingED_Threshold_r16

      if (ul_toDL_COT_SharingED_Threshold_r16Present) {
         buffer.getContext().eventDispatcher.startElement("ul_toDL_COT_SharingED_Threshold_r16", -1);

         ul_toDL_COT_SharingED_Threshold_r16 = new Asn1Integer();
         ul_toDL_COT_SharingED_Threshold_r16.decode (buffer, -85, -52);

         buffer.invokeCharacters(ul_toDL_COT_SharingED_Threshold_r16.toString());
         buffer.getContext().eventDispatcher.endElement("ul_toDL_COT_SharingED_Threshold_r16", -1);
      }
      else {
         ul_toDL_COT_SharingED_Threshold_r16 = null;
      }

      // decode absenceOfAnyOtherTechnology_r16

      if (absenceOfAnyOtherTechnology_r16Present) {
         buffer.getContext().eventDispatcher.startElement("absenceOfAnyOtherTechnology_r16", -1);

         int tval = ChannelAccessConfig_r16_absenceOfAnyOtherTechnology_r16.decodeEnumValue (buffer);
         absenceOfAnyOtherTechnology_r16 = ChannelAccessConfig_r16_absenceOfAnyOtherTechnology_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("absenceOfAnyOtherTechnology_r16", -1);
      }
      else {
         absenceOfAnyOtherTechnology_r16 = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((energyDetectionConfig_r16 != null), null);
      buffer.encodeBit ((ul_toDL_COT_SharingED_Threshold_r16 != null), null);
      buffer.encodeBit ((absenceOfAnyOtherTechnology_r16 != null), null);

      // encode energyDetectionConfig_r16

      if (energyDetectionConfig_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("energyDetectionConfig_r16", -1);

         energyDetectionConfig_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("energyDetectionConfig_r16", -1);
      }

      // encode ul_toDL_COT_SharingED_Threshold_r16

      if (ul_toDL_COT_SharingED_Threshold_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("ul_toDL_COT_SharingED_Threshold_r16", -1);

         ul_toDL_COT_SharingED_Threshold_r16.encode (buffer, -85, -52);

         buffer.getContext().eventDispatcher.endElement("ul_toDL_COT_SharingED_Threshold_r16", -1);
      }

      // encode absenceOfAnyOtherTechnology_r16

      if (absenceOfAnyOtherTechnology_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("absenceOfAnyOtherTechnology_r16", -1);

         absenceOfAnyOtherTechnology_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("absenceOfAnyOtherTechnology_r16", -1);
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (energyDetectionConfig_r16 != null) energyDetectionConfig_r16.print (_sb, "energyDetectionConfig_r16", _level+1);
      if (ul_toDL_COT_SharingED_Threshold_r16 != null) ul_toDL_COT_SharingED_Threshold_r16.print (_sb, "ul_toDL_COT_SharingED_Threshold_r16", _level+1);
      if (absenceOfAnyOtherTechnology_r16 != null) absenceOfAnyOtherTechnology_r16.print (_sb, "absenceOfAnyOtherTechnology_r16", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
