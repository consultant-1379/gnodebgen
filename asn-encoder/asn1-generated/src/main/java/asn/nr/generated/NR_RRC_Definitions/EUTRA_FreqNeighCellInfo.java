/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class EUTRA_FreqNeighCellInfo extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "EUTRA-FreqNeighCellInfo";
   }

   public EUTRA_PhysCellId physCellId;
   public EUTRA_Q_OffsetRange dummy = null;
   public Asn1Integer q_RxLevMinOffsetCell;  // optional
   public Asn1Integer q_QualMinOffsetCell;  // optional

   public EUTRA_FreqNeighCellInfo () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public EUTRA_FreqNeighCellInfo (
      EUTRA_PhysCellId physCellId_,
      EUTRA_Q_OffsetRange dummy_,
      Asn1Integer q_RxLevMinOffsetCell_,
      Asn1Integer q_QualMinOffsetCell_
   ) {
      super();
      physCellId = physCellId_;
      dummy = dummy_;
      q_RxLevMinOffsetCell = q_RxLevMinOffsetCell_;
      q_QualMinOffsetCell = q_QualMinOffsetCell_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public EUTRA_FreqNeighCellInfo (
      EUTRA_PhysCellId physCellId_,
      EUTRA_Q_OffsetRange dummy_
   ) {
      super();
      physCellId = physCellId_;
      dummy = dummy_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public EUTRA_FreqNeighCellInfo (long physCellId_,
      EUTRA_Q_OffsetRange dummy_,
      long q_RxLevMinOffsetCell_,
      long q_QualMinOffsetCell_
   ) {
      super();
      physCellId = new EUTRA_PhysCellId (physCellId_);
      dummy = dummy_;
      q_RxLevMinOffsetCell = new Asn1Integer (q_RxLevMinOffsetCell_);
      q_QualMinOffsetCell = new Asn1Integer (q_QualMinOffsetCell_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public EUTRA_FreqNeighCellInfo (
      long physCellId_,
      EUTRA_Q_OffsetRange dummy_
   ) {
      super();
      physCellId = new EUTRA_PhysCellId (physCellId_);
      dummy = dummy_;
   }

   public void init () {
      physCellId = null;
      dummy = null;
      q_RxLevMinOffsetCell = null;
      q_QualMinOffsetCell = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return physCellId;
         case 1: return dummy;
         case 2: return q_RxLevMinOffsetCell;
         case 3: return q_QualMinOffsetCell;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "physCellId";
         case 1: return "dummy";
         case 2: return "q-RxLevMinOffsetCell";
         case 3: return "q-QualMinOffsetCell";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean q_RxLevMinOffsetCellPresent = buffer.decodeBit ("q_RxLevMinOffsetCellPresent");
      boolean q_QualMinOffsetCellPresent = buffer.decodeBit ("q_QualMinOffsetCellPresent");

      // decode physCellId

      buffer.getContext().eventDispatcher.startElement("physCellId", -1);

      physCellId = new EUTRA_PhysCellId();
      physCellId.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("physCellId", -1);

      // decode dummy

      buffer.getContext().eventDispatcher.startElement("dummy", -1);

      {
         int tval = EUTRA_Q_OffsetRange.decodeEnumValue (buffer);
         dummy = EUTRA_Q_OffsetRange.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("dummy", -1);

      // decode q_RxLevMinOffsetCell

      if (q_RxLevMinOffsetCellPresent) {
         buffer.getContext().eventDispatcher.startElement("q_RxLevMinOffsetCell", -1);

         q_RxLevMinOffsetCell = new Asn1Integer();
         q_RxLevMinOffsetCell.decode (buffer, 1, 8);

         buffer.invokeCharacters(q_RxLevMinOffsetCell.toString());
         buffer.getContext().eventDispatcher.endElement("q_RxLevMinOffsetCell", -1);
      }
      else {
         q_RxLevMinOffsetCell = null;
      }

      // decode q_QualMinOffsetCell

      if (q_QualMinOffsetCellPresent) {
         buffer.getContext().eventDispatcher.startElement("q_QualMinOffsetCell", -1);

         q_QualMinOffsetCell = new Asn1Integer();
         q_QualMinOffsetCell.decode (buffer, 1, 8);

         buffer.invokeCharacters(q_QualMinOffsetCell.toString());
         buffer.getContext().eventDispatcher.endElement("q_QualMinOffsetCell", -1);
      }
      else {
         q_QualMinOffsetCell = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((q_RxLevMinOffsetCell != null), null);
      buffer.encodeBit ((q_QualMinOffsetCell != null), null);

      // encode physCellId

      if (physCellId != null) {
         buffer.getContext().eventDispatcher.startElement("physCellId", -1);

         physCellId.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("physCellId", -1);
      }
      else throw new Asn1MissingRequiredException ("physCellId");

      // encode dummy

      if (dummy != null) {
         buffer.getContext().eventDispatcher.startElement("dummy", -1);

         dummy.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("dummy", -1);
      }
      else throw new Asn1MissingRequiredException ("dummy");

      // encode q_RxLevMinOffsetCell

      if (q_RxLevMinOffsetCell != null) {
         buffer.getContext().eventDispatcher.startElement("q_RxLevMinOffsetCell", -1);

         q_RxLevMinOffsetCell.encode (buffer, 1, 8);

         buffer.getContext().eventDispatcher.endElement("q_RxLevMinOffsetCell", -1);
      }

      // encode q_QualMinOffsetCell

      if (q_QualMinOffsetCell != null) {
         buffer.getContext().eventDispatcher.startElement("q_QualMinOffsetCell", -1);

         q_QualMinOffsetCell.encode (buffer, 1, 8);

         buffer.getContext().eventDispatcher.endElement("q_QualMinOffsetCell", -1);
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (physCellId != null) physCellId.print (_sb, "physCellId", _level+1);
      if (dummy != null) dummy.print (_sb, "dummy", _level+1);
      if (q_RxLevMinOffsetCell != null) q_RxLevMinOffsetCell.print (_sb, "q_RxLevMinOffsetCell", _level+1);
      if (q_QualMinOffsetCell != null) q_QualMinOffsetCell.print (_sb, "q_QualMinOffsetCell", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
