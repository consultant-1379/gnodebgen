/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class UECapabilityEnquiry_v1610_IEs extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "UECapabilityEnquiry-v1610-IEs";
   }

   public UECapabilityEnquiry_v1610_IEs_rrc_SegAllowed_r16 rrc_SegAllowed_r16 = null;  // optional
   public UECapabilityEnquiry_v1610_IEs_nonCriticalExtension nonCriticalExtension;  // optional

   public UECapabilityEnquiry_v1610_IEs () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public UECapabilityEnquiry_v1610_IEs (
      UECapabilityEnquiry_v1610_IEs_rrc_SegAllowed_r16 rrc_SegAllowed_r16_,
      UECapabilityEnquiry_v1610_IEs_nonCriticalExtension nonCriticalExtension_
   ) {
      super();
      rrc_SegAllowed_r16 = rrc_SegAllowed_r16_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   public void init () {
      rrc_SegAllowed_r16 = null;
      nonCriticalExtension = null;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return rrc_SegAllowed_r16;
         case 1: return nonCriticalExtension;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "rrc-SegAllowed-r16";
         case 1: return "nonCriticalExtension";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean rrc_SegAllowed_r16Present = buffer.decodeBit ("rrc_SegAllowed_r16Present");
      boolean nonCriticalExtensionPresent = buffer.decodeBit ("nonCriticalExtensionPresent");

      // decode rrc_SegAllowed_r16

      if (rrc_SegAllowed_r16Present) {
         buffer.getContext().eventDispatcher.startElement("rrc_SegAllowed_r16", -1);

         int tval = UECapabilityEnquiry_v1610_IEs_rrc_SegAllowed_r16.decodeEnumValue (buffer);
         rrc_SegAllowed_r16 = UECapabilityEnquiry_v1610_IEs_rrc_SegAllowed_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("rrc_SegAllowed_r16", -1);
      }
      else {
         rrc_SegAllowed_r16 = null;
      }

      // decode nonCriticalExtension

      if (nonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension = new UECapabilityEnquiry_v1610_IEs_nonCriticalExtension();
         nonCriticalExtension.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }
      else {
         nonCriticalExtension = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((rrc_SegAllowed_r16 != null), null);
      buffer.encodeBit ((nonCriticalExtension != null), null);

      // encode rrc_SegAllowed_r16

      if (rrc_SegAllowed_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("rrc_SegAllowed_r16", -1);

         rrc_SegAllowed_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("rrc_SegAllowed_r16", -1);
      }

      // encode nonCriticalExtension

      if (nonCriticalExtension != null) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (rrc_SegAllowed_r16 != null) rrc_SegAllowed_r16.print (_sb, "rrc_SegAllowed_r16", _level+1);
      if (nonCriticalExtension != null) nonCriticalExtension.print (_sb, "nonCriticalExtension", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
