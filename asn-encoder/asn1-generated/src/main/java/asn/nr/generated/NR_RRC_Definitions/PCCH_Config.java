/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class PCCH_Config extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "PCCH-Config";
   }

   public PagingCycle defaultPagingCycle = null;
   public PCCH_Config_nAndPagingFrameOffset nAndPagingFrameOffset;
   public PCCH_Config_ns ns = null;
   public PCCH_Config_firstPDCCH_MonitoringOccasionOfPO firstPDCCH_MonitoringOccasionOfPO;  // optional
   public boolean mV2ExtPresent;
   public Asn1Integer nrofPDCCH_MonitoringOccasionPerSSB_InPO_r16;  // optional
   public Asn1OpenExt extElem1;

   public PCCH_Config () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public PCCH_Config (
      PagingCycle defaultPagingCycle_,
      PCCH_Config_nAndPagingFrameOffset nAndPagingFrameOffset_,
      PCCH_Config_ns ns_,
      PCCH_Config_firstPDCCH_MonitoringOccasionOfPO firstPDCCH_MonitoringOccasionOfPO_,
      Asn1Integer nrofPDCCH_MonitoringOccasionPerSSB_InPO_r16_
   ) {
      super();
      defaultPagingCycle = defaultPagingCycle_;
      nAndPagingFrameOffset = nAndPagingFrameOffset_;
      ns = ns_;
      firstPDCCH_MonitoringOccasionOfPO = firstPDCCH_MonitoringOccasionOfPO_;
      nrofPDCCH_MonitoringOccasionPerSSB_InPO_r16 = nrofPDCCH_MonitoringOccasionPerSSB_InPO_r16_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public PCCH_Config (
      PagingCycle defaultPagingCycle_,
      PCCH_Config_nAndPagingFrameOffset nAndPagingFrameOffset_,
      PCCH_Config_ns ns_
   ) {
      super();
      defaultPagingCycle = defaultPagingCycle_;
      nAndPagingFrameOffset = nAndPagingFrameOffset_;
      ns = ns_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public PCCH_Config (PagingCycle defaultPagingCycle_,
      PCCH_Config_nAndPagingFrameOffset nAndPagingFrameOffset_,
      PCCH_Config_ns ns_,
      PCCH_Config_firstPDCCH_MonitoringOccasionOfPO firstPDCCH_MonitoringOccasionOfPO_,
      long nrofPDCCH_MonitoringOccasionPerSSB_InPO_r16_
   ) {
      super();
      defaultPagingCycle = defaultPagingCycle_;
      nAndPagingFrameOffset = nAndPagingFrameOffset_;
      ns = ns_;
      firstPDCCH_MonitoringOccasionOfPO = firstPDCCH_MonitoringOccasionOfPO_;
      nrofPDCCH_MonitoringOccasionPerSSB_InPO_r16 = new Asn1Integer (nrofPDCCH_MonitoringOccasionPerSSB_InPO_r16_);
   }

   public void init () {
      defaultPagingCycle = null;
      nAndPagingFrameOffset = null;
      ns = null;
      firstPDCCH_MonitoringOccasionOfPO = null;
      nrofPDCCH_MonitoringOccasionPerSSB_InPO_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return defaultPagingCycle;
         case 1: return nAndPagingFrameOffset;
         case 2: return ns;
         case 3: return firstPDCCH_MonitoringOccasionOfPO;
         case 4: return nrofPDCCH_MonitoringOccasionPerSSB_InPO_r16;
         case 5: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "defaultPagingCycle";
         case 1: return "nAndPagingFrameOffset";
         case 2: return "ns";
         case 3: return "firstPDCCH-MonitoringOccasionOfPO";
         case 4: return "nrofPDCCH-MonitoringOccasionPerSSB-InPO-r16";
         case 5: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean firstPDCCH_MonitoringOccasionOfPOPresent = buffer.decodeBit ("firstPDCCH_MonitoringOccasionOfPOPresent");

      // decode defaultPagingCycle

      buffer.getContext().eventDispatcher.startElement("defaultPagingCycle", -1);

      {
         int tval = PagingCycle.decodeEnumValue (buffer);
         defaultPagingCycle = PagingCycle.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("defaultPagingCycle", -1);

      // decode nAndPagingFrameOffset

      buffer.getContext().eventDispatcher.startElement("nAndPagingFrameOffset", -1);

      nAndPagingFrameOffset = new PCCH_Config_nAndPagingFrameOffset();
      nAndPagingFrameOffset.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("nAndPagingFrameOffset", -1);

      // decode ns

      buffer.getContext().eventDispatcher.startElement("ns", -1);

      {
         int tval = PCCH_Config_ns.decodeEnumValue (buffer);
         ns = PCCH_Config_ns.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("ns", -1);

      // decode firstPDCCH_MonitoringOccasionOfPO

      if (firstPDCCH_MonitoringOccasionOfPOPresent) {
         buffer.getContext().eventDispatcher.startElement("firstPDCCH_MonitoringOccasionOfPO", -1);

         firstPDCCH_MonitoringOccasionOfPO = new PCCH_Config_firstPDCCH_MonitoringOccasionOfPO();
         firstPDCCH_MonitoringOccasionOfPO.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("firstPDCCH_MonitoringOccasionOfPO", -1);
      }
      else {
         firstPDCCH_MonitoringOccasionOfPO = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean nrofPDCCH_MonitoringOccasionPerSSB_InPO_r16Present = buffer.decodeBit ("nrofPDCCH_MonitoringOccasionPerSSB_InPO_r16Present");

            // decode nrofPDCCH_MonitoringOccasionPerSSB_InPO_r16

            if (nrofPDCCH_MonitoringOccasionPerSSB_InPO_r16Present) {
               buffer.getContext().eventDispatcher.startElement("nrofPDCCH_MonitoringOccasionPerSSB_InPO_r16", -1);

               nrofPDCCH_MonitoringOccasionPerSSB_InPO_r16 = new Asn1Integer();
               nrofPDCCH_MonitoringOccasionPerSSB_InPO_r16.decode (buffer, 2, 4);

               buffer.invokeCharacters(nrofPDCCH_MonitoringOccasionPerSSB_InPO_r16.toString());
               buffer.getContext().eventDispatcher.endElement("nrofPDCCH_MonitoringOccasionPerSSB_InPO_r16", -1);
            }
            else {
               nrofPDCCH_MonitoringOccasionPerSSB_InPO_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (mV2ExtPresent ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((firstPDCCH_MonitoringOccasionOfPO != null), null);

      // encode defaultPagingCycle

      if (defaultPagingCycle != null) {
         buffer.getContext().eventDispatcher.startElement("defaultPagingCycle", -1);

         defaultPagingCycle.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("defaultPagingCycle", -1);
      }
      else throw new Asn1MissingRequiredException ("defaultPagingCycle");

      // encode nAndPagingFrameOffset

      if (nAndPagingFrameOffset != null) {
         buffer.getContext().eventDispatcher.startElement("nAndPagingFrameOffset", -1);

         nAndPagingFrameOffset.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("nAndPagingFrameOffset", -1);
      }
      else throw new Asn1MissingRequiredException ("nAndPagingFrameOffset");

      // encode ns

      if (ns != null) {
         buffer.getContext().eventDispatcher.startElement("ns", -1);

         ns.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ns", -1);
      }
      else throw new Asn1MissingRequiredException ("ns");

      // encode firstPDCCH_MonitoringOccasionOfPO

      if (firstPDCCH_MonitoringOccasionOfPO != null) {
         buffer.getContext().eventDispatcher.startElement("firstPDCCH_MonitoringOccasionOfPO", -1);

         firstPDCCH_MonitoringOccasionOfPO.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("firstPDCCH_MonitoringOccasionOfPO", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 1;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit (mV2ExtPresent, null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         if (mV2ExtPresent) {
            buffer.reset();
            buffer.encodeBit ((nrofPDCCH_MonitoringOccasionPerSSB_InPO_r16 != null), "optbit");
            if (nrofPDCCH_MonitoringOccasionPerSSB_InPO_r16 != null) {
               nrofPDCCH_MonitoringOccasionPerSSB_InPO_r16.encode (buffer, 2, 4);
            }
            mainBuffer.encodeOpenType (buffer, null);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (defaultPagingCycle != null) defaultPagingCycle.print (_sb, "defaultPagingCycle", _level+1);
      if (nAndPagingFrameOffset != null) nAndPagingFrameOffset.print (_sb, "nAndPagingFrameOffset", _level+1);
      if (ns != null) ns.print (_sb, "ns", _level+1);
      if (firstPDCCH_MonitoringOccasionOfPO != null) firstPDCCH_MonitoringOccasionOfPO.print (_sb, "firstPDCCH_MonitoringOccasionOfPO", _level+1);
      if (nrofPDCCH_MonitoringOccasionPerSSB_InPO_r16 != null) nrofPDCCH_MonitoringOccasionPerSSB_InPO_r16.print (_sb, "nrofPDCCH_MonitoringOccasionPerSSB_InPO_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
