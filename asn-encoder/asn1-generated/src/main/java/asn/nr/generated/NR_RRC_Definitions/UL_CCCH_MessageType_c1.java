/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class UL_CCCH_MessageType_c1 extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CHOICE";
   }

   // Choice element identifier constants
   public final static byte _RRCSETUPREQUEST = 1;
   public final static byte _RRCRESUMEREQUEST = 2;
   public final static byte _RRCREESTABLISHMENTREQUEST = 3;
   public final static byte _RRCSYSTEMINFOREQUEST = 4;

   public UL_CCCH_MessageType_c1 () {
      super();
   }

   public UL_CCCH_MessageType_c1 (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _RRCSETUPREQUEST: return "rrcSetupRequest";
      case _RRCRESUMEREQUEST: return "rrcResumeRequest";
      case _RRCREESTABLISHMENTREQUEST: return "rrcReestablishmentRequest";
      case _RRCSYSTEMINFOREQUEST: return "rrcSystemInfoRequest";
      default: return "UNDEFINED";
      }
   }

   public void set_rrcSetupRequest (RRCSetupRequest value) {
      setElement (_RRCSETUPREQUEST, value);
   }

   public void set_rrcResumeRequest (RRCResumeRequest value) {
      setElement (_RRCRESUMEREQUEST, value);
   }

   public void set_rrcReestablishmentRequest (RRCReestablishmentRequest value) {
      setElement (_RRCREESTABLISHMENTREQUEST, value);
   }

   public void set_rrcSystemInfoRequest (RRCSystemInfoRequest value) {
      setElement (_RRCSYSTEMINFOREQUEST, value);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int idx = (int) buffer.decodeConsWholeNumber (4, "index");
      choiceID = idx + 1;
      buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

      switch (idx) {
         // rrcSetupRequest
         case 0: { 
            RRCSetupRequest rrcSetupRequest;
            element = rrcSetupRequest = new RRCSetupRequest();
            rrcSetupRequest.decode (buffer);
            break;
         }

         // rrcResumeRequest
         case 1: { 
            RRCResumeRequest rrcResumeRequest;
            element = rrcResumeRequest = new RRCResumeRequest();
            rrcResumeRequest.decode (buffer);
            break;
         }

         // rrcReestablishmentRequest
         case 2: { 
            RRCReestablishmentRequest rrcReestablishmentRequest;
            element = rrcReestablishmentRequest = new RRCReestablishmentRequest();
            rrcReestablishmentRequest.decode (buffer);
            break;
         }

         // rrcSystemInfoRequest
         case 3: { 
            RRCSystemInfoRequest rrcSystemInfoRequest;
            element = rrcSystemInfoRequest = new RRCSystemInfoRequest();
            rrcSystemInfoRequest.decode (buffer);
            break;
         }

         default:
         throw new Asn1InvalidChoiceOptionException (buffer, idx);
      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // Encode choice index value

      buffer.encodeConsWholeNumber (choiceID - 1, 4, "index");

      buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

      switch (choiceID) {
         // rrcSetupRequest
         case _RRCSETUPREQUEST:
            RRCSetupRequest rrcSetupRequest = (RRCSetupRequest) element;
            rrcSetupRequest.encode (buffer);
            break;

         // rrcResumeRequest
         case _RRCRESUMEREQUEST:
            RRCResumeRequest rrcResumeRequest = (RRCResumeRequest) element;
            rrcResumeRequest.encode (buffer);
            break;

         // rrcReestablishmentRequest
         case _RRCREESTABLISHMENTREQUEST:
            RRCReestablishmentRequest rrcReestablishmentRequest = (RRCReestablishmentRequest) element;
            rrcReestablishmentRequest.encode (buffer);
            break;

         // rrcSystemInfoRequest
         case _RRCSYSTEMINFOREQUEST:
            RRCSystemInfoRequest rrcSystemInfoRequest = (RRCSystemInfoRequest) element;
            rrcSystemInfoRequest.encode (buffer);
            break;

         default:
         throw new Asn1InvalidChoiceOptionException();
      }

      buffer.getContext().eventDispatcher.endElement("getElemName()", -1);
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (element != null) {
         element.print (_sb, getElemName(), _level+1);
      }
      indent (_sb, _level);
      _sb.append("}\n");
   }

}
