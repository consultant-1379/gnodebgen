/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class BandParameters_nr extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public FreqBandIndicatorNR bandNR;
   public CA_BandwidthClassNR ca_BandwidthClassDL_NR = null;  // optional
   public CA_BandwidthClassNR ca_BandwidthClassUL_NR = null;  // optional

   public BandParameters_nr () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public BandParameters_nr (
      FreqBandIndicatorNR bandNR_,
      CA_BandwidthClassNR ca_BandwidthClassDL_NR_,
      CA_BandwidthClassNR ca_BandwidthClassUL_NR_
   ) {
      super();
      bandNR = bandNR_;
      ca_BandwidthClassDL_NR = ca_BandwidthClassDL_NR_;
      ca_BandwidthClassUL_NR = ca_BandwidthClassUL_NR_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public BandParameters_nr (
      FreqBandIndicatorNR bandNR_
   ) {
      super();
      bandNR = bandNR_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public BandParameters_nr (long bandNR_,
      CA_BandwidthClassNR ca_BandwidthClassDL_NR_,
      CA_BandwidthClassNR ca_BandwidthClassUL_NR_
   ) {
      super();
      bandNR = new FreqBandIndicatorNR (bandNR_);
      ca_BandwidthClassDL_NR = ca_BandwidthClassDL_NR_;
      ca_BandwidthClassUL_NR = ca_BandwidthClassUL_NR_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public BandParameters_nr (
      long bandNR_
   ) {
      super();
      bandNR = new FreqBandIndicatorNR (bandNR_);
   }

   public void init () {
      bandNR = null;
      ca_BandwidthClassDL_NR = null;
      ca_BandwidthClassUL_NR = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return bandNR;
         case 1: return ca_BandwidthClassDL_NR;
         case 2: return ca_BandwidthClassUL_NR;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "bandNR";
         case 1: return "ca-BandwidthClassDL-NR";
         case 2: return "ca-BandwidthClassUL-NR";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean ca_BandwidthClassDL_NRPresent = buffer.decodeBit ("ca_BandwidthClassDL_NRPresent");
      boolean ca_BandwidthClassUL_NRPresent = buffer.decodeBit ("ca_BandwidthClassUL_NRPresent");

      // decode bandNR

      buffer.getContext().eventDispatcher.startElement("bandNR", -1);

      bandNR = new FreqBandIndicatorNR();
      bandNR.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("bandNR", -1);

      // decode ca_BandwidthClassDL_NR

      if (ca_BandwidthClassDL_NRPresent) {
         buffer.getContext().eventDispatcher.startElement("ca_BandwidthClassDL_NR", -1);

         int tval = CA_BandwidthClassNR.decodeEnumValue (buffer);
         ca_BandwidthClassDL_NR = CA_BandwidthClassNR.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("ca_BandwidthClassDL_NR", -1);
      }
      else {
         ca_BandwidthClassDL_NR = null;
      }

      // decode ca_BandwidthClassUL_NR

      if (ca_BandwidthClassUL_NRPresent) {
         buffer.getContext().eventDispatcher.startElement("ca_BandwidthClassUL_NR", -1);

         int tval = CA_BandwidthClassNR.decodeEnumValue (buffer);
         ca_BandwidthClassUL_NR = CA_BandwidthClassNR.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("ca_BandwidthClassUL_NR", -1);
      }
      else {
         ca_BandwidthClassUL_NR = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((ca_BandwidthClassDL_NR != null), null);
      buffer.encodeBit ((ca_BandwidthClassUL_NR != null), null);

      // encode bandNR

      if (bandNR != null) {
         buffer.getContext().eventDispatcher.startElement("bandNR", -1);

         bandNR.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("bandNR", -1);
      }
      else throw new Asn1MissingRequiredException ("bandNR");

      // encode ca_BandwidthClassDL_NR

      if (ca_BandwidthClassDL_NR != null) {
         buffer.getContext().eventDispatcher.startElement("ca_BandwidthClassDL_NR", -1);

         ca_BandwidthClassDL_NR.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ca_BandwidthClassDL_NR", -1);
      }

      // encode ca_BandwidthClassUL_NR

      if (ca_BandwidthClassUL_NR != null) {
         buffer.getContext().eventDispatcher.startElement("ca_BandwidthClassUL_NR", -1);

         ca_BandwidthClassUL_NR.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ca_BandwidthClassUL_NR", -1);
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (bandNR != null) bandNR.print (_sb, "bandNR", _level+1);
      if (ca_BandwidthClassDL_NR != null) ca_BandwidthClassDL_NR.print (_sb, "ca_BandwidthClassDL_NR", _level+1);
      if (ca_BandwidthClassUL_NR != null) ca_BandwidthClassUL_NR.print (_sb, "ca_BandwidthClassUL_NR", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
