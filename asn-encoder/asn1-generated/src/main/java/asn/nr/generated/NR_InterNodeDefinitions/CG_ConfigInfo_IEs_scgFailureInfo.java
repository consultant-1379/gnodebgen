/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_InterNodeDefinitions;

import com.objsys.asn1j.runtime.*;
import asn.nr.generated.NR_RRC_Definitions.MeasResultSCG_Failure;

public class CG_ConfigInfo_IEs_scgFailureInfo extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_InterNodeDefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public CG_ConfigInfo_IEs_scgFailureInfo_failureType failureType = null;
   public MeasResultSCG_Failure measResultSCG;

   public CG_ConfigInfo_IEs_scgFailureInfo () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CG_ConfigInfo_IEs_scgFailureInfo (
      CG_ConfigInfo_IEs_scgFailureInfo_failureType failureType_,
      MeasResultSCG_Failure measResultSCG_
   ) {
      super();
      failureType = failureType_;
      measResultSCG = measResultSCG_;
   }

   public void init () {
      failureType = null;
      measResultSCG = null;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return failureType;
         case 1: return measResultSCG;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "failureType";
         case 1: return "measResultSCG";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode failureType

      buffer.getContext().eventDispatcher.startElement("failureType", -1);

      {
         int tval = CG_ConfigInfo_IEs_scgFailureInfo_failureType.decodeEnumValue (buffer);
         failureType = CG_ConfigInfo_IEs_scgFailureInfo_failureType.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("failureType", -1);

      // decode measResultSCG

      buffer.getContext().eventDispatcher.startElement("measResultSCG", -1);

      {
         Asn1OctetString measResultSCG_outer = new Asn1OctetString();
         measResultSCG_outer.decode (buffer);
         if (measResultSCG_outer.value == null) throw new Asn1Exception("contained type's complete encoding is empty");
         Asn1PerDecodeBuffer savedBuffer = buffer;
         buffer = new Asn1PerDecodeBuffer( measResultSCG_outer.value, buffer.isAligned());
         buffer.setEventHandlerList( savedBuffer );
         measResultSCG = new MeasResultSCG_Failure();
         measResultSCG.decode (buffer);
         buffer = savedBuffer;
      }
      buffer.getContext().eventDispatcher.endElement("measResultSCG", -1);

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode failureType

      if (failureType != null) {
         buffer.getContext().eventDispatcher.startElement("failureType", -1);

         failureType.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("failureType", -1);
      }
      else throw new Asn1MissingRequiredException ("failureType");

      // encode measResultSCG

      if (measResultSCG != null) {
         buffer.getContext().eventDispatcher.startElement("measResultSCG", -1);

         Asn1OctetString measResultSCG_outer;
         {
            Asn1PerEncodeBuffer savedBuffer = buffer;
            buffer = new Asn1PerEncodeBuffer(buffer.isAligned());
            measResultSCG.encode (buffer);
            measResultSCG_outer = new Asn1OctetString(buffer.getMsgCopy() );
            buffer = savedBuffer;
         }
         measResultSCG_outer.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("measResultSCG", -1);
      }
      else throw new Asn1MissingRequiredException ("measResultSCG");

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (failureType != null) failureType.print (_sb, "failureType", _level+1);
      if (measResultSCG != null) measResultSCG.print (_sb, "measResultSCG", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
