/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class FreqBandInformation extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "FreqBandInformation";
   }

   // Choice element identifier constants
   public final static byte _BANDINFORMATIONEUTRA = 1;
   public final static byte _BANDINFORMATIONNR = 2;

   public FreqBandInformation () {
      super();
   }

   public FreqBandInformation (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _BANDINFORMATIONEUTRA: return "bandInformationEUTRA";
      case _BANDINFORMATIONNR: return "bandInformationNR";
      default: return "UNDEFINED";
      }
   }

   public void set_bandInformationEUTRA (FreqBandInformationEUTRA value) {
      setElement (_BANDINFORMATIONEUTRA, value);
   }

   public void set_bandInformationNR (FreqBandInformationNR value) {
      setElement (_BANDINFORMATIONNR, value);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int idx = (int) buffer.decodeConsWholeNumber (2, "index");
      choiceID = idx + 1;
      buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

      switch (idx) {
         // bandInformationEUTRA
         case 0: { 
            FreqBandInformationEUTRA bandInformationEUTRA;
            element = bandInformationEUTRA = new FreqBandInformationEUTRA();
            bandInformationEUTRA.decode (buffer);
            break;
         }

         // bandInformationNR
         case 1: { 
            FreqBandInformationNR bandInformationNR;
            element = bandInformationNR = new FreqBandInformationNR();
            bandInformationNR.decode (buffer);
            break;
         }

         default:
         throw new Asn1InvalidChoiceOptionException (buffer, idx);
      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // Encode choice index value

      buffer.encodeConsWholeNumber (choiceID - 1, 2, "index");

      buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

      switch (choiceID) {
         // bandInformationEUTRA
         case _BANDINFORMATIONEUTRA:
            FreqBandInformationEUTRA bandInformationEUTRA = (FreqBandInformationEUTRA) element;
            bandInformationEUTRA.encode (buffer);
            break;

         // bandInformationNR
         case _BANDINFORMATIONNR:
            FreqBandInformationNR bandInformationNR = (FreqBandInformationNR) element;
            bandInformationNR.encode (buffer);
            break;

         default:
         throw new Asn1InvalidChoiceOptionException();
      }

      buffer.getContext().eventDispatcher.endElement("getElemName()", -1);
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (element != null) {
         element.print (_sb, getElemName(), _level+1);
      }
      indent (_sb, _level);
      _sb.append("}\n");
   }

}
