/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class BSR_Config_logicalChannelSR_DelayTimer extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ENUMERATED";
   }

   // Integer constants for switch-case
   public static final int _SF20 = 0;
   public static final int _SF40 = 1;
   public static final int _SF64 = 2;
   public static final int _SF128 = 3;
   public static final int _SF512 = 4;
   public static final int _SF1024 = 5;
   public static final int _SF2560 = 6;
   public static final int _SPARE1 = 7;

   // Singleton instances of BSR_Config_logicalChannelSR_DelayTimer
   protected static final BSR_Config_logicalChannelSR_DelayTimer _sf20 = new BSR_Config_logicalChannelSR_DelayTimer(0);
   protected static final BSR_Config_logicalChannelSR_DelayTimer _sf40 = new BSR_Config_logicalChannelSR_DelayTimer(1);
   protected static final BSR_Config_logicalChannelSR_DelayTimer _sf64 = new BSR_Config_logicalChannelSR_DelayTimer(2);
   protected static final BSR_Config_logicalChannelSR_DelayTimer _sf128 = new BSR_Config_logicalChannelSR_DelayTimer(3);
   protected static final BSR_Config_logicalChannelSR_DelayTimer _sf512 = new BSR_Config_logicalChannelSR_DelayTimer(4);
   protected static final BSR_Config_logicalChannelSR_DelayTimer _sf1024 = new BSR_Config_logicalChannelSR_DelayTimer(5);
   protected static final BSR_Config_logicalChannelSR_DelayTimer _sf2560 = new BSR_Config_logicalChannelSR_DelayTimer(6);
   protected static final BSR_Config_logicalChannelSR_DelayTimer _spare1 = new BSR_Config_logicalChannelSR_DelayTimer(7);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    *   7
    */
   protected BSR_Config_logicalChannelSR_DelayTimer (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for sf20.
    */
   public static BSR_Config_logicalChannelSR_DelayTimer sf20() {
      return _sf20;
   }

   /**
    * Singleton accessor method for sf40.
    */
   public static BSR_Config_logicalChannelSR_DelayTimer sf40() {
      return _sf40;
   }

   /**
    * Singleton accessor method for sf64.
    */
   public static BSR_Config_logicalChannelSR_DelayTimer sf64() {
      return _sf64;
   }

   /**
    * Singleton accessor method for sf128.
    */
   public static BSR_Config_logicalChannelSR_DelayTimer sf128() {
      return _sf128;
   }

   /**
    * Singleton accessor method for sf512.
    */
   public static BSR_Config_logicalChannelSR_DelayTimer sf512() {
      return _sf512;
   }

   /**
    * Singleton accessor method for sf1024.
    */
   public static BSR_Config_logicalChannelSR_DelayTimer sf1024() {
      return _sf1024;
   }

   /**
    * Singleton accessor method for sf2560.
    */
   public static BSR_Config_logicalChannelSR_DelayTimer sf2560() {
      return _sf2560;
   }

   /**
    * Singleton accessor method for spare1.
    */
   public static BSR_Config_logicalChannelSR_DelayTimer spare1() {
      return _spare1;
   }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return BSR_Config_logicalChannelSR_DelayTimer.valueOf( BSR_Config_logicalChannelSR_DelayTimer.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static BSR_Config_logicalChannelSR_DelayTimer valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 0: return sf20();
         case 1: return sf40();
         case 2: return sf64();
         case 3: return sf128();
         case 4: return sf512();
         case 5: return sf1024();
         case 6: return sf2560();
         case 7: return spare1();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      ui = (int) buffer.decodeConsWholeNumber (8);

      switch (ui) {
         case 0: ret =  0; break;
         case 1: ret =  1; break;
         case 2: ret =  2; break;
         case 3: ret =  3; break;
         case 4: ret =  4; break;
         case 5: ret =  5; break;
         case 6: ret =  6; break;
         case 7: ret =  7; break;
         default: throw new Asn1InvalidEnumException (ui);
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (BSR_Config_logicalChannelSR_DelayTimer.valueOf(ret).toString());

      return ret;
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      switch ((int)value) {
         case 0: ui = 0; /* sf20 */break;
         case 1: ui = 1; /* sf40 */break;
         case 2: ui = 2; /* sf64 */break;
         case 3: ui = 3; /* sf128 */break;
         case 4: ui = 4; /* sf512 */break;
         case 5: ui = 5; /* sf1024 */break;
         case 6: ui = 6; /* sf2560 */break;
         case 7: ui = 7; /* spare1 */break;
         default:
            throw new Asn1InvalidEnumException (value);
      }

      buffer.encodeConsWholeNumber (ui, 8);
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("sf20");
         case 1: return ("sf40");
         case 2: return ("sf64");
         case 3: return ("sf128");
         case 4: return ("sf512");
         case 5: return ("sf1024");
         case 6: return ("sf2560");
         case 7: return ("spare1");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
