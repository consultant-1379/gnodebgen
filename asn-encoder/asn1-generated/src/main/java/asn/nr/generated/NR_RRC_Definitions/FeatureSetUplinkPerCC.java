/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class FeatureSetUplinkPerCC extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "FeatureSetUplinkPerCC";
   }

   public SubcarrierSpacing supportedSubcarrierSpacingUL = null;
   public SupportedBandwidth supportedBandwidthUL;
   public FeatureSetUplinkPerCC_channelBW_90mhz channelBW_90mhz = null;  // optional
   public FeatureSetUplinkPerCC_mimo_CB_PUSCH mimo_CB_PUSCH;  // optional
   public MIMO_LayersUL maxNumberMIMO_LayersNonCB_PUSCH = null;  // optional
   public ModulationOrder supportedModulationOrderUL = null;  // optional

   public FeatureSetUplinkPerCC () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public FeatureSetUplinkPerCC (
      SubcarrierSpacing supportedSubcarrierSpacingUL_,
      SupportedBandwidth supportedBandwidthUL_,
      FeatureSetUplinkPerCC_channelBW_90mhz channelBW_90mhz_,
      FeatureSetUplinkPerCC_mimo_CB_PUSCH mimo_CB_PUSCH_,
      MIMO_LayersUL maxNumberMIMO_LayersNonCB_PUSCH_,
      ModulationOrder supportedModulationOrderUL_
   ) {
      super();
      supportedSubcarrierSpacingUL = supportedSubcarrierSpacingUL_;
      supportedBandwidthUL = supportedBandwidthUL_;
      channelBW_90mhz = channelBW_90mhz_;
      mimo_CB_PUSCH = mimo_CB_PUSCH_;
      maxNumberMIMO_LayersNonCB_PUSCH = maxNumberMIMO_LayersNonCB_PUSCH_;
      supportedModulationOrderUL = supportedModulationOrderUL_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public FeatureSetUplinkPerCC (
      SubcarrierSpacing supportedSubcarrierSpacingUL_,
      SupportedBandwidth supportedBandwidthUL_
   ) {
      super();
      supportedSubcarrierSpacingUL = supportedSubcarrierSpacingUL_;
      supportedBandwidthUL = supportedBandwidthUL_;
   }

   public void init () {
      supportedSubcarrierSpacingUL = null;
      supportedBandwidthUL = null;
      channelBW_90mhz = null;
      mimo_CB_PUSCH = null;
      maxNumberMIMO_LayersNonCB_PUSCH = null;
      supportedModulationOrderUL = null;
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return supportedSubcarrierSpacingUL;
         case 1: return supportedBandwidthUL;
         case 2: return channelBW_90mhz;
         case 3: return mimo_CB_PUSCH;
         case 4: return maxNumberMIMO_LayersNonCB_PUSCH;
         case 5: return supportedModulationOrderUL;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "supportedSubcarrierSpacingUL";
         case 1: return "supportedBandwidthUL";
         case 2: return "channelBW-90mhz";
         case 3: return "mimo-CB-PUSCH";
         case 4: return "maxNumberMIMO-LayersNonCB-PUSCH";
         case 5: return "supportedModulationOrderUL";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean channelBW_90mhzPresent = buffer.decodeBit ("channelBW_90mhzPresent");
      boolean mimo_CB_PUSCHPresent = buffer.decodeBit ("mimo_CB_PUSCHPresent");
      boolean maxNumberMIMO_LayersNonCB_PUSCHPresent = buffer.decodeBit ("maxNumberMIMO_LayersNonCB_PUSCHPresent");
      boolean supportedModulationOrderULPresent = buffer.decodeBit ("supportedModulationOrderULPresent");

      // decode supportedSubcarrierSpacingUL

      buffer.getContext().eventDispatcher.startElement("supportedSubcarrierSpacingUL", -1);

      {
         int tval = SubcarrierSpacing.decodeEnumValue (buffer);
         supportedSubcarrierSpacingUL = SubcarrierSpacing.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("supportedSubcarrierSpacingUL", -1);

      // decode supportedBandwidthUL

      buffer.getContext().eventDispatcher.startElement("supportedBandwidthUL", -1);

      supportedBandwidthUL = new SupportedBandwidth();
      supportedBandwidthUL.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("supportedBandwidthUL", -1);

      // decode channelBW_90mhz

      if (channelBW_90mhzPresent) {
         buffer.getContext().eventDispatcher.startElement("channelBW_90mhz", -1);

         int tval = FeatureSetUplinkPerCC_channelBW_90mhz.decodeEnumValue (buffer);
         channelBW_90mhz = FeatureSetUplinkPerCC_channelBW_90mhz.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("channelBW_90mhz", -1);
      }
      else {
         channelBW_90mhz = null;
      }

      // decode mimo_CB_PUSCH

      if (mimo_CB_PUSCHPresent) {
         buffer.getContext().eventDispatcher.startElement("mimo_CB_PUSCH", -1);

         mimo_CB_PUSCH = new FeatureSetUplinkPerCC_mimo_CB_PUSCH();
         mimo_CB_PUSCH.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("mimo_CB_PUSCH", -1);
      }
      else {
         mimo_CB_PUSCH = null;
      }

      // decode maxNumberMIMO_LayersNonCB_PUSCH

      if (maxNumberMIMO_LayersNonCB_PUSCHPresent) {
         buffer.getContext().eventDispatcher.startElement("maxNumberMIMO_LayersNonCB_PUSCH", -1);

         int tval = MIMO_LayersUL.decodeEnumValue (buffer);
         maxNumberMIMO_LayersNonCB_PUSCH = MIMO_LayersUL.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("maxNumberMIMO_LayersNonCB_PUSCH", -1);
      }
      else {
         maxNumberMIMO_LayersNonCB_PUSCH = null;
      }

      // decode supportedModulationOrderUL

      if (supportedModulationOrderULPresent) {
         buffer.getContext().eventDispatcher.startElement("supportedModulationOrderUL", -1);

         int tval = ModulationOrder.decodeEnumValue (buffer);
         supportedModulationOrderUL = ModulationOrder.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("supportedModulationOrderUL", -1);
      }
      else {
         supportedModulationOrderUL = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((channelBW_90mhz != null), null);
      buffer.encodeBit ((mimo_CB_PUSCH != null), null);
      buffer.encodeBit ((maxNumberMIMO_LayersNonCB_PUSCH != null), null);
      buffer.encodeBit ((supportedModulationOrderUL != null), null);

      // encode supportedSubcarrierSpacingUL

      if (supportedSubcarrierSpacingUL != null) {
         buffer.getContext().eventDispatcher.startElement("supportedSubcarrierSpacingUL", -1);

         supportedSubcarrierSpacingUL.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("supportedSubcarrierSpacingUL", -1);
      }
      else throw new Asn1MissingRequiredException ("supportedSubcarrierSpacingUL");

      // encode supportedBandwidthUL

      if (supportedBandwidthUL != null) {
         buffer.getContext().eventDispatcher.startElement("supportedBandwidthUL", -1);

         supportedBandwidthUL.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("supportedBandwidthUL", -1);
      }
      else throw new Asn1MissingRequiredException ("supportedBandwidthUL");

      // encode channelBW_90mhz

      if (channelBW_90mhz != null) {
         buffer.getContext().eventDispatcher.startElement("channelBW_90mhz", -1);

         channelBW_90mhz.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("channelBW_90mhz", -1);
      }

      // encode mimo_CB_PUSCH

      if (mimo_CB_PUSCH != null) {
         buffer.getContext().eventDispatcher.startElement("mimo_CB_PUSCH", -1);

         mimo_CB_PUSCH.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("mimo_CB_PUSCH", -1);
      }

      // encode maxNumberMIMO_LayersNonCB_PUSCH

      if (maxNumberMIMO_LayersNonCB_PUSCH != null) {
         buffer.getContext().eventDispatcher.startElement("maxNumberMIMO_LayersNonCB_PUSCH", -1);

         maxNumberMIMO_LayersNonCB_PUSCH.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("maxNumberMIMO_LayersNonCB_PUSCH", -1);
      }

      // encode supportedModulationOrderUL

      if (supportedModulationOrderUL != null) {
         buffer.getContext().eventDispatcher.startElement("supportedModulationOrderUL", -1);

         supportedModulationOrderUL.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("supportedModulationOrderUL", -1);
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (supportedSubcarrierSpacingUL != null) supportedSubcarrierSpacingUL.print (_sb, "supportedSubcarrierSpacingUL", _level+1);
      if (supportedBandwidthUL != null) supportedBandwidthUL.print (_sb, "supportedBandwidthUL", _level+1);
      if (channelBW_90mhz != null) channelBW_90mhz.print (_sb, "channelBW_90mhz", _level+1);
      if (mimo_CB_PUSCH != null) mimo_CB_PUSCH.print (_sb, "mimo_CB_PUSCH", _level+1);
      if (maxNumberMIMO_LayersNonCB_PUSCH != null) maxNumberMIMO_LayersNonCB_PUSCH.print (_sb, "maxNumberMIMO_LayersNonCB_PUSCH", _level+1);
      if (supportedModulationOrderUL != null) supportedModulationOrderUL.print (_sb, "supportedModulationOrderUL", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
