/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class ServingCellConfigCommon extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ServingCellConfigCommon";
   }

   public PhysCellId physCellId;  // optional
   public DownlinkConfigCommon downlinkConfigCommon;  // optional
   public UplinkConfigCommon uplinkConfigCommon;  // optional
   public UplinkConfigCommon supplementaryUplinkConfig;  // optional
   public ServingCellConfigCommon_n_TimingAdvanceOffset n_TimingAdvanceOffset = null;  // optional
   public ServingCellConfigCommon_ssb_PositionsInBurst ssb_PositionsInBurst;  // optional
   public ServingCellConfigCommon_ssb_periodicityServingCell ssb_periodicityServingCell = null;  // optional
   public ServingCellConfigCommon_dmrs_TypeA_Position dmrs_TypeA_Position = null;
   public ServingCellConfigCommon_lte_CRS_ToMatchAround lte_CRS_ToMatchAround;  // optional
   public ServingCellConfigCommon_rateMatchPatternToAddModList rateMatchPatternToAddModList;  // optional
   public ServingCellConfigCommon_rateMatchPatternToReleaseList rateMatchPatternToReleaseList;  // optional
   public SubcarrierSpacing ssbSubcarrierSpacing = null;  // optional
   public TDD_UL_DL_ConfigCommon tdd_UL_DL_ConfigurationCommon;  // optional
   public Asn1Integer ss_PBCH_BlockPower;
   public boolean mV2ExtPresent;
   public ServingCellConfigCommon_channelAccessMode_r16 channelAccessMode_r16;  // optional
   public ServingCellConfigCommon_discoveryBurstWindowLength_r16 discoveryBurstWindowLength_r16 = null;  // optional
   public SSB_PositionQCL_Relation_r16 ssb_PositionQCL_r16 = null;  // optional
   public HighSpeedConfig_r16 highSpeedConfig_r16;  // optional
   public Asn1OpenExt extElem1;

   public ServingCellConfigCommon () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ServingCellConfigCommon (
      PhysCellId physCellId_,
      DownlinkConfigCommon downlinkConfigCommon_,
      UplinkConfigCommon uplinkConfigCommon_,
      UplinkConfigCommon supplementaryUplinkConfig_,
      ServingCellConfigCommon_n_TimingAdvanceOffset n_TimingAdvanceOffset_,
      ServingCellConfigCommon_ssb_PositionsInBurst ssb_PositionsInBurst_,
      ServingCellConfigCommon_ssb_periodicityServingCell ssb_periodicityServingCell_,
      ServingCellConfigCommon_dmrs_TypeA_Position dmrs_TypeA_Position_,
      ServingCellConfigCommon_lte_CRS_ToMatchAround lte_CRS_ToMatchAround_,
      ServingCellConfigCommon_rateMatchPatternToAddModList rateMatchPatternToAddModList_,
      ServingCellConfigCommon_rateMatchPatternToReleaseList rateMatchPatternToReleaseList_,
      SubcarrierSpacing ssbSubcarrierSpacing_,
      TDD_UL_DL_ConfigCommon tdd_UL_DL_ConfigurationCommon_,
      Asn1Integer ss_PBCH_BlockPower_,
      ServingCellConfigCommon_channelAccessMode_r16 channelAccessMode_r16_,
      ServingCellConfigCommon_discoveryBurstWindowLength_r16 discoveryBurstWindowLength_r16_,
      SSB_PositionQCL_Relation_r16 ssb_PositionQCL_r16_,
      HighSpeedConfig_r16 highSpeedConfig_r16_
   ) {
      super();
      physCellId = physCellId_;
      downlinkConfigCommon = downlinkConfigCommon_;
      uplinkConfigCommon = uplinkConfigCommon_;
      supplementaryUplinkConfig = supplementaryUplinkConfig_;
      n_TimingAdvanceOffset = n_TimingAdvanceOffset_;
      ssb_PositionsInBurst = ssb_PositionsInBurst_;
      ssb_periodicityServingCell = ssb_periodicityServingCell_;
      dmrs_TypeA_Position = dmrs_TypeA_Position_;
      lte_CRS_ToMatchAround = lte_CRS_ToMatchAround_;
      rateMatchPatternToAddModList = rateMatchPatternToAddModList_;
      rateMatchPatternToReleaseList = rateMatchPatternToReleaseList_;
      ssbSubcarrierSpacing = ssbSubcarrierSpacing_;
      tdd_UL_DL_ConfigurationCommon = tdd_UL_DL_ConfigurationCommon_;
      ss_PBCH_BlockPower = ss_PBCH_BlockPower_;
      channelAccessMode_r16 = channelAccessMode_r16_;
      discoveryBurstWindowLength_r16 = discoveryBurstWindowLength_r16_;
      ssb_PositionQCL_r16 = ssb_PositionQCL_r16_;
      highSpeedConfig_r16 = highSpeedConfig_r16_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public ServingCellConfigCommon (
      ServingCellConfigCommon_dmrs_TypeA_Position dmrs_TypeA_Position_,
      Asn1Integer ss_PBCH_BlockPower_
   ) {
      super();
      dmrs_TypeA_Position = dmrs_TypeA_Position_;
      ss_PBCH_BlockPower = ss_PBCH_BlockPower_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public ServingCellConfigCommon (long physCellId_,
      DownlinkConfigCommon downlinkConfigCommon_,
      UplinkConfigCommon uplinkConfigCommon_,
      UplinkConfigCommon supplementaryUplinkConfig_,
      ServingCellConfigCommon_n_TimingAdvanceOffset n_TimingAdvanceOffset_,
      ServingCellConfigCommon_ssb_PositionsInBurst ssb_PositionsInBurst_,
      ServingCellConfigCommon_ssb_periodicityServingCell ssb_periodicityServingCell_,
      ServingCellConfigCommon_dmrs_TypeA_Position dmrs_TypeA_Position_,
      ServingCellConfigCommon_lte_CRS_ToMatchAround lte_CRS_ToMatchAround_,
      ServingCellConfigCommon_rateMatchPatternToAddModList rateMatchPatternToAddModList_,
      ServingCellConfigCommon_rateMatchPatternToReleaseList rateMatchPatternToReleaseList_,
      SubcarrierSpacing ssbSubcarrierSpacing_,
      TDD_UL_DL_ConfigCommon tdd_UL_DL_ConfigurationCommon_,
      long ss_PBCH_BlockPower_,
      ServingCellConfigCommon_channelAccessMode_r16 channelAccessMode_r16_,
      ServingCellConfigCommon_discoveryBurstWindowLength_r16 discoveryBurstWindowLength_r16_,
      SSB_PositionQCL_Relation_r16 ssb_PositionQCL_r16_,
      HighSpeedConfig_r16 highSpeedConfig_r16_
   ) {
      super();
      physCellId = new PhysCellId (physCellId_);
      downlinkConfigCommon = downlinkConfigCommon_;
      uplinkConfigCommon = uplinkConfigCommon_;
      supplementaryUplinkConfig = supplementaryUplinkConfig_;
      n_TimingAdvanceOffset = n_TimingAdvanceOffset_;
      ssb_PositionsInBurst = ssb_PositionsInBurst_;
      ssb_periodicityServingCell = ssb_periodicityServingCell_;
      dmrs_TypeA_Position = dmrs_TypeA_Position_;
      lte_CRS_ToMatchAround = lte_CRS_ToMatchAround_;
      rateMatchPatternToAddModList = rateMatchPatternToAddModList_;
      rateMatchPatternToReleaseList = rateMatchPatternToReleaseList_;
      ssbSubcarrierSpacing = ssbSubcarrierSpacing_;
      tdd_UL_DL_ConfigurationCommon = tdd_UL_DL_ConfigurationCommon_;
      ss_PBCH_BlockPower = new Asn1Integer (ss_PBCH_BlockPower_);
      channelAccessMode_r16 = channelAccessMode_r16_;
      discoveryBurstWindowLength_r16 = discoveryBurstWindowLength_r16_;
      ssb_PositionQCL_r16 = ssb_PositionQCL_r16_;
      highSpeedConfig_r16 = highSpeedConfig_r16_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public ServingCellConfigCommon (
      ServingCellConfigCommon_dmrs_TypeA_Position dmrs_TypeA_Position_,
      long ss_PBCH_BlockPower_
   ) {
      super();
      dmrs_TypeA_Position = dmrs_TypeA_Position_;
      ss_PBCH_BlockPower = new Asn1Integer (ss_PBCH_BlockPower_);
   }

   public void init () {
      physCellId = null;
      downlinkConfigCommon = null;
      uplinkConfigCommon = null;
      supplementaryUplinkConfig = null;
      n_TimingAdvanceOffset = null;
      ssb_PositionsInBurst = null;
      ssb_periodicityServingCell = null;
      dmrs_TypeA_Position = null;
      lte_CRS_ToMatchAround = null;
      rateMatchPatternToAddModList = null;
      rateMatchPatternToReleaseList = null;
      ssbSubcarrierSpacing = null;
      tdd_UL_DL_ConfigurationCommon = null;
      ss_PBCH_BlockPower = null;
      channelAccessMode_r16 = null;
      discoveryBurstWindowLength_r16 = null;
      ssb_PositionQCL_r16 = null;
      highSpeedConfig_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 19; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return physCellId;
         case 1: return downlinkConfigCommon;
         case 2: return uplinkConfigCommon;
         case 3: return supplementaryUplinkConfig;
         case 4: return n_TimingAdvanceOffset;
         case 5: return ssb_PositionsInBurst;
         case 6: return ssb_periodicityServingCell;
         case 7: return dmrs_TypeA_Position;
         case 8: return lte_CRS_ToMatchAround;
         case 9: return rateMatchPatternToAddModList;
         case 10: return rateMatchPatternToReleaseList;
         case 11: return ssbSubcarrierSpacing;
         case 12: return tdd_UL_DL_ConfigurationCommon;
         case 13: return ss_PBCH_BlockPower;
         case 14: return channelAccessMode_r16;
         case 15: return discoveryBurstWindowLength_r16;
         case 16: return ssb_PositionQCL_r16;
         case 17: return highSpeedConfig_r16;
         case 18: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "physCellId";
         case 1: return "downlinkConfigCommon";
         case 2: return "uplinkConfigCommon";
         case 3: return "supplementaryUplinkConfig";
         case 4: return "n-TimingAdvanceOffset";
         case 5: return "ssb-PositionsInBurst";
         case 6: return "ssb-periodicityServingCell";
         case 7: return "dmrs-TypeA-Position";
         case 8: return "lte-CRS-ToMatchAround";
         case 9: return "rateMatchPatternToAddModList";
         case 10: return "rateMatchPatternToReleaseList";
         case 11: return "ssbSubcarrierSpacing";
         case 12: return "tdd-UL-DL-ConfigurationCommon";
         case 13: return "ss-PBCH-BlockPower";
         case 14: return "channelAccessMode-r16";
         case 15: return "discoveryBurstWindowLength-r16";
         case 16: return "ssb-PositionQCL-r16";
         case 17: return "highSpeedConfig-r16";
         case 18: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean physCellIdPresent = buffer.decodeBit ("physCellIdPresent");
      boolean downlinkConfigCommonPresent = buffer.decodeBit ("downlinkConfigCommonPresent");
      boolean uplinkConfigCommonPresent = buffer.decodeBit ("uplinkConfigCommonPresent");
      boolean supplementaryUplinkConfigPresent = buffer.decodeBit ("supplementaryUplinkConfigPresent");
      boolean n_TimingAdvanceOffsetPresent = buffer.decodeBit ("n_TimingAdvanceOffsetPresent");
      boolean ssb_PositionsInBurstPresent = buffer.decodeBit ("ssb_PositionsInBurstPresent");
      boolean ssb_periodicityServingCellPresent = buffer.decodeBit ("ssb_periodicityServingCellPresent");
      boolean lte_CRS_ToMatchAroundPresent = buffer.decodeBit ("lte_CRS_ToMatchAroundPresent");
      boolean rateMatchPatternToAddModListPresent = buffer.decodeBit ("rateMatchPatternToAddModListPresent");
      boolean rateMatchPatternToReleaseListPresent = buffer.decodeBit ("rateMatchPatternToReleaseListPresent");
      boolean ssbSubcarrierSpacingPresent = buffer.decodeBit ("ssbSubcarrierSpacingPresent");
      boolean tdd_UL_DL_ConfigurationCommonPresent = buffer.decodeBit ("tdd_UL_DL_ConfigurationCommonPresent");

      // decode physCellId

      if (physCellIdPresent) {
         buffer.getContext().eventDispatcher.startElement("physCellId", -1);

         physCellId = new PhysCellId();
         physCellId.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("physCellId", -1);
      }
      else {
         physCellId = null;
      }

      // decode downlinkConfigCommon

      if (downlinkConfigCommonPresent) {
         buffer.getContext().eventDispatcher.startElement("downlinkConfigCommon", -1);

         downlinkConfigCommon = new DownlinkConfigCommon();
         downlinkConfigCommon.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("downlinkConfigCommon", -1);
      }
      else {
         downlinkConfigCommon = null;
      }

      // decode uplinkConfigCommon

      if (uplinkConfigCommonPresent) {
         buffer.getContext().eventDispatcher.startElement("uplinkConfigCommon", -1);

         uplinkConfigCommon = new UplinkConfigCommon();
         uplinkConfigCommon.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("uplinkConfigCommon", -1);
      }
      else {
         uplinkConfigCommon = null;
      }

      // decode supplementaryUplinkConfig

      if (supplementaryUplinkConfigPresent) {
         buffer.getContext().eventDispatcher.startElement("supplementaryUplinkConfig", -1);

         supplementaryUplinkConfig = new UplinkConfigCommon();
         supplementaryUplinkConfig.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("supplementaryUplinkConfig", -1);
      }
      else {
         supplementaryUplinkConfig = null;
      }

      // decode n_TimingAdvanceOffset

      if (n_TimingAdvanceOffsetPresent) {
         buffer.getContext().eventDispatcher.startElement("n_TimingAdvanceOffset", -1);

         int tval = ServingCellConfigCommon_n_TimingAdvanceOffset.decodeEnumValue (buffer);
         n_TimingAdvanceOffset = ServingCellConfigCommon_n_TimingAdvanceOffset.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("n_TimingAdvanceOffset", -1);
      }
      else {
         n_TimingAdvanceOffset = null;
      }

      // decode ssb_PositionsInBurst

      if (ssb_PositionsInBurstPresent) {
         buffer.getContext().eventDispatcher.startElement("ssb_PositionsInBurst", -1);

         ssb_PositionsInBurst = new ServingCellConfigCommon_ssb_PositionsInBurst();
         ssb_PositionsInBurst.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ssb_PositionsInBurst", -1);
      }
      else {
         ssb_PositionsInBurst = null;
      }

      // decode ssb_periodicityServingCell

      if (ssb_periodicityServingCellPresent) {
         buffer.getContext().eventDispatcher.startElement("ssb_periodicityServingCell", -1);

         int tval = ServingCellConfigCommon_ssb_periodicityServingCell.decodeEnumValue (buffer);
         ssb_periodicityServingCell = ServingCellConfigCommon_ssb_periodicityServingCell.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("ssb_periodicityServingCell", -1);
      }
      else {
         ssb_periodicityServingCell = null;
      }

      // decode dmrs_TypeA_Position

      buffer.getContext().eventDispatcher.startElement("dmrs_TypeA_Position", -1);

      {
         int tval = ServingCellConfigCommon_dmrs_TypeA_Position.decodeEnumValue (buffer);
         dmrs_TypeA_Position = ServingCellConfigCommon_dmrs_TypeA_Position.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("dmrs_TypeA_Position", -1);

      // decode lte_CRS_ToMatchAround

      if (lte_CRS_ToMatchAroundPresent) {
         buffer.getContext().eventDispatcher.startElement("lte_CRS_ToMatchAround", -1);

         lte_CRS_ToMatchAround = new ServingCellConfigCommon_lte_CRS_ToMatchAround();
         lte_CRS_ToMatchAround.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("lte_CRS_ToMatchAround", -1);
      }
      else {
         lte_CRS_ToMatchAround = null;
      }

      // decode rateMatchPatternToAddModList

      if (rateMatchPatternToAddModListPresent) {
         buffer.getContext().eventDispatcher.startElement("rateMatchPatternToAddModList", -1);

         rateMatchPatternToAddModList = new ServingCellConfigCommon_rateMatchPatternToAddModList();
         rateMatchPatternToAddModList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("rateMatchPatternToAddModList", -1);
      }
      else {
         rateMatchPatternToAddModList = null;
      }

      // decode rateMatchPatternToReleaseList

      if (rateMatchPatternToReleaseListPresent) {
         buffer.getContext().eventDispatcher.startElement("rateMatchPatternToReleaseList", -1);

         rateMatchPatternToReleaseList = new ServingCellConfigCommon_rateMatchPatternToReleaseList();
         rateMatchPatternToReleaseList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("rateMatchPatternToReleaseList", -1);
      }
      else {
         rateMatchPatternToReleaseList = null;
      }

      // decode ssbSubcarrierSpacing

      if (ssbSubcarrierSpacingPresent) {
         buffer.getContext().eventDispatcher.startElement("ssbSubcarrierSpacing", -1);

         int tval = SubcarrierSpacing.decodeEnumValue (buffer);
         ssbSubcarrierSpacing = SubcarrierSpacing.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("ssbSubcarrierSpacing", -1);
      }
      else {
         ssbSubcarrierSpacing = null;
      }

      // decode tdd_UL_DL_ConfigurationCommon

      if (tdd_UL_DL_ConfigurationCommonPresent) {
         buffer.getContext().eventDispatcher.startElement("tdd_UL_DL_ConfigurationCommon", -1);

         tdd_UL_DL_ConfigurationCommon = new TDD_UL_DL_ConfigCommon();
         tdd_UL_DL_ConfigurationCommon.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("tdd_UL_DL_ConfigurationCommon", -1);
      }
      else {
         tdd_UL_DL_ConfigurationCommon = null;
      }

      // decode ss_PBCH_BlockPower

      buffer.getContext().eventDispatcher.startElement("ss_PBCH_BlockPower", -1);

      ss_PBCH_BlockPower = new Asn1Integer();
      ss_PBCH_BlockPower.decode (buffer, -60, 50);

      buffer.invokeCharacters(ss_PBCH_BlockPower.toString());
      buffer.getContext().eventDispatcher.endElement("ss_PBCH_BlockPower", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean channelAccessMode_r16Present = buffer.decodeBit ("channelAccessMode_r16Present");

            boolean discoveryBurstWindowLength_r16Present = buffer.decodeBit ("discoveryBurstWindowLength_r16Present");

            boolean ssb_PositionQCL_r16Present = buffer.decodeBit ("ssb_PositionQCL_r16Present");

            boolean highSpeedConfig_r16Present = buffer.decodeBit ("highSpeedConfig_r16Present");

            // decode channelAccessMode_r16

            if (channelAccessMode_r16Present) {
               buffer.getContext().eventDispatcher.startElement("channelAccessMode_r16", -1);

               channelAccessMode_r16 = new ServingCellConfigCommon_channelAccessMode_r16();
               channelAccessMode_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("channelAccessMode_r16", -1);
            }
            else {
               channelAccessMode_r16 = null;
            }

            // decode discoveryBurstWindowLength_r16

            if (discoveryBurstWindowLength_r16Present) {
               buffer.getContext().eventDispatcher.startElement("discoveryBurstWindowLength_r16", -1);

               int tval = ServingCellConfigCommon_discoveryBurstWindowLength_r16.decodeEnumValue (buffer);
               discoveryBurstWindowLength_r16 = ServingCellConfigCommon_discoveryBurstWindowLength_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("discoveryBurstWindowLength_r16", -1);
            }
            else {
               discoveryBurstWindowLength_r16 = null;
            }

            // decode ssb_PositionQCL_r16

            if (ssb_PositionQCL_r16Present) {
               buffer.getContext().eventDispatcher.startElement("ssb_PositionQCL_r16", -1);

               int tval = SSB_PositionQCL_Relation_r16.decodeEnumValue (buffer);
               ssb_PositionQCL_r16 = SSB_PositionQCL_Relation_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("ssb_PositionQCL_r16", -1);
            }
            else {
               ssb_PositionQCL_r16 = null;
            }

            // decode highSpeedConfig_r16

            if (highSpeedConfig_r16Present) {
               buffer.getContext().eventDispatcher.startElement("highSpeedConfig_r16", -1);

               highSpeedConfig_r16 = new HighSpeedConfig_r16();
               highSpeedConfig_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("highSpeedConfig_r16", -1);
            }
            else {
               highSpeedConfig_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (mV2ExtPresent ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((physCellId != null), null);
      buffer.encodeBit ((downlinkConfigCommon != null), null);
      buffer.encodeBit ((uplinkConfigCommon != null), null);
      buffer.encodeBit ((supplementaryUplinkConfig != null), null);
      buffer.encodeBit ((n_TimingAdvanceOffset != null), null);
      buffer.encodeBit ((ssb_PositionsInBurst != null), null);
      buffer.encodeBit ((ssb_periodicityServingCell != null), null);
      buffer.encodeBit ((lte_CRS_ToMatchAround != null), null);
      buffer.encodeBit ((rateMatchPatternToAddModList != null), null);
      buffer.encodeBit ((rateMatchPatternToReleaseList != null), null);
      buffer.encodeBit ((ssbSubcarrierSpacing != null), null);
      buffer.encodeBit ((tdd_UL_DL_ConfigurationCommon != null), null);

      // encode physCellId

      if (physCellId != null) {
         buffer.getContext().eventDispatcher.startElement("physCellId", -1);

         physCellId.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("physCellId", -1);
      }

      // encode downlinkConfigCommon

      if (downlinkConfigCommon != null) {
         buffer.getContext().eventDispatcher.startElement("downlinkConfigCommon", -1);

         downlinkConfigCommon.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("downlinkConfigCommon", -1);
      }

      // encode uplinkConfigCommon

      if (uplinkConfigCommon != null) {
         buffer.getContext().eventDispatcher.startElement("uplinkConfigCommon", -1);

         uplinkConfigCommon.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("uplinkConfigCommon", -1);
      }

      // encode supplementaryUplinkConfig

      if (supplementaryUplinkConfig != null) {
         buffer.getContext().eventDispatcher.startElement("supplementaryUplinkConfig", -1);

         supplementaryUplinkConfig.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("supplementaryUplinkConfig", -1);
      }

      // encode n_TimingAdvanceOffset

      if (n_TimingAdvanceOffset != null) {
         buffer.getContext().eventDispatcher.startElement("n_TimingAdvanceOffset", -1);

         n_TimingAdvanceOffset.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("n_TimingAdvanceOffset", -1);
      }

      // encode ssb_PositionsInBurst

      if (ssb_PositionsInBurst != null) {
         buffer.getContext().eventDispatcher.startElement("ssb_PositionsInBurst", -1);

         ssb_PositionsInBurst.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ssb_PositionsInBurst", -1);
      }

      // encode ssb_periodicityServingCell

      if (ssb_periodicityServingCell != null) {
         buffer.getContext().eventDispatcher.startElement("ssb_periodicityServingCell", -1);

         ssb_periodicityServingCell.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ssb_periodicityServingCell", -1);
      }

      // encode dmrs_TypeA_Position

      if (dmrs_TypeA_Position != null) {
         buffer.getContext().eventDispatcher.startElement("dmrs_TypeA_Position", -1);

         dmrs_TypeA_Position.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("dmrs_TypeA_Position", -1);
      }
      else throw new Asn1MissingRequiredException ("dmrs_TypeA_Position");

      // encode lte_CRS_ToMatchAround

      if (lte_CRS_ToMatchAround != null) {
         buffer.getContext().eventDispatcher.startElement("lte_CRS_ToMatchAround", -1);

         lte_CRS_ToMatchAround.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("lte_CRS_ToMatchAround", -1);
      }

      // encode rateMatchPatternToAddModList

      if (rateMatchPatternToAddModList != null) {
         buffer.getContext().eventDispatcher.startElement("rateMatchPatternToAddModList", -1);

         rateMatchPatternToAddModList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("rateMatchPatternToAddModList", -1);
      }

      // encode rateMatchPatternToReleaseList

      if (rateMatchPatternToReleaseList != null) {
         buffer.getContext().eventDispatcher.startElement("rateMatchPatternToReleaseList", -1);

         rateMatchPatternToReleaseList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("rateMatchPatternToReleaseList", -1);
      }

      // encode ssbSubcarrierSpacing

      if (ssbSubcarrierSpacing != null) {
         buffer.getContext().eventDispatcher.startElement("ssbSubcarrierSpacing", -1);

         ssbSubcarrierSpacing.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ssbSubcarrierSpacing", -1);
      }

      // encode tdd_UL_DL_ConfigurationCommon

      if (tdd_UL_DL_ConfigurationCommon != null) {
         buffer.getContext().eventDispatcher.startElement("tdd_UL_DL_ConfigurationCommon", -1);

         tdd_UL_DL_ConfigurationCommon.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("tdd_UL_DL_ConfigurationCommon", -1);
      }

      // encode ss_PBCH_BlockPower

      if (ss_PBCH_BlockPower != null) {
         buffer.getContext().eventDispatcher.startElement("ss_PBCH_BlockPower", -1);

         ss_PBCH_BlockPower.encode (buffer, -60, 50);

         buffer.getContext().eventDispatcher.endElement("ss_PBCH_BlockPower", -1);
      }
      else throw new Asn1MissingRequiredException ("ss_PBCH_BlockPower");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 1;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit (mV2ExtPresent, null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         if (mV2ExtPresent) {
            buffer.reset();
            buffer.encodeBit ((channelAccessMode_r16 != null), "optbit");
            buffer.encodeBit ((discoveryBurstWindowLength_r16 != null), "optbit");
            buffer.encodeBit ((ssb_PositionQCL_r16 != null), "optbit");
            buffer.encodeBit ((highSpeedConfig_r16 != null), "optbit");
            if (channelAccessMode_r16 != null) {
               channelAccessMode_r16.encode (buffer);
            }
            if (discoveryBurstWindowLength_r16 != null) {
               discoveryBurstWindowLength_r16.encode (buffer);
            }
            if (ssb_PositionQCL_r16 != null) {
               ssb_PositionQCL_r16.encode (buffer);
            }
            if (highSpeedConfig_r16 != null) {
               highSpeedConfig_r16.encode (buffer);
            }
            mainBuffer.encodeOpenType (buffer, null);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (physCellId != null) physCellId.print (_sb, "physCellId", _level+1);
      if (downlinkConfigCommon != null) downlinkConfigCommon.print (_sb, "downlinkConfigCommon", _level+1);
      if (uplinkConfigCommon != null) uplinkConfigCommon.print (_sb, "uplinkConfigCommon", _level+1);
      if (supplementaryUplinkConfig != null) supplementaryUplinkConfig.print (_sb, "supplementaryUplinkConfig", _level+1);
      if (n_TimingAdvanceOffset != null) n_TimingAdvanceOffset.print (_sb, "n_TimingAdvanceOffset", _level+1);
      if (ssb_PositionsInBurst != null) ssb_PositionsInBurst.print (_sb, "ssb_PositionsInBurst", _level+1);
      if (ssb_periodicityServingCell != null) ssb_periodicityServingCell.print (_sb, "ssb_periodicityServingCell", _level+1);
      if (dmrs_TypeA_Position != null) dmrs_TypeA_Position.print (_sb, "dmrs_TypeA_Position", _level+1);
      if (lte_CRS_ToMatchAround != null) lte_CRS_ToMatchAround.print (_sb, "lte_CRS_ToMatchAround", _level+1);
      if (rateMatchPatternToAddModList != null) rateMatchPatternToAddModList.print (_sb, "rateMatchPatternToAddModList", _level+1);
      if (rateMatchPatternToReleaseList != null) rateMatchPatternToReleaseList.print (_sb, "rateMatchPatternToReleaseList", _level+1);
      if (ssbSubcarrierSpacing != null) ssbSubcarrierSpacing.print (_sb, "ssbSubcarrierSpacing", _level+1);
      if (tdd_UL_DL_ConfigurationCommon != null) tdd_UL_DL_ConfigurationCommon.print (_sb, "tdd_UL_DL_ConfigurationCommon", _level+1);
      if (ss_PBCH_BlockPower != null) ss_PBCH_BlockPower.print (_sb, "ss_PBCH_BlockPower", _level+1);
      if (channelAccessMode_r16 != null) channelAccessMode_r16.print (_sb, "channelAccessMode_r16", _level+1);
      if (discoveryBurstWindowLength_r16 != null) discoveryBurstWindowLength_r16.print (_sb, "discoveryBurstWindowLength_r16", _level+1);
      if (ssb_PositionQCL_r16 != null) ssb_PositionQCL_r16.print (_sb, "ssb_PositionQCL_r16", _level+1);
      if (highSpeedConfig_r16 != null) highSpeedConfig_r16.print (_sb, "highSpeedConfig_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
