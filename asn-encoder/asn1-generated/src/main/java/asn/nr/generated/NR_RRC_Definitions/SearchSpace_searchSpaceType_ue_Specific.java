/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SearchSpace_searchSpaceType_ue_Specific extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public SearchSpace_searchSpaceType_ue_Specific_dci_Formats dci_Formats = null;
   public boolean mV2ExtPresent;
   public SearchSpace_searchSpaceType_ue_Specific_dci_Formats_MT_r16 dci_Formats_MT_r16 = null;  // optional
   public SearchSpace_searchSpaceType_ue_Specific_dci_FormatsSL_r16 dci_FormatsSL_r16 = null;  // optional
   public SearchSpace_searchSpaceType_ue_Specific_dci_FormatsExt_r16 dci_FormatsExt_r16 = null;  // optional
   public Asn1OpenExt extElem1;

   public SearchSpace_searchSpaceType_ue_Specific () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SearchSpace_searchSpaceType_ue_Specific (
      SearchSpace_searchSpaceType_ue_Specific_dci_Formats dci_Formats_,
      SearchSpace_searchSpaceType_ue_Specific_dci_Formats_MT_r16 dci_Formats_MT_r16_,
      SearchSpace_searchSpaceType_ue_Specific_dci_FormatsSL_r16 dci_FormatsSL_r16_,
      SearchSpace_searchSpaceType_ue_Specific_dci_FormatsExt_r16 dci_FormatsExt_r16_
   ) {
      super();
      dci_Formats = dci_Formats_;
      dci_Formats_MT_r16 = dci_Formats_MT_r16_;
      dci_FormatsSL_r16 = dci_FormatsSL_r16_;
      dci_FormatsExt_r16 = dci_FormatsExt_r16_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SearchSpace_searchSpaceType_ue_Specific (
      SearchSpace_searchSpaceType_ue_Specific_dci_Formats dci_Formats_
   ) {
      super();
      dci_Formats = dci_Formats_;
   }

   public void init () {
      dci_Formats = null;
      dci_Formats_MT_r16 = null;
      dci_FormatsSL_r16 = null;
      dci_FormatsExt_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return dci_Formats;
         case 1: return dci_Formats_MT_r16;
         case 2: return dci_FormatsSL_r16;
         case 3: return dci_FormatsExt_r16;
         case 4: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "dci-Formats";
         case 1: return "dci-Formats-MT-r16";
         case 2: return "dci-FormatsSL-r16";
         case 3: return "dci-FormatsExt-r16";
         case 4: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      // decode dci_Formats

      buffer.getContext().eventDispatcher.startElement("dci_Formats", -1);

      {
         int tval = SearchSpace_searchSpaceType_ue_Specific_dci_Formats.decodeEnumValue (buffer);
         dci_Formats = SearchSpace_searchSpaceType_ue_Specific_dci_Formats.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("dci_Formats", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean dci_Formats_MT_r16Present = buffer.decodeBit ("dci_Formats_MT_r16Present");

            boolean dci_FormatsSL_r16Present = buffer.decodeBit ("dci_FormatsSL_r16Present");

            boolean dci_FormatsExt_r16Present = buffer.decodeBit ("dci_FormatsExt_r16Present");

            // decode dci_Formats_MT_r16

            if (dci_Formats_MT_r16Present) {
               buffer.getContext().eventDispatcher.startElement("dci_Formats_MT_r16", -1);

               int tval = SearchSpace_searchSpaceType_ue_Specific_dci_Formats_MT_r16.decodeEnumValue (buffer);
               dci_Formats_MT_r16 = SearchSpace_searchSpaceType_ue_Specific_dci_Formats_MT_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("dci_Formats_MT_r16", -1);
            }
            else {
               dci_Formats_MT_r16 = null;
            }

            // decode dci_FormatsSL_r16

            if (dci_FormatsSL_r16Present) {
               buffer.getContext().eventDispatcher.startElement("dci_FormatsSL_r16", -1);

               int tval = SearchSpace_searchSpaceType_ue_Specific_dci_FormatsSL_r16.decodeEnumValue (buffer);
               dci_FormatsSL_r16 = SearchSpace_searchSpaceType_ue_Specific_dci_FormatsSL_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("dci_FormatsSL_r16", -1);
            }
            else {
               dci_FormatsSL_r16 = null;
            }

            // decode dci_FormatsExt_r16

            if (dci_FormatsExt_r16Present) {
               buffer.getContext().eventDispatcher.startElement("dci_FormatsExt_r16", -1);

               int tval = SearchSpace_searchSpaceType_ue_Specific_dci_FormatsExt_r16.decodeEnumValue (buffer);
               dci_FormatsExt_r16 = SearchSpace_searchSpaceType_ue_Specific_dci_FormatsExt_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("dci_FormatsExt_r16", -1);
            }
            else {
               dci_FormatsExt_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (mV2ExtPresent ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode dci_Formats

      if (dci_Formats != null) {
         buffer.getContext().eventDispatcher.startElement("dci_Formats", -1);

         dci_Formats.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("dci_Formats", -1);
      }
      else throw new Asn1MissingRequiredException ("dci_Formats");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 1;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit (mV2ExtPresent, null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         if (mV2ExtPresent) {
            buffer.reset();
            buffer.encodeBit ((dci_Formats_MT_r16 != null), "optbit");
            buffer.encodeBit ((dci_FormatsSL_r16 != null), "optbit");
            buffer.encodeBit ((dci_FormatsExt_r16 != null), "optbit");
            if (dci_Formats_MT_r16 != null) {
               dci_Formats_MT_r16.encode (buffer);
            }
            if (dci_FormatsSL_r16 != null) {
               dci_FormatsSL_r16.encode (buffer);
            }
            if (dci_FormatsExt_r16 != null) {
               dci_FormatsExt_r16.encode (buffer);
            }
            mainBuffer.encodeOpenType (buffer, null);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (dci_Formats != null) dci_Formats.print (_sb, "dci_Formats", _level+1);
      if (dci_Formats_MT_r16 != null) dci_Formats_MT_r16.print (_sb, "dci_Formats_MT_r16", _level+1);
      if (dci_FormatsSL_r16 != null) dci_FormatsSL_r16.print (_sb, "dci_FormatsSL_r16", _level+1);
      if (dci_FormatsExt_r16 != null) dci_FormatsExt_r16.print (_sb, "dci_FormatsExt_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
