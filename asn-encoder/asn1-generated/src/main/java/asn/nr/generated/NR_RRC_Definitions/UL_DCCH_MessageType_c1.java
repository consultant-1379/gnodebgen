/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class UL_DCCH_MessageType_c1 extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CHOICE";
   }

   // Choice element identifier constants
   public final static byte _MEASUREMENTREPORT = 1;
   public final static byte _RRCRECONFIGURATIONCOMPLETE = 2;
   public final static byte _RRCSETUPCOMPLETE = 3;
   public final static byte _RRCREESTABLISHMENTCOMPLETE = 4;
   public final static byte _RRCRESUMECOMPLETE = 5;
   public final static byte _SECURITYMODECOMPLETE = 6;
   public final static byte _SECURITYMODEFAILURE = 7;
   public final static byte _ULINFORMATIONTRANSFER = 8;
   public final static byte _LOCATIONMEASUREMENTINDICATION = 9;
   public final static byte _UECAPABILITYINFORMATION = 10;
   public final static byte _COUNTERCHECKRESPONSE = 11;
   public final static byte _UEASSISTANCEINFORMATION = 12;
   public final static byte _FAILUREINFORMATION = 13;
   public final static byte _ULINFORMATIONTRANSFERMRDC = 14;
   public final static byte _SCGFAILUREINFORMATION = 15;
   public final static byte _SCGFAILUREINFORMATIONEUTRA = 16;

   public UL_DCCH_MessageType_c1 () {
      super();
   }

   public UL_DCCH_MessageType_c1 (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _MEASUREMENTREPORT: return "measurementReport";
      case _RRCRECONFIGURATIONCOMPLETE: return "rrcReconfigurationComplete";
      case _RRCSETUPCOMPLETE: return "rrcSetupComplete";
      case _RRCREESTABLISHMENTCOMPLETE: return "rrcReestablishmentComplete";
      case _RRCRESUMECOMPLETE: return "rrcResumeComplete";
      case _SECURITYMODECOMPLETE: return "securityModeComplete";
      case _SECURITYMODEFAILURE: return "securityModeFailure";
      case _ULINFORMATIONTRANSFER: return "ulInformationTransfer";
      case _LOCATIONMEASUREMENTINDICATION: return "locationMeasurementIndication";
      case _UECAPABILITYINFORMATION: return "ueCapabilityInformation";
      case _COUNTERCHECKRESPONSE: return "counterCheckResponse";
      case _UEASSISTANCEINFORMATION: return "ueAssistanceInformation";
      case _FAILUREINFORMATION: return "failureInformation";
      case _ULINFORMATIONTRANSFERMRDC: return "ulInformationTransferMRDC";
      case _SCGFAILUREINFORMATION: return "scgFailureInformation";
      case _SCGFAILUREINFORMATIONEUTRA: return "scgFailureInformationEUTRA";
      default: return "UNDEFINED";
      }
   }

   public void set_measurementReport (MeasurementReport value) {
      setElement (_MEASUREMENTREPORT, value);
   }

   public void set_rrcReconfigurationComplete (RRCReconfigurationComplete value) {
      setElement (_RRCRECONFIGURATIONCOMPLETE, value);
   }

   public void set_rrcSetupComplete (RRCSetupComplete value) {
      setElement (_RRCSETUPCOMPLETE, value);
   }

   public void set_rrcReestablishmentComplete (RRCReestablishmentComplete value) {
      setElement (_RRCREESTABLISHMENTCOMPLETE, value);
   }

   public void set_rrcResumeComplete (RRCResumeComplete value) {
      setElement (_RRCRESUMECOMPLETE, value);
   }

   public void set_securityModeComplete (SecurityModeComplete value) {
      setElement (_SECURITYMODECOMPLETE, value);
   }

   public void set_securityModeFailure (SecurityModeFailure value) {
      setElement (_SECURITYMODEFAILURE, value);
   }

   public void set_ulInformationTransfer (ULInformationTransfer value) {
      setElement (_ULINFORMATIONTRANSFER, value);
   }

   public void set_locationMeasurementIndication (LocationMeasurementIndication value) {
      setElement (_LOCATIONMEASUREMENTINDICATION, value);
   }

   public void set_ueCapabilityInformation (UECapabilityInformation value) {
      setElement (_UECAPABILITYINFORMATION, value);
   }

   public void set_counterCheckResponse (CounterCheckResponse value) {
      setElement (_COUNTERCHECKRESPONSE, value);
   }

   public void set_ueAssistanceInformation (UEAssistanceInformation value) {
      setElement (_UEASSISTANCEINFORMATION, value);
   }

   public void set_failureInformation (FailureInformation value) {
      setElement (_FAILUREINFORMATION, value);
   }

   public void set_ulInformationTransferMRDC (ULInformationTransferMRDC value) {
      setElement (_ULINFORMATIONTRANSFERMRDC, value);
   }

   public void set_scgFailureInformation (SCGFailureInformation value) {
      setElement (_SCGFAILUREINFORMATION, value);
   }

   public void set_scgFailureInformationEUTRA (SCGFailureInformationEUTRA value) {
      setElement (_SCGFAILUREINFORMATIONEUTRA, value);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int idx = (int) buffer.decodeConsWholeNumber (16, "index");
      choiceID = idx + 1;
      buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

      switch (idx) {
         // measurementReport
         case 0: { 
            MeasurementReport measurementReport;
            element = measurementReport = new MeasurementReport();
            measurementReport.decode (buffer);
            break;
         }

         // rrcReconfigurationComplete
         case 1: { 
            RRCReconfigurationComplete rrcReconfigurationComplete;
            element = rrcReconfigurationComplete = new RRCReconfigurationComplete();
            rrcReconfigurationComplete.decode (buffer);
            break;
         }

         // rrcSetupComplete
         case 2: { 
            RRCSetupComplete rrcSetupComplete;
            element = rrcSetupComplete = new RRCSetupComplete();
            rrcSetupComplete.decode (buffer);
            break;
         }

         // rrcReestablishmentComplete
         case 3: { 
            RRCReestablishmentComplete rrcReestablishmentComplete;
            element = rrcReestablishmentComplete = new RRCReestablishmentComplete();
            rrcReestablishmentComplete.decode (buffer);
            break;
         }

         // rrcResumeComplete
         case 4: { 
            RRCResumeComplete rrcResumeComplete;
            element = rrcResumeComplete = new RRCResumeComplete();
            rrcResumeComplete.decode (buffer);
            break;
         }

         // securityModeComplete
         case 5: { 
            SecurityModeComplete securityModeComplete;
            element = securityModeComplete = new SecurityModeComplete();
            securityModeComplete.decode (buffer);
            break;
         }

         // securityModeFailure
         case 6: { 
            SecurityModeFailure securityModeFailure;
            element = securityModeFailure = new SecurityModeFailure();
            securityModeFailure.decode (buffer);
            break;
         }

         // ulInformationTransfer
         case 7: { 
            ULInformationTransfer ulInformationTransfer;
            element = ulInformationTransfer = new ULInformationTransfer();
            ulInformationTransfer.decode (buffer);
            break;
         }

         // locationMeasurementIndication
         case 8: { 
            LocationMeasurementIndication locationMeasurementIndication;
            element = locationMeasurementIndication = new LocationMeasurementIndication();
            locationMeasurementIndication.decode (buffer);
            break;
         }

         // ueCapabilityInformation
         case 9: { 
            UECapabilityInformation ueCapabilityInformation;
            element = ueCapabilityInformation = new UECapabilityInformation();
            ueCapabilityInformation.decode (buffer);
            break;
         }

         // counterCheckResponse
         case 10: { 
            CounterCheckResponse counterCheckResponse;
            element = counterCheckResponse = new CounterCheckResponse();
            counterCheckResponse.decode (buffer);
            break;
         }

         // ueAssistanceInformation
         case 11: { 
            UEAssistanceInformation ueAssistanceInformation;
            element = ueAssistanceInformation = new UEAssistanceInformation();
            ueAssistanceInformation.decode (buffer);
            break;
         }

         // failureInformation
         case 12: { 
            FailureInformation failureInformation;
            element = failureInformation = new FailureInformation();
            failureInformation.decode (buffer);
            break;
         }

         // ulInformationTransferMRDC
         case 13: { 
            ULInformationTransferMRDC ulInformationTransferMRDC;
            element = ulInformationTransferMRDC = new ULInformationTransferMRDC();
            ulInformationTransferMRDC.decode (buffer);
            break;
         }

         // scgFailureInformation
         case 14: { 
            SCGFailureInformation scgFailureInformation;
            element = scgFailureInformation = new SCGFailureInformation();
            scgFailureInformation.decode (buffer);
            break;
         }

         // scgFailureInformationEUTRA
         case 15: { 
            SCGFailureInformationEUTRA scgFailureInformationEUTRA;
            element = scgFailureInformationEUTRA = new SCGFailureInformationEUTRA();
            scgFailureInformationEUTRA.decode (buffer);
            break;
         }

         default:
         throw new Asn1InvalidChoiceOptionException (buffer, idx);
      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // Encode choice index value

      buffer.encodeConsWholeNumber (choiceID - 1, 16, "index");

      buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

      switch (choiceID) {
         // measurementReport
         case _MEASUREMENTREPORT:
            MeasurementReport measurementReport = (MeasurementReport) element;
            measurementReport.encode (buffer);
            break;

         // rrcReconfigurationComplete
         case _RRCRECONFIGURATIONCOMPLETE:
            RRCReconfigurationComplete rrcReconfigurationComplete = (RRCReconfigurationComplete) element;
            rrcReconfigurationComplete.encode (buffer);
            break;

         // rrcSetupComplete
         case _RRCSETUPCOMPLETE:
            RRCSetupComplete rrcSetupComplete = (RRCSetupComplete) element;
            rrcSetupComplete.encode (buffer);
            break;

         // rrcReestablishmentComplete
         case _RRCREESTABLISHMENTCOMPLETE:
            RRCReestablishmentComplete rrcReestablishmentComplete = (RRCReestablishmentComplete) element;
            rrcReestablishmentComplete.encode (buffer);
            break;

         // rrcResumeComplete
         case _RRCRESUMECOMPLETE:
            RRCResumeComplete rrcResumeComplete = (RRCResumeComplete) element;
            rrcResumeComplete.encode (buffer);
            break;

         // securityModeComplete
         case _SECURITYMODECOMPLETE:
            SecurityModeComplete securityModeComplete = (SecurityModeComplete) element;
            securityModeComplete.encode (buffer);
            break;

         // securityModeFailure
         case _SECURITYMODEFAILURE:
            SecurityModeFailure securityModeFailure = (SecurityModeFailure) element;
            securityModeFailure.encode (buffer);
            break;

         // ulInformationTransfer
         case _ULINFORMATIONTRANSFER:
            ULInformationTransfer ulInformationTransfer = (ULInformationTransfer) element;
            ulInformationTransfer.encode (buffer);
            break;

         // locationMeasurementIndication
         case _LOCATIONMEASUREMENTINDICATION:
            LocationMeasurementIndication locationMeasurementIndication = (LocationMeasurementIndication) element;
            locationMeasurementIndication.encode (buffer);
            break;

         // ueCapabilityInformation
         case _UECAPABILITYINFORMATION:
            UECapabilityInformation ueCapabilityInformation = (UECapabilityInformation) element;
            ueCapabilityInformation.encode (buffer);
            break;

         // counterCheckResponse
         case _COUNTERCHECKRESPONSE:
            CounterCheckResponse counterCheckResponse = (CounterCheckResponse) element;
            counterCheckResponse.encode (buffer);
            break;

         // ueAssistanceInformation
         case _UEASSISTANCEINFORMATION:
            UEAssistanceInformation ueAssistanceInformation = (UEAssistanceInformation) element;
            ueAssistanceInformation.encode (buffer);
            break;

         // failureInformation
         case _FAILUREINFORMATION:
            FailureInformation failureInformation = (FailureInformation) element;
            failureInformation.encode (buffer);
            break;

         // ulInformationTransferMRDC
         case _ULINFORMATIONTRANSFERMRDC:
            ULInformationTransferMRDC ulInformationTransferMRDC = (ULInformationTransferMRDC) element;
            ulInformationTransferMRDC.encode (buffer);
            break;

         // scgFailureInformation
         case _SCGFAILUREINFORMATION:
            SCGFailureInformation scgFailureInformation = (SCGFailureInformation) element;
            scgFailureInformation.encode (buffer);
            break;

         // scgFailureInformationEUTRA
         case _SCGFAILUREINFORMATIONEUTRA:
            SCGFailureInformationEUTRA scgFailureInformationEUTRA = (SCGFailureInformationEUTRA) element;
            scgFailureInformationEUTRA.encode (buffer);
            break;

         default:
         throw new Asn1InvalidChoiceOptionException();
      }

      buffer.getContext().eventDispatcher.endElement("getElemName()", -1);
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (element != null) {
         element.print (_sb, getElemName(), _level+1);
      }
      indent (_sb, _level);
      _sb.append("}\n");
   }

}
