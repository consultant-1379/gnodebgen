/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class Q_OffsetRangeList extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "Q-OffsetRangeList";
   }

   public Q_OffsetRange rsrpOffsetSSB = null;  // default = Q_OffsetRange.dB0()
   public Q_OffsetRange rsrqOffsetSSB = null;  // default = Q_OffsetRange.dB0()
   public Q_OffsetRange sinrOffsetSSB = null;  // default = Q_OffsetRange.dB0()
   public Q_OffsetRange rsrpOffsetCSI_RS = null;  // default = Q_OffsetRange.dB0()
   public Q_OffsetRange rsrqOffsetCSI_RS = null;  // default = Q_OffsetRange.dB0()
   public Q_OffsetRange sinrOffsetCSI_RS = null;  // default = Q_OffsetRange.dB0()

   public Q_OffsetRangeList () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public Q_OffsetRangeList (
      Q_OffsetRange rsrpOffsetSSB_,
      Q_OffsetRange rsrqOffsetSSB_,
      Q_OffsetRange sinrOffsetSSB_,
      Q_OffsetRange rsrpOffsetCSI_RS_,
      Q_OffsetRange rsrqOffsetCSI_RS_,
      Q_OffsetRange sinrOffsetCSI_RS_
   ) {
      super();
      rsrpOffsetSSB = rsrpOffsetSSB_;
      rsrqOffsetSSB = rsrqOffsetSSB_;
      sinrOffsetSSB = sinrOffsetSSB_;
      rsrpOffsetCSI_RS = rsrpOffsetCSI_RS_;
      rsrqOffsetCSI_RS = rsrqOffsetCSI_RS_;
      sinrOffsetCSI_RS = sinrOffsetCSI_RS_;
   }

   public void init () {
      rsrpOffsetSSB = Q_OffsetRange.dB0();
      rsrqOffsetSSB = Q_OffsetRange.dB0();
      sinrOffsetSSB = Q_OffsetRange.dB0();
      rsrpOffsetCSI_RS = Q_OffsetRange.dB0();
      rsrqOffsetCSI_RS = Q_OffsetRange.dB0();
      sinrOffsetCSI_RS = Q_OffsetRange.dB0();
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return rsrpOffsetSSB;
         case 1: return rsrqOffsetSSB;
         case 2: return sinrOffsetSSB;
         case 3: return rsrpOffsetCSI_RS;
         case 4: return rsrqOffsetCSI_RS;
         case 5: return sinrOffsetCSI_RS;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "rsrpOffsetSSB";
         case 1: return "rsrqOffsetSSB";
         case 2: return "sinrOffsetSSB";
         case 3: return "rsrpOffsetCSI-RS";
         case 4: return "rsrqOffsetCSI-RS";
         case 5: return "sinrOffsetCSI-RS";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean rsrpOffsetSSBPresent = buffer.decodeBit ("rsrpOffsetSSBPresent");
      boolean rsrqOffsetSSBPresent = buffer.decodeBit ("rsrqOffsetSSBPresent");
      boolean sinrOffsetSSBPresent = buffer.decodeBit ("sinrOffsetSSBPresent");
      boolean rsrpOffsetCSI_RSPresent = buffer.decodeBit ("rsrpOffsetCSI_RSPresent");
      boolean rsrqOffsetCSI_RSPresent = buffer.decodeBit ("rsrqOffsetCSI_RSPresent");
      boolean sinrOffsetCSI_RSPresent = buffer.decodeBit ("sinrOffsetCSI_RSPresent");

      // decode rsrpOffsetSSB

      if (rsrpOffsetSSBPresent) {
         buffer.getContext().eventDispatcher.startElement("rsrpOffsetSSB", -1);

         int tval = Q_OffsetRange.decodeEnumValue (buffer);
         rsrpOffsetSSB = Q_OffsetRange.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("rsrpOffsetSSB", -1);
      }
      else {
         rsrpOffsetSSB = Q_OffsetRange.dB0();
      }

      // decode rsrqOffsetSSB

      if (rsrqOffsetSSBPresent) {
         buffer.getContext().eventDispatcher.startElement("rsrqOffsetSSB", -1);

         int tval = Q_OffsetRange.decodeEnumValue (buffer);
         rsrqOffsetSSB = Q_OffsetRange.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("rsrqOffsetSSB", -1);
      }
      else {
         rsrqOffsetSSB = Q_OffsetRange.dB0();
      }

      // decode sinrOffsetSSB

      if (sinrOffsetSSBPresent) {
         buffer.getContext().eventDispatcher.startElement("sinrOffsetSSB", -1);

         int tval = Q_OffsetRange.decodeEnumValue (buffer);
         sinrOffsetSSB = Q_OffsetRange.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("sinrOffsetSSB", -1);
      }
      else {
         sinrOffsetSSB = Q_OffsetRange.dB0();
      }

      // decode rsrpOffsetCSI_RS

      if (rsrpOffsetCSI_RSPresent) {
         buffer.getContext().eventDispatcher.startElement("rsrpOffsetCSI_RS", -1);

         int tval = Q_OffsetRange.decodeEnumValue (buffer);
         rsrpOffsetCSI_RS = Q_OffsetRange.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("rsrpOffsetCSI_RS", -1);
      }
      else {
         rsrpOffsetCSI_RS = Q_OffsetRange.dB0();
      }

      // decode rsrqOffsetCSI_RS

      if (rsrqOffsetCSI_RSPresent) {
         buffer.getContext().eventDispatcher.startElement("rsrqOffsetCSI_RS", -1);

         int tval = Q_OffsetRange.decodeEnumValue (buffer);
         rsrqOffsetCSI_RS = Q_OffsetRange.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("rsrqOffsetCSI_RS", -1);
      }
      else {
         rsrqOffsetCSI_RS = Q_OffsetRange.dB0();
      }

      // decode sinrOffsetCSI_RS

      if (sinrOffsetCSI_RSPresent) {
         buffer.getContext().eventDispatcher.startElement("sinrOffsetCSI_RS", -1);

         int tval = Q_OffsetRange.decodeEnumValue (buffer);
         sinrOffsetCSI_RS = Q_OffsetRange.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("sinrOffsetCSI_RS", -1);
      }
      else {
         sinrOffsetCSI_RS = Q_OffsetRange.dB0();
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((!rsrpOffsetSSB.equals (Q_OffsetRange.dB0())), null);
      buffer.encodeBit ((!rsrqOffsetSSB.equals (Q_OffsetRange.dB0())), null);
      buffer.encodeBit ((!sinrOffsetSSB.equals (Q_OffsetRange.dB0())), null);
      buffer.encodeBit ((!rsrpOffsetCSI_RS.equals (Q_OffsetRange.dB0())), null);
      buffer.encodeBit ((!rsrqOffsetCSI_RS.equals (Q_OffsetRange.dB0())), null);
      buffer.encodeBit ((!sinrOffsetCSI_RS.equals (Q_OffsetRange.dB0())), null);

      // encode rsrpOffsetSSB

      if (rsrpOffsetSSB != null) {
         if (!rsrpOffsetSSB.equals (Q_OffsetRange.dB0())) {
            buffer.getContext().eventDispatcher.startElement("rsrpOffsetSSB", -1);

            rsrpOffsetSSB.encode (buffer);

            buffer.getContext().eventDispatcher.endElement("rsrpOffsetSSB", -1);
         }
      }

      // encode rsrqOffsetSSB

      if (rsrqOffsetSSB != null) {
         if (!rsrqOffsetSSB.equals (Q_OffsetRange.dB0())) {
            buffer.getContext().eventDispatcher.startElement("rsrqOffsetSSB", -1);

            rsrqOffsetSSB.encode (buffer);

            buffer.getContext().eventDispatcher.endElement("rsrqOffsetSSB", -1);
         }
      }

      // encode sinrOffsetSSB

      if (sinrOffsetSSB != null) {
         if (!sinrOffsetSSB.equals (Q_OffsetRange.dB0())) {
            buffer.getContext().eventDispatcher.startElement("sinrOffsetSSB", -1);

            sinrOffsetSSB.encode (buffer);

            buffer.getContext().eventDispatcher.endElement("sinrOffsetSSB", -1);
         }
      }

      // encode rsrpOffsetCSI_RS

      if (rsrpOffsetCSI_RS != null) {
         if (!rsrpOffsetCSI_RS.equals (Q_OffsetRange.dB0())) {
            buffer.getContext().eventDispatcher.startElement("rsrpOffsetCSI_RS", -1);

            rsrpOffsetCSI_RS.encode (buffer);

            buffer.getContext().eventDispatcher.endElement("rsrpOffsetCSI_RS", -1);
         }
      }

      // encode rsrqOffsetCSI_RS

      if (rsrqOffsetCSI_RS != null) {
         if (!rsrqOffsetCSI_RS.equals (Q_OffsetRange.dB0())) {
            buffer.getContext().eventDispatcher.startElement("rsrqOffsetCSI_RS", -1);

            rsrqOffsetCSI_RS.encode (buffer);

            buffer.getContext().eventDispatcher.endElement("rsrqOffsetCSI_RS", -1);
         }
      }

      // encode sinrOffsetCSI_RS

      if (sinrOffsetCSI_RS != null) {
         if (!sinrOffsetCSI_RS.equals (Q_OffsetRange.dB0())) {
            buffer.getContext().eventDispatcher.startElement("sinrOffsetCSI_RS", -1);

            sinrOffsetCSI_RS.encode (buffer);

            buffer.getContext().eventDispatcher.endElement("sinrOffsetCSI_RS", -1);
         }
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (rsrpOffsetSSB != null) rsrpOffsetSSB.print (_sb, "rsrpOffsetSSB", _level+1);
      if (rsrqOffsetSSB != null) rsrqOffsetSSB.print (_sb, "rsrqOffsetSSB", _level+1);
      if (sinrOffsetSSB != null) sinrOffsetSSB.print (_sb, "sinrOffsetSSB", _level+1);
      if (rsrpOffsetCSI_RS != null) rsrpOffsetCSI_RS.print (_sb, "rsrpOffsetCSI_RS", _level+1);
      if (rsrqOffsetCSI_RS != null) rsrqOffsetCSI_RS.print (_sb, "rsrqOffsetCSI_RS", _level+1);
      if (sinrOffsetCSI_RS != null) sinrOffsetCSI_RS.print (_sb, "sinrOffsetCSI_RS", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
