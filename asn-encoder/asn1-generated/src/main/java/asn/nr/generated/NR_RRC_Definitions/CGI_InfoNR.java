/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class CGI_InfoNR extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CGI-InfoNR";
   }

   public PLMN_IdentityInfoList plmn_IdentityInfoList;  // optional
   public MultiFrequencyBandListNR frequencyBandList;  // optional
   public CGI_InfoNR_noSIB1 noSIB1;  // optional
   public boolean mV2ExtPresent;
   public NPN_IdentityInfoList_r16 npn_IdentityInfoList_r16;  // optional
   public Asn1OpenExt extElem1;

   public CGI_InfoNR () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CGI_InfoNR (
      PLMN_IdentityInfoList plmn_IdentityInfoList_,
      MultiFrequencyBandListNR frequencyBandList_,
      CGI_InfoNR_noSIB1 noSIB1_,
      NPN_IdentityInfoList_r16 npn_IdentityInfoList_r16_
   ) {
      super();
      plmn_IdentityInfoList = plmn_IdentityInfoList_;
      frequencyBandList = frequencyBandList_;
      noSIB1 = noSIB1_;
      npn_IdentityInfoList_r16 = npn_IdentityInfoList_r16_;
   }

   public void init () {
      plmn_IdentityInfoList = null;
      frequencyBandList = null;
      noSIB1 = null;
      npn_IdentityInfoList_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return plmn_IdentityInfoList;
         case 1: return frequencyBandList;
         case 2: return noSIB1;
         case 3: return npn_IdentityInfoList_r16;
         case 4: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "plmn-IdentityInfoList";
         case 1: return "frequencyBandList";
         case 2: return "noSIB1";
         case 3: return "npn-IdentityInfoList-r16";
         case 4: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean plmn_IdentityInfoListPresent = buffer.decodeBit ("plmn_IdentityInfoListPresent");
      boolean frequencyBandListPresent = buffer.decodeBit ("frequencyBandListPresent");
      boolean noSIB1Present = buffer.decodeBit ("noSIB1Present");

      // decode plmn_IdentityInfoList

      if (plmn_IdentityInfoListPresent) {
         buffer.getContext().eventDispatcher.startElement("plmn_IdentityInfoList", -1);

         plmn_IdentityInfoList = new PLMN_IdentityInfoList();
         plmn_IdentityInfoList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("plmn_IdentityInfoList", -1);
      }
      else {
         plmn_IdentityInfoList = null;
      }

      // decode frequencyBandList

      if (frequencyBandListPresent) {
         buffer.getContext().eventDispatcher.startElement("frequencyBandList", -1);

         frequencyBandList = new MultiFrequencyBandListNR();
         frequencyBandList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("frequencyBandList", -1);
      }
      else {
         frequencyBandList = null;
      }

      // decode noSIB1

      if (noSIB1Present) {
         buffer.getContext().eventDispatcher.startElement("noSIB1", -1);

         noSIB1 = new CGI_InfoNR_noSIB1();
         noSIB1.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("noSIB1", -1);
      }
      else {
         noSIB1 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean npn_IdentityInfoList_r16Present = buffer.decodeBit ("npn_IdentityInfoList_r16Present");

            // decode npn_IdentityInfoList_r16

            if (npn_IdentityInfoList_r16Present) {
               buffer.getContext().eventDispatcher.startElement("npn_IdentityInfoList_r16", -1);

               npn_IdentityInfoList_r16 = new NPN_IdentityInfoList_r16();
               npn_IdentityInfoList_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("npn_IdentityInfoList_r16", -1);
            }
            else {
               npn_IdentityInfoList_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (mV2ExtPresent ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((plmn_IdentityInfoList != null), null);
      buffer.encodeBit ((frequencyBandList != null), null);
      buffer.encodeBit ((noSIB1 != null), null);

      // encode plmn_IdentityInfoList

      if (plmn_IdentityInfoList != null) {
         buffer.getContext().eventDispatcher.startElement("plmn_IdentityInfoList", -1);

         plmn_IdentityInfoList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("plmn_IdentityInfoList", -1);
      }

      // encode frequencyBandList

      if (frequencyBandList != null) {
         buffer.getContext().eventDispatcher.startElement("frequencyBandList", -1);

         frequencyBandList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("frequencyBandList", -1);
      }

      // encode noSIB1

      if (noSIB1 != null) {
         buffer.getContext().eventDispatcher.startElement("noSIB1", -1);

         noSIB1.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("noSIB1", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 1;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit (mV2ExtPresent, null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         if (mV2ExtPresent) {
            buffer.reset();
            buffer.encodeBit ((npn_IdentityInfoList_r16 != null), "optbit");
            if (npn_IdentityInfoList_r16 != null) {
               npn_IdentityInfoList_r16.encode (buffer);
            }
            mainBuffer.encodeOpenType (buffer, null);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (plmn_IdentityInfoList != null) plmn_IdentityInfoList.print (_sb, "plmn_IdentityInfoList", _level+1);
      if (frequencyBandList != null) frequencyBandList.print (_sb, "frequencyBandList", _level+1);
      if (noSIB1 != null) noSIB1.print (_sb, "noSIB1", _level+1);
      if (npn_IdentityInfoList_r16 != null) npn_IdentityInfoList_r16.print (_sb, "npn_IdentityInfoList_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
