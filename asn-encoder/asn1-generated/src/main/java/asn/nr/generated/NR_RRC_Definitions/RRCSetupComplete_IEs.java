/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class RRCSetupComplete_IEs extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "RRCSetupComplete-IEs";
   }

   public Asn1Integer selectedPLMN_Identity;
   public RegisteredAMF registeredAMF;  // optional
   public RRCSetupComplete_IEs_guami_Type guami_Type = null;  // optional
   public RRCSetupComplete_IEs_s_NSSAI_List s_NSSAI_List;  // optional
   public DedicatedNAS_Message dedicatedNAS_Message;
   public RRCSetupComplete_IEs_ng_5G_S_TMSI_Value ng_5G_S_TMSI_Value;  // optional
   public Asn1OctetString lateNonCriticalExtension;  // optional
   public RRCSetupComplete_v1610_IEs nonCriticalExtension;  // optional

   public RRCSetupComplete_IEs () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public RRCSetupComplete_IEs (
      Asn1Integer selectedPLMN_Identity_,
      RegisteredAMF registeredAMF_,
      RRCSetupComplete_IEs_guami_Type guami_Type_,
      RRCSetupComplete_IEs_s_NSSAI_List s_NSSAI_List_,
      DedicatedNAS_Message dedicatedNAS_Message_,
      RRCSetupComplete_IEs_ng_5G_S_TMSI_Value ng_5G_S_TMSI_Value_,
      Asn1OctetString lateNonCriticalExtension_,
      RRCSetupComplete_v1610_IEs nonCriticalExtension_
   ) {
      super();
      selectedPLMN_Identity = selectedPLMN_Identity_;
      registeredAMF = registeredAMF_;
      guami_Type = guami_Type_;
      s_NSSAI_List = s_NSSAI_List_;
      dedicatedNAS_Message = dedicatedNAS_Message_;
      ng_5G_S_TMSI_Value = ng_5G_S_TMSI_Value_;
      lateNonCriticalExtension = lateNonCriticalExtension_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public RRCSetupComplete_IEs (
      Asn1Integer selectedPLMN_Identity_,
      DedicatedNAS_Message dedicatedNAS_Message_
   ) {
      super();
      selectedPLMN_Identity = selectedPLMN_Identity_;
      dedicatedNAS_Message = dedicatedNAS_Message_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public RRCSetupComplete_IEs (long selectedPLMN_Identity_,
      RegisteredAMF registeredAMF_,
      RRCSetupComplete_IEs_guami_Type guami_Type_,
      RRCSetupComplete_IEs_s_NSSAI_List s_NSSAI_List_,
      byte[] dedicatedNAS_Message_,
      RRCSetupComplete_IEs_ng_5G_S_TMSI_Value ng_5G_S_TMSI_Value_,
      byte[] lateNonCriticalExtension_,
      RRCSetupComplete_v1610_IEs nonCriticalExtension_
   ) {
      super();
      selectedPLMN_Identity = new Asn1Integer (selectedPLMN_Identity_);
      registeredAMF = registeredAMF_;
      guami_Type = guami_Type_;
      s_NSSAI_List = s_NSSAI_List_;
      dedicatedNAS_Message = new DedicatedNAS_Message (dedicatedNAS_Message_);
      ng_5G_S_TMSI_Value = ng_5G_S_TMSI_Value_;
      lateNonCriticalExtension = new Asn1OctetString (lateNonCriticalExtension_);
      nonCriticalExtension = nonCriticalExtension_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public RRCSetupComplete_IEs (
      long selectedPLMN_Identity_,
      byte[] dedicatedNAS_Message_
   ) {
      super();
      selectedPLMN_Identity = new Asn1Integer (selectedPLMN_Identity_);
      dedicatedNAS_Message = new DedicatedNAS_Message (dedicatedNAS_Message_);
   }

   public void init () {
      selectedPLMN_Identity = null;
      registeredAMF = null;
      guami_Type = null;
      s_NSSAI_List = null;
      dedicatedNAS_Message = null;
      ng_5G_S_TMSI_Value = null;
      lateNonCriticalExtension = null;
      nonCriticalExtension = null;
   }

   public int getElementCount() { return 8; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return selectedPLMN_Identity;
         case 1: return registeredAMF;
         case 2: return guami_Type;
         case 3: return s_NSSAI_List;
         case 4: return dedicatedNAS_Message;
         case 5: return ng_5G_S_TMSI_Value;
         case 6: return lateNonCriticalExtension;
         case 7: return nonCriticalExtension;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "selectedPLMN-Identity";
         case 1: return "registeredAMF";
         case 2: return "guami-Type";
         case 3: return "s-NSSAI-List";
         case 4: return "dedicatedNAS-Message";
         case 5: return "ng-5G-S-TMSI-Value";
         case 6: return "lateNonCriticalExtension";
         case 7: return "nonCriticalExtension";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean registeredAMFPresent = buffer.decodeBit ("registeredAMFPresent");
      boolean guami_TypePresent = buffer.decodeBit ("guami_TypePresent");
      boolean s_NSSAI_ListPresent = buffer.decodeBit ("s_NSSAI_ListPresent");
      boolean ng_5G_S_TMSI_ValuePresent = buffer.decodeBit ("ng_5G_S_TMSI_ValuePresent");
      boolean lateNonCriticalExtensionPresent = buffer.decodeBit ("lateNonCriticalExtensionPresent");
      boolean nonCriticalExtensionPresent = buffer.decodeBit ("nonCriticalExtensionPresent");

      // decode selectedPLMN_Identity

      buffer.getContext().eventDispatcher.startElement("selectedPLMN_Identity", -1);

      selectedPLMN_Identity = new Asn1Integer();
      selectedPLMN_Identity.decode (buffer, 1, 12);

      buffer.invokeCharacters(selectedPLMN_Identity.toString());
      buffer.getContext().eventDispatcher.endElement("selectedPLMN_Identity", -1);

      // decode registeredAMF

      if (registeredAMFPresent) {
         buffer.getContext().eventDispatcher.startElement("registeredAMF", -1);

         registeredAMF = new RegisteredAMF();
         registeredAMF.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("registeredAMF", -1);
      }
      else {
         registeredAMF = null;
      }

      // decode guami_Type

      if (guami_TypePresent) {
         buffer.getContext().eventDispatcher.startElement("guami_Type", -1);

         int tval = RRCSetupComplete_IEs_guami_Type.decodeEnumValue (buffer);
         guami_Type = RRCSetupComplete_IEs_guami_Type.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("guami_Type", -1);
      }
      else {
         guami_Type = null;
      }

      // decode s_NSSAI_List

      if (s_NSSAI_ListPresent) {
         buffer.getContext().eventDispatcher.startElement("s_NSSAI_List", -1);

         s_NSSAI_List = new RRCSetupComplete_IEs_s_NSSAI_List();
         s_NSSAI_List.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("s_NSSAI_List", -1);
      }
      else {
         s_NSSAI_List = null;
      }

      // decode dedicatedNAS_Message

      buffer.getContext().eventDispatcher.startElement("dedicatedNAS_Message", -1);

      dedicatedNAS_Message = new DedicatedNAS_Message();
      dedicatedNAS_Message.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("dedicatedNAS_Message", -1);

      // decode ng_5G_S_TMSI_Value

      if (ng_5G_S_TMSI_ValuePresent) {
         buffer.getContext().eventDispatcher.startElement("ng_5G_S_TMSI_Value", -1);

         ng_5G_S_TMSI_Value = new RRCSetupComplete_IEs_ng_5G_S_TMSI_Value();
         ng_5G_S_TMSI_Value.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ng_5G_S_TMSI_Value", -1);
      }
      else {
         ng_5G_S_TMSI_Value = null;
      }

      // decode lateNonCriticalExtension

      if (lateNonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("lateNonCriticalExtension", -1);

         lateNonCriticalExtension = new Asn1OctetString();
         lateNonCriticalExtension.decode (buffer);

         buffer.invokeCharacters(lateNonCriticalExtension.toString());
         buffer.getContext().eventDispatcher.endElement("lateNonCriticalExtension", -1);
      }
      else {
         lateNonCriticalExtension = null;
      }

      // decode nonCriticalExtension

      if (nonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension = new RRCSetupComplete_v1610_IEs();
         nonCriticalExtension.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }
      else {
         nonCriticalExtension = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((registeredAMF != null), null);
      buffer.encodeBit ((guami_Type != null), null);
      buffer.encodeBit ((s_NSSAI_List != null), null);
      buffer.encodeBit ((ng_5G_S_TMSI_Value != null), null);
      buffer.encodeBit ((lateNonCriticalExtension != null), null);
      buffer.encodeBit ((nonCriticalExtension != null), null);

      // encode selectedPLMN_Identity

      if (selectedPLMN_Identity != null) {
         buffer.getContext().eventDispatcher.startElement("selectedPLMN_Identity", -1);

         selectedPLMN_Identity.encode (buffer, 1, 12);

         buffer.getContext().eventDispatcher.endElement("selectedPLMN_Identity", -1);
      }
      else throw new Asn1MissingRequiredException ("selectedPLMN_Identity");

      // encode registeredAMF

      if (registeredAMF != null) {
         buffer.getContext().eventDispatcher.startElement("registeredAMF", -1);

         registeredAMF.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("registeredAMF", -1);
      }

      // encode guami_Type

      if (guami_Type != null) {
         buffer.getContext().eventDispatcher.startElement("guami_Type", -1);

         guami_Type.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("guami_Type", -1);
      }

      // encode s_NSSAI_List

      if (s_NSSAI_List != null) {
         buffer.getContext().eventDispatcher.startElement("s_NSSAI_List", -1);

         s_NSSAI_List.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("s_NSSAI_List", -1);
      }

      // encode dedicatedNAS_Message

      if (dedicatedNAS_Message != null) {
         buffer.getContext().eventDispatcher.startElement("dedicatedNAS_Message", -1);

         dedicatedNAS_Message.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("dedicatedNAS_Message", -1);
      }
      else throw new Asn1MissingRequiredException ("dedicatedNAS_Message");

      // encode ng_5G_S_TMSI_Value

      if (ng_5G_S_TMSI_Value != null) {
         buffer.getContext().eventDispatcher.startElement("ng_5G_S_TMSI_Value", -1);

         ng_5G_S_TMSI_Value.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ng_5G_S_TMSI_Value", -1);
      }

      // encode lateNonCriticalExtension

      if (lateNonCriticalExtension != null) {
         buffer.getContext().eventDispatcher.startElement("lateNonCriticalExtension", -1);

         lateNonCriticalExtension.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("lateNonCriticalExtension", -1);
      }

      // encode nonCriticalExtension

      if (nonCriticalExtension != null) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (selectedPLMN_Identity != null) selectedPLMN_Identity.print (_sb, "selectedPLMN_Identity", _level+1);
      if (registeredAMF != null) registeredAMF.print (_sb, "registeredAMF", _level+1);
      if (guami_Type != null) guami_Type.print (_sb, "guami_Type", _level+1);
      if (s_NSSAI_List != null) s_NSSAI_List.print (_sb, "s_NSSAI_List", _level+1);
      if (dedicatedNAS_Message != null) dedicatedNAS_Message.print (_sb, "dedicatedNAS_Message", _level+1);
      if (ng_5G_S_TMSI_Value != null) ng_5G_S_TMSI_Value.print (_sb, "ng_5G_S_TMSI_Value", _level+1);
      if (lateNonCriticalExtension != null) lateNonCriticalExtension.print (_sb, "lateNonCriticalExtension", _level+1);
      if (nonCriticalExtension != null) nonCriticalExtension.print (_sb, "nonCriticalExtension", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
