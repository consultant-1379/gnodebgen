/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_InterNodeDefinitions;

import com.objsys.asn1j.runtime.*;

public class DRX_Info_shortDRX_drx_ShortCycle extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_InterNodeDefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ENUMERATED";
   }

   // Integer constants for switch-case
   public static final int _MS2 = 0;
   public static final int _MS3 = 1;
   public static final int _MS4 = 2;
   public static final int _MS5 = 3;
   public static final int _MS6 = 4;
   public static final int _MS7 = 5;
   public static final int _MS8 = 6;
   public static final int _MS10 = 7;
   public static final int _MS14 = 8;
   public static final int _MS16 = 9;
   public static final int _MS20 = 10;
   public static final int _MS30 = 11;
   public static final int _MS32 = 12;
   public static final int _MS35 = 13;
   public static final int _MS40 = 14;
   public static final int _MS64 = 15;
   public static final int _MS80 = 16;
   public static final int _MS128 = 17;
   public static final int _MS160 = 18;
   public static final int _MS256 = 19;
   public static final int _MS320 = 20;
   public static final int _MS512 = 21;
   public static final int _MS640 = 22;
   public static final int _SPARE9 = 23;
   public static final int _SPARE8 = 24;
   public static final int _SPARE7 = 25;
   public static final int _SPARE6 = 26;
   public static final int _SPARE5 = 27;
   public static final int _SPARE4 = 28;
   public static final int _SPARE3 = 29;
   public static final int _SPARE2 = 30;
   public static final int _SPARE1 = 31;

   // Singleton instances of DRX_Info_shortDRX_drx_ShortCycle
   protected static final DRX_Info_shortDRX_drx_ShortCycle _ms2 = new DRX_Info_shortDRX_drx_ShortCycle(0);
   protected static final DRX_Info_shortDRX_drx_ShortCycle _ms3 = new DRX_Info_shortDRX_drx_ShortCycle(1);
   protected static final DRX_Info_shortDRX_drx_ShortCycle _ms4 = new DRX_Info_shortDRX_drx_ShortCycle(2);
   protected static final DRX_Info_shortDRX_drx_ShortCycle _ms5 = new DRX_Info_shortDRX_drx_ShortCycle(3);
   protected static final DRX_Info_shortDRX_drx_ShortCycle _ms6 = new DRX_Info_shortDRX_drx_ShortCycle(4);
   protected static final DRX_Info_shortDRX_drx_ShortCycle _ms7 = new DRX_Info_shortDRX_drx_ShortCycle(5);
   protected static final DRX_Info_shortDRX_drx_ShortCycle _ms8 = new DRX_Info_shortDRX_drx_ShortCycle(6);
   protected static final DRX_Info_shortDRX_drx_ShortCycle _ms10 = new DRX_Info_shortDRX_drx_ShortCycle(7);
   protected static final DRX_Info_shortDRX_drx_ShortCycle _ms14 = new DRX_Info_shortDRX_drx_ShortCycle(8);
   protected static final DRX_Info_shortDRX_drx_ShortCycle _ms16 = new DRX_Info_shortDRX_drx_ShortCycle(9);
   protected static final DRX_Info_shortDRX_drx_ShortCycle _ms20 = new DRX_Info_shortDRX_drx_ShortCycle(10);
   protected static final DRX_Info_shortDRX_drx_ShortCycle _ms30 = new DRX_Info_shortDRX_drx_ShortCycle(11);
   protected static final DRX_Info_shortDRX_drx_ShortCycle _ms32 = new DRX_Info_shortDRX_drx_ShortCycle(12);
   protected static final DRX_Info_shortDRX_drx_ShortCycle _ms35 = new DRX_Info_shortDRX_drx_ShortCycle(13);
   protected static final DRX_Info_shortDRX_drx_ShortCycle _ms40 = new DRX_Info_shortDRX_drx_ShortCycle(14);
   protected static final DRX_Info_shortDRX_drx_ShortCycle _ms64 = new DRX_Info_shortDRX_drx_ShortCycle(15);
   protected static final DRX_Info_shortDRX_drx_ShortCycle _ms80 = new DRX_Info_shortDRX_drx_ShortCycle(16);
   protected static final DRX_Info_shortDRX_drx_ShortCycle _ms128 = new DRX_Info_shortDRX_drx_ShortCycle(17);
   protected static final DRX_Info_shortDRX_drx_ShortCycle _ms160 = new DRX_Info_shortDRX_drx_ShortCycle(18);
   protected static final DRX_Info_shortDRX_drx_ShortCycle _ms256 = new DRX_Info_shortDRX_drx_ShortCycle(19);
   protected static final DRX_Info_shortDRX_drx_ShortCycle _ms320 = new DRX_Info_shortDRX_drx_ShortCycle(20);
   protected static final DRX_Info_shortDRX_drx_ShortCycle _ms512 = new DRX_Info_shortDRX_drx_ShortCycle(21);
   protected static final DRX_Info_shortDRX_drx_ShortCycle _ms640 = new DRX_Info_shortDRX_drx_ShortCycle(22);
   protected static final DRX_Info_shortDRX_drx_ShortCycle _spare9 = new DRX_Info_shortDRX_drx_ShortCycle(23);
   protected static final DRX_Info_shortDRX_drx_ShortCycle _spare8 = new DRX_Info_shortDRX_drx_ShortCycle(24);
   protected static final DRX_Info_shortDRX_drx_ShortCycle _spare7 = new DRX_Info_shortDRX_drx_ShortCycle(25);
   protected static final DRX_Info_shortDRX_drx_ShortCycle _spare6 = new DRX_Info_shortDRX_drx_ShortCycle(26);
   protected static final DRX_Info_shortDRX_drx_ShortCycle _spare5 = new DRX_Info_shortDRX_drx_ShortCycle(27);
   protected static final DRX_Info_shortDRX_drx_ShortCycle _spare4 = new DRX_Info_shortDRX_drx_ShortCycle(28);
   protected static final DRX_Info_shortDRX_drx_ShortCycle _spare3 = new DRX_Info_shortDRX_drx_ShortCycle(29);
   protected static final DRX_Info_shortDRX_drx_ShortCycle _spare2 = new DRX_Info_shortDRX_drx_ShortCycle(30);
   protected static final DRX_Info_shortDRX_drx_ShortCycle _spare1 = new DRX_Info_shortDRX_drx_ShortCycle(31);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    *   7
    *   8
    *   9
    *   10
    *   11
    *   12
    *   13
    *   14
    *   15
    *   16
    *   17
    *   18
    *   19
    *   20
    *   21
    *   22
    *   23
    *   24
    *   25
    *   26
    *   27
    *   28
    *   29
    *   30
    *   31
    */
   protected DRX_Info_shortDRX_drx_ShortCycle (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for ms2.
    */
   public static DRX_Info_shortDRX_drx_ShortCycle ms2() {
      return _ms2;
   }

   /**
    * Singleton accessor method for ms3.
    */
   public static DRX_Info_shortDRX_drx_ShortCycle ms3() {
      return _ms3;
   }

   /**
    * Singleton accessor method for ms4.
    */
   public static DRX_Info_shortDRX_drx_ShortCycle ms4() {
      return _ms4;
   }

   /**
    * Singleton accessor method for ms5.
    */
   public static DRX_Info_shortDRX_drx_ShortCycle ms5() {
      return _ms5;
   }

   /**
    * Singleton accessor method for ms6.
    */
   public static DRX_Info_shortDRX_drx_ShortCycle ms6() {
      return _ms6;
   }

   /**
    * Singleton accessor method for ms7.
    */
   public static DRX_Info_shortDRX_drx_ShortCycle ms7() {
      return _ms7;
   }

   /**
    * Singleton accessor method for ms8.
    */
   public static DRX_Info_shortDRX_drx_ShortCycle ms8() {
      return _ms8;
   }

   /**
    * Singleton accessor method for ms10.
    */
   public static DRX_Info_shortDRX_drx_ShortCycle ms10() {
      return _ms10;
   }

   /**
    * Singleton accessor method for ms14.
    */
   public static DRX_Info_shortDRX_drx_ShortCycle ms14() {
      return _ms14;
   }

   /**
    * Singleton accessor method for ms16.
    */
   public static DRX_Info_shortDRX_drx_ShortCycle ms16() {
      return _ms16;
   }

   /**
    * Singleton accessor method for ms20.
    */
   public static DRX_Info_shortDRX_drx_ShortCycle ms20() {
      return _ms20;
   }

   /**
    * Singleton accessor method for ms30.
    */
   public static DRX_Info_shortDRX_drx_ShortCycle ms30() {
      return _ms30;
   }

   /**
    * Singleton accessor method for ms32.
    */
   public static DRX_Info_shortDRX_drx_ShortCycle ms32() {
      return _ms32;
   }

   /**
    * Singleton accessor method for ms35.
    */
   public static DRX_Info_shortDRX_drx_ShortCycle ms35() {
      return _ms35;
   }

   /**
    * Singleton accessor method for ms40.
    */
   public static DRX_Info_shortDRX_drx_ShortCycle ms40() {
      return _ms40;
   }

   /**
    * Singleton accessor method for ms64.
    */
   public static DRX_Info_shortDRX_drx_ShortCycle ms64() {
      return _ms64;
   }

   /**
    * Singleton accessor method for ms80.
    */
   public static DRX_Info_shortDRX_drx_ShortCycle ms80() {
      return _ms80;
   }

   /**
    * Singleton accessor method for ms128.
    */
   public static DRX_Info_shortDRX_drx_ShortCycle ms128() {
      return _ms128;
   }

   /**
    * Singleton accessor method for ms160.
    */
   public static DRX_Info_shortDRX_drx_ShortCycle ms160() {
      return _ms160;
   }

   /**
    * Singleton accessor method for ms256.
    */
   public static DRX_Info_shortDRX_drx_ShortCycle ms256() {
      return _ms256;
   }

   /**
    * Singleton accessor method for ms320.
    */
   public static DRX_Info_shortDRX_drx_ShortCycle ms320() {
      return _ms320;
   }

   /**
    * Singleton accessor method for ms512.
    */
   public static DRX_Info_shortDRX_drx_ShortCycle ms512() {
      return _ms512;
   }

   /**
    * Singleton accessor method for ms640.
    */
   public static DRX_Info_shortDRX_drx_ShortCycle ms640() {
      return _ms640;
   }

   /**
    * Singleton accessor method for spare9.
    */
   public static DRX_Info_shortDRX_drx_ShortCycle spare9() {
      return _spare9;
   }

   /**
    * Singleton accessor method for spare8.
    */
   public static DRX_Info_shortDRX_drx_ShortCycle spare8() {
      return _spare8;
   }

   /**
    * Singleton accessor method for spare7.
    */
   public static DRX_Info_shortDRX_drx_ShortCycle spare7() {
      return _spare7;
   }

   /**
    * Singleton accessor method for spare6.
    */
   public static DRX_Info_shortDRX_drx_ShortCycle spare6() {
      return _spare6;
   }

   /**
    * Singleton accessor method for spare5.
    */
   public static DRX_Info_shortDRX_drx_ShortCycle spare5() {
      return _spare5;
   }

   /**
    * Singleton accessor method for spare4.
    */
   public static DRX_Info_shortDRX_drx_ShortCycle spare4() {
      return _spare4;
   }

   /**
    * Singleton accessor method for spare3.
    */
   public static DRX_Info_shortDRX_drx_ShortCycle spare3() {
      return _spare3;
   }

   /**
    * Singleton accessor method for spare2.
    */
   public static DRX_Info_shortDRX_drx_ShortCycle spare2() {
      return _spare2;
   }

   /**
    * Singleton accessor method for spare1.
    */
   public static DRX_Info_shortDRX_drx_ShortCycle spare1() {
      return _spare1;
   }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return DRX_Info_shortDRX_drx_ShortCycle.valueOf( DRX_Info_shortDRX_drx_ShortCycle.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static DRX_Info_shortDRX_drx_ShortCycle valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 0: return ms2();
         case 1: return ms3();
         case 2: return ms4();
         case 3: return ms5();
         case 4: return ms6();
         case 5: return ms7();
         case 6: return ms8();
         case 7: return ms10();
         case 8: return ms14();
         case 9: return ms16();
         case 10: return ms20();
         case 11: return ms30();
         case 12: return ms32();
         case 13: return ms35();
         case 14: return ms40();
         case 15: return ms64();
         case 16: return ms80();
         case 17: return ms128();
         case 18: return ms160();
         case 19: return ms256();
         case 20: return ms320();
         case 21: return ms512();
         case 22: return ms640();
         case 23: return spare9();
         case 24: return spare8();
         case 25: return spare7();
         case 26: return spare6();
         case 27: return spare5();
         case 28: return spare4();
         case 29: return spare3();
         case 30: return spare2();
         case 31: return spare1();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      ui = (int) buffer.decodeConsWholeNumber (32);

      switch (ui) {
         case 0: ret =  0; break;
         case 1: ret =  1; break;
         case 2: ret =  2; break;
         case 3: ret =  3; break;
         case 4: ret =  4; break;
         case 5: ret =  5; break;
         case 6: ret =  6; break;
         case 7: ret =  7; break;
         case 8: ret =  8; break;
         case 9: ret =  9; break;
         case 10: ret =  10; break;
         case 11: ret =  11; break;
         case 12: ret =  12; break;
         case 13: ret =  13; break;
         case 14: ret =  14; break;
         case 15: ret =  15; break;
         case 16: ret =  16; break;
         case 17: ret =  17; break;
         case 18: ret =  18; break;
         case 19: ret =  19; break;
         case 20: ret =  20; break;
         case 21: ret =  21; break;
         case 22: ret =  22; break;
         case 23: ret =  23; break;
         case 24: ret =  24; break;
         case 25: ret =  25; break;
         case 26: ret =  26; break;
         case 27: ret =  27; break;
         case 28: ret =  28; break;
         case 29: ret =  29; break;
         case 30: ret =  30; break;
         case 31: ret =  31; break;
         default: throw new Asn1InvalidEnumException (ui);
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (DRX_Info_shortDRX_drx_ShortCycle.valueOf(ret).toString());

      return ret;
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      switch ((int)value) {
         case 0: ui = 0; /* ms2 */break;
         case 1: ui = 1; /* ms3 */break;
         case 2: ui = 2; /* ms4 */break;
         case 3: ui = 3; /* ms5 */break;
         case 4: ui = 4; /* ms6 */break;
         case 5: ui = 5; /* ms7 */break;
         case 6: ui = 6; /* ms8 */break;
         case 7: ui = 7; /* ms10 */break;
         case 8: ui = 8; /* ms14 */break;
         case 9: ui = 9; /* ms16 */break;
         case 10: ui = 10; /* ms20 */break;
         case 11: ui = 11; /* ms30 */break;
         case 12: ui = 12; /* ms32 */break;
         case 13: ui = 13; /* ms35 */break;
         case 14: ui = 14; /* ms40 */break;
         case 15: ui = 15; /* ms64 */break;
         case 16: ui = 16; /* ms80 */break;
         case 17: ui = 17; /* ms128 */break;
         case 18: ui = 18; /* ms160 */break;
         case 19: ui = 19; /* ms256 */break;
         case 20: ui = 20; /* ms320 */break;
         case 21: ui = 21; /* ms512 */break;
         case 22: ui = 22; /* ms640 */break;
         case 23: ui = 23; /* spare9 */break;
         case 24: ui = 24; /* spare8 */break;
         case 25: ui = 25; /* spare7 */break;
         case 26: ui = 26; /* spare6 */break;
         case 27: ui = 27; /* spare5 */break;
         case 28: ui = 28; /* spare4 */break;
         case 29: ui = 29; /* spare3 */break;
         case 30: ui = 30; /* spare2 */break;
         case 31: ui = 31; /* spare1 */break;
         default:
            throw new Asn1InvalidEnumException (value);
      }

      buffer.encodeConsWholeNumber (ui, 32);
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("ms2");
         case 1: return ("ms3");
         case 2: return ("ms4");
         case 3: return ("ms5");
         case 4: return ("ms6");
         case 5: return ("ms7");
         case 6: return ("ms8");
         case 7: return ("ms10");
         case 8: return ("ms14");
         case 9: return ("ms16");
         case 10: return ("ms20");
         case 11: return ("ms30");
         case 12: return ("ms32");
         case 13: return ("ms35");
         case 14: return ("ms40");
         case 15: return ("ms64");
         case 16: return ("ms80");
         case 17: return ("ms128");
         case 18: return ("ms160");
         case 19: return ("ms256");
         case 20: return ("ms320");
         case 21: return ("ms512");
         case 22: return ("ms640");
         case 23: return ("spare9");
         case 24: return ("spare8");
         case 25: return ("spare7");
         case 26: return ("spare6");
         case 27: return ("spare5");
         case 28: return ("spare4");
         case 29: return ("spare3");
         case 30: return ("spare2");
         case 31: return ("spare1");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
