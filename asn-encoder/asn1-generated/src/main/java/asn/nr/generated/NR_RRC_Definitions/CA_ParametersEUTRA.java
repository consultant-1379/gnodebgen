/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class CA_ParametersEUTRA extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CA-ParametersEUTRA";
   }

   public CA_ParametersEUTRA_multipleTimingAdvance multipleTimingAdvance = null;  // optional
   public CA_ParametersEUTRA_simultaneousRx_Tx simultaneousRx_Tx = null;  // optional
   public Asn1BitString supportedNAICS_2CRS_AP;  // optional
   public CA_ParametersEUTRA_additionalRx_Tx_PerformanceReq additionalRx_Tx_PerformanceReq = null;  // optional
   public CA_ParametersEUTRA_ue_CA_PowerClass_N ue_CA_PowerClass_N = null;  // optional
   public Asn1BitString supportedBandwidthCombinationSetEUTRA_v1530;  // optional
   public Asn1OpenExt extElem1;

   public CA_ParametersEUTRA () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CA_ParametersEUTRA (
      CA_ParametersEUTRA_multipleTimingAdvance multipleTimingAdvance_,
      CA_ParametersEUTRA_simultaneousRx_Tx simultaneousRx_Tx_,
      Asn1BitString supportedNAICS_2CRS_AP_,
      CA_ParametersEUTRA_additionalRx_Tx_PerformanceReq additionalRx_Tx_PerformanceReq_,
      CA_ParametersEUTRA_ue_CA_PowerClass_N ue_CA_PowerClass_N_,
      Asn1BitString supportedBandwidthCombinationSetEUTRA_v1530_
   ) {
      super();
      multipleTimingAdvance = multipleTimingAdvance_;
      simultaneousRx_Tx = simultaneousRx_Tx_;
      supportedNAICS_2CRS_AP = supportedNAICS_2CRS_AP_;
      additionalRx_Tx_PerformanceReq = additionalRx_Tx_PerformanceReq_;
      ue_CA_PowerClass_N = ue_CA_PowerClass_N_;
      supportedBandwidthCombinationSetEUTRA_v1530 = supportedBandwidthCombinationSetEUTRA_v1530_;
   }

   public void init () {
      multipleTimingAdvance = null;
      simultaneousRx_Tx = null;
      supportedNAICS_2CRS_AP = null;
      additionalRx_Tx_PerformanceReq = null;
      ue_CA_PowerClass_N = null;
      supportedBandwidthCombinationSetEUTRA_v1530 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return multipleTimingAdvance;
         case 1: return simultaneousRx_Tx;
         case 2: return supportedNAICS_2CRS_AP;
         case 3: return additionalRx_Tx_PerformanceReq;
         case 4: return ue_CA_PowerClass_N;
         case 5: return supportedBandwidthCombinationSetEUTRA_v1530;
         case 6: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "multipleTimingAdvance";
         case 1: return "simultaneousRx-Tx";
         case 2: return "supportedNAICS-2CRS-AP";
         case 3: return "additionalRx-Tx-PerformanceReq";
         case 4: return "ue-CA-PowerClass-N";
         case 5: return "supportedBandwidthCombinationSetEUTRA-v1530";
         case 6: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean multipleTimingAdvancePresent = buffer.decodeBit ("multipleTimingAdvancePresent");
      boolean simultaneousRx_TxPresent = buffer.decodeBit ("simultaneousRx_TxPresent");
      boolean supportedNAICS_2CRS_APPresent = buffer.decodeBit ("supportedNAICS_2CRS_APPresent");
      boolean additionalRx_Tx_PerformanceReqPresent = buffer.decodeBit ("additionalRx_Tx_PerformanceReqPresent");
      boolean ue_CA_PowerClass_NPresent = buffer.decodeBit ("ue_CA_PowerClass_NPresent");
      boolean supportedBandwidthCombinationSetEUTRA_v1530Present = buffer.decodeBit ("supportedBandwidthCombinationSetEUTRA_v1530Present");

      // decode multipleTimingAdvance

      if (multipleTimingAdvancePresent) {
         buffer.getContext().eventDispatcher.startElement("multipleTimingAdvance", -1);

         int tval = CA_ParametersEUTRA_multipleTimingAdvance.decodeEnumValue (buffer);
         multipleTimingAdvance = CA_ParametersEUTRA_multipleTimingAdvance.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("multipleTimingAdvance", -1);
      }
      else {
         multipleTimingAdvance = null;
      }

      // decode simultaneousRx_Tx

      if (simultaneousRx_TxPresent) {
         buffer.getContext().eventDispatcher.startElement("simultaneousRx_Tx", -1);

         int tval = CA_ParametersEUTRA_simultaneousRx_Tx.decodeEnumValue (buffer);
         simultaneousRx_Tx = CA_ParametersEUTRA_simultaneousRx_Tx.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("simultaneousRx_Tx", -1);
      }
      else {
         simultaneousRx_Tx = null;
      }

      // decode supportedNAICS_2CRS_AP

      if (supportedNAICS_2CRS_APPresent) {
         buffer.getContext().eventDispatcher.startElement("supportedNAICS_2CRS_AP", -1);

         supportedNAICS_2CRS_AP = new Asn1BitString();
         supportedNAICS_2CRS_AP.decode (buffer, 1, 8);

         buffer.invokeCharacters(supportedNAICS_2CRS_AP.toString());
         buffer.getContext().eventDispatcher.endElement("supportedNAICS_2CRS_AP", -1);
      }
      else {
         supportedNAICS_2CRS_AP = null;
      }

      // decode additionalRx_Tx_PerformanceReq

      if (additionalRx_Tx_PerformanceReqPresent) {
         buffer.getContext().eventDispatcher.startElement("additionalRx_Tx_PerformanceReq", -1);

         int tval = CA_ParametersEUTRA_additionalRx_Tx_PerformanceReq.decodeEnumValue (buffer);
         additionalRx_Tx_PerformanceReq = CA_ParametersEUTRA_additionalRx_Tx_PerformanceReq.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("additionalRx_Tx_PerformanceReq", -1);
      }
      else {
         additionalRx_Tx_PerformanceReq = null;
      }

      // decode ue_CA_PowerClass_N

      if (ue_CA_PowerClass_NPresent) {
         buffer.getContext().eventDispatcher.startElement("ue_CA_PowerClass_N", -1);

         int tval = CA_ParametersEUTRA_ue_CA_PowerClass_N.decodeEnumValue (buffer);
         ue_CA_PowerClass_N = CA_ParametersEUTRA_ue_CA_PowerClass_N.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("ue_CA_PowerClass_N", -1);
      }
      else {
         ue_CA_PowerClass_N = null;
      }

      // decode supportedBandwidthCombinationSetEUTRA_v1530

      if (supportedBandwidthCombinationSetEUTRA_v1530Present) {
         buffer.getContext().eventDispatcher.startElement("supportedBandwidthCombinationSetEUTRA_v1530", -1);

         supportedBandwidthCombinationSetEUTRA_v1530 = new Asn1BitString();
         supportedBandwidthCombinationSetEUTRA_v1530.decode (buffer, 1, 32);

         buffer.invokeCharacters(supportedBandwidthCombinationSetEUTRA_v1530.toString());
         buffer.getContext().eventDispatcher.endElement("supportedBandwidthCombinationSetEUTRA_v1530", -1);
      }
      else {
         supportedBandwidthCombinationSetEUTRA_v1530 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((multipleTimingAdvance != null), null);
      buffer.encodeBit ((simultaneousRx_Tx != null), null);
      buffer.encodeBit ((supportedNAICS_2CRS_AP != null), null);
      buffer.encodeBit ((additionalRx_Tx_PerformanceReq != null), null);
      buffer.encodeBit ((ue_CA_PowerClass_N != null), null);
      buffer.encodeBit ((supportedBandwidthCombinationSetEUTRA_v1530 != null), null);

      // encode multipleTimingAdvance

      if (multipleTimingAdvance != null) {
         buffer.getContext().eventDispatcher.startElement("multipleTimingAdvance", -1);

         multipleTimingAdvance.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("multipleTimingAdvance", -1);
      }

      // encode simultaneousRx_Tx

      if (simultaneousRx_Tx != null) {
         buffer.getContext().eventDispatcher.startElement("simultaneousRx_Tx", -1);

         simultaneousRx_Tx.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("simultaneousRx_Tx", -1);
      }

      // encode supportedNAICS_2CRS_AP

      if (supportedNAICS_2CRS_AP != null) {
         buffer.getContext().eventDispatcher.startElement("supportedNAICS_2CRS_AP", -1);

         supportedNAICS_2CRS_AP.encode (buffer, 1, 8);

         buffer.getContext().eventDispatcher.endElement("supportedNAICS_2CRS_AP", -1);
      }

      // encode additionalRx_Tx_PerformanceReq

      if (additionalRx_Tx_PerformanceReq != null) {
         buffer.getContext().eventDispatcher.startElement("additionalRx_Tx_PerformanceReq", -1);

         additionalRx_Tx_PerformanceReq.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("additionalRx_Tx_PerformanceReq", -1);
      }

      // encode ue_CA_PowerClass_N

      if (ue_CA_PowerClass_N != null) {
         buffer.getContext().eventDispatcher.startElement("ue_CA_PowerClass_N", -1);

         ue_CA_PowerClass_N.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ue_CA_PowerClass_N", -1);
      }

      // encode supportedBandwidthCombinationSetEUTRA_v1530

      if (supportedBandwidthCombinationSetEUTRA_v1530 != null) {
         buffer.getContext().eventDispatcher.startElement("supportedBandwidthCombinationSetEUTRA_v1530", -1);

         supportedBandwidthCombinationSetEUTRA_v1530.encode (buffer, 1, 32);

         buffer.getContext().eventDispatcher.endElement("supportedBandwidthCombinationSetEUTRA_v1530", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (multipleTimingAdvance != null) multipleTimingAdvance.print (_sb, "multipleTimingAdvance", _level+1);
      if (simultaneousRx_Tx != null) simultaneousRx_Tx.print (_sb, "simultaneousRx_Tx", _level+1);
      if (supportedNAICS_2CRS_AP != null) supportedNAICS_2CRS_AP.print (_sb, "supportedNAICS_2CRS_AP", _level+1);
      if (additionalRx_Tx_PerformanceReq != null) additionalRx_Tx_PerformanceReq.print (_sb, "additionalRx_Tx_PerformanceReq", _level+1);
      if (ue_CA_PowerClass_N != null) ue_CA_PowerClass_N.print (_sb, "ue_CA_PowerClass_N", _level+1);
      if (supportedBandwidthCombinationSetEUTRA_v1530 != null) supportedBandwidthCombinationSetEUTRA_v1530.print (_sb, "supportedBandwidthCombinationSetEUTRA_v1530", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
