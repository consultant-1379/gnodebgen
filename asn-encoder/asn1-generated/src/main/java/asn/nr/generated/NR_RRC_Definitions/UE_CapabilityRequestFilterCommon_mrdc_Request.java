/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class UE_CapabilityRequestFilterCommon_mrdc_Request extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public UE_CapabilityRequestFilterCommon_mrdc_Request_omitEN_DC omitEN_DC = null;  // optional
   public UE_CapabilityRequestFilterCommon_mrdc_Request_includeNR_DC includeNR_DC = null;  // optional
   public UE_CapabilityRequestFilterCommon_mrdc_Request_includeNE_DC includeNE_DC = null;  // optional

   public UE_CapabilityRequestFilterCommon_mrdc_Request () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public UE_CapabilityRequestFilterCommon_mrdc_Request (
      UE_CapabilityRequestFilterCommon_mrdc_Request_omitEN_DC omitEN_DC_,
      UE_CapabilityRequestFilterCommon_mrdc_Request_includeNR_DC includeNR_DC_,
      UE_CapabilityRequestFilterCommon_mrdc_Request_includeNE_DC includeNE_DC_
   ) {
      super();
      omitEN_DC = omitEN_DC_;
      includeNR_DC = includeNR_DC_;
      includeNE_DC = includeNE_DC_;
   }

   public void init () {
      omitEN_DC = null;
      includeNR_DC = null;
      includeNE_DC = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return omitEN_DC;
         case 1: return includeNR_DC;
         case 2: return includeNE_DC;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "omitEN-DC";
         case 1: return "includeNR-DC";
         case 2: return "includeNE-DC";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean omitEN_DCPresent = buffer.decodeBit ("omitEN_DCPresent");
      boolean includeNR_DCPresent = buffer.decodeBit ("includeNR_DCPresent");
      boolean includeNE_DCPresent = buffer.decodeBit ("includeNE_DCPresent");

      // decode omitEN_DC

      if (omitEN_DCPresent) {
         buffer.getContext().eventDispatcher.startElement("omitEN_DC", -1);

         int tval = UE_CapabilityRequestFilterCommon_mrdc_Request_omitEN_DC.decodeEnumValue (buffer);
         omitEN_DC = UE_CapabilityRequestFilterCommon_mrdc_Request_omitEN_DC.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("omitEN_DC", -1);
      }
      else {
         omitEN_DC = null;
      }

      // decode includeNR_DC

      if (includeNR_DCPresent) {
         buffer.getContext().eventDispatcher.startElement("includeNR_DC", -1);

         int tval = UE_CapabilityRequestFilterCommon_mrdc_Request_includeNR_DC.decodeEnumValue (buffer);
         includeNR_DC = UE_CapabilityRequestFilterCommon_mrdc_Request_includeNR_DC.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("includeNR_DC", -1);
      }
      else {
         includeNR_DC = null;
      }

      // decode includeNE_DC

      if (includeNE_DCPresent) {
         buffer.getContext().eventDispatcher.startElement("includeNE_DC", -1);

         int tval = UE_CapabilityRequestFilterCommon_mrdc_Request_includeNE_DC.decodeEnumValue (buffer);
         includeNE_DC = UE_CapabilityRequestFilterCommon_mrdc_Request_includeNE_DC.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("includeNE_DC", -1);
      }
      else {
         includeNE_DC = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((omitEN_DC != null), null);
      buffer.encodeBit ((includeNR_DC != null), null);
      buffer.encodeBit ((includeNE_DC != null), null);

      // encode omitEN_DC

      if (omitEN_DC != null) {
         buffer.getContext().eventDispatcher.startElement("omitEN_DC", -1);

         omitEN_DC.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("omitEN_DC", -1);
      }

      // encode includeNR_DC

      if (includeNR_DC != null) {
         buffer.getContext().eventDispatcher.startElement("includeNR_DC", -1);

         includeNR_DC.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("includeNR_DC", -1);
      }

      // encode includeNE_DC

      if (includeNE_DC != null) {
         buffer.getContext().eventDispatcher.startElement("includeNE_DC", -1);

         includeNE_DC.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("includeNE_DC", -1);
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (omitEN_DC != null) omitEN_DC.print (_sb, "omitEN_DC", _level+1);
      if (includeNR_DC != null) includeNR_DC.print (_sb, "includeNR_DC", _level+1);
      if (includeNE_DC != null) includeNE_DC.print (_sb, "includeNE_DC", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
