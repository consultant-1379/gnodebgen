/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class CFRA_SSB_Resource extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CFRA-SSB-Resource";
   }

   public SSB_Index ssb;
   public Asn1Integer ra_PreambleIndex;
   public boolean mV2ExtPresent;
   public Asn1Integer msgA_PUSCH_Resource_Index_r16;  // optional
   public Asn1OpenExt extElem1;

   public CFRA_SSB_Resource () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CFRA_SSB_Resource (
      SSB_Index ssb_,
      Asn1Integer ra_PreambleIndex_,
      Asn1Integer msgA_PUSCH_Resource_Index_r16_
   ) {
      super();
      ssb = ssb_;
      ra_PreambleIndex = ra_PreambleIndex_;
      msgA_PUSCH_Resource_Index_r16 = msgA_PUSCH_Resource_Index_r16_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public CFRA_SSB_Resource (
      SSB_Index ssb_,
      Asn1Integer ra_PreambleIndex_
   ) {
      super();
      ssb = ssb_;
      ra_PreambleIndex = ra_PreambleIndex_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public CFRA_SSB_Resource (long ssb_,
      long ra_PreambleIndex_,
      long msgA_PUSCH_Resource_Index_r16_
   ) {
      super();
      ssb = new SSB_Index (ssb_);
      ra_PreambleIndex = new Asn1Integer (ra_PreambleIndex_);
      msgA_PUSCH_Resource_Index_r16 = new Asn1Integer (msgA_PUSCH_Resource_Index_r16_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public CFRA_SSB_Resource (
      long ssb_,
      long ra_PreambleIndex_
   ) {
      super();
      ssb = new SSB_Index (ssb_);
      ra_PreambleIndex = new Asn1Integer (ra_PreambleIndex_);
   }

   public void init () {
      ssb = null;
      ra_PreambleIndex = null;
      msgA_PUSCH_Resource_Index_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return ssb;
         case 1: return ra_PreambleIndex;
         case 2: return msgA_PUSCH_Resource_Index_r16;
         case 3: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "ssb";
         case 1: return "ra-PreambleIndex";
         case 2: return "msgA-PUSCH-Resource-Index-r16";
         case 3: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      // decode ssb

      buffer.getContext().eventDispatcher.startElement("ssb", -1);

      ssb = new SSB_Index();
      ssb.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("ssb", -1);

      // decode ra_PreambleIndex

      buffer.getContext().eventDispatcher.startElement("ra_PreambleIndex", -1);

      ra_PreambleIndex = new Asn1Integer();
      ra_PreambleIndex.decode (buffer, 0, 63);

      buffer.invokeCharacters(ra_PreambleIndex.toString());
      buffer.getContext().eventDispatcher.endElement("ra_PreambleIndex", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean msgA_PUSCH_Resource_Index_r16Present = buffer.decodeBit ("msgA_PUSCH_Resource_Index_r16Present");

            // decode msgA_PUSCH_Resource_Index_r16

            if (msgA_PUSCH_Resource_Index_r16Present) {
               buffer.getContext().eventDispatcher.startElement("msgA_PUSCH_Resource_Index_r16", -1);

               msgA_PUSCH_Resource_Index_r16 = new Asn1Integer();
               msgA_PUSCH_Resource_Index_r16.decode (buffer, 0, 3071);

               buffer.invokeCharacters(msgA_PUSCH_Resource_Index_r16.toString());
               buffer.getContext().eventDispatcher.endElement("msgA_PUSCH_Resource_Index_r16", -1);
            }
            else {
               msgA_PUSCH_Resource_Index_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (mV2ExtPresent ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode ssb

      if (ssb != null) {
         buffer.getContext().eventDispatcher.startElement("ssb", -1);

         ssb.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ssb", -1);
      }
      else throw new Asn1MissingRequiredException ("ssb");

      // encode ra_PreambleIndex

      if (ra_PreambleIndex != null) {
         buffer.getContext().eventDispatcher.startElement("ra_PreambleIndex", -1);

         ra_PreambleIndex.encode (buffer, 0, 63);

         buffer.getContext().eventDispatcher.endElement("ra_PreambleIndex", -1);
      }
      else throw new Asn1MissingRequiredException ("ra_PreambleIndex");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 1;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit (mV2ExtPresent, null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         if (mV2ExtPresent) {
            buffer.reset();
            buffer.encodeBit ((msgA_PUSCH_Resource_Index_r16 != null), "optbit");
            if (msgA_PUSCH_Resource_Index_r16 != null) {
               msgA_PUSCH_Resource_Index_r16.encode (buffer, 0, 3071);
            }
            mainBuffer.encodeOpenType (buffer, null);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (ssb != null) ssb.print (_sb, "ssb", _level+1);
      if (ra_PreambleIndex != null) ra_PreambleIndex.print (_sb, "ra_PreambleIndex", _level+1);
      if (msgA_PUSCH_Resource_Index_r16 != null) msgA_PUSCH_Resource_Index_r16.print (_sb, "msgA_PUSCH_Resource_Index_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
