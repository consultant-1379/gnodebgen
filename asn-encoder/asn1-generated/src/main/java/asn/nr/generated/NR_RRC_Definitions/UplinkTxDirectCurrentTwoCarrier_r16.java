/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class UplinkTxDirectCurrentTwoCarrier_r16 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "UplinkTxDirectCurrentTwoCarrier-r16";
   }

   public UplinkTxDirectCurrentCarrierInfo_r16 carrierOneInfo_r16;
   public UplinkTxDirectCurrentCarrierInfo_r16 carrierTwoInfo_r16;
   public UplinkTxDirectCurrentTwoCarrierInfo_r16 singlePA_TxDirectCurrent_r16;
   public UplinkTxDirectCurrentTwoCarrierInfo_r16 secondPA_TxDirectCurrent_r16;  // optional

   public UplinkTxDirectCurrentTwoCarrier_r16 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public UplinkTxDirectCurrentTwoCarrier_r16 (
      UplinkTxDirectCurrentCarrierInfo_r16 carrierOneInfo_r16_,
      UplinkTxDirectCurrentCarrierInfo_r16 carrierTwoInfo_r16_,
      UplinkTxDirectCurrentTwoCarrierInfo_r16 singlePA_TxDirectCurrent_r16_,
      UplinkTxDirectCurrentTwoCarrierInfo_r16 secondPA_TxDirectCurrent_r16_
   ) {
      super();
      carrierOneInfo_r16 = carrierOneInfo_r16_;
      carrierTwoInfo_r16 = carrierTwoInfo_r16_;
      singlePA_TxDirectCurrent_r16 = singlePA_TxDirectCurrent_r16_;
      secondPA_TxDirectCurrent_r16 = secondPA_TxDirectCurrent_r16_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public UplinkTxDirectCurrentTwoCarrier_r16 (
      UplinkTxDirectCurrentCarrierInfo_r16 carrierOneInfo_r16_,
      UplinkTxDirectCurrentCarrierInfo_r16 carrierTwoInfo_r16_,
      UplinkTxDirectCurrentTwoCarrierInfo_r16 singlePA_TxDirectCurrent_r16_
   ) {
      super();
      carrierOneInfo_r16 = carrierOneInfo_r16_;
      carrierTwoInfo_r16 = carrierTwoInfo_r16_;
      singlePA_TxDirectCurrent_r16 = singlePA_TxDirectCurrent_r16_;
   }

   public void init () {
      carrierOneInfo_r16 = null;
      carrierTwoInfo_r16 = null;
      singlePA_TxDirectCurrent_r16 = null;
      secondPA_TxDirectCurrent_r16 = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return carrierOneInfo_r16;
         case 1: return carrierTwoInfo_r16;
         case 2: return singlePA_TxDirectCurrent_r16;
         case 3: return secondPA_TxDirectCurrent_r16;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "carrierOneInfo-r16";
         case 1: return "carrierTwoInfo-r16";
         case 2: return "singlePA-TxDirectCurrent-r16";
         case 3: return "secondPA-TxDirectCurrent-r16";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean secondPA_TxDirectCurrent_r16Present = buffer.decodeBit ("secondPA_TxDirectCurrent_r16Present");

      // decode carrierOneInfo_r16

      buffer.getContext().eventDispatcher.startElement("carrierOneInfo_r16", -1);

      carrierOneInfo_r16 = new UplinkTxDirectCurrentCarrierInfo_r16();
      carrierOneInfo_r16.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("carrierOneInfo_r16", -1);

      // decode carrierTwoInfo_r16

      buffer.getContext().eventDispatcher.startElement("carrierTwoInfo_r16", -1);

      carrierTwoInfo_r16 = new UplinkTxDirectCurrentCarrierInfo_r16();
      carrierTwoInfo_r16.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("carrierTwoInfo_r16", -1);

      // decode singlePA_TxDirectCurrent_r16

      buffer.getContext().eventDispatcher.startElement("singlePA_TxDirectCurrent_r16", -1);

      singlePA_TxDirectCurrent_r16 = new UplinkTxDirectCurrentTwoCarrierInfo_r16();
      singlePA_TxDirectCurrent_r16.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("singlePA_TxDirectCurrent_r16", -1);

      // decode secondPA_TxDirectCurrent_r16

      if (secondPA_TxDirectCurrent_r16Present) {
         buffer.getContext().eventDispatcher.startElement("secondPA_TxDirectCurrent_r16", -1);

         secondPA_TxDirectCurrent_r16 = new UplinkTxDirectCurrentTwoCarrierInfo_r16();
         secondPA_TxDirectCurrent_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("secondPA_TxDirectCurrent_r16", -1);
      }
      else {
         secondPA_TxDirectCurrent_r16 = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((secondPA_TxDirectCurrent_r16 != null), null);

      // encode carrierOneInfo_r16

      if (carrierOneInfo_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("carrierOneInfo_r16", -1);

         carrierOneInfo_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("carrierOneInfo_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("carrierOneInfo_r16");

      // encode carrierTwoInfo_r16

      if (carrierTwoInfo_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("carrierTwoInfo_r16", -1);

         carrierTwoInfo_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("carrierTwoInfo_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("carrierTwoInfo_r16");

      // encode singlePA_TxDirectCurrent_r16

      if (singlePA_TxDirectCurrent_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("singlePA_TxDirectCurrent_r16", -1);

         singlePA_TxDirectCurrent_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("singlePA_TxDirectCurrent_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("singlePA_TxDirectCurrent_r16");

      // encode secondPA_TxDirectCurrent_r16

      if (secondPA_TxDirectCurrent_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("secondPA_TxDirectCurrent_r16", -1);

         secondPA_TxDirectCurrent_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("secondPA_TxDirectCurrent_r16", -1);
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (carrierOneInfo_r16 != null) carrierOneInfo_r16.print (_sb, "carrierOneInfo_r16", _level+1);
      if (carrierTwoInfo_r16 != null) carrierTwoInfo_r16.print (_sb, "carrierTwoInfo_r16", _level+1);
      if (singlePA_TxDirectCurrent_r16 != null) singlePA_TxDirectCurrent_r16.print (_sb, "singlePA_TxDirectCurrent_r16", _level+1);
      if (secondPA_TxDirectCurrent_r16 != null) secondPA_TxDirectCurrent_r16.print (_sb, "secondPA_TxDirectCurrent_r16", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
