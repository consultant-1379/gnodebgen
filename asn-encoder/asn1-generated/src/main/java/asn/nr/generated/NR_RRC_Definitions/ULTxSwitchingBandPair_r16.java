/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class ULTxSwitchingBandPair_r16 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ULTxSwitchingBandPair-r16";
   }

   public Asn1Integer bandIndexUL1_r16;
   public Asn1Integer bandIndexUL2_r16;
   public ULTxSwitchingBandPair_r16_uplinkTxSwitchingPeriod_r16 uplinkTxSwitchingPeriod_r16 = null;
   public Asn1BitString uplinkTxSwitching_DL_Interruption_r16;  // optional

   public ULTxSwitchingBandPair_r16 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ULTxSwitchingBandPair_r16 (
      Asn1Integer bandIndexUL1_r16_,
      Asn1Integer bandIndexUL2_r16_,
      ULTxSwitchingBandPair_r16_uplinkTxSwitchingPeriod_r16 uplinkTxSwitchingPeriod_r16_,
      Asn1BitString uplinkTxSwitching_DL_Interruption_r16_
   ) {
      super();
      bandIndexUL1_r16 = bandIndexUL1_r16_;
      bandIndexUL2_r16 = bandIndexUL2_r16_;
      uplinkTxSwitchingPeriod_r16 = uplinkTxSwitchingPeriod_r16_;
      uplinkTxSwitching_DL_Interruption_r16 = uplinkTxSwitching_DL_Interruption_r16_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public ULTxSwitchingBandPair_r16 (
      Asn1Integer bandIndexUL1_r16_,
      Asn1Integer bandIndexUL2_r16_,
      ULTxSwitchingBandPair_r16_uplinkTxSwitchingPeriod_r16 uplinkTxSwitchingPeriod_r16_
   ) {
      super();
      bandIndexUL1_r16 = bandIndexUL1_r16_;
      bandIndexUL2_r16 = bandIndexUL2_r16_;
      uplinkTxSwitchingPeriod_r16 = uplinkTxSwitchingPeriod_r16_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public ULTxSwitchingBandPair_r16 (long bandIndexUL1_r16_,
      long bandIndexUL2_r16_,
      ULTxSwitchingBandPair_r16_uplinkTxSwitchingPeriod_r16 uplinkTxSwitchingPeriod_r16_,
      Asn1BitString uplinkTxSwitching_DL_Interruption_r16_
   ) {
      super();
      bandIndexUL1_r16 = new Asn1Integer (bandIndexUL1_r16_);
      bandIndexUL2_r16 = new Asn1Integer (bandIndexUL2_r16_);
      uplinkTxSwitchingPeriod_r16 = uplinkTxSwitchingPeriod_r16_;
      uplinkTxSwitching_DL_Interruption_r16 = uplinkTxSwitching_DL_Interruption_r16_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public ULTxSwitchingBandPair_r16 (
      long bandIndexUL1_r16_,
      long bandIndexUL2_r16_,
      ULTxSwitchingBandPair_r16_uplinkTxSwitchingPeriod_r16 uplinkTxSwitchingPeriod_r16_
   ) {
      super();
      bandIndexUL1_r16 = new Asn1Integer (bandIndexUL1_r16_);
      bandIndexUL2_r16 = new Asn1Integer (bandIndexUL2_r16_);
      uplinkTxSwitchingPeriod_r16 = uplinkTxSwitchingPeriod_r16_;
   }

   public void init () {
      bandIndexUL1_r16 = null;
      bandIndexUL2_r16 = null;
      uplinkTxSwitchingPeriod_r16 = null;
      uplinkTxSwitching_DL_Interruption_r16 = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return bandIndexUL1_r16;
         case 1: return bandIndexUL2_r16;
         case 2: return uplinkTxSwitchingPeriod_r16;
         case 3: return uplinkTxSwitching_DL_Interruption_r16;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "bandIndexUL1-r16";
         case 1: return "bandIndexUL2-r16";
         case 2: return "uplinkTxSwitchingPeriod-r16";
         case 3: return "uplinkTxSwitching-DL-Interruption-r16";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean uplinkTxSwitching_DL_Interruption_r16Present = buffer.decodeBit ("uplinkTxSwitching_DL_Interruption_r16Present");

      // decode bandIndexUL1_r16

      buffer.getContext().eventDispatcher.startElement("bandIndexUL1_r16", -1);

      bandIndexUL1_r16 = new Asn1Integer();
      bandIndexUL1_r16.decode (buffer, 1, 32);

      buffer.invokeCharacters(bandIndexUL1_r16.toString());
      buffer.getContext().eventDispatcher.endElement("bandIndexUL1_r16", -1);

      // decode bandIndexUL2_r16

      buffer.getContext().eventDispatcher.startElement("bandIndexUL2_r16", -1);

      bandIndexUL2_r16 = new Asn1Integer();
      bandIndexUL2_r16.decode (buffer, 1, 32);

      buffer.invokeCharacters(bandIndexUL2_r16.toString());
      buffer.getContext().eventDispatcher.endElement("bandIndexUL2_r16", -1);

      // decode uplinkTxSwitchingPeriod_r16

      buffer.getContext().eventDispatcher.startElement("uplinkTxSwitchingPeriod_r16", -1);

      {
         int tval = ULTxSwitchingBandPair_r16_uplinkTxSwitchingPeriod_r16.decodeEnumValue (buffer);
         uplinkTxSwitchingPeriod_r16 = ULTxSwitchingBandPair_r16_uplinkTxSwitchingPeriod_r16.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("uplinkTxSwitchingPeriod_r16", -1);

      // decode uplinkTxSwitching_DL_Interruption_r16

      if (uplinkTxSwitching_DL_Interruption_r16Present) {
         buffer.getContext().eventDispatcher.startElement("uplinkTxSwitching_DL_Interruption_r16", -1);

         uplinkTxSwitching_DL_Interruption_r16 = new Asn1BitString();
         uplinkTxSwitching_DL_Interruption_r16.decode (buffer, 1, 32);

         buffer.invokeCharacters(uplinkTxSwitching_DL_Interruption_r16.toString());
         buffer.getContext().eventDispatcher.endElement("uplinkTxSwitching_DL_Interruption_r16", -1);
      }
      else {
         uplinkTxSwitching_DL_Interruption_r16 = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((uplinkTxSwitching_DL_Interruption_r16 != null), null);

      // encode bandIndexUL1_r16

      if (bandIndexUL1_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("bandIndexUL1_r16", -1);

         bandIndexUL1_r16.encode (buffer, 1, 32);

         buffer.getContext().eventDispatcher.endElement("bandIndexUL1_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("bandIndexUL1_r16");

      // encode bandIndexUL2_r16

      if (bandIndexUL2_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("bandIndexUL2_r16", -1);

         bandIndexUL2_r16.encode (buffer, 1, 32);

         buffer.getContext().eventDispatcher.endElement("bandIndexUL2_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("bandIndexUL2_r16");

      // encode uplinkTxSwitchingPeriod_r16

      if (uplinkTxSwitchingPeriod_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("uplinkTxSwitchingPeriod_r16", -1);

         uplinkTxSwitchingPeriod_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("uplinkTxSwitchingPeriod_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("uplinkTxSwitchingPeriod_r16");

      // encode uplinkTxSwitching_DL_Interruption_r16

      if (uplinkTxSwitching_DL_Interruption_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("uplinkTxSwitching_DL_Interruption_r16", -1);

         uplinkTxSwitching_DL_Interruption_r16.encode (buffer, 1, 32);

         buffer.getContext().eventDispatcher.endElement("uplinkTxSwitching_DL_Interruption_r16", -1);
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (bandIndexUL1_r16 != null) bandIndexUL1_r16.print (_sb, "bandIndexUL1_r16", _level+1);
      if (bandIndexUL2_r16 != null) bandIndexUL2_r16.print (_sb, "bandIndexUL2_r16", _level+1);
      if (uplinkTxSwitchingPeriod_r16 != null) uplinkTxSwitchingPeriod_r16.print (_sb, "uplinkTxSwitchingPeriod_r16", _level+1);
      if (uplinkTxSwitching_DL_Interruption_r16 != null) uplinkTxSwitching_DL_Interruption_r16.print (_sb, "uplinkTxSwitching_DL_Interruption_r16", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
