/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_InterNodeDefinitions;

import com.objsys.asn1j.runtime.*;

public class VictimSystemType extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_InterNodeDefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "VictimSystemType";
   }

   public VictimSystemType_gps gps = null;  // optional
   public VictimSystemType_glonass glonass = null;  // optional
   public VictimSystemType_bds bds = null;  // optional
   public VictimSystemType_galileo galileo = null;  // optional
   public VictimSystemType_wlan wlan = null;  // optional
   public VictimSystemType_bluetooth bluetooth = null;  // optional

   public VictimSystemType () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public VictimSystemType (
      VictimSystemType_gps gps_,
      VictimSystemType_glonass glonass_,
      VictimSystemType_bds bds_,
      VictimSystemType_galileo galileo_,
      VictimSystemType_wlan wlan_,
      VictimSystemType_bluetooth bluetooth_
   ) {
      super();
      gps = gps_;
      glonass = glonass_;
      bds = bds_;
      galileo = galileo_;
      wlan = wlan_;
      bluetooth = bluetooth_;
   }

   public void init () {
      gps = null;
      glonass = null;
      bds = null;
      galileo = null;
      wlan = null;
      bluetooth = null;
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return gps;
         case 1: return glonass;
         case 2: return bds;
         case 3: return galileo;
         case 4: return wlan;
         case 5: return bluetooth;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "gps";
         case 1: return "glonass";
         case 2: return "bds";
         case 3: return "galileo";
         case 4: return "wlan";
         case 5: return "bluetooth";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean gpsPresent = buffer.decodeBit ("gpsPresent");
      boolean glonassPresent = buffer.decodeBit ("glonassPresent");
      boolean bdsPresent = buffer.decodeBit ("bdsPresent");
      boolean galileoPresent = buffer.decodeBit ("galileoPresent");
      boolean wlanPresent = buffer.decodeBit ("wlanPresent");
      boolean bluetoothPresent = buffer.decodeBit ("bluetoothPresent");

      // decode gps

      if (gpsPresent) {
         buffer.getContext().eventDispatcher.startElement("gps", -1);

         int tval = VictimSystemType_gps.decodeEnumValue (buffer);
         gps = VictimSystemType_gps.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("gps", -1);
      }
      else {
         gps = null;
      }

      // decode glonass

      if (glonassPresent) {
         buffer.getContext().eventDispatcher.startElement("glonass", -1);

         int tval = VictimSystemType_glonass.decodeEnumValue (buffer);
         glonass = VictimSystemType_glonass.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("glonass", -1);
      }
      else {
         glonass = null;
      }

      // decode bds

      if (bdsPresent) {
         buffer.getContext().eventDispatcher.startElement("bds", -1);

         int tval = VictimSystemType_bds.decodeEnumValue (buffer);
         bds = VictimSystemType_bds.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("bds", -1);
      }
      else {
         bds = null;
      }

      // decode galileo

      if (galileoPresent) {
         buffer.getContext().eventDispatcher.startElement("galileo", -1);

         int tval = VictimSystemType_galileo.decodeEnumValue (buffer);
         galileo = VictimSystemType_galileo.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("galileo", -1);
      }
      else {
         galileo = null;
      }

      // decode wlan

      if (wlanPresent) {
         buffer.getContext().eventDispatcher.startElement("wlan", -1);

         int tval = VictimSystemType_wlan.decodeEnumValue (buffer);
         wlan = VictimSystemType_wlan.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("wlan", -1);
      }
      else {
         wlan = null;
      }

      // decode bluetooth

      if (bluetoothPresent) {
         buffer.getContext().eventDispatcher.startElement("bluetooth", -1);

         int tval = VictimSystemType_bluetooth.decodeEnumValue (buffer);
         bluetooth = VictimSystemType_bluetooth.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("bluetooth", -1);
      }
      else {
         bluetooth = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((gps != null), null);
      buffer.encodeBit ((glonass != null), null);
      buffer.encodeBit ((bds != null), null);
      buffer.encodeBit ((galileo != null), null);
      buffer.encodeBit ((wlan != null), null);
      buffer.encodeBit ((bluetooth != null), null);

      // encode gps

      if (gps != null) {
         buffer.getContext().eventDispatcher.startElement("gps", -1);

         gps.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("gps", -1);
      }

      // encode glonass

      if (glonass != null) {
         buffer.getContext().eventDispatcher.startElement("glonass", -1);

         glonass.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("glonass", -1);
      }

      // encode bds

      if (bds != null) {
         buffer.getContext().eventDispatcher.startElement("bds", -1);

         bds.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("bds", -1);
      }

      // encode galileo

      if (galileo != null) {
         buffer.getContext().eventDispatcher.startElement("galileo", -1);

         galileo.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("galileo", -1);
      }

      // encode wlan

      if (wlan != null) {
         buffer.getContext().eventDispatcher.startElement("wlan", -1);

         wlan.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("wlan", -1);
      }

      // encode bluetooth

      if (bluetooth != null) {
         buffer.getContext().eventDispatcher.startElement("bluetooth", -1);

         bluetooth.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("bluetooth", -1);
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (gps != null) gps.print (_sb, "gps", _level+1);
      if (glonass != null) glonass.print (_sb, "glonass", _level+1);
      if (bds != null) bds.print (_sb, "bds", _level+1);
      if (galileo != null) galileo.print (_sb, "galileo", _level+1);
      if (wlan != null) wlan.print (_sb, "wlan", _level+1);
      if (bluetooth != null) bluetooth.print (_sb, "bluetooth", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
