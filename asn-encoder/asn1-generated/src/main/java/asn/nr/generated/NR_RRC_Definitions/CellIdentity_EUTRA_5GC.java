/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class CellIdentity_EUTRA_5GC extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CellIdentity-EUTRA-5GC";
   }

   // Choice element identifier constants
   public final static byte _CELLIDENTITY_EUTRA = 1;
   public final static byte _CELLID_INDEX = 2;

   public CellIdentity_EUTRA_5GC () {
      super();
   }

   public CellIdentity_EUTRA_5GC (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _CELLIDENTITY_EUTRA: return "cellIdentity_EUTRA";
      case _CELLID_INDEX: return "cellId_index";
      default: return "UNDEFINED";
      }
   }

   public void set_cellIdentity_EUTRA (Asn1BitString value) {
      setElement (_CELLIDENTITY_EUTRA, value);
   }

   public void set_cellId_index (Asn1Integer value) {
      setElement (_CELLID_INDEX, value);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int idx = (int) buffer.decodeConsWholeNumber (2, "index");
      choiceID = idx + 1;
      buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

      switch (idx) {
         // cellIdentity_EUTRA
         case 0: { 
            Asn1BitString cellIdentity_EUTRA;
            element = cellIdentity_EUTRA = new Asn1BitString();
            cellIdentity_EUTRA.decode (buffer, 28, 28);

            buffer.invokeCharacters(cellIdentity_EUTRA.toString());
            break;
         }

         // cellId_index
         case 1: { 
            Asn1Integer cellId_index;
            element = cellId_index = new Asn1Integer();
            cellId_index.decode (buffer, 1, 12);

            buffer.invokeCharacters(cellId_index.toString());
            break;
         }

         default:
         throw new Asn1InvalidChoiceOptionException (buffer, idx);
      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // Encode choice index value

      buffer.encodeConsWholeNumber (choiceID - 1, 2, "index");

      buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

      switch (choiceID) {
         // cellIdentity_EUTRA
         case _CELLIDENTITY_EUTRA:
            Asn1BitString cellIdentity_EUTRA = (Asn1BitString) element;
            cellIdentity_EUTRA.encode (buffer, 28, 28);
            break;

         // cellId_index
         case _CELLID_INDEX:
            Asn1Integer cellId_index = (Asn1Integer) element;
            cellId_index.encode (buffer, 1, 12);
            break;

         default:
         throw new Asn1InvalidChoiceOptionException();
      }

      buffer.getContext().eventDispatcher.endElement("getElemName()", -1);
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (element != null) {
         element.print (_sb, getElemName(), _level+1);
      }
      indent (_sb, _level);
      _sb.append("}\n");
   }

}
