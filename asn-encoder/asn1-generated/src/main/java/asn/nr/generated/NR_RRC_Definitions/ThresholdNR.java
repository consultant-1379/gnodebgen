/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class ThresholdNR extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ThresholdNR";
   }

   public RSRP_Range thresholdRSRP;  // optional
   public RSRQ_Range thresholdRSRQ;  // optional
   public SINR_Range thresholdSINR;  // optional

   public ThresholdNR () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ThresholdNR (
      RSRP_Range thresholdRSRP_,
      RSRQ_Range thresholdRSRQ_,
      SINR_Range thresholdSINR_
   ) {
      super();
      thresholdRSRP = thresholdRSRP_;
      thresholdRSRQ = thresholdRSRQ_;
      thresholdSINR = thresholdSINR_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public ThresholdNR (long thresholdRSRP_,
      long thresholdRSRQ_,
      long thresholdSINR_
   ) {
      super();
      thresholdRSRP = new RSRP_Range (thresholdRSRP_);
      thresholdRSRQ = new RSRQ_Range (thresholdRSRQ_);
      thresholdSINR = new SINR_Range (thresholdSINR_);
   }

   public void init () {
      thresholdRSRP = null;
      thresholdRSRQ = null;
      thresholdSINR = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return thresholdRSRP;
         case 1: return thresholdRSRQ;
         case 2: return thresholdSINR;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "thresholdRSRP";
         case 1: return "thresholdRSRQ";
         case 2: return "thresholdSINR";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean thresholdRSRPPresent = buffer.decodeBit ("thresholdRSRPPresent");
      boolean thresholdRSRQPresent = buffer.decodeBit ("thresholdRSRQPresent");
      boolean thresholdSINRPresent = buffer.decodeBit ("thresholdSINRPresent");

      // decode thresholdRSRP

      if (thresholdRSRPPresent) {
         buffer.getContext().eventDispatcher.startElement("thresholdRSRP", -1);

         thresholdRSRP = new RSRP_Range();
         thresholdRSRP.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("thresholdRSRP", -1);
      }
      else {
         thresholdRSRP = null;
      }

      // decode thresholdRSRQ

      if (thresholdRSRQPresent) {
         buffer.getContext().eventDispatcher.startElement("thresholdRSRQ", -1);

         thresholdRSRQ = new RSRQ_Range();
         thresholdRSRQ.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("thresholdRSRQ", -1);
      }
      else {
         thresholdRSRQ = null;
      }

      // decode thresholdSINR

      if (thresholdSINRPresent) {
         buffer.getContext().eventDispatcher.startElement("thresholdSINR", -1);

         thresholdSINR = new SINR_Range();
         thresholdSINR.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("thresholdSINR", -1);
      }
      else {
         thresholdSINR = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((thresholdRSRP != null), null);
      buffer.encodeBit ((thresholdRSRQ != null), null);
      buffer.encodeBit ((thresholdSINR != null), null);

      // encode thresholdRSRP

      if (thresholdRSRP != null) {
         buffer.getContext().eventDispatcher.startElement("thresholdRSRP", -1);

         thresholdRSRP.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("thresholdRSRP", -1);
      }

      // encode thresholdRSRQ

      if (thresholdRSRQ != null) {
         buffer.getContext().eventDispatcher.startElement("thresholdRSRQ", -1);

         thresholdRSRQ.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("thresholdRSRQ", -1);
      }

      // encode thresholdSINR

      if (thresholdSINR != null) {
         buffer.getContext().eventDispatcher.startElement("thresholdSINR", -1);

         thresholdSINR.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("thresholdSINR", -1);
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (thresholdRSRP != null) thresholdRSRP.print (_sb, "thresholdRSRP", _level+1);
      if (thresholdRSRQ != null) thresholdRSRQ.print (_sb, "thresholdRSRQ", _level+1);
      if (thresholdSINR != null) thresholdSINR.print (_sb, "thresholdSINR", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
