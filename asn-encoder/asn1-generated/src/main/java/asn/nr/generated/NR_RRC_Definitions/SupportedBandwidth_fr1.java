/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SupportedBandwidth_fr1 extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ENUMERATED";
   }

   // Integer constants for switch-case
   public static final int _MHZ5 = 0;
   public static final int _MHZ10 = 1;
   public static final int _MHZ15 = 2;
   public static final int _MHZ20 = 3;
   public static final int _MHZ25 = 4;
   public static final int _MHZ30 = 5;
   public static final int _MHZ40 = 6;
   public static final int _MHZ50 = 7;
   public static final int _MHZ60 = 8;
   public static final int _MHZ80 = 9;
   public static final int _MHZ100 = 10;

   // Singleton instances of SupportedBandwidth_fr1
   protected static final SupportedBandwidth_fr1 _mhz5 = new SupportedBandwidth_fr1(0);
   protected static final SupportedBandwidth_fr1 _mhz10 = new SupportedBandwidth_fr1(1);
   protected static final SupportedBandwidth_fr1 _mhz15 = new SupportedBandwidth_fr1(2);
   protected static final SupportedBandwidth_fr1 _mhz20 = new SupportedBandwidth_fr1(3);
   protected static final SupportedBandwidth_fr1 _mhz25 = new SupportedBandwidth_fr1(4);
   protected static final SupportedBandwidth_fr1 _mhz30 = new SupportedBandwidth_fr1(5);
   protected static final SupportedBandwidth_fr1 _mhz40 = new SupportedBandwidth_fr1(6);
   protected static final SupportedBandwidth_fr1 _mhz50 = new SupportedBandwidth_fr1(7);
   protected static final SupportedBandwidth_fr1 _mhz60 = new SupportedBandwidth_fr1(8);
   protected static final SupportedBandwidth_fr1 _mhz80 = new SupportedBandwidth_fr1(9);
   protected static final SupportedBandwidth_fr1 _mhz100 = new SupportedBandwidth_fr1(10);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    *   7
    *   8
    *   9
    *   10
    */
   protected SupportedBandwidth_fr1 (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for mhz5.
    */
   public static SupportedBandwidth_fr1 mhz5() {
      return _mhz5;
   }

   /**
    * Singleton accessor method for mhz10.
    */
   public static SupportedBandwidth_fr1 mhz10() {
      return _mhz10;
   }

   /**
    * Singleton accessor method for mhz15.
    */
   public static SupportedBandwidth_fr1 mhz15() {
      return _mhz15;
   }

   /**
    * Singleton accessor method for mhz20.
    */
   public static SupportedBandwidth_fr1 mhz20() {
      return _mhz20;
   }

   /**
    * Singleton accessor method for mhz25.
    */
   public static SupportedBandwidth_fr1 mhz25() {
      return _mhz25;
   }

   /**
    * Singleton accessor method for mhz30.
    */
   public static SupportedBandwidth_fr1 mhz30() {
      return _mhz30;
   }

   /**
    * Singleton accessor method for mhz40.
    */
   public static SupportedBandwidth_fr1 mhz40() {
      return _mhz40;
   }

   /**
    * Singleton accessor method for mhz50.
    */
   public static SupportedBandwidth_fr1 mhz50() {
      return _mhz50;
   }

   /**
    * Singleton accessor method for mhz60.
    */
   public static SupportedBandwidth_fr1 mhz60() {
      return _mhz60;
   }

   /**
    * Singleton accessor method for mhz80.
    */
   public static SupportedBandwidth_fr1 mhz80() {
      return _mhz80;
   }

   /**
    * Singleton accessor method for mhz100.
    */
   public static SupportedBandwidth_fr1 mhz100() {
      return _mhz100;
   }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return SupportedBandwidth_fr1.valueOf( SupportedBandwidth_fr1.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static SupportedBandwidth_fr1 valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 0: return mhz5();
         case 1: return mhz10();
         case 2: return mhz15();
         case 3: return mhz20();
         case 4: return mhz25();
         case 5: return mhz30();
         case 6: return mhz40();
         case 7: return mhz50();
         case 8: return mhz60();
         case 9: return mhz80();
         case 10: return mhz100();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      ui = (int) buffer.decodeConsWholeNumber (11);

      switch (ui) {
         case 0: ret =  0; break;
         case 1: ret =  1; break;
         case 2: ret =  2; break;
         case 3: ret =  3; break;
         case 4: ret =  4; break;
         case 5: ret =  5; break;
         case 6: ret =  6; break;
         case 7: ret =  7; break;
         case 8: ret =  8; break;
         case 9: ret =  9; break;
         case 10: ret =  10; break;
         default: throw new Asn1InvalidEnumException (ui);
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (SupportedBandwidth_fr1.valueOf(ret).toString());

      return ret;
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      switch ((int)value) {
         case 0: ui = 0; /* mhz5 */break;
         case 1: ui = 1; /* mhz10 */break;
         case 2: ui = 2; /* mhz15 */break;
         case 3: ui = 3; /* mhz20 */break;
         case 4: ui = 4; /* mhz25 */break;
         case 5: ui = 5; /* mhz30 */break;
         case 6: ui = 6; /* mhz40 */break;
         case 7: ui = 7; /* mhz50 */break;
         case 8: ui = 8; /* mhz60 */break;
         case 9: ui = 9; /* mhz80 */break;
         case 10: ui = 10; /* mhz100 */break;
         default:
            throw new Asn1InvalidEnumException (value);
      }

      buffer.encodeConsWholeNumber (ui, 11);
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("mhz5");
         case 1: return ("mhz10");
         case 2: return ("mhz15");
         case 3: return ("mhz20");
         case 4: return ("mhz25");
         case 5: return ("mhz30");
         case 6: return ("mhz40");
         case 7: return ("mhz50");
         case 8: return ("mhz60");
         case 9: return ("mhz80");
         case 10: return ("mhz100");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
