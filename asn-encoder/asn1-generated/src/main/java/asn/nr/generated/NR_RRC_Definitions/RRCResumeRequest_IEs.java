/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class RRCResumeRequest_IEs extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "RRCResumeRequest-IEs";
   }

   public ShortI_RNTI_Value resumeIdentity;
   public Asn1BitString resumeMAC_I;
   public ResumeCause resumeCause = null;
   public Asn1BitString spare;

   public RRCResumeRequest_IEs () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public RRCResumeRequest_IEs (
      ShortI_RNTI_Value resumeIdentity_,
      Asn1BitString resumeMAC_I_,
      ResumeCause resumeCause_,
      Asn1BitString spare_
   ) {
      super();
      resumeIdentity = resumeIdentity_;
      resumeMAC_I = resumeMAC_I_;
      resumeCause = resumeCause_;
      spare = spare_;
   }

   public void init () {
      resumeIdentity = null;
      resumeMAC_I = null;
      resumeCause = null;
      spare = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return resumeIdentity;
         case 1: return resumeMAC_I;
         case 2: return resumeCause;
         case 3: return spare;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "resumeIdentity";
         case 1: return "resumeMAC-I";
         case 2: return "resumeCause";
         case 3: return "spare";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode resumeIdentity

      buffer.getContext().eventDispatcher.startElement("resumeIdentity", -1);

      resumeIdentity = new ShortI_RNTI_Value();
      resumeIdentity.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("resumeIdentity", -1);

      // decode resumeMAC_I

      buffer.getContext().eventDispatcher.startElement("resumeMAC_I", -1);

      resumeMAC_I = new Asn1BitString();
      resumeMAC_I.decode (buffer, 16, 16);

      buffer.invokeCharacters(resumeMAC_I.toString());
      buffer.getContext().eventDispatcher.endElement("resumeMAC_I", -1);

      // decode resumeCause

      buffer.getContext().eventDispatcher.startElement("resumeCause", -1);

      {
         int tval = ResumeCause.decodeEnumValue (buffer);
         resumeCause = ResumeCause.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("resumeCause", -1);

      // decode spare

      buffer.getContext().eventDispatcher.startElement("spare", -1);

      spare = new Asn1BitString();
      spare.decode (buffer, 1, 1);

      buffer.invokeCharacters(spare.toString());
      buffer.getContext().eventDispatcher.endElement("spare", -1);

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode resumeIdentity

      if (resumeIdentity != null) {
         buffer.getContext().eventDispatcher.startElement("resumeIdentity", -1);

         resumeIdentity.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("resumeIdentity", -1);
      }
      else throw new Asn1MissingRequiredException ("resumeIdentity");

      // encode resumeMAC_I

      if (resumeMAC_I != null) {
         buffer.getContext().eventDispatcher.startElement("resumeMAC_I", -1);

         resumeMAC_I.encode (buffer, 16, 16);

         buffer.getContext().eventDispatcher.endElement("resumeMAC_I", -1);
      }
      else throw new Asn1MissingRequiredException ("resumeMAC_I");

      // encode resumeCause

      if (resumeCause != null) {
         buffer.getContext().eventDispatcher.startElement("resumeCause", -1);

         resumeCause.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("resumeCause", -1);
      }
      else throw new Asn1MissingRequiredException ("resumeCause");

      // encode spare

      if (spare != null) {
         buffer.getContext().eventDispatcher.startElement("spare", -1);

         spare.encode (buffer, 1, 1);

         buffer.getContext().eventDispatcher.endElement("spare", -1);
      }
      else throw new Asn1MissingRequiredException ("spare");

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (resumeIdentity != null) resumeIdentity.print (_sb, "resumeIdentity", _level+1);
      if (resumeMAC_I != null) resumeMAC_I.print (_sb, "resumeMAC_I", _level+1);
      if (resumeCause != null) resumeCause.print (_sb, "resumeCause", _level+1);
      if (spare != null) spare.print (_sb, "spare", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
