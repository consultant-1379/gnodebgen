/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class BandNR_channelBW_UL_IAB_r16 extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CHOICE";
   }

   // Choice element identifier constants
   public final static byte _FR1_100MHZ = 1;
   public final static byte _FR2_200MHZ = 2;

   public BandNR_channelBW_UL_IAB_r16 () {
      super();
   }

   public BandNR_channelBW_UL_IAB_r16 (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _FR1_100MHZ: return "fr1_100mhz";
      case _FR2_200MHZ: return "fr2_200mhz";
      default: return "UNDEFINED";
      }
   }

   public void set_fr1_100mhz (BandNR_channelBW_UL_IAB_r16_fr1_100mhz value) {
      setElement (_FR1_100MHZ, value);
   }

   public void set_fr2_200mhz (BandNR_channelBW_UL_IAB_r16_fr2_200mhz value) {
      setElement (_FR2_200MHZ, value);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int idx = (int) buffer.decodeConsWholeNumber (2, "index");
      choiceID = idx + 1;
      buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

      switch (idx) {
         // fr1_100mhz
         case 0: { 
            BandNR_channelBW_UL_IAB_r16_fr1_100mhz fr1_100mhz;
            element = fr1_100mhz = new BandNR_channelBW_UL_IAB_r16_fr1_100mhz();
            fr1_100mhz.decode (buffer);
            break;
         }

         // fr2_200mhz
         case 1: { 
            BandNR_channelBW_UL_IAB_r16_fr2_200mhz fr2_200mhz;
            element = fr2_200mhz = new BandNR_channelBW_UL_IAB_r16_fr2_200mhz();
            fr2_200mhz.decode (buffer);
            break;
         }

         default:
         throw new Asn1InvalidChoiceOptionException (buffer, idx);
      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // Encode choice index value

      buffer.encodeConsWholeNumber (choiceID - 1, 2, "index");

      buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

      switch (choiceID) {
         // fr1_100mhz
         case _FR1_100MHZ:
            BandNR_channelBW_UL_IAB_r16_fr1_100mhz fr1_100mhz = (BandNR_channelBW_UL_IAB_r16_fr1_100mhz) element;
            fr1_100mhz.encode (buffer);
            break;

         // fr2_200mhz
         case _FR2_200MHZ:
            BandNR_channelBW_UL_IAB_r16_fr2_200mhz fr2_200mhz = (BandNR_channelBW_UL_IAB_r16_fr2_200mhz) element;
            fr2_200mhz.encode (buffer);
            break;

         default:
         throw new Asn1InvalidChoiceOptionException();
      }

      buffer.getContext().eventDispatcher.endElement("getElemName()", -1);
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (element != null) {
         element.print (_sb, getElemName(), _level+1);
      }
      indent (_sb, _level);
      _sb.append("}\n");
   }

}
