/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MeasQuantityResultsEUTRA extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "MeasQuantityResultsEUTRA";
   }

   public RSRP_RangeEUTRA rsrp;  // optional
   public RSRQ_RangeEUTRA rsrq;  // optional
   public SINR_RangeEUTRA sinr;  // optional

   public MeasQuantityResultsEUTRA () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MeasQuantityResultsEUTRA (
      RSRP_RangeEUTRA rsrp_,
      RSRQ_RangeEUTRA rsrq_,
      SINR_RangeEUTRA sinr_
   ) {
      super();
      rsrp = rsrp_;
      rsrq = rsrq_;
      sinr = sinr_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public MeasQuantityResultsEUTRA (long rsrp_,
      long rsrq_,
      long sinr_
   ) {
      super();
      rsrp = new RSRP_RangeEUTRA (rsrp_);
      rsrq = new RSRQ_RangeEUTRA (rsrq_);
      sinr = new SINR_RangeEUTRA (sinr_);
   }

   public void init () {
      rsrp = null;
      rsrq = null;
      sinr = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return rsrp;
         case 1: return rsrq;
         case 2: return sinr;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "rsrp";
         case 1: return "rsrq";
         case 2: return "sinr";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean rsrpPresent = buffer.decodeBit ("rsrpPresent");
      boolean rsrqPresent = buffer.decodeBit ("rsrqPresent");
      boolean sinrPresent = buffer.decodeBit ("sinrPresent");

      // decode rsrp

      if (rsrpPresent) {
         buffer.getContext().eventDispatcher.startElement("rsrp", -1);

         rsrp = new RSRP_RangeEUTRA();
         rsrp.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("rsrp", -1);
      }
      else {
         rsrp = null;
      }

      // decode rsrq

      if (rsrqPresent) {
         buffer.getContext().eventDispatcher.startElement("rsrq", -1);

         rsrq = new RSRQ_RangeEUTRA();
         rsrq.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("rsrq", -1);
      }
      else {
         rsrq = null;
      }

      // decode sinr

      if (sinrPresent) {
         buffer.getContext().eventDispatcher.startElement("sinr", -1);

         sinr = new SINR_RangeEUTRA();
         sinr.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sinr", -1);
      }
      else {
         sinr = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((rsrp != null), null);
      buffer.encodeBit ((rsrq != null), null);
      buffer.encodeBit ((sinr != null), null);

      // encode rsrp

      if (rsrp != null) {
         buffer.getContext().eventDispatcher.startElement("rsrp", -1);

         rsrp.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("rsrp", -1);
      }

      // encode rsrq

      if (rsrq != null) {
         buffer.getContext().eventDispatcher.startElement("rsrq", -1);

         rsrq.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("rsrq", -1);
      }

      // encode sinr

      if (sinr != null) {
         buffer.getContext().eventDispatcher.startElement("sinr", -1);

         sinr.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sinr", -1);
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (rsrp != null) rsrp.print (_sb, "rsrp", _level+1);
      if (rsrq != null) rsrq.print (_sb, "rsrq", _level+1);
      if (sinr != null) sinr.print (_sb, "sinr", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
