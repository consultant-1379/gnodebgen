/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class EUTRA_BlackCell extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "EUTRA-BlackCell";
   }

   public EUTRA_CellIndex cellIndexEUTRA;
   public EUTRA_PhysCellIdRange physCellIdRange;

   public EUTRA_BlackCell () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public EUTRA_BlackCell (
      EUTRA_CellIndex cellIndexEUTRA_,
      EUTRA_PhysCellIdRange physCellIdRange_
   ) {
      super();
      cellIndexEUTRA = cellIndexEUTRA_;
      physCellIdRange = physCellIdRange_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public EUTRA_BlackCell (long cellIndexEUTRA_,
      EUTRA_PhysCellIdRange physCellIdRange_
   ) {
      super();
      cellIndexEUTRA = new EUTRA_CellIndex (cellIndexEUTRA_);
      physCellIdRange = physCellIdRange_;
   }

   public void init () {
      cellIndexEUTRA = null;
      physCellIdRange = null;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return cellIndexEUTRA;
         case 1: return physCellIdRange;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "cellIndexEUTRA";
         case 1: return "physCellIdRange";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode cellIndexEUTRA

      buffer.getContext().eventDispatcher.startElement("cellIndexEUTRA", -1);

      cellIndexEUTRA = new EUTRA_CellIndex();
      cellIndexEUTRA.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("cellIndexEUTRA", -1);

      // decode physCellIdRange

      buffer.getContext().eventDispatcher.startElement("physCellIdRange", -1);

      physCellIdRange = new EUTRA_PhysCellIdRange();
      physCellIdRange.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("physCellIdRange", -1);

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode cellIndexEUTRA

      if (cellIndexEUTRA != null) {
         buffer.getContext().eventDispatcher.startElement("cellIndexEUTRA", -1);

         cellIndexEUTRA.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("cellIndexEUTRA", -1);
      }
      else throw new Asn1MissingRequiredException ("cellIndexEUTRA");

      // encode physCellIdRange

      if (physCellIdRange != null) {
         buffer.getContext().eventDispatcher.startElement("physCellIdRange", -1);

         physCellIdRange.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("physCellIdRange", -1);
      }
      else throw new Asn1MissingRequiredException ("physCellIdRange");

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (cellIndexEUTRA != null) cellIndexEUTRA.print (_sb, "cellIndexEUTRA", _level+1);
      if (physCellIdRange != null) physCellIdRange.print (_sb, "physCellIdRange", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
