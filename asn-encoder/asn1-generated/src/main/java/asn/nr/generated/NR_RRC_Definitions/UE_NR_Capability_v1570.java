/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class UE_NR_Capability_v1570 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "UE-NR-Capability-v1570";
   }

   public NRDC_Parameters_v1570 nrdc_Parameters_v1570;  // optional
   public UE_NR_Capability_v1610 nonCriticalExtension;  // optional

   public UE_NR_Capability_v1570 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public UE_NR_Capability_v1570 (
      NRDC_Parameters_v1570 nrdc_Parameters_v1570_,
      UE_NR_Capability_v1610 nonCriticalExtension_
   ) {
      super();
      nrdc_Parameters_v1570 = nrdc_Parameters_v1570_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   public void init () {
      nrdc_Parameters_v1570 = null;
      nonCriticalExtension = null;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return nrdc_Parameters_v1570;
         case 1: return nonCriticalExtension;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "nrdc-Parameters-v1570";
         case 1: return "nonCriticalExtension";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean nrdc_Parameters_v1570Present = buffer.decodeBit ("nrdc_Parameters_v1570Present");
      boolean nonCriticalExtensionPresent = buffer.decodeBit ("nonCriticalExtensionPresent");

      // decode nrdc_Parameters_v1570

      if (nrdc_Parameters_v1570Present) {
         buffer.getContext().eventDispatcher.startElement("nrdc_Parameters_v1570", -1);

         nrdc_Parameters_v1570 = new NRDC_Parameters_v1570();
         nrdc_Parameters_v1570.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nrdc_Parameters_v1570", -1);
      }
      else {
         nrdc_Parameters_v1570 = null;
      }

      // decode nonCriticalExtension

      if (nonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension = new UE_NR_Capability_v1610();
         nonCriticalExtension.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }
      else {
         nonCriticalExtension = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((nrdc_Parameters_v1570 != null), null);
      buffer.encodeBit ((nonCriticalExtension != null), null);

      // encode nrdc_Parameters_v1570

      if (nrdc_Parameters_v1570 != null) {
         buffer.getContext().eventDispatcher.startElement("nrdc_Parameters_v1570", -1);

         nrdc_Parameters_v1570.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("nrdc_Parameters_v1570", -1);
      }

      // encode nonCriticalExtension

      if (nonCriticalExtension != null) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (nrdc_Parameters_v1570 != null) nrdc_Parameters_v1570.print (_sb, "nrdc_Parameters_v1570", _level+1);
      if (nonCriticalExtension != null) nonCriticalExtension.print (_sb, "nonCriticalExtension", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
