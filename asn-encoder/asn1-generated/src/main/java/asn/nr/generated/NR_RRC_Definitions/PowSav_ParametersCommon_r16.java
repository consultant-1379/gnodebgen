/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class PowSav_ParametersCommon_r16 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "PowSav-ParametersCommon-r16";
   }

   public PowSav_ParametersCommon_r16_drx_Preference_r16 drx_Preference_r16 = null;  // optional
   public PowSav_ParametersCommon_r16_maxCC_Preference_r16 maxCC_Preference_r16 = null;  // optional
   public PowSav_ParametersCommon_r16_releasePreference_r16 releasePreference_r16 = null;  // optional
   public PowSav_ParametersCommon_r16_minSchedulingOffsetPreference_r16 minSchedulingOffsetPreference_r16 = null;  // optional
   public Asn1OpenExt extElem1;

   public PowSav_ParametersCommon_r16 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public PowSav_ParametersCommon_r16 (
      PowSav_ParametersCommon_r16_drx_Preference_r16 drx_Preference_r16_,
      PowSav_ParametersCommon_r16_maxCC_Preference_r16 maxCC_Preference_r16_,
      PowSav_ParametersCommon_r16_releasePreference_r16 releasePreference_r16_,
      PowSav_ParametersCommon_r16_minSchedulingOffsetPreference_r16 minSchedulingOffsetPreference_r16_
   ) {
      super();
      drx_Preference_r16 = drx_Preference_r16_;
      maxCC_Preference_r16 = maxCC_Preference_r16_;
      releasePreference_r16 = releasePreference_r16_;
      minSchedulingOffsetPreference_r16 = minSchedulingOffsetPreference_r16_;
   }

   public void init () {
      drx_Preference_r16 = null;
      maxCC_Preference_r16 = null;
      releasePreference_r16 = null;
      minSchedulingOffsetPreference_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return drx_Preference_r16;
         case 1: return maxCC_Preference_r16;
         case 2: return releasePreference_r16;
         case 3: return minSchedulingOffsetPreference_r16;
         case 4: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "drx-Preference-r16";
         case 1: return "maxCC-Preference-r16";
         case 2: return "releasePreference-r16";
         case 3: return "minSchedulingOffsetPreference-r16";
         case 4: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean drx_Preference_r16Present = buffer.decodeBit ("drx_Preference_r16Present");
      boolean maxCC_Preference_r16Present = buffer.decodeBit ("maxCC_Preference_r16Present");
      boolean releasePreference_r16Present = buffer.decodeBit ("releasePreference_r16Present");
      boolean minSchedulingOffsetPreference_r16Present = buffer.decodeBit ("minSchedulingOffsetPreference_r16Present");

      // decode drx_Preference_r16

      if (drx_Preference_r16Present) {
         buffer.getContext().eventDispatcher.startElement("drx_Preference_r16", -1);

         int tval = PowSav_ParametersCommon_r16_drx_Preference_r16.decodeEnumValue (buffer);
         drx_Preference_r16 = PowSav_ParametersCommon_r16_drx_Preference_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("drx_Preference_r16", -1);
      }
      else {
         drx_Preference_r16 = null;
      }

      // decode maxCC_Preference_r16

      if (maxCC_Preference_r16Present) {
         buffer.getContext().eventDispatcher.startElement("maxCC_Preference_r16", -1);

         int tval = PowSav_ParametersCommon_r16_maxCC_Preference_r16.decodeEnumValue (buffer);
         maxCC_Preference_r16 = PowSav_ParametersCommon_r16_maxCC_Preference_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("maxCC_Preference_r16", -1);
      }
      else {
         maxCC_Preference_r16 = null;
      }

      // decode releasePreference_r16

      if (releasePreference_r16Present) {
         buffer.getContext().eventDispatcher.startElement("releasePreference_r16", -1);

         int tval = PowSav_ParametersCommon_r16_releasePreference_r16.decodeEnumValue (buffer);
         releasePreference_r16 = PowSav_ParametersCommon_r16_releasePreference_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("releasePreference_r16", -1);
      }
      else {
         releasePreference_r16 = null;
      }

      // decode minSchedulingOffsetPreference_r16

      if (minSchedulingOffsetPreference_r16Present) {
         buffer.getContext().eventDispatcher.startElement("minSchedulingOffsetPreference_r16", -1);

         int tval = PowSav_ParametersCommon_r16_minSchedulingOffsetPreference_r16.decodeEnumValue (buffer);
         minSchedulingOffsetPreference_r16 = PowSav_ParametersCommon_r16_minSchedulingOffsetPreference_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("minSchedulingOffsetPreference_r16", -1);
      }
      else {
         minSchedulingOffsetPreference_r16 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((drx_Preference_r16 != null), null);
      buffer.encodeBit ((maxCC_Preference_r16 != null), null);
      buffer.encodeBit ((releasePreference_r16 != null), null);
      buffer.encodeBit ((minSchedulingOffsetPreference_r16 != null), null);

      // encode drx_Preference_r16

      if (drx_Preference_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("drx_Preference_r16", -1);

         drx_Preference_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("drx_Preference_r16", -1);
      }

      // encode maxCC_Preference_r16

      if (maxCC_Preference_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("maxCC_Preference_r16", -1);

         maxCC_Preference_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("maxCC_Preference_r16", -1);
      }

      // encode releasePreference_r16

      if (releasePreference_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("releasePreference_r16", -1);

         releasePreference_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("releasePreference_r16", -1);
      }

      // encode minSchedulingOffsetPreference_r16

      if (minSchedulingOffsetPreference_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("minSchedulingOffsetPreference_r16", -1);

         minSchedulingOffsetPreference_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("minSchedulingOffsetPreference_r16", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (drx_Preference_r16 != null) drx_Preference_r16.print (_sb, "drx_Preference_r16", _level+1);
      if (maxCC_Preference_r16 != null) maxCC_Preference_r16.print (_sb, "maxCC_Preference_r16", _level+1);
      if (releasePreference_r16 != null) releasePreference_r16.print (_sb, "releasePreference_r16", _level+1);
      if (minSchedulingOffsetPreference_r16 != null) minSchedulingOffsetPreference_r16.print (_sb, "minSchedulingOffsetPreference_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
