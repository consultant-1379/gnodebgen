/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SS_RSSI_Measurement extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SS-RSSI-Measurement";
   }

   public Asn1BitString measurementSlots;
   public Asn1Integer endSymbol;

   public SS_RSSI_Measurement () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SS_RSSI_Measurement (
      Asn1BitString measurementSlots_,
      Asn1Integer endSymbol_
   ) {
      super();
      measurementSlots = measurementSlots_;
      endSymbol = endSymbol_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SS_RSSI_Measurement (Asn1BitString measurementSlots_,
      long endSymbol_
   ) {
      super();
      measurementSlots = measurementSlots_;
      endSymbol = new Asn1Integer (endSymbol_);
   }

   public void init () {
      measurementSlots = null;
      endSymbol = null;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return measurementSlots;
         case 1: return endSymbol;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "measurementSlots";
         case 1: return "endSymbol";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode measurementSlots

      buffer.getContext().eventDispatcher.startElement("measurementSlots", -1);

      measurementSlots = new Asn1BitString();
      measurementSlots.decode (buffer, 1, 80);

      buffer.invokeCharacters(measurementSlots.toString());
      buffer.getContext().eventDispatcher.endElement("measurementSlots", -1);

      // decode endSymbol

      buffer.getContext().eventDispatcher.startElement("endSymbol", -1);

      endSymbol = new Asn1Integer();
      endSymbol.decode (buffer, 0, 3);

      buffer.invokeCharacters(endSymbol.toString());
      buffer.getContext().eventDispatcher.endElement("endSymbol", -1);

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode measurementSlots

      if (measurementSlots != null) {
         buffer.getContext().eventDispatcher.startElement("measurementSlots", -1);

         measurementSlots.encode (buffer, 1, 80);

         buffer.getContext().eventDispatcher.endElement("measurementSlots", -1);
      }
      else throw new Asn1MissingRequiredException ("measurementSlots");

      // encode endSymbol

      if (endSymbol != null) {
         buffer.getContext().eventDispatcher.startElement("endSymbol", -1);

         endSymbol.encode (buffer, 0, 3);

         buffer.getContext().eventDispatcher.endElement("endSymbol", -1);
      }
      else throw new Asn1MissingRequiredException ("endSymbol");

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (measurementSlots != null) measurementSlots.print (_sb, "measurementSlots", _level+1);
      if (endSymbol != null) endSymbol.print (_sb, "endSymbol", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
