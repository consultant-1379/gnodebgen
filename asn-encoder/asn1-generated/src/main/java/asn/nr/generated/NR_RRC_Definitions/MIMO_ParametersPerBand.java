/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MIMO_ParametersPerBand extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "MIMO-ParametersPerBand";
   }

   public MIMO_ParametersPerBand_tci_StatePDSCH tci_StatePDSCH;  // optional
   public MIMO_ParametersPerBand_additionalActiveTCI_StatePDCCH additionalActiveTCI_StatePDCCH = null;  // optional
   public MIMO_ParametersPerBand_pusch_TransCoherence pusch_TransCoherence = null;  // optional
   public MIMO_ParametersPerBand_beamCorrespondenceWithoutUL_BeamSweeping beamCorrespondenceWithoutUL_BeamSweeping = null;  // optional
   public MIMO_ParametersPerBand_periodicBeamReport periodicBeamReport = null;  // optional
   public MIMO_ParametersPerBand_aperiodicBeamReport aperiodicBeamReport = null;  // optional
   public MIMO_ParametersPerBand_sp_BeamReportPUCCH sp_BeamReportPUCCH = null;  // optional
   public MIMO_ParametersPerBand_sp_BeamReportPUSCH sp_BeamReportPUSCH = null;  // optional
   public DummyG dummy1;  // optional
   public Asn1Integer maxNumberRxBeam;  // optional
   public MIMO_ParametersPerBand_maxNumberRxTxBeamSwitchDL maxNumberRxTxBeamSwitchDL;  // optional
   public MIMO_ParametersPerBand_maxNumberNonGroupBeamReporting maxNumberNonGroupBeamReporting = null;  // optional
   public MIMO_ParametersPerBand_groupBeamReporting groupBeamReporting = null;  // optional
   public MIMO_ParametersPerBand_uplinkBeamManagement uplinkBeamManagement;  // optional
   public Asn1Integer maxNumberCSI_RS_BFD;  // optional
   public Asn1Integer maxNumberSSB_BFD;  // optional
   public Asn1Integer maxNumberCSI_RS_SSB_CBD;  // optional
   public MIMO_ParametersPerBand_dummy2 dummy2 = null;  // optional
   public MIMO_ParametersPerBand_twoPortsPTRS_UL twoPortsPTRS_UL = null;  // optional
   public SRS_Resources dummy5;  // optional
   public Asn1Integer dummy3;  // optional
   public MIMO_ParametersPerBand_beamReportTiming beamReportTiming;  // optional
   public MIMO_ParametersPerBand_ptrs_DensityRecommendationSetDL ptrs_DensityRecommendationSetDL;  // optional
   public MIMO_ParametersPerBand_ptrs_DensityRecommendationSetUL ptrs_DensityRecommendationSetUL;  // optional
   public DummyH dummy4;  // optional
   public MIMO_ParametersPerBand_aperiodicTRS aperiodicTRS = null;  // optional
   public boolean mV2ExtPresent;
   public MIMO_ParametersPerBand_dummy6 dummy6 = null;  // optional
   public BeamManagementSSB_CSI_RS beamManagementSSB_CSI_RS;  // optional
   public MIMO_ParametersPerBand_beamSwitchTiming beamSwitchTiming;  // optional
   public CodebookParameters codebookParameters;  // optional
   public CSI_RS_IM_ReceptionForFeedback csi_RS_IM_ReceptionForFeedback;  // optional
   public CSI_RS_ProcFrameworkForSRS csi_RS_ProcFrameworkForSRS;  // optional
   public CSI_ReportFramework csi_ReportFramework;  // optional
   public CSI_RS_ForTracking csi_RS_ForTracking;  // optional
   public MIMO_ParametersPerBand_srs_AssocCSI_RS srs_AssocCSI_RS;  // optional
   public SpatialRelations spatialRelations;  // optional
   public boolean mV3ExtPresent;
   public MIMO_ParametersPerBand_defaultQCL_TwoTCI_r16 defaultQCL_TwoTCI_r16 = null;  // optional
   public CodebookParameters_v1610 codebookParametersPerBand_r16;  // optional
   public MIMO_ParametersPerBand_simul_SpatialRelationUpdatePUCCHResGroup_r16 simul_SpatialRelationUpdatePUCCHResGroup_r16 = null;  // optional
   public MIMO_ParametersPerBand_maxNumberSCellBFR_r16 maxNumberSCellBFR_r16 = null;  // optional
   public MIMO_ParametersPerBand_simultaneousReceptionDiffTypeD_r16 simultaneousReceptionDiffTypeD_r16 = null;  // optional
   public MIMO_ParametersPerBand_ssb_csirs_SINR_measurement_r16 ssb_csirs_SINR_measurement_r16;  // optional
   public MIMO_ParametersPerBand_nonGroupSINR_reporting_r16 nonGroupSINR_reporting_r16 = null;  // optional
   public MIMO_ParametersPerBand_groupSINR_reporting_r16 groupSINR_reporting_r16 = null;  // optional
   public MIMO_ParametersPerBand_multiDCI_multiTRP_Parameters_r16 multiDCI_multiTRP_Parameters_r16;  // optional
   public MIMO_ParametersPerBand_singleDCI_SDM_scheme_Parameters_r16 singleDCI_SDM_scheme_Parameters_r16;  // optional
   public MIMO_ParametersPerBand_supportFDM_SchemeA_r16 supportFDM_SchemeA_r16 = null;  // optional
   public MIMO_ParametersPerBand_supportCodeWordSoftCombining_r16 supportCodeWordSoftCombining_r16 = null;  // optional
   public MIMO_ParametersPerBand_supportTDM_SchemeA_r16 supportTDM_SchemeA_r16 = null;  // optional
   public MIMO_ParametersPerBand_supportInter_slotTDM_r16 supportInter_slotTDM_r16;  // optional
   public MIMO_ParametersPerBand_lowPAPR_DMRS_PDSCH_r16 lowPAPR_DMRS_PDSCH_r16 = null;  // optional
   public MIMO_ParametersPerBand_lowPAPR_DMRS_PUSCHwithoutPrecoding_r16 lowPAPR_DMRS_PUSCHwithoutPrecoding_r16 = null;  // optional
   public MIMO_ParametersPerBand_lowPAPR_DMRS_PUCCH_r16 lowPAPR_DMRS_PUCCH_r16 = null;  // optional
   public MIMO_ParametersPerBand_lowPAPR_DMRS_PUSCHwithPrecoding_r16 lowPAPR_DMRS_PUSCHwithPrecoding_r16 = null;  // optional
   public CSI_ReportFrameworkExt_r16 csi_ReportFrameworkExt_r16;  // optional
   public CodebookParametersAddition_r16 codebookParametersAddition_r16;  // optional
   public CodebookComboParametersAddition_r16 codebookComboParametersAddition_r16;  // optional
   public MIMO_ParametersPerBand_beamCorrespondenceSSB_based_r16 beamCorrespondenceSSB_based_r16 = null;  // optional
   public MIMO_ParametersPerBand_beamCorrespondenceCSI_RS_based_r16 beamCorrespondenceCSI_RS_based_r16 = null;  // optional
   public MIMO_ParametersPerBand_beamSwitchTiming_r16 beamSwitchTiming_r16;  // optional
   public boolean mV4ExtPresent;
   public MIMO_ParametersPerBand_semi_PersistentL1_SINR_Report_PUCCH_r16 semi_PersistentL1_SINR_Report_PUCCH_r16;  // optional
   public MIMO_ParametersPerBand_semi_PersistentL1_SINR_Report_PUSCH_r16 semi_PersistentL1_SINR_Report_PUSCH_r16 = null;  // optional
   public boolean mV5ExtPresent;
   public MIMO_ParametersPerBand_spatialRelations_v1640 spatialRelations_v1640;  // optional
   public MIMO_ParametersPerBand_support64CandidateBeamRS_BFR_r16 support64CandidateBeamRS_BFR_r16 = null;  // optional
   public Asn1OpenExt extElem1;

   public MIMO_ParametersPerBand () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MIMO_ParametersPerBand (
      MIMO_ParametersPerBand_tci_StatePDSCH tci_StatePDSCH_,
      MIMO_ParametersPerBand_additionalActiveTCI_StatePDCCH additionalActiveTCI_StatePDCCH_,
      MIMO_ParametersPerBand_pusch_TransCoherence pusch_TransCoherence_,
      MIMO_ParametersPerBand_beamCorrespondenceWithoutUL_BeamSweeping beamCorrespondenceWithoutUL_BeamSweeping_,
      MIMO_ParametersPerBand_periodicBeamReport periodicBeamReport_,
      MIMO_ParametersPerBand_aperiodicBeamReport aperiodicBeamReport_,
      MIMO_ParametersPerBand_sp_BeamReportPUCCH sp_BeamReportPUCCH_,
      MIMO_ParametersPerBand_sp_BeamReportPUSCH sp_BeamReportPUSCH_,
      DummyG dummy1_,
      Asn1Integer maxNumberRxBeam_,
      MIMO_ParametersPerBand_maxNumberRxTxBeamSwitchDL maxNumberRxTxBeamSwitchDL_,
      MIMO_ParametersPerBand_maxNumberNonGroupBeamReporting maxNumberNonGroupBeamReporting_,
      MIMO_ParametersPerBand_groupBeamReporting groupBeamReporting_,
      MIMO_ParametersPerBand_uplinkBeamManagement uplinkBeamManagement_,
      Asn1Integer maxNumberCSI_RS_BFD_,
      Asn1Integer maxNumberSSB_BFD_,
      Asn1Integer maxNumberCSI_RS_SSB_CBD_,
      MIMO_ParametersPerBand_dummy2 dummy2_,
      MIMO_ParametersPerBand_twoPortsPTRS_UL twoPortsPTRS_UL_,
      SRS_Resources dummy5_,
      Asn1Integer dummy3_,
      MIMO_ParametersPerBand_beamReportTiming beamReportTiming_,
      MIMO_ParametersPerBand_ptrs_DensityRecommendationSetDL ptrs_DensityRecommendationSetDL_,
      MIMO_ParametersPerBand_ptrs_DensityRecommendationSetUL ptrs_DensityRecommendationSetUL_,
      DummyH dummy4_,
      MIMO_ParametersPerBand_aperiodicTRS aperiodicTRS_,
      MIMO_ParametersPerBand_dummy6 dummy6_,
      BeamManagementSSB_CSI_RS beamManagementSSB_CSI_RS_,
      MIMO_ParametersPerBand_beamSwitchTiming beamSwitchTiming_,
      CodebookParameters codebookParameters_,
      CSI_RS_IM_ReceptionForFeedback csi_RS_IM_ReceptionForFeedback_,
      CSI_RS_ProcFrameworkForSRS csi_RS_ProcFrameworkForSRS_,
      CSI_ReportFramework csi_ReportFramework_,
      CSI_RS_ForTracking csi_RS_ForTracking_,
      MIMO_ParametersPerBand_srs_AssocCSI_RS srs_AssocCSI_RS_,
      SpatialRelations spatialRelations_,
      MIMO_ParametersPerBand_defaultQCL_TwoTCI_r16 defaultQCL_TwoTCI_r16_,
      CodebookParameters_v1610 codebookParametersPerBand_r16_,
      MIMO_ParametersPerBand_simul_SpatialRelationUpdatePUCCHResGroup_r16 simul_SpatialRelationUpdatePUCCHResGroup_r16_,
      MIMO_ParametersPerBand_maxNumberSCellBFR_r16 maxNumberSCellBFR_r16_,
      MIMO_ParametersPerBand_simultaneousReceptionDiffTypeD_r16 simultaneousReceptionDiffTypeD_r16_,
      MIMO_ParametersPerBand_ssb_csirs_SINR_measurement_r16 ssb_csirs_SINR_measurement_r16_,
      MIMO_ParametersPerBand_nonGroupSINR_reporting_r16 nonGroupSINR_reporting_r16_,
      MIMO_ParametersPerBand_groupSINR_reporting_r16 groupSINR_reporting_r16_,
      MIMO_ParametersPerBand_multiDCI_multiTRP_Parameters_r16 multiDCI_multiTRP_Parameters_r16_,
      MIMO_ParametersPerBand_singleDCI_SDM_scheme_Parameters_r16 singleDCI_SDM_scheme_Parameters_r16_,
      MIMO_ParametersPerBand_supportFDM_SchemeA_r16 supportFDM_SchemeA_r16_,
      MIMO_ParametersPerBand_supportCodeWordSoftCombining_r16 supportCodeWordSoftCombining_r16_,
      MIMO_ParametersPerBand_supportTDM_SchemeA_r16 supportTDM_SchemeA_r16_,
      MIMO_ParametersPerBand_supportInter_slotTDM_r16 supportInter_slotTDM_r16_,
      MIMO_ParametersPerBand_lowPAPR_DMRS_PDSCH_r16 lowPAPR_DMRS_PDSCH_r16_,
      MIMO_ParametersPerBand_lowPAPR_DMRS_PUSCHwithoutPrecoding_r16 lowPAPR_DMRS_PUSCHwithoutPrecoding_r16_,
      MIMO_ParametersPerBand_lowPAPR_DMRS_PUCCH_r16 lowPAPR_DMRS_PUCCH_r16_,
      MIMO_ParametersPerBand_lowPAPR_DMRS_PUSCHwithPrecoding_r16 lowPAPR_DMRS_PUSCHwithPrecoding_r16_,
      CSI_ReportFrameworkExt_r16 csi_ReportFrameworkExt_r16_,
      CodebookParametersAddition_r16 codebookParametersAddition_r16_,
      CodebookComboParametersAddition_r16 codebookComboParametersAddition_r16_,
      MIMO_ParametersPerBand_beamCorrespondenceSSB_based_r16 beamCorrespondenceSSB_based_r16_,
      MIMO_ParametersPerBand_beamCorrespondenceCSI_RS_based_r16 beamCorrespondenceCSI_RS_based_r16_,
      MIMO_ParametersPerBand_beamSwitchTiming_r16 beamSwitchTiming_r16_,
      MIMO_ParametersPerBand_semi_PersistentL1_SINR_Report_PUCCH_r16 semi_PersistentL1_SINR_Report_PUCCH_r16_,
      MIMO_ParametersPerBand_semi_PersistentL1_SINR_Report_PUSCH_r16 semi_PersistentL1_SINR_Report_PUSCH_r16_,
      MIMO_ParametersPerBand_spatialRelations_v1640 spatialRelations_v1640_,
      MIMO_ParametersPerBand_support64CandidateBeamRS_BFR_r16 support64CandidateBeamRS_BFR_r16_
   ) {
      super();
      tci_StatePDSCH = tci_StatePDSCH_;
      additionalActiveTCI_StatePDCCH = additionalActiveTCI_StatePDCCH_;
      pusch_TransCoherence = pusch_TransCoherence_;
      beamCorrespondenceWithoutUL_BeamSweeping = beamCorrespondenceWithoutUL_BeamSweeping_;
      periodicBeamReport = periodicBeamReport_;
      aperiodicBeamReport = aperiodicBeamReport_;
      sp_BeamReportPUCCH = sp_BeamReportPUCCH_;
      sp_BeamReportPUSCH = sp_BeamReportPUSCH_;
      dummy1 = dummy1_;
      maxNumberRxBeam = maxNumberRxBeam_;
      maxNumberRxTxBeamSwitchDL = maxNumberRxTxBeamSwitchDL_;
      maxNumberNonGroupBeamReporting = maxNumberNonGroupBeamReporting_;
      groupBeamReporting = groupBeamReporting_;
      uplinkBeamManagement = uplinkBeamManagement_;
      maxNumberCSI_RS_BFD = maxNumberCSI_RS_BFD_;
      maxNumberSSB_BFD = maxNumberSSB_BFD_;
      maxNumberCSI_RS_SSB_CBD = maxNumberCSI_RS_SSB_CBD_;
      dummy2 = dummy2_;
      twoPortsPTRS_UL = twoPortsPTRS_UL_;
      dummy5 = dummy5_;
      dummy3 = dummy3_;
      beamReportTiming = beamReportTiming_;
      ptrs_DensityRecommendationSetDL = ptrs_DensityRecommendationSetDL_;
      ptrs_DensityRecommendationSetUL = ptrs_DensityRecommendationSetUL_;
      dummy4 = dummy4_;
      aperiodicTRS = aperiodicTRS_;
      dummy6 = dummy6_;
      beamManagementSSB_CSI_RS = beamManagementSSB_CSI_RS_;
      beamSwitchTiming = beamSwitchTiming_;
      codebookParameters = codebookParameters_;
      csi_RS_IM_ReceptionForFeedback = csi_RS_IM_ReceptionForFeedback_;
      csi_RS_ProcFrameworkForSRS = csi_RS_ProcFrameworkForSRS_;
      csi_ReportFramework = csi_ReportFramework_;
      csi_RS_ForTracking = csi_RS_ForTracking_;
      srs_AssocCSI_RS = srs_AssocCSI_RS_;
      spatialRelations = spatialRelations_;
      defaultQCL_TwoTCI_r16 = defaultQCL_TwoTCI_r16_;
      codebookParametersPerBand_r16 = codebookParametersPerBand_r16_;
      simul_SpatialRelationUpdatePUCCHResGroup_r16 = simul_SpatialRelationUpdatePUCCHResGroup_r16_;
      maxNumberSCellBFR_r16 = maxNumberSCellBFR_r16_;
      simultaneousReceptionDiffTypeD_r16 = simultaneousReceptionDiffTypeD_r16_;
      ssb_csirs_SINR_measurement_r16 = ssb_csirs_SINR_measurement_r16_;
      nonGroupSINR_reporting_r16 = nonGroupSINR_reporting_r16_;
      groupSINR_reporting_r16 = groupSINR_reporting_r16_;
      multiDCI_multiTRP_Parameters_r16 = multiDCI_multiTRP_Parameters_r16_;
      singleDCI_SDM_scheme_Parameters_r16 = singleDCI_SDM_scheme_Parameters_r16_;
      supportFDM_SchemeA_r16 = supportFDM_SchemeA_r16_;
      supportCodeWordSoftCombining_r16 = supportCodeWordSoftCombining_r16_;
      supportTDM_SchemeA_r16 = supportTDM_SchemeA_r16_;
      supportInter_slotTDM_r16 = supportInter_slotTDM_r16_;
      lowPAPR_DMRS_PDSCH_r16 = lowPAPR_DMRS_PDSCH_r16_;
      lowPAPR_DMRS_PUSCHwithoutPrecoding_r16 = lowPAPR_DMRS_PUSCHwithoutPrecoding_r16_;
      lowPAPR_DMRS_PUCCH_r16 = lowPAPR_DMRS_PUCCH_r16_;
      lowPAPR_DMRS_PUSCHwithPrecoding_r16 = lowPAPR_DMRS_PUSCHwithPrecoding_r16_;
      csi_ReportFrameworkExt_r16 = csi_ReportFrameworkExt_r16_;
      codebookParametersAddition_r16 = codebookParametersAddition_r16_;
      codebookComboParametersAddition_r16 = codebookComboParametersAddition_r16_;
      beamCorrespondenceSSB_based_r16 = beamCorrespondenceSSB_based_r16_;
      beamCorrespondenceCSI_RS_based_r16 = beamCorrespondenceCSI_RS_based_r16_;
      beamSwitchTiming_r16 = beamSwitchTiming_r16_;
      semi_PersistentL1_SINR_Report_PUCCH_r16 = semi_PersistentL1_SINR_Report_PUCCH_r16_;
      semi_PersistentL1_SINR_Report_PUSCH_r16 = semi_PersistentL1_SINR_Report_PUSCH_r16_;
      spatialRelations_v1640 = spatialRelations_v1640_;
      support64CandidateBeamRS_BFR_r16 = support64CandidateBeamRS_BFR_r16_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public MIMO_ParametersPerBand (MIMO_ParametersPerBand_tci_StatePDSCH tci_StatePDSCH_,
      MIMO_ParametersPerBand_additionalActiveTCI_StatePDCCH additionalActiveTCI_StatePDCCH_,
      MIMO_ParametersPerBand_pusch_TransCoherence pusch_TransCoherence_,
      MIMO_ParametersPerBand_beamCorrespondenceWithoutUL_BeamSweeping beamCorrespondenceWithoutUL_BeamSweeping_,
      MIMO_ParametersPerBand_periodicBeamReport periodicBeamReport_,
      MIMO_ParametersPerBand_aperiodicBeamReport aperiodicBeamReport_,
      MIMO_ParametersPerBand_sp_BeamReportPUCCH sp_BeamReportPUCCH_,
      MIMO_ParametersPerBand_sp_BeamReportPUSCH sp_BeamReportPUSCH_,
      DummyG dummy1_,
      long maxNumberRxBeam_,
      MIMO_ParametersPerBand_maxNumberRxTxBeamSwitchDL maxNumberRxTxBeamSwitchDL_,
      MIMO_ParametersPerBand_maxNumberNonGroupBeamReporting maxNumberNonGroupBeamReporting_,
      MIMO_ParametersPerBand_groupBeamReporting groupBeamReporting_,
      MIMO_ParametersPerBand_uplinkBeamManagement uplinkBeamManagement_,
      long maxNumberCSI_RS_BFD_,
      long maxNumberSSB_BFD_,
      long maxNumberCSI_RS_SSB_CBD_,
      MIMO_ParametersPerBand_dummy2 dummy2_,
      MIMO_ParametersPerBand_twoPortsPTRS_UL twoPortsPTRS_UL_,
      SRS_Resources dummy5_,
      long dummy3_,
      MIMO_ParametersPerBand_beamReportTiming beamReportTiming_,
      MIMO_ParametersPerBand_ptrs_DensityRecommendationSetDL ptrs_DensityRecommendationSetDL_,
      MIMO_ParametersPerBand_ptrs_DensityRecommendationSetUL ptrs_DensityRecommendationSetUL_,
      DummyH dummy4_,
      MIMO_ParametersPerBand_aperiodicTRS aperiodicTRS_,
      MIMO_ParametersPerBand_dummy6 dummy6_,
      BeamManagementSSB_CSI_RS beamManagementSSB_CSI_RS_,
      MIMO_ParametersPerBand_beamSwitchTiming beamSwitchTiming_,
      CodebookParameters codebookParameters_,
      CSI_RS_IM_ReceptionForFeedback csi_RS_IM_ReceptionForFeedback_,
      CSI_RS_ProcFrameworkForSRS csi_RS_ProcFrameworkForSRS_,
      CSI_ReportFramework csi_ReportFramework_,
      CSI_RS_ForTracking csi_RS_ForTracking_,
      MIMO_ParametersPerBand_srs_AssocCSI_RS srs_AssocCSI_RS_,
      SpatialRelations spatialRelations_,
      MIMO_ParametersPerBand_defaultQCL_TwoTCI_r16 defaultQCL_TwoTCI_r16_,
      CodebookParameters_v1610 codebookParametersPerBand_r16_,
      MIMO_ParametersPerBand_simul_SpatialRelationUpdatePUCCHResGroup_r16 simul_SpatialRelationUpdatePUCCHResGroup_r16_,
      MIMO_ParametersPerBand_maxNumberSCellBFR_r16 maxNumberSCellBFR_r16_,
      MIMO_ParametersPerBand_simultaneousReceptionDiffTypeD_r16 simultaneousReceptionDiffTypeD_r16_,
      MIMO_ParametersPerBand_ssb_csirs_SINR_measurement_r16 ssb_csirs_SINR_measurement_r16_,
      MIMO_ParametersPerBand_nonGroupSINR_reporting_r16 nonGroupSINR_reporting_r16_,
      MIMO_ParametersPerBand_groupSINR_reporting_r16 groupSINR_reporting_r16_,
      MIMO_ParametersPerBand_multiDCI_multiTRP_Parameters_r16 multiDCI_multiTRP_Parameters_r16_,
      MIMO_ParametersPerBand_singleDCI_SDM_scheme_Parameters_r16 singleDCI_SDM_scheme_Parameters_r16_,
      MIMO_ParametersPerBand_supportFDM_SchemeA_r16 supportFDM_SchemeA_r16_,
      MIMO_ParametersPerBand_supportCodeWordSoftCombining_r16 supportCodeWordSoftCombining_r16_,
      MIMO_ParametersPerBand_supportTDM_SchemeA_r16 supportTDM_SchemeA_r16_,
      MIMO_ParametersPerBand_supportInter_slotTDM_r16 supportInter_slotTDM_r16_,
      MIMO_ParametersPerBand_lowPAPR_DMRS_PDSCH_r16 lowPAPR_DMRS_PDSCH_r16_,
      MIMO_ParametersPerBand_lowPAPR_DMRS_PUSCHwithoutPrecoding_r16 lowPAPR_DMRS_PUSCHwithoutPrecoding_r16_,
      MIMO_ParametersPerBand_lowPAPR_DMRS_PUCCH_r16 lowPAPR_DMRS_PUCCH_r16_,
      MIMO_ParametersPerBand_lowPAPR_DMRS_PUSCHwithPrecoding_r16 lowPAPR_DMRS_PUSCHwithPrecoding_r16_,
      CSI_ReportFrameworkExt_r16 csi_ReportFrameworkExt_r16_,
      CodebookParametersAddition_r16 codebookParametersAddition_r16_,
      CodebookComboParametersAddition_r16 codebookComboParametersAddition_r16_,
      MIMO_ParametersPerBand_beamCorrespondenceSSB_based_r16 beamCorrespondenceSSB_based_r16_,
      MIMO_ParametersPerBand_beamCorrespondenceCSI_RS_based_r16 beamCorrespondenceCSI_RS_based_r16_,
      MIMO_ParametersPerBand_beamSwitchTiming_r16 beamSwitchTiming_r16_,
      MIMO_ParametersPerBand_semi_PersistentL1_SINR_Report_PUCCH_r16 semi_PersistentL1_SINR_Report_PUCCH_r16_,
      MIMO_ParametersPerBand_semi_PersistentL1_SINR_Report_PUSCH_r16 semi_PersistentL1_SINR_Report_PUSCH_r16_,
      MIMO_ParametersPerBand_spatialRelations_v1640 spatialRelations_v1640_,
      MIMO_ParametersPerBand_support64CandidateBeamRS_BFR_r16 support64CandidateBeamRS_BFR_r16_
   ) {
      super();
      tci_StatePDSCH = tci_StatePDSCH_;
      additionalActiveTCI_StatePDCCH = additionalActiveTCI_StatePDCCH_;
      pusch_TransCoherence = pusch_TransCoherence_;
      beamCorrespondenceWithoutUL_BeamSweeping = beamCorrespondenceWithoutUL_BeamSweeping_;
      periodicBeamReport = periodicBeamReport_;
      aperiodicBeamReport = aperiodicBeamReport_;
      sp_BeamReportPUCCH = sp_BeamReportPUCCH_;
      sp_BeamReportPUSCH = sp_BeamReportPUSCH_;
      dummy1 = dummy1_;
      maxNumberRxBeam = new Asn1Integer (maxNumberRxBeam_);
      maxNumberRxTxBeamSwitchDL = maxNumberRxTxBeamSwitchDL_;
      maxNumberNonGroupBeamReporting = maxNumberNonGroupBeamReporting_;
      groupBeamReporting = groupBeamReporting_;
      uplinkBeamManagement = uplinkBeamManagement_;
      maxNumberCSI_RS_BFD = new Asn1Integer (maxNumberCSI_RS_BFD_);
      maxNumberSSB_BFD = new Asn1Integer (maxNumberSSB_BFD_);
      maxNumberCSI_RS_SSB_CBD = new Asn1Integer (maxNumberCSI_RS_SSB_CBD_);
      dummy2 = dummy2_;
      twoPortsPTRS_UL = twoPortsPTRS_UL_;
      dummy5 = dummy5_;
      dummy3 = new Asn1Integer (dummy3_);
      beamReportTiming = beamReportTiming_;
      ptrs_DensityRecommendationSetDL = ptrs_DensityRecommendationSetDL_;
      ptrs_DensityRecommendationSetUL = ptrs_DensityRecommendationSetUL_;
      dummy4 = dummy4_;
      aperiodicTRS = aperiodicTRS_;
      dummy6 = dummy6_;
      beamManagementSSB_CSI_RS = beamManagementSSB_CSI_RS_;
      beamSwitchTiming = beamSwitchTiming_;
      codebookParameters = codebookParameters_;
      csi_RS_IM_ReceptionForFeedback = csi_RS_IM_ReceptionForFeedback_;
      csi_RS_ProcFrameworkForSRS = csi_RS_ProcFrameworkForSRS_;
      csi_ReportFramework = csi_ReportFramework_;
      csi_RS_ForTracking = csi_RS_ForTracking_;
      srs_AssocCSI_RS = srs_AssocCSI_RS_;
      spatialRelations = spatialRelations_;
      defaultQCL_TwoTCI_r16 = defaultQCL_TwoTCI_r16_;
      codebookParametersPerBand_r16 = codebookParametersPerBand_r16_;
      simul_SpatialRelationUpdatePUCCHResGroup_r16 = simul_SpatialRelationUpdatePUCCHResGroup_r16_;
      maxNumberSCellBFR_r16 = maxNumberSCellBFR_r16_;
      simultaneousReceptionDiffTypeD_r16 = simultaneousReceptionDiffTypeD_r16_;
      ssb_csirs_SINR_measurement_r16 = ssb_csirs_SINR_measurement_r16_;
      nonGroupSINR_reporting_r16 = nonGroupSINR_reporting_r16_;
      groupSINR_reporting_r16 = groupSINR_reporting_r16_;
      multiDCI_multiTRP_Parameters_r16 = multiDCI_multiTRP_Parameters_r16_;
      singleDCI_SDM_scheme_Parameters_r16 = singleDCI_SDM_scheme_Parameters_r16_;
      supportFDM_SchemeA_r16 = supportFDM_SchemeA_r16_;
      supportCodeWordSoftCombining_r16 = supportCodeWordSoftCombining_r16_;
      supportTDM_SchemeA_r16 = supportTDM_SchemeA_r16_;
      supportInter_slotTDM_r16 = supportInter_slotTDM_r16_;
      lowPAPR_DMRS_PDSCH_r16 = lowPAPR_DMRS_PDSCH_r16_;
      lowPAPR_DMRS_PUSCHwithoutPrecoding_r16 = lowPAPR_DMRS_PUSCHwithoutPrecoding_r16_;
      lowPAPR_DMRS_PUCCH_r16 = lowPAPR_DMRS_PUCCH_r16_;
      lowPAPR_DMRS_PUSCHwithPrecoding_r16 = lowPAPR_DMRS_PUSCHwithPrecoding_r16_;
      csi_ReportFrameworkExt_r16 = csi_ReportFrameworkExt_r16_;
      codebookParametersAddition_r16 = codebookParametersAddition_r16_;
      codebookComboParametersAddition_r16 = codebookComboParametersAddition_r16_;
      beamCorrespondenceSSB_based_r16 = beamCorrespondenceSSB_based_r16_;
      beamCorrespondenceCSI_RS_based_r16 = beamCorrespondenceCSI_RS_based_r16_;
      beamSwitchTiming_r16 = beamSwitchTiming_r16_;
      semi_PersistentL1_SINR_Report_PUCCH_r16 = semi_PersistentL1_SINR_Report_PUCCH_r16_;
      semi_PersistentL1_SINR_Report_PUSCH_r16 = semi_PersistentL1_SINR_Report_PUSCH_r16_;
      spatialRelations_v1640 = spatialRelations_v1640_;
      support64CandidateBeamRS_BFR_r16 = support64CandidateBeamRS_BFR_r16_;
   }

   public void init () {
      tci_StatePDSCH = null;
      additionalActiveTCI_StatePDCCH = null;
      pusch_TransCoherence = null;
      beamCorrespondenceWithoutUL_BeamSweeping = null;
      periodicBeamReport = null;
      aperiodicBeamReport = null;
      sp_BeamReportPUCCH = null;
      sp_BeamReportPUSCH = null;
      dummy1 = null;
      maxNumberRxBeam = null;
      maxNumberRxTxBeamSwitchDL = null;
      maxNumberNonGroupBeamReporting = null;
      groupBeamReporting = null;
      uplinkBeamManagement = null;
      maxNumberCSI_RS_BFD = null;
      maxNumberSSB_BFD = null;
      maxNumberCSI_RS_SSB_CBD = null;
      dummy2 = null;
      twoPortsPTRS_UL = null;
      dummy5 = null;
      dummy3 = null;
      beamReportTiming = null;
      ptrs_DensityRecommendationSetDL = null;
      ptrs_DensityRecommendationSetUL = null;
      dummy4 = null;
      aperiodicTRS = null;
      dummy6 = null;
      beamManagementSSB_CSI_RS = null;
      beamSwitchTiming = null;
      codebookParameters = null;
      csi_RS_IM_ReceptionForFeedback = null;
      csi_RS_ProcFrameworkForSRS = null;
      csi_ReportFramework = null;
      csi_RS_ForTracking = null;
      srs_AssocCSI_RS = null;
      spatialRelations = null;
      defaultQCL_TwoTCI_r16 = null;
      codebookParametersPerBand_r16 = null;
      simul_SpatialRelationUpdatePUCCHResGroup_r16 = null;
      maxNumberSCellBFR_r16 = null;
      simultaneousReceptionDiffTypeD_r16 = null;
      ssb_csirs_SINR_measurement_r16 = null;
      nonGroupSINR_reporting_r16 = null;
      groupSINR_reporting_r16 = null;
      multiDCI_multiTRP_Parameters_r16 = null;
      singleDCI_SDM_scheme_Parameters_r16 = null;
      supportFDM_SchemeA_r16 = null;
      supportCodeWordSoftCombining_r16 = null;
      supportTDM_SchemeA_r16 = null;
      supportInter_slotTDM_r16 = null;
      lowPAPR_DMRS_PDSCH_r16 = null;
      lowPAPR_DMRS_PUSCHwithoutPrecoding_r16 = null;
      lowPAPR_DMRS_PUCCH_r16 = null;
      lowPAPR_DMRS_PUSCHwithPrecoding_r16 = null;
      csi_ReportFrameworkExt_r16 = null;
      codebookParametersAddition_r16 = null;
      codebookComboParametersAddition_r16 = null;
      beamCorrespondenceSSB_based_r16 = null;
      beamCorrespondenceCSI_RS_based_r16 = null;
      beamSwitchTiming_r16 = null;
      semi_PersistentL1_SINR_Report_PUCCH_r16 = null;
      semi_PersistentL1_SINR_Report_PUSCH_r16 = null;
      spatialRelations_v1640 = null;
      support64CandidateBeamRS_BFR_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 65; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return tci_StatePDSCH;
         case 1: return additionalActiveTCI_StatePDCCH;
         case 2: return pusch_TransCoherence;
         case 3: return beamCorrespondenceWithoutUL_BeamSweeping;
         case 4: return periodicBeamReport;
         case 5: return aperiodicBeamReport;
         case 6: return sp_BeamReportPUCCH;
         case 7: return sp_BeamReportPUSCH;
         case 8: return dummy1;
         case 9: return maxNumberRxBeam;
         case 10: return maxNumberRxTxBeamSwitchDL;
         case 11: return maxNumberNonGroupBeamReporting;
         case 12: return groupBeamReporting;
         case 13: return uplinkBeamManagement;
         case 14: return maxNumberCSI_RS_BFD;
         case 15: return maxNumberSSB_BFD;
         case 16: return maxNumberCSI_RS_SSB_CBD;
         case 17: return dummy2;
         case 18: return twoPortsPTRS_UL;
         case 19: return dummy5;
         case 20: return dummy3;
         case 21: return beamReportTiming;
         case 22: return ptrs_DensityRecommendationSetDL;
         case 23: return ptrs_DensityRecommendationSetUL;
         case 24: return dummy4;
         case 25: return aperiodicTRS;
         case 26: return dummy6;
         case 27: return beamManagementSSB_CSI_RS;
         case 28: return beamSwitchTiming;
         case 29: return codebookParameters;
         case 30: return csi_RS_IM_ReceptionForFeedback;
         case 31: return csi_RS_ProcFrameworkForSRS;
         case 32: return csi_ReportFramework;
         case 33: return csi_RS_ForTracking;
         case 34: return srs_AssocCSI_RS;
         case 35: return spatialRelations;
         case 36: return defaultQCL_TwoTCI_r16;
         case 37: return codebookParametersPerBand_r16;
         case 38: return simul_SpatialRelationUpdatePUCCHResGroup_r16;
         case 39: return maxNumberSCellBFR_r16;
         case 40: return simultaneousReceptionDiffTypeD_r16;
         case 41: return ssb_csirs_SINR_measurement_r16;
         case 42: return nonGroupSINR_reporting_r16;
         case 43: return groupSINR_reporting_r16;
         case 44: return multiDCI_multiTRP_Parameters_r16;
         case 45: return singleDCI_SDM_scheme_Parameters_r16;
         case 46: return supportFDM_SchemeA_r16;
         case 47: return supportCodeWordSoftCombining_r16;
         case 48: return supportTDM_SchemeA_r16;
         case 49: return supportInter_slotTDM_r16;
         case 50: return lowPAPR_DMRS_PDSCH_r16;
         case 51: return lowPAPR_DMRS_PUSCHwithoutPrecoding_r16;
         case 52: return lowPAPR_DMRS_PUCCH_r16;
         case 53: return lowPAPR_DMRS_PUSCHwithPrecoding_r16;
         case 54: return csi_ReportFrameworkExt_r16;
         case 55: return codebookParametersAddition_r16;
         case 56: return codebookComboParametersAddition_r16;
         case 57: return beamCorrespondenceSSB_based_r16;
         case 58: return beamCorrespondenceCSI_RS_based_r16;
         case 59: return beamSwitchTiming_r16;
         case 60: return semi_PersistentL1_SINR_Report_PUCCH_r16;
         case 61: return semi_PersistentL1_SINR_Report_PUSCH_r16;
         case 62: return spatialRelations_v1640;
         case 63: return support64CandidateBeamRS_BFR_r16;
         case 64: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "tci-StatePDSCH";
         case 1: return "additionalActiveTCI-StatePDCCH";
         case 2: return "pusch-TransCoherence";
         case 3: return "beamCorrespondenceWithoutUL-BeamSweeping";
         case 4: return "periodicBeamReport";
         case 5: return "aperiodicBeamReport";
         case 6: return "sp-BeamReportPUCCH";
         case 7: return "sp-BeamReportPUSCH";
         case 8: return "dummy1";
         case 9: return "maxNumberRxBeam";
         case 10: return "maxNumberRxTxBeamSwitchDL";
         case 11: return "maxNumberNonGroupBeamReporting";
         case 12: return "groupBeamReporting";
         case 13: return "uplinkBeamManagement";
         case 14: return "maxNumberCSI-RS-BFD";
         case 15: return "maxNumberSSB-BFD";
         case 16: return "maxNumberCSI-RS-SSB-CBD";
         case 17: return "dummy2";
         case 18: return "twoPortsPTRS-UL";
         case 19: return "dummy5";
         case 20: return "dummy3";
         case 21: return "beamReportTiming";
         case 22: return "ptrs-DensityRecommendationSetDL";
         case 23: return "ptrs-DensityRecommendationSetUL";
         case 24: return "dummy4";
         case 25: return "aperiodicTRS";
         case 26: return "dummy6";
         case 27: return "beamManagementSSB-CSI-RS";
         case 28: return "beamSwitchTiming";
         case 29: return "codebookParameters";
         case 30: return "csi-RS-IM-ReceptionForFeedback";
         case 31: return "csi-RS-ProcFrameworkForSRS";
         case 32: return "csi-ReportFramework";
         case 33: return "csi-RS-ForTracking";
         case 34: return "srs-AssocCSI-RS";
         case 35: return "spatialRelations";
         case 36: return "defaultQCL-TwoTCI-r16";
         case 37: return "codebookParametersPerBand-r16";
         case 38: return "simul-SpatialRelationUpdatePUCCHResGroup-r16";
         case 39: return "maxNumberSCellBFR-r16";
         case 40: return "simultaneousReceptionDiffTypeD-r16";
         case 41: return "ssb-csirs-SINR-measurement-r16";
         case 42: return "nonGroupSINR-reporting-r16";
         case 43: return "groupSINR-reporting-r16";
         case 44: return "multiDCI-multiTRP-Parameters-r16";
         case 45: return "singleDCI-SDM-scheme-Parameters-r16";
         case 46: return "supportFDM-SchemeA-r16";
         case 47: return "supportCodeWordSoftCombining-r16";
         case 48: return "supportTDM-SchemeA-r16";
         case 49: return "supportInter-slotTDM-r16";
         case 50: return "lowPAPR-DMRS-PDSCH-r16";
         case 51: return "lowPAPR-DMRS-PUSCHwithoutPrecoding-r16";
         case 52: return "lowPAPR-DMRS-PUCCH-r16";
         case 53: return "lowPAPR-DMRS-PUSCHwithPrecoding-r16";
         case 54: return "csi-ReportFrameworkExt-r16";
         case 55: return "codebookParametersAddition-r16";
         case 56: return "codebookComboParametersAddition-r16";
         case 57: return "beamCorrespondenceSSB-based-r16";
         case 58: return "beamCorrespondenceCSI-RS-based-r16";
         case 59: return "beamSwitchTiming-r16";
         case 60: return "semi-PersistentL1-SINR-Report-PUCCH-r16";
         case 61: return "semi-PersistentL1-SINR-Report-PUSCH-r16";
         case 62: return "spatialRelations-v1640";
         case 63: return "support64CandidateBeamRS-BFR-r16";
         case 64: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean tci_StatePDSCHPresent = buffer.decodeBit ("tci_StatePDSCHPresent");
      boolean additionalActiveTCI_StatePDCCHPresent = buffer.decodeBit ("additionalActiveTCI_StatePDCCHPresent");
      boolean pusch_TransCoherencePresent = buffer.decodeBit ("pusch_TransCoherencePresent");
      boolean beamCorrespondenceWithoutUL_BeamSweepingPresent = buffer.decodeBit ("beamCorrespondenceWithoutUL_BeamSweepingPresent");
      boolean periodicBeamReportPresent = buffer.decodeBit ("periodicBeamReportPresent");
      boolean aperiodicBeamReportPresent = buffer.decodeBit ("aperiodicBeamReportPresent");
      boolean sp_BeamReportPUCCHPresent = buffer.decodeBit ("sp_BeamReportPUCCHPresent");
      boolean sp_BeamReportPUSCHPresent = buffer.decodeBit ("sp_BeamReportPUSCHPresent");
      boolean dummy1Present = buffer.decodeBit ("dummy1Present");
      boolean maxNumberRxBeamPresent = buffer.decodeBit ("maxNumberRxBeamPresent");
      boolean maxNumberRxTxBeamSwitchDLPresent = buffer.decodeBit ("maxNumberRxTxBeamSwitchDLPresent");
      boolean maxNumberNonGroupBeamReportingPresent = buffer.decodeBit ("maxNumberNonGroupBeamReportingPresent");
      boolean groupBeamReportingPresent = buffer.decodeBit ("groupBeamReportingPresent");
      boolean uplinkBeamManagementPresent = buffer.decodeBit ("uplinkBeamManagementPresent");
      boolean maxNumberCSI_RS_BFDPresent = buffer.decodeBit ("maxNumberCSI_RS_BFDPresent");
      boolean maxNumberSSB_BFDPresent = buffer.decodeBit ("maxNumberSSB_BFDPresent");
      boolean maxNumberCSI_RS_SSB_CBDPresent = buffer.decodeBit ("maxNumberCSI_RS_SSB_CBDPresent");
      boolean dummy2Present = buffer.decodeBit ("dummy2Present");
      boolean twoPortsPTRS_ULPresent = buffer.decodeBit ("twoPortsPTRS_ULPresent");
      boolean dummy5Present = buffer.decodeBit ("dummy5Present");
      boolean dummy3Present = buffer.decodeBit ("dummy3Present");
      boolean beamReportTimingPresent = buffer.decodeBit ("beamReportTimingPresent");
      boolean ptrs_DensityRecommendationSetDLPresent = buffer.decodeBit ("ptrs_DensityRecommendationSetDLPresent");
      boolean ptrs_DensityRecommendationSetULPresent = buffer.decodeBit ("ptrs_DensityRecommendationSetULPresent");
      boolean dummy4Present = buffer.decodeBit ("dummy4Present");
      boolean aperiodicTRSPresent = buffer.decodeBit ("aperiodicTRSPresent");

      // decode tci_StatePDSCH

      if (tci_StatePDSCHPresent) {
         buffer.getContext().eventDispatcher.startElement("tci_StatePDSCH", -1);

         tci_StatePDSCH = new MIMO_ParametersPerBand_tci_StatePDSCH();
         tci_StatePDSCH.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("tci_StatePDSCH", -1);
      }
      else {
         tci_StatePDSCH = null;
      }

      // decode additionalActiveTCI_StatePDCCH

      if (additionalActiveTCI_StatePDCCHPresent) {
         buffer.getContext().eventDispatcher.startElement("additionalActiveTCI_StatePDCCH", -1);

         int tval = MIMO_ParametersPerBand_additionalActiveTCI_StatePDCCH.decodeEnumValue (buffer);
         additionalActiveTCI_StatePDCCH = MIMO_ParametersPerBand_additionalActiveTCI_StatePDCCH.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("additionalActiveTCI_StatePDCCH", -1);
      }
      else {
         additionalActiveTCI_StatePDCCH = null;
      }

      // decode pusch_TransCoherence

      if (pusch_TransCoherencePresent) {
         buffer.getContext().eventDispatcher.startElement("pusch_TransCoherence", -1);

         int tval = MIMO_ParametersPerBand_pusch_TransCoherence.decodeEnumValue (buffer);
         pusch_TransCoherence = MIMO_ParametersPerBand_pusch_TransCoherence.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("pusch_TransCoherence", -1);
      }
      else {
         pusch_TransCoherence = null;
      }

      // decode beamCorrespondenceWithoutUL_BeamSweeping

      if (beamCorrespondenceWithoutUL_BeamSweepingPresent) {
         buffer.getContext().eventDispatcher.startElement("beamCorrespondenceWithoutUL_BeamSweeping", -1);

         int tval = MIMO_ParametersPerBand_beamCorrespondenceWithoutUL_BeamSweeping.decodeEnumValue (buffer);
         beamCorrespondenceWithoutUL_BeamSweeping = MIMO_ParametersPerBand_beamCorrespondenceWithoutUL_BeamSweeping.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("beamCorrespondenceWithoutUL_BeamSweeping", -1);
      }
      else {
         beamCorrespondenceWithoutUL_BeamSweeping = null;
      }

      // decode periodicBeamReport

      if (periodicBeamReportPresent) {
         buffer.getContext().eventDispatcher.startElement("periodicBeamReport", -1);

         int tval = MIMO_ParametersPerBand_periodicBeamReport.decodeEnumValue (buffer);
         periodicBeamReport = MIMO_ParametersPerBand_periodicBeamReport.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("periodicBeamReport", -1);
      }
      else {
         periodicBeamReport = null;
      }

      // decode aperiodicBeamReport

      if (aperiodicBeamReportPresent) {
         buffer.getContext().eventDispatcher.startElement("aperiodicBeamReport", -1);

         int tval = MIMO_ParametersPerBand_aperiodicBeamReport.decodeEnumValue (buffer);
         aperiodicBeamReport = MIMO_ParametersPerBand_aperiodicBeamReport.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("aperiodicBeamReport", -1);
      }
      else {
         aperiodicBeamReport = null;
      }

      // decode sp_BeamReportPUCCH

      if (sp_BeamReportPUCCHPresent) {
         buffer.getContext().eventDispatcher.startElement("sp_BeamReportPUCCH", -1);

         int tval = MIMO_ParametersPerBand_sp_BeamReportPUCCH.decodeEnumValue (buffer);
         sp_BeamReportPUCCH = MIMO_ParametersPerBand_sp_BeamReportPUCCH.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("sp_BeamReportPUCCH", -1);
      }
      else {
         sp_BeamReportPUCCH = null;
      }

      // decode sp_BeamReportPUSCH

      if (sp_BeamReportPUSCHPresent) {
         buffer.getContext().eventDispatcher.startElement("sp_BeamReportPUSCH", -1);

         int tval = MIMO_ParametersPerBand_sp_BeamReportPUSCH.decodeEnumValue (buffer);
         sp_BeamReportPUSCH = MIMO_ParametersPerBand_sp_BeamReportPUSCH.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("sp_BeamReportPUSCH", -1);
      }
      else {
         sp_BeamReportPUSCH = null;
      }

      // decode dummy1

      if (dummy1Present) {
         buffer.getContext().eventDispatcher.startElement("dummy1", -1);

         dummy1 = new DummyG();
         dummy1.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("dummy1", -1);
      }
      else {
         dummy1 = null;
      }

      // decode maxNumberRxBeam

      if (maxNumberRxBeamPresent) {
         buffer.getContext().eventDispatcher.startElement("maxNumberRxBeam", -1);

         maxNumberRxBeam = new Asn1Integer();
         maxNumberRxBeam.decode (buffer, 2, 8);

         buffer.invokeCharacters(maxNumberRxBeam.toString());
         buffer.getContext().eventDispatcher.endElement("maxNumberRxBeam", -1);
      }
      else {
         maxNumberRxBeam = null;
      }

      // decode maxNumberRxTxBeamSwitchDL

      if (maxNumberRxTxBeamSwitchDLPresent) {
         buffer.getContext().eventDispatcher.startElement("maxNumberRxTxBeamSwitchDL", -1);

         maxNumberRxTxBeamSwitchDL = new MIMO_ParametersPerBand_maxNumberRxTxBeamSwitchDL();
         maxNumberRxTxBeamSwitchDL.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("maxNumberRxTxBeamSwitchDL", -1);
      }
      else {
         maxNumberRxTxBeamSwitchDL = null;
      }

      // decode maxNumberNonGroupBeamReporting

      if (maxNumberNonGroupBeamReportingPresent) {
         buffer.getContext().eventDispatcher.startElement("maxNumberNonGroupBeamReporting", -1);

         int tval = MIMO_ParametersPerBand_maxNumberNonGroupBeamReporting.decodeEnumValue (buffer);
         maxNumberNonGroupBeamReporting = MIMO_ParametersPerBand_maxNumberNonGroupBeamReporting.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("maxNumberNonGroupBeamReporting", -1);
      }
      else {
         maxNumberNonGroupBeamReporting = null;
      }

      // decode groupBeamReporting

      if (groupBeamReportingPresent) {
         buffer.getContext().eventDispatcher.startElement("groupBeamReporting", -1);

         int tval = MIMO_ParametersPerBand_groupBeamReporting.decodeEnumValue (buffer);
         groupBeamReporting = MIMO_ParametersPerBand_groupBeamReporting.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("groupBeamReporting", -1);
      }
      else {
         groupBeamReporting = null;
      }

      // decode uplinkBeamManagement

      if (uplinkBeamManagementPresent) {
         buffer.getContext().eventDispatcher.startElement("uplinkBeamManagement", -1);

         uplinkBeamManagement = new MIMO_ParametersPerBand_uplinkBeamManagement();
         uplinkBeamManagement.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("uplinkBeamManagement", -1);
      }
      else {
         uplinkBeamManagement = null;
      }

      // decode maxNumberCSI_RS_BFD

      if (maxNumberCSI_RS_BFDPresent) {
         buffer.getContext().eventDispatcher.startElement("maxNumberCSI_RS_BFD", -1);

         maxNumberCSI_RS_BFD = new Asn1Integer();
         maxNumberCSI_RS_BFD.decode (buffer, 1, 64);

         buffer.invokeCharacters(maxNumberCSI_RS_BFD.toString());
         buffer.getContext().eventDispatcher.endElement("maxNumberCSI_RS_BFD", -1);
      }
      else {
         maxNumberCSI_RS_BFD = null;
      }

      // decode maxNumberSSB_BFD

      if (maxNumberSSB_BFDPresent) {
         buffer.getContext().eventDispatcher.startElement("maxNumberSSB_BFD", -1);

         maxNumberSSB_BFD = new Asn1Integer();
         maxNumberSSB_BFD.decode (buffer, 1, 64);

         buffer.invokeCharacters(maxNumberSSB_BFD.toString());
         buffer.getContext().eventDispatcher.endElement("maxNumberSSB_BFD", -1);
      }
      else {
         maxNumberSSB_BFD = null;
      }

      // decode maxNumberCSI_RS_SSB_CBD

      if (maxNumberCSI_RS_SSB_CBDPresent) {
         buffer.getContext().eventDispatcher.startElement("maxNumberCSI_RS_SSB_CBD", -1);

         maxNumberCSI_RS_SSB_CBD = new Asn1Integer();
         maxNumberCSI_RS_SSB_CBD.decode (buffer, 1, 256);

         buffer.invokeCharacters(maxNumberCSI_RS_SSB_CBD.toString());
         buffer.getContext().eventDispatcher.endElement("maxNumberCSI_RS_SSB_CBD", -1);
      }
      else {
         maxNumberCSI_RS_SSB_CBD = null;
      }

      // decode dummy2

      if (dummy2Present) {
         buffer.getContext().eventDispatcher.startElement("dummy2", -1);

         int tval = MIMO_ParametersPerBand_dummy2.decodeEnumValue (buffer);
         dummy2 = MIMO_ParametersPerBand_dummy2.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("dummy2", -1);
      }
      else {
         dummy2 = null;
      }

      // decode twoPortsPTRS_UL

      if (twoPortsPTRS_ULPresent) {
         buffer.getContext().eventDispatcher.startElement("twoPortsPTRS_UL", -1);

         int tval = MIMO_ParametersPerBand_twoPortsPTRS_UL.decodeEnumValue (buffer);
         twoPortsPTRS_UL = MIMO_ParametersPerBand_twoPortsPTRS_UL.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("twoPortsPTRS_UL", -1);
      }
      else {
         twoPortsPTRS_UL = null;
      }

      // decode dummy5

      if (dummy5Present) {
         buffer.getContext().eventDispatcher.startElement("dummy5", -1);

         dummy5 = new SRS_Resources();
         dummy5.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("dummy5", -1);
      }
      else {
         dummy5 = null;
      }

      // decode dummy3

      if (dummy3Present) {
         buffer.getContext().eventDispatcher.startElement("dummy3", -1);

         dummy3 = new Asn1Integer();
         dummy3.decode (buffer, 1, 4);

         buffer.invokeCharacters(dummy3.toString());
         buffer.getContext().eventDispatcher.endElement("dummy3", -1);
      }
      else {
         dummy3 = null;
      }

      // decode beamReportTiming

      if (beamReportTimingPresent) {
         buffer.getContext().eventDispatcher.startElement("beamReportTiming", -1);

         beamReportTiming = new MIMO_ParametersPerBand_beamReportTiming();
         beamReportTiming.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("beamReportTiming", -1);
      }
      else {
         beamReportTiming = null;
      }

      // decode ptrs_DensityRecommendationSetDL

      if (ptrs_DensityRecommendationSetDLPresent) {
         buffer.getContext().eventDispatcher.startElement("ptrs_DensityRecommendationSetDL", -1);

         ptrs_DensityRecommendationSetDL = new MIMO_ParametersPerBand_ptrs_DensityRecommendationSetDL();
         ptrs_DensityRecommendationSetDL.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ptrs_DensityRecommendationSetDL", -1);
      }
      else {
         ptrs_DensityRecommendationSetDL = null;
      }

      // decode ptrs_DensityRecommendationSetUL

      if (ptrs_DensityRecommendationSetULPresent) {
         buffer.getContext().eventDispatcher.startElement("ptrs_DensityRecommendationSetUL", -1);

         ptrs_DensityRecommendationSetUL = new MIMO_ParametersPerBand_ptrs_DensityRecommendationSetUL();
         ptrs_DensityRecommendationSetUL.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ptrs_DensityRecommendationSetUL", -1);
      }
      else {
         ptrs_DensityRecommendationSetUL = null;
      }

      // decode dummy4

      if (dummy4Present) {
         buffer.getContext().eventDispatcher.startElement("dummy4", -1);

         dummy4 = new DummyH();
         dummy4.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("dummy4", -1);
      }
      else {
         dummy4 = null;
      }

      // decode aperiodicTRS

      if (aperiodicTRSPresent) {
         buffer.getContext().eventDispatcher.startElement("aperiodicTRS", -1);

         int tval = MIMO_ParametersPerBand_aperiodicTRS.decodeEnumValue (buffer);
         aperiodicTRS = MIMO_ParametersPerBand_aperiodicTRS.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("aperiodicTRS", -1);
      }
      else {
         aperiodicTRS = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV4ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV5ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean dummy6Present = buffer.decodeBit ("dummy6Present");

            boolean beamManagementSSB_CSI_RSPresent = buffer.decodeBit ("beamManagementSSB_CSI_RSPresent");

            boolean beamSwitchTimingPresent = buffer.decodeBit ("beamSwitchTimingPresent");

            boolean codebookParametersPresent = buffer.decodeBit ("codebookParametersPresent");

            boolean csi_RS_IM_ReceptionForFeedbackPresent = buffer.decodeBit ("csi_RS_IM_ReceptionForFeedbackPresent");

            boolean csi_RS_ProcFrameworkForSRSPresent = buffer.decodeBit ("csi_RS_ProcFrameworkForSRSPresent");

            boolean csi_ReportFrameworkPresent = buffer.decodeBit ("csi_ReportFrameworkPresent");

            boolean csi_RS_ForTrackingPresent = buffer.decodeBit ("csi_RS_ForTrackingPresent");

            boolean srs_AssocCSI_RSPresent = buffer.decodeBit ("srs_AssocCSI_RSPresent");

            boolean spatialRelationsPresent = buffer.decodeBit ("spatialRelationsPresent");

            // decode dummy6

            if (dummy6Present) {
               buffer.getContext().eventDispatcher.startElement("dummy6", -1);

               int tval = MIMO_ParametersPerBand_dummy6.decodeEnumValue (buffer);
               dummy6 = MIMO_ParametersPerBand_dummy6.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("dummy6", -1);
            }
            else {
               dummy6 = null;
            }

            // decode beamManagementSSB_CSI_RS

            if (beamManagementSSB_CSI_RSPresent) {
               buffer.getContext().eventDispatcher.startElement("beamManagementSSB_CSI_RS", -1);

               beamManagementSSB_CSI_RS = new BeamManagementSSB_CSI_RS();
               beamManagementSSB_CSI_RS.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("beamManagementSSB_CSI_RS", -1);
            }
            else {
               beamManagementSSB_CSI_RS = null;
            }

            // decode beamSwitchTiming

            if (beamSwitchTimingPresent) {
               buffer.getContext().eventDispatcher.startElement("beamSwitchTiming", -1);

               beamSwitchTiming = new MIMO_ParametersPerBand_beamSwitchTiming();
               beamSwitchTiming.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("beamSwitchTiming", -1);
            }
            else {
               beamSwitchTiming = null;
            }

            // decode codebookParameters

            if (codebookParametersPresent) {
               buffer.getContext().eventDispatcher.startElement("codebookParameters", -1);

               codebookParameters = new CodebookParameters();
               codebookParameters.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("codebookParameters", -1);
            }
            else {
               codebookParameters = null;
            }

            // decode csi_RS_IM_ReceptionForFeedback

            if (csi_RS_IM_ReceptionForFeedbackPresent) {
               buffer.getContext().eventDispatcher.startElement("csi_RS_IM_ReceptionForFeedback", -1);

               csi_RS_IM_ReceptionForFeedback = new CSI_RS_IM_ReceptionForFeedback();
               csi_RS_IM_ReceptionForFeedback.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("csi_RS_IM_ReceptionForFeedback", -1);
            }
            else {
               csi_RS_IM_ReceptionForFeedback = null;
            }

            // decode csi_RS_ProcFrameworkForSRS

            if (csi_RS_ProcFrameworkForSRSPresent) {
               buffer.getContext().eventDispatcher.startElement("csi_RS_ProcFrameworkForSRS", -1);

               csi_RS_ProcFrameworkForSRS = new CSI_RS_ProcFrameworkForSRS();
               csi_RS_ProcFrameworkForSRS.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("csi_RS_ProcFrameworkForSRS", -1);
            }
            else {
               csi_RS_ProcFrameworkForSRS = null;
            }

            // decode csi_ReportFramework

            if (csi_ReportFrameworkPresent) {
               buffer.getContext().eventDispatcher.startElement("csi_ReportFramework", -1);

               csi_ReportFramework = new CSI_ReportFramework();
               csi_ReportFramework.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("csi_ReportFramework", -1);
            }
            else {
               csi_ReportFramework = null;
            }

            // decode csi_RS_ForTracking

            if (csi_RS_ForTrackingPresent) {
               buffer.getContext().eventDispatcher.startElement("csi_RS_ForTracking", -1);

               csi_RS_ForTracking = new CSI_RS_ForTracking();
               csi_RS_ForTracking.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("csi_RS_ForTracking", -1);
            }
            else {
               csi_RS_ForTracking = null;
            }

            // decode srs_AssocCSI_RS

            if (srs_AssocCSI_RSPresent) {
               buffer.getContext().eventDispatcher.startElement("srs_AssocCSI_RS", -1);

               srs_AssocCSI_RS = new MIMO_ParametersPerBand_srs_AssocCSI_RS();
               srs_AssocCSI_RS.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("srs_AssocCSI_RS", -1);
            }
            else {
               srs_AssocCSI_RS = null;
            }

            // decode spatialRelations

            if (spatialRelationsPresent) {
               buffer.getContext().eventDispatcher.startElement("spatialRelations", -1);

               spatialRelations = new SpatialRelations();
               spatialRelations.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("spatialRelations", -1);
            }
            else {
               spatialRelations = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean defaultQCL_TwoTCI_r16Present = buffer.decodeBit ("defaultQCL_TwoTCI_r16Present");

            boolean codebookParametersPerBand_r16Present = buffer.decodeBit ("codebookParametersPerBand_r16Present");

            boolean simul_SpatialRelationUpdatePUCCHResGroup_r16Present = buffer.decodeBit ("simul_SpatialRelationUpdatePUCCHResGroup_r16Present");

            boolean maxNumberSCellBFR_r16Present = buffer.decodeBit ("maxNumberSCellBFR_r16Present");

            boolean simultaneousReceptionDiffTypeD_r16Present = buffer.decodeBit ("simultaneousReceptionDiffTypeD_r16Present");

            boolean ssb_csirs_SINR_measurement_r16Present = buffer.decodeBit ("ssb_csirs_SINR_measurement_r16Present");

            boolean nonGroupSINR_reporting_r16Present = buffer.decodeBit ("nonGroupSINR_reporting_r16Present");

            boolean groupSINR_reporting_r16Present = buffer.decodeBit ("groupSINR_reporting_r16Present");

            boolean multiDCI_multiTRP_Parameters_r16Present = buffer.decodeBit ("multiDCI_multiTRP_Parameters_r16Present");

            boolean singleDCI_SDM_scheme_Parameters_r16Present = buffer.decodeBit ("singleDCI_SDM_scheme_Parameters_r16Present");

            boolean supportFDM_SchemeA_r16Present = buffer.decodeBit ("supportFDM_SchemeA_r16Present");

            boolean supportCodeWordSoftCombining_r16Present = buffer.decodeBit ("supportCodeWordSoftCombining_r16Present");

            boolean supportTDM_SchemeA_r16Present = buffer.decodeBit ("supportTDM_SchemeA_r16Present");

            boolean supportInter_slotTDM_r16Present = buffer.decodeBit ("supportInter_slotTDM_r16Present");

            boolean lowPAPR_DMRS_PDSCH_r16Present = buffer.decodeBit ("lowPAPR_DMRS_PDSCH_r16Present");

            boolean lowPAPR_DMRS_PUSCHwithoutPrecoding_r16Present = buffer.decodeBit ("lowPAPR_DMRS_PUSCHwithoutPrecoding_r16Present");

            boolean lowPAPR_DMRS_PUCCH_r16Present = buffer.decodeBit ("lowPAPR_DMRS_PUCCH_r16Present");

            boolean lowPAPR_DMRS_PUSCHwithPrecoding_r16Present = buffer.decodeBit ("lowPAPR_DMRS_PUSCHwithPrecoding_r16Present");

            boolean csi_ReportFrameworkExt_r16Present = buffer.decodeBit ("csi_ReportFrameworkExt_r16Present");

            boolean codebookParametersAddition_r16Present = buffer.decodeBit ("codebookParametersAddition_r16Present");

            boolean codebookComboParametersAddition_r16Present = buffer.decodeBit ("codebookComboParametersAddition_r16Present");

            boolean beamCorrespondenceSSB_based_r16Present = buffer.decodeBit ("beamCorrespondenceSSB_based_r16Present");

            boolean beamCorrespondenceCSI_RS_based_r16Present = buffer.decodeBit ("beamCorrespondenceCSI_RS_based_r16Present");

            boolean beamSwitchTiming_r16Present = buffer.decodeBit ("beamSwitchTiming_r16Present");

            // decode defaultQCL_TwoTCI_r16

            if (defaultQCL_TwoTCI_r16Present) {
               buffer.getContext().eventDispatcher.startElement("defaultQCL_TwoTCI_r16", -1);

               int tval = MIMO_ParametersPerBand_defaultQCL_TwoTCI_r16.decodeEnumValue (buffer);
               defaultQCL_TwoTCI_r16 = MIMO_ParametersPerBand_defaultQCL_TwoTCI_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("defaultQCL_TwoTCI_r16", -1);
            }
            else {
               defaultQCL_TwoTCI_r16 = null;
            }

            // decode codebookParametersPerBand_r16

            if (codebookParametersPerBand_r16Present) {
               buffer.getContext().eventDispatcher.startElement("codebookParametersPerBand_r16", -1);

               codebookParametersPerBand_r16 = new CodebookParameters_v1610();
               codebookParametersPerBand_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("codebookParametersPerBand_r16", -1);
            }
            else {
               codebookParametersPerBand_r16 = null;
            }

            // decode simul_SpatialRelationUpdatePUCCHResGroup_r16

            if (simul_SpatialRelationUpdatePUCCHResGroup_r16Present) {
               buffer.getContext().eventDispatcher.startElement("simul_SpatialRelationUpdatePUCCHResGroup_r16", -1);

               int tval = MIMO_ParametersPerBand_simul_SpatialRelationUpdatePUCCHResGroup_r16.decodeEnumValue (buffer);
               simul_SpatialRelationUpdatePUCCHResGroup_r16 = MIMO_ParametersPerBand_simul_SpatialRelationUpdatePUCCHResGroup_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("simul_SpatialRelationUpdatePUCCHResGroup_r16", -1);
            }
            else {
               simul_SpatialRelationUpdatePUCCHResGroup_r16 = null;
            }

            // decode maxNumberSCellBFR_r16

            if (maxNumberSCellBFR_r16Present) {
               buffer.getContext().eventDispatcher.startElement("maxNumberSCellBFR_r16", -1);

               int tval = MIMO_ParametersPerBand_maxNumberSCellBFR_r16.decodeEnumValue (buffer);
               maxNumberSCellBFR_r16 = MIMO_ParametersPerBand_maxNumberSCellBFR_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("maxNumberSCellBFR_r16", -1);
            }
            else {
               maxNumberSCellBFR_r16 = null;
            }

            // decode simultaneousReceptionDiffTypeD_r16

            if (simultaneousReceptionDiffTypeD_r16Present) {
               buffer.getContext().eventDispatcher.startElement("simultaneousReceptionDiffTypeD_r16", -1);

               int tval = MIMO_ParametersPerBand_simultaneousReceptionDiffTypeD_r16.decodeEnumValue (buffer);
               simultaneousReceptionDiffTypeD_r16 = MIMO_ParametersPerBand_simultaneousReceptionDiffTypeD_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("simultaneousReceptionDiffTypeD_r16", -1);
            }
            else {
               simultaneousReceptionDiffTypeD_r16 = null;
            }

            // decode ssb_csirs_SINR_measurement_r16

            if (ssb_csirs_SINR_measurement_r16Present) {
               buffer.getContext().eventDispatcher.startElement("ssb_csirs_SINR_measurement_r16", -1);

               ssb_csirs_SINR_measurement_r16 = new MIMO_ParametersPerBand_ssb_csirs_SINR_measurement_r16();
               ssb_csirs_SINR_measurement_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("ssb_csirs_SINR_measurement_r16", -1);
            }
            else {
               ssb_csirs_SINR_measurement_r16 = null;
            }

            // decode nonGroupSINR_reporting_r16

            if (nonGroupSINR_reporting_r16Present) {
               buffer.getContext().eventDispatcher.startElement("nonGroupSINR_reporting_r16", -1);

               int tval = MIMO_ParametersPerBand_nonGroupSINR_reporting_r16.decodeEnumValue (buffer);
               nonGroupSINR_reporting_r16 = MIMO_ParametersPerBand_nonGroupSINR_reporting_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("nonGroupSINR_reporting_r16", -1);
            }
            else {
               nonGroupSINR_reporting_r16 = null;
            }

            // decode groupSINR_reporting_r16

            if (groupSINR_reporting_r16Present) {
               buffer.getContext().eventDispatcher.startElement("groupSINR_reporting_r16", -1);

               int tval = MIMO_ParametersPerBand_groupSINR_reporting_r16.decodeEnumValue (buffer);
               groupSINR_reporting_r16 = MIMO_ParametersPerBand_groupSINR_reporting_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("groupSINR_reporting_r16", -1);
            }
            else {
               groupSINR_reporting_r16 = null;
            }

            // decode multiDCI_multiTRP_Parameters_r16

            if (multiDCI_multiTRP_Parameters_r16Present) {
               buffer.getContext().eventDispatcher.startElement("multiDCI_multiTRP_Parameters_r16", -1);

               multiDCI_multiTRP_Parameters_r16 = new MIMO_ParametersPerBand_multiDCI_multiTRP_Parameters_r16();
               multiDCI_multiTRP_Parameters_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("multiDCI_multiTRP_Parameters_r16", -1);
            }
            else {
               multiDCI_multiTRP_Parameters_r16 = null;
            }

            // decode singleDCI_SDM_scheme_Parameters_r16

            if (singleDCI_SDM_scheme_Parameters_r16Present) {
               buffer.getContext().eventDispatcher.startElement("singleDCI_SDM_scheme_Parameters_r16", -1);

               singleDCI_SDM_scheme_Parameters_r16 = new MIMO_ParametersPerBand_singleDCI_SDM_scheme_Parameters_r16();
               singleDCI_SDM_scheme_Parameters_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("singleDCI_SDM_scheme_Parameters_r16", -1);
            }
            else {
               singleDCI_SDM_scheme_Parameters_r16 = null;
            }

            // decode supportFDM_SchemeA_r16

            if (supportFDM_SchemeA_r16Present) {
               buffer.getContext().eventDispatcher.startElement("supportFDM_SchemeA_r16", -1);

               int tval = MIMO_ParametersPerBand_supportFDM_SchemeA_r16.decodeEnumValue (buffer);
               supportFDM_SchemeA_r16 = MIMO_ParametersPerBand_supportFDM_SchemeA_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("supportFDM_SchemeA_r16", -1);
            }
            else {
               supportFDM_SchemeA_r16 = null;
            }

            // decode supportCodeWordSoftCombining_r16

            if (supportCodeWordSoftCombining_r16Present) {
               buffer.getContext().eventDispatcher.startElement("supportCodeWordSoftCombining_r16", -1);

               int tval = MIMO_ParametersPerBand_supportCodeWordSoftCombining_r16.decodeEnumValue (buffer);
               supportCodeWordSoftCombining_r16 = MIMO_ParametersPerBand_supportCodeWordSoftCombining_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("supportCodeWordSoftCombining_r16", -1);
            }
            else {
               supportCodeWordSoftCombining_r16 = null;
            }

            // decode supportTDM_SchemeA_r16

            if (supportTDM_SchemeA_r16Present) {
               buffer.getContext().eventDispatcher.startElement("supportTDM_SchemeA_r16", -1);

               int tval = MIMO_ParametersPerBand_supportTDM_SchemeA_r16.decodeEnumValue (buffer);
               supportTDM_SchemeA_r16 = MIMO_ParametersPerBand_supportTDM_SchemeA_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("supportTDM_SchemeA_r16", -1);
            }
            else {
               supportTDM_SchemeA_r16 = null;
            }

            // decode supportInter_slotTDM_r16

            if (supportInter_slotTDM_r16Present) {
               buffer.getContext().eventDispatcher.startElement("supportInter_slotTDM_r16", -1);

               supportInter_slotTDM_r16 = new MIMO_ParametersPerBand_supportInter_slotTDM_r16();
               supportInter_slotTDM_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("supportInter_slotTDM_r16", -1);
            }
            else {
               supportInter_slotTDM_r16 = null;
            }

            // decode lowPAPR_DMRS_PDSCH_r16

            if (lowPAPR_DMRS_PDSCH_r16Present) {
               buffer.getContext().eventDispatcher.startElement("lowPAPR_DMRS_PDSCH_r16", -1);

               int tval = MIMO_ParametersPerBand_lowPAPR_DMRS_PDSCH_r16.decodeEnumValue (buffer);
               lowPAPR_DMRS_PDSCH_r16 = MIMO_ParametersPerBand_lowPAPR_DMRS_PDSCH_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("lowPAPR_DMRS_PDSCH_r16", -1);
            }
            else {
               lowPAPR_DMRS_PDSCH_r16 = null;
            }

            // decode lowPAPR_DMRS_PUSCHwithoutPrecoding_r16

            if (lowPAPR_DMRS_PUSCHwithoutPrecoding_r16Present) {
               buffer.getContext().eventDispatcher.startElement("lowPAPR_DMRS_PUSCHwithoutPrecoding_r16", -1);

               int tval = MIMO_ParametersPerBand_lowPAPR_DMRS_PUSCHwithoutPrecoding_r16.decodeEnumValue (buffer);
               lowPAPR_DMRS_PUSCHwithoutPrecoding_r16 = MIMO_ParametersPerBand_lowPAPR_DMRS_PUSCHwithoutPrecoding_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("lowPAPR_DMRS_PUSCHwithoutPrecoding_r16", -1);
            }
            else {
               lowPAPR_DMRS_PUSCHwithoutPrecoding_r16 = null;
            }

            // decode lowPAPR_DMRS_PUCCH_r16

            if (lowPAPR_DMRS_PUCCH_r16Present) {
               buffer.getContext().eventDispatcher.startElement("lowPAPR_DMRS_PUCCH_r16", -1);

               int tval = MIMO_ParametersPerBand_lowPAPR_DMRS_PUCCH_r16.decodeEnumValue (buffer);
               lowPAPR_DMRS_PUCCH_r16 = MIMO_ParametersPerBand_lowPAPR_DMRS_PUCCH_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("lowPAPR_DMRS_PUCCH_r16", -1);
            }
            else {
               lowPAPR_DMRS_PUCCH_r16 = null;
            }

            // decode lowPAPR_DMRS_PUSCHwithPrecoding_r16

            if (lowPAPR_DMRS_PUSCHwithPrecoding_r16Present) {
               buffer.getContext().eventDispatcher.startElement("lowPAPR_DMRS_PUSCHwithPrecoding_r16", -1);

               int tval = MIMO_ParametersPerBand_lowPAPR_DMRS_PUSCHwithPrecoding_r16.decodeEnumValue (buffer);
               lowPAPR_DMRS_PUSCHwithPrecoding_r16 = MIMO_ParametersPerBand_lowPAPR_DMRS_PUSCHwithPrecoding_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("lowPAPR_DMRS_PUSCHwithPrecoding_r16", -1);
            }
            else {
               lowPAPR_DMRS_PUSCHwithPrecoding_r16 = null;
            }

            // decode csi_ReportFrameworkExt_r16

            if (csi_ReportFrameworkExt_r16Present) {
               buffer.getContext().eventDispatcher.startElement("csi_ReportFrameworkExt_r16", -1);

               csi_ReportFrameworkExt_r16 = new CSI_ReportFrameworkExt_r16();
               csi_ReportFrameworkExt_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("csi_ReportFrameworkExt_r16", -1);
            }
            else {
               csi_ReportFrameworkExt_r16 = null;
            }

            // decode codebookParametersAddition_r16

            if (codebookParametersAddition_r16Present) {
               buffer.getContext().eventDispatcher.startElement("codebookParametersAddition_r16", -1);

               codebookParametersAddition_r16 = new CodebookParametersAddition_r16();
               codebookParametersAddition_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("codebookParametersAddition_r16", -1);
            }
            else {
               codebookParametersAddition_r16 = null;
            }

            // decode codebookComboParametersAddition_r16

            if (codebookComboParametersAddition_r16Present) {
               buffer.getContext().eventDispatcher.startElement("codebookComboParametersAddition_r16", -1);

               codebookComboParametersAddition_r16 = new CodebookComboParametersAddition_r16();
               codebookComboParametersAddition_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("codebookComboParametersAddition_r16", -1);
            }
            else {
               codebookComboParametersAddition_r16 = null;
            }

            // decode beamCorrespondenceSSB_based_r16

            if (beamCorrespondenceSSB_based_r16Present) {
               buffer.getContext().eventDispatcher.startElement("beamCorrespondenceSSB_based_r16", -1);

               int tval = MIMO_ParametersPerBand_beamCorrespondenceSSB_based_r16.decodeEnumValue (buffer);
               beamCorrespondenceSSB_based_r16 = MIMO_ParametersPerBand_beamCorrespondenceSSB_based_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("beamCorrespondenceSSB_based_r16", -1);
            }
            else {
               beamCorrespondenceSSB_based_r16 = null;
            }

            // decode beamCorrespondenceCSI_RS_based_r16

            if (beamCorrespondenceCSI_RS_based_r16Present) {
               buffer.getContext().eventDispatcher.startElement("beamCorrespondenceCSI_RS_based_r16", -1);

               int tval = MIMO_ParametersPerBand_beamCorrespondenceCSI_RS_based_r16.decodeEnumValue (buffer);
               beamCorrespondenceCSI_RS_based_r16 = MIMO_ParametersPerBand_beamCorrespondenceCSI_RS_based_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("beamCorrespondenceCSI_RS_based_r16", -1);
            }
            else {
               beamCorrespondenceCSI_RS_based_r16 = null;
            }

            // decode beamSwitchTiming_r16

            if (beamSwitchTiming_r16Present) {
               buffer.getContext().eventDispatcher.startElement("beamSwitchTiming_r16", -1);

               beamSwitchTiming_r16 = new MIMO_ParametersPerBand_beamSwitchTiming_r16();
               beamSwitchTiming_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("beamSwitchTiming_r16", -1);
            }
            else {
               beamSwitchTiming_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV4ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean semi_PersistentL1_SINR_Report_PUCCH_r16Present = buffer.decodeBit ("semi_PersistentL1_SINR_Report_PUCCH_r16Present");

            boolean semi_PersistentL1_SINR_Report_PUSCH_r16Present = buffer.decodeBit ("semi_PersistentL1_SINR_Report_PUSCH_r16Present");

            // decode semi_PersistentL1_SINR_Report_PUCCH_r16

            if (semi_PersistentL1_SINR_Report_PUCCH_r16Present) {
               buffer.getContext().eventDispatcher.startElement("semi_PersistentL1_SINR_Report_PUCCH_r16", -1);

               semi_PersistentL1_SINR_Report_PUCCH_r16 = new MIMO_ParametersPerBand_semi_PersistentL1_SINR_Report_PUCCH_r16();
               semi_PersistentL1_SINR_Report_PUCCH_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("semi_PersistentL1_SINR_Report_PUCCH_r16", -1);
            }
            else {
               semi_PersistentL1_SINR_Report_PUCCH_r16 = null;
            }

            // decode semi_PersistentL1_SINR_Report_PUSCH_r16

            if (semi_PersistentL1_SINR_Report_PUSCH_r16Present) {
               buffer.getContext().eventDispatcher.startElement("semi_PersistentL1_SINR_Report_PUSCH_r16", -1);

               int tval = MIMO_ParametersPerBand_semi_PersistentL1_SINR_Report_PUSCH_r16.decodeEnumValue (buffer);
               semi_PersistentL1_SINR_Report_PUSCH_r16 = MIMO_ParametersPerBand_semi_PersistentL1_SINR_Report_PUSCH_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("semi_PersistentL1_SINR_Report_PUSCH_r16", -1);
            }
            else {
               semi_PersistentL1_SINR_Report_PUSCH_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV5ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean spatialRelations_v1640Present = buffer.decodeBit ("spatialRelations_v1640Present");

            boolean support64CandidateBeamRS_BFR_r16Present = buffer.decodeBit ("support64CandidateBeamRS_BFR_r16Present");

            // decode spatialRelations_v1640

            if (spatialRelations_v1640Present) {
               buffer.getContext().eventDispatcher.startElement("spatialRelations_v1640", -1);

               spatialRelations_v1640 = new MIMO_ParametersPerBand_spatialRelations_v1640();
               spatialRelations_v1640.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("spatialRelations_v1640", -1);
            }
            else {
               spatialRelations_v1640 = null;
            }

            // decode support64CandidateBeamRS_BFR_r16

            if (support64CandidateBeamRS_BFR_r16Present) {
               buffer.getContext().eventDispatcher.startElement("support64CandidateBeamRS_BFR_r16", -1);

               int tval = MIMO_ParametersPerBand_support64CandidateBeamRS_BFR_r16.decodeEnumValue (buffer);
               support64CandidateBeamRS_BFR_r16 = MIMO_ParametersPerBand_support64CandidateBeamRS_BFR_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("support64CandidateBeamRS_BFR_r16", -1);
            }
            else {
               support64CandidateBeamRS_BFR_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (mV2ExtPresent ||
      mV3ExtPresent ||
      mV4ExtPresent ||
      mV5ExtPresent ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((tci_StatePDSCH != null), null);
      buffer.encodeBit ((additionalActiveTCI_StatePDCCH != null), null);
      buffer.encodeBit ((pusch_TransCoherence != null), null);
      buffer.encodeBit ((beamCorrespondenceWithoutUL_BeamSweeping != null), null);
      buffer.encodeBit ((periodicBeamReport != null), null);
      buffer.encodeBit ((aperiodicBeamReport != null), null);
      buffer.encodeBit ((sp_BeamReportPUCCH != null), null);
      buffer.encodeBit ((sp_BeamReportPUSCH != null), null);
      buffer.encodeBit ((dummy1 != null), null);
      buffer.encodeBit ((maxNumberRxBeam != null), null);
      buffer.encodeBit ((maxNumberRxTxBeamSwitchDL != null), null);
      buffer.encodeBit ((maxNumberNonGroupBeamReporting != null), null);
      buffer.encodeBit ((groupBeamReporting != null), null);
      buffer.encodeBit ((uplinkBeamManagement != null), null);
      buffer.encodeBit ((maxNumberCSI_RS_BFD != null), null);
      buffer.encodeBit ((maxNumberSSB_BFD != null), null);
      buffer.encodeBit ((maxNumberCSI_RS_SSB_CBD != null), null);
      buffer.encodeBit ((dummy2 != null), null);
      buffer.encodeBit ((twoPortsPTRS_UL != null), null);
      buffer.encodeBit ((dummy5 != null), null);
      buffer.encodeBit ((dummy3 != null), null);
      buffer.encodeBit ((beamReportTiming != null), null);
      buffer.encodeBit ((ptrs_DensityRecommendationSetDL != null), null);
      buffer.encodeBit ((ptrs_DensityRecommendationSetUL != null), null);
      buffer.encodeBit ((dummy4 != null), null);
      buffer.encodeBit ((aperiodicTRS != null), null);

      // encode tci_StatePDSCH

      if (tci_StatePDSCH != null) {
         buffer.getContext().eventDispatcher.startElement("tci_StatePDSCH", -1);

         tci_StatePDSCH.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("tci_StatePDSCH", -1);
      }

      // encode additionalActiveTCI_StatePDCCH

      if (additionalActiveTCI_StatePDCCH != null) {
         buffer.getContext().eventDispatcher.startElement("additionalActiveTCI_StatePDCCH", -1);

         additionalActiveTCI_StatePDCCH.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("additionalActiveTCI_StatePDCCH", -1);
      }

      // encode pusch_TransCoherence

      if (pusch_TransCoherence != null) {
         buffer.getContext().eventDispatcher.startElement("pusch_TransCoherence", -1);

         pusch_TransCoherence.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("pusch_TransCoherence", -1);
      }

      // encode beamCorrespondenceWithoutUL_BeamSweeping

      if (beamCorrespondenceWithoutUL_BeamSweeping != null) {
         buffer.getContext().eventDispatcher.startElement("beamCorrespondenceWithoutUL_BeamSweeping", -1);

         beamCorrespondenceWithoutUL_BeamSweeping.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("beamCorrespondenceWithoutUL_BeamSweeping", -1);
      }

      // encode periodicBeamReport

      if (periodicBeamReport != null) {
         buffer.getContext().eventDispatcher.startElement("periodicBeamReport", -1);

         periodicBeamReport.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("periodicBeamReport", -1);
      }

      // encode aperiodicBeamReport

      if (aperiodicBeamReport != null) {
         buffer.getContext().eventDispatcher.startElement("aperiodicBeamReport", -1);

         aperiodicBeamReport.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("aperiodicBeamReport", -1);
      }

      // encode sp_BeamReportPUCCH

      if (sp_BeamReportPUCCH != null) {
         buffer.getContext().eventDispatcher.startElement("sp_BeamReportPUCCH", -1);

         sp_BeamReportPUCCH.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sp_BeamReportPUCCH", -1);
      }

      // encode sp_BeamReportPUSCH

      if (sp_BeamReportPUSCH != null) {
         buffer.getContext().eventDispatcher.startElement("sp_BeamReportPUSCH", -1);

         sp_BeamReportPUSCH.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sp_BeamReportPUSCH", -1);
      }

      // encode dummy1

      if (dummy1 != null) {
         buffer.getContext().eventDispatcher.startElement("dummy1", -1);

         dummy1.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("dummy1", -1);
      }

      // encode maxNumberRxBeam

      if (maxNumberRxBeam != null) {
         buffer.getContext().eventDispatcher.startElement("maxNumberRxBeam", -1);

         maxNumberRxBeam.encode (buffer, 2, 8);

         buffer.getContext().eventDispatcher.endElement("maxNumberRxBeam", -1);
      }

      // encode maxNumberRxTxBeamSwitchDL

      if (maxNumberRxTxBeamSwitchDL != null) {
         buffer.getContext().eventDispatcher.startElement("maxNumberRxTxBeamSwitchDL", -1);

         maxNumberRxTxBeamSwitchDL.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("maxNumberRxTxBeamSwitchDL", -1);
      }

      // encode maxNumberNonGroupBeamReporting

      if (maxNumberNonGroupBeamReporting != null) {
         buffer.getContext().eventDispatcher.startElement("maxNumberNonGroupBeamReporting", -1);

         maxNumberNonGroupBeamReporting.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("maxNumberNonGroupBeamReporting", -1);
      }

      // encode groupBeamReporting

      if (groupBeamReporting != null) {
         buffer.getContext().eventDispatcher.startElement("groupBeamReporting", -1);

         groupBeamReporting.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("groupBeamReporting", -1);
      }

      // encode uplinkBeamManagement

      if (uplinkBeamManagement != null) {
         buffer.getContext().eventDispatcher.startElement("uplinkBeamManagement", -1);

         uplinkBeamManagement.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("uplinkBeamManagement", -1);
      }

      // encode maxNumberCSI_RS_BFD

      if (maxNumberCSI_RS_BFD != null) {
         buffer.getContext().eventDispatcher.startElement("maxNumberCSI_RS_BFD", -1);

         maxNumberCSI_RS_BFD.encode (buffer, 1, 64);

         buffer.getContext().eventDispatcher.endElement("maxNumberCSI_RS_BFD", -1);
      }

      // encode maxNumberSSB_BFD

      if (maxNumberSSB_BFD != null) {
         buffer.getContext().eventDispatcher.startElement("maxNumberSSB_BFD", -1);

         maxNumberSSB_BFD.encode (buffer, 1, 64);

         buffer.getContext().eventDispatcher.endElement("maxNumberSSB_BFD", -1);
      }

      // encode maxNumberCSI_RS_SSB_CBD

      if (maxNumberCSI_RS_SSB_CBD != null) {
         buffer.getContext().eventDispatcher.startElement("maxNumberCSI_RS_SSB_CBD", -1);

         maxNumberCSI_RS_SSB_CBD.encode (buffer, 1, 256);

         buffer.getContext().eventDispatcher.endElement("maxNumberCSI_RS_SSB_CBD", -1);
      }

      // encode dummy2

      if (dummy2 != null) {
         buffer.getContext().eventDispatcher.startElement("dummy2", -1);

         dummy2.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("dummy2", -1);
      }

      // encode twoPortsPTRS_UL

      if (twoPortsPTRS_UL != null) {
         buffer.getContext().eventDispatcher.startElement("twoPortsPTRS_UL", -1);

         twoPortsPTRS_UL.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("twoPortsPTRS_UL", -1);
      }

      // encode dummy5

      if (dummy5 != null) {
         buffer.getContext().eventDispatcher.startElement("dummy5", -1);

         dummy5.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("dummy5", -1);
      }

      // encode dummy3

      if (dummy3 != null) {
         buffer.getContext().eventDispatcher.startElement("dummy3", -1);

         dummy3.encode (buffer, 1, 4);

         buffer.getContext().eventDispatcher.endElement("dummy3", -1);
      }

      // encode beamReportTiming

      if (beamReportTiming != null) {
         buffer.getContext().eventDispatcher.startElement("beamReportTiming", -1);

         beamReportTiming.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("beamReportTiming", -1);
      }

      // encode ptrs_DensityRecommendationSetDL

      if (ptrs_DensityRecommendationSetDL != null) {
         buffer.getContext().eventDispatcher.startElement("ptrs_DensityRecommendationSetDL", -1);

         ptrs_DensityRecommendationSetDL.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ptrs_DensityRecommendationSetDL", -1);
      }

      // encode ptrs_DensityRecommendationSetUL

      if (ptrs_DensityRecommendationSetUL != null) {
         buffer.getContext().eventDispatcher.startElement("ptrs_DensityRecommendationSetUL", -1);

         ptrs_DensityRecommendationSetUL.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ptrs_DensityRecommendationSetUL", -1);
      }

      // encode dummy4

      if (dummy4 != null) {
         buffer.getContext().eventDispatcher.startElement("dummy4", -1);

         dummy4.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("dummy4", -1);
      }

      // encode aperiodicTRS

      if (aperiodicTRS != null) {
         buffer.getContext().eventDispatcher.startElement("aperiodicTRS", -1);

         aperiodicTRS.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("aperiodicTRS", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 4;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit (mV2ExtPresent, null);
         buffer.encodeBit (mV3ExtPresent, null);
         buffer.encodeBit (mV4ExtPresent, null);
         buffer.encodeBit (mV5ExtPresent, null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         if (mV2ExtPresent) {
            buffer.reset();
            buffer.encodeBit ((dummy6 != null), "optbit");
            buffer.encodeBit ((beamManagementSSB_CSI_RS != null), "optbit");
            buffer.encodeBit ((beamSwitchTiming != null), "optbit");
            buffer.encodeBit ((codebookParameters != null), "optbit");
            buffer.encodeBit ((csi_RS_IM_ReceptionForFeedback != null), "optbit");
            buffer.encodeBit ((csi_RS_ProcFrameworkForSRS != null), "optbit");
            buffer.encodeBit ((csi_ReportFramework != null), "optbit");
            buffer.encodeBit ((csi_RS_ForTracking != null), "optbit");
            buffer.encodeBit ((srs_AssocCSI_RS != null), "optbit");
            buffer.encodeBit ((spatialRelations != null), "optbit");
            if (dummy6 != null) {
               dummy6.encode (buffer);
            }
            if (beamManagementSSB_CSI_RS != null) {
               beamManagementSSB_CSI_RS.encode (buffer);
            }
            if (beamSwitchTiming != null) {
               beamSwitchTiming.encode (buffer);
            }
            if (codebookParameters != null) {
               codebookParameters.encode (buffer);
            }
            if (csi_RS_IM_ReceptionForFeedback != null) {
               csi_RS_IM_ReceptionForFeedback.encode (buffer);
            }
            if (csi_RS_ProcFrameworkForSRS != null) {
               csi_RS_ProcFrameworkForSRS.encode (buffer);
            }
            if (csi_ReportFramework != null) {
               csi_ReportFramework.encode (buffer);
            }
            if (csi_RS_ForTracking != null) {
               csi_RS_ForTracking.encode (buffer);
            }
            if (srs_AssocCSI_RS != null) {
               srs_AssocCSI_RS.encode (buffer);
            }
            if (spatialRelations != null) {
               spatialRelations.encode (buffer);
            }
            mainBuffer.encodeOpenType (buffer, null);
         }

         if (mV3ExtPresent) {
            buffer.reset();
            buffer.encodeBit ((defaultQCL_TwoTCI_r16 != null), "optbit");
            buffer.encodeBit ((codebookParametersPerBand_r16 != null), "optbit");
            buffer.encodeBit ((simul_SpatialRelationUpdatePUCCHResGroup_r16 != null), "optbit");
            buffer.encodeBit ((maxNumberSCellBFR_r16 != null), "optbit");
            buffer.encodeBit ((simultaneousReceptionDiffTypeD_r16 != null), "optbit");
            buffer.encodeBit ((ssb_csirs_SINR_measurement_r16 != null), "optbit");
            buffer.encodeBit ((nonGroupSINR_reporting_r16 != null), "optbit");
            buffer.encodeBit ((groupSINR_reporting_r16 != null), "optbit");
            buffer.encodeBit ((multiDCI_multiTRP_Parameters_r16 != null), "optbit");
            buffer.encodeBit ((singleDCI_SDM_scheme_Parameters_r16 != null), "optbit");
            buffer.encodeBit ((supportFDM_SchemeA_r16 != null), "optbit");
            buffer.encodeBit ((supportCodeWordSoftCombining_r16 != null), "optbit");
            buffer.encodeBit ((supportTDM_SchemeA_r16 != null), "optbit");
            buffer.encodeBit ((supportInter_slotTDM_r16 != null), "optbit");
            buffer.encodeBit ((lowPAPR_DMRS_PDSCH_r16 != null), "optbit");
            buffer.encodeBit ((lowPAPR_DMRS_PUSCHwithoutPrecoding_r16 != null), "optbit");
            buffer.encodeBit ((lowPAPR_DMRS_PUCCH_r16 != null), "optbit");
            buffer.encodeBit ((lowPAPR_DMRS_PUSCHwithPrecoding_r16 != null), "optbit");
            buffer.encodeBit ((csi_ReportFrameworkExt_r16 != null), "optbit");
            buffer.encodeBit ((codebookParametersAddition_r16 != null), "optbit");
            buffer.encodeBit ((codebookComboParametersAddition_r16 != null), "optbit");
            buffer.encodeBit ((beamCorrespondenceSSB_based_r16 != null), "optbit");
            buffer.encodeBit ((beamCorrespondenceCSI_RS_based_r16 != null), "optbit");
            buffer.encodeBit ((beamSwitchTiming_r16 != null), "optbit");
            if (defaultQCL_TwoTCI_r16 != null) {
               defaultQCL_TwoTCI_r16.encode (buffer);
            }
            if (codebookParametersPerBand_r16 != null) {
               codebookParametersPerBand_r16.encode (buffer);
            }
            if (simul_SpatialRelationUpdatePUCCHResGroup_r16 != null) {
               simul_SpatialRelationUpdatePUCCHResGroup_r16.encode (buffer);
            }
            if (maxNumberSCellBFR_r16 != null) {
               maxNumberSCellBFR_r16.encode (buffer);
            }
            if (simultaneousReceptionDiffTypeD_r16 != null) {
               simultaneousReceptionDiffTypeD_r16.encode (buffer);
            }
            if (ssb_csirs_SINR_measurement_r16 != null) {
               ssb_csirs_SINR_measurement_r16.encode (buffer);
            }
            if (nonGroupSINR_reporting_r16 != null) {
               nonGroupSINR_reporting_r16.encode (buffer);
            }
            if (groupSINR_reporting_r16 != null) {
               groupSINR_reporting_r16.encode (buffer);
            }
            if (multiDCI_multiTRP_Parameters_r16 != null) {
               multiDCI_multiTRP_Parameters_r16.encode (buffer);
            }
            if (singleDCI_SDM_scheme_Parameters_r16 != null) {
               singleDCI_SDM_scheme_Parameters_r16.encode (buffer);
            }
            if (supportFDM_SchemeA_r16 != null) {
               supportFDM_SchemeA_r16.encode (buffer);
            }
            if (supportCodeWordSoftCombining_r16 != null) {
               supportCodeWordSoftCombining_r16.encode (buffer);
            }
            if (supportTDM_SchemeA_r16 != null) {
               supportTDM_SchemeA_r16.encode (buffer);
            }
            if (supportInter_slotTDM_r16 != null) {
               supportInter_slotTDM_r16.encode (buffer);
            }
            if (lowPAPR_DMRS_PDSCH_r16 != null) {
               lowPAPR_DMRS_PDSCH_r16.encode (buffer);
            }
            if (lowPAPR_DMRS_PUSCHwithoutPrecoding_r16 != null) {
               lowPAPR_DMRS_PUSCHwithoutPrecoding_r16.encode (buffer);
            }
            if (lowPAPR_DMRS_PUCCH_r16 != null) {
               lowPAPR_DMRS_PUCCH_r16.encode (buffer);
            }
            if (lowPAPR_DMRS_PUSCHwithPrecoding_r16 != null) {
               lowPAPR_DMRS_PUSCHwithPrecoding_r16.encode (buffer);
            }
            if (csi_ReportFrameworkExt_r16 != null) {
               csi_ReportFrameworkExt_r16.encode (buffer);
            }
            if (codebookParametersAddition_r16 != null) {
               codebookParametersAddition_r16.encode (buffer);
            }
            if (codebookComboParametersAddition_r16 != null) {
               codebookComboParametersAddition_r16.encode (buffer);
            }
            if (beamCorrespondenceSSB_based_r16 != null) {
               beamCorrespondenceSSB_based_r16.encode (buffer);
            }
            if (beamCorrespondenceCSI_RS_based_r16 != null) {
               beamCorrespondenceCSI_RS_based_r16.encode (buffer);
            }
            if (beamSwitchTiming_r16 != null) {
               beamSwitchTiming_r16.encode (buffer);
            }
            mainBuffer.encodeOpenType (buffer, null);
         }

         if (mV4ExtPresent) {
            buffer.reset();
            buffer.encodeBit ((semi_PersistentL1_SINR_Report_PUCCH_r16 != null), "optbit");
            buffer.encodeBit ((semi_PersistentL1_SINR_Report_PUSCH_r16 != null), "optbit");
            if (semi_PersistentL1_SINR_Report_PUCCH_r16 != null) {
               semi_PersistentL1_SINR_Report_PUCCH_r16.encode (buffer);
            }
            if (semi_PersistentL1_SINR_Report_PUSCH_r16 != null) {
               semi_PersistentL1_SINR_Report_PUSCH_r16.encode (buffer);
            }
            mainBuffer.encodeOpenType (buffer, null);
         }

         if (mV5ExtPresent) {
            buffer.reset();
            buffer.encodeBit ((spatialRelations_v1640 != null), "optbit");
            buffer.encodeBit ((support64CandidateBeamRS_BFR_r16 != null), "optbit");
            if (spatialRelations_v1640 != null) {
               spatialRelations_v1640.encode (buffer);
            }
            if (support64CandidateBeamRS_BFR_r16 != null) {
               support64CandidateBeamRS_BFR_r16.encode (buffer);
            }
            mainBuffer.encodeOpenType (buffer, null);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (tci_StatePDSCH != null) tci_StatePDSCH.print (_sb, "tci_StatePDSCH", _level+1);
      if (additionalActiveTCI_StatePDCCH != null) additionalActiveTCI_StatePDCCH.print (_sb, "additionalActiveTCI_StatePDCCH", _level+1);
      if (pusch_TransCoherence != null) pusch_TransCoherence.print (_sb, "pusch_TransCoherence", _level+1);
      if (beamCorrespondenceWithoutUL_BeamSweeping != null) beamCorrespondenceWithoutUL_BeamSweeping.print (_sb, "beamCorrespondenceWithoutUL_BeamSweeping", _level+1);
      if (periodicBeamReport != null) periodicBeamReport.print (_sb, "periodicBeamReport", _level+1);
      if (aperiodicBeamReport != null) aperiodicBeamReport.print (_sb, "aperiodicBeamReport", _level+1);
      if (sp_BeamReportPUCCH != null) sp_BeamReportPUCCH.print (_sb, "sp_BeamReportPUCCH", _level+1);
      if (sp_BeamReportPUSCH != null) sp_BeamReportPUSCH.print (_sb, "sp_BeamReportPUSCH", _level+1);
      if (dummy1 != null) dummy1.print (_sb, "dummy1", _level+1);
      if (maxNumberRxBeam != null) maxNumberRxBeam.print (_sb, "maxNumberRxBeam", _level+1);
      if (maxNumberRxTxBeamSwitchDL != null) maxNumberRxTxBeamSwitchDL.print (_sb, "maxNumberRxTxBeamSwitchDL", _level+1);
      if (maxNumberNonGroupBeamReporting != null) maxNumberNonGroupBeamReporting.print (_sb, "maxNumberNonGroupBeamReporting", _level+1);
      if (groupBeamReporting != null) groupBeamReporting.print (_sb, "groupBeamReporting", _level+1);
      if (uplinkBeamManagement != null) uplinkBeamManagement.print (_sb, "uplinkBeamManagement", _level+1);
      if (maxNumberCSI_RS_BFD != null) maxNumberCSI_RS_BFD.print (_sb, "maxNumberCSI_RS_BFD", _level+1);
      if (maxNumberSSB_BFD != null) maxNumberSSB_BFD.print (_sb, "maxNumberSSB_BFD", _level+1);
      if (maxNumberCSI_RS_SSB_CBD != null) maxNumberCSI_RS_SSB_CBD.print (_sb, "maxNumberCSI_RS_SSB_CBD", _level+1);
      if (dummy2 != null) dummy2.print (_sb, "dummy2", _level+1);
      if (twoPortsPTRS_UL != null) twoPortsPTRS_UL.print (_sb, "twoPortsPTRS_UL", _level+1);
      if (dummy5 != null) dummy5.print (_sb, "dummy5", _level+1);
      if (dummy3 != null) dummy3.print (_sb, "dummy3", _level+1);
      if (beamReportTiming != null) beamReportTiming.print (_sb, "beamReportTiming", _level+1);
      if (ptrs_DensityRecommendationSetDL != null) ptrs_DensityRecommendationSetDL.print (_sb, "ptrs_DensityRecommendationSetDL", _level+1);
      if (ptrs_DensityRecommendationSetUL != null) ptrs_DensityRecommendationSetUL.print (_sb, "ptrs_DensityRecommendationSetUL", _level+1);
      if (dummy4 != null) dummy4.print (_sb, "dummy4", _level+1);
      if (aperiodicTRS != null) aperiodicTRS.print (_sb, "aperiodicTRS", _level+1);
      if (dummy6 != null) dummy6.print (_sb, "dummy6", _level+1);
      if (beamManagementSSB_CSI_RS != null) beamManagementSSB_CSI_RS.print (_sb, "beamManagementSSB_CSI_RS", _level+1);
      if (beamSwitchTiming != null) beamSwitchTiming.print (_sb, "beamSwitchTiming", _level+1);
      if (codebookParameters != null) codebookParameters.print (_sb, "codebookParameters", _level+1);
      if (csi_RS_IM_ReceptionForFeedback != null) csi_RS_IM_ReceptionForFeedback.print (_sb, "csi_RS_IM_ReceptionForFeedback", _level+1);
      if (csi_RS_ProcFrameworkForSRS != null) csi_RS_ProcFrameworkForSRS.print (_sb, "csi_RS_ProcFrameworkForSRS", _level+1);
      if (csi_ReportFramework != null) csi_ReportFramework.print (_sb, "csi_ReportFramework", _level+1);
      if (csi_RS_ForTracking != null) csi_RS_ForTracking.print (_sb, "csi_RS_ForTracking", _level+1);
      if (srs_AssocCSI_RS != null) srs_AssocCSI_RS.print (_sb, "srs_AssocCSI_RS", _level+1);
      if (spatialRelations != null) spatialRelations.print (_sb, "spatialRelations", _level+1);
      if (defaultQCL_TwoTCI_r16 != null) defaultQCL_TwoTCI_r16.print (_sb, "defaultQCL_TwoTCI_r16", _level+1);
      if (codebookParametersPerBand_r16 != null) codebookParametersPerBand_r16.print (_sb, "codebookParametersPerBand_r16", _level+1);
      if (simul_SpatialRelationUpdatePUCCHResGroup_r16 != null) simul_SpatialRelationUpdatePUCCHResGroup_r16.print (_sb, "simul_SpatialRelationUpdatePUCCHResGroup_r16", _level+1);
      if (maxNumberSCellBFR_r16 != null) maxNumberSCellBFR_r16.print (_sb, "maxNumberSCellBFR_r16", _level+1);
      if (simultaneousReceptionDiffTypeD_r16 != null) simultaneousReceptionDiffTypeD_r16.print (_sb, "simultaneousReceptionDiffTypeD_r16", _level+1);
      if (ssb_csirs_SINR_measurement_r16 != null) ssb_csirs_SINR_measurement_r16.print (_sb, "ssb_csirs_SINR_measurement_r16", _level+1);
      if (nonGroupSINR_reporting_r16 != null) nonGroupSINR_reporting_r16.print (_sb, "nonGroupSINR_reporting_r16", _level+1);
      if (groupSINR_reporting_r16 != null) groupSINR_reporting_r16.print (_sb, "groupSINR_reporting_r16", _level+1);
      if (multiDCI_multiTRP_Parameters_r16 != null) multiDCI_multiTRP_Parameters_r16.print (_sb, "multiDCI_multiTRP_Parameters_r16", _level+1);
      if (singleDCI_SDM_scheme_Parameters_r16 != null) singleDCI_SDM_scheme_Parameters_r16.print (_sb, "singleDCI_SDM_scheme_Parameters_r16", _level+1);
      if (supportFDM_SchemeA_r16 != null) supportFDM_SchemeA_r16.print (_sb, "supportFDM_SchemeA_r16", _level+1);
      if (supportCodeWordSoftCombining_r16 != null) supportCodeWordSoftCombining_r16.print (_sb, "supportCodeWordSoftCombining_r16", _level+1);
      if (supportTDM_SchemeA_r16 != null) supportTDM_SchemeA_r16.print (_sb, "supportTDM_SchemeA_r16", _level+1);
      if (supportInter_slotTDM_r16 != null) supportInter_slotTDM_r16.print (_sb, "supportInter_slotTDM_r16", _level+1);
      if (lowPAPR_DMRS_PDSCH_r16 != null) lowPAPR_DMRS_PDSCH_r16.print (_sb, "lowPAPR_DMRS_PDSCH_r16", _level+1);
      if (lowPAPR_DMRS_PUSCHwithoutPrecoding_r16 != null) lowPAPR_DMRS_PUSCHwithoutPrecoding_r16.print (_sb, "lowPAPR_DMRS_PUSCHwithoutPrecoding_r16", _level+1);
      if (lowPAPR_DMRS_PUCCH_r16 != null) lowPAPR_DMRS_PUCCH_r16.print (_sb, "lowPAPR_DMRS_PUCCH_r16", _level+1);
      if (lowPAPR_DMRS_PUSCHwithPrecoding_r16 != null) lowPAPR_DMRS_PUSCHwithPrecoding_r16.print (_sb, "lowPAPR_DMRS_PUSCHwithPrecoding_r16", _level+1);
      if (csi_ReportFrameworkExt_r16 != null) csi_ReportFrameworkExt_r16.print (_sb, "csi_ReportFrameworkExt_r16", _level+1);
      if (codebookParametersAddition_r16 != null) codebookParametersAddition_r16.print (_sb, "codebookParametersAddition_r16", _level+1);
      if (codebookComboParametersAddition_r16 != null) codebookComboParametersAddition_r16.print (_sb, "codebookComboParametersAddition_r16", _level+1);
      if (beamCorrespondenceSSB_based_r16 != null) beamCorrespondenceSSB_based_r16.print (_sb, "beamCorrespondenceSSB_based_r16", _level+1);
      if (beamCorrespondenceCSI_RS_based_r16 != null) beamCorrespondenceCSI_RS_based_r16.print (_sb, "beamCorrespondenceCSI_RS_based_r16", _level+1);
      if (beamSwitchTiming_r16 != null) beamSwitchTiming_r16.print (_sb, "beamSwitchTiming_r16", _level+1);
      if (semi_PersistentL1_SINR_Report_PUCCH_r16 != null) semi_PersistentL1_SINR_Report_PUCCH_r16.print (_sb, "semi_PersistentL1_SINR_Report_PUCCH_r16", _level+1);
      if (semi_PersistentL1_SINR_Report_PUSCH_r16 != null) semi_PersistentL1_SINR_Report_PUSCH_r16.print (_sb, "semi_PersistentL1_SINR_Report_PUSCH_r16", _level+1);
      if (spatialRelations_v1640 != null) spatialRelations_v1640.print (_sb, "spatialRelations_v1640", _level+1);
      if (support64CandidateBeamRS_BFR_r16 != null) support64CandidateBeamRS_BFR_r16.print (_sb, "support64CandidateBeamRS_BFR_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
