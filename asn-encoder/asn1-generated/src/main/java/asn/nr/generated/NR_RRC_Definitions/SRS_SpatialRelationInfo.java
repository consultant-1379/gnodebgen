/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SRS_SpatialRelationInfo extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SRS-SpatialRelationInfo";
   }

   public ServCellIndex servingCellId;  // optional
   public SRS_SpatialRelationInfo_referenceSignal referenceSignal;

   public SRS_SpatialRelationInfo () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SRS_SpatialRelationInfo (
      ServCellIndex servingCellId_,
      SRS_SpatialRelationInfo_referenceSignal referenceSignal_
   ) {
      super();
      servingCellId = servingCellId_;
      referenceSignal = referenceSignal_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SRS_SpatialRelationInfo (
      SRS_SpatialRelationInfo_referenceSignal referenceSignal_
   ) {
      super();
      referenceSignal = referenceSignal_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SRS_SpatialRelationInfo (long servingCellId_,
      SRS_SpatialRelationInfo_referenceSignal referenceSignal_
   ) {
      super();
      servingCellId = new ServCellIndex (servingCellId_);
      referenceSignal = referenceSignal_;
   }

   public void init () {
      servingCellId = null;
      referenceSignal = null;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return servingCellId;
         case 1: return referenceSignal;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "servingCellId";
         case 1: return "referenceSignal";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean servingCellIdPresent = buffer.decodeBit ("servingCellIdPresent");

      // decode servingCellId

      if (servingCellIdPresent) {
         buffer.getContext().eventDispatcher.startElement("servingCellId", -1);

         servingCellId = new ServCellIndex();
         servingCellId.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("servingCellId", -1);
      }
      else {
         servingCellId = null;
      }

      // decode referenceSignal

      buffer.getContext().eventDispatcher.startElement("referenceSignal", -1);

      referenceSignal = new SRS_SpatialRelationInfo_referenceSignal();
      referenceSignal.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("referenceSignal", -1);

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((servingCellId != null), null);

      // encode servingCellId

      if (servingCellId != null) {
         buffer.getContext().eventDispatcher.startElement("servingCellId", -1);

         servingCellId.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("servingCellId", -1);
      }

      // encode referenceSignal

      if (referenceSignal != null) {
         buffer.getContext().eventDispatcher.startElement("referenceSignal", -1);

         referenceSignal.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("referenceSignal", -1);
      }
      else throw new Asn1MissingRequiredException ("referenceSignal");

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (servingCellId != null) servingCellId.print (_sb, "servingCellId", _level+1);
      if (referenceSignal != null) referenceSignal.print (_sb, "referenceSignal", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
