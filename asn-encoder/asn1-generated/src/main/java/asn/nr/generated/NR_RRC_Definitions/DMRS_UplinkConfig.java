/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class DMRS_UplinkConfig extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "DMRS-UplinkConfig";
   }

   public DMRS_UplinkConfig_dmrs_Type dmrs_Type = null;  // optional
   public DMRS_UplinkConfig_dmrs_AdditionalPosition dmrs_AdditionalPosition = null;  // optional
   public DMRS_UplinkConfig_phaseTrackingRS phaseTrackingRS;  // optional
   public DMRS_UplinkConfig_maxLength maxLength = null;  // optional
   public DMRS_UplinkConfig_transformPrecodingDisabled transformPrecodingDisabled;  // optional
   public DMRS_UplinkConfig_transformPrecodingEnabled transformPrecodingEnabled;  // optional
   public Asn1OpenExt extElem1;

   public DMRS_UplinkConfig () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public DMRS_UplinkConfig (
      DMRS_UplinkConfig_dmrs_Type dmrs_Type_,
      DMRS_UplinkConfig_dmrs_AdditionalPosition dmrs_AdditionalPosition_,
      DMRS_UplinkConfig_phaseTrackingRS phaseTrackingRS_,
      DMRS_UplinkConfig_maxLength maxLength_,
      DMRS_UplinkConfig_transformPrecodingDisabled transformPrecodingDisabled_,
      DMRS_UplinkConfig_transformPrecodingEnabled transformPrecodingEnabled_
   ) {
      super();
      dmrs_Type = dmrs_Type_;
      dmrs_AdditionalPosition = dmrs_AdditionalPosition_;
      phaseTrackingRS = phaseTrackingRS_;
      maxLength = maxLength_;
      transformPrecodingDisabled = transformPrecodingDisabled_;
      transformPrecodingEnabled = transformPrecodingEnabled_;
   }

   public void init () {
      dmrs_Type = null;
      dmrs_AdditionalPosition = null;
      phaseTrackingRS = null;
      maxLength = null;
      transformPrecodingDisabled = null;
      transformPrecodingEnabled = null;
      extElem1 = null;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return dmrs_Type;
         case 1: return dmrs_AdditionalPosition;
         case 2: return phaseTrackingRS;
         case 3: return maxLength;
         case 4: return transformPrecodingDisabled;
         case 5: return transformPrecodingEnabled;
         case 6: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "dmrs-Type";
         case 1: return "dmrs-AdditionalPosition";
         case 2: return "phaseTrackingRS";
         case 3: return "maxLength";
         case 4: return "transformPrecodingDisabled";
         case 5: return "transformPrecodingEnabled";
         case 6: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean dmrs_TypePresent = buffer.decodeBit ("dmrs_TypePresent");
      boolean dmrs_AdditionalPositionPresent = buffer.decodeBit ("dmrs_AdditionalPositionPresent");
      boolean phaseTrackingRSPresent = buffer.decodeBit ("phaseTrackingRSPresent");
      boolean maxLengthPresent = buffer.decodeBit ("maxLengthPresent");
      boolean transformPrecodingDisabledPresent = buffer.decodeBit ("transformPrecodingDisabledPresent");
      boolean transformPrecodingEnabledPresent = buffer.decodeBit ("transformPrecodingEnabledPresent");

      // decode dmrs_Type

      if (dmrs_TypePresent) {
         buffer.getContext().eventDispatcher.startElement("dmrs_Type", -1);

         int tval = DMRS_UplinkConfig_dmrs_Type.decodeEnumValue (buffer);
         dmrs_Type = DMRS_UplinkConfig_dmrs_Type.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("dmrs_Type", -1);
      }
      else {
         dmrs_Type = null;
      }

      // decode dmrs_AdditionalPosition

      if (dmrs_AdditionalPositionPresent) {
         buffer.getContext().eventDispatcher.startElement("dmrs_AdditionalPosition", -1);

         int tval = DMRS_UplinkConfig_dmrs_AdditionalPosition.decodeEnumValue (buffer);
         dmrs_AdditionalPosition = DMRS_UplinkConfig_dmrs_AdditionalPosition.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("dmrs_AdditionalPosition", -1);
      }
      else {
         dmrs_AdditionalPosition = null;
      }

      // decode phaseTrackingRS

      if (phaseTrackingRSPresent) {
         buffer.getContext().eventDispatcher.startElement("phaseTrackingRS", -1);

         phaseTrackingRS = new DMRS_UplinkConfig_phaseTrackingRS();
         phaseTrackingRS.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("phaseTrackingRS", -1);
      }
      else {
         phaseTrackingRS = null;
      }

      // decode maxLength

      if (maxLengthPresent) {
         buffer.getContext().eventDispatcher.startElement("maxLength", -1);

         int tval = DMRS_UplinkConfig_maxLength.decodeEnumValue (buffer);
         maxLength = DMRS_UplinkConfig_maxLength.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("maxLength", -1);
      }
      else {
         maxLength = null;
      }

      // decode transformPrecodingDisabled

      if (transformPrecodingDisabledPresent) {
         buffer.getContext().eventDispatcher.startElement("transformPrecodingDisabled", -1);

         transformPrecodingDisabled = new DMRS_UplinkConfig_transformPrecodingDisabled();
         transformPrecodingDisabled.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("transformPrecodingDisabled", -1);
      }
      else {
         transformPrecodingDisabled = null;
      }

      // decode transformPrecodingEnabled

      if (transformPrecodingEnabledPresent) {
         buffer.getContext().eventDispatcher.startElement("transformPrecodingEnabled", -1);

         transformPrecodingEnabled = new DMRS_UplinkConfig_transformPrecodingEnabled();
         transformPrecodingEnabled.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("transformPrecodingEnabled", -1);
      }
      else {
         transformPrecodingEnabled = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((dmrs_Type != null), null);
      buffer.encodeBit ((dmrs_AdditionalPosition != null), null);
      buffer.encodeBit ((phaseTrackingRS != null), null);
      buffer.encodeBit ((maxLength != null), null);
      buffer.encodeBit ((transformPrecodingDisabled != null), null);
      buffer.encodeBit ((transformPrecodingEnabled != null), null);

      // encode dmrs_Type

      if (dmrs_Type != null) {
         buffer.getContext().eventDispatcher.startElement("dmrs_Type", -1);

         dmrs_Type.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("dmrs_Type", -1);
      }

      // encode dmrs_AdditionalPosition

      if (dmrs_AdditionalPosition != null) {
         buffer.getContext().eventDispatcher.startElement("dmrs_AdditionalPosition", -1);

         dmrs_AdditionalPosition.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("dmrs_AdditionalPosition", -1);
      }

      // encode phaseTrackingRS

      if (phaseTrackingRS != null) {
         buffer.getContext().eventDispatcher.startElement("phaseTrackingRS", -1);

         phaseTrackingRS.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("phaseTrackingRS", -1);
      }

      // encode maxLength

      if (maxLength != null) {
         buffer.getContext().eventDispatcher.startElement("maxLength", -1);

         maxLength.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("maxLength", -1);
      }

      // encode transformPrecodingDisabled

      if (transformPrecodingDisabled != null) {
         buffer.getContext().eventDispatcher.startElement("transformPrecodingDisabled", -1);

         transformPrecodingDisabled.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("transformPrecodingDisabled", -1);
      }

      // encode transformPrecodingEnabled

      if (transformPrecodingEnabled != null) {
         buffer.getContext().eventDispatcher.startElement("transformPrecodingEnabled", -1);

         transformPrecodingEnabled.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("transformPrecodingEnabled", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (dmrs_Type != null) dmrs_Type.print (_sb, "dmrs_Type", _level+1);
      if (dmrs_AdditionalPosition != null) dmrs_AdditionalPosition.print (_sb, "dmrs_AdditionalPosition", _level+1);
      if (phaseTrackingRS != null) phaseTrackingRS.print (_sb, "phaseTrackingRS", _level+1);
      if (maxLength != null) maxLength.print (_sb, "maxLength", _level+1);
      if (transformPrecodingDisabled != null) transformPrecodingDisabled.print (_sb, "transformPrecodingDisabled", _level+1);
      if (transformPrecodingEnabled != null) transformPrecodingEnabled.print (_sb, "transformPrecodingEnabled", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
