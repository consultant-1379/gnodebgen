/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class FeatureSetUplink extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "FeatureSetUplink";
   }

   public FeatureSetUplink_featureSetListPerUplinkCC featureSetListPerUplinkCC;
   public FeatureSetUplink_scalingFactor scalingFactor = null;  // optional
   public FeatureSetUplink_dummy3 dummy3 = null;  // optional
   public FreqSeparationClass intraBandFreqSeparationUL = null;  // optional
   public FeatureSetUplink_searchSpaceSharingCA_UL searchSpaceSharingCA_UL = null;  // optional
   public DummyI dummy1;  // optional
   public SRS_Resources supportedSRS_Resources;  // optional
   public FeatureSetUplink_twoPUCCH_Group twoPUCCH_Group = null;  // optional
   public FeatureSetUplink_dynamicSwitchSUL dynamicSwitchSUL = null;  // optional
   public FeatureSetUplink_simultaneousTxSUL_NonSUL simultaneousTxSUL_NonSUL = null;  // optional
   public FeatureSetUplink_pusch_ProcessingType1_DifferentTB_PerSlot pusch_ProcessingType1_DifferentTB_PerSlot;  // optional
   public DummyF dummy2;  // optional

   public FeatureSetUplink () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public FeatureSetUplink (
      FeatureSetUplink_featureSetListPerUplinkCC featureSetListPerUplinkCC_,
      FeatureSetUplink_scalingFactor scalingFactor_,
      FeatureSetUplink_dummy3 dummy3_,
      FreqSeparationClass intraBandFreqSeparationUL_,
      FeatureSetUplink_searchSpaceSharingCA_UL searchSpaceSharingCA_UL_,
      DummyI dummy1_,
      SRS_Resources supportedSRS_Resources_,
      FeatureSetUplink_twoPUCCH_Group twoPUCCH_Group_,
      FeatureSetUplink_dynamicSwitchSUL dynamicSwitchSUL_,
      FeatureSetUplink_simultaneousTxSUL_NonSUL simultaneousTxSUL_NonSUL_,
      FeatureSetUplink_pusch_ProcessingType1_DifferentTB_PerSlot pusch_ProcessingType1_DifferentTB_PerSlot_,
      DummyF dummy2_
   ) {
      super();
      featureSetListPerUplinkCC = featureSetListPerUplinkCC_;
      scalingFactor = scalingFactor_;
      dummy3 = dummy3_;
      intraBandFreqSeparationUL = intraBandFreqSeparationUL_;
      searchSpaceSharingCA_UL = searchSpaceSharingCA_UL_;
      dummy1 = dummy1_;
      supportedSRS_Resources = supportedSRS_Resources_;
      twoPUCCH_Group = twoPUCCH_Group_;
      dynamicSwitchSUL = dynamicSwitchSUL_;
      simultaneousTxSUL_NonSUL = simultaneousTxSUL_NonSUL_;
      pusch_ProcessingType1_DifferentTB_PerSlot = pusch_ProcessingType1_DifferentTB_PerSlot_;
      dummy2 = dummy2_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public FeatureSetUplink (
      FeatureSetUplink_featureSetListPerUplinkCC featureSetListPerUplinkCC_
   ) {
      super();
      featureSetListPerUplinkCC = featureSetListPerUplinkCC_;
   }

   public void init () {
      featureSetListPerUplinkCC = null;
      scalingFactor = null;
      dummy3 = null;
      intraBandFreqSeparationUL = null;
      searchSpaceSharingCA_UL = null;
      dummy1 = null;
      supportedSRS_Resources = null;
      twoPUCCH_Group = null;
      dynamicSwitchSUL = null;
      simultaneousTxSUL_NonSUL = null;
      pusch_ProcessingType1_DifferentTB_PerSlot = null;
      dummy2 = null;
   }

   public int getElementCount() { return 12; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return featureSetListPerUplinkCC;
         case 1: return scalingFactor;
         case 2: return dummy3;
         case 3: return intraBandFreqSeparationUL;
         case 4: return searchSpaceSharingCA_UL;
         case 5: return dummy1;
         case 6: return supportedSRS_Resources;
         case 7: return twoPUCCH_Group;
         case 8: return dynamicSwitchSUL;
         case 9: return simultaneousTxSUL_NonSUL;
         case 10: return pusch_ProcessingType1_DifferentTB_PerSlot;
         case 11: return dummy2;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "featureSetListPerUplinkCC";
         case 1: return "scalingFactor";
         case 2: return "dummy3";
         case 3: return "intraBandFreqSeparationUL";
         case 4: return "searchSpaceSharingCA-UL";
         case 5: return "dummy1";
         case 6: return "supportedSRS-Resources";
         case 7: return "twoPUCCH-Group";
         case 8: return "dynamicSwitchSUL";
         case 9: return "simultaneousTxSUL-NonSUL";
         case 10: return "pusch-ProcessingType1-DifferentTB-PerSlot";
         case 11: return "dummy2";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean scalingFactorPresent = buffer.decodeBit ("scalingFactorPresent");
      boolean dummy3Present = buffer.decodeBit ("dummy3Present");
      boolean intraBandFreqSeparationULPresent = buffer.decodeBit ("intraBandFreqSeparationULPresent");
      boolean searchSpaceSharingCA_ULPresent = buffer.decodeBit ("searchSpaceSharingCA_ULPresent");
      boolean dummy1Present = buffer.decodeBit ("dummy1Present");
      boolean supportedSRS_ResourcesPresent = buffer.decodeBit ("supportedSRS_ResourcesPresent");
      boolean twoPUCCH_GroupPresent = buffer.decodeBit ("twoPUCCH_GroupPresent");
      boolean dynamicSwitchSULPresent = buffer.decodeBit ("dynamicSwitchSULPresent");
      boolean simultaneousTxSUL_NonSULPresent = buffer.decodeBit ("simultaneousTxSUL_NonSULPresent");
      boolean pusch_ProcessingType1_DifferentTB_PerSlotPresent = buffer.decodeBit ("pusch_ProcessingType1_DifferentTB_PerSlotPresent");
      boolean dummy2Present = buffer.decodeBit ("dummy2Present");

      // decode featureSetListPerUplinkCC

      buffer.getContext().eventDispatcher.startElement("featureSetListPerUplinkCC", -1);

      featureSetListPerUplinkCC = new FeatureSetUplink_featureSetListPerUplinkCC();
      featureSetListPerUplinkCC.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("featureSetListPerUplinkCC", -1);

      // decode scalingFactor

      if (scalingFactorPresent) {
         buffer.getContext().eventDispatcher.startElement("scalingFactor", -1);

         int tval = FeatureSetUplink_scalingFactor.decodeEnumValue (buffer);
         scalingFactor = FeatureSetUplink_scalingFactor.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("scalingFactor", -1);
      }
      else {
         scalingFactor = null;
      }

      // decode dummy3

      if (dummy3Present) {
         buffer.getContext().eventDispatcher.startElement("dummy3", -1);

         int tval = FeatureSetUplink_dummy3.decodeEnumValue (buffer);
         dummy3 = FeatureSetUplink_dummy3.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("dummy3", -1);
      }
      else {
         dummy3 = null;
      }

      // decode intraBandFreqSeparationUL

      if (intraBandFreqSeparationULPresent) {
         buffer.getContext().eventDispatcher.startElement("intraBandFreqSeparationUL", -1);

         int tval = FreqSeparationClass.decodeEnumValue (buffer);
         intraBandFreqSeparationUL = FreqSeparationClass.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("intraBandFreqSeparationUL", -1);
      }
      else {
         intraBandFreqSeparationUL = null;
      }

      // decode searchSpaceSharingCA_UL

      if (searchSpaceSharingCA_ULPresent) {
         buffer.getContext().eventDispatcher.startElement("searchSpaceSharingCA_UL", -1);

         int tval = FeatureSetUplink_searchSpaceSharingCA_UL.decodeEnumValue (buffer);
         searchSpaceSharingCA_UL = FeatureSetUplink_searchSpaceSharingCA_UL.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("searchSpaceSharingCA_UL", -1);
      }
      else {
         searchSpaceSharingCA_UL = null;
      }

      // decode dummy1

      if (dummy1Present) {
         buffer.getContext().eventDispatcher.startElement("dummy1", -1);

         dummy1 = new DummyI();
         dummy1.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("dummy1", -1);
      }
      else {
         dummy1 = null;
      }

      // decode supportedSRS_Resources

      if (supportedSRS_ResourcesPresent) {
         buffer.getContext().eventDispatcher.startElement("supportedSRS_Resources", -1);

         supportedSRS_Resources = new SRS_Resources();
         supportedSRS_Resources.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("supportedSRS_Resources", -1);
      }
      else {
         supportedSRS_Resources = null;
      }

      // decode twoPUCCH_Group

      if (twoPUCCH_GroupPresent) {
         buffer.getContext().eventDispatcher.startElement("twoPUCCH_Group", -1);

         int tval = FeatureSetUplink_twoPUCCH_Group.decodeEnumValue (buffer);
         twoPUCCH_Group = FeatureSetUplink_twoPUCCH_Group.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("twoPUCCH_Group", -1);
      }
      else {
         twoPUCCH_Group = null;
      }

      // decode dynamicSwitchSUL

      if (dynamicSwitchSULPresent) {
         buffer.getContext().eventDispatcher.startElement("dynamicSwitchSUL", -1);

         int tval = FeatureSetUplink_dynamicSwitchSUL.decodeEnumValue (buffer);
         dynamicSwitchSUL = FeatureSetUplink_dynamicSwitchSUL.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("dynamicSwitchSUL", -1);
      }
      else {
         dynamicSwitchSUL = null;
      }

      // decode simultaneousTxSUL_NonSUL

      if (simultaneousTxSUL_NonSULPresent) {
         buffer.getContext().eventDispatcher.startElement("simultaneousTxSUL_NonSUL", -1);

         int tval = FeatureSetUplink_simultaneousTxSUL_NonSUL.decodeEnumValue (buffer);
         simultaneousTxSUL_NonSUL = FeatureSetUplink_simultaneousTxSUL_NonSUL.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("simultaneousTxSUL_NonSUL", -1);
      }
      else {
         simultaneousTxSUL_NonSUL = null;
      }

      // decode pusch_ProcessingType1_DifferentTB_PerSlot

      if (pusch_ProcessingType1_DifferentTB_PerSlotPresent) {
         buffer.getContext().eventDispatcher.startElement("pusch_ProcessingType1_DifferentTB_PerSlot", -1);

         pusch_ProcessingType1_DifferentTB_PerSlot = new FeatureSetUplink_pusch_ProcessingType1_DifferentTB_PerSlot();
         pusch_ProcessingType1_DifferentTB_PerSlot.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("pusch_ProcessingType1_DifferentTB_PerSlot", -1);
      }
      else {
         pusch_ProcessingType1_DifferentTB_PerSlot = null;
      }

      // decode dummy2

      if (dummy2Present) {
         buffer.getContext().eventDispatcher.startElement("dummy2", -1);

         dummy2 = new DummyF();
         dummy2.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("dummy2", -1);
      }
      else {
         dummy2 = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((scalingFactor != null), null);
      buffer.encodeBit ((dummy3 != null), null);
      buffer.encodeBit ((intraBandFreqSeparationUL != null), null);
      buffer.encodeBit ((searchSpaceSharingCA_UL != null), null);
      buffer.encodeBit ((dummy1 != null), null);
      buffer.encodeBit ((supportedSRS_Resources != null), null);
      buffer.encodeBit ((twoPUCCH_Group != null), null);
      buffer.encodeBit ((dynamicSwitchSUL != null), null);
      buffer.encodeBit ((simultaneousTxSUL_NonSUL != null), null);
      buffer.encodeBit ((pusch_ProcessingType1_DifferentTB_PerSlot != null), null);
      buffer.encodeBit ((dummy2 != null), null);

      // encode featureSetListPerUplinkCC

      if (featureSetListPerUplinkCC != null) {
         buffer.getContext().eventDispatcher.startElement("featureSetListPerUplinkCC", -1);

         featureSetListPerUplinkCC.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("featureSetListPerUplinkCC", -1);
      }
      else throw new Asn1MissingRequiredException ("featureSetListPerUplinkCC");

      // encode scalingFactor

      if (scalingFactor != null) {
         buffer.getContext().eventDispatcher.startElement("scalingFactor", -1);

         scalingFactor.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("scalingFactor", -1);
      }

      // encode dummy3

      if (dummy3 != null) {
         buffer.getContext().eventDispatcher.startElement("dummy3", -1);

         dummy3.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("dummy3", -1);
      }

      // encode intraBandFreqSeparationUL

      if (intraBandFreqSeparationUL != null) {
         buffer.getContext().eventDispatcher.startElement("intraBandFreqSeparationUL", -1);

         intraBandFreqSeparationUL.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("intraBandFreqSeparationUL", -1);
      }

      // encode searchSpaceSharingCA_UL

      if (searchSpaceSharingCA_UL != null) {
         buffer.getContext().eventDispatcher.startElement("searchSpaceSharingCA_UL", -1);

         searchSpaceSharingCA_UL.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("searchSpaceSharingCA_UL", -1);
      }

      // encode dummy1

      if (dummy1 != null) {
         buffer.getContext().eventDispatcher.startElement("dummy1", -1);

         dummy1.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("dummy1", -1);
      }

      // encode supportedSRS_Resources

      if (supportedSRS_Resources != null) {
         buffer.getContext().eventDispatcher.startElement("supportedSRS_Resources", -1);

         supportedSRS_Resources.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("supportedSRS_Resources", -1);
      }

      // encode twoPUCCH_Group

      if (twoPUCCH_Group != null) {
         buffer.getContext().eventDispatcher.startElement("twoPUCCH_Group", -1);

         twoPUCCH_Group.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("twoPUCCH_Group", -1);
      }

      // encode dynamicSwitchSUL

      if (dynamicSwitchSUL != null) {
         buffer.getContext().eventDispatcher.startElement("dynamicSwitchSUL", -1);

         dynamicSwitchSUL.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("dynamicSwitchSUL", -1);
      }

      // encode simultaneousTxSUL_NonSUL

      if (simultaneousTxSUL_NonSUL != null) {
         buffer.getContext().eventDispatcher.startElement("simultaneousTxSUL_NonSUL", -1);

         simultaneousTxSUL_NonSUL.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("simultaneousTxSUL_NonSUL", -1);
      }

      // encode pusch_ProcessingType1_DifferentTB_PerSlot

      if (pusch_ProcessingType1_DifferentTB_PerSlot != null) {
         buffer.getContext().eventDispatcher.startElement("pusch_ProcessingType1_DifferentTB_PerSlot", -1);

         pusch_ProcessingType1_DifferentTB_PerSlot.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("pusch_ProcessingType1_DifferentTB_PerSlot", -1);
      }

      // encode dummy2

      if (dummy2 != null) {
         buffer.getContext().eventDispatcher.startElement("dummy2", -1);

         dummy2.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("dummy2", -1);
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (featureSetListPerUplinkCC != null) featureSetListPerUplinkCC.print (_sb, "featureSetListPerUplinkCC", _level+1);
      if (scalingFactor != null) scalingFactor.print (_sb, "scalingFactor", _level+1);
      if (dummy3 != null) dummy3.print (_sb, "dummy3", _level+1);
      if (intraBandFreqSeparationUL != null) intraBandFreqSeparationUL.print (_sb, "intraBandFreqSeparationUL", _level+1);
      if (searchSpaceSharingCA_UL != null) searchSpaceSharingCA_UL.print (_sb, "searchSpaceSharingCA_UL", _level+1);
      if (dummy1 != null) dummy1.print (_sb, "dummy1", _level+1);
      if (supportedSRS_Resources != null) supportedSRS_Resources.print (_sb, "supportedSRS_Resources", _level+1);
      if (twoPUCCH_Group != null) twoPUCCH_Group.print (_sb, "twoPUCCH_Group", _level+1);
      if (dynamicSwitchSUL != null) dynamicSwitchSUL.print (_sb, "dynamicSwitchSUL", _level+1);
      if (simultaneousTxSUL_NonSUL != null) simultaneousTxSUL_NonSUL.print (_sb, "simultaneousTxSUL_NonSUL", _level+1);
      if (pusch_ProcessingType1_DifferentTB_PerSlot != null) pusch_ProcessingType1_DifferentTB_PerSlot.print (_sb, "pusch_ProcessingType1_DifferentTB_PerSlot", _level+1);
      if (dummy2 != null) dummy2.print (_sb, "dummy2", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
