/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class LoggedMeasurementConfiguration_r16_IEs extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "LoggedMeasurementConfiguration-r16-IEs";
   }

   public TraceReference_r16 traceReference_r16;
   public Asn1OctetString traceRecordingSessionRef_r16;
   public Asn1OctetString tce_Id_r16;
   public AbsoluteTimeInfo_r16 absoluteTimeInfo_r16;
   public AreaConfiguration_r16 areaConfiguration_r16;  // optional
   public PLMN_IdentityList2_r16 plmn_IdentityList_r16;  // optional
   public LoggedMeasurementConfiguration_r16_IEs_bt_NameList_r16 bt_NameList_r16;  // optional
   public LoggedMeasurementConfiguration_r16_IEs_wlan_NameList_r16 wlan_NameList_r16;  // optional
   public LoggedMeasurementConfiguration_r16_IEs_sensor_NameList_r16 sensor_NameList_r16;  // optional
   public LoggingDuration_r16 loggingDuration_r16 = null;
   public LoggedMeasurementConfiguration_r16_IEs_reportType reportType;
   public Asn1OctetString lateNonCriticalExtension;  // optional
   public LoggedMeasurementConfiguration_r16_IEs_nonCriticalExtension nonCriticalExtension;  // optional

   public LoggedMeasurementConfiguration_r16_IEs () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public LoggedMeasurementConfiguration_r16_IEs (
      TraceReference_r16 traceReference_r16_,
      Asn1OctetString traceRecordingSessionRef_r16_,
      Asn1OctetString tce_Id_r16_,
      AbsoluteTimeInfo_r16 absoluteTimeInfo_r16_,
      AreaConfiguration_r16 areaConfiguration_r16_,
      PLMN_IdentityList2_r16 plmn_IdentityList_r16_,
      LoggedMeasurementConfiguration_r16_IEs_bt_NameList_r16 bt_NameList_r16_,
      LoggedMeasurementConfiguration_r16_IEs_wlan_NameList_r16 wlan_NameList_r16_,
      LoggedMeasurementConfiguration_r16_IEs_sensor_NameList_r16 sensor_NameList_r16_,
      LoggingDuration_r16 loggingDuration_r16_,
      LoggedMeasurementConfiguration_r16_IEs_reportType reportType_,
      Asn1OctetString lateNonCriticalExtension_,
      LoggedMeasurementConfiguration_r16_IEs_nonCriticalExtension nonCriticalExtension_
   ) {
      super();
      traceReference_r16 = traceReference_r16_;
      traceRecordingSessionRef_r16 = traceRecordingSessionRef_r16_;
      tce_Id_r16 = tce_Id_r16_;
      absoluteTimeInfo_r16 = absoluteTimeInfo_r16_;
      areaConfiguration_r16 = areaConfiguration_r16_;
      plmn_IdentityList_r16 = plmn_IdentityList_r16_;
      bt_NameList_r16 = bt_NameList_r16_;
      wlan_NameList_r16 = wlan_NameList_r16_;
      sensor_NameList_r16 = sensor_NameList_r16_;
      loggingDuration_r16 = loggingDuration_r16_;
      reportType = reportType_;
      lateNonCriticalExtension = lateNonCriticalExtension_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public LoggedMeasurementConfiguration_r16_IEs (
      TraceReference_r16 traceReference_r16_,
      Asn1OctetString traceRecordingSessionRef_r16_,
      Asn1OctetString tce_Id_r16_,
      AbsoluteTimeInfo_r16 absoluteTimeInfo_r16_,
      LoggingDuration_r16 loggingDuration_r16_,
      LoggedMeasurementConfiguration_r16_IEs_reportType reportType_
   ) {
      super();
      traceReference_r16 = traceReference_r16_;
      traceRecordingSessionRef_r16 = traceRecordingSessionRef_r16_;
      tce_Id_r16 = tce_Id_r16_;
      absoluteTimeInfo_r16 = absoluteTimeInfo_r16_;
      loggingDuration_r16 = loggingDuration_r16_;
      reportType = reportType_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public LoggedMeasurementConfiguration_r16_IEs (TraceReference_r16 traceReference_r16_,
      byte[] traceRecordingSessionRef_r16_,
      byte[] tce_Id_r16_,
      AbsoluteTimeInfo_r16 absoluteTimeInfo_r16_,
      AreaConfiguration_r16 areaConfiguration_r16_,
      PLMN_IdentityList2_r16 plmn_IdentityList_r16_,
      LoggedMeasurementConfiguration_r16_IEs_bt_NameList_r16 bt_NameList_r16_,
      LoggedMeasurementConfiguration_r16_IEs_wlan_NameList_r16 wlan_NameList_r16_,
      LoggedMeasurementConfiguration_r16_IEs_sensor_NameList_r16 sensor_NameList_r16_,
      LoggingDuration_r16 loggingDuration_r16_,
      LoggedMeasurementConfiguration_r16_IEs_reportType reportType_,
      byte[] lateNonCriticalExtension_,
      LoggedMeasurementConfiguration_r16_IEs_nonCriticalExtension nonCriticalExtension_
   ) {
      super();
      traceReference_r16 = traceReference_r16_;
      traceRecordingSessionRef_r16 = new Asn1OctetString (traceRecordingSessionRef_r16_);
      tce_Id_r16 = new Asn1OctetString (tce_Id_r16_);
      absoluteTimeInfo_r16 = absoluteTimeInfo_r16_;
      areaConfiguration_r16 = areaConfiguration_r16_;
      plmn_IdentityList_r16 = plmn_IdentityList_r16_;
      bt_NameList_r16 = bt_NameList_r16_;
      wlan_NameList_r16 = wlan_NameList_r16_;
      sensor_NameList_r16 = sensor_NameList_r16_;
      loggingDuration_r16 = loggingDuration_r16_;
      reportType = reportType_;
      lateNonCriticalExtension = new Asn1OctetString (lateNonCriticalExtension_);
      nonCriticalExtension = nonCriticalExtension_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public LoggedMeasurementConfiguration_r16_IEs (
      TraceReference_r16 traceReference_r16_,
      byte[] traceRecordingSessionRef_r16_,
      byte[] tce_Id_r16_,
      AbsoluteTimeInfo_r16 absoluteTimeInfo_r16_,
      LoggingDuration_r16 loggingDuration_r16_,
      LoggedMeasurementConfiguration_r16_IEs_reportType reportType_
   ) {
      super();
      traceReference_r16 = traceReference_r16_;
      traceRecordingSessionRef_r16 = new Asn1OctetString (traceRecordingSessionRef_r16_);
      tce_Id_r16 = new Asn1OctetString (tce_Id_r16_);
      absoluteTimeInfo_r16 = absoluteTimeInfo_r16_;
      loggingDuration_r16 = loggingDuration_r16_;
      reportType = reportType_;
   }

   public void init () {
      traceReference_r16 = null;
      traceRecordingSessionRef_r16 = null;
      tce_Id_r16 = null;
      absoluteTimeInfo_r16 = null;
      areaConfiguration_r16 = null;
      plmn_IdentityList_r16 = null;
      bt_NameList_r16 = null;
      wlan_NameList_r16 = null;
      sensor_NameList_r16 = null;
      loggingDuration_r16 = null;
      reportType = null;
      lateNonCriticalExtension = null;
      nonCriticalExtension = null;
   }

   public int getElementCount() { return 13; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return traceReference_r16;
         case 1: return traceRecordingSessionRef_r16;
         case 2: return tce_Id_r16;
         case 3: return absoluteTimeInfo_r16;
         case 4: return areaConfiguration_r16;
         case 5: return plmn_IdentityList_r16;
         case 6: return bt_NameList_r16;
         case 7: return wlan_NameList_r16;
         case 8: return sensor_NameList_r16;
         case 9: return loggingDuration_r16;
         case 10: return reportType;
         case 11: return lateNonCriticalExtension;
         case 12: return nonCriticalExtension;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "traceReference-r16";
         case 1: return "traceRecordingSessionRef-r16";
         case 2: return "tce-Id-r16";
         case 3: return "absoluteTimeInfo-r16";
         case 4: return "areaConfiguration-r16";
         case 5: return "plmn-IdentityList-r16";
         case 6: return "bt-NameList-r16";
         case 7: return "wlan-NameList-r16";
         case 8: return "sensor-NameList-r16";
         case 9: return "loggingDuration-r16";
         case 10: return "reportType";
         case 11: return "lateNonCriticalExtension";
         case 12: return "nonCriticalExtension";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean areaConfiguration_r16Present = buffer.decodeBit ("areaConfiguration_r16Present");
      boolean plmn_IdentityList_r16Present = buffer.decodeBit ("plmn_IdentityList_r16Present");
      boolean bt_NameList_r16Present = buffer.decodeBit ("bt_NameList_r16Present");
      boolean wlan_NameList_r16Present = buffer.decodeBit ("wlan_NameList_r16Present");
      boolean sensor_NameList_r16Present = buffer.decodeBit ("sensor_NameList_r16Present");
      boolean lateNonCriticalExtensionPresent = buffer.decodeBit ("lateNonCriticalExtensionPresent");
      boolean nonCriticalExtensionPresent = buffer.decodeBit ("nonCriticalExtensionPresent");

      // decode traceReference_r16

      buffer.getContext().eventDispatcher.startElement("traceReference_r16", -1);

      traceReference_r16 = new TraceReference_r16();
      traceReference_r16.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("traceReference_r16", -1);

      // decode traceRecordingSessionRef_r16

      buffer.getContext().eventDispatcher.startElement("traceRecordingSessionRef_r16", -1);

      traceRecordingSessionRef_r16 = new Asn1OctetString();
      traceRecordingSessionRef_r16.decode (buffer, 2, 2);

      buffer.invokeCharacters(traceRecordingSessionRef_r16.toString());
      buffer.getContext().eventDispatcher.endElement("traceRecordingSessionRef_r16", -1);

      // decode tce_Id_r16

      buffer.getContext().eventDispatcher.startElement("tce_Id_r16", -1);

      tce_Id_r16 = new Asn1OctetString();
      tce_Id_r16.decode (buffer, 1, 1);

      buffer.invokeCharacters(tce_Id_r16.toString());
      buffer.getContext().eventDispatcher.endElement("tce_Id_r16", -1);

      // decode absoluteTimeInfo_r16

      buffer.getContext().eventDispatcher.startElement("absoluteTimeInfo_r16", -1);

      absoluteTimeInfo_r16 = new AbsoluteTimeInfo_r16();
      absoluteTimeInfo_r16.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("absoluteTimeInfo_r16", -1);

      // decode areaConfiguration_r16

      if (areaConfiguration_r16Present) {
         buffer.getContext().eventDispatcher.startElement("areaConfiguration_r16", -1);

         areaConfiguration_r16 = new AreaConfiguration_r16();
         areaConfiguration_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("areaConfiguration_r16", -1);
      }
      else {
         areaConfiguration_r16 = null;
      }

      // decode plmn_IdentityList_r16

      if (plmn_IdentityList_r16Present) {
         buffer.getContext().eventDispatcher.startElement("plmn_IdentityList_r16", -1);

         plmn_IdentityList_r16 = new PLMN_IdentityList2_r16();
         plmn_IdentityList_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("plmn_IdentityList_r16", -1);
      }
      else {
         plmn_IdentityList_r16 = null;
      }

      // decode bt_NameList_r16

      if (bt_NameList_r16Present) {
         buffer.getContext().eventDispatcher.startElement("bt_NameList_r16", -1);

         bt_NameList_r16 = new LoggedMeasurementConfiguration_r16_IEs_bt_NameList_r16();
         bt_NameList_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("bt_NameList_r16", -1);
      }
      else {
         bt_NameList_r16 = null;
      }

      // decode wlan_NameList_r16

      if (wlan_NameList_r16Present) {
         buffer.getContext().eventDispatcher.startElement("wlan_NameList_r16", -1);

         wlan_NameList_r16 = new LoggedMeasurementConfiguration_r16_IEs_wlan_NameList_r16();
         wlan_NameList_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("wlan_NameList_r16", -1);
      }
      else {
         wlan_NameList_r16 = null;
      }

      // decode sensor_NameList_r16

      if (sensor_NameList_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sensor_NameList_r16", -1);

         sensor_NameList_r16 = new LoggedMeasurementConfiguration_r16_IEs_sensor_NameList_r16();
         sensor_NameList_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sensor_NameList_r16", -1);
      }
      else {
         sensor_NameList_r16 = null;
      }

      // decode loggingDuration_r16

      buffer.getContext().eventDispatcher.startElement("loggingDuration_r16", -1);

      {
         int tval = LoggingDuration_r16.decodeEnumValue (buffer);
         loggingDuration_r16 = LoggingDuration_r16.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("loggingDuration_r16", -1);

      // decode reportType

      buffer.getContext().eventDispatcher.startElement("reportType", -1);

      reportType = new LoggedMeasurementConfiguration_r16_IEs_reportType();
      reportType.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("reportType", -1);

      // decode lateNonCriticalExtension

      if (lateNonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("lateNonCriticalExtension", -1);

         lateNonCriticalExtension = new Asn1OctetString();
         lateNonCriticalExtension.decode (buffer);

         buffer.invokeCharacters(lateNonCriticalExtension.toString());
         buffer.getContext().eventDispatcher.endElement("lateNonCriticalExtension", -1);
      }
      else {
         lateNonCriticalExtension = null;
      }

      // decode nonCriticalExtension

      if (nonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension = new LoggedMeasurementConfiguration_r16_IEs_nonCriticalExtension();
         nonCriticalExtension.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }
      else {
         nonCriticalExtension = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((areaConfiguration_r16 != null), null);
      buffer.encodeBit ((plmn_IdentityList_r16 != null), null);
      buffer.encodeBit ((bt_NameList_r16 != null), null);
      buffer.encodeBit ((wlan_NameList_r16 != null), null);
      buffer.encodeBit ((sensor_NameList_r16 != null), null);
      buffer.encodeBit ((lateNonCriticalExtension != null), null);
      buffer.encodeBit ((nonCriticalExtension != null), null);

      // encode traceReference_r16

      if (traceReference_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("traceReference_r16", -1);

         traceReference_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("traceReference_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("traceReference_r16");

      // encode traceRecordingSessionRef_r16

      if (traceRecordingSessionRef_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("traceRecordingSessionRef_r16", -1);

         traceRecordingSessionRef_r16.encode (buffer, 2, 2);

         buffer.getContext().eventDispatcher.endElement("traceRecordingSessionRef_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("traceRecordingSessionRef_r16");

      // encode tce_Id_r16

      if (tce_Id_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("tce_Id_r16", -1);

         tce_Id_r16.encode (buffer, 1, 1);

         buffer.getContext().eventDispatcher.endElement("tce_Id_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("tce_Id_r16");

      // encode absoluteTimeInfo_r16

      if (absoluteTimeInfo_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("absoluteTimeInfo_r16", -1);

         absoluteTimeInfo_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("absoluteTimeInfo_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("absoluteTimeInfo_r16");

      // encode areaConfiguration_r16

      if (areaConfiguration_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("areaConfiguration_r16", -1);

         areaConfiguration_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("areaConfiguration_r16", -1);
      }

      // encode plmn_IdentityList_r16

      if (plmn_IdentityList_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("plmn_IdentityList_r16", -1);

         plmn_IdentityList_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("plmn_IdentityList_r16", -1);
      }

      // encode bt_NameList_r16

      if (bt_NameList_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("bt_NameList_r16", -1);

         bt_NameList_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("bt_NameList_r16", -1);
      }

      // encode wlan_NameList_r16

      if (wlan_NameList_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("wlan_NameList_r16", -1);

         wlan_NameList_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("wlan_NameList_r16", -1);
      }

      // encode sensor_NameList_r16

      if (sensor_NameList_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sensor_NameList_r16", -1);

         sensor_NameList_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sensor_NameList_r16", -1);
      }

      // encode loggingDuration_r16

      if (loggingDuration_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("loggingDuration_r16", -1);

         loggingDuration_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("loggingDuration_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("loggingDuration_r16");

      // encode reportType

      if (reportType != null) {
         buffer.getContext().eventDispatcher.startElement("reportType", -1);

         reportType.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("reportType", -1);
      }
      else throw new Asn1MissingRequiredException ("reportType");

      // encode lateNonCriticalExtension

      if (lateNonCriticalExtension != null) {
         buffer.getContext().eventDispatcher.startElement("lateNonCriticalExtension", -1);

         lateNonCriticalExtension.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("lateNonCriticalExtension", -1);
      }

      // encode nonCriticalExtension

      if (nonCriticalExtension != null) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (traceReference_r16 != null) traceReference_r16.print (_sb, "traceReference_r16", _level+1);
      if (traceRecordingSessionRef_r16 != null) traceRecordingSessionRef_r16.print (_sb, "traceRecordingSessionRef_r16", _level+1);
      if (tce_Id_r16 != null) tce_Id_r16.print (_sb, "tce_Id_r16", _level+1);
      if (absoluteTimeInfo_r16 != null) absoluteTimeInfo_r16.print (_sb, "absoluteTimeInfo_r16", _level+1);
      if (areaConfiguration_r16 != null) areaConfiguration_r16.print (_sb, "areaConfiguration_r16", _level+1);
      if (plmn_IdentityList_r16 != null) plmn_IdentityList_r16.print (_sb, "plmn_IdentityList_r16", _level+1);
      if (bt_NameList_r16 != null) bt_NameList_r16.print (_sb, "bt_NameList_r16", _level+1);
      if (wlan_NameList_r16 != null) wlan_NameList_r16.print (_sb, "wlan_NameList_r16", _level+1);
      if (sensor_NameList_r16 != null) sensor_NameList_r16.print (_sb, "sensor_NameList_r16", _level+1);
      if (loggingDuration_r16 != null) loggingDuration_r16.print (_sb, "loggingDuration_r16", _level+1);
      if (reportType != null) reportType.print (_sb, "reportType", _level+1);
      if (lateNonCriticalExtension != null) lateNonCriticalExtension.print (_sb, "lateNonCriticalExtension", _level+1);
      if (nonCriticalExtension != null) nonCriticalExtension.print (_sb, "nonCriticalExtension", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
