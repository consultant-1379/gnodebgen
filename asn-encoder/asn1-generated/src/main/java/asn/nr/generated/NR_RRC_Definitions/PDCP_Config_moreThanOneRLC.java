/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class PDCP_Config_moreThanOneRLC extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public PDCP_Config_moreThanOneRLC_primaryPath primaryPath;
   public UL_DataSplitThreshold ul_DataSplitThreshold = null;  // optional
   public Asn1Boolean pdcp_Duplication;  // optional

   public PDCP_Config_moreThanOneRLC () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public PDCP_Config_moreThanOneRLC (
      PDCP_Config_moreThanOneRLC_primaryPath primaryPath_,
      UL_DataSplitThreshold ul_DataSplitThreshold_,
      Asn1Boolean pdcp_Duplication_
   ) {
      super();
      primaryPath = primaryPath_;
      ul_DataSplitThreshold = ul_DataSplitThreshold_;
      pdcp_Duplication = pdcp_Duplication_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public PDCP_Config_moreThanOneRLC (
      PDCP_Config_moreThanOneRLC_primaryPath primaryPath_
   ) {
      super();
      primaryPath = primaryPath_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public PDCP_Config_moreThanOneRLC (PDCP_Config_moreThanOneRLC_primaryPath primaryPath_,
      UL_DataSplitThreshold ul_DataSplitThreshold_,
      boolean pdcp_Duplication_
   ) {
      super();
      primaryPath = primaryPath_;
      ul_DataSplitThreshold = ul_DataSplitThreshold_;
      pdcp_Duplication = new Asn1Boolean (pdcp_Duplication_);
   }

   public void init () {
      primaryPath = null;
      ul_DataSplitThreshold = null;
      pdcp_Duplication = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return primaryPath;
         case 1: return ul_DataSplitThreshold;
         case 2: return pdcp_Duplication;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "primaryPath";
         case 1: return "ul-DataSplitThreshold";
         case 2: return "pdcp-Duplication";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean ul_DataSplitThresholdPresent = buffer.decodeBit ("ul_DataSplitThresholdPresent");
      boolean pdcp_DuplicationPresent = buffer.decodeBit ("pdcp_DuplicationPresent");

      // decode primaryPath

      buffer.getContext().eventDispatcher.startElement("primaryPath", -1);

      primaryPath = new PDCP_Config_moreThanOneRLC_primaryPath();
      primaryPath.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("primaryPath", -1);

      // decode ul_DataSplitThreshold

      if (ul_DataSplitThresholdPresent) {
         buffer.getContext().eventDispatcher.startElement("ul_DataSplitThreshold", -1);

         int tval = UL_DataSplitThreshold.decodeEnumValue (buffer);
         ul_DataSplitThreshold = UL_DataSplitThreshold.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("ul_DataSplitThreshold", -1);
      }
      else {
         ul_DataSplitThreshold = null;
      }

      // decode pdcp_Duplication

      if (pdcp_DuplicationPresent) {
         buffer.getContext().eventDispatcher.startElement("pdcp_Duplication", -1);

         pdcp_Duplication = new Asn1Boolean();
         pdcp_Duplication.decode (buffer);

         buffer.invokeCharacters(pdcp_Duplication.toString());
         buffer.getContext().eventDispatcher.endElement("pdcp_Duplication", -1);
      }
      else {
         pdcp_Duplication = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((ul_DataSplitThreshold != null), null);
      buffer.encodeBit ((pdcp_Duplication != null), null);

      // encode primaryPath

      if (primaryPath != null) {
         buffer.getContext().eventDispatcher.startElement("primaryPath", -1);

         primaryPath.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("primaryPath", -1);
      }
      else throw new Asn1MissingRequiredException ("primaryPath");

      // encode ul_DataSplitThreshold

      if (ul_DataSplitThreshold != null) {
         buffer.getContext().eventDispatcher.startElement("ul_DataSplitThreshold", -1);

         ul_DataSplitThreshold.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ul_DataSplitThreshold", -1);
      }

      // encode pdcp_Duplication

      if (pdcp_Duplication != null) {
         buffer.getContext().eventDispatcher.startElement("pdcp_Duplication", -1);

         pdcp_Duplication.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("pdcp_Duplication", -1);
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (primaryPath != null) primaryPath.print (_sb, "primaryPath", _level+1);
      if (ul_DataSplitThreshold != null) ul_DataSplitThreshold.print (_sb, "ul_DataSplitThreshold", _level+1);
      if (pdcp_Duplication != null) pdcp_Duplication.print (_sb, "pdcp_Duplication", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
