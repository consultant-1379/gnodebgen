/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class EventTriggerConfigInterRAT extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "EventTriggerConfigInterRAT";
   }

   public EventTriggerConfigInterRAT_eventId eventId;
   public NR_RS_Type rsType = null;
   public ReportInterval reportInterval = null;
   public EventTriggerConfigInterRAT_reportAmount reportAmount = null;
   public MeasReportQuantity reportQuantity;
   public Asn1Integer maxReportCells;
   public boolean mV2ExtPresent;
   public MeasReportQuantityUTRA_FDD_r16 reportQuantityUTRA_FDD_r16;  // optional
   public Asn1OpenExt extElem1;

   public EventTriggerConfigInterRAT () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public EventTriggerConfigInterRAT (
      EventTriggerConfigInterRAT_eventId eventId_,
      NR_RS_Type rsType_,
      ReportInterval reportInterval_,
      EventTriggerConfigInterRAT_reportAmount reportAmount_,
      MeasReportQuantity reportQuantity_,
      Asn1Integer maxReportCells_,
      MeasReportQuantityUTRA_FDD_r16 reportQuantityUTRA_FDD_r16_
   ) {
      super();
      eventId = eventId_;
      rsType = rsType_;
      reportInterval = reportInterval_;
      reportAmount = reportAmount_;
      reportQuantity = reportQuantity_;
      maxReportCells = maxReportCells_;
      reportQuantityUTRA_FDD_r16 = reportQuantityUTRA_FDD_r16_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public EventTriggerConfigInterRAT (
      EventTriggerConfigInterRAT_eventId eventId_,
      NR_RS_Type rsType_,
      ReportInterval reportInterval_,
      EventTriggerConfigInterRAT_reportAmount reportAmount_,
      MeasReportQuantity reportQuantity_,
      Asn1Integer maxReportCells_
   ) {
      super();
      eventId = eventId_;
      rsType = rsType_;
      reportInterval = reportInterval_;
      reportAmount = reportAmount_;
      reportQuantity = reportQuantity_;
      maxReportCells = maxReportCells_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public EventTriggerConfigInterRAT (EventTriggerConfigInterRAT_eventId eventId_,
      NR_RS_Type rsType_,
      ReportInterval reportInterval_,
      EventTriggerConfigInterRAT_reportAmount reportAmount_,
      MeasReportQuantity reportQuantity_,
      long maxReportCells_,
      MeasReportQuantityUTRA_FDD_r16 reportQuantityUTRA_FDD_r16_
   ) {
      super();
      eventId = eventId_;
      rsType = rsType_;
      reportInterval = reportInterval_;
      reportAmount = reportAmount_;
      reportQuantity = reportQuantity_;
      maxReportCells = new Asn1Integer (maxReportCells_);
      reportQuantityUTRA_FDD_r16 = reportQuantityUTRA_FDD_r16_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public EventTriggerConfigInterRAT (
      EventTriggerConfigInterRAT_eventId eventId_,
      NR_RS_Type rsType_,
      ReportInterval reportInterval_,
      EventTriggerConfigInterRAT_reportAmount reportAmount_,
      MeasReportQuantity reportQuantity_,
      long maxReportCells_
   ) {
      super();
      eventId = eventId_;
      rsType = rsType_;
      reportInterval = reportInterval_;
      reportAmount = reportAmount_;
      reportQuantity = reportQuantity_;
      maxReportCells = new Asn1Integer (maxReportCells_);
   }

   public void init () {
      eventId = null;
      rsType = null;
      reportInterval = null;
      reportAmount = null;
      reportQuantity = null;
      maxReportCells = null;
      reportQuantityUTRA_FDD_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 8; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return eventId;
         case 1: return rsType;
         case 2: return reportInterval;
         case 3: return reportAmount;
         case 4: return reportQuantity;
         case 5: return maxReportCells;
         case 6: return reportQuantityUTRA_FDD_r16;
         case 7: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "eventId";
         case 1: return "rsType";
         case 2: return "reportInterval";
         case 3: return "reportAmount";
         case 4: return "reportQuantity";
         case 5: return "maxReportCells";
         case 6: return "reportQuantityUTRA-FDD-r16";
         case 7: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      // decode eventId

      buffer.getContext().eventDispatcher.startElement("eventId", -1);

      eventId = new EventTriggerConfigInterRAT_eventId();
      eventId.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("eventId", -1);

      // decode rsType

      buffer.getContext().eventDispatcher.startElement("rsType", -1);

      {
         int tval = NR_RS_Type.decodeEnumValue (buffer);
         rsType = NR_RS_Type.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("rsType", -1);

      // decode reportInterval

      buffer.getContext().eventDispatcher.startElement("reportInterval", -1);

      {
         int tval = ReportInterval.decodeEnumValue (buffer);
         reportInterval = ReportInterval.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("reportInterval", -1);

      // decode reportAmount

      buffer.getContext().eventDispatcher.startElement("reportAmount", -1);

      {
         int tval = EventTriggerConfigInterRAT_reportAmount.decodeEnumValue (buffer);
         reportAmount = EventTriggerConfigInterRAT_reportAmount.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("reportAmount", -1);

      // decode reportQuantity

      buffer.getContext().eventDispatcher.startElement("reportQuantity", -1);

      reportQuantity = new MeasReportQuantity();
      reportQuantity.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("reportQuantity", -1);

      // decode maxReportCells

      buffer.getContext().eventDispatcher.startElement("maxReportCells", -1);

      maxReportCells = new Asn1Integer();
      maxReportCells.decode (buffer, 1, 8);

      buffer.invokeCharacters(maxReportCells.toString());
      buffer.getContext().eventDispatcher.endElement("maxReportCells", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean reportQuantityUTRA_FDD_r16Present = buffer.decodeBit ("reportQuantityUTRA_FDD_r16Present");

            // decode reportQuantityUTRA_FDD_r16

            if (reportQuantityUTRA_FDD_r16Present) {
               buffer.getContext().eventDispatcher.startElement("reportQuantityUTRA_FDD_r16", -1);

               reportQuantityUTRA_FDD_r16 = new MeasReportQuantityUTRA_FDD_r16();
               reportQuantityUTRA_FDD_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("reportQuantityUTRA_FDD_r16", -1);
            }
            else {
               reportQuantityUTRA_FDD_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (mV2ExtPresent ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode eventId

      if (eventId != null) {
         buffer.getContext().eventDispatcher.startElement("eventId", -1);

         eventId.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("eventId", -1);
      }
      else throw new Asn1MissingRequiredException ("eventId");

      // encode rsType

      if (rsType != null) {
         buffer.getContext().eventDispatcher.startElement("rsType", -1);

         rsType.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("rsType", -1);
      }
      else throw new Asn1MissingRequiredException ("rsType");

      // encode reportInterval

      if (reportInterval != null) {
         buffer.getContext().eventDispatcher.startElement("reportInterval", -1);

         reportInterval.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("reportInterval", -1);
      }
      else throw new Asn1MissingRequiredException ("reportInterval");

      // encode reportAmount

      if (reportAmount != null) {
         buffer.getContext().eventDispatcher.startElement("reportAmount", -1);

         reportAmount.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("reportAmount", -1);
      }
      else throw new Asn1MissingRequiredException ("reportAmount");

      // encode reportQuantity

      if (reportQuantity != null) {
         buffer.getContext().eventDispatcher.startElement("reportQuantity", -1);

         reportQuantity.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("reportQuantity", -1);
      }
      else throw new Asn1MissingRequiredException ("reportQuantity");

      // encode maxReportCells

      if (maxReportCells != null) {
         buffer.getContext().eventDispatcher.startElement("maxReportCells", -1);

         maxReportCells.encode (buffer, 1, 8);

         buffer.getContext().eventDispatcher.endElement("maxReportCells", -1);
      }
      else throw new Asn1MissingRequiredException ("maxReportCells");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 1;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit (mV2ExtPresent, null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         if (mV2ExtPresent) {
            buffer.reset();
            buffer.encodeBit ((reportQuantityUTRA_FDD_r16 != null), "optbit");
            if (reportQuantityUTRA_FDD_r16 != null) {
               reportQuantityUTRA_FDD_r16.encode (buffer);
            }
            mainBuffer.encodeOpenType (buffer, null);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (eventId != null) eventId.print (_sb, "eventId", _level+1);
      if (rsType != null) rsType.print (_sb, "rsType", _level+1);
      if (reportInterval != null) reportInterval.print (_sb, "reportInterval", _level+1);
      if (reportAmount != null) reportAmount.print (_sb, "reportAmount", _level+1);
      if (reportQuantity != null) reportQuantity.print (_sb, "reportQuantity", _level+1);
      if (maxReportCells != null) maxReportCells.print (_sb, "maxReportCells", _level+1);
      if (reportQuantityUTRA_FDD_r16 != null) reportQuantityUTRA_FDD_r16.print (_sb, "reportQuantityUTRA_FDD_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
