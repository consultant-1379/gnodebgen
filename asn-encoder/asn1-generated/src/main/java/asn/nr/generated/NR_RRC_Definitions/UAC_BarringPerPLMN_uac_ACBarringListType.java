/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class UAC_BarringPerPLMN_uac_ACBarringListType extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CHOICE";
   }

   // Choice element identifier constants
   public final static byte _UAC_IMPLICITACBARRINGLIST = 1;
   public final static byte _UAC_EXPLICITACBARRINGLIST = 2;

   public UAC_BarringPerPLMN_uac_ACBarringListType () {
      super();
   }

   public UAC_BarringPerPLMN_uac_ACBarringListType (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _UAC_IMPLICITACBARRINGLIST: return "uac_ImplicitACBarringList";
      case _UAC_EXPLICITACBARRINGLIST: return "uac_ExplicitACBarringList";
      default: return "UNDEFINED";
      }
   }

   public void set_uac_ImplicitACBarringList (UAC_BarringPerPLMN_uac_ACBarringListType_uac_ImplicitACBarringList value) {
      setElement (_UAC_IMPLICITACBARRINGLIST, value);
   }

   public void set_uac_ExplicitACBarringList (UAC_BarringPerCatList value) {
      setElement (_UAC_EXPLICITACBARRINGLIST, value);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int idx = (int) buffer.decodeConsWholeNumber (2, "index");
      choiceID = idx + 1;
      buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

      switch (idx) {
         // uac_ImplicitACBarringList
         case 0: { 
            UAC_BarringPerPLMN_uac_ACBarringListType_uac_ImplicitACBarringList uac_ImplicitACBarringList;
            element = uac_ImplicitACBarringList = new UAC_BarringPerPLMN_uac_ACBarringListType_uac_ImplicitACBarringList();
            uac_ImplicitACBarringList.decode (buffer);
            break;
         }

         // uac_ExplicitACBarringList
         case 1: { 
            UAC_BarringPerCatList uac_ExplicitACBarringList;
            element = uac_ExplicitACBarringList = new UAC_BarringPerCatList();
            uac_ExplicitACBarringList.decode (buffer);
            break;
         }

         default:
         throw new Asn1InvalidChoiceOptionException (buffer, idx);
      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // Encode choice index value

      buffer.encodeConsWholeNumber (choiceID - 1, 2, "index");

      buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

      switch (choiceID) {
         // uac_ImplicitACBarringList
         case _UAC_IMPLICITACBARRINGLIST:
            UAC_BarringPerPLMN_uac_ACBarringListType_uac_ImplicitACBarringList uac_ImplicitACBarringList = (UAC_BarringPerPLMN_uac_ACBarringListType_uac_ImplicitACBarringList) element;
            uac_ImplicitACBarringList.encode (buffer);
            break;

         // uac_ExplicitACBarringList
         case _UAC_EXPLICITACBARRINGLIST:
            UAC_BarringPerCatList uac_ExplicitACBarringList = (UAC_BarringPerCatList) element;
            uac_ExplicitACBarringList.encode (buffer);
            break;

         default:
         throw new Asn1InvalidChoiceOptionException();
      }

      buffer.getContext().eventDispatcher.endElement("getElemName()", -1);
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (element != null) {
         element.print (_sb, getElemName(), _level+1);
      }
      indent (_sb, _level);
      _sb.append("}\n");
   }

}
