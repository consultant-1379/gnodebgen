/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_InterNodeDefinitions;

import com.objsys.asn1j.runtime.*;

public class CG_ConfigInfo_IEs_scgFailureInfo_failureType extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_InterNodeDefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ENUMERATED";
   }

   // Integer constants for switch-case
   public static final int _T310_EXPIRY = 0;
   public static final int _RANDOMACCESSPROBLEM = 1;
   public static final int _RLC_MAXNUMRETX = 2;
   public static final int _SYNCHRECONFIGFAILURE_SCG = 3;
   public static final int _SCG_RECONFIGFAILURE = 4;
   public static final int _SRB3_INTEGRITYFAILURE = 5;

   // Singleton instances of CG_ConfigInfo_IEs_scgFailureInfo_failureType
   protected static final CG_ConfigInfo_IEs_scgFailureInfo_failureType _t310_Expiry = new CG_ConfigInfo_IEs_scgFailureInfo_failureType(0);
   protected static final CG_ConfigInfo_IEs_scgFailureInfo_failureType _randomAccessProblem = new CG_ConfigInfo_IEs_scgFailureInfo_failureType(1);
   protected static final CG_ConfigInfo_IEs_scgFailureInfo_failureType _rlc_MaxNumRetx = new CG_ConfigInfo_IEs_scgFailureInfo_failureType(2);
   protected static final CG_ConfigInfo_IEs_scgFailureInfo_failureType _synchReconfigFailure_SCG = new CG_ConfigInfo_IEs_scgFailureInfo_failureType(3);
   protected static final CG_ConfigInfo_IEs_scgFailureInfo_failureType _scg_reconfigFailure = new CG_ConfigInfo_IEs_scgFailureInfo_failureType(4);
   protected static final CG_ConfigInfo_IEs_scgFailureInfo_failureType _srb3_IntegrityFailure = new CG_ConfigInfo_IEs_scgFailureInfo_failureType(5);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    */
   protected CG_ConfigInfo_IEs_scgFailureInfo_failureType (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for t310_Expiry.
    */
   public static CG_ConfigInfo_IEs_scgFailureInfo_failureType t310_Expiry() {
      return _t310_Expiry;
   }

   /**
    * Singleton accessor method for randomAccessProblem.
    */
   public static CG_ConfigInfo_IEs_scgFailureInfo_failureType randomAccessProblem() {
      return _randomAccessProblem;
   }

   /**
    * Singleton accessor method for rlc_MaxNumRetx.
    */
   public static CG_ConfigInfo_IEs_scgFailureInfo_failureType rlc_MaxNumRetx() {
      return _rlc_MaxNumRetx;
   }

   /**
    * Singleton accessor method for synchReconfigFailure_SCG.
    */
   public static CG_ConfigInfo_IEs_scgFailureInfo_failureType synchReconfigFailure_SCG() {
      return _synchReconfigFailure_SCG;
   }

   /**
    * Singleton accessor method for scg_reconfigFailure.
    */
   public static CG_ConfigInfo_IEs_scgFailureInfo_failureType scg_reconfigFailure() {
      return _scg_reconfigFailure;
   }

   /**
    * Singleton accessor method for srb3_IntegrityFailure.
    */
   public static CG_ConfigInfo_IEs_scgFailureInfo_failureType srb3_IntegrityFailure() {
      return _srb3_IntegrityFailure;
   }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return CG_ConfigInfo_IEs_scgFailureInfo_failureType.valueOf( CG_ConfigInfo_IEs_scgFailureInfo_failureType.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static CG_ConfigInfo_IEs_scgFailureInfo_failureType valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 0: return t310_Expiry();
         case 1: return randomAccessProblem();
         case 2: return rlc_MaxNumRetx();
         case 3: return synchReconfigFailure_SCG();
         case 4: return scg_reconfigFailure();
         case 5: return srb3_IntegrityFailure();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      ui = (int) buffer.decodeConsWholeNumber (6);

      switch (ui) {
         case 0: ret =  0; break;
         case 1: ret =  1; break;
         case 2: ret =  2; break;
         case 3: ret =  3; break;
         case 4: ret =  4; break;
         case 5: ret =  5; break;
         default: throw new Asn1InvalidEnumException (ui);
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (CG_ConfigInfo_IEs_scgFailureInfo_failureType.valueOf(ret).toString());

      return ret;
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      switch ((int)value) {
         case 0: ui = 0; /* t310_Expiry */break;
         case 1: ui = 1; /* randomAccessProblem */break;
         case 2: ui = 2; /* rlc_MaxNumRetx */break;
         case 3: ui = 3; /* synchReconfigFailure_SCG */break;
         case 4: ui = 4; /* scg_reconfigFailure */break;
         case 5: ui = 5; /* srb3_IntegrityFailure */break;
         default:
            throw new Asn1InvalidEnumException (value);
      }

      buffer.encodeConsWholeNumber (ui, 6);
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("t310-Expiry");
         case 1: return ("randomAccessProblem");
         case 2: return ("rlc-MaxNumRetx");
         case 3: return ("synchReconfigFailure-SCG");
         case 4: return ("scg-reconfigFailure");
         case 5: return ("srb3-IntegrityFailure");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
