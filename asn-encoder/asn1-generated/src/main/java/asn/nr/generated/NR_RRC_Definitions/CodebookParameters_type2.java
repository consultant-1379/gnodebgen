/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class CodebookParameters_type2 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public CodebookParameters_type2_supportedCSI_RS_ResourceList supportedCSI_RS_ResourceList;
   public Asn1Integer parameterLx;
   public CodebookParameters_type2_amplitudeScalingType amplitudeScalingType = null;
   public CodebookParameters_type2_amplitudeSubsetRestriction amplitudeSubsetRestriction = null;  // optional

   public CodebookParameters_type2 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CodebookParameters_type2 (
      CodebookParameters_type2_supportedCSI_RS_ResourceList supportedCSI_RS_ResourceList_,
      Asn1Integer parameterLx_,
      CodebookParameters_type2_amplitudeScalingType amplitudeScalingType_,
      CodebookParameters_type2_amplitudeSubsetRestriction amplitudeSubsetRestriction_
   ) {
      super();
      supportedCSI_RS_ResourceList = supportedCSI_RS_ResourceList_;
      parameterLx = parameterLx_;
      amplitudeScalingType = amplitudeScalingType_;
      amplitudeSubsetRestriction = amplitudeSubsetRestriction_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public CodebookParameters_type2 (
      CodebookParameters_type2_supportedCSI_RS_ResourceList supportedCSI_RS_ResourceList_,
      Asn1Integer parameterLx_,
      CodebookParameters_type2_amplitudeScalingType amplitudeScalingType_
   ) {
      super();
      supportedCSI_RS_ResourceList = supportedCSI_RS_ResourceList_;
      parameterLx = parameterLx_;
      amplitudeScalingType = amplitudeScalingType_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public CodebookParameters_type2 (CodebookParameters_type2_supportedCSI_RS_ResourceList supportedCSI_RS_ResourceList_,
      long parameterLx_,
      CodebookParameters_type2_amplitudeScalingType amplitudeScalingType_,
      CodebookParameters_type2_amplitudeSubsetRestriction amplitudeSubsetRestriction_
   ) {
      super();
      supportedCSI_RS_ResourceList = supportedCSI_RS_ResourceList_;
      parameterLx = new Asn1Integer (parameterLx_);
      amplitudeScalingType = amplitudeScalingType_;
      amplitudeSubsetRestriction = amplitudeSubsetRestriction_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public CodebookParameters_type2 (
      CodebookParameters_type2_supportedCSI_RS_ResourceList supportedCSI_RS_ResourceList_,
      long parameterLx_,
      CodebookParameters_type2_amplitudeScalingType amplitudeScalingType_
   ) {
      super();
      supportedCSI_RS_ResourceList = supportedCSI_RS_ResourceList_;
      parameterLx = new Asn1Integer (parameterLx_);
      amplitudeScalingType = amplitudeScalingType_;
   }

   public void init () {
      supportedCSI_RS_ResourceList = null;
      parameterLx = null;
      amplitudeScalingType = null;
      amplitudeSubsetRestriction = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return supportedCSI_RS_ResourceList;
         case 1: return parameterLx;
         case 2: return amplitudeScalingType;
         case 3: return amplitudeSubsetRestriction;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "supportedCSI-RS-ResourceList";
         case 1: return "parameterLx";
         case 2: return "amplitudeScalingType";
         case 3: return "amplitudeSubsetRestriction";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean amplitudeSubsetRestrictionPresent = buffer.decodeBit ("amplitudeSubsetRestrictionPresent");

      // decode supportedCSI_RS_ResourceList

      buffer.getContext().eventDispatcher.startElement("supportedCSI_RS_ResourceList", -1);

      supportedCSI_RS_ResourceList = new CodebookParameters_type2_supportedCSI_RS_ResourceList();
      supportedCSI_RS_ResourceList.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("supportedCSI_RS_ResourceList", -1);

      // decode parameterLx

      buffer.getContext().eventDispatcher.startElement("parameterLx", -1);

      parameterLx = new Asn1Integer();
      parameterLx.decode (buffer, 2, 4);

      buffer.invokeCharacters(parameterLx.toString());
      buffer.getContext().eventDispatcher.endElement("parameterLx", -1);

      // decode amplitudeScalingType

      buffer.getContext().eventDispatcher.startElement("amplitudeScalingType", -1);

      {
         int tval = CodebookParameters_type2_amplitudeScalingType.decodeEnumValue (buffer);
         amplitudeScalingType = CodebookParameters_type2_amplitudeScalingType.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("amplitudeScalingType", -1);

      // decode amplitudeSubsetRestriction

      if (amplitudeSubsetRestrictionPresent) {
         buffer.getContext().eventDispatcher.startElement("amplitudeSubsetRestriction", -1);

         int tval = CodebookParameters_type2_amplitudeSubsetRestriction.decodeEnumValue (buffer);
         amplitudeSubsetRestriction = CodebookParameters_type2_amplitudeSubsetRestriction.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("amplitudeSubsetRestriction", -1);
      }
      else {
         amplitudeSubsetRestriction = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((amplitudeSubsetRestriction != null), null);

      // encode supportedCSI_RS_ResourceList

      if (supportedCSI_RS_ResourceList != null) {
         buffer.getContext().eventDispatcher.startElement("supportedCSI_RS_ResourceList", -1);

         supportedCSI_RS_ResourceList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("supportedCSI_RS_ResourceList", -1);
      }
      else throw new Asn1MissingRequiredException ("supportedCSI_RS_ResourceList");

      // encode parameterLx

      if (parameterLx != null) {
         buffer.getContext().eventDispatcher.startElement("parameterLx", -1);

         parameterLx.encode (buffer, 2, 4);

         buffer.getContext().eventDispatcher.endElement("parameterLx", -1);
      }
      else throw new Asn1MissingRequiredException ("parameterLx");

      // encode amplitudeScalingType

      if (amplitudeScalingType != null) {
         buffer.getContext().eventDispatcher.startElement("amplitudeScalingType", -1);

         amplitudeScalingType.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("amplitudeScalingType", -1);
      }
      else throw new Asn1MissingRequiredException ("amplitudeScalingType");

      // encode amplitudeSubsetRestriction

      if (amplitudeSubsetRestriction != null) {
         buffer.getContext().eventDispatcher.startElement("amplitudeSubsetRestriction", -1);

         amplitudeSubsetRestriction.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("amplitudeSubsetRestriction", -1);
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (supportedCSI_RS_ResourceList != null) supportedCSI_RS_ResourceList.print (_sb, "supportedCSI_RS_ResourceList", _level+1);
      if (parameterLx != null) parameterLx.print (_sb, "parameterLx", _level+1);
      if (amplitudeScalingType != null) amplitudeScalingType.print (_sb, "amplitudeScalingType", _level+1);
      if (amplitudeSubsetRestriction != null) amplitudeSubsetRestriction.print (_sb, "amplitudeSubsetRestriction", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
