/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class NR_NS_PmaxValue extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "NR-NS-PmaxValue";
   }

   public P_Max additionalPmax;  // optional
   public AdditionalSpectrumEmission additionalSpectrumEmission;

   public NR_NS_PmaxValue () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public NR_NS_PmaxValue (
      P_Max additionalPmax_,
      AdditionalSpectrumEmission additionalSpectrumEmission_
   ) {
      super();
      additionalPmax = additionalPmax_;
      additionalSpectrumEmission = additionalSpectrumEmission_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public NR_NS_PmaxValue (
      AdditionalSpectrumEmission additionalSpectrumEmission_
   ) {
      super();
      additionalSpectrumEmission = additionalSpectrumEmission_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public NR_NS_PmaxValue (long additionalPmax_,
      long additionalSpectrumEmission_
   ) {
      super();
      additionalPmax = new P_Max (additionalPmax_);
      additionalSpectrumEmission = new AdditionalSpectrumEmission (additionalSpectrumEmission_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public NR_NS_PmaxValue (
      long additionalSpectrumEmission_
   ) {
      super();
      additionalSpectrumEmission = new AdditionalSpectrumEmission (additionalSpectrumEmission_);
   }

   public void init () {
      additionalPmax = null;
      additionalSpectrumEmission = null;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return additionalPmax;
         case 1: return additionalSpectrumEmission;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "additionalPmax";
         case 1: return "additionalSpectrumEmission";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean additionalPmaxPresent = buffer.decodeBit ("additionalPmaxPresent");

      // decode additionalPmax

      if (additionalPmaxPresent) {
         buffer.getContext().eventDispatcher.startElement("additionalPmax", -1);

         additionalPmax = new P_Max();
         additionalPmax.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("additionalPmax", -1);
      }
      else {
         additionalPmax = null;
      }

      // decode additionalSpectrumEmission

      buffer.getContext().eventDispatcher.startElement("additionalSpectrumEmission", -1);

      additionalSpectrumEmission = new AdditionalSpectrumEmission();
      additionalSpectrumEmission.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("additionalSpectrumEmission", -1);

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((additionalPmax != null), null);

      // encode additionalPmax

      if (additionalPmax != null) {
         buffer.getContext().eventDispatcher.startElement("additionalPmax", -1);

         additionalPmax.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("additionalPmax", -1);
      }

      // encode additionalSpectrumEmission

      if (additionalSpectrumEmission != null) {
         buffer.getContext().eventDispatcher.startElement("additionalSpectrumEmission", -1);

         additionalSpectrumEmission.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("additionalSpectrumEmission", -1);
      }
      else throw new Asn1MissingRequiredException ("additionalSpectrumEmission");

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (additionalPmax != null) additionalPmax.print (_sb, "additionalPmax", _level+1);
      if (additionalSpectrumEmission != null) additionalSpectrumEmission.print (_sb, "additionalSpectrumEmission", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
