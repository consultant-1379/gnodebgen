/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SL_ZoneConfigMCR_r16_sl_TransRange_r16 extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ENUMERATED";
   }

   // Integer constants for switch-case
   public static final int _M20 = 0;
   public static final int _M50 = 1;
   public static final int _M80 = 2;
   public static final int _M100 = 3;
   public static final int _M120 = 4;
   public static final int _M150 = 5;
   public static final int _M180 = 6;
   public static final int _M200 = 7;
   public static final int _M220 = 8;
   public static final int _M250 = 9;
   public static final int _M270 = 10;
   public static final int _M300 = 11;
   public static final int _M350 = 12;
   public static final int _M370 = 13;
   public static final int _M400 = 14;
   public static final int _M420 = 15;
   public static final int _M450 = 16;
   public static final int _M480 = 17;
   public static final int _M500 = 18;
   public static final int _M550 = 19;
   public static final int _M600 = 20;
   public static final int _M700 = 21;
   public static final int _M1000 = 22;
   public static final int _SPARE9 = 23;
   public static final int _SPARE8 = 24;
   public static final int _SPARE7 = 25;
   public static final int _SPARE6 = 26;
   public static final int _SPARE5 = 27;
   public static final int _SPARE4 = 28;
   public static final int _SPARE3 = 29;
   public static final int _SPARE2 = 30;
   public static final int _SPARE1 = 31;

   // Singleton instances of SL_ZoneConfigMCR_r16_sl_TransRange_r16
   protected static final SL_ZoneConfigMCR_r16_sl_TransRange_r16 _m20 = new SL_ZoneConfigMCR_r16_sl_TransRange_r16(0);
   protected static final SL_ZoneConfigMCR_r16_sl_TransRange_r16 _m50 = new SL_ZoneConfigMCR_r16_sl_TransRange_r16(1);
   protected static final SL_ZoneConfigMCR_r16_sl_TransRange_r16 _m80 = new SL_ZoneConfigMCR_r16_sl_TransRange_r16(2);
   protected static final SL_ZoneConfigMCR_r16_sl_TransRange_r16 _m100 = new SL_ZoneConfigMCR_r16_sl_TransRange_r16(3);
   protected static final SL_ZoneConfigMCR_r16_sl_TransRange_r16 _m120 = new SL_ZoneConfigMCR_r16_sl_TransRange_r16(4);
   protected static final SL_ZoneConfigMCR_r16_sl_TransRange_r16 _m150 = new SL_ZoneConfigMCR_r16_sl_TransRange_r16(5);
   protected static final SL_ZoneConfigMCR_r16_sl_TransRange_r16 _m180 = new SL_ZoneConfigMCR_r16_sl_TransRange_r16(6);
   protected static final SL_ZoneConfigMCR_r16_sl_TransRange_r16 _m200 = new SL_ZoneConfigMCR_r16_sl_TransRange_r16(7);
   protected static final SL_ZoneConfigMCR_r16_sl_TransRange_r16 _m220 = new SL_ZoneConfigMCR_r16_sl_TransRange_r16(8);
   protected static final SL_ZoneConfigMCR_r16_sl_TransRange_r16 _m250 = new SL_ZoneConfigMCR_r16_sl_TransRange_r16(9);
   protected static final SL_ZoneConfigMCR_r16_sl_TransRange_r16 _m270 = new SL_ZoneConfigMCR_r16_sl_TransRange_r16(10);
   protected static final SL_ZoneConfigMCR_r16_sl_TransRange_r16 _m300 = new SL_ZoneConfigMCR_r16_sl_TransRange_r16(11);
   protected static final SL_ZoneConfigMCR_r16_sl_TransRange_r16 _m350 = new SL_ZoneConfigMCR_r16_sl_TransRange_r16(12);
   protected static final SL_ZoneConfigMCR_r16_sl_TransRange_r16 _m370 = new SL_ZoneConfigMCR_r16_sl_TransRange_r16(13);
   protected static final SL_ZoneConfigMCR_r16_sl_TransRange_r16 _m400 = new SL_ZoneConfigMCR_r16_sl_TransRange_r16(14);
   protected static final SL_ZoneConfigMCR_r16_sl_TransRange_r16 _m420 = new SL_ZoneConfigMCR_r16_sl_TransRange_r16(15);
   protected static final SL_ZoneConfigMCR_r16_sl_TransRange_r16 _m450 = new SL_ZoneConfigMCR_r16_sl_TransRange_r16(16);
   protected static final SL_ZoneConfigMCR_r16_sl_TransRange_r16 _m480 = new SL_ZoneConfigMCR_r16_sl_TransRange_r16(17);
   protected static final SL_ZoneConfigMCR_r16_sl_TransRange_r16 _m500 = new SL_ZoneConfigMCR_r16_sl_TransRange_r16(18);
   protected static final SL_ZoneConfigMCR_r16_sl_TransRange_r16 _m550 = new SL_ZoneConfigMCR_r16_sl_TransRange_r16(19);
   protected static final SL_ZoneConfigMCR_r16_sl_TransRange_r16 _m600 = new SL_ZoneConfigMCR_r16_sl_TransRange_r16(20);
   protected static final SL_ZoneConfigMCR_r16_sl_TransRange_r16 _m700 = new SL_ZoneConfigMCR_r16_sl_TransRange_r16(21);
   protected static final SL_ZoneConfigMCR_r16_sl_TransRange_r16 _m1000 = new SL_ZoneConfigMCR_r16_sl_TransRange_r16(22);
   protected static final SL_ZoneConfigMCR_r16_sl_TransRange_r16 _spare9 = new SL_ZoneConfigMCR_r16_sl_TransRange_r16(23);
   protected static final SL_ZoneConfigMCR_r16_sl_TransRange_r16 _spare8 = new SL_ZoneConfigMCR_r16_sl_TransRange_r16(24);
   protected static final SL_ZoneConfigMCR_r16_sl_TransRange_r16 _spare7 = new SL_ZoneConfigMCR_r16_sl_TransRange_r16(25);
   protected static final SL_ZoneConfigMCR_r16_sl_TransRange_r16 _spare6 = new SL_ZoneConfigMCR_r16_sl_TransRange_r16(26);
   protected static final SL_ZoneConfigMCR_r16_sl_TransRange_r16 _spare5 = new SL_ZoneConfigMCR_r16_sl_TransRange_r16(27);
   protected static final SL_ZoneConfigMCR_r16_sl_TransRange_r16 _spare4 = new SL_ZoneConfigMCR_r16_sl_TransRange_r16(28);
   protected static final SL_ZoneConfigMCR_r16_sl_TransRange_r16 _spare3 = new SL_ZoneConfigMCR_r16_sl_TransRange_r16(29);
   protected static final SL_ZoneConfigMCR_r16_sl_TransRange_r16 _spare2 = new SL_ZoneConfigMCR_r16_sl_TransRange_r16(30);
   protected static final SL_ZoneConfigMCR_r16_sl_TransRange_r16 _spare1 = new SL_ZoneConfigMCR_r16_sl_TransRange_r16(31);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    *   7
    *   8
    *   9
    *   10
    *   11
    *   12
    *   13
    *   14
    *   15
    *   16
    *   17
    *   18
    *   19
    *   20
    *   21
    *   22
    *   23
    *   24
    *   25
    *   26
    *   27
    *   28
    *   29
    *   30
    *   31
    */
   protected SL_ZoneConfigMCR_r16_sl_TransRange_r16 (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for m20.
    */
   public static SL_ZoneConfigMCR_r16_sl_TransRange_r16 m20() {
      return _m20;
   }

   /**
    * Singleton accessor method for m50.
    */
   public static SL_ZoneConfigMCR_r16_sl_TransRange_r16 m50() {
      return _m50;
   }

   /**
    * Singleton accessor method for m80.
    */
   public static SL_ZoneConfigMCR_r16_sl_TransRange_r16 m80() {
      return _m80;
   }

   /**
    * Singleton accessor method for m100.
    */
   public static SL_ZoneConfigMCR_r16_sl_TransRange_r16 m100() {
      return _m100;
   }

   /**
    * Singleton accessor method for m120.
    */
   public static SL_ZoneConfigMCR_r16_sl_TransRange_r16 m120() {
      return _m120;
   }

   /**
    * Singleton accessor method for m150.
    */
   public static SL_ZoneConfigMCR_r16_sl_TransRange_r16 m150() {
      return _m150;
   }

   /**
    * Singleton accessor method for m180.
    */
   public static SL_ZoneConfigMCR_r16_sl_TransRange_r16 m180() {
      return _m180;
   }

   /**
    * Singleton accessor method for m200.
    */
   public static SL_ZoneConfigMCR_r16_sl_TransRange_r16 m200() {
      return _m200;
   }

   /**
    * Singleton accessor method for m220.
    */
   public static SL_ZoneConfigMCR_r16_sl_TransRange_r16 m220() {
      return _m220;
   }

   /**
    * Singleton accessor method for m250.
    */
   public static SL_ZoneConfigMCR_r16_sl_TransRange_r16 m250() {
      return _m250;
   }

   /**
    * Singleton accessor method for m270.
    */
   public static SL_ZoneConfigMCR_r16_sl_TransRange_r16 m270() {
      return _m270;
   }

   /**
    * Singleton accessor method for m300.
    */
   public static SL_ZoneConfigMCR_r16_sl_TransRange_r16 m300() {
      return _m300;
   }

   /**
    * Singleton accessor method for m350.
    */
   public static SL_ZoneConfigMCR_r16_sl_TransRange_r16 m350() {
      return _m350;
   }

   /**
    * Singleton accessor method for m370.
    */
   public static SL_ZoneConfigMCR_r16_sl_TransRange_r16 m370() {
      return _m370;
   }

   /**
    * Singleton accessor method for m400.
    */
   public static SL_ZoneConfigMCR_r16_sl_TransRange_r16 m400() {
      return _m400;
   }

   /**
    * Singleton accessor method for m420.
    */
   public static SL_ZoneConfigMCR_r16_sl_TransRange_r16 m420() {
      return _m420;
   }

   /**
    * Singleton accessor method for m450.
    */
   public static SL_ZoneConfigMCR_r16_sl_TransRange_r16 m450() {
      return _m450;
   }

   /**
    * Singleton accessor method for m480.
    */
   public static SL_ZoneConfigMCR_r16_sl_TransRange_r16 m480() {
      return _m480;
   }

   /**
    * Singleton accessor method for m500.
    */
   public static SL_ZoneConfigMCR_r16_sl_TransRange_r16 m500() {
      return _m500;
   }

   /**
    * Singleton accessor method for m550.
    */
   public static SL_ZoneConfigMCR_r16_sl_TransRange_r16 m550() {
      return _m550;
   }

   /**
    * Singleton accessor method for m600.
    */
   public static SL_ZoneConfigMCR_r16_sl_TransRange_r16 m600() {
      return _m600;
   }

   /**
    * Singleton accessor method for m700.
    */
   public static SL_ZoneConfigMCR_r16_sl_TransRange_r16 m700() {
      return _m700;
   }

   /**
    * Singleton accessor method for m1000.
    */
   public static SL_ZoneConfigMCR_r16_sl_TransRange_r16 m1000() {
      return _m1000;
   }

   /**
    * Singleton accessor method for spare9.
    */
   public static SL_ZoneConfigMCR_r16_sl_TransRange_r16 spare9() {
      return _spare9;
   }

   /**
    * Singleton accessor method for spare8.
    */
   public static SL_ZoneConfigMCR_r16_sl_TransRange_r16 spare8() {
      return _spare8;
   }

   /**
    * Singleton accessor method for spare7.
    */
   public static SL_ZoneConfigMCR_r16_sl_TransRange_r16 spare7() {
      return _spare7;
   }

   /**
    * Singleton accessor method for spare6.
    */
   public static SL_ZoneConfigMCR_r16_sl_TransRange_r16 spare6() {
      return _spare6;
   }

   /**
    * Singleton accessor method for spare5.
    */
   public static SL_ZoneConfigMCR_r16_sl_TransRange_r16 spare5() {
      return _spare5;
   }

   /**
    * Singleton accessor method for spare4.
    */
   public static SL_ZoneConfigMCR_r16_sl_TransRange_r16 spare4() {
      return _spare4;
   }

   /**
    * Singleton accessor method for spare3.
    */
   public static SL_ZoneConfigMCR_r16_sl_TransRange_r16 spare3() {
      return _spare3;
   }

   /**
    * Singleton accessor method for spare2.
    */
   public static SL_ZoneConfigMCR_r16_sl_TransRange_r16 spare2() {
      return _spare2;
   }

   /**
    * Singleton accessor method for spare1.
    */
   public static SL_ZoneConfigMCR_r16_sl_TransRange_r16 spare1() {
      return _spare1;
   }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return SL_ZoneConfigMCR_r16_sl_TransRange_r16.valueOf( SL_ZoneConfigMCR_r16_sl_TransRange_r16.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static SL_ZoneConfigMCR_r16_sl_TransRange_r16 valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 0: return m20();
         case 1: return m50();
         case 2: return m80();
         case 3: return m100();
         case 4: return m120();
         case 5: return m150();
         case 6: return m180();
         case 7: return m200();
         case 8: return m220();
         case 9: return m250();
         case 10: return m270();
         case 11: return m300();
         case 12: return m350();
         case 13: return m370();
         case 14: return m400();
         case 15: return m420();
         case 16: return m450();
         case 17: return m480();
         case 18: return m500();
         case 19: return m550();
         case 20: return m600();
         case 21: return m700();
         case 22: return m1000();
         case 23: return spare9();
         case 24: return spare8();
         case 25: return spare7();
         case 26: return spare6();
         case 27: return spare5();
         case 28: return spare4();
         case 29: return spare3();
         case 30: return spare2();
         case 31: return spare1();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      ui = (int) buffer.decodeConsWholeNumber (32);

      switch (ui) {
         case 0: ret =  0; break;
         case 1: ret =  1; break;
         case 2: ret =  2; break;
         case 3: ret =  3; break;
         case 4: ret =  4; break;
         case 5: ret =  5; break;
         case 6: ret =  6; break;
         case 7: ret =  7; break;
         case 8: ret =  8; break;
         case 9: ret =  9; break;
         case 10: ret =  10; break;
         case 11: ret =  11; break;
         case 12: ret =  12; break;
         case 13: ret =  13; break;
         case 14: ret =  14; break;
         case 15: ret =  15; break;
         case 16: ret =  16; break;
         case 17: ret =  17; break;
         case 18: ret =  18; break;
         case 19: ret =  19; break;
         case 20: ret =  20; break;
         case 21: ret =  21; break;
         case 22: ret =  22; break;
         case 23: ret =  23; break;
         case 24: ret =  24; break;
         case 25: ret =  25; break;
         case 26: ret =  26; break;
         case 27: ret =  27; break;
         case 28: ret =  28; break;
         case 29: ret =  29; break;
         case 30: ret =  30; break;
         case 31: ret =  31; break;
         default: throw new Asn1InvalidEnumException (ui);
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (SL_ZoneConfigMCR_r16_sl_TransRange_r16.valueOf(ret).toString());

      return ret;
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      switch ((int)value) {
         case 0: ui = 0; /* m20 */break;
         case 1: ui = 1; /* m50 */break;
         case 2: ui = 2; /* m80 */break;
         case 3: ui = 3; /* m100 */break;
         case 4: ui = 4; /* m120 */break;
         case 5: ui = 5; /* m150 */break;
         case 6: ui = 6; /* m180 */break;
         case 7: ui = 7; /* m200 */break;
         case 8: ui = 8; /* m220 */break;
         case 9: ui = 9; /* m250 */break;
         case 10: ui = 10; /* m270 */break;
         case 11: ui = 11; /* m300 */break;
         case 12: ui = 12; /* m350 */break;
         case 13: ui = 13; /* m370 */break;
         case 14: ui = 14; /* m400 */break;
         case 15: ui = 15; /* m420 */break;
         case 16: ui = 16; /* m450 */break;
         case 17: ui = 17; /* m480 */break;
         case 18: ui = 18; /* m500 */break;
         case 19: ui = 19; /* m550 */break;
         case 20: ui = 20; /* m600 */break;
         case 21: ui = 21; /* m700 */break;
         case 22: ui = 22; /* m1000 */break;
         case 23: ui = 23; /* spare9 */break;
         case 24: ui = 24; /* spare8 */break;
         case 25: ui = 25; /* spare7 */break;
         case 26: ui = 26; /* spare6 */break;
         case 27: ui = 27; /* spare5 */break;
         case 28: ui = 28; /* spare4 */break;
         case 29: ui = 29; /* spare3 */break;
         case 30: ui = 30; /* spare2 */break;
         case 31: ui = 31; /* spare1 */break;
         default:
            throw new Asn1InvalidEnumException (value);
      }

      buffer.encodeConsWholeNumber (ui, 32);
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("m20");
         case 1: return ("m50");
         case 2: return ("m80");
         case 3: return ("m100");
         case 4: return ("m120");
         case 5: return ("m150");
         case 6: return ("m180");
         case 7: return ("m200");
         case 8: return ("m220");
         case 9: return ("m250");
         case 10: return ("m270");
         case 11: return ("m300");
         case 12: return ("m350");
         case 13: return ("m370");
         case 14: return ("m400");
         case 15: return ("m420");
         case 16: return ("m450");
         case 17: return ("m480");
         case 18: return ("m500");
         case 19: return ("m550");
         case 20: return ("m600");
         case 21: return ("m700");
         case 22: return ("m1000");
         case 23: return ("spare9");
         case 24: return ("spare8");
         case 25: return ("spare7");
         case 26: return ("spare6");
         case 27: return ("spare5");
         case 28: return ("spare4");
         case 29: return ("spare3");
         case 30: return ("spare2");
         case 31: return ("spare1");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
