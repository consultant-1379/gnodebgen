/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class TDD_UL_DL_ConfigCommon extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "TDD-UL-DL-ConfigCommon";
   }

   public SubcarrierSpacing referenceSubcarrierSpacing = null;
   public TDD_UL_DL_Pattern pattern1;
   public TDD_UL_DL_Pattern pattern2;  // optional
   public Asn1OpenExt extElem1;

   public TDD_UL_DL_ConfigCommon () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public TDD_UL_DL_ConfigCommon (
      SubcarrierSpacing referenceSubcarrierSpacing_,
      TDD_UL_DL_Pattern pattern1_,
      TDD_UL_DL_Pattern pattern2_
   ) {
      super();
      referenceSubcarrierSpacing = referenceSubcarrierSpacing_;
      pattern1 = pattern1_;
      pattern2 = pattern2_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public TDD_UL_DL_ConfigCommon (
      SubcarrierSpacing referenceSubcarrierSpacing_,
      TDD_UL_DL_Pattern pattern1_
   ) {
      super();
      referenceSubcarrierSpacing = referenceSubcarrierSpacing_;
      pattern1 = pattern1_;
   }

   public void init () {
      referenceSubcarrierSpacing = null;
      pattern1 = null;
      pattern2 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return referenceSubcarrierSpacing;
         case 1: return pattern1;
         case 2: return pattern2;
         case 3: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "referenceSubcarrierSpacing";
         case 1: return "pattern1";
         case 2: return "pattern2";
         case 3: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean pattern2Present = buffer.decodeBit ("pattern2Present");

      // decode referenceSubcarrierSpacing

      buffer.getContext().eventDispatcher.startElement("referenceSubcarrierSpacing", -1);

      {
         int tval = SubcarrierSpacing.decodeEnumValue (buffer);
         referenceSubcarrierSpacing = SubcarrierSpacing.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("referenceSubcarrierSpacing", -1);

      // decode pattern1

      buffer.getContext().eventDispatcher.startElement("pattern1", -1);

      pattern1 = new TDD_UL_DL_Pattern();
      pattern1.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("pattern1", -1);

      // decode pattern2

      if (pattern2Present) {
         buffer.getContext().eventDispatcher.startElement("pattern2", -1);

         pattern2 = new TDD_UL_DL_Pattern();
         pattern2.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("pattern2", -1);
      }
      else {
         pattern2 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((pattern2 != null), null);

      // encode referenceSubcarrierSpacing

      if (referenceSubcarrierSpacing != null) {
         buffer.getContext().eventDispatcher.startElement("referenceSubcarrierSpacing", -1);

         referenceSubcarrierSpacing.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("referenceSubcarrierSpacing", -1);
      }
      else throw new Asn1MissingRequiredException ("referenceSubcarrierSpacing");

      // encode pattern1

      if (pattern1 != null) {
         buffer.getContext().eventDispatcher.startElement("pattern1", -1);

         pattern1.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("pattern1", -1);
      }
      else throw new Asn1MissingRequiredException ("pattern1");

      // encode pattern2

      if (pattern2 != null) {
         buffer.getContext().eventDispatcher.startElement("pattern2", -1);

         pattern2.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("pattern2", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (referenceSubcarrierSpacing != null) referenceSubcarrierSpacing.print (_sb, "referenceSubcarrierSpacing", _level+1);
      if (pattern1 != null) pattern1.print (_sb, "pattern1", _level+1);
      if (pattern2 != null) pattern2.print (_sb, "pattern2", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
