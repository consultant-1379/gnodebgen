/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SL_TxResourceReq_r16 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SL-TxResourceReq-r16";
   }

   public SL_DestinationIdentity_r16 sl_DestinationIdentity_r16;
   public SL_TxResourceReq_r16_sl_CastType_r16 sl_CastType_r16 = null;
   public SL_TxResourceReq_r16_sl_RLC_ModeIndicationList_r16 sl_RLC_ModeIndicationList_r16;  // optional
   public SL_TxResourceReq_r16_sl_QoS_InfoList_r16 sl_QoS_InfoList_r16;  // optional
   public SL_TxResourceReq_r16_sl_TypeTxSyncList_r16 sl_TypeTxSyncList_r16;  // optional
   public SL_TxInterestedFreqList_r16 sl_TxInterestedFreqList_r16;  // optional
   public Asn1OctetString sl_CapabilityInformationSidelink_r16;  // optional

   public SL_TxResourceReq_r16 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SL_TxResourceReq_r16 (
      SL_DestinationIdentity_r16 sl_DestinationIdentity_r16_,
      SL_TxResourceReq_r16_sl_CastType_r16 sl_CastType_r16_,
      SL_TxResourceReq_r16_sl_RLC_ModeIndicationList_r16 sl_RLC_ModeIndicationList_r16_,
      SL_TxResourceReq_r16_sl_QoS_InfoList_r16 sl_QoS_InfoList_r16_,
      SL_TxResourceReq_r16_sl_TypeTxSyncList_r16 sl_TypeTxSyncList_r16_,
      SL_TxInterestedFreqList_r16 sl_TxInterestedFreqList_r16_,
      Asn1OctetString sl_CapabilityInformationSidelink_r16_
   ) {
      super();
      sl_DestinationIdentity_r16 = sl_DestinationIdentity_r16_;
      sl_CastType_r16 = sl_CastType_r16_;
      sl_RLC_ModeIndicationList_r16 = sl_RLC_ModeIndicationList_r16_;
      sl_QoS_InfoList_r16 = sl_QoS_InfoList_r16_;
      sl_TypeTxSyncList_r16 = sl_TypeTxSyncList_r16_;
      sl_TxInterestedFreqList_r16 = sl_TxInterestedFreqList_r16_;
      sl_CapabilityInformationSidelink_r16 = sl_CapabilityInformationSidelink_r16_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SL_TxResourceReq_r16 (
      SL_DestinationIdentity_r16 sl_DestinationIdentity_r16_,
      SL_TxResourceReq_r16_sl_CastType_r16 sl_CastType_r16_
   ) {
      super();
      sl_DestinationIdentity_r16 = sl_DestinationIdentity_r16_;
      sl_CastType_r16 = sl_CastType_r16_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SL_TxResourceReq_r16 (SL_DestinationIdentity_r16 sl_DestinationIdentity_r16_,
      SL_TxResourceReq_r16_sl_CastType_r16 sl_CastType_r16_,
      SL_TxResourceReq_r16_sl_RLC_ModeIndicationList_r16 sl_RLC_ModeIndicationList_r16_,
      SL_TxResourceReq_r16_sl_QoS_InfoList_r16 sl_QoS_InfoList_r16_,
      SL_TxResourceReq_r16_sl_TypeTxSyncList_r16 sl_TypeTxSyncList_r16_,
      SL_TxInterestedFreqList_r16 sl_TxInterestedFreqList_r16_,
      byte[] sl_CapabilityInformationSidelink_r16_
   ) {
      super();
      sl_DestinationIdentity_r16 = sl_DestinationIdentity_r16_;
      sl_CastType_r16 = sl_CastType_r16_;
      sl_RLC_ModeIndicationList_r16 = sl_RLC_ModeIndicationList_r16_;
      sl_QoS_InfoList_r16 = sl_QoS_InfoList_r16_;
      sl_TypeTxSyncList_r16 = sl_TypeTxSyncList_r16_;
      sl_TxInterestedFreqList_r16 = sl_TxInterestedFreqList_r16_;
      sl_CapabilityInformationSidelink_r16 = new Asn1OctetString (sl_CapabilityInformationSidelink_r16_);
   }

   public void init () {
      sl_DestinationIdentity_r16 = null;
      sl_CastType_r16 = null;
      sl_RLC_ModeIndicationList_r16 = null;
      sl_QoS_InfoList_r16 = null;
      sl_TypeTxSyncList_r16 = null;
      sl_TxInterestedFreqList_r16 = null;
      sl_CapabilityInformationSidelink_r16 = null;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return sl_DestinationIdentity_r16;
         case 1: return sl_CastType_r16;
         case 2: return sl_RLC_ModeIndicationList_r16;
         case 3: return sl_QoS_InfoList_r16;
         case 4: return sl_TypeTxSyncList_r16;
         case 5: return sl_TxInterestedFreqList_r16;
         case 6: return sl_CapabilityInformationSidelink_r16;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "sl-DestinationIdentity-r16";
         case 1: return "sl-CastType-r16";
         case 2: return "sl-RLC-ModeIndicationList-r16";
         case 3: return "sl-QoS-InfoList-r16";
         case 4: return "sl-TypeTxSyncList-r16";
         case 5: return "sl-TxInterestedFreqList-r16";
         case 6: return "sl-CapabilityInformationSidelink-r16";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean sl_RLC_ModeIndicationList_r16Present = buffer.decodeBit ("sl_RLC_ModeIndicationList_r16Present");
      boolean sl_QoS_InfoList_r16Present = buffer.decodeBit ("sl_QoS_InfoList_r16Present");
      boolean sl_TypeTxSyncList_r16Present = buffer.decodeBit ("sl_TypeTxSyncList_r16Present");
      boolean sl_TxInterestedFreqList_r16Present = buffer.decodeBit ("sl_TxInterestedFreqList_r16Present");
      boolean sl_CapabilityInformationSidelink_r16Present = buffer.decodeBit ("sl_CapabilityInformationSidelink_r16Present");

      // decode sl_DestinationIdentity_r16

      buffer.getContext().eventDispatcher.startElement("sl_DestinationIdentity_r16", -1);

      sl_DestinationIdentity_r16 = new SL_DestinationIdentity_r16();
      sl_DestinationIdentity_r16.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("sl_DestinationIdentity_r16", -1);

      // decode sl_CastType_r16

      buffer.getContext().eventDispatcher.startElement("sl_CastType_r16", -1);

      {
         int tval = SL_TxResourceReq_r16_sl_CastType_r16.decodeEnumValue (buffer);
         sl_CastType_r16 = SL_TxResourceReq_r16_sl_CastType_r16.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("sl_CastType_r16", -1);

      // decode sl_RLC_ModeIndicationList_r16

      if (sl_RLC_ModeIndicationList_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_RLC_ModeIndicationList_r16", -1);

         sl_RLC_ModeIndicationList_r16 = new SL_TxResourceReq_r16_sl_RLC_ModeIndicationList_r16();
         sl_RLC_ModeIndicationList_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sl_RLC_ModeIndicationList_r16", -1);
      }
      else {
         sl_RLC_ModeIndicationList_r16 = null;
      }

      // decode sl_QoS_InfoList_r16

      if (sl_QoS_InfoList_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_QoS_InfoList_r16", -1);

         sl_QoS_InfoList_r16 = new SL_TxResourceReq_r16_sl_QoS_InfoList_r16();
         sl_QoS_InfoList_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sl_QoS_InfoList_r16", -1);
      }
      else {
         sl_QoS_InfoList_r16 = null;
      }

      // decode sl_TypeTxSyncList_r16

      if (sl_TypeTxSyncList_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_TypeTxSyncList_r16", -1);

         sl_TypeTxSyncList_r16 = new SL_TxResourceReq_r16_sl_TypeTxSyncList_r16();
         sl_TypeTxSyncList_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sl_TypeTxSyncList_r16", -1);
      }
      else {
         sl_TypeTxSyncList_r16 = null;
      }

      // decode sl_TxInterestedFreqList_r16

      if (sl_TxInterestedFreqList_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_TxInterestedFreqList_r16", -1);

         sl_TxInterestedFreqList_r16 = new SL_TxInterestedFreqList_r16();
         sl_TxInterestedFreqList_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sl_TxInterestedFreqList_r16", -1);
      }
      else {
         sl_TxInterestedFreqList_r16 = null;
      }

      // decode sl_CapabilityInformationSidelink_r16

      if (sl_CapabilityInformationSidelink_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_CapabilityInformationSidelink_r16", -1);

         sl_CapabilityInformationSidelink_r16 = new Asn1OctetString();
         sl_CapabilityInformationSidelink_r16.decode (buffer);

         buffer.invokeCharacters(sl_CapabilityInformationSidelink_r16.toString());
         buffer.getContext().eventDispatcher.endElement("sl_CapabilityInformationSidelink_r16", -1);
      }
      else {
         sl_CapabilityInformationSidelink_r16 = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((sl_RLC_ModeIndicationList_r16 != null), null);
      buffer.encodeBit ((sl_QoS_InfoList_r16 != null), null);
      buffer.encodeBit ((sl_TypeTxSyncList_r16 != null), null);
      buffer.encodeBit ((sl_TxInterestedFreqList_r16 != null), null);
      buffer.encodeBit ((sl_CapabilityInformationSidelink_r16 != null), null);

      // encode sl_DestinationIdentity_r16

      if (sl_DestinationIdentity_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_DestinationIdentity_r16", -1);

         sl_DestinationIdentity_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sl_DestinationIdentity_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("sl_DestinationIdentity_r16");

      // encode sl_CastType_r16

      if (sl_CastType_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_CastType_r16", -1);

         sl_CastType_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sl_CastType_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("sl_CastType_r16");

      // encode sl_RLC_ModeIndicationList_r16

      if (sl_RLC_ModeIndicationList_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_RLC_ModeIndicationList_r16", -1);

         sl_RLC_ModeIndicationList_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sl_RLC_ModeIndicationList_r16", -1);
      }

      // encode sl_QoS_InfoList_r16

      if (sl_QoS_InfoList_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_QoS_InfoList_r16", -1);

         sl_QoS_InfoList_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sl_QoS_InfoList_r16", -1);
      }

      // encode sl_TypeTxSyncList_r16

      if (sl_TypeTxSyncList_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_TypeTxSyncList_r16", -1);

         sl_TypeTxSyncList_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sl_TypeTxSyncList_r16", -1);
      }

      // encode sl_TxInterestedFreqList_r16

      if (sl_TxInterestedFreqList_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_TxInterestedFreqList_r16", -1);

         sl_TxInterestedFreqList_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sl_TxInterestedFreqList_r16", -1);
      }

      // encode sl_CapabilityInformationSidelink_r16

      if (sl_CapabilityInformationSidelink_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_CapabilityInformationSidelink_r16", -1);

         sl_CapabilityInformationSidelink_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sl_CapabilityInformationSidelink_r16", -1);
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (sl_DestinationIdentity_r16 != null) sl_DestinationIdentity_r16.print (_sb, "sl_DestinationIdentity_r16", _level+1);
      if (sl_CastType_r16 != null) sl_CastType_r16.print (_sb, "sl_CastType_r16", _level+1);
      if (sl_RLC_ModeIndicationList_r16 != null) sl_RLC_ModeIndicationList_r16.print (_sb, "sl_RLC_ModeIndicationList_r16", _level+1);
      if (sl_QoS_InfoList_r16 != null) sl_QoS_InfoList_r16.print (_sb, "sl_QoS_InfoList_r16", _level+1);
      if (sl_TypeTxSyncList_r16 != null) sl_TypeTxSyncList_r16.print (_sb, "sl_TypeTxSyncList_r16", _level+1);
      if (sl_TxInterestedFreqList_r16 != null) sl_TxInterestedFreqList_r16.print (_sb, "sl_TxInterestedFreqList_r16", _level+1);
      if (sl_CapabilityInformationSidelink_r16 != null) sl_CapabilityInformationSidelink_r16.print (_sb, "sl_CapabilityInformationSidelink_r16", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
