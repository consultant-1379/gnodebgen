/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class TDD_UL_DL_SlotConfig_symbols_explicit extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public Asn1Integer nrofDownlinkSymbols;  // optional
   public Asn1Integer nrofUplinkSymbols;  // optional

   public TDD_UL_DL_SlotConfig_symbols_explicit () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public TDD_UL_DL_SlotConfig_symbols_explicit (
      Asn1Integer nrofDownlinkSymbols_,
      Asn1Integer nrofUplinkSymbols_
   ) {
      super();
      nrofDownlinkSymbols = nrofDownlinkSymbols_;
      nrofUplinkSymbols = nrofUplinkSymbols_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public TDD_UL_DL_SlotConfig_symbols_explicit (long nrofDownlinkSymbols_,
      long nrofUplinkSymbols_
   ) {
      super();
      nrofDownlinkSymbols = new Asn1Integer (nrofDownlinkSymbols_);
      nrofUplinkSymbols = new Asn1Integer (nrofUplinkSymbols_);
   }

   public void init () {
      nrofDownlinkSymbols = null;
      nrofUplinkSymbols = null;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return nrofDownlinkSymbols;
         case 1: return nrofUplinkSymbols;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "nrofDownlinkSymbols";
         case 1: return "nrofUplinkSymbols";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean nrofDownlinkSymbolsPresent = buffer.decodeBit ("nrofDownlinkSymbolsPresent");
      boolean nrofUplinkSymbolsPresent = buffer.decodeBit ("nrofUplinkSymbolsPresent");

      // decode nrofDownlinkSymbols

      if (nrofDownlinkSymbolsPresent) {
         buffer.getContext().eventDispatcher.startElement("nrofDownlinkSymbols", -1);

         nrofDownlinkSymbols = new Asn1Integer();
         nrofDownlinkSymbols.decode (buffer, 1, 13);

         buffer.invokeCharacters(nrofDownlinkSymbols.toString());
         buffer.getContext().eventDispatcher.endElement("nrofDownlinkSymbols", -1);
      }
      else {
         nrofDownlinkSymbols = null;
      }

      // decode nrofUplinkSymbols

      if (nrofUplinkSymbolsPresent) {
         buffer.getContext().eventDispatcher.startElement("nrofUplinkSymbols", -1);

         nrofUplinkSymbols = new Asn1Integer();
         nrofUplinkSymbols.decode (buffer, 1, 13);

         buffer.invokeCharacters(nrofUplinkSymbols.toString());
         buffer.getContext().eventDispatcher.endElement("nrofUplinkSymbols", -1);
      }
      else {
         nrofUplinkSymbols = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((nrofDownlinkSymbols != null), null);
      buffer.encodeBit ((nrofUplinkSymbols != null), null);

      // encode nrofDownlinkSymbols

      if (nrofDownlinkSymbols != null) {
         buffer.getContext().eventDispatcher.startElement("nrofDownlinkSymbols", -1);

         nrofDownlinkSymbols.encode (buffer, 1, 13);

         buffer.getContext().eventDispatcher.endElement("nrofDownlinkSymbols", -1);
      }

      // encode nrofUplinkSymbols

      if (nrofUplinkSymbols != null) {
         buffer.getContext().eventDispatcher.startElement("nrofUplinkSymbols", -1);

         nrofUplinkSymbols.encode (buffer, 1, 13);

         buffer.getContext().eventDispatcher.endElement("nrofUplinkSymbols", -1);
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (nrofDownlinkSymbols != null) nrofDownlinkSymbols.print (_sb, "nrofDownlinkSymbols", _level+1);
      if (nrofUplinkSymbols != null) nrofUplinkSymbols.print (_sb, "nrofUplinkSymbols", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
