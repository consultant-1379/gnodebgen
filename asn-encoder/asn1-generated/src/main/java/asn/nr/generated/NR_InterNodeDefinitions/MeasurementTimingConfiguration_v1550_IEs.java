/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_InterNodeDefinitions;

import com.objsys.asn1j.runtime.*;

public class MeasurementTimingConfiguration_v1550_IEs extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_InterNodeDefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "MeasurementTimingConfiguration-v1550-IEs";
   }

   public Asn1Boolean campOnFirstSSB;
   public Asn1Boolean psCellOnlyOnFirstSSB;
   public MeasurementTimingConfiguration_v1610_IEs nonCriticalExtension;  // optional

   public MeasurementTimingConfiguration_v1550_IEs () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MeasurementTimingConfiguration_v1550_IEs (
      Asn1Boolean campOnFirstSSB_,
      Asn1Boolean psCellOnlyOnFirstSSB_,
      MeasurementTimingConfiguration_v1610_IEs nonCriticalExtension_
   ) {
      super();
      campOnFirstSSB = campOnFirstSSB_;
      psCellOnlyOnFirstSSB = psCellOnlyOnFirstSSB_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public MeasurementTimingConfiguration_v1550_IEs (
      Asn1Boolean campOnFirstSSB_,
      Asn1Boolean psCellOnlyOnFirstSSB_
   ) {
      super();
      campOnFirstSSB = campOnFirstSSB_;
      psCellOnlyOnFirstSSB = psCellOnlyOnFirstSSB_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public MeasurementTimingConfiguration_v1550_IEs (boolean campOnFirstSSB_,
      boolean psCellOnlyOnFirstSSB_,
      MeasurementTimingConfiguration_v1610_IEs nonCriticalExtension_
   ) {
      super();
      campOnFirstSSB = new Asn1Boolean (campOnFirstSSB_);
      psCellOnlyOnFirstSSB = new Asn1Boolean (psCellOnlyOnFirstSSB_);
      nonCriticalExtension = nonCriticalExtension_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public MeasurementTimingConfiguration_v1550_IEs (
      boolean campOnFirstSSB_,
      boolean psCellOnlyOnFirstSSB_
   ) {
      super();
      campOnFirstSSB = new Asn1Boolean (campOnFirstSSB_);
      psCellOnlyOnFirstSSB = new Asn1Boolean (psCellOnlyOnFirstSSB_);
   }

   public void init () {
      campOnFirstSSB = null;
      psCellOnlyOnFirstSSB = null;
      nonCriticalExtension = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return campOnFirstSSB;
         case 1: return psCellOnlyOnFirstSSB;
         case 2: return nonCriticalExtension;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "campOnFirstSSB";
         case 1: return "psCellOnlyOnFirstSSB";
         case 2: return "nonCriticalExtension";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean nonCriticalExtensionPresent = buffer.decodeBit ("nonCriticalExtensionPresent");

      // decode campOnFirstSSB

      buffer.getContext().eventDispatcher.startElement("campOnFirstSSB", -1);

      campOnFirstSSB = new Asn1Boolean();
      campOnFirstSSB.decode (buffer);

      buffer.invokeCharacters(campOnFirstSSB.toString());
      buffer.getContext().eventDispatcher.endElement("campOnFirstSSB", -1);

      // decode psCellOnlyOnFirstSSB

      buffer.getContext().eventDispatcher.startElement("psCellOnlyOnFirstSSB", -1);

      psCellOnlyOnFirstSSB = new Asn1Boolean();
      psCellOnlyOnFirstSSB.decode (buffer);

      buffer.invokeCharacters(psCellOnlyOnFirstSSB.toString());
      buffer.getContext().eventDispatcher.endElement("psCellOnlyOnFirstSSB", -1);

      // decode nonCriticalExtension

      if (nonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension = new MeasurementTimingConfiguration_v1610_IEs();
         nonCriticalExtension.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }
      else {
         nonCriticalExtension = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((nonCriticalExtension != null), null);

      // encode campOnFirstSSB

      if (campOnFirstSSB != null) {
         buffer.getContext().eventDispatcher.startElement("campOnFirstSSB", -1);

         campOnFirstSSB.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("campOnFirstSSB", -1);
      }
      else throw new Asn1MissingRequiredException ("campOnFirstSSB");

      // encode psCellOnlyOnFirstSSB

      if (psCellOnlyOnFirstSSB != null) {
         buffer.getContext().eventDispatcher.startElement("psCellOnlyOnFirstSSB", -1);

         psCellOnlyOnFirstSSB.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("psCellOnlyOnFirstSSB", -1);
      }
      else throw new Asn1MissingRequiredException ("psCellOnlyOnFirstSSB");

      // encode nonCriticalExtension

      if (nonCriticalExtension != null) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (campOnFirstSSB != null) campOnFirstSSB.print (_sb, "campOnFirstSSB", _level+1);
      if (psCellOnlyOnFirstSSB != null) psCellOnlyOnFirstSSB.print (_sb, "psCellOnlyOnFirstSSB", _level+1);
      if (nonCriticalExtension != null) nonCriticalExtension.print (_sb, "nonCriticalExtension", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
