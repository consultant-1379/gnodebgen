/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class BSR_Config_retxBSR_Timer extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ENUMERATED";
   }

   // Integer constants for switch-case
   public static final int _SF10 = 0;
   public static final int _SF20 = 1;
   public static final int _SF40 = 2;
   public static final int _SF80 = 3;
   public static final int _SF160 = 4;
   public static final int _SF320 = 5;
   public static final int _SF640 = 6;
   public static final int _SF1280 = 7;
   public static final int _SF2560 = 8;
   public static final int _SF5120 = 9;
   public static final int _SF10240 = 10;
   public static final int _SPARE5 = 11;
   public static final int _SPARE4 = 12;
   public static final int _SPARE3 = 13;
   public static final int _SPARE2 = 14;
   public static final int _SPARE1 = 15;

   // Singleton instances of BSR_Config_retxBSR_Timer
   protected static final BSR_Config_retxBSR_Timer _sf10 = new BSR_Config_retxBSR_Timer(0);
   protected static final BSR_Config_retxBSR_Timer _sf20 = new BSR_Config_retxBSR_Timer(1);
   protected static final BSR_Config_retxBSR_Timer _sf40 = new BSR_Config_retxBSR_Timer(2);
   protected static final BSR_Config_retxBSR_Timer _sf80 = new BSR_Config_retxBSR_Timer(3);
   protected static final BSR_Config_retxBSR_Timer _sf160 = new BSR_Config_retxBSR_Timer(4);
   protected static final BSR_Config_retxBSR_Timer _sf320 = new BSR_Config_retxBSR_Timer(5);
   protected static final BSR_Config_retxBSR_Timer _sf640 = new BSR_Config_retxBSR_Timer(6);
   protected static final BSR_Config_retxBSR_Timer _sf1280 = new BSR_Config_retxBSR_Timer(7);
   protected static final BSR_Config_retxBSR_Timer _sf2560 = new BSR_Config_retxBSR_Timer(8);
   protected static final BSR_Config_retxBSR_Timer _sf5120 = new BSR_Config_retxBSR_Timer(9);
   protected static final BSR_Config_retxBSR_Timer _sf10240 = new BSR_Config_retxBSR_Timer(10);
   protected static final BSR_Config_retxBSR_Timer _spare5 = new BSR_Config_retxBSR_Timer(11);
   protected static final BSR_Config_retxBSR_Timer _spare4 = new BSR_Config_retxBSR_Timer(12);
   protected static final BSR_Config_retxBSR_Timer _spare3 = new BSR_Config_retxBSR_Timer(13);
   protected static final BSR_Config_retxBSR_Timer _spare2 = new BSR_Config_retxBSR_Timer(14);
   protected static final BSR_Config_retxBSR_Timer _spare1 = new BSR_Config_retxBSR_Timer(15);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    *   7
    *   8
    *   9
    *   10
    *   11
    *   12
    *   13
    *   14
    *   15
    */
   protected BSR_Config_retxBSR_Timer (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for sf10.
    */
   public static BSR_Config_retxBSR_Timer sf10() {
      return _sf10;
   }

   /**
    * Singleton accessor method for sf20.
    */
   public static BSR_Config_retxBSR_Timer sf20() {
      return _sf20;
   }

   /**
    * Singleton accessor method for sf40.
    */
   public static BSR_Config_retxBSR_Timer sf40() {
      return _sf40;
   }

   /**
    * Singleton accessor method for sf80.
    */
   public static BSR_Config_retxBSR_Timer sf80() {
      return _sf80;
   }

   /**
    * Singleton accessor method for sf160.
    */
   public static BSR_Config_retxBSR_Timer sf160() {
      return _sf160;
   }

   /**
    * Singleton accessor method for sf320.
    */
   public static BSR_Config_retxBSR_Timer sf320() {
      return _sf320;
   }

   /**
    * Singleton accessor method for sf640.
    */
   public static BSR_Config_retxBSR_Timer sf640() {
      return _sf640;
   }

   /**
    * Singleton accessor method for sf1280.
    */
   public static BSR_Config_retxBSR_Timer sf1280() {
      return _sf1280;
   }

   /**
    * Singleton accessor method for sf2560.
    */
   public static BSR_Config_retxBSR_Timer sf2560() {
      return _sf2560;
   }

   /**
    * Singleton accessor method for sf5120.
    */
   public static BSR_Config_retxBSR_Timer sf5120() {
      return _sf5120;
   }

   /**
    * Singleton accessor method for sf10240.
    */
   public static BSR_Config_retxBSR_Timer sf10240() {
      return _sf10240;
   }

   /**
    * Singleton accessor method for spare5.
    */
   public static BSR_Config_retxBSR_Timer spare5() {
      return _spare5;
   }

   /**
    * Singleton accessor method for spare4.
    */
   public static BSR_Config_retxBSR_Timer spare4() {
      return _spare4;
   }

   /**
    * Singleton accessor method for spare3.
    */
   public static BSR_Config_retxBSR_Timer spare3() {
      return _spare3;
   }

   /**
    * Singleton accessor method for spare2.
    */
   public static BSR_Config_retxBSR_Timer spare2() {
      return _spare2;
   }

   /**
    * Singleton accessor method for spare1.
    */
   public static BSR_Config_retxBSR_Timer spare1() {
      return _spare1;
   }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return BSR_Config_retxBSR_Timer.valueOf( BSR_Config_retxBSR_Timer.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static BSR_Config_retxBSR_Timer valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 0: return sf10();
         case 1: return sf20();
         case 2: return sf40();
         case 3: return sf80();
         case 4: return sf160();
         case 5: return sf320();
         case 6: return sf640();
         case 7: return sf1280();
         case 8: return sf2560();
         case 9: return sf5120();
         case 10: return sf10240();
         case 11: return spare5();
         case 12: return spare4();
         case 13: return spare3();
         case 14: return spare2();
         case 15: return spare1();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      ui = (int) buffer.decodeConsWholeNumber (16);

      switch (ui) {
         case 0: ret =  0; break;
         case 1: ret =  1; break;
         case 2: ret =  2; break;
         case 3: ret =  3; break;
         case 4: ret =  4; break;
         case 5: ret =  5; break;
         case 6: ret =  6; break;
         case 7: ret =  7; break;
         case 8: ret =  8; break;
         case 9: ret =  9; break;
         case 10: ret =  10; break;
         case 11: ret =  11; break;
         case 12: ret =  12; break;
         case 13: ret =  13; break;
         case 14: ret =  14; break;
         case 15: ret =  15; break;
         default: throw new Asn1InvalidEnumException (ui);
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (BSR_Config_retxBSR_Timer.valueOf(ret).toString());

      return ret;
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      switch ((int)value) {
         case 0: ui = 0; /* sf10 */break;
         case 1: ui = 1; /* sf20 */break;
         case 2: ui = 2; /* sf40 */break;
         case 3: ui = 3; /* sf80 */break;
         case 4: ui = 4; /* sf160 */break;
         case 5: ui = 5; /* sf320 */break;
         case 6: ui = 6; /* sf640 */break;
         case 7: ui = 7; /* sf1280 */break;
         case 8: ui = 8; /* sf2560 */break;
         case 9: ui = 9; /* sf5120 */break;
         case 10: ui = 10; /* sf10240 */break;
         case 11: ui = 11; /* spare5 */break;
         case 12: ui = 12; /* spare4 */break;
         case 13: ui = 13; /* spare3 */break;
         case 14: ui = 14; /* spare2 */break;
         case 15: ui = 15; /* spare1 */break;
         default:
            throw new Asn1InvalidEnumException (value);
      }

      buffer.encodeConsWholeNumber (ui, 16);
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("sf10");
         case 1: return ("sf20");
         case 2: return ("sf40");
         case 3: return ("sf80");
         case 4: return ("sf160");
         case 5: return ("sf320");
         case 6: return ("sf640");
         case 7: return ("sf1280");
         case 8: return ("sf2560");
         case 9: return ("sf5120");
         case 10: return ("sf10240");
         case 11: return ("spare5");
         case 12: return ("spare4");
         case 13: return ("spare3");
         case 14: return ("spare2");
         case 15: return ("spare1");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
