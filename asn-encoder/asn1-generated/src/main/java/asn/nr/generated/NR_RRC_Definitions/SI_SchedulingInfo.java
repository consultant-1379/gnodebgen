/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SI_SchedulingInfo extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SI-SchedulingInfo";
   }

   public SI_SchedulingInfo_schedulingInfoList schedulingInfoList;
   public SI_SchedulingInfo_si_WindowLength si_WindowLength = null;
   public SI_RequestConfig si_RequestConfig;  // optional
   public SI_RequestConfig si_RequestConfigSUL;  // optional
   public Asn1BitString systemInformationAreaID;  // optional
   public Asn1OpenExt extElem1;

   public SI_SchedulingInfo () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SI_SchedulingInfo (
      SI_SchedulingInfo_schedulingInfoList schedulingInfoList_,
      SI_SchedulingInfo_si_WindowLength si_WindowLength_,
      SI_RequestConfig si_RequestConfig_,
      SI_RequestConfig si_RequestConfigSUL_,
      Asn1BitString systemInformationAreaID_
   ) {
      super();
      schedulingInfoList = schedulingInfoList_;
      si_WindowLength = si_WindowLength_;
      si_RequestConfig = si_RequestConfig_;
      si_RequestConfigSUL = si_RequestConfigSUL_;
      systemInformationAreaID = systemInformationAreaID_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SI_SchedulingInfo (
      SI_SchedulingInfo_schedulingInfoList schedulingInfoList_,
      SI_SchedulingInfo_si_WindowLength si_WindowLength_
   ) {
      super();
      schedulingInfoList = schedulingInfoList_;
      si_WindowLength = si_WindowLength_;
   }

   public void init () {
      schedulingInfoList = null;
      si_WindowLength = null;
      si_RequestConfig = null;
      si_RequestConfigSUL = null;
      systemInformationAreaID = null;
      extElem1 = null;
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return schedulingInfoList;
         case 1: return si_WindowLength;
         case 2: return si_RequestConfig;
         case 3: return si_RequestConfigSUL;
         case 4: return systemInformationAreaID;
         case 5: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "schedulingInfoList";
         case 1: return "si-WindowLength";
         case 2: return "si-RequestConfig";
         case 3: return "si-RequestConfigSUL";
         case 4: return "systemInformationAreaID";
         case 5: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean si_RequestConfigPresent = buffer.decodeBit ("si_RequestConfigPresent");
      boolean si_RequestConfigSULPresent = buffer.decodeBit ("si_RequestConfigSULPresent");
      boolean systemInformationAreaIDPresent = buffer.decodeBit ("systemInformationAreaIDPresent");

      // decode schedulingInfoList

      buffer.getContext().eventDispatcher.startElement("schedulingInfoList", -1);

      schedulingInfoList = new SI_SchedulingInfo_schedulingInfoList();
      schedulingInfoList.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("schedulingInfoList", -1);

      // decode si_WindowLength

      buffer.getContext().eventDispatcher.startElement("si_WindowLength", -1);

      {
         int tval = SI_SchedulingInfo_si_WindowLength.decodeEnumValue (buffer);
         si_WindowLength = SI_SchedulingInfo_si_WindowLength.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("si_WindowLength", -1);

      // decode si_RequestConfig

      if (si_RequestConfigPresent) {
         buffer.getContext().eventDispatcher.startElement("si_RequestConfig", -1);

         si_RequestConfig = new SI_RequestConfig();
         si_RequestConfig.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("si_RequestConfig", -1);
      }
      else {
         si_RequestConfig = null;
      }

      // decode si_RequestConfigSUL

      if (si_RequestConfigSULPresent) {
         buffer.getContext().eventDispatcher.startElement("si_RequestConfigSUL", -1);

         si_RequestConfigSUL = new SI_RequestConfig();
         si_RequestConfigSUL.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("si_RequestConfigSUL", -1);
      }
      else {
         si_RequestConfigSUL = null;
      }

      // decode systemInformationAreaID

      if (systemInformationAreaIDPresent) {
         buffer.getContext().eventDispatcher.startElement("systemInformationAreaID", -1);

         systemInformationAreaID = new Asn1BitString();
         systemInformationAreaID.decode (buffer, 24, 24);

         buffer.invokeCharacters(systemInformationAreaID.toString());
         buffer.getContext().eventDispatcher.endElement("systemInformationAreaID", -1);
      }
      else {
         systemInformationAreaID = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((si_RequestConfig != null), null);
      buffer.encodeBit ((si_RequestConfigSUL != null), null);
      buffer.encodeBit ((systemInformationAreaID != null), null);

      // encode schedulingInfoList

      if (schedulingInfoList != null) {
         buffer.getContext().eventDispatcher.startElement("schedulingInfoList", -1);

         schedulingInfoList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("schedulingInfoList", -1);
      }
      else throw new Asn1MissingRequiredException ("schedulingInfoList");

      // encode si_WindowLength

      if (si_WindowLength != null) {
         buffer.getContext().eventDispatcher.startElement("si_WindowLength", -1);

         si_WindowLength.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("si_WindowLength", -1);
      }
      else throw new Asn1MissingRequiredException ("si_WindowLength");

      // encode si_RequestConfig

      if (si_RequestConfig != null) {
         buffer.getContext().eventDispatcher.startElement("si_RequestConfig", -1);

         si_RequestConfig.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("si_RequestConfig", -1);
      }

      // encode si_RequestConfigSUL

      if (si_RequestConfigSUL != null) {
         buffer.getContext().eventDispatcher.startElement("si_RequestConfigSUL", -1);

         si_RequestConfigSUL.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("si_RequestConfigSUL", -1);
      }

      // encode systemInformationAreaID

      if (systemInformationAreaID != null) {
         buffer.getContext().eventDispatcher.startElement("systemInformationAreaID", -1);

         systemInformationAreaID.encode (buffer, 24, 24);

         buffer.getContext().eventDispatcher.endElement("systemInformationAreaID", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (schedulingInfoList != null) schedulingInfoList.print (_sb, "schedulingInfoList", _level+1);
      if (si_WindowLength != null) si_WindowLength.print (_sb, "si_WindowLength", _level+1);
      if (si_RequestConfig != null) si_RequestConfig.print (_sb, "si_RequestConfig", _level+1);
      if (si_RequestConfigSUL != null) si_RequestConfigSUL.print (_sb, "si_RequestConfigSUL", _level+1);
      if (systemInformationAreaID != null) systemInformationAreaID.print (_sb, "systemInformationAreaID", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
