/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class RRCRelease_IEs extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "RRCRelease-IEs";
   }

   public RedirectedCarrierInfo redirectedCarrierInfo;  // optional
   public CellReselectionPriorities cellReselectionPriorities;  // optional
   public SuspendConfig suspendConfig;  // optional
   public RRCRelease_IEs_deprioritisationReq deprioritisationReq;  // optional
   public Asn1OctetString lateNonCriticalExtension;  // optional
   public RRCRelease_v1540_IEs nonCriticalExtension;  // optional

   public RRCRelease_IEs () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public RRCRelease_IEs (
      RedirectedCarrierInfo redirectedCarrierInfo_,
      CellReselectionPriorities cellReselectionPriorities_,
      SuspendConfig suspendConfig_,
      RRCRelease_IEs_deprioritisationReq deprioritisationReq_,
      Asn1OctetString lateNonCriticalExtension_,
      RRCRelease_v1540_IEs nonCriticalExtension_
   ) {
      super();
      redirectedCarrierInfo = redirectedCarrierInfo_;
      cellReselectionPriorities = cellReselectionPriorities_;
      suspendConfig = suspendConfig_;
      deprioritisationReq = deprioritisationReq_;
      lateNonCriticalExtension = lateNonCriticalExtension_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public RRCRelease_IEs (RedirectedCarrierInfo redirectedCarrierInfo_,
      CellReselectionPriorities cellReselectionPriorities_,
      SuspendConfig suspendConfig_,
      RRCRelease_IEs_deprioritisationReq deprioritisationReq_,
      byte[] lateNonCriticalExtension_,
      RRCRelease_v1540_IEs nonCriticalExtension_
   ) {
      super();
      redirectedCarrierInfo = redirectedCarrierInfo_;
      cellReselectionPriorities = cellReselectionPriorities_;
      suspendConfig = suspendConfig_;
      deprioritisationReq = deprioritisationReq_;
      lateNonCriticalExtension = new Asn1OctetString (lateNonCriticalExtension_);
      nonCriticalExtension = nonCriticalExtension_;
   }

   public void init () {
      redirectedCarrierInfo = null;
      cellReselectionPriorities = null;
      suspendConfig = null;
      deprioritisationReq = null;
      lateNonCriticalExtension = null;
      nonCriticalExtension = null;
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return redirectedCarrierInfo;
         case 1: return cellReselectionPriorities;
         case 2: return suspendConfig;
         case 3: return deprioritisationReq;
         case 4: return lateNonCriticalExtension;
         case 5: return nonCriticalExtension;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "redirectedCarrierInfo";
         case 1: return "cellReselectionPriorities";
         case 2: return "suspendConfig";
         case 3: return "deprioritisationReq";
         case 4: return "lateNonCriticalExtension";
         case 5: return "nonCriticalExtension";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean redirectedCarrierInfoPresent = buffer.decodeBit ("redirectedCarrierInfoPresent");
      boolean cellReselectionPrioritiesPresent = buffer.decodeBit ("cellReselectionPrioritiesPresent");
      boolean suspendConfigPresent = buffer.decodeBit ("suspendConfigPresent");
      boolean deprioritisationReqPresent = buffer.decodeBit ("deprioritisationReqPresent");
      boolean lateNonCriticalExtensionPresent = buffer.decodeBit ("lateNonCriticalExtensionPresent");
      boolean nonCriticalExtensionPresent = buffer.decodeBit ("nonCriticalExtensionPresent");

      // decode redirectedCarrierInfo

      if (redirectedCarrierInfoPresent) {
         buffer.getContext().eventDispatcher.startElement("redirectedCarrierInfo", -1);

         redirectedCarrierInfo = new RedirectedCarrierInfo();
         redirectedCarrierInfo.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("redirectedCarrierInfo", -1);
      }
      else {
         redirectedCarrierInfo = null;
      }

      // decode cellReselectionPriorities

      if (cellReselectionPrioritiesPresent) {
         buffer.getContext().eventDispatcher.startElement("cellReselectionPriorities", -1);

         cellReselectionPriorities = new CellReselectionPriorities();
         cellReselectionPriorities.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("cellReselectionPriorities", -1);
      }
      else {
         cellReselectionPriorities = null;
      }

      // decode suspendConfig

      if (suspendConfigPresent) {
         buffer.getContext().eventDispatcher.startElement("suspendConfig", -1);

         suspendConfig = new SuspendConfig();
         suspendConfig.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("suspendConfig", -1);
      }
      else {
         suspendConfig = null;
      }

      // decode deprioritisationReq

      if (deprioritisationReqPresent) {
         buffer.getContext().eventDispatcher.startElement("deprioritisationReq", -1);

         deprioritisationReq = new RRCRelease_IEs_deprioritisationReq();
         deprioritisationReq.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("deprioritisationReq", -1);
      }
      else {
         deprioritisationReq = null;
      }

      // decode lateNonCriticalExtension

      if (lateNonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("lateNonCriticalExtension", -1);

         lateNonCriticalExtension = new Asn1OctetString();
         lateNonCriticalExtension.decode (buffer);

         buffer.invokeCharacters(lateNonCriticalExtension.toString());
         buffer.getContext().eventDispatcher.endElement("lateNonCriticalExtension", -1);
      }
      else {
         lateNonCriticalExtension = null;
      }

      // decode nonCriticalExtension

      if (nonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension = new RRCRelease_v1540_IEs();
         nonCriticalExtension.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }
      else {
         nonCriticalExtension = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((redirectedCarrierInfo != null), null);
      buffer.encodeBit ((cellReselectionPriorities != null), null);
      buffer.encodeBit ((suspendConfig != null), null);
      buffer.encodeBit ((deprioritisationReq != null), null);
      buffer.encodeBit ((lateNonCriticalExtension != null), null);
      buffer.encodeBit ((nonCriticalExtension != null), null);

      // encode redirectedCarrierInfo

      if (redirectedCarrierInfo != null) {
         buffer.getContext().eventDispatcher.startElement("redirectedCarrierInfo", -1);

         redirectedCarrierInfo.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("redirectedCarrierInfo", -1);
      }

      // encode cellReselectionPriorities

      if (cellReselectionPriorities != null) {
         buffer.getContext().eventDispatcher.startElement("cellReselectionPriorities", -1);

         cellReselectionPriorities.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("cellReselectionPriorities", -1);
      }

      // encode suspendConfig

      if (suspendConfig != null) {
         buffer.getContext().eventDispatcher.startElement("suspendConfig", -1);

         suspendConfig.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("suspendConfig", -1);
      }

      // encode deprioritisationReq

      if (deprioritisationReq != null) {
         buffer.getContext().eventDispatcher.startElement("deprioritisationReq", -1);

         deprioritisationReq.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("deprioritisationReq", -1);
      }

      // encode lateNonCriticalExtension

      if (lateNonCriticalExtension != null) {
         buffer.getContext().eventDispatcher.startElement("lateNonCriticalExtension", -1);

         lateNonCriticalExtension.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("lateNonCriticalExtension", -1);
      }

      // encode nonCriticalExtension

      if (nonCriticalExtension != null) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (redirectedCarrierInfo != null) redirectedCarrierInfo.print (_sb, "redirectedCarrierInfo", _level+1);
      if (cellReselectionPriorities != null) cellReselectionPriorities.print (_sb, "cellReselectionPriorities", _level+1);
      if (suspendConfig != null) suspendConfig.print (_sb, "suspendConfig", _level+1);
      if (deprioritisationReq != null) deprioritisationReq.print (_sb, "deprioritisationReq", _level+1);
      if (lateNonCriticalExtension != null) lateNonCriticalExtension.print (_sb, "lateNonCriticalExtension", _level+1);
      if (nonCriticalExtension != null) nonCriticalExtension.print (_sb, "nonCriticalExtension", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
