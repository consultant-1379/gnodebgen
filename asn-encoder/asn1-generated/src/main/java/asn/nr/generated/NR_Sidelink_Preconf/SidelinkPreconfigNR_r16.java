/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_Sidelink_Preconf;

import com.objsys.asn1j.runtime.*;
import asn.nr.generated.NR_RRC_Definitions.SL_NR_AnchorCarrierFreqList_r16;
import asn.nr.generated.NR_RRC_Definitions.SL_EUTRA_AnchorCarrierFreqList_r16;
import asn.nr.generated.NR_RRC_Definitions.SL_MeasConfigCommon_r16;
import asn.nr.generated.NR_RRC_Definitions.SL_UE_SelectedConfig_r16;

public class SidelinkPreconfigNR_r16 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_Sidelink_PreconfRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SidelinkPreconfigNR-r16";
   }

   public SidelinkPreconfigNR_r16_sl_PreconfigFreqInfoList_r16 sl_PreconfigFreqInfoList_r16;  // optional
   public SL_NR_AnchorCarrierFreqList_r16 sl_PreconfigNR_AnchorCarrierFreqList_r16;  // optional
   public SL_EUTRA_AnchorCarrierFreqList_r16 sl_PreconfigEUTRA_AnchorCarrierFreqList_r16;  // optional
   public SidelinkPreconfigNR_r16_sl_RadioBearerPreConfigList_r16 sl_RadioBearerPreConfigList_r16;  // optional
   public SidelinkPreconfigNR_r16_sl_RLC_BearerPreConfigList_r16 sl_RLC_BearerPreConfigList_r16;  // optional
   public SL_MeasConfigCommon_r16 sl_MeasPreConfig_r16;  // optional
   public Asn1Integer sl_OffsetDFN_r16;  // optional
   public SidelinkPreconfigNR_r16_t400_r16 t400_r16 = null;  // optional
   public SidelinkPreconfigNR_r16_sl_MaxNumConsecutiveDTX_r16 sl_MaxNumConsecutiveDTX_r16 = null;  // optional
   public Asn1Integer sl_SSB_PriorityNR_r16;  // optional
   public SL_PreconfigGeneral_r16 sl_PreconfigGeneral_r16;  // optional
   public SL_UE_SelectedConfig_r16 sl_UE_SelectedPreConfig_r16;  // optional
   public SidelinkPreconfigNR_r16_sl_CSI_Acquisition_r16 sl_CSI_Acquisition_r16 = null;  // optional
   public SL_RoHC_Profiles_r16 sl_RoHC_Profiles_r16;  // optional
   public Asn1Integer sl_MaxCID_r16;  // default = 15()
   public Asn1OpenExt extElem1;

   public SidelinkPreconfigNR_r16 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SidelinkPreconfigNR_r16 (
      SidelinkPreconfigNR_r16_sl_PreconfigFreqInfoList_r16 sl_PreconfigFreqInfoList_r16_,
      SL_NR_AnchorCarrierFreqList_r16 sl_PreconfigNR_AnchorCarrierFreqList_r16_,
      SL_EUTRA_AnchorCarrierFreqList_r16 sl_PreconfigEUTRA_AnchorCarrierFreqList_r16_,
      SidelinkPreconfigNR_r16_sl_RadioBearerPreConfigList_r16 sl_RadioBearerPreConfigList_r16_,
      SidelinkPreconfigNR_r16_sl_RLC_BearerPreConfigList_r16 sl_RLC_BearerPreConfigList_r16_,
      SL_MeasConfigCommon_r16 sl_MeasPreConfig_r16_,
      Asn1Integer sl_OffsetDFN_r16_,
      SidelinkPreconfigNR_r16_t400_r16 t400_r16_,
      SidelinkPreconfigNR_r16_sl_MaxNumConsecutiveDTX_r16 sl_MaxNumConsecutiveDTX_r16_,
      Asn1Integer sl_SSB_PriorityNR_r16_,
      SL_PreconfigGeneral_r16 sl_PreconfigGeneral_r16_,
      SL_UE_SelectedConfig_r16 sl_UE_SelectedPreConfig_r16_,
      SidelinkPreconfigNR_r16_sl_CSI_Acquisition_r16 sl_CSI_Acquisition_r16_,
      SL_RoHC_Profiles_r16 sl_RoHC_Profiles_r16_,
      Asn1Integer sl_MaxCID_r16_
   ) {
      super();
      sl_PreconfigFreqInfoList_r16 = sl_PreconfigFreqInfoList_r16_;
      sl_PreconfigNR_AnchorCarrierFreqList_r16 = sl_PreconfigNR_AnchorCarrierFreqList_r16_;
      sl_PreconfigEUTRA_AnchorCarrierFreqList_r16 = sl_PreconfigEUTRA_AnchorCarrierFreqList_r16_;
      sl_RadioBearerPreConfigList_r16 = sl_RadioBearerPreConfigList_r16_;
      sl_RLC_BearerPreConfigList_r16 = sl_RLC_BearerPreConfigList_r16_;
      sl_MeasPreConfig_r16 = sl_MeasPreConfig_r16_;
      sl_OffsetDFN_r16 = sl_OffsetDFN_r16_;
      t400_r16 = t400_r16_;
      sl_MaxNumConsecutiveDTX_r16 = sl_MaxNumConsecutiveDTX_r16_;
      sl_SSB_PriorityNR_r16 = sl_SSB_PriorityNR_r16_;
      sl_PreconfigGeneral_r16 = sl_PreconfigGeneral_r16_;
      sl_UE_SelectedPreConfig_r16 = sl_UE_SelectedPreConfig_r16_;
      sl_CSI_Acquisition_r16 = sl_CSI_Acquisition_r16_;
      sl_RoHC_Profiles_r16 = sl_RoHC_Profiles_r16_;
      sl_MaxCID_r16 = sl_MaxCID_r16_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SidelinkPreconfigNR_r16 (SidelinkPreconfigNR_r16_sl_PreconfigFreqInfoList_r16 sl_PreconfigFreqInfoList_r16_,
      SL_NR_AnchorCarrierFreqList_r16 sl_PreconfigNR_AnchorCarrierFreqList_r16_,
      SL_EUTRA_AnchorCarrierFreqList_r16 sl_PreconfigEUTRA_AnchorCarrierFreqList_r16_,
      SidelinkPreconfigNR_r16_sl_RadioBearerPreConfigList_r16 sl_RadioBearerPreConfigList_r16_,
      SidelinkPreconfigNR_r16_sl_RLC_BearerPreConfigList_r16 sl_RLC_BearerPreConfigList_r16_,
      SL_MeasConfigCommon_r16 sl_MeasPreConfig_r16_,
      long sl_OffsetDFN_r16_,
      SidelinkPreconfigNR_r16_t400_r16 t400_r16_,
      SidelinkPreconfigNR_r16_sl_MaxNumConsecutiveDTX_r16 sl_MaxNumConsecutiveDTX_r16_,
      long sl_SSB_PriorityNR_r16_,
      SL_PreconfigGeneral_r16 sl_PreconfigGeneral_r16_,
      SL_UE_SelectedConfig_r16 sl_UE_SelectedPreConfig_r16_,
      SidelinkPreconfigNR_r16_sl_CSI_Acquisition_r16 sl_CSI_Acquisition_r16_,
      SL_RoHC_Profiles_r16 sl_RoHC_Profiles_r16_,
      long sl_MaxCID_r16_
   ) {
      super();
      sl_PreconfigFreqInfoList_r16 = sl_PreconfigFreqInfoList_r16_;
      sl_PreconfigNR_AnchorCarrierFreqList_r16 = sl_PreconfigNR_AnchorCarrierFreqList_r16_;
      sl_PreconfigEUTRA_AnchorCarrierFreqList_r16 = sl_PreconfigEUTRA_AnchorCarrierFreqList_r16_;
      sl_RadioBearerPreConfigList_r16 = sl_RadioBearerPreConfigList_r16_;
      sl_RLC_BearerPreConfigList_r16 = sl_RLC_BearerPreConfigList_r16_;
      sl_MeasPreConfig_r16 = sl_MeasPreConfig_r16_;
      sl_OffsetDFN_r16 = new Asn1Integer (sl_OffsetDFN_r16_);
      t400_r16 = t400_r16_;
      sl_MaxNumConsecutiveDTX_r16 = sl_MaxNumConsecutiveDTX_r16_;
      sl_SSB_PriorityNR_r16 = new Asn1Integer (sl_SSB_PriorityNR_r16_);
      sl_PreconfigGeneral_r16 = sl_PreconfigGeneral_r16_;
      sl_UE_SelectedPreConfig_r16 = sl_UE_SelectedPreConfig_r16_;
      sl_CSI_Acquisition_r16 = sl_CSI_Acquisition_r16_;
      sl_RoHC_Profiles_r16 = sl_RoHC_Profiles_r16_;
      sl_MaxCID_r16 = new Asn1Integer (sl_MaxCID_r16_);
   }

   public void init () {
      sl_PreconfigFreqInfoList_r16 = null;
      sl_PreconfigNR_AnchorCarrierFreqList_r16 = null;
      sl_PreconfigEUTRA_AnchorCarrierFreqList_r16 = null;
      sl_RadioBearerPreConfigList_r16 = null;
      sl_RLC_BearerPreConfigList_r16 = null;
      sl_MeasPreConfig_r16 = null;
      sl_OffsetDFN_r16 = null;
      t400_r16 = null;
      sl_MaxNumConsecutiveDTX_r16 = null;
      sl_SSB_PriorityNR_r16 = null;
      sl_PreconfigGeneral_r16 = null;
      sl_UE_SelectedPreConfig_r16 = null;
      sl_CSI_Acquisition_r16 = null;
      sl_RoHC_Profiles_r16 = null;
      sl_MaxCID_r16 = new Asn1Integer (15);
      extElem1 = null;
   }

   public int getElementCount() { return 16; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return sl_PreconfigFreqInfoList_r16;
         case 1: return sl_PreconfigNR_AnchorCarrierFreqList_r16;
         case 2: return sl_PreconfigEUTRA_AnchorCarrierFreqList_r16;
         case 3: return sl_RadioBearerPreConfigList_r16;
         case 4: return sl_RLC_BearerPreConfigList_r16;
         case 5: return sl_MeasPreConfig_r16;
         case 6: return sl_OffsetDFN_r16;
         case 7: return t400_r16;
         case 8: return sl_MaxNumConsecutiveDTX_r16;
         case 9: return sl_SSB_PriorityNR_r16;
         case 10: return sl_PreconfigGeneral_r16;
         case 11: return sl_UE_SelectedPreConfig_r16;
         case 12: return sl_CSI_Acquisition_r16;
         case 13: return sl_RoHC_Profiles_r16;
         case 14: return sl_MaxCID_r16;
         case 15: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "sl-PreconfigFreqInfoList-r16";
         case 1: return "sl-PreconfigNR-AnchorCarrierFreqList-r16";
         case 2: return "sl-PreconfigEUTRA-AnchorCarrierFreqList-r16";
         case 3: return "sl-RadioBearerPreConfigList-r16";
         case 4: return "sl-RLC-BearerPreConfigList-r16";
         case 5: return "sl-MeasPreConfig-r16";
         case 6: return "sl-OffsetDFN-r16";
         case 7: return "t400-r16";
         case 8: return "sl-MaxNumConsecutiveDTX-r16";
         case 9: return "sl-SSB-PriorityNR-r16";
         case 10: return "sl-PreconfigGeneral-r16";
         case 11: return "sl-UE-SelectedPreConfig-r16";
         case 12: return "sl-CSI-Acquisition-r16";
         case 13: return "sl-RoHC-Profiles-r16";
         case 14: return "sl-MaxCID-r16";
         case 15: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean sl_PreconfigFreqInfoList_r16Present = buffer.decodeBit ("sl_PreconfigFreqInfoList_r16Present");
      boolean sl_PreconfigNR_AnchorCarrierFreqList_r16Present = buffer.decodeBit ("sl_PreconfigNR_AnchorCarrierFreqList_r16Present");
      boolean sl_PreconfigEUTRA_AnchorCarrierFreqList_r16Present = buffer.decodeBit ("sl_PreconfigEUTRA_AnchorCarrierFreqList_r16Present");
      boolean sl_RadioBearerPreConfigList_r16Present = buffer.decodeBit ("sl_RadioBearerPreConfigList_r16Present");
      boolean sl_RLC_BearerPreConfigList_r16Present = buffer.decodeBit ("sl_RLC_BearerPreConfigList_r16Present");
      boolean sl_MeasPreConfig_r16Present = buffer.decodeBit ("sl_MeasPreConfig_r16Present");
      boolean sl_OffsetDFN_r16Present = buffer.decodeBit ("sl_OffsetDFN_r16Present");
      boolean t400_r16Present = buffer.decodeBit ("t400_r16Present");
      boolean sl_MaxNumConsecutiveDTX_r16Present = buffer.decodeBit ("sl_MaxNumConsecutiveDTX_r16Present");
      boolean sl_SSB_PriorityNR_r16Present = buffer.decodeBit ("sl_SSB_PriorityNR_r16Present");
      boolean sl_PreconfigGeneral_r16Present = buffer.decodeBit ("sl_PreconfigGeneral_r16Present");
      boolean sl_UE_SelectedPreConfig_r16Present = buffer.decodeBit ("sl_UE_SelectedPreConfig_r16Present");
      boolean sl_CSI_Acquisition_r16Present = buffer.decodeBit ("sl_CSI_Acquisition_r16Present");
      boolean sl_RoHC_Profiles_r16Present = buffer.decodeBit ("sl_RoHC_Profiles_r16Present");
      boolean sl_MaxCID_r16Present = buffer.decodeBit ("sl_MaxCID_r16Present");

      // decode sl_PreconfigFreqInfoList_r16

      if (sl_PreconfigFreqInfoList_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_PreconfigFreqInfoList_r16", -1);

         sl_PreconfigFreqInfoList_r16 = new SidelinkPreconfigNR_r16_sl_PreconfigFreqInfoList_r16();
         sl_PreconfigFreqInfoList_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sl_PreconfigFreqInfoList_r16", -1);
      }
      else {
         sl_PreconfigFreqInfoList_r16 = null;
      }

      // decode sl_PreconfigNR_AnchorCarrierFreqList_r16

      if (sl_PreconfigNR_AnchorCarrierFreqList_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_PreconfigNR_AnchorCarrierFreqList_r16", -1);

         sl_PreconfigNR_AnchorCarrierFreqList_r16 = new SL_NR_AnchorCarrierFreqList_r16();
         sl_PreconfigNR_AnchorCarrierFreqList_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sl_PreconfigNR_AnchorCarrierFreqList_r16", -1);
      }
      else {
         sl_PreconfigNR_AnchorCarrierFreqList_r16 = null;
      }

      // decode sl_PreconfigEUTRA_AnchorCarrierFreqList_r16

      if (sl_PreconfigEUTRA_AnchorCarrierFreqList_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_PreconfigEUTRA_AnchorCarrierFreqList_r16", -1);

         sl_PreconfigEUTRA_AnchorCarrierFreqList_r16 = new SL_EUTRA_AnchorCarrierFreqList_r16();
         sl_PreconfigEUTRA_AnchorCarrierFreqList_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sl_PreconfigEUTRA_AnchorCarrierFreqList_r16", -1);
      }
      else {
         sl_PreconfigEUTRA_AnchorCarrierFreqList_r16 = null;
      }

      // decode sl_RadioBearerPreConfigList_r16

      if (sl_RadioBearerPreConfigList_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_RadioBearerPreConfigList_r16", -1);

         sl_RadioBearerPreConfigList_r16 = new SidelinkPreconfigNR_r16_sl_RadioBearerPreConfigList_r16();
         sl_RadioBearerPreConfigList_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sl_RadioBearerPreConfigList_r16", -1);
      }
      else {
         sl_RadioBearerPreConfigList_r16 = null;
      }

      // decode sl_RLC_BearerPreConfigList_r16

      if (sl_RLC_BearerPreConfigList_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_RLC_BearerPreConfigList_r16", -1);

         sl_RLC_BearerPreConfigList_r16 = new SidelinkPreconfigNR_r16_sl_RLC_BearerPreConfigList_r16();
         sl_RLC_BearerPreConfigList_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sl_RLC_BearerPreConfigList_r16", -1);
      }
      else {
         sl_RLC_BearerPreConfigList_r16 = null;
      }

      // decode sl_MeasPreConfig_r16

      if (sl_MeasPreConfig_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_MeasPreConfig_r16", -1);

         sl_MeasPreConfig_r16 = new SL_MeasConfigCommon_r16();
         sl_MeasPreConfig_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sl_MeasPreConfig_r16", -1);
      }
      else {
         sl_MeasPreConfig_r16 = null;
      }

      // decode sl_OffsetDFN_r16

      if (sl_OffsetDFN_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_OffsetDFN_r16", -1);

         sl_OffsetDFN_r16 = new Asn1Integer();
         sl_OffsetDFN_r16.decode (buffer, 1, 1000);

         buffer.invokeCharacters(sl_OffsetDFN_r16.toString());
         buffer.getContext().eventDispatcher.endElement("sl_OffsetDFN_r16", -1);
      }
      else {
         sl_OffsetDFN_r16 = null;
      }

      // decode t400_r16

      if (t400_r16Present) {
         buffer.getContext().eventDispatcher.startElement("t400_r16", -1);

         int tval = SidelinkPreconfigNR_r16_t400_r16.decodeEnumValue (buffer);
         t400_r16 = SidelinkPreconfigNR_r16_t400_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("t400_r16", -1);
      }
      else {
         t400_r16 = null;
      }

      // decode sl_MaxNumConsecutiveDTX_r16

      if (sl_MaxNumConsecutiveDTX_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_MaxNumConsecutiveDTX_r16", -1);

         int tval = SidelinkPreconfigNR_r16_sl_MaxNumConsecutiveDTX_r16.decodeEnumValue (buffer);
         sl_MaxNumConsecutiveDTX_r16 = SidelinkPreconfigNR_r16_sl_MaxNumConsecutiveDTX_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("sl_MaxNumConsecutiveDTX_r16", -1);
      }
      else {
         sl_MaxNumConsecutiveDTX_r16 = null;
      }

      // decode sl_SSB_PriorityNR_r16

      if (sl_SSB_PriorityNR_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_SSB_PriorityNR_r16", -1);

         sl_SSB_PriorityNR_r16 = new Asn1Integer();
         sl_SSB_PriorityNR_r16.decode (buffer, 1, 8);

         buffer.invokeCharacters(sl_SSB_PriorityNR_r16.toString());
         buffer.getContext().eventDispatcher.endElement("sl_SSB_PriorityNR_r16", -1);
      }
      else {
         sl_SSB_PriorityNR_r16 = null;
      }

      // decode sl_PreconfigGeneral_r16

      if (sl_PreconfigGeneral_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_PreconfigGeneral_r16", -1);

         sl_PreconfigGeneral_r16 = new SL_PreconfigGeneral_r16();
         sl_PreconfigGeneral_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sl_PreconfigGeneral_r16", -1);
      }
      else {
         sl_PreconfigGeneral_r16 = null;
      }

      // decode sl_UE_SelectedPreConfig_r16

      if (sl_UE_SelectedPreConfig_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_UE_SelectedPreConfig_r16", -1);

         sl_UE_SelectedPreConfig_r16 = new SL_UE_SelectedConfig_r16();
         sl_UE_SelectedPreConfig_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sl_UE_SelectedPreConfig_r16", -1);
      }
      else {
         sl_UE_SelectedPreConfig_r16 = null;
      }

      // decode sl_CSI_Acquisition_r16

      if (sl_CSI_Acquisition_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_CSI_Acquisition_r16", -1);

         int tval = SidelinkPreconfigNR_r16_sl_CSI_Acquisition_r16.decodeEnumValue (buffer);
         sl_CSI_Acquisition_r16 = SidelinkPreconfigNR_r16_sl_CSI_Acquisition_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("sl_CSI_Acquisition_r16", -1);
      }
      else {
         sl_CSI_Acquisition_r16 = null;
      }

      // decode sl_RoHC_Profiles_r16

      if (sl_RoHC_Profiles_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_RoHC_Profiles_r16", -1);

         sl_RoHC_Profiles_r16 = new SL_RoHC_Profiles_r16();
         sl_RoHC_Profiles_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sl_RoHC_Profiles_r16", -1);
      }
      else {
         sl_RoHC_Profiles_r16 = null;
      }

      // decode sl_MaxCID_r16

      if (sl_MaxCID_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_MaxCID_r16", -1);

         sl_MaxCID_r16 = new Asn1Integer();
         sl_MaxCID_r16.decode (buffer, 1, 16383);

         buffer.invokeCharacters(sl_MaxCID_r16.toString());
         buffer.getContext().eventDispatcher.endElement("sl_MaxCID_r16", -1);
      }
      else {
         sl_MaxCID_r16 = new Asn1Integer();
         sl_MaxCID_r16.value = 15;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((sl_PreconfigFreqInfoList_r16 != null), null);
      buffer.encodeBit ((sl_PreconfigNR_AnchorCarrierFreqList_r16 != null), null);
      buffer.encodeBit ((sl_PreconfigEUTRA_AnchorCarrierFreqList_r16 != null), null);
      buffer.encodeBit ((sl_RadioBearerPreConfigList_r16 != null), null);
      buffer.encodeBit ((sl_RLC_BearerPreConfigList_r16 != null), null);
      buffer.encodeBit ((sl_MeasPreConfig_r16 != null), null);
      buffer.encodeBit ((sl_OffsetDFN_r16 != null), null);
      buffer.encodeBit ((t400_r16 != null), null);
      buffer.encodeBit ((sl_MaxNumConsecutiveDTX_r16 != null), null);
      buffer.encodeBit ((sl_SSB_PriorityNR_r16 != null), null);
      buffer.encodeBit ((sl_PreconfigGeneral_r16 != null), null);
      buffer.encodeBit ((sl_UE_SelectedPreConfig_r16 != null), null);
      buffer.encodeBit ((sl_CSI_Acquisition_r16 != null), null);
      buffer.encodeBit ((sl_RoHC_Profiles_r16 != null), null);
      buffer.encodeBit ((!sl_MaxCID_r16.equals (15)), null);

      // encode sl_PreconfigFreqInfoList_r16

      if (sl_PreconfigFreqInfoList_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_PreconfigFreqInfoList_r16", -1);

         sl_PreconfigFreqInfoList_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sl_PreconfigFreqInfoList_r16", -1);
      }

      // encode sl_PreconfigNR_AnchorCarrierFreqList_r16

      if (sl_PreconfigNR_AnchorCarrierFreqList_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_PreconfigNR_AnchorCarrierFreqList_r16", -1);

         sl_PreconfigNR_AnchorCarrierFreqList_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sl_PreconfigNR_AnchorCarrierFreqList_r16", -1);
      }

      // encode sl_PreconfigEUTRA_AnchorCarrierFreqList_r16

      if (sl_PreconfigEUTRA_AnchorCarrierFreqList_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_PreconfigEUTRA_AnchorCarrierFreqList_r16", -1);

         sl_PreconfigEUTRA_AnchorCarrierFreqList_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sl_PreconfigEUTRA_AnchorCarrierFreqList_r16", -1);
      }

      // encode sl_RadioBearerPreConfigList_r16

      if (sl_RadioBearerPreConfigList_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_RadioBearerPreConfigList_r16", -1);

         sl_RadioBearerPreConfigList_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sl_RadioBearerPreConfigList_r16", -1);
      }

      // encode sl_RLC_BearerPreConfigList_r16

      if (sl_RLC_BearerPreConfigList_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_RLC_BearerPreConfigList_r16", -1);

         sl_RLC_BearerPreConfigList_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sl_RLC_BearerPreConfigList_r16", -1);
      }

      // encode sl_MeasPreConfig_r16

      if (sl_MeasPreConfig_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_MeasPreConfig_r16", -1);

         sl_MeasPreConfig_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sl_MeasPreConfig_r16", -1);
      }

      // encode sl_OffsetDFN_r16

      if (sl_OffsetDFN_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_OffsetDFN_r16", -1);

         sl_OffsetDFN_r16.encode (buffer, 1, 1000);

         buffer.getContext().eventDispatcher.endElement("sl_OffsetDFN_r16", -1);
      }

      // encode t400_r16

      if (t400_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("t400_r16", -1);

         t400_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("t400_r16", -1);
      }

      // encode sl_MaxNumConsecutiveDTX_r16

      if (sl_MaxNumConsecutiveDTX_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_MaxNumConsecutiveDTX_r16", -1);

         sl_MaxNumConsecutiveDTX_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sl_MaxNumConsecutiveDTX_r16", -1);
      }

      // encode sl_SSB_PriorityNR_r16

      if (sl_SSB_PriorityNR_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_SSB_PriorityNR_r16", -1);

         sl_SSB_PriorityNR_r16.encode (buffer, 1, 8);

         buffer.getContext().eventDispatcher.endElement("sl_SSB_PriorityNR_r16", -1);
      }

      // encode sl_PreconfigGeneral_r16

      if (sl_PreconfigGeneral_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_PreconfigGeneral_r16", -1);

         sl_PreconfigGeneral_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sl_PreconfigGeneral_r16", -1);
      }

      // encode sl_UE_SelectedPreConfig_r16

      if (sl_UE_SelectedPreConfig_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_UE_SelectedPreConfig_r16", -1);

         sl_UE_SelectedPreConfig_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sl_UE_SelectedPreConfig_r16", -1);
      }

      // encode sl_CSI_Acquisition_r16

      if (sl_CSI_Acquisition_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_CSI_Acquisition_r16", -1);

         sl_CSI_Acquisition_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sl_CSI_Acquisition_r16", -1);
      }

      // encode sl_RoHC_Profiles_r16

      if (sl_RoHC_Profiles_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_RoHC_Profiles_r16", -1);

         sl_RoHC_Profiles_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sl_RoHC_Profiles_r16", -1);
      }

      // encode sl_MaxCID_r16

      if (sl_MaxCID_r16 != null) {
         if (!sl_MaxCID_r16.equals (15)) {
            buffer.getContext().eventDispatcher.startElement("sl_MaxCID_r16", -1);

            sl_MaxCID_r16.encode (buffer, 1, 16383);

            buffer.getContext().eventDispatcher.endElement("sl_MaxCID_r16", -1);
         }
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (sl_PreconfigFreqInfoList_r16 != null) sl_PreconfigFreqInfoList_r16.print (_sb, "sl_PreconfigFreqInfoList_r16", _level+1);
      if (sl_PreconfigNR_AnchorCarrierFreqList_r16 != null) sl_PreconfigNR_AnchorCarrierFreqList_r16.print (_sb, "sl_PreconfigNR_AnchorCarrierFreqList_r16", _level+1);
      if (sl_PreconfigEUTRA_AnchorCarrierFreqList_r16 != null) sl_PreconfigEUTRA_AnchorCarrierFreqList_r16.print (_sb, "sl_PreconfigEUTRA_AnchorCarrierFreqList_r16", _level+1);
      if (sl_RadioBearerPreConfigList_r16 != null) sl_RadioBearerPreConfigList_r16.print (_sb, "sl_RadioBearerPreConfigList_r16", _level+1);
      if (sl_RLC_BearerPreConfigList_r16 != null) sl_RLC_BearerPreConfigList_r16.print (_sb, "sl_RLC_BearerPreConfigList_r16", _level+1);
      if (sl_MeasPreConfig_r16 != null) sl_MeasPreConfig_r16.print (_sb, "sl_MeasPreConfig_r16", _level+1);
      if (sl_OffsetDFN_r16 != null) sl_OffsetDFN_r16.print (_sb, "sl_OffsetDFN_r16", _level+1);
      if (t400_r16 != null) t400_r16.print (_sb, "t400_r16", _level+1);
      if (sl_MaxNumConsecutiveDTX_r16 != null) sl_MaxNumConsecutiveDTX_r16.print (_sb, "sl_MaxNumConsecutiveDTX_r16", _level+1);
      if (sl_SSB_PriorityNR_r16 != null) sl_SSB_PriorityNR_r16.print (_sb, "sl_SSB_PriorityNR_r16", _level+1);
      if (sl_PreconfigGeneral_r16 != null) sl_PreconfigGeneral_r16.print (_sb, "sl_PreconfigGeneral_r16", _level+1);
      if (sl_UE_SelectedPreConfig_r16 != null) sl_UE_SelectedPreConfig_r16.print (_sb, "sl_UE_SelectedPreConfig_r16", _level+1);
      if (sl_CSI_Acquisition_r16 != null) sl_CSI_Acquisition_r16.print (_sb, "sl_CSI_Acquisition_r16", _level+1);
      if (sl_RoHC_Profiles_r16 != null) sl_RoHC_Profiles_r16.print (_sb, "sl_RoHC_Profiles_r16", _level+1);
      if (sl_MaxCID_r16 != null) sl_MaxCID_r16.print (_sb, "sl_MaxCID_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
