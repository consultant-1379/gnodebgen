/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class PLMN_Identity extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "PLMN-Identity";
   }

   public MCC mcc;  // optional
   public MNC mnc;

   public PLMN_Identity () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public PLMN_Identity (
      MCC mcc_,
      MNC mnc_
   ) {
      super();
      mcc = mcc_;
      mnc = mnc_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public PLMN_Identity (
      MNC mnc_
   ) {
      super();
      mnc = mnc_;
   }

   public void init () {
      mcc = null;
      mnc = null;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return mcc;
         case 1: return mnc;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "mcc";
         case 1: return "mnc";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean mccPresent = buffer.decodeBit ("mccPresent");

      // decode mcc

      if (mccPresent) {
         buffer.getContext().eventDispatcher.startElement("mcc", -1);

         mcc = new MCC();
         mcc.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("mcc", -1);
      }
      else {
         mcc = null;
      }

      // decode mnc

      buffer.getContext().eventDispatcher.startElement("mnc", -1);

      mnc = new MNC();
      mnc.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("mnc", -1);

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((mcc != null), null);

      // encode mcc

      if (mcc != null) {
         buffer.getContext().eventDispatcher.startElement("mcc", -1);

         mcc.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("mcc", -1);
      }

      // encode mnc

      if (mnc != null) {
         buffer.getContext().eventDispatcher.startElement("mnc", -1);

         mnc.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("mnc", -1);
      }
      else throw new Asn1MissingRequiredException ("mnc");

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (mcc != null) mcc.print (_sb, "mcc", _level+1);
      if (mnc != null) mnc.print (_sb, "mnc", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
