/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class PeriodicalReportConfig extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "PeriodicalReportConfig";
   }

   public NR_RS_Type rsType = null;
   public ReportInterval reportInterval = null;
   public PeriodicalReportConfig_reportAmount reportAmount = null;
   public MeasReportQuantity reportQuantityCell;
   public Asn1Integer maxReportCells;
   public MeasReportQuantity reportQuantityRS_Indexes;  // optional
   public Asn1Integer maxNrofRS_IndexesToReport;  // optional
   public Asn1Boolean includeBeamMeasurements;
   public Asn1Boolean useWhiteCellList;
   public boolean mV2ExtPresent;
   public MeasRSSI_ReportConfig_r16 measRSSI_ReportConfig_r16;  // optional
   public PeriodicalReportConfig_includeCommonLocationInfo_r16 includeCommonLocationInfo_r16 = null;  // optional
   public PeriodicalReportConfig_includeBT_Meas_r16 includeBT_Meas_r16;  // optional
   public PeriodicalReportConfig_includeWLAN_Meas_r16 includeWLAN_Meas_r16;  // optional
   public PeriodicalReportConfig_includeSensor_Meas_r16 includeSensor_Meas_r16;  // optional
   public PeriodicalReportConfig_ul_DelayValueConfig_r16 ul_DelayValueConfig_r16;  // optional
   public PeriodicalReportConfig_reportAddNeighMeas_r16 reportAddNeighMeas_r16 = null;  // optional
   public Asn1OpenExt extElem1;

   public PeriodicalReportConfig () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public PeriodicalReportConfig (
      NR_RS_Type rsType_,
      ReportInterval reportInterval_,
      PeriodicalReportConfig_reportAmount reportAmount_,
      MeasReportQuantity reportQuantityCell_,
      Asn1Integer maxReportCells_,
      MeasReportQuantity reportQuantityRS_Indexes_,
      Asn1Integer maxNrofRS_IndexesToReport_,
      Asn1Boolean includeBeamMeasurements_,
      Asn1Boolean useWhiteCellList_,
      MeasRSSI_ReportConfig_r16 measRSSI_ReportConfig_r16_,
      PeriodicalReportConfig_includeCommonLocationInfo_r16 includeCommonLocationInfo_r16_,
      PeriodicalReportConfig_includeBT_Meas_r16 includeBT_Meas_r16_,
      PeriodicalReportConfig_includeWLAN_Meas_r16 includeWLAN_Meas_r16_,
      PeriodicalReportConfig_includeSensor_Meas_r16 includeSensor_Meas_r16_,
      PeriodicalReportConfig_ul_DelayValueConfig_r16 ul_DelayValueConfig_r16_,
      PeriodicalReportConfig_reportAddNeighMeas_r16 reportAddNeighMeas_r16_
   ) {
      super();
      rsType = rsType_;
      reportInterval = reportInterval_;
      reportAmount = reportAmount_;
      reportQuantityCell = reportQuantityCell_;
      maxReportCells = maxReportCells_;
      reportQuantityRS_Indexes = reportQuantityRS_Indexes_;
      maxNrofRS_IndexesToReport = maxNrofRS_IndexesToReport_;
      includeBeamMeasurements = includeBeamMeasurements_;
      useWhiteCellList = useWhiteCellList_;
      measRSSI_ReportConfig_r16 = measRSSI_ReportConfig_r16_;
      includeCommonLocationInfo_r16 = includeCommonLocationInfo_r16_;
      includeBT_Meas_r16 = includeBT_Meas_r16_;
      includeWLAN_Meas_r16 = includeWLAN_Meas_r16_;
      includeSensor_Meas_r16 = includeSensor_Meas_r16_;
      ul_DelayValueConfig_r16 = ul_DelayValueConfig_r16_;
      reportAddNeighMeas_r16 = reportAddNeighMeas_r16_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public PeriodicalReportConfig (
      NR_RS_Type rsType_,
      ReportInterval reportInterval_,
      PeriodicalReportConfig_reportAmount reportAmount_,
      MeasReportQuantity reportQuantityCell_,
      Asn1Integer maxReportCells_,
      Asn1Boolean includeBeamMeasurements_,
      Asn1Boolean useWhiteCellList_
   ) {
      super();
      rsType = rsType_;
      reportInterval = reportInterval_;
      reportAmount = reportAmount_;
      reportQuantityCell = reportQuantityCell_;
      maxReportCells = maxReportCells_;
      includeBeamMeasurements = includeBeamMeasurements_;
      useWhiteCellList = useWhiteCellList_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public PeriodicalReportConfig (NR_RS_Type rsType_,
      ReportInterval reportInterval_,
      PeriodicalReportConfig_reportAmount reportAmount_,
      MeasReportQuantity reportQuantityCell_,
      long maxReportCells_,
      MeasReportQuantity reportQuantityRS_Indexes_,
      long maxNrofRS_IndexesToReport_,
      boolean includeBeamMeasurements_,
      boolean useWhiteCellList_,
      MeasRSSI_ReportConfig_r16 measRSSI_ReportConfig_r16_,
      PeriodicalReportConfig_includeCommonLocationInfo_r16 includeCommonLocationInfo_r16_,
      PeriodicalReportConfig_includeBT_Meas_r16 includeBT_Meas_r16_,
      PeriodicalReportConfig_includeWLAN_Meas_r16 includeWLAN_Meas_r16_,
      PeriodicalReportConfig_includeSensor_Meas_r16 includeSensor_Meas_r16_,
      PeriodicalReportConfig_ul_DelayValueConfig_r16 ul_DelayValueConfig_r16_,
      PeriodicalReportConfig_reportAddNeighMeas_r16 reportAddNeighMeas_r16_
   ) {
      super();
      rsType = rsType_;
      reportInterval = reportInterval_;
      reportAmount = reportAmount_;
      reportQuantityCell = reportQuantityCell_;
      maxReportCells = new Asn1Integer (maxReportCells_);
      reportQuantityRS_Indexes = reportQuantityRS_Indexes_;
      maxNrofRS_IndexesToReport = new Asn1Integer (maxNrofRS_IndexesToReport_);
      includeBeamMeasurements = new Asn1Boolean (includeBeamMeasurements_);
      useWhiteCellList = new Asn1Boolean (useWhiteCellList_);
      measRSSI_ReportConfig_r16 = measRSSI_ReportConfig_r16_;
      includeCommonLocationInfo_r16 = includeCommonLocationInfo_r16_;
      includeBT_Meas_r16 = includeBT_Meas_r16_;
      includeWLAN_Meas_r16 = includeWLAN_Meas_r16_;
      includeSensor_Meas_r16 = includeSensor_Meas_r16_;
      ul_DelayValueConfig_r16 = ul_DelayValueConfig_r16_;
      reportAddNeighMeas_r16 = reportAddNeighMeas_r16_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public PeriodicalReportConfig (
      NR_RS_Type rsType_,
      ReportInterval reportInterval_,
      PeriodicalReportConfig_reportAmount reportAmount_,
      MeasReportQuantity reportQuantityCell_,
      long maxReportCells_,
      boolean includeBeamMeasurements_,
      boolean useWhiteCellList_
   ) {
      super();
      rsType = rsType_;
      reportInterval = reportInterval_;
      reportAmount = reportAmount_;
      reportQuantityCell = reportQuantityCell_;
      maxReportCells = new Asn1Integer (maxReportCells_);
      includeBeamMeasurements = new Asn1Boolean (includeBeamMeasurements_);
      useWhiteCellList = new Asn1Boolean (useWhiteCellList_);
   }

   public void init () {
      rsType = null;
      reportInterval = null;
      reportAmount = null;
      reportQuantityCell = null;
      maxReportCells = null;
      reportQuantityRS_Indexes = null;
      maxNrofRS_IndexesToReport = null;
      includeBeamMeasurements = null;
      useWhiteCellList = null;
      measRSSI_ReportConfig_r16 = null;
      includeCommonLocationInfo_r16 = null;
      includeBT_Meas_r16 = null;
      includeWLAN_Meas_r16 = null;
      includeSensor_Meas_r16 = null;
      ul_DelayValueConfig_r16 = null;
      reportAddNeighMeas_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 17; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return rsType;
         case 1: return reportInterval;
         case 2: return reportAmount;
         case 3: return reportQuantityCell;
         case 4: return maxReportCells;
         case 5: return reportQuantityRS_Indexes;
         case 6: return maxNrofRS_IndexesToReport;
         case 7: return includeBeamMeasurements;
         case 8: return useWhiteCellList;
         case 9: return measRSSI_ReportConfig_r16;
         case 10: return includeCommonLocationInfo_r16;
         case 11: return includeBT_Meas_r16;
         case 12: return includeWLAN_Meas_r16;
         case 13: return includeSensor_Meas_r16;
         case 14: return ul_DelayValueConfig_r16;
         case 15: return reportAddNeighMeas_r16;
         case 16: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "rsType";
         case 1: return "reportInterval";
         case 2: return "reportAmount";
         case 3: return "reportQuantityCell";
         case 4: return "maxReportCells";
         case 5: return "reportQuantityRS-Indexes";
         case 6: return "maxNrofRS-IndexesToReport";
         case 7: return "includeBeamMeasurements";
         case 8: return "useWhiteCellList";
         case 9: return "measRSSI-ReportConfig-r16";
         case 10: return "includeCommonLocationInfo-r16";
         case 11: return "includeBT-Meas-r16";
         case 12: return "includeWLAN-Meas-r16";
         case 13: return "includeSensor-Meas-r16";
         case 14: return "ul-DelayValueConfig-r16";
         case 15: return "reportAddNeighMeas-r16";
         case 16: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean reportQuantityRS_IndexesPresent = buffer.decodeBit ("reportQuantityRS_IndexesPresent");
      boolean maxNrofRS_IndexesToReportPresent = buffer.decodeBit ("maxNrofRS_IndexesToReportPresent");

      // decode rsType

      buffer.getContext().eventDispatcher.startElement("rsType", -1);

      {
         int tval = NR_RS_Type.decodeEnumValue (buffer);
         rsType = NR_RS_Type.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("rsType", -1);

      // decode reportInterval

      buffer.getContext().eventDispatcher.startElement("reportInterval", -1);

      {
         int tval = ReportInterval.decodeEnumValue (buffer);
         reportInterval = ReportInterval.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("reportInterval", -1);

      // decode reportAmount

      buffer.getContext().eventDispatcher.startElement("reportAmount", -1);

      {
         int tval = PeriodicalReportConfig_reportAmount.decodeEnumValue (buffer);
         reportAmount = PeriodicalReportConfig_reportAmount.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("reportAmount", -1);

      // decode reportQuantityCell

      buffer.getContext().eventDispatcher.startElement("reportQuantityCell", -1);

      reportQuantityCell = new MeasReportQuantity();
      reportQuantityCell.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("reportQuantityCell", -1);

      // decode maxReportCells

      buffer.getContext().eventDispatcher.startElement("maxReportCells", -1);

      maxReportCells = new Asn1Integer();
      maxReportCells.decode (buffer, 1, 8);

      buffer.invokeCharacters(maxReportCells.toString());
      buffer.getContext().eventDispatcher.endElement("maxReportCells", -1);

      // decode reportQuantityRS_Indexes

      if (reportQuantityRS_IndexesPresent) {
         buffer.getContext().eventDispatcher.startElement("reportQuantityRS_Indexes", -1);

         reportQuantityRS_Indexes = new MeasReportQuantity();
         reportQuantityRS_Indexes.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("reportQuantityRS_Indexes", -1);
      }
      else {
         reportQuantityRS_Indexes = null;
      }

      // decode maxNrofRS_IndexesToReport

      if (maxNrofRS_IndexesToReportPresent) {
         buffer.getContext().eventDispatcher.startElement("maxNrofRS_IndexesToReport", -1);

         maxNrofRS_IndexesToReport = new Asn1Integer();
         maxNrofRS_IndexesToReport.decode (buffer, 1, 32);

         buffer.invokeCharacters(maxNrofRS_IndexesToReport.toString());
         buffer.getContext().eventDispatcher.endElement("maxNrofRS_IndexesToReport", -1);
      }
      else {
         maxNrofRS_IndexesToReport = null;
      }

      // decode includeBeamMeasurements

      buffer.getContext().eventDispatcher.startElement("includeBeamMeasurements", -1);

      includeBeamMeasurements = new Asn1Boolean();
      includeBeamMeasurements.decode (buffer);

      buffer.invokeCharacters(includeBeamMeasurements.toString());
      buffer.getContext().eventDispatcher.endElement("includeBeamMeasurements", -1);

      // decode useWhiteCellList

      buffer.getContext().eventDispatcher.startElement("useWhiteCellList", -1);

      useWhiteCellList = new Asn1Boolean();
      useWhiteCellList.decode (buffer);

      buffer.invokeCharacters(useWhiteCellList.toString());
      buffer.getContext().eventDispatcher.endElement("useWhiteCellList", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean measRSSI_ReportConfig_r16Present = buffer.decodeBit ("measRSSI_ReportConfig_r16Present");

            boolean includeCommonLocationInfo_r16Present = buffer.decodeBit ("includeCommonLocationInfo_r16Present");

            boolean includeBT_Meas_r16Present = buffer.decodeBit ("includeBT_Meas_r16Present");

            boolean includeWLAN_Meas_r16Present = buffer.decodeBit ("includeWLAN_Meas_r16Present");

            boolean includeSensor_Meas_r16Present = buffer.decodeBit ("includeSensor_Meas_r16Present");

            boolean ul_DelayValueConfig_r16Present = buffer.decodeBit ("ul_DelayValueConfig_r16Present");

            boolean reportAddNeighMeas_r16Present = buffer.decodeBit ("reportAddNeighMeas_r16Present");

            // decode measRSSI_ReportConfig_r16

            if (measRSSI_ReportConfig_r16Present) {
               buffer.getContext().eventDispatcher.startElement("measRSSI_ReportConfig_r16", -1);

               measRSSI_ReportConfig_r16 = new MeasRSSI_ReportConfig_r16();
               measRSSI_ReportConfig_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("measRSSI_ReportConfig_r16", -1);
            }
            else {
               measRSSI_ReportConfig_r16 = null;
            }

            // decode includeCommonLocationInfo_r16

            if (includeCommonLocationInfo_r16Present) {
               buffer.getContext().eventDispatcher.startElement("includeCommonLocationInfo_r16", -1);

               int tval = PeriodicalReportConfig_includeCommonLocationInfo_r16.decodeEnumValue (buffer);
               includeCommonLocationInfo_r16 = PeriodicalReportConfig_includeCommonLocationInfo_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("includeCommonLocationInfo_r16", -1);
            }
            else {
               includeCommonLocationInfo_r16 = null;
            }

            // decode includeBT_Meas_r16

            if (includeBT_Meas_r16Present) {
               buffer.getContext().eventDispatcher.startElement("includeBT_Meas_r16", -1);

               includeBT_Meas_r16 = new PeriodicalReportConfig_includeBT_Meas_r16();
               includeBT_Meas_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("includeBT_Meas_r16", -1);
            }
            else {
               includeBT_Meas_r16 = null;
            }

            // decode includeWLAN_Meas_r16

            if (includeWLAN_Meas_r16Present) {
               buffer.getContext().eventDispatcher.startElement("includeWLAN_Meas_r16", -1);

               includeWLAN_Meas_r16 = new PeriodicalReportConfig_includeWLAN_Meas_r16();
               includeWLAN_Meas_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("includeWLAN_Meas_r16", -1);
            }
            else {
               includeWLAN_Meas_r16 = null;
            }

            // decode includeSensor_Meas_r16

            if (includeSensor_Meas_r16Present) {
               buffer.getContext().eventDispatcher.startElement("includeSensor_Meas_r16", -1);

               includeSensor_Meas_r16 = new PeriodicalReportConfig_includeSensor_Meas_r16();
               includeSensor_Meas_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("includeSensor_Meas_r16", -1);
            }
            else {
               includeSensor_Meas_r16 = null;
            }

            // decode ul_DelayValueConfig_r16

            if (ul_DelayValueConfig_r16Present) {
               buffer.getContext().eventDispatcher.startElement("ul_DelayValueConfig_r16", -1);

               ul_DelayValueConfig_r16 = new PeriodicalReportConfig_ul_DelayValueConfig_r16();
               ul_DelayValueConfig_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("ul_DelayValueConfig_r16", -1);
            }
            else {
               ul_DelayValueConfig_r16 = null;
            }

            // decode reportAddNeighMeas_r16

            if (reportAddNeighMeas_r16Present) {
               buffer.getContext().eventDispatcher.startElement("reportAddNeighMeas_r16", -1);

               int tval = PeriodicalReportConfig_reportAddNeighMeas_r16.decodeEnumValue (buffer);
               reportAddNeighMeas_r16 = PeriodicalReportConfig_reportAddNeighMeas_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("reportAddNeighMeas_r16", -1);
            }
            else {
               reportAddNeighMeas_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (mV2ExtPresent ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((reportQuantityRS_Indexes != null), null);
      buffer.encodeBit ((maxNrofRS_IndexesToReport != null), null);

      // encode rsType

      if (rsType != null) {
         buffer.getContext().eventDispatcher.startElement("rsType", -1);

         rsType.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("rsType", -1);
      }
      else throw new Asn1MissingRequiredException ("rsType");

      // encode reportInterval

      if (reportInterval != null) {
         buffer.getContext().eventDispatcher.startElement("reportInterval", -1);

         reportInterval.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("reportInterval", -1);
      }
      else throw new Asn1MissingRequiredException ("reportInterval");

      // encode reportAmount

      if (reportAmount != null) {
         buffer.getContext().eventDispatcher.startElement("reportAmount", -1);

         reportAmount.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("reportAmount", -1);
      }
      else throw new Asn1MissingRequiredException ("reportAmount");

      // encode reportQuantityCell

      if (reportQuantityCell != null) {
         buffer.getContext().eventDispatcher.startElement("reportQuantityCell", -1);

         reportQuantityCell.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("reportQuantityCell", -1);
      }
      else throw new Asn1MissingRequiredException ("reportQuantityCell");

      // encode maxReportCells

      if (maxReportCells != null) {
         buffer.getContext().eventDispatcher.startElement("maxReportCells", -1);

         maxReportCells.encode (buffer, 1, 8);

         buffer.getContext().eventDispatcher.endElement("maxReportCells", -1);
      }
      else throw new Asn1MissingRequiredException ("maxReportCells");

      // encode reportQuantityRS_Indexes

      if (reportQuantityRS_Indexes != null) {
         buffer.getContext().eventDispatcher.startElement("reportQuantityRS_Indexes", -1);

         reportQuantityRS_Indexes.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("reportQuantityRS_Indexes", -1);
      }

      // encode maxNrofRS_IndexesToReport

      if (maxNrofRS_IndexesToReport != null) {
         buffer.getContext().eventDispatcher.startElement("maxNrofRS_IndexesToReport", -1);

         maxNrofRS_IndexesToReport.encode (buffer, 1, 32);

         buffer.getContext().eventDispatcher.endElement("maxNrofRS_IndexesToReport", -1);
      }

      // encode includeBeamMeasurements

      if (includeBeamMeasurements != null) {
         buffer.getContext().eventDispatcher.startElement("includeBeamMeasurements", -1);

         includeBeamMeasurements.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("includeBeamMeasurements", -1);
      }
      else throw new Asn1MissingRequiredException ("includeBeamMeasurements");

      // encode useWhiteCellList

      if (useWhiteCellList != null) {
         buffer.getContext().eventDispatcher.startElement("useWhiteCellList", -1);

         useWhiteCellList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("useWhiteCellList", -1);
      }
      else throw new Asn1MissingRequiredException ("useWhiteCellList");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 1;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit (mV2ExtPresent, null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         if (mV2ExtPresent) {
            buffer.reset();
            buffer.encodeBit ((measRSSI_ReportConfig_r16 != null), "optbit");
            buffer.encodeBit ((includeCommonLocationInfo_r16 != null), "optbit");
            buffer.encodeBit ((includeBT_Meas_r16 != null), "optbit");
            buffer.encodeBit ((includeWLAN_Meas_r16 != null), "optbit");
            buffer.encodeBit ((includeSensor_Meas_r16 != null), "optbit");
            buffer.encodeBit ((ul_DelayValueConfig_r16 != null), "optbit");
            buffer.encodeBit ((reportAddNeighMeas_r16 != null), "optbit");
            if (measRSSI_ReportConfig_r16 != null) {
               measRSSI_ReportConfig_r16.encode (buffer);
            }
            if (includeCommonLocationInfo_r16 != null) {
               includeCommonLocationInfo_r16.encode (buffer);
            }
            if (includeBT_Meas_r16 != null) {
               includeBT_Meas_r16.encode (buffer);
            }
            if (includeWLAN_Meas_r16 != null) {
               includeWLAN_Meas_r16.encode (buffer);
            }
            if (includeSensor_Meas_r16 != null) {
               includeSensor_Meas_r16.encode (buffer);
            }
            if (ul_DelayValueConfig_r16 != null) {
               ul_DelayValueConfig_r16.encode (buffer);
            }
            if (reportAddNeighMeas_r16 != null) {
               reportAddNeighMeas_r16.encode (buffer);
            }
            mainBuffer.encodeOpenType (buffer, null);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (rsType != null) rsType.print (_sb, "rsType", _level+1);
      if (reportInterval != null) reportInterval.print (_sb, "reportInterval", _level+1);
      if (reportAmount != null) reportAmount.print (_sb, "reportAmount", _level+1);
      if (reportQuantityCell != null) reportQuantityCell.print (_sb, "reportQuantityCell", _level+1);
      if (maxReportCells != null) maxReportCells.print (_sb, "maxReportCells", _level+1);
      if (reportQuantityRS_Indexes != null) reportQuantityRS_Indexes.print (_sb, "reportQuantityRS_Indexes", _level+1);
      if (maxNrofRS_IndexesToReport != null) maxNrofRS_IndexesToReport.print (_sb, "maxNrofRS_IndexesToReport", _level+1);
      if (includeBeamMeasurements != null) includeBeamMeasurements.print (_sb, "includeBeamMeasurements", _level+1);
      if (useWhiteCellList != null) useWhiteCellList.print (_sb, "useWhiteCellList", _level+1);
      if (measRSSI_ReportConfig_r16 != null) measRSSI_ReportConfig_r16.print (_sb, "measRSSI_ReportConfig_r16", _level+1);
      if (includeCommonLocationInfo_r16 != null) includeCommonLocationInfo_r16.print (_sb, "includeCommonLocationInfo_r16", _level+1);
      if (includeBT_Meas_r16 != null) includeBT_Meas_r16.print (_sb, "includeBT_Meas_r16", _level+1);
      if (includeWLAN_Meas_r16 != null) includeWLAN_Meas_r16.print (_sb, "includeWLAN_Meas_r16", _level+1);
      if (includeSensor_Meas_r16 != null) includeSensor_Meas_r16.print (_sb, "includeSensor_Meas_r16", _level+1);
      if (ul_DelayValueConfig_r16 != null) ul_DelayValueConfig_r16.print (_sb, "ul_DelayValueConfig_r16", _level+1);
      if (reportAddNeighMeas_r16 != null) reportAddNeighMeas_r16.print (_sb, "reportAddNeighMeas_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
