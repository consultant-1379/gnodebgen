/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_InterNodeDefinitions;

import com.objsys.asn1j.runtime.*;

public class CG_ConfigInfo_v1540_IEs extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_InterNodeDefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CG-ConfigInfo-v1540-IEs";
   }

   public PH_TypeListMCG ph_InfoMCG;  // optional
   public CG_ConfigInfo_v1540_IEs_measResultReportCGI measResultReportCGI;  // optional
   public CG_ConfigInfo_v1560_IEs nonCriticalExtension;  // optional

   public CG_ConfigInfo_v1540_IEs () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CG_ConfigInfo_v1540_IEs (
      PH_TypeListMCG ph_InfoMCG_,
      CG_ConfigInfo_v1540_IEs_measResultReportCGI measResultReportCGI_,
      CG_ConfigInfo_v1560_IEs nonCriticalExtension_
   ) {
      super();
      ph_InfoMCG = ph_InfoMCG_;
      measResultReportCGI = measResultReportCGI_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   public void init () {
      ph_InfoMCG = null;
      measResultReportCGI = null;
      nonCriticalExtension = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return ph_InfoMCG;
         case 1: return measResultReportCGI;
         case 2: return nonCriticalExtension;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "ph-InfoMCG";
         case 1: return "measResultReportCGI";
         case 2: return "nonCriticalExtension";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean ph_InfoMCGPresent = buffer.decodeBit ("ph_InfoMCGPresent");
      boolean measResultReportCGIPresent = buffer.decodeBit ("measResultReportCGIPresent");
      boolean nonCriticalExtensionPresent = buffer.decodeBit ("nonCriticalExtensionPresent");

      // decode ph_InfoMCG

      if (ph_InfoMCGPresent) {
         buffer.getContext().eventDispatcher.startElement("ph_InfoMCG", -1);

         ph_InfoMCG = new PH_TypeListMCG();
         ph_InfoMCG.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ph_InfoMCG", -1);
      }
      else {
         ph_InfoMCG = null;
      }

      // decode measResultReportCGI

      if (measResultReportCGIPresent) {
         buffer.getContext().eventDispatcher.startElement("measResultReportCGI", -1);

         measResultReportCGI = new CG_ConfigInfo_v1540_IEs_measResultReportCGI();
         measResultReportCGI.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("measResultReportCGI", -1);
      }
      else {
         measResultReportCGI = null;
      }

      // decode nonCriticalExtension

      if (nonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension = new CG_ConfigInfo_v1560_IEs();
         nonCriticalExtension.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }
      else {
         nonCriticalExtension = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((ph_InfoMCG != null), null);
      buffer.encodeBit ((measResultReportCGI != null), null);
      buffer.encodeBit ((nonCriticalExtension != null), null);

      // encode ph_InfoMCG

      if (ph_InfoMCG != null) {
         buffer.getContext().eventDispatcher.startElement("ph_InfoMCG", -1);

         ph_InfoMCG.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ph_InfoMCG", -1);
      }

      // encode measResultReportCGI

      if (measResultReportCGI != null) {
         buffer.getContext().eventDispatcher.startElement("measResultReportCGI", -1);

         measResultReportCGI.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("measResultReportCGI", -1);
      }

      // encode nonCriticalExtension

      if (nonCriticalExtension != null) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (ph_InfoMCG != null) ph_InfoMCG.print (_sb, "ph_InfoMCG", _level+1);
      if (measResultReportCGI != null) measResultReportCGI.print (_sb, "measResultReportCGI", _level+1);
      if (nonCriticalExtension != null) nonCriticalExtension.print (_sb, "nonCriticalExtension", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
