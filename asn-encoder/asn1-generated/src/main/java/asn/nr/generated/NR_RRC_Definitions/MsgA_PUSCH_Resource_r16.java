/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MsgA_PUSCH_Resource_r16 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "MsgA-PUSCH-Resource-r16";
   }

   public Asn1Integer msgA_MCS_r16;
   public Asn1Integer nrofSlotsMsgA_PUSCH_r16;
   public MsgA_PUSCH_Resource_r16_nrofMsgA_PO_PerSlot_r16 nrofMsgA_PO_PerSlot_r16 = null;
   public Asn1Integer msgA_PUSCH_TimeDomainOffset_r16;
   public Asn1Integer msgA_PUSCH_TimeDomainAllocation_r16;  // optional
   public Asn1Integer startSymbolAndLengthMsgA_PO_r16;  // optional
   public MsgA_PUSCH_Resource_r16_mappingTypeMsgA_PUSCH_r16 mappingTypeMsgA_PUSCH_r16 = null;  // optional
   public Asn1Integer guardPeriodMsgA_PUSCH_r16;  // optional
   public Asn1Integer guardBandMsgA_PUSCH_r16;
   public Asn1Integer frequencyStartMsgA_PUSCH_r16;
   public Asn1Integer nrofPRBs_PerMsgA_PO_r16;
   public MsgA_PUSCH_Resource_r16_nrofMsgA_PO_FDM_r16 nrofMsgA_PO_FDM_r16 = null;
   public MsgA_PUSCH_Resource_r16_msgA_IntraSlotFrequencyHopping_r16 msgA_IntraSlotFrequencyHopping_r16 = null;  // optional
   public Asn1BitString msgA_HoppingBits_r16;  // optional
   public MsgA_DMRS_Config_r16 msgA_DMRS_Config_r16;
   public Asn1Integer nrofDMRS_Sequences_r16;
   public MsgA_PUSCH_Resource_r16_msgA_Alpha_r16 msgA_Alpha_r16 = null;  // optional
   public Asn1Integer interlaceIndexFirstPO_MsgA_PUSCH_r16;  // optional
   public Asn1Integer nrofInterlacesPerMsgA_PO_r16;  // optional
   public Asn1OpenExt extElem1;

   public MsgA_PUSCH_Resource_r16 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MsgA_PUSCH_Resource_r16 (
      Asn1Integer msgA_MCS_r16_,
      Asn1Integer nrofSlotsMsgA_PUSCH_r16_,
      MsgA_PUSCH_Resource_r16_nrofMsgA_PO_PerSlot_r16 nrofMsgA_PO_PerSlot_r16_,
      Asn1Integer msgA_PUSCH_TimeDomainOffset_r16_,
      Asn1Integer msgA_PUSCH_TimeDomainAllocation_r16_,
      Asn1Integer startSymbolAndLengthMsgA_PO_r16_,
      MsgA_PUSCH_Resource_r16_mappingTypeMsgA_PUSCH_r16 mappingTypeMsgA_PUSCH_r16_,
      Asn1Integer guardPeriodMsgA_PUSCH_r16_,
      Asn1Integer guardBandMsgA_PUSCH_r16_,
      Asn1Integer frequencyStartMsgA_PUSCH_r16_,
      Asn1Integer nrofPRBs_PerMsgA_PO_r16_,
      MsgA_PUSCH_Resource_r16_nrofMsgA_PO_FDM_r16 nrofMsgA_PO_FDM_r16_,
      MsgA_PUSCH_Resource_r16_msgA_IntraSlotFrequencyHopping_r16 msgA_IntraSlotFrequencyHopping_r16_,
      Asn1BitString msgA_HoppingBits_r16_,
      MsgA_DMRS_Config_r16 msgA_DMRS_Config_r16_,
      Asn1Integer nrofDMRS_Sequences_r16_,
      MsgA_PUSCH_Resource_r16_msgA_Alpha_r16 msgA_Alpha_r16_,
      Asn1Integer interlaceIndexFirstPO_MsgA_PUSCH_r16_,
      Asn1Integer nrofInterlacesPerMsgA_PO_r16_
   ) {
      super();
      msgA_MCS_r16 = msgA_MCS_r16_;
      nrofSlotsMsgA_PUSCH_r16 = nrofSlotsMsgA_PUSCH_r16_;
      nrofMsgA_PO_PerSlot_r16 = nrofMsgA_PO_PerSlot_r16_;
      msgA_PUSCH_TimeDomainOffset_r16 = msgA_PUSCH_TimeDomainOffset_r16_;
      msgA_PUSCH_TimeDomainAllocation_r16 = msgA_PUSCH_TimeDomainAllocation_r16_;
      startSymbolAndLengthMsgA_PO_r16 = startSymbolAndLengthMsgA_PO_r16_;
      mappingTypeMsgA_PUSCH_r16 = mappingTypeMsgA_PUSCH_r16_;
      guardPeriodMsgA_PUSCH_r16 = guardPeriodMsgA_PUSCH_r16_;
      guardBandMsgA_PUSCH_r16 = guardBandMsgA_PUSCH_r16_;
      frequencyStartMsgA_PUSCH_r16 = frequencyStartMsgA_PUSCH_r16_;
      nrofPRBs_PerMsgA_PO_r16 = nrofPRBs_PerMsgA_PO_r16_;
      nrofMsgA_PO_FDM_r16 = nrofMsgA_PO_FDM_r16_;
      msgA_IntraSlotFrequencyHopping_r16 = msgA_IntraSlotFrequencyHopping_r16_;
      msgA_HoppingBits_r16 = msgA_HoppingBits_r16_;
      msgA_DMRS_Config_r16 = msgA_DMRS_Config_r16_;
      nrofDMRS_Sequences_r16 = nrofDMRS_Sequences_r16_;
      msgA_Alpha_r16 = msgA_Alpha_r16_;
      interlaceIndexFirstPO_MsgA_PUSCH_r16 = interlaceIndexFirstPO_MsgA_PUSCH_r16_;
      nrofInterlacesPerMsgA_PO_r16 = nrofInterlacesPerMsgA_PO_r16_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public MsgA_PUSCH_Resource_r16 (
      Asn1Integer msgA_MCS_r16_,
      Asn1Integer nrofSlotsMsgA_PUSCH_r16_,
      MsgA_PUSCH_Resource_r16_nrofMsgA_PO_PerSlot_r16 nrofMsgA_PO_PerSlot_r16_,
      Asn1Integer msgA_PUSCH_TimeDomainOffset_r16_,
      Asn1Integer guardBandMsgA_PUSCH_r16_,
      Asn1Integer frequencyStartMsgA_PUSCH_r16_,
      Asn1Integer nrofPRBs_PerMsgA_PO_r16_,
      MsgA_PUSCH_Resource_r16_nrofMsgA_PO_FDM_r16 nrofMsgA_PO_FDM_r16_,
      MsgA_DMRS_Config_r16 msgA_DMRS_Config_r16_,
      Asn1Integer nrofDMRS_Sequences_r16_
   ) {
      super();
      msgA_MCS_r16 = msgA_MCS_r16_;
      nrofSlotsMsgA_PUSCH_r16 = nrofSlotsMsgA_PUSCH_r16_;
      nrofMsgA_PO_PerSlot_r16 = nrofMsgA_PO_PerSlot_r16_;
      msgA_PUSCH_TimeDomainOffset_r16 = msgA_PUSCH_TimeDomainOffset_r16_;
      guardBandMsgA_PUSCH_r16 = guardBandMsgA_PUSCH_r16_;
      frequencyStartMsgA_PUSCH_r16 = frequencyStartMsgA_PUSCH_r16_;
      nrofPRBs_PerMsgA_PO_r16 = nrofPRBs_PerMsgA_PO_r16_;
      nrofMsgA_PO_FDM_r16 = nrofMsgA_PO_FDM_r16_;
      msgA_DMRS_Config_r16 = msgA_DMRS_Config_r16_;
      nrofDMRS_Sequences_r16 = nrofDMRS_Sequences_r16_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public MsgA_PUSCH_Resource_r16 (long msgA_MCS_r16_,
      long nrofSlotsMsgA_PUSCH_r16_,
      MsgA_PUSCH_Resource_r16_nrofMsgA_PO_PerSlot_r16 nrofMsgA_PO_PerSlot_r16_,
      long msgA_PUSCH_TimeDomainOffset_r16_,
      long msgA_PUSCH_TimeDomainAllocation_r16_,
      long startSymbolAndLengthMsgA_PO_r16_,
      MsgA_PUSCH_Resource_r16_mappingTypeMsgA_PUSCH_r16 mappingTypeMsgA_PUSCH_r16_,
      long guardPeriodMsgA_PUSCH_r16_,
      long guardBandMsgA_PUSCH_r16_,
      long frequencyStartMsgA_PUSCH_r16_,
      long nrofPRBs_PerMsgA_PO_r16_,
      MsgA_PUSCH_Resource_r16_nrofMsgA_PO_FDM_r16 nrofMsgA_PO_FDM_r16_,
      MsgA_PUSCH_Resource_r16_msgA_IntraSlotFrequencyHopping_r16 msgA_IntraSlotFrequencyHopping_r16_,
      Asn1BitString msgA_HoppingBits_r16_,
      MsgA_DMRS_Config_r16 msgA_DMRS_Config_r16_,
      long nrofDMRS_Sequences_r16_,
      MsgA_PUSCH_Resource_r16_msgA_Alpha_r16 msgA_Alpha_r16_,
      long interlaceIndexFirstPO_MsgA_PUSCH_r16_,
      long nrofInterlacesPerMsgA_PO_r16_
   ) {
      super();
      msgA_MCS_r16 = new Asn1Integer (msgA_MCS_r16_);
      nrofSlotsMsgA_PUSCH_r16 = new Asn1Integer (nrofSlotsMsgA_PUSCH_r16_);
      nrofMsgA_PO_PerSlot_r16 = nrofMsgA_PO_PerSlot_r16_;
      msgA_PUSCH_TimeDomainOffset_r16 = new Asn1Integer (msgA_PUSCH_TimeDomainOffset_r16_);
      msgA_PUSCH_TimeDomainAllocation_r16 = new Asn1Integer (msgA_PUSCH_TimeDomainAllocation_r16_);
      startSymbolAndLengthMsgA_PO_r16 = new Asn1Integer (startSymbolAndLengthMsgA_PO_r16_);
      mappingTypeMsgA_PUSCH_r16 = mappingTypeMsgA_PUSCH_r16_;
      guardPeriodMsgA_PUSCH_r16 = new Asn1Integer (guardPeriodMsgA_PUSCH_r16_);
      guardBandMsgA_PUSCH_r16 = new Asn1Integer (guardBandMsgA_PUSCH_r16_);
      frequencyStartMsgA_PUSCH_r16 = new Asn1Integer (frequencyStartMsgA_PUSCH_r16_);
      nrofPRBs_PerMsgA_PO_r16 = new Asn1Integer (nrofPRBs_PerMsgA_PO_r16_);
      nrofMsgA_PO_FDM_r16 = nrofMsgA_PO_FDM_r16_;
      msgA_IntraSlotFrequencyHopping_r16 = msgA_IntraSlotFrequencyHopping_r16_;
      msgA_HoppingBits_r16 = msgA_HoppingBits_r16_;
      msgA_DMRS_Config_r16 = msgA_DMRS_Config_r16_;
      nrofDMRS_Sequences_r16 = new Asn1Integer (nrofDMRS_Sequences_r16_);
      msgA_Alpha_r16 = msgA_Alpha_r16_;
      interlaceIndexFirstPO_MsgA_PUSCH_r16 = new Asn1Integer (interlaceIndexFirstPO_MsgA_PUSCH_r16_);
      nrofInterlacesPerMsgA_PO_r16 = new Asn1Integer (nrofInterlacesPerMsgA_PO_r16_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public MsgA_PUSCH_Resource_r16 (
      long msgA_MCS_r16_,
      long nrofSlotsMsgA_PUSCH_r16_,
      MsgA_PUSCH_Resource_r16_nrofMsgA_PO_PerSlot_r16 nrofMsgA_PO_PerSlot_r16_,
      long msgA_PUSCH_TimeDomainOffset_r16_,
      long guardBandMsgA_PUSCH_r16_,
      long frequencyStartMsgA_PUSCH_r16_,
      long nrofPRBs_PerMsgA_PO_r16_,
      MsgA_PUSCH_Resource_r16_nrofMsgA_PO_FDM_r16 nrofMsgA_PO_FDM_r16_,
      MsgA_DMRS_Config_r16 msgA_DMRS_Config_r16_,
      long nrofDMRS_Sequences_r16_
   ) {
      super();
      msgA_MCS_r16 = new Asn1Integer (msgA_MCS_r16_);
      nrofSlotsMsgA_PUSCH_r16 = new Asn1Integer (nrofSlotsMsgA_PUSCH_r16_);
      nrofMsgA_PO_PerSlot_r16 = nrofMsgA_PO_PerSlot_r16_;
      msgA_PUSCH_TimeDomainOffset_r16 = new Asn1Integer (msgA_PUSCH_TimeDomainOffset_r16_);
      guardBandMsgA_PUSCH_r16 = new Asn1Integer (guardBandMsgA_PUSCH_r16_);
      frequencyStartMsgA_PUSCH_r16 = new Asn1Integer (frequencyStartMsgA_PUSCH_r16_);
      nrofPRBs_PerMsgA_PO_r16 = new Asn1Integer (nrofPRBs_PerMsgA_PO_r16_);
      nrofMsgA_PO_FDM_r16 = nrofMsgA_PO_FDM_r16_;
      msgA_DMRS_Config_r16 = msgA_DMRS_Config_r16_;
      nrofDMRS_Sequences_r16 = new Asn1Integer (nrofDMRS_Sequences_r16_);
   }

   public void init () {
      msgA_MCS_r16 = null;
      nrofSlotsMsgA_PUSCH_r16 = null;
      nrofMsgA_PO_PerSlot_r16 = null;
      msgA_PUSCH_TimeDomainOffset_r16 = null;
      msgA_PUSCH_TimeDomainAllocation_r16 = null;
      startSymbolAndLengthMsgA_PO_r16 = null;
      mappingTypeMsgA_PUSCH_r16 = null;
      guardPeriodMsgA_PUSCH_r16 = null;
      guardBandMsgA_PUSCH_r16 = null;
      frequencyStartMsgA_PUSCH_r16 = null;
      nrofPRBs_PerMsgA_PO_r16 = null;
      nrofMsgA_PO_FDM_r16 = null;
      msgA_IntraSlotFrequencyHopping_r16 = null;
      msgA_HoppingBits_r16 = null;
      msgA_DMRS_Config_r16 = null;
      nrofDMRS_Sequences_r16 = null;
      msgA_Alpha_r16 = null;
      interlaceIndexFirstPO_MsgA_PUSCH_r16 = null;
      nrofInterlacesPerMsgA_PO_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 20; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return msgA_MCS_r16;
         case 1: return nrofSlotsMsgA_PUSCH_r16;
         case 2: return nrofMsgA_PO_PerSlot_r16;
         case 3: return msgA_PUSCH_TimeDomainOffset_r16;
         case 4: return msgA_PUSCH_TimeDomainAllocation_r16;
         case 5: return startSymbolAndLengthMsgA_PO_r16;
         case 6: return mappingTypeMsgA_PUSCH_r16;
         case 7: return guardPeriodMsgA_PUSCH_r16;
         case 8: return guardBandMsgA_PUSCH_r16;
         case 9: return frequencyStartMsgA_PUSCH_r16;
         case 10: return nrofPRBs_PerMsgA_PO_r16;
         case 11: return nrofMsgA_PO_FDM_r16;
         case 12: return msgA_IntraSlotFrequencyHopping_r16;
         case 13: return msgA_HoppingBits_r16;
         case 14: return msgA_DMRS_Config_r16;
         case 15: return nrofDMRS_Sequences_r16;
         case 16: return msgA_Alpha_r16;
         case 17: return interlaceIndexFirstPO_MsgA_PUSCH_r16;
         case 18: return nrofInterlacesPerMsgA_PO_r16;
         case 19: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "msgA-MCS-r16";
         case 1: return "nrofSlotsMsgA-PUSCH-r16";
         case 2: return "nrofMsgA-PO-PerSlot-r16";
         case 3: return "msgA-PUSCH-TimeDomainOffset-r16";
         case 4: return "msgA-PUSCH-TimeDomainAllocation-r16";
         case 5: return "startSymbolAndLengthMsgA-PO-r16";
         case 6: return "mappingTypeMsgA-PUSCH-r16";
         case 7: return "guardPeriodMsgA-PUSCH-r16";
         case 8: return "guardBandMsgA-PUSCH-r16";
         case 9: return "frequencyStartMsgA-PUSCH-r16";
         case 10: return "nrofPRBs-PerMsgA-PO-r16";
         case 11: return "nrofMsgA-PO-FDM-r16";
         case 12: return "msgA-IntraSlotFrequencyHopping-r16";
         case 13: return "msgA-HoppingBits-r16";
         case 14: return "msgA-DMRS-Config-r16";
         case 15: return "nrofDMRS-Sequences-r16";
         case 16: return "msgA-Alpha-r16";
         case 17: return "interlaceIndexFirstPO-MsgA-PUSCH-r16";
         case 18: return "nrofInterlacesPerMsgA-PO-r16";
         case 19: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean msgA_PUSCH_TimeDomainAllocation_r16Present = buffer.decodeBit ("msgA_PUSCH_TimeDomainAllocation_r16Present");
      boolean startSymbolAndLengthMsgA_PO_r16Present = buffer.decodeBit ("startSymbolAndLengthMsgA_PO_r16Present");
      boolean mappingTypeMsgA_PUSCH_r16Present = buffer.decodeBit ("mappingTypeMsgA_PUSCH_r16Present");
      boolean guardPeriodMsgA_PUSCH_r16Present = buffer.decodeBit ("guardPeriodMsgA_PUSCH_r16Present");
      boolean msgA_IntraSlotFrequencyHopping_r16Present = buffer.decodeBit ("msgA_IntraSlotFrequencyHopping_r16Present");
      boolean msgA_HoppingBits_r16Present = buffer.decodeBit ("msgA_HoppingBits_r16Present");
      boolean msgA_Alpha_r16Present = buffer.decodeBit ("msgA_Alpha_r16Present");
      boolean interlaceIndexFirstPO_MsgA_PUSCH_r16Present = buffer.decodeBit ("interlaceIndexFirstPO_MsgA_PUSCH_r16Present");
      boolean nrofInterlacesPerMsgA_PO_r16Present = buffer.decodeBit ("nrofInterlacesPerMsgA_PO_r16Present");

      // decode msgA_MCS_r16

      buffer.getContext().eventDispatcher.startElement("msgA_MCS_r16", -1);

      msgA_MCS_r16 = new Asn1Integer();
      msgA_MCS_r16.decode (buffer, 0, 15);

      buffer.invokeCharacters(msgA_MCS_r16.toString());
      buffer.getContext().eventDispatcher.endElement("msgA_MCS_r16", -1);

      // decode nrofSlotsMsgA_PUSCH_r16

      buffer.getContext().eventDispatcher.startElement("nrofSlotsMsgA_PUSCH_r16", -1);

      nrofSlotsMsgA_PUSCH_r16 = new Asn1Integer();
      nrofSlotsMsgA_PUSCH_r16.decode (buffer, 1, 4);

      buffer.invokeCharacters(nrofSlotsMsgA_PUSCH_r16.toString());
      buffer.getContext().eventDispatcher.endElement("nrofSlotsMsgA_PUSCH_r16", -1);

      // decode nrofMsgA_PO_PerSlot_r16

      buffer.getContext().eventDispatcher.startElement("nrofMsgA_PO_PerSlot_r16", -1);

      {
         int tval = MsgA_PUSCH_Resource_r16_nrofMsgA_PO_PerSlot_r16.decodeEnumValue (buffer);
         nrofMsgA_PO_PerSlot_r16 = MsgA_PUSCH_Resource_r16_nrofMsgA_PO_PerSlot_r16.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("nrofMsgA_PO_PerSlot_r16", -1);

      // decode msgA_PUSCH_TimeDomainOffset_r16

      buffer.getContext().eventDispatcher.startElement("msgA_PUSCH_TimeDomainOffset_r16", -1);

      msgA_PUSCH_TimeDomainOffset_r16 = new Asn1Integer();
      msgA_PUSCH_TimeDomainOffset_r16.decode (buffer, 1, 32);

      buffer.invokeCharacters(msgA_PUSCH_TimeDomainOffset_r16.toString());
      buffer.getContext().eventDispatcher.endElement("msgA_PUSCH_TimeDomainOffset_r16", -1);

      // decode msgA_PUSCH_TimeDomainAllocation_r16

      if (msgA_PUSCH_TimeDomainAllocation_r16Present) {
         buffer.getContext().eventDispatcher.startElement("msgA_PUSCH_TimeDomainAllocation_r16", -1);

         msgA_PUSCH_TimeDomainAllocation_r16 = new Asn1Integer();
         msgA_PUSCH_TimeDomainAllocation_r16.decode (buffer, 1, 16);

         buffer.invokeCharacters(msgA_PUSCH_TimeDomainAllocation_r16.toString());
         buffer.getContext().eventDispatcher.endElement("msgA_PUSCH_TimeDomainAllocation_r16", -1);
      }
      else {
         msgA_PUSCH_TimeDomainAllocation_r16 = null;
      }

      // decode startSymbolAndLengthMsgA_PO_r16

      if (startSymbolAndLengthMsgA_PO_r16Present) {
         buffer.getContext().eventDispatcher.startElement("startSymbolAndLengthMsgA_PO_r16", -1);

         startSymbolAndLengthMsgA_PO_r16 = new Asn1Integer();
         startSymbolAndLengthMsgA_PO_r16.decode (buffer, 0, 127);

         buffer.invokeCharacters(startSymbolAndLengthMsgA_PO_r16.toString());
         buffer.getContext().eventDispatcher.endElement("startSymbolAndLengthMsgA_PO_r16", -1);
      }
      else {
         startSymbolAndLengthMsgA_PO_r16 = null;
      }

      // decode mappingTypeMsgA_PUSCH_r16

      if (mappingTypeMsgA_PUSCH_r16Present) {
         buffer.getContext().eventDispatcher.startElement("mappingTypeMsgA_PUSCH_r16", -1);

         int tval = MsgA_PUSCH_Resource_r16_mappingTypeMsgA_PUSCH_r16.decodeEnumValue (buffer);
         mappingTypeMsgA_PUSCH_r16 = MsgA_PUSCH_Resource_r16_mappingTypeMsgA_PUSCH_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("mappingTypeMsgA_PUSCH_r16", -1);
      }
      else {
         mappingTypeMsgA_PUSCH_r16 = null;
      }

      // decode guardPeriodMsgA_PUSCH_r16

      if (guardPeriodMsgA_PUSCH_r16Present) {
         buffer.getContext().eventDispatcher.startElement("guardPeriodMsgA_PUSCH_r16", -1);

         guardPeriodMsgA_PUSCH_r16 = new Asn1Integer();
         guardPeriodMsgA_PUSCH_r16.decode (buffer, 0, 3);

         buffer.invokeCharacters(guardPeriodMsgA_PUSCH_r16.toString());
         buffer.getContext().eventDispatcher.endElement("guardPeriodMsgA_PUSCH_r16", -1);
      }
      else {
         guardPeriodMsgA_PUSCH_r16 = null;
      }

      // decode guardBandMsgA_PUSCH_r16

      buffer.getContext().eventDispatcher.startElement("guardBandMsgA_PUSCH_r16", -1);

      guardBandMsgA_PUSCH_r16 = new Asn1Integer();
      guardBandMsgA_PUSCH_r16.decode (buffer, 0, 1);

      buffer.invokeCharacters(guardBandMsgA_PUSCH_r16.toString());
      buffer.getContext().eventDispatcher.endElement("guardBandMsgA_PUSCH_r16", -1);

      // decode frequencyStartMsgA_PUSCH_r16

      buffer.getContext().eventDispatcher.startElement("frequencyStartMsgA_PUSCH_r16", -1);

      frequencyStartMsgA_PUSCH_r16 = new Asn1Integer();
      frequencyStartMsgA_PUSCH_r16.decode (buffer, 0, 274);

      buffer.invokeCharacters(frequencyStartMsgA_PUSCH_r16.toString());
      buffer.getContext().eventDispatcher.endElement("frequencyStartMsgA_PUSCH_r16", -1);

      // decode nrofPRBs_PerMsgA_PO_r16

      buffer.getContext().eventDispatcher.startElement("nrofPRBs_PerMsgA_PO_r16", -1);

      nrofPRBs_PerMsgA_PO_r16 = new Asn1Integer();
      nrofPRBs_PerMsgA_PO_r16.decode (buffer, 1, 32);

      buffer.invokeCharacters(nrofPRBs_PerMsgA_PO_r16.toString());
      buffer.getContext().eventDispatcher.endElement("nrofPRBs_PerMsgA_PO_r16", -1);

      // decode nrofMsgA_PO_FDM_r16

      buffer.getContext().eventDispatcher.startElement("nrofMsgA_PO_FDM_r16", -1);

      {
         int tval = MsgA_PUSCH_Resource_r16_nrofMsgA_PO_FDM_r16.decodeEnumValue (buffer);
         nrofMsgA_PO_FDM_r16 = MsgA_PUSCH_Resource_r16_nrofMsgA_PO_FDM_r16.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("nrofMsgA_PO_FDM_r16", -1);

      // decode msgA_IntraSlotFrequencyHopping_r16

      if (msgA_IntraSlotFrequencyHopping_r16Present) {
         buffer.getContext().eventDispatcher.startElement("msgA_IntraSlotFrequencyHopping_r16", -1);

         int tval = MsgA_PUSCH_Resource_r16_msgA_IntraSlotFrequencyHopping_r16.decodeEnumValue (buffer);
         msgA_IntraSlotFrequencyHopping_r16 = MsgA_PUSCH_Resource_r16_msgA_IntraSlotFrequencyHopping_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("msgA_IntraSlotFrequencyHopping_r16", -1);
      }
      else {
         msgA_IntraSlotFrequencyHopping_r16 = null;
      }

      // decode msgA_HoppingBits_r16

      if (msgA_HoppingBits_r16Present) {
         buffer.getContext().eventDispatcher.startElement("msgA_HoppingBits_r16", -1);

         msgA_HoppingBits_r16 = new Asn1BitString();
         msgA_HoppingBits_r16.decode (buffer, 2, 2);

         buffer.invokeCharacters(msgA_HoppingBits_r16.toString());
         buffer.getContext().eventDispatcher.endElement("msgA_HoppingBits_r16", -1);
      }
      else {
         msgA_HoppingBits_r16 = null;
      }

      // decode msgA_DMRS_Config_r16

      buffer.getContext().eventDispatcher.startElement("msgA_DMRS_Config_r16", -1);

      msgA_DMRS_Config_r16 = new MsgA_DMRS_Config_r16();
      msgA_DMRS_Config_r16.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("msgA_DMRS_Config_r16", -1);

      // decode nrofDMRS_Sequences_r16

      buffer.getContext().eventDispatcher.startElement("nrofDMRS_Sequences_r16", -1);

      nrofDMRS_Sequences_r16 = new Asn1Integer();
      nrofDMRS_Sequences_r16.decode (buffer, 1, 2);

      buffer.invokeCharacters(nrofDMRS_Sequences_r16.toString());
      buffer.getContext().eventDispatcher.endElement("nrofDMRS_Sequences_r16", -1);

      // decode msgA_Alpha_r16

      if (msgA_Alpha_r16Present) {
         buffer.getContext().eventDispatcher.startElement("msgA_Alpha_r16", -1);

         int tval = MsgA_PUSCH_Resource_r16_msgA_Alpha_r16.decodeEnumValue (buffer);
         msgA_Alpha_r16 = MsgA_PUSCH_Resource_r16_msgA_Alpha_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("msgA_Alpha_r16", -1);
      }
      else {
         msgA_Alpha_r16 = null;
      }

      // decode interlaceIndexFirstPO_MsgA_PUSCH_r16

      if (interlaceIndexFirstPO_MsgA_PUSCH_r16Present) {
         buffer.getContext().eventDispatcher.startElement("interlaceIndexFirstPO_MsgA_PUSCH_r16", -1);

         interlaceIndexFirstPO_MsgA_PUSCH_r16 = new Asn1Integer();
         interlaceIndexFirstPO_MsgA_PUSCH_r16.decode (buffer, 1, 10);

         buffer.invokeCharacters(interlaceIndexFirstPO_MsgA_PUSCH_r16.toString());
         buffer.getContext().eventDispatcher.endElement("interlaceIndexFirstPO_MsgA_PUSCH_r16", -1);
      }
      else {
         interlaceIndexFirstPO_MsgA_PUSCH_r16 = null;
      }

      // decode nrofInterlacesPerMsgA_PO_r16

      if (nrofInterlacesPerMsgA_PO_r16Present) {
         buffer.getContext().eventDispatcher.startElement("nrofInterlacesPerMsgA_PO_r16", -1);

         nrofInterlacesPerMsgA_PO_r16 = new Asn1Integer();
         nrofInterlacesPerMsgA_PO_r16.decode (buffer, 1, 10);

         buffer.invokeCharacters(nrofInterlacesPerMsgA_PO_r16.toString());
         buffer.getContext().eventDispatcher.endElement("nrofInterlacesPerMsgA_PO_r16", -1);
      }
      else {
         nrofInterlacesPerMsgA_PO_r16 = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((msgA_PUSCH_TimeDomainAllocation_r16 != null), null);
      buffer.encodeBit ((startSymbolAndLengthMsgA_PO_r16 != null), null);
      buffer.encodeBit ((mappingTypeMsgA_PUSCH_r16 != null), null);
      buffer.encodeBit ((guardPeriodMsgA_PUSCH_r16 != null), null);
      buffer.encodeBit ((msgA_IntraSlotFrequencyHopping_r16 != null), null);
      buffer.encodeBit ((msgA_HoppingBits_r16 != null), null);
      buffer.encodeBit ((msgA_Alpha_r16 != null), null);
      buffer.encodeBit ((interlaceIndexFirstPO_MsgA_PUSCH_r16 != null), null);
      buffer.encodeBit ((nrofInterlacesPerMsgA_PO_r16 != null), null);

      // encode msgA_MCS_r16

      if (msgA_MCS_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("msgA_MCS_r16", -1);

         msgA_MCS_r16.encode (buffer, 0, 15);

         buffer.getContext().eventDispatcher.endElement("msgA_MCS_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("msgA_MCS_r16");

      // encode nrofSlotsMsgA_PUSCH_r16

      if (nrofSlotsMsgA_PUSCH_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("nrofSlotsMsgA_PUSCH_r16", -1);

         nrofSlotsMsgA_PUSCH_r16.encode (buffer, 1, 4);

         buffer.getContext().eventDispatcher.endElement("nrofSlotsMsgA_PUSCH_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("nrofSlotsMsgA_PUSCH_r16");

      // encode nrofMsgA_PO_PerSlot_r16

      if (nrofMsgA_PO_PerSlot_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("nrofMsgA_PO_PerSlot_r16", -1);

         nrofMsgA_PO_PerSlot_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("nrofMsgA_PO_PerSlot_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("nrofMsgA_PO_PerSlot_r16");

      // encode msgA_PUSCH_TimeDomainOffset_r16

      if (msgA_PUSCH_TimeDomainOffset_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("msgA_PUSCH_TimeDomainOffset_r16", -1);

         msgA_PUSCH_TimeDomainOffset_r16.encode (buffer, 1, 32);

         buffer.getContext().eventDispatcher.endElement("msgA_PUSCH_TimeDomainOffset_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("msgA_PUSCH_TimeDomainOffset_r16");

      // encode msgA_PUSCH_TimeDomainAllocation_r16

      if (msgA_PUSCH_TimeDomainAllocation_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("msgA_PUSCH_TimeDomainAllocation_r16", -1);

         msgA_PUSCH_TimeDomainAllocation_r16.encode (buffer, 1, 16);

         buffer.getContext().eventDispatcher.endElement("msgA_PUSCH_TimeDomainAllocation_r16", -1);
      }

      // encode startSymbolAndLengthMsgA_PO_r16

      if (startSymbolAndLengthMsgA_PO_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("startSymbolAndLengthMsgA_PO_r16", -1);

         startSymbolAndLengthMsgA_PO_r16.encode (buffer, 0, 127);

         buffer.getContext().eventDispatcher.endElement("startSymbolAndLengthMsgA_PO_r16", -1);
      }

      // encode mappingTypeMsgA_PUSCH_r16

      if (mappingTypeMsgA_PUSCH_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("mappingTypeMsgA_PUSCH_r16", -1);

         mappingTypeMsgA_PUSCH_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("mappingTypeMsgA_PUSCH_r16", -1);
      }

      // encode guardPeriodMsgA_PUSCH_r16

      if (guardPeriodMsgA_PUSCH_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("guardPeriodMsgA_PUSCH_r16", -1);

         guardPeriodMsgA_PUSCH_r16.encode (buffer, 0, 3);

         buffer.getContext().eventDispatcher.endElement("guardPeriodMsgA_PUSCH_r16", -1);
      }

      // encode guardBandMsgA_PUSCH_r16

      if (guardBandMsgA_PUSCH_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("guardBandMsgA_PUSCH_r16", -1);

         guardBandMsgA_PUSCH_r16.encode (buffer, 0, 1);

         buffer.getContext().eventDispatcher.endElement("guardBandMsgA_PUSCH_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("guardBandMsgA_PUSCH_r16");

      // encode frequencyStartMsgA_PUSCH_r16

      if (frequencyStartMsgA_PUSCH_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("frequencyStartMsgA_PUSCH_r16", -1);

         frequencyStartMsgA_PUSCH_r16.encode (buffer, 0, 274);

         buffer.getContext().eventDispatcher.endElement("frequencyStartMsgA_PUSCH_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("frequencyStartMsgA_PUSCH_r16");

      // encode nrofPRBs_PerMsgA_PO_r16

      if (nrofPRBs_PerMsgA_PO_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("nrofPRBs_PerMsgA_PO_r16", -1);

         nrofPRBs_PerMsgA_PO_r16.encode (buffer, 1, 32);

         buffer.getContext().eventDispatcher.endElement("nrofPRBs_PerMsgA_PO_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("nrofPRBs_PerMsgA_PO_r16");

      // encode nrofMsgA_PO_FDM_r16

      if (nrofMsgA_PO_FDM_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("nrofMsgA_PO_FDM_r16", -1);

         nrofMsgA_PO_FDM_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("nrofMsgA_PO_FDM_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("nrofMsgA_PO_FDM_r16");

      // encode msgA_IntraSlotFrequencyHopping_r16

      if (msgA_IntraSlotFrequencyHopping_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("msgA_IntraSlotFrequencyHopping_r16", -1);

         msgA_IntraSlotFrequencyHopping_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("msgA_IntraSlotFrequencyHopping_r16", -1);
      }

      // encode msgA_HoppingBits_r16

      if (msgA_HoppingBits_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("msgA_HoppingBits_r16", -1);

         msgA_HoppingBits_r16.encode (buffer, 2, 2);

         buffer.getContext().eventDispatcher.endElement("msgA_HoppingBits_r16", -1);
      }

      // encode msgA_DMRS_Config_r16

      if (msgA_DMRS_Config_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("msgA_DMRS_Config_r16", -1);

         msgA_DMRS_Config_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("msgA_DMRS_Config_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("msgA_DMRS_Config_r16");

      // encode nrofDMRS_Sequences_r16

      if (nrofDMRS_Sequences_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("nrofDMRS_Sequences_r16", -1);

         nrofDMRS_Sequences_r16.encode (buffer, 1, 2);

         buffer.getContext().eventDispatcher.endElement("nrofDMRS_Sequences_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("nrofDMRS_Sequences_r16");

      // encode msgA_Alpha_r16

      if (msgA_Alpha_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("msgA_Alpha_r16", -1);

         msgA_Alpha_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("msgA_Alpha_r16", -1);
      }

      // encode interlaceIndexFirstPO_MsgA_PUSCH_r16

      if (interlaceIndexFirstPO_MsgA_PUSCH_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("interlaceIndexFirstPO_MsgA_PUSCH_r16", -1);

         interlaceIndexFirstPO_MsgA_PUSCH_r16.encode (buffer, 1, 10);

         buffer.getContext().eventDispatcher.endElement("interlaceIndexFirstPO_MsgA_PUSCH_r16", -1);
      }

      // encode nrofInterlacesPerMsgA_PO_r16

      if (nrofInterlacesPerMsgA_PO_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("nrofInterlacesPerMsgA_PO_r16", -1);

         nrofInterlacesPerMsgA_PO_r16.encode (buffer, 1, 10);

         buffer.getContext().eventDispatcher.endElement("nrofInterlacesPerMsgA_PO_r16", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 0;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (msgA_MCS_r16 != null) msgA_MCS_r16.print (_sb, "msgA_MCS_r16", _level+1);
      if (nrofSlotsMsgA_PUSCH_r16 != null) nrofSlotsMsgA_PUSCH_r16.print (_sb, "nrofSlotsMsgA_PUSCH_r16", _level+1);
      if (nrofMsgA_PO_PerSlot_r16 != null) nrofMsgA_PO_PerSlot_r16.print (_sb, "nrofMsgA_PO_PerSlot_r16", _level+1);
      if (msgA_PUSCH_TimeDomainOffset_r16 != null) msgA_PUSCH_TimeDomainOffset_r16.print (_sb, "msgA_PUSCH_TimeDomainOffset_r16", _level+1);
      if (msgA_PUSCH_TimeDomainAllocation_r16 != null) msgA_PUSCH_TimeDomainAllocation_r16.print (_sb, "msgA_PUSCH_TimeDomainAllocation_r16", _level+1);
      if (startSymbolAndLengthMsgA_PO_r16 != null) startSymbolAndLengthMsgA_PO_r16.print (_sb, "startSymbolAndLengthMsgA_PO_r16", _level+1);
      if (mappingTypeMsgA_PUSCH_r16 != null) mappingTypeMsgA_PUSCH_r16.print (_sb, "mappingTypeMsgA_PUSCH_r16", _level+1);
      if (guardPeriodMsgA_PUSCH_r16 != null) guardPeriodMsgA_PUSCH_r16.print (_sb, "guardPeriodMsgA_PUSCH_r16", _level+1);
      if (guardBandMsgA_PUSCH_r16 != null) guardBandMsgA_PUSCH_r16.print (_sb, "guardBandMsgA_PUSCH_r16", _level+1);
      if (frequencyStartMsgA_PUSCH_r16 != null) frequencyStartMsgA_PUSCH_r16.print (_sb, "frequencyStartMsgA_PUSCH_r16", _level+1);
      if (nrofPRBs_PerMsgA_PO_r16 != null) nrofPRBs_PerMsgA_PO_r16.print (_sb, "nrofPRBs_PerMsgA_PO_r16", _level+1);
      if (nrofMsgA_PO_FDM_r16 != null) nrofMsgA_PO_FDM_r16.print (_sb, "nrofMsgA_PO_FDM_r16", _level+1);
      if (msgA_IntraSlotFrequencyHopping_r16 != null) msgA_IntraSlotFrequencyHopping_r16.print (_sb, "msgA_IntraSlotFrequencyHopping_r16", _level+1);
      if (msgA_HoppingBits_r16 != null) msgA_HoppingBits_r16.print (_sb, "msgA_HoppingBits_r16", _level+1);
      if (msgA_DMRS_Config_r16 != null) msgA_DMRS_Config_r16.print (_sb, "msgA_DMRS_Config_r16", _level+1);
      if (nrofDMRS_Sequences_r16 != null) nrofDMRS_Sequences_r16.print (_sb, "nrofDMRS_Sequences_r16", _level+1);
      if (msgA_Alpha_r16 != null) msgA_Alpha_r16.print (_sb, "msgA_Alpha_r16", _level+1);
      if (interlaceIndexFirstPO_MsgA_PUSCH_r16 != null) interlaceIndexFirstPO_MsgA_PUSCH_r16.print (_sb, "interlaceIndexFirstPO_MsgA_PUSCH_r16", _level+1);
      if (nrofInterlacesPerMsgA_PO_r16 != null) nrofInterlacesPerMsgA_PO_r16.print (_sb, "nrofInterlacesPerMsgA_PO_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
