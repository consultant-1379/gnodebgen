/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SIB1 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SIB1";
   }

   public SIB1_cellSelectionInfo cellSelectionInfo;  // optional
   public CellAccessRelatedInfo cellAccessRelatedInfo;
   public ConnEstFailureControl connEstFailureControl;  // optional
   public SI_SchedulingInfo si_SchedulingInfo;  // optional
   public ServingCellConfigCommonSIB servingCellConfigCommon;  // optional
   public SIB1_ims_EmergencySupport ims_EmergencySupport = null;  // optional
   public SIB1_eCallOverIMS_Support eCallOverIMS_Support = null;  // optional
   public UE_TimersAndConstants ue_TimersAndConstants;  // optional
   public SIB1_uac_BarringInfo uac_BarringInfo;  // optional
   public SIB1_useFullResumeID useFullResumeID = null;  // optional
   public Asn1OctetString lateNonCriticalExtension;  // optional
   public SIB1_v1610_IEs nonCriticalExtension;  // optional

   public SIB1 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SIB1 (
      SIB1_cellSelectionInfo cellSelectionInfo_,
      CellAccessRelatedInfo cellAccessRelatedInfo_,
      ConnEstFailureControl connEstFailureControl_,
      SI_SchedulingInfo si_SchedulingInfo_,
      ServingCellConfigCommonSIB servingCellConfigCommon_,
      SIB1_ims_EmergencySupport ims_EmergencySupport_,
      SIB1_eCallOverIMS_Support eCallOverIMS_Support_,
      UE_TimersAndConstants ue_TimersAndConstants_,
      SIB1_uac_BarringInfo uac_BarringInfo_,
      SIB1_useFullResumeID useFullResumeID_,
      Asn1OctetString lateNonCriticalExtension_,
      SIB1_v1610_IEs nonCriticalExtension_
   ) {
      super();
      cellSelectionInfo = cellSelectionInfo_;
      cellAccessRelatedInfo = cellAccessRelatedInfo_;
      connEstFailureControl = connEstFailureControl_;
      si_SchedulingInfo = si_SchedulingInfo_;
      servingCellConfigCommon = servingCellConfigCommon_;
      ims_EmergencySupport = ims_EmergencySupport_;
      eCallOverIMS_Support = eCallOverIMS_Support_;
      ue_TimersAndConstants = ue_TimersAndConstants_;
      uac_BarringInfo = uac_BarringInfo_;
      useFullResumeID = useFullResumeID_;
      lateNonCriticalExtension = lateNonCriticalExtension_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SIB1 (
      CellAccessRelatedInfo cellAccessRelatedInfo_
   ) {
      super();
      cellAccessRelatedInfo = cellAccessRelatedInfo_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SIB1 (SIB1_cellSelectionInfo cellSelectionInfo_,
      CellAccessRelatedInfo cellAccessRelatedInfo_,
      ConnEstFailureControl connEstFailureControl_,
      SI_SchedulingInfo si_SchedulingInfo_,
      ServingCellConfigCommonSIB servingCellConfigCommon_,
      SIB1_ims_EmergencySupport ims_EmergencySupport_,
      SIB1_eCallOverIMS_Support eCallOverIMS_Support_,
      UE_TimersAndConstants ue_TimersAndConstants_,
      SIB1_uac_BarringInfo uac_BarringInfo_,
      SIB1_useFullResumeID useFullResumeID_,
      byte[] lateNonCriticalExtension_,
      SIB1_v1610_IEs nonCriticalExtension_
   ) {
      super();
      cellSelectionInfo = cellSelectionInfo_;
      cellAccessRelatedInfo = cellAccessRelatedInfo_;
      connEstFailureControl = connEstFailureControl_;
      si_SchedulingInfo = si_SchedulingInfo_;
      servingCellConfigCommon = servingCellConfigCommon_;
      ims_EmergencySupport = ims_EmergencySupport_;
      eCallOverIMS_Support = eCallOverIMS_Support_;
      ue_TimersAndConstants = ue_TimersAndConstants_;
      uac_BarringInfo = uac_BarringInfo_;
      useFullResumeID = useFullResumeID_;
      lateNonCriticalExtension = new Asn1OctetString (lateNonCriticalExtension_);
      nonCriticalExtension = nonCriticalExtension_;
   }

   public void init () {
      cellSelectionInfo = null;
      cellAccessRelatedInfo = null;
      connEstFailureControl = null;
      si_SchedulingInfo = null;
      servingCellConfigCommon = null;
      ims_EmergencySupport = null;
      eCallOverIMS_Support = null;
      ue_TimersAndConstants = null;
      uac_BarringInfo = null;
      useFullResumeID = null;
      lateNonCriticalExtension = null;
      nonCriticalExtension = null;
   }

   public int getElementCount() { return 12; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return cellSelectionInfo;
         case 1: return cellAccessRelatedInfo;
         case 2: return connEstFailureControl;
         case 3: return si_SchedulingInfo;
         case 4: return servingCellConfigCommon;
         case 5: return ims_EmergencySupport;
         case 6: return eCallOverIMS_Support;
         case 7: return ue_TimersAndConstants;
         case 8: return uac_BarringInfo;
         case 9: return useFullResumeID;
         case 10: return lateNonCriticalExtension;
         case 11: return nonCriticalExtension;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "cellSelectionInfo";
         case 1: return "cellAccessRelatedInfo";
         case 2: return "connEstFailureControl";
         case 3: return "si-SchedulingInfo";
         case 4: return "servingCellConfigCommon";
         case 5: return "ims-EmergencySupport";
         case 6: return "eCallOverIMS-Support";
         case 7: return "ue-TimersAndConstants";
         case 8: return "uac-BarringInfo";
         case 9: return "useFullResumeID";
         case 10: return "lateNonCriticalExtension";
         case 11: return "nonCriticalExtension";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean cellSelectionInfoPresent = buffer.decodeBit ("cellSelectionInfoPresent");
      boolean connEstFailureControlPresent = buffer.decodeBit ("connEstFailureControlPresent");
      boolean si_SchedulingInfoPresent = buffer.decodeBit ("si_SchedulingInfoPresent");
      boolean servingCellConfigCommonPresent = buffer.decodeBit ("servingCellConfigCommonPresent");
      boolean ims_EmergencySupportPresent = buffer.decodeBit ("ims_EmergencySupportPresent");
      boolean eCallOverIMS_SupportPresent = buffer.decodeBit ("eCallOverIMS_SupportPresent");
      boolean ue_TimersAndConstantsPresent = buffer.decodeBit ("ue_TimersAndConstantsPresent");
      boolean uac_BarringInfoPresent = buffer.decodeBit ("uac_BarringInfoPresent");
      boolean useFullResumeIDPresent = buffer.decodeBit ("useFullResumeIDPresent");
      boolean lateNonCriticalExtensionPresent = buffer.decodeBit ("lateNonCriticalExtensionPresent");
      boolean nonCriticalExtensionPresent = buffer.decodeBit ("nonCriticalExtensionPresent");

      // decode cellSelectionInfo

      if (cellSelectionInfoPresent) {
         buffer.getContext().eventDispatcher.startElement("cellSelectionInfo", -1);

         cellSelectionInfo = new SIB1_cellSelectionInfo();
         cellSelectionInfo.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("cellSelectionInfo", -1);
      }
      else {
         cellSelectionInfo = null;
      }

      // decode cellAccessRelatedInfo

      buffer.getContext().eventDispatcher.startElement("cellAccessRelatedInfo", -1);

      cellAccessRelatedInfo = new CellAccessRelatedInfo();
      cellAccessRelatedInfo.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("cellAccessRelatedInfo", -1);

      // decode connEstFailureControl

      if (connEstFailureControlPresent) {
         buffer.getContext().eventDispatcher.startElement("connEstFailureControl", -1);

         connEstFailureControl = new ConnEstFailureControl();
         connEstFailureControl.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("connEstFailureControl", -1);
      }
      else {
         connEstFailureControl = null;
      }

      // decode si_SchedulingInfo

      if (si_SchedulingInfoPresent) {
         buffer.getContext().eventDispatcher.startElement("si_SchedulingInfo", -1);

         si_SchedulingInfo = new SI_SchedulingInfo();
         si_SchedulingInfo.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("si_SchedulingInfo", -1);
      }
      else {
         si_SchedulingInfo = null;
      }

      // decode servingCellConfigCommon

      if (servingCellConfigCommonPresent) {
         buffer.getContext().eventDispatcher.startElement("servingCellConfigCommon", -1);

         servingCellConfigCommon = new ServingCellConfigCommonSIB();
         servingCellConfigCommon.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("servingCellConfigCommon", -1);
      }
      else {
         servingCellConfigCommon = null;
      }

      // decode ims_EmergencySupport

      if (ims_EmergencySupportPresent) {
         buffer.getContext().eventDispatcher.startElement("ims_EmergencySupport", -1);

         int tval = SIB1_ims_EmergencySupport.decodeEnumValue (buffer);
         ims_EmergencySupport = SIB1_ims_EmergencySupport.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("ims_EmergencySupport", -1);
      }
      else {
         ims_EmergencySupport = null;
      }

      // decode eCallOverIMS_Support

      if (eCallOverIMS_SupportPresent) {
         buffer.getContext().eventDispatcher.startElement("eCallOverIMS_Support", -1);

         int tval = SIB1_eCallOverIMS_Support.decodeEnumValue (buffer);
         eCallOverIMS_Support = SIB1_eCallOverIMS_Support.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("eCallOverIMS_Support", -1);
      }
      else {
         eCallOverIMS_Support = null;
      }

      // decode ue_TimersAndConstants

      if (ue_TimersAndConstantsPresent) {
         buffer.getContext().eventDispatcher.startElement("ue_TimersAndConstants", -1);

         ue_TimersAndConstants = new UE_TimersAndConstants();
         ue_TimersAndConstants.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("ue_TimersAndConstants", -1);
      }
      else {
         ue_TimersAndConstants = null;
      }

      // decode uac_BarringInfo

      if (uac_BarringInfoPresent) {
         buffer.getContext().eventDispatcher.startElement("uac_BarringInfo", -1);

         uac_BarringInfo = new SIB1_uac_BarringInfo();
         uac_BarringInfo.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("uac_BarringInfo", -1);
      }
      else {
         uac_BarringInfo = null;
      }

      // decode useFullResumeID

      if (useFullResumeIDPresent) {
         buffer.getContext().eventDispatcher.startElement("useFullResumeID", -1);

         int tval = SIB1_useFullResumeID.decodeEnumValue (buffer);
         useFullResumeID = SIB1_useFullResumeID.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("useFullResumeID", -1);
      }
      else {
         useFullResumeID = null;
      }

      // decode lateNonCriticalExtension

      if (lateNonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("lateNonCriticalExtension", -1);

         lateNonCriticalExtension = new Asn1OctetString();
         lateNonCriticalExtension.decode (buffer);

         buffer.invokeCharacters(lateNonCriticalExtension.toString());
         buffer.getContext().eventDispatcher.endElement("lateNonCriticalExtension", -1);
      }
      else {
         lateNonCriticalExtension = null;
      }

      // decode nonCriticalExtension

      if (nonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension = new SIB1_v1610_IEs();
         nonCriticalExtension.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }
      else {
         nonCriticalExtension = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((cellSelectionInfo != null), null);
      buffer.encodeBit ((connEstFailureControl != null), null);
      buffer.encodeBit ((si_SchedulingInfo != null), null);
      buffer.encodeBit ((servingCellConfigCommon != null), null);
      buffer.encodeBit ((ims_EmergencySupport != null), null);
      buffer.encodeBit ((eCallOverIMS_Support != null), null);
      buffer.encodeBit ((ue_TimersAndConstants != null), null);
      buffer.encodeBit ((uac_BarringInfo != null), null);
      buffer.encodeBit ((useFullResumeID != null), null);
      buffer.encodeBit ((lateNonCriticalExtension != null), null);
      buffer.encodeBit ((nonCriticalExtension != null), null);

      // encode cellSelectionInfo

      if (cellSelectionInfo != null) {
         buffer.getContext().eventDispatcher.startElement("cellSelectionInfo", -1);

         cellSelectionInfo.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("cellSelectionInfo", -1);
      }

      // encode cellAccessRelatedInfo

      if (cellAccessRelatedInfo != null) {
         buffer.getContext().eventDispatcher.startElement("cellAccessRelatedInfo", -1);

         cellAccessRelatedInfo.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("cellAccessRelatedInfo", -1);
      }
      else throw new Asn1MissingRequiredException ("cellAccessRelatedInfo");

      // encode connEstFailureControl

      if (connEstFailureControl != null) {
         buffer.getContext().eventDispatcher.startElement("connEstFailureControl", -1);

         connEstFailureControl.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("connEstFailureControl", -1);
      }

      // encode si_SchedulingInfo

      if (si_SchedulingInfo != null) {
         buffer.getContext().eventDispatcher.startElement("si_SchedulingInfo", -1);

         si_SchedulingInfo.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("si_SchedulingInfo", -1);
      }

      // encode servingCellConfigCommon

      if (servingCellConfigCommon != null) {
         buffer.getContext().eventDispatcher.startElement("servingCellConfigCommon", -1);

         servingCellConfigCommon.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("servingCellConfigCommon", -1);
      }

      // encode ims_EmergencySupport

      if (ims_EmergencySupport != null) {
         buffer.getContext().eventDispatcher.startElement("ims_EmergencySupport", -1);

         ims_EmergencySupport.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ims_EmergencySupport", -1);
      }

      // encode eCallOverIMS_Support

      if (eCallOverIMS_Support != null) {
         buffer.getContext().eventDispatcher.startElement("eCallOverIMS_Support", -1);

         eCallOverIMS_Support.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("eCallOverIMS_Support", -1);
      }

      // encode ue_TimersAndConstants

      if (ue_TimersAndConstants != null) {
         buffer.getContext().eventDispatcher.startElement("ue_TimersAndConstants", -1);

         ue_TimersAndConstants.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ue_TimersAndConstants", -1);
      }

      // encode uac_BarringInfo

      if (uac_BarringInfo != null) {
         buffer.getContext().eventDispatcher.startElement("uac_BarringInfo", -1);

         uac_BarringInfo.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("uac_BarringInfo", -1);
      }

      // encode useFullResumeID

      if (useFullResumeID != null) {
         buffer.getContext().eventDispatcher.startElement("useFullResumeID", -1);

         useFullResumeID.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("useFullResumeID", -1);
      }

      // encode lateNonCriticalExtension

      if (lateNonCriticalExtension != null) {
         buffer.getContext().eventDispatcher.startElement("lateNonCriticalExtension", -1);

         lateNonCriticalExtension.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("lateNonCriticalExtension", -1);
      }

      // encode nonCriticalExtension

      if (nonCriticalExtension != null) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (cellSelectionInfo != null) cellSelectionInfo.print (_sb, "cellSelectionInfo", _level+1);
      if (cellAccessRelatedInfo != null) cellAccessRelatedInfo.print (_sb, "cellAccessRelatedInfo", _level+1);
      if (connEstFailureControl != null) connEstFailureControl.print (_sb, "connEstFailureControl", _level+1);
      if (si_SchedulingInfo != null) si_SchedulingInfo.print (_sb, "si_SchedulingInfo", _level+1);
      if (servingCellConfigCommon != null) servingCellConfigCommon.print (_sb, "servingCellConfigCommon", _level+1);
      if (ims_EmergencySupport != null) ims_EmergencySupport.print (_sb, "ims_EmergencySupport", _level+1);
      if (eCallOverIMS_Support != null) eCallOverIMS_Support.print (_sb, "eCallOverIMS_Support", _level+1);
      if (ue_TimersAndConstants != null) ue_TimersAndConstants.print (_sb, "ue_TimersAndConstants", _level+1);
      if (uac_BarringInfo != null) uac_BarringInfo.print (_sb, "uac_BarringInfo", _level+1);
      if (useFullResumeID != null) useFullResumeID.print (_sb, "useFullResumeID", _level+1);
      if (lateNonCriticalExtension != null) lateNonCriticalExtension.print (_sb, "lateNonCriticalExtension", _level+1);
      if (nonCriticalExtension != null) nonCriticalExtension.print (_sb, "nonCriticalExtension", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
