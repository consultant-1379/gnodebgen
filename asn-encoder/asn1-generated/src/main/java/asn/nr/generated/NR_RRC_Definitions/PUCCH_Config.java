/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class PUCCH_Config extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "PUCCH-Config";
   }

   public PUCCH_Config_resourceSetToAddModList resourceSetToAddModList;  // optional
   public PUCCH_Config_resourceSetToReleaseList resourceSetToReleaseList;  // optional
   public PUCCH_Config_resourceToAddModList resourceToAddModList;  // optional
   public PUCCH_Config_resourceToReleaseList resourceToReleaseList;  // optional
   public PUCCH_Config_format1 format1;  // optional
   public PUCCH_Config_format2 format2;  // optional
   public PUCCH_Config_format3 format3;  // optional
   public PUCCH_Config_format4 format4;  // optional
   public PUCCH_Config_schedulingRequestResourceToAddModList schedulingRequestResourceToAddModList;  // optional
   public PUCCH_Config_schedulingRequestResourceToReleaseList schedulingRequestResourceToReleaseList;  // optional
   public PUCCH_Config_multi_CSI_PUCCH_ResourceList multi_CSI_PUCCH_ResourceList;  // optional
   public PUCCH_Config_dl_DataToUL_ACK dl_DataToUL_ACK;  // optional
   public PUCCH_Config_spatialRelationInfoToAddModList spatialRelationInfoToAddModList;  // optional
   public PUCCH_Config_spatialRelationInfoToReleaseList spatialRelationInfoToReleaseList;  // optional
   public PUCCH_PowerControl pucch_PowerControl;  // optional
   public boolean mV2ExtPresent;
   public PUCCH_Config_resourceToAddModListExt_r16 resourceToAddModListExt_r16;  // optional
   public PUCCH_Config_dl_DataToUL_ACK_r16 dl_DataToUL_ACK_r16;  // optional
   public PUCCH_Config_ul_AccessConfigListDCI_1_1_r16 ul_AccessConfigListDCI_1_1_r16;  // optional
   public PUCCH_Config_subslotLengthForPUCCH_r16 subslotLengthForPUCCH_r16;  // optional
   public PUCCH_Config_dl_DataToUL_ACK_DCI_1_2_r16 dl_DataToUL_ACK_DCI_1_2_r16;  // optional
   public Asn1Integer numberOfBitsForPUCCH_ResourceIndicatorDCI_1_2_r16;  // optional
   public PUCCH_Config_dmrs_UplinkTransformPrecodingPUCCH_r16 dmrs_UplinkTransformPrecodingPUCCH_r16 = null;  // optional
   public PUCCH_Config_spatialRelationInfoToAddModListSizeExt_v1610 spatialRelationInfoToAddModListSizeExt_v1610;  // optional
   public PUCCH_Config_spatialRelationInfoToReleaseListSizeExt_v1610 spatialRelationInfoToReleaseListSizeExt_v1610;  // optional
   public PUCCH_Config_spatialRelationInfoToAddModListExt_v1610 spatialRelationInfoToAddModListExt_v1610;  // optional
   public PUCCH_Config_spatialRelationInfoToReleaseListExt_v1610 spatialRelationInfoToReleaseListExt_v1610;  // optional
   public PUCCH_Config_resourceGroupToAddModList_r16 resourceGroupToAddModList_r16;  // optional
   public PUCCH_Config_resourceGroupToReleaseList_r16 resourceGroupToReleaseList_r16;  // optional
   public PUCCH_Config_sps_PUCCH_AN_List_r16 sps_PUCCH_AN_List_r16;  // optional
   public PUCCH_Config_schedulingRequestResourceToAddModListExt_v1610 schedulingRequestResourceToAddModListExt_v1610;  // optional
   public Asn1OpenExt extElem1;

   public PUCCH_Config () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public PUCCH_Config (
      PUCCH_Config_resourceSetToAddModList resourceSetToAddModList_,
      PUCCH_Config_resourceSetToReleaseList resourceSetToReleaseList_,
      PUCCH_Config_resourceToAddModList resourceToAddModList_,
      PUCCH_Config_resourceToReleaseList resourceToReleaseList_,
      PUCCH_Config_format1 format1_,
      PUCCH_Config_format2 format2_,
      PUCCH_Config_format3 format3_,
      PUCCH_Config_format4 format4_,
      PUCCH_Config_schedulingRequestResourceToAddModList schedulingRequestResourceToAddModList_,
      PUCCH_Config_schedulingRequestResourceToReleaseList schedulingRequestResourceToReleaseList_,
      PUCCH_Config_multi_CSI_PUCCH_ResourceList multi_CSI_PUCCH_ResourceList_,
      PUCCH_Config_dl_DataToUL_ACK dl_DataToUL_ACK_,
      PUCCH_Config_spatialRelationInfoToAddModList spatialRelationInfoToAddModList_,
      PUCCH_Config_spatialRelationInfoToReleaseList spatialRelationInfoToReleaseList_,
      PUCCH_PowerControl pucch_PowerControl_,
      PUCCH_Config_resourceToAddModListExt_r16 resourceToAddModListExt_r16_,
      PUCCH_Config_dl_DataToUL_ACK_r16 dl_DataToUL_ACK_r16_,
      PUCCH_Config_ul_AccessConfigListDCI_1_1_r16 ul_AccessConfigListDCI_1_1_r16_,
      PUCCH_Config_subslotLengthForPUCCH_r16 subslotLengthForPUCCH_r16_,
      PUCCH_Config_dl_DataToUL_ACK_DCI_1_2_r16 dl_DataToUL_ACK_DCI_1_2_r16_,
      Asn1Integer numberOfBitsForPUCCH_ResourceIndicatorDCI_1_2_r16_,
      PUCCH_Config_dmrs_UplinkTransformPrecodingPUCCH_r16 dmrs_UplinkTransformPrecodingPUCCH_r16_,
      PUCCH_Config_spatialRelationInfoToAddModListSizeExt_v1610 spatialRelationInfoToAddModListSizeExt_v1610_,
      PUCCH_Config_spatialRelationInfoToReleaseListSizeExt_v1610 spatialRelationInfoToReleaseListSizeExt_v1610_,
      PUCCH_Config_spatialRelationInfoToAddModListExt_v1610 spatialRelationInfoToAddModListExt_v1610_,
      PUCCH_Config_spatialRelationInfoToReleaseListExt_v1610 spatialRelationInfoToReleaseListExt_v1610_,
      PUCCH_Config_resourceGroupToAddModList_r16 resourceGroupToAddModList_r16_,
      PUCCH_Config_resourceGroupToReleaseList_r16 resourceGroupToReleaseList_r16_,
      PUCCH_Config_sps_PUCCH_AN_List_r16 sps_PUCCH_AN_List_r16_,
      PUCCH_Config_schedulingRequestResourceToAddModListExt_v1610 schedulingRequestResourceToAddModListExt_v1610_
   ) {
      super();
      resourceSetToAddModList = resourceSetToAddModList_;
      resourceSetToReleaseList = resourceSetToReleaseList_;
      resourceToAddModList = resourceToAddModList_;
      resourceToReleaseList = resourceToReleaseList_;
      format1 = format1_;
      format2 = format2_;
      format3 = format3_;
      format4 = format4_;
      schedulingRequestResourceToAddModList = schedulingRequestResourceToAddModList_;
      schedulingRequestResourceToReleaseList = schedulingRequestResourceToReleaseList_;
      multi_CSI_PUCCH_ResourceList = multi_CSI_PUCCH_ResourceList_;
      dl_DataToUL_ACK = dl_DataToUL_ACK_;
      spatialRelationInfoToAddModList = spatialRelationInfoToAddModList_;
      spatialRelationInfoToReleaseList = spatialRelationInfoToReleaseList_;
      pucch_PowerControl = pucch_PowerControl_;
      resourceToAddModListExt_r16 = resourceToAddModListExt_r16_;
      dl_DataToUL_ACK_r16 = dl_DataToUL_ACK_r16_;
      ul_AccessConfigListDCI_1_1_r16 = ul_AccessConfigListDCI_1_1_r16_;
      subslotLengthForPUCCH_r16 = subslotLengthForPUCCH_r16_;
      dl_DataToUL_ACK_DCI_1_2_r16 = dl_DataToUL_ACK_DCI_1_2_r16_;
      numberOfBitsForPUCCH_ResourceIndicatorDCI_1_2_r16 = numberOfBitsForPUCCH_ResourceIndicatorDCI_1_2_r16_;
      dmrs_UplinkTransformPrecodingPUCCH_r16 = dmrs_UplinkTransformPrecodingPUCCH_r16_;
      spatialRelationInfoToAddModListSizeExt_v1610 = spatialRelationInfoToAddModListSizeExt_v1610_;
      spatialRelationInfoToReleaseListSizeExt_v1610 = spatialRelationInfoToReleaseListSizeExt_v1610_;
      spatialRelationInfoToAddModListExt_v1610 = spatialRelationInfoToAddModListExt_v1610_;
      spatialRelationInfoToReleaseListExt_v1610 = spatialRelationInfoToReleaseListExt_v1610_;
      resourceGroupToAddModList_r16 = resourceGroupToAddModList_r16_;
      resourceGroupToReleaseList_r16 = resourceGroupToReleaseList_r16_;
      sps_PUCCH_AN_List_r16 = sps_PUCCH_AN_List_r16_;
      schedulingRequestResourceToAddModListExt_v1610 = schedulingRequestResourceToAddModListExt_v1610_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public PUCCH_Config (PUCCH_Config_resourceSetToAddModList resourceSetToAddModList_,
      PUCCH_Config_resourceSetToReleaseList resourceSetToReleaseList_,
      PUCCH_Config_resourceToAddModList resourceToAddModList_,
      PUCCH_Config_resourceToReleaseList resourceToReleaseList_,
      PUCCH_Config_format1 format1_,
      PUCCH_Config_format2 format2_,
      PUCCH_Config_format3 format3_,
      PUCCH_Config_format4 format4_,
      PUCCH_Config_schedulingRequestResourceToAddModList schedulingRequestResourceToAddModList_,
      PUCCH_Config_schedulingRequestResourceToReleaseList schedulingRequestResourceToReleaseList_,
      PUCCH_Config_multi_CSI_PUCCH_ResourceList multi_CSI_PUCCH_ResourceList_,
      PUCCH_Config_dl_DataToUL_ACK dl_DataToUL_ACK_,
      PUCCH_Config_spatialRelationInfoToAddModList spatialRelationInfoToAddModList_,
      PUCCH_Config_spatialRelationInfoToReleaseList spatialRelationInfoToReleaseList_,
      PUCCH_PowerControl pucch_PowerControl_,
      PUCCH_Config_resourceToAddModListExt_r16 resourceToAddModListExt_r16_,
      PUCCH_Config_dl_DataToUL_ACK_r16 dl_DataToUL_ACK_r16_,
      PUCCH_Config_ul_AccessConfigListDCI_1_1_r16 ul_AccessConfigListDCI_1_1_r16_,
      PUCCH_Config_subslotLengthForPUCCH_r16 subslotLengthForPUCCH_r16_,
      PUCCH_Config_dl_DataToUL_ACK_DCI_1_2_r16 dl_DataToUL_ACK_DCI_1_2_r16_,
      long numberOfBitsForPUCCH_ResourceIndicatorDCI_1_2_r16_,
      PUCCH_Config_dmrs_UplinkTransformPrecodingPUCCH_r16 dmrs_UplinkTransformPrecodingPUCCH_r16_,
      PUCCH_Config_spatialRelationInfoToAddModListSizeExt_v1610 spatialRelationInfoToAddModListSizeExt_v1610_,
      PUCCH_Config_spatialRelationInfoToReleaseListSizeExt_v1610 spatialRelationInfoToReleaseListSizeExt_v1610_,
      PUCCH_Config_spatialRelationInfoToAddModListExt_v1610 spatialRelationInfoToAddModListExt_v1610_,
      PUCCH_Config_spatialRelationInfoToReleaseListExt_v1610 spatialRelationInfoToReleaseListExt_v1610_,
      PUCCH_Config_resourceGroupToAddModList_r16 resourceGroupToAddModList_r16_,
      PUCCH_Config_resourceGroupToReleaseList_r16 resourceGroupToReleaseList_r16_,
      PUCCH_Config_sps_PUCCH_AN_List_r16 sps_PUCCH_AN_List_r16_,
      PUCCH_Config_schedulingRequestResourceToAddModListExt_v1610 schedulingRequestResourceToAddModListExt_v1610_
   ) {
      super();
      resourceSetToAddModList = resourceSetToAddModList_;
      resourceSetToReleaseList = resourceSetToReleaseList_;
      resourceToAddModList = resourceToAddModList_;
      resourceToReleaseList = resourceToReleaseList_;
      format1 = format1_;
      format2 = format2_;
      format3 = format3_;
      format4 = format4_;
      schedulingRequestResourceToAddModList = schedulingRequestResourceToAddModList_;
      schedulingRequestResourceToReleaseList = schedulingRequestResourceToReleaseList_;
      multi_CSI_PUCCH_ResourceList = multi_CSI_PUCCH_ResourceList_;
      dl_DataToUL_ACK = dl_DataToUL_ACK_;
      spatialRelationInfoToAddModList = spatialRelationInfoToAddModList_;
      spatialRelationInfoToReleaseList = spatialRelationInfoToReleaseList_;
      pucch_PowerControl = pucch_PowerControl_;
      resourceToAddModListExt_r16 = resourceToAddModListExt_r16_;
      dl_DataToUL_ACK_r16 = dl_DataToUL_ACK_r16_;
      ul_AccessConfigListDCI_1_1_r16 = ul_AccessConfigListDCI_1_1_r16_;
      subslotLengthForPUCCH_r16 = subslotLengthForPUCCH_r16_;
      dl_DataToUL_ACK_DCI_1_2_r16 = dl_DataToUL_ACK_DCI_1_2_r16_;
      numberOfBitsForPUCCH_ResourceIndicatorDCI_1_2_r16 = new Asn1Integer (numberOfBitsForPUCCH_ResourceIndicatorDCI_1_2_r16_);
      dmrs_UplinkTransformPrecodingPUCCH_r16 = dmrs_UplinkTransformPrecodingPUCCH_r16_;
      spatialRelationInfoToAddModListSizeExt_v1610 = spatialRelationInfoToAddModListSizeExt_v1610_;
      spatialRelationInfoToReleaseListSizeExt_v1610 = spatialRelationInfoToReleaseListSizeExt_v1610_;
      spatialRelationInfoToAddModListExt_v1610 = spatialRelationInfoToAddModListExt_v1610_;
      spatialRelationInfoToReleaseListExt_v1610 = spatialRelationInfoToReleaseListExt_v1610_;
      resourceGroupToAddModList_r16 = resourceGroupToAddModList_r16_;
      resourceGroupToReleaseList_r16 = resourceGroupToReleaseList_r16_;
      sps_PUCCH_AN_List_r16 = sps_PUCCH_AN_List_r16_;
      schedulingRequestResourceToAddModListExt_v1610 = schedulingRequestResourceToAddModListExt_v1610_;
   }

   public void init () {
      resourceSetToAddModList = null;
      resourceSetToReleaseList = null;
      resourceToAddModList = null;
      resourceToReleaseList = null;
      format1 = null;
      format2 = null;
      format3 = null;
      format4 = null;
      schedulingRequestResourceToAddModList = null;
      schedulingRequestResourceToReleaseList = null;
      multi_CSI_PUCCH_ResourceList = null;
      dl_DataToUL_ACK = null;
      spatialRelationInfoToAddModList = null;
      spatialRelationInfoToReleaseList = null;
      pucch_PowerControl = null;
      resourceToAddModListExt_r16 = null;
      dl_DataToUL_ACK_r16 = null;
      ul_AccessConfigListDCI_1_1_r16 = null;
      subslotLengthForPUCCH_r16 = null;
      dl_DataToUL_ACK_DCI_1_2_r16 = null;
      numberOfBitsForPUCCH_ResourceIndicatorDCI_1_2_r16 = null;
      dmrs_UplinkTransformPrecodingPUCCH_r16 = null;
      spatialRelationInfoToAddModListSizeExt_v1610 = null;
      spatialRelationInfoToReleaseListSizeExt_v1610 = null;
      spatialRelationInfoToAddModListExt_v1610 = null;
      spatialRelationInfoToReleaseListExt_v1610 = null;
      resourceGroupToAddModList_r16 = null;
      resourceGroupToReleaseList_r16 = null;
      sps_PUCCH_AN_List_r16 = null;
      schedulingRequestResourceToAddModListExt_v1610 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 31; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return resourceSetToAddModList;
         case 1: return resourceSetToReleaseList;
         case 2: return resourceToAddModList;
         case 3: return resourceToReleaseList;
         case 4: return format1;
         case 5: return format2;
         case 6: return format3;
         case 7: return format4;
         case 8: return schedulingRequestResourceToAddModList;
         case 9: return schedulingRequestResourceToReleaseList;
         case 10: return multi_CSI_PUCCH_ResourceList;
         case 11: return dl_DataToUL_ACK;
         case 12: return spatialRelationInfoToAddModList;
         case 13: return spatialRelationInfoToReleaseList;
         case 14: return pucch_PowerControl;
         case 15: return resourceToAddModListExt_r16;
         case 16: return dl_DataToUL_ACK_r16;
         case 17: return ul_AccessConfigListDCI_1_1_r16;
         case 18: return subslotLengthForPUCCH_r16;
         case 19: return dl_DataToUL_ACK_DCI_1_2_r16;
         case 20: return numberOfBitsForPUCCH_ResourceIndicatorDCI_1_2_r16;
         case 21: return dmrs_UplinkTransformPrecodingPUCCH_r16;
         case 22: return spatialRelationInfoToAddModListSizeExt_v1610;
         case 23: return spatialRelationInfoToReleaseListSizeExt_v1610;
         case 24: return spatialRelationInfoToAddModListExt_v1610;
         case 25: return spatialRelationInfoToReleaseListExt_v1610;
         case 26: return resourceGroupToAddModList_r16;
         case 27: return resourceGroupToReleaseList_r16;
         case 28: return sps_PUCCH_AN_List_r16;
         case 29: return schedulingRequestResourceToAddModListExt_v1610;
         case 30: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "resourceSetToAddModList";
         case 1: return "resourceSetToReleaseList";
         case 2: return "resourceToAddModList";
         case 3: return "resourceToReleaseList";
         case 4: return "format1";
         case 5: return "format2";
         case 6: return "format3";
         case 7: return "format4";
         case 8: return "schedulingRequestResourceToAddModList";
         case 9: return "schedulingRequestResourceToReleaseList";
         case 10: return "multi-CSI-PUCCH-ResourceList";
         case 11: return "dl-DataToUL-ACK";
         case 12: return "spatialRelationInfoToAddModList";
         case 13: return "spatialRelationInfoToReleaseList";
         case 14: return "pucch-PowerControl";
         case 15: return "resourceToAddModListExt-r16";
         case 16: return "dl-DataToUL-ACK-r16";
         case 17: return "ul-AccessConfigListDCI-1-1-r16";
         case 18: return "subslotLengthForPUCCH-r16";
         case 19: return "dl-DataToUL-ACK-DCI-1-2-r16";
         case 20: return "numberOfBitsForPUCCH-ResourceIndicatorDCI-1-2-r16";
         case 21: return "dmrs-UplinkTransformPrecodingPUCCH-r16";
         case 22: return "spatialRelationInfoToAddModListSizeExt-v1610";
         case 23: return "spatialRelationInfoToReleaseListSizeExt-v1610";
         case 24: return "spatialRelationInfoToAddModListExt-v1610";
         case 25: return "spatialRelationInfoToReleaseListExt-v1610";
         case 26: return "resourceGroupToAddModList-r16";
         case 27: return "resourceGroupToReleaseList-r16";
         case 28: return "sps-PUCCH-AN-List-r16";
         case 29: return "schedulingRequestResourceToAddModListExt-v1610";
         case 30: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean resourceSetToAddModListPresent = buffer.decodeBit ("resourceSetToAddModListPresent");
      boolean resourceSetToReleaseListPresent = buffer.decodeBit ("resourceSetToReleaseListPresent");
      boolean resourceToAddModListPresent = buffer.decodeBit ("resourceToAddModListPresent");
      boolean resourceToReleaseListPresent = buffer.decodeBit ("resourceToReleaseListPresent");
      boolean format1Present = buffer.decodeBit ("format1Present");
      boolean format2Present = buffer.decodeBit ("format2Present");
      boolean format3Present = buffer.decodeBit ("format3Present");
      boolean format4Present = buffer.decodeBit ("format4Present");
      boolean schedulingRequestResourceToAddModListPresent = buffer.decodeBit ("schedulingRequestResourceToAddModListPresent");
      boolean schedulingRequestResourceToReleaseListPresent = buffer.decodeBit ("schedulingRequestResourceToReleaseListPresent");
      boolean multi_CSI_PUCCH_ResourceListPresent = buffer.decodeBit ("multi_CSI_PUCCH_ResourceListPresent");
      boolean dl_DataToUL_ACKPresent = buffer.decodeBit ("dl_DataToUL_ACKPresent");
      boolean spatialRelationInfoToAddModListPresent = buffer.decodeBit ("spatialRelationInfoToAddModListPresent");
      boolean spatialRelationInfoToReleaseListPresent = buffer.decodeBit ("spatialRelationInfoToReleaseListPresent");
      boolean pucch_PowerControlPresent = buffer.decodeBit ("pucch_PowerControlPresent");

      // decode resourceSetToAddModList

      if (resourceSetToAddModListPresent) {
         buffer.getContext().eventDispatcher.startElement("resourceSetToAddModList", -1);

         resourceSetToAddModList = new PUCCH_Config_resourceSetToAddModList();
         resourceSetToAddModList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("resourceSetToAddModList", -1);
      }
      else {
         resourceSetToAddModList = null;
      }

      // decode resourceSetToReleaseList

      if (resourceSetToReleaseListPresent) {
         buffer.getContext().eventDispatcher.startElement("resourceSetToReleaseList", -1);

         resourceSetToReleaseList = new PUCCH_Config_resourceSetToReleaseList();
         resourceSetToReleaseList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("resourceSetToReleaseList", -1);
      }
      else {
         resourceSetToReleaseList = null;
      }

      // decode resourceToAddModList

      if (resourceToAddModListPresent) {
         buffer.getContext().eventDispatcher.startElement("resourceToAddModList", -1);

         resourceToAddModList = new PUCCH_Config_resourceToAddModList();
         resourceToAddModList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("resourceToAddModList", -1);
      }
      else {
         resourceToAddModList = null;
      }

      // decode resourceToReleaseList

      if (resourceToReleaseListPresent) {
         buffer.getContext().eventDispatcher.startElement("resourceToReleaseList", -1);

         resourceToReleaseList = new PUCCH_Config_resourceToReleaseList();
         resourceToReleaseList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("resourceToReleaseList", -1);
      }
      else {
         resourceToReleaseList = null;
      }

      // decode format1

      if (format1Present) {
         buffer.getContext().eventDispatcher.startElement("format1", -1);

         format1 = new PUCCH_Config_format1();
         format1.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("format1", -1);
      }
      else {
         format1 = null;
      }

      // decode format2

      if (format2Present) {
         buffer.getContext().eventDispatcher.startElement("format2", -1);

         format2 = new PUCCH_Config_format2();
         format2.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("format2", -1);
      }
      else {
         format2 = null;
      }

      // decode format3

      if (format3Present) {
         buffer.getContext().eventDispatcher.startElement("format3", -1);

         format3 = new PUCCH_Config_format3();
         format3.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("format3", -1);
      }
      else {
         format3 = null;
      }

      // decode format4

      if (format4Present) {
         buffer.getContext().eventDispatcher.startElement("format4", -1);

         format4 = new PUCCH_Config_format4();
         format4.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("format4", -1);
      }
      else {
         format4 = null;
      }

      // decode schedulingRequestResourceToAddModList

      if (schedulingRequestResourceToAddModListPresent) {
         buffer.getContext().eventDispatcher.startElement("schedulingRequestResourceToAddModList", -1);

         schedulingRequestResourceToAddModList = new PUCCH_Config_schedulingRequestResourceToAddModList();
         schedulingRequestResourceToAddModList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("schedulingRequestResourceToAddModList", -1);
      }
      else {
         schedulingRequestResourceToAddModList = null;
      }

      // decode schedulingRequestResourceToReleaseList

      if (schedulingRequestResourceToReleaseListPresent) {
         buffer.getContext().eventDispatcher.startElement("schedulingRequestResourceToReleaseList", -1);

         schedulingRequestResourceToReleaseList = new PUCCH_Config_schedulingRequestResourceToReleaseList();
         schedulingRequestResourceToReleaseList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("schedulingRequestResourceToReleaseList", -1);
      }
      else {
         schedulingRequestResourceToReleaseList = null;
      }

      // decode multi_CSI_PUCCH_ResourceList

      if (multi_CSI_PUCCH_ResourceListPresent) {
         buffer.getContext().eventDispatcher.startElement("multi_CSI_PUCCH_ResourceList", -1);

         multi_CSI_PUCCH_ResourceList = new PUCCH_Config_multi_CSI_PUCCH_ResourceList();
         multi_CSI_PUCCH_ResourceList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("multi_CSI_PUCCH_ResourceList", -1);
      }
      else {
         multi_CSI_PUCCH_ResourceList = null;
      }

      // decode dl_DataToUL_ACK

      if (dl_DataToUL_ACKPresent) {
         buffer.getContext().eventDispatcher.startElement("dl_DataToUL_ACK", -1);

         dl_DataToUL_ACK = new PUCCH_Config_dl_DataToUL_ACK();
         dl_DataToUL_ACK.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("dl_DataToUL_ACK", -1);
      }
      else {
         dl_DataToUL_ACK = null;
      }

      // decode spatialRelationInfoToAddModList

      if (spatialRelationInfoToAddModListPresent) {
         buffer.getContext().eventDispatcher.startElement("spatialRelationInfoToAddModList", -1);

         spatialRelationInfoToAddModList = new PUCCH_Config_spatialRelationInfoToAddModList();
         spatialRelationInfoToAddModList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("spatialRelationInfoToAddModList", -1);
      }
      else {
         spatialRelationInfoToAddModList = null;
      }

      // decode spatialRelationInfoToReleaseList

      if (spatialRelationInfoToReleaseListPresent) {
         buffer.getContext().eventDispatcher.startElement("spatialRelationInfoToReleaseList", -1);

         spatialRelationInfoToReleaseList = new PUCCH_Config_spatialRelationInfoToReleaseList();
         spatialRelationInfoToReleaseList.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("spatialRelationInfoToReleaseList", -1);
      }
      else {
         spatialRelationInfoToReleaseList = null;
      }

      // decode pucch_PowerControl

      if (pucch_PowerControlPresent) {
         buffer.getContext().eventDispatcher.startElement("pucch_PowerControl", -1);

         pucch_PowerControl = new PUCCH_PowerControl();
         pucch_PowerControl.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("pucch_PowerControl", -1);
      }
      else {
         pucch_PowerControl = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean resourceToAddModListExt_r16Present = buffer.decodeBit ("resourceToAddModListExt_r16Present");

            boolean dl_DataToUL_ACK_r16Present = buffer.decodeBit ("dl_DataToUL_ACK_r16Present");

            boolean ul_AccessConfigListDCI_1_1_r16Present = buffer.decodeBit ("ul_AccessConfigListDCI_1_1_r16Present");

            boolean subslotLengthForPUCCH_r16Present = buffer.decodeBit ("subslotLengthForPUCCH_r16Present");

            boolean dl_DataToUL_ACK_DCI_1_2_r16Present = buffer.decodeBit ("dl_DataToUL_ACK_DCI_1_2_r16Present");

            boolean numberOfBitsForPUCCH_ResourceIndicatorDCI_1_2_r16Present = buffer.decodeBit ("numberOfBitsForPUCCH_ResourceIndicatorDCI_1_2_r16Present");

            boolean dmrs_UplinkTransformPrecodingPUCCH_r16Present = buffer.decodeBit ("dmrs_UplinkTransformPrecodingPUCCH_r16Present");

            boolean spatialRelationInfoToAddModListSizeExt_v1610Present = buffer.decodeBit ("spatialRelationInfoToAddModListSizeExt_v1610Present");

            boolean spatialRelationInfoToReleaseListSizeExt_v1610Present = buffer.decodeBit ("spatialRelationInfoToReleaseListSizeExt_v1610Present");

            boolean spatialRelationInfoToAddModListExt_v1610Present = buffer.decodeBit ("spatialRelationInfoToAddModListExt_v1610Present");

            boolean spatialRelationInfoToReleaseListExt_v1610Present = buffer.decodeBit ("spatialRelationInfoToReleaseListExt_v1610Present");

            boolean resourceGroupToAddModList_r16Present = buffer.decodeBit ("resourceGroupToAddModList_r16Present");

            boolean resourceGroupToReleaseList_r16Present = buffer.decodeBit ("resourceGroupToReleaseList_r16Present");

            boolean sps_PUCCH_AN_List_r16Present = buffer.decodeBit ("sps_PUCCH_AN_List_r16Present");

            boolean schedulingRequestResourceToAddModListExt_v1610Present = buffer.decodeBit ("schedulingRequestResourceToAddModListExt_v1610Present");

            // decode resourceToAddModListExt_r16

            if (resourceToAddModListExt_r16Present) {
               buffer.getContext().eventDispatcher.startElement("resourceToAddModListExt_r16", -1);

               resourceToAddModListExt_r16 = new PUCCH_Config_resourceToAddModListExt_r16();
               resourceToAddModListExt_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("resourceToAddModListExt_r16", -1);
            }
            else {
               resourceToAddModListExt_r16 = null;
            }

            // decode dl_DataToUL_ACK_r16

            if (dl_DataToUL_ACK_r16Present) {
               buffer.getContext().eventDispatcher.startElement("dl_DataToUL_ACK_r16", -1);

               dl_DataToUL_ACK_r16 = new PUCCH_Config_dl_DataToUL_ACK_r16();
               dl_DataToUL_ACK_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("dl_DataToUL_ACK_r16", -1);
            }
            else {
               dl_DataToUL_ACK_r16 = null;
            }

            // decode ul_AccessConfigListDCI_1_1_r16

            if (ul_AccessConfigListDCI_1_1_r16Present) {
               buffer.getContext().eventDispatcher.startElement("ul_AccessConfigListDCI_1_1_r16", -1);

               ul_AccessConfigListDCI_1_1_r16 = new PUCCH_Config_ul_AccessConfigListDCI_1_1_r16();
               ul_AccessConfigListDCI_1_1_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("ul_AccessConfigListDCI_1_1_r16", -1);
            }
            else {
               ul_AccessConfigListDCI_1_1_r16 = null;
            }

            // decode subslotLengthForPUCCH_r16

            if (subslotLengthForPUCCH_r16Present) {
               buffer.getContext().eventDispatcher.startElement("subslotLengthForPUCCH_r16", -1);

               subslotLengthForPUCCH_r16 = new PUCCH_Config_subslotLengthForPUCCH_r16();
               subslotLengthForPUCCH_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("subslotLengthForPUCCH_r16", -1);
            }
            else {
               subslotLengthForPUCCH_r16 = null;
            }

            // decode dl_DataToUL_ACK_DCI_1_2_r16

            if (dl_DataToUL_ACK_DCI_1_2_r16Present) {
               buffer.getContext().eventDispatcher.startElement("dl_DataToUL_ACK_DCI_1_2_r16", -1);

               dl_DataToUL_ACK_DCI_1_2_r16 = new PUCCH_Config_dl_DataToUL_ACK_DCI_1_2_r16();
               dl_DataToUL_ACK_DCI_1_2_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("dl_DataToUL_ACK_DCI_1_2_r16", -1);
            }
            else {
               dl_DataToUL_ACK_DCI_1_2_r16 = null;
            }

            // decode numberOfBitsForPUCCH_ResourceIndicatorDCI_1_2_r16

            if (numberOfBitsForPUCCH_ResourceIndicatorDCI_1_2_r16Present) {
               buffer.getContext().eventDispatcher.startElement("numberOfBitsForPUCCH_ResourceIndicatorDCI_1_2_r16", -1);

               numberOfBitsForPUCCH_ResourceIndicatorDCI_1_2_r16 = new Asn1Integer();
               numberOfBitsForPUCCH_ResourceIndicatorDCI_1_2_r16.decode (buffer, 0, 3);

               buffer.invokeCharacters(numberOfBitsForPUCCH_ResourceIndicatorDCI_1_2_r16.toString());
               buffer.getContext().eventDispatcher.endElement("numberOfBitsForPUCCH_ResourceIndicatorDCI_1_2_r16", -1);
            }
            else {
               numberOfBitsForPUCCH_ResourceIndicatorDCI_1_2_r16 = null;
            }

            // decode dmrs_UplinkTransformPrecodingPUCCH_r16

            if (dmrs_UplinkTransformPrecodingPUCCH_r16Present) {
               buffer.getContext().eventDispatcher.startElement("dmrs_UplinkTransformPrecodingPUCCH_r16", -1);

               int tval = PUCCH_Config_dmrs_UplinkTransformPrecodingPUCCH_r16.decodeEnumValue (buffer);
               dmrs_UplinkTransformPrecodingPUCCH_r16 = PUCCH_Config_dmrs_UplinkTransformPrecodingPUCCH_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("dmrs_UplinkTransformPrecodingPUCCH_r16", -1);
            }
            else {
               dmrs_UplinkTransformPrecodingPUCCH_r16 = null;
            }

            // decode spatialRelationInfoToAddModListSizeExt_v1610

            if (spatialRelationInfoToAddModListSizeExt_v1610Present) {
               buffer.getContext().eventDispatcher.startElement("spatialRelationInfoToAddModListSizeExt_v1610", -1);

               spatialRelationInfoToAddModListSizeExt_v1610 = new PUCCH_Config_spatialRelationInfoToAddModListSizeExt_v1610();
               spatialRelationInfoToAddModListSizeExt_v1610.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("spatialRelationInfoToAddModListSizeExt_v1610", -1);
            }
            else {
               spatialRelationInfoToAddModListSizeExt_v1610 = null;
            }

            // decode spatialRelationInfoToReleaseListSizeExt_v1610

            if (spatialRelationInfoToReleaseListSizeExt_v1610Present) {
               buffer.getContext().eventDispatcher.startElement("spatialRelationInfoToReleaseListSizeExt_v1610", -1);

               spatialRelationInfoToReleaseListSizeExt_v1610 = new PUCCH_Config_spatialRelationInfoToReleaseListSizeExt_v1610();
               spatialRelationInfoToReleaseListSizeExt_v1610.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("spatialRelationInfoToReleaseListSizeExt_v1610", -1);
            }
            else {
               spatialRelationInfoToReleaseListSizeExt_v1610 = null;
            }

            // decode spatialRelationInfoToAddModListExt_v1610

            if (spatialRelationInfoToAddModListExt_v1610Present) {
               buffer.getContext().eventDispatcher.startElement("spatialRelationInfoToAddModListExt_v1610", -1);

               spatialRelationInfoToAddModListExt_v1610 = new PUCCH_Config_spatialRelationInfoToAddModListExt_v1610();
               spatialRelationInfoToAddModListExt_v1610.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("spatialRelationInfoToAddModListExt_v1610", -1);
            }
            else {
               spatialRelationInfoToAddModListExt_v1610 = null;
            }

            // decode spatialRelationInfoToReleaseListExt_v1610

            if (spatialRelationInfoToReleaseListExt_v1610Present) {
               buffer.getContext().eventDispatcher.startElement("spatialRelationInfoToReleaseListExt_v1610", -1);

               spatialRelationInfoToReleaseListExt_v1610 = new PUCCH_Config_spatialRelationInfoToReleaseListExt_v1610();
               spatialRelationInfoToReleaseListExt_v1610.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("spatialRelationInfoToReleaseListExt_v1610", -1);
            }
            else {
               spatialRelationInfoToReleaseListExt_v1610 = null;
            }

            // decode resourceGroupToAddModList_r16

            if (resourceGroupToAddModList_r16Present) {
               buffer.getContext().eventDispatcher.startElement("resourceGroupToAddModList_r16", -1);

               resourceGroupToAddModList_r16 = new PUCCH_Config_resourceGroupToAddModList_r16();
               resourceGroupToAddModList_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("resourceGroupToAddModList_r16", -1);
            }
            else {
               resourceGroupToAddModList_r16 = null;
            }

            // decode resourceGroupToReleaseList_r16

            if (resourceGroupToReleaseList_r16Present) {
               buffer.getContext().eventDispatcher.startElement("resourceGroupToReleaseList_r16", -1);

               resourceGroupToReleaseList_r16 = new PUCCH_Config_resourceGroupToReleaseList_r16();
               resourceGroupToReleaseList_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("resourceGroupToReleaseList_r16", -1);
            }
            else {
               resourceGroupToReleaseList_r16 = null;
            }

            // decode sps_PUCCH_AN_List_r16

            if (sps_PUCCH_AN_List_r16Present) {
               buffer.getContext().eventDispatcher.startElement("sps_PUCCH_AN_List_r16", -1);

               sps_PUCCH_AN_List_r16 = new PUCCH_Config_sps_PUCCH_AN_List_r16();
               sps_PUCCH_AN_List_r16.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("sps_PUCCH_AN_List_r16", -1);
            }
            else {
               sps_PUCCH_AN_List_r16 = null;
            }

            // decode schedulingRequestResourceToAddModListExt_v1610

            if (schedulingRequestResourceToAddModListExt_v1610Present) {
               buffer.getContext().eventDispatcher.startElement("schedulingRequestResourceToAddModListExt_v1610", -1);

               schedulingRequestResourceToAddModListExt_v1610 = new PUCCH_Config_schedulingRequestResourceToAddModListExt_v1610();
               schedulingRequestResourceToAddModListExt_v1610.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("schedulingRequestResourceToAddModListExt_v1610", -1);
            }
            else {
               schedulingRequestResourceToAddModListExt_v1610 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (mV2ExtPresent ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((resourceSetToAddModList != null), null);
      buffer.encodeBit ((resourceSetToReleaseList != null), null);
      buffer.encodeBit ((resourceToAddModList != null), null);
      buffer.encodeBit ((resourceToReleaseList != null), null);
      buffer.encodeBit ((format1 != null), null);
      buffer.encodeBit ((format2 != null), null);
      buffer.encodeBit ((format3 != null), null);
      buffer.encodeBit ((format4 != null), null);
      buffer.encodeBit ((schedulingRequestResourceToAddModList != null), null);
      buffer.encodeBit ((schedulingRequestResourceToReleaseList != null), null);
      buffer.encodeBit ((multi_CSI_PUCCH_ResourceList != null), null);
      buffer.encodeBit ((dl_DataToUL_ACK != null), null);
      buffer.encodeBit ((spatialRelationInfoToAddModList != null), null);
      buffer.encodeBit ((spatialRelationInfoToReleaseList != null), null);
      buffer.encodeBit ((pucch_PowerControl != null), null);

      // encode resourceSetToAddModList

      if (resourceSetToAddModList != null) {
         buffer.getContext().eventDispatcher.startElement("resourceSetToAddModList", -1);

         resourceSetToAddModList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("resourceSetToAddModList", -1);
      }

      // encode resourceSetToReleaseList

      if (resourceSetToReleaseList != null) {
         buffer.getContext().eventDispatcher.startElement("resourceSetToReleaseList", -1);

         resourceSetToReleaseList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("resourceSetToReleaseList", -1);
      }

      // encode resourceToAddModList

      if (resourceToAddModList != null) {
         buffer.getContext().eventDispatcher.startElement("resourceToAddModList", -1);

         resourceToAddModList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("resourceToAddModList", -1);
      }

      // encode resourceToReleaseList

      if (resourceToReleaseList != null) {
         buffer.getContext().eventDispatcher.startElement("resourceToReleaseList", -1);

         resourceToReleaseList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("resourceToReleaseList", -1);
      }

      // encode format1

      if (format1 != null) {
         buffer.getContext().eventDispatcher.startElement("format1", -1);

         format1.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("format1", -1);
      }

      // encode format2

      if (format2 != null) {
         buffer.getContext().eventDispatcher.startElement("format2", -1);

         format2.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("format2", -1);
      }

      // encode format3

      if (format3 != null) {
         buffer.getContext().eventDispatcher.startElement("format3", -1);

         format3.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("format3", -1);
      }

      // encode format4

      if (format4 != null) {
         buffer.getContext().eventDispatcher.startElement("format4", -1);

         format4.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("format4", -1);
      }

      // encode schedulingRequestResourceToAddModList

      if (schedulingRequestResourceToAddModList != null) {
         buffer.getContext().eventDispatcher.startElement("schedulingRequestResourceToAddModList", -1);

         schedulingRequestResourceToAddModList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("schedulingRequestResourceToAddModList", -1);
      }

      // encode schedulingRequestResourceToReleaseList

      if (schedulingRequestResourceToReleaseList != null) {
         buffer.getContext().eventDispatcher.startElement("schedulingRequestResourceToReleaseList", -1);

         schedulingRequestResourceToReleaseList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("schedulingRequestResourceToReleaseList", -1);
      }

      // encode multi_CSI_PUCCH_ResourceList

      if (multi_CSI_PUCCH_ResourceList != null) {
         buffer.getContext().eventDispatcher.startElement("multi_CSI_PUCCH_ResourceList", -1);

         multi_CSI_PUCCH_ResourceList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("multi_CSI_PUCCH_ResourceList", -1);
      }

      // encode dl_DataToUL_ACK

      if (dl_DataToUL_ACK != null) {
         buffer.getContext().eventDispatcher.startElement("dl_DataToUL_ACK", -1);

         dl_DataToUL_ACK.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("dl_DataToUL_ACK", -1);
      }

      // encode spatialRelationInfoToAddModList

      if (spatialRelationInfoToAddModList != null) {
         buffer.getContext().eventDispatcher.startElement("spatialRelationInfoToAddModList", -1);

         spatialRelationInfoToAddModList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("spatialRelationInfoToAddModList", -1);
      }

      // encode spatialRelationInfoToReleaseList

      if (spatialRelationInfoToReleaseList != null) {
         buffer.getContext().eventDispatcher.startElement("spatialRelationInfoToReleaseList", -1);

         spatialRelationInfoToReleaseList.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("spatialRelationInfoToReleaseList", -1);
      }

      // encode pucch_PowerControl

      if (pucch_PowerControl != null) {
         buffer.getContext().eventDispatcher.startElement("pucch_PowerControl", -1);

         pucch_PowerControl.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("pucch_PowerControl", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 1;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit (mV2ExtPresent, null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         if (mV2ExtPresent) {
            buffer.reset();
            buffer.encodeBit ((resourceToAddModListExt_r16 != null), "optbit");
            buffer.encodeBit ((dl_DataToUL_ACK_r16 != null), "optbit");
            buffer.encodeBit ((ul_AccessConfigListDCI_1_1_r16 != null), "optbit");
            buffer.encodeBit ((subslotLengthForPUCCH_r16 != null), "optbit");
            buffer.encodeBit ((dl_DataToUL_ACK_DCI_1_2_r16 != null), "optbit");
            buffer.encodeBit ((numberOfBitsForPUCCH_ResourceIndicatorDCI_1_2_r16 != null), "optbit");
            buffer.encodeBit ((dmrs_UplinkTransformPrecodingPUCCH_r16 != null), "optbit");
            buffer.encodeBit ((spatialRelationInfoToAddModListSizeExt_v1610 != null), "optbit");
            buffer.encodeBit ((spatialRelationInfoToReleaseListSizeExt_v1610 != null), "optbit");
            buffer.encodeBit ((spatialRelationInfoToAddModListExt_v1610 != null), "optbit");
            buffer.encodeBit ((spatialRelationInfoToReleaseListExt_v1610 != null), "optbit");
            buffer.encodeBit ((resourceGroupToAddModList_r16 != null), "optbit");
            buffer.encodeBit ((resourceGroupToReleaseList_r16 != null), "optbit");
            buffer.encodeBit ((sps_PUCCH_AN_List_r16 != null), "optbit");
            buffer.encodeBit ((schedulingRequestResourceToAddModListExt_v1610 != null), "optbit");
            if (resourceToAddModListExt_r16 != null) {
               resourceToAddModListExt_r16.encode (buffer);
            }
            if (dl_DataToUL_ACK_r16 != null) {
               dl_DataToUL_ACK_r16.encode (buffer);
            }
            if (ul_AccessConfigListDCI_1_1_r16 != null) {
               ul_AccessConfigListDCI_1_1_r16.encode (buffer);
            }
            if (subslotLengthForPUCCH_r16 != null) {
               subslotLengthForPUCCH_r16.encode (buffer);
            }
            if (dl_DataToUL_ACK_DCI_1_2_r16 != null) {
               dl_DataToUL_ACK_DCI_1_2_r16.encode (buffer);
            }
            if (numberOfBitsForPUCCH_ResourceIndicatorDCI_1_2_r16 != null) {
               numberOfBitsForPUCCH_ResourceIndicatorDCI_1_2_r16.encode (buffer, 0, 3);
            }
            if (dmrs_UplinkTransformPrecodingPUCCH_r16 != null) {
               dmrs_UplinkTransformPrecodingPUCCH_r16.encode (buffer);
            }
            if (spatialRelationInfoToAddModListSizeExt_v1610 != null) {
               spatialRelationInfoToAddModListSizeExt_v1610.encode (buffer);
            }
            if (spatialRelationInfoToReleaseListSizeExt_v1610 != null) {
               spatialRelationInfoToReleaseListSizeExt_v1610.encode (buffer);
            }
            if (spatialRelationInfoToAddModListExt_v1610 != null) {
               spatialRelationInfoToAddModListExt_v1610.encode (buffer);
            }
            if (spatialRelationInfoToReleaseListExt_v1610 != null) {
               spatialRelationInfoToReleaseListExt_v1610.encode (buffer);
            }
            if (resourceGroupToAddModList_r16 != null) {
               resourceGroupToAddModList_r16.encode (buffer);
            }
            if (resourceGroupToReleaseList_r16 != null) {
               resourceGroupToReleaseList_r16.encode (buffer);
            }
            if (sps_PUCCH_AN_List_r16 != null) {
               sps_PUCCH_AN_List_r16.encode (buffer);
            }
            if (schedulingRequestResourceToAddModListExt_v1610 != null) {
               schedulingRequestResourceToAddModListExt_v1610.encode (buffer);
            }
            mainBuffer.encodeOpenType (buffer, null);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (resourceSetToAddModList != null) resourceSetToAddModList.print (_sb, "resourceSetToAddModList", _level+1);
      if (resourceSetToReleaseList != null) resourceSetToReleaseList.print (_sb, "resourceSetToReleaseList", _level+1);
      if (resourceToAddModList != null) resourceToAddModList.print (_sb, "resourceToAddModList", _level+1);
      if (resourceToReleaseList != null) resourceToReleaseList.print (_sb, "resourceToReleaseList", _level+1);
      if (format1 != null) format1.print (_sb, "format1", _level+1);
      if (format2 != null) format2.print (_sb, "format2", _level+1);
      if (format3 != null) format3.print (_sb, "format3", _level+1);
      if (format4 != null) format4.print (_sb, "format4", _level+1);
      if (schedulingRequestResourceToAddModList != null) schedulingRequestResourceToAddModList.print (_sb, "schedulingRequestResourceToAddModList", _level+1);
      if (schedulingRequestResourceToReleaseList != null) schedulingRequestResourceToReleaseList.print (_sb, "schedulingRequestResourceToReleaseList", _level+1);
      if (multi_CSI_PUCCH_ResourceList != null) multi_CSI_PUCCH_ResourceList.print (_sb, "multi_CSI_PUCCH_ResourceList", _level+1);
      if (dl_DataToUL_ACK != null) dl_DataToUL_ACK.print (_sb, "dl_DataToUL_ACK", _level+1);
      if (spatialRelationInfoToAddModList != null) spatialRelationInfoToAddModList.print (_sb, "spatialRelationInfoToAddModList", _level+1);
      if (spatialRelationInfoToReleaseList != null) spatialRelationInfoToReleaseList.print (_sb, "spatialRelationInfoToReleaseList", _level+1);
      if (pucch_PowerControl != null) pucch_PowerControl.print (_sb, "pucch_PowerControl", _level+1);
      if (resourceToAddModListExt_r16 != null) resourceToAddModListExt_r16.print (_sb, "resourceToAddModListExt_r16", _level+1);
      if (dl_DataToUL_ACK_r16 != null) dl_DataToUL_ACK_r16.print (_sb, "dl_DataToUL_ACK_r16", _level+1);
      if (ul_AccessConfigListDCI_1_1_r16 != null) ul_AccessConfigListDCI_1_1_r16.print (_sb, "ul_AccessConfigListDCI_1_1_r16", _level+1);
      if (subslotLengthForPUCCH_r16 != null) subslotLengthForPUCCH_r16.print (_sb, "subslotLengthForPUCCH_r16", _level+1);
      if (dl_DataToUL_ACK_DCI_1_2_r16 != null) dl_DataToUL_ACK_DCI_1_2_r16.print (_sb, "dl_DataToUL_ACK_DCI_1_2_r16", _level+1);
      if (numberOfBitsForPUCCH_ResourceIndicatorDCI_1_2_r16 != null) numberOfBitsForPUCCH_ResourceIndicatorDCI_1_2_r16.print (_sb, "numberOfBitsForPUCCH_ResourceIndicatorDCI_1_2_r16", _level+1);
      if (dmrs_UplinkTransformPrecodingPUCCH_r16 != null) dmrs_UplinkTransformPrecodingPUCCH_r16.print (_sb, "dmrs_UplinkTransformPrecodingPUCCH_r16", _level+1);
      if (spatialRelationInfoToAddModListSizeExt_v1610 != null) spatialRelationInfoToAddModListSizeExt_v1610.print (_sb, "spatialRelationInfoToAddModListSizeExt_v1610", _level+1);
      if (spatialRelationInfoToReleaseListSizeExt_v1610 != null) spatialRelationInfoToReleaseListSizeExt_v1610.print (_sb, "spatialRelationInfoToReleaseListSizeExt_v1610", _level+1);
      if (spatialRelationInfoToAddModListExt_v1610 != null) spatialRelationInfoToAddModListExt_v1610.print (_sb, "spatialRelationInfoToAddModListExt_v1610", _level+1);
      if (spatialRelationInfoToReleaseListExt_v1610 != null) spatialRelationInfoToReleaseListExt_v1610.print (_sb, "spatialRelationInfoToReleaseListExt_v1610", _level+1);
      if (resourceGroupToAddModList_r16 != null) resourceGroupToAddModList_r16.print (_sb, "resourceGroupToAddModList_r16", _level+1);
      if (resourceGroupToReleaseList_r16 != null) resourceGroupToReleaseList_r16.print (_sb, "resourceGroupToReleaseList_r16", _level+1);
      if (sps_PUCCH_AN_List_r16 != null) sps_PUCCH_AN_List_r16.print (_sb, "sps_PUCCH_AN_List_r16", _level+1);
      if (schedulingRequestResourceToAddModListExt_v1610 != null) schedulingRequestResourceToAddModListExt_v1610.print (_sb, "schedulingRequestResourceToAddModListExt_v1610", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
