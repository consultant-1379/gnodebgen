/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class Phy_ParametersMRDC extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "Phy-ParametersMRDC";
   }

   public Phy_ParametersMRDC_naics_Capability_List naics_Capability_List;  // optional
   public boolean mV2ExtPresent;
   public CarrierAggregationVariant spCellPlacement;  // optional
   public boolean mV3ExtPresent;
   public Phy_ParametersMRDC_tdd_PCellUL_TX_AllUL_Subframe_r16 tdd_PCellUL_TX_AllUL_Subframe_r16 = null;  // optional
   public Phy_ParametersMRDC_fdd_PCellUL_TX_AllUL_Subframe_r16 fdd_PCellUL_TX_AllUL_Subframe_r16 = null;  // optional
   public Asn1OpenExt extElem1;

   public Phy_ParametersMRDC () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public Phy_ParametersMRDC (
      Phy_ParametersMRDC_naics_Capability_List naics_Capability_List_,
      CarrierAggregationVariant spCellPlacement_,
      Phy_ParametersMRDC_tdd_PCellUL_TX_AllUL_Subframe_r16 tdd_PCellUL_TX_AllUL_Subframe_r16_,
      Phy_ParametersMRDC_fdd_PCellUL_TX_AllUL_Subframe_r16 fdd_PCellUL_TX_AllUL_Subframe_r16_
   ) {
      super();
      naics_Capability_List = naics_Capability_List_;
      spCellPlacement = spCellPlacement_;
      tdd_PCellUL_TX_AllUL_Subframe_r16 = tdd_PCellUL_TX_AllUL_Subframe_r16_;
      fdd_PCellUL_TX_AllUL_Subframe_r16 = fdd_PCellUL_TX_AllUL_Subframe_r16_;
   }

   public void init () {
      naics_Capability_List = null;
      spCellPlacement = null;
      tdd_PCellUL_TX_AllUL_Subframe_r16 = null;
      fdd_PCellUL_TX_AllUL_Subframe_r16 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return naics_Capability_List;
         case 1: return spCellPlacement;
         case 2: return tdd_PCellUL_TX_AllUL_Subframe_r16;
         case 3: return fdd_PCellUL_TX_AllUL_Subframe_r16;
         case 4: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "naics-Capability-List";
         case 1: return "spCellPlacement";
         case 2: return "tdd-PCellUL-TX-AllUL-Subframe-r16";
         case 3: return "fdd-PCellUL-TX-AllUL-Subframe-r16";
         case 4: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean naics_Capability_ListPresent = buffer.decodeBit ("naics_Capability_ListPresent");

      // decode naics_Capability_List

      if (naics_Capability_ListPresent) {
         buffer.getContext().eventDispatcher.startElement("naics_Capability_List", -1);

         naics_Capability_List = new Phy_ParametersMRDC_naics_Capability_List();
         naics_Capability_List.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("naics_Capability_List", -1);
      }
      else {
         naics_Capability_List = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean spCellPlacementPresent = buffer.decodeBit ("spCellPlacementPresent");

            // decode spCellPlacement

            if (spCellPlacementPresent) {
               buffer.getContext().eventDispatcher.startElement("spCellPlacement", -1);

               spCellPlacement = new CarrierAggregationVariant();
               spCellPlacement.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("spCellPlacement", -1);
            }
            else {
               spCellPlacement = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean tdd_PCellUL_TX_AllUL_Subframe_r16Present = buffer.decodeBit ("tdd_PCellUL_TX_AllUL_Subframe_r16Present");

            boolean fdd_PCellUL_TX_AllUL_Subframe_r16Present = buffer.decodeBit ("fdd_PCellUL_TX_AllUL_Subframe_r16Present");

            // decode tdd_PCellUL_TX_AllUL_Subframe_r16

            if (tdd_PCellUL_TX_AllUL_Subframe_r16Present) {
               buffer.getContext().eventDispatcher.startElement("tdd_PCellUL_TX_AllUL_Subframe_r16", -1);

               int tval = Phy_ParametersMRDC_tdd_PCellUL_TX_AllUL_Subframe_r16.decodeEnumValue (buffer);
               tdd_PCellUL_TX_AllUL_Subframe_r16 = Phy_ParametersMRDC_tdd_PCellUL_TX_AllUL_Subframe_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("tdd_PCellUL_TX_AllUL_Subframe_r16", -1);
            }
            else {
               tdd_PCellUL_TX_AllUL_Subframe_r16 = null;
            }

            // decode fdd_PCellUL_TX_AllUL_Subframe_r16

            if (fdd_PCellUL_TX_AllUL_Subframe_r16Present) {
               buffer.getContext().eventDispatcher.startElement("fdd_PCellUL_TX_AllUL_Subframe_r16", -1);

               int tval = Phy_ParametersMRDC_fdd_PCellUL_TX_AllUL_Subframe_r16.decodeEnumValue (buffer);
               fdd_PCellUL_TX_AllUL_Subframe_r16 = Phy_ParametersMRDC_fdd_PCellUL_TX_AllUL_Subframe_r16.valueOf (tval);
               buffer.getContext().eventDispatcher.endElement("fdd_PCellUL_TX_AllUL_Subframe_r16", -1);
            }
            else {
               fdd_PCellUL_TX_AllUL_Subframe_r16 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (mV2ExtPresent ||
      mV3ExtPresent ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((naics_Capability_List != null), null);

      // encode naics_Capability_List

      if (naics_Capability_List != null) {
         buffer.getContext().eventDispatcher.startElement("naics_Capability_List", -1);

         naics_Capability_List.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("naics_Capability_List", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 2;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit (mV2ExtPresent, null);
         buffer.encodeBit (mV3ExtPresent, null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         if (mV2ExtPresent) {
            buffer.reset();
            buffer.encodeBit ((spCellPlacement != null), "optbit");
            if (spCellPlacement != null) {
               spCellPlacement.encode (buffer);
            }
            mainBuffer.encodeOpenType (buffer, null);
         }

         if (mV3ExtPresent) {
            buffer.reset();
            buffer.encodeBit ((tdd_PCellUL_TX_AllUL_Subframe_r16 != null), "optbit");
            buffer.encodeBit ((fdd_PCellUL_TX_AllUL_Subframe_r16 != null), "optbit");
            if (tdd_PCellUL_TX_AllUL_Subframe_r16 != null) {
               tdd_PCellUL_TX_AllUL_Subframe_r16.encode (buffer);
            }
            if (fdd_PCellUL_TX_AllUL_Subframe_r16 != null) {
               fdd_PCellUL_TX_AllUL_Subframe_r16.encode (buffer);
            }
            mainBuffer.encodeOpenType (buffer, null);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (naics_Capability_List != null) naics_Capability_List.print (_sb, "naics_Capability_List", _level+1);
      if (spCellPlacement != null) spCellPlacement.print (_sb, "spCellPlacement", _level+1);
      if (tdd_PCellUL_TX_AllUL_Subframe_r16 != null) tdd_PCellUL_TX_AllUL_Subframe_r16.print (_sb, "tdd_PCellUL_TX_AllUL_Subframe_r16", _level+1);
      if (fdd_PCellUL_TX_AllUL_Subframe_r16 != null) fdd_PCellUL_TX_AllUL_Subframe_r16.print (_sb, "fdd_PCellUL_TX_AllUL_Subframe_r16", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
