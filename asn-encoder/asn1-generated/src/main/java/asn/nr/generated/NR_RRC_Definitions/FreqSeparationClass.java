/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class FreqSeparationClass extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "FreqSeparationClass";
   }

   // Integer constants for switch-case
   public static final int _MHZ800 = 0;
   public static final int _MHZ1200 = 1;
   public static final int _MHZ1400 = 2;

   // Singleton instances of FreqSeparationClass
   protected static final FreqSeparationClass _mhz800 = new FreqSeparationClass(0);
   protected static final FreqSeparationClass _mhz1200 = new FreqSeparationClass(1);
   protected static final FreqSeparationClass _mhz1400 = new FreqSeparationClass(2);
   private static FreqSeparationClass __undefined = new FreqSeparationClass(-999);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    */
   protected FreqSeparationClass (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for mhz800.
    */
   public static FreqSeparationClass mhz800() {
      return _mhz800;
   }

   /**
    * Singleton accessor method for mhz1200.
    */
   public static FreqSeparationClass mhz1200() {
      return _mhz1200;
   }

   /**
    * Singleton accessor method for mhz1400.
    */
   public static FreqSeparationClass mhz1400() {
      return _mhz1400;
   }

   /** Undefined value. */
   protected static FreqSeparationClass __undefined_() { return __undefined; }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return FreqSeparationClass.valueOf( FreqSeparationClass.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static FreqSeparationClass valueOf (int _value)
   {
      switch ((int)_value) {
         case 0: return mhz800();
         case 1: return mhz1200();
         case 2: return mhz1400();
         default: return __undefined_();
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      boolean extbit = buffer.decodeBit ("extbit");

      if (extbit) {
         ui = buffer.decodeSmallNonNegWholeNumber ();

         return 0x7fffffff;
      }
      else {
         ui = (int) buffer.decodeConsWholeNumber (3);

         switch (ui) {
            case 0: ret =  0; break;
            case 1: ret =  1; break;
            case 2: ret =  2; break;
            default: throw new Asn1InvalidEnumException (ui);
         }
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (FreqSeparationClass.valueOf(ret).toString());

      return ret;
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      boolean extbit = false;

      switch ((int)value) {
         case 0: ui = 0; /* mhz800 */break;
         case 1: ui = 1; /* mhz1200 */break;
         case 2: ui = 2; /* mhz1400 */break;
         default:
            ui = (int) value;
            extbit = true;
      }

      buffer.encodeBit (extbit, "extbit");

      if (extbit) {
         buffer.encodeSmallNonNegWholeNumber (ui);
      }
      else {
         buffer.encodeConsWholeNumber (ui, 3);
      }
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("mhz800");
         case 1: return ("mhz1200");
         case 2: return ("mhz1400");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
