/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class DormantBWP_Config_r16 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "DormantBWP-Config-r16";
   }

   public BWP_Id dormantBWP_Id_r16;  // optional
   public DormantBWP_Config_r16_withinActiveTimeConfig_r16 withinActiveTimeConfig_r16;  // optional
   public DormantBWP_Config_r16_outsideActiveTimeConfig_r16 outsideActiveTimeConfig_r16;  // optional

   public DormantBWP_Config_r16 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public DormantBWP_Config_r16 (
      BWP_Id dormantBWP_Id_r16_,
      DormantBWP_Config_r16_withinActiveTimeConfig_r16 withinActiveTimeConfig_r16_,
      DormantBWP_Config_r16_outsideActiveTimeConfig_r16 outsideActiveTimeConfig_r16_
   ) {
      super();
      dormantBWP_Id_r16 = dormantBWP_Id_r16_;
      withinActiveTimeConfig_r16 = withinActiveTimeConfig_r16_;
      outsideActiveTimeConfig_r16 = outsideActiveTimeConfig_r16_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public DormantBWP_Config_r16 (long dormantBWP_Id_r16_,
      DormantBWP_Config_r16_withinActiveTimeConfig_r16 withinActiveTimeConfig_r16_,
      DormantBWP_Config_r16_outsideActiveTimeConfig_r16 outsideActiveTimeConfig_r16_
   ) {
      super();
      dormantBWP_Id_r16 = new BWP_Id (dormantBWP_Id_r16_);
      withinActiveTimeConfig_r16 = withinActiveTimeConfig_r16_;
      outsideActiveTimeConfig_r16 = outsideActiveTimeConfig_r16_;
   }

   public void init () {
      dormantBWP_Id_r16 = null;
      withinActiveTimeConfig_r16 = null;
      outsideActiveTimeConfig_r16 = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return dormantBWP_Id_r16;
         case 1: return withinActiveTimeConfig_r16;
         case 2: return outsideActiveTimeConfig_r16;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "dormantBWP-Id-r16";
         case 1: return "withinActiveTimeConfig-r16";
         case 2: return "outsideActiveTimeConfig-r16";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean dormantBWP_Id_r16Present = buffer.decodeBit ("dormantBWP_Id_r16Present");
      boolean withinActiveTimeConfig_r16Present = buffer.decodeBit ("withinActiveTimeConfig_r16Present");
      boolean outsideActiveTimeConfig_r16Present = buffer.decodeBit ("outsideActiveTimeConfig_r16Present");

      // decode dormantBWP_Id_r16

      if (dormantBWP_Id_r16Present) {
         buffer.getContext().eventDispatcher.startElement("dormantBWP_Id_r16", -1);

         dormantBWP_Id_r16 = new BWP_Id();
         dormantBWP_Id_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("dormantBWP_Id_r16", -1);
      }
      else {
         dormantBWP_Id_r16 = null;
      }

      // decode withinActiveTimeConfig_r16

      if (withinActiveTimeConfig_r16Present) {
         buffer.getContext().eventDispatcher.startElement("withinActiveTimeConfig_r16", -1);

         withinActiveTimeConfig_r16 = new DormantBWP_Config_r16_withinActiveTimeConfig_r16();
         withinActiveTimeConfig_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("withinActiveTimeConfig_r16", -1);
      }
      else {
         withinActiveTimeConfig_r16 = null;
      }

      // decode outsideActiveTimeConfig_r16

      if (outsideActiveTimeConfig_r16Present) {
         buffer.getContext().eventDispatcher.startElement("outsideActiveTimeConfig_r16", -1);

         outsideActiveTimeConfig_r16 = new DormantBWP_Config_r16_outsideActiveTimeConfig_r16();
         outsideActiveTimeConfig_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("outsideActiveTimeConfig_r16", -1);
      }
      else {
         outsideActiveTimeConfig_r16 = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((dormantBWP_Id_r16 != null), null);
      buffer.encodeBit ((withinActiveTimeConfig_r16 != null), null);
      buffer.encodeBit ((outsideActiveTimeConfig_r16 != null), null);

      // encode dormantBWP_Id_r16

      if (dormantBWP_Id_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("dormantBWP_Id_r16", -1);

         dormantBWP_Id_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("dormantBWP_Id_r16", -1);
      }

      // encode withinActiveTimeConfig_r16

      if (withinActiveTimeConfig_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("withinActiveTimeConfig_r16", -1);

         withinActiveTimeConfig_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("withinActiveTimeConfig_r16", -1);
      }

      // encode outsideActiveTimeConfig_r16

      if (outsideActiveTimeConfig_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("outsideActiveTimeConfig_r16", -1);

         outsideActiveTimeConfig_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("outsideActiveTimeConfig_r16", -1);
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (dormantBWP_Id_r16 != null) dormantBWP_Id_r16.print (_sb, "dormantBWP_Id_r16", _level+1);
      if (withinActiveTimeConfig_r16 != null) withinActiveTimeConfig_r16.print (_sb, "withinActiveTimeConfig_r16", _level+1);
      if (outsideActiveTimeConfig_r16 != null) outsideActiveTimeConfig_r16.print (_sb, "outsideActiveTimeConfig_r16", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
