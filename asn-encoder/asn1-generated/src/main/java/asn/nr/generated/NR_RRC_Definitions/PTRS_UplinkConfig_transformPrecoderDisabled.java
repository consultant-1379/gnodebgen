/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class PTRS_UplinkConfig_transformPrecoderDisabled extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public PTRS_UplinkConfig_transformPrecoderDisabled_frequencyDensity frequencyDensity;  // optional
   public PTRS_UplinkConfig_transformPrecoderDisabled_timeDensity timeDensity;  // optional
   public PTRS_UplinkConfig_transformPrecoderDisabled_maxNrofPorts maxNrofPorts = null;
   public PTRS_UplinkConfig_transformPrecoderDisabled_resourceElementOffset resourceElementOffset = null;  // optional
   public PTRS_UplinkConfig_transformPrecoderDisabled_ptrs_Power ptrs_Power = null;

   public PTRS_UplinkConfig_transformPrecoderDisabled () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public PTRS_UplinkConfig_transformPrecoderDisabled (
      PTRS_UplinkConfig_transformPrecoderDisabled_frequencyDensity frequencyDensity_,
      PTRS_UplinkConfig_transformPrecoderDisabled_timeDensity timeDensity_,
      PTRS_UplinkConfig_transformPrecoderDisabled_maxNrofPorts maxNrofPorts_,
      PTRS_UplinkConfig_transformPrecoderDisabled_resourceElementOffset resourceElementOffset_,
      PTRS_UplinkConfig_transformPrecoderDisabled_ptrs_Power ptrs_Power_
   ) {
      super();
      frequencyDensity = frequencyDensity_;
      timeDensity = timeDensity_;
      maxNrofPorts = maxNrofPorts_;
      resourceElementOffset = resourceElementOffset_;
      ptrs_Power = ptrs_Power_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public PTRS_UplinkConfig_transformPrecoderDisabled (
      PTRS_UplinkConfig_transformPrecoderDisabled_maxNrofPorts maxNrofPorts_,
      PTRS_UplinkConfig_transformPrecoderDisabled_ptrs_Power ptrs_Power_
   ) {
      super();
      maxNrofPorts = maxNrofPorts_;
      ptrs_Power = ptrs_Power_;
   }

   public void init () {
      frequencyDensity = null;
      timeDensity = null;
      maxNrofPorts = null;
      resourceElementOffset = null;
      ptrs_Power = null;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return frequencyDensity;
         case 1: return timeDensity;
         case 2: return maxNrofPorts;
         case 3: return resourceElementOffset;
         case 4: return ptrs_Power;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "frequencyDensity";
         case 1: return "timeDensity";
         case 2: return "maxNrofPorts";
         case 3: return "resourceElementOffset";
         case 4: return "ptrs-Power";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean frequencyDensityPresent = buffer.decodeBit ("frequencyDensityPresent");
      boolean timeDensityPresent = buffer.decodeBit ("timeDensityPresent");
      boolean resourceElementOffsetPresent = buffer.decodeBit ("resourceElementOffsetPresent");

      // decode frequencyDensity

      if (frequencyDensityPresent) {
         buffer.getContext().eventDispatcher.startElement("frequencyDensity", -1);

         frequencyDensity = new PTRS_UplinkConfig_transformPrecoderDisabled_frequencyDensity();
         frequencyDensity.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("frequencyDensity", -1);
      }
      else {
         frequencyDensity = null;
      }

      // decode timeDensity

      if (timeDensityPresent) {
         buffer.getContext().eventDispatcher.startElement("timeDensity", -1);

         timeDensity = new PTRS_UplinkConfig_transformPrecoderDisabled_timeDensity();
         timeDensity.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("timeDensity", -1);
      }
      else {
         timeDensity = null;
      }

      // decode maxNrofPorts

      buffer.getContext().eventDispatcher.startElement("maxNrofPorts", -1);

      {
         int tval = PTRS_UplinkConfig_transformPrecoderDisabled_maxNrofPorts.decodeEnumValue (buffer);
         maxNrofPorts = PTRS_UplinkConfig_transformPrecoderDisabled_maxNrofPorts.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("maxNrofPorts", -1);

      // decode resourceElementOffset

      if (resourceElementOffsetPresent) {
         buffer.getContext().eventDispatcher.startElement("resourceElementOffset", -1);

         int tval = PTRS_UplinkConfig_transformPrecoderDisabled_resourceElementOffset.decodeEnumValue (buffer);
         resourceElementOffset = PTRS_UplinkConfig_transformPrecoderDisabled_resourceElementOffset.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("resourceElementOffset", -1);
      }
      else {
         resourceElementOffset = null;
      }

      // decode ptrs_Power

      buffer.getContext().eventDispatcher.startElement("ptrs_Power", -1);

      {
         int tval = PTRS_UplinkConfig_transformPrecoderDisabled_ptrs_Power.decodeEnumValue (buffer);
         ptrs_Power = PTRS_UplinkConfig_transformPrecoderDisabled_ptrs_Power.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("ptrs_Power", -1);

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((frequencyDensity != null), null);
      buffer.encodeBit ((timeDensity != null), null);
      buffer.encodeBit ((resourceElementOffset != null), null);

      // encode frequencyDensity

      if (frequencyDensity != null) {
         buffer.getContext().eventDispatcher.startElement("frequencyDensity", -1);

         frequencyDensity.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("frequencyDensity", -1);
      }

      // encode timeDensity

      if (timeDensity != null) {
         buffer.getContext().eventDispatcher.startElement("timeDensity", -1);

         timeDensity.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("timeDensity", -1);
      }

      // encode maxNrofPorts

      if (maxNrofPorts != null) {
         buffer.getContext().eventDispatcher.startElement("maxNrofPorts", -1);

         maxNrofPorts.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("maxNrofPorts", -1);
      }
      else throw new Asn1MissingRequiredException ("maxNrofPorts");

      // encode resourceElementOffset

      if (resourceElementOffset != null) {
         buffer.getContext().eventDispatcher.startElement("resourceElementOffset", -1);

         resourceElementOffset.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("resourceElementOffset", -1);
      }

      // encode ptrs_Power

      if (ptrs_Power != null) {
         buffer.getContext().eventDispatcher.startElement("ptrs_Power", -1);

         ptrs_Power.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("ptrs_Power", -1);
      }
      else throw new Asn1MissingRequiredException ("ptrs_Power");

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (frequencyDensity != null) frequencyDensity.print (_sb, "frequencyDensity", _level+1);
      if (timeDensity != null) timeDensity.print (_sb, "timeDensity", _level+1);
      if (maxNrofPorts != null) maxNrofPorts.print (_sb, "maxNrofPorts", _level+1);
      if (resourceElementOffset != null) resourceElementOffset.print (_sb, "resourceElementOffset", _level+1);
      if (ptrs_Power != null) ptrs_Power.print (_sb, "ptrs_Power", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
