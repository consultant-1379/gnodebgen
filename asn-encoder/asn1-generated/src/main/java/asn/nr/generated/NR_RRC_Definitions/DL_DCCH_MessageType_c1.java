/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class DL_DCCH_MessageType_c1 extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CHOICE";
   }

   // Choice element identifier constants
   public final static byte _RRCRECONFIGURATION = 1;
   public final static byte _RRCRESUME = 2;
   public final static byte _RRCRELEASE = 3;
   public final static byte _RRCREESTABLISHMENT = 4;
   public final static byte _SECURITYMODECOMMAND = 5;
   public final static byte _DLINFORMATIONTRANSFER = 6;
   public final static byte _UECAPABILITYENQUIRY = 7;
   public final static byte _COUNTERCHECK = 8;
   public final static byte _MOBILITYFROMNRCOMMAND = 9;
   public final static byte _DLDEDICATEDMESSAGESEGMENT_R16 = 10;
   public final static byte _UEINFORMATIONREQUEST_R16 = 11;
   public final static byte _DLINFORMATIONTRANSFERMRDC_R16 = 12;
   public final static byte _LOGGEDMEASUREMENTCONFIGURATION_R16 = 13;
   public final static byte _SPARE3 = 14;
   public final static byte _SPARE2 = 15;
   public final static byte _SPARE1 = 16;

   public DL_DCCH_MessageType_c1 () {
      super();
   }

   public DL_DCCH_MessageType_c1 (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _RRCRECONFIGURATION: return "rrcReconfiguration";
      case _RRCRESUME: return "rrcResume";
      case _RRCRELEASE: return "rrcRelease";
      case _RRCREESTABLISHMENT: return "rrcReestablishment";
      case _SECURITYMODECOMMAND: return "securityModeCommand";
      case _DLINFORMATIONTRANSFER: return "dlInformationTransfer";
      case _UECAPABILITYENQUIRY: return "ueCapabilityEnquiry";
      case _COUNTERCHECK: return "counterCheck";
      case _MOBILITYFROMNRCOMMAND: return "mobilityFromNRCommand";
      case _DLDEDICATEDMESSAGESEGMENT_R16: return "dlDedicatedMessageSegment_r16";
      case _UEINFORMATIONREQUEST_R16: return "ueInformationRequest_r16";
      case _DLINFORMATIONTRANSFERMRDC_R16: return "dlInformationTransferMRDC_r16";
      case _LOGGEDMEASUREMENTCONFIGURATION_R16: return "loggedMeasurementConfiguration_r16";
      case _SPARE3: return "spare3";
      case _SPARE2: return "spare2";
      case _SPARE1: return "spare1";
      default: return "UNDEFINED";
      }
   }

   public void set_rrcReconfiguration (RRCReconfiguration value) {
      setElement (_RRCRECONFIGURATION, value);
   }

   public void set_rrcResume (RRCResume value) {
      setElement (_RRCRESUME, value);
   }

   public void set_rrcRelease (RRCRelease value) {
      setElement (_RRCRELEASE, value);
   }

   public void set_rrcReestablishment (RRCReestablishment value) {
      setElement (_RRCREESTABLISHMENT, value);
   }

   public void set_securityModeCommand (SecurityModeCommand value) {
      setElement (_SECURITYMODECOMMAND, value);
   }

   public void set_dlInformationTransfer (DLInformationTransfer value) {
      setElement (_DLINFORMATIONTRANSFER, value);
   }

   public void set_ueCapabilityEnquiry (UECapabilityEnquiry value) {
      setElement (_UECAPABILITYENQUIRY, value);
   }

   public void set_counterCheck (CounterCheck value) {
      setElement (_COUNTERCHECK, value);
   }

   public void set_mobilityFromNRCommand (MobilityFromNRCommand value) {
      setElement (_MOBILITYFROMNRCOMMAND, value);
   }

   public void set_dlDedicatedMessageSegment_r16 (DLDedicatedMessageSegment_r16 value) {
      setElement (_DLDEDICATEDMESSAGESEGMENT_R16, value);
   }

   public void set_ueInformationRequest_r16 (UEInformationRequest_r16 value) {
      setElement (_UEINFORMATIONREQUEST_R16, value);
   }

   public void set_dlInformationTransferMRDC_r16 (DLInformationTransferMRDC_r16 value) {
      setElement (_DLINFORMATIONTRANSFERMRDC_R16, value);
   }

   public void set_loggedMeasurementConfiguration_r16 (LoggedMeasurementConfiguration_r16 value) {
      setElement (_LOGGEDMEASUREMENTCONFIGURATION_R16, value);
   }

   public void set_spare3 () {
      setElement (_SPARE3, Asn1Null.NULL_VALUE);
   }

   public void set_spare2 () {
      setElement (_SPARE2, Asn1Null.NULL_VALUE);
   }

   public void set_spare1 () {
      setElement (_SPARE1, Asn1Null.NULL_VALUE);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int idx = (int) buffer.decodeConsWholeNumber (16, "index");
      choiceID = idx + 1;
      buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

      switch (idx) {
         // rrcReconfiguration
         case 0: { 
            RRCReconfiguration rrcReconfiguration;
            element = rrcReconfiguration = new RRCReconfiguration();
            rrcReconfiguration.decode (buffer);
            break;
         }

         // rrcResume
         case 1: { 
            RRCResume rrcResume;
            element = rrcResume = new RRCResume();
            rrcResume.decode (buffer);
            break;
         }

         // rrcRelease
         case 2: { 
            RRCRelease rrcRelease;
            element = rrcRelease = new RRCRelease();
            rrcRelease.decode (buffer);
            break;
         }

         // rrcReestablishment
         case 3: { 
            RRCReestablishment rrcReestablishment;
            element = rrcReestablishment = new RRCReestablishment();
            rrcReestablishment.decode (buffer);
            break;
         }

         // securityModeCommand
         case 4: { 
            SecurityModeCommand securityModeCommand;
            element = securityModeCommand = new SecurityModeCommand();
            securityModeCommand.decode (buffer);
            break;
         }

         // dlInformationTransfer
         case 5: { 
            DLInformationTransfer dlInformationTransfer;
            element = dlInformationTransfer = new DLInformationTransfer();
            dlInformationTransfer.decode (buffer);
            break;
         }

         // ueCapabilityEnquiry
         case 6: { 
            UECapabilityEnquiry ueCapabilityEnquiry;
            element = ueCapabilityEnquiry = new UECapabilityEnquiry();
            ueCapabilityEnquiry.decode (buffer);
            break;
         }

         // counterCheck
         case 7: { 
            CounterCheck counterCheck;
            element = counterCheck = new CounterCheck();
            counterCheck.decode (buffer);
            break;
         }

         // mobilityFromNRCommand
         case 8: { 
            MobilityFromNRCommand mobilityFromNRCommand;
            element = mobilityFromNRCommand = new MobilityFromNRCommand();
            mobilityFromNRCommand.decode (buffer);
            break;
         }

         // dlDedicatedMessageSegment_r16
         case 9: { 
            DLDedicatedMessageSegment_r16 dlDedicatedMessageSegment_r16;
            element = dlDedicatedMessageSegment_r16 = new DLDedicatedMessageSegment_r16();
            dlDedicatedMessageSegment_r16.decode (buffer);
            break;
         }

         // ueInformationRequest_r16
         case 10: { 
            UEInformationRequest_r16 ueInformationRequest_r16;
            element = ueInformationRequest_r16 = new UEInformationRequest_r16();
            ueInformationRequest_r16.decode (buffer);
            break;
         }

         // dlInformationTransferMRDC_r16
         case 11: { 
            DLInformationTransferMRDC_r16 dlInformationTransferMRDC_r16;
            element = dlInformationTransferMRDC_r16 = new DLInformationTransferMRDC_r16();
            dlInformationTransferMRDC_r16.decode (buffer);
            break;
         }

         // loggedMeasurementConfiguration_r16
         case 12: { 
            LoggedMeasurementConfiguration_r16 loggedMeasurementConfiguration_r16;
            element = loggedMeasurementConfiguration_r16 = new LoggedMeasurementConfiguration_r16();
            loggedMeasurementConfiguration_r16.decode (buffer);
            break;
         }

         // spare3
         case 13: { 
            Asn1Null spare3;
            element = spare3 = Asn1Null.NULL_VALUE;
            spare3.decode (buffer);

            buffer.invokeCharacters(spare3.toString());
            break;
         }

         // spare2
         case 14: { 
            Asn1Null spare2;
            element = spare2 = Asn1Null.NULL_VALUE;
            spare2.decode (buffer);

            buffer.invokeCharacters(spare2.toString());
            break;
         }

         // spare1
         case 15: { 
            Asn1Null spare1;
            element = spare1 = Asn1Null.NULL_VALUE;
            spare1.decode (buffer);

            buffer.invokeCharacters(spare1.toString());
            break;
         }

         default:
         throw new Asn1InvalidChoiceOptionException (buffer, idx);
      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // Encode choice index value

      buffer.encodeConsWholeNumber (choiceID - 1, 16, "index");

      buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

      switch (choiceID) {
         // rrcReconfiguration
         case _RRCRECONFIGURATION:
            RRCReconfiguration rrcReconfiguration = (RRCReconfiguration) element;
            rrcReconfiguration.encode (buffer);
            break;

         // rrcResume
         case _RRCRESUME:
            RRCResume rrcResume = (RRCResume) element;
            rrcResume.encode (buffer);
            break;

         // rrcRelease
         case _RRCRELEASE:
            RRCRelease rrcRelease = (RRCRelease) element;
            rrcRelease.encode (buffer);
            break;

         // rrcReestablishment
         case _RRCREESTABLISHMENT:
            RRCReestablishment rrcReestablishment = (RRCReestablishment) element;
            rrcReestablishment.encode (buffer);
            break;

         // securityModeCommand
         case _SECURITYMODECOMMAND:
            SecurityModeCommand securityModeCommand = (SecurityModeCommand) element;
            securityModeCommand.encode (buffer);
            break;

         // dlInformationTransfer
         case _DLINFORMATIONTRANSFER:
            DLInformationTransfer dlInformationTransfer = (DLInformationTransfer) element;
            dlInformationTransfer.encode (buffer);
            break;

         // ueCapabilityEnquiry
         case _UECAPABILITYENQUIRY:
            UECapabilityEnquiry ueCapabilityEnquiry = (UECapabilityEnquiry) element;
            ueCapabilityEnquiry.encode (buffer);
            break;

         // counterCheck
         case _COUNTERCHECK:
            CounterCheck counterCheck = (CounterCheck) element;
            counterCheck.encode (buffer);
            break;

         // mobilityFromNRCommand
         case _MOBILITYFROMNRCOMMAND:
            MobilityFromNRCommand mobilityFromNRCommand = (MobilityFromNRCommand) element;
            mobilityFromNRCommand.encode (buffer);
            break;

         // dlDedicatedMessageSegment_r16
         case _DLDEDICATEDMESSAGESEGMENT_R16:
            DLDedicatedMessageSegment_r16 dlDedicatedMessageSegment_r16 = (DLDedicatedMessageSegment_r16) element;
            dlDedicatedMessageSegment_r16.encode (buffer);
            break;

         // ueInformationRequest_r16
         case _UEINFORMATIONREQUEST_R16:
            UEInformationRequest_r16 ueInformationRequest_r16 = (UEInformationRequest_r16) element;
            ueInformationRequest_r16.encode (buffer);
            break;

         // dlInformationTransferMRDC_r16
         case _DLINFORMATIONTRANSFERMRDC_R16:
            DLInformationTransferMRDC_r16 dlInformationTransferMRDC_r16 = (DLInformationTransferMRDC_r16) element;
            dlInformationTransferMRDC_r16.encode (buffer);
            break;

         // loggedMeasurementConfiguration_r16
         case _LOGGEDMEASUREMENTCONFIGURATION_R16:
            LoggedMeasurementConfiguration_r16 loggedMeasurementConfiguration_r16 = (LoggedMeasurementConfiguration_r16) element;
            loggedMeasurementConfiguration_r16.encode (buffer);
            break;

         // spare3
         case _SPARE3:
            Asn1Null spare3 = (Asn1Null) element;
            spare3.encode (buffer);
            break;

         // spare2
         case _SPARE2:
            Asn1Null spare2 = (Asn1Null) element;
            spare2.encode (buffer);
            break;

         // spare1
         case _SPARE1:
            Asn1Null spare1 = (Asn1Null) element;
            spare1.encode (buffer);
            break;

         default:
         throw new Asn1InvalidChoiceOptionException();
      }

      buffer.getContext().eventDispatcher.endElement("getElemName()", -1);
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (element != null) {
         element.print (_sb, getElemName(), _level+1);
      }
      indent (_sb, _level);
      _sb.append("}\n");
   }

}
