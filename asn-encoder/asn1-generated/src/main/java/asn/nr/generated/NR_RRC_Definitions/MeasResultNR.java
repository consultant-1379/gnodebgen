/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class MeasResultNR extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "MeasResultNR";
   }

   public PhysCellId physCellId;  // optional
   public MeasResultNR_measResult measResult;
   public boolean mV2ExtPresent;
   public CGI_InfoNR cgi_Info;  // optional
   public Asn1OpenExt extElem1;

   public MeasResultNR () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MeasResultNR (
      PhysCellId physCellId_,
      MeasResultNR_measResult measResult_,
      CGI_InfoNR cgi_Info_
   ) {
      super();
      physCellId = physCellId_;
      measResult = measResult_;
      cgi_Info = cgi_Info_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public MeasResultNR (
      MeasResultNR_measResult measResult_
   ) {
      super();
      measResult = measResult_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public MeasResultNR (long physCellId_,
      MeasResultNR_measResult measResult_,
      CGI_InfoNR cgi_Info_
   ) {
      super();
      physCellId = new PhysCellId (physCellId_);
      measResult = measResult_;
      cgi_Info = cgi_Info_;
   }

   public void init () {
      physCellId = null;
      measResult = null;
      cgi_Info = null;
      extElem1 = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return physCellId;
         case 1: return measResult;
         case 2: return cgi_Info;
         case 3: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "physCellId";
         case 1: return "measResult";
         case 2: return "cgi-Info";
         case 3: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean physCellIdPresent = buffer.decodeBit ("physCellIdPresent");

      // decode physCellId

      if (physCellIdPresent) {
         buffer.getContext().eventDispatcher.startElement("physCellId", -1);

         physCellId = new PhysCellId();
         physCellId.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("physCellId", -1);
      }
      else {
         physCellId = null;
      }

      // decode measResult

      buffer.getContext().eventDispatcher.startElement("measResult", -1);

      measResult = new MeasResultNR_measResult();
      measResult.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("measResult", -1);

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean cgi_InfoPresent = buffer.decodeBit ("cgi_InfoPresent");

            // decode cgi_Info

            if (cgi_InfoPresent) {
               buffer.getContext().eventDispatcher.startElement("cgi_Info", -1);

               cgi_Info = new CGI_InfoNR();
               cgi_Info.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("cgi_Info", -1);
            }
            else {
               cgi_Info = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (mV2ExtPresent ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((physCellId != null), null);

      // encode physCellId

      if (physCellId != null) {
         buffer.getContext().eventDispatcher.startElement("physCellId", -1);

         physCellId.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("physCellId", -1);
      }

      // encode measResult

      if (measResult != null) {
         buffer.getContext().eventDispatcher.startElement("measResult", -1);

         measResult.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("measResult", -1);
      }
      else throw new Asn1MissingRequiredException ("measResult");

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 1;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit (mV2ExtPresent, null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         if (mV2ExtPresent) {
            buffer.reset();
            buffer.encodeBit ((cgi_Info != null), "optbit");
            if (cgi_Info != null) {
               cgi_Info.encode (buffer);
            }
            mainBuffer.encodeOpenType (buffer, null);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (physCellId != null) physCellId.print (_sb, "physCellId", _level+1);
      if (measResult != null) measResult.print (_sb, "measResult", _level+1);
      if (cgi_Info != null) cgi_Info.print (_sb, "cgi_Info", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
