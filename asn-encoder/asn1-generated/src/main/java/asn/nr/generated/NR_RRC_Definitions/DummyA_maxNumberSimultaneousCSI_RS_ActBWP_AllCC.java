/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ENUMERATED";
   }

   // Integer constants for switch-case
   public static final int _N5 = 0;
   public static final int _N6 = 1;
   public static final int _N7 = 2;
   public static final int _N8 = 3;
   public static final int _N9 = 4;
   public static final int _N10 = 5;
   public static final int _N12 = 6;
   public static final int _N14 = 7;
   public static final int _N16 = 8;
   public static final int _N18 = 9;
   public static final int _N20 = 10;
   public static final int _N22 = 11;
   public static final int _N24 = 12;
   public static final int _N26 = 13;
   public static final int _N28 = 14;
   public static final int _N30 = 15;
   public static final int _N32 = 16;
   public static final int _N34 = 17;
   public static final int _N36 = 18;
   public static final int _N38 = 19;
   public static final int _N40 = 20;
   public static final int _N42 = 21;
   public static final int _N44 = 22;
   public static final int _N46 = 23;
   public static final int _N48 = 24;
   public static final int _N50 = 25;
   public static final int _N52 = 26;
   public static final int _N54 = 27;
   public static final int _N56 = 28;
   public static final int _N58 = 29;
   public static final int _N60 = 30;
   public static final int _N62 = 31;
   public static final int _N64 = 32;

   // Singleton instances of DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC
   protected static final DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC _n5 = new DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC(0);
   protected static final DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC _n6 = new DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC(1);
   protected static final DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC _n7 = new DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC(2);
   protected static final DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC _n8 = new DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC(3);
   protected static final DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC _n9 = new DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC(4);
   protected static final DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC _n10 = new DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC(5);
   protected static final DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC _n12 = new DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC(6);
   protected static final DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC _n14 = new DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC(7);
   protected static final DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC _n16 = new DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC(8);
   protected static final DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC _n18 = new DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC(9);
   protected static final DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC _n20 = new DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC(10);
   protected static final DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC _n22 = new DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC(11);
   protected static final DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC _n24 = new DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC(12);
   protected static final DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC _n26 = new DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC(13);
   protected static final DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC _n28 = new DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC(14);
   protected static final DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC _n30 = new DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC(15);
   protected static final DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC _n32 = new DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC(16);
   protected static final DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC _n34 = new DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC(17);
   protected static final DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC _n36 = new DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC(18);
   protected static final DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC _n38 = new DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC(19);
   protected static final DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC _n40 = new DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC(20);
   protected static final DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC _n42 = new DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC(21);
   protected static final DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC _n44 = new DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC(22);
   protected static final DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC _n46 = new DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC(23);
   protected static final DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC _n48 = new DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC(24);
   protected static final DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC _n50 = new DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC(25);
   protected static final DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC _n52 = new DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC(26);
   protected static final DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC _n54 = new DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC(27);
   protected static final DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC _n56 = new DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC(28);
   protected static final DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC _n58 = new DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC(29);
   protected static final DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC _n60 = new DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC(30);
   protected static final DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC _n62 = new DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC(31);
   protected static final DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC _n64 = new DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC(32);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    *   7
    *   8
    *   9
    *   10
    *   11
    *   12
    *   13
    *   14
    *   15
    *   16
    *   17
    *   18
    *   19
    *   20
    *   21
    *   22
    *   23
    *   24
    *   25
    *   26
    *   27
    *   28
    *   29
    *   30
    *   31
    *   32
    */
   protected DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for n5.
    */
   public static DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC n5() {
      return _n5;
   }

   /**
    * Singleton accessor method for n6.
    */
   public static DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC n6() {
      return _n6;
   }

   /**
    * Singleton accessor method for n7.
    */
   public static DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC n7() {
      return _n7;
   }

   /**
    * Singleton accessor method for n8.
    */
   public static DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC n8() {
      return _n8;
   }

   /**
    * Singleton accessor method for n9.
    */
   public static DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC n9() {
      return _n9;
   }

   /**
    * Singleton accessor method for n10.
    */
   public static DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC n10() {
      return _n10;
   }

   /**
    * Singleton accessor method for n12.
    */
   public static DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC n12() {
      return _n12;
   }

   /**
    * Singleton accessor method for n14.
    */
   public static DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC n14() {
      return _n14;
   }

   /**
    * Singleton accessor method for n16.
    */
   public static DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC n16() {
      return _n16;
   }

   /**
    * Singleton accessor method for n18.
    */
   public static DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC n18() {
      return _n18;
   }

   /**
    * Singleton accessor method for n20.
    */
   public static DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC n20() {
      return _n20;
   }

   /**
    * Singleton accessor method for n22.
    */
   public static DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC n22() {
      return _n22;
   }

   /**
    * Singleton accessor method for n24.
    */
   public static DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC n24() {
      return _n24;
   }

   /**
    * Singleton accessor method for n26.
    */
   public static DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC n26() {
      return _n26;
   }

   /**
    * Singleton accessor method for n28.
    */
   public static DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC n28() {
      return _n28;
   }

   /**
    * Singleton accessor method for n30.
    */
   public static DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC n30() {
      return _n30;
   }

   /**
    * Singleton accessor method for n32.
    */
   public static DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC n32() {
      return _n32;
   }

   /**
    * Singleton accessor method for n34.
    */
   public static DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC n34() {
      return _n34;
   }

   /**
    * Singleton accessor method for n36.
    */
   public static DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC n36() {
      return _n36;
   }

   /**
    * Singleton accessor method for n38.
    */
   public static DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC n38() {
      return _n38;
   }

   /**
    * Singleton accessor method for n40.
    */
   public static DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC n40() {
      return _n40;
   }

   /**
    * Singleton accessor method for n42.
    */
   public static DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC n42() {
      return _n42;
   }

   /**
    * Singleton accessor method for n44.
    */
   public static DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC n44() {
      return _n44;
   }

   /**
    * Singleton accessor method for n46.
    */
   public static DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC n46() {
      return _n46;
   }

   /**
    * Singleton accessor method for n48.
    */
   public static DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC n48() {
      return _n48;
   }

   /**
    * Singleton accessor method for n50.
    */
   public static DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC n50() {
      return _n50;
   }

   /**
    * Singleton accessor method for n52.
    */
   public static DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC n52() {
      return _n52;
   }

   /**
    * Singleton accessor method for n54.
    */
   public static DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC n54() {
      return _n54;
   }

   /**
    * Singleton accessor method for n56.
    */
   public static DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC n56() {
      return _n56;
   }

   /**
    * Singleton accessor method for n58.
    */
   public static DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC n58() {
      return _n58;
   }

   /**
    * Singleton accessor method for n60.
    */
   public static DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC n60() {
      return _n60;
   }

   /**
    * Singleton accessor method for n62.
    */
   public static DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC n62() {
      return _n62;
   }

   /**
    * Singleton accessor method for n64.
    */
   public static DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC n64() {
      return _n64;
   }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1PerDecoder{

      public Asn1Type decode(Asn1PerDecodeBuffer buffer) throws Asn1Exception, java.io.IOException
      {
         return DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC.valueOf( DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC.decodeEnumValue( buffer ) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 0: return n5();
         case 1: return n6();
         case 2: return n7();
         case 3: return n8();
         case 4: return n9();
         case 5: return n10();
         case 6: return n12();
         case 7: return n14();
         case 8: return n16();
         case 9: return n18();
         case 10: return n20();
         case 11: return n22();
         case 12: return n24();
         case 13: return n26();
         case 14: return n28();
         case 15: return n30();
         case 16: return n32();
         case 17: return n34();
         case 18: return n36();
         case 19: return n38();
         case 20: return n40();
         case 21: return n42();
         case 22: return n44();
         case 23: return n46();
         case 24: return n48();
         case 25: return n50();
         case 26: return n52();
         case 27: return n54();
         case 28: return n56();
         case 29: return n58();
         case 30: return n60();
         case 31: return n62();
         case 32: return n64();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }

   public static int decodeEnumValue (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      int ret; // return value
      ui = (int) buffer.decodeConsWholeNumber (33);

      switch (ui) {
         case 0: ret =  0; break;
         case 1: ret =  1; break;
         case 2: ret =  2; break;
         case 3: ret =  3; break;
         case 4: ret =  4; break;
         case 5: ret =  5; break;
         case 6: ret =  6; break;
         case 7: ret =  7; break;
         case 8: ret =  8; break;
         case 9: ret =  9; break;
         case 10: ret =  10; break;
         case 11: ret =  11; break;
         case 12: ret =  12; break;
         case 13: ret =  13; break;
         case 14: ret =  14; break;
         case 15: ret =  15; break;
         case 16: ret =  16; break;
         case 17: ret =  17; break;
         case 18: ret =  18; break;
         case 19: ret =  19; break;
         case 20: ret =  20; break;
         case 21: ret =  21; break;
         case 22: ret =  22; break;
         case 23: ret =  23; break;
         case 24: ret =  24; break;
         case 25: ret =  25; break;
         case 26: ret =  26; break;
         case 27: ret =  27; break;
         case 28: ret =  28; break;
         case 29: ret =  29; break;
         case 30: ret =  30; break;
         case 31: ret =  31; break;
         case 32: ret =  32; break;
         default: throw new Asn1InvalidEnumException (ui);
      }

      buffer.setTypeCode (Asn1Type.ENUMERATED);
      buffer.invokeCharacters (DummyA_maxNumberSimultaneousCSI_RS_ActBWP_AllCC.valueOf(ret).toString());

      return ret;
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int ui;  // enum index
      switch ((int)value) {
         case 0: ui = 0; /* n5 */break;
         case 1: ui = 1; /* n6 */break;
         case 2: ui = 2; /* n7 */break;
         case 3: ui = 3; /* n8 */break;
         case 4: ui = 4; /* n9 */break;
         case 5: ui = 5; /* n10 */break;
         case 6: ui = 6; /* n12 */break;
         case 7: ui = 7; /* n14 */break;
         case 8: ui = 8; /* n16 */break;
         case 9: ui = 9; /* n18 */break;
         case 10: ui = 10; /* n20 */break;
         case 11: ui = 11; /* n22 */break;
         case 12: ui = 12; /* n24 */break;
         case 13: ui = 13; /* n26 */break;
         case 14: ui = 14; /* n28 */break;
         case 15: ui = 15; /* n30 */break;
         case 16: ui = 16; /* n32 */break;
         case 17: ui = 17; /* n34 */break;
         case 18: ui = 18; /* n36 */break;
         case 19: ui = 19; /* n38 */break;
         case 20: ui = 20; /* n40 */break;
         case 21: ui = 21; /* n42 */break;
         case 22: ui = 22; /* n44 */break;
         case 23: ui = 23; /* n46 */break;
         case 24: ui = 24; /* n48 */break;
         case 25: ui = 25; /* n50 */break;
         case 26: ui = 26; /* n52 */break;
         case 27: ui = 27; /* n54 */break;
         case 28: ui = 28; /* n56 */break;
         case 29: ui = 29; /* n58 */break;
         case 30: ui = 30; /* n60 */break;
         case 31: ui = 31; /* n62 */break;
         case 32: ui = 32; /* n64 */break;
         default:
            throw new Asn1InvalidEnumException (value);
      }

      buffer.encodeConsWholeNumber (ui, 33);
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("n5");
         case 1: return ("n6");
         case 2: return ("n7");
         case 3: return ("n8");
         case 4: return ("n9");
         case 5: return ("n10");
         case 6: return ("n12");
         case 7: return ("n14");
         case 8: return ("n16");
         case 9: return ("n18");
         case 10: return ("n20");
         case 11: return ("n22");
         case 12: return ("n24");
         case 13: return ("n26");
         case 14: return ("n28");
         case 15: return ("n30");
         case 16: return ("n32");
         case 17: return ("n34");
         case 18: return ("n36");
         case 19: return ("n38");
         case 20: return ("n40");
         case 21: return ("n42");
         case 22: return ("n44");
         case 23: return ("n46");
         case 24: return ("n48");
         case 25: return ("n50");
         case 26: return ("n52");
         case 27: return ("n54");
         case 28: return ("n56");
         case 29: return ("n58");
         case 30: return ("n60");
         case 31: return ("n62");
         case 32: return ("n64");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" = ").append(toString()).append("\n");
   }

}
