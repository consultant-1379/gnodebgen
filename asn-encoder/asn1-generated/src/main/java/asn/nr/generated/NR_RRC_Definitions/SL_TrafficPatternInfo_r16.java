/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SL_TrafficPatternInfo_r16 extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SL-TrafficPatternInfo-r16";
   }

   public SL_TrafficPatternInfo_r16_trafficPeriodicity_r16 trafficPeriodicity_r16 = null;
   public Asn1Integer timingOffset_r16;
   public Asn1BitString messageSize_r16;
   public SL_QoS_FlowIdentity_r16 sl_QoS_FlowIdentity_r16;

   public SL_TrafficPatternInfo_r16 () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SL_TrafficPatternInfo_r16 (
      SL_TrafficPatternInfo_r16_trafficPeriodicity_r16 trafficPeriodicity_r16_,
      Asn1Integer timingOffset_r16_,
      Asn1BitString messageSize_r16_,
      SL_QoS_FlowIdentity_r16 sl_QoS_FlowIdentity_r16_
   ) {
      super();
      trafficPeriodicity_r16 = trafficPeriodicity_r16_;
      timingOffset_r16 = timingOffset_r16_;
      messageSize_r16 = messageSize_r16_;
      sl_QoS_FlowIdentity_r16 = sl_QoS_FlowIdentity_r16_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SL_TrafficPatternInfo_r16 (SL_TrafficPatternInfo_r16_trafficPeriodicity_r16 trafficPeriodicity_r16_,
      long timingOffset_r16_,
      Asn1BitString messageSize_r16_,
      long sl_QoS_FlowIdentity_r16_
   ) {
      super();
      trafficPeriodicity_r16 = trafficPeriodicity_r16_;
      timingOffset_r16 = new Asn1Integer (timingOffset_r16_);
      messageSize_r16 = messageSize_r16_;
      sl_QoS_FlowIdentity_r16 = new SL_QoS_FlowIdentity_r16 (sl_QoS_FlowIdentity_r16_);
   }

   public void init () {
      trafficPeriodicity_r16 = null;
      timingOffset_r16 = null;
      messageSize_r16 = null;
      sl_QoS_FlowIdentity_r16 = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return trafficPeriodicity_r16;
         case 1: return timingOffset_r16;
         case 2: return messageSize_r16;
         case 3: return sl_QoS_FlowIdentity_r16;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "trafficPeriodicity-r16";
         case 1: return "timingOffset-r16";
         case 2: return "messageSize-r16";
         case 3: return "sl-QoS-FlowIdentity-r16";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode trafficPeriodicity_r16

      buffer.getContext().eventDispatcher.startElement("trafficPeriodicity_r16", -1);

      {
         int tval = SL_TrafficPatternInfo_r16_trafficPeriodicity_r16.decodeEnumValue (buffer);
         trafficPeriodicity_r16 = SL_TrafficPatternInfo_r16_trafficPeriodicity_r16.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("trafficPeriodicity_r16", -1);

      // decode timingOffset_r16

      buffer.getContext().eventDispatcher.startElement("timingOffset_r16", -1);

      timingOffset_r16 = new Asn1Integer();
      timingOffset_r16.decode (buffer, 0, 10239);

      buffer.invokeCharacters(timingOffset_r16.toString());
      buffer.getContext().eventDispatcher.endElement("timingOffset_r16", -1);

      // decode messageSize_r16

      buffer.getContext().eventDispatcher.startElement("messageSize_r16", -1);

      messageSize_r16 = new Asn1BitString();
      messageSize_r16.decode (buffer, 8, 8);

      buffer.invokeCharacters(messageSize_r16.toString());
      buffer.getContext().eventDispatcher.endElement("messageSize_r16", -1);

      // decode sl_QoS_FlowIdentity_r16

      buffer.getContext().eventDispatcher.startElement("sl_QoS_FlowIdentity_r16", -1);

      sl_QoS_FlowIdentity_r16 = new SL_QoS_FlowIdentity_r16();
      sl_QoS_FlowIdentity_r16.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("sl_QoS_FlowIdentity_r16", -1);

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode trafficPeriodicity_r16

      if (trafficPeriodicity_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("trafficPeriodicity_r16", -1);

         trafficPeriodicity_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("trafficPeriodicity_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("trafficPeriodicity_r16");

      // encode timingOffset_r16

      if (timingOffset_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("timingOffset_r16", -1);

         timingOffset_r16.encode (buffer, 0, 10239);

         buffer.getContext().eventDispatcher.endElement("timingOffset_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("timingOffset_r16");

      // encode messageSize_r16

      if (messageSize_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("messageSize_r16", -1);

         messageSize_r16.encode (buffer, 8, 8);

         buffer.getContext().eventDispatcher.endElement("messageSize_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("messageSize_r16");

      // encode sl_QoS_FlowIdentity_r16

      if (sl_QoS_FlowIdentity_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_QoS_FlowIdentity_r16", -1);

         sl_QoS_FlowIdentity_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sl_QoS_FlowIdentity_r16", -1);
      }
      else throw new Asn1MissingRequiredException ("sl_QoS_FlowIdentity_r16");

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (trafficPeriodicity_r16 != null) trafficPeriodicity_r16.print (_sb, "trafficPeriodicity_r16", _level+1);
      if (timingOffset_r16 != null) timingOffset_r16.print (_sb, "timingOffset_r16", _level+1);
      if (messageSize_r16 != null) messageSize_r16.print (_sb, "messageSize_r16", _level+1);
      if (sl_QoS_FlowIdentity_r16 != null) sl_QoS_FlowIdentity_r16.print (_sb, "sl_QoS_FlowIdentity_r16", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
