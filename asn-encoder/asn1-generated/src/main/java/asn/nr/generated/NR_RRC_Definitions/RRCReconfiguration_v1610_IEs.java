/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class RRCReconfiguration_v1610_IEs extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "RRCReconfiguration-v1610-IEs";
   }

   public OtherConfig_v1610 otherConfig_v1610;  // optional
   public RRCReconfiguration_v1610_IEs_bap_Config_r16 bap_Config_r16;  // optional
   public IAB_IP_AddressConfigurationList_r16 iab_IP_AddressConfigurationList_r16;  // optional
   public ConditionalReconfiguration_r16 conditionalReconfiguration_r16;  // optional
   public RRCReconfiguration_v1610_IEs_daps_SourceRelease_r16 daps_SourceRelease_r16 = null;  // optional
   public RRCReconfiguration_v1610_IEs_t316_r16 t316_r16;  // optional
   public RRCReconfiguration_v1610_IEs_needForGapsConfigNR_r16 needForGapsConfigNR_r16;  // optional
   public RRCReconfiguration_v1610_IEs_onDemandSIB_Request_r16 onDemandSIB_Request_r16;  // optional
   public PosSystemInformation_r16_IEs dedicatedPosSysInfoDelivery_r16;  // optional
   public RRCReconfiguration_v1610_IEs_sl_ConfigDedicatedNR_r16 sl_ConfigDedicatedNR_r16;  // optional
   public RRCReconfiguration_v1610_IEs_sl_ConfigDedicatedEUTRA_Info_r16 sl_ConfigDedicatedEUTRA_Info_r16;  // optional
   public SSB_MTC targetCellSMTC_SCG_r16;  // optional
   public RRCReconfiguration_v1610_IEs_nonCriticalExtension nonCriticalExtension;  // optional

   public RRCReconfiguration_v1610_IEs () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public RRCReconfiguration_v1610_IEs (
      OtherConfig_v1610 otherConfig_v1610_,
      RRCReconfiguration_v1610_IEs_bap_Config_r16 bap_Config_r16_,
      IAB_IP_AddressConfigurationList_r16 iab_IP_AddressConfigurationList_r16_,
      ConditionalReconfiguration_r16 conditionalReconfiguration_r16_,
      RRCReconfiguration_v1610_IEs_daps_SourceRelease_r16 daps_SourceRelease_r16_,
      RRCReconfiguration_v1610_IEs_t316_r16 t316_r16_,
      RRCReconfiguration_v1610_IEs_needForGapsConfigNR_r16 needForGapsConfigNR_r16_,
      RRCReconfiguration_v1610_IEs_onDemandSIB_Request_r16 onDemandSIB_Request_r16_,
      PosSystemInformation_r16_IEs dedicatedPosSysInfoDelivery_r16_,
      RRCReconfiguration_v1610_IEs_sl_ConfigDedicatedNR_r16 sl_ConfigDedicatedNR_r16_,
      RRCReconfiguration_v1610_IEs_sl_ConfigDedicatedEUTRA_Info_r16 sl_ConfigDedicatedEUTRA_Info_r16_,
      SSB_MTC targetCellSMTC_SCG_r16_,
      RRCReconfiguration_v1610_IEs_nonCriticalExtension nonCriticalExtension_
   ) {
      super();
      otherConfig_v1610 = otherConfig_v1610_;
      bap_Config_r16 = bap_Config_r16_;
      iab_IP_AddressConfigurationList_r16 = iab_IP_AddressConfigurationList_r16_;
      conditionalReconfiguration_r16 = conditionalReconfiguration_r16_;
      daps_SourceRelease_r16 = daps_SourceRelease_r16_;
      t316_r16 = t316_r16_;
      needForGapsConfigNR_r16 = needForGapsConfigNR_r16_;
      onDemandSIB_Request_r16 = onDemandSIB_Request_r16_;
      dedicatedPosSysInfoDelivery_r16 = dedicatedPosSysInfoDelivery_r16_;
      sl_ConfigDedicatedNR_r16 = sl_ConfigDedicatedNR_r16_;
      sl_ConfigDedicatedEUTRA_Info_r16 = sl_ConfigDedicatedEUTRA_Info_r16_;
      targetCellSMTC_SCG_r16 = targetCellSMTC_SCG_r16_;
      nonCriticalExtension = nonCriticalExtension_;
   }

   public void init () {
      otherConfig_v1610 = null;
      bap_Config_r16 = null;
      iab_IP_AddressConfigurationList_r16 = null;
      conditionalReconfiguration_r16 = null;
      daps_SourceRelease_r16 = null;
      t316_r16 = null;
      needForGapsConfigNR_r16 = null;
      onDemandSIB_Request_r16 = null;
      dedicatedPosSysInfoDelivery_r16 = null;
      sl_ConfigDedicatedNR_r16 = null;
      sl_ConfigDedicatedEUTRA_Info_r16 = null;
      targetCellSMTC_SCG_r16 = null;
      nonCriticalExtension = null;
   }

   public int getElementCount() { return 13; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return otherConfig_v1610;
         case 1: return bap_Config_r16;
         case 2: return iab_IP_AddressConfigurationList_r16;
         case 3: return conditionalReconfiguration_r16;
         case 4: return daps_SourceRelease_r16;
         case 5: return t316_r16;
         case 6: return needForGapsConfigNR_r16;
         case 7: return onDemandSIB_Request_r16;
         case 8: return dedicatedPosSysInfoDelivery_r16;
         case 9: return sl_ConfigDedicatedNR_r16;
         case 10: return sl_ConfigDedicatedEUTRA_Info_r16;
         case 11: return targetCellSMTC_SCG_r16;
         case 12: return nonCriticalExtension;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "otherConfig-v1610";
         case 1: return "bap-Config-r16";
         case 2: return "iab-IP-AddressConfigurationList-r16";
         case 3: return "conditionalReconfiguration-r16";
         case 4: return "daps-SourceRelease-r16";
         case 5: return "t316-r16";
         case 6: return "needForGapsConfigNR-r16";
         case 7: return "onDemandSIB-Request-r16";
         case 8: return "dedicatedPosSysInfoDelivery-r16";
         case 9: return "sl-ConfigDedicatedNR-r16";
         case 10: return "sl-ConfigDedicatedEUTRA-Info-r16";
         case 11: return "targetCellSMTC-SCG-r16";
         case 12: return "nonCriticalExtension";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean otherConfig_v1610Present = buffer.decodeBit ("otherConfig_v1610Present");
      boolean bap_Config_r16Present = buffer.decodeBit ("bap_Config_r16Present");
      boolean iab_IP_AddressConfigurationList_r16Present = buffer.decodeBit ("iab_IP_AddressConfigurationList_r16Present");
      boolean conditionalReconfiguration_r16Present = buffer.decodeBit ("conditionalReconfiguration_r16Present");
      boolean daps_SourceRelease_r16Present = buffer.decodeBit ("daps_SourceRelease_r16Present");
      boolean t316_r16Present = buffer.decodeBit ("t316_r16Present");
      boolean needForGapsConfigNR_r16Present = buffer.decodeBit ("needForGapsConfigNR_r16Present");
      boolean onDemandSIB_Request_r16Present = buffer.decodeBit ("onDemandSIB_Request_r16Present");
      boolean dedicatedPosSysInfoDelivery_r16Present = buffer.decodeBit ("dedicatedPosSysInfoDelivery_r16Present");
      boolean sl_ConfigDedicatedNR_r16Present = buffer.decodeBit ("sl_ConfigDedicatedNR_r16Present");
      boolean sl_ConfigDedicatedEUTRA_Info_r16Present = buffer.decodeBit ("sl_ConfigDedicatedEUTRA_Info_r16Present");
      boolean targetCellSMTC_SCG_r16Present = buffer.decodeBit ("targetCellSMTC_SCG_r16Present");
      boolean nonCriticalExtensionPresent = buffer.decodeBit ("nonCriticalExtensionPresent");

      // decode otherConfig_v1610

      if (otherConfig_v1610Present) {
         buffer.getContext().eventDispatcher.startElement("otherConfig_v1610", -1);

         otherConfig_v1610 = new OtherConfig_v1610();
         otherConfig_v1610.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("otherConfig_v1610", -1);
      }
      else {
         otherConfig_v1610 = null;
      }

      // decode bap_Config_r16

      if (bap_Config_r16Present) {
         buffer.getContext().eventDispatcher.startElement("bap_Config_r16", -1);

         bap_Config_r16 = new RRCReconfiguration_v1610_IEs_bap_Config_r16();
         bap_Config_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("bap_Config_r16", -1);
      }
      else {
         bap_Config_r16 = null;
      }

      // decode iab_IP_AddressConfigurationList_r16

      if (iab_IP_AddressConfigurationList_r16Present) {
         buffer.getContext().eventDispatcher.startElement("iab_IP_AddressConfigurationList_r16", -1);

         iab_IP_AddressConfigurationList_r16 = new IAB_IP_AddressConfigurationList_r16();
         iab_IP_AddressConfigurationList_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("iab_IP_AddressConfigurationList_r16", -1);
      }
      else {
         iab_IP_AddressConfigurationList_r16 = null;
      }

      // decode conditionalReconfiguration_r16

      if (conditionalReconfiguration_r16Present) {
         buffer.getContext().eventDispatcher.startElement("conditionalReconfiguration_r16", -1);

         conditionalReconfiguration_r16 = new ConditionalReconfiguration_r16();
         conditionalReconfiguration_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("conditionalReconfiguration_r16", -1);
      }
      else {
         conditionalReconfiguration_r16 = null;
      }

      // decode daps_SourceRelease_r16

      if (daps_SourceRelease_r16Present) {
         buffer.getContext().eventDispatcher.startElement("daps_SourceRelease_r16", -1);

         int tval = RRCReconfiguration_v1610_IEs_daps_SourceRelease_r16.decodeEnumValue (buffer);
         daps_SourceRelease_r16 = RRCReconfiguration_v1610_IEs_daps_SourceRelease_r16.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("daps_SourceRelease_r16", -1);
      }
      else {
         daps_SourceRelease_r16 = null;
      }

      // decode t316_r16

      if (t316_r16Present) {
         buffer.getContext().eventDispatcher.startElement("t316_r16", -1);

         t316_r16 = new RRCReconfiguration_v1610_IEs_t316_r16();
         t316_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("t316_r16", -1);
      }
      else {
         t316_r16 = null;
      }

      // decode needForGapsConfigNR_r16

      if (needForGapsConfigNR_r16Present) {
         buffer.getContext().eventDispatcher.startElement("needForGapsConfigNR_r16", -1);

         needForGapsConfigNR_r16 = new RRCReconfiguration_v1610_IEs_needForGapsConfigNR_r16();
         needForGapsConfigNR_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("needForGapsConfigNR_r16", -1);
      }
      else {
         needForGapsConfigNR_r16 = null;
      }

      // decode onDemandSIB_Request_r16

      if (onDemandSIB_Request_r16Present) {
         buffer.getContext().eventDispatcher.startElement("onDemandSIB_Request_r16", -1);

         onDemandSIB_Request_r16 = new RRCReconfiguration_v1610_IEs_onDemandSIB_Request_r16();
         onDemandSIB_Request_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("onDemandSIB_Request_r16", -1);
      }
      else {
         onDemandSIB_Request_r16 = null;
      }

      // decode dedicatedPosSysInfoDelivery_r16

      if (dedicatedPosSysInfoDelivery_r16Present) {
         buffer.getContext().eventDispatcher.startElement("dedicatedPosSysInfoDelivery_r16", -1);

         Asn1OctetString dedicatedPosSysInfoDelivery_r16_outer = new Asn1OctetString();
         dedicatedPosSysInfoDelivery_r16_outer.decode (buffer);
         if (dedicatedPosSysInfoDelivery_r16_outer.value == null) throw new Asn1Exception("contained type's complete encoding is empty");
         Asn1PerDecodeBuffer savedBuffer = buffer;
         buffer = new Asn1PerDecodeBuffer( dedicatedPosSysInfoDelivery_r16_outer.value, buffer.isAligned());
         buffer.setEventHandlerList( savedBuffer );
         dedicatedPosSysInfoDelivery_r16 = new PosSystemInformation_r16_IEs();
         dedicatedPosSysInfoDelivery_r16.decode (buffer);
         buffer = savedBuffer;
         buffer.getContext().eventDispatcher.endElement("dedicatedPosSysInfoDelivery_r16", -1);
      }
      else {
         dedicatedPosSysInfoDelivery_r16 = null;
      }

      // decode sl_ConfigDedicatedNR_r16

      if (sl_ConfigDedicatedNR_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_ConfigDedicatedNR_r16", -1);

         sl_ConfigDedicatedNR_r16 = new RRCReconfiguration_v1610_IEs_sl_ConfigDedicatedNR_r16();
         sl_ConfigDedicatedNR_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sl_ConfigDedicatedNR_r16", -1);
      }
      else {
         sl_ConfigDedicatedNR_r16 = null;
      }

      // decode sl_ConfigDedicatedEUTRA_Info_r16

      if (sl_ConfigDedicatedEUTRA_Info_r16Present) {
         buffer.getContext().eventDispatcher.startElement("sl_ConfigDedicatedEUTRA_Info_r16", -1);

         sl_ConfigDedicatedEUTRA_Info_r16 = new RRCReconfiguration_v1610_IEs_sl_ConfigDedicatedEUTRA_Info_r16();
         sl_ConfigDedicatedEUTRA_Info_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("sl_ConfigDedicatedEUTRA_Info_r16", -1);
      }
      else {
         sl_ConfigDedicatedEUTRA_Info_r16 = null;
      }

      // decode targetCellSMTC_SCG_r16

      if (targetCellSMTC_SCG_r16Present) {
         buffer.getContext().eventDispatcher.startElement("targetCellSMTC_SCG_r16", -1);

         targetCellSMTC_SCG_r16 = new SSB_MTC();
         targetCellSMTC_SCG_r16.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("targetCellSMTC_SCG_r16", -1);
      }
      else {
         targetCellSMTC_SCG_r16 = null;
      }

      // decode nonCriticalExtension

      if (nonCriticalExtensionPresent) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension = new RRCReconfiguration_v1610_IEs_nonCriticalExtension();
         nonCriticalExtension.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }
      else {
         nonCriticalExtension = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((otherConfig_v1610 != null), null);
      buffer.encodeBit ((bap_Config_r16 != null), null);
      buffer.encodeBit ((iab_IP_AddressConfigurationList_r16 != null), null);
      buffer.encodeBit ((conditionalReconfiguration_r16 != null), null);
      buffer.encodeBit ((daps_SourceRelease_r16 != null), null);
      buffer.encodeBit ((t316_r16 != null), null);
      buffer.encodeBit ((needForGapsConfigNR_r16 != null), null);
      buffer.encodeBit ((onDemandSIB_Request_r16 != null), null);
      buffer.encodeBit ((dedicatedPosSysInfoDelivery_r16 != null), null);
      buffer.encodeBit ((sl_ConfigDedicatedNR_r16 != null), null);
      buffer.encodeBit ((sl_ConfigDedicatedEUTRA_Info_r16 != null), null);
      buffer.encodeBit ((targetCellSMTC_SCG_r16 != null), null);
      buffer.encodeBit ((nonCriticalExtension != null), null);

      // encode otherConfig_v1610

      if (otherConfig_v1610 != null) {
         buffer.getContext().eventDispatcher.startElement("otherConfig_v1610", -1);

         otherConfig_v1610.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("otherConfig_v1610", -1);
      }

      // encode bap_Config_r16

      if (bap_Config_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("bap_Config_r16", -1);

         bap_Config_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("bap_Config_r16", -1);
      }

      // encode iab_IP_AddressConfigurationList_r16

      if (iab_IP_AddressConfigurationList_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("iab_IP_AddressConfigurationList_r16", -1);

         iab_IP_AddressConfigurationList_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("iab_IP_AddressConfigurationList_r16", -1);
      }

      // encode conditionalReconfiguration_r16

      if (conditionalReconfiguration_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("conditionalReconfiguration_r16", -1);

         conditionalReconfiguration_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("conditionalReconfiguration_r16", -1);
      }

      // encode daps_SourceRelease_r16

      if (daps_SourceRelease_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("daps_SourceRelease_r16", -1);

         daps_SourceRelease_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("daps_SourceRelease_r16", -1);
      }

      // encode t316_r16

      if (t316_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("t316_r16", -1);

         t316_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("t316_r16", -1);
      }

      // encode needForGapsConfigNR_r16

      if (needForGapsConfigNR_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("needForGapsConfigNR_r16", -1);

         needForGapsConfigNR_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("needForGapsConfigNR_r16", -1);
      }

      // encode onDemandSIB_Request_r16

      if (onDemandSIB_Request_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("onDemandSIB_Request_r16", -1);

         onDemandSIB_Request_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("onDemandSIB_Request_r16", -1);
      }

      // encode dedicatedPosSysInfoDelivery_r16

      if (dedicatedPosSysInfoDelivery_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("dedicatedPosSysInfoDelivery_r16", -1);

         Asn1OctetString dedicatedPosSysInfoDelivery_r16_outer;
         {
            Asn1PerEncodeBuffer savedBuffer = buffer;
            buffer = new Asn1PerEncodeBuffer(buffer.isAligned());
            dedicatedPosSysInfoDelivery_r16.encode (buffer);
            dedicatedPosSysInfoDelivery_r16_outer = new Asn1OctetString(buffer.getMsgCopy() );
            buffer = savedBuffer;
         }
         dedicatedPosSysInfoDelivery_r16_outer.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("dedicatedPosSysInfoDelivery_r16", -1);
      }

      // encode sl_ConfigDedicatedNR_r16

      if (sl_ConfigDedicatedNR_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_ConfigDedicatedNR_r16", -1);

         sl_ConfigDedicatedNR_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sl_ConfigDedicatedNR_r16", -1);
      }

      // encode sl_ConfigDedicatedEUTRA_Info_r16

      if (sl_ConfigDedicatedEUTRA_Info_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("sl_ConfigDedicatedEUTRA_Info_r16", -1);

         sl_ConfigDedicatedEUTRA_Info_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("sl_ConfigDedicatedEUTRA_Info_r16", -1);
      }

      // encode targetCellSMTC_SCG_r16

      if (targetCellSMTC_SCG_r16 != null) {
         buffer.getContext().eventDispatcher.startElement("targetCellSMTC_SCG_r16", -1);

         targetCellSMTC_SCG_r16.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("targetCellSMTC_SCG_r16", -1);
      }

      // encode nonCriticalExtension

      if (nonCriticalExtension != null) {
         buffer.getContext().eventDispatcher.startElement("nonCriticalExtension", -1);

         nonCriticalExtension.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("nonCriticalExtension", -1);
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (otherConfig_v1610 != null) otherConfig_v1610.print (_sb, "otherConfig_v1610", _level+1);
      if (bap_Config_r16 != null) bap_Config_r16.print (_sb, "bap_Config_r16", _level+1);
      if (iab_IP_AddressConfigurationList_r16 != null) iab_IP_AddressConfigurationList_r16.print (_sb, "iab_IP_AddressConfigurationList_r16", _level+1);
      if (conditionalReconfiguration_r16 != null) conditionalReconfiguration_r16.print (_sb, "conditionalReconfiguration_r16", _level+1);
      if (daps_SourceRelease_r16 != null) daps_SourceRelease_r16.print (_sb, "daps_SourceRelease_r16", _level+1);
      if (t316_r16 != null) t316_r16.print (_sb, "t316_r16", _level+1);
      if (needForGapsConfigNR_r16 != null) needForGapsConfigNR_r16.print (_sb, "needForGapsConfigNR_r16", _level+1);
      if (onDemandSIB_Request_r16 != null) onDemandSIB_Request_r16.print (_sb, "onDemandSIB_Request_r16", _level+1);
      if (dedicatedPosSysInfoDelivery_r16 != null) dedicatedPosSysInfoDelivery_r16.print (_sb, "dedicatedPosSysInfoDelivery_r16", _level+1);
      if (sl_ConfigDedicatedNR_r16 != null) sl_ConfigDedicatedNR_r16.print (_sb, "sl_ConfigDedicatedNR_r16", _level+1);
      if (sl_ConfigDedicatedEUTRA_Info_r16 != null) sl_ConfigDedicatedEUTRA_Info_r16.print (_sb, "sl_ConfigDedicatedEUTRA_Info_r16", _level+1);
      if (targetCellSMTC_SCG_r16 != null) targetCellSMTC_SCG_r16.print (_sb, "targetCellSMTC_SCG_r16", _level+1);
      if (nonCriticalExtension != null) nonCriticalExtension.print (_sb, "nonCriticalExtension", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
