/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class FeatureSets extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "FeatureSets";
   }

   public FeatureSets_featureSetsDownlink featureSetsDownlink;  // optional
   public FeatureSets_featureSetsDownlinkPerCC featureSetsDownlinkPerCC;  // optional
   public FeatureSets_featureSetsUplink featureSetsUplink;  // optional
   public FeatureSets_featureSetsUplinkPerCC featureSetsUplinkPerCC;  // optional
   public boolean mV2ExtPresent;
   public FeatureSets_featureSetsDownlink_v1540 featureSetsDownlink_v1540;  // optional
   public FeatureSets_featureSetsUplink_v1540 featureSetsUplink_v1540;  // optional
   public FeatureSets_featureSetsUplinkPerCC_v1540 featureSetsUplinkPerCC_v1540;  // optional
   public boolean mV3ExtPresent;
   public FeatureSets_featureSetsDownlink_v15a0 featureSetsDownlink_v15a0;  // optional
   public boolean mV4ExtPresent;
   public FeatureSets_featureSetsDownlink_v1610 featureSetsDownlink_v1610;  // optional
   public FeatureSets_featureSetsUplink_v1610 featureSetsUplink_v1610;  // optional
   public FeatureSets_featureSetDownlinkPerCC_v1620 featureSetDownlinkPerCC_v1620;  // optional
   public boolean mV5ExtPresent;
   public FeatureSets_featureSetsUplink_v1630 featureSetsUplink_v1630;  // optional
   public boolean mV6ExtPresent;
   public FeatureSets_featureSetsUplink_v1640 featureSetsUplink_v1640;  // optional
   public Asn1OpenExt extElem1;

   public FeatureSets () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public FeatureSets (
      FeatureSets_featureSetsDownlink featureSetsDownlink_,
      FeatureSets_featureSetsDownlinkPerCC featureSetsDownlinkPerCC_,
      FeatureSets_featureSetsUplink featureSetsUplink_,
      FeatureSets_featureSetsUplinkPerCC featureSetsUplinkPerCC_,
      FeatureSets_featureSetsDownlink_v1540 featureSetsDownlink_v1540_,
      FeatureSets_featureSetsUplink_v1540 featureSetsUplink_v1540_,
      FeatureSets_featureSetsUplinkPerCC_v1540 featureSetsUplinkPerCC_v1540_,
      FeatureSets_featureSetsDownlink_v15a0 featureSetsDownlink_v15a0_,
      FeatureSets_featureSetsDownlink_v1610 featureSetsDownlink_v1610_,
      FeatureSets_featureSetsUplink_v1610 featureSetsUplink_v1610_,
      FeatureSets_featureSetDownlinkPerCC_v1620 featureSetDownlinkPerCC_v1620_,
      FeatureSets_featureSetsUplink_v1630 featureSetsUplink_v1630_,
      FeatureSets_featureSetsUplink_v1640 featureSetsUplink_v1640_
   ) {
      super();
      featureSetsDownlink = featureSetsDownlink_;
      featureSetsDownlinkPerCC = featureSetsDownlinkPerCC_;
      featureSetsUplink = featureSetsUplink_;
      featureSetsUplinkPerCC = featureSetsUplinkPerCC_;
      featureSetsDownlink_v1540 = featureSetsDownlink_v1540_;
      featureSetsUplink_v1540 = featureSetsUplink_v1540_;
      featureSetsUplinkPerCC_v1540 = featureSetsUplinkPerCC_v1540_;
      featureSetsDownlink_v15a0 = featureSetsDownlink_v15a0_;
      featureSetsDownlink_v1610 = featureSetsDownlink_v1610_;
      featureSetsUplink_v1610 = featureSetsUplink_v1610_;
      featureSetDownlinkPerCC_v1620 = featureSetDownlinkPerCC_v1620_;
      featureSetsUplink_v1630 = featureSetsUplink_v1630_;
      featureSetsUplink_v1640 = featureSetsUplink_v1640_;
   }

   public void init () {
      featureSetsDownlink = null;
      featureSetsDownlinkPerCC = null;
      featureSetsUplink = null;
      featureSetsUplinkPerCC = null;
      featureSetsDownlink_v1540 = null;
      featureSetsUplink_v1540 = null;
      featureSetsUplinkPerCC_v1540 = null;
      featureSetsDownlink_v15a0 = null;
      featureSetsDownlink_v1610 = null;
      featureSetsUplink_v1610 = null;
      featureSetDownlinkPerCC_v1620 = null;
      featureSetsUplink_v1630 = null;
      featureSetsUplink_v1640 = null;
      extElem1 = null;
   }

   public int getElementCount() { return 14; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return featureSetsDownlink;
         case 1: return featureSetsDownlinkPerCC;
         case 2: return featureSetsUplink;
         case 3: return featureSetsUplinkPerCC;
         case 4: return featureSetsDownlink_v1540;
         case 5: return featureSetsUplink_v1540;
         case 6: return featureSetsUplinkPerCC_v1540;
         case 7: return featureSetsDownlink_v15a0;
         case 8: return featureSetsDownlink_v1610;
         case 9: return featureSetsUplink_v1610;
         case 10: return featureSetDownlinkPerCC_v1620;
         case 11: return featureSetsUplink_v1630;
         case 12: return featureSetsUplink_v1640;
         case 13: return extElem1;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "featureSetsDownlink";
         case 1: return "featureSetsDownlinkPerCC";
         case 2: return "featureSetsUplink";
         case 3: return "featureSetsUplinkPerCC";
         case 4: return "featureSetsDownlink-v1540";
         case 5: return "featureSetsUplink-v1540";
         case 6: return "featureSetsUplinkPerCC-v1540";
         case 7: return "featureSetsDownlink-v15a0";
         case 8: return "featureSetsDownlink-v1610";
         case 9: return "featureSetsUplink-v1610";
         case 10: return "featureSetDownlinkPerCC-v1620";
         case 11: return "featureSetsUplink-v1630";
         case 12: return "featureSetsUplink-v1640";
         case 13: return null;
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // extension bit

      boolean extbit = buffer.decodeBit ("extbit");

      // optional bits

      boolean featureSetsDownlinkPresent = buffer.decodeBit ("featureSetsDownlinkPresent");
      boolean featureSetsDownlinkPerCCPresent = buffer.decodeBit ("featureSetsDownlinkPerCCPresent");
      boolean featureSetsUplinkPresent = buffer.decodeBit ("featureSetsUplinkPresent");
      boolean featureSetsUplinkPerCCPresent = buffer.decodeBit ("featureSetsUplinkPerCCPresent");

      // decode featureSetsDownlink

      if (featureSetsDownlinkPresent) {
         buffer.getContext().eventDispatcher.startElement("featureSetsDownlink", -1);

         featureSetsDownlink = new FeatureSets_featureSetsDownlink();
         featureSetsDownlink.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("featureSetsDownlink", -1);
      }
      else {
         featureSetsDownlink = null;
      }

      // decode featureSetsDownlinkPerCC

      if (featureSetsDownlinkPerCCPresent) {
         buffer.getContext().eventDispatcher.startElement("featureSetsDownlinkPerCC", -1);

         featureSetsDownlinkPerCC = new FeatureSets_featureSetsDownlinkPerCC();
         featureSetsDownlinkPerCC.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("featureSetsDownlinkPerCC", -1);
      }
      else {
         featureSetsDownlinkPerCC = null;
      }

      // decode featureSetsUplink

      if (featureSetsUplinkPresent) {
         buffer.getContext().eventDispatcher.startElement("featureSetsUplink", -1);

         featureSetsUplink = new FeatureSets_featureSetsUplink();
         featureSetsUplink.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("featureSetsUplink", -1);
      }
      else {
         featureSetsUplink = null;
      }

      // decode featureSetsUplinkPerCC

      if (featureSetsUplinkPerCCPresent) {
         buffer.getContext().eventDispatcher.startElement("featureSetsUplinkPerCC", -1);

         featureSetsUplinkPerCC = new FeatureSets_featureSetsUplinkPerCC();
         featureSetsUplinkPerCC.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("featureSetsUplinkPerCC", -1);
      }
      else {
         featureSetsUplinkPerCC = null;
      }

      if (extbit) {

         int bitcnt = buffer.decodeSmallLength(), i = 0;
         long bitidx = buffer.getBitOffset() + bitcnt;
         boolean[] bitmap = new boolean [bitcnt];

         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV2ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV3ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV4ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV5ExtPresent");
         if (i < bitcnt) bitmap[i++] = buffer.decodeBit ("mV6ExtPresent");

         while (i < bitcnt) {
            bitmap[i++] = buffer.decodeBit ("unknown");
         }

         i = 0;

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV2ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean featureSetsDownlink_v1540Present = buffer.decodeBit ("featureSetsDownlink_v1540Present");

            boolean featureSetsUplink_v1540Present = buffer.decodeBit ("featureSetsUplink_v1540Present");

            boolean featureSetsUplinkPerCC_v1540Present = buffer.decodeBit ("featureSetsUplinkPerCC_v1540Present");

            // decode featureSetsDownlink_v1540

            if (featureSetsDownlink_v1540Present) {
               buffer.getContext().eventDispatcher.startElement("featureSetsDownlink_v1540", -1);

               featureSetsDownlink_v1540 = new FeatureSets_featureSetsDownlink_v1540();
               featureSetsDownlink_v1540.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("featureSetsDownlink_v1540", -1);
            }
            else {
               featureSetsDownlink_v1540 = null;
            }

            // decode featureSetsUplink_v1540

            if (featureSetsUplink_v1540Present) {
               buffer.getContext().eventDispatcher.startElement("featureSetsUplink_v1540", -1);

               featureSetsUplink_v1540 = new FeatureSets_featureSetsUplink_v1540();
               featureSetsUplink_v1540.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("featureSetsUplink_v1540", -1);
            }
            else {
               featureSetsUplink_v1540 = null;
            }

            // decode featureSetsUplinkPerCC_v1540

            if (featureSetsUplinkPerCC_v1540Present) {
               buffer.getContext().eventDispatcher.startElement("featureSetsUplinkPerCC_v1540", -1);

               featureSetsUplinkPerCC_v1540 = new FeatureSets_featureSetsUplinkPerCC_v1540();
               featureSetsUplinkPerCC_v1540.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("featureSetsUplinkPerCC_v1540", -1);
            }
            else {
               featureSetsUplinkPerCC_v1540 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV3ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean featureSetsDownlink_v15a0Present = buffer.decodeBit ("featureSetsDownlink_v15a0Present");

            // decode featureSetsDownlink_v15a0

            if (featureSetsDownlink_v15a0Present) {
               buffer.getContext().eventDispatcher.startElement("featureSetsDownlink_v15a0", -1);

               featureSetsDownlink_v15a0 = new FeatureSets_featureSetsDownlink_v15a0();
               featureSetsDownlink_v15a0.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("featureSetsDownlink_v15a0", -1);
            }
            else {
               featureSetsDownlink_v15a0 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV4ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean featureSetsDownlink_v1610Present = buffer.decodeBit ("featureSetsDownlink_v1610Present");

            boolean featureSetsUplink_v1610Present = buffer.decodeBit ("featureSetsUplink_v1610Present");

            boolean featureSetDownlinkPerCC_v1620Present = buffer.decodeBit ("featureSetDownlinkPerCC_v1620Present");

            // decode featureSetsDownlink_v1610

            if (featureSetsDownlink_v1610Present) {
               buffer.getContext().eventDispatcher.startElement("featureSetsDownlink_v1610", -1);

               featureSetsDownlink_v1610 = new FeatureSets_featureSetsDownlink_v1610();
               featureSetsDownlink_v1610.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("featureSetsDownlink_v1610", -1);
            }
            else {
               featureSetsDownlink_v1610 = null;
            }

            // decode featureSetsUplink_v1610

            if (featureSetsUplink_v1610Present) {
               buffer.getContext().eventDispatcher.startElement("featureSetsUplink_v1610", -1);

               featureSetsUplink_v1610 = new FeatureSets_featureSetsUplink_v1610();
               featureSetsUplink_v1610.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("featureSetsUplink_v1610", -1);
            }
            else {
               featureSetsUplink_v1610 = null;
            }

            // decode featureSetDownlinkPerCC_v1620

            if (featureSetDownlinkPerCC_v1620Present) {
               buffer.getContext().eventDispatcher.startElement("featureSetDownlinkPerCC_v1620", -1);

               featureSetDownlinkPerCC_v1620 = new FeatureSets_featureSetDownlinkPerCC_v1620();
               featureSetDownlinkPerCC_v1620.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("featureSetDownlinkPerCC_v1620", -1);
            }
            else {
               featureSetDownlinkPerCC_v1620 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV5ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean featureSetsUplink_v1630Present = buffer.decodeBit ("featureSetsUplink_v1630Present");

            // decode featureSetsUplink_v1630

            if (featureSetsUplink_v1630Present) {
               buffer.getContext().eventDispatcher.startElement("featureSetsUplink_v1630", -1);

               featureSetsUplink_v1630 = new FeatureSets_featureSetsUplink_v1630();
               featureSetsUplink_v1630.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("featureSetsUplink_v1630", -1);
            }
            else {
               featureSetsUplink_v1630 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode extension group

         if (i < bitcnt && bitmap[i++]) {
            mV6ExtPresent = true;
            bitidx = buffer.decodeExtLength ();

            boolean featureSetsUplink_v1640Present = buffer.decodeBit ("featureSetsUplink_v1640Present");

            // decode featureSetsUplink_v1640

            if (featureSetsUplink_v1640Present) {
               buffer.getContext().eventDispatcher.startElement("featureSetsUplink_v1640", -1);

               featureSetsUplink_v1640 = new FeatureSets_featureSetsUplink_v1640();
               featureSetsUplink_v1640.decode (buffer);
               buffer.getContext().eventDispatcher.endElement("featureSetsUplink_v1640", -1);
            }
            else {
               featureSetsUplink_v1640 = null;
            }

            buffer.moveBitCursor (bitidx);
         }

         // decode unknown extension elements

         if (i < bitcnt) {
            Asn1OpenType openType = null;
            extElem1 = new Asn1OpenExt();
            int j = 0;
            while (i < bitcnt) {
               if (bitmap[i]) {
                  buffer.getContext().eventDispatcher.startElement("...", -1);

                  openType = extElem1.decodeOpenType (buffer, true, j++);

                  buffer.invokeCharacters (openType.toString());
                  buffer.getContext().eventDispatcher.endElement("...", -1);
               }
               else {
                  extElem1.setOpenType (null, j++);
               }
               i++;
            }
         }
         buffer.byteAlign ();

      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // extension bit

      boolean extbit = (mV2ExtPresent ||
      mV3ExtPresent ||
      mV4ExtPresent ||
      mV5ExtPresent ||
      mV6ExtPresent ||
      ((extElem1 != null) && (!extElem1.value.isEmpty()))
      );

      buffer.encodeBit (extbit, "extbit");

      // encode optional elements bit mask

      buffer.encodeBit ((featureSetsDownlink != null), null);
      buffer.encodeBit ((featureSetsDownlinkPerCC != null), null);
      buffer.encodeBit ((featureSetsUplink != null), null);
      buffer.encodeBit ((featureSetsUplinkPerCC != null), null);

      // encode featureSetsDownlink

      if (featureSetsDownlink != null) {
         buffer.getContext().eventDispatcher.startElement("featureSetsDownlink", -1);

         featureSetsDownlink.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("featureSetsDownlink", -1);
      }

      // encode featureSetsDownlinkPerCC

      if (featureSetsDownlinkPerCC != null) {
         buffer.getContext().eventDispatcher.startElement("featureSetsDownlinkPerCC", -1);

         featureSetsDownlinkPerCC.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("featureSetsDownlinkPerCC", -1);
      }

      // encode featureSetsUplink

      if (featureSetsUplink != null) {
         buffer.getContext().eventDispatcher.startElement("featureSetsUplink", -1);

         featureSetsUplink.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("featureSetsUplink", -1);
      }

      // encode featureSetsUplinkPerCC

      if (featureSetsUplinkPerCC != null) {
         buffer.getContext().eventDispatcher.startElement("featureSetsUplinkPerCC", -1);

         featureSetsUplinkPerCC.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("featureSetsUplinkPerCC", -1);
      }

      if (extbit) {

         // encode extension optional bits length

         int bitcnt = 5;
         if (extElem1 != null) bitcnt += extElem1.value.size();
         buffer.encodeSmallLength (bitcnt);

         // encode optional bits

         buffer.encodeBit (mV2ExtPresent, null);
         buffer.encodeBit (mV3ExtPresent, null);
         buffer.encodeBit (mV4ExtPresent, null);
         buffer.encodeBit (mV5ExtPresent, null);
         buffer.encodeBit (mV6ExtPresent, null);

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encodeExtBits (buffer);
         }

         // encode extension elements

         Asn1PerEncodeBuffer mainBuffer = buffer;
         buffer = new Asn1PerEncodeBuffer (buffer.isAligned());

         if (mV2ExtPresent) {
            buffer.reset();
            buffer.encodeBit ((featureSetsDownlink_v1540 != null), "optbit");
            buffer.encodeBit ((featureSetsUplink_v1540 != null), "optbit");
            buffer.encodeBit ((featureSetsUplinkPerCC_v1540 != null), "optbit");
            if (featureSetsDownlink_v1540 != null) {
               featureSetsDownlink_v1540.encode (buffer);
            }
            if (featureSetsUplink_v1540 != null) {
               featureSetsUplink_v1540.encode (buffer);
            }
            if (featureSetsUplinkPerCC_v1540 != null) {
               featureSetsUplinkPerCC_v1540.encode (buffer);
            }
            mainBuffer.encodeOpenType (buffer, null);
         }

         if (mV3ExtPresent) {
            buffer.reset();
            buffer.encodeBit ((featureSetsDownlink_v15a0 != null), "optbit");
            if (featureSetsDownlink_v15a0 != null) {
               featureSetsDownlink_v15a0.encode (buffer);
            }
            mainBuffer.encodeOpenType (buffer, null);
         }

         if (mV4ExtPresent) {
            buffer.reset();
            buffer.encodeBit ((featureSetsDownlink_v1610 != null), "optbit");
            buffer.encodeBit ((featureSetsUplink_v1610 != null), "optbit");
            buffer.encodeBit ((featureSetDownlinkPerCC_v1620 != null), "optbit");
            if (featureSetsDownlink_v1610 != null) {
               featureSetsDownlink_v1610.encode (buffer);
            }
            if (featureSetsUplink_v1610 != null) {
               featureSetsUplink_v1610.encode (buffer);
            }
            if (featureSetDownlinkPerCC_v1620 != null) {
               featureSetDownlinkPerCC_v1620.encode (buffer);
            }
            mainBuffer.encodeOpenType (buffer, null);
         }

         if (mV5ExtPresent) {
            buffer.reset();
            buffer.encodeBit ((featureSetsUplink_v1630 != null), "optbit");
            if (featureSetsUplink_v1630 != null) {
               featureSetsUplink_v1630.encode (buffer);
            }
            mainBuffer.encodeOpenType (buffer, null);
         }

         if (mV6ExtPresent) {
            buffer.reset();
            buffer.encodeBit ((featureSetsUplink_v1640 != null), "optbit");
            if (featureSetsUplink_v1640 != null) {
               featureSetsUplink_v1640.encode (buffer);
            }
            mainBuffer.encodeOpenType (buffer, null);
         }

         buffer = mainBuffer;

         if (extElem1 != null && extElem1.value.size() > 0) {
            extElem1.encode (buffer);
         }
      }
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (featureSetsDownlink != null) featureSetsDownlink.print (_sb, "featureSetsDownlink", _level+1);
      if (featureSetsDownlinkPerCC != null) featureSetsDownlinkPerCC.print (_sb, "featureSetsDownlinkPerCC", _level+1);
      if (featureSetsUplink != null) featureSetsUplink.print (_sb, "featureSetsUplink", _level+1);
      if (featureSetsUplinkPerCC != null) featureSetsUplinkPerCC.print (_sb, "featureSetsUplinkPerCC", _level+1);
      if (featureSetsDownlink_v1540 != null) featureSetsDownlink_v1540.print (_sb, "featureSetsDownlink_v1540", _level+1);
      if (featureSetsUplink_v1540 != null) featureSetsUplink_v1540.print (_sb, "featureSetsUplink_v1540", _level+1);
      if (featureSetsUplinkPerCC_v1540 != null) featureSetsUplinkPerCC_v1540.print (_sb, "featureSetsUplinkPerCC_v1540", _level+1);
      if (featureSetsDownlink_v15a0 != null) featureSetsDownlink_v15a0.print (_sb, "featureSetsDownlink_v15a0", _level+1);
      if (featureSetsDownlink_v1610 != null) featureSetsDownlink_v1610.print (_sb, "featureSetsDownlink_v1610", _level+1);
      if (featureSetsUplink_v1610 != null) featureSetsUplink_v1610.print (_sb, "featureSetsUplink_v1610", _level+1);
      if (featureSetDownlinkPerCC_v1620 != null) featureSetDownlinkPerCC_v1620.print (_sb, "featureSetDownlinkPerCC_v1620", _level+1);
      if (featureSetsUplink_v1630 != null) featureSetsUplink_v1630.print (_sb, "featureSetsUplink_v1630", _level+1);
      if (featureSetsUplink_v1640 != null) featureSetsUplink_v1640.print (_sb, "featureSetsUplink_v1640", _level+1);
      if (extElem1 != null) extElem1.print (_sb, "extElem1", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
