/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class SRS_SwitchingTimeEUTRA extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SRS-SwitchingTimeEUTRA";
   }

   public SRS_SwitchingTimeEUTRA_switchingTimeDL switchingTimeDL = null;  // optional
   public SRS_SwitchingTimeEUTRA_switchingTimeUL switchingTimeUL = null;  // optional

   public SRS_SwitchingTimeEUTRA () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SRS_SwitchingTimeEUTRA (
      SRS_SwitchingTimeEUTRA_switchingTimeDL switchingTimeDL_,
      SRS_SwitchingTimeEUTRA_switchingTimeUL switchingTimeUL_
   ) {
      super();
      switchingTimeDL = switchingTimeDL_;
      switchingTimeUL = switchingTimeUL_;
   }

   public void init () {
      switchingTimeDL = null;
      switchingTimeUL = null;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return switchingTimeDL;
         case 1: return switchingTimeUL;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "switchingTimeDL";
         case 1: return "switchingTimeUL";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean switchingTimeDLPresent = buffer.decodeBit ("switchingTimeDLPresent");
      boolean switchingTimeULPresent = buffer.decodeBit ("switchingTimeULPresent");

      // decode switchingTimeDL

      if (switchingTimeDLPresent) {
         buffer.getContext().eventDispatcher.startElement("switchingTimeDL", -1);

         int tval = SRS_SwitchingTimeEUTRA_switchingTimeDL.decodeEnumValue (buffer);
         switchingTimeDL = SRS_SwitchingTimeEUTRA_switchingTimeDL.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("switchingTimeDL", -1);
      }
      else {
         switchingTimeDL = null;
      }

      // decode switchingTimeUL

      if (switchingTimeULPresent) {
         buffer.getContext().eventDispatcher.startElement("switchingTimeUL", -1);

         int tval = SRS_SwitchingTimeEUTRA_switchingTimeUL.decodeEnumValue (buffer);
         switchingTimeUL = SRS_SwitchingTimeEUTRA_switchingTimeUL.valueOf (tval);
         buffer.getContext().eventDispatcher.endElement("switchingTimeUL", -1);
      }
      else {
         switchingTimeUL = null;
      }

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((switchingTimeDL != null), null);
      buffer.encodeBit ((switchingTimeUL != null), null);

      // encode switchingTimeDL

      if (switchingTimeDL != null) {
         buffer.getContext().eventDispatcher.startElement("switchingTimeDL", -1);

         switchingTimeDL.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("switchingTimeDL", -1);
      }

      // encode switchingTimeUL

      if (switchingTimeUL != null) {
         buffer.getContext().eventDispatcher.startElement("switchingTimeUL", -1);

         switchingTimeUL.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("switchingTimeUL", -1);
      }

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (switchingTimeDL != null) switchingTimeDL.print (_sb, "switchingTimeDL", _level+1);
      if (switchingTimeUL != null) switchingTimeUL.print (_sb, "switchingTimeUL", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
