/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class UplinkConfigCommonSIB extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "UplinkConfigCommonSIB";
   }

   public FrequencyInfoUL_SIB frequencyInfoUL;
   public BWP_UplinkCommon initialUplinkBWP;
   public TimeAlignmentTimer timeAlignmentTimerCommon = null;

   public UplinkConfigCommonSIB () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public UplinkConfigCommonSIB (
      FrequencyInfoUL_SIB frequencyInfoUL_,
      BWP_UplinkCommon initialUplinkBWP_,
      TimeAlignmentTimer timeAlignmentTimerCommon_
   ) {
      super();
      frequencyInfoUL = frequencyInfoUL_;
      initialUplinkBWP = initialUplinkBWP_;
      timeAlignmentTimerCommon = timeAlignmentTimerCommon_;
   }

   public void init () {
      frequencyInfoUL = null;
      initialUplinkBWP = null;
      timeAlignmentTimerCommon = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return frequencyInfoUL;
         case 1: return initialUplinkBWP;
         case 2: return timeAlignmentTimerCommon;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "frequencyInfoUL";
         case 1: return "initialUplinkBWP";
         case 2: return "timeAlignmentTimerCommon";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode frequencyInfoUL

      buffer.getContext().eventDispatcher.startElement("frequencyInfoUL", -1);

      frequencyInfoUL = new FrequencyInfoUL_SIB();
      frequencyInfoUL.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("frequencyInfoUL", -1);

      // decode initialUplinkBWP

      buffer.getContext().eventDispatcher.startElement("initialUplinkBWP", -1);

      initialUplinkBWP = new BWP_UplinkCommon();
      initialUplinkBWP.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("initialUplinkBWP", -1);

      // decode timeAlignmentTimerCommon

      buffer.getContext().eventDispatcher.startElement("timeAlignmentTimerCommon", -1);

      {
         int tval = TimeAlignmentTimer.decodeEnumValue (buffer);
         timeAlignmentTimerCommon = TimeAlignmentTimer.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("timeAlignmentTimerCommon", -1);

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode frequencyInfoUL

      if (frequencyInfoUL != null) {
         buffer.getContext().eventDispatcher.startElement("frequencyInfoUL", -1);

         frequencyInfoUL.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("frequencyInfoUL", -1);
      }
      else throw new Asn1MissingRequiredException ("frequencyInfoUL");

      // encode initialUplinkBWP

      if (initialUplinkBWP != null) {
         buffer.getContext().eventDispatcher.startElement("initialUplinkBWP", -1);

         initialUplinkBWP.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("initialUplinkBWP", -1);
      }
      else throw new Asn1MissingRequiredException ("initialUplinkBWP");

      // encode timeAlignmentTimerCommon

      if (timeAlignmentTimerCommon != null) {
         buffer.getContext().eventDispatcher.startElement("timeAlignmentTimerCommon", -1);

         timeAlignmentTimerCommon.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("timeAlignmentTimerCommon", -1);
      }
      else throw new Asn1MissingRequiredException ("timeAlignmentTimerCommon");

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (frequencyInfoUL != null) frequencyInfoUL.print (_sb, "frequencyInfoUL", _level+1);
      if (initialUplinkBWP != null) initialUplinkBWP.print (_sb, "initialUplinkBWP", _level+1);
      if (timeAlignmentTimerCommon != null) timeAlignmentTimerCommon.print (_sb, "timeAlignmentTimerCommon", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
