/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class CrossCarrierSchedulingConfig_schedulingCellInfo extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CHOICE";
   }

   // Choice element identifier constants
   public final static byte _OWN = 1;
   public final static byte _OTHER = 2;

   public CrossCarrierSchedulingConfig_schedulingCellInfo () {
      super();
   }

   public CrossCarrierSchedulingConfig_schedulingCellInfo (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _OWN: return "own";
      case _OTHER: return "other";
      default: return "UNDEFINED";
      }
   }

   public void set_own (CrossCarrierSchedulingConfig_schedulingCellInfo_own value) {
      setElement (_OWN, value);
   }

   public void set_other (CrossCarrierSchedulingConfig_schedulingCellInfo_other value) {
      setElement (_OTHER, value);
   }

   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      int idx = (int) buffer.decodeConsWholeNumber (2, "index");
      choiceID = idx + 1;
      buffer.getContext().eventDispatcher.startElement (getElemName(), -1);

      switch (idx) {
         // own
         case 0: { 
            CrossCarrierSchedulingConfig_schedulingCellInfo_own own;
            element = own = new CrossCarrierSchedulingConfig_schedulingCellInfo_own();
            own.decode (buffer);
            break;
         }

         // other
         case 1: { 
            CrossCarrierSchedulingConfig_schedulingCellInfo_other other;
            element = other = new CrossCarrierSchedulingConfig_schedulingCellInfo_other();
            other.decode (buffer);
            break;
         }

         default:
         throw new Asn1InvalidChoiceOptionException (buffer, idx);
      }

      buffer.getContext().eventDispatcher.endElement (getElemName(), -1);
   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // Encode choice index value

      buffer.encodeConsWholeNumber (choiceID - 1, 2, "index");

      buffer.getContext().eventDispatcher.startElement("getElemName()", -1);

      switch (choiceID) {
         // own
         case _OWN:
            CrossCarrierSchedulingConfig_schedulingCellInfo_own own = (CrossCarrierSchedulingConfig_schedulingCellInfo_own) element;
            own.encode (buffer);
            break;

         // other
         case _OTHER:
            CrossCarrierSchedulingConfig_schedulingCellInfo_other other = (CrossCarrierSchedulingConfig_schedulingCellInfo_other) element;
            other.encode (buffer);
            break;

         default:
         throw new Asn1InvalidChoiceOptionException();
      }

      buffer.getContext().eventDispatcher.endElement("getElemName()", -1);
   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (element != null) {
         element.print (_sb, getElemName(), _level+1);
      }
      indent (_sb, _level);
      _sb.append("}\n");
   }

}
