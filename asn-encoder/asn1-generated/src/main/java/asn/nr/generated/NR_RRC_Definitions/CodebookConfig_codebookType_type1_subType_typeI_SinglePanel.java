/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class CodebookConfig_codebookType_type1_subType_typeI_SinglePanel extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE";
   }

   public CodebookConfig_codebookType_type1_subType_typeI_SinglePanel_nrOfAntennaPorts nrOfAntennaPorts;
   public Asn1BitString typeI_SinglePanel_ri_Restriction;

   public CodebookConfig_codebookType_type1_subType_typeI_SinglePanel () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CodebookConfig_codebookType_type1_subType_typeI_SinglePanel (
      CodebookConfig_codebookType_type1_subType_typeI_SinglePanel_nrOfAntennaPorts nrOfAntennaPorts_,
      Asn1BitString typeI_SinglePanel_ri_Restriction_
   ) {
      super();
      nrOfAntennaPorts = nrOfAntennaPorts_;
      typeI_SinglePanel_ri_Restriction = typeI_SinglePanel_ri_Restriction_;
   }

   public void init () {
      nrOfAntennaPorts = null;
      typeI_SinglePanel_ri_Restriction = null;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return nrOfAntennaPorts;
         case 1: return typeI_SinglePanel_ri_Restriction;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "nrOfAntennaPorts";
         case 1: return "typeI-SinglePanel-ri-Restriction";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode nrOfAntennaPorts

      buffer.getContext().eventDispatcher.startElement("nrOfAntennaPorts", -1);

      nrOfAntennaPorts = new CodebookConfig_codebookType_type1_subType_typeI_SinglePanel_nrOfAntennaPorts();
      nrOfAntennaPorts.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("nrOfAntennaPorts", -1);

      // decode typeI_SinglePanel_ri_Restriction

      buffer.getContext().eventDispatcher.startElement("typeI_SinglePanel_ri_Restriction", -1);

      typeI_SinglePanel_ri_Restriction = new Asn1BitString();
      typeI_SinglePanel_ri_Restriction.decode (buffer, 8, 8);

      buffer.invokeCharacters(typeI_SinglePanel_ri_Restriction.toString());
      buffer.getContext().eventDispatcher.endElement("typeI_SinglePanel_ri_Restriction", -1);

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode nrOfAntennaPorts

      if (nrOfAntennaPorts != null) {
         buffer.getContext().eventDispatcher.startElement("nrOfAntennaPorts", -1);

         nrOfAntennaPorts.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("nrOfAntennaPorts", -1);
      }
      else throw new Asn1MissingRequiredException ("nrOfAntennaPorts");

      // encode typeI_SinglePanel_ri_Restriction

      if (typeI_SinglePanel_ri_Restriction != null) {
         buffer.getContext().eventDispatcher.startElement("typeI_SinglePanel_ri_Restriction", -1);

         typeI_SinglePanel_ri_Restriction.encode (buffer, 8, 8);

         buffer.getContext().eventDispatcher.endElement("typeI_SinglePanel_ri_Restriction", -1);
      }
      else throw new Asn1MissingRequiredException ("typeI_SinglePanel_ri_Restriction");

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (nrOfAntennaPorts != null) nrOfAntennaPorts.print (_sb, "nrOfAntennaPorts", _level+1);
      if (typeI_SinglePanel_ri_Restriction != null) typeI_SinglePanel_ri_Restriction.print (_sb, "typeI_SinglePanel_ri_Restriction", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
