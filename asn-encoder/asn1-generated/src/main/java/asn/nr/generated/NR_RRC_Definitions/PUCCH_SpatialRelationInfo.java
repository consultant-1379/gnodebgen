/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 05-Aug-2021.
 */
package asn.nr.generated.NR_RRC_Definitions;

import com.objsys.asn1j.runtime.*;

public class PUCCH_SpatialRelationInfo extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_NR_RRC_DefinitionsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "PUCCH-SpatialRelationInfo";
   }

   public PUCCH_SpatialRelationInfoId pucch_SpatialRelationInfoId;
   public ServCellIndex servingCellId;  // optional
   public PUCCH_SpatialRelationInfo_referenceSignal referenceSignal;
   public PUCCH_PathlossReferenceRS_Id pucch_PathlossReferenceRS_Id;
   public P0_PUCCH_Id p0_PUCCH_Id;
   public PUCCH_SpatialRelationInfo_closedLoopIndex closedLoopIndex = null;

   public PUCCH_SpatialRelationInfo () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public PUCCH_SpatialRelationInfo (
      PUCCH_SpatialRelationInfoId pucch_SpatialRelationInfoId_,
      ServCellIndex servingCellId_,
      PUCCH_SpatialRelationInfo_referenceSignal referenceSignal_,
      PUCCH_PathlossReferenceRS_Id pucch_PathlossReferenceRS_Id_,
      P0_PUCCH_Id p0_PUCCH_Id_,
      PUCCH_SpatialRelationInfo_closedLoopIndex closedLoopIndex_
   ) {
      super();
      pucch_SpatialRelationInfoId = pucch_SpatialRelationInfoId_;
      servingCellId = servingCellId_;
      referenceSignal = referenceSignal_;
      pucch_PathlossReferenceRS_Id = pucch_PathlossReferenceRS_Id_;
      p0_PUCCH_Id = p0_PUCCH_Id_;
      closedLoopIndex = closedLoopIndex_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public PUCCH_SpatialRelationInfo (
      PUCCH_SpatialRelationInfoId pucch_SpatialRelationInfoId_,
      PUCCH_SpatialRelationInfo_referenceSignal referenceSignal_,
      PUCCH_PathlossReferenceRS_Id pucch_PathlossReferenceRS_Id_,
      P0_PUCCH_Id p0_PUCCH_Id_,
      PUCCH_SpatialRelationInfo_closedLoopIndex closedLoopIndex_
   ) {
      super();
      pucch_SpatialRelationInfoId = pucch_SpatialRelationInfoId_;
      referenceSignal = referenceSignal_;
      pucch_PathlossReferenceRS_Id = pucch_PathlossReferenceRS_Id_;
      p0_PUCCH_Id = p0_PUCCH_Id_;
      closedLoopIndex = closedLoopIndex_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public PUCCH_SpatialRelationInfo (long pucch_SpatialRelationInfoId_,
      long servingCellId_,
      PUCCH_SpatialRelationInfo_referenceSignal referenceSignal_,
      long pucch_PathlossReferenceRS_Id_,
      long p0_PUCCH_Id_,
      PUCCH_SpatialRelationInfo_closedLoopIndex closedLoopIndex_
   ) {
      super();
      pucch_SpatialRelationInfoId = new PUCCH_SpatialRelationInfoId (pucch_SpatialRelationInfoId_);
      servingCellId = new ServCellIndex (servingCellId_);
      referenceSignal = referenceSignal_;
      pucch_PathlossReferenceRS_Id = new PUCCH_PathlossReferenceRS_Id (pucch_PathlossReferenceRS_Id_);
      p0_PUCCH_Id = new P0_PUCCH_Id (p0_PUCCH_Id_);
      closedLoopIndex = closedLoopIndex_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public PUCCH_SpatialRelationInfo (
      long pucch_SpatialRelationInfoId_,
      PUCCH_SpatialRelationInfo_referenceSignal referenceSignal_,
      long pucch_PathlossReferenceRS_Id_,
      long p0_PUCCH_Id_,
      PUCCH_SpatialRelationInfo_closedLoopIndex closedLoopIndex_
   ) {
      super();
      pucch_SpatialRelationInfoId = new PUCCH_SpatialRelationInfoId (pucch_SpatialRelationInfoId_);
      referenceSignal = referenceSignal_;
      pucch_PathlossReferenceRS_Id = new PUCCH_PathlossReferenceRS_Id (pucch_PathlossReferenceRS_Id_);
      p0_PUCCH_Id = new P0_PUCCH_Id (p0_PUCCH_Id_);
      closedLoopIndex = closedLoopIndex_;
   }

   public void init () {
      pucch_SpatialRelationInfoId = null;
      servingCellId = null;
      referenceSignal = null;
      pucch_PathlossReferenceRS_Id = null;
      p0_PUCCH_Id = null;
      closedLoopIndex = null;
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return pucch_SpatialRelationInfoId;
         case 1: return servingCellId;
         case 2: return referenceSignal;
         case 3: return pucch_PathlossReferenceRS_Id;
         case 4: return p0_PUCCH_Id;
         case 5: return closedLoopIndex;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "pucch-SpatialRelationInfoId";
         case 1: return "servingCellId";
         case 2: return "referenceSignal";
         case 3: return "pucch-PathlossReferenceRS-Id";
         case 4: return "p0-PUCCH-Id";
         case 5: return "closedLoopIndex";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // optional bits

      boolean servingCellIdPresent = buffer.decodeBit ("servingCellIdPresent");

      // decode pucch_SpatialRelationInfoId

      buffer.getContext().eventDispatcher.startElement("pucch_SpatialRelationInfoId", -1);

      pucch_SpatialRelationInfoId = new PUCCH_SpatialRelationInfoId();
      pucch_SpatialRelationInfoId.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("pucch_SpatialRelationInfoId", -1);

      // decode servingCellId

      if (servingCellIdPresent) {
         buffer.getContext().eventDispatcher.startElement("servingCellId", -1);

         servingCellId = new ServCellIndex();
         servingCellId.decode (buffer);
         buffer.getContext().eventDispatcher.endElement("servingCellId", -1);
      }
      else {
         servingCellId = null;
      }

      // decode referenceSignal

      buffer.getContext().eventDispatcher.startElement("referenceSignal", -1);

      referenceSignal = new PUCCH_SpatialRelationInfo_referenceSignal();
      referenceSignal.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("referenceSignal", -1);

      // decode pucch_PathlossReferenceRS_Id

      buffer.getContext().eventDispatcher.startElement("pucch_PathlossReferenceRS_Id", -1);

      pucch_PathlossReferenceRS_Id = new PUCCH_PathlossReferenceRS_Id();
      pucch_PathlossReferenceRS_Id.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("pucch_PathlossReferenceRS_Id", -1);

      // decode p0_PUCCH_Id

      buffer.getContext().eventDispatcher.startElement("p0_PUCCH_Id", -1);

      p0_PUCCH_Id = new P0_PUCCH_Id();
      p0_PUCCH_Id.decode (buffer);
      buffer.getContext().eventDispatcher.endElement("p0_PUCCH_Id", -1);

      // decode closedLoopIndex

      buffer.getContext().eventDispatcher.startElement("closedLoopIndex", -1);

      {
         int tval = PUCCH_SpatialRelationInfo_closedLoopIndex.decodeEnumValue (buffer);
         closedLoopIndex = PUCCH_SpatialRelationInfo_closedLoopIndex.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("closedLoopIndex", -1);

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode optional elements bit mask

      buffer.encodeBit ((servingCellId != null), null);

      // encode pucch_SpatialRelationInfoId

      if (pucch_SpatialRelationInfoId != null) {
         buffer.getContext().eventDispatcher.startElement("pucch_SpatialRelationInfoId", -1);

         pucch_SpatialRelationInfoId.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("pucch_SpatialRelationInfoId", -1);
      }
      else throw new Asn1MissingRequiredException ("pucch_SpatialRelationInfoId");

      // encode servingCellId

      if (servingCellId != null) {
         buffer.getContext().eventDispatcher.startElement("servingCellId", -1);

         servingCellId.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("servingCellId", -1);
      }

      // encode referenceSignal

      if (referenceSignal != null) {
         buffer.getContext().eventDispatcher.startElement("referenceSignal", -1);

         referenceSignal.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("referenceSignal", -1);
      }
      else throw new Asn1MissingRequiredException ("referenceSignal");

      // encode pucch_PathlossReferenceRS_Id

      if (pucch_PathlossReferenceRS_Id != null) {
         buffer.getContext().eventDispatcher.startElement("pucch_PathlossReferenceRS_Id", -1);

         pucch_PathlossReferenceRS_Id.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("pucch_PathlossReferenceRS_Id", -1);
      }
      else throw new Asn1MissingRequiredException ("pucch_PathlossReferenceRS_Id");

      // encode p0_PUCCH_Id

      if (p0_PUCCH_Id != null) {
         buffer.getContext().eventDispatcher.startElement("p0_PUCCH_Id", -1);

         p0_PUCCH_Id.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("p0_PUCCH_Id", -1);
      }
      else throw new Asn1MissingRequiredException ("p0_PUCCH_Id");

      // encode closedLoopIndex

      if (closedLoopIndex != null) {
         buffer.getContext().eventDispatcher.startElement("closedLoopIndex", -1);

         closedLoopIndex.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("closedLoopIndex", -1);
      }
      else throw new Asn1MissingRequiredException ("closedLoopIndex");

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (pucch_SpatialRelationInfoId != null) pucch_SpatialRelationInfoId.print (_sb, "pucch_SpatialRelationInfoId", _level+1);
      if (servingCellId != null) servingCellId.print (_sb, "servingCellId", _level+1);
      if (referenceSignal != null) referenceSignal.print (_sb, "referenceSignal", _level+1);
      if (pucch_PathlossReferenceRS_Id != null) pucch_PathlossReferenceRS_Id.print (_sb, "pucch_PathlossReferenceRS_Id", _level+1);
      if (p0_PUCCH_Id != null) p0_PUCCH_Id.print (_sb, "p0_PUCCH_Id", _level+1);
      if (closedLoopIndex != null) closedLoopIndex.print (_sb, "closedLoopIndex", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
