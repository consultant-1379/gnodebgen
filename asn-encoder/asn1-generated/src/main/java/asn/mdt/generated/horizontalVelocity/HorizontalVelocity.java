/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 30-Dec-2020.
 */
package asn.mdt.generated.horizontalVelocity;

import com.objsys.asn1j.runtime.*;

public class HorizontalVelocity extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_horizontalVelocityRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "HorizontalVelocity";
   }

   public Asn1Integer bearing;
   public Asn1Integer horizontalSpeed;

   public HorizontalVelocity () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public HorizontalVelocity (
      Asn1Integer bearing_,
      Asn1Integer horizontalSpeed_
   ) {
      super();
      bearing = bearing_;
      horizontalSpeed = horizontalSpeed_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public HorizontalVelocity (long bearing_,
      long horizontalSpeed_
   ) {
      super();
      bearing = new Asn1Integer (bearing_);
      horizontalSpeed = new Asn1Integer (horizontalSpeed_);
   }

   public void init () {
      bearing = null;
      horizontalSpeed = null;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return bearing;
         case 1: return horizontalSpeed;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "bearing";
         case 1: return "horizontalSpeed";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode bearing

      buffer.getContext().eventDispatcher.startElement("bearing", -1);

      bearing = new Asn1Integer();
      bearing.decode (buffer, 0, 359);
      buffer.getContext().eventDispatcher.endElement("bearing", -1);

      // decode horizontalSpeed

      buffer.getContext().eventDispatcher.startElement("horizontalSpeed", -1);

      horizontalSpeed = new Asn1Integer();
      horizontalSpeed.decode (buffer, 0, 2047);
      buffer.getContext().eventDispatcher.endElement("horizontalSpeed", -1);

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode bearing

      if (bearing != null) {
         buffer.getContext().eventDispatcher.startElement("bearing", -1);

         bearing.encode (buffer, 0, 359);

         buffer.getContext().eventDispatcher.endElement("bearing", -1);
      }
      else throw new Asn1MissingRequiredException ("bearing");

      // encode horizontalSpeed

      if (horizontalSpeed != null) {
         buffer.getContext().eventDispatcher.startElement("horizontalSpeed", -1);

         horizontalSpeed.encode (buffer, 0, 2047);

         buffer.getContext().eventDispatcher.endElement("horizontalSpeed", -1);
      }
      else throw new Asn1MissingRequiredException ("horizontalSpeed");

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (bearing != null) bearing.print (_sb, "bearing", _level+1);
      if (horizontalSpeed != null) horizontalSpeed.print (_sb, "horizontalSpeed", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
