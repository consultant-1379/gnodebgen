/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 30-Dec-2020.
 */
package asn.mdt.generated.ellipsoidArc;

import com.objsys.asn1j.runtime.*;

public class EllipsoidArc extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_ellipsoidArcRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "EllipsoidArc";
   }

   public EllipsoidArc_latitudeSign latitudeSign = null;
   public Asn1Integer degreesLatitude;
   public Asn1Integer degreesLongitude;
   public Asn1Integer innerRadius;
   public Asn1Integer uncertaintyRadius;
   public Asn1Integer offsetAngle;
   public Asn1Integer includedAngle;
   public Asn1Integer confidence;

   public EllipsoidArc () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public EllipsoidArc (
      EllipsoidArc_latitudeSign latitudeSign_,
      Asn1Integer degreesLatitude_,
      Asn1Integer degreesLongitude_,
      Asn1Integer innerRadius_,
      Asn1Integer uncertaintyRadius_,
      Asn1Integer offsetAngle_,
      Asn1Integer includedAngle_,
      Asn1Integer confidence_
   ) {
      super();
      latitudeSign = latitudeSign_;
      degreesLatitude = degreesLatitude_;
      degreesLongitude = degreesLongitude_;
      innerRadius = innerRadius_;
      uncertaintyRadius = uncertaintyRadius_;
      offsetAngle = offsetAngle_;
      includedAngle = includedAngle_;
      confidence = confidence_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public EllipsoidArc (EllipsoidArc_latitudeSign latitudeSign_,
      long degreesLatitude_,
      long degreesLongitude_,
      long innerRadius_,
      long uncertaintyRadius_,
      long offsetAngle_,
      long includedAngle_,
      long confidence_
   ) {
      super();
      latitudeSign = latitudeSign_;
      degreesLatitude = new Asn1Integer (degreesLatitude_);
      degreesLongitude = new Asn1Integer (degreesLongitude_);
      innerRadius = new Asn1Integer (innerRadius_);
      uncertaintyRadius = new Asn1Integer (uncertaintyRadius_);
      offsetAngle = new Asn1Integer (offsetAngle_);
      includedAngle = new Asn1Integer (includedAngle_);
      confidence = new Asn1Integer (confidence_);
   }

   public void init () {
      latitudeSign = null;
      degreesLatitude = null;
      degreesLongitude = null;
      innerRadius = null;
      uncertaintyRadius = null;
      offsetAngle = null;
      includedAngle = null;
      confidence = null;
   }

   public int getElementCount() { return 8; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return latitudeSign;
         case 1: return degreesLatitude;
         case 2: return degreesLongitude;
         case 3: return innerRadius;
         case 4: return uncertaintyRadius;
         case 5: return offsetAngle;
         case 6: return includedAngle;
         case 7: return confidence;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "latitudeSign";
         case 1: return "degreesLatitude";
         case 2: return "degreesLongitude";
         case 3: return "innerRadius";
         case 4: return "uncertaintyRadius";
         case 5: return "offsetAngle";
         case 6: return "includedAngle";
         case 7: return "confidence";
         default: return null;
      }
   }


   public void decode (Asn1PerDecodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      init ();

      // decode latitudeSign

      buffer.getContext().eventDispatcher.startElement("latitudeSign", -1);

      {
         int tval = EllipsoidArc_latitudeSign.decodeEnumValue (buffer);
         latitudeSign = EllipsoidArc_latitudeSign.valueOf (tval);
      }
      buffer.getContext().eventDispatcher.endElement("latitudeSign", -1);

      // decode degreesLatitude

      buffer.getContext().eventDispatcher.startElement("degreesLatitude", -1);

      degreesLatitude = new Asn1Integer();
      degreesLatitude.decode (buffer, 0, 8388607);
      buffer.getContext().eventDispatcher.endElement("degreesLatitude", -1);

      // decode degreesLongitude

      buffer.getContext().eventDispatcher.startElement("degreesLongitude", -1);

      degreesLongitude = new Asn1Integer();
      degreesLongitude.decode (buffer, -8388608, 8388607);
      buffer.getContext().eventDispatcher.endElement("degreesLongitude", -1);

      // decode innerRadius

      buffer.getContext().eventDispatcher.startElement("innerRadius", -1);

      innerRadius = new Asn1Integer();
      innerRadius.decode (buffer, 0, 65535);
      buffer.getContext().eventDispatcher.endElement("innerRadius", -1);

      // decode uncertaintyRadius

      buffer.getContext().eventDispatcher.startElement("uncertaintyRadius", -1);

      uncertaintyRadius = new Asn1Integer();
      uncertaintyRadius.decode (buffer, 0, 127);
      buffer.getContext().eventDispatcher.endElement("uncertaintyRadius", -1);

      // decode offsetAngle

      buffer.getContext().eventDispatcher.startElement("offsetAngle", -1);

      offsetAngle = new Asn1Integer();
      offsetAngle.decode (buffer, 0, 179);
      buffer.getContext().eventDispatcher.endElement("offsetAngle", -1);

      // decode includedAngle

      buffer.getContext().eventDispatcher.startElement("includedAngle", -1);

      includedAngle = new Asn1Integer();
      includedAngle.decode (buffer, 0, 179);
      buffer.getContext().eventDispatcher.endElement("includedAngle", -1);

      // decode confidence

      buffer.getContext().eventDispatcher.startElement("confidence", -1);

      confidence = new Asn1Integer();
      confidence.decode (buffer, 0, 100);
      buffer.getContext().eventDispatcher.endElement("confidence", -1);

   }

   public void encode (Asn1PerEncodeBuffer buffer)
      throws Asn1Exception, java.io.IOException
   {
      // encode latitudeSign

      if (latitudeSign != null) {
         buffer.getContext().eventDispatcher.startElement("latitudeSign", -1);

         latitudeSign.encode (buffer);

         buffer.getContext().eventDispatcher.endElement("latitudeSign", -1);
      }
      else throw new Asn1MissingRequiredException ("latitudeSign");

      // encode degreesLatitude

      if (degreesLatitude != null) {
         buffer.getContext().eventDispatcher.startElement("degreesLatitude", -1);

         degreesLatitude.encode (buffer, 0, 8388607);

         buffer.getContext().eventDispatcher.endElement("degreesLatitude", -1);
      }
      else throw new Asn1MissingRequiredException ("degreesLatitude");

      // encode degreesLongitude

      if (degreesLongitude != null) {
         buffer.getContext().eventDispatcher.startElement("degreesLongitude", -1);

         degreesLongitude.encode (buffer, -8388608, 8388607);

         buffer.getContext().eventDispatcher.endElement("degreesLongitude", -1);
      }
      else throw new Asn1MissingRequiredException ("degreesLongitude");

      // encode innerRadius

      if (innerRadius != null) {
         buffer.getContext().eventDispatcher.startElement("innerRadius", -1);

         innerRadius.encode (buffer, 0, 65535);

         buffer.getContext().eventDispatcher.endElement("innerRadius", -1);
      }
      else throw new Asn1MissingRequiredException ("innerRadius");

      // encode uncertaintyRadius

      if (uncertaintyRadius != null) {
         buffer.getContext().eventDispatcher.startElement("uncertaintyRadius", -1);

         uncertaintyRadius.encode (buffer, 0, 127);

         buffer.getContext().eventDispatcher.endElement("uncertaintyRadius", -1);
      }
      else throw new Asn1MissingRequiredException ("uncertaintyRadius");

      // encode offsetAngle

      if (offsetAngle != null) {
         buffer.getContext().eventDispatcher.startElement("offsetAngle", -1);

         offsetAngle.encode (buffer, 0, 179);

         buffer.getContext().eventDispatcher.endElement("offsetAngle", -1);
      }
      else throw new Asn1MissingRequiredException ("offsetAngle");

      // encode includedAngle

      if (includedAngle != null) {
         buffer.getContext().eventDispatcher.startElement("includedAngle", -1);

         includedAngle.encode (buffer, 0, 179);

         buffer.getContext().eventDispatcher.endElement("includedAngle", -1);
      }
      else throw new Asn1MissingRequiredException ("includedAngle");

      // encode confidence

      if (confidence != null) {
         buffer.getContext().eventDispatcher.startElement("confidence", -1);

         confidence.encode (buffer, 0, 100);

         buffer.getContext().eventDispatcher.endElement("confidence", -1);
      }
      else throw new Asn1MissingRequiredException ("confidence");

   }

   public void print (java.lang.StringBuilder _sb, String _varName, int _level)
   {
      indent (_sb, _level);
      _sb.append(_varName).append(" {\n");
      if (latitudeSign != null) latitudeSign.print (_sb, "latitudeSign", _level+1);
      if (degreesLatitude != null) degreesLatitude.print (_sb, "degreesLatitude", _level+1);
      if (degreesLongitude != null) degreesLongitude.print (_sb, "degreesLongitude", _level+1);
      if (innerRadius != null) innerRadius.print (_sb, "innerRadius", _level+1);
      if (uncertaintyRadius != null) uncertaintyRadius.print (_sb, "uncertaintyRadius", _level+1);
      if (offsetAngle != null) offsetAngle.print (_sb, "offsetAngle", _level+1);
      if (includedAngle != null) includedAngle.print (_sb, "includedAngle", _level+1);
      if (confidence != null) confidence.print (_sb, "confidence", _level+1);
      indent (_sb, _level);
      _sb.append ("}\n");
   }

}
