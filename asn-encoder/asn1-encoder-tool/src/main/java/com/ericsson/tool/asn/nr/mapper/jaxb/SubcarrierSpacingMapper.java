//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.0 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2021.09.08 at 04:50:40 PM IST 
//


package com.ericsson.tool.asn.nr.mapper.jaxb;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for SubcarrierSpacingMapper.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="SubcarrierSpacingMapper"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}token"&gt;
 *     &lt;enumeration value="kHz15"/&gt;
 *     &lt;enumeration value="kHz30"/&gt;
 *     &lt;enumeration value="kHz60"/&gt;
 *     &lt;enumeration value="kHz120"/&gt;
 *     &lt;enumeration value="kHz240"/&gt;
 *     &lt;enumeration value="spare3"/&gt;
 *     &lt;enumeration value="spare2"/&gt;
 *     &lt;enumeration value="spare1"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "SubcarrierSpacingMapper")
@XmlEnum
public enum SubcarrierSpacingMapper {

    @XmlEnumValue("kHz15")
    K_HZ_15("kHz15"),
    @XmlEnumValue("kHz30")
    K_HZ_30("kHz30"),
    @XmlEnumValue("kHz60")
    K_HZ_60("kHz60"),
    @XmlEnumValue("kHz120")
    K_HZ_120("kHz120"),
    @XmlEnumValue("kHz240")
    K_HZ_240("kHz240"),
    @XmlEnumValue("spare3")
    SPARE_3("spare3"),
    @XmlEnumValue("spare2")
    SPARE_2("spare2"),
    @XmlEnumValue("spare1")
    SPARE_1("spare1");
    private final String value;

    SubcarrierSpacingMapper(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static SubcarrierSpacingMapper fromValue(String v) {
        for (SubcarrierSpacingMapper c: SubcarrierSpacingMapper.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
