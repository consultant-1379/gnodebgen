//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.0 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2021.09.08 at 04:50:27 PM IST 
//


package com.ericsson.tool.asn.lte.mapper.jaxb;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for ProtocolIE-IDMapper.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="ProtocolIE-IDMapper"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}token"&gt;
 *     &lt;enumeration value="id_uEaggregateMaximumBitrate"/&gt;
 *     &lt;enumeration value="id_E_RABToBeSetupListHOReq"/&gt;
 *     &lt;enumeration value="id_Source_ToTarget_TransparentContainer"/&gt;
 *     &lt;enumeration value="id_E_RABToBeSetupItemHOReq"/&gt;
 *     &lt;enumeration value="id_UE_ContextInformation"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "ProtocolIE-IDMapper")
@XmlEnum
public enum ProtocolIEIDMapper {

    @XmlEnumValue("id_uEaggregateMaximumBitrate")
    ID_U_EAGGREGATE_MAXIMUM_BITRATE("id_uEaggregateMaximumBitrate"),
    @XmlEnumValue("id_E_RABToBeSetupListHOReq")
    ID_E_RAB_TO_BE_SETUP_LIST_HO_REQ("id_E_RABToBeSetupListHOReq"),
    @XmlEnumValue("id_Source_ToTarget_TransparentContainer")
    ID_SOURCE_TO_TARGET_TRANSPARENT_CONTAINER("id_Source_ToTarget_TransparentContainer"),
    @XmlEnumValue("id_E_RABToBeSetupItemHOReq")
    ID_E_RAB_TO_BE_SETUP_ITEM_HO_REQ("id_E_RABToBeSetupItemHOReq"),
    @XmlEnumValue("id_UE_ContextInformation")
    ID_UE_CONTEXT_INFORMATION("id_UE_ContextInformation");
    private final String value;

    ProtocolIEIDMapper(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static ProtocolIEIDMapper fromValue(String v) {
        for (ProtocolIEIDMapper c: ProtocolIEIDMapper.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
